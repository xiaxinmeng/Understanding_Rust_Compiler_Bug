{"sha": "a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2Y2JkNjRkYWU5N2ZjMGNmNjI2YWQ2ODhiMjg1ZjVhOGVjZGUzOTM=", "commit": {"author": {"name": "lcnr", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-24T07:27:15Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-16T21:42:09Z"}, "message": "words", "tree": {"sha": "2d4a2f7465d8b6ea3dbcca6e8cfb1848adedc708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d4a2f7465d8b6ea3dbcca6e8cfb1848adedc708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "html_url": "https://github.com/rust-lang/rust/commit/a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80acfea5a756004737a3dfc2a46b7e28b2629f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/80acfea5a756004737a3dfc2a46b7e28b2629f9a", "html_url": "https://github.com/rust-lang/rust/commit/80acfea5a756004737a3dfc2a46b7e28b2629f9a"}], "stats": {"total": 192, "additions": 87, "deletions": 105}, "files": [{"sha": "fe7a256d2100f1f5ad52800c20759dc93a3fb651", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -22,7 +22,7 @@ impl<T> IdFunctor for Box<T> {\n         unsafe {\n             // SAFETY: The raw pointer points to a valid value of type `T`.\n             let value = ptr::read(raw);\n-            // SAFETY: Convert's `Box<T>` to `Box<MaybeUninit<T>>` which is the\n+            // SAFETY: Converts `Box<T>` to `Box<MaybeUninit<T>>` which is the\n             // inverse of `Box::assume_init()` and should be safe.\n             let mut raw: Box<mem::MaybeUninit<T>> = Box::from_raw(raw.cast());\n             // SAFETY: Write the mapped value back into the `Box`."}, {"sha": "d8a1993b6cb3e1d02dbe60e6b7633d013caa8601", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n impl<'tcx, O: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Obligation<'tcx, O> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n         traits::Obligation {\n-            cause: self.cause.clone(),\n+            cause: self.cause,\n             recursion_depth: self.recursion_depth,\n             predicate: self.predicate.fold_with(folder),\n             param_env: self.param_env.fold_with(folder),"}, {"sha": "6e5f95c4527452d3c493d56aa81724d46dd34254", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -286,15 +286,15 @@ impl<'tcx, V> Canonical<'tcx, V> {\n pub type QueryOutlivesConstraint<'tcx> =\n     ty::Binder<ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>;\n \n-CloneTypeFoldableAndLiftImpls! {\n+TrivialTypeFoldableAndLiftImpls! {\n     for <'tcx> {\n         crate::infer::canonical::Certainty,\n         crate::infer::canonical::CanonicalVarInfo<'tcx>,\n         crate::infer::canonical::CanonicalVarKind<'tcx>,\n     }\n }\n \n-CloneTypeFoldableImpls! {\n+TrivialTypeFoldableImpls! {\n     for <'tcx> {\n         crate::infer::canonical::CanonicalVarInfos<'tcx>,\n     }"}, {"sha": "9cb8fd7eb9f705c24a404339d949d484da3341fb", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -48,7 +48,7 @@ macro_rules! CloneLiftImpls {\n /// Used for types that are `Copy` and which **do not care arena\n /// allocated data** (i.e., don't need to be folded).\n #[macro_export]\n-macro_rules! CloneTypeFoldableImpls {\n+macro_rules! TrivialTypeFoldableImpls {\n     (for <$tcx:lifetime> { $($ty:ty,)+ }) => {\n         $(\n             impl<$tcx> $crate::ty::fold::TypeFoldable<$tcx> for $ty {\n@@ -71,7 +71,7 @@ macro_rules! CloneTypeFoldableImpls {\n     };\n \n     ($($ty:ty,)+) => {\n-        CloneTypeFoldableImpls! {\n+        TrivialTypeFoldableImpls! {\n             for <'tcx> {\n                 $($ty,)+\n             }\n@@ -80,9 +80,9 @@ macro_rules! CloneTypeFoldableImpls {\n }\n \n #[macro_export]\n-macro_rules! CloneTypeFoldableAndLiftImpls {\n+macro_rules! TrivialTypeFoldableAndLiftImpls {\n     ($($t:tt)*) => {\n-        CloneTypeFoldableImpls! { $($t)* }\n+        TrivialTypeFoldableImpls! { $($t)* }\n         CloneLiftImpls! { $($t)* }\n     }\n }"}, {"sha": "397d2ffd565b1fe5fe2c55306b5aa346bf2be97c", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -29,7 +29,7 @@ impl From<ErrorReported> for ErrorHandled {\n     }\n }\n \n-CloneTypeFoldableAndLiftImpls! {\n+TrivialTypeFoldableAndLiftImpls! {\n     ErrorHandled,\n }\n "}, {"sha": "340b151a8ccee1dc84bdbf9cef7c3224904d6e64", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -742,7 +742,7 @@ pub enum ImplicitSelfKind {\n     None,\n }\n \n-CloneTypeFoldableAndLiftImpls! { BindingForm<'tcx>, }\n+TrivialTypeFoldableAndLiftImpls! { BindingForm<'tcx>, }\n \n mod binding_form_impl {\n     use crate::ich::StableHashingContext;\n@@ -2452,29 +2452,14 @@ impl UserTypeProjection {\n     }\n }\n \n-CloneTypeFoldableAndLiftImpls! { ProjectionKind, }\n+TrivialTypeFoldableAndLiftImpls! { ProjectionKind, }\n \n impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        use crate::mir::ProjectionElem::*;\n-\n-        let base = self.base.fold_with(folder);\n-        let projs: Vec<_> = self\n-            .projs\n-            .iter()\n-            .map(|&elem| match elem {\n-                Deref => Deref,\n-                Field(f, ()) => Field(f, ()),\n-                Index(()) => Index(()),\n-                Downcast(symbol, variantidx) => Downcast(symbol, variantidx),\n-                ConstantIndex { offset, min_length, from_end } => {\n-                    ConstantIndex { offset, min_length, from_end }\n-                }\n-                Subslice { from, to, from_end } => Subslice { from, to, from_end },\n-            })\n-            .collect();\n-\n-        UserTypeProjection { base, projs }\n+        UserTypeProjection {\n+            base: self.base.fold_with(folder),\n+            projs: self.projs.fold_with(folder),\n+        }\n     }\n \n     fn super_visit_with<Vs: TypeVisitor<'tcx>>(&self, visitor: &mut Vs) -> ControlFlow<()> {"}, {"sha": "fd6bb76dc438492587812e86ea47b53cbcaf39ec", "filename": "compiler/rustc_middle/src/mir/predecessors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpredecessors.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -75,6 +75,6 @@ impl<CTX> HashStable<CTX> for PredecessorCache {\n     }\n }\n \n-CloneTypeFoldableAndLiftImpls! {\n+TrivialTypeFoldableAndLiftImpls! {\n     PredecessorCache,\n }"}, {"sha": "dca46cb0a99a01090e8bb0d2f8ac4c03b7c4d520", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -4,7 +4,7 @@ use super::*;\n use crate::ty;\n use rustc_data_structures::functor::IdFunctor;\n \n-CloneTypeFoldableAndLiftImpls! {\n+TrivialTypeFoldableAndLiftImpls! {\n     BlockTailInfo,\n     MirPhase,\n     SourceInfo,\n@@ -24,7 +24,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             SwitchInt { discr, switch_ty, targets } => SwitchInt {\n                 discr: discr.fold_with(folder),\n                 switch_ty: switch_ty.fold_with(folder),\n-                targets: targets.clone(),\n+                targets,\n             },\n             Drop { place, target, unwind } => {\n                 Drop { place: place.fold_with(folder), target, unwind }\n@@ -42,7 +42,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 drop,\n             },\n             Call { func, args, destination, cleanup, from_hir_call, fn_span } => {\n-                let dest = destination.as_ref().map(|&(loc, dest)| (loc.fold_with(folder), dest));\n+                let dest = destination.map(|(loc, dest)| (loc.fold_with(folder), dest));\n \n                 Call {\n                     func: func.fold_with(folder),\n@@ -63,7 +63,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                     OverflowNeg(op) => OverflowNeg(op.fold_with(folder)),\n                     DivisionByZero(op) => DivisionByZero(op.fold_with(folder)),\n                     RemainderByZero(op) => RemainderByZero(op.fold_with(folder)),\n-                    ResumedAfterReturn(_) | ResumedAfterPanic(_) => msg.clone(),\n+                    ResumedAfterReturn(_) | ResumedAfterPanic(_) => msg,\n                 };\n                 Assert { cond: cond.fold_with(folder), expected, msg, target, cleanup }\n             }\n@@ -162,8 +162,7 @@ impl<'tcx> TypeFoldable<'tcx> for Place<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        let v = self.iter().map(|t| t.fold_with(folder)).collect::<Vec<_>>();\n-        folder.tcx().intern_place_elems(&v)\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_place_elems(v))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n@@ -322,7 +321,7 @@ impl<'tcx> TypeFoldable<'tcx> for GeneratorSavedLocal {\n \n impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, _: &mut F) -> Self {\n-        self.clone()\n+        self\n     }\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _: &mut V) -> ControlFlow<()> {\n         ControlFlow::CONTINUE"}, {"sha": "194e275496e955301d0c78b3b72d19298dace916", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -105,7 +105,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitAliasData<'tcx,\n ///////////////////////////////////////////////////////////////////////////\n // Lift implementations\n \n-CloneTypeFoldableAndLiftImpls! {\n+TrivialTypeFoldableAndLiftImpls! {\n     super::IfExpressionCause,\n     super::ImplSourceDiscriminantKindData,\n }"}, {"sha": "7ab192daf4b1d4ab2366c274191d608288a87640", "filename": "compiler/rustc_middle/src/ty/binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fty%2Fbinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fty%2Fbinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fbinding.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -8,7 +8,7 @@ pub enum BindingMode {\n     BindByValue(Mutability),\n }\n \n-CloneTypeFoldableAndLiftImpls! { BindingMode, }\n+TrivialTypeFoldableAndLiftImpls! { BindingMode, }\n \n impl BindingMode {\n     pub fn convert(ba: BindingAnnotation) -> BindingMode {"}, {"sha": "fdadc00dc395aedac27406068b378728614dfba7", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 14, "deletions": 46, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -13,7 +13,6 @@ use rustc_hir::def::Namespace;\n use rustc_hir::def_id::CRATE_DEF_INDEX;\n use rustc_index::vec::{Idx, IndexVec};\n \n-use smallvec::SmallVec;\n use std::fmt;\n use std::ops::ControlFlow;\n use std::rc::Rc;\n@@ -275,7 +274,7 @@ impl fmt::Debug for ty::PredicateAtom<'tcx> {\n // For things that don't carry any arena-allocated data (and are\n // copy...), just add them to this list.\n \n-CloneTypeFoldableAndLiftImpls! {\n+TrivialTypeFoldableAndLiftImpls! {\n     (),\n     bool,\n     usize,\n@@ -846,7 +845,7 @@ impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<T> {\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        fold_list(self, folder, |tcx, v| tcx.intern_existential_predicates(v))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_existential_predicates(v))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n@@ -856,7 +855,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>>\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        fold_list(self, folder, |tcx, v| tcx.intern_type_list(v))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n@@ -866,7 +865,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n@@ -928,25 +927,25 @@ impl<'tcx> TypeFoldable<'tcx> for interpret::GlobalId<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        let kind = match self.kind() {\n+        let kind = match *self.kind() {\n             ty::RawPtr(tm) => ty::RawPtr(tm.fold_with(folder)),\n             ty::Array(typ, sz) => ty::Array(typ.fold_with(folder), sz.fold_with(folder)),\n             ty::Slice(typ) => ty::Slice(typ.fold_with(folder)),\n-            ty::Adt(tid, substs) => ty::Adt(*tid, substs.fold_with(folder)),\n-            ty::Dynamic(ref trait_ty, ref region) => {\n+            ty::Adt(tid, substs) => ty::Adt(tid, substs.fold_with(folder)),\n+            ty::Dynamic(trait_ty, region) => {\n                 ty::Dynamic(trait_ty.fold_with(folder), region.fold_with(folder))\n             }\n             ty::Tuple(ts) => ty::Tuple(ts.fold_with(folder)),\n-            ty::FnDef(def_id, substs) => ty::FnDef(*def_id, substs.fold_with(folder)),\n+            ty::FnDef(def_id, substs) => ty::FnDef(def_id, substs.fold_with(folder)),\n             ty::FnPtr(f) => ty::FnPtr(f.fold_with(folder)),\n-            ty::Ref(ref r, ty, mutbl) => ty::Ref(r.fold_with(folder), ty.fold_with(folder), *mutbl),\n+            ty::Ref(r, ty, mutbl) => ty::Ref(r.fold_with(folder), ty.fold_with(folder), mutbl),\n             ty::Generator(did, substs, movability) => {\n-                ty::Generator(*did, substs.fold_with(folder), *movability)\n+                ty::Generator(did, substs.fold_with(folder), movability)\n             }\n             ty::GeneratorWitness(types) => ty::GeneratorWitness(types.fold_with(folder)),\n-            ty::Closure(did, substs) => ty::Closure(*did, substs.fold_with(folder)),\n-            ty::Projection(ref data) => ty::Projection(data.fold_with(folder)),\n-            ty::Opaque(did, substs) => ty::Opaque(*did, substs.fold_with(folder)),\n+            ty::Closure(did, substs) => ty::Closure(did, substs.fold_with(folder)),\n+            ty::Projection(data) => ty::Projection(data.fold_with(folder)),\n+            ty::Opaque(did, substs) => ty::Opaque(did, substs.fold_with(folder)),\n \n             ty::Bool\n             | ty::Char\n@@ -1060,7 +1059,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n-        fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n+        ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<()> {\n@@ -1140,34 +1139,3 @@ impl<'tcx> TypeFoldable<'tcx> for InferConst<'tcx> {\n         ControlFlow::CONTINUE\n     }\n }\n-\n-// Does the equivalent of\n-// ```\n-// let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n-// folder.tcx().intern_*(&v)\n-// ```\n-fn fold_list<'tcx, F, T>(\n-    list: &'tcx ty::List<T>,\n-    folder: &mut F,\n-    intern: impl FnOnce(TyCtxt<'tcx>, &[T]) -> &'tcx ty::List<T>,\n-) -> &'tcx ty::List<T>\n-where\n-    F: TypeFolder<'tcx>,\n-    T: TypeFoldable<'tcx> + PartialEq + Copy,\n-{\n-    let mut iter = list.iter();\n-    // Look for the first element that changed\n-    if let Some((i, new_t)) = iter.by_ref().enumerate().find_map(|(i, t)| {\n-        let new_t = t.fold_with(folder);\n-        if new_t == t { None } else { Some((i, new_t)) }\n-    }) {\n-        // An element changed, prepare to intern the resulting list\n-        let mut new_list = SmallVec::<[_; 8]>::with_capacity(list.len());\n-        new_list.extend_from_slice(&list[..i]);\n-        new_list.push(new_t);\n-        new_list.extend(iter.map(|t| t.fold_with(folder)));\n-        intern(folder.tcx(), &new_list)\n-    } else {\n-        list\n-    }\n-}"}, {"sha": "e23c3f5196709e626136c0a429ddb38f37ee585b", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -1130,6 +1130,37 @@ pub fn needs_drop_components(\n     }\n }\n \n+// Does the equivalent of\n+// ```\n+// let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n+// folder.tcx().intern_*(&v)\n+// ```\n+pub fn fold_list<'tcx, F, T>(\n+    list: &'tcx ty::List<T>,\n+    folder: &mut F,\n+    intern: impl FnOnce(TyCtxt<'tcx>, &[T]) -> &'tcx ty::List<T>,\n+) -> &'tcx ty::List<T>\n+where\n+    F: TypeFolder<'tcx>,\n+    T: TypeFoldable<'tcx> + PartialEq + Copy,\n+{\n+    let mut iter = list.iter();\n+    // Look for the first element that changed\n+    if let Some((i, new_t)) = iter.by_ref().enumerate().find_map(|(i, t)| {\n+        let new_t = t.fold_with(folder);\n+        if new_t == t { None } else { Some((i, new_t)) }\n+    }) {\n+        // An element changed, prepare to intern the resulting list\n+        let mut new_list = SmallVec::<[_; 8]>::with_capacity(list.len());\n+        new_list.extend_from_slice(&list[..i]);\n+        new_list.push(new_t);\n+        new_list.extend(iter.map(|t| t.fold_with(folder)));\n+        intern(folder.tcx(), &new_list)\n+    } else {\n+        list\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug, HashStable, TyEncodable, TyDecodable)]\n pub struct AlwaysRequiresDrop;\n "}, {"sha": "d429d889fcc15b3cbd744c0fc0481640f903869d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -671,9 +671,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            OutputTypeParameterMismatch(ref found_trait_ref, ref expected_trait_ref, _) => {\n-                let found_trait_ref = self.resolve_vars_if_possible(*found_trait_ref);\n-                let expected_trait_ref = self.resolve_vars_if_possible(*expected_trait_ref);\n+            OutputTypeParameterMismatch(found_trait_ref, expected_trait_ref, _) => {\n+                let found_trait_ref = self.resolve_vars_if_possible(found_trait_ref);\n+                let expected_trait_ref = self.resolve_vars_if_possible(expected_trait_ref);\n \n                 if expected_trait_ref.self_ty().references_error() {\n                     return;"}, {"sha": "dead795c6afe7ecb14e317a42e16fefbaa145ba8", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -365,7 +365,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 }\n             }\n \n-            ty::Projection(ref data) if !data.has_escaping_bound_vars() => {\n+            ty::Projection(data) if !data.has_escaping_bound_vars() => {\n                 // This is kind of hacky -- we need to be able to\n                 // handle normalization within binders because\n                 // otherwise we wind up a need to normalize when doing\n@@ -381,7 +381,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 let normalized_ty = normalize_projection_type(\n                     self.selcx,\n                     self.param_env,\n-                    *data,\n+                    data,\n                     self.cause.clone(),\n                     self.depth,\n                     &mut self.obligations,"}, {"sha": "f05582f0614299b0682be31434a6a4f5bbffc7b9", "filename": "compiler/rustc_trait_selection/src/traits/query/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -43,7 +43,7 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n         let c_ty = self.infcx.canonicalize_query(self.param_env.and(ty), &mut orig_values);\n         let span = self.cause.span;\n         debug!(\"c_ty = {:?}\", c_ty);\n-        if let Ok(result) = &tcx.dropck_outlives(c_ty) {\n+        if let Ok(result) = tcx.dropck_outlives(c_ty) {\n             if result.is_proven() {\n                 if let Ok(InferOk { value, obligations }) =\n                     self.infcx.instantiate_query_response_and_region_obligations("}, {"sha": "873d300a5e309047c5b9d4f70b34ab53f664056d", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -145,7 +145,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::Projection(ref data) if !data.has_escaping_bound_vars() => {\n+            ty::Projection(data) if !data.has_escaping_bound_vars() => {\n                 // This is kind of hacky -- we need to be able to\n                 // handle normalization within binders because\n                 // otherwise we wind up a need to normalize when doing\n@@ -165,7 +165,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 // so we cannot canonicalize it.\n                 let c_data = self\n                     .infcx\n-                    .canonicalize_hr_query_hack(self.param_env.and(*data), &mut orig_values);\n+                    .canonicalize_hr_query_hack(self.param_env.and(data), &mut orig_values);\n                 debug!(\"QueryNormalizer: c_data = {:#?}\", c_data);\n                 debug!(\"QueryNormalizer: orig_values = {:#?}\", orig_values);\n                 match tcx.normalize_projection_ty(c_data) {\n@@ -180,7 +180,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                             self.cause,\n                             self.param_env,\n                             &orig_values,\n-                            &result,\n+                            result,\n                         ) {\n                             Ok(InferOk { value: result, obligations }) => {\n                                 debug!(\"QueryNormalizer: result = {:#?}\", result);"}, {"sha": "f5fa52c915d9039b393c4c4a1d98444cddfa42dd", "filename": "compiler/rustc_trait_selection/src/traits/query/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Foutlives_bounds.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -68,7 +68,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n             &ObligationCause::misc(span, body_id),\n             param_env,\n             &orig_values,\n-            &result,\n+            result,\n         );\n         debug!(\"implied_outlives_bounds for {:?}: {:#?}\", ty, result);\n         let result = match result {"}, {"sha": "130ffa1a33aebc7eb8aa89d2c2f37b13f4842371", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fmod.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -81,16 +81,14 @@ pub trait QueryTypeOp<'tcx>: fmt::Debug + Sized + TypeFoldable<'tcx> + 'tcx {\n         // like the subtype query, which go awry around\n         // `'static` otherwise.\n         let mut canonical_var_values = OriginalQueryValues::default();\n-        let canonical_self =\n-            infcx.canonicalize_hr_query_hack(query_key.clone(), &mut canonical_var_values);\n+        let old_param_env = query_key.param_env;\n+        let canonical_self = infcx.canonicalize_hr_query_hack(query_key, &mut canonical_var_values);\n         let canonical_result = Self::perform_query(infcx.tcx, canonical_self)?;\n \n-        let param_env = query_key.param_env;\n-\n         let InferOk { value, obligations } = infcx\n             .instantiate_nll_query_response_and_region_obligations(\n                 &ObligationCause::dummy(),\n-                param_env,\n+                old_param_env,\n                 &canonical_var_values,\n                 canonical_result,\n                 output_query_region_constraints,"}, {"sha": "478f8a16169edb6d192e4a029d7275b2966acece", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cbd64dae97fc0cf626ad688b285f5a8ecde393/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=a6cbd64dae97fc0cf626ad688b285f5a8ecde393", "patch": "@@ -1393,18 +1393,19 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                                         // Determine exactly which obligation wasn't met, so\n                                         // that we can give more context in the error.\n                                         if !self.predicate_may_hold(obligation) {\n-                                            let o =\n-                                                self.resolve_vars_if_possible(obligation.clone());\n+                                            let nested_predicate =\n+                                                self.resolve_vars_if_possible(obligation.predicate);\n                                             let predicate =\n                                                 self.resolve_vars_if_possible(predicate);\n-                                            let p = if predicate == o.predicate {\n+                                            let p = if predicate == nested_predicate {\n                                                 // Avoid \"`MyStruct: Foo` which is required by\n                                                 // `MyStruct: Foo`\" in E0599.\n                                                 None\n                                             } else {\n                                                 Some(predicate)\n                                             };\n-                                            possibly_unsatisfied_predicates.push((o.predicate, p));\n+                                            possibly_unsatisfied_predicates\n+                                                .push((nested_predicate, p));\n                                         }\n                                     }\n                                 }"}]}