{"sha": "1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOWEyMzI2YjU4YjFkZTQzY2IzZDFiZmFlMWUxNDAzZjVkMDU5ZWY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-21T12:39:05Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-27T09:44:55Z"}, "message": "Rename `RegionFudger` to `InferenceFudger`", "tree": {"sha": "ee5c97d21d32ffd4157ca33931fb022e037984b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee5c97d21d32ffd4157ca33931fb022e037984b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef", "html_url": "https://github.com/rust-lang/rust/commit/1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc09fc8b2b678ea605254ea9a0fd58da3e4d44b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cc09fc8b2b678ea605254ea9a0fd58da3e4d44b", "html_url": "https://github.com/rust-lang/rust/commit/6cc09fc8b2b678ea605254ea9a0fd58da3e4d44b"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "a335a21359bce06f7a4f6a4a676f8601f21c139b", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef", "patch": "@@ -18,7 +18,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// from `&[u32; 3]` to `&[u32]` and make the users life more\n     /// pleasant.\n     ///\n-    /// The way we do this is using `fudge_regions_if_ok`. What the\n+    /// The way we do this is using `fudge_inference_if_ok`. What the\n     /// routine actually does is to start a snapshot and execute the\n     /// closure `f`. In our example above, what this closure will do\n     /// is to unify the expectation (`Option<&[u32]>`) with the actual\n@@ -27,7 +27,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// with `&?a [u32]`, where `?a` is a fresh lifetime variable. The\n     /// input type (`?T`) is then returned by `f()`.\n     ///\n-    /// At this point, `fudge_regions_if_ok` will normalize all type\n+    /// At this point, `fudge_inference_if_ok` will normalize all type\n     /// variables, converting `?T` to `&?a [u32]` and end the\n     /// snapshot. The problem is that we can't just return this type\n     /// out, because it references the region variable `?a`, and that\n@@ -46,15 +46,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// the actual types (`?T`, `Option<?T>`) -- and remember that\n     /// after the snapshot is popped, the variable `?T` is no longer\n     /// unified.\n-    pub fn fudge_regions_if_ok<T, E, F>(\n+    pub fn fudge_inference_if_ok<T, E, F>(\n         &self,\n         origin: &RegionVariableOrigin,\n         f: F,\n     ) -> Result<T, E> where\n         F: FnOnce() -> Result<T, E>,\n         T: TypeFoldable<'tcx>,\n     {\n-        debug!(\"fudge_regions_if_ok(origin={:?})\", origin);\n+        debug!(\"fudge_inference_if_ok(origin={:?})\", origin);\n \n         let (type_variables, region_vars, value) = self.probe(|snapshot| {\n             match f() {\n@@ -91,7 +91,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             return Ok(value);\n         }\n \n-        let mut fudger = RegionFudger {\n+        let mut fudger = InferenceFudger {\n             infcx: self,\n             type_variables: &type_variables,\n             region_vars: &region_vars,\n@@ -102,14 +102,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-pub struct RegionFudger<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n+pub struct InferenceFudger<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n     type_variables: &'a Range<TyVid>,\n     region_vars: &'a Range<RegionVid>,\n     origin: &'a RegionVariableOrigin,\n }\n \n-impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionFudger<'a, 'gcx, 'tcx> {\n+impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }"}, {"sha": "c0a869d99b9de84eb044f96c06a5bedf5460168f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=1f9a2326b58b1de43cb3d1bfae1e1403f5d059ef", "patch": "@@ -3231,7 +3231,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             Some(ret) => ret,\n             None => return Vec::new()\n         };\n-        let expect_args = self.fudge_regions_if_ok(&RegionVariableOrigin::Coercion(call_span), || {\n+        let expect_args = self.fudge_inference_if_ok(&RegionVariableOrigin::Coercion(call_span), || {\n             // Attempt to apply a subtyping relationship between the formal\n             // return type (likely containing type variables if the function\n             // is polymorphic) and the expected return type."}]}