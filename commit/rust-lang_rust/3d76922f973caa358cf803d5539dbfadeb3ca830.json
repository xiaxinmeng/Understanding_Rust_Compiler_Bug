{"sha": "3d76922f973caa358cf803d5539dbfadeb3ca830", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNzY5MjJmOTczY2FhMzU4Y2Y4MDNkNTUzOWRiZmFkZWIzY2E4MzA=", "commit": {"author": {"name": "Donovan Preston", "email": "donovanpreston@gmail.com", "date": "2012-01-27T22:04:13Z"}, "committer": {"name": "Donovan Preston", "email": "donovanpreston@gmail.com", "date": "2012-01-27T22:04:13Z"}, "message": "Implement timers.", "tree": {"sha": "cf3dfdd5ba09ad917ba1a5d8e84e147d0b4dff6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf3dfdd5ba09ad917ba1a5d8e84e147d0b4dff6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d76922f973caa358cf803d5539dbfadeb3ca830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d76922f973caa358cf803d5539dbfadeb3ca830", "html_url": "https://github.com/rust-lang/rust/commit/3d76922f973caa358cf803d5539dbfadeb3ca830", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d76922f973caa358cf803d5539dbfadeb3ca830/comments", "author": {"login": "fzzzy", "id": 46048, "node_id": "MDQ6VXNlcjQ2MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/46048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fzzzy", "html_url": "https://github.com/fzzzy", "followers_url": "https://api.github.com/users/fzzzy/followers", "following_url": "https://api.github.com/users/fzzzy/following{/other_user}", "gists_url": "https://api.github.com/users/fzzzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/fzzzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fzzzy/subscriptions", "organizations_url": "https://api.github.com/users/fzzzy/orgs", "repos_url": "https://api.github.com/users/fzzzy/repos", "events_url": "https://api.github.com/users/fzzzy/events{/privacy}", "received_events_url": "https://api.github.com/users/fzzzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fzzzy", "id": 46048, "node_id": "MDQ6VXNlcjQ2MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/46048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fzzzy", "html_url": "https://github.com/fzzzy", "followers_url": "https://api.github.com/users/fzzzy/followers", "following_url": "https://api.github.com/users/fzzzy/following{/other_user}", "gists_url": "https://api.github.com/users/fzzzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/fzzzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fzzzy/subscriptions", "organizations_url": "https://api.github.com/users/fzzzy/orgs", "repos_url": "https://api.github.com/users/fzzzy/repos", "events_url": "https://api.github.com/users/fzzzy/events{/privacy}", "received_events_url": "https://api.github.com/users/fzzzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac", "html_url": "https://github.com/rust-lang/rust/commit/e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac"}], "stats": {"total": 92, "additions": 83, "deletions": 9}, "files": [{"sha": "e1d155e7c164b63bc7498fd30eccbccf65b32179", "filename": "src/libstd/uvtmp.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3d76922f973caa358cf803d5539dbfadeb3ca830/src%2Flibstd%2Fuvtmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d76922f973caa358cf803d5539dbfadeb3ca830/src%2Flibstd%2Fuvtmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuvtmp.rs?ref=3d76922f973caa358cf803d5539dbfadeb3ca830", "patch": "@@ -27,6 +27,11 @@ native mod rustrt {\n         thread: thread,\n         req_id: u32,\n         chan: comm::chan<iomsg>);\n+    fn rust_uvtmp_timer(\n+        thread: thread,\n+        timeout: u32,\n+        req_id: u32,\n+        chan: comm::chan<iomsg>);\n     fn rust_uvtmp_delete_buf(buf: *u8);\n     fn rust_uvtmp_get_req_id(cd: connect_data) -> u32;\n }\n@@ -39,7 +44,9 @@ enum iomsg {\n     whatever,\n     connected(connect_data),\n     wrote(connect_data),\n-    read(connect_data, *u8, ctypes::ssize_t)\n+    read(connect_data, *u8, ctypes::ssize_t),\n+    timer(u32),\n+    exit\n }\n \n fn create_thread() -> thread {\n@@ -58,8 +65,7 @@ fn delete_thread(thread: thread) {\n     rustrt::rust_uvtmp_delete_thread(thread)\n }\n \n-fn connect(thread: thread, req_id: u32,\n-           ip: str, ch: comm::chan<iomsg>) -> connect_data {\n+fn connect(thread: thread, req_id: u32, ip: str, ch: comm::chan<iomsg>) -> connect_data {\n     str::as_buf(ip) {|ipbuf|\n         rustrt::rust_uvtmp_connect(thread, req_id, ipbuf, ch)\n     }\n@@ -80,6 +86,11 @@ fn read_start(thread: thread, req_id: u32,\n     rustrt::rust_uvtmp_read_start(thread, req_id, chan);\n }\n \n+fn timer_start(thread: thread, timeout: u32, req_id: u32,\n+              chan: comm::chan<iomsg>) {\n+    rustrt::rust_uvtmp_timer(thread, timeout, req_id, chan);\n+}\n+\n fn delete_buf(buf: *u8) {\n     rustrt::rust_uvtmp_delete_buf(buf);\n }\n@@ -106,7 +117,7 @@ fn test_connect() {\n     connect(thread, 0u32, \"74.125.224.146\", chan);\n     alt comm::recv(port) {\n       connected(cd) {\n-        close_connection(thread, 0u32);\n+        close_connection(thread, cd);\n       }\n     }\n     join_thread(thread);\n@@ -123,10 +134,10 @@ fn test_http() {\n     connect(thread, 0u32, \"74.125.224.146\", chan);\n     alt comm::recv(port) {\n       connected(cd) {\n-        write(thread, 0u32, str::bytes(\"GET / HTTP/1.0\\n\\n\"), chan);\n+        write(thread, cd, str::bytes(\"GET / HTTP/1.0\\n\\n\"), chan);\n         alt comm::recv(port) {\n           wrote(cd) {\n-            read_start(thread, 0u32, chan);\n+            read_start(thread, cd, chan);\n             let keep_going = true;\n             while keep_going {\n                 alt comm::recv(port) {\n@@ -146,7 +157,7 @@ fn test_http() {\n                   }\n                 }\n             }\n-            close_connection(thread, 0u32);\n+            close_connection(thread, cd);\n           }\n         }\n       }"}, {"sha": "63dcd7b64f2b8328cf57b0fa62d09617cc23b18c", "filename": "src/rt/rust_uvtmp.cpp", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3d76922f973caa358cf803d5539dbfadeb3ca830/src%2Frt%2Frust_uvtmp.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3d76922f973caa358cf803d5539dbfadeb3ca830/src%2Frt%2Frust_uvtmp.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uvtmp.cpp?ref=3d76922f973caa358cf803d5539dbfadeb3ca830", "patch": "@@ -15,9 +15,12 @@ struct connect_data {\n     chan_handle chan;\n };\n \n+const intptr_t whatever_tag = 0;\n const intptr_t connected_tag = 1;\n const intptr_t wrote_tag = 2;\n const intptr_t read_tag = 3;\n+const intptr_t timer_tag = 4;\n+const intptr_t exit_tag = 5;\n \n struct iomsg {\n     intptr_t tag;\n@@ -29,6 +32,7 @@ struct iomsg {\n \t    uint8_t *buf;\n \t    ssize_t nread;\n \t} read_val;\n+        uint32_t timer_req_id;\n     } val;\n };\n \n@@ -44,6 +48,13 @@ struct read_start_data {\n     chan_handle chan;\n };\n \n+struct timer_start_data {\n+    rust_uvtmp_thread *thread;\n+    uint32_t timeout;\n+    uint32_t req_id;\n+    chan_handle chan;\n+};\n+\n // FIXME: Copied from rust_builtins.cpp. Could bitrot easily\n static void\n send(rust_task *task, chan_handle chan, void *data) {\n@@ -72,7 +83,7 @@ class rust_uvtmp_thread : public rust_thread {\n     std::queue<connect_data*> close_connection_queue;\n     std::queue<write_data*> write_queue;\n     std::queue<read_start_data*> read_start_queue;\n-\n+    std::queue<timer_start_data*> timer_start_queue;\n public:\n \n     rust_uvtmp_thread() {\n@@ -139,6 +150,17 @@ class rust_uvtmp_thread : public rust_thread {\n         read_start_queue.push(rd);\n     }\n \n+    void\n+    timer(uint32_t timeout, uint32_t req_id, chan_handle chan) {\n+        scoped_lock with(lock);\n+\n+        timer_start_data *td = new timer_start_data();\n+        td->timeout = timeout;\n+        td->req_id = req_id;\n+        td->chan = chan;\n+        timer_start_queue.push(td);\n+    }\n+\n private:\n \n     virtual void\n@@ -159,6 +181,7 @@ class rust_uvtmp_thread : public rust_thread {\n \tclose_connections();\n \twrite_buffers();\n \tstart_reads();\n+        start_timers();\n \tclose_idle_if_stop();\n     }\n \n@@ -246,7 +269,7 @@ class rust_uvtmp_thread : public rust_thread {\n     void\n     on_write(uv_write_t *handle, write_data *wd) {\n \tiomsg msg;\n-\tmsg.tag = wrote_tag;\n+\tmsg.tag = timer_tag;\n \tmsg.val.wrote_val = wd->cd;\n \n \tsend(task, wd->chan, &msg);\n@@ -299,6 +322,40 @@ class rust_uvtmp_thread : public rust_thread {\n \t}\n     }\n \n+    void\n+    start_timers() {\n+\tassert (lock.lock_held_by_current_thread());\n+\twhile (!timer_start_queue.empty()) {\n+\t    timer_start_data *td = timer_start_queue.front();\n+\t    timer_start_queue.pop();\n+\n+            td->thread = this;\n+\n+            uv_timer_t *timer = (uv_timer_t *)malloc(sizeof(uv_timer_t));\n+            timer->data = td;\n+            int result = uv_timer_init(loop, timer);\n+            result = uv_timer_start(timer, timer_cb, td->timeout, 0);\n+\t}\n+    }\n+\n+    static void\n+    timer_cb(uv_timer_t *handle, int what) {\n+\ttimer_start_data *td = (timer_start_data*)handle->data;\n+\trust_uvtmp_thread *self = td->thread;\n+\tself->on_timer(td);\n+        free(handle);\n+    }\n+\n+    void\n+    on_timer(timer_start_data *rd) {\n+\tiomsg msg;\n+\tmsg.tag = timer_tag;\n+        msg.val.timer_req_id = rd->req_id;\n+\n+\tsend(task, rd->chan, &msg);\n+        delete rd;\n+    }\n+\n     void\n     close_idle_if_stop() {\n \tassert(lock.lock_held_by_current_thread());\n@@ -353,6 +410,11 @@ rust_uvtmp_read_start(rust_uvtmp_thread *thread, uint32_t req_id,\n     thread->read_start(req_id, *chan);\n }\n \n+extern \"C\" void\n+rust_uvtmp_timer(rust_uvtmp_thread *thread, uint32_t timeout, uint32_t req_id, chan_handle *chan) {\n+    thread->timer(timeout, req_id, *chan);\n+}\n+\n extern \"C\" void\n rust_uvtmp_delete_buf(uint8_t *buf) {\n     delete [] buf;"}, {"sha": "052f4a42779cd4405cec886ae21c03322d2ec73a", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d76922f973caa358cf803d5539dbfadeb3ca830/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/3d76922f973caa358cf803d5539dbfadeb3ca830/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=3d76922f973caa358cf803d5539dbfadeb3ca830", "patch": "@@ -96,6 +96,7 @@ rust_uvtmp_connect\n rust_uvtmp_close_connection\n rust_uvtmp_write\n rust_uvtmp_read_start\n+rust_uvtmp_timer\n rust_uvtmp_delete_buf\n rust_uvtmp_get_req_id\n "}]}