{"sha": "5e20475e47d3db1d32a7649a7c3a107caba32a14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMjA0NzVlNDdkM2RiMWQzMmE3NjQ5YTdjM2ExMDdjYWJhMzJhMTQ=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-05-31T22:34:10Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-03T23:47:38Z"}, "message": "Don't lint if contains a macro", "tree": {"sha": "cd623b9be0d84d0980e78990ad932f16987ea3fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd623b9be0d84d0980e78990ad932f16987ea3fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e20475e47d3db1d32a7649a7c3a107caba32a14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e20475e47d3db1d32a7649a7c3a107caba32a14", "html_url": "https://github.com/rust-lang/rust/commit/5e20475e47d3db1d32a7649a7c3a107caba32a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e20475e47d3db1d32a7649a7c3a107caba32a14/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c4de9d3dee3a7e16118df5c1cd2080af7350d98", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4de9d3dee3a7e16118df5c1cd2080af7350d98", "html_url": "https://github.com/rust-lang/rust/commit/7c4de9d3dee3a7e16118df5c1cd2080af7350d98"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "be0c44cae343f248488ad2a11e429edebae9e5af", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5e20475e47d3db1d32a7649a7c3a107caba32a14/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e20475e47d3db1d32a7649a7c3a107caba32a14/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=5e20475e47d3db1d32a7649a7c3a107caba32a14", "patch": "@@ -10,8 +10,6 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use std::marker::PhantomData;\n-\n declare_clippy_lint! {\n     /// **What it does:**\n     /// Lints usage of  `if let Some(v) = ... { y } else { x }` which is more\n@@ -88,19 +86,17 @@ struct OptionIfLetElseOccurence {\n     wrap_braces: bool,\n }\n \n-struct ReturnBreakContinueVisitor<'tcx> {\n+struct ReturnBreakContinueMacroVisitor {\n     seen_return_break_continue: bool,\n-    phantom_data: PhantomData<&'tcx bool>,\n }\n-impl<'tcx> ReturnBreakContinueVisitor<'tcx> {\n-    fn new() -> ReturnBreakContinueVisitor<'tcx> {\n-        ReturnBreakContinueVisitor {\n+impl ReturnBreakContinueMacroVisitor {\n+    fn new() -> ReturnBreakContinueMacroVisitor {\n+        ReturnBreakContinueMacroVisitor {\n             seen_return_break_continue: false,\n-            phantom_data: PhantomData,\n         }\n     }\n }\n-impl<'tcx> Visitor<'tcx> for ReturnBreakContinueVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for ReturnBreakContinueMacroVisitor {\n     type Map = Map<'tcx>;\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -119,14 +115,18 @@ impl<'tcx> Visitor<'tcx> for ReturnBreakContinueVisitor<'tcx> {\n             // desugaring, as this will detect a break if there's a while loop\n             // or a for loop inside the expression.\n             _ => {\n-                rustc_hir::intravisit::walk_expr(self, ex);\n+                if utils::in_macro(ex.span) {\n+                    self.seen_return_break_continue = true;\n+                } else {\n+                    rustc_hir::intravisit::walk_expr(self, ex);\n+                }\n             },\n         }\n     }\n }\n \n-fn contains_return_break_continue<'tcx>(expression: &'tcx Expr<'tcx>) -> bool {\n-    let mut recursive_visitor: ReturnBreakContinueVisitor<'tcx> = ReturnBreakContinueVisitor::new();\n+fn contains_return_break_continue_macro(expression: &Expr<'_>) -> bool {\n+    let mut recursive_visitor = ReturnBreakContinueMacroVisitor::new();\n     recursive_visitor.visit_expr(expression);\n     recursive_visitor.seen_return_break_continue\n }\n@@ -205,8 +205,8 @@ fn detect_option_if_let_else<'a>(cx: &LateContext<'_, 'a>, expr: &'a Expr<'a>) -\n         if let PatKind::TupleStruct(struct_qpath, &[inner_pat], _) = &arms[0].pat.kind;\n         if utils::match_qpath(struct_qpath, &paths::OPTION_SOME);\n         if let PatKind::Binding(bind_annotation, _, id, _) = &inner_pat.kind;\n-        if !contains_return_break_continue(arms[0].body);\n-        if !contains_return_break_continue(arms[1].body);\n+        if !contains_return_break_continue_macro(arms[0].body);\n+        if !contains_return_break_continue_macro(arms[1].body);\n         then {\n             let capture_mut = if bind_annotation == &BindingAnnotation::Mutable { \"mut \" } else { \"\" };\n             let some_body = extract_body_from_arm(&arms[0])?;"}]}