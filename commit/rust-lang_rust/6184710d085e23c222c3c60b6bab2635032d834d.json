{"sha": "6184710d085e23c222c3c60b6bab2635032d834d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxODQ3MTBkMDg1ZTIzYzIyMmMzYzYwYjZiYWIyNjM1MDMyZDgzNGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-02T18:16:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-02T18:16:33Z"}, "message": "Auto merge of #5120 - JohnTitor:split-up-drop-forget-ref, r=flip1995\n\nSplit up `drop_forget_ref` ui test\n\nPart of #2038\n\nchangelog: none", "tree": {"sha": "f4719b8053646a2673534d9f244b04b75265ddb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4719b8053646a2673534d9f244b04b75265ddb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6184710d085e23c222c3c60b6bab2635032d834d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6184710d085e23c222c3c60b6bab2635032d834d", "html_url": "https://github.com/rust-lang/rust/commit/6184710d085e23c222c3c60b6bab2635032d834d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6184710d085e23c222c3c60b6bab2635032d834d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6b87ef54a9a7ee9bd4bdf3ace3e449c0734cd8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b87ef54a9a7ee9bd4bdf3ace3e449c0734cd8e", "html_url": "https://github.com/rust-lang/rust/commit/c6b87ef54a9a7ee9bd4bdf3ace3e449c0734cd8e"}, {"sha": "fa32b41365aac3ee709c017366c1ebe9534b4d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa32b41365aac3ee709c017366c1ebe9534b4d6d", "html_url": "https://github.com/rust-lang/rust/commit/fa32b41365aac3ee709c017366c1ebe9534b4d6d"}], "stats": {"total": 519, "additions": 275, "deletions": 244}, "files": [{"sha": "b51c45ea5ee2a64e1350053da284dfb92c0378d4", "filename": "tests/ui/drop_forget_ref.stderr", "status": "removed", "additions": 0, "deletions": 220, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/c6b87ef54a9a7ee9bd4bdf3ace3e449c0734cd8e/tests%2Fui%2Fdrop_forget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6b87ef54a9a7ee9bd4bdf3ace3e449c0734cd8e/tests%2Fui%2Fdrop_forget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.stderr?ref=c6b87ef54a9a7ee9bd4bdf3ace3e449c0734cd8e", "patch": "@@ -1,220 +0,0 @@\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:9:5\n-   |\n-LL |     drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::drop-ref` implied by `-D warnings`\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:9:10\n-   |\n-LL |     drop(&SomeStruct);\n-   |          ^^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:10:5\n-   |\n-LL |     forget(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::forget-ref` implied by `-D warnings`\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:10:12\n-   |\n-LL |     forget(&SomeStruct);\n-   |            ^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:13:5\n-   |\n-LL |     drop(&owned1);\n-   |     ^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:13:10\n-   |\n-LL |     drop(&owned1);\n-   |          ^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:14:5\n-   |\n-LL |     drop(&&owned1);\n-   |     ^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&&SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:14:10\n-   |\n-LL |     drop(&&owned1);\n-   |          ^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:15:5\n-   |\n-LL |     drop(&mut owned1);\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:15:10\n-   |\n-LL |     drop(&mut owned1);\n-   |          ^^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:18:5\n-   |\n-LL |     forget(&owned2);\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:18:12\n-   |\n-LL |     forget(&owned2);\n-   |            ^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:19:5\n-   |\n-LL |     forget(&&owned2);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&&SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:19:12\n-   |\n-LL |     forget(&&owned2);\n-   |            ^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:20:5\n-   |\n-LL |     forget(&mut owned2);\n-   |     ^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:20:12\n-   |\n-LL |     forget(&mut owned2);\n-   |            ^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:24:5\n-   |\n-LL |     drop(reference1);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:24:10\n-   |\n-LL |     drop(reference1);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:25:5\n-   |\n-LL |     forget(&*reference1);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:25:12\n-   |\n-LL |     forget(&*reference1);\n-   |            ^^^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:28:5\n-   |\n-LL |     drop(reference2);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:28:10\n-   |\n-LL |     drop(reference2);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:30:5\n-   |\n-LL |     forget(reference3);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&mut SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:30:12\n-   |\n-LL |     forget(reference3);\n-   |            ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:33:5\n-   |\n-LL |     drop(reference4);\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:33:10\n-   |\n-LL |     drop(reference4);\n-   |          ^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:34:5\n-   |\n-LL |     forget(reference4);\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:34:12\n-   |\n-LL |     forget(reference4);\n-   |            ^^^^^^^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:39:5\n-   |\n-LL |     drop(&val);\n-   |     ^^^^^^^^^^\n-   |\n-note: argument has type `&T`\n-  --> $DIR/drop_forget_ref.rs:39:10\n-   |\n-LL |     drop(&val);\n-   |          ^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:45:5\n-   |\n-LL |     forget(&val);\n-   |     ^^^^^^^^^^^^\n-   |\n-note: argument has type `&T`\n-  --> $DIR/drop_forget_ref.rs:45:12\n-   |\n-LL |     forget(&val);\n-   |            ^^^^\n-\n-error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:53:5\n-   |\n-LL |     std::mem::drop(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:53:20\n-   |\n-LL |     std::mem::drop(&SomeStruct);\n-   |                    ^^^^^^^^^^^\n-\n-error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n-  --> $DIR/drop_forget_ref.rs:56:5\n-   |\n-LL |     std::mem::forget(&SomeStruct);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: argument has type `&SomeStruct`\n-  --> $DIR/drop_forget_ref.rs:56:22\n-   |\n-LL |     std::mem::forget(&SomeStruct);\n-   |                      ^^^^^^^^^^^\n-\n-error: aborting due to 18 previous errors\n-"}, {"sha": "9181d789d4fb1a95f6b7f01505b6014fad9660c0", "filename": "tests/ui/drop_ref.rs", "status": "renamed", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6184710d085e23c222c3c60b6bab2635032d834d/tests%2Fui%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6184710d085e23c222c3c60b6bab2635032d834d/tests%2Fui%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.rs?ref=6184710d085e23c222c3c60b6bab2635032d834d", "patch": "@@ -1,37 +1,27 @@\n-#![warn(clippy::drop_ref, clippy::forget_ref)]\n-#![allow(clippy::toplevel_ref_arg, clippy::similar_names, clippy::needless_pass_by_value)]\n+#![warn(clippy::drop_ref)]\n+#![allow(clippy::toplevel_ref_arg)]\n \n-use std::mem::{drop, forget};\n+use std::mem::drop;\n \n struct SomeStruct;\n \n fn main() {\n     drop(&SomeStruct);\n-    forget(&SomeStruct);\n \n     let mut owned1 = SomeStruct;\n     drop(&owned1);\n     drop(&&owned1);\n     drop(&mut owned1);\n     drop(owned1); //OK\n-    let mut owned2 = SomeStruct;\n-    forget(&owned2);\n-    forget(&&owned2);\n-    forget(&mut owned2);\n-    forget(owned2); //OK\n \n     let reference1 = &SomeStruct;\n     drop(reference1);\n-    forget(&*reference1);\n \n     let reference2 = &mut SomeStruct;\n     drop(reference2);\n-    let reference3 = &mut SomeStruct;\n-    forget(reference3);\n \n-    let ref reference4 = SomeStruct;\n-    drop(reference4);\n-    forget(reference4);\n+    let ref reference3 = SomeStruct;\n+    drop(reference3);\n }\n \n #[allow(dead_code)]\n@@ -40,20 +30,11 @@ fn test_generic_fn_drop<T>(val: T) {\n     drop(val); //OK\n }\n \n-#[allow(dead_code)]\n-fn test_generic_fn_forget<T>(val: T) {\n-    forget(&val);\n-    forget(val); //OK\n-}\n-\n #[allow(dead_code)]\n fn test_similarly_named_function() {\n     fn drop<T>(_val: T) {}\n     drop(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n     std::mem::drop(&SomeStruct);\n-    fn forget<T>(_val: T) {}\n-    forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n-    std::mem::forget(&SomeStruct);\n }\n \n #[derive(Copy, Clone)]", "previous_filename": "tests/ui/drop_forget_ref.rs"}, {"sha": "35ae88b78a4c5d28b9cfe56de106c8bf863e5c54", "filename": "tests/ui/drop_ref.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/6184710d085e23c222c3c60b6bab2635032d834d/tests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6184710d085e23c222c3c60b6bab2635032d834d/tests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_ref.stderr?ref=6184710d085e23c222c3c60b6bab2635032d834d", "patch": "@@ -0,0 +1,111 @@\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+  --> $DIR/drop_ref.rs:9:5\n+   |\n+LL |     drop(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::drop-ref` implied by `-D warnings`\n+note: argument has type `&SomeStruct`\n+  --> $DIR/drop_ref.rs:9:10\n+   |\n+LL |     drop(&SomeStruct);\n+   |          ^^^^^^^^^^^\n+\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+  --> $DIR/drop_ref.rs:12:5\n+   |\n+LL |     drop(&owned1);\n+   |     ^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/drop_ref.rs:12:10\n+   |\n+LL |     drop(&owned1);\n+   |          ^^^^^^^\n+\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+  --> $DIR/drop_ref.rs:13:5\n+   |\n+LL |     drop(&&owned1);\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&&SomeStruct`\n+  --> $DIR/drop_ref.rs:13:10\n+   |\n+LL |     drop(&&owned1);\n+   |          ^^^^^^^^\n+\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+  --> $DIR/drop_ref.rs:14:5\n+   |\n+LL |     drop(&mut owned1);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&mut SomeStruct`\n+  --> $DIR/drop_ref.rs:14:10\n+   |\n+LL |     drop(&mut owned1);\n+   |          ^^^^^^^^^^^\n+\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+  --> $DIR/drop_ref.rs:18:5\n+   |\n+LL |     drop(reference1);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/drop_ref.rs:18:10\n+   |\n+LL |     drop(reference1);\n+   |          ^^^^^^^^^^\n+\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+  --> $DIR/drop_ref.rs:21:5\n+   |\n+LL |     drop(reference2);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&mut SomeStruct`\n+  --> $DIR/drop_ref.rs:21:10\n+   |\n+LL |     drop(reference2);\n+   |          ^^^^^^^^^^\n+\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+  --> $DIR/drop_ref.rs:24:5\n+   |\n+LL |     drop(reference3);\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/drop_ref.rs:24:10\n+   |\n+LL |     drop(reference3);\n+   |          ^^^^^^^^^^\n+\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+  --> $DIR/drop_ref.rs:29:5\n+   |\n+LL |     drop(&val);\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type `&T`\n+  --> $DIR/drop_ref.rs:29:10\n+   |\n+LL |     drop(&val);\n+   |          ^^^^\n+\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing.\n+  --> $DIR/drop_ref.rs:37:5\n+   |\n+LL |     std::mem::drop(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/drop_ref.rs:37:20\n+   |\n+LL |     std::mem::drop(&SomeStruct);\n+   |                    ^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "447fdbe1fac53ee1dbbb1217473b87237d41a467", "filename": "tests/ui/forget_ref.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6184710d085e23c222c3c60b6bab2635032d834d/tests%2Fui%2Fforget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6184710d085e23c222c3c60b6bab2635032d834d/tests%2Fui%2Fforget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.rs?ref=6184710d085e23c222c3c60b6bab2635032d834d", "patch": "@@ -0,0 +1,48 @@\n+#![warn(clippy::forget_ref)]\n+#![allow(clippy::toplevel_ref_arg)]\n+\n+use std::mem::forget;\n+\n+struct SomeStruct;\n+\n+fn main() {\n+    forget(&SomeStruct);\n+\n+    let mut owned = SomeStruct;\n+    forget(&owned);\n+    forget(&&owned);\n+    forget(&mut owned);\n+    forget(owned); //OK\n+\n+    let reference1 = &SomeStruct;\n+    forget(&*reference1);\n+\n+    let reference2 = &mut SomeStruct;\n+    forget(reference2);\n+\n+    let ref reference3 = SomeStruct;\n+    forget(reference3);\n+}\n+\n+#[allow(dead_code)]\n+fn test_generic_fn_forget<T>(val: T) {\n+    forget(&val);\n+    forget(val); //OK\n+}\n+\n+#[allow(dead_code)]\n+fn test_similarly_named_function() {\n+    fn forget<T>(_val: T) {}\n+    forget(&SomeStruct); //OK; call to unrelated function which happens to have the same name\n+    std::mem::forget(&SomeStruct);\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct Error;\n+fn produce_half_owl_error() -> Result<(), Error> {\n+    Ok(())\n+}\n+\n+fn produce_half_owl_ok() -> Result<bool, ()> {\n+    Ok(true)\n+}"}, {"sha": "f90bcc2762cee2a92dcf73e96540011b68c0b422", "filename": "tests/ui/forget_ref.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/6184710d085e23c222c3c60b6bab2635032d834d/tests%2Fui%2Fforget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6184710d085e23c222c3c60b6bab2635032d834d/tests%2Fui%2Fforget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fforget_ref.stderr?ref=6184710d085e23c222c3c60b6bab2635032d834d", "patch": "@@ -0,0 +1,111 @@\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+  --> $DIR/forget_ref.rs:9:5\n+   |\n+LL |     forget(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::forget-ref` implied by `-D warnings`\n+note: argument has type `&SomeStruct`\n+  --> $DIR/forget_ref.rs:9:12\n+   |\n+LL |     forget(&SomeStruct);\n+   |            ^^^^^^^^^^^\n+\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+  --> $DIR/forget_ref.rs:12:5\n+   |\n+LL |     forget(&owned);\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/forget_ref.rs:12:12\n+   |\n+LL |     forget(&owned);\n+   |            ^^^^^^\n+\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+  --> $DIR/forget_ref.rs:13:5\n+   |\n+LL |     forget(&&owned);\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&&SomeStruct`\n+  --> $DIR/forget_ref.rs:13:12\n+   |\n+LL |     forget(&&owned);\n+   |            ^^^^^^^\n+\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+  --> $DIR/forget_ref.rs:14:5\n+   |\n+LL |     forget(&mut owned);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&mut SomeStruct`\n+  --> $DIR/forget_ref.rs:14:12\n+   |\n+LL |     forget(&mut owned);\n+   |            ^^^^^^^^^^\n+\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+  --> $DIR/forget_ref.rs:18:5\n+   |\n+LL |     forget(&*reference1);\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/forget_ref.rs:18:12\n+   |\n+LL |     forget(&*reference1);\n+   |            ^^^^^^^^^^^^\n+\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+  --> $DIR/forget_ref.rs:21:5\n+   |\n+LL |     forget(reference2);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&mut SomeStruct`\n+  --> $DIR/forget_ref.rs:21:12\n+   |\n+LL |     forget(reference2);\n+   |            ^^^^^^^^^^\n+\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+  --> $DIR/forget_ref.rs:24:5\n+   |\n+LL |     forget(reference3);\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/forget_ref.rs:24:12\n+   |\n+LL |     forget(reference3);\n+   |            ^^^^^^^^^^\n+\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+  --> $DIR/forget_ref.rs:29:5\n+   |\n+LL |     forget(&val);\n+   |     ^^^^^^^^^^^^\n+   |\n+note: argument has type `&T`\n+  --> $DIR/forget_ref.rs:29:12\n+   |\n+LL |     forget(&val);\n+   |            ^^^^\n+\n+error: calls to `std::mem::forget` with a reference instead of an owned value. Forgetting a reference does nothing.\n+  --> $DIR/forget_ref.rs:37:5\n+   |\n+LL |     std::mem::forget(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&SomeStruct`\n+  --> $DIR/forget_ref.rs:37:22\n+   |\n+LL |     std::mem::forget(&SomeStruct);\n+   |                      ^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}]}