{"sha": "10541584d134089e914dd0ee6eadc384b86c94b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNTQxNTg0ZDEzNDA4OWU5MTRkZDBlZTZlYWRjMzg0Yjg2Yzk0Yjc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-14T14:42:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-14T14:42:23Z"}, "message": "Rollup merge of #64302 - nnethercote:shrink-ObligationCauseCode, r=zackmdavis\n\nShrink `ObligationCauseCode`\n\nThese commits reduce the size of `ObligationCauseCode` from 56 bytes to 32 bytes on 64-bit. This reduces instruction counts on various benchmarks by up to 1%, due to less `memcpy`ing.", "tree": {"sha": "aca5584e85d90ca6944b7844f1a72aa9cfda400a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aca5584e85d90ca6944b7844f1a72aa9cfda400a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10541584d134089e914dd0ee6eadc384b86c94b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdfPxPCRBK7hj4Ov3rIwAAdHIIACs0gx0G7aLlsjwysxWjXZnu\nrsPC/Zk0AUcUyBGTgf0HwJbxRyvzKjSXXj816cVA0rkcn1aRgOaTj7xdnmMnmZzp\nmiiAEOuVWbXffVe+7oJq98456ifQeALTvhPf/CqVBU9Zvrz8oHuvSZNiJHJI9k0l\ngL30GbHWL3PUbyZQle3pXNu3DmIiQTdQybf0T1NCOXkestTbqRWkDgOgtDwZEfyQ\nSb2pC8bP5LId5pi82ckhsNUiKLo93DbfcwP3jHkzy+866s/AsjlwISnQ+6wd4GEk\nESty+2rOQrf0f0Uy2416S615ML5lgdgu7J7DJ3jFK79ltC9w04A38U7KWkrjfMw=\n=vrBc\n-----END PGP SIGNATURE-----\n", "payload": "tree aca5584e85d90ca6944b7844f1a72aa9cfda400a\nparent afc52916f658e7b5dc102ef7cd5b2784cd15c4e3\nparent 2e3b079836823446eb014c69866d6a0f8cca4ef2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568472143 +0200\ncommitter GitHub <noreply@github.com> 1568472143 +0200\n\nRollup merge of #64302 - nnethercote:shrink-ObligationCauseCode, r=zackmdavis\n\nShrink `ObligationCauseCode`\n\nThese commits reduce the size of `ObligationCauseCode` from 56 bytes to 32 bytes on 64-bit. This reduces instruction counts on various benchmarks by up to 1%, due to less `memcpy`ing.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10541584d134089e914dd0ee6eadc384b86c94b7", "html_url": "https://github.com/rust-lang/rust/commit/10541584d134089e914dd0ee6eadc384b86c94b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10541584d134089e914dd0ee6eadc384b86c94b7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afc52916f658e7b5dc102ef7cd5b2784cd15c4e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/afc52916f658e7b5dc102ef7cd5b2784cd15c4e3", "html_url": "https://github.com/rust-lang/rust/commit/afc52916f658e7b5dc102ef7cd5b2784cd15c4e3"}, {"sha": "2e3b079836823446eb014c69866d6a0f8cca4ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e3b079836823446eb014c69866d6a0f8cca4ef2", "html_url": "https://github.com/rust-lang/rust/commit/2e3b079836823446eb014c69866d6a0f8cca4ef2"}], "stats": {"total": 123, "additions": 75, "deletions": 48}, "files": [{"sha": "ab24b3f2f059f1b953a5b5befa982e9630090ff0", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=10541584d134089e914dd0ee6eadc384b86c94b7", "patch": "@@ -55,7 +55,8 @@ use crate::hir::def_id::DefId;\n use crate::hir::Node;\n use crate::infer::opaque_types;\n use crate::middle::region;\n-use crate::traits::{ObligationCause, ObligationCauseCode};\n+use crate::traits::{IfExpressionCause, MatchExpressionArmCause, ObligationCause};\n+use crate::traits::{ObligationCauseCode};\n use crate::ty::error::TypeError;\n use crate::ty::{self, subst::{Subst, SubstsRef}, Region, Ty, TyCtxt, TypeFoldable};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n@@ -624,13 +625,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                 }\n             }\n-            ObligationCauseCode::MatchExpressionArm {\n+            ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n                 source,\n                 ref prior_arms,\n                 last_ty,\n                 discrim_hir_id,\n                 ..\n-            } => match source {\n+            }) => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => {\n                     let msg = \"`if let` arms have incompatible types\";\n                     err.span_label(cause.span, msg);\n@@ -681,7 +682,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                 }\n             },\n-            ObligationCauseCode::IfExpression { then, outer, semicolon } => {\n+            ObligationCauseCode::IfExpression(box IfExpressionCause { then, outer, semicolon }) => {\n                 err.span_label(then, \"expected because of this\");\n                 outer.map(|sp| err.span_label(sp, \"if and else have incompatible types\"));\n                 if let Some(sp) = semicolon {\n@@ -1622,13 +1623,15 @@ impl<'tcx> ObligationCause<'tcx> {\n         use crate::traits::ObligationCauseCode::*;\n         match self.code {\n             CompareImplMethodObligation { .. } => Error0308(\"method not compatible with trait\"),\n-            MatchExpressionArm { source, .. } => Error0308(match source {\n-                hir::MatchSource::IfLetDesugar { .. } => \"`if let` arms have incompatible types\",\n-                hir::MatchSource::TryDesugar => {\n-                    \"try expression alternatives have incompatible types\"\n-                }\n-                _ => \"match arms have incompatible types\",\n-            }),\n+            MatchExpressionArm(box MatchExpressionArmCause { source, .. }) =>\n+                Error0308(match source {\n+                    hir::MatchSource::IfLetDesugar { .. } =>\n+                        \"`if let` arms have incompatible types\",\n+                    hir::MatchSource::TryDesugar => {\n+                        \"try expression alternatives have incompatible types\"\n+                    }\n+                    _ => \"match arms have incompatible types\",\n+                }),\n             IfExpression { .. } => Error0308(\"if and else have incompatible types\"),\n             IfExpressionWithNoElse => Error0317(\"if may be missing an else clause\"),\n             MainFunctionType => Error0580(\"main function has wrong type\"),\n@@ -1656,7 +1659,7 @@ impl<'tcx> ObligationCause<'tcx> {\n         match self.code {\n             CompareImplMethodObligation { .. } => \"method type is compatible with trait\",\n             ExprAssignable => \"expression is assignable\",\n-            MatchExpressionArm { source, .. } => match source {\n+            MatchExpressionArm(box MatchExpressionArmCause { source, .. }) => match source {\n                 hir::MatchSource::IfLetDesugar { .. } => \"`if let` arms have compatible types\",\n                 _ => \"match arms have compatible types\",\n             },"}, {"sha": "4494c034d51e2e087a3564bb086845ddb0f064c2", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=10541584d134089e914dd0ee6eadc384b86c94b7", "patch": "@@ -68,6 +68,10 @@ pub struct PendingPredicateObligation<'tcx> {\n     pub stalled_on: Vec<Ty<'tcx>>,\n }\n \n+// `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(PendingPredicateObligation<'_>, 136);\n+\n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context.\n     pub fn new() -> FulfillmentContext<'tcx> {"}, {"sha": "d2683090add4031e4790eb118756a00d7d471c71", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=10541584d134089e914dd0ee6eadc384b86c94b7", "patch": "@@ -123,6 +123,10 @@ pub struct Obligation<'tcx, T> {\n pub type PredicateObligation<'tcx> = Obligation<'tcx, ty::Predicate<'tcx>>;\n pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n+// `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(PredicateObligation<'_>, 112);\n+\n /// The reason why we incurred this obligation; used for error reporting.\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct ObligationCause<'tcx> {\n@@ -147,7 +151,8 @@ impl<'tcx> ObligationCause<'tcx> {\n             ObligationCauseCode::StartFunctionType => {\n                 tcx.sess.source_map().def_span(self.span)\n             }\n-            ObligationCauseCode::MatchExpressionArm { arm_span, .. } => arm_span,\n+            ObligationCauseCode::MatchExpressionArm(\n+                box MatchExpressionArmCause { arm_span, .. }) => arm_span,\n             _ => self.span,\n         }\n     }\n@@ -223,23 +228,13 @@ pub enum ObligationCauseCode<'tcx> {\n     ExprAssignable,\n \n     /// Computing common supertype in the arms of a match expression\n-    MatchExpressionArm {\n-        arm_span: Span,\n-        source: hir::MatchSource,\n-        prior_arms: Vec<Span>,\n-        last_ty: Ty<'tcx>,\n-        discrim_hir_id: hir::HirId,\n-    },\n+    MatchExpressionArm(Box<MatchExpressionArmCause<'tcx>>),\n \n     /// Computing common supertype in the pattern guard for the arms of a match expression\n     MatchExpressionArmPattern { span: Span, ty: Ty<'tcx> },\n \n     /// Computing common supertype in an if expression\n-    IfExpression {\n-        then: Span,\n-        outer: Option<Span>,\n-        semicolon: Option<Span>,\n-    },\n+    IfExpression(Box<IfExpressionCause>),\n \n     /// Computing common supertype of an if expression with no else counter-part\n     IfExpressionWithNoElse,\n@@ -269,6 +264,26 @@ pub enum ObligationCauseCode<'tcx> {\n     TrivialBound,\n }\n \n+// `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(ObligationCauseCode<'_>, 32);\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct MatchExpressionArmCause<'tcx> {\n+    pub arm_span: Span,\n+    pub source: hir::MatchSource,\n+    pub prior_arms: Vec<Span>,\n+    pub last_ty: Ty<'tcx>,\n+    pub discrim_hir_id: hir::HirId,\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct IfExpressionCause {\n+    pub then: Span,\n+    pub outer: Option<Span>,\n+    pub semicolon: Option<Span>,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash)]\n pub struct DerivedObligationCause<'tcx> {\n     /// The trait reference of the parent obligation that led to the"}, {"sha": "6930c9368282b8b9cfb0b2e79c7a2449a2ec2f69", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=10541584d134089e914dd0ee6eadc384b86c94b7", "patch": "@@ -508,31 +508,33 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n                 trait_item_def_id,\n             }),\n             super::ExprAssignable => Some(super::ExprAssignable),\n-            super::MatchExpressionArm {\n+            super::MatchExpressionArm(box super::MatchExpressionArmCause {\n                 arm_span,\n                 source,\n                 ref prior_arms,\n                 last_ty,\n                 discrim_hir_id,\n-            } => {\n+            }) => {\n                 tcx.lift(&last_ty).map(|last_ty| {\n-                    super::MatchExpressionArm {\n+                    super::MatchExpressionArm(box super::MatchExpressionArmCause {\n                         arm_span,\n                         source,\n                         prior_arms: prior_arms.clone(),\n                         last_ty,\n                         discrim_hir_id,\n-                    }\n+                    })\n                 })\n             }\n             super::MatchExpressionArmPattern { span, ty } => {\n                 tcx.lift(&ty).map(|ty| super::MatchExpressionArmPattern { span, ty })\n             }\n-            super::IfExpression { then, outer, semicolon } => Some(super::IfExpression {\n-                then,\n-                outer,\n-                semicolon,\n-            }),\n+            super::IfExpression(box super::IfExpressionCause { then, outer, semicolon }) => {\n+                Some(super::IfExpression(box super::IfExpressionCause {\n+                    then,\n+                    outer,\n+                    semicolon,\n+                }))\n+            }\n             super::IfExpressionWithNoElse => Some(super::IfExpressionWithNoElse),\n             super::MainFunctionType => Some(super::MainFunctionType),\n             super::StartFunctionType => Some(super::StartFunctionType),"}, {"sha": "308a3d8ebc2cfd4a88fa291d5d2978f81845c7f5", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=10541584d134089e914dd0ee6eadc384b86c94b7", "patch": "@@ -2,7 +2,8 @@ use crate::check::{FnCtxt, Expectation, Diverges, Needs};\n use crate::check::coercion::CoerceMany;\n use rustc::hir::{self, ExprKind};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc::traits::{ObligationCause, ObligationCauseCode};\n+use rustc::traits::{IfExpressionCause, MatchExpressionArmCause, ObligationCause};\n+use rustc::traits::{ObligationCauseCode};\n use rustc::ty::Ty;\n use syntax_pos::Span;\n \n@@ -146,13 +147,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // The reason for the first arm to fail is not that the match arms diverge,\n                     // but rather that there's a prior obligation that doesn't hold.\n                     0 => (arm_span, ObligationCauseCode::BlockTailExpression(arm.body.hir_id)),\n-                    _ => (expr.span, ObligationCauseCode::MatchExpressionArm {\n-                        arm_span,\n-                        source: match_src,\n-                        prior_arms: other_arms.clone(),\n-                        last_ty: prior_arm_ty.unwrap(),\n-                        discrim_hir_id: discrim.hir_id,\n-                    }),\n+                    _ => (expr.span,\n+                          ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n+                            arm_span,\n+                            source: match_src,\n+                            prior_arms: other_arms.clone(),\n+                            last_ty: prior_arm_ty.unwrap(),\n+                            discrim_hir_id: discrim.hir_id,\n+                          })\n+                         ),\n                 };\n                 let cause = self.cause(span, code);\n                 coercion.coerce(self, &cause, &arm.body, arm_ty);\n@@ -345,11 +348,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         // Finally construct the cause:\n-        self.cause(error_sp, ObligationCauseCode::IfExpression {\n+        self.cause(error_sp, ObligationCauseCode::IfExpression(box IfExpressionCause {\n             then: then_sp,\n             outer: outer_sp,\n             semicolon: remove_semicolon,\n-        })\n+        }))\n     }\n \n     fn demand_discriminant_type("}, {"sha": "d626bff15002049ae9e7433effcc254cd9174dbf", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=10541584d134089e914dd0ee6eadc384b86c94b7", "patch": "@@ -529,11 +529,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ); // recreated from (*) above\n \n                 // Check that E' = S'.\n-                let cause = &self.misc(hir_ty.span);\n+                let cause = self.misc(hir_ty.span);\n                 let InferOk {\n                     value: (),\n                     obligations,\n-                } = self.at(cause, self.param_env)\n+                } = self.at(&cause, self.param_env)\n                     .eq(*expected_ty, supplied_ty)?;\n                 all_obligations.extend(obligations);\n \n@@ -549,7 +549,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n                 all_obligations.push(\n                     Obligation::new(\n-                        cause.clone(),\n+                        cause,\n                         self.param_env,\n                         ty::Predicate::TypeOutlives(\n                             ty::Binder::dummy("}, {"sha": "51adf501b4db8510f59e1bad1ef45c4c999c2873", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10541584d134089e914dd0ee6eadc384b86c94b7/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=10541584d134089e914dd0ee6eadc384b86c94b7", "patch": "@@ -309,7 +309,7 @@ fn compare_predicate_entailment<'tcx>(\n \n             let cause = ObligationCause {\n                 span: impl_err_span,\n-                ..cause.clone()\n+                ..cause\n             };\n \n             let mut diag = struct_span_err!(tcx.sess,"}]}