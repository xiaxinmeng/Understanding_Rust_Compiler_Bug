{"sha": "7d41674b175cdb3452e042ef6f37141bc3788f8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNDE2NzRiMTc1Y2RiMzQ1MmUwNDJlZjZmMzcxNDFiYzM3ODhmOGI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-03-17T23:23:12Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-06-26T02:05:46Z"}, "message": "Clean up `tokenstream::Cursor` and `proc_macro`.", "tree": {"sha": "ec16e1a7ff23d8b594e45e6bcb1980d7a6740945", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec16e1a7ff23d8b594e45e6bcb1980d7a6740945"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d41674b175cdb3452e042ef6f37141bc3788f8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d41674b175cdb3452e042ef6f37141bc3788f8b", "html_url": "https://github.com/rust-lang/rust/commit/7d41674b175cdb3452e042ef6f37141bc3788f8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d41674b175cdb3452e042ef6f37141bc3788f8b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4488b7df97e62bfeed8c30b1922ce55ff254594", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4488b7df97e62bfeed8c30b1922ce55ff254594", "html_url": "https://github.com/rust-lang/rust/commit/d4488b7df97e62bfeed8c30b1922ce55ff254594"}], "stats": {"total": 82, "additions": 38, "deletions": 44}, "files": [{"sha": "b9f4fa63e6006435a9ee3c4d036f1290cf67b8db", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7d41674b175cdb3452e042ef6f37141bc3788f8b/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d41674b175cdb3452e042ef6f37141bc3788f8b/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=7d41674b175cdb3452e042ef6f37141bc3788f8b", "patch": "@@ -48,7 +48,7 @@ use std::str::FromStr;\n \n use syntax::errors::DiagnosticBuilder;\n use syntax::parse;\n-use syntax::tokenstream::TokenStream as TokenStream_;\n+use syntax::tokenstream;\n \n /// The main type provided by this crate, representing an abstract stream of\n /// tokens.\n@@ -60,9 +60,7 @@ use syntax::tokenstream::TokenStream as TokenStream_;\n /// The API of this type is intentionally bare-bones, but it'll be expanded over\n /// time!\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n-pub struct TokenStream {\n-    inner: TokenStream_,\n-}\n+pub struct TokenStream(tokenstream::TokenStream);\n \n /// Error returned from `TokenStream::from_str`.\n #[derive(Debug)]\n@@ -91,26 +89,22 @@ pub mod __internal {\n     use syntax::ext::hygiene::Mark;\n     use syntax::ptr::P;\n     use syntax::parse::{self, token, ParseSess};\n-    use syntax::tokenstream::{TokenTree, TokenStream as TokenStream_};\n+    use syntax::tokenstream;\n \n     use super::{TokenStream, LexError};\n \n     pub fn new_token_stream(item: P<ast::Item>) -> TokenStream {\n-        TokenStream {\n-            inner: TokenTree::Token(item.span, token::Interpolated(Rc::new(token::NtItem(item))))\n-                .into()\n-        }\n+        let (span, token) = (item.span, token::Interpolated(Rc::new(token::NtItem(item))));\n+        TokenStream(tokenstream::TokenTree::Token(span, token).into())\n     }\n \n-    pub fn token_stream_wrap(inner: TokenStream_) -> TokenStream {\n-        TokenStream {\n-            inner: inner\n-        }\n+    pub fn token_stream_wrap(inner: tokenstream::TokenStream) -> TokenStream {\n+        TokenStream(inner)\n     }\n \n     pub fn token_stream_parse_items(stream: TokenStream) -> Result<Vec<P<ast::Item>>, LexError> {\n         with_sess(move |(sess, _)| {\n-            let mut parser = parse::stream_to_parser(sess, stream.inner);\n+            let mut parser = parse::stream_to_parser(sess, stream.0);\n             let mut items = Vec::new();\n \n             while let Some(item) = try!(parser.parse_item().map_err(super::parse_to_lex_err)) {\n@@ -121,8 +115,8 @@ pub mod __internal {\n         })\n     }\n \n-    pub fn token_stream_inner(stream: TokenStream) -> TokenStream_ {\n-        stream.inner\n+    pub fn token_stream_inner(stream: TokenStream) -> tokenstream::TokenStream {\n+        stream.0\n     }\n \n     pub trait Registry {\n@@ -197,6 +191,6 @@ impl FromStr for TokenStream {\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl fmt::Display for TokenStream {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.inner.fmt(f)\n+        self.0.fmt(f)\n     }\n }"}, {"sha": "ab4f697071477dca9f567d0a9b5fee0f2be950d2", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7d41674b175cdb3452e042ef6f37141bc3788f8b/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d41674b175cdb3452e042ef6f37141bc3788f8b/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=7d41674b175cdb3452e042ef6f37141bc3788f8b", "patch": "@@ -199,7 +199,7 @@ impl TokenStream {\n     pub fn concat(mut streams: Vec<TokenStream>) -> TokenStream {\n         match streams.len() {\n             0 => TokenStream::empty(),\n-            1 => TokenStream::from(streams.pop().unwrap()),\n+            1 => streams.pop().unwrap(),\n             _ => TokenStream::concat_rc_slice(RcSlice::new(streams)),\n         }\n     }\n@@ -244,44 +244,44 @@ struct StreamCursor {\n     stack: Vec<(RcSlice<TokenStream>, usize)>,\n }\n \n-impl Iterator for Cursor {\n-    type Item = TokenTree;\n-\n+impl StreamCursor {\n     fn next(&mut self) -> Option<TokenTree> {\n-        let cursor = match self.0 {\n-            CursorKind::Stream(ref mut cursor) => cursor,\n-            CursorKind::Tree(ref tree, ref mut consumed @ false) => {\n-                *consumed = true;\n-                return Some(tree.clone());\n-            }\n-            _ => return None,\n-        };\n-\n         loop {\n-            if cursor.index < cursor.stream.len() {\n-                match cursor.stream[cursor.index].kind.clone() {\n-                    TokenStreamKind::Tree(tree) => {\n-                        cursor.index += 1;\n-                        return Some(tree);\n-                    }\n+            if self.index < self.stream.len() {\n+                self.index += 1;\n+                match self.stream[self.index - 1].kind.clone() {\n+                    TokenStreamKind::Tree(tree) => return Some(tree),\n                     TokenStreamKind::Stream(stream) => {\n-                        cursor.stack.push((mem::replace(&mut cursor.stream, stream),\n-                                           mem::replace(&mut cursor.index, 0) + 1));\n-                    }\n-                    TokenStreamKind::Empty => {\n-                        cursor.index += 1;\n+                        self.stack.push((mem::replace(&mut self.stream, stream),\n+                                         mem::replace(&mut self.index, 0)));\n                     }\n+                    TokenStreamKind::Empty => {}\n                 }\n-            } else if let Some((stream, index)) = cursor.stack.pop() {\n-                cursor.stream = stream;\n-                cursor.index = index;\n+            } else if let Some((stream, index)) = self.stack.pop() {\n+                self.stream = stream;\n+                self.index = index;\n             } else {\n                 return None;\n             }\n         }\n     }\n }\n \n+impl Iterator for Cursor {\n+    type Item = TokenTree;\n+\n+    fn next(&mut self) -> Option<TokenTree> {\n+        let (tree, consumed) = match self.0 {\n+            CursorKind::Tree(ref tree, ref mut consumed @ false) => (tree, consumed),\n+            CursorKind::Stream(ref mut cursor) => return cursor.next(),\n+            _ => return None,\n+        };\n+\n+        *consumed = true;\n+        Some(tree.clone())\n+    }\n+}\n+\n impl Cursor {\n     fn new(stream: TokenStream) -> Self {\n         Cursor(match stream.kind {"}]}