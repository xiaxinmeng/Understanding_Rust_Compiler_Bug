{"sha": "20c0ba1279efb5d40fcd4a739a50d09e48e0b37f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYzBiYTEyNzllZmI1ZDQwZmNkNGE3MzlhNTBkMDllNDhlMGIzN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-06T08:01:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-06T08:01:33Z"}, "message": "auto merge of #16907 : SimonSapin/rust/tempdir-result, r=huonw\n\nThis allows using `try!()`\r\n\r\n[breaking-change]\r\n\r\nFixes #16875", "tree": {"sha": "d6ead4586f68946d11ae2daede995262a092f71b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6ead4586f68946d11ae2daede995262a092f71b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f", "html_url": "https://github.com/rust-lang/rust/commit/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bea7b3ed0856310fc64614e5bb01e348777c99f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bea7b3ed0856310fc64614e5bb01e348777c99f", "html_url": "https://github.com/rust-lang/rust/commit/4bea7b3ed0856310fc64614e5bb01e348777c99f"}, {"sha": "a049fb98cd399cb0d15ed8dc3bc5b8d9b327116b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a049fb98cd399cb0d15ed8dc3bc5b8d9b327116b", "html_url": "https://github.com/rust-lang/rust/commit/a049fb98cd399cb0d15ed8dc3bc5b8d9b327116b"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "158ae22331a6394d7bf6429c4515b6a848b99b6c", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=20c0ba1279efb5d40fcd4a739a50d09e48e0b37f", "patch": "@@ -647,7 +647,7 @@ fn link_rlib<'a>(sess: &'a Session,\n             // contain the metadata in a separate file. We use a temp directory\n             // here so concurrent builds in the same directory don't try to use\n             // the same filename for metadata (stomping over one another)\n-            let tmpdir = TempDir::new(\"rustc\").expect(\"needs a temp dir\");\n+            let tmpdir = TempDir::new(\"rustc\").ok().expect(\"needs a temp dir\");\n             let metadata = tmpdir.path().join(METADATA_FILENAME);\n             match fs::File::create(&metadata).write(trans.metadata\n                                                          .as_slice()) {\n@@ -812,7 +812,7 @@ fn link_staticlib(sess: &Session, obj_filename: &Path, out_filename: &Path) {\n // links to all upstream files as well.\n fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n                  obj_filename: &Path, out_filename: &Path) {\n-    let tmpdir = TempDir::new(\"rustc\").expect(\"needs a temp dir\");\n+    let tmpdir = TempDir::new(\"rustc\").ok().expect(\"needs a temp dir\");\n \n     // The invocations of cc share some flags across platforms\n     let pname = get_cc_prog(sess);"}, {"sha": "73250934d8e60a727d87f9eee7f06f011b039da3", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=20c0ba1279efb5d40fcd4a739a50d09e48e0b37f", "patch": "@@ -170,7 +170,7 @@ fn runtest(test: &str, cratename: &str, libs: HashSet<Path>, externs: core::Exte\n                                       None,\n                                       span_diagnostic_handler);\n \n-    let outdir = TempDir::new(\"rustdoctest\").expect(\"rustdoc needs a tempdir\");\n+    let outdir = TempDir::new(\"rustdoctest\").ok().expect(\"rustdoc needs a tempdir\");\n     let out = Some(outdir.path().clone());\n     let cfg = config::build_configuration(&sess);\n     let libdir = sess.target_filesearch().get_lib_path();"}, {"sha": "6c9f10e19ae97c8bc6c350fea52a0fb41e1b8bde", "filename": "src/libstd/io/tempfile.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/src%2Flibstd%2Fio%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/src%2Flibstd%2Fio%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftempfile.rs?ref=20c0ba1279efb5d40fcd4a739a50d09e48e0b37f", "patch": "@@ -12,7 +12,6 @@\n \n use io::{fs, IoResult};\n use io;\n-use iter::range;\n use libc;\n use ops::Drop;\n use option::{Option, None, Some};\n@@ -33,35 +32,40 @@ impl TempDir {\n     /// will have the suffix `suffix`. The directory will be automatically\n     /// deleted once the returned wrapper is destroyed.\n     ///\n-    /// If no directory can be created, None is returned.\n-    pub fn new_in(tmpdir: &Path, suffix: &str) -> Option<TempDir> {\n+    /// If no directory can be created, `Err` is returned.\n+    pub fn new_in(tmpdir: &Path, suffix: &str) -> IoResult<TempDir> {\n         if !tmpdir.is_absolute() {\n             return TempDir::new_in(&os::make_absolute(tmpdir), suffix);\n         }\n \n         static mut CNT: atomic::AtomicUint = atomic::INIT_ATOMIC_UINT;\n \n-        for _ in range(0u, 1000) {\n+        let mut attempts = 0u;\n+        loop {\n             let filename =\n                 format!(\"rs-{}-{}-{}\",\n                         unsafe { libc::getpid() },\n                         unsafe { CNT.fetch_add(1, atomic::SeqCst) },\n                         suffix);\n             let p = tmpdir.join(filename);\n             match fs::mkdir(&p, io::UserRWX) {\n-                Err(..) => {}\n-                Ok(()) => return Some(TempDir { path: Some(p), disarmed: false })\n+                Err(error) => {\n+                    if attempts >= 1000 {\n+                        return Err(error)\n+                    }\n+                    attempts += 1;\n+                }\n+                Ok(()) => return Ok(TempDir { path: Some(p), disarmed: false })\n             }\n         }\n-        None\n     }\n \n     /// Attempts to make a temporary directory inside of `os::tmpdir()` whose\n     /// name will have the suffix `suffix`. The directory will be automatically\n     /// deleted once the returned wrapper is destroyed.\n     ///\n-    /// If no directory can be created, None is returned.\n-    pub fn new(suffix: &str) -> Option<TempDir> {\n+    /// If no directory can be created, `Err` is returned.\n+    pub fn new(suffix: &str) -> IoResult<TempDir> {\n         TempDir::new_in(&os::tmpdir(), suffix)\n     }\n "}, {"sha": "df69443ed28d247d794afee0e70766279ae8a285", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=20c0ba1279efb5d40fcd4a739a50d09e48e0b37f", "patch": "@@ -1660,7 +1660,7 @@ mod tests {\n     #[test]\n     pub fn ratchet_test() {\n \n-        let dpth = TempDir::new(\"test-ratchet\").expect(\"missing test for ratchet\");\n+        let dpth = TempDir::new(\"test-ratchet\").ok().expect(\"missing test for ratchet\");\n         let pth = dpth.path().join(\"ratchet.json\");\n \n         let mut m1 = MetricMap::new();"}, {"sha": "c1b542e03156c93b4913c651af46b817dd544399", "filename": "src/test/run-pass/rename-directory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/src%2Ftest%2Frun-pass%2Frename-directory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/src%2Ftest%2Frun-pass%2Frename-directory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frename-directory.rs?ref=20c0ba1279efb5d40fcd4a739a50d09e48e0b37f", "patch": "@@ -22,7 +22,7 @@ fn rename_directory() {\n     unsafe {\n         static U_RWX: i32 = (libc::S_IRUSR | libc::S_IWUSR | libc::S_IXUSR) as i32;\n \n-        let tmpdir = TempDir::new(\"rename_directory\").expect(\"rename_directory failed\");\n+        let tmpdir = TempDir::new(\"rename_directory\").ok().expect(\"rename_directory failed\");\n         let tmpdir = tmpdir.path();\n         let old_path = tmpdir.join_many([\"foo\", \"bar\", \"baz\"]);\n         fs::mkdir_recursive(&old_path, io::UserRWX);"}, {"sha": "3a41cac1fa332d09703f2576409a2f38bab86a74", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c0ba1279efb5d40fcd4a739a50d09e48e0b37f/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=20c0ba1279efb5d40fcd4a739a50d09e48e0b37f", "patch": "@@ -160,8 +160,8 @@ fn recursive_mkdir_rel_2() {\n pub fn test_rmdir_recursive_ok() {\n     let rwx = io::UserRWX;\n \n-    let tmpdir = TempDir::new(\"test\").expect(\"test_rmdir_recursive_ok: \\\n-                                              couldn't create temp dir\");\n+    let tmpdir = TempDir::new(\"test\").ok().expect(\"test_rmdir_recursive_ok: \\\n+                                                   couldn't create temp dir\");\n     let tmpdir = tmpdir.path();\n     let root = tmpdir.join(\"foo\");\n \n@@ -190,7 +190,7 @@ pub fn dont_double_fail() {\n }\n \n fn in_tmpdir(f: ||) {\n-    let tmpdir = TempDir::new(\"test\").expect(\"can't make tmpdir\");\n+    let tmpdir = TempDir::new(\"test\").ok().expect(\"can't make tmpdir\");\n     assert!(os::change_dir(tmpdir.path()));\n \n     f();"}]}