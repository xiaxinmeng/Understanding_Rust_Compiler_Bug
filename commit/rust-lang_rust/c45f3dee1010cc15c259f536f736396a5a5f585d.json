{"sha": "c45f3dee1010cc15c259f536f736396a5a5f585d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NWYzZGVlMTAxMGNjMTVjMjU5ZjUzNmY3MzYzOTZhNWE1ZjU4NWQ=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-11-21T11:30:05Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2016-11-21T11:30:05Z"}, "message": "Restore compatibility with LLVM 3.7 and 3.8", "tree": {"sha": "c105660f6214425321c57c6eeb0d3248a63b74f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c105660f6214425321c57c6eeb0d3248a63b74f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c45f3dee1010cc15c259f536f736396a5a5f585d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c45f3dee1010cc15c259f536f736396a5a5f585d", "html_url": "https://github.com/rust-lang/rust/commit/c45f3dee1010cc15c259f536f736396a5a5f585d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c45f3dee1010cc15c259f536f736396a5a5f585d/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc2373c5a24646745dcbc14dc58889a9d8843f4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc2373c5a24646745dcbc14dc58889a9d8843f4e", "html_url": "https://github.com/rust-lang/rust/commit/fc2373c5a24646745dcbc14dc58889a9d8843f4e"}], "stats": {"total": 42, "additions": 15, "deletions": 27}, "files": [{"sha": "470e8d1fd4578d75eb2bb86274f4674713abfba0", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c45f3dee1010cc15c259f536f736396a5a5f585d/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f3dee1010cc15c259f536f736396a5a5f585d/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=c45f3dee1010cc15c259f536f736396a5a5f585d", "patch": "@@ -395,9 +395,6 @@ pub type RustArchiveMemberRef = *mut RustArchiveMember_opaque;\n #[allow(missing_copy_implementations)]\n pub enum OperandBundleDef_opaque {}\n pub type OperandBundleDefRef = *mut OperandBundleDef_opaque;\n-#[allow(missing_copy_implementations)]\n-pub enum Attribute_opaque {}\n-pub type AttributeRef = *mut Attribute_opaque;\n \n pub type DiagnosticHandler = unsafe extern \"C\" fn(DiagnosticInfoRef, *mut c_void);\n pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(SMDiagnosticRef, *const c_void, c_uint);\n@@ -770,8 +767,6 @@ extern \"C\" {\n                         Name: *const c_char)\n                         -> ValueRef;\n \n-    pub fn LLVMRustCreateAttribute(C: ContextRef, kind: Attribute, val: u64) -> AttributeRef;\n-\n     // Operations on functions\n     pub fn LLVMAddFunction(M: ModuleRef, Name: *const c_char, FunctionTy: TypeRef) -> ValueRef;\n     pub fn LLVMGetNamedFunction(M: ModuleRef, Name: *const c_char) -> ValueRef;\n@@ -790,12 +785,12 @@ extern \"C\" {\n     pub fn LLVMGetGC(Fn: ValueRef) -> *const c_char;\n     pub fn LLVMSetGC(Fn: ValueRef, Name: *const c_char);\n     pub fn LLVMRustAddDereferenceableAttr(Fn: ValueRef, index: c_uint, bytes: u64);\n-    pub fn LLVMRustAddFunctionAttribute(Fn: ValueRef, index: c_uint, attr: AttributeRef);\n+    pub fn LLVMRustAddFunctionAttribute(Fn: ValueRef, index: c_uint, attr: Attribute);\n     pub fn LLVMRustAddFunctionAttrStringValue(Fn: ValueRef,\n                                               index: c_uint,\n                                               Name: *const c_char,\n                                               Value: *const c_char);\n-    pub fn LLVMRustRemoveFunctionAttributes(Fn: ValueRef, index: c_uint, attr: AttributeRef);\n+    pub fn LLVMRustRemoveFunctionAttributes(Fn: ValueRef, index: c_uint, attr: Attribute);\n \n     // Operations on parameters\n     pub fn LLVMCountParams(Fn: ValueRef) -> c_uint;\n@@ -806,8 +801,6 @@ extern \"C\" {\n     pub fn LLVMGetLastParam(Fn: ValueRef) -> ValueRef;\n     pub fn LLVMGetNextParam(Arg: ValueRef) -> ValueRef;\n     pub fn LLVMGetPreviousParam(Arg: ValueRef) -> ValueRef;\n-    pub fn LLVMAddAttribute(Arg: ValueRef, attr: AttributeRef);\n-    pub fn LLVMRemoveAttribute(Arg: ValueRef, attr: AttributeRef);\n     pub fn LLVMSetParamAlignment(Arg: ValueRef, align: c_uint);\n \n     // Operations on basic blocks\n@@ -851,7 +844,7 @@ extern \"C\" {\n     pub fn LLVMAddInstrAttribute(Instr: ValueRef, index: c_uint, IA: c_uint);\n     pub fn LLVMRemoveInstrAttribute(Instr: ValueRef, index: c_uint, IA: c_uint);\n     pub fn LLVMSetInstrParamAlignment(Instr: ValueRef, index: c_uint, align: c_uint);\n-    pub fn LLVMRustAddCallSiteAttribute(Instr: ValueRef, index: c_uint, attr: AttributeRef);\n+    pub fn LLVMRustAddCallSiteAttribute(Instr: ValueRef, index: c_uint, attr: Attribute);\n     pub fn LLVMRustAddDereferenceableCallSiteAttr(Instr: ValueRef, index: c_uint, bytes: u64);\n \n     // Operations on call instructions (only)"}, {"sha": "c4ec418f224b579c00fad7ab0d755d06def05f57", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c45f3dee1010cc15c259f536f736396a5a5f585d/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45f3dee1010cc15c259f536f736396a5a5f585d/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=c45f3dee1010cc15c259f536f736396a5a5f585d", "patch": "@@ -176,20 +176,16 @@ pub fn set_thread_local(global: ValueRef, is_thread_local: bool) {\n }\n \n impl Attribute {\n-    fn as_object(&self, value: ValueRef) -> AttributeRef {\n-        unsafe { LLVMRustCreateAttribute(LLVMRustGetValueContext(value), *self, 0) }\n-    }\n-\n     pub fn apply_llfn(&self, idx: AttributePlace, llfn: ValueRef) {\n-        unsafe { LLVMRustAddFunctionAttribute(llfn, idx.as_uint(), self.as_object(llfn)) }\n+        unsafe { LLVMRustAddFunctionAttribute(llfn, idx.as_uint(), *self) }\n     }\n \n     pub fn apply_callsite(&self, idx: AttributePlace, callsite: ValueRef) {\n-        unsafe { LLVMRustAddCallSiteAttribute(callsite, idx.as_uint(), self.as_object(callsite)) }\n+        unsafe { LLVMRustAddCallSiteAttribute(callsite, idx.as_uint(), *self) }\n     }\n \n     pub fn unapply_llfn(&self, idx: AttributePlace, llfn: ValueRef) {\n-        unsafe { LLVMRustRemoveFunctionAttributes(llfn, idx.as_uint(), self.as_object(llfn)) }\n+        unsafe { LLVMRustRemoveFunctionAttributes(llfn, idx.as_uint(), *self) }\n     }\n \n     pub fn toggle_llfn(&self, idx: AttributePlace, llfn: ValueRef, set: bool) {"}, {"sha": "b035e134e37d52abedff817571f0f6e362991de8", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c45f3dee1010cc15c259f536f736396a5a5f585d/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c45f3dee1010cc15c259f536f736396a5a5f585d/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=c45f3dee1010cc15c259f536f736396a5a5f585d", "patch": "@@ -155,13 +155,10 @@ from_rust(LLVMRustAttribute kind) {\n   }\n }\n \n-extern \"C\" LLVMAttributeRef LLVMRustCreateAttribute(LLVMContextRef C, LLVMRustAttribute Kind, uint64_t Val) {\n-  return wrap(Attribute::get(*unwrap(C), from_rust(Kind), Val));\n-}\n-\n-extern \"C\" void LLVMRustAddCallSiteAttribute(LLVMValueRef Instr, unsigned index, LLVMAttributeRef attr) {\n+extern \"C\" void LLVMRustAddCallSiteAttribute(LLVMValueRef Instr, unsigned index, LLVMRustAttribute attr) {\n   CallSite Call = CallSite(unwrap<Instruction>(Instr));\n-  AttrBuilder B(unwrap(attr));\n+  Attribute Attr = Attribute::get(Call->getContext(), from_rust(attr));\n+  AttrBuilder B(Attr);\n   Call.setAttributes(\n     Call.getAttributes().addAttributes(Call->getContext(), index,\n                                        AttributeSet::get(Call->getContext(),\n@@ -183,10 +180,11 @@ extern \"C\" void LLVMRustAddDereferenceableCallSiteAttr(LLVMValueRef Instr,\n \n extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn,\n \t\t\t\t\t     unsigned index,\n-\t\t\t\t\t     LLVMAttributeRef attr)\n+\t\t\t\t\t     LLVMRustAttribute attr)\n {\n   Function *A = unwrap<Function>(Fn);\n-  AttrBuilder B(unwrap(attr));\n+  Attribute Attr = Attribute::get(A->getContext(), from_rust(attr));\n+  AttrBuilder B(Attr);\n   A->addAttributes(index, AttributeSet::get(A->getContext(), index, B));\n }\n \n@@ -212,11 +210,12 @@ extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n \n extern \"C\" void LLVMRustRemoveFunctionAttributes(LLVMValueRef Fn,\n \t\t\t\t\t\t unsigned index,\n-\t\t\t\t\t\t LLVMAttributeRef attr)\n+\t\t\t\t\t\t LLVMRustAttribute attr)\n {\n   Function *F = unwrap<Function>(Fn);\n   const AttributeSet PAL = F->getAttributes();\n-  AttrBuilder B(unwrap(attr));\n+  Attribute Attr = Attribute::get(F->getContext(), from_rust(attr));\n+  AttrBuilder B(Attr);\n   const AttributeSet PALnew =\n     PAL.removeAttributes(F->getContext(), index,\n                          AttributeSet::get(F->getContext(), index, B));"}]}