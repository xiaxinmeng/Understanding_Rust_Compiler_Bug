{"sha": "4f808161bc2852bff52cf3dd1bb4baf3003ef181", "node_id": "C_kwDOAAsO6NoAKDRmODA4MTYxYmMyODUyYmZmNTJjZjNkZDFiYjRiYWYzMDAzZWYxODE", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2021-12-19T05:18:31Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2021-12-19T20:14:52Z"}, "message": "Implement split_at_spare_mut directly\n\nThe previous implementation used slice::as_mut_ptr_range to derive the\npointer for the spare capacity slice. This is invalid, because that\npointer is derived from the initialized region, so it does not have\nprovenance over the uninitialized region.", "tree": {"sha": "09108ee50e6839e6c3823f64dbe07308d9e3808f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09108ee50e6839e6c3823f64dbe07308d9e3808f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f808161bc2852bff52cf3dd1bb4baf3003ef181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f808161bc2852bff52cf3dd1bb4baf3003ef181", "html_url": "https://github.com/rust-lang/rust/commit/4f808161bc2852bff52cf3dd1bb4baf3003ef181", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f808161bc2852bff52cf3dd1bb4baf3003ef181/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daf2204aa4954a9426cee93eb1baa2b26eb69070", "url": "https://api.github.com/repos/rust-lang/rust/commits/daf2204aa4954a9426cee93eb1baa2b26eb69070", "html_url": "https://github.com/rust-lang/rust/commit/daf2204aa4954a9426cee93eb1baa2b26eb69070"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "a55fce2760f97f14f71dea51acb3cc86032254a5", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f808161bc2852bff52cf3dd1bb4baf3003ef181/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f808161bc2852bff52cf3dd1bb4baf3003ef181/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=4f808161bc2852bff52cf3dd1bb4baf3003ef181", "patch": "@@ -2141,12 +2141,15 @@ impl<T, A: Allocator> Vec<T, A> {\n     unsafe fn split_at_spare_mut_with_len(\n         &mut self,\n     ) -> (&mut [T], &mut [MaybeUninit<T>], &mut usize) {\n-        let Range { start: ptr, end: spare_ptr } = self.as_mut_ptr_range();\n+        let ptr = self.as_mut_ptr();\n+        // SAFETY:\n+        // - `ptr` is guaranteed to be valid for `self.len` elements\n+        let spare_ptr = unsafe { ptr.add(self.len) };\n         let spare_ptr = spare_ptr.cast::<MaybeUninit<T>>();\n         let spare_len = self.buf.capacity() - self.len;\n \n         // SAFETY:\n-        // - `ptr` is guaranteed to be valid for `len` elements\n+        // - `ptr` is guaranteed to be valid for `self.len` elements\n         // - `spare_ptr` is pointing one element past the buffer, so it doesn't overlap with `initialized`\n         unsafe {\n             let initialized = slice::from_raw_parts_mut(ptr, self.len);"}]}