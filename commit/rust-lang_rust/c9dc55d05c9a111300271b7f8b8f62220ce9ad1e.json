{"sha": "c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "node_id": "C_kwDOAAsO6NoAKGM5ZGM1NWQwNWM5YTExMTMwMDI3MWI3ZjhiOGY2MjIyMGNlOWFkMWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T21:45:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T21:45:02Z"}, "message": "Auto merge of #111345 - jyn514:cfg-release-caching, r=cjgillot,est31\n\nOnly depend on CFG_VERSION in rustc_interface\n\nThis avoids having to rebuild the whole compiler on each commit when `omit-git-hash = false`.\n\ncc https://github.com/rust-lang/rust/issues/76720 - this won't fix it, and I'm not suggesting we turn this on by default, but it will make it less painful for people who do have `omit-git-hash` on as a workaround.", "tree": {"sha": "cfb1c94a9592cd57a5f53e22829813c80e218504", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb1c94a9592cd57a5f53e22829813c80e218504"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "html_url": "https://github.com/rust-lang/rust/commit/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f416dc063fc478c7250873246cb2d4136d8c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f416dc063fc478c7250873246cb2d4136d8c42", "html_url": "https://github.com/rust-lang/rust/commit/d3f416dc063fc478c7250873246cb2d4136d8c42"}, {"sha": "d5f2b8e5c65b0406254b990296793f664c1926a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f2b8e5c65b0406254b990296793f664c1926a0", "html_url": "https://github.com/rust-lang/rust/commit/d5f2b8e5c65b0406254b990296793f664c1926a0"}], "stats": {"total": 168, "additions": 97, "deletions": 71}, "files": [{"sha": "372a58857f3d38bbca4e62f9832f0a06122368d4", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -23,8 +23,7 @@ use crate::session_diagnostics::{self, IncorrectReprFormatGenericCause};\n pub const VERSION_PLACEHOLDER: &str = \"CURRENT_RUSTC_VERSION\";\n \n pub fn rust_version_symbol() -> Symbol {\n-    let version = option_env!(\"CFG_VERSION\").unwrap_or(\"<current>\");\n-    let version = version.split(' ').next().unwrap();\n+    let version = option_env!(\"CFG_RELEASE\").unwrap_or(\"<current>\");\n     Symbol::intern(&version)\n }\n "}, {"sha": "bd2fba12602827dc8172b38ad3548033aeeb931e", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -806,8 +806,7 @@ pub fn build_compile_unit_di_node<'ll, 'tcx>(\n     name_in_debuginfo.push(codegen_unit_name);\n \n     debug!(\"build_compile_unit_di_node: {:?}\", name_in_debuginfo);\n-    let rustc_producer =\n-        format!(\"rustc version {}\", option_env!(\"CFG_VERSION\").expect(\"CFG_VERSION\"),);\n+    let rustc_producer = format!(\"rustc version {}\", tcx.sess.cfg_version);\n     // FIXME(#41252) Remove \"clang LLVM\" if we can get GDB and LLVM to play nice.\n     let producer = format!(\"clang LLVM ({})\", rustc_producer);\n "}, {"sha": "5ce24c66c5c8755e1c46b9812a97fbfee76b00bb", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -36,6 +36,7 @@ use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_session::config::{CrateType, OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_span::DebuggerVisualizerFile;\n use std::collections::BTreeSet;\n@@ -175,11 +176,11 @@ pub struct CodegenResults {\n     pub crate_info: CrateInfo,\n }\n \n-pub enum CodegenErrors<'a> {\n+pub enum CodegenErrors {\n     WrongFileType,\n     EmptyVersionNumber,\n     EncodingVersionMismatch { version_array: String, rlink_version: u32 },\n-    RustcVersionMismatch { rustc_version: String, current_version: &'a str },\n+    RustcVersionMismatch { rustc_version: String },\n }\n \n pub fn provide(providers: &mut Providers) {\n@@ -213,10 +214,9 @@ pub fn looks_like_rust_object_file(filename: &str) -> bool {\n const RLINK_VERSION: u32 = 1;\n const RLINK_MAGIC: &[u8] = b\"rustlink\";\n \n-const RUSTC_VERSION: Option<&str> = option_env!(\"CFG_VERSION\");\n-\n impl CodegenResults {\n     pub fn serialize_rlink(\n+        sess: &Session,\n         rlink_file: &Path,\n         codegen_results: &CodegenResults,\n     ) -> Result<usize, io::Error> {\n@@ -225,12 +225,12 @@ impl CodegenResults {\n         // `emit_raw_bytes` is used to make sure that the version representation does not depend on\n         // Encoder's inner representation of `u32`.\n         encoder.emit_raw_bytes(&RLINK_VERSION.to_be_bytes());\n-        encoder.emit_str(RUSTC_VERSION.unwrap());\n+        encoder.emit_str(sess.cfg_version);\n         Encodable::encode(codegen_results, &mut encoder);\n         encoder.finish()\n     }\n \n-    pub fn deserialize_rlink<'a>(data: Vec<u8>) -> Result<Self, CodegenErrors<'a>> {\n+    pub fn deserialize_rlink(sess: &Session, data: Vec<u8>) -> Result<Self, CodegenErrors> {\n         // The Decodable machinery is not used here because it panics if the input data is invalid\n         // and because its internal representation may change.\n         if !data.starts_with(RLINK_MAGIC) {\n@@ -252,11 +252,9 @@ impl CodegenResults {\n \n         let mut decoder = MemDecoder::new(&data[4..], 0);\n         let rustc_version = decoder.read_str();\n-        let current_version = RUSTC_VERSION.unwrap();\n-        if rustc_version != current_version {\n+        if rustc_version != sess.cfg_version {\n             return Err(CodegenErrors::RustcVersionMismatch {\n                 rustc_version: rustc_version.to_string(),\n-                current_version,\n             });\n         }\n "}, {"sha": "960d53a62f5391ba11b33286ff2b1001afb10339", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -572,7 +572,7 @@ pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Comp\n             let rlink_data = fs::read(file).unwrap_or_else(|err| {\n                 sess.emit_fatal(RlinkUnableToRead { err });\n             });\n-            let codegen_results = match CodegenResults::deserialize_rlink(rlink_data) {\n+            let codegen_results = match CodegenResults::deserialize_rlink(sess, rlink_data) {\n                 Ok(codegen) => codegen,\n                 Err(err) => {\n                     match err {\n@@ -586,10 +586,10 @@ pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Comp\n                                 rlink_version,\n                             })\n                         }\n-                        CodegenErrors::RustcVersionMismatch { rustc_version, current_version } => {\n+                        CodegenErrors::RustcVersionMismatch { rustc_version } => {\n                             sess.emit_fatal(RLinkRustcVersionMismatch {\n                                 rustc_version,\n-                                current_version,\n+                                current_version: sess.cfg_version,\n                             })\n                         }\n                     };"}, {"sha": "a40a0178710191c193403df094352d9b6dc0eb30", "filename": "compiler/rustc_hir/src/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_hir%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_hir%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftests.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -10,13 +10,13 @@ fn def_path_hash_depends_on_crate_id() {\n     // the crate-id of the defining crate. This is a desirable property\n     // because the crate-id can be more easily changed than the DefPath\n     // of an item, so, in the case of a crate-local DefPathHash collision,\n-    // the user can simply \"role the dice again\" for all DefPathHashes in\n+    // the user can simply \"roll the dice again\" for all DefPathHashes in\n     // the crate by changing the crate disambiguator (e.g. via bumping the\n     // crate's version number).\n \n     create_session_if_not_set_then(Edition::Edition2024, |_| {\n-        let id0 = StableCrateId::new(Symbol::intern(\"foo\"), false, vec![\"1\".to_string()]);\n-        let id1 = StableCrateId::new(Symbol::intern(\"foo\"), false, vec![\"2\".to_string()]);\n+        let id0 = StableCrateId::new(Symbol::intern(\"foo\"), false, vec![\"1\".to_string()], \"\");\n+        let id1 = StableCrateId::new(Symbol::intern(\"foo\"), false, vec![\"2\".to_string()], \"\");\n \n         let h0 = mk_test_hash(id0);\n         let h1 = mk_test_hash(id1);"}, {"sha": "adc1b090af675a1466e7e87ed6f50dd47d7cd4b1", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -721,7 +721,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // ICE this expression in particular (see #43162).\n                 if let ExprKind::Path(QPath::Resolved(_, path)) = e.kind {\n                     if path.segments.len() == 1 && path.segments[0].ident.name == sym::rust {\n-                        fatally_break_rust(self.tcx.sess);\n+                        fatally_break_rust(self.tcx);\n                     }\n                 }\n             }"}, {"sha": "64426c4cbbb70a5c44c6bbedb4e9c4fc5260516b", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -72,7 +72,6 @@ use rustc_middle::query::Providers;\n use rustc_middle::traits;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::config;\n-use rustc_session::Session;\n use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::{sym, Span};\n \n@@ -438,8 +437,8 @@ enum TupleArgumentsFlag {\n     TupleArguments,\n }\n \n-fn fatally_break_rust(sess: &Session) {\n-    let handler = sess.diagnostic();\n+fn fatally_break_rust(tcx: TyCtxt<'_>) {\n+    let handler = tcx.sess.diagnostic();\n     handler.span_bug_no_panic(\n         MultiSpan::new(),\n         \"It looks like you're trying to break rust; would you like some ICE?\",\n@@ -451,7 +450,7 @@ fn fatally_break_rust(sess: &Session) {\n     );\n     handler.note_without_error(format!(\n         \"rustc {} running on {}\",\n-        option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n+        tcx.sess.cfg_version,\n         config::host_triple(),\n     ));\n }"}, {"sha": "25bf83f64a08617b8276871c26a4f537f548b96c", "filename": "compiler/rustc_incremental/src/persist/file_format.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -14,6 +14,7 @@ use rustc_data_structures::memmap::Mmap;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_serialize::Encoder;\n use rustc_session::Session;\n+use std::borrow::Cow;\n use std::env;\n use std::fs;\n use std::io::{self, Read};\n@@ -25,17 +26,12 @@ const FILE_MAGIC: &[u8] = b\"RSIC\";\n /// Change this if the header format changes.\n const HEADER_FORMAT_VERSION: u16 = 0;\n \n-/// A version string that hopefully is always different for compiler versions\n-/// with different encodings of incremental compilation artifacts. Contains\n-/// the Git commit hash.\n-const RUSTC_VERSION: Option<&str> = option_env!(\"CFG_VERSION\");\n-\n-pub(crate) fn write_file_header(stream: &mut FileEncoder, nightly_build: bool) {\n+pub(crate) fn write_file_header(stream: &mut FileEncoder, sess: &Session) {\n     stream.emit_raw_bytes(FILE_MAGIC);\n     stream\n         .emit_raw_bytes(&[(HEADER_FORMAT_VERSION >> 0) as u8, (HEADER_FORMAT_VERSION >> 8) as u8]);\n \n-    let rustc_version = rustc_version(nightly_build);\n+    let rustc_version = rustc_version(sess.is_nightly_build(), sess.cfg_version);\n     assert_eq!(rustc_version.len(), (rustc_version.len() as u8) as usize);\n     stream.emit_raw_bytes(&[rustc_version.len() as u8]);\n     stream.emit_raw_bytes(rustc_version.as_bytes());\n@@ -73,7 +69,7 @@ where\n         }\n     };\n \n-    write_file_header(&mut encoder, sess.is_nightly_build());\n+    write_file_header(&mut encoder, sess);\n \n     match encode(encoder) {\n         Ok(position) => {\n@@ -100,9 +96,10 @@ where\n /// - Returns `Err(..)` if some kind of IO error occurred while reading the\n ///   file.\n pub fn read_file(\n-    report_incremental_info: bool,\n     path: &Path,\n-    nightly_build: bool,\n+    report_incremental_info: bool,\n+    is_nightly_build: bool,\n+    cfg_version: &'static str,\n ) -> io::Result<Option<(Mmap, usize)>> {\n     let file = match fs::File::open(path) {\n         Ok(file) => file,\n@@ -152,7 +149,7 @@ pub fn read_file(\n         let mut buffer = vec![0; rustc_version_str_len];\n         file.read_exact(&mut buffer)?;\n \n-        if buffer != rustc_version(nightly_build).as_bytes() {\n+        if buffer != rustc_version(is_nightly_build, cfg_version).as_bytes() {\n             report_format_mismatch(report_incremental_info, path, \"Different compiler version\");\n             return Ok(None);\n         }\n@@ -174,17 +171,15 @@ fn report_format_mismatch(report_incremental_info: bool, file: &Path, message: &\n     }\n }\n \n-fn rustc_version(nightly_build: bool) -> String {\n+/// A version string that hopefully is always different for compiler versions\n+/// with different encodings of incremental compilation artifacts. Contains\n+/// the Git commit hash.\n+fn rustc_version(nightly_build: bool, cfg_version: &'static str) -> Cow<'static, str> {\n     if nightly_build {\n-        if let Some(val) = env::var_os(\"RUSTC_FORCE_RUSTC_VERSION\") {\n-            return val.to_string_lossy().into_owned();\n+        if let Ok(val) = env::var(\"RUSTC_FORCE_RUSTC_VERSION\") {\n+            return val.into();\n         }\n     }\n \n-    RUSTC_VERSION\n-        .expect(\n-            \"Cannot use rustc without explicit version for \\\n-                          incremental compilation\",\n-        )\n-        .to_string()\n+    cfg_version.into()\n }"}, {"sha": "a4407a93ff3ba18f35450a86898e53d5b43802f8", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -73,12 +73,22 @@ impl<T: Default> LoadResult<T> {\n     }\n }\n \n-fn load_data(\n-    report_incremental_info: bool,\n+fn load_data(path: &Path, sess: &Session) -> LoadResult<(Mmap, usize)> {\n+    load_data_no_sess(\n+        path,\n+        sess.opts.unstable_opts.incremental_info,\n+        sess.is_nightly_build(),\n+        sess.cfg_version,\n+    )\n+}\n+\n+fn load_data_no_sess(\n     path: &Path,\n-    nightly_build: bool,\n+    report_incremental_info: bool,\n+    is_nightly_build: bool,\n+    cfg_version: &'static str,\n ) -> LoadResult<(Mmap, usize)> {\n-    match file_format::read_file(report_incremental_info, path, nightly_build) {\n+    match file_format::read_file(path, report_incremental_info, is_nightly_build, cfg_version) {\n         Ok(Some(data_and_pos)) => LoadResult::Ok { data: data_and_pos },\n         Ok(None) => {\n             // The file either didn't exist or was produced by an incompatible\n@@ -138,14 +148,13 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n     let expected_hash = sess.opts.dep_tracking_hash(false);\n \n     let mut prev_work_products = FxHashMap::default();\n-    let nightly_build = sess.is_nightly_build();\n \n     // If we are only building with -Zquery-dep-graph but without an actual\n     // incr. comp. session directory, we skip this. Otherwise we'd fail\n     // when trying to load work products.\n     if sess.incr_comp_session_dir_opt().is_some() {\n         let work_products_path = work_products_path(sess);\n-        let load_result = load_data(report_incremental_info, &work_products_path, nightly_build);\n+        let load_result = load_data(&work_products_path, sess);\n \n         if let LoadResult::Ok { data: (work_products_data, start_pos) } = load_result {\n             // Decode the list of work_products\n@@ -173,10 +182,13 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n         }\n     }\n \n+    let is_nightly_build = sess.is_nightly_build();\n+    let cfg_version = sess.cfg_version;\n+\n     MaybeAsync::Async(std::thread::spawn(move || {\n         let _prof_timer = prof.generic_activity(\"incr_comp_load_dep_graph\");\n \n-        match load_data(report_incremental_info, &path, nightly_build) {\n+        match load_data_no_sess(&path, report_incremental_info, is_nightly_build, cfg_version) {\n             LoadResult::DataOutOfDate => LoadResult::DataOutOfDate,\n             LoadResult::LoadDepGraph(path, err) => LoadResult::LoadDepGraph(path, err),\n             LoadResult::DecodeIncrCache(err) => LoadResult::DecodeIncrCache(err),\n@@ -218,11 +230,7 @@ pub fn load_query_result_cache(sess: &Session) -> Option<OnDiskCache<'_>> {\n \n     let _prof_timer = sess.prof.generic_activity(\"incr_comp_load_query_result_cache\");\n \n-    match load_data(\n-        sess.opts.unstable_opts.incremental_info,\n-        &query_cache_path(sess),\n-        sess.is_nightly_build(),\n-    ) {\n+    match load_data(&query_cache_path(sess), sess) {\n         LoadResult::Ok { data: (bytes, start_pos) } => {\n             Some(OnDiskCache::new(sess, bytes, start_pos))\n         }"}, {"sha": "7376be6be8b8a85d70d91b1aa8d354391c20cb76", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -164,7 +164,7 @@ pub fn build_dep_graph(\n         }\n     };\n \n-    file_format::write_file_header(&mut encoder, sess.is_nightly_build());\n+    file_format::write_file_header(&mut encoder, sess);\n \n     // First encode the commandline arguments hash\n     sess.opts.dep_tracking_hash(false).encode(&mut encoder);"}, {"sha": "ec3a782e7d2879ff1f34bde4d8c4afe0d3a2253d", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -89,6 +89,7 @@ pub fn register_plugins<'a>(\n         crate_name,\n         sess.crate_types().contains(&CrateType::Executable),\n         sess.opts.cg.metadata.clone(),\n+        sess.cfg_version,\n     );\n     sess.stable_crate_id.set(stable_crate_id).expect(\"not yet initialized\");\n     rustc_incremental::prepare_session_directory(sess, crate_name, stable_crate_id)?;"}, {"sha": "c441a8ffd6f94179fd92c1b870e66190cb2cf6da", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -369,7 +369,7 @@ impl Linker {\n \n         if sess.opts.unstable_opts.no_link {\n             let rlink_file = self.prepare_outputs.with_extension(config::RLINK_EXT);\n-            CodegenResults::serialize_rlink(&rlink_file, &codegen_results)\n+            CodegenResults::serialize_rlink(sess, &rlink_file, &codegen_results)\n                 .map_err(|error| sess.emit_fatal(FailedWritingFile { path: &rlink_file, error }))?;\n             return Ok(());\n         }"}, {"sha": "28e719a40e565a1d76d8ef83a68f21bae5b0e507", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -52,7 +52,8 @@ fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n         output_file: None,\n         temps_dir,\n     };\n-    let sess = build_session(sessopts, io, None, registry, vec![], Default::default(), None, None);\n+    let sess =\n+        build_session(sessopts, io, None, registry, vec![], Default::default(), None, None, \"\");\n     (sess, cfg)\n }\n "}, {"sha": "cb19750203e8559a09ef51a4090f52551464066c", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -104,6 +104,7 @@ pub fn create_session(\n         lint_caps,\n         file_loader,\n         target_override,\n+        rustc_version_str().unwrap_or(\"unknown\"),\n     );\n \n     codegen_backend.init(&sess);"}, {"sha": "6ec691f73b77d5e49fddeb21f85dfe1cec29d384", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -245,6 +245,7 @@ pub(crate) struct CrateLocator<'a> {\n     only_needs_metadata: bool,\n     sysroot: &'a Path,\n     metadata_loader: &'a dyn MetadataLoader,\n+    cfg_version: &'static str,\n \n     // Immutable per-search configuration.\n     crate_name: Symbol,\n@@ -322,6 +323,7 @@ impl<'a> CrateLocator<'a> {\n             only_needs_metadata,\n             sysroot: &sess.sysroot,\n             metadata_loader,\n+            cfg_version: sess.cfg_version,\n             crate_name,\n             exact_paths: if hash.is_none() {\n                 sess.opts\n@@ -654,7 +656,7 @@ impl<'a> CrateLocator<'a> {\n     }\n \n     fn crate_matches(&mut self, metadata: &MetadataBlob, libpath: &Path) -> Option<Svh> {\n-        let rustc_version = rustc_version();\n+        let rustc_version = rustc_version(self.cfg_version);\n         let found_version = metadata.get_rustc_version();\n         if found_version != rustc_version {\n             info!(\"Rejecting via version: expected {} got {}\", rustc_version, found_version);\n@@ -1096,7 +1098,7 @@ impl CrateError {\n                         crate_name,\n                         add_info,\n                         found_crates,\n-                        rustc_version: rustc_version(),\n+                        rustc_version: rustc_version(sess.cfg_version),\n                     });\n                 } else if !locator.crate_rejections.via_invalid.is_empty() {\n                     let mut crate_rejections = Vec::new();"}, {"sha": "bce70913f33fce7c09ca9f85a3dfa056efa2192d", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -2276,7 +2276,7 @@ fn encode_metadata_impl(tcx: TyCtxt<'_>, path: &Path) {\n     };\n \n     // Encode the rustc version string in a predictable location.\n-    rustc_version().encode(&mut ecx);\n+    rustc_version(tcx.sess.cfg_version).encode(&mut ecx);\n \n     // Encode all the entries and extra information in the crate,\n     // culminating in the `CrateRoot` which points to all of it."}, {"sha": "b83c9c3be20f667c623d3ffe9c2a935b13ecc6e6", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -48,8 +48,8 @@ mod def_path_hash_map;\n mod encoder;\n mod table;\n \n-pub(crate) fn rustc_version() -> String {\n-    format!(\"rustc {}\", option_env!(\"CFG_VERSION\").unwrap_or(\"unknown version\"))\n+pub(crate) fn rustc_version(cfg_version: &'static str) -> String {\n+    format!(\"rustc {}\", cfg_version)\n }\n \n /// Metadata encoding version."}, {"sha": "fd02a16130fc55a05bd054855f9349eed8eaa3ad", "filename": "compiler/rustc_middle/src/query/erase.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -28,7 +28,7 @@ pub fn erase<T: EraseType>(src: T) -> Erase<T> {\n     };\n \n     Erased::<<T as EraseType>::Result> {\n-        // SAFETY: Is it safe to transmute to MaybeUninit for types with the same sizes.\n+        // SAFETY: It is safe to transmute to MaybeUninit for types with the same sizes.\n         data: unsafe { transmute_copy(&src) },\n     }\n }"}, {"sha": "d91d920140dd44a94b31022766e91f9b9c230b25", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -211,6 +211,9 @@ pub struct Session {\n \n     /// Set of enabled features for the current target, including unstable ones.\n     pub unstable_target_features: FxIndexSet<Symbol>,\n+\n+    /// The version of the rustc process, possibly including a commit hash and description.\n+    pub cfg_version: &'static str,\n }\n \n pub struct PerfStats {\n@@ -1366,6 +1369,7 @@ pub fn build_session(\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n     target_override: Option<Target>,\n+    cfg_version: &'static str,\n ) -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n     // normal diagnostic warnings, since the warning lint can also be denied and changed\n@@ -1510,6 +1514,7 @@ pub fn build_session(\n         asm_arch,\n         target_features: Default::default(),\n         unstable_target_features: Default::default(),\n+        cfg_version,\n     };\n \n     validate_commandline_args_with_session_available(&sess);"}, {"sha": "f65a6aa4fb21a196a24cc0342cabfaff284321be", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -146,7 +146,12 @@ pub struct StableCrateId(pub(crate) Hash64);\n impl StableCrateId {\n     /// Computes the stable ID for a crate with the given name and\n     /// `-Cmetadata` arguments.\n-    pub fn new(crate_name: Symbol, is_exe: bool, mut metadata: Vec<String>) -> StableCrateId {\n+    pub fn new(\n+        crate_name: Symbol,\n+        is_exe: bool,\n+        mut metadata: Vec<String>,\n+        cfg_version: &'static str,\n+    ) -> StableCrateId {\n         let mut hasher = StableHasher::new();\n         // We must hash the string text of the crate name, not the id, as the id is not stable\n         // across builds.\n@@ -180,7 +185,7 @@ impl StableCrateId {\n         if let Some(val) = std::env::var_os(\"RUSTC_FORCE_RUSTC_VERSION\") {\n             hasher.write(val.to_string_lossy().into_owned().as_bytes())\n         } else {\n-            hasher.write(option_env!(\"CFG_VERSION\").unwrap_or(\"unknown version\").as_bytes());\n+            hasher.write(cfg_version.as_bytes())\n         }\n \n         StableCrateId(hasher.finish())"}, {"sha": "5c9c18b9b362c03bc282aa4539407e01b91313bd", "filename": "src/tools/replace-version-placeholder/src/main.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Freplace-version-placeholder%2Fsrc%2Fmain.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -8,15 +8,13 @@ fn main() {\n     let version_path = root_path.join(\"src\").join(\"version\");\n     let version_str = t!(std::fs::read_to_string(&version_path), version_path);\n     let version_str = version_str.trim();\n-    walk::walk(\n-        &root_path,\n+    walk::walk_many(\n+        &[&root_path.join(\"compiler\"), &root_path.join(\"library\")],\n         |path, _is_dir| {\n             walk::filter_dirs(path)\n                 // We exempt these as they require the placeholder\n                 // for their operation\n                 || path.ends_with(\"compiler/rustc_attr/src/builtin.rs\")\n-                || path.ends_with(\"src/tools/tidy/src/features/version.rs\")\n-                || path.ends_with(\"src/tools/replace-version-placeholder\")\n         },\n         &mut |entry, contents| {\n             if !contents.contains(VERSION_PLACEHOLDER) {"}, {"sha": "7940dae207b099297fe42b9418c2aabf37188402", "filename": "tests/run-make/CURRENT_RUSTC_VERSION/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/tests%2Frun-make%2FCURRENT_RUSTC_VERSION%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/tests%2Frun-make%2FCURRENT_RUSTC_VERSION%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2FCURRENT_RUSTC_VERSION%2FMakefile?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -0,0 +1,6 @@\n+include ../tools.mk\n+\n+all:\n+\t$(RUSTC) --emit=metadata --crate-type lib stable.rs\n+\t$(RUSTC) --emit=metadata --extern stable=$(TMPDIR)/libstable.rmeta main.rs 2>&1 >/dev/null \\\n+\t\t| $(CGREP) -e \"stable since $$(cat $(S)/src/version)(-[a-zA-Z]+)?\""}, {"sha": "466aaa82bd43f8c2f20672233a88dfb899ce3b9e", "filename": "tests/run-make/CURRENT_RUSTC_VERSION/main.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/tests%2Frun-make%2FCURRENT_RUSTC_VERSION%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/tests%2Frun-make%2FCURRENT_RUSTC_VERSION%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2FCURRENT_RUSTC_VERSION%2Fmain.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -0,0 +1,4 @@\n+#![feature(foo)]\n+extern crate stable;\n+\n+fn main() {}"}, {"sha": "2fd09aded60ff6101695fca5f59cd0795dd3b84d", "filename": "tests/run-make/CURRENT_RUSTC_VERSION/stable.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/tests%2Frun-make%2FCURRENT_RUSTC_VERSION%2Fstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9dc55d05c9a111300271b7f8b8f62220ce9ad1e/tests%2Frun-make%2FCURRENT_RUSTC_VERSION%2Fstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2FCURRENT_RUSTC_VERSION%2Fstable.rs?ref=c9dc55d05c9a111300271b7f8b8f62220ce9ad1e", "patch": "@@ -0,0 +1,5 @@\n+#![feature(staged_api)]\n+#![stable(since = \"1.0.0\", feature = \"rust1\")]\n+\n+#[stable(since = \"CURRENT_RUSTC_VERSION\", feature = \"foo\")]\n+pub fn foo() {}"}]}