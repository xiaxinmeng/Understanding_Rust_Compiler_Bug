{"sha": "12ea0f6112d99310ba992f5656c29929da0bc6eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZWEwZjYxMTJkOTkzMTBiYTk5MmY1NjU2YzI5OTI5ZGEwYmM2ZWI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-25T13:34:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-25T13:34:04Z"}, "message": "Rollup merge of #82364 - osa1:issue82361, r=estebank\n\nImprove error msgs when found type is deref of expected\n\nThis improves help messages in two cases:\n\n- When expected type is `T` and found type is `&T`, we now look through blocks\n  and suggest dereferencing the expression of the block, rather than the whole\n  block.\n\n- In the above case, if the expression is an `&`, we not suggest removing the\n  `&` instead of adding `*`.\n\nBoth of these are demonstrated in the regression test. Before this patch the\nfirst error in the test would be:\n\n    error[E0308]: `if` and `else` have incompatible types\n     --> test.rs:8:9\n      |\n    5 | /     if true {\n    6 | |         a\n      | |         - expected because of this\n    7 | |     } else {\n    8 | |         b\n      | |         ^ expected `usize`, found `&usize`\n    9 | |     };\n      | |_____- `if` and `else` have incompatible types\n      |\n    help: consider dereferencing the borrow\n      |\n    7 |     } else *{\n    8 |         b\n    9 |     };\n      |\n\nNow:\n\n    error[E0308]: `if` and `else` have incompatible types\n     --> test.rs:8:9\n      |\n    5 | /     if true {\n    6 | |         a\n      | |         - expected because of this\n    7 | |     } else {\n    8 | |         b\n      | |         ^\n      | |         |\n      | |         expected `usize`, found `&usize`\n      | |         help: consider dereferencing the borrow: `*b`\n    9 | |     };\n      | |_____- `if` and `else` have incompatible types\n\nThe second error:\n\n    error[E0308]: `if` and `else` have incompatible types\n      --> test.rs:14:9\n       |\n    11 | /     if true {\n    12 | |         1\n       | |         - expected because of this\n    13 | |     } else {\n    14 | |         &1\n       | |         ^^ expected integer, found `&{integer}`\n    15 | |     };\n       | |_____- `if` and `else` have incompatible types\n       |\n    help: consider dereferencing the borrow\n       |\n    13 |     } else *{\n    14 |         &1\n    15 |     };\n       |\n\nnow:\n\n    error[E0308]: `if` and `else` have incompatible types\n      --> test.rs:14:9\n       |\n    11 | /     if true {\n    12 | |         1\n       | |         - expected because of this\n    13 | |     } else {\n    14 | |         &1\n       | |         ^-\n       | |         ||\n       | |         |help: consider removing the `&`: `1`\n       | |         expected integer, found `&{integer}`\n    15 | |     };\n       | |_____- `if` and `else` have incompatible types\n\nFixes #82361\n\n---\n\nr? ````@estebank````", "tree": {"sha": "144b02741c4b15840124a8085325e1cf4a023851", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/144b02741c4b15840124a8085325e1cf4a023851"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ea0f6112d99310ba992f5656c29929da0bc6eb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgN6dMCRBK7hj4Ov3rIwAAdHIIAETyj4nc7vbAsD+bNbBnxTJ0\nWn2KOshQnJ9vMXFBkGnw9IqNPyLDgGtYzg1iQrCgjIC6KIMY1SDS9et71y+8OAH1\nEWofjjSSoNPrPGsg8Nlvm0Rk2ft/7kUm7cKjZteeLK+OlTGn1J5TxL4SC16vY6sm\nh6oiSp+B2PqodWllo9L9DZ+JMkq4GdOL+XjypBkV6oiI/7r9LxNc9ypEl/IiGxED\nc4z2ChALwZvYr6g5HsL2VrmcBrxVVITkE+QMU+qnT84mEN8m58ToVrn5gJGD0AH7\nkBIzJzr8O8DzH7LHzhtfjpzs1O8iGuy0VU0KyJqzQ0ltb6kdoFIr6BYvZxziZcs=\n=mPzP\n-----END PGP SIGNATURE-----\n", "payload": "tree 144b02741c4b15840124a8085325e1cf4a023851\nparent 20928e0cbf65a65a5e96d56d2f665e62f593fdf8\nparent fa74d489a227054f20b0ffdda85e864e53cc7617\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614260044 +0100\ncommitter GitHub <noreply@github.com> 1614260044 +0100\n\nRollup merge of #82364 - osa1:issue82361, r=estebank\n\nImprove error msgs when found type is deref of expected\n\nThis improves help messages in two cases:\n\n- When expected type is `T` and found type is `&T`, we now look through blocks\n  and suggest dereferencing the expression of the block, rather than the whole\n  block.\n\n- In the above case, if the expression is an `&`, we not suggest removing the\n  `&` instead of adding `*`.\n\nBoth of these are demonstrated in the regression test. Before this patch the\nfirst error in the test would be:\n\n    error[E0308]: `if` and `else` have incompatible types\n     --> test.rs:8:9\n      |\n    5 | /     if true {\n    6 | |         a\n      | |         - expected because of this\n    7 | |     } else {\n    8 | |         b\n      | |         ^ expected `usize`, found `&usize`\n    9 | |     };\n      | |_____- `if` and `else` have incompatible types\n      |\n    help: consider dereferencing the borrow\n      |\n    7 |     } else *{\n    8 |         b\n    9 |     };\n      |\n\nNow:\n\n    error[E0308]: `if` and `else` have incompatible types\n     --> test.rs:8:9\n      |\n    5 | /     if true {\n    6 | |         a\n      | |         - expected because of this\n    7 | |     } else {\n    8 | |         b\n      | |         ^\n      | |         |\n      | |         expected `usize`, found `&usize`\n      | |         help: consider dereferencing the borrow: `*b`\n    9 | |     };\n      | |_____- `if` and `else` have incompatible types\n\nThe second error:\n\n    error[E0308]: `if` and `else` have incompatible types\n      --> test.rs:14:9\n       |\n    11 | /     if true {\n    12 | |         1\n       | |         - expected because of this\n    13 | |     } else {\n    14 | |         &1\n       | |         ^^ expected integer, found `&{integer}`\n    15 | |     };\n       | |_____- `if` and `else` have incompatible types\n       |\n    help: consider dereferencing the borrow\n       |\n    13 |     } else *{\n    14 |         &1\n    15 |     };\n       |\n\nnow:\n\n    error[E0308]: `if` and `else` have incompatible types\n      --> test.rs:14:9\n       |\n    11 | /     if true {\n    12 | |         1\n       | |         - expected because of this\n    13 | |     } else {\n    14 | |         &1\n       | |         ^-\n       | |         ||\n       | |         |help: consider removing the `&`: `1`\n       | |         expected integer, found `&{integer}`\n    15 | |     };\n       | |_____- `if` and `else` have incompatible types\n\nFixes #82361\n\n---\n\nr? ````@estebank````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ea0f6112d99310ba992f5656c29929da0bc6eb", "html_url": "https://github.com/rust-lang/rust/commit/12ea0f6112d99310ba992f5656c29929da0bc6eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ea0f6112d99310ba992f5656c29929da0bc6eb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20928e0cbf65a65a5e96d56d2f665e62f593fdf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/20928e0cbf65a65a5e96d56d2f665e62f593fdf8", "html_url": "https://github.com/rust-lang/rust/commit/20928e0cbf65a65a5e96d56d2f665e62f593fdf8"}, {"sha": "fa74d489a227054f20b0ffdda85e864e53cc7617", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa74d489a227054f20b0ffdda85e864e53cc7617", "html_url": "https://github.com/rust-lang/rust/commit/fa74d489a227054f20b0ffdda85e864e53cc7617"}], "stats": {"total": 132, "additions": 128, "deletions": 4}, "files": [{"sha": "f4402843afcbe5bd678bfc1e4ffb8c18b22c3024", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12ea0f6112d99310ba992f5656c29929da0bc6eb/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ea0f6112d99310ba992f5656c29929da0bc6eb/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=12ea0f6112d99310ba992f5656c29929da0bc6eb", "patch": "@@ -1577,6 +1577,14 @@ impl Expr<'_> {\n         expr\n     }\n \n+    pub fn peel_blocks(&self) -> &Self {\n+        let mut expr = self;\n+        while let ExprKind::Block(Block { expr: Some(inner), .. }, _) = &expr.kind {\n+            expr = inner;\n+        }\n+        expr\n+    }\n+\n     pub fn can_have_side_effects(&self) -> bool {\n         match self.peel_drop_temps().kind {\n             ExprKind::Path(_) | ExprKind::Lit(_) => false,"}, {"sha": "39b973ed371aeab78c0766acf1218f659fd1e320", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/12ea0f6112d99310ba992f5656c29929da0bc6eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ea0f6112d99310ba992f5656c29929da0bc6eb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=12ea0f6112d99310ba992f5656c29929da0bc6eb", "patch": "@@ -616,10 +616,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             _ if sp == expr.span && !is_macro => {\n                 if let Some(steps) = self.deref_steps(checked_ty, expected) {\n+                    let expr = expr.peel_blocks();\n+\n                     if steps == 1 {\n-                        // For a suggestion to make sense, the type would need to be `Copy`.\n-                        if self.infcx.type_is_copy_modulo_regions(self.param_env, expected, sp) {\n-                            if let Ok(code) = sm.span_to_snippet(sp) {\n+                        if let hir::ExprKind::AddrOf(_, mutbl, inner) = expr.kind {\n+                            // If the expression has `&`, removing it would fix the error\n+                            let prefix_span = expr.span.with_hi(inner.span.lo());\n+                            let message = match mutbl {\n+                                hir::Mutability::Not => \"consider removing the `&`\",\n+                                hir::Mutability::Mut => \"consider removing the `&mut`\",\n+                            };\n+                            let suggestion = String::new();\n+                            return Some((\n+                                prefix_span,\n+                                message,\n+                                suggestion,\n+                                Applicability::MachineApplicable,\n+                            ));\n+                        } else if self.infcx.type_is_copy_modulo_regions(\n+                            self.param_env,\n+                            expected,\n+                            sp,\n+                        ) {\n+                            // For this suggestion to make sense, the type would need to be `Copy`.\n+                            if let Ok(code) = sm.span_to_snippet(expr.span) {\n                                 let message = if checked_ty.is_region_ptr() {\n                                     \"consider dereferencing the borrow\"\n                                 } else {\n@@ -631,7 +651,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     format!(\"*{}\", code)\n                                 };\n                                 return Some((\n-                                    sp,\n+                                    expr.span,\n                                     message,\n                                     suggestion,\n                                     Applicability::MachineApplicable,"}, {"sha": "d72de982bf98ad4589e3885fd15c574075ab70ba", "filename": "src/test/ui/suggestions/issue-82361.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/12ea0f6112d99310ba992f5656c29929da0bc6eb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/12ea0f6112d99310ba992f5656c29929da0bc6eb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.fixed?ref=12ea0f6112d99310ba992f5656c29929da0bc6eb", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+fn main() {\n+    let a: usize = 123;\n+    let b: &usize = &a;\n+\n+    if true {\n+        a\n+    } else {\n+        *b //~ ERROR `if` and `else` have incompatible types [E0308]\n+    };\n+\n+    if true {\n+        1\n+    } else {\n+        1 //~ ERROR `if` and `else` have incompatible types [E0308]\n+    };\n+\n+    if true {\n+        1\n+    } else {\n+        1 //~ ERROR `if` and `else` have incompatible types [E0308]\n+    };\n+}"}, {"sha": "c068f6d22b47695a203bb56fbb493840c6945f19", "filename": "src/test/ui/suggestions/issue-82361.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/12ea0f6112d99310ba992f5656c29929da0bc6eb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ea0f6112d99310ba992f5656c29929da0bc6eb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.rs?ref=12ea0f6112d99310ba992f5656c29929da0bc6eb", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+fn main() {\n+    let a: usize = 123;\n+    let b: &usize = &a;\n+\n+    if true {\n+        a\n+    } else {\n+        b //~ ERROR `if` and `else` have incompatible types [E0308]\n+    };\n+\n+    if true {\n+        1\n+    } else {\n+        &1 //~ ERROR `if` and `else` have incompatible types [E0308]\n+    };\n+\n+    if true {\n+        1\n+    } else {\n+        &mut 1 //~ ERROR `if` and `else` have incompatible types [E0308]\n+    };\n+}"}, {"sha": "c19d59ccd4c66b0606ecd25f0c0a39ceee7f9858", "filename": "src/test/ui/suggestions/issue-82361.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/12ea0f6112d99310ba992f5656c29929da0bc6eb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ea0f6112d99310ba992f5656c29929da0bc6eb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.stderr?ref=12ea0f6112d99310ba992f5656c29929da0bc6eb", "patch": "@@ -0,0 +1,48 @@\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/issue-82361.rs:10:9\n+   |\n+LL | /     if true {\n+LL | |         a\n+   | |         - expected because of this\n+LL | |     } else {\n+LL | |         b\n+   | |         ^\n+   | |         |\n+   | |         expected `usize`, found `&usize`\n+   | |         help: consider dereferencing the borrow: `*b`\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/issue-82361.rs:16:9\n+   |\n+LL | /     if true {\n+LL | |         1\n+   | |         - expected because of this\n+LL | |     } else {\n+LL | |         &1\n+   | |         -^\n+   | |         |\n+   | |         expected integer, found `&{integer}`\n+   | |         help: consider removing the `&`\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/issue-82361.rs:22:9\n+   |\n+LL | /     if true {\n+LL | |         1\n+   | |         - expected because of this\n+LL | |     } else {\n+LL | |         &mut 1\n+   | |         -----^\n+   | |         |\n+   | |         expected integer, found `&mut {integer}`\n+   | |         help: consider removing the `&mut`\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}