{"sha": "32967296b444b639c965cbf126720c24decc9c65", "node_id": "C_kwDOAAsO6NoAKDMyOTY3Mjk2YjQ0NGI2MzljOTY1Y2JmMTI2NzIwYzI0ZGVjYzljNjU", "commit": {"author": {"name": "Edward Shen", "email": "code@eddie.sh", "date": "2023-02-05T04:13:16Z"}, "committer": {"name": "Edward Shen", "email": "code@eddie.sh", "date": "2023-02-05T04:13:16Z"}, "message": "Suggest null ptr if 0 is given as a raw ptr arg", "tree": {"sha": "e0d9be46194cb3a9605776f3ba53c30280cc8167", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0d9be46194cb3a9605776f3ba53c30280cc8167"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32967296b444b639c965cbf126720c24decc9c65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFCBAABCAAsFiEEYanFN2VULXpYlqmhGRgmYegYNp8FAmPfLNwOHGNvZGVAZWRk\naWUuc2gACgkQGRgmYegYNp87xgf+LoYybmJqD5taU4SB/srThlGSRwp65XaNcCvx\nsJmvg0DfpwfAt1hEwIKftVlHMlxR6p+pgZ9blVQUb2KBVS+ErLlOqVa4+Njs9AQy\nfjU6n/vx9TYEA0a1EsE4zbeLSNSOMINSyGJk29OltxVsOWLHERRw5fr2M7E6eVnx\nZAK8/41PZUUF0uubn27GJOEwxeAVRoatejHNpZ2+5UyaPEAWz4QMVnJzkF/+cUYC\nfbGNAPfjKqKStgOk7hewpP2KCT4XEg/XQP1YEbAn84i8ZpbvK7MvmDVyNwAx2v6W\nSVs4hd8eqF2pxISjvLupUgwHUufr0yMLZHc/rFrzAd0qdflfIg==\n=Vvol\n-----END PGP SIGNATURE-----", "payload": "tree e0d9be46194cb3a9605776f3ba53c30280cc8167\nparent 50d3ba5bcbf5c7e13d4ce068d3339710701dd603\nauthor Edward Shen <code@eddie.sh> 1675570396 -0800\ncommitter Edward Shen <code@eddie.sh> 1675570396 -0800\n\nSuggest null ptr if 0 is given as a raw ptr arg\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32967296b444b639c965cbf126720c24decc9c65", "html_url": "https://github.com/rust-lang/rust/commit/32967296b444b639c965cbf126720c24decc9c65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32967296b444b639c965cbf126720c24decc9c65/comments", "author": {"login": "edward-shen", "id": 6173958, "node_id": "MDQ6VXNlcjYxNzM5NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6173958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edward-shen", "html_url": "https://github.com/edward-shen", "followers_url": "https://api.github.com/users/edward-shen/followers", "following_url": "https://api.github.com/users/edward-shen/following{/other_user}", "gists_url": "https://api.github.com/users/edward-shen/gists{/gist_id}", "starred_url": "https://api.github.com/users/edward-shen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edward-shen/subscriptions", "organizations_url": "https://api.github.com/users/edward-shen/orgs", "repos_url": "https://api.github.com/users/edward-shen/repos", "events_url": "https://api.github.com/users/edward-shen/events{/privacy}", "received_events_url": "https://api.github.com/users/edward-shen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edward-shen", "id": 6173958, "node_id": "MDQ6VXNlcjYxNzM5NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6173958?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edward-shen", "html_url": "https://github.com/edward-shen", "followers_url": "https://api.github.com/users/edward-shen/followers", "following_url": "https://api.github.com/users/edward-shen/following{/other_user}", "gists_url": "https://api.github.com/users/edward-shen/gists{/gist_id}", "starred_url": "https://api.github.com/users/edward-shen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edward-shen/subscriptions", "organizations_url": "https://api.github.com/users/edward-shen/orgs", "repos_url": "https://api.github.com/users/edward-shen/repos", "events_url": "https://api.github.com/users/edward-shen/events{/privacy}", "received_events_url": "https://api.github.com/users/edward-shen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50d3ba5bcbf5c7e13d4ce068d3339710701dd603", "url": "https://api.github.com/repos/rust-lang/rust/commits/50d3ba5bcbf5c7e13d4ce068d3339710701dd603", "html_url": "https://github.com/rust-lang/rust/commit/50d3ba5bcbf5c7e13d4ce068d3339710701dd603"}], "stats": {"total": 190, "additions": 190, "deletions": 0}, "files": [{"sha": "c4905a934cb4eb7beba493edd756951ea5983a8c", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/32967296b444b639c965cbf126720c24decc9c65/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32967296b444b639c965cbf126720c24decc9c65/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=32967296b444b639c965cbf126720c24decc9c65", "patch": "@@ -60,6 +60,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_clone_for_ref(err, expr, expr_ty, expected)\n             || self.suggest_into(err, expr, expr_ty, expected)\n             || self.suggest_floating_point_literal(err, expr, expected)\n+            || self.suggest_null_ptr_for_literal_zero_given_to_ptr_arg(err, expr, expected)\n             || self.note_result_coercion(err, expr, expected, expr_ty);\n         if !suggested {\n             self.point_at_expr_source_of_inferred_type(err, expr, expr_ty, expected, expr.span);"}, {"sha": "b03f0e94e10017d0f1873dbae5beb2f3c3827a80", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/32967296b444b639c965cbf126720c24decc9c65/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32967296b444b639c965cbf126720c24decc9c65/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=32967296b444b639c965cbf126720c24decc9c65", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::{\n use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n     self, suggest_constraining_type_params, Binder, DefIdTree, IsSuggestable, ToPredicate, Ty,\n     TypeVisitable,\n@@ -1244,6 +1245,49 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Suggest providing `std::ptr::null()` or `std::ptr::null_mut()` if they\n+    /// pass in a literal 0 to an raw pointer.\n+    #[instrument(skip(self, err))]\n+    pub(crate) fn suggest_null_ptr_for_literal_zero_given_to_ptr_arg(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        expected_ty: Ty<'tcx>,\n+    ) -> bool {\n+        // Expected type needs to be a raw pointer.\n+        let ty::RawPtr(ty::TypeAndMut { mutbl, .. }) = expected_ty.kind() else {\n+            return false;\n+        };\n+\n+        // Provided expression needs to be a literal `0`.\n+        let ExprKind::Lit(Spanned {\n+            node: rustc_ast::LitKind::Int(0, _),\n+            span,\n+        }) = expr.kind else {\n+            return false;\n+        };\n+\n+        // We need to find a null pointer symbol to suggest\n+        let null_sym = match mutbl {\n+            hir::Mutability::Not => sym::ptr_null,\n+            hir::Mutability::Mut => sym::ptr_null_mut,\n+        };\n+        let Some(null_did) = self.tcx.get_diagnostic_item(null_sym) else {\n+            return false;\n+        };\n+        let null_path_str = with_no_trimmed_paths!(self.tcx.def_path_str(null_did));\n+\n+        // We have satisfied all requirements to provide a suggestion. Emit it.\n+        err.span_suggestion(\n+            span,\n+            format!(\"if you meant to create a null pointer, use `{null_path_str}()`\"),\n+            null_path_str + \"()\",\n+            Applicability::MachineApplicable,\n+        );\n+\n+        true\n+    }\n+\n     pub(crate) fn suggest_associated_const(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "40f900c7d30cfb55c1c9a9163483467d979d0411", "filename": "tests/ui/suggest-null-ptr.fixed", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/32967296b444b639c965cbf126720c24decc9c65/tests%2Fui%2Fsuggest-null-ptr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/32967296b444b639c965cbf126720c24decc9c65/tests%2Fui%2Fsuggest-null-ptr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggest-null-ptr.fixed?ref=32967296b444b639c965cbf126720c24decc9c65", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+// Suggest providing a std::ptr::null{,_mut}() to a function that takes in a raw\n+// pointer if a literal 0 was provided by the user.\n+\n+extern \"C\" {\n+    fn foo(ptr: *const u8);\n+\n+    fn foo_mut(ptr: *mut u8);\n+\n+    fn usize(ptr: *const usize);\n+\n+    fn usize_mut(ptr: *mut usize);\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo(std::ptr::null());\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null()`\n+        foo_mut(std::ptr::null_mut());\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null_mut()`\n+        usize(std::ptr::null());\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null()`\n+        usize_mut(std::ptr::null_mut());\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null_mut()`\n+    }\n+}"}, {"sha": "19b595bf769ecbd8d775dd2988bf2486fce447ab", "filename": "tests/ui/suggest-null-ptr.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/32967296b444b639c965cbf126720c24decc9c65/tests%2Fui%2Fsuggest-null-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32967296b444b639c965cbf126720c24decc9c65/tests%2Fui%2Fsuggest-null-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggest-null-ptr.rs?ref=32967296b444b639c965cbf126720c24decc9c65", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+// Suggest providing a std::ptr::null{,_mut}() to a function that takes in a raw\n+// pointer if a literal 0 was provided by the user.\n+\n+extern \"C\" {\n+    fn foo(ptr: *const u8);\n+\n+    fn foo_mut(ptr: *mut u8);\n+\n+    fn usize(ptr: *const usize);\n+\n+    fn usize_mut(ptr: *mut usize);\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo(0);\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null()`\n+        foo_mut(0);\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null_mut()`\n+        usize(0);\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null()`\n+        usize_mut(0);\n+        //~^ mismatched types [E0308]\n+        //~| if you meant to create a null pointer, use `std::ptr::null_mut()`\n+    }\n+}"}, {"sha": "66a79d0749ee8f80a788f2562355fcd60ab62bbb", "filename": "tests/ui/suggest-null-ptr.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/32967296b444b639c965cbf126720c24decc9c65/tests%2Fui%2Fsuggest-null-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32967296b444b639c965cbf126720c24decc9c65/tests%2Fui%2Fsuggest-null-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggest-null-ptr.stderr?ref=32967296b444b639c965cbf126720c24decc9c65", "patch": "@@ -0,0 +1,83 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-null-ptr.rs:18:13\n+   |\n+LL |         foo(0);\n+   |         --- ^ expected `*const u8`, found `usize`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*const u8`\n+                     found type `usize`\n+note: function defined here\n+  --> $DIR/suggest-null-ptr.rs:7:8\n+   |\n+LL |     fn foo(ptr: *const u8);\n+   |        ^^^\n+help: if you meant to create a null pointer, use `std::ptr::null()`\n+   |\n+LL |         foo(std::ptr::null());\n+   |             ~~~~~~~~~~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-null-ptr.rs:21:17\n+   |\n+LL |         foo_mut(0);\n+   |         ------- ^ expected `*mut u8`, found `usize`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*mut u8`\n+                     found type `usize`\n+note: function defined here\n+  --> $DIR/suggest-null-ptr.rs:9:8\n+   |\n+LL |     fn foo_mut(ptr: *mut u8);\n+   |        ^^^^^^^\n+help: if you meant to create a null pointer, use `std::ptr::null_mut()`\n+   |\n+LL |         foo_mut(std::ptr::null_mut());\n+   |                 ~~~~~~~~~~~~~~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-null-ptr.rs:24:15\n+   |\n+LL |         usize(0);\n+   |         ----- ^ expected `*const usize`, found `usize`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*const usize`\n+                     found type `usize`\n+note: function defined here\n+  --> $DIR/suggest-null-ptr.rs:11:8\n+   |\n+LL |     fn usize(ptr: *const usize);\n+   |        ^^^^^\n+help: if you meant to create a null pointer, use `std::ptr::null()`\n+   |\n+LL |         usize(std::ptr::null());\n+   |               ~~~~~~~~~~~~~~~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-null-ptr.rs:27:19\n+   |\n+LL |         usize_mut(0);\n+   |         --------- ^ expected `*mut usize`, found `usize`\n+   |         |\n+   |         arguments to this function are incorrect\n+   |\n+   = note: expected raw pointer `*mut usize`\n+                     found type `usize`\n+note: function defined here\n+  --> $DIR/suggest-null-ptr.rs:13:8\n+   |\n+LL |     fn usize_mut(ptr: *mut usize);\n+   |        ^^^^^^^^^\n+help: if you meant to create a null pointer, use `std::ptr::null_mut()`\n+   |\n+LL |         usize_mut(std::ptr::null_mut());\n+   |                   ~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}