{"sha": "72344f466fefd6e4a0a92d105b5844464eb09429", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMzQ0ZjQ2NmZlZmQ2ZTRhMGE5MmQxMDViNTg0NDQ2NGViMDk0Mjk=", "commit": {"author": {"name": "Philipp Krones", "email": "uwdkn@student.kit.edu", "date": "2018-08-24T10:27:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-24T10:27:48Z"}, "message": "Merge pull request #2924 from niklasf/copy-iterator\n\nAdd copy_iterator lint (#1534)", "tree": {"sha": "79f47ffe026bb85027950ee0e48e9f50eed40ae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79f47ffe026bb85027950ee0e48e9f50eed40ae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72344f466fefd6e4a0a92d105b5844464eb09429", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbf92kCRBK7hj4Ov3rIwAAdHIIAAowrr3b6OvWrCIBQTt0O9XF\nrASnQmMvCKuGln5v80wElbcuGXMzQ/ydZNMMNokQ+U6sCVyqp32aeBgIVBlcFe7g\n4hqMTu0dpO6A41+w4G5yBOLbMciktmsyhNBaTysAjIkV7d5z5vz6lzc5VWC5Sri0\na7jm0CtniTcqiiIeSsR4wtrqgwJV2xDcdLnFdNOho1RYo8fr9Kix3xKXOVpz2awE\nCDRSk7oEqx5eMWimdbPKNXwdjNNysGU6OaorhJ/p8v0aFf3nUTz7/ZzCKtB6hdqX\nQdLscUbXkHUTijQjttbmbK1RR6uH/Dms/Lv4kdZ8fIZFpZ50LzUSHZ1bXwbN/UA=\n=D6zN\n-----END PGP SIGNATURE-----\n", "payload": "tree 79f47ffe026bb85027950ee0e48e9f50eed40ae9\nparent dda656652e2e1a8d615a712d7f7482c25fa0a9c2\nparent afdf3500600b27b1a54ac54e042eb4370d796837\nauthor Philipp Krones <uwdkn@student.kit.edu> 1535106468 +0200\ncommitter GitHub <noreply@github.com> 1535106468 +0200\n\nMerge pull request #2924 from niklasf/copy-iterator\n\nAdd copy_iterator lint (#1534)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72344f466fefd6e4a0a92d105b5844464eb09429", "html_url": "https://github.com/rust-lang/rust/commit/72344f466fefd6e4a0a92d105b5844464eb09429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72344f466fefd6e4a0a92d105b5844464eb09429/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dda656652e2e1a8d615a712d7f7482c25fa0a9c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda656652e2e1a8d615a712d7f7482c25fa0a9c2", "html_url": "https://github.com/rust-lang/rust/commit/dda656652e2e1a8d615a712d7f7482c25fa0a9c2"}, {"sha": "afdf3500600b27b1a54ac54e042eb4370d796837", "url": "https://api.github.com/repos/rust-lang/rust/commits/afdf3500600b27b1a54ac54e042eb4370d796837", "html_url": "https://github.com/rust-lang/rust/commit/afdf3500600b27b1a54ac54e042eb4370d796837"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "ac0c2ed32c61a574127babb08b4b8f2f669ec9a5", "filename": "clippy_lints/src/copy_iterator.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/72344f466fefd6e4a0a92d105b5844464eb09429/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72344f466fefd6e4a0a92d105b5844464eb09429/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=72344f466fefd6e4a0a92d105b5844464eb09429", "patch": "@@ -0,0 +1,57 @@\n+use crate::utils::{is_copy, match_path, paths, span_note_and_lint};\n+use rustc::hir::{Item, ItemKind};\n+use rustc::lint::*;\n+use rustc::{declare_lint, lint_array};\n+\n+/// **What it does:** Checks for types that implement `Copy` as well as\n+/// `Iterator`.\n+///\n+/// **Why is this bad?** Implicit copies can be confusing when working with\n+/// iterator combinators.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// #[derive(Copy, Clone)]\n+/// struct Countdown(u8);\n+///\n+/// impl Iterator for Countdown {\n+///     // ...\n+/// }\n+///\n+/// let a: Vec<_> = my_iterator.take(1).collect();\n+/// let b: Vec<_> = my_iterator.collect();\n+/// ```\n+declare_clippy_lint! {\n+    pub COPY_ITERATOR,\n+    pedantic,\n+    \"implementing `Iterator` on a `Copy` type\"\n+}\n+\n+pub struct CopyIterator;\n+\n+impl LintPass for CopyIterator {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![COPY_ITERATOR]\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyIterator {\n+    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+        if let ItemKind::Impl(_, _, _, _, Some(ref trait_ref), _, _) = item.node {\n+            let ty = cx.tcx.type_of(cx.tcx.hir.local_def_id(item.id));\n+\n+            if is_copy(cx, ty) && match_path(&trait_ref.path, &paths::ITERATOR) {\n+                span_note_and_lint(\n+                    cx,\n+                    COPY_ITERATOR,\n+                    item.span,\n+                    \"you are implementing `Iterator` on a `Copy` type\",\n+                    item.span,\n+                    \"consider implementing `IntoIterator` instead\",\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "ee2f0ca5406b34373ae0469fc2589f8b39b0b490", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72344f466fefd6e4a0a92d105b5844464eb09429/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72344f466fefd6e4a0a92d105b5844464eb09429/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=72344f466fefd6e4a0a92d105b5844464eb09429", "patch": "@@ -66,6 +66,7 @@ pub mod bytecount;\n pub mod collapsible_if;\n pub mod const_static_lifetime;\n pub mod copies;\n+pub mod copy_iterator;\n pub mod cyclomatic_complexity;\n pub mod default_trait_access;\n pub mod derive;\n@@ -338,6 +339,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box types::InvalidUpcastComparisons);\n     reg.register_late_lint_pass(box regex::Pass::default());\n     reg.register_late_lint_pass(box copies::CopyAndPaste);\n+    reg.register_late_lint_pass(box copy_iterator::CopyIterator);\n     reg.register_late_lint_pass(box format::Pass);\n     reg.register_early_lint_pass(box formatting::Formatting);\n     reg.register_late_lint_pass(box swap::Swap);\n@@ -431,6 +433,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         attrs::INLINE_ALWAYS,\n         copies::MATCH_SAME_ARMS,\n+        copy_iterator::COPY_ITERATOR,\n         default_trait_access::DEFAULT_TRAIT_ACCESS,\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n         doc::DOC_MARKDOWN,"}, {"sha": "1b65cc4f8cc2d4001e00997a13b1f8417be4bd71", "filename": "tests/ui/copy_iterator.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/72344f466fefd6e4a0a92d105b5844464eb09429/tests%2Fui%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72344f466fefd6e4a0a92d105b5844464eb09429/tests%2Fui%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopy_iterator.rs?ref=72344f466fefd6e4a0a92d105b5844464eb09429", "patch": "@@ -0,0 +1,23 @@\n+#![warn(copy_iterator)]\n+\n+#[derive(Copy, Clone)]\n+struct Countdown(u8);\n+\n+impl Iterator for Countdown {\n+    type Item = u8;\n+\n+    fn next(&mut self) -> Option<u8> {\n+        self.0.checked_sub(1).map(|c| {\n+            self.0 = c;\n+            c\n+        })\n+    }\n+}\n+\n+fn main() {\n+    let my_iterator = Countdown(5);\n+    let a: Vec<_> = my_iterator.take(1).collect();\n+    assert_eq!(a.len(), 1);\n+    let b: Vec<_> = my_iterator.collect();\n+    assert_eq!(b.len(), 5);\n+}"}, {"sha": "f520156b01e66b206bafac703e3302e3740e30ab", "filename": "tests/ui/copy_iterator.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/72344f466fefd6e4a0a92d105b5844464eb09429/tests%2Fui%2Fcopy_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72344f466fefd6e4a0a92d105b5844464eb09429/tests%2Fui%2Fcopy_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopy_iterator.stderr?ref=72344f466fefd6e4a0a92d105b5844464eb09429", "patch": "@@ -0,0 +1,17 @@\n+error: you are implementing `Iterator` on a `Copy` type\n+  --> $DIR/copy_iterator.rs:6:1\n+   |\n+6  | / impl Iterator for Countdown {\n+7  | |     type Item = u8;\n+8  | |\n+9  | |     fn next(&mut self) -> Option<u8> {\n+...  |\n+14 | |     }\n+15 | | }\n+   | |_^\n+   |\n+   = note: `-D copy-iterator` implied by `-D warnings`\n+   = note: consider implementing `IntoIterator` instead\n+\n+error: aborting due to previous error\n+"}]}