{"sha": "3268f56a97f2ac7fbcdf6f23e31445a29c529674", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNjhmNTZhOTdmMmFjN2ZiY2RmNmYyM2UzMTQ0NWEyOWM1Mjk2NzQ=", "commit": {"author": {"name": "JCTyBlaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-11-22T17:28:12Z"}, "committer": {"name": "JCTyBlaidd", "email": "JCTyblaidd@users.noreply.github.com", "date": "2020-11-22T17:28:12Z"}, "message": "Fix review changes", "tree": {"sha": "2ef70509831de1dff6ca4393fb9254ae050cf400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ef70509831de1dff6ca4393fb9254ae050cf400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3268f56a97f2ac7fbcdf6f23e31445a29c529674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3268f56a97f2ac7fbcdf6f23e31445a29c529674", "html_url": "https://github.com/rust-lang/rust/commit/3268f56a97f2ac7fbcdf6f23e31445a29c529674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3268f56a97f2ac7fbcdf6f23e31445a29c529674/comments", "author": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JCTyblaidd", "id": 8288600, "node_id": "MDQ6VXNlcjgyODg2MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8288600?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JCTyblaidd", "html_url": "https://github.com/JCTyblaidd", "followers_url": "https://api.github.com/users/JCTyblaidd/followers", "following_url": "https://api.github.com/users/JCTyblaidd/following{/other_user}", "gists_url": "https://api.github.com/users/JCTyblaidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/JCTyblaidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JCTyblaidd/subscriptions", "organizations_url": "https://api.github.com/users/JCTyblaidd/orgs", "repos_url": "https://api.github.com/users/JCTyblaidd/repos", "events_url": "https://api.github.com/users/JCTyblaidd/events{/privacy}", "received_events_url": "https://api.github.com/users/JCTyblaidd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b0264fc820d12d6c5e6f9f702bc33e8921bb110", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b0264fc820d12d6c5e6f9f702bc33e8921bb110", "html_url": "https://github.com/rust-lang/rust/commit/0b0264fc820d12d6c5e6f9f702bc33e8921bb110"}], "stats": {"total": 59, "additions": 43, "deletions": 16}, "files": [{"sha": "02c66915564d3185e0ebc436a6e2c2bd206d08a3", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3268f56a97f2ac7fbcdf6f23e31445a29c529674/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3268f56a97f2ac7fbcdf6f23e31445a29c529674/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=3268f56a97f2ac7fbcdf6f23e31445a29c529674", "patch": "@@ -150,7 +150,7 @@ impl MemoryExtra {\n         };\n         let data_race = if config.data_race_detector {\n             Some(Rc::new(data_race::GlobalState::new()))\n-        }else{\n+        } else {\n             None\n         };\n         MemoryExtra {"}, {"sha": "5243431194eba51dfc7d89cfae2ff0e97207d879", "filename": "src/shims/posix/linux/sync.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3268f56a97f2ac7fbcdf6f23e31445a29c529674/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3268f56a97f2ac7fbcdf6f23e31445a29c529674/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fsync.rs?ref=3268f56a97f2ac7fbcdf6f23e31445a29c529674", "patch": "@@ -85,12 +85,10 @@ pub fn futex<'tcx>(\n             //   with the expected value, and starting to sleep are performed\n             //   atomically and totally ordered with respect to other futex\n             //   operations on the same futex word.\"\n-            // SeqCst is total order over all operations, so uses acquire,\n-            // either are equal under the current implementation.\n-            // FIXME: is Acquire correct or should some additional ordering constraints be observed?\n-            // FIXME: use RMW or similar?\n+            // SeqCst is total order over all operations.\n+            // FIXME: check if this should be changed when weak memory orders are added.\n             let futex_val = this.read_scalar_at_offset_atomic(\n-                addr.into(), 0, this.machine.layouts.i32, AtomicReadOp::Acquire\n+                addr.into(), 0, this.machine.layouts.i32, AtomicReadOp::SeqCst\n             )?.to_i32()?;\n             if val == futex_val {\n                 // The value still matches, so we block the trait make it wait for FUTEX_WAKE."}, {"sha": "4d488565faf3ea3744d949a26e51dc1b85690e36", "filename": "src/sync.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3268f56a97f2ac7fbcdf6f23e31445a29c529674/src%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3268f56a97f2ac7fbcdf6f23e31445a29c529674/src%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsync.rs?ref=3268f56a97f2ac7fbcdf6f23e31445a29c529674", "patch": "@@ -61,7 +61,11 @@ struct Mutex {\n     lock_count: usize,\n     /// The queue of threads waiting for this mutex.\n     queue: VecDeque<ThreadId>,\n-    /// Data race handle\n+    /// Data race handle, this tracks the happens-before\n+    /// relationship between each mutex access. It is\n+    /// released to during unlock and acquired from during\n+    /// locking, and therefore stores the clock of the last\n+    /// thread to release this mutex.\n     data_race: VClock\n }\n \n@@ -79,9 +83,24 @@ struct RwLock {\n     writer_queue: VecDeque<ThreadId>,\n     /// The queue of reader threads waiting for this lock.\n     reader_queue: VecDeque<ThreadId>,\n-    /// Data race handle for writers\n+    /// Data race handle for writers, tracks the happens-before\n+    /// ordering between each write access to a rwlock and is updated\n+    /// after a sequence of concurrent readers to track the happens-\n+    /// before ordering between the set of previous readers and\n+    /// the current writer.\n+    /// Contains the clock of the last thread to release a writer\n+    /// lock or the joined clock of the set of last threads to release\n+    /// shared reader locks.\n     data_race: VClock,\n-    /// Data race handle for readers\n+    /// Data race handle for readers, this is temporary storage\n+    /// for the combined happens-before ordering for between all\n+    /// concurrent readers and the next writer, and the value\n+    /// is stored to the main data_race variable once all\n+    /// readers are finished.\n+    /// Has to be stored separately since reader lock acquires\n+    /// must load the clock of the last write and must not \n+    /// add happens-before orderings between shared reader\n+    /// locks.\n     data_race_reader: VClock,\n }\n \n@@ -100,13 +119,23 @@ struct CondvarWaiter {\n #[derive(Default, Debug)]\n struct Condvar {\n     waiters: VecDeque<CondvarWaiter>,\n+    /// Tracks the happens-before relationship\n+    /// between a cond-var signal and a cond-var\n+    /// wait during a non-suprious signal event.\n+    /// Contains the clock of the last thread to\n+    /// perform a futex-signal.\n     data_race: VClock,\n }\n \n /// The futex state.\n #[derive(Default, Debug)]\n struct Futex {\n     waiters: VecDeque<FutexWaiter>,\n+    /// Tracks the happens-before relationship\n+    /// between a futex-wake and a futex-wait\n+    /// during a non-spurious wake event.\n+    /// Contains the clock of the last thread to\n+    /// perform a futex-wake.\n     data_race: VClock,\n }\n "}, {"sha": "6840d7e6cb9906ed3409111774dcad525da28367", "filename": "src/vector_clock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3268f56a97f2ac7fbcdf6f23e31445a29c529674/src%2Fvector_clock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3268f56a97f2ac7fbcdf6f23e31445a29c529674/src%2Fvector_clock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvector_clock.rs?ref=3268f56a97f2ac7fbcdf6f23e31445a29c529674", "patch": "@@ -11,7 +11,7 @@ use std::{\n \n /// A vector clock index, this is associated with a thread id\n /// but in some cases one vector index may be shared with\n-/// multiple thread ids id it safe to do so.\n+/// multiple thread ids if it safe to do so.\n #[derive(Clone, Copy, Debug, PartialOrd, Ord, PartialEq, Eq, Hash)]\n pub struct VectorIdx(u32);\n "}, {"sha": "4b736e57208a2a4a916522700ecec13899f9f4c0", "filename": "tests/compile-fail/data_race/relax_acquire_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3268f56a97f2ac7fbcdf6f23e31445a29c529674/tests%2Fcompile-fail%2Fdata_race%2Frelax_acquire_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3268f56a97f2ac7fbcdf6f23e31445a29c529674/tests%2Fcompile-fail%2Fdata_race%2Frelax_acquire_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frelax_acquire_race.rs?ref=3268f56a97f2ac7fbcdf6f23e31445a29c529674", "patch": "@@ -31,7 +31,7 @@ pub fn main() {\n         let j3 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 2 {\n                 *c.0 //~ ERROR Data race\n-            }else{\n+            } else {\n                 0\n             }\n         });"}, {"sha": "0278e9864353e9d6f68052aebcfd46b6e9983cb4", "filename": "tests/compile-fail/data_race/release_seq_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3268f56a97f2ac7fbcdf6f23e31445a29c529674/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3268f56a97f2ac7fbcdf6f23e31445a29c529674/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frelease_seq_race.rs?ref=3268f56a97f2ac7fbcdf6f23e31445a29c529674", "patch": "@@ -35,7 +35,7 @@ pub fn main() {\n             sleep(Duration::from_millis(1000));\n             if SYNC.load(Ordering::Acquire) == 3 {\n                 *c.0 //~ ERROR Data race\n-            }else{\n+            } else {\n                 0\n             }\n         });"}, {"sha": "c533f595f1602540955d860b2b5a0ab1b50dd022", "filename": "tests/compile-fail/data_race/rmw_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3268f56a97f2ac7fbcdf6f23e31445a29c529674/tests%2Fcompile-fail%2Fdata_race%2Frmw_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3268f56a97f2ac7fbcdf6f23e31445a29c529674/tests%2Fcompile-fail%2Fdata_race%2Frmw_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Frmw_race.rs?ref=3268f56a97f2ac7fbcdf6f23e31445a29c529674", "patch": "@@ -32,7 +32,7 @@ pub fn main() {\n         let j3 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 3 {\n                 *c.0 //~ ERROR Data race\n-            }else{\n+            } else {\n                 0\n             }\n         });"}, {"sha": "64e90024ed49bd8c2d937efe2f7a271d0d1b8862", "filename": "tests/run-pass/concurrency/data_race.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3268f56a97f2ac7fbcdf6f23e31445a29c529674/tests%2Frun-pass%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3268f56a97f2ac7fbcdf6f23e31445a29c529674/tests%2Frun-pass%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Fdata_race.rs?ref=3268f56a97f2ac7fbcdf6f23e31445a29c529674", "patch": "@@ -28,7 +28,7 @@ fn test_fence_sync() {\n         if SYNC.load(Ordering::Relaxed) == 1 {\n             fence(Ordering::Acquire);\n             unsafe { *evil_ptr.0 }\n-        }else{\n+        } else {\n             0\n         }\n     });\n@@ -77,7 +77,7 @@ pub fn test_rmw_no_block() {\n         let j3 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 2 {\n                 *c.0\n-            }else{\n+            } else {\n                 0\n             }\n         });\n@@ -104,7 +104,7 @@ pub fn test_release_no_block() {\n         let j2 = spawn(move || {\n             if SYNC.load(Ordering::Acquire) == 3 {\n                 *c.0\n-            }else{\n+            } else {\n                 0\n             }\n         });"}]}