{"sha": "24f6d643fe45c5acb489d3618736ac40559a883e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZjZkNjQzZmU0NWM1YWNiNDg5ZDM2MTg3MzZhYzQwNTU5YTg4M2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-16T12:41:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-16T12:41:04Z"}, "message": "Auto merge of #5322 - phansch:or_patterns, r=matthiaskrgr\n\nMake use of `or_patterns` feature\n\nchangelog: none", "tree": {"sha": "21c0b0ce5c99784b9257cfe51e6e179b04730e29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21c0b0ce5c99784b9257cfe51e6e179b04730e29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24f6d643fe45c5acb489d3618736ac40559a883e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24f6d643fe45c5acb489d3618736ac40559a883e", "html_url": "https://github.com/rust-lang/rust/commit/24f6d643fe45c5acb489d3618736ac40559a883e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24f6d643fe45c5acb489d3618736ac40559a883e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d556bb73df16f72fc5a169b4fa7d4ce79ecd76a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d556bb73df16f72fc5a169b4fa7d4ce79ecd76a2", "html_url": "https://github.com/rust-lang/rust/commit/d556bb73df16f72fc5a169b4fa7d4ce79ecd76a2"}, {"sha": "548c417ec4b9f6ea229ef9b680e3a881873a3f8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/548c417ec4b9f6ea229ef9b680e3a881873a3f8a", "html_url": "https://github.com/rust-lang/rust/commit/548c417ec4b9f6ea229ef9b680e3a881873a3f8a"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "fc26755a3754afea8f0188a0c783827ee7aead98", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=24f6d643fe45c5acb489d3618736ac40559a883e", "patch": "@@ -320,7 +320,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n     fn fetch_path(&mut self, qpath: &QPath<'_>, id: HirId, ty: Ty<'cc>) -> Option<Constant> {\n         let res = self.tables.qpath_res(qpath, id);\n         match res {\n-            Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n+            Res::Def(DefKind::Const | DefKind::AssocConst, def_id) => {\n                 let substs = self.tables.node_substs(id);\n                 let substs = if self.substs.is_empty() {\n                     substs"}, {"sha": "9cf0d3ba26f6c9e7bc7713cdb60904acbfa8be30", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=24f6d643fe45c5acb489d3618736ac40559a883e", "patch": "@@ -106,10 +106,8 @@ impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n             ExprKind::Match(ref e, arms, _) => {\n                 self.visit_expr(e);\n                 for arm in arms {\n-                    if let Some(ref guard) = arm.guard {\n-                        match guard {\n-                            Guard::If(if_expr) => self.visit_expr(if_expr),\n-                        }\n+                    if let Some(Guard::If(if_expr)) = arm.guard {\n+                        self.visit_expr(if_expr)\n                     }\n                     // make sure top level arm expressions aren't linted\n                     self.maybe_walk_expr(&*arm.body);"}, {"sha": "fb79ad271e0ac0b22ae095239b85689aaf14808c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=24f6d643fe45c5acb489d3618736ac40559a883e", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(box_syntax)]\n #![feature(box_patterns)]\n+#![feature(or_patterns)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n #![allow(clippy::missing_docs_in_private_items, clippy::must_use_candidate)]"}, {"sha": "30ad32c8ed1631d2b6345774f6b30bb013899f5a", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=24f6d643fe45c5acb489d3618736ac40559a883e", "patch": "@@ -346,7 +346,7 @@ impl<'v, 't> RefVisitor<'v, 't> {\n             {\n                 let hir_id = ty.hir_id;\n                 match self.cx.tables.qpath_res(qpath, hir_id) {\n-                    Res::Def(DefKind::TyAlias, def_id) | Res::Def(DefKind::Struct, def_id) => {\n+                    Res::Def(DefKind::TyAlias | DefKind::Struct, def_id) => {\n                         let generics = self.cx.tcx.generics_of(def_id);\n                         for _ in generics.params.as_slice() {\n                             self.record(&None);"}, {"sha": "211d9034ffb700c41f9797102d002d7576fc0da8", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=24f6d643fe45c5acb489d3618736ac40559a883e", "patch": "@@ -1780,7 +1780,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                             }\n                             return false;  // no need to walk further *on the variable*\n                         }\n-                        Res::Def(DefKind::Static, ..) | Res::Def(DefKind::Const, ..) => {\n+                        Res::Def(DefKind::Static | DefKind::Const, ..) => {\n                             if indexed_indirectly {\n                                 self.indexed_indirectly.insert(seqvar.segments[0].ident.name, None);\n                             }"}, {"sha": "ab51ecfb1b5d6d8f95552ab41517421ed60f0f6c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=24f6d643fe45c5acb489d3618736ac40559a883e", "patch": "@@ -1755,9 +1755,7 @@ fn lint_expect_fun_call(\n                 )\n             }),\n             hir::ExprKind::Path(ref p) => match cx.tables.qpath_res(p, arg.hir_id) {\n-                hir::def::Res::Def(hir::def::DefKind::Const, _) | hir::def::Res::Def(hir::def::DefKind::Static, _) => {\n-                    true\n-                },\n+                hir::def::Res::Def(hir::def::DefKind::Const | hir::def::DefKind::Static, _) => true,\n                 _ => false,\n             },\n             _ => false,"}, {"sha": "b8bfa676a16088cd6b412626308b033b833ddb74", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=24f6d643fe45c5acb489d3618736ac40559a883e", "patch": "@@ -69,7 +69,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n             if let ExprKind::Path(ref qpath) = callee.kind {\n                 let res = qpath_res(cx, qpath, callee.hir_id);\n                 match res {\n-                    Res::Def(DefKind::Struct, ..) | Res::Def(DefKind::Variant, ..) | Res::Def(DefKind::Ctor(..), _) => {\n+                    Res::Def(DefKind::Struct | DefKind::Variant | DefKind::Ctor(..), ..) => {\n                         !has_drop(cx, cx.tables.expr_ty(expr)) && args.iter().all(|arg| has_no_effect(cx, arg))\n                     },\n                     _ => false,"}, {"sha": "43d76d0cbbdd73c0838b60c1d1d080dbcecae74e", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=24f6d643fe45c5acb489d3618736ac40559a883e", "patch": "@@ -191,7 +191,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonCopyConst {\n \n             // Make sure it is a const item.\n             match qpath_res(cx, qpath, expr.hir_id) {\n-                Res::Def(DefKind::Const, _) | Res::Def(DefKind::AssocConst, _) => {},\n+                Res::Def(DefKind::Const | DefKind::AssocConst, _) => {},\n                 _ => return,\n             };\n "}, {"sha": "2a8e172663d25570c6681630f4e75a8ae4e4dcdb", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f6d643fe45c5acb489d3618736ac40559a883e/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=24f6d643fe45c5acb489d3618736ac40559a883e", "patch": "@@ -315,7 +315,7 @@ pub fn get_trait_def_id(cx: &LateContext<'_, '_>, path: &[&str]) -> Option<DefId\n     };\n \n     match res {\n-        Res::Def(DefKind::Trait, trait_id) | Res::Def(DefKind::TraitAlias, trait_id) => Some(trait_id),\n+        Res::Def(DefKind::Trait | DefKind::TraitAlias, trait_id) => Some(trait_id),\n         Res::Err => unreachable!(\"this trait resolution is impossible: {:?}\", &path),\n         _ => None,\n     }\n@@ -448,10 +448,11 @@ pub fn is_entrypoint_fn(cx: &LateContext<'_, '_>, def_id: DefId) -> bool {\n pub fn get_item_name(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> Option<Name> {\n     let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n     match cx.tcx.hir().find(parent_id) {\n-        Some(Node::Item(&Item { ref ident, .. })) => Some(ident.name),\n-        Some(Node::TraitItem(&TraitItem { ident, .. })) | Some(Node::ImplItem(&ImplItem { ident, .. })) => {\n-            Some(ident.name)\n-        },\n+        Some(\n+            Node::Item(Item { ident, .. })\n+            | Node::TraitItem(TraitItem { ident, .. })\n+            | Node::ImplItem(ImplItem { ident, .. }),\n+        ) => Some(ident.name),\n         _ => None,\n     }\n }\n@@ -925,7 +926,7 @@ pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_, '_>, expr: &Exp\n         if let ExprKind::Path(ref qp) = fun.kind {\n             let res = cx.tables.qpath_res(qp, fun.hir_id);\n             return match res {\n-                def::Res::Def(DefKind::Variant, ..) | Res::Def(DefKind::Ctor(..), _) => true,\n+                def::Res::Def(DefKind::Variant | DefKind::Ctor(..), ..) => true,\n                 def::Res::Def(_, def_id) => cx.tcx.is_promotable_const_fn(def_id),\n                 _ => false,\n             };"}]}