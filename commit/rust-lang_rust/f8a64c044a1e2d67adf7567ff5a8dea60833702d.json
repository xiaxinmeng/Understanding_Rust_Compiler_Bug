{"sha": "f8a64c044a1e2d67adf7567ff5a8dea60833702d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YTY0YzA0NGExZTJkNjdhZGY3NTY3ZmY1YThkZWE2MDgzMzcwMmQ=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T17:49:06Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T17:49:06Z"}, "message": "gen PartialEq for structs", "tree": {"sha": "51cbc95dd71fed4e58d6ee6851e778a490cc73f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51cbc95dd71fed4e58d6ee6851e778a490cc73f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8a64c044a1e2d67adf7567ff5a8dea60833702d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8a64c044a1e2d67adf7567ff5a8dea60833702d", "html_url": "https://github.com/rust-lang/rust/commit/f8a64c044a1e2d67adf7567ff5a8dea60833702d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8a64c044a1e2d67adf7567ff5a8dea60833702d/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cad2c4feba94c0a2090b65a1fe6156836feb32b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cad2c4feba94c0a2090b65a1fe6156836feb32b", "html_url": "https://github.com/rust-lang/rust/commit/3cad2c4feba94c0a2090b65a1fe6156836feb32b"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "972d14f4c9e4ee8f271e1db0242a8350cca29937", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f8a64c044a1e2d67adf7567ff5a8dea60833702d/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8a64c044a1e2d67adf7567ff5a8dea60833702d/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=f8a64c044a1e2d67adf7567ff5a8dea60833702d", "patch": "@@ -20,6 +20,7 @@ pub(crate) fn gen_trait_fn_body(\n         \"Debug\" => gen_debug_impl(adt, func),\n         \"Default\" => gen_default_impl(adt, func),\n         \"Hash\" => gen_hash_impl(adt, func),\n+        \"PartialEq\" => gen_partial_eq(adt, func),\n         _ => None,\n     }\n }\n@@ -326,3 +327,62 @@ fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n     ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n     Some(())\n }\n+\n+/// Generate a `PartialEq` impl based on the fields and members of the target type.\n+fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    // FIXME: return `None` if the trait carries a generic type; we can only\n+    // generate this code `Self` for the time being.\n+\n+    let body = match adt {\n+        // `Hash` cannot be derived for unions, so no default impl can be provided.\n+        ast::Adt::Union(_) => return None,\n+\n+        // FIXME: generate trait variants\n+        ast::Adt::Enum(_) => todo!(),\n+        ast::Adt::Struct(strukt) => match strukt.field_list() {\n+            // => self.<field>.hash(state);\n+            Some(ast::FieldList::RecordFieldList(field_list)) => {\n+                let mut expr = None;\n+                for field in field_list.fields() {\n+                    let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n+                    let lhs = make::expr_field(lhs, &field.name()?.to_string());\n+                    let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n+                    let rhs = make::expr_field(rhs, &field.name()?.to_string());\n+                    let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n+                    expr = match expr {\n+                        Some(expr) => Some(make::expr_op(ast::BinOp::BooleanAnd, expr, cmp)),\n+                        None => Some(cmp),\n+                    };\n+                }\n+                make::block_expr(None, expr).indent(ast::edit::IndentLevel(1))\n+            }\n+\n+            // => self.<field_index>.hash(state);\n+            Some(ast::FieldList::TupleFieldList(field_list)) => {\n+                let mut expr = None;\n+                for (i, _) in field_list.fields().enumerate() {\n+                    let idx = format!(\"{}\", i);\n+                    let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n+                    let lhs = make::expr_field(lhs, &idx);\n+                    let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n+                    let rhs = make::expr_field(rhs, &idx);\n+                    let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n+                    expr = match expr {\n+                        Some(expr) => Some(make::expr_op(ast::BinOp::BooleanAnd, expr, cmp)),\n+                        None => Some(cmp),\n+                    };\n+                }\n+                make::block_expr(None, expr).indent(ast::edit::IndentLevel(1))\n+            }\n+\n+            // No fields in the body means there's nothing to hash.\n+            None => {\n+                let expr = make::expr_literal(\"true\").into();\n+                make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n+            }\n+        },\n+    };\n+\n+    ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n+    Some(())\n+}"}]}