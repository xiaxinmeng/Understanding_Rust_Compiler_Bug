{"sha": "2c1ec6771bd09266308686ab13ca32e2aa73da49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMWVjNjc3MWJkMDkyNjYzMDg2ODZhYjEzY2EzMmUyYWE3M2RhNDk=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-08-18T06:40:07Z"}, "committer": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-08-18T06:49:57Z"}, "message": "Lots of changes around memory managment in the Runtime. Added memory regions and fixed race caused by calling rust_srv::malloc() from multiple threads when sending messages.", "tree": {"sha": "acbcae9da89c0f6d37fccdf8b4091f003e798683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acbcae9da89c0f6d37fccdf8b4091f003e798683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c1ec6771bd09266308686ab13ca32e2aa73da49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1ec6771bd09266308686ab13ca32e2aa73da49", "html_url": "https://github.com/rust-lang/rust/commit/2c1ec6771bd09266308686ab13ca32e2aa73da49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c1ec6771bd09266308686ab13ca32e2aa73da49/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa2b53d8c41cd717ed470926a746bdbff98dc35", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa2b53d8c41cd717ed470926a746bdbff98dc35", "html_url": "https://github.com/rust-lang/rust/commit/9fa2b53d8c41cd717ed470926a746bdbff98dc35"}], "stats": {"total": 429, "additions": 303, "deletions": 126}, "files": [{"sha": "949490fa18bb65428f65495036888efd3929d747", "filename": "src/Makefile", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -266,7 +266,8 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/rust_timer.cpp \\\n               rt/circular_buffer.cpp \\\n               rt/isaac/randport.cpp \\\n-              rt/rust_srv.cpp\n+              rt/rust_srv.cpp \\\n+              rt/memory_region.cpp\n \n RUNTIME_HDR := rt/globals.h \\\n                rt/rust.h \\\n@@ -285,7 +286,9 @@ RUNTIME_HDR := rt/globals.h \\\n                rt/util/hash_map.h \\\n                rt/sync/sync.h \\\n                rt/sync/timer.h \\\n-               rt/rust_srv.h\n+               rt/rust_srv.h \\\n+               rt/memory_region.h \\\n+               rt/memory.h\n \n RUNTIME_INCS := -Irt/isaac -Irt/uthash\n RUNTIME_OBJS := $(RUNTIME_CS:.cpp=$(CFG_OBJ_SUFFIX))"}, {"sha": "22bc15d32b609cf65c4def07651eada4804123e9", "filename": "src/rt/memory.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Fmemory.h", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Fmemory.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory.h?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -0,0 +1,60 @@\n+/*\n+ *\n+ */\n+\n+#ifndef MEMORY_H\n+#define MEMORY_H\n+\n+\n+inline void *operator new(size_t size, void *mem) {\n+    return mem;\n+}\n+\n+inline void *operator new(size_t size, rust_dom *dom) {\n+    return dom->malloc(size, memory_region::LOCAL);\n+}\n+\n+inline void *operator new[](size_t size, rust_dom *dom) {\n+    return dom->malloc(size, memory_region::LOCAL);\n+}\n+\n+inline void *operator new(size_t size, rust_dom &dom) {\n+    return dom.malloc(size, memory_region::LOCAL);\n+}\n+\n+inline void *operator new[](size_t size, rust_dom &dom) {\n+    return dom.malloc(size, memory_region::LOCAL);\n+}\n+\n+inline void *operator new(size_t size, rust_dom *dom,\n+    memory_region::memory_region_type type) {\n+    return dom->malloc(size, type);\n+}\n+\n+inline void *operator new[](size_t size, rust_dom *dom,\n+    memory_region::memory_region_type type) {\n+    return dom->malloc(size, type);\n+}\n+\n+inline void *operator new(size_t size, rust_dom &dom,\n+    memory_region::memory_region_type type) {\n+    return dom.malloc(size, type);\n+}\n+\n+inline void *operator new[](size_t size, rust_dom &dom,\n+    memory_region::memory_region_type type) {\n+    return dom.malloc(size, type);\n+}\n+\n+inline void operator delete(void *mem, rust_dom *dom) {\n+    dom->free(mem, memory_region::LOCAL);\n+    return;\n+}\n+\n+inline void operator delete(void *mem, rust_dom *dom,\n+    memory_region::memory_region_type type) {\n+    dom->free(mem, type);\n+    return;\n+}\n+\n+#endif /* MEMORY_H */"}, {"sha": "797a7c1d66908a1f23cfcf911678b221c497d62b", "filename": "src/rt/memory_region.cpp", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -0,0 +1,100 @@\n+/*\n+ *\n+ */\n+\n+#include \"rust_internal.h\"\n+#include \"memory_region.h\"\n+\n+#define TRACK_ALLOCATIONS\n+\n+memory_region::memory_region(rust_srv *srv, bool synchronized) :\n+    _srv(srv), _parent(NULL), _live_allocations(0),\n+    _synchronized(synchronized) {\n+    // Nop.\n+}\n+\n+memory_region::memory_region(memory_region *parent) :\n+    _srv(parent->_srv), _parent(parent), _live_allocations(0),\n+    _synchronized(parent->_synchronized) {\n+    // Nop.\n+}\n+\n+void memory_region::free(void *mem) {\n+    if (_synchronized) { _lock.lock(); }\n+#ifdef TRACK_ALLOCATIONS\n+    if (_allocation_list.replace(mem, NULL) == false) {\n+        printf(\"free: ptr 0x%\" PRIxPTR \" is not in allocation_list\\n\",\n+            (uintptr_t) mem);\n+        _srv->fatal(\"not in allocation_list\", __FILE__, __LINE__, \"\");\n+    }\n+#endif\n+    if (_live_allocations < 1) {\n+        _srv->fatal(\"live_allocs < 1\", __FILE__, __LINE__, \"\");\n+    }\n+    _live_allocations--;\n+    _srv->free(mem);\n+    if (_synchronized) { _lock.unlock(); }\n+\n+}\n+\n+void *\n+memory_region::realloc(void *mem, size_t size) {\n+    if (_synchronized) { _lock.lock(); }\n+    if (!mem) {\n+        _live_allocations++;\n+    }\n+    void *newMem = _srv->realloc(mem, size);\n+#ifdef TRACK_ALLOCATIONS\n+    if (_allocation_list.replace(mem, newMem) == false) {\n+        printf(\"realloc: ptr 0x%\" PRIxPTR \" is not in allocation_list\\n\",\n+            (uintptr_t) mem);\n+        _srv->fatal(\"not in allocation_list\", __FILE__, __LINE__, \"\");\n+    }\n+#endif\n+    if (_synchronized) { _lock.unlock(); }\n+    return newMem;\n+}\n+\n+void *\n+memory_region::malloc(size_t size) {\n+    if (_synchronized) { _lock.lock(); }\n+    _live_allocations++;\n+    void *mem = _srv->malloc(size);\n+#ifdef TRACK_ALLOCATIONS\n+    _allocation_list.append(mem);\n+#endif\n+    if (_synchronized) { _lock.unlock(); }\n+    return mem;\n+}\n+\n+void *\n+memory_region::calloc(size_t size) {\n+    if (_synchronized) { _lock.lock(); }\n+    _live_allocations++;\n+    void *mem = _srv->malloc(size);\n+    memset(mem, 0, size);\n+#ifdef TRACK_ALLOCATIONS\n+    _allocation_list.append(mem);\n+#endif\n+    if (_synchronized) { _lock.unlock(); }\n+    return mem;\n+}\n+\n+memory_region::~memory_region() {\n+    if (_live_allocations == 0) {\n+        return;\n+    }\n+    char msg[128];\n+    snprintf(msg, sizeof(msg),\n+        \"leaked memory in rust main loop (%\" PRIuPTR \" objects)\",\n+        _live_allocations);\n+#ifdef TRACK_ALLOCATIONS\n+    for (size_t i = 0; i < _allocation_list.size(); i++) {\n+        if (_allocation_list[i] != NULL) {\n+            printf(\"allocation 0x%\" PRIxPTR \" was not freed\\n\",\n+                (uintptr_t) _allocation_list[i]);\n+        }\n+    }\n+#endif\n+    _srv->fatal(msg, __FILE__, __LINE__, \"%d objects\", _live_allocations);\n+}"}, {"sha": "3411d867ebfb723416a40b7092c75aa8d7242963", "filename": "src/rt/memory_region.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * The Rust runtime uses memory regions to provide a primitive level of\n+ * memory management and isolation between tasks, and domains.\n+ *\n+ * TODO: Implement a custom lock-free malloc / free instead of relying solely\n+ *       on the standard malloc / free.\n+ */\n+\n+#ifndef MEMORY_REGION_H\n+#define MEMORY_REGION_H\n+\n+#include \"sync/spin_lock.h\"\n+\n+class rust_srv;\n+\n+class memory_region {\n+private:\n+    rust_srv *_srv;\n+    memory_region *_parent;\n+    size_t _live_allocations;\n+    array_list<void *> _allocation_list;\n+    const bool _synchronized;\n+    spin_lock _lock;\n+public:\n+    enum memory_region_type {\n+        LOCAL = 0x1, SYNCHRONIZED = 0x2\n+    };\n+    memory_region(rust_srv *srv, bool synchronized);\n+    memory_region(memory_region *parent);\n+    void *malloc(size_t size);\n+    void *calloc(size_t size);\n+    void *realloc(void *mem, size_t size);\n+    void free(void *mem);\n+    virtual ~memory_region();\n+};\n+\n+#endif /* MEMORY_REGION_H */"}, {"sha": "3c534c9444be48c986e2db57d08e7bbcf26c0c29", "filename": "src/rt/rust.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust.h", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.h?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -21,11 +21,6 @@\n \n #include \"rust_srv.h\"\n \n-inline void *operator new(size_t size, rust_srv *srv)\n-{\n-    return srv->malloc(size);\n-}\n-\n /*\n  * Local Variables:\n  * fill-column: 78;"}, {"sha": "276ea5582d06b4f134abe646f86c22130d1852db", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -38,7 +38,7 @@ last_os_error(rust_task *task) {\n #endif\n     size_t fill = strlen(buf) + 1;\n     size_t alloc = next_power_of_two(sizeof(rust_str) + fill);\n-    void *mem = dom->malloc(alloc);\n+    void *mem = dom->malloc(alloc, memory_region::LOCAL);\n     if (!mem) {\n         task->fail(1);\n         return NULL;\n@@ -134,7 +134,7 @@ str_alloc_with_data(rust_task *task,\n {\n     rust_dom *dom = task->dom;\n     size_t alloc = next_power_of_two(sizeof(rust_str) + n_bytes);\n-    void *mem = dom->malloc(alloc);\n+    void *mem = dom->malloc(alloc, memory_region::LOCAL);\n     if (!mem)\n         return NULL;\n     rust_str *st = new (mem) rust_str(dom, alloc, fill, d);"}, {"sha": "67a1be3644d85672fba69b52dc25abc77440e6d9", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 55, "deletions": 25, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -13,6 +13,8 @@ rust_dom::rust_dom(rust_srv *srv, rust_crate const *root_crate,\n     root_crate(root_crate),\n     _log(srv, this),\n     srv(srv),\n+    local_region(&srv->local_region),\n+    synchronized_region(&srv->synchronized_region),\n     name(name),\n     running_tasks(this),\n     blocked_tasks(this),\n@@ -144,36 +146,65 @@ rust_dom::fail() {\n }\n \n void *\n-rust_dom::malloc(size_t sz) {\n-    void *p = srv->malloc(sz);\n-    I(this, p);\n-    log(rust_log::MEM,\n-        \"%s @0x%\" PRIxPTR \" rust_dom::malloc(%d) -> 0x%\" PRIxPTR,\n-        name, (uintptr_t) this, sz, p);\n-    return p;\n+rust_dom::malloc(size_t size) {\n+    return malloc(size, memory_region::LOCAL);\n }\n \n void *\n-rust_dom::calloc(size_t sz) {\n-    void *p = this->malloc(sz);\n-    memset(p, 0, sz);\n-    return p;\n+rust_dom::malloc(size_t size, memory_region::memory_region_type type) {\n+    if (type == memory_region::LOCAL) {\n+        return local_region.malloc(size);\n+    } else if (type == memory_region::SYNCHRONIZED) {\n+        return synchronized_region.malloc(size);\n+    }\n+    return NULL;\n+}\n+\n+void *\n+rust_dom::calloc(size_t size) {\n+    return calloc(size, memory_region::LOCAL);\n+}\n+\n+void *\n+rust_dom::calloc(size_t size, memory_region::memory_region_type type) {\n+    if (type == memory_region::LOCAL) {\n+        return local_region.calloc(size);\n+    } else if (type == memory_region::SYNCHRONIZED) {\n+        return synchronized_region.calloc(size);\n+    }\n+    return NULL;\n }\n \n void *\n-rust_dom::realloc(void *p, size_t sz) {\n-    void *p1 = srv->realloc(p, sz);\n-    I(this, p1);\n-    log(rust_log::MEM, \"rust_dom::realloc(0x%\" PRIxPTR \", %d) -> 0x%\" PRIxPTR,\n-        p, sz, p1);\n-    return p1;\n+rust_dom::realloc(void *mem, size_t size) {\n+    return realloc(mem, size, memory_region::LOCAL);\n+}\n+\n+void *\n+rust_dom::realloc(void *mem, size_t size,\n+    memory_region::memory_region_type type) {\n+    if (type == memory_region::LOCAL) {\n+        return local_region.realloc(mem, size);\n+    } else if (type == memory_region::SYNCHRONIZED) {\n+        return synchronized_region.realloc(mem, size);\n+    }\n+    return NULL;\n }\n \n void\n-rust_dom::free(void *p) {\n-    log(rust_log::MEM, \"rust_dom::free(0x%\" PRIxPTR \")\", p);\n-    I(this, p);\n-    srv->free(p);\n+rust_dom::free(void *mem) {\n+    free(mem, memory_region::LOCAL);\n+}\n+\n+void\n+rust_dom::free(void *mem, memory_region::memory_region_type type) {\n+    log(rust_log::MEM, \"rust_dom::free(0x%\" PRIxPTR \")\", mem);\n+    if (type == memory_region::LOCAL) {\n+        local_region.free(mem);\n+    } else if (type == memory_region::SYNCHRONIZED) {\n+        synchronized_region.free(mem);\n+    }\n+    return;\n }\n \n #ifdef __WIN32__\n@@ -264,7 +295,6 @@ void rust_dom::send_message(rust_message *message) {\n                         message,\n                         &_incoming_message_queue,\n                         this);\n-    A(this, message->dom == this, \"Message owned by non-local domain.\");\n     _incoming_message_queue.enqueue(message);\n }\n \n@@ -277,7 +307,8 @@ void rust_dom::drain_incoming_message_queue() {\n         log(rust_log::COMM, \"<== processing incoming message \\\"%s\\\" 0x%\"\n             PRIxPTR, message->label, message);\n         message->process();\n-        delete message;\n+        message->~rust_message();\n+        this->synchronized_region.free(message);\n     }\n }\n \n@@ -322,8 +353,7 @@ rust_dom::get_port_proxy_synchronized(rust_port *port) {\n  * Returns NULL if no tasks can be scheduled.\n  */\n rust_task *\n-rust_dom::schedule_task()\n-{\n+rust_dom::schedule_task() {\n     I(this, this);\n     // FIXME: in the face of failing tasks, this is not always right.\n     // I(this, n_live_tasks() > 0);"}, {"sha": "d2b6e57033b3d9b490eb423c077c0f6f54d3e59b", "filename": "src/rt/rust_dom.h", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_dom.h", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_dom.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.h?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -25,6 +25,8 @@ struct rust_dom\n     rust_crate const *root_crate;\n     rust_log _log;\n     rust_srv *srv;\n+    memory_region local_region;\n+    memory_region synchronized_region;\n     const char *const name;\n     ptr_vec<rust_task> running_tasks;\n     ptr_vec<rust_task> blocked_tasks;\n@@ -58,10 +60,15 @@ struct rust_dom\n     template<typename T>\n     void logptr(char const *msg, T* ptrval);\n     void fail();\n-    void *malloc(size_t sz);\n-    void *calloc(size_t sz);\n-    void *realloc(void *data, size_t sz);\n-    void free(void *p);\n+    void *malloc(size_t size);\n+    void *malloc(size_t size, memory_region::memory_region_type type);\n+    void *calloc(size_t size);\n+    void *calloc(size_t size, memory_region::memory_region_type type);\n+    void *realloc(void *mem, size_t size);\n+    void *realloc(void *mem, size_t size,\n+        memory_region::memory_region_type type);\n+    void free(void *mem);\n+    void free(void *mem, memory_region::memory_region_type type);\n \n     void send_message(rust_message *message);\n     void drain_incoming_message_queue();"}, {"sha": "d6618873dff1153f21807cee97b75a56d50d2f10", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -173,25 +173,7 @@ check_null(rust_dom *dom, T value, char const *expr,\n \n #define CHECK_NULL(dom, e) (check_null(dom, e, #e, __FILE__, __LINE__))\n \n-inline void *operator new(size_t sz, void *mem) {\n-    return mem;\n-}\n-\n-inline void *operator new(size_t sz, rust_dom *dom) {\n-    return dom->malloc(sz);\n-}\n-\n-inline void *operator new[](size_t sz, rust_dom *dom) {\n-    return dom->malloc(sz);\n-}\n-\n-inline void *operator new(size_t sz, rust_dom &dom) {\n-    return dom.malloc(sz);\n-}\n-\n-inline void *operator new[](size_t sz, rust_dom &dom) {\n-    return dom.malloc(sz);\n-}\n+#include \"memory.h\"\n \n struct\n rust_timer"}, {"sha": "b6b7fbf07e0b1bc5bdd60d2751808d06eb1cd048", "filename": "src/rt/rust_message.cpp", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_message.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_message.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_message.cpp?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -3,7 +3,8 @@\n \n rust_message::\n rust_message(const char* label, rust_task *source, rust_task *target) :\n-             dom(target->dom), label(label),\n+             label(label),\n+             _dom(target->dom),\n              _source(source),\n              _target(target) {\n }\n@@ -12,12 +13,12 @@ rust_message::~rust_message() {\n }\n \n void rust_message::process() {\n-    I(dom, false);\n+    I(_dom, false);\n }\n \n rust_proxy<rust_task> *\n rust_message::get_source_proxy() {\n-    return dom->get_task_proxy(_source);\n+    return _dom->get_task_proxy(_source);\n }\n \n notify_message::\n@@ -50,8 +51,9 @@ send(notification_type type, const char* label, rust_task *source,\n      rust_proxy<rust_task> *target) {\n     rust_task *target_task = target->delegate();\n     rust_dom *target_domain = target_task->dom;\n-    notify_message *message = new (target_domain)\n-        notify_message(type, label, source, target_task);\n+    notify_message *message =\n+        new (target_domain, memory_region::SYNCHRONIZED) notify_message(type,\n+            label, source, target_task);\n     target_domain->send_message(message);\n }\n \n@@ -83,9 +85,10 @@ send(uint8_t *buffer, size_t buffer_sz, const char* label, rust_task *source,\n     rust_task *target_task = target->delegate();\n     rust_port *target_port = port->delegate();\n     rust_dom *target_domain = target_task->dom;\n-    data_message *message = new (target_domain)\n-        data_message(buffer, buffer_sz, label, source,\n-                     target_task, target_port);\n+    data_message *message =\n+        new (target_domain, memory_region::SYNCHRONIZED)\n+            data_message(buffer, buffer_sz, label, source,\n+                target_task, target_port);\n     target_domain->send_message(message);\n }\n "}, {"sha": "6d986acf5d2d3cf59af5cb71269ae13c86157413", "filename": "src/rt/rust_message.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_message.h", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_message.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_message.h?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -9,12 +9,11 @@\n /**\n  * Abstract base class for all message types.\n  */\n-class rust_message : public lock_free_queue_node,\n-                     public dom_owned<rust_message> {\n+class rust_message : public lock_free_queue_node {\n public:\n-    rust_dom *dom;\n     const char* label;\n private:\n+    rust_dom *_dom;\n     rust_task *_source;\n protected:\n     rust_task *_target;\n@@ -70,7 +69,7 @@ class data_message : public rust_message {\n \n     data_message(uint8_t *buffer, size_t buffer_sz, const char* label,\n                  rust_task *source, rust_task *target, rust_port *port);\n-    ~data_message();\n+    virtual ~data_message();\n     void process();\n \n     /**"}, {"sha": "f2dfef63ab6e0bcf843432e942a612f6e81293e1", "filename": "src/rt/rust_srv.cpp", "status": "modified", "additions": 11, "deletions": 52, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_srv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_srv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.cpp?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -5,70 +5,29 @@\n #include \"rust_internal.h\"\n #include \"rust_srv.h\"\n \n-#define TRACK_ALLOCATIONS\n-\n-rust_srv::rust_srv() : _live_allocations(0) {\n+rust_srv::rust_srv() :\n+    local_region(this, false),\n+    synchronized_region(this, true) {\n     // Nop.\n }\n \n rust_srv::~rust_srv() {\n-    if (_live_allocations != 0) {\n-        char msg[128];\n-        snprintf(msg, sizeof(msg),\n-                 \"leaked memory in rust main loop (%\" PRIuPTR \" objects)\",\n-                 _live_allocations);\n-#ifdef TRACK_ALLOCATIONS\n-        for (size_t i = 0; i < _allocation_list.size(); i++) {\n-            if (_allocation_list[i] != NULL) {\n-                printf(\"allocation 0x%\" PRIxPTR \" was not freed\\n\",\n-                        (uintptr_t) _allocation_list[i]);\n-            }\n-        }\n-#endif\n-        fatal(msg, __FILE__, __LINE__, \"\");\n-    }\n+    // Nop.\n+}\n+\n+void\n+rust_srv::free(void *p) {\n+    ::free(p);\n }\n \n void *\n rust_srv::malloc(size_t bytes) {\n-    ++_live_allocations;\n-    void * val = ::malloc(bytes);\n-#ifdef TRACK_ALLOCATIONS\n-    _allocation_list.append(val);\n-#endif\n-    return val;\n+    return ::malloc(bytes);\n }\n \n void *\n rust_srv::realloc(void *p, size_t bytes) {\n-    if (!p) {\n-        _live_allocations++;\n-    }\n-    void * val = ::realloc(p, bytes);\n-#ifdef TRACK_ALLOCATIONS\n-    if (_allocation_list.replace(p, val) == false) {\n-        printf(\"realloc: ptr 0x%\" PRIxPTR \" is not in allocation_list\\n\",\n-               (uintptr_t) p);\n-        fatal(\"not in allocation_list\", __FILE__, __LINE__, \"\");\n-    }\n-#endif\n-    return val;\n-}\n-\n-void\n-rust_srv::free(void *p) {\n-#ifdef TRACK_ALLOCATIONS\n-    if (_allocation_list.replace(p, NULL) == false) {\n-        printf(\"free: ptr 0x%\" PRIxPTR \" is not in allocation_list\\n\",\n-               (uintptr_t) p);\n-        fatal(\"not in allocation_list\", __FILE__, __LINE__, \"\");\n-    }\n-#endif\n-    if (_live_allocations < 1) {\n-        fatal(\"live_allocs < 1\", __FILE__, __LINE__, \"\");\n-    }\n-    _live_allocations--;\n-    ::free(p);\n+    return ::realloc(p, bytes);\n }\n \n void"}, {"sha": "e617c002576b059b197859b9a41f9e6536ac98f2", "filename": "src/rt/rust_srv.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_srv.h", "raw_url": "https://github.com/rust-lang/rust/raw/2c1ec6771bd09266308686ab13ca32e2aa73da49/src%2Frt%2Frust_srv.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.h?ref=2c1ec6771bd09266308686ab13ca32e2aa73da49", "patch": "@@ -5,11 +5,13 @@\n #ifndef RUST_SRV_H\n #define RUST_SRV_H\n \n+#include \"sync/spin_lock.h\"\n+#include \"memory_region.h\"\n+\n class rust_srv {\n-private:\n-    size_t _live_allocations;\n-    array_list<void *> _allocation_list;\n public:\n+    memory_region local_region;\n+    memory_region synchronized_region;\n     virtual void log(char const *msg);\n     virtual void fatal(char const *expression,\n         char const *file,\n@@ -21,12 +23,12 @@ class rust_srv {\n         size_t line,\n         char const *format,\n         ...);\n+    virtual void free(void *);\n     virtual void *malloc(size_t);\n     virtual void *realloc(void *, size_t);\n-    virtual void free(void *);\n-    virtual rust_srv *clone();\n     rust_srv();\n     virtual ~rust_srv();\n+    virtual rust_srv *clone();\n };\n \n #endif /* RUST_SRV_H */"}]}