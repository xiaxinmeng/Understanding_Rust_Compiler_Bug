{"sha": "9a738fd61d3006796d518ba751f5bb632f65edb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNzM4ZmQ2MWQzMDA2Nzk2ZDUxOGJhNzUxZjViYjYzMmY2NWVkYjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-07T00:26:47Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-07T00:32:41Z"}, "message": "rt: Various tweaks to make __morestack unwinding work on linux\n\nWhen unwinding through __morestack the stack limit in the TLS is invalidated\nand must be reset. Instead of actually landing at __morestack we're\njust going to make all our Rust landing pads call upcall_reset_stack_limit,\nwhich will find the stack segment that corresponds to the current stack\npointer and put the limit in the TLS.\n\nAlso massively expand the stack segment red zone to make more room for the\ndynamic linker. Will fix in the future.", "tree": {"sha": "0d5c8e9f685d33bb340abf01eb4e27836d110e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d5c8e9f685d33bb340abf01eb4e27836d110e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a738fd61d3006796d518ba751f5bb632f65edb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a738fd61d3006796d518ba751f5bb632f65edb6", "html_url": "https://github.com/rust-lang/rust/commit/9a738fd61d3006796d518ba751f5bb632f65edb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a738fd61d3006796d518ba751f5bb632f65edb6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1b215aea1af1c7131219bec66603eca4b77b8b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b215aea1af1c7131219bec66603eca4b77b8b7", "html_url": "https://github.com/rust-lang/rust/commit/a1b215aea1af1c7131219bec66603eca4b77b8b7"}], "stats": {"total": 71, "additions": 65, "deletions": 6}, "files": [{"sha": "71f33ccb3729017a53ea1204ef02aa90e9f34f05", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=9a738fd61d3006796d518ba751f5bb632f65edb6", "patch": "@@ -27,7 +27,8 @@ type upcalls =\n      dynastack_free: ValueRef,\n      alloc_c_stack: ValueRef,\n      call_shim_on_c_stack: ValueRef,\n-     rust_personality: ValueRef};\n+     rust_personality: ValueRef,\n+     reset_stack_limit: ValueRef};\n \n fn declare_upcalls(targ_cfg: @session::config,\n                    _tn: type_names,\n@@ -89,7 +90,8 @@ fn declare_upcalls(targ_cfg: @session::config,\n                                   // arguments: void *args, void *fn_ptr\n                                   [T_ptr(T_i8()), T_ptr(T_i8())],\n                                   int_t),\n-          rust_personality: d(\"rust_personality\", [], T_i32())\n+          rust_personality: d(\"rust_personality\", [], T_i32()),\n+          reset_stack_limit: dv(\"reset_stack_limit\", [])\n          };\n }\n //"}, {"sha": "41df1b28edd5b4a650eb64c33fa821b03dceb7a6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9a738fd61d3006796d518ba751f5bb632f65edb6", "patch": "@@ -3904,6 +3904,11 @@ fn trans_landing_pad(bcx: @block_ctxt,\n     // The landing pad block is a cleanup\n     SetCleanup(bcx, llpad);\n \n+    // Because we may have unwound across a stack boundary, we must call into\n+    // the runtime to figure out which stack segment we are on and place the\n+    // stack limit back into the TLS.\n+    Call(bcx, bcx_ccx(bcx).upcalls.reset_stack_limit, []);\n+\n     // FIXME: This seems like a very naive and redundant way to generate the\n     // landing pads, as we're re-generating all in-scope cleanups for each\n     // function call. Probably good optimization opportunities here."}, {"sha": "3f299de5d15484d91c8bc84dadd28f7dcad0cf06", "filename": "src/rt/arch/i386/record_sp.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Farch%2Fi386%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Farch%2Fi386%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Frecord_sp.S?ref=9a738fd61d3006796d518ba751f5bb632f65edb6", "patch": "@@ -2,11 +2,14 @@\n \n #if defined(__APPLE__) || defined(_WIN32)\n #define RECORD_SP          _record_sp\n+#define GET_SP             _get_sp\n #else\n #define RECORD_SP          record_sp\n+#define GET_SP             get_sp\n #endif\n \n .globl RECORD_SP\n+.globl GET_SP\n \n #if defined(__linux__)\n RECORD_SP:\n@@ -25,3 +28,7 @@ RECORD_SP:\n \tret\n #endif\n #endif\n+\n+GET_SP:\n+\tmovl %esp, %eax\n+\tret\n\\ No newline at end of file"}, {"sha": "535b6190f1c23880c6295049c77b95345fa9f664", "filename": "src/rt/arch/x86_64/morestack.S", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S?ref=9a738fd61d3006796d518ba751f5bb632f65edb6", "patch": "@@ -132,6 +132,10 @@ MORESTACK:\n \n \taddq $8, %rsp\n \tpopq %rbp\n+#ifdef __linux__\n+\t.cfi_restore %rbp\n+\t.cfi_def_cfa %rsp, 8\n+#endif\n \tret\n \t\n #if defined(__ELF__)"}, {"sha": "415f6685655c944ffd8e9587a59e6ffdb780cbe6", "filename": "src/rt/arch/x86_64/record_sp.S", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Frecord_sp.S?ref=9a738fd61d3006796d518ba751f5bb632f65edb6", "patch": "@@ -2,11 +2,14 @@\n \n #if defined(__APPLE__) || defined(_WIN32)\n #define RECORD_SP          _record_sp\n+#define GET_SP             _get_sp\n #else\n #define RECORD_SP          record_sp\n+#define GET_SP             get_sp\n #endif\n \n .globl RECORD_SP\n+.globl GET_SP\n \n #if defined(__linux__)\n RECORD_SP:\n@@ -23,3 +26,7 @@ RECORD_SP:\n \tret\n #endif\n #endif\n+\n+GET_SP:\n+\tmovq %rsp, %rax\n+\tret"}, {"sha": "888c9ac701aec4500217916cc4cf6bafae62d86a", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=9a738fd61d3006796d518ba751f5bb632f65edb6", "patch": "@@ -18,11 +18,11 @@\n // to the rt, compiler and dynamic linker for running small functions\n // FIXME: We want this to be 128 but need to slim the red zone calls down\n #ifdef __i386__\n-#define RED_ZONE_SIZE 2048\n+#define RED_ZONE_SIZE 65536\n #endif\n \n #ifdef __x86_64__\n-#define RED_ZONE_SIZE 2048\n+#define RED_ZONE_SIZE 65536\n #endif\n \n // Stack size\n@@ -613,6 +613,29 @@ rust_task::record_stack_limit() {\n       \"Stack size must be greater than LIMIT_OFFSET\");\n     record_sp(stk->data + LIMIT_OFFSET + RED_ZONE_SIZE);\n }\n+\n+extern \"C\" uintptr_t get_sp();\n+\n+/*\n+Called by landing pads during unwinding to figure out which\n+stack segment we are currently running on, delete the others,\n+and record the stack limit (which was not restored when unwinding\n+through __morestack).\n+ */\n+void\n+rust_task::reset_stack_limit() {\n+    uintptr_t sp = get_sp();\n+    // Not positive these bounds for sp are correct.\n+    // I think that the first possible value for esp on a new\n+    // stack is stk->limit, which points one word in front of\n+    // the first work to be pushed onto a new stack.\n+    while (sp <= (uintptr_t)stk->data || stk->limit < sp) {\n+        del_stk(this, stk);\n+        A(sched, stk != NULL, \"Failed to find the current stack\");\n+    }\n+    record_stack_limit();\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "474728015101ada5c5006394939ef26a9907890d", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=9a738fd61d3006796d518ba751f5bb632f65edb6", "patch": "@@ -200,6 +200,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void *new_stack(size_t stk_sz, void *args_addr, size_t args_sz);\n     void del_stack();\n     void record_stack_limit();\n+    void reset_stack_limit();\n };\n \n //"}, {"sha": "5a4c37c500cdf120bf34bc38fb270e5a5ad07572", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=9a738fd61d3006796d518ba751f5bb632f65edb6", "patch": "@@ -259,6 +259,15 @@ upcall_del_stack() {\n     task->del_stack();\n }\n \n+// Landing pads need to call this to insert the\n+// correct limit into TLS.\n+// NB: This must be called on the Rust stack\n+extern \"C\" CDECL void\n+upcall_reset_stack_limit() {\n+    rust_task *task = rust_scheduler::get_task();\n+    task->reset_stack_limit();\n+}\n+\n extern \"C\" _Unwind_Reason_Code\n __gxx_personality_v0(int version,\n                      _Unwind_Action actions,"}, {"sha": "306c750c8fbb2a96e79b4257911ce09fb851d2c7", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=9a738fd61d3006796d518ba751f5bb632f65edb6", "patch": "@@ -69,6 +69,7 @@ upcall_vec_push\n upcall_call_shim_on_c_stack\n upcall_new_stack\n upcall_del_stack\n+upcall_reset_stack_limit\n asm_call_on_stack\n rust_uv_default_loop\n rust_uv_loop_new"}, {"sha": "9796017a8eb0885d5a5135d9e8e19f4e95daa6a3", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a738fd61d3006796d518ba751f5bb632f65edb6/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=9a738fd61d3006796d518ba751f5bb632f65edb6", "patch": "@@ -25,10 +25,10 @@ resource and_then_get_big_again(_i: @int) {\n             getbig(i - 1);\n         }\n     }\n-    getbig(1000);\n+    getbig(100);\n }\n \n fn main() {\n     rustrt::set_min_stack(256u);\n-    std::task::spawn(1000, getbig_and_fail);\n+    std::task::spawn(100, getbig_and_fail);\n }\n\\ No newline at end of file"}]}