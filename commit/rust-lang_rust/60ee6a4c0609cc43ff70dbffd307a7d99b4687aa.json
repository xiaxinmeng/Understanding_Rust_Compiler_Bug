{"sha": "60ee6a4c0609cc43ff70dbffd307a7d99b4687aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZWU2YTRjMDYwOWNjNDNmZjcwZGJmZmQzMDdhN2Q5OWI0Njg3YWE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-01T16:32:01Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-01T16:32:01Z"}, "message": "Merge pull request #106 from zmbush/nightly\n\nFix build for rustc 1.3.0-nightly (bf3c979ec 2015-06-30)", "tree": {"sha": "adf7db7b5d709178e07d2954d4f0c79f06d3c5d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adf7db7b5d709178e07d2954d4f0c79f06d3c5d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa", "html_url": "https://github.com/rust-lang/rust/commit/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a92b063727409108c148a3281ea0e4dc971277ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92b063727409108c148a3281ea0e4dc971277ce", "html_url": "https://github.com/rust-lang/rust/commit/a92b063727409108c148a3281ea0e4dc971277ce"}, {"sha": "038d540ab1f7ae3ab4be0118bc4517d186f54ec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/038d540ab1f7ae3ab4be0118bc4517d186f54ec6", "html_url": "https://github.com/rust-lang/rust/commit/038d540ab1f7ae3ab4be0118bc4517d186f54ec6"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "f2fe21f88ff539652dfb497a551d8c1d35e5f674", "filename": "src/len_zero.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=60ee6a4c0609cc43ff70dbffd307a7d99b4687aa", "patch": "@@ -5,8 +5,7 @@ use std::cell::RefCell;\n use syntax::ptr::P;\n use rustc::lint::{Context, LintPass, LintArray, Lint};\n use rustc::util::nodemap::DefIdMap;\n-use rustc::middle::ty::{self, node_id_to_type, TypeVariants, expr_ty,\n-\tmt, ty_to_def_id, impl_or_trait_item, MethodTraitItemId, ImplOrTraitItemId};\n+use rustc::middle::ty::{self, TypeVariants, mt, MethodTraitItemId, ImplOrTraitItemId};\n use rustc::middle::def::{DefTy, DefStruct, DefTrait};\n use syntax::codemap::{Span, Spanned};\n use syntax::ast::*;\n@@ -121,7 +120,7 @@ fn has_is_empty(cx: &Context, expr: &Expr) -> bool {\n \tfn is_is_empty(cx: &Context, id: &ImplOrTraitItemId) -> bool {\n \t\tif let &MethodTraitItemId(def_id) = id {\n \t\t\tif let ty::MethodTraitItem(ref method) = \n-\t\t\t\t\tty::impl_or_trait_item(cx.tcx, def_id) {\n+\t\t\t\t\tcx.tcx.impl_or_trait_item(def_id) {\n \t\t\t\tmethod.name.as_str() == \"is_empty\"\n \t\t\t\t\t&& method.fty.sig.skip_binder().inputs.len() == 1 \n \t\t\t} else { false }\n@@ -136,12 +135,12 @@ fn has_is_empty(cx: &Context, expr: &Expr) -> bool {\n \t\t\t\t|iids| iids.iter().any(|i| is_is_empty(cx, i)))))\n \t}\n \t\n-\tlet ty = &walk_ty(&expr_ty(cx.tcx, expr));\n+\tlet ty = &walk_ty(&cx.tcx.expr_ty(expr));\n \tmatch ty.sty {\n \t\tty::TyTrait(_) => cx.tcx.trait_item_def_ids.borrow().get(\n-\t\t\t&ty::ty_to_def_id(ty).expect(\"trait impl not found\")).map_or(false, \n+\t\t\t&ty.ty_to_def_id().expect(\"trait impl not found\")).map_or(false, \n \t\t\t|ids| ids.iter().any(|i| is_is_empty(cx, i))),\n-\t\tty::TyProjection(_) => ty::ty_to_def_id(ty).map_or(false, \n+\t\tty::TyProjection(_) => ty.ty_to_def_id().map_or(false, \n \t\t\t|id| has_is_empty_impl(cx, &id)),\n \t\tty::TyEnum(ref id, _) | ty::TyStruct(ref id, _) => \n \t\t\thas_is_empty_impl(cx, id),"}, {"sha": "646b6308e4aa65ccc1cbf0a7fbf6bba94c0209b7", "filename": "src/misc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=60ee6a4c0609cc43ff70dbffd307a7d99b4687aa", "patch": "@@ -4,7 +4,7 @@ use syntax::ast::*;\n use syntax::ast_util::{is_comparison_binop, binop_to_string};\n use syntax::visit::{FnKind};\n use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n-use rustc::middle::ty::{self, expr_ty};\n+use rustc::middle::ty;\n use syntax::codemap::{Span, Spanned};\n \n use types::span_note_and_lint;\n@@ -79,7 +79,7 @@ impl LintPass for StrToStringPass {\n         }\n \n         fn is_str(cx: &Context, expr: &ast::Expr) -> bool {\n-            match walk_ty(expr_ty(cx.tcx, expr)).sty { \n+            match walk_ty(cx.tcx.expr_ty(expr)).sty { \n \t\t\t\tty::TyStr => true,\n \t\t\t\t_ => false\n \t\t\t}\n@@ -167,7 +167,7 @@ impl LintPass for FloatCmp {\n }\n \n fn is_float(cx: &Context, expr: &Expr) -> bool {\n-\tif let ty::TyFloat(_) = walk_ty(expr_ty(cx.tcx, expr)).sty { \n+\tif let ty::TyFloat(_) = walk_ty(cx.tcx.expr_ty(expr)).sty { \n \t\ttrue\n \t} else { \n \t\tfalse \n@@ -268,5 +268,5 @@ fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n \n fn is_str_arg(cx: &Context, args: &[P<Expr>]) -> bool {\n \targs.len() == 1 && if let ty::TyStr = \n-\t\twalk_ty(expr_ty(cx.tcx, &*args[0])).sty { true } else { false }\n+\t\twalk_ty(cx.tcx.expr_ty(&*args[0])).sty { true } else { false }\n }"}, {"sha": "10888d990759294c1c6bc88230793a68a0298b88", "filename": "src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=60ee6a4c0609cc43ff70dbffd307a7d99b4687aa", "patch": "@@ -1,7 +1,7 @@\n use syntax::ptr::P;\n use syntax::ast::*;\n use rustc::lint::{Context, LintPass, LintArray, Lint};\n-use rustc::middle::ty::{expr_ty, TypeVariants, mt, TyRef};\n+use rustc::middle::ty::{TypeVariants, mt, TyRef};\n use syntax::codemap::{BytePos, ExpnInfo, Span};\n use utils::in_macro;\n \n@@ -43,7 +43,7 @@ fn check_expr_expd(cx: &Context, expr: &Expr, info: Option<&ExpnInfo>) {\n \t\t\t\t\"Generally you want to avoid &mut &mut _ if possible.\")\n \t\t}).unwrap_or_else(|| {\n \t\t\tif let TyRef(_, mt{ty: _, mutbl: MutMutable}) = \n-\t\t\t\t\texpr_ty(cx.tcx, e).sty {\n+\t\t\t\t\tcx.tcx.expr_ty(e).sty {\n \t\t\t\tcx.span_lint(MUT_MUT, expr.span,\n \t\t\t\t\t\"This expression mutably borrows a mutable reference. \\\n \t\t\t\t\tConsider reborrowing\")"}, {"sha": "d754c85f7b57a7095954e6a91986687d3d3b5624", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=60ee6a4c0609cc43ff70dbffd307a7d99b4687aa", "patch": "@@ -30,7 +30,7 @@ pub fn in_external_macro(cx: &Context, span: Span) -> bool {\n /// usage e.g. with\n /// `match_def_path(cx, id, &[\"core\", \"option\", \"Option\"])`\n pub fn match_def_path(cx: &Context, def_id: DefId, path: &[&str]) -> bool {\n-\tty::with_path(cx.tcx, def_id, |iter| iter.map(|elem| elem.name())\n+\tcx.tcx.with_path(def_id, |iter| iter.map(|elem| elem.name())\n \t\t.zip(path.iter()).all(|(nm, p)| &nm.as_str() == p))\n }\n "}]}