{"sha": "64f7072c255bd97a58b8344d0beeae281b8f7e13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZjcwNzJjMjU1YmQ5N2E1OGI4MzQ0ZDBiZWVhZTI4MWI4ZjdlMTM=", "commit": {"author": {"name": "Lukas Tobias Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-18T17:49:15Z"}, "committer": {"name": "Lukas Tobias Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-18T17:53:20Z"}, "message": "MergeBehavior -> ImportGranularity", "tree": {"sha": "a0e0b102c4880ff5c6b9c58a266479b513186acb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0e0b102c4880ff5c6b9c58a266479b513186acb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64f7072c255bd97a58b8344d0beeae281b8f7e13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64f7072c255bd97a58b8344d0beeae281b8f7e13", "html_url": "https://github.com/rust-lang/rust/commit/64f7072c255bd97a58b8344d0beeae281b8f7e13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64f7072c255bd97a58b8344d0beeae281b8f7e13/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3d0d89d7e3e253234271008df9324ec1faf1746", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d0d89d7e3e253234271008df9324ec1faf1746", "html_url": "https://github.com/rust-lang/rust/commit/e3d0d89d7e3e253234271008df9324ec1faf1746"}], "stats": {"total": 113, "additions": 75, "deletions": 38}, "files": [{"sha": "bb1ca0b3d450651188e70fdb3917eaa08095d3e6", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=64f7072c255bd97a58b8344d0beeae281b8f7e13", "patch": "@@ -4,7 +4,10 @@ use expect_test::expect;\n use hir::Semantics;\n use ide_db::{\n     base_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt},\n-    helpers::{insert_use::InsertUseConfig, merge_imports::MergeBehavior, SnippetCap},\n+    helpers::{\n+        insert_use::{ImportGranularity, InsertUseConfig},\n+        SnippetCap,\n+    },\n     source_change::FileSystemEdit,\n     RootDatabase,\n };\n@@ -21,7 +24,7 @@ pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n     snippet_cap: SnippetCap::new(true),\n     allowed: None,\n     insert_use: InsertUseConfig {\n-        merge: Some(MergeBehavior::Crate),\n+        granularity: ImportGranularity::Crate,\n         prefix_kind: hir::PrefixKind::Plain,\n         group: true,\n     },"}, {"sha": "b150a5c3fd5fb36907329c90f21c133a6cbdb642", "filename": "crates/ide_completion/src/test_utils.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs?ref=64f7072c255bd97a58b8344d0beeae281b8f7e13", "patch": "@@ -3,7 +3,10 @@\n use hir::{PrefixKind, Semantics};\n use ide_db::{\n     base_db::{fixture::ChangeFixture, FileLoader, FilePosition},\n-    helpers::{insert_use::InsertUseConfig, merge_imports::MergeBehavior, SnippetCap},\n+    helpers::{\n+        insert_use::{ImportGranularity, InsertUseConfig},\n+        SnippetCap,\n+    },\n     RootDatabase,\n };\n use itertools::Itertools;\n@@ -20,7 +23,7 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     add_call_argument_snippets: true,\n     snippet_cap: SnippetCap::new(true),\n     insert_use: InsertUseConfig {\n-        merge: Some(MergeBehavior::Crate),\n+        granularity: ImportGranularity::Crate,\n         prefix_kind: PrefixKind::Plain,\n         group: true,\n     },"}, {"sha": "a4eb31815e97ac68d88ab7705f860d61100d2563", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=64f7072c255bd97a58b8344d0beeae281b8f7e13", "patch": "@@ -15,9 +15,32 @@ use crate::{\n \n pub use hir::PrefixKind;\n \n+/// How imports should be grouped into use statements.\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub enum ImportGranularity {\n+    /// Do not change the granularity of any imports and preserve the original structure written by the developer.\n+    Preserve,\n+    /// Merge imports from the same crate into a single use statement.\n+    Crate,\n+    /// Merge imports from the same module into a single use statement.\n+    Module,\n+    /// Flatten imports so that each has its own use statement.\n+    Item,\n+}\n+\n+impl ImportGranularity {\n+    pub fn merge_behavior(self) -> Option<MergeBehavior> {\n+        match self {\n+            ImportGranularity::Crate => Some(MergeBehavior::Crate),\n+            ImportGranularity::Module => Some(MergeBehavior::Module),\n+            ImportGranularity::Preserve | ImportGranularity::Item => None,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub struct InsertUseConfig {\n-    pub merge: Option<MergeBehavior>,\n+    pub granularity: ImportGranularity,\n     pub prefix_kind: PrefixKind,\n     pub group: bool,\n }\n@@ -73,7 +96,7 @@ pub fn insert_use<'a>(scope: &ImportScope, path: ast::Path, cfg: InsertUseConfig\n     let use_item =\n         make::use_(None, make::use_tree(path.clone(), None, None, false)).clone_for_update();\n     // merge into existing imports if possible\n-    if let Some(mb) = cfg.merge {\n+    if let Some(mb) = cfg.granularity.merge_behavior() {\n         for existing_use in scope.as_syntax_node().children().filter_map(ast::Use::cast) {\n             if let Some(merged) = try_merge_imports(&existing_use, &use_item, mb) {\n                 ted::replace(existing_use.syntax(), merged.syntax());"}, {"sha": "f99857a89f4bb28d6003eaa5808cb19304c6bb24", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=64f7072c255bd97a58b8344d0beeae281b8f7e13", "patch": "@@ -21,7 +21,7 @@ use crate::bar::A;\n use self::bar::A;\n use super::bar::A;\n use external_crate2::bar::A;\",\n-        None,\n+        ImportGranularity::Item,\n         false,\n         false,\n     );\n@@ -36,7 +36,7 @@ fn insert_not_group_empty() {\n         r\"use external_crate2::bar::A;\n \n \",\n-        None,\n+        ImportGranularity::Item,\n         false,\n         false,\n     );\n@@ -281,7 +281,7 @@ fn insert_empty_module() {\n         r\"{\n     use foo::bar;\n }\",\n-        None,\n+        ImportGranularity::Item,\n         true,\n         true,\n     )\n@@ -635,7 +635,7 @@ fn check(\n     path: &str,\n     ra_fixture_before: &str,\n     ra_fixture_after: &str,\n-    mb: Option<MergeBehavior>,\n+    granularity: ImportGranularity,\n     module: bool,\n     group: bool,\n ) {\n@@ -651,21 +651,21 @@ fn check(\n         .find_map(ast::Path::cast)\n         .unwrap();\n \n-    insert_use(&file, path, InsertUseConfig { merge: mb, prefix_kind: PrefixKind::Plain, group });\n+    insert_use(&file, path, InsertUseConfig { granularity, prefix_kind: PrefixKind::Plain, group });\n     let result = file.as_syntax_node().to_string();\n     assert_eq_text!(ra_fixture_after, &result);\n }\n \n fn check_crate(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Crate), false, true)\n+    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::Crate, false, true)\n }\n \n fn check_module(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, Some(MergeBehavior::Module), false, true)\n+    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::Module, false, true)\n }\n \n fn check_none(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, None, false, true)\n+    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::Item, false, true)\n }\n \n fn check_merge_only_fail(ra_fixture0: &str, ra_fixture1: &str, mb: MergeBehavior) {"}, {"sha": "e72387257ff28cdf7b3af4422e2949f266e6dc45", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=64f7072c255bd97a58b8344d0beeae281b8f7e13", "patch": "@@ -12,8 +12,7 @@ use std::{ffi::OsString, iter, path::PathBuf};\n use flycheck::FlycheckConfig;\n use ide::{AssistConfig, CompletionConfig, DiagnosticsConfig, HoverConfig, InlayHintsConfig};\n use ide_db::helpers::{\n-    insert_use::{InsertUseConfig, PrefixKind},\n-    merge_imports::MergeBehavior,\n+    insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n     SnippetCap,\n };\n use lsp_types::{ClientCapabilities, MarkupKind};\n@@ -35,8 +34,9 @@ use crate::{\n config_data! {\n     struct ConfigData {\n         /// The strategy to use when inserting new imports or merging imports.\n+        assist_importGranularity |\n         assist_importMergeBehavior |\n-        assist_importMergeBehaviour: MergeBehaviorDef  = \"\\\"crate\\\"\",\n+        assist_importMergeBehaviour: ImportGranularityDef  = \"\\\"preserve\\\"\",\n         /// The path structure for newly inserted paths to use.\n         assist_importPrefix: ImportPrefixDef           = \"\\\"plain\\\"\",\n         /// Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.\n@@ -609,10 +609,11 @@ impl Config {\n     }\n     fn insert_use_config(&self) -> InsertUseConfig {\n         InsertUseConfig {\n-            merge: match self.data.assist_importMergeBehavior {\n-                MergeBehaviorDef::None => None,\n-                MergeBehaviorDef::Crate => Some(MergeBehavior::Crate),\n-                MergeBehaviorDef::Module => Some(MergeBehavior::Module),\n+            granularity: match self.data.assist_importGranularity {\n+                ImportGranularityDef::Preserve => ImportGranularity::Preserve,\n+                ImportGranularityDef::Item => ImportGranularity::Item,\n+                ImportGranularityDef::Crate => ImportGranularity::Crate,\n+                ImportGranularityDef::Module => ImportGranularity::Module,\n             },\n             prefix_kind: match self.data.assist_importPrefix {\n                 ImportPrefixDef::Plain => PrefixKind::Plain,\n@@ -717,8 +718,10 @@ enum ManifestOrProjectJson {\n \n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n-enum MergeBehaviorDef {\n-    None,\n+enum ImportGranularityDef {\n+    #[serde(alias = \"none\")]\n+    Item,\n+    Preserve,\n     #[serde(alias = \"full\")]\n     Crate,\n     #[serde(alias = \"last\")]\n@@ -737,7 +740,7 @@ macro_rules! _config_data {\n     (struct $name:ident {\n         $(\n             $(#[doc=$doc:literal])*\n-            $field:ident $(| $alias:ident)?: $ty:ty = $default:expr,\n+            $field:ident $(| $alias:ident)*: $ty:ty = $default:expr,\n         )*\n     }) => {\n         #[allow(non_snake_case)]\n@@ -749,7 +752,7 @@ macro_rules! _config_data {\n                     $field: get_field(\n                         &mut json,\n                         stringify!($field),\n-                        None$(.or(Some(stringify!($alias))))?,\n+                        None$(.or(Some(stringify!($alias))))*,\n                         $default,\n                     ),\n                 )*}"}, {"sha": "cd0b8d559f1d6d0192d851f80ab7c7f3a78b7270", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=64f7072c255bd97a58b8344d0beeae281b8f7e13", "patch": "@@ -13,7 +13,10 @@\n use std::{convert::TryFrom, sync::Arc};\n \n use ide::{Change, CompletionConfig, FilePosition, TextSize};\n-use ide_db::helpers::{insert_use::InsertUseConfig, merge_imports::MergeBehavior, SnippetCap};\n+use ide_db::helpers::{\n+    insert_use::{ImportGranularity, InsertUseConfig},\n+    SnippetCap,\n+};\n use test_utils::project_root;\n use vfs::{AbsPathBuf, VfsPath};\n \n@@ -133,7 +136,7 @@ fn integrated_completion_benchmark() {\n             add_call_argument_snippets: true,\n             snippet_cap: SnippetCap::new(true),\n             insert_use: InsertUseConfig {\n-                merge: Some(MergeBehavior::Crate),\n+                granularity: ImportGranularity::Crate,\n                 prefix_kind: hir::PrefixKind::ByCrate,\n                 group: true,\n             },\n@@ -166,7 +169,7 @@ fn integrated_completion_benchmark() {\n             add_call_argument_snippets: true,\n             snippet_cap: SnippetCap::new(true),\n             insert_use: InsertUseConfig {\n-                merge: Some(MergeBehavior::Crate),\n+                granularity: ImportGranularity::Crate,\n                 prefix_kind: hir::PrefixKind::ByCrate,\n                 group: true,\n             },"}, {"sha": "64d5f9e2e405ef4209fe5cda1dc735cfa3f6f7cf", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f7072c255bd97a58b8344d0beeae281b8f7e13/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=64f7072c255bd97a58b8344d0beeae281b8f7e13", "patch": "@@ -1145,7 +1145,7 @@ mod tests {\n \n     use ide::Analysis;\n     use ide_db::helpers::{\n-        insert_use::{InsertUseConfig, PrefixKind},\n+        insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n         SnippetCap,\n     };\n \n@@ -1177,7 +1177,7 @@ mod tests {\n                     add_call_argument_snippets: true,\n                     snippet_cap: SnippetCap::new(true),\n                     insert_use: InsertUseConfig {\n-                        merge: None,\n+                        granularity: ImportGranularity::Item,\n                         prefix_kind: PrefixKind::Plain,\n                         group: true,\n                     },"}, {"sha": "81179ff9b593a1471bd6b1d01081cc5980f6e772", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64f7072c255bd97a58b8344d0beeae281b8f7e13/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/64f7072c255bd97a58b8344d0beeae281b8f7e13/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=64f7072c255bd97a58b8344d0beeae281b8f7e13", "patch": "@@ -385,19 +385,21 @@\n                     \"markdownDescription\": \"Optional settings passed to the debug engine. Example: `{ \\\"lldb\\\": { \\\"terminal\\\":\\\"external\\\"} }`\"\n                 },\n                 \"$generated-start\": false,\n-                \"rust-analyzer.assist.importMergeBehavior\": {\n-                    \"markdownDescription\": \"The strategy to use when inserting new imports or merging imports.\",\n-                    \"default\": \"crate\",\n+                \"rust-analyzer.assist.importGranularity\": {\n+                    \"markdownDescription\": \"How imports should be grouped into use statements.\",\n+                    \"default\": \"preserve\",\n                     \"type\": \"string\",\n                     \"enum\": [\n-                        \"none\",\n+                        \"preserve\",\n                         \"crate\",\n-                        \"module\"\n+                        \"module\",\n+                        \"item\"\n                     ],\n                     \"enumDescriptions\": [\n-                        \"Do not merge imports at all.\",\n-                        \"Merge imports from the same crate into a single `use` statement.\",\n-                        \"Merge imports from the same module into a single `use` statement.\"\n+                        \"Do not change the granularity of any imports and preserve the original structure written by the developer.\",\n+                        \"Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.\",\n+                        \"Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.\",\n+                        \"Flatten imports so that each has its own use statement.\"\n                     ]\n                 },\n                 \"rust-analyzer.assist.importPrefix\": {"}]}