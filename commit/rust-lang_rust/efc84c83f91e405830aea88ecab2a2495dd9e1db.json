{"sha": "efc84c83f91e405830aea88ecab2a2495dd9e1db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYzg0YzgzZjkxZTQwNTgzMGFlYTg4ZWNhYjJhMjQ5NWRkOWUxZGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-07T09:52:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:31:49Z"}, "message": "remove the `TypeOp` vs `InfcxTypeOp` distinction", "tree": {"sha": "6809c182eeb60dbe45adfd4e001efc0bd7168b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6809c182eeb60dbe45adfd4e001efc0bd7168b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efc84c83f91e405830aea88ecab2a2495dd9e1db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efc84c83f91e405830aea88ecab2a2495dd9e1db", "html_url": "https://github.com/rust-lang/rust/commit/efc84c83f91e405830aea88ecab2a2495dd9e1db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efc84c83f91e405830aea88ecab2a2495dd9e1db/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dee18864ad419036c8759cbdadb63cf132f139ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee18864ad419036c8759cbdadb63cf132f139ef", "html_url": "https://github.com/rust-lang/rust/commit/dee18864ad419036c8759cbdadb63cf132f139ef"}], "stats": {"total": 78, "additions": 23, "deletions": 55}, "files": [{"sha": "8144641a5efbf0b7754f4c6f3691a61e2aea203d", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/efc84c83f91e405830aea88ecab2a2495dd9e1db/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc84c83f91e405830aea88ecab2a2495dd9e1db/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=efc84c83f91e405830aea88ecab2a2495dd9e1db", "patch": "@@ -76,20 +76,21 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             \"equate_inputs_and_outputs: normalized output_ty={:?}\",\n             output_ty\n         );\n+        let param_env = self.param_env;\n         let mir_output_ty = mir.local_decls[RETURN_PLACE].ty;\n         let anon_type_map =\n             self.fully_perform_op(\n                 Locations::All,\n                 CustomTypeOp::new(\n-                    |cx| {\n+                    |infcx| {\n                         let mut obligations = ObligationAccumulator::default();\n \n                         let dummy_body_id = ObligationCause::dummy().body_id;\n                         let (output_ty, anon_type_map) =\n                             obligations.add(infcx.instantiate_anon_types(\n                                 mir_def_id,\n                                 dummy_body_id,\n-                                cx.param_env,\n+                                param_env,\n                                 &output_ty,\n                             ));\n                         debug!(\n@@ -107,15 +108,15 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         );\n                         obligations.add(\n                             infcx\n-                                .at(&ObligationCause::dummy(), cx.param_env)\n+                                .at(&ObligationCause::dummy(), param_env)\n                                 .eq(output_ty, mir_output_ty)?,\n                         );\n \n                         for (&anon_def_id, anon_decl) in &anon_type_map {\n                             let anon_defn_ty = tcx.type_of(anon_def_id);\n                             let anon_defn_ty = anon_defn_ty.subst(tcx, anon_decl.substs);\n                             let anon_defn_ty = renumber::renumber_regions(\n-                                cx.infcx,\n+                                infcx,\n                                 TyContext::Location(Location::START),\n                                 &anon_defn_ty,\n                             );\n@@ -126,7 +127,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                             debug!(\"equate_inputs_and_outputs: anon_defn_ty={:?}\", anon_defn_ty);\n                             obligations.add(\n                                 infcx\n-                                    .at(&ObligationCause::dummy(), cx.param_env)\n+                                    .at(&ObligationCause::dummy(), param_env)\n                                     .eq(anon_decl.concrete_ty, anon_defn_ty)?,\n                             );\n                         }"}, {"sha": "f81b56de2483fd1221f4d46fd5b0cf03b4834440", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/efc84c83f91e405830aea88ecab2a2495dd9e1db/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc84c83f91e405830aea88ecab2a2495dd9e1db/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=efc84c83f91e405830aea88ecab2a2495dd9e1db", "patch": "@@ -783,23 +783,24 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             info!(\"fully_perform_op_and_get_region_constraint_data({:?})\", op,);\n         }\n \n-        let mut fulfill_cx = TraitEngine::new(self.infcx.tcx);\n+        let infcx = self.infcx;\n+        let mut fulfill_cx = TraitEngine::new(infcx.tcx);\n         let dummy_body_id = ObligationCause::dummy().body_id;\n-        let InferOk { value, obligations } = self.infcx.commit_if_ok(|_| op.perform(self))?;\n+        let InferOk { value, obligations } = infcx.commit_if_ok(|_| op.perform(infcx))?;\n         debug_assert!(obligations.iter().all(|o| o.cause.body_id == dummy_body_id));\n-        fulfill_cx.register_predicate_obligations(self.infcx, obligations);\n-        if let Err(e) = fulfill_cx.select_all_or_error(self.infcx) {\n+        fulfill_cx.register_predicate_obligations(infcx, obligations);\n+        if let Err(e) = fulfill_cx.select_all_or_error(infcx) {\n             span_mirbug!(self, \"\", \"errors selecting obligation: {:?}\", e);\n         }\n \n-        self.infcx.process_registered_region_obligations(\n+        infcx.process_registered_region_obligations(\n             self.region_bound_pairs,\n             self.implicit_region_bound,\n             self.param_env,\n             dummy_body_id,\n         );\n \n-        let data = self.infcx.take_and_reset_region_constraints();\n+        let data = infcx.take_and_reset_region_constraints();\n         if data.is_empty() {\n             Ok((value, None))\n         } else {"}, {"sha": "127841bec7c4955b4db9f9e520509e53192d70aa", "filename": "src/librustc_mir/borrow_check/nll/type_check/type_op/mod.rs", "status": "modified", "additions": 10, "deletions": 44, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/efc84c83f91e405830aea88ecab2a2495dd9e1db/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc84c83f91e405830aea88ecab2a2495dd9e1db/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op%2Fmod.rs?ref=efc84c83f91e405830aea88ecab2a2495dd9e1db", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow_check::nll::type_check::TypeChecker;\n use rustc::infer::{InferCtxt, InferOk, InferResult};\n use rustc::traits::query::NoSolution;\n use rustc::traits::{Normalized, Obligation, ObligationCause, PredicateObligation};\n@@ -24,11 +23,7 @@ pub(super) trait TypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n     /// produce the output, else returns `Err(self)` back.\n     fn trivial_noop(self) -> Result<Self::Output, Self>;\n \n-    /// Produce a description of the operation for the debug logs.\n-    fn perform(\n-        self,\n-        type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,\n-    ) -> InferResult<'tcx, Self::Output>;\n+    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output>;\n }\n \n pub(super) struct CustomTypeOp<F, G> {\n@@ -39,7 +34,7 @@ pub(super) struct CustomTypeOp<F, G> {\n impl<F, G> CustomTypeOp<F, G> {\n     pub(super) fn new<'gcx, 'tcx, R>(closure: F, description: G) -> Self\n     where\n-        F: FnOnce(&mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R>,\n+        F: FnOnce(&InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R>,\n         G: Fn() -> String,\n     {\n         CustomTypeOp { closure, description }\n@@ -48,7 +43,7 @@ impl<F, G> CustomTypeOp<F, G> {\n \n impl<'gcx, 'tcx, F, R, G> TypeOp<'gcx, 'tcx> for CustomTypeOp<F, G>\n where\n-    F: FnOnce(&mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R>,\n+    F: FnOnce(&InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R>,\n     G: Fn() -> String,\n {\n     type Output = R;\n@@ -57,8 +52,8 @@ where\n         Err(self)\n     }\n \n-    fn perform(self, type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R> {\n-        (self.closure)(type_checker)\n+    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R> {\n+        (self.closure)(infcx)\n     }\n }\n \n@@ -71,35 +66,6 @@ where\n     }\n }\n \n-pub(super) trait InfcxTypeOp<'gcx, 'tcx>: Sized + fmt::Debug {\n-    type Output;\n-\n-    /// Micro-optimization: returns `Ok(x)` if we can trivially\n-    /// produce the output, else returns `Err(self)` back.\n-    fn trivial_noop(self) -> Result<Self::Output, Self>;\n-\n-    /// Produce a description of the operation for the debug logs.\n-    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output>;\n-}\n-\n-impl<'gcx, 'tcx, OP> TypeOp<'gcx, 'tcx> for OP\n-where\n-    OP: InfcxTypeOp<'gcx, 'tcx>,\n-{\n-    type Output = OP::Output;\n-\n-    fn trivial_noop(self) -> Result<Self::Output, Self> {\n-        InfcxTypeOp::trivial_noop(self)\n-    }\n-\n-    fn perform(\n-        self,\n-        type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,\n-    ) -> InferResult<'tcx, OP::Output> {\n-        InfcxTypeOp::perform(self, type_checker.infcx)\n-    }\n-}\n-\n #[derive(Debug)]\n pub(super) struct Subtype<'tcx> {\n     param_env: ParamEnv<'tcx>,\n@@ -117,7 +83,7 @@ impl<'tcx> Subtype<'tcx> {\n     }\n }\n \n-impl<'gcx, 'tcx> InfcxTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n+impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n     type Output = ();\n \n     fn trivial_noop(self) -> Result<Self::Output, Self> {\n@@ -148,7 +114,7 @@ impl<'tcx> Eq<'tcx> {\n     }\n }\n \n-impl<'gcx, 'tcx> InfcxTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n+impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Eq<'tcx> {\n     type Output = ();\n \n     fn trivial_noop(self) -> Result<Self::Output, Self> {\n@@ -185,7 +151,7 @@ impl<'tcx> ProvePredicates<'tcx> {\n     }\n }\n \n-impl<'gcx, 'tcx> InfcxTypeOp<'gcx, 'tcx> for ProvePredicates<'tcx> {\n+impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for ProvePredicates<'tcx> {\n     type Output = ();\n \n     fn trivial_noop(self) -> Result<Self::Output, Self> {\n@@ -219,7 +185,7 @@ where\n     }\n }\n \n-impl<'gcx, 'tcx, T> InfcxTypeOp<'gcx, 'tcx> for Normalize<'tcx, T>\n+impl<'gcx, 'tcx, T> TypeOp<'gcx, 'tcx> for Normalize<'tcx, T>\n where\n     T: fmt::Debug + TypeFoldable<'tcx>,\n {\n@@ -259,7 +225,7 @@ impl<'tcx> DropckOutlives<'tcx> {\n     }\n }\n \n-impl<'gcx, 'tcx> InfcxTypeOp<'gcx, 'tcx> for DropckOutlives<'tcx> {\n+impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for DropckOutlives<'tcx> {\n     type Output = Vec<Kind<'tcx>>;\n \n     fn trivial_noop(self) -> Result<Self::Output, Self> {"}]}