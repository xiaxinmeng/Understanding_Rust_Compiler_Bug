{"sha": "23de8013a641247a2244797f5919249ae069f369", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZGU4MDEzYTY0MTI0N2EyMjQ0Nzk3ZjU5MTkyNDlhZTA2OWYzNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-20T00:25:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-20T00:25:10Z"}, "message": "Auto merge of #6764 - matthiaskrgr:lintcheck_par_iter, r=flip1995\n\nlintcheck: parallelize\n\nBy default we use a single thread and one target dir as before.\n\nIf `-j n` is passed, use `n` target dirs and run one clippy in each of them.\nWe need several target dirs because cargo would lock them for a single process otherwise which would prevent the parallelism.\n`-j 0` makes rayon use  $thread_count/2 (which I assume is the number of physical cores of a machine) for the number of threads.\n\nOther change:\nShow output of clippy being compiled when building it for lintcheck (makes it easier to spot compiler errors etc)\nShow some progress indication in the \"Linting... foo 1.2.3\"  message.\nSort crates before linting (previously crates would be split randomly between target dirs, with the sorting, we try to make sure that even crates land in target dir 0 and odd ones in target dir 1 etc..)\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\nchangelog: parallelize lintcheck with rayon", "tree": {"sha": "5ff5cf45f79c8dfeacd4cb84909455abdd62481e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ff5cf45f79c8dfeacd4cb84909455abdd62481e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23de8013a641247a2244797f5919249ae069f369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23de8013a641247a2244797f5919249ae069f369", "html_url": "https://github.com/rust-lang/rust/commit/23de8013a641247a2244797f5919249ae069f369", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23de8013a641247a2244797f5919249ae069f369/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f70e881374e4204a8537265f5f73146f0dc6428", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f70e881374e4204a8537265f5f73146f0dc6428", "html_url": "https://github.com/rust-lang/rust/commit/0f70e881374e4204a8537265f5f73146f0dc6428"}, {"sha": "8499a32859280e3f29a2b000450bcec13bf80b9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8499a32859280e3f29a2b000450bcec13bf80b9c", "html_url": "https://github.com/rust-lang/rust/commit/8499a32859280e3f29a2b000450bcec13bf80b9c"}], "stats": {"total": 102, "additions": 87, "deletions": 15}, "files": [{"sha": "ebf157b80acf1c3aaf8236d145cb16c1977a22a5", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23de8013a641247a2244797f5919249ae069f369/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/23de8013a641247a2244797f5919249ae069f369/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=23de8013a641247a2244797f5919249ae069f369", "patch": "@@ -19,8 +19,9 @@ shell-escape = \"0.1\"\n tar = { version = \"0.4.30\", optional = true }\n toml = { version = \"0.5\", optional = true }\n ureq = { version = \"2.0.0-rc3\", optional = true }\n+rayon = { version = \"1.5.0\", optional = true }\n walkdir = \"2\"\n \n [features]\n-lintcheck = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\", \"serde\", \"fs_extra\"]\n+lintcheck = [\"flate2\", \"serde_json\", \"tar\", \"toml\", \"ureq\", \"serde\", \"fs_extra\", \"rayon\"]\n deny-warnings = []"}, {"sha": "d9933f0963aad5f9802ba4102cc196af906226ac", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 76, "deletions": 13, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/23de8013a641247a2244797f5919249ae069f369/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de8013a641247a2244797f5919249ae069f369/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=23de8013a641247a2244797f5919249ae069f369", "patch": "@@ -11,9 +11,11 @@ use crate::clippy_project_root;\n \n use std::collections::HashMap;\n use std::process::Command;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n use std::{env, fmt, fs::write, path::PathBuf};\n \n use clap::ArgMatches;\n+use rayon::prelude::*;\n use serde::{Deserialize, Serialize};\n use serde_json::Value;\n \n@@ -37,7 +39,7 @@ struct TomlCrate {\n \n /// Represents an archive we download from crates.io, or a git repo, or a local repo/folder\n /// Once processed (downloaded/extracted/cloned/copied...), this will be translated into a `Crate`\n-#[derive(Debug, Serialize, Deserialize, Eq, Hash, PartialEq)]\n+#[derive(Debug, Serialize, Deserialize, Eq, Hash, PartialEq, Ord, PartialOrd)]\n enum CrateSource {\n     CratesIo {\n         name: String,\n@@ -215,11 +217,34 @@ impl CrateSource {\n impl Crate {\n     /// Run `cargo clippy` on the `Crate` and collect and return all the lint warnings that clippy\n     /// issued\n-    fn run_clippy_lints(&self, cargo_clippy_path: &PathBuf) -> Vec<ClippyWarning> {\n-        println!(\"Linting {} {}...\", &self.name, &self.version);\n+    fn run_clippy_lints(\n+        &self,\n+        cargo_clippy_path: &PathBuf,\n+        target_dir_index: &AtomicUsize,\n+        thread_limit: usize,\n+        total_crates_to_lint: usize,\n+    ) -> Vec<ClippyWarning> {\n+        // advance the atomic index by one\n+        let index = target_dir_index.fetch_add(1, Ordering::SeqCst);\n+        // \"loop\" the index within 0..thread_limit\n+        let target_dir_index = index % thread_limit;\n+        let perc = ((index * 100) as f32 / total_crates_to_lint as f32) as u8;\n+\n+        if thread_limit == 1 {\n+            println!(\n+                \"{}/{} {}% Linting {} {}\",\n+                index, total_crates_to_lint, perc, &self.name, &self.version\n+            );\n+        } else {\n+            println!(\n+                \"{}/{} {}% Linting {} {} in target dir {:?}\",\n+                index, total_crates_to_lint, perc, &self.name, &self.version, target_dir_index\n+            );\n+        }\n+\n         let cargo_clippy_path = std::fs::canonicalize(cargo_clippy_path).unwrap();\n \n-        let shared_target_dir = clippy_project_root().join(\"target/lintcheck/shared_target_dir/\");\n+        let shared_target_dir = clippy_project_root().join(\"target/lintcheck/shared_target_dir\");\n \n         let mut args = vec![\"--\", \"--message-format=json\", \"--\", \"--cap-lints=warn\"];\n \n@@ -232,7 +257,11 @@ impl Crate {\n         }\n \n         let all_output = std::process::Command::new(&cargo_clippy_path)\n-            .env(\"CARGO_TARGET_DIR\", shared_target_dir)\n+            // use the looping index to create individual target dirs\n+            .env(\n+                \"CARGO_TARGET_DIR\",\n+                shared_target_dir.join(format!(\"_{:?}\", target_dir_index)),\n+            )\n             // lint warnings will look like this:\n             // src/cargo/ops/cargo_compile.rs:127:35: warning: usage of `FromIterator::from_iter`\n             .args(&args)\n@@ -283,13 +312,13 @@ fn filter_clippy_warnings(line: &str) -> bool {\n \n /// Builds clippy inside the repo to make sure we have a clippy executable we can use.\n fn build_clippy() {\n-    let output = Command::new(\"cargo\")\n+    let status = Command::new(\"cargo\")\n         .arg(\"build\")\n-        .output()\n+        .status()\n         .expect(\"Failed to build clippy!\");\n-    if !output.status.success() {\n-        eprintln!(\"Failed to compile Clippy\");\n-        eprintln!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr))\n+    if !status.success() {\n+        eprintln!(\"Error: Failed to compile Clippy!\");\n+        std::process::exit(1);\n     }\n }\n \n@@ -356,6 +385,9 @@ fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n             unreachable!(\"Failed to translate TomlCrate into CrateSource!\");\n         }\n     });\n+    // sort the crates\n+    crate_sources.sort();\n+\n     (toml_filename, crate_sources)\n }\n \n@@ -454,15 +486,46 @@ pub fn run(clap_config: &ArgMatches) {\n             .into_iter()\n             .map(|krate| krate.download_and_extract())\n             .filter(|krate| krate.name == only_one_crate)\n-            .map(|krate| krate.run_clippy_lints(&cargo_clippy_path))\n+            .map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &AtomicUsize::new(0), 1, 1))\n             .flatten()\n             .collect()\n     } else {\n+        let counter = std::sync::atomic::AtomicUsize::new(0);\n+\n+        // Ask rayon for thread count. Assume that half of that is the number of physical cores\n+        // Use one target dir for each core so that we can run N clippys in parallel.\n+        // We need to use different target dirs because cargo would lock them for a single build otherwise,\n+        // killing the parallelism. However this also means that deps will only be reused half/a\n+        // quarter of the time which might result in a longer wall clock runtime\n+\n+        // This helps when we check many small crates with dep-trees that don't have a lot of branches in\n+        // order to achive some kind of parallelism\n+\n+        // by default, use a single thread\n+        let num_cpus = match clap_config.value_of(\"threads\") {\n+            Some(threads) => {\n+                let threads: usize = threads\n+                    .parse()\n+                    .expect(&format!(\"Failed to parse '{}' to a digit\", threads));\n+                if threads == 0 {\n+                    // automatic choice\n+                    // Rayon seems to return thread count so half that for core count\n+                    (rayon::current_num_threads() / 2) as usize\n+                } else {\n+                    threads\n+                }\n+            },\n+            // no -j passed, use a single thread\n+            None => 1,\n+        };\n+\n+        let num_crates = crates.len();\n+\n         // check all crates (default)\n         crates\n-            .into_iter()\n+            .into_par_iter()\n             .map(|krate| krate.download_and_extract())\n-            .map(|krate| krate.run_clippy_lints(&cargo_clippy_path))\n+            .map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, num_cpus, num_crates))\n             .flatten()\n             .collect()\n     };"}, {"sha": "505d465760c57873b1c840ba769276e86b78f00e", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/23de8013a641247a2244797f5919249ae069f369/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23de8013a641247a2244797f5919249ae069f369/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=23de8013a641247a2244797f5919249ae069f369", "patch": "@@ -69,6 +69,14 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                 .value_name(\"CRATES-SOURCES-TOML-PATH\")\n                 .long(\"crates-toml\")\n                 .help(\"set the path for a crates.toml where lintcheck should read the sources from\"),\n+        )\n+        .arg(\n+            Arg::with_name(\"threads\")\n+                .takes_value(true)\n+                .value_name(\"N\")\n+                .short(\"j\")\n+                .long(\"jobs\")\n+                .help(\"number of threads to use, 0 automatic choice\"),\n         );\n \n     let app = App::new(\"Clippy developer tooling\")"}, {"sha": "6fc4e26f7a650524f97f6630b88f155572315c17", "filename": "lintcheck-logs/lintcheck_crates_logs.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23de8013a641247a2244797f5919249ae069f369/lintcheck-logs%2Flintcheck_crates_logs.txt", "raw_url": "https://github.com/rust-lang/rust/raw/23de8013a641247a2244797f5919249ae069f369/lintcheck-logs%2Flintcheck_crates_logs.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck-logs%2Flintcheck_crates_logs.txt?ref=23de8013a641247a2244797f5919249ae069f369", "patch": "@@ -1,4 +1,4 @@\n-clippy 0.1.52 (bed115d55 2021-02-15)\n+clippy 0.1.52 (bb5f9d18a 2021-02-19)\n \n cargo-0.49.0/build.rs:1:null clippy::cargo_common_metadata \"package `cargo` is missing `package.categories` metadata\"\n cargo-0.49.0/build.rs:1:null clippy::cargo_common_metadata \"package `cargo` is missing `package.keywords` metadata\""}]}