{"sha": "cbc9477bda3388062274e835523266bbd2029227", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYzk0NzdiZGEzMzg4MDYyMjc0ZTgzNTUyMzI2NmJiZDIwMjkyMjc=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-04T10:20:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-04T10:20:13Z"}, "message": "Rollup merge of #54780 - scalexm:dup-predicates, r=nikomatsakis\n\nRemove duplicate predicates in `explicit_predicates_of`\n\nI took a more brutal approach than described in #52187. I could have used the `linked_hash_map` crate but this seems overkill, especially as we need a vec storage in the end.\n\nr? @nikomatsakis", "tree": {"sha": "06c1d0d703a7a06a787fc053149d382be4342758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06c1d0d703a7a06a787fc053149d382be4342758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc9477bda3388062274e835523266bbd2029227", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbteldCRBK7hj4Ov3rIwAAdHIIAHdMwmBv5L2xVZ+dHW6TZ+s2\nTl4c5S/x7hm3tl5ToIsD9atT4FrH0FopAnaU+wlBdFB6X1LXYtGuol9AhqoGf5NC\nBrevfmeyQX0IjZXB2J/TdZN4yOAI5Ci4kZW6x/6bmR/2aL+EKys5wZg8yiO8ZY6t\n70VMgG/KMeL+XZag1EG02Yfr7dD/t6gTaSP0Pu5zXHc/jt1TW2hqBUa11bzI4aX+\na7qcOsnnwqQlLj5WRLke3z6v1/pnXMDI+ja1XSrA6icO+RMGFCOsacVOgsxXeHhg\nENXt1V8mfRg00U/F78WKfuA1b54vH9HuJfiXU8jYTXWvi8eJQqVXxcAJGl7QZug=\n=pUdH\n-----END PGP SIGNATURE-----\n", "payload": "tree 06c1d0d703a7a06a787fc053149d382be4342758\nparent 7523cdf101a17eb7d33c55b843510a2a3dcfcfd4\nparent 832797689012ca63a7c9a7acdc7a4f34322d4faf\nauthor Pietro Albini <pietro@pietroalbini.org> 1538648413 +0200\ncommitter GitHub <noreply@github.com> 1538648413 +0200\n\nRollup merge of #54780 - scalexm:dup-predicates, r=nikomatsakis\n\nRemove duplicate predicates in `explicit_predicates_of`\n\nI took a more brutal approach than described in #52187. I could have used the `linked_hash_map` crate but this seems overkill, especially as we need a vec storage in the end.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc9477bda3388062274e835523266bbd2029227", "html_url": "https://github.com/rust-lang/rust/commit/cbc9477bda3388062274e835523266bbd2029227", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc9477bda3388062274e835523266bbd2029227/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7523cdf101a17eb7d33c55b843510a2a3dcfcfd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7523cdf101a17eb7d33c55b843510a2a3dcfcfd4", "html_url": "https://github.com/rust-lang/rust/commit/7523cdf101a17eb7d33c55b843510a2a3dcfcfd4"}, {"sha": "832797689012ca63a7c9a7acdc7a4f34322d4faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/832797689012ca63a7c9a7acdc7a4f34322d4faf", "html_url": "https://github.com/rust-lang/rust/commit/832797689012ca63a7c9a7acdc7a4f34322d4faf"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "f96c85ae7ae3fc497036a0e1a19cb0ecfa097384", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cbc9477bda3388062274e835523266bbd2029227/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc9477bda3388062274e835523266bbd2029227/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=cbc9477bda3388062274e835523266bbd2029227", "patch": "@@ -1637,9 +1637,39 @@ fn explicit_predicates_of<'a, 'tcx>(\n     def_id: DefId,\n ) -> ty::GenericPredicates<'tcx> {\n     use rustc::hir::*;\n+    use rustc_data_structures::fx::FxHashSet;\n \n     debug!(\"explicit_predicates_of(def_id={:?})\", def_id);\n \n+    /// A data structure with unique elements, which preserves order of insertion.\n+    /// Preserving the order of insertion is important here so as not to break\n+    /// compile-fail UI tests.\n+    struct UniquePredicates<'tcx> {\n+        predicates: Vec<(ty::Predicate<'tcx>, Span)>,\n+        uniques: FxHashSet<(ty::Predicate<'tcx>, Span)>,\n+    }\n+\n+    impl<'tcx> UniquePredicates<'tcx> {\n+        fn new() -> Self {\n+            UniquePredicates {\n+                predicates: vec![],\n+                uniques: FxHashSet::default(),\n+            }\n+        }\n+\n+        fn push(&mut self, value: (ty::Predicate<'tcx>, Span)) {\n+            if self.uniques.insert(value) {\n+                self.predicates.push(value);\n+            }\n+        }\n+\n+        fn extend<I: IntoIterator<Item = (ty::Predicate<'tcx>, Span)>>(&mut self, iter: I) {\n+            for value in iter {\n+                self.push(value);\n+            }\n+        }\n+    }\n+\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n     let node = tcx.hir.get(node_id);\n \n@@ -1649,7 +1679,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n     let icx = ItemCtxt::new(tcx, def_id);\n     let no_generics = hir::Generics::empty();\n \n-    let mut predicates = vec![];\n+    let mut predicates = UniquePredicates::new();\n \n     let ast_generics = match node {\n         Node::TraitItem(item) => &item.generics,\n@@ -1744,7 +1774,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n     // on a trait we need to add in the supertrait bounds and bounds found on\n     // associated types.\n     if let Some((_trait_ref, _)) = is_trait {\n-        predicates = tcx.super_predicates_of(def_id).predicates;\n+        predicates.extend(tcx.super_predicates_of(def_id).predicates);\n     }\n \n     // In default impls, we can assume that the self type implements\n@@ -1895,6 +1925,8 @@ fn explicit_predicates_of<'a, 'tcx>(\n         }))\n     }\n \n+    let mut predicates = predicates.predicates;\n+\n     // Subtle: before we store the predicates into the tcx, we\n     // sort them so that predicates like `T: Foo<Item=U>` come\n     // before uses of `U`.  This avoids false ambiguity errors"}, {"sha": "4a3e14ac034721e712f53e07ad4fde770f20056f", "filename": "src/test/ui/chalkify/lower_env1.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbc9477bda3388062274e835523266bbd2029227/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbc9477bda3388062274e835523266bbd2029227/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr?ref=cbc9477bda3388062274e835523266bbd2029227", "patch": "@@ -5,9 +5,8 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n-   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo), WellFormed(Self: Foo).\n+   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo).\n \n error: program clause dump\n   --> $DIR/lower_env1.rs:19:1\n@@ -16,11 +15,10 @@ LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n-   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Foo) :- FromEnv(Self: Foo).\n    = note: Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo), WellFormed(Self: Foo).\n+   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo).\n    = note: WellFormed(Self: Foo) :- Implemented(Self: Foo).\n    = note: WellFormed(Self: std::marker::Sized) :- Implemented(Self: std::marker::Sized).\n "}]}