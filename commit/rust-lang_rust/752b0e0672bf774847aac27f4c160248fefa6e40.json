{"sha": "752b0e0672bf774847aac27f4c160248fefa6e40", "node_id": "C_kwDOAAsO6NoAKDc1MmIwZTA2NzJiZjc3NDg0N2FhYzI3ZjRjMTYwMjQ4ZmVmYTZlNDA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-09T02:48:01Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-13T22:03:47Z"}, "message": "make clean::Item::span return option instead of dummy span", "tree": {"sha": "c52fea3c3037d300ed57dc967ab467ce64750608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c52fea3c3037d300ed57dc967ab467ce64750608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/752b0e0672bf774847aac27f4c160248fefa6e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/752b0e0672bf774847aac27f4c160248fefa6e40", "html_url": "https://github.com/rust-lang/rust/commit/752b0e0672bf774847aac27f4c160248fefa6e40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/752b0e0672bf774847aac27f4c160248fefa6e40/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "569788e47ee3595c9c6f0e332844d982b3e991c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/569788e47ee3595c9c6f0e332844d982b3e991c2", "html_url": "https://github.com/rust-lang/rust/commit/569788e47ee3595c9c6f0e332844d982b3e991c2"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "1a4786c9b0664a056fa0243142e70d1c577e5fb5", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=752b0e0672bf774847aac27f4c160248fefa6e40", "patch": "@@ -415,29 +415,28 @@ impl Item {\n             .unwrap_or(false)\n     }\n \n-    pub(crate) fn span(&self, tcx: TyCtxt<'_>) -> Span {\n+    pub(crate) fn span(&self, tcx: TyCtxt<'_>) -> Option<Span> {\n         let kind = match &*self.kind {\n             ItemKind::StrippedItem(k) => k,\n             _ => &*self.kind,\n         };\n         match kind {\n-            ItemKind::ModuleItem(Module { span, .. }) => *span,\n-            ItemKind::ImplItem(box Impl { kind: ImplKind::Auto, .. }) => Span::dummy(),\n+            ItemKind::ModuleItem(Module { span, .. }) => Some(*span),\n+            ItemKind::ImplItem(box Impl { kind: ImplKind::Auto, .. }) => None,\n             ItemKind::ImplItem(box Impl { kind: ImplKind::Blanket(_), .. }) => {\n                 if let ItemId::Blanket { impl_id, .. } = self.item_id {\n-                    rustc_span(impl_id, tcx)\n+                    Some(rustc_span(impl_id, tcx))\n                 } else {\n                     panic!(\"blanket impl item has non-blanket ID\")\n                 }\n             }\n-            _ => {\n-                self.item_id.as_def_id().map(|did| rustc_span(did, tcx)).unwrap_or_else(Span::dummy)\n-            }\n+            _ => self.item_id.as_def_id().map(|did| rustc_span(did, tcx)),\n         }\n     }\n \n     pub(crate) fn attr_span(&self, tcx: TyCtxt<'_>) -> rustc_span::Span {\n-        crate::passes::span_of_attrs(&self.attrs).unwrap_or_else(|| self.span(tcx).inner())\n+        crate::passes::span_of_attrs(&self.attrs)\n+            .unwrap_or_else(|| self.span(tcx).map_or(rustc_span::DUMMY_SP, |span| span.inner()))\n     }\n \n     /// Finds the `doc` attribute as a NameValue and returns the corresponding\n@@ -2109,14 +2108,6 @@ impl Span {\n         self.0\n     }\n \n-    pub(crate) fn dummy() -> Self {\n-        Self(rustc_span::DUMMY_SP)\n-    }\n-\n-    pub(crate) fn is_dummy(&self) -> bool {\n-        self.0.is_dummy()\n-    }\n-\n     pub(crate) fn filename(&self, sess: &Session) -> FileName {\n         sess.source_map().span_to_filename(self.0)\n     }"}, {"sha": "6f029c66c0b7dfa9e1752ceb7a796298e67c78f8", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=752b0e0672bf774847aac27f4c160248fefa6e40", "patch": "@@ -301,13 +301,10 @@ impl<'tcx> Context<'tcx> {\n     /// may happen, for example, with externally inlined items where the source\n     /// of their crate documentation isn't known.\n     pub(super) fn src_href(&self, item: &clean::Item) -> Option<String> {\n-        self.href_from_span(item.span(self.tcx()), true)\n+        self.href_from_span(item.span(self.tcx())?, true)\n     }\n \n     pub(crate) fn href_from_span(&self, span: clean::Span, with_lines: bool) -> Option<String> {\n-        if span.is_dummy() {\n-            return None;\n-        }\n         let mut root = self.root_path();\n         let mut path = String::new();\n         let cnum = span.cnum(self.sess());"}, {"sha": "5ed5299e09bc0e537210c1588f0d42005f556f48", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=752b0e0672bf774847aac27f4c160248fefa6e40", "patch": "@@ -2677,7 +2677,7 @@ fn render_call_locations(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Ite\n         let contents = match fs::read_to_string(&path) {\n             Ok(contents) => contents,\n             Err(err) => {\n-                let span = item.span(tcx).inner();\n+                let span = item.span(tcx).map_or(rustc_span::DUMMY_SP, |span| span.inner());\n                 tcx.sess\n                     .span_err(span, &format!(\"failed to read file {}: {}\", path.display(), err));\n                 return false;"}, {"sha": "f37c54e42983f09dfb369718a473cfdb1a8a12a4", "filename": "src/librustdoc/html/sources.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Flibrustdoc%2Fhtml%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fsources.rs?ref=752b0e0672bf774847aac27f4c160248fefa6e40", "patch": "@@ -53,6 +53,7 @@ impl LocalSourcesCollector<'_, '_> {\n     fn add_local_source(&mut self, item: &clean::Item) {\n         let sess = self.tcx.sess;\n         let span = item.span(self.tcx);\n+        let Some(span) = span else { return };\n         // skip all synthetic \"files\"\n         if !is_real_and_local(span, sess) {\n             return;\n@@ -109,6 +110,7 @@ impl DocVisitor for SourceCollector<'_, '_> {\n \n         let tcx = self.cx.tcx();\n         let span = item.span(tcx);\n+        let Some(span) = span else { return };\n         let sess = tcx.sess;\n \n         // If we're not rendering sources, there's nothing to do."}, {"sha": "14d99f3410d43834a02bf6ca784580021d45424a", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=752b0e0672bf774847aac27f4c160248fefa6e40", "patch": "@@ -59,7 +59,7 @@ impl JsonRenderer<'_> {\n             id: from_item_id_with_name(item_id, self.tcx, name),\n             crate_id: item_id.krate().as_u32(),\n             name: name.map(|sym| sym.to_string()),\n-            span: self.convert_span(span),\n+            span: span.and_then(|span| self.convert_span(span)),\n             visibility: self.convert_visibility(visibility),\n             docs,\n             attrs,"}, {"sha": "48835abf9525b46b0e69be8cbbc51430b577761c", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=752b0e0672bf774847aac27f4c160248fefa6e40", "patch": "@@ -215,7 +215,6 @@ impl<'a, 'b> DocVisitor for CoverageCalculator<'a, 'b> {\n                     None,\n                 );\n \n-                let filename = i.span(self.ctx.tcx).filename(self.ctx.sess());\n                 let has_doc_example = tests.found_tests != 0;\n                 // The `expect_def_id()` should be okay because `local_def_id_to_hir_id`\n                 // would presumably panic if a fake `DefIndex` were passed.\n@@ -261,13 +260,16 @@ impl<'a, 'b> DocVisitor for CoverageCalculator<'a, 'b> {\n                 let should_have_docs = !should_be_ignored\n                     && (level != lint::Level::Allow || matches!(source, LintLevelSource::Default));\n \n-                debug!(\"counting {:?} {:?} in {:?}\", i.type_(), i.name, filename);\n-                self.items.entry(filename).or_default().count_item(\n-                    has_docs,\n-                    has_doc_example,\n-                    should_have_doc_example(self.ctx, i),\n-                    should_have_docs,\n-                );\n+                if let Some(span) = i.span(self.ctx.tcx) {\n+                    let filename = span.filename(self.ctx.sess());\n+                    debug!(\"counting {:?} {:?} in {:?}\", i.type_(), i.name, filename);\n+                    self.items.entry(filename).or_default().count_item(\n+                        has_docs,\n+                        has_doc_example,\n+                        should_have_doc_example(self.ctx, i),\n+                        should_have_docs,\n+                    );\n+                }\n             }\n         }\n "}, {"sha": "fb32d7c31bc9b3a4fcc6b7912685cb49b615cfe7", "filename": "src/test/rustdoc-json/impls/auto.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752b0e0672bf774847aac27f4c160248fefa6e40/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fimpls%2Fauto.rs?ref=752b0e0672bf774847aac27f4c160248fefa6e40", "patch": "@@ -0,0 +1,18 @@\n+#![feature(no_core, auto_traits, lang_items)]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+pub auto trait Bar {}\n+\n+/// has span\n+impl Foo {\n+    pub fn baz(&self) {}\n+}\n+\n+// Testing spans, so all tests below code\n+// @is auto.json \"$.index[*][?(@.kind=='impl' && @.inner.synthetic==true)].span\" null\n+// @is - \"$.index[*][?(@.docs=='has span')].span.begin\" \"[10, 0]\"\n+// @is - \"$.index[*][?(@.docs=='has span')].span.end\" \"[12, 1]\"\n+pub struct Foo;"}]}