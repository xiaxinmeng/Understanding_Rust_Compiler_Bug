{"sha": "982a48575b53e05cd53f679aac2fedf6346f78c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MmE0ODU3NWI1M2UwNWNkNTNmNjc5YWFjMmZlZGY2MzQ2Zjc4Yzc=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-10-25T00:23:29Z"}, "committer": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-10-26T02:06:17Z"}, "message": "Utilize AccumulateVec to avoid heap allocations in mk_{substs, type_list, tup} calls.", "tree": {"sha": "b9abb641a6559e299567a8cc7c09ea3094d4b23e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9abb641a6559e299567a8cc7c09ea3094d4b23e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/982a48575b53e05cd53f679aac2fedf6346f78c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/982a48575b53e05cd53f679aac2fedf6346f78c7", "html_url": "https://github.com/rust-lang/rust/commit/982a48575b53e05cd53f679aac2fedf6346f78c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/982a48575b53e05cd53f679aac2fedf6346f78c7/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4f7ba376eef754ea76467d5d48f81dddb83b089", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f7ba376eef754ea76467d5d48f81dddb83b089", "html_url": "https://github.com/rust-lang/rust/commit/a4f7ba376eef754ea76467d5d48f81dddb83b089"}], "stats": {"total": 337, "additions": 193, "deletions": 144}, "files": [{"sha": "0a06c0b2dfb763feb59953485149dfb39e79ab88", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -157,13 +157,15 @@ impl<T> TypedArena<T> {\n \n     /// Allocates a slice of objects that are copy into the `TypedArena`, returning a mutable\n     /// reference to it. Will panic if passed a zero-sized types.\n+    ///\n+    /// Panics:\n+    ///  - Zero-sized types\n+    ///  - Zero-length slices\n     #[inline]\n     pub fn alloc_slice(&self, slice: &[T]) -> &mut [T]\n         where T: Copy {\n         assert!(mem::size_of::<T>() != 0);\n-        if slice.len() == 0 {\n-            return unsafe { slice::from_raw_parts_mut(heap::EMPTY as *mut T, 0) };\n-        }\n+        assert!(slice.len() != 0);\n \n         let available_capacity_bytes = self.end.get() as usize - self.ptr.get() as usize;\n         let at_least_bytes = slice.len() * mem::size_of::<T>();"}, {"sha": "8dd82b2d079249e2e617d14cb760ac530ec7f41f", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -163,7 +163,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 let lhs_ty = lhs.ty(mir, tcx);\n                 let rhs_ty = rhs.ty(mir, tcx);\n                 let ty = op.ty(tcx, lhs_ty, rhs_ty);\n-                let ty = tcx.mk_tup(&[ty, tcx.types.bool]);\n+                let ty = tcx.intern_tup(&[ty, tcx.types.bool]);\n                 Some(ty)\n             }\n             &Rvalue::UnaryOp(_, ref operand) => {\n@@ -184,7 +184,7 @@ impl<'tcx> Rvalue<'tcx> {\n                     }\n                     AggregateKind::Tuple => {\n                         Some(tcx.mk_tup(\n-                            &ops.iter().map(|op| op.ty(mir, tcx)).collect::<Vec<_>>()\n+                            ops.iter().map(|op| op.ty(mir, tcx))\n                         ))\n                     }\n                     AggregateKind::Adt(def, _, substs, _) => {"}, {"sha": "ded2fdc58b42b39fb5d6274ef01368ad740d9fe4", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -11,7 +11,7 @@\n use dep_graph::DepGraph;\n use infer::{InferCtxt, InferOk};\n use ty::{self, Ty, TypeFoldable, ToPolyTraitRef, TyCtxt, ToPredicate};\n-use ty::subst::{Substs, Subst};\n+use ty::subst::Subst;\n use rustc_data_structures::obligation_forest::{ObligationForest, Error};\n use rustc_data_structures::obligation_forest::{ForestObligation, ObligationProcessor};\n use std::marker::PhantomData;\n@@ -159,7 +159,7 @@ impl<'a, 'gcx, 'tcx> DeferredObligation<'tcx> {\n                 let concrete_ty = ty_scheme.ty.subst(tcx, substs);\n                 let predicate = ty::TraitRef {\n                     def_id: self.predicate.def_id(),\n-                    substs: Substs::new_trait(tcx, concrete_ty, &[])\n+                    substs: tcx.mk_substs_trait(concrete_ty, &[])\n                 }.to_predicate();\n \n                 let original_obligation = Obligation::new(self.cause.clone(),"}, {"sha": "216df8b092a027101ea493b8592f5536c8673983", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -2599,7 +2599,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                         k\n                     }\n                 });\n-                let substs = Substs::new(tcx, params);\n+                let substs = tcx.mk_substs(params);\n                 for &ty in fields.split_last().unwrap().1 {\n                     if ty.subst(tcx, substs).references_error() {\n                         return Err(Unimplemented);\n@@ -2619,7 +2619,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                         k\n                     }\n                 });\n-                let new_struct = tcx.mk_adt(def, Substs::new(tcx, params));\n+                let new_struct = tcx.mk_adt(def, tcx.mk_substs(params));\n                 let origin = TypeOrigin::Misc(obligation.cause.span);\n                 let InferOk { obligations, .. } =\n                     self.infcx.sub_types(false, origin, new_struct, target)"}, {"sha": "a0792dcf4dd59282863fd6fd304b50bbf9e09200", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -380,7 +380,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             Ok(def_id) => {\n                 Ok(ty::TraitRef {\n                     def_id: def_id,\n-                    substs: Substs::new_trait(self, param_ty, &[])\n+                    substs: self.mk_substs_trait(param_ty, &[])\n                 })\n             }\n             Err(e) => {\n@@ -400,7 +400,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     {\n         let trait_ref = ty::TraitRef {\n             def_id: trait_def_id,\n-            substs: Substs::new_trait(self, param_ty, ty_params)\n+            substs: self.mk_substs_trait(param_ty, ty_params)\n         };\n         predicate_for_trait_ref(cause, trait_ref, recursion_depth)\n     }\n@@ -486,11 +486,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     {\n         let arguments_tuple = match tuple_arguments {\n             TupleArgumentsFlag::No => sig.0.inputs[0],\n-            TupleArgumentsFlag::Yes => self.mk_tup(&sig.0.inputs),\n+            TupleArgumentsFlag::Yes => self.intern_tup(&sig.0.inputs[..]),\n         };\n         let trait_ref = ty::TraitRef {\n             def_id: fn_trait_def_id,\n-            substs: Substs::new_trait(self, self_ty, &[arguments_tuple]),\n+            substs: self.mk_substs_trait(self_ty, &[arguments_tuple]),\n         };\n         ty::Binder((trait_ref, sig.0.output))\n     }"}, {"sha": "8c7a2da3be7fae7c38ad3d68cd0b8daaf0e7e612", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 88, "deletions": 6, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -36,6 +36,7 @@ use ty::maps;\n use util::common::MemoizationMap;\n use util::nodemap::{NodeMap, NodeSet, DefIdMap, DefIdSet};\n use util::nodemap::{FnvHashMap, FnvHashSet};\n+use rustc_data_structures::accumulate_vec::AccumulateVec;\n \n use arena::TypedArena;\n use std::borrow::Borrow;\n@@ -44,6 +45,7 @@ use std::hash::{Hash, Hasher};\n use std::mem;\n use std::ops::Deref;\n use std::rc::Rc;\n+use std::iter;\n use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n use syntax::parse::token::{self, keywords};\n@@ -824,6 +826,9 @@ impl<'a, 'tcx> Lift<'tcx> for Ty<'a> {\n impl<'a, 'tcx> Lift<'tcx> for &'a Substs<'a> {\n     type Lifted = &'tcx Substs<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<&'tcx Substs<'tcx>> {\n+        if self.len() == 0 {\n+            return Some(Slice::empty());\n+        }\n         if let Some(&Interned(substs)) = tcx.interners.substs.borrow().get(&self[..]) {\n             if *self as *const _ == substs as *const _ {\n                 return Some(substs);\n@@ -859,6 +864,9 @@ impl<'a, 'tcx> Lift<'tcx> for &'a Slice<Ty<'a>> {\n     type Lifted = &'tcx Slice<Ty<'tcx>>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n                              -> Option<&'tcx Slice<Ty<'tcx>>> {\n+        if self.len() == 0 {\n+            return Some(Slice::empty());\n+        }\n         if let Some(&Interned(list)) = tcx.interners.type_list.borrow().get(&self[..]) {\n             if *self as *const _ == list as *const _ {\n                 return Some(list);\n@@ -1212,8 +1220,8 @@ macro_rules! slice_interners {\n }\n \n slice_interners!(\n-    type_list: mk_type_list(Ty),\n-    substs: mk_substs(Kind)\n+    type_list: _intern_type_list(Ty),\n+    substs: _intern_substs(Kind)\n );\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n@@ -1318,12 +1326,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(TySlice(ty))\n     }\n \n-    pub fn mk_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n-        self.mk_ty(TyTuple(self.mk_type_list(ts)))\n+    pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {\n+        self.mk_ty(TyTuple(self.intern_type_list(ts)))\n+    }\n+\n+    pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {\n+        iter.intern_with(|ts| self.mk_ty(TyTuple(self.intern_type_list(ts))))\n     }\n \n     pub fn mk_nil(self) -> Ty<'tcx> {\n-        self.mk_tup(&[])\n+        self.intern_tup(&[])\n     }\n \n     pub fn mk_diverging_default(self) -> Ty<'tcx> {\n@@ -1369,7 +1381,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                       -> Ty<'tcx> {\n         self.mk_closure_from_closure_substs(closure_id, ClosureSubsts {\n             func_substs: substs,\n-            upvar_tys: self.mk_type_list(tys)\n+            upvar_tys: self.intern_type_list(tys)\n         })\n     }\n \n@@ -1414,6 +1426,40 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_ty(TyAnon(def_id, substs))\n     }\n \n+    pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx Slice<Ty<'tcx>> {\n+        if ts.len() == 0 {\n+            Slice::empty()\n+        } else {\n+            self._intern_type_list(ts)\n+        }\n+    }\n+\n+    pub fn intern_substs(self, ts: &[Kind<'tcx>]) -> &'tcx Slice<Kind<'tcx>> {\n+        if ts.len() == 0 {\n+            Slice::empty()\n+        } else {\n+            self._intern_substs(ts)\n+        }\n+    }\n+\n+    pub fn mk_type_list<I: InternAs<[Ty<'tcx>],\n+                        &'tcx Slice<Ty<'tcx>>>>(self, iter: I) -> I::Output {\n+        iter.intern_with(|xs| self.intern_type_list(xs))\n+    }\n+\n+    pub fn mk_substs<I: InternAs<[Kind<'tcx>],\n+                     &'tcx Slice<Kind<'tcx>>>>(self, iter: I) -> I::Output {\n+        iter.intern_with(|xs| self.intern_substs(xs))\n+    }\n+\n+    pub fn mk_substs_trait(self,\n+                     s: Ty<'tcx>,\n+                     t: &[Ty<'tcx>])\n+                    -> &'tcx Substs<'tcx>\n+    {\n+        self.mk_substs(iter::once(s).chain(t.into_iter().cloned()).map(Kind::from))\n+    }\n+\n     pub fn trait_items(self, trait_did: DefId) -> Rc<Vec<ty::ImplOrTraitItem<'gcx>>> {\n         self.trait_items_cache.memoize(trait_did, || {\n             let def_ids = self.impl_or_trait_items(trait_did);\n@@ -1432,3 +1478,39 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n }\n+\n+pub trait InternAs<T: ?Sized, R> {\n+    type Output;\n+    fn intern_with<F>(self, F) -> Self::Output\n+        where F: FnOnce(&T) -> R;\n+}\n+\n+impl<I, T, R, E> InternAs<[T], R> for I\n+    where E: InternIteratorElement<T, R>,\n+          I: Iterator<Item=E> {\n+    type Output = E::Output;\n+    fn intern_with<F>(self, f: F) -> Self::Output\n+        where F: FnOnce(&[T]) -> R {\n+        E::intern_with(self, f)\n+    }\n+}\n+\n+pub trait InternIteratorElement<T, R>: Sized {\n+    type Output;\n+    fn intern_with<I: Iterator<Item=Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;\n+}\n+\n+impl<T, R> InternIteratorElement<T, R> for T {\n+    type Output = R;\n+    fn intern_with<I: Iterator<Item=Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {\n+        f(&iter.collect::<AccumulateVec<[_; 8]>>())\n+    }\n+}\n+\n+impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n+    type Output = Result<R, E>;\n+    fn intern_with<I: Iterator<Item=Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {\n+        Ok(f(&iter.collect::<Result<AccumulateVec<[_; 8]>, _>>()?))\n+    }\n+}\n+"}, {"sha": "53909b81435263d837ed9c7412a0b7fb496b26b0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -41,6 +41,7 @@ use std::ops::Deref;\n use std::rc::Rc;\n use std::slice;\n use std::vec::IntoIter;\n+use std::mem;\n use syntax::ast::{self, Name, NodeId};\n use syntax::attr;\n use syntax::parse::token::{self, InternedString};\n@@ -560,6 +561,14 @@ impl<'a, T> IntoIterator for &'a Slice<T> {\n \n impl<'tcx> serialize::UseSpecializedDecodable for &'tcx Slice<Ty<'tcx>> {}\n \n+impl<T> Slice<T> {\n+    pub fn empty<'a>() -> &'a Slice<T> {\n+        unsafe {\n+            mem::transmute(slice::from_raw_parts(0x1 as *const T, 0))\n+        }\n+    }\n+}\n+\n /// Upvars do not get their own node-id. Instead, we use the pair of\n /// the original var id (that is, the root variable that is referenced\n /// by the upvar) and the id of the closure expression.\n@@ -1797,7 +1806,7 @@ impl<'a, 'tcx> AdtDefData<'tcx, 'tcx> {\n             _ if tys.references_error() => tcx.types.err,\n             0 => tcx.types.bool,\n             1 => tys[0],\n-            _ => tcx.mk_tup(&tys)\n+            _ => tcx.intern_tup(&tys[..])\n         };\n \n         match self.sized_constraint.get(dep_node()) {\n@@ -1873,7 +1882,7 @@ impl<'a, 'tcx> AdtDefData<'tcx, 'tcx> {\n                 };\n                 let sized_predicate = Binder(TraitRef {\n                     def_id: sized_trait,\n-                    substs: Substs::new_trait(tcx, ty, &[])\n+                    substs: tcx.mk_substs_trait(ty, &[])\n                 }).to_predicate();\n                 let predicates = tcx.lookup_predicates(self.did).predicates;\n                 if predicates.into_iter().any(|p| p == sized_predicate) {\n@@ -2124,7 +2133,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn node_id_item_substs(self, id: NodeId) -> ItemSubsts<'gcx> {\n         match self.tables.borrow().item_substs.get(&id) {\n             None => ItemSubsts {\n-                substs: Substs::empty(self.global_tcx())\n+                substs: self.global_tcx().intern_substs(&[])\n             },\n             Some(ts) => ts.clone(),\n         }\n@@ -2796,7 +2805,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // regions, so it shouldn't matter what we use for the free id\n         let free_id_outlive = self.region_maps.node_extent(ast::DUMMY_NODE_ID);\n         ty::ParameterEnvironment {\n-            free_substs: Substs::empty(self),\n+            free_substs: self.intern_substs(&[]),\n             caller_bounds: Vec::new(),\n             implicit_region_bound: self.mk_region(ty::ReEmpty),\n             free_id_outlive: free_id_outlive,"}, {"sha": "cb90e6392cf03c613c28fc9b1173d4e84a72cf6a", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -49,12 +49,6 @@ pub trait TypeRelation<'a, 'gcx: 'a+'tcx, 'tcx: 'a> : Sized {\n         Relate::relate(self, a, b)\n     }\n \n-    /// Relete elements of two slices pairwise.\n-    fn relate_zip<T: Relate<'tcx>>(&mut self, a: &[T], b: &[T]) -> RelateResult<'tcx, Vec<T>> {\n-        assert_eq!(a.len(), b.len());\n-        a.iter().zip(b).map(|(a, b)| self.relate(a, b)).collect()\n-    }\n-\n     /// Switch variance for the purpose of relating `a` and `b`.\n     fn relate_with_variance<T: Relate<'tcx>>(&mut self,\n                                              variance: ty::Variance,\n@@ -158,7 +152,7 @@ pub fn relate_substs<'a, 'gcx, 'tcx, R>(relation: &mut R,\n         }\n     });\n \n-    Substs::maybe_new(tcx, params)\n+    Ok(tcx.mk_substs(params)?)\n }\n \n impl<'tcx> Relate<'tcx> for &'tcx ty::BareFnTy<'tcx> {\n@@ -489,10 +483,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n         (&ty::TyTuple(as_), &ty::TyTuple(bs)) =>\n         {\n             if as_.len() == bs.len() {\n-                let ts = as_.iter().zip(bs)\n-                            .map(|(a, b)| relation.relate(a, b))\n-                            .collect::<Result<Vec<_>, _>>()?;\n-                Ok(tcx.mk_tup(&ts))\n+                Ok(tcx.mk_tup(as_.iter().zip(bs).map(|(a, b)| relation.relate(a, b)))?)\n             } else if !(as_.is_empty() || bs.is_empty()) {\n                 Err(TypeError::TupleSize(\n                     expected_found(relation, &as_.len(), &bs.len())))\n@@ -544,10 +535,11 @@ impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n     {\n         let substs = relate_substs(relation, None, a.func_substs, b.func_substs)?;\n-        let upvar_tys = relation.relate_zip(&a.upvar_tys, &b.upvar_tys)?;\n+        assert_eq!(a.upvar_tys.len(), b.upvar_tys.len());\n         Ok(ty::ClosureSubsts {\n             func_substs: substs,\n-            upvar_tys: relation.tcx().mk_type_list(&upvar_tys)\n+            upvar_tys: relation.tcx().mk_type_list(\n+                a.upvar_tys.iter().zip(b.upvar_tys).map(|(a, b)| relation.relate(a, b)))?\n         })\n     }\n }"}, {"sha": "3165edebf1a46256e302514fa4c8625bfb90db1f", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -11,6 +11,7 @@\n use infer::type_variable;\n use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n+use rustc_data_structures::accumulate_vec::AccumulateVec;\n \n use std::rc::Rc;\n use syntax::abi;\n@@ -448,8 +449,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::TraitObject<'tcx> {\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Slice<Ty<'tcx>> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        let tys = self.iter().map(|t| t.fold_with(folder)).collect::<Vec<_>>();\n-        folder.tcx().mk_type_list(&tys)\n+        let v = self.iter().map(|t| t.fold_with(folder)).collect::<AccumulateVec<[_; 8]>>();\n+        folder.tcx().intern_type_list(&v)\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {"}, {"sha": "a4ceecd8c9d7b27ef74df324a89def091b6c176b", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 9, "deletions": 38, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -16,6 +16,7 @@ use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n \n use serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use syntax_pos::{Span, DUMMY_SP};\n+use rustc_data_structures::accumulate_vec::AccumulateVec;\n \n use core::nonzero::NonZero;\n use std::fmt;\n@@ -164,31 +165,6 @@ impl<'tcx> Decodable for Kind<'tcx> {\n pub type Substs<'tcx> = Slice<Kind<'tcx>>;\n \n impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n-    pub fn new<I>(tcx: TyCtxt<'a, 'gcx, 'tcx>, params: I)\n-                  -> &'tcx Substs<'tcx>\n-    where I: IntoIterator<Item=Kind<'tcx>> {\n-        tcx.mk_substs(&params.into_iter().collect::<Vec<_>>())\n-    }\n-\n-    pub fn maybe_new<I, E>(tcx: TyCtxt<'a, 'gcx, 'tcx>, params: I)\n-                           -> Result<&'tcx Substs<'tcx>, E>\n-    where I: IntoIterator<Item=Result<Kind<'tcx>, E>> {\n-        Ok(Substs::new(tcx, params.into_iter().collect::<Result<Vec<_>, _>>()?))\n-    }\n-\n-    pub fn new_trait(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                     s: Ty<'tcx>,\n-                     t: &[Ty<'tcx>])\n-                    -> &'tcx Substs<'tcx>\n-    {\n-        let t = iter::once(s).chain(t.iter().cloned());\n-        Substs::new(tcx, t.map(Kind::from))\n-    }\n-\n-    pub fn empty(tcx: TyCtxt<'a, 'gcx, 'tcx>) -> &'tcx Substs<'tcx> {\n-        Substs::new(tcx, iter::empty())\n-    }\n-\n     /// Creates a Substs for generic parameter definitions,\n     /// by calling closures to obtain each region and type.\n     /// The closures get to observe the Substs as they're\n@@ -203,10 +179,8 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n           FT: FnMut(&ty::TypeParameterDef<'tcx>, &[Kind<'tcx>]) -> Ty<'tcx> {\n         let defs = tcx.lookup_generics(def_id);\n         let mut substs = Vec::with_capacity(defs.count());\n-\n         Substs::fill_item(&mut substs, tcx, defs, &mut mk_region, &mut mk_type);\n-\n-        Substs::new(tcx, substs)\n+        tcx.intern_substs(&substs)\n     }\n \n     fn fill_item<FR, FT>(substs: &mut Vec<Kind<'tcx>>,\n@@ -298,20 +272,20 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                        target_substs: &Substs<'tcx>)\n                        -> &'tcx Substs<'tcx> {\n         let defs = tcx.lookup_generics(source_ancestor);\n-        Substs::new(tcx, target_substs.iter().chain(&self[defs.own_count()..]).cloned())\n+        tcx.mk_substs(target_substs.iter().chain(&self[defs.own_count()..]).cloned())\n     }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx Substs<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        let params: Vec<_> = self.iter().map(|k| k.fold_with(folder)).collect();\n+        let params: AccumulateVec<[_; 8]> = self.iter().map(|k| k.fold_with(folder)).collect();\n \n         // If folding doesn't change the substs, it's faster to avoid\n         // calling `mk_substs` and instead reuse the existing substs.\n         if params[..] == self[..] {\n             self\n         } else {\n-            folder.tcx().mk_substs(&params)\n+            folder.tcx().intern_substs(&params)\n         }\n     }\n \n@@ -547,10 +521,9 @@ impl<'a, 'gcx, 'tcx> ty::TraitRef<'tcx> {\n                        -> ty::TraitRef<'tcx> {\n         let defs = tcx.lookup_generics(trait_id);\n \n-        let params = substs[..defs.own_count()].iter().cloned();\n         ty::TraitRef {\n             def_id: trait_id,\n-            substs: Substs::new(tcx, params)\n+            substs: tcx.intern_substs(&substs[..defs.own_count()])\n         }\n     }\n }\n@@ -562,10 +535,9 @@ impl<'a, 'gcx, 'tcx> ty::ExistentialTraitRef<'tcx> {\n         // Assert there is a Self.\n         trait_ref.substs.type_at(0);\n \n-        let params = trait_ref.substs[1..].iter().cloned();\n         ty::ExistentialTraitRef {\n             def_id: trait_ref.def_id,\n-            substs: Substs::new(tcx, params)\n+            substs: tcx.intern_substs(&trait_ref.substs[1..])\n         }\n     }\n }\n@@ -582,11 +554,10 @@ impl<'a, 'gcx, 'tcx> ty::PolyExistentialTraitRef<'tcx> {\n         assert!(!self_ty.has_escaping_regions());\n \n         self.map_bound(|trait_ref| {\n-            let params = trait_ref.substs.iter().cloned();\n-            let params = iter::once(Kind::from(self_ty)).chain(params);\n             ty::TraitRef {\n                 def_id: trait_ref.def_id,\n-                substs: Substs::new(tcx, params)\n+                substs: tcx.mk_substs(\n+                    iter::once(Kind::from(self_ty)).chain(trait_ref.substs.iter().cloned()))\n             }\n         })\n     }"}, {"sha": "af92569cc350c0ceb0ede0caab46185a0bf3e9be", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use ty::subst::{self, Subst, Substs};\n+use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n use ty::{TyBool, TyChar, TyAdt};\n use ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyFnDef, TyFnPtr};\n@@ -886,7 +886,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                     // by looking up the projections associated with the def_id.\n                     let item_predicates = tcx.lookup_predicates(def_id);\n                     let substs = tcx.lift(&substs).unwrap_or_else(|| {\n-                        Substs::empty(tcx)\n+                        tcx.intern_substs(&[])\n                     });\n                     let bounds = item_predicates.instantiate(tcx, substs);\n "}, {"sha": "fce5553c2fee9f00062f879751c7a613931b5351", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -857,7 +857,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n         let unit_temp = Lvalue::Local(self.patch.new_temp(tcx.mk_nil()));\n         let free_func = tcx.lang_items.require(lang_items::BoxFreeFnLangItem)\n             .unwrap_or_else(|e| tcx.sess.fatal(&e));\n-        let substs = Substs::new(tcx, iter::once(Kind::from(ty)));\n+        let substs = tcx.mk_substs(iter::once(Kind::from(ty)));\n         let fty = tcx.lookup_item_type(free_func).ty.subst(tcx, substs);\n \n         self.patch.new_block(BasicBlockData {"}, {"sha": "c400610a688a0ebb9f0776ecc2c22a239fd0511c", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -20,14 +20,13 @@ use rustc::middle::region::{self, CodeExtent};\n use rustc::middle::region::CodeExtentData;\n use rustc::middle::resolve_lifetime;\n use rustc::middle::stability;\n-use rustc::ty::subst::{Kind, Subst, Substs};\n+use rustc::ty::subst::{Kind, Subst};\n use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::infer::{self, InferOk, InferResult, TypeOrigin};\n use rustc_metadata::cstore::CStore;\n use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n-use std::iter;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::abi::Abi;\n@@ -275,7 +274,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn t_pair(&self, ty1: Ty<'tcx>, ty2: Ty<'tcx>) -> Ty<'tcx> {\n-        self.infcx.tcx.mk_tup(&[ty1, ty2])\n+        self.infcx.tcx.intern_tup(&[ty1, ty2])\n     }\n \n     pub fn t_param(&self, index: u32) -> Ty<'tcx> {\n@@ -679,7 +678,7 @@ fn subst_ty_renumber_bound() {\n             env.t_fn(&[t_param], env.t_nil())\n         };\n \n-        let substs = Substs::new(env.infcx.tcx, iter::once(Kind::from(t_rptr_bound1)));\n+        let substs = env.infcx.tcx.intern_substs(&[Kind::from(t_rptr_bound1)]);\n         let t_substituted = t_source.subst(env.infcx.tcx, substs);\n \n         // t_expected = fn(&'a isize)\n@@ -714,7 +713,7 @@ fn subst_ty_renumber_some_bounds() {\n             env.t_pair(t_param, env.t_fn(&[t_param], env.t_nil()))\n         };\n \n-        let substs = Substs::new(env.infcx.tcx, iter::once(Kind::from(t_rptr_bound1)));\n+        let substs = env.infcx.tcx.intern_substs(&[Kind::from(t_rptr_bound1)]);\n         let t_substituted = t_source.subst(env.infcx.tcx, substs);\n \n         // t_expected = (&'a isize, fn(&'a isize))\n@@ -776,7 +775,7 @@ fn subst_region_renumber_region() {\n             env.t_fn(&[env.t_rptr(re_early)], env.t_nil())\n         };\n \n-        let substs = Substs::new(env.infcx.tcx, iter::once(Kind::from(re_bound1)));\n+        let substs = env.infcx.tcx.intern_substs(&[Kind::from(re_bound1)]);\n         let t_substituted = t_source.subst(env.infcx.tcx, substs);\n \n         // t_expected = fn(&'a isize)\n@@ -803,8 +802,8 @@ fn walk_ty() {\n         let tcx = env.infcx.tcx;\n         let int_ty = tcx.types.isize;\n         let uint_ty = tcx.types.usize;\n-        let tup1_ty = tcx.mk_tup(&[int_ty, uint_ty, int_ty, uint_ty]);\n-        let tup2_ty = tcx.mk_tup(&[tup1_ty, tup1_ty, uint_ty]);\n+        let tup1_ty = tcx.intern_tup(&[int_ty, uint_ty, int_ty, uint_ty]);\n+        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, uint_ty]);\n         let uniq_ty = tcx.mk_box(tup2_ty);\n         let walked: Vec<_> = uniq_ty.walk().collect();\n         assert_eq!(walked,\n@@ -819,8 +818,8 @@ fn walk_ty_skip_subtree() {\n         let tcx = env.infcx.tcx;\n         let int_ty = tcx.types.isize;\n         let uint_ty = tcx.types.usize;\n-        let tup1_ty = tcx.mk_tup(&[int_ty, uint_ty, int_ty, uint_ty]);\n-        let tup2_ty = tcx.mk_tup(&[tup1_ty, tup1_ty, uint_ty]);\n+        let tup1_ty = tcx.intern_tup(&[int_ty, uint_ty, int_ty, uint_ty]);\n+        let tup2_ty = tcx.intern_tup(&[tup1_ty, tup1_ty, uint_ty]);\n         let uniq_ty = tcx.mk_box(tup2_ty);\n \n         // types we expect to see (in order), plus a boolean saying"}, {"sha": "3d6dd5dedf5ba94c588d47c981fc5ff8da4d53e8", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -503,21 +503,21 @@ impl LateLintPass for MissingCopyImplementations {\n                     return;\n                 }\n                 let def = cx.tcx.lookup_adt_def(cx.tcx.map.local_def_id(item.id));\n-                (def, cx.tcx.mk_adt(def, Substs::empty(cx.tcx)))\n+                (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))\n             }\n             hir::ItemUnion(_, ref ast_generics) => {\n                 if ast_generics.is_parameterized() {\n                     return;\n                 }\n                 let def = cx.tcx.lookup_adt_def(cx.tcx.map.local_def_id(item.id));\n-                (def, cx.tcx.mk_adt(def, Substs::empty(cx.tcx)))\n+                (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))\n             }\n             hir::ItemEnum(_, ref ast_generics) => {\n                 if ast_generics.is_parameterized() {\n                     return;\n                 }\n                 let def = cx.tcx.lookup_adt_def(cx.tcx.map.local_def_id(item.id));\n-                (def, cx.tcx.mk_adt(def, Substs::empty(cx.tcx)))\n+                (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))\n             }\n             _ => return,\n         };"}, {"sha": "7aa0ed1d1ab85047a498718ace61b6cbff127562", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -374,7 +374,7 @@ impl<'a, 'tcx> SpecializedDecoder<ty::GenericPredicates<'tcx>> for DecodeContext\n \n impl<'a, 'tcx> SpecializedDecoder<&'tcx Substs<'tcx>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<&'tcx Substs<'tcx>, Self::Error> {\n-        Ok(self.tcx().mk_substs(&Vec::decode(self)?))\n+        Ok(self.tcx().mk_substs((0..self.read_usize()?).map(|_| Decodable::decode(self)))?)\n     }\n }\n \n@@ -386,7 +386,7 @@ impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::Region> for DecodeContext<'a, 'tcx>\n \n impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::Slice<Ty<'tcx>>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<&'tcx ty::Slice<Ty<'tcx>>, Self::Error> {\n-        Ok(self.tcx().mk_type_list(&Vec::decode(self)?))\n+        Ok(self.tcx().mk_type_list((0..self.read_usize()?).map(|_| Decodable::decode(self)))?)\n     }\n }\n "}, {"sha": "dcb301cab00c8b89dbd17eeffd072a52bc901dde", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -257,7 +257,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = self.source_info(span);\n         let bool_ty = self.hir.bool_ty();\n         if self.hir.check_overflow() && op.is_checkable() && ty.is_integral() {\n-            let result_tup = self.hir.tcx().mk_tup(&[ty, bool_ty]);\n+            let result_tup = self.hir.tcx().intern_tup(&[ty, bool_ty]);\n             let result_value = self.temp(result_tup);\n \n             self.cfg.push_assign(block, source_info,"}, {"sha": "e5d4ea8af50a28ecd181361912b3a3f0776b1585", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -89,15 +89,13 @@ should go to.\n use build::{BlockAnd, BlockAndExtension, Builder, CFG, ScopeAuxiliary, ScopeId};\n use rustc::middle::region::{CodeExtent, CodeExtentData};\n use rustc::middle::lang_items;\n-use rustc::ty::subst::{Kind, Substs, Subst};\n+use rustc::ty::subst::{Kind, Subst};\n use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::repr::*;\n use syntax_pos::Span;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::fnv::FnvHashMap;\n \n-use std::iter;\n-\n pub struct Scope<'tcx> {\n     /// the scope-id within the scope_auxiliary\n     id: ScopeId,\n@@ -800,7 +798,7 @@ fn build_free<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                               -> TerminatorKind<'tcx> {\n     let free_func = tcx.lang_items.require(lang_items::BoxFreeFnLangItem)\n                        .unwrap_or_else(|e| tcx.sess.fatal(&e));\n-    let substs = Substs::new(tcx, iter::once(Kind::from(data.item_ty)));\n+    let substs = tcx.intern_substs(&[Kind::from(data.item_ty)]);\n     TerminatorKind::Call {\n         func: Operand::Constant(Constant {\n             span: data.span,"}, {"sha": "9fe3addea4127ac83593422c24b58015b995f3f2", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -27,7 +27,7 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::FnKind;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::infer::InferCtxt;\n-use rustc::ty::subst::{Subst, Substs};\n+use rustc::ty::subst::Subst;\n use rustc::ty::{self, Ty, TyCtxt};\n use syntax::parse::token;\n use rustc::hir;\n@@ -146,7 +146,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n                         params: &[Ty<'tcx>])\n                         -> (Ty<'tcx>, Literal<'tcx>) {\n         let method_name = token::intern(method_name);\n-        let substs = Substs::new_trait(self.tcx, self_ty, params);\n+        let substs = self.tcx.mk_substs_trait(self_ty, params);\n         for trait_item in self.tcx.trait_items(trait_def_id).iter() {\n             match *trait_item {\n                 ty::ImplOrTraitItem::MethodTraitItem(ref method) => {"}, {"sha": "d4d4f883e7b851a3e0aa4b71e8640339efef9ac7", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -214,7 +214,7 @@ pub fn malloc_raw_dyn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     // Allocate space:\n     let def_id = require_alloc_fn(bcx, info_ty, ExchangeMallocFnLangItem);\n-    let r = Callee::def(bcx.ccx(), def_id, Substs::empty(bcx.tcx()))\n+    let r = Callee::def(bcx.ccx(), def_id, bcx.tcx().intern_substs(&[]))\n         .call(bcx, debug_loc, &[size, align], None);\n \n     Result::new(r.bcx, PointerCast(r.bcx, r.val, llty_ptr))\n@@ -405,7 +405,7 @@ pub fn custom_coerce_unsize_info<'scx, 'tcx>(scx: &SharedCrateContext<'scx, 'tcx\n                                              -> CustomCoerceUnsized {\n     let trait_ref = ty::Binder(ty::TraitRef {\n         def_id: scx.tcx().lang_items.coerce_unsized_trait().unwrap(),\n-        substs: Substs::new_trait(scx.tcx(), source_ty, &[target_ty])\n+        substs: scx.tcx().mk_substs_trait(source_ty, &[target_ty])\n     });\n \n     match fulfill_obligation(scx, DUMMY_SP, trait_ref) {\n@@ -848,7 +848,7 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n                 common::validate_substs(instance.substs);\n                 (instance.substs, Some(instance.def))\n             }\n-            None => (Substs::empty(ccx.tcx()), None)\n+            None => (ccx.tcx().intern_substs(&[]), None)\n         };\n \n         let local_id = def_id.and_then(|id| ccx.tcx().map.as_local_node_id(id));\n@@ -1211,7 +1211,7 @@ pub fn maybe_create_entry_wrapper(ccx: &CrateContext) {\n                     Ok(id) => id,\n                     Err(s) => ccx.sess().fatal(&s)\n                 };\n-                let empty_substs = Substs::empty(ccx.tcx());\n+                let empty_substs = ccx.tcx().intern_substs(&[]);\n                 let start_fn = Callee::def(ccx, start_def_id, empty_substs).reify(ccx);\n                 let args = {\n                     let opaque_rust_main ="}, {"sha": "cdd3e919e61c05d4337b27ef05d164f57af01d31", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -327,7 +327,7 @@ fn trans_fn_pointer_shim<'a, 'tcx>(\n         }\n     };\n     let sig = tcx.erase_late_bound_regions_and_normalize(sig);\n-    let tuple_input_ty = tcx.mk_tup(&sig.inputs);\n+    let tuple_input_ty = tcx.intern_tup(&sig.inputs[..]);\n     let sig = ty::FnSig {\n         inputs: vec![bare_fn_ty_maybe_ref,\n                      tuple_input_ty],"}, {"sha": "8a7919d01f5fc929d98bc5932ab42034d57498dd", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -732,7 +732,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n             create_fn_trans_item(scx,\n                                  exchange_free_fn_def_id,\n                                  fn_substs,\n-                                 Substs::empty(scx.tcx()));\n+                                 scx.tcx().intern_substs(&[]));\n \n         output.push(exchange_free_fn_trans_item);\n     }\n@@ -752,7 +752,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n                                    .drop_trait()\n                                    .unwrap();\n \n-        let self_type_substs = Substs::new_trait(scx.tcx(), ty, &[]);\n+        let self_type_substs = scx.tcx().mk_substs_trait(ty, &[]);\n \n         let trait_ref = ty::TraitRef {\n             def_id: drop_trait_def_id,\n@@ -768,7 +768,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(scx: &SharedCrateContext<'a, 'tcx>,\n             let trans_item = create_fn_trans_item(scx,\n                                                   destructor_did,\n                                                   substs,\n-                                                  Substs::empty(scx.tcx()));\n+                                                  scx.tcx().intern_substs(&[]));\n             output.push(trans_item);\n         }\n \n@@ -1035,7 +1035,7 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(scx: &SharedCrateContext<'a,\n \n     if let ty::TyTrait(ref trait_ty) = trait_ty.sty {\n         let poly_trait_ref = trait_ty.principal.with_self_ty(scx.tcx(), impl_ty);\n-        let param_substs = Substs::empty(scx.tcx());\n+        let param_substs = scx.tcx().intern_substs(&[]);\n \n         // Walk all methods of the trait, including those of its supertraits\n         let methods = traits::get_vtable_methods(scx.tcx(), poly_trait_ref);"}, {"sha": "9158c06d6a168080f99f58d953552c07d6082e92", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -376,7 +376,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         let tcx = ccx.tcx();\n         match tcx.lang_items.eh_personality() {\n             Some(def_id) if !base::wants_msvc_seh(ccx.sess()) => {\n-                Callee::def(ccx, def_id, Substs::empty(tcx)).reify(ccx)\n+                Callee::def(ccx, def_id, tcx.intern_substs(&[])).reify(ccx)\n             }\n             _ => {\n                 if let Some(llpersonality) = ccx.eh_personality().get() {\n@@ -403,7 +403,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n         let tcx = ccx.tcx();\n         assert!(ccx.sess().target.target.options.custom_unwind_resume);\n         if let Some(def_id) = tcx.lang_items.eh_unwind_resume() {\n-            return Callee::def(ccx, def_id, Substs::empty(tcx));\n+            return Callee::def(ccx, def_id, tcx.intern_substs(&[]));\n         }\n \n         let ty = tcx.mk_fn_ptr(tcx.mk_bare_fn(ty::BareFnTy {"}, {"sha": "648dd9f3e3aeaa9969d4608cd04514b49be47f99", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -48,7 +48,7 @@ pub fn trans_exchange_free_dyn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     let def_id = langcall(bcx.tcx(), None, \"\", ExchangeFreeFnLangItem);\n     let args = [PointerCast(bcx, v, Type::i8p(bcx.ccx())), size, align];\n-    Callee::def(bcx.ccx(), def_id, Substs::empty(bcx.tcx()))\n+    Callee::def(bcx.ccx(), def_id, bcx.tcx().intern_substs(&[]))\n         .call(bcx, debug_loc, &args, None).bcx\n }\n \n@@ -292,7 +292,7 @@ fn trans_custom_dtor<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     let trait_ref = ty::Binder(ty::TraitRef {\n         def_id: tcx.lang_items.drop_trait().unwrap(),\n-        substs: Substs::new_trait(tcx, t, &[])\n+        substs: tcx.mk_substs_trait(t, &[])\n     });\n     let vtbl = match fulfill_obligation(bcx.ccx().shared(), DUMMY_SP, trait_ref) {\n         traits::VtableImpl(data) => data,"}, {"sha": "3e7d8acf610c28fccca8d6dd0eb8493e95a83eab", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -773,7 +773,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                 let rhs = self.const_operand(rhs, span)?;\n                 let ty = lhs.ty;\n                 let val_ty = op.ty(tcx, lhs.ty, rhs.ty);\n-                let binop_ty = tcx.mk_tup(&[val_ty, tcx.types.bool]);\n+                let binop_ty = tcx.intern_tup(&[val_ty, tcx.types.bool]);\n                 let (lhs, rhs) = (lhs.llval, rhs.llval);\n                 assert!(!ty.is_fp());\n "}, {"sha": "b6172fa2a907d702c496a0e15a9814105b18e960", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -430,7 +430,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                                              lhs.immediate(), rhs.immediate(),\n                                                              lhs.ty);\n                 let val_ty = op.ty(bcx.tcx(), lhs.ty, rhs.ty);\n-                let operand_ty = bcx.tcx().mk_tup(&[val_ty, bcx.tcx().types.bool]);\n+                let operand_ty = bcx.tcx().intern_tup(&[val_ty, bcx.tcx().types.bool]);\n                 let operand = OperandRef {\n                     val: result,\n                     ty: operand_ty"}, {"sha": "8930387c046e2333af8e4ff333b9f0bdfde16b14", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -310,7 +310,7 @@ impl<'a, 'tcx> TransItem<'tcx> {\n             },\n             TransItem::Static(node_id) => {\n                 let def_id = hir_map.local_def_id(node_id);\n-                let instance = Instance::new(def_id, Substs::empty(tcx));\n+                let instance = Instance::new(def_id, tcx.intern_substs(&[]));\n                 to_string_internal(tcx, \"static \", instance)\n             },\n         };"}, {"sha": "2a601475fcd765ea875e1ffcf9de3014d626f13e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -635,9 +635,9 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     {\n         let anon_scope = rscope.anon_type_scope();\n         let binding_rscope = MaybeWithAnonTypes::new(BindingRscope::new(), anon_scope);\n-        let inputs: Vec<_> = data.inputs.iter().map(|a_t| {\n+        let inputs = self.tcx().mk_type_list(data.inputs.iter().map(|a_t| {\n             self.ast_ty_arg_to_ty(&binding_rscope, None, region_substs, a_t)\n-        }).collect();\n+        }));\n         let inputs_len = inputs.len();\n         let input_params = || vec![String::new(); inputs_len];\n         let implied_output_region = self.find_implied_output_region(&inputs, input_params);\n@@ -660,7 +660,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             span: output_span\n         };\n \n-        (self.tcx().mk_tup(&inputs), output_binding)\n+        (self.tcx().mk_ty(ty::TyTuple(inputs)), output_binding)\n     }\n \n     pub fn instantiate_poly_trait_ref(&self,\n@@ -1661,10 +1661,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 tcx.types.never\n             },\n             hir::TyTup(ref fields) => {\n-                let flds = fields.iter()\n-                                 .map(|t| self.ast_ty_to_ty(rscope, &t))\n-                                 .collect::<Vec<_>>();\n-                tcx.mk_tup(&flds)\n+                tcx.mk_tup(fields.iter().map(|t| self.ast_ty_to_ty(rscope, &t)))\n             }\n             hir::TyBareFn(ref bf) => {\n                 require_c_abi_if_variadic(tcx, &bf.decl, bf.abi, ast_ty.span);"}, {"sha": "d3fef0711b246b37bfc8e26ca70dbf0e1d34d8d0", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -168,8 +168,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 let max_len = cmp::max(expected_len, elements.len());\n \n-                let element_tys: Vec<_> = (0 .. max_len).map(|_| self.next_ty_var()).collect();\n-                let pat_ty = tcx.mk_tup(&element_tys);\n+                let element_tys_iter = (0..max_len).map(|_| self.next_ty_var());\n+                let element_tys = tcx.mk_type_list(element_tys_iter);\n+                let pat_ty = tcx.mk_ty(ty::TyTuple(element_tys));\n                 self.demand_eqtype(pat.span, expected, pat_ty);\n                 for (i, elem) in elements.iter().enumerate_and_adjust(max_len, ddpos) {\n                     self.check_pat(elem, &element_tys[i]);"}, {"sha": "900c22a8176ed8ea33267771c0840387a86c1c32", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -16,7 +16,6 @@ use rustc::traits;\n use rustc::ty::{self, Ty, TraitRef};\n use rustc::ty::{ToPredicate, TypeFoldable};\n use rustc::ty::{MethodCall, MethodCallee};\n-use rustc::ty::subst::Substs;\n use rustc::ty::{LvaluePreference, NoPreference, PreferMutLvalue};\n use rustc::hir;\n \n@@ -106,7 +105,7 @@ impl<'a, 'gcx, 'tcx> Autoderef<'a, 'gcx, 'tcx> {\n                 Some(f) => f,\n                 None => return None,\n             },\n-            substs: Substs::new_trait(tcx, self.cur_ty, &[]),\n+            substs: tcx.mk_substs_trait(self.cur_ty, &[]),\n         };\n \n         let cause = traits::ObligationCause::misc(self.span, self.fcx.body_id);"}, {"sha": "d478f1092bd879c5557ee70305fab0edc03ef46b", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Tuple up the arguments and insert the resulting function type into\n         // the `closures` table.\n-        fn_ty.sig.0.inputs = vec![self.tcx.mk_tup(&fn_ty.sig.0.inputs)];\n+        fn_ty.sig.0.inputs = vec![self.tcx.intern_tup(&fn_ty.sig.0.inputs[..])];\n \n         debug!(\"closure for {:?} --> sig={:?} opt_kind={:?}\",\n                expr_def_id,"}, {"sha": "cbe3893fbf67a207af923f73d27fb6b0ab03a322", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -89,7 +89,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n             \"cxchg\" | \"cxchgweak\" => (1, vec!(tcx.mk_mut_ptr(param(ccx, 0)),\n                                               param(ccx, 0),\n                                               param(ccx, 0)),\n-                                      tcx.mk_tup(&[param(ccx, 0), tcx.types.bool])),\n+                                      tcx.intern_tup(&[param(ccx, 0), tcx.types.bool])),\n             \"load\" => (1, vec!(tcx.mk_imm_ptr(param(ccx, 0))),\n                        param(ccx, 0)),\n             \"store\" => (1, vec!(tcx.mk_mut_ptr(param(ccx, 0)), param(ccx, 0)),\n@@ -274,7 +274,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &hir::ForeignItem) {\n \n             \"add_with_overflow\" | \"sub_with_overflow\"  | \"mul_with_overflow\" =>\n                 (1, vec!(param(ccx, 0), param(ccx, 0)),\n-                tcx.mk_tup(&[param(ccx, 0), tcx.types.bool])),\n+                tcx.intern_tup(&[param(ccx, 0), tcx.types.bool])),\n \n             \"unchecked_div\" | \"unchecked_rem\" =>\n                 (1, vec![param(ccx, 0), param(ccx, 0)], param(ccx, 0)),"}, {"sha": "32bf839a4ed4e12b190ffc0238caa2cf03435c68", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -19,7 +19,6 @@ use rustc::ty::{self, Ty, ToPolyTraitRef, ToPredicate, TypeFoldable};\n use hir::def::Def;\n use hir::def_id::{CRATE_DEF_INDEX, DefId};\n use middle::lang_items::FnOnceTraitLangItem;\n-use rustc::ty::subst::Substs;\n use rustc::traits::{Obligation, SelectionContext};\n use util::nodemap::FnvHashSet;\n \n@@ -55,7 +54,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                 self.autoderef(span, ty).any(|(ty, _)| {\n                     self.probe(|_| {\n-                        let fn_once_substs = Substs::new_trait(tcx, ty, &[self.next_ty_var()]);\n+                        let fn_once_substs = tcx.mk_substs_trait(ty, &[self.next_ty_var()]);\n                         let trait_ref = ty::TraitRef::new(fn_once, fn_once_substs);\n                         let poly_trait_ref = trait_ref.to_poly_trait_ref();\n                         let obligation ="}, {"sha": "915c46891c657594ccdecb91f6b0f2644ca58ee6", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -2380,7 +2380,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n             let err_inputs = match tuple_arguments {\n                 DontTupleArguments => err_inputs,\n-                TupleArguments => vec![self.tcx.mk_tup(&err_inputs)],\n+                TupleArguments => vec![self.tcx.intern_tup(&err_inputs[..])],\n             };\n \n             self.check_argument_types(sp, &err_inputs[..], &[], args_no_rcvr,\n@@ -3718,9 +3718,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     _ => None\n                 }\n             });\n-            let mut err_field = false;\n \n-            let elt_ts = elts.iter().enumerate().map(|(i, e)| {\n+            let elt_ts_iter = elts.iter().enumerate().map(|(i, e)| {\n                 let t = match flds {\n                     Some(ref fs) if i < fs.len() => {\n                         let ety = fs[i];\n@@ -3731,13 +3730,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         self.check_expr_with_expectation(&e, NoExpectation)\n                     }\n                 };\n-                err_field = err_field || t.references_error();\n                 t\n-            }).collect::<Vec<_>>();\n-            if err_field {\n+            });\n+            let tuple = tcx.mk_tup(elt_ts_iter);\n+            if tuple.references_error() {\n                 tcx.types.err\n             } else {\n-                tcx.mk_tup(&elt_ts)\n+                tuple\n             }\n           }\n           hir::ExprStruct(ref path, ref fields, ref base_expr) => {\n@@ -4193,7 +4192,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let ty = self.normalize_associated_types_in(span, &ty);\n                 self.write_ty(node_id, ty);\n                 self.write_substs(node_id, ty::ItemSubsts {\n-                    substs: Substs::empty(self.tcx)\n+                    substs: self.tcx.intern_substs(&[])\n                 });\n                 return ty;\n             }"}, {"sha": "7752690e534bcdfde53ecd02d93f03b4551efbe1", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -233,7 +233,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n                 _ => ()\n             }\n             let main_def_id = tcx.map.local_def_id(main_id);\n-            let substs = Substs::empty(tcx);\n+            let substs = tcx.intern_substs(&[]);\n             let se_ty = tcx.mk_fn_def(main_def_id, substs,\n                                       tcx.mk_bare_fn(ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n@@ -285,7 +285,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n             }\n \n             let start_def_id = ccx.tcx.map.local_def_id(start_id);\n-            let substs = Substs::empty(tcx);\n+            let substs = tcx.intern_substs(&[]);\n             let se_ty = tcx.mk_fn_def(start_def_id, substs,\n                                       tcx.mk_bare_fn(ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,"}, {"sha": "265b66b01ea52b2908a9d4870545f9b70d32dfc1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/982a48575b53e05cd53f679aac2fedf6346f78c7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=982a48575b53e05cd53f679aac2fedf6346f78c7", "patch": "@@ -670,7 +670,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n             Some(tcx) => tcx,\n             None => return RegionBound(Lifetime::statik())\n         };\n-        let empty = Substs::empty(tcx);\n+        let empty = tcx.intern_substs(&[]);\n         let (did, path) = match *self {\n             ty::BoundSend =>\n                 (tcx.lang_items.send_trait().unwrap(),"}]}