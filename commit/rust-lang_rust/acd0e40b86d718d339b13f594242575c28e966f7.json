{"sha": "acd0e40b86d718d339b13f594242575c28e966f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZDBlNDBiODZkNzE4ZDMzOWIxM2Y1OTQyNDI1NzVjMjhlOTY2Zjc=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2017-04-20T00:14:39Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-04-22T18:00:50Z"}, "message": "short-cut SharedCrateContext::layout_of\n\nThat method is *incredibly* hot, so this ends up saving 10% of trans\ntime.\n\nBTW, we really should be doing dependency tracking there - and possibly be\ntaking the respective perf hit (got to find a way to make DTMs fast), but\n`layout_cache` is a non-dep-tracking map.", "tree": {"sha": "11e6d1ef52de2a3b4abae062e626d58dc36dca13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11e6d1ef52de2a3b4abae062e626d58dc36dca13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acd0e40b86d718d339b13f594242575c28e966f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acd0e40b86d718d339b13f594242575c28e966f7", "html_url": "https://github.com/rust-lang/rust/commit/acd0e40b86d718d339b13f594242575c28e966f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acd0e40b86d718d339b13f594242575c28e966f7/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1377a4f474fc76abc798110b7fb4f53d54c2e2b", "html_url": "https://github.com/rust-lang/rust/commit/e1377a4f474fc76abc798110b7fb4f53d54c2e2b"}], "stats": {"total": 66, "additions": 38, "deletions": 28}, "files": [{"sha": "49cc4e7c993a53de08f46a0c11feab317722c3ec", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/acd0e40b86d718d339b13f594242575c28e966f7/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd0e40b86d718d339b13f594242575c28e966f7/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=acd0e40b86d718d339b13f594242575c28e966f7", "patch": "@@ -822,7 +822,7 @@ impl<'a, 'gcx, 'tcx> Struct {\n             }\n \n             (_, &ty::TyProjection(_)) | (_, &ty::TyAnon(..)) => {\n-                let normalized = normalize_associated_type(infcx, ty);\n+                let normalized = infcx.normalize_projections(ty);\n                 if ty == normalized {\n                     return Ok(None);\n                 }\n@@ -1067,28 +1067,6 @@ impl<'tcx> fmt::Display for LayoutError<'tcx> {\n     }\n }\n \n-/// Helper function for normalizing associated types in an inference context.\n-fn normalize_associated_type<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n-                                             ty: Ty<'gcx>)\n-                                             -> Ty<'gcx> {\n-    if !ty.has_projection_types() {\n-        return ty;\n-    }\n-\n-    let mut selcx = traits::SelectionContext::new(infcx);\n-    let cause = traits::ObligationCause::dummy();\n-    let traits::Normalized { value: result, obligations } =\n-        traits::normalize(&mut selcx, cause, &ty);\n-\n-    let mut fulfill_cx = traits::FulfillmentContext::new();\n-\n-    for obligation in obligations {\n-        fulfill_cx.register_predicate_obligation(infcx, obligation);\n-    }\n-\n-    infcx.drain_fulfillment_cx_or_panic(DUMMY_SP, &mut fulfill_cx, &result)\n-}\n-\n impl<'a, 'gcx, 'tcx> Layout {\n     pub fn compute_uncached(ty: Ty<'gcx>,\n                             infcx: &InferCtxt<'a, 'gcx, 'tcx>)\n@@ -1100,7 +1078,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n \n         let ptr_layout = |pointee: Ty<'gcx>| {\n             let non_zero = !ty.is_unsafe_ptr();\n-            let pointee = normalize_associated_type(infcx, pointee);\n+            let pointee = infcx.normalize_projections(pointee);\n             if pointee.is_sized(tcx, &infcx.parameter_environment, DUMMY_SP) {\n                 Ok(Scalar { value: Pointer, non_zero: non_zero })\n             } else {\n@@ -1494,7 +1472,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n \n             // Types with no meaningful known layout.\n             ty::TyProjection(_) | ty::TyAnon(..) => {\n-                let normalized = normalize_associated_type(infcx, ty);\n+                let normalized = infcx.normalize_projections(ty);\n                 if ty == normalized {\n                     return Err(LayoutError::Unknown(ty));\n                 }\n@@ -1812,7 +1790,7 @@ impl<'a, 'gcx, 'tcx> SizeSkeleton<'gcx> {\n             }\n \n             ty::TyProjection(_) | ty::TyAnon(..) => {\n-                let normalized = normalize_associated_type(infcx, ty);\n+                let normalized = infcx.normalize_projections(ty);\n                 if ty == normalized {\n                     Err(err)\n                 } else {\n@@ -1882,20 +1860,40 @@ pub trait LayoutTyper<'tcx>: HasTyCtxt<'tcx> {\n     type TyLayout;\n \n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout;\n+    fn normalize_projections(self, ty: Ty<'tcx>) -> Ty<'tcx>;\n }\n \n impl<'a, 'gcx, 'tcx> LayoutTyper<'gcx> for &'a InferCtxt<'a, 'gcx, 'tcx> {\n     type TyLayout = Result<TyLayout<'gcx>, LayoutError<'gcx>>;\n \n     fn layout_of(self, ty: Ty<'gcx>) -> Self::TyLayout {\n-        let ty = normalize_associated_type(self, ty);\n+        let ty = self.normalize_projections(ty);\n \n         Ok(TyLayout {\n             ty: ty,\n             layout: ty.layout(self)?,\n             variant_index: None\n         })\n     }\n+\n+    fn normalize_projections(self, ty: Ty<'gcx>) -> Ty<'gcx> {\n+        if !ty.has_projection_types() {\n+            return ty;\n+        }\n+\n+        let mut selcx = traits::SelectionContext::new(self);\n+        let cause = traits::ObligationCause::dummy();\n+        let traits::Normalized { value: result, obligations } =\n+            traits::normalize(&mut selcx, cause, &ty);\n+\n+        let mut fulfill_cx = traits::FulfillmentContext::new();\n+\n+        for obligation in obligations {\n+            fulfill_cx.register_predicate_obligation(self, obligation);\n+        }\n+\n+        self.drain_fulfillment_cx_or_panic(DUMMY_SP, &mut fulfill_cx, &result)\n+    }\n }\n \n impl<'a, 'tcx> TyLayout<'tcx> {\n@@ -2019,6 +2017,6 @@ impl<'a, 'tcx> TyLayout<'tcx> {\n     }\n \n     pub fn field<C: LayoutTyper<'tcx>>(&self, cx: C, i: usize) -> C::TyLayout {\n-        cx.layout_of(self.field_type(cx, i))\n+        cx.layout_of(cx.normalize_projections(self.field_type(cx, i)))\n     }\n }"}, {"sha": "bef22cf304dcb938f962c7e58c50429617807efb", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acd0e40b86d718d339b13f594242575c28e966f7/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd0e40b86d718d339b13f594242575c28e966f7/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=acd0e40b86d718d339b13f594242575c28e966f7", "patch": "@@ -771,6 +771,10 @@ impl<'a, 'tcx> LayoutTyper<'tcx> for &'a SharedCrateContext<'a, 'tcx> {\n     type TyLayout = TyLayout<'tcx>;\n \n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n+        if let Some(&layout) = self.tcx().layout_cache.borrow().get(&ty) {\n+            return TyLayout { ty: ty, layout: layout, variant_index: None };\n+        }\n+\n         self.tcx().infer_ctxt((), traits::Reveal::All).enter(|infcx| {\n             infcx.layout_of(ty).unwrap_or_else(|e| {\n                 match e {\n@@ -781,6 +785,10 @@ impl<'a, 'tcx> LayoutTyper<'tcx> for &'a SharedCrateContext<'a, 'tcx> {\n             })\n         })\n     }\n+\n+    fn normalize_projections(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        self.tcx().normalize_associated_type(&ty)\n+    }\n }\n \n impl<'a, 'tcx> LayoutTyper<'tcx> for &'a CrateContext<'a, 'tcx> {\n@@ -789,6 +797,10 @@ impl<'a, 'tcx> LayoutTyper<'tcx> for &'a CrateContext<'a, 'tcx> {\n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.shared.layout_of(ty)\n     }\n+\n+    fn normalize_projections(self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        self.shared.normalize_projections(ty)\n+    }\n }\n \n pub struct TypeOfDepthLock<'a, 'tcx: 'a>(&'a LocalCrateContext<'a, 'tcx>);"}]}