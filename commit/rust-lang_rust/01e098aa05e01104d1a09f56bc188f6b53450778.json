{"sha": "01e098aa05e01104d1a09f56bc188f6b53450778", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZTA5OGFhMDVlMDExMDRkMWEwOWY1NmJjMTg4ZjZiNTM0NTA3Nzg=", "commit": {"author": {"name": "James Miller", "email": "james@aatch.net", "date": "2013-06-13T02:49:01Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-15T21:17:50Z"}, "message": "Make CrateContext::new() fn.\n\nMove construction of a CrateContext into a static method on\nCrateContext.", "tree": {"sha": "779573f83f05d40234248b5880a24916dab3ddce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/779573f83f05d40234248b5880a24916dab3ddce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01e098aa05e01104d1a09f56bc188f6b53450778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01e098aa05e01104d1a09f56bc188f6b53450778", "html_url": "https://github.com/rust-lang/rust/commit/01e098aa05e01104d1a09f56bc188f6b53450778", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01e098aa05e01104d1a09f56bc188f6b53450778/comments", "author": {"login": "Aatch", "id": 342416, "node_id": "MDQ6VXNlcjM0MjQxNg==", "avatar_url": "https://avatars.githubusercontent.com/u/342416?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aatch", "html_url": "https://github.com/Aatch", "followers_url": "https://api.github.com/users/Aatch/followers", "following_url": "https://api.github.com/users/Aatch/following{/other_user}", "gists_url": "https://api.github.com/users/Aatch/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aatch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aatch/subscriptions", "organizations_url": "https://api.github.com/users/Aatch/orgs", "repos_url": "https://api.github.com/users/Aatch/repos", "events_url": "https://api.github.com/users/Aatch/events{/privacy}", "received_events_url": "https://api.github.com/users/Aatch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1f39ce40310d9e34dcabef01b761e659bbd5390", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f39ce40310d9e34dcabef01b761e659bbd5390", "html_url": "https://github.com/rust-lang/rust/commit/b1f39ce40310d9e34dcabef01b761e659bbd5390"}], "stats": {"total": 378, "additions": 192, "deletions": 186}, "files": [{"sha": "9e2c4e15c574bef1a4ba0f34d9450e9e46107f3b", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 47, "deletions": 146, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/01e098aa05e01104d1a09f56bc188f6b53450778/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e098aa05e01104d1a09f56bc188f6b53450778/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=01e098aa05e01104d1a09f56bc188f6b53450778", "patch": "@@ -26,12 +26,11 @@\n use core::prelude::*;\n \n use back::link::{mangle_exported_name};\n-use back::{link, abi, upcall};\n+use back::{link, abi};\n use driver::session;\n use driver::session::Session;\n use lib::llvm::{ContextRef, ModuleRef, ValueRef, TypeRef, BasicBlockRef};\n-use lib::llvm::{True, False};\n-use lib::llvm::{llvm, mk_target_data, mk_type_names};\n+use lib::llvm::{llvm, True, False};\n use lib;\n use metadata::common::LinkMeta;\n use metadata::{csearch, cstore, encoder};\n@@ -65,7 +64,7 @@ use util::common::indenter;\n use util::ppaux::{Repr, ty_to_str};\n \n use core::hash;\n-use core::hashmap::{HashMap, HashSet};\n+use core::hashmap::{HashMap};\n use core::int;\n use core::io;\n use core::libc::c_uint;\n@@ -86,6 +85,8 @@ use syntax::visit;\n use syntax::{ast, ast_util, codemap, ast_map};\n use syntax::abi::{X86, X86_64, Arm, Mips};\n \n+pub use middle::trans::context::task_llcx;\n+\n pub struct icx_popper {\n     ccx: @CrateContext,\n }\n@@ -3037,152 +3038,52 @@ pub fn trans_crate(sess: session::Session,\n     // such as a function name in the module.\n     // 1. http://llvm.org/bugs/show_bug.cgi?id=11479\n     let llmod_id = link_meta.name.to_owned() + \".rc\";\n+    let ccx = @CrateContext::new(sess, llmod_id, tcx, emap2, maps,\n+                                 symbol_hasher, link_meta, reachable);\n+    // FIXME(#6511): get LLVM building with --enable-threads so this\n+    //               function can be called\n+    // if !llvm::LLVMRustStartMultithreading() {\n+    //     sess.bug(\"couldn't enable multi-threaded LLVM\");\n+    // }\n \n-    unsafe {\n-        // FIXME(#6511): get LLVM building with --enable-threads so this\n-        //               function can be called\n-        // if !llvm::LLVMRustStartMultithreading() {\n-        //     sess.bug(\"couldn't enable multi-threaded LLVM\");\n-        // }\n-        let llcx = llvm::LLVMContextCreate();\n-        set_task_llcx(llcx);\n-        let llmod = str::as_c_str(llmod_id, |buf| {\n-            llvm::LLVMModuleCreateWithNameInContext(buf, llcx)\n-        });\n-        let data_layout: &str = sess.targ_cfg.target_strs.data_layout;\n-        let targ_triple: &str = sess.targ_cfg.target_strs.target_triple;\n-        let _: () =\n-            str::as_c_str(data_layout,\n-                        |buf| llvm::LLVMSetDataLayout(llmod, buf));\n-        let _: () =\n-            str::as_c_str(targ_triple,\n-                        |buf| llvm::LLVMSetTarget(llmod, buf));\n-        let targ_cfg = sess.targ_cfg;\n-        let td = mk_target_data(sess.targ_cfg.target_strs.data_layout);\n-        let tn = mk_type_names();\n-        let mut intrinsics = declare_intrinsics(llmod);\n-        if sess.opts.extra_debuginfo {\n-            declare_dbg_intrinsics(llmod, &mut intrinsics);\n-        }\n-        let int_type = T_int(targ_cfg);\n-        let float_type = T_float(targ_cfg);\n-        let tydesc_type = T_tydesc(targ_cfg);\n-        lib::llvm::associate_type(tn, @\"tydesc\", tydesc_type);\n-        let crate_map = decl_crate_map(sess, link_meta, llmod);\n-        let dbg_cx = if sess.opts.debuginfo {\n-            Some(debuginfo::mk_ctxt(copy llmod_id))\n-        } else {\n-            None\n-        };\n-\n-        let ccx = @CrateContext {\n-              sess: sess,\n-              llmod: llmod,\n-              llcx: llcx,\n-              td: td,\n-              tn: tn,\n-              externs: @mut HashMap::new(),\n-              intrinsics: intrinsics,\n-              item_vals: @mut HashMap::new(),\n-              exp_map2: emap2,\n-              reachable: reachable,\n-              item_symbols: @mut HashMap::new(),\n-              link_meta: link_meta,\n-              enum_sizes: @mut HashMap::new(),\n-              discrims: @mut HashMap::new(),\n-              discrim_symbols: @mut HashMap::new(),\n-              tydescs: @mut HashMap::new(),\n-              finished_tydescs: @mut false,\n-              external: @mut HashMap::new(),\n-              monomorphized: @mut HashMap::new(),\n-              monomorphizing: @mut HashMap::new(),\n-              type_use_cache: @mut HashMap::new(),\n-              vtables: @mut HashMap::new(),\n-              const_cstr_cache: @mut HashMap::new(),\n-              const_globals: @mut HashMap::new(),\n-              const_values: @mut HashMap::new(),\n-              extern_const_values: @mut HashMap::new(),\n-              impl_method_cache: @mut HashMap::new(),\n-              module_data: @mut HashMap::new(),\n-              lltypes: @mut HashMap::new(),\n-              llsizingtypes: @mut HashMap::new(),\n-              adt_reprs: @mut HashMap::new(),\n-              names: new_namegen(),\n-              next_addrspace: new_addrspace_gen(),\n-              symbol_hasher: symbol_hasher,\n-              type_hashcodes: @mut HashMap::new(),\n-              type_short_names: @mut HashMap::new(),\n-              all_llvm_symbols: @mut HashSet::new(),\n-              tcx: tcx,\n-              maps: maps,\n-              stats: @mut Stats {\n-                n_static_tydescs: 0u,\n-                n_glues_created: 0u,\n-                n_null_glues: 0u,\n-                n_real_glues: 0u,\n-                n_fns: 0u,\n-                n_monos: 0u,\n-                n_inlines: 0u,\n-                n_closures: 0u,\n-                llvm_insn_ctxt: @mut ~[],\n-                llvm_insns: @mut HashMap::new(),\n-                fn_times: @mut ~[]\n-              },\n-              upcalls: upcall::declare_upcalls(targ_cfg, llmod),\n-              tydesc_type: tydesc_type,\n-              int_type: int_type,\n-              float_type: float_type,\n-              opaque_vec_type: T_opaque_vec(targ_cfg),\n-              builder: BuilderRef_res(unsafe {\n-                  llvm::LLVMCreateBuilderInContext(llcx)\n-              }),\n-              shape_cx: mk_ctxt(llmod),\n-              crate_map: crate_map,\n-              uses_gc: @mut false,\n-              dbg_cx: dbg_cx,\n-              do_not_commit_warning_issued: @mut false\n-        };\n-\n-        {\n-            let _icx = ccx.insn_ctxt(\"data\");\n-            trans_constants(ccx, crate);\n-        }\n-\n-        {\n-            let _icx = ccx.insn_ctxt(\"text\");\n-            trans_mod(ccx, &crate.node.module);\n-        }\n-\n-        decl_gc_metadata(ccx, llmod_id);\n-        fill_crate_map(ccx, crate_map);\n-        glue::emit_tydescs(ccx);\n-        write_abi_version(ccx);\n-\n-        // Translate the metadata.\n-        write_metadata(ccx, crate);\n-        if ccx.sess.trans_stats() {\n-            io::println(\"--- trans stats ---\");\n-            io::println(fmt!(\"n_static_tydescs: %u\",\n-                             ccx.stats.n_static_tydescs));\n-            io::println(fmt!(\"n_glues_created: %u\",\n-                             ccx.stats.n_glues_created));\n-            io::println(fmt!(\"n_null_glues: %u\", ccx.stats.n_null_glues));\n-            io::println(fmt!(\"n_real_glues: %u\", ccx.stats.n_real_glues));\n-\n-            io::println(fmt!(\"n_fns: %u\", ccx.stats.n_fns));\n-            io::println(fmt!(\"n_monos: %u\", ccx.stats.n_monos));\n-            io::println(fmt!(\"n_inlines: %u\", ccx.stats.n_inlines));\n-            io::println(fmt!(\"n_closures: %u\", ccx.stats.n_closures));\n-        }\n+    {\n+        let _icx = ccx.insn_ctxt(\"data\");\n+        trans_constants(ccx, crate);\n+    }\n \n-        if ccx.sess.count_llvm_insns() {\n-            for ccx.stats.llvm_insns.each |&k, &v| {\n-                io::println(fmt!(\"%-7u %s\", v, k));\n-            }\n+    {\n+        let _icx = ccx.insn_ctxt(\"text\");\n+        trans_mod(ccx, &crate.node.module);\n+    }\n+\n+    decl_gc_metadata(ccx, llmod_id);\n+    fill_crate_map(ccx, ccx.crate_map);\n+    glue::emit_tydescs(ccx);\n+    write_abi_version(ccx);\n+\n+    // Translate the metadata.\n+    write_metadata(ccx, crate);\n+    if ccx.sess.trans_stats() {\n+        io::println(\"--- trans stats ---\");\n+        io::println(fmt!(\"n_static_tydescs: %u\",\n+                         ccx.stats.n_static_tydescs));\n+        io::println(fmt!(\"n_glues_created: %u\",\n+                         ccx.stats.n_glues_created));\n+        io::println(fmt!(\"n_null_glues: %u\", ccx.stats.n_null_glues));\n+        io::println(fmt!(\"n_real_glues: %u\", ccx.stats.n_real_glues));\n+\n+        io::println(fmt!(\"n_fns: %u\", ccx.stats.n_fns));\n+        io::println(fmt!(\"n_monos: %u\", ccx.stats.n_monos));\n+        io::println(fmt!(\"n_inlines: %u\", ccx.stats.n_inlines));\n+        io::println(fmt!(\"n_closures: %u\", ccx.stats.n_closures));\n+    }\n+\n+    if ccx.sess.count_llvm_insns() {\n+        for ccx.stats.llvm_insns.each |&k, &v| {\n+            io::println(fmt!(\"%-7u %s\", v, k));\n         }\n-        unset_task_llcx();\n-        return (llcx, llmod, link_meta);\n     }\n+    return (llmod, link_meta);\n }\n \n fn task_local_llcx_key(_v: @ContextRef) {}"}, {"sha": "c373429447625e3000481fcff5ff8f11780e760e", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/01e098aa05e01104d1a09f56bc188f6b53450778/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e098aa05e01104d1a09f56bc188f6b53450778/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=01e098aa05e01104d1a09f56bc188f6b53450778", "patch": "@@ -12,26 +12,18 @@\n \n use core::prelude::*;\n \n-use back::{abi, upcall};\n+use back::{abi};\n use driver::session;\n use driver::session::Session;\n-use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n-use lib::llvm::{ContextRef, True, False, Bool};\n-use lib::llvm::{llvm, TargetData, TypeNames, associate_type, name_has_type};\n+use lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n+use lib::llvm::{True, False, Bool};\n+use lib::llvm::{llvm, TypeNames, associate_type, name_has_type};\n use lib;\n-use metadata::common::LinkMeta;\n-use middle::astencode;\n-use middle::resolve;\n-use middle::trans::adt;\n use middle::trans::base;\n use middle::trans::build;\n use middle::trans::datum;\n-use middle::trans::debuginfo;\n use middle::trans::glue;\n-use middle::trans::reachable;\n-use middle::trans::shape;\n use middle::trans::type_of;\n-use middle::trans::type_use;\n use middle::trans::write_guard;\n use middle::ty::substs;\n use middle::ty;\n@@ -41,8 +33,7 @@ use util::ppaux::{Repr};\n \n use core::cast::transmute;\n use core::cast;\n-use core::hash;\n-use core::hashmap::{HashMap, HashSet};\n+use core::hashmap::{HashMap};\n use core::libc::{c_uint, c_longlong, c_ulonglong};\n use core::str;\n use core::to_bytes;"}, {"sha": "9e6386f87d7c50d249a4b5e9d6775fda94ba64d5", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 140, "deletions": 26, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/01e098aa05e01104d1a09f56bc188f6b53450778/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e098aa05e01104d1a09f56bc188f6b53450778/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=01e098aa05e01104d1a09f56bc188f6b53450778", "patch": "@@ -1,49 +1,35 @@\n use core::prelude::*;\n \n-use back::{abi, upcall};\n+use back::{upcall};\n use driver::session;\n-use driver::session::Session;\n-use lib::llvm::{ModuleRef, ValueRef, TypeRef, BasicBlockRef, BuilderRef};\n-use lib::llvm::{ContextRef, True, False, Bool};\n-use lib::llvm::{llvm, TargetData, TypeNames, associate_type, name_has_type};\n+use lib::llvm::{ContextRef, ModuleRef, ValueRef, TypeRef};\n+use lib::llvm::{llvm, TargetData, TypeNames};\n+use lib::llvm::{mk_target_data, mk_type_names};\n use lib;\n use metadata::common::LinkMeta;\n use middle::astencode;\n use middle::resolve;\n use middle::trans::adt;\n use middle::trans::base;\n-use middle::trans::build;\n-use middle::trans::datum;\n use middle::trans::debuginfo;\n-use middle::trans::glue;\n use middle::trans::reachable;\n use middle::trans::shape;\n-use middle::trans::type_of;\n use middle::trans::type_use;\n-use middle::trans::write_guard;\n-use middle::ty::substs;\n use middle::ty;\n-use middle::typeck;\n-use middle::borrowck::root_map_key;\n \n-use core::cast::transmute;\n-use core::cast;\n use core::hash;\n use core::hashmap::{HashMap, HashSet};\n-use core::libc::{c_uint, c_longlong, c_ulonglong};\n use core::str;\n-use core::to_bytes;\n-use core::vec::raw::to_ptr;\n-use core::vec;\n-use syntax::ast::ident;\n-use syntax::ast_map::{path, path_elt};\n-use syntax::codemap::span;\n-use syntax::parse::token;\n-use syntax::{ast, ast_map};\n-use syntax::abi::{X86, X86_64, Arm, Mips};\n+use core::local_data;\n+use syntax::ast;\n \n use middle::trans::common::{ExternMap,tydesc_info,BuilderRef_res,Stats,namegen,addrspace_gen};\n-use middle::trans::common::{mono_id};\n+use middle::trans::common::{mono_id,T_int,T_float,T_tydesc,T_opaque_vec};\n+use middle::trans::common::{new_namegen,new_addrspace_gen};\n+\n+use middle::trans::base::{decl_crate_map};\n+\n+use middle::trans::shape::{mk_ctxt};\n \n pub struct CrateContext {\n      sess: session::Session,\n@@ -121,3 +107,131 @@ pub struct CrateContext {\n      dbg_cx: Option<debuginfo::DebugContext>,\n      do_not_commit_warning_issued: @mut bool\n }\n+\n+impl CrateContext {\n+    pub fn new(sess: session::Session, name: &str, tcx: ty::ctxt,\n+               emap2: resolve::ExportMap2, maps: astencode::Maps,\n+               symbol_hasher: @mut hash::State, link_meta: LinkMeta,\n+               reachable: reachable::map) -> CrateContext {\n+        unsafe {\n+            let llcx = llvm::LLVMContextCreate();\n+            set_task_llcx(llcx);\n+            let llmod = str::as_c_str(name, |buf| {\n+                llvm::LLVMModuleCreateWithNameInContext(buf, llcx)\n+            });\n+            let data_layout: &str = sess.targ_cfg.target_strs.data_layout;\n+            let targ_triple: &str = sess.targ_cfg.target_strs.target_triple;\n+            str::as_c_str(data_layout, |buf| llvm::LLVMSetDataLayout(llmod, buf));\n+            str::as_c_str(targ_triple, |buf| llvm::LLVMSetTarget(llmod, buf));\n+            let targ_cfg = sess.targ_cfg;\n+            let td = mk_target_data(sess.targ_cfg.target_strs.data_layout);\n+            let tn = mk_type_names();\n+            let mut intrinsics = base::declare_intrinsics(llmod);\n+            if sess.opts.extra_debuginfo {\n+                base::declare_dbg_intrinsics(llmod, &mut intrinsics);\n+            }\n+            let int_type = T_int(targ_cfg);\n+            let float_type = T_float(targ_cfg);\n+            let tydesc_type = T_tydesc(targ_cfg);\n+            lib::llvm::associate_type(tn, @\"tydesc\", tydesc_type);\n+            let crate_map = decl_crate_map(sess, link_meta, llmod);\n+            let dbg_cx = if sess.opts.debuginfo {\n+                Some(debuginfo::mk_ctxt(name.to_owned()))\n+            } else {\n+                None\n+            };\n+\n+            CrateContext {\n+                  sess: sess,\n+                  llmod: llmod,\n+                  llcx: llcx,\n+                  td: td,\n+                  tn: tn,\n+                  externs: @mut HashMap::new(),\n+                  intrinsics: intrinsics,\n+                  item_vals: @mut HashMap::new(),\n+                  exp_map2: emap2,\n+                  reachable: reachable,\n+                  item_symbols: @mut HashMap::new(),\n+                  link_meta: link_meta,\n+                  enum_sizes: @mut HashMap::new(),\n+                  discrims: @mut HashMap::new(),\n+                  discrim_symbols: @mut HashMap::new(),\n+                  tydescs: @mut HashMap::new(),\n+                  finished_tydescs: @mut false,\n+                  external: @mut HashMap::new(),\n+                  monomorphized: @mut HashMap::new(),\n+                  monomorphizing: @mut HashMap::new(),\n+                  type_use_cache: @mut HashMap::new(),\n+                  vtables: @mut HashMap::new(),\n+                  const_cstr_cache: @mut HashMap::new(),\n+                  const_globals: @mut HashMap::new(),\n+                  const_values: @mut HashMap::new(),\n+                  extern_const_values: @mut HashMap::new(),\n+                  module_data: @mut HashMap::new(),\n+                  lltypes: @mut HashMap::new(),\n+                  llsizingtypes: @mut HashMap::new(),\n+                  adt_reprs: @mut HashMap::new(),\n+                  names: new_namegen(),\n+                  next_addrspace: new_addrspace_gen(),\n+                  symbol_hasher: symbol_hasher,\n+                  type_hashcodes: @mut HashMap::new(),\n+                  type_short_names: @mut HashMap::new(),\n+                  all_llvm_symbols: @mut HashSet::new(),\n+                  tcx: tcx,\n+                  maps: maps,\n+                  stats: @mut Stats {\n+                    n_static_tydescs: 0u,\n+                    n_glues_created: 0u,\n+                    n_null_glues: 0u,\n+                    n_real_glues: 0u,\n+                    n_fns: 0u,\n+                    n_monos: 0u,\n+                    n_inlines: 0u,\n+                    n_closures: 0u,\n+                    llvm_insn_ctxt: @mut ~[],\n+                    llvm_insns: @mut HashMap::new(),\n+                    fn_times: @mut ~[]\n+                  },\n+                  upcalls: upcall::declare_upcalls(targ_cfg, llmod),\n+                  tydesc_type: tydesc_type,\n+                  int_type: int_type,\n+                  float_type: float_type,\n+                  opaque_vec_type: T_opaque_vec(targ_cfg),\n+                  builder: BuilderRef_res(unsafe {\n+                      llvm::LLVMCreateBuilderInContext(llcx)\n+                  }),\n+                  shape_cx: mk_ctxt(llmod),\n+                  crate_map: crate_map,\n+                  uses_gc: @mut false,\n+                  dbg_cx: dbg_cx,\n+                  do_not_commit_warning_issued: @mut false\n+            }\n+        }\n+    }\n+}\n+\n+#[unsafe_destructor]\n+impl Drop for CrateContext {\n+    fn finalize(&self) {\n+        unsafe {\n+            unset_task_llcx();\n+        }\n+    }\n+}\n+\n+fn task_local_llcx_key(_v: @ContextRef) {}\n+\n+pub fn task_llcx() -> ContextRef {\n+    let opt = unsafe { local_data::local_data_get(task_local_llcx_key) };\n+    *opt.expect(\"task-local LLVMContextRef wasn't ever set!\")\n+}\n+\n+unsafe fn set_task_llcx(c: ContextRef) {\n+    local_data::local_data_set(task_local_llcx_key, @c);\n+}\n+\n+unsafe fn unset_task_llcx() {\n+    local_data::local_data_pop(task_local_llcx_key);\n+}\n+"}]}