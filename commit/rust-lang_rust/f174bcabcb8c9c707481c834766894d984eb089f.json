{"sha": "f174bcabcb8c9c707481c834766894d984eb089f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNzRiY2FiY2I4YzljNzA3NDgxYzgzNDc2Njg5NGQ5ODRlYjA4OWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-14T03:10:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-14T03:10:40Z"}, "message": "Auto merge of #21834 - genbattle:doc-range-notation, r=steveklabnik\n\nReplaced outdated use of the `range(start, end)` function where appropriate with `start..end`, and tweaked the examples to compile and run with the latest rust. I also fixed two periphery compile issues in reference.md which were occluding whether there were any new errors created by these changes.", "tree": {"sha": "cf54cd1fd9446835688502f55d0fa1578e6d609f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf54cd1fd9446835688502f55d0fa1578e6d609f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f174bcabcb8c9c707481c834766894d984eb089f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f174bcabcb8c9c707481c834766894d984eb089f", "html_url": "https://github.com/rust-lang/rust/commit/f174bcabcb8c9c707481c834766894d984eb089f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f174bcabcb8c9c707481c834766894d984eb089f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c112fc722004dfb457d76ddc0c917bb2a3964d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c112fc722004dfb457d76ddc0c917bb2a3964d", "html_url": "https://github.com/rust-lang/rust/commit/b8c112fc722004dfb457d76ddc0c917bb2a3964d"}, {"sha": "830009543d07b16e832283a175de644261ce75fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/830009543d07b16e832283a175de644261ce75fb", "html_url": "https://github.com/rust-lang/rust/commit/830009543d07b16e832283a175de644261ce75fb"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "73880549ae64969d63d36acd054e4c368664d061", "filename": "src/doc/reference.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f174bcabcb8c9c707481c834766894d984eb089f/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/f174bcabcb8c9c707481c834766894d984eb089f/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=f174bcabcb8c9c707481c834766894d984eb089f", "patch": "@@ -3005,7 +3005,7 @@ Some examples of call expressions:\n # fn add(x: i32, y: i32) -> i32 { 0 }\n \n let x: i32 = add(1i32, 2i32);\n-let pi: Option<f32> = \"3.14\".parse().ok();\n+let pi: Result<f32, _> = \"3.14\".parse();\n ```\n \n ### Lambda expressions\n@@ -3148,7 +3148,7 @@ An example of a for loop over a series of integers:\n \n ```\n # fn bar(b:usize) { }\n-for i in range(0us, 256) {\n+for i in 0us..256 {\n     bar(i);\n }\n ```\n@@ -3532,7 +3532,7 @@ An example of each kind:\n ```{rust}\n let vec: Vec<i32> = vec![1, 2, 3];\n let arr: [i32; 3] = [1, 2, 3];\n-let s: &[i32] = &vec;\n+let s: &[i32] = &vec[];\n ```\n \n As you can see, the `vec!` macro allows you to create a `Vec<T>` easily. The"}, {"sha": "800b5a2ad9768383e0e04da262a453af00f5cb9c", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f174bcabcb8c9c707481c834766894d984eb089f/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/f174bcabcb8c9c707481c834766894d984eb089f/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=f174bcabcb8c9c707481c834766894d984eb089f", "patch": "@@ -354,7 +354,7 @@ use std::sync::mpsc;\n fn main() {\n     let (tx, rx) = mpsc::channel();\n \n-    for _ in range(0, 10) {\n+    for _ in 0..10 {\n         let tx = tx.clone();\n \n         Thread::spawn(move || {"}, {"sha": "01f270f19512ad22c10a24caa86a4eda0e861d7a", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f174bcabcb8c9c707481c834766894d984eb089f/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/f174bcabcb8c9c707481c834766894d984eb089f/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=f174bcabcb8c9c707481c834766894d984eb089f", "patch": "@@ -400,7 +400,7 @@ a function for that:\n let input = old_io::stdin().read_line()\n                        .ok()\n                        .expect(\"Failed to read line\");\n-let input_num: Option<u32> = input.parse().ok();\n+let input_num: Result<u32, _> = input.parse();\n ```\n \n The `parse` function takes in a `&str` value and converts it into something.\n@@ -422,8 +422,8 @@ In this case, we say `x` is a `u32` explicitly, so Rust is able to properly\n tell `random()` what to generate. In a similar fashion, both of these work:\n \n ```{rust,ignore}\n-let input_num = \"5\".parse::<u32>().ok(); // input_num: Option<u32>\n-let input_num: Option<u32> = \"5\".parse().ok(); // input_num: Option<u32>\n+let input_num = \"5\".parse::<u32>(); // input_num: Option<u32>\n+let input_num: Result<u32, _> = \"5\".parse(); // input_num: Result<u32, <u32 as FromStr>::Err>\n ```\n \n Here we're converting the `Result` returned by `parse` to an `Option` by using\n@@ -447,9 +447,9 @@ fn main() {\n     let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n-    let input_num: Option<u32> = input.parse().ok();\n+    let input_num: Result<u32, _> = input.parse();\n \n-    println!(\"You guessed: {}\", input_num);\n+    println!(\"You guessed: {:?}\", input_num);\n \n     match cmp(input_num, secret_number) {\n         Ordering::Less => println!(\"Too small!\"),\n@@ -497,11 +497,11 @@ fn main() {\n     let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n-    let input_num: Option<u32> = input.parse().ok();\n+    let input_num: Result<u32, _> = input.parse();\n \n     let num = match input_num {\n-        Some(num) => num,\n-        None => {\n+        Ok(num) => num,\n+        Err(_) => {\n             println!(\"Please input a number!\");\n             return;\n         }\n@@ -564,11 +564,11 @@ fn main() {\n     let input = old_io::stdin().read_line()\n                            .ok()\n                            .expect(\"Failed to read line\");\n-    let input_num: Option<u32> = input.trim().parse().ok();\n+    let input_num: Result<u32, _> = input.trim().parse();\n \n     let num = match input_num {\n-        Some(num) => num,\n-        None => {\n+        Ok(num) => num,\n+        Err(_) => {\n             println!(\"Please input a number!\");\n             return;\n         }\n@@ -640,11 +640,11 @@ fn main() {\n         let input = old_io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n-        let input_num: Option<u32> = input.trim().parse().ok();\n+        let input_num: Result<u32, _> = input.trim().parse();\n \n         let num = match input_num {\n-            Some(num) => num,\n-            None => {\n+            Ok(num) => num,\n+            Err(_) => {\n                 println!(\"Please input a number!\");\n                 return;\n             }\n@@ -716,11 +716,11 @@ fn main() {\n         let input = old_io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n-        let input_num: Option<u32> = input.trim().parse().ok();\n+        let input_num: Result<u32, _> = input.trim().parse();\n \n         let num = match input_num {\n-            Some(num) => num,\n-            None => {\n+            Ok(num) => num,\n+            Err(_) => {\n                 println!(\"Please input a number!\");\n                 return;\n             }\n@@ -772,11 +772,11 @@ fn main() {\n         let input = old_io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n-        let input_num: Option<u32> = input.trim().parse().ok();\n+        let input_num: Result<u32, _> = input.trim().parse();\n \n         let num = match input_num {\n-            Some(num) => num,\n-            None => {\n+            Ok(num) => num,\n+            Err(_) => {\n                 println!(\"Please input a number!\");\n                 continue;\n             }\n@@ -849,11 +849,11 @@ fn main() {\n         let input = old_io::stdin().read_line()\n                                .ok()\n                                .expect(\"Failed to read line\");\n-        let input_num: Option<u32> = input.trim().parse().ok();\n+        let input_num: Result<u32, _> = input.trim().parse();\n \n         let num = match input_num {\n-            Some(num) => num,\n-            None => {\n+            Ok(num) => num,\n+            Err(_) => {\n                 println!(\"Please input a number!\");\n                 continue;\n             }"}, {"sha": "1a5f7bf9959f806f817f2c91625b64feb25109f5", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f174bcabcb8c9c707481c834766894d984eb089f/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/f174bcabcb8c9c707481c834766894d984eb089f/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=f174bcabcb8c9c707481c834766894d984eb089f", "patch": "@@ -5,7 +5,7 @@ Let's talk about loops.\n Remember Rust's `for` loop? Here's an example:\n \n ```{rust}\n-for x in range(0, 10) {\n+for x in 0..10 {\n     println!(\"{}\", x);\n }\n ```\n@@ -17,7 +17,7 @@ call the `.next()` method on repeatedly, and it gives us a sequence of things.\n Like this:\n \n ```{rust}\n-let mut range = range(0, 10);\n+let mut range = 0..10;\n \n loop {\n     match range.next() {\n@@ -52,7 +52,7 @@ a vector, you may be tempted to write this:\n ```{rust}\n let nums = vec![1, 2, 3];\n \n-for i in range(0, nums.len()) {\n+for i in 0..nums.len() {\n     println!(\"{}\", nums[i]);\n }\n ```\n@@ -118,7 +118,7 @@ The most common consumer is `collect()`. This code doesn't quite compile,\n but it shows the intention:\n \n ```{rust,ignore}\n-let one_to_one_hundred = range(1, 101).collect();\n+let one_to_one_hundred = (1..101i32).collect();\n ```\n \n As you can see, we call `collect()` on our iterator. `collect()` takes\n@@ -128,7 +128,7 @@ type of things you want to collect, and so you need to let it know.\n Here's the version that does compile:\n \n ```{rust}\n-let one_to_one_hundred = range(1, 101).collect::<Vec<i32>>();\n+let one_to_one_hundred = (1..101i32).collect::<Vec<i32>>();\n ```\n \n If you remember, the `::<>` syntax allows us to give a type hint,\n@@ -138,7 +138,7 @@ and so we tell it that we want a vector of integers.\n is one:\n \n ```{rust}\n-let greater_than_forty_two = range(0, 100)\n+let greater_than_forty_two = (0..100i32)\n                              .find(|x| *x > 42);\n \n match greater_than_forty_two {\n@@ -155,7 +155,7 @@ element, `find` returns an `Option` rather than the element itself.\n Another important consumer is `fold`. Here's what it looks like:\n \n ```{rust}\n-let sum = range(1, 4)\n+let sum = (1..4)\n               .fold(0, |sum, x| sum + x);\n ```\n \n@@ -179,7 +179,7 @@ in this iterator:\n We called `fold()` with these arguments:\n \n ```{rust}\n-# range(1, 4)\n+# (1..4)\n .fold(0, |sum, x| sum + x);\n ```\n \n@@ -210,20 +210,20 @@ This code, for example, does not actually generate the numbers\n `1-100`, and just creates a value that represents the sequence:\n \n ```{rust}\n-let nums = range(1, 100);\n+let nums = 1..100;\n ```\n \n Since we didn't do anything with the range, it didn't generate the sequence.\n Let's add the consumer:\n \n ```{rust}\n-let nums = range(1, 100).collect::<Vec<i32>>();\n+let nums = (1..100).collect::<Vec<i32>>();\n ```\n \n-Now, `collect()` will require that `range()` give it some numbers, and so\n+Now, `collect()` will require that the range gives it some numbers, and so\n it will do the work of generating the sequence.\n \n-`range` is one of two basic iterators that you'll see. The other is `iter()`,\n+A range is one of two basic iterators that you'll see. The other is `iter()`,\n which you've used before. `iter()` can turn a vector into a simple iterator\n that gives you each element in turn:\n \n@@ -256,7 +256,7 @@ we need to talk about with regards to iterators. Let's get to it!\n a new iterator. The simplest one is called `map`:\n \n ```{rust,ignore}\n-range(1, 100).map(|x| x + 1);\n+(1..100i32).map(|x| x + 1);\n ```\n \n `map` is called upon another iterator, and produces a new iterator where each\n@@ -267,15 +267,15 @@ compile the example, you'll get a warning:\n ```{notrust,ignore}\n warning: unused result which must be used: iterator adaptors are lazy and\n          do nothing unless consumed, #[warn(unused_must_use)] on by default\n- range(1, 100).map(|x| x + 1);\n+(1..100).map(|x| x + 1);\n  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n ```\n \n Laziness strikes again! That closure will never execute. This example\n doesn't print any numbers:\n \n ```{rust,ignore}\n-range(1, 100).map(|x| println!(\"{}\", x));\n+(1..100).map(|x| println!(\"{}\", x));\n ```\n \n If you are trying to execute a closure on an iterator for its side effects,\n@@ -307,7 +307,7 @@ returns `true` or `false`. The new iterator `filter()` produces\n only the elements that that closure returns `true` for:\n \n ```{rust}\n-for i in range(1, 100).filter(|&x| x % 2 == 0) {\n+for i in (1..100i32).filter(|&x| x % 2 == 0) {\n     println!(\"{}\", i);\n }\n ```\n@@ -322,7 +322,7 @@ You can chain all three things together: start with an iterator, adapt it\n a few times, and then consume the result. Check it out:\n \n ```{rust}\n-range(1, 1000)\n+(1..1000i32)\n     .filter(|&x| x % 2 == 0)\n     .filter(|&x| x % 3 == 0)\n     .take(5)"}, {"sha": "a2b70e96e1e8dfff209ad7caf861b3c3d97240c9", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f174bcabcb8c9c707481c834766894d984eb089f/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/f174bcabcb8c9c707481c834766894d984eb089f/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=f174bcabcb8c9c707481c834766894d984eb089f", "patch": "@@ -418,7 +418,7 @@ struct Wheel {\n fn main() {\n     let car = Car { name: \"DeLorean\".to_string() };\n \n-    for _ in range(0, 4) {\n+    for _ in 0..4 {\n         Wheel { size: 360, owner: car };\n     }\n }\n@@ -456,7 +456,7 @@ fn main() {\n \n     let car_owner = Rc::new(car);\n \n-    for _ in range(0, 4) {\n+    for _ in 0..4 {\n         Wheel { size: 360, owner: car_owner.clone() };\n     }\n }"}, {"sha": "54c74fdd3e2b50e6ecd0f4219b2520c115c20906", "filename": "src/doc/trpl/testing.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f174bcabcb8c9c707481c834766894d984eb089f/src%2Fdoc%2Ftrpl%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/f174bcabcb8c9c707481c834766894d984eb089f/src%2Fdoc%2Ftrpl%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftesting.md?ref=f174bcabcb8c9c707481c834766894d984eb089f", "patch": "@@ -512,7 +512,7 @@ use test::Bencher;\n #[bench]\n fn bench_xor_1000_ints(b: &mut Bencher) {\n     b.iter(|| {\n-        range(0, 1000).fold(0, |old, new| old ^ new);\n+        (0..1000).fold(0, |old, new| old ^ new);\n     });\n }\n ```\n@@ -537,7 +537,7 @@ computation entirely. This could be done for the example above by adjusting the\n # impl X { fn iter<T, F>(&self, _: F) where F: FnMut() -> T {} } let b = X;\n b.iter(|| {\n     // note lack of `;` (could also use an explicit `return`).\n-    range(0, 1000).fold(0, |old, new| old ^ new)\n+    (0..1000).fold(0, |old, new| old ^ new)\n });\n ```\n \n@@ -554,7 +554,7 @@ extern crate test;\n b.iter(|| {\n     let n = test::black_box(1000);\n \n-    range(0, n).fold(0, |a, b| a ^ b)\n+    (0..n).fold(0, |a, b| a ^ b)\n })\n # }\n ```"}]}