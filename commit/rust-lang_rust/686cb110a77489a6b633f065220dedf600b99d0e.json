{"sha": "686cb110a77489a6b633f065220dedf600b99d0e", "node_id": "C_kwDOAAsO6NoAKDY4NmNiMTEwYTc3NDg5YTZiNjMzZjA2NTIyMGRlZGY2MDBiOTlkMGU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-30T20:50:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-30T20:50:59Z"}, "message": "Rollup merge of #99890 - compiler-errors:issue-99828, r=lcnr\n\nDo not allow bad projection term to leak into the type checker\n\nFixes #99828", "tree": {"sha": "84f51d6b773122bea83c6b77bfe74c4b89d54c97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84f51d6b773122bea83c6b77bfe74c4b89d54c97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/686cb110a77489a6b633f065220dedf600b99d0e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5ZmzCRBK7hj4Ov3rIwAAXgwIAFuxLUzB4/CKIAOr0HTOE528\nJVTIAH+4ajdiseLuuiPJnefCNuwwars/Jj9w2ywlc5YtQOUs8O7VGv8R5NunXRuL\nKrsjrb+5fP5BVsciqTt6RziDs/PuGEYTtAHXtCLSnx3Vk3aO+n+Yworm1c92MVzR\nF8UdHieD7HZtsiJomSlB7SBQgCiJO/q9e6jMzrAiiSy4DOZsxL46PQKWBJXC2FDu\n+4Dl4xpRotJvUjdnLCJ678E6cCUkukqq6mCQhi2g3/T1Lag8HOQkGODlrkYKCdUX\njSRBNfo/VrM3SM5wndNQSlFtSJVbksrfm6DkPvYyD/jArLvdY7CZHf06UW/78YI=\n=+AGf\n-----END PGP SIGNATURE-----\n", "payload": "tree 84f51d6b773122bea83c6b77bfe74c4b89d54c97\nparent 451349a6340fd2ef645ed9c696109140be32323d\nparent 77f7a833dd93736e899786603bbee6d28056f184\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659214259 +0200\ncommitter GitHub <noreply@github.com> 1659214259 +0200\n\nRollup merge of #99890 - compiler-errors:issue-99828, r=lcnr\n\nDo not allow bad projection term to leak into the type checker\n\nFixes #99828\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/686cb110a77489a6b633f065220dedf600b99d0e", "html_url": "https://github.com/rust-lang/rust/commit/686cb110a77489a6b633f065220dedf600b99d0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/686cb110a77489a6b633f065220dedf600b99d0e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "451349a6340fd2ef645ed9c696109140be32323d", "url": "https://api.github.com/repos/rust-lang/rust/commits/451349a6340fd2ef645ed9c696109140be32323d", "html_url": "https://github.com/rust-lang/rust/commit/451349a6340fd2ef645ed9c696109140be32323d"}, {"sha": "77f7a833dd93736e899786603bbee6d28056f184", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f7a833dd93736e899786603bbee6d28056f184", "html_url": "https://github.com/rust-lang/rust/commit/77f7a833dd93736e899786603bbee6d28056f184"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "444f0fdd45a83faa289223dab995158ecc729f8c", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/686cb110a77489a6b633f065220dedf600b99d0e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686cb110a77489a6b633f065220dedf600b99d0e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=686cb110a77489a6b633f065220dedf600b99d0e", "patch": "@@ -1234,7 +1234,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         match binding.kind {\n-            ConvertedBindingKind::Equality(term) => {\n+            ConvertedBindingKind::Equality(mut term) => {\n                 // \"Desugar\" a constraint like `T: Iterator<Item = u32>` this to\n                 // the \"projection predicate\" for:\n                 //\n@@ -1245,18 +1245,28 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     (hir::def::DefKind::AssocTy, ty::Term::Ty(_))\n                     | (hir::def::DefKind::AssocConst, ty::Term::Const(_)) => (),\n                     (_, _) => {\n-                        let got = if let ty::Term::Ty(_) = term { \"type\" } else { \"const\" };\n+                        let got = if let ty::Term::Ty(_) = term { \"type\" } else { \"constant\" };\n                         let expected = def_kind.descr(assoc_item_def_id);\n                         tcx.sess\n                             .struct_span_err(\n                                 binding.span,\n-                                &format!(\"mismatch in bind of {expected}, got {got}\"),\n+                                &format!(\"expected {expected} bound, found {got}\"),\n                             )\n                             .span_note(\n                                 tcx.def_span(assoc_item_def_id),\n-                                &format!(\"{expected} defined here does not match {got}\"),\n+                                &format!(\"{expected} defined here\"),\n                             )\n                             .emit();\n+                        term = match def_kind {\n+                            hir::def::DefKind::AssocTy => tcx.ty_error().into(),\n+                            hir::def::DefKind::AssocConst => tcx\n+                                .const_error(\n+                                    tcx.bound_type_of(assoc_item_def_id)\n+                                        .subst(tcx, projection_ty.skip_binder().substs),\n+                                )\n+                                .into(),\n+                            _ => unreachable!(),\n+                        };\n                     }\n                 }\n                 bounds.projection_bounds.push(("}, {"sha": "c5d78469e955ef1abaaf952e1e297e3066467f1b", "filename": "src/test/ui/associated-consts/assoc-const-ty-mismatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686cb110a77489a6b633f065220dedf600b99d0e/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686cb110a77489a6b633f065220dedf600b99d0e/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.rs?ref=686cb110a77489a6b633f065220dedf600b99d0e", "patch": "@@ -21,9 +21,9 @@ impl FooTy for Bar {\n \n \n fn foo<F: Foo<N=usize>>() {}\n-//~^ ERROR mismatch in\n+//~^ ERROR expected associated constant bound, found type\n fn foo2<F: FooTy<T=3usize>>() {}\n-//~^ ERROR mismatch in\n+//~^ ERROR expected associated type bound, found constant\n \n fn main() {\n   foo::<Bar>();"}, {"sha": "11198729e38cbd2d5d3c1439451a417c0d7ec72a", "filename": "src/test/ui/associated-consts/assoc-const-ty-mismatch.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/686cb110a77489a6b633f065220dedf600b99d0e/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686cb110a77489a6b633f065220dedf600b99d0e/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassoc-const-ty-mismatch.stderr?ref=686cb110a77489a6b633f065220dedf600b99d0e", "patch": "@@ -1,22 +1,22 @@\n-error: mismatch in bind of associated constant, got type\n+error: expected associated constant bound, found type\n   --> $DIR/assoc-const-ty-mismatch.rs:23:15\n    |\n LL | fn foo<F: Foo<N=usize>>() {}\n    |               ^^^^^^^\n    |\n-note: associated constant defined here does not match type\n+note: associated constant defined here\n   --> $DIR/assoc-const-ty-mismatch.rs:5:3\n    |\n LL |   const N: usize;\n    |   ^^^^^^^^^^^^^^\n \n-error: mismatch in bind of associated type, got const\n+error: expected associated type bound, found constant\n   --> $DIR/assoc-const-ty-mismatch.rs:25:18\n    |\n LL | fn foo2<F: FooTy<T=3usize>>() {}\n    |                  ^^^^^^^^\n    |\n-note: associated type defined here does not match const\n+note: associated type defined here\n   --> $DIR/assoc-const-ty-mismatch.rs:9:3\n    |\n LL |   type T;"}, {"sha": "7b711283f5b8316ccb788a43e032aecba7b016c0", "filename": "src/test/ui/associated-type-bounds/issue-99828.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/686cb110a77489a6b633f065220dedf600b99d0e/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-99828.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686cb110a77489a6b633f065220dedf600b99d0e/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-99828.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-99828.rs?ref=686cb110a77489a6b633f065220dedf600b99d0e", "patch": "@@ -0,0 +1,11 @@\n+fn get_iter(vec: &[i32]) -> impl Iterator<Item = {}> + '_ {\n+    //~^ ERROR expected associated type bound, found constant\n+    //~| ERROR associated const equality is incomplete\n+    vec.iter()\n+}\n+\n+fn main() {\n+    let vec = Vec::new();\n+    let mut iter = get_iter(&vec);\n+    iter.next();\n+}"}, {"sha": "1c20ead0556593267c0de5ff5de5e0e81c38309e", "filename": "src/test/ui/associated-type-bounds/issue-99828.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/686cb110a77489a6b633f065220dedf600b99d0e/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-99828.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686cb110a77489a6b633f065220dedf600b99d0e/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-99828.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-99828.stderr?ref=686cb110a77489a6b633f065220dedf600b99d0e", "patch": "@@ -0,0 +1,24 @@\n+error[E0658]: associated const equality is incomplete\n+  --> $DIR/issue-99828.rs:1:43\n+   |\n+LL | fn get_iter(vec: &[i32]) -> impl Iterator<Item = {}> + '_ {\n+   |                                           ^^^^^^^^^\n+   |\n+   = note: see issue #92827 <https://github.com/rust-lang/rust/issues/92827> for more information\n+   = help: add `#![feature(associated_const_equality)]` to the crate attributes to enable\n+\n+error: expected associated type bound, found constant\n+  --> $DIR/issue-99828.rs:1:43\n+   |\n+LL | fn get_iter(vec: &[i32]) -> impl Iterator<Item = {}> + '_ {\n+   |                                           ^^^^^^^^^\n+   |\n+note: associated type defined here\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     type Item;\n+   |     ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}