{"sha": "4128a3dc1fe1324cdc127901d8ccecfc4fe61984", "node_id": "C_kwDOAAsO6NoAKDQxMjhhM2RjMWZlMTMyNGNkYzEyNzkwMWQ4Y2NlY2ZjNGZlNjE5ODQ", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-27T00:49:58Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-30T20:52:58Z"}, "message": "Remove unused `Clean` impl", "tree": {"sha": "148adb1aa2ef9042c5694143d46c5b96051ed1f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/148adb1aa2ef9042c5694143d46c5b96051ed1f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4128a3dc1fe1324cdc127901d8ccecfc4fe61984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4128a3dc1fe1324cdc127901d8ccecfc4fe61984", "html_url": "https://github.com/rust-lang/rust/commit/4128a3dc1fe1324cdc127901d8ccecfc4fe61984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4128a3dc1fe1324cdc127901d8ccecfc4fe61984/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e20bb157a2b2f413c187ab33ddc626a3e69adff8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e20bb157a2b2f413c187ab33ddc626a3e69adff8", "html_url": "https://github.com/rust-lang/rust/commit/e20bb157a2b2f413c187ab33ddc626a3e69adff8"}], "stats": {"total": 7, "additions": 0, "deletions": 7}, "files": [{"sha": "fd284a1c9268d19b3f810b5b2e31b2580ec050d4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4128a3dc1fe1324cdc127901d8ccecfc4fe61984/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4128a3dc1fe1324cdc127901d8ccecfc4fe61984/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4128a3dc1fe1324cdc127901d8ccecfc4fe61984", "patch": "@@ -890,13 +890,6 @@ impl Clean<bool> for hir::IsAuto {\n     }\n }\n \n-impl Clean<Type> for hir::TraitRef<'_> {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Type {\n-        let path = self.path.clean(cx);\n-        resolve_type(cx, path)\n-    }\n-}\n-\n impl Clean<Path> for hir::TraitRef<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Path {\n         let path = self.path.clean(cx);"}]}