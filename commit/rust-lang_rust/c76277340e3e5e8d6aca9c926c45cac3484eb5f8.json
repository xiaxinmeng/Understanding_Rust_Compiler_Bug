{"sha": "c76277340e3e5e8d6aca9c926c45cac3484eb5f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NjI3NzM0MGUzZTVlOGQ2YWNhOWM5MjZjNDVjYWMzNDg0ZWI1Zjg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T17:47:15Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T17:47:15Z"}, "message": "resolve: `ParentScope::default` -> `ParentScope::module`", "tree": {"sha": "4bc26b087aa6fefc094050a01e36120678c7eebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bc26b087aa6fefc094050a01e36120678c7eebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c76277340e3e5e8d6aca9c926c45cac3484eb5f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c76277340e3e5e8d6aca9c926c45cac3484eb5f8", "html_url": "https://github.com/rust-lang/rust/commit/c76277340e3e5e8d6aca9c926c45cac3484eb5f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c76277340e3e5e8d6aca9c926c45cac3484eb5f8/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "136db2235a754f91f8a0a6bf6d985d77fe97f8db", "url": "https://api.github.com/repos/rust-lang/rust/commits/136db2235a754f91f8a0a6bf6d985d77fe97f8db", "html_url": "https://github.com/rust-lang/rust/commit/136db2235a754f91f8a0a6bf6d985d77fe97f8db"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "539e4a301e01238ca8225c06e84d858907d9c69d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c76277340e3e5e8d6aca9c926c45cac3484eb5f8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76277340e3e5e8d6aca9c926c45cac3484eb5f8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c76277340e3e5e8d6aca9c926c45cac3484eb5f8", "patch": "@@ -166,7 +166,7 @@ impl<'a> Resolver<'a> {\n         let def_id = module.def_id().unwrap();\n         for child in self.cstore.item_children_untracked(def_id, self.session) {\n             let child = child.map_id(|_| panic!(\"unexpected id\"));\n-            BuildReducedGraphVisitor { parent_scope: ParentScope::default(module), r: self }\n+            BuildReducedGraphVisitor { parent_scope: ParentScope::module(module), r: self }\n                 .build_reduced_graph_for_external_crate_res(child);\n         }\n         module.populated.set(true)"}, {"sha": "ffdfd85002bca66794f0557c3013b0810a26c74c", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c76277340e3e5e8d6aca9c926c45cac3484eb5f8/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76277340e3e5e8d6aca9c926c45cac3484eb5f8/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=c76277340e3e5e8d6aca9c926c45cac3484eb5f8", "patch": "@@ -509,7 +509,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n         // During late resolution we only track the module component of the parent scope,\n         // although it may be useful to track other components as well for diagnostics.\n         let graph_root = resolver.graph_root;\n-        let parent_scope = ParentScope::default(graph_root);\n+        let parent_scope = ParentScope::module(graph_root);\n         LateResolutionVisitor {\n             r: resolver,\n             parent_scope,"}, {"sha": "9b5eb51eb582dfb6b3df8adf3f2d00931420a159", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c76277340e3e5e8d6aca9c926c45cac3484eb5f8/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76277340e3e5e8d6aca9c926c45cac3484eb5f8/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c76277340e3e5e8d6aca9c926c45cac3484eb5f8", "patch": "@@ -140,7 +140,9 @@ pub struct ParentScope<'a> {\n }\n \n impl<'a> ParentScope<'a> {\n-    pub fn default(module: Module<'a>) -> ParentScope<'a> {\n+    /// Creates a parent scope with the passed argument used as the module scope component,\n+    /// and other scope components set to default empty values.\n+    pub fn module(module: Module<'a>) -> ParentScope<'a> {\n         ParentScope {\n             module,\n             expansion: ExpnId::root(),\n@@ -1017,7 +1019,7 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n             segments,\n         };\n \n-        let parent_scope = &ParentScope::default(self.graph_root);\n+        let parent_scope = &ParentScope::module(self.graph_root);\n         let res = match self.resolve_ast_path(&path, ns, parent_scope) {\n             Ok(res) => res,\n             Err((span, error)) => {\n@@ -1090,7 +1092,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         let mut invocation_parent_scopes = FxHashMap::default();\n-        invocation_parent_scopes.insert(ExpnId::root(), ParentScope::default(graph_root));\n+        invocation_parent_scopes.insert(ExpnId::root(), ParentScope::module(graph_root));\n \n         let mut macro_defs = FxHashMap::default();\n         macro_defs.insert(ExpnId::root(), root_def_id);\n@@ -2671,7 +2673,7 @@ impl<'a> Resolver<'a> {\n             let def_id = self.definitions.local_def_id(module_id);\n             self.module_map.get(&def_id).copied().unwrap_or(self.graph_root)\n         });\n-        let parent_scope = &ParentScope::default(module);\n+        let parent_scope = &ParentScope::module(module);\n         let res = self.resolve_ast_path(&path, ns, parent_scope).map_err(|_| ())?;\n         Ok((path, res))\n     }"}, {"sha": "079145e816cd533b88239fcbdfacfa6f9d95c0f1", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c76277340e3e5e8d6aca9c926c45cac3484eb5f8/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76277340e3e5e8d6aca9c926c45cac3484eb5f8/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=c76277340e3e5e8d6aca9c926c45cac3484eb5f8", "patch": "@@ -101,7 +101,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             ExpnKind::Macro(MacroKind::Attr, sym::test_case), DUMMY_SP, self.session.edition()\n         )));\n         let module = self.module_map[&self.definitions.local_def_id(id)];\n-        self.invocation_parent_scopes.insert(expn_id, ParentScope::default(module));\n+        self.invocation_parent_scopes.insert(expn_id, ParentScope::module(module));\n         self.definitions.set_invocation_parent(expn_id, module.def_id().unwrap().index);\n         expn_id\n     }"}, {"sha": "c73c46472d804aeeb0fbf1c2e03dc343ab4ca8fa", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c76277340e3e5e8d6aca9c926c45cac3484eb5f8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76277340e3e5e8d6aca9c926c45cac3484eb5f8/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=c76277340e3e5e8d6aca9c926c45cac3484eb5f8", "patch": "@@ -432,7 +432,7 @@ fn macro_resolve(cx: &DocContext<'_>, path_str: &str) -> Option<Res> {\n     let path = ast::Path::from_ident(Ident::from_str(path_str));\n     cx.enter_resolver(|resolver| {\n         if let Ok((Some(ext), res)) = resolver.resolve_macro_path(\n-            &path, None, &ParentScope::default(resolver.graph_root), false, false\n+            &path, None, &ParentScope::module(resolver.graph_root), false, false\n         ) {\n             if let SyntaxExtensionKind::LegacyBang { .. } = ext.kind {\n                 return Some(res.map_id(|_| panic!(\"unexpected id\")));"}]}