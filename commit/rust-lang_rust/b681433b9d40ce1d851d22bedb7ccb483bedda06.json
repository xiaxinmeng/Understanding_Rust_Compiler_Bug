{"sha": "b681433b9d40ce1d851d22bedb7ccb483bedda06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ODE0MzNiOWQ0MGNlMWQ4NTFkMjJiZWRiN2NjYjQ4M2JlZGRhMDY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-07T13:19:06Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-11T14:08:17Z"}, "message": "Use `Rc<[Symbol]>` instead of `Vec<Symbol>` to reduce # of allocs", "tree": {"sha": "58553f5e5d930db8c101e2b698fa43ed38a09ee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58553f5e5d930db8c101e2b698fa43ed38a09ee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b681433b9d40ce1d851d22bedb7ccb483bedda06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b681433b9d40ce1d851d22bedb7ccb483bedda06", "html_url": "https://github.com/rust-lang/rust/commit/b681433b9d40ce1d851d22bedb7ccb483bedda06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b681433b9d40ce1d851d22bedb7ccb483bedda06/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dba7cb20224b5bb3a22641b2f4f2f73e5157dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dba7cb20224b5bb3a22641b2f4f2f73e5157dee", "html_url": "https://github.com/rust-lang/rust/commit/1dba7cb20224b5bb3a22641b2f4f2f73e5157dee"}], "stats": {"total": 104, "additions": 54, "deletions": 50}, "files": [{"sha": "15184ec9d27ff151f383934b4dca261d5814bc49", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -52,6 +52,7 @@ use crate::util::nodemap::{DefIdMap, NodeMap};\n use std::collections::{BTreeSet, BTreeMap};\n use std::fmt::Debug;\n use std::mem;\n+use std::rc::Rc;\n use smallvec::SmallVec;\n use syntax::attr;\n use syntax::ast;\n@@ -687,7 +688,7 @@ impl<'a> LoweringContext<'a> {\n         &self,\n         reason: CompilerDesugaringKind,\n         span: Span,\n-        allow_internal_unstable: Vec<Symbol>,\n+        allow_internal_unstable: Option<Rc<[Symbol]>>,\n     ) -> Span {\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(source_map::ExpnInfo {\n@@ -974,9 +975,9 @@ impl<'a> LoweringContext<'a> {\n         let unstable_span = self.mark_span_with_reason(\n             CompilerDesugaringKind::Async,\n             span,\n-            vec![\n+            Some(vec![\n                 Symbol::intern(\"gen_future\"),\n-            ],\n+            ].into()),\n         );\n         let gen_future = self.expr_std_path(\n             unstable_span, &[\"future\", \"from_generator\"], None, ThinVec::new());\n@@ -1376,7 +1377,7 @@ impl<'a> LoweringContext<'a> {\n         let exist_ty_span = self.mark_span_with_reason(\n             CompilerDesugaringKind::ExistentialReturnType,\n             span,\n-            Vec::new(), // doesn'c actually allow anything unstable\n+            None,\n         );\n \n         let exist_ty_def_index = self\n@@ -3944,9 +3945,9 @@ impl<'a> LoweringContext<'a> {\n                     let unstable_span = this.mark_span_with_reason(\n                         CompilerDesugaringKind::TryBlock,\n                         body.span,\n-                        vec![\n+                        Some(vec![\n                             Symbol::intern(\"try_trait\"),\n-                        ],\n+                        ].into()),\n                     );\n                     let mut block = this.lower_block(body, true).into_inner();\n                     let tail = block.expr.take().map_or_else(\n@@ -4382,7 +4383,7 @@ impl<'a> LoweringContext<'a> {\n                 let desugared_span = self.mark_span_with_reason(\n                     CompilerDesugaringKind::ForLoop,\n                     head_sp,\n-                    Vec::new(),\n+                    None,\n                 );\n \n                 let iter = self.str_to_ident(\"iter\");\n@@ -4548,9 +4549,9 @@ impl<'a> LoweringContext<'a> {\n                 let unstable_span = self.mark_span_with_reason(\n                     CompilerDesugaringKind::QuestionMark,\n                     e.span,\n-                    vec![\n+                    Some(vec![\n                         Symbol::intern(\"try_trait\")\n-                    ],\n+                    ].into()),\n                 );\n \n                 // `Try::into_result(<expr>)`"}, {"sha": "758a0d63886b1e91eadeee8cc6fa42d77aa95fe0", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -91,9 +91,9 @@ impl MutVisitor for ExpandAllocatorDirectives<'_> {\n             call_site: item.span, // use the call site of the static\n             def_site: None,\n             format: MacroAttribute(Symbol::intern(name)),\n-            allow_internal_unstable: vec![\n+            allow_internal_unstable: Some(vec![\n                 Symbol::intern(\"rustc_attrs\"),\n-            ],\n+            ].into()),\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: hygiene::default_edition(),"}, {"sha": "90b0fb249aa616f6d52ca78bb5209823fa08831c", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -570,7 +570,7 @@ impl<'a> CrateLoader<'a> {\n                 ProcMacro::Bang { name, client } => {\n                     (name, SyntaxExtension::ProcMacro {\n                         expander: Box::new(BangProcMacro { client }),\n-                        allow_internal_unstable: Vec::new(),\n+                        allow_internal_unstable: None,\n                         edition: root.edition,\n                     })\n                 }"}, {"sha": "f49b88f14e60e24fb7c73134a2834317c3d9e0e1", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -425,9 +425,9 @@ impl cstore::CStore {\n             let client = proc_macro::bridge::client::Client::expand1(proc_macro::quote);\n             let ext = SyntaxExtension::ProcMacro {\n                 expander: Box::new(BangProcMacro { client }),\n-                allow_internal_unstable: vec![\n+                allow_internal_unstable: Some(vec![\n                     Symbol::intern(\"proc_macro_def_site\"),\n-                ],\n+                ].into()),\n                 edition: data.root.edition,\n             };\n             return LoadedMacro::ProcMacro(Lrc::new(ext));"}, {"sha": "2da520d39694852baad4304922643b830d492005", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -126,7 +126,7 @@ impl<'a> Registry<'a> {\n         self.register_syntax_extension(Symbol::intern(name), NormalTT {\n             expander: Box::new(expander),\n             def_info: None,\n-            allow_internal_unstable: Vec::new(),\n+            allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             unstable_feature: None,"}, {"sha": "7c6303b3d404f67a038bf210de4c3b7d7da53262", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -622,7 +622,7 @@ pub enum SyntaxExtension {\n     ProcMacro {\n         expander: Box<dyn ProcMacro + sync::Sync + sync::Send>,\n         /// Whitelist of unstable features that are treated as stable inside this macro\n-        allow_internal_unstable: Vec<Symbol>,\n+        allow_internal_unstable: Option<Rc<[Symbol]>>,\n         edition: Edition,\n     },\n \n@@ -642,7 +642,7 @@ pub enum SyntaxExtension {\n         /// directly use `#[unstable]` things.\n         ///\n         /// Only allows things that require a feature gate in the given whitelist\n-        allow_internal_unstable: Vec<Symbol>,\n+        allow_internal_unstable: Option<Rc<[Symbol]>>,\n         /// Whether the contents of the macro can use `unsafe`\n         /// without triggering the `unsafe_code` lint.\n         allow_internal_unsafe: bool,\n@@ -660,7 +660,7 @@ pub enum SyntaxExtension {\n     IdentTT {\n         expander: Box<dyn IdentMacroExpander + sync::Sync + sync::Send>,\n         span: Option<Span>,\n-        allow_internal_unstable: Vec<Symbol>,\n+        allow_internal_unstable: Option<Rc<[Symbol]>>,\n     },\n \n     /// An attribute-like procedural macro. TokenStream -> TokenStream."}, {"sha": "6df369133d01dd99630a838bc672ed6e3abe2000", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -58,10 +58,10 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt<'_>, span: Span, traits: &[ast::P\n         call_site: span,\n         def_site: None,\n         format: ExpnFormat::MacroAttribute(Symbol::intern(&pretty_name)),\n-        allow_internal_unstable: vec![\n+        allow_internal_unstable: Some(vec![\n             Symbol::intern(\"rustc_attrs\"),\n             Symbol::intern(\"structural_match\"),\n-        ],\n+        ].into()),\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n         edition: hygiene::default_edition(),"}, {"sha": "60359531b7f63987d2adde8dc167c2c19e61556b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -558,7 +558,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             call_site: attr.span,\n             def_site: None,\n             format: MacroAttribute(Symbol::intern(&attr.path.to_string())),\n-            allow_internal_unstable: Vec::new(),\n+            allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: ext.edition(),\n@@ -758,7 +758,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         let opt_expanded = match *ext {\n             DeclMacro { ref expander, def_info, edition, .. } => {\n                 if let Err(dummy_span) = validate_and_set_expn_info(self, def_info.map(|(_, s)| s),\n-                                                                    Vec::new(), false, false, None,\n+                                                                    None, false, false, None,\n                                                                     edition) {\n                     dummy_span\n                 } else {\n@@ -919,7 +919,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             call_site: span,\n             def_site: None,\n             format: MacroAttribute(pretty_name),\n-            allow_internal_unstable: Vec::new(),\n+            allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: ext.edition(),\n@@ -938,12 +938,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 Some(invoc.fragment_kind.expect_from_annotatables(items))\n             }\n             BuiltinDerive(func) => {\n-                expn_info.allow_internal_unstable = vec![\n+                expn_info.allow_internal_unstable = Some(vec![\n                     Symbol::intern(\"rustc_attrs\"),\n                     Symbol::intern(\"derive_clone_copy\"),\n                     Symbol::intern(\"derive_eq\"),\n                     Symbol::intern(\"libstd_sys_internals\"), // RustcDeserialize and RustcSerialize\n-                ];\n+                ].into());\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = span.with_ctxt(self.cx.backtrace());\n                 let mut items = Vec::new();"}, {"sha": "cc5531c4010462ca5a72c095edb35f95a4fcf114", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -377,21 +377,21 @@ pub fn compile(\n \n     if body.legacy {\n         let allow_internal_unstable = attr::find_by_name(&def.attrs, \"allow_internal_unstable\")\n-            .map_or(Vec::new(), |attr| attr\n+            .map(|attr| attr\n                 .meta_item_list()\n                 .map(|list| list.iter()\n                     .map(|it| it.name().unwrap_or_else(|| sess.span_diagnostic.span_bug(\n                         it.span, \"allow internal unstable expects feature names\",\n                     )))\n-                    .collect()\n+                    .collect::<Vec<Symbol>>().into()\n                 )\n                 .unwrap_or_else(|| {\n                     sess.span_diagnostic.span_warn(\n                         attr.span, \"allow_internal_unstable expects list of feature names. In the \\\n                         future this will become a hard error. Please use `allow_internal_unstable(\\\n                         foo, bar)` to only allow the `foo` and `bar` features\",\n                     );\n-                    vec![Symbol::intern(\"allow_internal_unstable_backcompat_hack\")]\n+                    vec![Symbol::intern(\"allow_internal_unstable_backcompat_hack\")].into()\n                 })\n             );\n         let allow_internal_unsafe = attr::contains_name(&def.attrs, \"allow_internal_unsafe\");"}, {"sha": "b9758bd655c155ea92a15d048c7ae0e3515fdbac", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -20,9 +20,9 @@ fn ignored_span(sp: Span) -> Span {\n         call_site: DUMMY_SP,\n         def_site: None,\n         format: MacroAttribute(Symbol::intern(\"std_inject\")),\n-        allow_internal_unstable: vec![\n+        allow_internal_unstable: Some(vec![\n             Symbol::intern(\"prelude_import\"),\n-        ],\n+        ].into()),\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n         edition: hygiene::default_edition(),"}, {"sha": "f45bf034ba2f89cd5603c198266ad543596cb5ec", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -285,11 +285,11 @@ fn generate_test_harness(sess: &ParseSess,\n         call_site: DUMMY_SP,\n         def_site: None,\n         format: MacroAttribute(Symbol::intern(\"test_case\")),\n-        allow_internal_unstable: vec![\n+        allow_internal_unstable: Some(vec![\n             Symbol::intern(\"main\"),\n             Symbol::intern(\"test\"),\n             Symbol::intern(\"rustc_attrs\"),\n-        ],\n+        ].into()),\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n         edition: hygiene::default_edition(),"}, {"sha": "fff54814a38c40cd814197d03415c86e8c605661", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -138,13 +138,14 @@ fn call_intrinsic(cx: &ExtCtxt<'_>,\n                   -> P<ast::Expr> {\n     let intrinsic_allowed_via_allow_internal_unstable = cx\n         .current_expansion.mark.expn_info().unwrap()\n-        .allow_internal_unstable.iter()\n-        .any(|&s| s == \"core_intrinsics\");\n+        .allow_internal_unstable.map_or(false, |features| features.iter().any(|&s|\n+            s == \"core_intrinsics\"\n+        ));\n     if intrinsic_allowed_via_allow_internal_unstable {\n         span = span.with_ctxt(cx.backtrace());\n     } else { // Avoid instability errors with user defined curstom derives, cc #36316\n         let mut info = cx.current_expansion.mark.expn_info().unwrap();\n-        info.allow_internal_unstable = vec![Symbol::intern(\"core_intrinsics\")];\n+        info.allow_internal_unstable = Some(vec![Symbol::intern(\"core_intrinsics\")].into());\n         let mark = Mark::fresh(Mark::root());\n         mark.set_expn_info(info);\n         span = span.with_ctxt(SyntaxContext::empty().apply_mark(mark));"}, {"sha": "719f9a4b3fdd55eb986560bc5110d7aa05657b8c", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -60,7 +60,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                      NormalTT {\n                         expander: Box::new($f as MacroExpanderFn),\n                         def_info: None,\n-                        allow_internal_unstable: Vec::new(),\n+                        allow_internal_unstable: None,\n                         allow_internal_unsafe: false,\n                         local_inner_macros: false,\n                         unstable_feature: None,\n@@ -103,9 +103,9 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n              NormalTT {\n                 expander: Box::new(format::expand_format_args),\n                 def_info: None,\n-                allow_internal_unstable: vec![\n+                allow_internal_unstable: Some(vec![\n                     Symbol::intern(\"fmt_internals\"),\n-                ],\n+                ].into()),\n                 allow_internal_unsafe: false,\n                 local_inner_macros: false,\n                 unstable_feature: None,\n@@ -115,9 +115,9 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n              NormalTT {\n                  expander: Box::new(format::expand_format_args_nl),\n                  def_info: None,\n-                 allow_internal_unstable: vec![\n+                 allow_internal_unstable: Some(vec![\n                      Symbol::intern(\"fmt_internals\"),\n-                 ],\n+                 ].into()),\n                  allow_internal_unsafe: false,\n                  local_inner_macros: false,\n                  unstable_feature: None,"}, {"sha": "5730081ce018a1e98c9ea0082be478e565751b84", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -333,10 +333,10 @@ fn mk_decls(\n         call_site: DUMMY_SP,\n         def_site: None,\n         format: MacroAttribute(Symbol::intern(\"proc_macro\")),\n-        allow_internal_unstable: vec![\n+        allow_internal_unstable: Some(vec![\n             Symbol::intern(\"rustc_attrs\"),\n             Symbol::intern(\"proc_macro_internals\"),\n-        ],\n+        ].into()),\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n         edition: hygiene::default_edition(),"}, {"sha": "371862465487b3f2cb5d7e13c53fe06f122d1341", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -66,10 +66,10 @@ pub fn expand_test_or_bench(\n             call_site: DUMMY_SP,\n             def_site: None,\n             format: MacroAttribute(Symbol::intern(\"test\")),\n-            allow_internal_unstable: vec![\n+            allow_internal_unstable: Some(vec![\n                 Symbol::intern(\"rustc_attrs\"),\n                 Symbol::intern(\"test\"),\n-            ],\n+            ].into()),\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: hygiene::default_edition(),"}, {"sha": "1ed1ab0a07b9683b4d25c7359ffe7aa57a5f737f", "filename": "src/libsyntax_ext/test_case.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -41,10 +41,10 @@ pub fn expand(\n             call_site: DUMMY_SP,\n             def_site: None,\n             format: MacroAttribute(Symbol::intern(\"test_case\")),\n-            allow_internal_unstable: vec![\n+            allow_internal_unstable: Some(vec![\n                 Symbol::intern(\"test\"),\n                 Symbol::intern(\"rustc_attrs\"),\n-            ],\n+            ].into()),\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             edition: hygiene::default_edition(),"}, {"sha": "fb9b4c9d70e39529c3c025e54450ca8211d03f4f", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -13,6 +13,7 @@ use crate::symbol::{keywords, Symbol};\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::{fmt, mem};\n+use std::rc::Rc;\n \n /// A SyntaxContext represents a chain of macro expansions (represented by marks).\n #[derive(Clone, Copy, PartialEq, Eq, Default, PartialOrd, Ord, Hash)]\n@@ -553,7 +554,7 @@ pub struct ExpnInfo {\n     /// List of #[unstable]/feature-gated features that the macro is allowed to use\n     /// internally without forcing the whole crate to opt-in\n     /// to them.\n-    pub allow_internal_unstable: Vec<Symbol>,\n+    pub allow_internal_unstable: Option<Rc<[Symbol]>>,\n     /// Whether the macro is allowed to use `unsafe` internally\n     /// even if the user crate has `#![forbid(unsafe_code)]`.\n     pub allow_internal_unsafe: bool,"}, {"sha": "f0dc1b00fd931adbd94b635482f2ed88796570c7", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -389,8 +389,9 @@ impl Span {\n         match self.ctxt().outer().expn_info() {\n             Some(info) => info\n                 .allow_internal_unstable\n-                .iter()\n-                .any(|&f| f == feature || f == \"allow_internal_unstable_backcompat_hack\"),\n+                .map_or(false, |features| features.iter().any(|&f|\n+                    f == feature || f == \"allow_internal_unstable_backcompat_hack\"\n+                )),\n             None => false,\n         }\n     }"}, {"sha": "309acb25184a8f54b6c898c8bc19d2e7f4b60c65", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b681433b9d40ce1d851d22bedb7ccb483bedda06/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs?ref=b681433b9d40ce1d851d22bedb7ccb483bedda06", "patch": "@@ -43,7 +43,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         NormalTT {\n             expander: Box::new(Expander { args: args, }),\n             def_info: None,\n-            allow_internal_unstable: Vec::new(),\n+            allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             unstable_feature: None,"}]}