{"sha": "e7f5c4f15503633c83f260e06ced5a80837d84f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZjVjNGYxNTUwMzYzM2M4M2YyNjBlMDZjZWQ1YTgwODM3ZDg0ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-30T21:30:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-30T21:30:32Z"}, "message": "Auto merge of #1151 - divergentdave:statx-AT_EMPTY_PATH, r=RalfJung\n\nAdd support for AT_EMPTY_PATH to statx shim\n\nThis enables use of `File::metadata()`.", "tree": {"sha": "aa63d9293aef80bba847d8854f1ce5c2519152d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa63d9293aef80bba847d8854f1ce5c2519152d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7f5c4f15503633c83f260e06ced5a80837d84f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f5c4f15503633c83f260e06ced5a80837d84f5", "html_url": "https://github.com/rust-lang/rust/commit/e7f5c4f15503633c83f260e06ced5a80837d84f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7f5c4f15503633c83f260e06ced5a80837d84f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "html_url": "https://github.com/rust-lang/rust/commit/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a"}, {"sha": "ef154df60778055f7d4cd570537c9f73ceb75b8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef154df60778055f7d4cd570537c9f73ceb75b8f", "html_url": "https://github.com/rust-lang/rust/commit/ef154df60778055f7d4cd570537c9f73ceb75b8f"}], "stats": {"total": 211, "additions": 142, "deletions": 69}, "files": [{"sha": "a765d58bbcf35c200e3f600c851a21f5e178789a", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f5c4f15503633c83f260e06ced5a80837d84f5/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f5c4f15503633c83f260e06ced5a80837d84f5/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=e7f5c4f15503633c83f260e06ced5a80837d84f5", "patch": "@@ -339,7 +339,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     // different values into a struct.\n     fn write_packed_immediates(\n         &mut self,\n-        place: &MPlaceTy<'tcx, Tag>,\n+        place: MPlaceTy<'tcx, Tag>,\n         imms: &[ImmTy<'tcx, Tag>],\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();"}, {"sha": "c772ee6b558dbfdbc71173da1727bbfadc37d15f", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e7f5c4f15503633c83f260e06ced5a80837d84f5/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f5c4f15503633c83f260e06ced5a80837d84f5/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=e7f5c4f15503633c83f260e06ced5a80837d84f5", "patch": "@@ -509,6 +509,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"fstat$INODE64\" => {\n+                let result = this.fstat(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"clock_gettime\" => {\n                 let result = this.clock_gettime(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;"}, {"sha": "2871dcbdcb8f1b5bd73b60224667ea084d46db3e", "filename": "src/shims/fs.rs", "status": "modified", "additions": 132, "deletions": 66, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/e7f5c4f15503633c83f260e06ced5a80837d84f5/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f5c4f15503633c83f260e06ced5a80837d84f5/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=e7f5c4f15503633c83f260e06ced5a80837d84f5", "patch": "@@ -328,6 +328,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.stat_or_lstat(false, path_op, buf_op)\n     }\n \n+    fn fstat(\n+        &mut self,\n+        fd_op: OpTy<'tcx, Tag>,\n+        buf_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"fstat\")?;\n+\n+        if this.tcx.sess.target.target.target_os.to_lowercase() != \"macos\" {\n+            throw_unsup_format!(\"The `fstat` shim is only available for `macos` targets.\")\n+        }\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+\n+        let metadata = match FileMetadata::from_fd(this, fd)? {\n+            Some(metadata) => metadata,\n+            None => return Ok(-1),\n+        };\n+        stat_macos_write_buf(this, metadata, buf_op)\n+    }\n+\n     fn stat_or_lstat(\n         &mut self,\n         follow_symlink: bool,\n@@ -343,66 +365,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let path_scalar = this.read_scalar(path_op)?.not_undef()?;\n         let path: PathBuf = this.read_os_str_from_c_str(path_scalar)?.into();\n \n-        let buf = this.deref_operand(buf_op)?;\n-\n-        let metadata = match FileMetadata::new(this, path, follow_symlink)? {\n+        let metadata = match FileMetadata::from_path(this, path, follow_symlink)? {\n             Some(metadata) => metadata,\n             None => return Ok(-1),\n         };\n-\n-        let mode: u16 = metadata.mode.to_u16()?;\n-\n-        let (access_sec, access_nsec) = metadata.accessed.unwrap_or((0, 0));\n-        let (created_sec, created_nsec) = metadata.created.unwrap_or((0, 0));\n-        let (modified_sec, modified_nsec) = metadata.modified.unwrap_or((0, 0));\n-\n-        let dev_t_layout = this.libc_ty_layout(\"dev_t\")?;\n-        let mode_t_layout = this.libc_ty_layout(\"mode_t\")?;\n-        let nlink_t_layout = this.libc_ty_layout(\"nlink_t\")?;\n-        let ino_t_layout = this.libc_ty_layout(\"ino_t\")?;\n-        let uid_t_layout = this.libc_ty_layout(\"uid_t\")?;\n-        let gid_t_layout = this.libc_ty_layout(\"gid_t\")?;\n-        let time_t_layout = this.libc_ty_layout(\"time_t\")?;\n-        let long_layout = this.libc_ty_layout(\"c_long\")?;\n-        let off_t_layout = this.libc_ty_layout(\"off_t\")?;\n-        let blkcnt_t_layout = this.libc_ty_layout(\"blkcnt_t\")?;\n-        let blksize_t_layout = this.libc_ty_layout(\"blksize_t\")?;\n-        let uint32_t_layout = this.libc_ty_layout(\"uint32_t\")?;\n-\n-        // We need to add 32 bits of padding after `st_rdev` if we are on a 64-bit platform.\n-        let pad_layout = if this.tcx.sess.target.ptr_width == 64 {\n-            uint32_t_layout\n-        } else {\n-            this.layout_of(this.tcx.mk_unit())?\n-        };\n-\n-        let imms = [\n-            immty_from_uint_checked(0u128, dev_t_layout)?, // st_dev\n-            immty_from_uint_checked(mode, mode_t_layout)?, // st_mode\n-            immty_from_uint_checked(0u128, nlink_t_layout)?, // st_nlink\n-            immty_from_uint_checked(0u128, ino_t_layout)?, // st_ino\n-            immty_from_uint_checked(0u128, uid_t_layout)?, // st_uid\n-            immty_from_uint_checked(0u128, gid_t_layout)?, // st_gid\n-            immty_from_uint_checked(0u128, dev_t_layout)?, // st_rdev\n-            immty_from_uint_checked(0u128, pad_layout)?, // padding for 64-bit targets\n-            immty_from_uint_checked(access_sec, time_t_layout)?, // st_atime\n-            immty_from_uint_checked(access_nsec, long_layout)?, // st_atime_nsec\n-            immty_from_uint_checked(modified_sec, time_t_layout)?, // st_mtime\n-            immty_from_uint_checked(modified_nsec, long_layout)?, // st_mtime_nsec\n-            immty_from_uint_checked(0u128, time_t_layout)?, // st_ctime\n-            immty_from_uint_checked(0u128, long_layout)?, // st_ctime_nsec\n-            immty_from_uint_checked(created_sec, time_t_layout)?, // st_birthtime\n-            immty_from_uint_checked(created_nsec, long_layout)?, // st_birthtime_nsec\n-            immty_from_uint_checked(metadata.size, off_t_layout)?, // st_size\n-            immty_from_uint_checked(0u128, blkcnt_t_layout)?, // st_blocks\n-            immty_from_uint_checked(0u128, blksize_t_layout)?, // st_blksize\n-            immty_from_uint_checked(0u128, uint32_t_layout)?, // st_flags\n-            immty_from_uint_checked(0u128, uint32_t_layout)?, // st_gen\n-        ];\n-\n-        this.write_packed_immediates(&buf, &imms)?;\n-\n-        Ok(0)\n+        stat_macos_write_buf(this, metadata, buf_op)\n     }\n \n     fn statx(\n@@ -454,18 +421,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             this.read_scalar(flags_op)?.to_machine_isize(&*this.tcx)?.try_into().map_err(|e| {\n                 err_unsup_format!(\"Failed to convert pointer sized operand to integer: {}\", e)\n             })?;\n+        let empty_path_flag = flags & this.eval_libc(\"AT_EMPTY_PATH\")?.to_i32()? != 0;\n         // `dirfd` should be a `c_int` but the `syscall` function provides an `isize`.\n         let dirfd: i32 =\n             this.read_scalar(dirfd_op)?.to_machine_isize(&*this.tcx)?.try_into().map_err(|e| {\n                 err_unsup_format!(\"Failed to convert pointer sized operand to integer: {}\", e)\n             })?;\n-        // we only support interpreting `path` as an absolute directory or as a directory relative\n-        // to `dirfd` when the latter is `AT_FDCWD`. The behavior of `statx` with a relative path\n-        // and a directory file descriptor other than `AT_FDCWD` is specified but it cannot be\n-        // tested from `libstd`. If you found this error, please open an issue reporting it.\n-        if !(path.is_absolute() || dirfd == this.eval_libc_i32(\"AT_FDCWD\")?) {\n+        // We only support:\n+        // * interpreting `path` as an absolute directory,\n+        // * interpreting `path` as a path relative to `dirfd` when the latter is `AT_FDCWD`, or\n+        // * interpreting `dirfd` as any file descriptor when `path` is empty and AT_EMPTY_PATH is\n+        // set.\n+        // Other behaviors cannot be tested from `libstd` and thus are not implemented. If you\n+        // found this error, please open an issue reporting it.\n+        if !(\n+            path.is_absolute() ||\n+            dirfd == this.eval_libc_i32(\"AT_FDCWD\")? ||\n+            (path.as_os_str().is_empty() && empty_path_flag)\n+        ) {\n             throw_unsup_format!(\n-                \"Using statx with a relative path and a file descriptor different from `AT_FDCWD` is not supported\"\n+                \"Using statx is only supported with absolute paths, relative paths with the file \\\n+                descriptor `AT_FDCWD`, and empty paths with the `AT_EMPTY_PATH` flag set and any \\\n+                file descriptor\"\n             )\n         }\n \n@@ -480,7 +457,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // symbolic links.\n         let follow_symlink = flags & this.eval_libc(\"AT_SYMLINK_NOFOLLOW\")?.to_i32()? == 0;\n \n-        let metadata = match FileMetadata::new(this, path, follow_symlink)? {\n+        // If the path is empty, and the AT_EMPTY_PATH flag is set, we query the open file\n+        // represented by dirfd, whether it's a directory or otherwise.\n+        let metadata = if path.as_os_str().is_empty() && empty_path_flag {\n+            FileMetadata::from_fd(this, dirfd)?\n+        } else {\n+            FileMetadata::from_path(this, path, follow_symlink)?\n+        };\n+        let metadata = match metadata {\n             Some(metadata) => metadata,\n             None => return Ok(-1),\n         };\n@@ -549,7 +533,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             immty_from_uint_checked(0u128, __u64_layout)?, // stx_dev_minor\n         ];\n \n-        this.write_packed_immediates(&statxbuf_place, &imms)?;\n+        this.write_packed_immediates(statxbuf_place, &imms)?;\n \n         Ok(0)\n     }\n@@ -589,7 +573,7 @@ struct FileMetadata {\n }\n \n impl FileMetadata {\n-    fn new<'tcx, 'mir>(\n+    fn from_path<'tcx, 'mir>(\n         ecx: &mut MiriEvalContext<'mir, 'tcx>,\n         path: PathBuf,\n         follow_symlink: bool\n@@ -600,6 +584,27 @@ impl FileMetadata {\n             std::fs::symlink_metadata(path)\n         };\n \n+        FileMetadata::from_meta(ecx, metadata)\n+    }\n+\n+    fn from_fd<'tcx, 'mir>(\n+        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        fd: i32,\n+    ) -> InterpResult<'tcx, Option<FileMetadata>> {\n+        let option = ecx.machine.file_handler.handles.get(&fd);\n+        let handle = match option {\n+            Some(handle) => handle,\n+            None => return ecx.handle_not_found().map(|_: i32| None),\n+        };\n+        let metadata = handle.file.metadata();\n+\n+        FileMetadata::from_meta(ecx, metadata)\n+    }\n+\n+    fn from_meta<'tcx, 'mir>(\n+        ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+        metadata: Result<std::fs::Metadata, std::io::Error>,\n+    ) -> InterpResult<'tcx, Option<FileMetadata>> {\n         let metadata = match metadata {\n             Ok(metadata) => metadata,\n             Err(e) => {\n@@ -630,3 +635,64 @@ impl FileMetadata {\n         Ok(Some(FileMetadata { mode, size, created, accessed, modified }))\n     }\n }\n+\n+fn stat_macos_write_buf<'tcx, 'mir>(\n+    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    metadata: FileMetadata,\n+    buf_op: OpTy<'tcx, Tag>,\n+) -> InterpResult<'tcx, i32> {\n+    let mode: u16 = metadata.mode.to_u16()?;\n+\n+    let (access_sec, access_nsec) = metadata.accessed.unwrap_or((0, 0));\n+    let (created_sec, created_nsec) = metadata.created.unwrap_or((0, 0));\n+    let (modified_sec, modified_nsec) = metadata.modified.unwrap_or((0, 0));\n+\n+    let dev_t_layout = ecx.libc_ty_layout(\"dev_t\")?;\n+    let mode_t_layout = ecx.libc_ty_layout(\"mode_t\")?;\n+    let nlink_t_layout = ecx.libc_ty_layout(\"nlink_t\")?;\n+    let ino_t_layout = ecx.libc_ty_layout(\"ino_t\")?;\n+    let uid_t_layout = ecx.libc_ty_layout(\"uid_t\")?;\n+    let gid_t_layout = ecx.libc_ty_layout(\"gid_t\")?;\n+    let time_t_layout = ecx.libc_ty_layout(\"time_t\")?;\n+    let long_layout = ecx.libc_ty_layout(\"c_long\")?;\n+    let off_t_layout = ecx.libc_ty_layout(\"off_t\")?;\n+    let blkcnt_t_layout = ecx.libc_ty_layout(\"blkcnt_t\")?;\n+    let blksize_t_layout = ecx.libc_ty_layout(\"blksize_t\")?;\n+    let uint32_t_layout = ecx.libc_ty_layout(\"uint32_t\")?;\n+\n+    // We need to add 32 bits of padding after `st_rdev` if we are on a 64-bit platform.\n+    let pad_layout = if ecx.tcx.sess.target.ptr_width == 64 {\n+        uint32_t_layout\n+    } else {\n+        ecx.layout_of(ecx.tcx.mk_unit())?\n+    };\n+\n+    let imms = [\n+        immty_from_uint_checked(0u128, dev_t_layout)?, // st_dev\n+        immty_from_uint_checked(mode, mode_t_layout)?, // st_mode\n+        immty_from_uint_checked(0u128, nlink_t_layout)?, // st_nlink\n+        immty_from_uint_checked(0u128, ino_t_layout)?, // st_ino\n+        immty_from_uint_checked(0u128, uid_t_layout)?, // st_uid\n+        immty_from_uint_checked(0u128, gid_t_layout)?, // st_gid\n+        immty_from_uint_checked(0u128, dev_t_layout)?, // st_rdev\n+        immty_from_uint_checked(0u128, pad_layout)?, // padding for 64-bit targets\n+        immty_from_uint_checked(access_sec, time_t_layout)?, // st_atime\n+        immty_from_uint_checked(access_nsec, long_layout)?, // st_atime_nsec\n+        immty_from_uint_checked(modified_sec, time_t_layout)?, // st_mtime\n+        immty_from_uint_checked(modified_nsec, long_layout)?, // st_mtime_nsec\n+        immty_from_uint_checked(0u128, time_t_layout)?, // st_ctime\n+        immty_from_uint_checked(0u128, long_layout)?, // st_ctime_nsec\n+        immty_from_uint_checked(created_sec, time_t_layout)?, // st_birthtime\n+        immty_from_uint_checked(created_nsec, long_layout)?, // st_birthtime_nsec\n+        immty_from_uint_checked(metadata.size, off_t_layout)?, // st_size\n+        immty_from_uint_checked(0u128, blkcnt_t_layout)?, // st_blocks\n+        immty_from_uint_checked(0u128, blksize_t_layout)?, // st_blksize\n+        immty_from_uint_checked(0u128, uint32_t_layout)?, // st_flags\n+        immty_from_uint_checked(0u128, uint32_t_layout)?, // st_gen\n+    ];\n+\n+    let buf = ecx.deref_operand(buf_op)?;\n+    ecx.write_packed_immediates(buf, &imms)?;\n+\n+    Ok(0)\n+}"}, {"sha": "6adea524d2d88992a1cd1d5a9d48bd3d60652334", "filename": "src/shims/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7f5c4f15503633c83f260e06ced5a80837d84f5/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f5c4f15503633c83f260e06ced5a80837d84f5/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=e7f5c4f15503633c83f260e06ced5a80837d84f5", "patch": "@@ -45,7 +45,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             immty_from_int_checked(tv_nsec, this.libc_ty_layout(\"c_long\")?)?,\n         ];\n \n-        this.write_packed_immediates(&tp, &imms)?;\n+        this.write_packed_immediates(tp, &imms)?;\n \n         Ok(0)\n     }\n@@ -77,7 +77,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             immty_from_int_checked(tv_usec, this.libc_ty_layout(\"suseconds_t\")?)?,\n         ];\n \n-        this.write_packed_immediates(&tv, &imms)?;\n+        this.write_packed_immediates(tv, &imms)?;\n \n         Ok(0)\n     }"}, {"sha": "cc8f6e01f323155e00dc2300c5a306fed45943a6", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7f5c4f15503633c83f260e06ced5a80837d84f5/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7f5c4f15503633c83f260e06ced5a80837d84f5/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=e7f5c4f15503633c83f260e06ced5a80837d84f5", "patch": "@@ -29,8 +29,10 @@ fn main() {\n     let mut file = File::create(&path).unwrap();\n     // Writing 0 bytes should not change the file contents.\n     file.write(&mut []).unwrap();\n+    assert_eq!(file.metadata().unwrap().len(), 0);\n \n     file.write(bytes).unwrap();\n+    assert_eq!(file.metadata().unwrap().len(), bytes.len() as u64);\n     // Test opening, reading and closing a file.\n     let mut file = File::open(&path).unwrap();\n     let mut contents = Vec::new();"}]}