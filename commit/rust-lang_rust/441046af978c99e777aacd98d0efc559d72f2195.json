{"sha": "441046af978c99e777aacd98d0efc559d72f2195", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MTA0NmFmOTc4Yzk5ZTc3N2FhY2Q5OGQwZWZjNTU5ZDcyZjIxOTU=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-09-19T08:31:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-19T08:31:35Z"}, "message": "Rollup merge of #89055 - Kobzol:wrapped-method-expr-call-parens, r=wesleywiser\n\nSuggest better place to add call parentheses for method expressions wrapped in parentheses\n\nI wanted to improve the suggestion a bit to both remove the wrapping parentheses **and** add call parentheses by both calling `suggest_method_call` and using `multipart_suggestion`. But I very quickly ran into a problem where multiple overlapping machine applicable suggestions cannot be properly applied together. So I applied the suggestion from the issue and only added the call parentheses directly after the expression.\n\nFixes: https://github.com/rust-lang/rust/issues/89044", "tree": {"sha": "4e6b13eadcf2df1ef1078ea1ba5468042a0dc0f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e6b13eadcf2df1ef1078ea1ba5468042a0dc0f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/441046af978c99e777aacd98d0efc559d72f2195", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhRvVnCRBK7hj4Ov3rIwAAQskIAB9pPY58414J9YPqNVBffBj4\n0tCdgCV5rkRa0+6vE5YdugZTC/HCnHxNIXTdkh5ZWmVZiwSqlzY1hNwT1hdrH49L\nECaHg856L9Fp9JBUADp82tm54l3DnbX7etUhkHqicc4PKTL6wcV7XA5Tueyn0rtZ\n+DPgWq5seuxIQDo4GRxFCkZ933wiYHuhH+0RgA2KbSu1DP4aT9R1V9aOIBJL/zLh\nEXTWOVdS9Dib0PkuZbqOQ/I1Pck26aY7+BbCYYCY6y9TUd/X8B9qAQw/FzsLGGgQ\n3X6zFSuq3F7pkMSFQ6ncyFRjYimW2hrebE9zX83wmdC9fsiUZ3YwMYIE+BA8vqc=\n=faLc\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e6b13eadcf2df1ef1078ea1ba5468042a0dc0f7\nparent e4dbe272351627380a9cdad78164d5e672c773fb\nparent 68147ebd603129c9f2c56bc47a5d2417a5df1777\nauthor Yuki Okushi <jtitor@2k36.org> 1632040295 +0900\ncommitter GitHub <noreply@github.com> 1632040295 +0900\n\nRollup merge of #89055 - Kobzol:wrapped-method-expr-call-parens, r=wesleywiser\n\nSuggest better place to add call parentheses for method expressions wrapped in parentheses\n\nI wanted to improve the suggestion a bit to both remove the wrapping parentheses **and** add call parentheses by both calling `suggest_method_call` and using `multipart_suggestion`. But I very quickly ran into a problem where multiple overlapping machine applicable suggestions cannot be properly applied together. So I applied the suggestion from the issue and only added the call parentheses directly after the expression.\n\nFixes: https://github.com/rust-lang/rust/issues/89044\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/441046af978c99e777aacd98d0efc559d72f2195", "html_url": "https://github.com/rust-lang/rust/commit/441046af978c99e777aacd98d0efc559d72f2195", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/441046af978c99e777aacd98d0efc559d72f2195/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4dbe272351627380a9cdad78164d5e672c773fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4dbe272351627380a9cdad78164d5e672c773fb", "html_url": "https://github.com/rust-lang/rust/commit/e4dbe272351627380a9cdad78164d5e672c773fb"}, {"sha": "68147ebd603129c9f2c56bc47a5d2417a5df1777", "url": "https://api.github.com/repos/rust-lang/rust/commits/68147ebd603129c9f2c56bc47a5d2417a5df1777", "html_url": "https://github.com/rust-lang/rust/commit/68147ebd603129c9f2c56bc47a5d2417a5df1777"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "11b6c93a115283c8af05c75db1252ee916d427e0", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/441046af978c99e777aacd98d0efc559d72f2195/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441046af978c99e777aacd98d0efc559d72f2195/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=441046af978c99e777aacd98d0efc559d72f2195", "patch": "@@ -1860,6 +1860,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 field,\n                 expr_t,\n                 expr,\n+                None,\n             );\n         }\n         err.emit();\n@@ -1886,9 +1887,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n         let expr_snippet =\n             self.tcx.sess.source_map().span_to_snippet(expr.span).unwrap_or(String::new());\n-        if expr_is_call && expr_snippet.starts_with(\"(\") && expr_snippet.ends_with(\")\") {\n-            let after_open = expr.span.lo() + rustc_span::BytePos(1);\n-            let before_close = expr.span.hi() - rustc_span::BytePos(1);\n+        let is_wrapped = expr_snippet.starts_with(\"(\") && expr_snippet.ends_with(\")\");\n+        let after_open = expr.span.lo() + rustc_span::BytePos(1);\n+        let before_close = expr.span.hi() - rustc_span::BytePos(1);\n+\n+        if expr_is_call && is_wrapped {\n             err.multipart_suggestion(\n                 \"remove wrapping parentheses to call the method\",\n                 vec![\n@@ -1898,12 +1901,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Applicability::MachineApplicable,\n             );\n         } else if !self.expr_in_place(expr.hir_id) {\n+            // Suggest call parentheses inside the wrapping parentheses\n+            let span = if is_wrapped {\n+                expr.span.with_lo(after_open).with_hi(before_close)\n+            } else {\n+                expr.span\n+            };\n             self.suggest_method_call(\n                 &mut err,\n                 \"use parentheses to call the method\",\n                 field,\n                 expr_t,\n                 expr,\n+                Some(span),\n             );\n         } else {\n             err.help(\"methods are immutable and cannot be assigned to\");"}, {"sha": "8e09aa97dcf345ea396f06fbbd7002576455d9a8", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/441046af978c99e777aacd98d0efc559d72f2195/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441046af978c99e777aacd98d0efc559d72f2195/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=441046af978c99e777aacd98d0efc559d72f2195", "patch": "@@ -141,6 +141,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         method_name: Ident,\n         self_ty: Ty<'tcx>,\n         call_expr: &hir::Expr<'_>,\n+        span: Option<Span>,\n     ) {\n         let params = self\n             .probe_for_name(\n@@ -159,7 +160,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .unwrap_or(0);\n \n         // Account for `foo.bar<T>`;\n-        let sugg_span = call_expr.span.shrink_to_hi();\n+        let sugg_span = span.unwrap_or_else(|| call_expr.span).shrink_to_hi();\n         let (suggestion, applicability) = (\n             format!(\"({})\", (0..params).map(|_| \"_\").collect::<Vec<_>>().join(\", \")),\n             if params > 0 { Applicability::HasPlaceholders } else { Applicability::MaybeIncorrect },"}, {"sha": "0a3086a345dda10f263f8071485174c34dd780e7", "filename": "src/test/ui/typeck/issue-89044-wrapped-expr-method.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/441046af978c99e777aacd98d0efc559d72f2195/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/441046af978c99e777aacd98d0efc559d72f2195/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.fixed?ref=441046af978c99e777aacd98d0efc559d72f2195", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+fn main() {\n+    let a = Some(42);\n+    println!(\n+        \"The value is {}.\",\n+        (a.unwrap()) //~ERROR [E0615]\n+    );\n+}"}, {"sha": "83617e035e9ef418559a4ee9742892624cd90187", "filename": "src/test/ui/typeck/issue-89044-wrapped-expr-method.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/441046af978c99e777aacd98d0efc559d72f2195/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441046af978c99e777aacd98d0efc559d72f2195/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.rs?ref=441046af978c99e777aacd98d0efc559d72f2195", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+fn main() {\n+    let a = Some(42);\n+    println!(\n+        \"The value is {}.\",\n+        (a.unwrap) //~ERROR [E0615]\n+    );\n+}"}, {"sha": "6fa0915dcaf9ae42f0009d8650e43f1ca47bdc93", "filename": "src/test/ui/typeck/issue-89044-wrapped-expr-method.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/441046af978c99e777aacd98d0efc559d72f2195/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/441046af978c99e777aacd98d0efc559d72f2195/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-89044-wrapped-expr-method.stderr?ref=441046af978c99e777aacd98d0efc559d72f2195", "patch": "@@ -0,0 +1,14 @@\n+error[E0615]: attempted to take value of method `unwrap` on type `Option<{integer}>`\n+  --> $DIR/issue-89044-wrapped-expr-method.rs:7:12\n+   |\n+LL |         (a.unwrap)\n+   |            ^^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |         (a.unwrap())\n+   |                  ++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0615`."}]}