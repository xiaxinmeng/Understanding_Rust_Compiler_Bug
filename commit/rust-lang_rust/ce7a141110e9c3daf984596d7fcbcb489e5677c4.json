{"sha": "ce7a141110e9c3daf984596d7fcbcb489e5677c4", "node_id": "C_kwDOAAsO6NoAKGNlN2ExNDExMTBlOWMzZGFmOTg0NTk2ZDdmY2JjYjQ4OWU1Njc3YzQ", "commit": {"author": {"name": "Andrew Leverette", "email": "andrewleverette@gmail.com", "date": "2021-11-23T16:57:29Z"}, "committer": {"name": "Andrew Leverette", "email": "andrewleverette@gmail.com", "date": "2021-11-23T16:57:29Z"}, "message": "Add support for qualified struct names", "tree": {"sha": "5676e2c7f98d53a1fe471c97f16a225f37e2a64d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5676e2c7f98d53a1fe471c97f16a225f37e2a64d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce7a141110e9c3daf984596d7fcbcb489e5677c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7a141110e9c3daf984596d7fcbcb489e5677c4", "html_url": "https://github.com/rust-lang/rust/commit/ce7a141110e9c3daf984596d7fcbcb489e5677c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce7a141110e9c3daf984596d7fcbcb489e5677c4/comments", "author": {"login": "andrewleverette", "id": 18223816, "node_id": "MDQ6VXNlcjE4MjIzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/18223816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewleverette", "html_url": "https://github.com/andrewleverette", "followers_url": "https://api.github.com/users/andrewleverette/followers", "following_url": "https://api.github.com/users/andrewleverette/following{/other_user}", "gists_url": "https://api.github.com/users/andrewleverette/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewleverette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewleverette/subscriptions", "organizations_url": "https://api.github.com/users/andrewleverette/orgs", "repos_url": "https://api.github.com/users/andrewleverette/repos", "events_url": "https://api.github.com/users/andrewleverette/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewleverette/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andrewleverette", "id": 18223816, "node_id": "MDQ6VXNlcjE4MjIzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/18223816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andrewleverette", "html_url": "https://github.com/andrewleverette", "followers_url": "https://api.github.com/users/andrewleverette/followers", "following_url": "https://api.github.com/users/andrewleverette/following{/other_user}", "gists_url": "https://api.github.com/users/andrewleverette/gists{/gist_id}", "starred_url": "https://api.github.com/users/andrewleverette/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andrewleverette/subscriptions", "organizations_url": "https://api.github.com/users/andrewleverette/orgs", "repos_url": "https://api.github.com/users/andrewleverette/repos", "events_url": "https://api.github.com/users/andrewleverette/events{/privacy}", "received_events_url": "https://api.github.com/users/andrewleverette/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "054873ce15ea7ba0e21b6508abe97fd0cb54ec8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/054873ce15ea7ba0e21b6508abe97fd0cb54ec8c", "html_url": "https://github.com/rust-lang/rust/commit/054873ce15ea7ba0e21b6508abe97fd0cb54ec8c"}], "stats": {"total": 54, "additions": 49, "deletions": 5}, "files": [{"sha": "8474ebec0d9c51ea5b3250a4ee7aa015390a952f", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce7a141110e9c3daf984596d7fcbcb489e5677c4/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7a141110e9c3daf984596d7fcbcb489e5677c4/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=ce7a141110e9c3daf984596d7fcbcb489e5677c4", "patch": "@@ -191,9 +191,10 @@ impl Completions {\n         &mut self,\n         ctx: &CompletionContext,\n         strukt: hir::Struct,\n+        path: Option<hir::ModPath>,\n         local_name: Option<hir::Name>,\n     ) {\n-        let item = render_struct_literal(RenderContext::new(ctx), strukt, local_name);\n+        let item = render_struct_literal(RenderContext::new(ctx), strukt, path, local_name);\n         self.add_opt(item);\n     }\n "}, {"sha": "d50f889ee47ad96b36f67ee9d8f7f18a9cbc4a6a", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ce7a141110e9c3daf984596d7fcbcb489e5677c4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7a141110e9c3daf984596d7fcbcb489e5677c4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=ce7a141110e9c3daf984596d7fcbcb489e5677c4", "patch": "@@ -59,7 +59,12 @@ pub(crate) fn complete_record_literal(\n     }\n \n     if let hir::Adt::Struct(strukt) = ctx.expected_type.as_ref()?.as_adt()? {\n-        acc.add_struct_literal(ctx, strukt, None);\n+        let module =\n+            if let Some(module) = ctx.scope.module() { module } else { strukt.module(ctx.db) };\n+\n+        let path = module.find_use_path(ctx.db, hir::ModuleDef::from(strukt));\n+\n+        acc.add_struct_literal(ctx, strukt, path, None);\n     }\n \n     Some(())\n@@ -94,6 +99,35 @@ fn baz() {\n         )\n     }\n \n+    #[test]\n+    fn literal_struct_completion_from_sub_modules() {\n+        check_edit(\n+            \"Struct {\u2026}\",\n+            r#\"\n+mod submod {\n+    pub struct Struct {\n+        pub a: u64,\n+    }\n+}\n+\n+fn f() -> submod::Struct {\n+    Stru$0\n+}\n+            \"#,\n+            r#\"\n+mod submod {\n+    pub struct Struct {\n+        pub a: u64,\n+    }\n+}\n+\n+fn f() -> submod::Struct {\n+    submod::Struct { a: ${1:()} }$0\n+}\n+            \"#,\n+        )\n+    }\n+\n     #[test]\n     fn literal_struct_complexion_module() {\n         check_edit("}, {"sha": "581b4a84ceb8a2aa17747a2b852704a42e695ded", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ce7a141110e9c3daf984596d7fcbcb489e5677c4/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce7a141110e9c3daf984596d7fcbcb489e5677c4/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=ce7a141110e9c3daf984596d7fcbcb489e5677c4", "patch": "@@ -10,6 +10,7 @@ use crate::{render::RenderContext, CompletionItem, CompletionItemKind};\n pub(crate) fn render_struct_literal(\n     ctx: RenderContext<'_>,\n     strukt: hir::Struct,\n+    path: Option<hir::ModPath>,\n     local_name: Option<Name>,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_struct_literal\");\n@@ -23,7 +24,8 @@ pub(crate) fn render_struct_literal(\n     }\n \n     let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_smol_str();\n-    let literal = render_literal(&ctx, &name, strukt.kind(ctx.db()), &visible_fields)?;\n+\n+    let literal = render_literal(&ctx, path, &name, strukt.kind(ctx.db()), &visible_fields)?;\n \n     Some(build_completion(ctx, name, literal, strukt))\n }\n@@ -49,13 +51,20 @@ fn build_completion(\n \n fn render_literal(\n     ctx: &RenderContext<'_>,\n+    path: Option<hir::ModPath>,\n     name: &str,\n     kind: StructKind,\n     fields: &[hir::Field],\n ) -> Option<String> {\n+    let qualified_name = if let Some(path) = path { path.to_string() } else { name.to_string() };\n+\n     let mut literal = match kind {\n-        StructKind::Tuple if ctx.snippet_cap().is_some() => render_tuple_as_literal(fields, name),\n-        StructKind::Record => render_record_as_literal(ctx.db(), ctx.snippet_cap(), fields, name),\n+        StructKind::Tuple if ctx.snippet_cap().is_some() => {\n+            render_tuple_as_literal(fields, &qualified_name)\n+        }\n+        StructKind::Record => {\n+            render_record_as_literal(ctx.db(), ctx.snippet_cap(), fields, &qualified_name)\n+        }\n         _ => return None,\n     };\n "}]}