{"sha": "9b5896ade3ae279a2d91773b3ae0b097657b8b6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNTg5NmFkZTNhZTI3OWEyZDkxNzczYjNhZTBiMDk3NjU3YjhiNmU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-11T20:04:04Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-25T08:07:01Z"}, "message": "Render const byte slices in MIR", "tree": {"sha": "389822e164cc2923af120be2ec6b40346b3158c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/389822e164cc2923af120be2ec6b40346b3158c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b5896ade3ae279a2d91773b3ae0b097657b8b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5896ade3ae279a2d91773b3ae0b097657b8b6e", "html_url": "https://github.com/rust-lang/rust/commit/9b5896ade3ae279a2d91773b3ae0b097657b8b6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b5896ade3ae279a2d91773b3ae0b097657b8b6e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa17654f7966109d87a5d1741acb7a60732de030", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa17654f7966109d87a5d1741acb7a60732de030", "html_url": "https://github.com/rust-lang/rust/commit/fa17654f7966109d87a5d1741acb7a60732de030"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "10038603f3013e8c3eedf05d6b6a0b41dd31c2e8", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9b5896ade3ae279a2d91773b3ae0b097657b8b6e/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5896ade3ae279a2d91773b3ae0b097657b8b6e/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=9b5896ade3ae279a2d91773b3ae0b097657b8b6e", "patch": "@@ -6,6 +6,7 @@ use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n use crate::middle::region;\n use crate::ty::{self, DefIdTree, ParamConst, Ty, TyCtxt, TypeFoldable};\n use crate::ty::subst::{Kind, Subst, UnpackedKind};\n+use crate::ty::layout::Size;\n use crate::mir::interpret::{ConstValue, sign_extend, Scalar};\n use syntax::ast;\n use rustc_apfloat::ieee::{Double, Single};\n@@ -1537,6 +1538,7 @@ define_print_and_forward_display! {\n     }\n \n     &'tcx ty::Const<'tcx> {\n+        let u8 = cx.tcx().types.u8;\n         match (self.val, &self.ty.sty) {\n             | (ConstValue::Unevaluated(..), _)\n             | (ConstValue::Infer(..), _)\n@@ -1566,28 +1568,38 @@ define_print_and_forward_display! {\n             (ConstValue::Scalar(Scalar::Bits { bits, ..}), ty::Char)\n                 => p!(write(\"{:?}\", ::std::char::from_u32(bits as u32).unwrap())),\n             (_, ty::FnDef(did, _)) => p!(write(\"{}\", cx.tcx().def_path_str(*did))),\n-            (\n-                ConstValue::Slice { data, start, end },\n-                ty::Ref(_, slice_ty, _),\n-            ) => {\n-                let slice = &data.bytes[start..end];\n-                match slice_ty.sty {\n-                    ty::Str => {\n-                        let s = ::std::str::from_utf8(slice)\n-                            .expect(\"non utf8 str from miri\");\n-                        p!(write(\"{:?}\", s))\n-                    },\n-                    ty::Slice(elem) if elem == cx.tcx().types.u8 => {\n-                        p!(write(\"b\\\"\"));\n-                        for &c in slice {\n-                            for e in std::ascii::escape_default(c) {\n-                                p!(write(\"{}\", e));\n-                            }\n+            (_, ty::Ref(_, ref_ty, _)) => match (self.val, &ref_ty.sty) {\n+                (ConstValue::Scalar(Scalar::Ptr(ptr)), ty::Array(t, n)) if *t == u8 => {\n+                    let n = n.unwrap_usize(cx.tcx());\n+                    let slice = cx.tcx()\n+                        .alloc_map.lock()\n+                        .unwrap_memory(ptr.alloc_id)\n+                        .get_bytes(&cx.tcx(), ptr, Size::from_bytes(n)).unwrap();\n+                    p!(write(\"b\\\"\"));\n+                    for &c in slice {\n+                        for e in std::ascii::escape_default(c) {\n+                            p!(write(\"{}\", e));\n                         }\n-                        p!(write(\"\\\"\"));\n-                    },\n-                    _ => bug!(\"invalid slice: {:#?}\", self),\n-                }\n+                    }\n+                    p!(write(\"\\\"\"));\n+                },\n+                (ConstValue::Slice { data, start, end }, ty::Str) => {\n+                    let slice = &data.bytes[start..end];\n+                    let s = ::std::str::from_utf8(slice)\n+                        .expect(\"non utf8 str from miri\");\n+                    p!(write(\"{:?}\", s))\n+                },\n+                (ConstValue::Slice { data, start, end }, ty::Slice(t)) if *t == u8 => {\n+                    let slice = &data.bytes[start..end];\n+                    p!(write(\"b\\\"\"));\n+                    for &c in slice {\n+                        for e in std::ascii::escape_default(c) {\n+                            p!(write(\"{}\", e));\n+                        }\n+                    }\n+                    p!(write(\"\\\"\"));\n+                },\n+                _ => p!(write(\"{:?} : \", self.val), print(self.ty)),\n             },\n             _ => p!(write(\"{:?} : \", self.val), print(self.ty)),\n         }"}, {"sha": "23faf7e16a7ed5ef971d7695c3bb81f8c7daba8c", "filename": "src/test/mir-opt/byte_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b5896ade3ae279a2d91773b3ae0b097657b8b6e/src%2Ftest%2Fmir-opt%2Fbyte_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b5896ade3ae279a2d91773b3ae0b097657b8b6e/src%2Ftest%2Fmir-opt%2Fbyte_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice.rs?ref=9b5896ade3ae279a2d91773b3ae0b097657b8b6e", "patch": "@@ -8,7 +8,7 @@ fn main() {\n // END RUST SOURCE\n // START rustc.main.EraseRegions.after.mir\n // ...\n-// _1 = const Scalar(Ptr(Pointer { alloc_id: AllocId(0), offset: Size { raw: 0 }, tag: () })) : &[u8; 3];\n+// _1 = const b\"102111111\";\n // ...\n // _2 = [const 5u8, const 120u8];\n // ..."}]}