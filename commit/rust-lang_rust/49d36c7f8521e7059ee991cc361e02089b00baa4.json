{"sha": "49d36c7f8521e7059ee991cc361e02089b00baa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZDM2YzdmODUyMWU3MDU5ZWU5OTFjYzM2MWUwMjA4OWIwMGJhYTQ=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-22T14:19:43Z"}, "committer": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-31T02:45:17Z"}, "message": "Trying to remove wrappers from float", "tree": {"sha": "ad51859374605e388d1a97210348787a4ca29596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad51859374605e388d1a97210348787a4ca29596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49d36c7f8521e7059ee991cc361e02089b00baa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49d36c7f8521e7059ee991cc361e02089b00baa4", "html_url": "https://github.com/rust-lang/rust/commit/49d36c7f8521e7059ee991cc361e02089b00baa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49d36c7f8521e7059ee991cc361e02089b00baa4/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c314a9cad157f3a9821ea08f4f88e791dfff06d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c314a9cad157f3a9821ea08f4f88e791dfff06d8", "html_url": "https://github.com/rust-lang/rust/commit/c314a9cad157f3a9821ea08f4f88e791dfff06d8"}], "stats": {"total": 460, "additions": 349, "deletions": 111}, "files": [{"sha": "adef88b7915128ee42f12d557f4d4c786ed013e3", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 96, "deletions": 94, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=49d36c7f8521e7059ee991cc361e02089b00baa4", "patch": "@@ -1,117 +1,119 @@\n import ctypes::c_int;\n+import ctypes::c_float;\n+import ctypes::c_double;\n+\n+// FIXME scalbn copysign\n \n #[link_name = \"m\"]\n #[abi = \"cdecl\"]\n-native mod f64 {\n+native mod c_double {\n \n     // Alpabetically sorted by link_name\n \n-    pure fn acos(n: f64) -> f64;\n-    pure fn asin(n: f64) -> f64;\n-    pure fn atan(n: f64) -> f64;\n-    pure fn atan2(a: f64, b: f64) -> f64;\n-    pure fn cbrt(n: f64) -> f64;\n-    pure fn ceil(n: f64) -> f64;\n-    pure fn cos(n: f64) -> f64;\n-    pure fn cosh(n: f64) -> f64;\n-    pure fn erf(n: f64) -> f64;\n-    pure fn erfc(n: f64) -> f64;\n-    pure fn exp(n: f64) -> f64;\n-    pure fn expm1(n: f64) -> f64;\n-    pure fn exp2(n: f64) -> f64;\n-    #[link_name=\"fabs\"] pure fn abs(n: f64) -> f64;\n-    #[link_name=\"fdim\"] pure fn sub_pos(a: f64, b: f64) -> f64;\n-    pure fn floor(n: f64) -> f64;\n-    #[link_name=\"fma\"] pure fn mul_add(a: f64, b: f64, c: f64) -> f64;\n-    #[link_name=\"fmax\"] pure fn max(a: f64, b: f64) -> f64;\n-    #[link_name=\"fmin\"] pure fn min(a: f64, b: f64) -> f64;\n-    pure fn nextafter(x: f64, y: f64) -> f64\n-    pure fn fmod(x: f64, y: f64) -> f64;\n-    pure fn frexp(n: f64, &value: c_int) -> f64;\n-    pure fn hypot(x: f64, y: f64) -> f64;\n-    pure fn ldexp(x: f64, n: c_int) -> f64;\n-    #[link_name=\"lgamma_r\"] pure fn lgamma(n: f64, sign: *c_int) -> f64;\n-    #[link_name=\"log\"] pure fn ln(n: f64) -> f64;\n-    pure fn logb(n: f64) -> f64;\n-    #[link_name=\"log1p\"] pure fn ln1p(n: f64) -> f64;\n-    pure fn log10(n: f64) -> f64;\n-    pure fn log2(n: f64) -> f64;\n-    pure fn ilogb(n: f64) -> c_int;\n-    pure fn modf(n: f64, iptr: *f64) -> f64;\n-    pure fn pow(n: f64, e: f64) -> f64;\n-    #[link_name=\"remainder\"] pure fn rem(a: f64, b: f64) -> f64;\n-    pure fn rint(n: f64) -> f64;\n-    pure fn round(n: f64) -> f64;\n-    pure fn sin(n: f64) -> f64;\n-    pure fn sinh(n: f64) -> f64;\n-    pure fn sqrt(n: f64) -> f64;\n-    pure fn tan(n: f64) -> f64;\n-    pure fn tanh(n: f64) -> f64;\n-    pure fn tgamma(n: f64) -> f64;\n-    pure fn trunc(n: f64) -> f64;\n+    pure fn acos(n: c_double) -> c_double;\n+    pure fn asin(n: c_double) -> c_double;\n+    pure fn atan(n: c_double) -> c_double;\n+    pure fn atan2(a: c_double, b: c_double) -> c_double;\n+    pure fn cbrt(n: c_double) -> c_double;\n+    pure fn ceil(n: c_double) -> c_double;\n+    pure fn cos(n: c_double) -> c_double;\n+    pure fn cosh(n: c_double) -> c_double;\n+    pure fn erf(n: c_double) -> c_double;\n+    pure fn erfc(n: c_double) -> c_double;\n+    pure fn exp(n: c_double) -> c_double;\n+    pure fn expm1(n: c_double) -> c_double;\n+    pure fn exp2(n: c_double) -> c_double;\n+    #[link_name=\"fabs\"] pure fn abs(n: c_double) -> c_double;\n+    #[link_name=\"fdim\"] pure fn sub_pos(a: c_double, b: c_double) -> c_double;\n+    pure fn floor(n: c_double) -> c_double;\n+    #[link_name=\"fma\"] pure fn mul_add(a: c_double, b: c_double, c: c_double) -> c_double;\n+    #[link_name=\"fmax\"] pure fn fmax(a: c_double, b: c_double) -> c_double;\n+    #[link_name=\"fmin\"] pure fn fmin(a: c_double, b: c_double) -> c_double;\n+    pure fn nextafter(x: c_double, y: c_double) -> c_double;\n+    #[link_name=\"fmod\"] pure fn rem(x: c_double, y: c_double) -> c_double;\n+    pure fn frexp(n: c_double, &value: c_int) -> c_double;\n+    pure fn hypot(x: c_double, y: c_double) -> c_double;\n+    pure fn ldexp(x: c_double, n: c_int) -> c_double;\n+    #[link_name=\"lgamma_r\"] pure fn lgamma(n: c_double, &sign: c_int) -> c_double;\n+    #[link_name=\"log\"] pure fn ln(n: c_double) -> c_double;\n+    pure fn logb(n: c_double) -> c_double;\n+    #[link_name=\"log1p\"] pure fn ln1p(n: c_double) -> c_double;\n+    pure fn log10(n: c_double) -> c_double;\n+    pure fn log2(n: c_double) -> c_double;\n+    pure fn ilogb(n: c_double) -> c_int;\n+    pure fn modf(n: c_double, &iptr: c_double) -> c_double;\n+    pure fn pow(n: c_double, e: c_double) -> c_double;\n+    pure fn rint(n: c_double) -> c_double;\n+    pure fn round(n: c_double) -> c_double;\n+    pure fn sin(n: c_double) -> c_double;\n+    pure fn sinh(n: c_double) -> c_double;\n+    pure fn sqrt(n: c_double) -> c_double;\n+    pure fn tan(n: c_double) -> c_double;\n+    pure fn tanh(n: c_double) -> c_double;\n+    pure fn tgamma(n: c_double) -> c_double;\n+    pure fn trunc(n: c_double) -> c_double;\n }\n \n #[link_name = \"m\"]\n #[abi = \"cdecl\"]\n-native mod f32 {\n+native mod c_float {\n \n     // Alpabetically sorted by link_name\n \n-    #[link_name=\"acosf\"] pure fn acos(n: f32) -> f32;\n-    #[link_name=\"asinf\"] pure fn asin(n: f32) -> f32;\n-    #[link_name=\"atanf\"] pure fn atan(n: f32) -> f32;\n-    #[link_name=\"atan2f\"] pure fn atan2(a: f32, b: f32) -> f32;\n-    #[link_name=\"cbrtf\"] pure fn cbrt(n: f32) -> f32;\n-    #[link_name=\"ceilf\"] pure fn ceil(n: f32) -> f32;\n-    #[link_name=\"cosf\"] pure fn cos(n: f32) -> f32;\n-    #[link_name=\"coshf\"] pure fn cosh(n: f32) -> f32;\n-    #[link_name=\"erff\"] pure fn erf(n: f32) -> f32;\n-    #[link_name=\"erfcf\"] pure fn erfc(n: f32) -> f32;\n-    #[link_name=\"expf\"] pure fn exp(n: f32) -> f32;\n-    #[link_name=\"expm1f\"]pure fn expm1(n: f32) -> f32;\n-    #[link_name=\"exp2f\"] pure fn exp2(n: f32) -> f32;\n-    #[link_name=\"fabsf\"] pure fn abs(n: f32) -> f32;\n-    #[link_name=\"fdimf\"] pure fn sub_pos(a: f32, b: f32) -> f32;\n-    #[link_name=\"floorf\"] pure fn floor(n: f32) -> f32;\n-    #[link_name=\"frexpf\"] pure fn frexp(n: f64, &value: c_int) -> f32;\n-    #[link_name=\"fmaf\"] pure fn mul_add(a: f32, b: f32, c: f32) -> f32;\n-    #[link_name=\"fmaxf\"] pure fn max(a: f32, b: f32) -> f32;\n-    #[link_name=\"fminf\"] pure fn min(a: f32, b: f32) -> f32;\n-    #[link_name=\"nextafterf\"] pure fn nextafter(x: f32, y: f32) -> f32\n-    #[link_name=\"fmodf\"] pure fn fmod(x: f32, y: f32) -> f32;\n-    #[link_name=\"hypotf\"] pure fn hypot(x: f32, y: f32) -> f32;\n-    #[link_name=\"ldexpf\"] pure fn ldexp(x: f32, n: c_int) -> f32;\n-    #[link_name=\"lgammaf_r\"] pure fn lgamma(n: f32, sign: *c_int) -> f32;\n-    #[link_name=\"logf\"] pure fn ln(n: f32) -> f32;\n-    #[link_name=\"logbf\"] pure fn logb(n: f32) -> f32;\n-    #[link_name=\"log1p\"] pure fn ln1p(n: f64) -> f64;\n-    #[link_name=\"log2f\"] pure fn log2(n: f32) -> f32;\n-    #[link_name=\"log10f\"] pure fn log10(n: f32) -> f32;\n-    #[link_name=\"ilogbf\"] pure fn ilogb(n: f32) -> c_int;\n-    #[link_name=\"modff\"] pure fn modf(n: f32, iptr: *f32) -> f32;\n-    #[link_name=\"powf\"] pure fn pow(n: f32, e: f32) -> f32;\n-    #[link_name=\"remainderf\"] pure fn rem(a: f32, b: f32) -> f32;\n-    #[link_name=\"rintf\"] pure fn rint(n: f32) -> f32;\n-    #[link_name=\"roundf\"] pure fn round(n: f32) -> f32;\n-    #[link_name=\"sinf\"] pure fn sin(n: f32) -> f32;\n-    #[link_name=\"sinhf\"] pure fn sinh(n: f32) -> f32;\n-    #[link_name=\"sqrtf\"] pure fn sqrt(n: f32) -> f32;\n-    #[link_name=\"tanf\"] pure fn tan(n: f32) -> f32;\n-    #[link_name=\"tanhf\"] pure fn tanh(n: f32) -> f32;\n-    #[link_name=\"tgammaf\"] pure fn tgamma(n: f32) -> f32;\n-    #[link_name=\"truncf\"] pure fn trunc(n: f32) -> f32;\n+    #[link_name=\"acosf\"] pure fn acos(n: c_float) -> c_float;\n+    #[link_name=\"asinf\"] pure fn asin(n: c_float) -> c_float;\n+    #[link_name=\"atanf\"] pure fn atan(n: c_float) -> c_float;\n+    #[link_name=\"atan2f\"] pure fn atan2(a: c_float, b: c_float) -> c_float;\n+    #[link_name=\"cbrtf\"] pure fn cbrt(n: c_float) -> c_float;\n+    #[link_name=\"ceilf\"] pure fn ceil(n: c_float) -> c_float;\n+    #[link_name=\"cosf\"] pure fn cos(n: c_float) -> c_float;\n+    #[link_name=\"coshf\"] pure fn cosh(n: c_float) -> c_float;\n+    #[link_name=\"erff\"] pure fn erf(n: c_float) -> c_float;\n+    #[link_name=\"erfcf\"] pure fn erfc(n: c_float) -> c_float;\n+    #[link_name=\"expf\"] pure fn exp(n: c_float) -> c_float;\n+    #[link_name=\"expm1f\"]pure fn expm1(n: c_float) -> c_float;\n+    #[link_name=\"exp2f\"] pure fn exp2(n: c_float) -> c_float;\n+    #[link_name=\"fabsf\"] pure fn abs(n: c_float) -> c_float;\n+    #[link_name=\"fdimf\"] pure fn sub_pos(a: c_float, b: c_float) -> c_float;\n+    #[link_name=\"floorf\"] pure fn floor(n: c_float) -> c_float;\n+    #[link_name=\"frexpf\"] pure fn frexp(n: c_double, &value: c_int) -> c_float;\n+    #[link_name=\"fmaf\"] pure fn mul_add(a: c_float, b: c_float, c: c_float) -> c_float;\n+    #[link_name=\"fmaxf\"] pure fn fmax(a: c_float, b: c_float) -> c_float;\n+    #[link_name=\"fminf\"] pure fn fmin(a: c_float, b: c_float) -> c_float;\n+    #[link_name=\"nextafterf\"] pure fn nextafter(x: c_float, y: c_float) -> c_float;\n+    #[link_name=\"fmodf\"] pure fn rem(x: c_float, y: c_float) -> c_float;\n+    #[link_name=\"hypotf\"] pure fn hypot(x: c_float, y: c_float) -> c_float;\n+    #[link_name=\"ldexpf\"] pure fn ldexp(x: c_float, n: c_int) -> c_float;\n+    #[link_name=\"lgammaf_r\"] pure fn lgamma(n: c_float, &sign: c_int) -> c_float;\n+    #[link_name=\"logf\"] pure fn ln(n: c_float) -> c_float;\n+    #[link_name=\"logbf\"] pure fn logb(n: c_float) -> c_float;\n+    #[link_name=\"log1p\"] pure fn ln1p(n: c_double) -> c_double;\n+    #[link_name=\"log2f\"] pure fn log2(n: c_float) -> c_float;\n+    #[link_name=\"log10f\"] pure fn log10(n: c_float) -> c_float;\n+    #[link_name=\"ilogbf\"] pure fn ilogb(n: c_float) -> c_int;\n+    #[link_name=\"modff\"] pure fn modf(n: c_float, &iptr: c_float) -> c_float;\n+    #[link_name=\"powf\"] pure fn pow(n: c_float, e: c_float) -> c_float;\n+    #[link_name=\"rintf\"] pure fn rint(n: c_float) -> c_float;\n+    #[link_name=\"roundf\"] pure fn round(n: c_float) -> c_float;\n+    #[link_name=\"sinf\"] pure fn sin(n: c_float) -> c_float;\n+    #[link_name=\"sinhf\"] pure fn sinh(n: c_float) -> c_float;\n+    #[link_name=\"sqrtf\"] pure fn sqrt(n: c_float) -> c_float;\n+    #[link_name=\"tanf\"] pure fn tan(n: c_float) -> c_float;\n+    #[link_name=\"tanhf\"] pure fn tanh(n: c_float) -> c_float;\n+    #[link_name=\"tgammaf\"] pure fn tgamma(n: c_float) -> c_float;\n+    #[link_name=\"truncf\"] pure fn trunc(n: c_float) -> c_float;\n }\n \n #[link_name = \"m\"]\n #[abi = \"cdecl\"]\n native mod bessel {\n-    pure fn j0(n: m_float) -> m_float;\n-    pure fn j1(n: m_float) -> m_float;\n-    pure fn jn(i: c_int, n: m_float) -> m_float;\n+    pure fn j0(n: c_double) -> c_double;\n+    pure fn j1(n: c_double) -> c_double;\n+    pure fn jn(i: c_int, n: c_double) -> c_double;\n \n-    pure fn y0(n: m_float) -> m_float;\n-    pure fn y1(n: m_float) -> m_float;\n-    pure fn yn(i: c_int, n: m_float) -> m_float;\n+    pure fn y0(n: c_double) -> c_double;\n+    pure fn y1(n: c_double) -> c_double;\n+    pure fn yn(i: c_int, n: c_double) -> c_double;\n }\n \n //"}, {"sha": "d26b183a2f38d2a7badf196bb345df36a6e646d0", "filename": "src/libcore/ctypes.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Flibcore%2Fctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Flibcore%2Fctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fctypes.rs?ref=49d36c7f8521e7059ee991cc361e02089b00baa4", "patch": "@@ -9,6 +9,8 @@ FIXME: Add a test that uses some native code to verify these sizes,\n which are not obviously correct for all potential platforms.\n */\n \n+// PORT adapt to architecture\n+\n /*\n Type: c_int\n \n@@ -72,6 +74,20 @@ when interoperating with C void pointers can help in documentation.\n */\n type void = int;\n \n+/*\n+Type: c_float\n+\n+A float value with the same size as a C `float`\n+*/\n+type c_float = f32;\n+\n+/*\n+Type: c_float\n+\n+A float value with the same size as a C `double`\n+*/\n+type c_double = f64;\n+\n /*\n Type: size_t\n \n@@ -115,4 +131,3 @@ An unsigned integer with the same size as a C enum\n */\n type enum = u32;\n \n-"}, {"sha": "7ff91aa9e6aa55fc24641187e58d8947e248185a", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 96, "deletions": 5, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=49d36c7f8521e7059ee991cc361e02089b00baa4", "patch": "@@ -8,17 +8,108 @@ This exposes the same operations as `math`, just for `f32` even though\n they do not show up in the docs right now!\n */\n \n-import cmath::f32::*;\n+export t;\n \n export\n-    acos, asin, atan, atan2, ceil, cos, cosh, exp, abs, floor, fmod,\n-    frexp, ldexp, ln, ln1p, log10, log2, modf, rint, round, pow, sin,\n-    sinh, sqrt, tan, tanh, trunc, t;\n+    acos,\n+    asin,\n+    atan,\n+    atan2,\n+    cbrt,\n+    ceil,\n+    cos,\n+    cosh,\n+    erf,\n+    erfc,\n+    exp,\n+    expm1,\n+    exp2,\n+    abs,\n+    sub_pos,\n+    floor,\n+    mul_add,\n+    fmax,\n+    fmin,\n+    nextafter,\n+    frexp,\n+    hypot,\n+    ldexp,\n+    lgamma,\n+    ln,\n+    logb,\n+    ln1p,\n+    log10,\n+    log2,\n+    ilogb,\n+    modf,\n+    pow,\n+    rem,\n+    rint,\n+    round,\n+    sin,\n+    sinh,\n+    sqrt,\n+    tan,\n+    tanh,\n+    tgamma,\n+    trunc;\n+\n+export consts;\n \n export radix, mantissa_digits, digits, epsilon, min_value, max_value,\n        min_exp, max_exp, min_10_exp, max_10_exp;\n \n-export consts;\n+// PORT\n+\n+import cops = cmath::c_float;\n+\n+type t = f64;\n+\n+import\n+    cops::acos,\n+    cops::asin,\n+    cops::atan,\n+    cops::atan2,\n+    cops::cbrt,\n+    cops::ceil,\n+    cops::cos,\n+    cops::cosh,\n+    cops::erf,\n+    cops::erfc,\n+    cops::exp,\n+    cops::expm1,\n+    cops::exp2,\n+    cops::abs,\n+    cops::sub_pos,\n+    cops::floor,\n+    cops::mul_add,\n+    cops::max,\n+    cops::min,\n+    cops::nextafter,\n+    cops::fmod,\n+    cops::frexp,\n+    cops::hypot,\n+    cops::ldexp,\n+    cops::lgamma,\n+    cops::ln,\n+    cops::logb,\n+    cops::ln1p,\n+    cops::log10,\n+    cops::log2,\n+    cops::ilogb,\n+    cops::modf,\n+    cops::pow,\n+    cops::rem,\n+    cops::rint,\n+    cops::round,\n+    cops::sin,\n+    cops::sinh,\n+    cops::sqrt,\n+    cops::tan,\n+    cops::tanh,\n+    cops::tgamma,\n+    cops::trunc;\n+\n \n type t = f32;\n "}, {"sha": "6f27a2c42d10a8f1c530ed193adbc2b1a9f9076d", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 93, "deletions": 5, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=49d36c7f8521e7059ee991cc361e02089b00baa4", "patch": "@@ -8,20 +8,108 @@ This exposes the same operations as `math`, just for `f64` even though\n they do not show up in the docs right now!\n */\n \n-import cmath::f64::*;\n+export t;\n \n export\n-    acos, asin, atan, atan2, ceil, cos, cosh, exp, abs, floor, fmod,\n-    frexp, ldexp, ln, ln1p, log10, log2, modf, rint, round, pow, sin,\n-    sinh, sqrt, tan, tanh, trunc, t;\n+    acos,\n+    asin,\n+    atan,\n+    atan2,\n+    cbrt,\n+    ceil,\n+    cos,\n+    cosh,\n+    erf,\n+    erfc,\n+    exp,\n+    expm1,\n+    exp2,\n+    abs,\n+    sub_pos,\n+    floor,\n+    mul_add,\n+    fmax,\n+    fmin,\n+    nextafter,\n+    frexp,\n+    hypot,\n+    ldexp,\n+    lgamma,\n+    ln,\n+    logb,\n+    ln1p,\n+    log10,\n+    log2,\n+    ilogb,\n+    modf,\n+    pow,\n+    rem,\n+    rint,\n+    round,\n+    sin,\n+    sinh,\n+    sqrt,\n+    tan,\n+    tanh,\n+    tgamma,\n+    trunc;\n+\n+export consts;\n \n export radix, mantissa_digits, digits, epsilon, min_value, max_value,\n        min_exp, max_exp, min_10_exp, max_10_exp;\n \n-export consts;\n+// PORT\n+\n+import cops = cmath::c_double;\n \n type t = f64;\n \n+import\n+    cops::acos,\n+    cops::asin,\n+    cops::atan,\n+    cops::atan2,\n+    cops::cbrt,\n+    cops::ceil,\n+    cops::cos,\n+    cops::cosh,\n+    cops::erf,\n+    cops::erfc,\n+    cops::exp,\n+    cops::expm1,\n+    cops::exp2,\n+    cops::abs,\n+    cops::sub_pos,\n+    cops::floor,\n+    cops::mul_add,\n+    cops::max,\n+    cops::min,\n+    cops::nextafter,\n+    cops::fmod,\n+    cops::frexp,\n+    cops::hypot,\n+    cops::ldexp,\n+    cops::lgamma,\n+    cops::ln,\n+    cops::logb,\n+    cops::ln1p,\n+    cops::log10,\n+    cops::log2,\n+    cops::ilogb,\n+    cops::modf,\n+    cops::pow,\n+    cops::rem,\n+    cops::rint,\n+    cops::round,\n+    cops::sin,\n+    cops::sinh,\n+    cops::sqrt,\n+    cops::tan,\n+    cops::tanh,\n+    cops::tgamma,\n+    cops::trunc;\n+\n /* Module: consts */\n mod consts {\n "}, {"sha": "83ba43ad132da5762dd932145f462b02b9aeb2ce", "filename": "src/libcore/float.rs", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=49d36c7f8521e7059ee991cc361e02089b00baa4", "patch": "@@ -10,9 +10,51 @@ export t;\n export consts;\n \n export\n-    acos, asin, atan, atan2, ceil, cos, cosh, exp, abs, floor, fmod, frexp,\n-    ldexp, ln, ln1p, log10, log2, modf, rint, round, pow, sin, sinh, sqrt,\n-    tan, tanh, trunc;\n+    acos,\n+    asin,\n+    atan,\n+    atan2,\n+    cbrt,\n+    ceil,\n+    cos,\n+    cosh,\n+    erf,\n+    erfc,\n+    exp,\n+    expm1,\n+    exp2,\n+    abs,\n+    sub_pos,\n+    floor,\n+    mul_add,\n+    max,\n+    min,\n+    nextafter,\n+    rem,\n+    frexp,\n+    hypot,\n+    ldexp,\n+    lgamma,\n+    ln,\n+    logb,\n+    ln1p,\n+    log10,\n+    log2,\n+    ilogb,\n+    modf,\n+    pow,\n+    rint,\n+    round,\n+    sin,\n+    sinh,\n+    sqrt,\n+    tan,\n+    tanh,\n+    tgamma,\n+    trunc;\n+\n+export radix, mantissa_digits, digits, epsilon, min_value, max_value,\n+       min_exp, max_exp, min_10_exp, max_10_exp;\n \n export to_str_common, to_str_exact, to_str, from_str;\n export lt, le, eq, ne, gt, eq;\n@@ -27,9 +69,9 @@ import ctypes::c_int;\n import ptr;\n \n // PORT This must match in width according to architecture\n+\n import f64;\n import m_float = f64;\n-\n type t = m_float;\n \n /**"}, {"sha": "4bda1eaae22c4ebbfb8f738c91f623f5dfa27218", "filename": "src/libcore/mtypes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Flibcore%2Fmtypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Flibcore%2Fmtypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmtypes.rs?ref=49d36c7f8521e7059ee991cc361e02089b00baa4", "patch": "@@ -41,11 +41,11 @@ Machine type equivalent of a float\n */\n type m_float = f64;\n \n-// PORT  *must* match \"import m_complex = ...\" in std::complex per arch\n-\n /*\n FIXME Type m_complex\n \n+// PORT  *must* match \"import m_complex = ...\" in core::complex per arch\n+\n Machine type representing a complex value that uses floats for\n both the real and the imaginary part.\n */"}, {"sha": "cae50987190dbdafecccd9d10ad52edd240d84f0", "filename": "src/test/run-pass/invoke-external-native", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Ftest%2Frun-pass%2Finvoke-external-native", "raw_url": "https://github.com/rust-lang/rust/raw/49d36c7f8521e7059ee991cc361e02089b00baa4/src%2Ftest%2Frun-pass%2Finvoke-external-native", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finvoke-external-native?ref=49d36c7f8521e7059ee991cc361e02089b00baa4"}]}