{"sha": "63576c23e41092ae16c57e15977bf10e72327799", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNTc2YzIzZTQxMDkyYWUxNmM1N2UxNTk3N2JmMTBlNzIzMjc3OTk=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-05T14:30:32Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-05T14:30:34Z"}, "message": "remove excess string allocation\n\n&format!(\"...\") is the same as \"\" if we're not doing any interpolation,\nand doesn't allocate an intermediate String.", "tree": {"sha": "2fb9960c65b2d703592121d069b8bb3fcc2fbb9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fb9960c65b2d703592121d069b8bb3fcc2fbb9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63576c23e41092ae16c57e15977bf10e72327799", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63576c23e41092ae16c57e15977bf10e72327799", "html_url": "https://github.com/rust-lang/rust/commit/63576c23e41092ae16c57e15977bf10e72327799", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63576c23e41092ae16c57e15977bf10e72327799/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a216e847272ddbd3033037b606eaf2d801c250b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a216e847272ddbd3033037b606eaf2d801c250b9", "html_url": "https://github.com/rust-lang/rust/commit/a216e847272ddbd3033037b606eaf2d801c250b9"}], "stats": {"total": 61, "additions": 26, "deletions": 35}, "files": [{"sha": "a3eeb12da0114bfaa8efa0dee8d70bbfe56febae", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -225,7 +225,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n             {\n                 self.tcx.sess.span_err(\n                     expr.span,\n-                    &format!(\"const fns are an unstable feature\"));\n+                    \"const fns are an unstable feature\");\n                 fileline_help!(\n                     self.tcx.sess,\n                     expr.span,"}, {"sha": "c461057c6cd8d43eca2d1f2c5603d89bf1036a5c", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -1213,7 +1213,7 @@ fn resolve_trait_associated_const<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n         _ => {\n             tcx.sess.span_bug(\n                 ti.span,\n-                &format!(\"resolve_trait_associated_const: unexpected vtable type\"))\n+                \"resolve_trait_associated_const: unexpected vtable type\")\n         }\n     }\n }"}, {"sha": "a16ef808bb6d3d0569befbce18a14ae0c932339d", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -1751,7 +1751,7 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n             infer::ParameterInScope(_, span) => {\n                 self.tcx.sess.span_note(\n                     span,\n-                    &format!(\"...so that a type/lifetime parameter is in scope here\"));\n+                    \"...so that a type/lifetime parameter is in scope here\");\n             }\n             infer::DataBorrowed(ty, span) => {\n                 self.tcx.sess.span_note("}, {"sha": "684e60304eb4d1b5c2da09aea2ff3622acbcc016", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -1130,7 +1130,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         match self.tables.borrow().node_types.get(&ex.id) {\n             Some(&t) => t,\n             None => {\n-                self.tcx.sess.bug(&format!(\"no type for expr in fcx\"));\n+                self.tcx.sess.bug(\"no type for expr in fcx\");\n             }\n         }\n     }"}, {"sha": "0931c138e46f4107058e6df7ab788fac5045150f", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -498,7 +498,7 @@ fn note_obligation_cause_code<'a, 'tcx, T>(infcx: &InferCtxt<'a, 'tcx>,\n         ObligationCauseCode::SliceOrArrayElem => {\n             tcx.sess.fileline_note(\n                 cause_span,\n-                &format!(\"slice and array elements must have `Sized` type\"));\n+                \"slice and array elements must have `Sized` type\");\n         }\n         ObligationCauseCode::ProjectionWf(data) => {\n             tcx.sess.fileline_note("}, {"sha": "d9033eaa29f6b8ab3d132f3f79e894e15c28bd7c", "filename": "src/librustc/middle/ty/error.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc%2Fmiddle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc%2Fmiddle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Ferror.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -288,10 +288,9 @@ impl<'tcx> ty::ctxt<'tcx> {\n                 let found_str = values.found.sort_string(self);\n                 if expected_str == found_str && expected_str == \"closure\" {\n                     self.sess.span_note(sp,\n-                        &format!(\"no two closures, even if identical, have the same type\"));\n+                        \"no two closures, even if identical, have the same type\");\n                     self.sess.span_help(sp,\n-                        &format!(\"consider boxing your closure and/or \\\n-                                  using it as a trait object\"));\n+                        \"consider boxing your closure and/or using it as a trait object\");\n                 }\n             },\n             TyParamDefaultMismatch(values) => {\n@@ -307,8 +306,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n                             .and_then(|node_id| self.map.opt_span(node_id))\n                 {\n                     Some(span) => {\n-                        self.sess.span_note(span,\n-                                            &format!(\"a default was defined here...\"));\n+                        self.sess.span_note(span, \"a default was defined here...\");\n                     }\n                     None => {\n                         self.sess.note(\n@@ -319,15 +317,14 @@ impl<'tcx> ty::ctxt<'tcx> {\n \n                 self.sess.span_note(\n                     expected.origin_span,\n-                    &format!(\"...that was applied to an unconstrained type variable here\"));\n+                    \"...that was applied to an unconstrained type variable here\");\n \n                 match\n                     self.map.as_local_node_id(found.def_id)\n                             .and_then(|node_id| self.map.opt_span(node_id))\n                 {\n                     Some(span) => {\n-                        self.sess.span_note(span,\n-                                            &format!(\"a second default was defined here...\"));\n+                        self.sess.span_note(span, \"a second default was defined here...\");\n                     }\n                     None => {\n                         self.sess.note(\n@@ -338,7 +335,7 @@ impl<'tcx> ty::ctxt<'tcx> {\n \n                 self.sess.span_note(\n                     found.origin_span,\n-                    &format!(\"...that also applies to the same type variable here\"));\n+                    \"...that also applies to the same type variable here\");\n             }\n             _ => {}\n         }"}, {"sha": "f0bbc6fb67eaaf070af78d8c9a4c735a2392b35a", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -38,7 +38,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         let temp_lifetime = match expr.temp_lifetime {\n             Some(t) => t,\n             None => {\n-                this.hir.span_bug(expr.span, &format!(\"no temp_lifetime for expr\"));\n+                this.hir.span_bug(expr.span, \"no temp_lifetime for expr\");\n             }\n         };\n         this.schedule_drop(expr.span, temp_lifetime, DropKind::Deep, &temp, expr_ty);"}, {"sha": "a077cb6c7a3a56cc340fd5e667bb7016f3f3877b", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -236,7 +236,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                 let (adt_def, substs) = match range_ty.sty {\n                     ty::TyStruct(adt_def, substs) => (adt_def, substs),\n                     _ => {\n-                        cx.tcx.sess.span_bug(self.span, &format!(\"unexpanded ast\"));\n+                        cx.tcx.sess.span_bug(self.span, \"unexpanded ast\");\n                     }\n                 };\n \n@@ -555,14 +555,12 @@ fn convert_var<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n                     match expr.node {\n                         hir::ExprClosure(_, _, ref body) => body.id,\n                         _ => {\n-                            cx.tcx.sess.span_bug(expr.span,\n-                                              &format!(\"closure expr is not a closure expr\"));\n+                            cx.tcx.sess.span_bug(expr.span, \"closure expr is not a closure expr\");\n                         }\n                     }\n                 }\n                 _ => {\n-                    cx.tcx.sess.span_bug(expr.span,\n-                                      &format!(\"ast-map has garbage for closure expr\"));\n+                    cx.tcx.sess.span_bug(expr.span, \"ast-map has garbage for closure expr\");\n                 }\n             };\n "}, {"sha": "4302105dda2b7dc24a5a87e216db77a70735c048", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -173,7 +173,7 @@ impl<'a, 'm, 'tcx> visit::Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n                             None => {\n                                 self.tcx.sess.span_err(\n                                     item.span,\n-                                    &format!(\"graphviz attribute requires a path\"));\n+                                    \"graphviz attribute requires a path\");\n                             }\n                         }\n                     }"}, {"sha": "b9fec44ec403052bd62234c24f44ed6d1b68e1e3", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -458,14 +458,12 @@ fn match_intrinsic_type_to_type<'tcx, 'a>(\n                     match_intrinsic_type_to_type(tcx, position, span, structural_to_nominal,\n                                                  inner_expected, ty)\n                 }\n-                _ => simple_error(&format!(\"`{}`\", t),\n-                                  &format!(\"raw pointer\")),\n+                _ => simple_error(&format!(\"`{}`\", t), \"raw pointer\"),\n             }\n         }\n         Vector(ref inner_expected, ref _llvm_type, len) => {\n             if !t.is_simd() {\n-                simple_error(&format!(\"non-simd type `{}`\", t),\n-                             \"simd type\");\n+                simple_error(&format!(\"non-simd type `{}`\", t), \"simd type\");\n                 return;\n             }\n             let t_len = t.simd_size(tcx);"}, {"sha": "03b8b455299e9ba1e7fa850af869189ef182445d", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -1732,7 +1732,7 @@ mod tests {\n         let tmpdir = tmpdir();\n \n         let mut dirpath = tmpdir.path().to_path_buf();\n-        dirpath.push(&format!(\"test-\uac00\u4e00\u30fc\u4f60\u597d\"));\n+        dirpath.push(\"test-\uac00\u4e00\u30fc\u4f60\u597d\");\n         check!(fs::create_dir(&dirpath));\n         assert!(dirpath.is_dir());\n "}, {"sha": "512f71fd4c191075e9c7ea53c6adcc13939b61da", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -400,9 +400,7 @@ pub fn expand_item_mac(it: P<ast::Item>,\n                 }\n                 MacroRulesTT => {\n                     if ident.name == parse::token::special_idents::invalid.name {\n-                        fld.cx.span_err(path_span,\n-                                        &format!(\"macro_rules! expects an ident argument\")\n-                                        );\n+                        fld.cx.span_err(path_span, \"macro_rules! expects an ident argument\");\n                         return SmallVector::zero();\n                     }\n "}, {"sha": "7da03c7482c916353554f9aa96c2a8c91282eba2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -1843,7 +1843,7 @@ impl<'a> Parser<'a> {\n                 });\n             }\n             _ => {\n-                return Err(self.fatal(&format!(\"expected a lifetime name\")));\n+                return Err(self.fatal(\"expected a lifetime name\"));\n             }\n         }\n     }"}, {"sha": "507d482febfd90b089154059cbce53a8848c461b", "filename": "src/test/run-pass/issue-23338-ensure-param-drop-order.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Ftest%2Frun-pass%2Fissue-23338-ensure-param-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Ftest%2Frun-pass%2Fissue-23338-ensure-param-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23338-ensure-param-drop-order.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -19,7 +19,7 @@ use self::d::D;\n \n pub fn main() {\n     let log = RefCell::new(vec![]);\n-    d::println(&format!(\"created empty log\"));\n+    d::println(\"created empty log\");\n     test(&log);\n \n     assert_eq!(&log.borrow()[..],\n@@ -59,19 +59,19 @@ pub fn main() {\n fn test<'a>(log: d::Log<'a>) {\n     let da = D::new(\"da\", 0, log);\n     let de = D::new(\"de\", 1, log);\n-    d::println(&format!(\"calling foo\"));\n+    d::println(\"calling foo\");\n     let result = foo(da, de);\n     d::println(&format!(\"result {}\", result));\n }\n \n fn foo<'a>(da0: D<'a>, de1: D<'a>) -> D<'a> {\n-    d::println(&format!(\"entered foo\"));\n+    d::println(\"entered foo\");\n     let de2 = de1.incr();      // creates D(de_2, 2)\n     let de4 = {\n         let _da1 = da0.incr(); // creates D(da_1, 3)\n         de2.incr().incr()      // creates D(de_3, 4) and D(de_4, 5)\n     };\n-    d::println(&format!(\"eval tail of foo\"));\n+    d::println(\"eval tail of foo\");\n     de4.incr().incr()          // creates D(de_5, 6) and D(de_6, 7)\n }\n "}, {"sha": "09bc3fd0214e7d0e723fe08a60d06e306baabd37", "filename": "src/test/run-pass/issue-23611-enum-swap-in-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63576c23e41092ae16c57e15977bf10e72327799/src%2Ftest%2Frun-pass%2Fissue-23611-enum-swap-in-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63576c23e41092ae16c57e15977bf10e72327799/src%2Ftest%2Frun-pass%2Fissue-23611-enum-swap-in-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23611-enum-swap-in-drop.rs?ref=63576c23e41092ae16c57e15977bf10e72327799", "patch": "@@ -20,7 +20,7 @@ use self::d::D;\n \n pub fn main() {\n     let log = RefCell::new(vec![]);\n-    d::println(&format!(\"created empty log\"));\n+    d::println(\"created empty log\");\n     test(&log);\n \n     // println!(\"log: {:?}\", &log.borrow()[..]);"}]}