{"sha": "e5e979906b86472ec63846b5ab03b59f122fedec", "node_id": "C_kwDOAAsO6NoAKGU1ZTk3OTkwNmI4NjQ3MmVjNjM4NDZiNWFiMDNiNTlmMTIyZmVkZWM", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-08-31T01:07:41Z"}, "committer": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-08-31T01:07:41Z"}, "message": "Use type information to deduce the correct type for \"Replace turbofish with explicit type\", even when it is not exactly the same as the turbofish type\n\nI implemented that by checking the expressions' type.\nThis could probably be implemented better by taking the function's return type and substituting the generic parameter with the provided turbofish, but this is more complicated.", "tree": {"sha": "44ac829b5a236e21f7eb9daaad54b296e79cb009", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44ac829b5a236e21f7eb9daaad54b296e79cb009"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5e979906b86472ec63846b5ab03b59f122fedec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e979906b86472ec63846b5ab03b59f122fedec", "html_url": "https://github.com/rust-lang/rust/commit/e5e979906b86472ec63846b5ab03b59f122fedec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5e979906b86472ec63846b5ab03b59f122fedec/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8e598f6415461e7fe957eec1bee6afb55927d59", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e598f6415461e7fe957eec1bee6afb55927d59", "html_url": "https://github.com/rust-lang/rust/commit/e8e598f6415461e7fe957eec1bee6afb55927d59"}], "stats": {"total": 94, "additions": 91, "deletions": 3}, "files": [{"sha": "a2df56d2f69310781fbf2acc1ce26389816f2fc6", "filename": "crates/ide-assists/src/handlers/replace_turbofish_with_explicit_type.rs", "status": "modified", "additions": 91, "deletions": 3, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/e5e979906b86472ec63846b5ab03b59f122fedec/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5e979906b86472ec63846b5ab03b59f122fedec/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_turbofish_with_explicit_type.rs?ref=e5e979906b86472ec63846b5ab03b59f122fedec", "patch": "@@ -1,3 +1,4 @@\n+use hir::HirDisplay;\n use syntax::{\n     ast::{Expr, GenericArg},\n     ast::{LetStmt, Type::InferType},\n@@ -65,7 +66,16 @@ pub(crate) fn replace_turbofish_with_explicit_type(\n \n     // An improvement would be to check that this is correctly part of the return value of the\n     // function call, or sub in the actual return type.\n-    let turbofish_type = &turbofish_args[0];\n+    let returned_type = match ctx.sema.type_of_expr(&initializer) {\n+        Some(returned_type) if !returned_type.original.contains_unknown() => {\n+            let module = ctx.sema.scope(let_stmt.syntax())?.module();\n+            returned_type.original.display_source_code(ctx.db(), module.into()).ok()?\n+        }\n+        _ => {\n+            cov_mark::hit!(fallback_to_turbofish_type_if_type_info_not_available);\n+            turbofish_args[0].to_string()\n+        }\n+    };\n \n     let initializer_start = initializer.syntax().text_range().start();\n     if ctx.offset() > turbofish_range.end() || ctx.offset() < initializer_start {\n@@ -83,7 +93,7 @@ pub(crate) fn replace_turbofish_with_explicit_type(\n             \"Replace turbofish with explicit type\",\n             TextRange::new(initializer_start, turbofish_range.end()),\n             |builder| {\n-                builder.insert(ident_range.end(), format!(\": {}\", turbofish_type));\n+                builder.insert(ident_range.end(), format!(\": {}\", returned_type));\n                 builder.delete(turbofish_range);\n             },\n         );\n@@ -98,7 +108,7 @@ pub(crate) fn replace_turbofish_with_explicit_type(\n             \"Replace `_` with turbofish type\",\n             turbofish_range,\n             |builder| {\n-                builder.replace(underscore_range, turbofish_type.to_string());\n+                builder.replace(underscore_range, returned_type);\n                 builder.delete(turbofish_range);\n             },\n         );\n@@ -115,6 +125,7 @@ mod tests {\n \n     #[test]\n     fn replaces_turbofish_for_vec_string() {\n+        cov_mark::check!(fallback_to_turbofish_type_if_type_info_not_available);\n         check_assist(\n             replace_turbofish_with_explicit_type,\n             r#\"\n@@ -135,6 +146,7 @@ fn main() {\n     #[test]\n     fn replaces_method_calls() {\n         // foo.make() is a method call which uses a different expr in the let initializer\n+        cov_mark::check!(fallback_to_turbofish_type_if_type_info_not_available);\n         check_assist(\n             replace_turbofish_with_explicit_type,\n             r#\"\n@@ -237,6 +249,82 @@ fn make<T>() -> T {}\n fn main() {\n     let a = make$0::<Vec<String>, i32>();\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replaces_turbofish_for_known_type() {\n+        check_assist(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a = make$0::<i32>();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a: i32 = make();\n+}\n+\"#,\n+        );\n+        check_assist(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+//- minicore: option\n+fn make<T>() -> T {}\n+fn main() {\n+    let a = make$0::<Option<bool>>();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let a: Option<bool> = make();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replaces_turbofish_not_same_type() {\n+        check_assist(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+//- minicore: option\n+fn make<T>() -> Option<T> {}\n+fn main() {\n+    let a = make$0::<u128>();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> Option<T> {}\n+fn main() {\n+    let a: Option<u128> = make();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replaces_turbofish_for_type_with_defaulted_generic_param() {\n+        check_assist(\n+            replace_turbofish_with_explicit_type,\n+            r#\"\n+struct HasDefault<T, U = i32>(T, U);\n+fn make<T>() -> HasDefault<T> {}\n+fn main() {\n+    let a = make$0::<bool>();\n+}\n+\"#,\n+            r#\"\n+struct HasDefault<T, U = i32>(T, U);\n+fn make<T>() -> HasDefault<T> {}\n+fn main() {\n+    let a: HasDefault<bool> = make();\n+}\n \"#,\n         );\n     }"}]}