{"sha": "561fdec1350056d77245a17d59c7d740c95621d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MWZkZWMxMzUwMDU2ZDc3MjQ1YTE3ZDU5YzdkNzQwYzk1NjIxZDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T23:41:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T23:49:49Z"}, "message": "std: Stabilize io::Error::from_raw_os_error\n\nThis commit stabilizes the old `io::Error::from_os_error` after being renamed to\nuse the `raw_os_error` terminology instead. This function is often useful when\nwriting bindings to OS functions but only actually converting to an I/O error at\na later point.", "tree": {"sha": "a22e5207a5bc9b7a53b55c4d26a56fdefc97419d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a22e5207a5bc9b7a53b55c4d26a56fdefc97419d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/561fdec1350056d77245a17d59c7d740c95621d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/561fdec1350056d77245a17d59c7d740c95621d1", "html_url": "https://github.com/rust-lang/rust/commit/561fdec1350056d77245a17d59c7d740c95621d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/561fdec1350056d77245a17d59c7d740c95621d1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "926f38e588bb99aff1902fa94ab82b1db89cbbce", "url": "https://api.github.com/repos/rust-lang/rust/commits/926f38e588bb99aff1902fa94ab82b1db89cbbce", "html_url": "https://github.com/rust-lang/rust/commit/926f38e588bb99aff1902fa94ab82b1db89cbbce"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "7428d0a8e35ef1820a35bcf461437bc995771109", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/561fdec1350056d77245a17d59c7d740c95621d1/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561fdec1350056d77245a17d59c7d740c95621d1/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=561fdec1350056d77245a17d59c7d740c95621d1", "patch": "@@ -163,12 +163,18 @@ impl Error {\n     /// `Error` for the error code.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn last_os_error() -> Error {\n-        Error::from_os_error(sys::os::errno() as i32)\n+        Error::from_raw_os_error(sys::os::errno() as i32)\n     }\n \n     /// Creates a new instance of an `Error` from a particular OS error code.\n-    #[unstable(feature = \"io\",\n-               reason = \"unclear whether this function is necessary\")]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn from_raw_os_error(code: i32) -> Error {\n+        Error { repr: Repr::Os(code) }\n+    }\n+\n+    /// Creates a new instance of an `Error` from a particular OS error code.\n+    #[unstable(feature = \"io\", reason = \"deprecated\")]\n+    #[deprecated(since = \"1.0.0\", reason = \"renamed to from_raw_os_error\")]\n     pub fn from_os_error(code: i32) -> Error {\n         Error { repr: Repr::Os(code) }\n     }"}, {"sha": "60f00c80b4abdbf61b42b7020627a9603f28121a", "filename": "src/libstd/sys/unix/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/561fdec1350056d77245a17d59c7d740c95621d1/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561fdec1350056d77245a17d59c7d740c95621d1/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs?ref=561fdec1350056d77245a17d59c7d740c95621d1", "patch": "@@ -193,7 +193,7 @@ impl Process {\n                                 let errno = combine(&bytes[0.. 4]);\n                                 assert!(p.wait().is_ok(),\n                                         \"wait() should either return Ok or panic\");\n-                                return Err(Error::from_os_error(errno))\n+                                return Err(Error::from_raw_os_error(errno))\n                             }\n                             Ok(0) => return Ok(p),\n                             Err(ref e) if e.kind() == ErrorKind::Interrupted => {}"}, {"sha": "73d6cd73621ad6ed39be674112663e01a2ff8bb5", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/561fdec1350056d77245a17d59c7d740c95621d1/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561fdec1350056d77245a17d59c7d740c95621d1/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=561fdec1350056d77245a17d59c7d740c95621d1", "patch": "@@ -212,7 +212,7 @@ pub unsafe fn create(stack: usize, p: Thunk) -> io::Result<rust_thread> {\n     assert_eq!(pthread_attr_destroy(&mut attr), 0);\n \n     return if ret != 0 {\n-        Err(io::Error::from_os_error(ret))\n+        Err(io::Error::from_raw_os_error(ret))\n     } else {\n         mem::forget(p); // ownership passed to pthread_create\n         Ok(native)"}, {"sha": "5ced8863e62a905dd137de6e6c9d19dd44f03de5", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/561fdec1350056d77245a17d59c7d740c95621d1/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561fdec1350056d77245a17d59c7d740c95621d1/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=561fdec1350056d77245a17d59c7d740c95621d1", "patch": "@@ -43,7 +43,7 @@ pub fn init() {\n \n /// Returns the last error from the Windows socket interface.\n fn last_error() -> io::Error {\n-    io::Error::from_os_error(unsafe { c::WSAGetLastError() })\n+    io::Error::from_raw_os_error(unsafe { c::WSAGetLastError() })\n }\n \n /// Checks if the signed integer is the Windows constant `SOCKET_ERROR` (-1)"}]}