{"sha": "bae9270989cda75f891c3099383352daa5435404", "node_id": "C_kwDOAAsO6NoAKGJhZTkyNzA5ODljZGE3NWY4OTFjMzA5OTM4MzM1MmRhYTU0MzU0MDQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-14T19:47:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-14T19:47:31Z"}, "message": "Rollup merge of #91856 - ouz-a:master, r=oli-obk\n\nLooser check for overflowing_binary_op\n\nFix for issue #91636 tight check resulted in ICE, this makes the check a little looser. It seems `eq` allows comparing of `supertype` and `subtype` if `lhs = supertype` and `rhs = subtype` but not vice versa, is this intended behavior ?", "tree": {"sha": "cdb7b4ec54632ce835744a48de2a1a6608fd42e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdb7b4ec54632ce835744a48de2a1a6608fd42e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bae9270989cda75f891c3099383352daa5435404", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhuPTUCRBK7hj4Ov3rIwAANNQIAEBQKCkqWvR/84//LdvEsB2f\nlwI1m4OkglLuJE/auTZlVXjgsKyccffgGYmTAPvHKWSUUxkLKDmARIAvQpQbmfeV\nYeBiowQCGcf+GnCMuo4WhDvvQ1THgTagb+MxIyVJkDJOp3R4XJImBgZLB3385Xe8\n+8Gakz/IiC7ANApj8rP9tRfxVy/lQD9+GlG8xhs86IY9MHqfSKJpzWliBVs8NOLN\nUGNp5KrSD2FHr3kghfDspjCIYWm+cENXIIggHjrJ8fW0b79JZSMNs1UE7PPKJHFN\n/kfdNoZ40+Ws7Xr5j/eZ8+nmLGD1PqwtdgY/IsxTT0bjB1g0u8DSrVe+Bu7/B4I=\n=pB5+\n-----END PGP SIGNATURE-----\n", "payload": "tree cdb7b4ec54632ce835744a48de2a1a6608fd42e0\nparent 6a9491895f3aaa37f8b83c24ce01f97ff4716e45\nparent a5054e3858150384c30ce71afc76ca9c57c8cec2\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639511251 +0100\ncommitter GitHub <noreply@github.com> 1639511251 +0100\n\nRollup merge of #91856 - ouz-a:master, r=oli-obk\n\nLooser check for overflowing_binary_op\n\nFix for issue #91636 tight check resulted in ICE, this makes the check a little looser. It seems `eq` allows comparing of `supertype` and `subtype` if `lhs = supertype` and `rhs = subtype` but not vice versa, is this intended behavior ?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bae9270989cda75f891c3099383352daa5435404", "html_url": "https://github.com/rust-lang/rust/commit/bae9270989cda75f891c3099383352daa5435404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bae9270989cda75f891c3099383352daa5435404/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a9491895f3aaa37f8b83c24ce01f97ff4716e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a9491895f3aaa37f8b83c24ce01f97ff4716e45", "html_url": "https://github.com/rust-lang/rust/commit/6a9491895f3aaa37f8b83c24ce01f97ff4716e45"}, {"sha": "a5054e3858150384c30ce71afc76ca9c57c8cec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5054e3858150384c30ce71afc76ca9c57c8cec2", "html_url": "https://github.com/rust-lang/rust/commit/a5054e3858150384c30ce71afc76ca9c57c8cec2"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "48c90e1881a9a6adf5c845ba14bd02a8249aedd1", "filename": "compiler/rustc_const_eval/src/interpret/operator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bae9270989cda75f891c3099383352daa5435404/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae9270989cda75f891c3099383352daa5435404/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperator.rs?ref=bae9270989cda75f891c3099383352daa5435404", "patch": "@@ -328,9 +328,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.binary_int_op(bin_op, l, left.layout, r, right.layout)\n             }\n             _ if left.layout.ty.is_any_ptr() => {\n-                // The RHS type must be the same *or an integer type* (for `Offset`).\n+                // The RHS type must be a `pointer` *or an integer type* (for `Offset`).\n+                // (Even when both sides are pointers, their type might differ, see issue #91636)\n                 assert!(\n-                    right.layout.ty == left.layout.ty || right.layout.ty.is_integral(),\n+                    right.layout.ty.is_any_ptr() || right.layout.ty.is_integral(),\n                     \"Unexpected types for BinOp: {:?} {:?} {:?}\",\n                     left.layout.ty,\n                     bin_op,"}, {"sha": "8e20640b58d94898735c73640ba3f3936a90ae0b", "filename": "src/test/ui/binop/binary-op-on-fn-ptr-eq.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bae9270989cda75f891c3099383352daa5435404/src%2Ftest%2Fui%2Fbinop%2Fbinary-op-on-fn-ptr-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bae9270989cda75f891c3099383352daa5435404/src%2Ftest%2Fui%2Fbinop%2Fbinary-op-on-fn-ptr-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinary-op-on-fn-ptr-eq.rs?ref=bae9270989cda75f891c3099383352daa5435404", "patch": "@@ -0,0 +1,9 @@\n+// run-pass\n+// Tests equality between supertype and subtype of a function\n+// See the issue #91636\n+fn foo(_a: &str) {}\n+\n+fn main() {\n+    let x = foo as fn(&'static str);\n+    let _ = x == foo;\n+}"}]}