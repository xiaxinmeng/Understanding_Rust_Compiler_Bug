{"sha": "1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNjc1NGQ2ZWIxYWMzNDk0Nzc3NjBhMmFmY2Q1MWNmNzVhYzFhMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-16T16:37:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-16T16:37:43Z"}, "message": "Auto merge of #83199 - JohnTitor:rollup-zrfk94a, r=JohnTitor\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #81822 (Added `try_exists()` method to `std::path::Path`)\n - #83072 (Update `Vec` docs)\n - #83077 (rustdoc: reduce GC work during search)\n - #83091 (Constify `copy` related functions)\n - #83156 (Fall-back to sans-serif if Arial is not available)\n - #83157 (No background for code in portability snippets)\n - #83160 (Deprecate RustcEncodable and RustcDecodable.)\n - #83162 (Specify *.woff2 files as binary)\n - #83172 (More informative diagnotic from `x.py test` attempt atop beta checkout)\n - #83196 (Use delay_span_bug instead of panic in layout_scalar_valid_range)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b958b90861f439b1a0009d2cf852fa24afff63f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b958b90861f439b1a0009d2cf852fa24afff63f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "html_url": "https://github.com/rust-lang/rust/commit/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f24ce9b0140d9be5a336954e878d0c1522966bb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f24ce9b0140d9be5a336954e878d0c1522966bb8", "html_url": "https://github.com/rust-lang/rust/commit/f24ce9b0140d9be5a336954e878d0c1522966bb8"}, {"sha": "ec074276ab1272bb42b66407529431dfecf639a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec074276ab1272bb42b66407529431dfecf639a0", "html_url": "https://github.com/rust-lang/rust/commit/ec074276ab1272bb42b66407529431dfecf639a0"}], "stats": {"total": 306, "additions": 196, "deletions": 110}, "files": [{"sha": "4038db6f7dab1552abe7dc8cc7482298025ab87c", "filename": ".gitattributes", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitattributes?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -8,6 +8,7 @@\n *.mir linguist-language=Rust\n src/etc/installer/gfx/* binary\n *.woff binary\n+*.woff2 binary\n src/vendor/** -text\n Cargo.lock linguist-generated=false\n "}, {"sha": "d5ad459126070d158bfe47fe053ccd76754dda1d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -1091,13 +1091,16 @@ impl<'tcx> TyCtxt<'tcx> {\n                 None => return Bound::Unbounded,\n             };\n             debug!(\"layout_scalar_valid_range: attr={:?}\", attr);\n-            for meta in attr.meta_item_list().expect(\"rustc_layout_scalar_valid_range takes args\") {\n-                match meta.literal().expect(\"attribute takes lit\").kind {\n-                    ast::LitKind::Int(a, _) => return Bound::Included(a),\n-                    _ => span_bug!(attr.span, \"rustc_layout_scalar_valid_range expects int arg\"),\n-                }\n+            if let Some(\n+                &[ast::NestedMetaItem::Literal(ast::Lit { kind: ast::LitKind::Int(a, _), .. })],\n+            ) = attr.meta_item_list().as_deref()\n+            {\n+                Bound::Included(a)\n+            } else {\n+                self.sess\n+                    .delay_span_bug(attr.span, \"invalid rustc_layout_scalar_valid_range attribute\");\n+                Bound::Unbounded\n             }\n-            span_bug!(attr.span, \"no arguments to `rustc_layout_scalar_valid_range` attribute\");\n         };\n         (\n             get(sym::rustc_layout_scalar_valid_range_start),"}, {"sha": "9731a8e1d1dbb527e65b7359bb07f9018b36b17e", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -126,7 +126,7 @@ use self::spec_extend::SpecExtend;\n \n mod spec_extend;\n \n-/// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n+/// A contiguous growable array type, written as `Vec<T>` and pronounced 'vector'.\n ///\n /// # Examples\n ///\n@@ -215,7 +215,7 @@ mod spec_extend;\n ///\n /// # Slicing\n ///\n-/// A `Vec` can be mutable. Slices, on the other hand, are read-only objects.\n+/// A `Vec` can be mutable. On the other hand, slices are read-only objects.\n /// To get a [slice][prim@slice], use [`&`]. Example:\n ///\n /// ```\n@@ -352,7 +352,7 @@ mod spec_extend;\n /// not break, however: using `unsafe` code to write to the excess capacity,\n /// and then increasing the length to match, is always valid.\n ///\n-/// `Vec` does not currently guarantee the order in which elements are dropped.\n+/// Currently, `Vec` does not guarantee the order in which elements are dropped.\n /// The order has changed in the past and may change again.\n ///\n /// [`get`]: ../../std/vec/struct.Vec.html#method.get"}, {"sha": "4c2472ed82c5ef226ea11f7efe0b51d8b7a6673f", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -1902,18 +1902,6 @@ pub(crate) fn is_aligned_and_not_null<T>(ptr: *const T) -> bool {\n     !ptr.is_null() && ptr as usize % mem::align_of::<T>() == 0\n }\n \n-/// Checks whether the regions of memory starting at `src` and `dst` of size\n-/// `count * size_of::<T>()` do *not* overlap.\n-pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -> bool {\n-    let src_usize = src as usize;\n-    let dst_usize = dst as usize;\n-    let size = mem::size_of::<T>().checked_mul(count).unwrap();\n-    let diff = if src_usize > dst_usize { src_usize - dst_usize } else { dst_usize - src_usize };\n-    // If the absolute distance between the ptrs is at least as big as the size of the buffer,\n-    // they do not overlap.\n-    diff >= size\n-}\n-\n /// Sets `count * size_of::<T>()` bytes of memory starting at `dst` to\n /// `val`.\n ///"}, {"sha": "8e35adcbd9ef5944f1b4648151a45d0da6b193af", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -98,6 +98,7 @@\n #![feature(const_slice_from_raw_parts)]\n #![feature(const_slice_ptr_len)]\n #![feature(const_size_of_val)]\n+#![feature(const_swap)]\n #![feature(const_align_of_val)]\n #![feature(const_type_id)]\n #![feature(const_type_name)]"}, {"sha": "99894b5605e6deb7a92099a0431ffdb0b1159db3", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -1468,6 +1468,10 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow_internal_unstable(core_intrinsics, libstd_sys_internals)]\n+    #[rustc_deprecated(\n+        since = \"1.52.0\",\n+        reason = \"rustc-serialize is deprecated and no longer supported\"\n+    )]\n     pub macro RustcDecodable($item:item) {\n         /* compiler built-in */\n     }\n@@ -1476,6 +1480,10 @@ pub(crate) mod builtin {\n     #[rustc_builtin_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow_internal_unstable(core_intrinsics)]\n+    #[rustc_deprecated(\n+        since = \"1.52.0\",\n+        reason = \"rustc-serialize is deprecated and no longer supported\"\n+    )]\n     pub macro RustcEncodable($item:item) {\n         /* compiler built-in */\n     }"}, {"sha": "37e8d65db6a38a5fdae75da762bf7dbaae1d920c", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -682,7 +682,8 @@ pub unsafe fn uninitialized<T>() -> T {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn swap<T>(x: &mut T, y: &mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub const fn swap<T>(x: &mut T, y: &mut T) {\n     // SAFETY: the raw pointers have been created from safe mutable references satisfying all the\n     // constraints on `ptr::swap_nonoverlapping_one`\n     unsafe {\n@@ -812,7 +813,8 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]\n-pub fn replace<T>(dest: &mut T, src: T) -> T {\n+#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n+pub const fn replace<T>(dest: &mut T, src: T) -> T {\n     // SAFETY: We read from `dest` but directly write `src` into it afterwards,\n     // such that the old value is not duplicated. Nothing is dropped and\n     // nothing here can panic.\n@@ -931,7 +933,8 @@ pub fn drop<T>(_x: T) {}\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n+#[rustc_const_unstable(feature = \"const_transmute_copy\", issue = \"83165\")]\n+pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {\n     // If U has a higher alignment requirement, src may not be suitably aligned.\n     if align_of::<U>() > align_of::<T>() {\n         // SAFETY: `src` is a reference which is guaranteed to be valid for reads."}, {"sha": "7d33ca8bb698e0372578021650bb9461419b89f1", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -61,7 +61,7 @@ pub use crate::{\n };\n \n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-#[allow(deprecated)]\n+#[allow(deprecated, deprecated_in_future)]\n #[doc(no_inline)]\n pub use crate::macros::builtin::{\n     bench, global_allocator, test, test_case, RustcDecodable, RustcEncodable,"}, {"sha": "b511466acd6397c302275723e00d9b7ff4e22555", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -819,9 +819,10 @@ impl<T: ?Sized> *const T {\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy`]: crate::ptr::copy()\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n-    pub unsafe fn copy_to(self, dest: *mut T, count: usize)\n+    pub const unsafe fn copy_to(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n     {\n@@ -837,9 +838,10 @@ impl<T: ?Sized> *const T {\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n-    pub unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n+    pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n     {"}, {"sha": "3a27f01444be8e5cc3c5e7ee39cbedee81fcb670", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -67,7 +67,7 @@\n use crate::cmp::Ordering;\n use crate::fmt;\n use crate::hash;\n-use crate::intrinsics::{self, abort, is_aligned_and_not_null, is_nonoverlapping};\n+use crate::intrinsics::{self, abort, is_aligned_and_not_null};\n use crate::mem::{self, MaybeUninit};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -394,7 +394,8 @@ pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub const unsafe fn swap<T>(x: *mut T, y: *mut T) {\n     // Give ourselves some scratch space to work with.\n     // We do not have to worry about drops: `MaybeUninit` does nothing when dropped.\n     let mut tmp = MaybeUninit::<T>::uninit();\n@@ -451,16 +452,8 @@ pub unsafe fn swap<T>(x: *mut T, y: *mut T) {\n /// ```\n #[inline]\n #[stable(feature = \"swap_nonoverlapping\", since = \"1.27.0\")]\n-pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n-    if cfg!(debug_assertions)\n-        && !(is_aligned_and_not_null(x)\n-            && is_aligned_and_not_null(y)\n-            && is_nonoverlapping(x, y, count))\n-    {\n-        // Not panicking to keep codegen impact smaller.\n-        abort();\n-    }\n-\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub const unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n     let x = x as *mut u8;\n     let y = y as *mut u8;\n     let len = mem::size_of::<T>() * count;\n@@ -470,7 +463,8 @@ pub unsafe fn swap_nonoverlapping<T>(x: *mut T, y: *mut T, count: usize) {\n }\n \n #[inline]\n-pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+pub(crate) const unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n     // For types smaller than the block optimization below,\n     // just swap directly to avoid pessimizing codegen.\n     if mem::size_of::<T>() < 32 {\n@@ -488,7 +482,8 @@ pub(crate) unsafe fn swap_nonoverlapping_one<T>(x: *mut T, y: *mut T) {\n }\n \n #[inline]\n-unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n+#[rustc_const_unstable(feature = \"const_swap\", issue = \"83163\")]\n+const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n     // The approach here is to utilize simd to swap x & y efficiently. Testing reveals\n     // that swapping either 32 bytes or 64 bytes at a time is most efficient for Intel\n     // Haswell E processors. LLVM is more able to optimize if we give a struct a\n@@ -589,7 +584,8 @@ unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n+#[rustc_const_unstable(feature = \"const_replace\", issue = \"83164\")]\n+pub const unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n     // SAFETY: the caller must guarantee that `dst` is valid to be\n     // cast to a mutable reference (valid for writes, aligned, initialized),\n     // and cannot overlap `src` since `dst` must point to a distinct"}, {"sha": "fa09cf854353d21e15a0a5f8d5272ea540406290", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -926,9 +926,10 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy`]: crate::ptr::copy()\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n-    pub unsafe fn copy_to(self, dest: *mut T, count: usize)\n+    pub const unsafe fn copy_to(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n     {\n@@ -944,9 +945,10 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n-    pub unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n+    pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n     {\n@@ -962,9 +964,10 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::copy`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy`]: crate::ptr::copy()\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n-    pub unsafe fn copy_from(self, src: *const T, count: usize)\n+    pub const unsafe fn copy_from(self, src: *const T, count: usize)\n     where\n         T: Sized,\n     {\n@@ -980,9 +983,10 @@ impl<T: ?Sized> *mut T {\n     /// See [`ptr::copy_nonoverlapping`] for safety concerns and examples.\n     ///\n     /// [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping()\n+    #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"80697\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n-    pub unsafe fn copy_from_nonoverlapping(self, src: *const T, count: usize)\n+    pub const unsafe fn copy_from_nonoverlapping(self, src: *const T, count: usize)\n     where\n         T: Sized,\n     {"}, {"sha": "57c892f32b193e9957dfbb6a866d1905aa5d0e71", "filename": "library/std/src/path.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -2472,6 +2472,36 @@ impl Path {\n         fs::metadata(self).is_ok()\n     }\n \n+    /// Returns `Ok(true)` if the path points at an existing entity.\n+    ///\n+    /// This function will traverse symbolic links to query information about the\n+    /// destination file. In case of broken symbolic links this will return `Ok(false)`.\n+    ///\n+    /// As opposed to the `exists()` method, this one doesn't silently ignore errors\n+    /// unrelated to the path not existing. (E.g. it will return `Err(_)` in case of permission\n+    /// denied on some of the parent directories.)\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(path_try_exists)]\n+    ///\n+    /// use std::path::Path;\n+    /// assert!(!Path::new(\"does_not_exist.txt\").try_exists().expect(\"Can't check existence of file does_not_exist.txt\"));\n+    /// assert!(Path::new(\"/root/secret_file.txt\").try_exists().is_err());\n+    /// ```\n+    // FIXME: stabilization should modify documentation of `exists()` to recommend this method\n+    // instead.\n+    #[unstable(feature = \"path_try_exists\", issue = \"83186\")]\n+    #[inline]\n+    pub fn try_exists(&self) -> io::Result<bool> {\n+        match fs::metadata(self) {\n+            Ok(_) => Ok(true),\n+            Err(error) if error.kind() == io::ErrorKind::NotFound => Ok(false),\n+            Err(error) => Err(error),\n+        }\n+    }\n+\n     /// Returns `true` if the path exists on disk and is pointing at a regular file.\n     ///\n     /// This function will traverse symbolic links to query information about the"}, {"sha": "c5b871edbf25f67b56d41267a750cd18d03d2526", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -48,7 +48,7 @@ pub use core::prelude::v1::{\n // FIXME: Attribute and internal derive macros are not documented because for them rustdoc generates\n // dead links which fail link checker testing.\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-#[allow(deprecated)]\n+#[allow(deprecated, deprecated_in_future)]\n #[doc(hidden)]\n pub use core::prelude::v1::{\n     bench, global_allocator, test, test_case, RustcDecodable, RustcEncodable,"}, {"sha": "86d940cd733da56608338d5cdbb219fff4adab23", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -791,6 +791,19 @@ impl Step for Tidy {\n \n         if builder.config.channel == \"dev\" || builder.config.channel == \"nightly\" {\n             builder.info(\"fmt check\");\n+            if builder.config.initial_rustfmt.is_none() {\n+                let inferred_rustfmt_dir = builder.config.initial_rustc.parent().unwrap();\n+                eprintln!(\n+                    \"\\\n+error: no `rustfmt` binary found in {PATH}\n+info: `rust.channel` is currently set to \\\"{CHAN}\\\"\n+help: if you are testing a beta branch, set `rust.channel` to \\\"beta\\\" in the `config.toml` file\n+help: to skip test's attempt to check tidiness, pass `--exclude src/tools/tidy` to `x.py test`\",\n+                    PATH = inferred_rustfmt_dir.display(),\n+                    CHAN = builder.config.channel,\n+                );\n+                std::process::exit(1);\n+            }\n             crate::format::format(&builder.build, !builder.config.cmd.bless());\n         }\n     }"}, {"sha": "e7b522093c74d908eb6afb0e5c49edb0c1725626", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 78, "deletions": 49, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -833,39 +833,52 @@ function defocusSearchBar() {\n                 };\n             }\n \n-            function getObjectFromId(id) {\n+            function getObjectNameFromId(id) {\n                 if (typeof id === \"number\") {\n-                    return searchIndex[id];\n+                    return searchIndex[id].name;\n                 }\n-                return {'name': id};\n+                return id;\n             }\n \n             function checkGenerics(obj, val) {\n                 // The names match, but we need to be sure that all generics kinda\n                 // match as well.\n+                var tmp_lev, elem_name;\n                 if (val.generics.length > 0) {\n                     if (obj.length > GENERICS_DATA &&\n                           obj[GENERICS_DATA].length >= val.generics.length) {\n-                        var elems = obj[GENERICS_DATA].slice(0);\n+                        var elems = Object.create(null);\n+                        var elength = object[GENERICS_DATA].length;\n+                        for (var x = 0; x < elength; ++x) {\n+                            elems[getObjectNameFromId(obj[GENERICS_DATA][x])] += 1;\n+                        }\n                         var total = 0;\n                         var done = 0;\n                         // We need to find the type that matches the most to remove it in order\n                         // to move forward.\n                         var vlength = val.generics.length;\n-                        for (var y = 0; y < vlength; ++y) {\n-                            var lev = { pos: -1, lev: MAX_LEV_DISTANCE + 1};\n-                            var firstGeneric = getObjectFromId(val.generics[y]).name;\n-                            for (var x = 0, elength = elems.length; x < elength; ++x) {\n-                                var tmp_lev = levenshtein(getObjectFromId(elems[x]).name,\n-                                                                          firstGeneric);\n-                                if (tmp_lev < lev.lev) {\n-                                    lev.lev = tmp_lev;\n-                                    lev.pos = x;\n+                        for (x = 0; x < vlength; ++x) {\n+                            var lev = MAX_LEV_DISTANCE + 1;\n+                            var firstGeneric = getObjectNameFromId(val.generics[x]);\n+                            var match = null;\n+                            if (elems[firstGeneric]) {\n+                                match = firstGeneric;\n+                                lev = 0;\n+                            } else {\n+                                for (elem_name in elems) {\n+                                    tmp_lev = levenshtein(elem_name, firstGeneric);\n+                                    if (tmp_lev < lev) {\n+                                        lev = tmp_lev;\n+                                        match = elem_name;\n+                                    }\n                                 }\n                             }\n-                            if (lev.pos !== -1) {\n-                                elems.splice(lev.pos, 1);\n-                                total += lev.lev;\n+                            if (match !== null) {\n+                                elems[match] -= 1;\n+                                if (elems[match] == 0) {\n+                                    delete elems[match];\n+                                }\n+                                total += lev;\n                                 done += 1;\n                             } else {\n                                 return MAX_LEV_DISTANCE + 1;\n@@ -880,25 +893,27 @@ function defocusSearchBar() {\n             // Check for type name and type generics (if any).\n             function checkType(obj, val, literalSearch) {\n                 var lev_distance = MAX_LEV_DISTANCE + 1;\n-                var len, x, y, e_len, firstGeneric;\n+                var len, x, firstGeneric;\n                 if (obj[NAME] === val.name) {\n                     if (literalSearch === true) {\n                         if (val.generics && val.generics.length !== 0) {\n                             if (obj.length > GENERICS_DATA &&\n                                   obj[GENERICS_DATA].length >= val.generics.length) {\n-                                var elems = obj[GENERICS_DATA].slice(0);\n-                                var allFound = true;\n+                                var elems = Object.create(null);\n+                                len = obj[GENERICS_DATA].length;\n+                                for (x = 0; x < len; ++x) {\n+                                    elems[getObjectNameFromId(obj[GENERICS_DATA][x])] += 1;\n+                                }\n \n+                                var allFound = true;\n                                 len = val.generics.length;\n-                                for (y = 0; allFound === true && y < len; ++y) {\n-                                    allFound = false;\n-                                    firstGeneric = getObjectFromId(val.generics[y]).name;\n-                                    e_len = elems.length;\n-                                    for (x = 0; allFound === false && x < e_len; ++x) {\n-                                        allFound = getObjectFromId(elems[x]).name === firstGeneric;\n-                                    }\n-                                    if (allFound === true) {\n-                                        elems.splice(x - 1, 1);\n+                                for (x = 0; x < len; ++x) {\n+                                    firstGeneric = getObjectNameFromId(val.generics[x]);\n+                                    if (elems[firstGeneric]) {\n+                                        elems[firstGeneric] -= 1;\n+                                    } else {\n+                                        allFound = false;\n+                                        break;\n                                     }\n                                 }\n                                 if (allFound === true) {\n@@ -1066,13 +1081,6 @@ function defocusSearchBar() {\n                 return false;\n             }\n \n-            function generateId(ty) {\n-                if (ty.parent && ty.parent.name) {\n-                    return itemTypes[ty.ty] + ty.path + ty.parent.name + ty.name;\n-                }\n-                return itemTypes[ty.ty] + ty.path + ty.name;\n-            }\n-\n             function createAliasFromItem(item) {\n                 return {\n                     crate: item.crate,\n@@ -1158,7 +1166,7 @@ function defocusSearchBar() {\n                     in_args = findArg(searchIndex[i], val, true, typeFilter);\n                     returned = checkReturned(searchIndex[i], val, true, typeFilter);\n                     ty = searchIndex[i];\n-                    fullId = generateId(ty);\n+                    fullId = ty.id;\n \n                     if (searchWords[i] === val.name\n                         && typePassesFilter(typeFilter, searchIndex[i].ty)\n@@ -1208,7 +1216,7 @@ function defocusSearchBar() {\n                     if (!type) {\n                         continue;\n                     }\n-                    fullId = generateId(ty);\n+                    fullId = ty.id;\n \n                     returned = checkReturned(ty, output, true, NO_TYPE_FILTER);\n                     if (output.name === \"*\" || returned === true) {\n@@ -1292,15 +1300,15 @@ function defocusSearchBar() {\n                     var index = -1;\n                     // we want lev results to go lower than others\n                     lev = MAX_LEV_DISTANCE + 1;\n-                    fullId = generateId(ty);\n+                    fullId = ty.id;\n \n                     if (searchWords[j].indexOf(split[i]) > -1 ||\n                         searchWords[j].indexOf(val) > -1 ||\n-                        searchWords[j].replace(/_/g, \"\").indexOf(val) > -1)\n+                        ty.normalizedName.indexOf(val) > -1)\n                     {\n                         // filter type: ... queries\n                         if (typePassesFilter(typeFilter, ty.ty) && results[fullId] === undefined) {\n-                            index = searchWords[j].replace(/_/g, \"\").indexOf(val);\n+                            index = ty.normalizedName.indexOf(val);\n                         }\n                     }\n                     if ((lev = levenshtein(searchWords[j], val)) <= MAX_LEV_DISTANCE) {\n@@ -1828,23 +1836,35 @@ function defocusSearchBar() {\n         function buildIndex(rawSearchIndex) {\n             searchIndex = [];\n             var searchWords = [];\n-            var i;\n+            var i, word;\n             var currentIndex = 0;\n+            var id = 0;\n \n             for (var crate in rawSearchIndex) {\n                 if (!hasOwnProperty(rawSearchIndex, crate)) { continue; }\n \n                 var crateSize = 0;\n \n                 searchWords.push(crate);\n-                searchIndex.push({\n+                var normalizedName = crate.indexOf(\"_\") === -1\n+                    ? crate\n+                    : crate.replace(/_/g, \"\");\n+                // This object should have exactly the same set of fields as the \"row\"\n+                // object defined below. Your JavaScript runtime will thank you.\n+                // https://mathiasbynens.be/notes/shapes-ics\n+                var crateRow = {\n                     crate: crate,\n                     ty: 1, // == ExternCrate\n                     name: crate,\n                     path: \"\",\n                     desc: rawSearchIndex[crate].doc,\n+                    parent: undefined,\n                     type: null,\n-                });\n+                    id: id,\n+                    normalizedName: normalizedName,\n+                };\n+                id += 1;\n+                searchIndex.push(crateRow);\n                 currentIndex += 1;\n \n                 // an array of (Number) item types\n@@ -1882,6 +1902,18 @@ function defocusSearchBar() {\n                 len = itemTypes.length;\n                 var lastPath = \"\";\n                 for (i = 0; i < len; ++i) {\n+                    // This object should have exactly the same set of fields as the \"crateRow\"\n+                    // object defined above.\n+                    if (typeof itemNames[i] === \"string\") {\n+                        word = itemNames[i].toLowerCase();\n+                        searchWords.push(word);\n+                    } else {\n+                        word = \"\";\n+                        searchWords.push(\"\");\n+                    }\n+                    var normalizedName = word.indexOf(\"_\") === -1\n+                        ? word\n+                        : word.replace(/_/g, \"\");\n                     var row = {\n                         crate: crate,\n                         ty: itemTypes[i],\n@@ -1890,14 +1922,11 @@ function defocusSearchBar() {\n                         desc: itemDescs[i],\n                         parent: itemParentIdxs[i] > 0 ? paths[itemParentIdxs[i] - 1] : undefined,\n                         type: itemFunctionSearchTypes[i],\n+                        id: id,\n+                        normalizedName: normalizedName,\n                     };\n+                    id += 1;\n                     searchIndex.push(row);\n-                    if (typeof row.name === \"string\") {\n-                        var word = row.name.toLowerCase();\n-                        searchWords.push(word);\n-                    } else {\n-                        searchWords.push(\"\");\n-                    }\n                     lastPath = row.path;\n                     crateSize += 1;\n                 }"}, {"sha": "4f287cde73b1b2597e66f848682463b21ed584d8", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -136,11 +136,12 @@ h1, h2, h3, h4,\n #source-sidebar, #sidebar-toggle,\n /* This selector is for the items listed in the \"all items\" page. */\n #main > ul.docblock > li > a {\n-\tfont-family: \"Fira Sans\", Arial;\n+\tfont-family: \"Fira Sans\", Arial, sans-serif;\n }\n \n .content ul.crate a.crate {\n-\tfont: 16px/1.6 \"Fira Sans\";\n+\tfont-size: 16px/1.6;\n+\tfont-family: \"Fira Sans\", Arial, sans-serif;\n }\n \n ol, ul {\n@@ -482,7 +483,7 @@ h4 > code, h3 > code, .invisible > code {\n }\n #main > .since {\n \ttop: inherit;\n-\tfont-family: \"Fira Sans\", Arial;\n+\tfont-family: \"Fira Sans\", Arial, sans-serif;\n }\n \n .content table:not(.table-display) {\n@@ -1301,7 +1302,7 @@ h4 > .notable-traits {\n \n .help-button {\n \tright: 30px;\n-\tfont-family: \"Fira Sans\", Arial;\n+\tfont-family: \"Fira Sans\", Arial, sans-serif;\n \ttext-align: center;\n \tfont-size: 17px;\n }"}, {"sha": "7374aee71f8f81a924783a557256e18dd1d34669", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -266,7 +266,7 @@ a {\n \n .stab.portability > code {\n \tcolor: #e6e1cf;\n-\tbackground-color: transparent;\n+\tbackground: none;\n }\n \n #help > div {"}, {"sha": "88ac3252bb4b2fcd5a6aa942983642706284205a", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -222,10 +222,7 @@ a.test-arrow {\n .stab.unstable { background: #FFF5D6; border-color: #FFC600; color: #2f2f2f; }\n .stab.deprecated { background: #F3DFFF; border-color: #7F0087; color: #2f2f2f; }\n .stab.portability { background: #C4ECFF; border-color: #7BA5DB; color: #2f2f2f; }\n-\n-.stab.portability > code {\n-\tcolor: #ddd;\n-}\n+.stab.portability > code { background: none; }\n \n #help > div {\n \tbackground: #4d4d4d;"}, {"sha": "9bc21102aaae6789200b028a734ea4e73349790f", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -220,10 +220,7 @@ a.test-arrow {\n .stab.unstable { background: #FFF5D6; border-color: #FFC600; }\n .stab.deprecated { background: #F3DFFF; border-color: #7F0087; }\n .stab.portability { background: #C4ECFF; border-color: #7BA5DB; }\n-\n-.stab.portability > code {\n-\tcolor: #000;\n-}\n+.stab.portability > code { background: none; }\n \n #help > div {\n \tbackground: #e9e9e9;"}, {"sha": "06cf8c0f0f6d51d4ca63ef5b13e90deca07d31ad", "filename": "src/test/ui/invalid/invalid_rustc_layout_scalar_valid_range.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.rs?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -15,6 +15,13 @@ enum E {\n     Y = 14,\n }\n \n+#[rustc_layout_scalar_valid_range_start(rustc_layout_scalar_valid_range_start)] //~ ERROR\n+struct NonZero<T>(T);\n+\n+fn not_field() -> impl Send {\n+    NonZero(false)\n+}\n+\n fn main() {\n     let _ = A(0);\n     let _ = B(0);"}, {"sha": "7879e7358c00aed5eae37b33067b6d0472c30d93", "filename": "src/test/ui/invalid/invalid_rustc_layout_scalar_valid_range.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d6754d6eb1ac349477760a2afcd51cf75ac1a1c/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid_rustc_layout_scalar_valid_range.stderr?ref=1d6754d6eb1ac349477760a2afcd51cf75ac1a1c", "patch": "@@ -27,5 +27,11 @@ LL | |     Y = 14,\n LL | | }\n    | |_- not a struct\n \n-error: aborting due to 4 previous errors\n+error: expected exactly one integer literal argument\n+  --> $DIR/invalid_rustc_layout_scalar_valid_range.rs:18:1\n+   |\n+LL | #[rustc_layout_scalar_valid_range_start(rustc_layout_scalar_valid_range_start)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}]}