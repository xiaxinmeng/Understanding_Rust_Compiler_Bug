{"sha": "4c8db8593905d09a872601c445005a594ac632dc", "node_id": "C_kwDOAAsO6NoAKDRjOGRiODU5MzkwNWQwOWE4NzI2MDFjNDQ1MDA1YTU5NGFjNjMyZGM", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2022-05-30T02:35:12Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-05-30T13:56:09Z"}, "message": "feat: remove report_todo option", "tree": {"sha": "71402e817229d2f6922f1d1c55fae9b33b6429c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71402e817229d2f6922f1d1c55fae9b33b6429c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c8db8593905d09a872601c445005a594ac632dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8db8593905d09a872601c445005a594ac632dc", "html_url": "https://github.com/rust-lang/rust/commit/4c8db8593905d09a872601c445005a594ac632dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c8db8593905d09a872601c445005a594ac632dc/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e38399ed89da3b7ed68b062ad82bdc0f2068685", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e38399ed89da3b7ed68b062ad82bdc0f2068685", "html_url": "https://github.com/rust-lang/rust/commit/3e38399ed89da3b7ed68b062ad82bdc0f2068685"}], "stats": {"total": 140, "additions": 20, "deletions": 120}, "files": [{"sha": "72499618755e9a2fb40f3f4d902fb55d8a0a6637", "filename": "Configurations.md", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4c8db8593905d09a872601c445005a594ac632dc/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c8db8593905d09a872601c445005a594ac632dc/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=4c8db8593905d09a872601c445005a594ac632dc", "patch": "@@ -2180,23 +2180,6 @@ Warns about any comments containing `FIXME` in them when set to `\"Always\"`. If\n it contains a `#X` (with `X` being a number) in parentheses following the\n `FIXME`, `\"Unnumbered\"` will ignore it.\n \n-See also [`report_todo`](#report_todo).\n-\n-\n-## `report_todo`\n-\n-Report `TODO` items in comments.\n-\n-- **Default value**: `\"Never\"`\n-- **Possible values**: `\"Always\"`, `\"Unnumbered\"`, `\"Never\"`\n-- **Stable**: No (tracking issue: [#3393](https://github.com/rust-lang/rustfmt/issues/3393))\n-\n-Warns about any comments containing `TODO` in them when set to `\"Always\"`. If\n-it contains a `#X` (with `X` being a number) in parentheses following the\n-`TODO`, `\"Unnumbered\"` will ignore it.\n-\n-See also [`report_fixme`](#report_fixme).\n-\n ## `required_version`\n \n Require a specific version of rustfmt. If you want to make sure that the"}, {"sha": "4c14d7356891d561d52562bf060eb568dd7ab083", "filename": "src/config/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c8db8593905d09a872601c445005a594ac632dc/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8db8593905d09a872601c445005a594ac632dc/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=4c8db8593905d09a872601c445005a594ac632dc", "patch": "@@ -164,8 +164,6 @@ create_config! {\n     error_on_unformatted: bool, false, false,\n         \"Error if unable to get comments or string literals within max_width, \\\n          or they are left with trailing whitespaces\";\n-    report_todo: ReportTactic, ReportTactic::Never, false,\n-        \"Report all, none or unnumbered occurrences of TODO in source file comments\";\n     report_fixme: ReportTactic, ReportTactic::Never, false,\n         \"Report all, none or unnumbered occurrences of FIXME in source file comments\";\n     ignore: IgnoreList, IgnoreList::default(), false,\n@@ -625,7 +623,6 @@ skip_children = false\n hide_parse_errors = false\n error_on_line_overflow = false\n error_on_unformatted = false\n-report_todo = \"Never\"\n report_fixme = \"Never\"\n ignore = []\n emit_mode = \"Files\""}, {"sha": "8e6999643b1e5906adb65ad22505c93b3567f220", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c8db8593905d09a872601c445005a594ac632dc/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8db8593905d09a872601c445005a594ac632dc/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=4c8db8593905d09a872601c445005a594ac632dc", "patch": "@@ -497,7 +497,7 @@ impl<'a> FormatLines<'a> {\n         skipped_range: &'a [(usize, usize)],\n         config: &'a Config,\n     ) -> FormatLines<'a> {\n-        let issue_seeker = BadIssueSeeker::new(config.report_todo(), config.report_fixme());\n+        let issue_seeker = BadIssueSeeker::new(config.report_fixme());\n         FormatLines {\n             name,\n             skipped_range,\n@@ -537,7 +537,7 @@ impl<'a> FormatLines<'a> {\n             }\n \n             if self.allow_issue_seek && self.format_line {\n-                // Add warnings for bad todos/ fixmes\n+                // Add warnings for bad fixmes\n                 if let Some(issue) = self.issue_seeker.inspect(c) {\n                     self.push_err(ErrorKind::BadIssue(issue), false, false);\n                 }"}, {"sha": "3c39d813a6f9d872c51b980865accc948a00db77", "filename": "src/issues.rs", "status": "modified", "additions": 17, "deletions": 93, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/4c8db8593905d09a872601c445005a594ac632dc/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8db8593905d09a872601c445005a594ac632dc/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=4c8db8593905d09a872601c445005a594ac632dc", "patch": "@@ -6,7 +6,6 @@ use std::fmt;\n \n use crate::config::ReportTactic;\n \n-const TO_DO_CHARS: &[char] = &['t', 'o', 'd', 'o'];\n const FIX_ME_CHARS: &[char] = &['f', 'i', 'x', 'm', 'e'];\n \n // Enabled implementation detail is here because it is\n@@ -17,7 +16,7 @@ fn is_enabled(report_tactic: ReportTactic) -> bool {\n \n #[derive(Clone, Copy)]\n enum Seeking {\n-    Issue { todo_idx: usize, fixme_idx: usize },\n+    Issue { fixme_idx: usize },\n     Number { issue: Issue, part: NumberPart },\n }\n \n@@ -40,7 +39,6 @@ pub struct Issue {\n impl fmt::Display for Issue {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         let msg = match self.issue_type {\n-            IssueType::Todo => \"TODO\",\n             IssueType::Fixme => \"FIXME\",\n         };\n         let details = if self.missing_number {\n@@ -55,7 +53,6 @@ impl fmt::Display for Issue {\n \n #[derive(PartialEq, Eq, Debug, Clone, Copy)]\n enum IssueType {\n-    Todo,\n     Fixme,\n }\n \n@@ -67,35 +64,27 @@ enum IssueClassification {\n \n pub(crate) struct BadIssueSeeker {\n     state: Seeking,\n-    report_todo: ReportTactic,\n     report_fixme: ReportTactic,\n }\n \n impl BadIssueSeeker {\n-    pub(crate) fn new(report_todo: ReportTactic, report_fixme: ReportTactic) -> BadIssueSeeker {\n+    pub(crate) fn new(report_fixme: ReportTactic) -> BadIssueSeeker {\n         BadIssueSeeker {\n-            state: Seeking::Issue {\n-                todo_idx: 0,\n-                fixme_idx: 0,\n-            },\n-            report_todo,\n+            state: Seeking::Issue { fixme_idx: 0 },\n             report_fixme,\n         }\n     }\n \n     pub(crate) fn is_disabled(&self) -> bool {\n-        !is_enabled(self.report_todo) && !is_enabled(self.report_fixme)\n+        !is_enabled(self.report_fixme)\n     }\n \n     // Check whether or not the current char is conclusive evidence for an\n     // unnumbered TO-DO or FIX-ME.\n     pub(crate) fn inspect(&mut self, c: char) -> Option<Issue> {\n         match self.state {\n-            Seeking::Issue {\n-                todo_idx,\n-                fixme_idx,\n-            } => {\n-                self.state = self.inspect_issue(c, todo_idx, fixme_idx);\n+            Seeking::Issue { fixme_idx } => {\n+                self.state = self.inspect_issue(c, fixme_idx);\n             }\n             Seeking::Number { issue, part } => {\n                 let result = self.inspect_number(c, issue, part);\n@@ -104,10 +93,7 @@ impl BadIssueSeeker {\n                     return None;\n                 }\n \n-                self.state = Seeking::Issue {\n-                    todo_idx: 0,\n-                    fixme_idx: 0,\n-                };\n+                self.state = Seeking::Issue { fixme_idx: 0 };\n \n                 if let IssueClassification::Bad(issue) = result {\n                     return Some(issue);\n@@ -118,21 +104,9 @@ impl BadIssueSeeker {\n         None\n     }\n \n-    fn inspect_issue(&mut self, c: char, mut todo_idx: usize, mut fixme_idx: usize) -> Seeking {\n+    fn inspect_issue(&mut self, c: char, mut fixme_idx: usize) -> Seeking {\n         if let Some(lower_case_c) = c.to_lowercase().next() {\n-            if is_enabled(self.report_todo) && lower_case_c == TO_DO_CHARS[todo_idx] {\n-                todo_idx += 1;\n-                if todo_idx == TO_DO_CHARS.len() {\n-                    return Seeking::Number {\n-                        issue: Issue {\n-                            issue_type: IssueType::Todo,\n-                            missing_number: matches!(self.report_todo, ReportTactic::Unnumbered),\n-                        },\n-                        part: NumberPart::OpenParen,\n-                    };\n-                }\n-                fixme_idx = 0;\n-            } else if is_enabled(self.report_fixme) && lower_case_c == FIX_ME_CHARS[fixme_idx] {\n+            if is_enabled(self.report_fixme) && lower_case_c == FIX_ME_CHARS[fixme_idx] {\n                 // Exploit the fact that the character sets of todo and fixme\n                 // are disjoint by adding else.\n                 fixme_idx += 1;\n@@ -145,17 +119,12 @@ impl BadIssueSeeker {\n                         part: NumberPart::OpenParen,\n                     };\n                 }\n-                todo_idx = 0;\n             } else {\n-                todo_idx = 0;\n                 fixme_idx = 0;\n             }\n         }\n \n-        Seeking::Issue {\n-            todo_idx,\n-            fixme_idx,\n-        }\n+        Seeking::Issue { fixme_idx }\n     }\n \n     fn inspect_number(\n@@ -206,20 +175,18 @@ impl BadIssueSeeker {\n #[test]\n fn find_unnumbered_issue() {\n     fn check_fail(text: &str, failing_pos: usize) {\n-        let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered, ReportTactic::Unnumbered);\n+        let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered);\n         assert_eq!(\n             Some(failing_pos),\n             text.find(|c| seeker.inspect(c).is_some())\n         );\n     }\n \n     fn check_pass(text: &str) {\n-        let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered, ReportTactic::Unnumbered);\n+        let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered);\n         assert_eq!(None, text.find(|c| seeker.inspect(c).is_some()));\n     }\n \n-    check_fail(\"TODO\\n\", 4);\n-    check_pass(\" TO FIX DOME\\n\");\n     check_fail(\" \\n FIXME\\n\", 8);\n     check_fail(\"FIXME(\\n\", 6);\n     check_fail(\"FIXME(#\\n\", 7);\n@@ -228,71 +195,28 @@ fn find_unnumbered_issue() {\n     check_pass(\"FIXME(#1222)\\n\");\n     check_fail(\"FIXME(#12\\n22)\\n\", 9);\n     check_pass(\"FIXME(@maintainer, #1222, hello)\\n\");\n-    check_fail(\"TODO(#22) FIXME\\n\", 15);\n }\n \n #[test]\n fn find_issue() {\n-    fn is_bad_issue(text: &str, report_todo: ReportTactic, report_fixme: ReportTactic) -> bool {\n-        let mut seeker = BadIssueSeeker::new(report_todo, report_fixme);\n+    fn is_bad_issue(text: &str, report_fixme: ReportTactic) -> bool {\n+        let mut seeker = BadIssueSeeker::new(report_fixme);\n         text.chars().any(|c| seeker.inspect(c).is_some())\n     }\n \n-    assert!(is_bad_issue(\n-        \"TODO(@maintainer, #1222, hello)\\n\",\n-        ReportTactic::Always,\n-        ReportTactic::Never,\n-    ));\n-\n-    assert!(!is_bad_issue(\n-        \"TODO: no number\\n\",\n-        ReportTactic::Never,\n-        ReportTactic::Always,\n-    ));\n-\n-    assert!(!is_bad_issue(\n-        \"Todo: mixed case\\n\",\n-        ReportTactic::Never,\n-        ReportTactic::Always,\n-    ));\n-\n-    assert!(is_bad_issue(\n-        \"This is a FIXME(#1)\\n\",\n-        ReportTactic::Never,\n-        ReportTactic::Always,\n-    ));\n+    assert!(is_bad_issue(\"This is a FIXME(#1)\\n\", ReportTactic::Always));\n \n     assert!(is_bad_issue(\n         \"This is a FixMe(#1) mixed case\\n\",\n-        ReportTactic::Never,\n         ReportTactic::Always,\n     ));\n \n-    assert!(!is_bad_issue(\n-        \"bad FIXME\\n\",\n-        ReportTactic::Always,\n-        ReportTactic::Never,\n-    ));\n+    assert!(!is_bad_issue(\"bad FIXME\\n\", ReportTactic::Never));\n }\n \n #[test]\n fn issue_type() {\n-    let mut seeker = BadIssueSeeker::new(ReportTactic::Always, ReportTactic::Never);\n-    let expected = Some(Issue {\n-        issue_type: IssueType::Todo,\n-        missing_number: false,\n-    });\n-\n-    assert_eq!(\n-        expected,\n-        \"TODO(#100): more awesomeness\"\n-            .chars()\n-            .map(|c| seeker.inspect(c))\n-            .find(Option::is_some)\n-            .unwrap()\n-    );\n-\n-    let mut seeker = BadIssueSeeker::new(ReportTactic::Never, ReportTactic::Unnumbered);\n+    let mut seeker = BadIssueSeeker::new(ReportTactic::Unnumbered);\n     let expected = Some(Issue {\n         issue_type: IssueType::Fixme,\n         missing_number: true,"}, {"sha": "0eda9e4b116a32b90711320144262126b62d71cc", "filename": "src/test/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c8db8593905d09a872601c445005a594ac632dc/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8db8593905d09a872601c445005a594ac632dc/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=4c8db8593905d09a872601c445005a594ac632dc", "patch": "@@ -9,7 +9,7 @@ use std::process::{Command, Stdio};\n use std::str::Chars;\n use std::thread;\n \n-use crate::config::{Color, Config, EmitMode, FileName, NewlineStyle, ReportTactic};\n+use crate::config::{Color, Config, EmitMode, FileName, NewlineStyle};\n use crate::formatting::{ReportedErrors, SourceFile};\n use crate::rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, ModifiedChunk, OutputWriter};\n use crate::source_file;\n@@ -688,9 +688,6 @@ fn read_config(filename: &Path) -> Config {\n         }\n     }\n \n-    // Don't generate warnings for to-do items.\n-    config.set().report_todo(ReportTactic::Never);\n-\n     config\n }\n "}, {"sha": "598edda6abee45286f0291a160811d69809308b4", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c8db8593905d09a872601c445005a594ac632dc/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4c8db8593905d09a872601c445005a594ac632dc/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=4c8db8593905d09a872601c445005a594ac632dc", "patch": "@@ -6,7 +6,6 @@ brace_style = \"SameLineWhere\"\n fn_args_layout = \"Tall\"\n trailing_comma = \"Vertical\"\n indent_style = \"Block\"\n-report_todo = \"Always\"\n report_fixme = \"Never\"\n reorder_imports = false\n format_strings = true"}]}