{"sha": "d9cf601ae822d07412a79aeedeabb802aa94cb34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5Y2Y2MDFhZTgyMmQwNzQxMmE3OWFlZWRlYWJiODAyYWE5NGNiMzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-12T05:27:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-12T05:27:45Z"}, "message": "Auto merge of #39770 - alexcrichton:configure-clean, r=brson\n\nDelete more swaths of the configure script\n\nThis PR deletes more swaths of the `./configure` script which are either no longer necessary or already available in rustbuild (where an implementation is preferred)", "tree": {"sha": "b633d8ce8cc484ab7b31210aae59d5f043c29c99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b633d8ce8cc484ab7b31210aae59d5f043c29c99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9cf601ae822d07412a79aeedeabb802aa94cb34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9cf601ae822d07412a79aeedeabb802aa94cb34", "html_url": "https://github.com/rust-lang/rust/commit/d9cf601ae822d07412a79aeedeabb802aa94cb34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9cf601ae822d07412a79aeedeabb802aa94cb34/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "744e69663e910ece9a7cf754049b09d6afb22e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/744e69663e910ece9a7cf754049b09d6afb22e9f", "html_url": "https://github.com/rust-lang/rust/commit/744e69663e910ece9a7cf754049b09d6afb22e9f"}, {"sha": "f8ca805422db8ff5c5112526db0794603b259577", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ca805422db8ff5c5112526db0794603b259577", "html_url": "https://github.com/rust-lang/rust/commit/f8ca805422db8ff5c5112526db0794603b259577"}], "stats": {"total": 379, "additions": 27, "deletions": 352}, "files": [{"sha": "9b34e214214a5e173ec7bbc9957e47695be8a5b4", "filename": "configure", "status": "modified", "additions": 1, "deletions": 340, "changes": 341, "blob_url": "https://github.com/rust-lang/rust/blob/d9cf601ae822d07412a79aeedeabb802aa94cb34/configure", "raw_url": "https://github.com/rust-lang/rust/raw/d9cf601ae822d07412a79aeedeabb802aa94cb34/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=d9cf601ae822d07412a79aeedeabb802aa94cb34", "patch": "@@ -384,207 +384,6 @@ need_cmd sed\n need_cmd file\n need_cmd make\n \n-msg \"inspecting environment\"\n-\n-CFG_OSTYPE=$(uname -s)\n-CFG_CPUTYPE=$(uname -m)\n-\n-if [ $CFG_OSTYPE = Darwin -a $CFG_CPUTYPE = i386 ]\n-then\n-    # Darwin's `uname -s` lies and always returns i386. We have to use sysctl\n-    # instead.\n-    if sysctl hw.optional.x86_64 | grep -q ': 1'\n-    then\n-        CFG_CPUTYPE=x86_64\n-    fi\n-fi\n-\n-# The goal here is to come up with the same triple as LLVM would,\n-# at least for the subset of platforms we're willing to target.\n-\n-case $CFG_OSTYPE in\n-\n-    Linux)\n-        CFG_OSTYPE=unknown-linux-gnu\n-        ;;\n-\n-    FreeBSD)\n-        CFG_OSTYPE=unknown-freebsd\n-        ;;\n-\n-    DragonFly)\n-        CFG_OSTYPE=unknown-dragonfly\n-        ;;\n-\n-    Bitrig)\n-        CFG_OSTYPE=unknown-bitrig\n-        ;;\n-\n-    OpenBSD)\n-        CFG_OSTYPE=unknown-openbsd\n-       ;;\n-\n-    NetBSD)\n-\t    CFG_OSTYPE=unknown-netbsd\n-\t    ;;\n-\n-    Darwin)\n-        CFG_OSTYPE=apple-darwin\n-        ;;\n-\n-    SunOS)\n-        CFG_OSTYPE=sun-solaris\n-        CFG_CPUTYPE=$(isainfo -n)\n-        ;;\n-\n-    Haiku)\n-        CFG_OSTYPE=unknown-haiku\n-        ;;\n-\n-    MINGW*)\n-        # msys' `uname` does not print gcc configuration, but prints msys\n-        # configuration. so we cannot believe `uname -m`:\n-        # msys1 is always i686 and msys2 is always x86_64.\n-        # instead, msys defines $MSYSTEM which is MINGW32 on i686 and\n-        # MINGW64 on x86_64.\n-        CFG_CPUTYPE=i686\n-        CFG_OSTYPE=pc-windows-gnu\n-        if [ \"$MSYSTEM\" = MINGW64 ]\n-        then\n-            CFG_CPUTYPE=x86_64\n-        fi\n-        ;;\n-\n-    MSYS*)\n-        CFG_OSTYPE=pc-windows-gnu\n-        ;;\n-\n-# Thad's Cygwin identifiers below\n-\n-#   Vista 32 bit\n-    CYGWIN_NT-6.0)\n-        CFG_OSTYPE=pc-windows-gnu\n-        CFG_CPUTYPE=i686\n-        ;;\n-\n-#   Vista 64 bit\n-    CYGWIN_NT-6.0-WOW64)\n-        CFG_OSTYPE=pc-windows-gnu\n-        CFG_CPUTYPE=x86_64\n-        ;;\n-\n-#   Win 7 32 bit\n-    CYGWIN_NT-6.1)\n-        CFG_OSTYPE=pc-windows-gnu\n-        CFG_CPUTYPE=i686\n-        ;;\n-\n-#   Win 7 64 bit\n-    CYGWIN_NT-6.1-WOW64)\n-        CFG_OSTYPE=pc-windows-gnu\n-        CFG_CPUTYPE=x86_64\n-        ;;\n-\n-#   Win 8 # uname -s on 64-bit cygwin does not contain WOW64, so simply use uname -m to detect arch (works in my install)\n-    CYGWIN_NT-6.3)\n-    \tCFG_OSTYPE=pc-windows-gnu\n-    \t;;\n-# We do not detect other OS such as XP/2003 using 64 bit using uname.\n-# If we want to in the future, we will need to use Cygwin - Chuck's csih helper in /usr/lib/csih/winProductName.exe or alternative.\n-    *)\n-        err \"unknown OS type: $CFG_OSTYPE\"\n-        ;;\n-esac\n-\n-\n-case $CFG_CPUTYPE in\n-\n-    i386 | i486 | i686 | i786 | x86)\n-        CFG_CPUTYPE=i686\n-        ;;\n-\n-    xscale | arm)\n-        CFG_CPUTYPE=arm\n-        ;;\n-\n-    armv6l)\n-        CFG_CPUTYPE=arm\n-        CFG_OSTYPE=\"${CFG_OSTYPE}eabihf\"\n-        ;;\n-\n-    armv7l | armv8l)\n-        CFG_CPUTYPE=armv7\n-        CFG_OSTYPE=\"${CFG_OSTYPE}eabihf\"\n-        ;;\n-\n-    aarch64 | arm64)\n-        CFG_CPUTYPE=aarch64\n-        ;;\n-\n-    powerpc | ppc)\n-        CFG_CPUTYPE=powerpc\n-        ;;\n-\n-    powerpc64 | ppc64)\n-        CFG_CPUTYPE=powerpc64\n-        ;;\n-\n-    powerpc64le | ppc64le)\n-        CFG_CPUTYPE=powerpc64le\n-        ;;\n-\n-    s390x)\n-        CFG_CPUTYPE=s390x\n-        ;;\n-\n-    x86_64 | x86-64 | x64 | amd64)\n-        CFG_CPUTYPE=x86_64\n-        ;;\n-\n-    mips | mips64)\n-        if [ \"$CFG_CPUTYPE\" = \"mips64\" ]; then\n-            CFG_OSTYPE=\"${CFG_OSTYPE}abi64\"\n-        fi\n-        ENDIAN=$(printf '\\1' | od -dAn)\n-        if [ \"$ENDIAN\" -eq 1 ]; then\n-            CFG_CPUTYPE=\"${CFG_CPUTYPE}el\"\n-        elif [ \"$ENDIAN\" -ne 256 ]; then\n-            err \"unknown endianness: $ENDIAN (expecting 1 for little or 256 for big)\"\n-        fi\n-        ;;\n-\n-    BePC)\n-        CFG_CPUTYPE=i686\n-        ;;\n-\n-    *)\n-        err \"unknown CPU type: $CFG_CPUTYPE\"\n-esac\n-\n-# Detect 64 bit linux systems with 32 bit userland and force 32 bit compilation\n-if [ $CFG_OSTYPE = unknown-linux-gnu -a $CFG_CPUTYPE = x86_64 ]\n-then\n-    # $SHELL does not exist in standard 'sh', so probably only exists\n-    # if configure is running in an interactive bash shell. /usr/bin/env\n-    # exists *everywhere*.\n-    BIN_TO_PROBE=\"$SHELL\"\n-    if [ ! -r \"$BIN_TO_PROBE\" ]; then\n-        if [ -r \"/usr/bin/env\" ]; then\n-            BIN_TO_PROBE=\"/usr/bin/env\"\n-        else\n-            warn \"Cannot check if the userland is i686 or x86_64\"\n-        fi\n-    fi\n-    file -L \"$BIN_TO_PROBE\" | grep -q \"x86[_-]64\"\n-    if [ $? != 0 ]; then\n-        msg \"i686 userland on x86_64 Linux kernel\"\n-        CFG_CPUTYPE=i686\n-    fi\n-fi\n-\n-\n-DEFAULT_BUILD=\"${CFG_CPUTYPE}-${CFG_OSTYPE}\"\n-\n CFG_SRC_DIR=\"$(abs_path $(dirname $0))/\"\n CFG_SRC_DIR_RELATIVE=\"$(dirname $0)/\"\n CFG_BUILD_DIR=\"$(pwd)/\"\n@@ -673,7 +472,7 @@ valopt infodir \"${CFG_PREFIX}/share/info\" \"install additional info\"\n valopt llvm-root \"\" \"set LLVM root\"\n valopt python \"\" \"set path to python\"\n valopt jemalloc-root \"\" \"set directory where libjemalloc_pic.a is located\"\n-valopt build \"${DEFAULT_BUILD}\" \"GNUs ./configure syntax LLVM build triple\"\n+valopt build \"\" \"GNUs ./configure syntax LLVM build triple\"\n valopt android-cross-path \"\" \"Android NDK standalone path (deprecated)\"\n valopt i686-linux-android-ndk \"\" \"i686-linux-android NDK standalone path\"\n valopt arm-linux-androideabi-ndk \"\" \"arm-linux-androideabi NDK standalone path\"\n@@ -821,76 +620,6 @@ if [ $(echo $python_version | grep -c '^Python 2\\.7') -ne 1 ]; then\n     err \"Found $python_version, but Python 2.7 is required\"\n fi\n \n-# If we have no git directory then we are probably a tarball distribution\n-# and shouldn't attempt to load submodules\n-if [ ! -e ${CFG_SRC_DIR}.git ]\n-then\n-    probe CFG_GIT          git\n-    msg \"git: no git directory. disabling submodules\"\n-    CFG_DISABLE_MANAGE_SUBMODULES=1\n-else\n-    probe_need CFG_GIT     git\n-fi\n-\n-# Use `md5sum` on GNU platforms, or `md5 -q` on BSD\n-probe CFG_MD5              md5\n-probe CFG_MD5SUM           md5sum\n-if [ -n \"$CFG_MD5\" ]\n-then\n-    CFG_HASH_COMMAND=\"$CFG_MD5 -q | cut -c 1-8\"\n-elif [ -n \"$CFG_MD5SUM\" ]\n-then\n-    CFG_HASH_COMMAND=\"$CFG_MD5SUM | cut -c 1-8\"\n-else\n-    err 'could not find one of: md5 md5sum'\n-fi\n-putvar CFG_HASH_COMMAND\n-\n-probe CFG_CLANG            clang++\n-probe CFG_CCACHE           ccache\n-probe CFG_GCC              gcc\n-probe CFG_LD               ld\n-probe CFG_VALGRIND         valgrind\n-probe CFG_PERF             perf\n-probe CFG_ISCC             iscc\n-probe CFG_ANTLR4           antlr4\n-probe CFG_GRUN             grun\n-probe CFG_FLEX             flex\n-probe CFG_BISON            bison\n-probe CFG_GDB              gdb\n-probe CFG_LLDB             lldb\n-\n-if [ -n \"$CFG_ENABLE_NINJA\" ]\n-then\n-  probe CFG_NINJA            ninja\n-  if [ -z \"$CFG_NINJA\" ]\n-  then\n-    # On Debian and Fedora, the `ninja` binary is an IRC bot, so the build tool was\n-    # renamed. Handle this case.\n-    probe CFG_NINJA            ninja-build\n-  fi\n-fi\n-\n-# For building LLVM\n-if [ -z \"$CFG_LLVM_ROOT\" ]\n-then\n-  probe_need CFG_CMAKE cmake\n-fi\n-\n-# On MacOS X, invoking `javac` pops up a dialog if the JDK is not\n-# installed. Since `javac` is only used if `antlr4` is available,\n-# probe for it only in this case.\n-if [ -n \"$CFG_ANTLR4\" ]\n-then\n-   CFG_ANTLR4_JAR=\"\\\"$(find /usr/ -name antlr-complete.jar 2>/dev/null | head -n 1)\\\"\"\n-   if [ \"x\" = \"x$CFG_ANTLR4_JAR\" ]\n-   then\n-     CFG_ANTLR4_JAR=\"\\\"$(find ~ -name antlr-complete.jar 2>/dev/null | head -n 1)\\\"\"\n-   fi\n-   putvar CFG_ANTLR4_JAR      $CFG_ANTLR4_JAR\n-   probe CFG_JAVAC            javac\n-fi\n-\n # the valgrind rpass tests will fail if you don't have a valgrind, but they're\n # only disabled if you opt out.\n if [ -z \"$CFG_VALGRIND\" ]\n@@ -905,41 +634,6 @@ then\n     fi\n fi\n \n-if [ -n \"$CFG_LLDB\" ]\n-then\n-    # Store LLDB's version\n-    CFG_LLDB_VERSION=$($CFG_LLDB --version 2>/dev/null | head -1)\n-    putvar CFG_LLDB_VERSION\n-\n-    # If CFG_LLDB_PYTHON_DIR is not already set from the outside and valid, try to read it from\n-    # LLDB via the -P commandline options.\n-    if [ -z \"$CFG_LLDB_PYTHON_DIR\" ] || [ ! -d \"$CFG_LLDB_PYTHON_DIR\" ]\n-    then\n-        CFG_LLDB_PYTHON_DIR=$($CFG_LLDB -P)\n-\n-        # If CFG_LLDB_PYTHON_DIR is not a valid directory, set it to something more readable\n-        if [ ! -d \"$CFG_LLDB_PYTHON_DIR\" ]\n-        then\n-            CFG_LLDB_PYTHON_DIR=\"LLDB_PYTHON_DIRECTORY_NOT_FOUND\"\n-        fi\n-\n-        putvar CFG_LLDB_PYTHON_DIR\n-    fi\n-fi\n-\n-# LLDB tests on OSX require /usr/bin/python, not something like Homebrew's\n-# /usr/local/bin/python. We're loading a compiled module for LLDB tests which is\n-# only compatible with the system.\n-case $CFG_BUILD in\n-    *-apple-darwin)\n-        CFG_LLDB_PYTHON=/usr/bin/python\n-        ;;\n-    *)\n-        CFG_LLDB_PYTHON=$CFG_PYTHON\n-        ;;\n-esac\n-putvar CFG_LLDB_PYTHON\n-\n # Do some sanity checks if running on buildbot\n # (these env vars are set by rust-buildbot)\n if [ -n \"$RUST_DIST_SERVER\" -a -n \"$ALLOW_NONZERO_RLIMIT_CORE\" ]; then\n@@ -952,10 +646,6 @@ if [ -n \"$RUST_DIST_SERVER\" -a -n \"$ALLOW_NONZERO_RLIMIT_CORE\" ]; then\n    fi\n fi\n \n-step_msg \"looking for target specific programs\"\n-\n-probe CFG_ADB        adb\n-\n BIN_SUF=\n if [ \"$CFG_OSTYPE\" = \"pc-windows-gnu\" ] || [ \"$CFG_OSTYPE\" = \"pc-windows-msvc\" ]\n then\n@@ -1021,10 +711,6 @@ CFG_MANDIR=${CFG_MANDIR%/}\n CFG_DOCDIR=${CFG_DOCDIR%/}\n CFG_HOST=\"$(echo $CFG_HOST | tr ',' ' ')\"\n CFG_TARGET=\"$(echo $CFG_TARGET | tr ',' ' ')\"\n-CFG_SUPPORTED_TARGET=\"\"\n-for target_file in ${CFG_SRC_DIR}mk/cfg/*.mk; do\n-  CFG_SUPPORTED_TARGET=\"${CFG_SUPPORTED_TARGET} $(basename \"$target_file\" .mk)\"\n-done\n \n # copy build-triples to host-triples so that builds are a subset of hosts\n V_TEMP=\"\"\n@@ -1064,31 +750,6 @@ putvar CFG_MANDIR\n putvar CFG_DOCDIR\n putvar CFG_USING_LIBCPP\n \n-# Avoid spurious warnings from clang by feeding it original source on\n-# ccache-miss rather than preprocessed input.\n-if [ -n \"$CFG_ENABLE_CCACHE\" ] && [ -n \"$CFG_USING_CLANG\" ]\n-then\n-    CFG_CCACHE_CPP2=1\n-    putvar CFG_CCACHE_CPP2\n-fi\n-\n-if [ -n \"$CFG_ENABLE_CCACHE\" ]\n-then\n-    CFG_CCACHE_BASEDIR=${CFG_SRC_DIR}\n-    putvar CFG_CCACHE_BASEDIR\n-fi\n-\n-\n-putvar CFG_LLVM_SRC_DIR\n-\n-for t in $CFG_HOST\n-do\n-    CFG_LLVM_BUILD_DIR=$(echo CFG_LLVM_BUILD_DIR_${t} | tr - _)\n-    CFG_LLVM_INST_DIR=$(echo CFG_LLVM_INST_DIR_${t} | tr - _)\n-    putvar $CFG_LLVM_BUILD_DIR\n-    putvar $CFG_LLVM_INST_DIR\n-done\n-\n msg\n copy_if_changed ${CFG_SRC_DIR}src/bootstrap/mk/Makefile.in ./Makefile\n move_if_changed config.tmp config.mk"}, {"sha": "b326f95e505fb8b8c2e314d5877e70a31d6f5333", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d9cf601ae822d07412a79aeedeabb802aa94cb34/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/d9cf601ae822d07412a79aeedeabb802aa94cb34/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=d9cf601ae822d07412a79aeedeabb802aa94cb34", "patch": "@@ -296,8 +296,10 @@ def get_toml(self, key):\n \n     def get_mk(self, key):\n         for line in iter(self.config_mk.splitlines()):\n-            if line.startswith(key):\n-                return line[line.find(':=') + 2:].strip()\n+            if line.startswith(key + ' '):\n+                var = line[line.find(':=') + 2:].strip()\n+                if var != '':\n+                    return var\n         return None\n \n     def cargo(self):\n@@ -438,6 +440,8 @@ def build_triple(self):\n                 sys.exit(err)\n         elif ostype == 'Darwin':\n             ostype = 'apple-darwin'\n+        elif ostype == 'Haiku':\n+            ostype = 'unknown-haiku'\n         elif ostype.startswith('MINGW'):\n             # msys' `uname` does not print gcc configuration, but prints msys\n             # configuration. so we cannot believe `uname -m`:\n@@ -465,9 +469,12 @@ def build_triple(self):\n             cputype = 'i686'\n         elif cputype in {'xscale', 'arm'}:\n             cputype = 'arm'\n-        elif cputype in {'armv7l', 'armv8l'}:\n+        elif cputype in {'armv6l', 'armv7l', 'armv8l'}:\n             cputype = 'arm'\n             ostype += 'eabihf'\n+        elif cputype == 'armv7l':\n+            cputype = 'armv7'\n+            ostype += 'eabihf'\n         elif cputype == 'aarch64':\n             cputype = 'aarch64'\n         elif cputype == 'arm64':\n@@ -488,12 +495,20 @@ def build_triple(self):\n                 raise ValueError('unknown byteorder: ' + sys.byteorder)\n             # only the n64 ABI is supported, indicate it\n             ostype += 'abi64'\n-        elif cputype in {'powerpc', 'ppc', 'ppc64'}:\n+        elif cputype in {'powerpc', 'ppc'}:\n             cputype = 'powerpc'\n+        elif cputype in {'powerpc64', 'ppc64'}:\n+            cputype = 'powerpc64'\n+        elif cputype in {'powerpc64le', 'ppc64le'}:\n+            cputype = 'powerpc64le'\n         elif cputype == 'sparcv9':\n             pass\n         elif cputype in {'amd64', 'x86_64', 'x86-64', 'x64'}:\n             cputype = 'x86_64'\n+        elif cputype == 's390x':\n+            cputype = 's390x'\n+        elif cputype == 'BePC':\n+            cputype = 'i686'\n         else:\n             err = \"unknown cpu type: \" + cputype\n             if self.verbose:"}, {"sha": "431d4a333d3375f07ef942dc92017b672ff77801", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9cf601ae822d07412a79aeedeabb802aa94cb34/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9cf601ae822d07412a79aeedeabb802aa94cb34/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=d9cf601ae822d07412a79aeedeabb802aa94cb34", "patch": "@@ -463,14 +463,13 @@ impl Config {\n             }\n \n             match key {\n-                \"CFG_BUILD\" => self.build = value.to_string(),\n-                \"CFG_HOST\" => {\n-                    self.host = value.split(\" \").map(|s| s.to_string())\n-                                     .collect();\n-                }\n-                \"CFG_TARGET\" => {\n-                    self.target = value.split(\" \").map(|s| s.to_string())\n-                                       .collect();\n+                \"CFG_BUILD\" if value.len() > 0 => self.build = value.to_string(),\n+                \"CFG_HOST\" if value.len() > 0 => {\n+                    self.host.extend(value.split(\" \").map(|s| s.to_string()));\n+\n+                }\n+                \"CFG_TARGET\" if value.len() > 0 => {\n+                    self.target.extend(value.split(\" \").map(|s| s.to_string()));\n                 }\n                 \"CFG_MUSL_ROOT\" if value.len() > 0 => {\n                     self.musl_root = Some(parse_configure_path(value));"}]}