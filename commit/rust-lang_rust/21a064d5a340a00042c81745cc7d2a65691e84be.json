{"sha": "21a064d5a340a00042c81745cc7d2a65691e84be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYTA2NGQ1YTM0MGEwMDA0MmM4MTc0NWNjN2QyYTY1NjkxZTg0YmU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-10T22:49:56Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-14T04:29:47Z"}, "message": "Don't require an allocation for on_exit messages\n\nInstead, use an enum to allow running both a procedure and sending the task\nresult over a channel. I expect the common case to be sending on a channel (e.g.\ntask::try), so don't require an extra allocation in the common case.\n\ncc #11389", "tree": {"sha": "84b16e6b5f05d3c965ec20d617521f9d19e5dc1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84b16e6b5f05d3c965ec20d617521f9d19e5dc1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21a064d5a340a00042c81745cc7d2a65691e84be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21a064d5a340a00042c81745cc7d2a65691e84be", "html_url": "https://github.com/rust-lang/rust/commit/21a064d5a340a00042c81745cc7d2a65691e84be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21a064d5a340a00042c81745cc7d2a65691e84be/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaead93c4554b685935b70565fc1bb54edd945d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaead93c4554b685935b70565fc1bb54edd945d6", "html_url": "https://github.com/rust-lang/rust/commit/aaead93c4554b685935b70565fc1bb54edd945d6"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "6d61f8e3919002848a4918a636c1bed93881fbdf", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21a064d5a340a00042c81745cc7d2a65691e84be/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a064d5a340a00042c81745cc7d2a65691e84be/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=21a064d5a340a00042c81745cc7d2a65691e84be", "patch": "@@ -22,7 +22,7 @@ use std::cast;\n use std::rt::Runtime;\n use std::rt::rtio;\n use std::rt::local::Local;\n-use std::rt::task::{Task, BlockedTask};\n+use std::rt::task::{Task, BlockedTask, SendMessage};\n use std::task::TaskOpts;\n use std::unstable::mutex::Mutex;\n \n@@ -131,8 +131,7 @@ impl GreenTask {\n             task.stdout = stdout;\n             match notify_chan {\n                 Some(chan) => {\n-                    let on_exit = proc(task_result) { chan.send(task_result) };\n-                    task.death.on_exit = Some(on_exit);\n+                    task.death.on_exit = Some(SendMessage(chan));\n                 }\n                 None => {}\n             }"}, {"sha": "a9c3afbbb16c8d0f6bf5f7cc5aa603be6c3dd2d5", "filename": "src/libnative/task.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/21a064d5a340a00042c81745cc7d2a65691e84be/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a064d5a340a00042c81745cc7d2a65691e84be/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=21a064d5a340a00042c81745cc7d2a65691e84be", "patch": "@@ -18,7 +18,7 @@ use std::cast;\n use std::rt::env;\n use std::rt::local::Local;\n use std::rt::rtio;\n-use std::rt::task::{Task, BlockedTask};\n+use std::rt::task::{Task, BlockedTask, SendMessage};\n use std::rt::thread::Thread;\n use std::rt;\n use std::task::TaskOpts;\n@@ -68,10 +68,7 @@ pub fn spawn_opts(opts: TaskOpts, f: proc()) {\n     task.stderr = stderr;\n     task.stdout = stdout;\n     match notify_chan {\n-        Some(chan) => {\n-            let on_exit = proc(task_result) { chan.send(task_result) };\n-            task.death.on_exit = Some(on_exit);\n-        }\n+        Some(chan) => { task.death.on_exit = Some(SendMessage(chan)); }\n         None => {}\n     }\n "}, {"sha": "0719523af775fd3058b1c5a82c3b9bcf8dbd4220", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/21a064d5a340a00042c81745cc7d2a65691e84be/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a064d5a340a00042c81745cc7d2a65691e84be/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=21a064d5a340a00042c81745cc7d2a65691e84be", "patch": "@@ -17,6 +17,7 @@ use any::AnyOwnExt;\n use cast;\n use cleanup;\n use clone::Clone;\n+use comm::Chan;\n use io::Writer;\n use iter::{Iterator, Take};\n use local_data;\n@@ -67,11 +68,17 @@ pub enum BlockedTask {\n     Shared(UnsafeArc<AtomicUint>),\n }\n \n+pub enum DeathAction {\n+    /// Action to be done with the exit code. If set, also makes the task wait\n+    /// until all its watched children exit before collecting the status.\n+    Execute(proc(TaskResult)),\n+    /// A channel to send the result of the task on when the task exits\n+    SendMessage(Chan<TaskResult>),\n+}\n+\n /// Per-task state related to task death, killing, failure, etc.\n pub struct Death {\n-    // Action to be done with the exit code. If set, also makes the task wait\n-    // until all its watched children exit before collecting the status.\n-    on_exit: Option<proc(TaskResult)>,\n+    on_exit: Option<DeathAction>,\n }\n \n pub struct BlockedTasks {\n@@ -381,7 +388,8 @@ impl Death {\n     /// Collect failure exit codes from children and propagate them to a parent.\n     pub fn collect_failure(&mut self, result: TaskResult) {\n         match self.on_exit.take() {\n-            Some(f) => f(result),\n+            Some(Execute(f)) => f(result),\n+            Some(SendMessage(ch)) => { ch.try_send(result); }\n             None => {}\n         }\n     }"}]}