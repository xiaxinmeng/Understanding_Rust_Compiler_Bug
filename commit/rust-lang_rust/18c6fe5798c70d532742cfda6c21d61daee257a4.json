{"sha": "18c6fe5798c70d532742cfda6c21d61daee257a4", "node_id": "C_kwDOAAsO6NoAKDE4YzZmZTU3OThjNzBkNTMyNzQyY2ZkYTZjMjFkNjFkYWVlMjU3YTQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-14T15:16:51Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-19T12:56:31Z"}, "message": "Remove the source archive functionality of ArchiveWriter\n\nWe now build archives through strictly additive means rather than taking\nan existing archive and potentially substracting parts.", "tree": {"sha": "624ba9d59f92c8e97370c4fb8ee527df42f48359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/624ba9d59f92c8e97370c4fb8ee527df42f48359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18c6fe5798c70d532742cfda6c21d61daee257a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18c6fe5798c70d532742cfda6c21d61daee257a4", "html_url": "https://github.com/rust-lang/rust/commit/18c6fe5798c70d532742cfda6c21d61daee257a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18c6fe5798c70d532742cfda6c21d61daee257a4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ff0df51024a96e91f41c3760b5676ebbdc7a2c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0", "html_url": "https://github.com/rust-lang/rust/commit/7ff0df51024a96e91f41c3760b5676ebbdc7a2c0"}], "stats": {"total": 93, "additions": 11, "deletions": 82}, "files": [{"sha": "0812f930b5dea20c06b97e93127c9105174c5dd5", "filename": "compiler/rustc_codegen_cranelift/src/archive.rs", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/18c6fe5798c70d532742cfda6c21d61daee257a4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c6fe5798c70d532742cfda6c21d61daee257a4/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Farchive.rs?ref=18c6fe5798c70d532742cfda6c21d61daee257a4", "patch": "@@ -30,34 +30,16 @@ pub(crate) struct ArArchiveBuilder<'a> {\n }\n \n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n-    fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> Self {\n-        let (src_archives, entries) = if let Some(input) = input {\n-            let read_cache = ReadCache::new(File::open(input).unwrap());\n-            let archive = ArchiveFile::parse(&read_cache).unwrap();\n-            let mut entries = Vec::new();\n-\n-            for entry in archive.members() {\n-                let entry = entry.unwrap();\n-                entries.push((\n-                    entry.name().to_vec(),\n-                    ArchiveEntry::FromArchive { archive_index: 0, file_range: entry.file_range() },\n-                ));\n-            }\n-\n-            (vec![read_cache.into_inner()], entries)\n-        } else {\n-            (vec![], Vec::new())\n-        };\n-\n+    fn new(sess: &'a Session, output: &Path) -> Self {\n         ArArchiveBuilder {\n             sess,\n             dst: output.to_path_buf(),\n             use_gnu_style_archive: sess.target.archive_format == \"gnu\",\n             // FIXME fix builtin ranlib on macOS\n             no_builtin_ranlib: sess.target.is_like_osx,\n \n-            src_archives,\n-            entries,\n+            src_archives: vec![],\n+            entries: vec![],\n         }\n     }\n "}, {"sha": "411ec27139e426d20968c8e7ba8091f5c3e9f291", "filename": "compiler/rustc_codegen_gcc/src/archive.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/18c6fe5798c70d532742cfda6c21d61daee257a4/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c6fe5798c70d532742cfda6c21d61daee257a4/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Farchive.rs?ref=18c6fe5798c70d532742cfda6c21d61daee257a4", "patch": "@@ -32,7 +32,7 @@ pub struct ArArchiveBuilder<'a> {\n }\n \n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n-    fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> Self {\n+    fn new(sess: &'a Session, output: &Path) -> Self {\n         let config = ArchiveConfig {\n             sess,\n             dst: output.to_path_buf(),\n@@ -41,32 +41,10 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             use_gnu_style_archive: sess.target.options.archive_format == \"gnu\",\n         };\n \n-        let (src_archives, entries) = if let Some(input) = input {\n-            let mut archive = ar::Archive::new(File::open(input).unwrap());\n-            let mut entries = Vec::new();\n-\n-            let mut i = 0;\n-            while let Some(entry) = archive.next_entry() {\n-                let entry = entry.unwrap();\n-                entries.push((\n-                    String::from_utf8(entry.header().identifier().to_vec()).unwrap(),\n-                    ArchiveEntry::FromArchive {\n-                        archive_index: 0,\n-                        entry_index: i,\n-                    },\n-                ));\n-                i += 1;\n-            }\n-\n-            (vec![(input.to_owned(), archive)], entries)\n-        } else {\n-            (vec![], Vec::new())\n-        };\n-\n         ArArchiveBuilder {\n             config,\n-            src_archives,\n-            entries,\n+            src_archives: vec![],\n+            entries: vec![],\n         }\n     }\n "}, {"sha": "58ad8af74723a4a683e414db2159085d966451d6", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/18c6fe5798c70d532742cfda6c21d61daee257a4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c6fe5798c70d532742cfda6c21d61daee257a4/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=18c6fe5798c70d532742cfda6c21d61daee257a4", "patch": "@@ -20,9 +20,7 @@ use rustc_session::Session;\n pub struct LlvmArchiveBuilder<'a> {\n     sess: &'a Session,\n     dst: PathBuf,\n-    src: Option<PathBuf>,\n     additions: Vec<Addition>,\n-    src_archive: Option<Option<ArchiveRO>>,\n }\n \n enum Addition {\n@@ -59,14 +57,8 @@ fn llvm_machine_type(cpu: &str) -> LLVMMachineType {\n impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n     /// Creates a new static archive, ready for modifying the archive specified\n     /// by `config`.\n-    fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> LlvmArchiveBuilder<'a> {\n-        LlvmArchiveBuilder {\n-            sess,\n-            dst: output.to_path_buf(),\n-            src: input.map(|p| p.to_path_buf()),\n-            additions: Vec::new(),\n-            src_archive: None,\n-        }\n+    fn new(sess: &'a Session, output: &Path) -> LlvmArchiveBuilder<'a> {\n+        LlvmArchiveBuilder { sess, dst: output.to_path_buf(), additions: Vec::new() }\n     }\n \n     fn add_archive<F>(&mut self, archive: &Path, skip: F) -> io::Result<()>\n@@ -257,15 +249,6 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n }\n \n impl<'a> LlvmArchiveBuilder<'a> {\n-    fn src_archive(&mut self) -> Option<&ArchiveRO> {\n-        if let Some(ref a) = self.src_archive {\n-            return a.as_ref();\n-        }\n-        let src = self.src.as_ref()?;\n-        self.src_archive = Some(ArchiveRO::open(src).ok());\n-        self.src_archive.as_ref().unwrap().as_ref()\n-    }\n-\n     fn llvm_archive_kind(&self) -> Result<ArchiveKind, &str> {\n         let kind = &*self.sess.target.archive_format;\n         kind.parse().map_err(|_| kind)\n@@ -279,20 +262,6 @@ impl<'a> LlvmArchiveBuilder<'a> {\n         let dst = CString::new(self.dst.to_str().unwrap())?;\n \n         unsafe {\n-            if let Some(archive) = self.src_archive() {\n-                for child in archive.iter() {\n-                    let child = child.map_err(string_to_io_error)?;\n-                    let Some(child_name) = child.name() else { continue };\n-\n-                    let name = CString::new(child_name)?;\n-                    members.push(llvm::LLVMRustArchiveMemberNew(\n-                        ptr::null(),\n-                        name.as_ptr(),\n-                        Some(child.raw),\n-                    ));\n-                    strings.push(name);\n-                }\n-            }\n             for addition in &mut additions {\n                 match addition {\n                     Addition::File { path, name_in_archive } => {"}, {"sha": "553486ae8ec65e4d970cb16a2ce8d31b56acaf1d", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18c6fe5798c70d532742cfda6c21d61daee257a4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c6fe5798c70d532742cfda6c21d61daee257a4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=18c6fe5798c70d532742cfda6c21d61daee257a4", "patch": "@@ -42,7 +42,7 @@ pub(super) fn find_library(\n }\n \n pub trait ArchiveBuilder<'a> {\n-    fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> Self;\n+    fn new(sess: &'a Session, output: &Path) -> Self;\n \n     fn add_file(&mut self, path: &Path);\n "}, {"sha": "9233982bfc056fece7c6ad26e23f62fc0277c182", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18c6fe5798c70d532742cfda6c21d61daee257a4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c6fe5798c70d532742cfda6c21d61daee257a4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=18c6fe5798c70d532742cfda6c21d61daee257a4", "patch": "@@ -270,7 +270,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n \n     let lib_search_paths = archive_search_paths(sess);\n \n-    let mut ab = <B as ArchiveBuilder>::new(sess, out_filename, None);\n+    let mut ab = <B as ArchiveBuilder>::new(sess, out_filename);\n \n     let trailing_metadata = match flavor {\n         RlibFlavor::Normal => {\n@@ -2472,7 +2472,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n             let is_builtins = sess.target.no_builtins\n                 || !codegen_results.crate_info.is_no_builtins.contains(&cnum);\n \n-            let mut archive = <B as ArchiveBuilder>::new(sess, &dst, None);\n+            let mut archive = <B as ArchiveBuilder>::new(sess, &dst);\n             if let Err(e) = archive.add_archive(cratepath, move |f| {\n                 if f == METADATA_FILENAME {\n                     return true;"}]}