{"sha": "36caa7a729a72df100d760e80bed84149ff4cab1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2Y2FhN2E3MjlhNzJkZjEwMGQ3NjBlODBiZWQ4NDE0OWZmNGNhYjE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-06-20T20:26:14Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-06-22T04:19:56Z"}, "message": "RegionFolder should only invoke callback on free regions.\n\nIn other words, Late-bound regions that occur non-free should be\nskipped.\n\nFix #10846.", "tree": {"sha": "0393a57db6accbd325c99fa76e6feb6a1266ba8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0393a57db6accbd325c99fa76e6feb6a1266ba8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36caa7a729a72df100d760e80bed84149ff4cab1", "comment_count": 16, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36caa7a729a72df100d760e80bed84149ff4cab1", "html_url": "https://github.com/rust-lang/rust/commit/36caa7a729a72df100d760e80bed84149ff4cab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36caa7a729a72df100d760e80bed84149ff4cab1/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43d193826000d22d0c2b5969f7b9b603f406f60f", "url": "https://api.github.com/repos/rust-lang/rust/commits/43d193826000d22d0c2b5969f7b9b603f406f60f", "html_url": "https://github.com/rust-lang/rust/commit/43d193826000d22d0c2b5969f7b9b603f406f60f"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "c90d9af9b78eb962ba4b974c6e9a8f7958d8104b", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 51, "deletions": 5, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/36caa7a729a72df100d760e80bed84149ff4cab1/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36caa7a729a72df100d760e80bed84149ff4cab1/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=36caa7a729a72df100d760e80bed84149ff4cab1", "patch": "@@ -15,6 +15,7 @@ use middle::subst::VecPerParamSpace;\n use middle::ty;\n use middle::typeck;\n use std::rc::Rc;\n+use syntax::ast;\n use syntax::owned_slice::OwnedSlice;\n use util::ppaux::Repr;\n \n@@ -449,10 +450,23 @@ impl<'a> TypeFolder for BottomUpFolder<'a> {\n ///////////////////////////////////////////////////////////////////////////\n // Region folder\n \n+/// Folds over the substructure of a type, visiting its component\n+/// types and all regions that occur *free* within it.\n+///\n+/// That is, `ty::t` can contain function or method types that bind\n+/// regions at the call site (`ReLateBound`), and occurrences of\n+/// regions (aka \"lifetimes\") that are bound within a type are not\n+/// visited by this folder; only regions that occur free will be\n+/// visited by `fld_r`.\n+///\n+/// (The distinction between \"free\" and \"bound\" is represented by\n+/// keeping track of each `FnSig` in the lexical context of the\n+/// current position of the fold.)\n pub struct RegionFolder<'a> {\n     tcx: &'a ty::ctxt,\n     fld_t: |ty::t|: 'a -> ty::t,\n     fld_r: |ty::Region|: 'a -> ty::Region,\n+    within_binder_ids: Vec<ast::NodeId>,\n }\n \n impl<'a> RegionFolder<'a> {\n@@ -463,7 +477,8 @@ impl<'a> RegionFolder<'a> {\n         RegionFolder {\n             tcx: tcx,\n             fld_t: fld_t,\n-            fld_r: fld_r\n+            fld_r: fld_r,\n+            within_binder_ids: vec![],\n         }\n     }\n \n@@ -474,22 +489,53 @@ impl<'a> RegionFolder<'a> {\n         RegionFolder {\n             tcx: tcx,\n             fld_t: noop,\n-            fld_r: fld_r\n+            fld_r: fld_r,\n+            within_binder_ids: vec![],\n         }\n     }\n }\n \n+/// If `ty` has `FnSig` (i.e. closure or fn), return its binder_id;\n+/// else None.\n+fn opt_binder_id_of_function(t: ty::t) -> Option<ast::NodeId> {\n+    match ty::get(t).sty {\n+        ty::ty_closure(ref f) => Some(f.sig.binder_id),\n+        ty::ty_bare_fn(ref f) => Some(f.sig.binder_id),\n+        _                     => None,\n+    }\n+}\n+\n impl<'a> TypeFolder for RegionFolder<'a> {\n     fn tcx<'a>(&'a self) -> &'a ty::ctxt { self.tcx }\n \n     fn fold_ty(&mut self, ty: ty::t) -> ty::t {\n         debug!(\"RegionFolder.fold_ty({})\", ty.repr(self.tcx()));\n+        let opt_binder_id = opt_binder_id_of_function(ty);\n+        match opt_binder_id {\n+            Some(binder_id) => self.within_binder_ids.push(binder_id),\n+            None => {}\n+        }\n+\n         let t1 = super_fold_ty(self, ty);\n-        (self.fld_t)(t1)\n+        let ret = (self.fld_t)(t1);\n+\n+        if opt_binder_id.is_some() {\n+            self.within_binder_ids.pop();\n+        }\n+\n+        ret\n     }\n \n     fn fold_region(&mut self, r: ty::Region) -> ty::Region {\n-        debug!(\"RegionFolder.fold_region({})\", r.repr(self.tcx()));\n-        (self.fld_r)(r)\n+        match r {\n+            ty::ReLateBound(binder_id, _) if self.within_binder_ids.contains(&binder_id) => {\n+                debug!(\"RegionFolder.fold_region({}) skipped bound region\", r.repr(self.tcx()));\n+                r\n+            }\n+            _ => {\n+                debug!(\"RegionFolder.fold_region({}) folding free region\", r.repr(self.tcx()));\n+                (self.fld_r)(r)\n+            }\n+        }\n     }\n }"}]}