{"sha": "595d161d36b5126e75840c29ce0413a07feebd02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NWQxNjFkMzZiNTEyNmU3NTg0MGMyOWNlMDQxM2EwN2ZlZWJkMDI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-11-06T05:04:53Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:38:16Z"}, "message": "Remove BodyCache.body and rely on Deref as much as possible for ReadOnlyBodyCache", "tree": {"sha": "0d145a73b39ad9e3c9ce028503ff4c996b585fdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d145a73b39ad9e3c9ce028503ff4c996b585fdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/595d161d36b5126e75840c29ce0413a07feebd02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/595d161d36b5126e75840c29ce0413a07feebd02", "html_url": "https://github.com/rust-lang/rust/commit/595d161d36b5126e75840c29ce0413a07feebd02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/595d161d36b5126e75840c29ce0413a07feebd02/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42bdb8c7465389a4d71d88ff8d910d6307be9ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42bdb8c7465389a4d71d88ff8d910d6307be9ba", "html_url": "https://github.com/rust-lang/rust/commit/c42bdb8c7465389a4d71d88ff8d910d6307be9ba"}], "stats": {"total": 176, "additions": 89, "deletions": 87}, "files": [{"sha": "e7ca7d6a95f5f65dfc0779b0dcadce3161368de0", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -2,7 +2,7 @@ use rustc_index::vec::IndexVec;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_serialize::{Encodable, Encoder, Decodable, Decoder};\n use crate::ich::StableHashingContext;\n-use crate::mir::{BasicBlock, BasicBlockData, Body, LocalDecls, Location, Successors};\n+use crate::mir::{BasicBlock, BasicBlockData, Body, HasLocalDecls, LocalDecls, Location, Successors};\n use rustc_data_structures::graph::{self, GraphPredecessors, GraphSuccessors};\n use rustc_data_structures::graph::dominators::{dominators, Dominators};\n use std::iter;\n@@ -181,14 +181,6 @@ impl BodyCache<'tcx> {\n         ReadOnlyBodyCache::new(&self.cache, &self.body)\n     }\n \n-    pub fn body(&self) -> &Body<'tcx> {\n-        &self.body\n-    }\n-\n-    pub fn body_mut(&mut self) -> &mut Body<'tcx> {\n-        &mut self.body\n-    }\n-\n     pub fn cache(&self) -> &Cache { &self.cache }\n \n     pub fn basic_blocks_mut(&mut self) -> &mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n@@ -231,6 +223,12 @@ impl<'tcx> DerefMut for BodyCache<'tcx> {\n     }\n }\n \n+impl<'tcx> HasLocalDecls<'tcx> for BodyCache<'tcx> {\n+    fn local_decls(&self) -> &LocalDecls<'tcx> {\n+        &self.body.local_decls\n+    }\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub struct ReadOnlyBodyCache<'a, 'tcx> {\n     cache: &'a Cache,\n@@ -349,6 +347,12 @@ impl Index<BasicBlock> for ReadOnlyBodyCache<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> HasLocalDecls<'tcx> for ReadOnlyBodyCache<'a, 'tcx> {\n+    fn local_decls(&self) -> &LocalDecls<'tcx> {\n+        &self.body.local_decls\n+    }\n+}\n+\n CloneTypeFoldableAndLiftImpls! {\n     Cache,\n }"}, {"sha": "18776778ebb91dd8a85add984d8d04e1569f472e", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -254,14 +254,10 @@ macro_rules! make_mir_visitor {\n \n             fn super_body(\n                 &mut self,\n-                body_cache: body_cache_type!($($mutability)? '_, 'tcx)\n+                $($mutability)? body_cache: body_cache_type!($($mutability)? '_, 'tcx)\n             ) {\n-                macro_rules! body {\n-                    (mut) => (body_cache.body_mut());\n-                    () => (body_cache.body());\n-                }\n-                let span = body_cache.body().span;\n-                if let Some(yield_ty) = &$($mutability)? body!($($mutability)?).yield_ty {\n+                let span = body_cache.span;\n+                if let Some(yield_ty) = &$($mutability)? body_cache.yield_ty {\n                     self.visit_ty(yield_ty, TyContext::YieldTy(SourceInfo {\n                         span,\n                         scope: OUTERMOST_SOURCE_SCOPE,\n@@ -279,7 +275,7 @@ macro_rules! make_mir_visitor {\n                     self.visit_basic_block_data(bb, data);\n                 }\n \n-                let body = body!($($mutability)?);\n+                let body: & $($mutability)? Body<'_> = & $($mutability)? body_cache;\n                 for scope in &$($mutability)? body.source_scopes {\n                     self.visit_source_scope_data(scope);\n                 }"}, {"sha": "c9a934e9ebd8490ff86cbfb73096bf596cf1501e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -3023,7 +3023,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn generator_layout(self, def_id: DefId) -> &'tcx GeneratorLayout<'tcx> {\n-        self.optimized_mir(def_id).body().generator_layout.as_ref().unwrap()\n+        self.optimized_mir(def_id).generator_layout.as_ref().unwrap()\n     }\n \n     /// Given the `DefId` of an impl, returns the `DefId` of the trait it implements."}, {"sha": "782c0f7e139039dd31fe5c9c9e4aed7316bda3ab", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -131,7 +131,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n             };\n             if is_consume {\n                 let base_ty =\n-                    mir::Place::ty_from(place_ref.base, proj_base, self.fx.mir.body(), cx.tcx());\n+                    mir::Place::ty_from(place_ref.base, proj_base, &self.fx.mir, cx.tcx());\n                 let base_ty = self.fx.monomorphize(&base_ty);\n \n                 // ZSTs don't require any actual memory access."}, {"sha": "0920de7d903f2a5165ba23c2cf4d512259a344cd", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -324,7 +324,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         target: mir::BasicBlock,\n         unwind: Option<mir::BasicBlock>,\n     ) {\n-        let ty = location.ty(self.mir.body(), bx.tcx()).ty;\n+        let ty = location.ty(&self.mir, bx.tcx()).ty;\n         let ty = self.monomorphize(&ty);\n         let drop_fn = Instance::resolve_drop_in_place(bx.tcx(), ty);\n \n@@ -510,7 +510,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         let extra_args = &args[sig.inputs().len()..];\n         let extra_args = extra_args.iter().map(|op_arg| {\n-            let op_ty = op_arg.ty(self.mir.body(), bx.tcx());\n+            let op_ty = op_arg.ty(&self.mir, bx.tcx());\n             self.monomorphize(&op_ty)\n         }).collect::<Vec<_>>();\n \n@@ -569,7 +569,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 // a NOP\n                 let target = destination.as_ref().unwrap().1;\n                 helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n-                helper.funclet_br(self, &mut bx, destination.as_ref().unwrap().1)\n+                helper.funclet_br(self, &mut bx, target)\n             }\n             return;\n         }\n@@ -791,7 +791,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bb: mir::BasicBlock,\n     ) {\n         let mut bx = self.build_block(bb);\n-        let data = &self.mir.body()[bb];\n+        let mir = self.mir;\n+        let data = &mir[bb];\n \n         debug!(\"codegen_block({:?}={:?})\", bb, data);\n "}, {"sha": "9374c829e4f96657b9a07224949b09d2d0f5d85b", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -156,7 +156,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         }).collect();\n \n     let (landing_pads, funclets) = create_funclets(&mir, &mut bx, &cleanup_kinds, &block_bxs);\n-    let mir_body = mir.body();\n+    let mir_body: &Body<'_> = &mir;\n     let mut fx = FunctionCx {\n         instance,\n         mir,"}, {"sha": "5ea08edd035beca92354703ebe490a516daf2b39", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -594,8 +594,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let place_ty = mir::Place::ty_from(\n             place_ref.base,\n             place_ref.projection,\n-            self.mir.body(),\n-            tcx);\n+            &self.mir,\n+            tcx,\n+        );\n         self.monomorphize(&place_ty.ty)\n     }\n }"}, {"sha": "fa157a0c35f900e71d353b91c652aedf60ffe5be", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -460,7 +460,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::Rvalue::Discriminant(ref place) => {\n-                let discr_ty = rvalue.ty(self.mir.body(), bx.tcx());\n+                let discr_ty = rvalue.ty(&self.mir, bx.tcx());\n                 let discr =  self.codegen_place(&mut bx, &place.as_ref())\n                     .codegen_get_discr(&mut bx, discr_ty);\n                 (bx, OperandRef {\n@@ -513,7 +513,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::Rvalue::Aggregate(..) => {\n                 // According to `rvalue_creates_operand`, only ZST\n                 // aggregate rvalues are allowed to be operands.\n-                let ty = rvalue.ty(self.mir.body(), self.cx.tcx());\n+                let ty = rvalue.ty(&self.mir, self.cx.tcx());\n                 let operand = OperandRef::new_zst(\n                     &mut bx,\n                     self.cx.layout_of(self.monomorphize(&ty)),\n@@ -710,7 +710,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 true,\n             mir::Rvalue::Repeat(..) |\n             mir::Rvalue::Aggregate(..) => {\n-                let ty = rvalue.ty(self.mir.body(), self.cx.tcx());\n+                let ty = rvalue.ty(&self.mir, self.cx.tcx());\n                 let ty = self.monomorphize(&ty);\n                 self.cx.spanned_layout_of(ty, span).is_zst()\n             }"}, {"sha": "aaf067a53610e040398c49dd5952ec7762c181ee", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -130,7 +130,7 @@ impl<'tcx> BorrowSet<'tcx> {\n     ) -> Self {\n         let mut visitor = GatherBorrows {\n             tcx,\n-            body: body_cache.body(),\n+            body: &body_cache,\n             idx_vec: IndexVec::new(),\n             location_map: Default::default(),\n             activation_map: Default::default(),"}, {"sha": "9dac6d70dff85e577b28817ea5bcbfb0bc613062", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -208,7 +208,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let ty = Place::ty_from(\n                 used_place.base,\n                 used_place.projection,\n-                self.body_cache.body(),\n+                &self.body_cache,\n                 self.infcx.tcx\n             ).ty;\n             let needs_note = match ty.kind {\n@@ -225,7 +225,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let mpi = self.move_data.moves[move_out_indices[0]].path;\n                 let place = &self.move_data.move_paths[mpi].place;\n \n-                let ty = place.ty(self.body_cache.body(), self.infcx.tcx).ty;\n+                let ty = place.ty(&self.body_cache, self.infcx.tcx).ty;\n                 let opt_name =\n                     self.describe_place_with_options(place.as_ref(), IncludingDowncast(true));\n                 let note_msg = match opt_name {\n@@ -625,7 +625,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let ty = Place::ty_from(\n                 place_base,\n                 place_projection,\n-                self.body_cache.body(),\n+                &self.body_cache,\n                 self.infcx.tcx\n             ).ty;\n             ty.ty_adt_def().filter(|adt| adt.is_union()).map(|_| ty)\n@@ -1635,7 +1635,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 Place::ty_from(\n                                     &place.base,\n                                     proj_base,\n-                                    self.body_cache.body(),\n+                                    &self.body_cache,\n                                     tcx\n                                 ).ty.is_box(),\n                                 \"Drop of value behind a reference or raw pointer\"\n@@ -1648,7 +1648,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         let base_ty = Place::ty_from(\n                             &place.base,\n                             proj_base,\n-                            self.body_cache.body(),\n+                            &self.body_cache,\n                             tcx\n                         ).ty;\n                         match base_ty.kind {"}, {"sha": "3515c4bfe09d1fbf1c5a8e5d8b1f3b2eb12b70a4", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -372,7 +372,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     let base_ty = Place::ty_from(\n                         place.base,\n                         place.projection,\n-                        self.body_cache.body(),\n+                        &self.body_cache,\n                         self.infcx.tcx).ty;\n                     self.describe_field_from_ty(&base_ty, field, Some(*variant_index))\n                 }\n@@ -502,7 +502,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         ..\n                     }) = bbd.terminator {\n                         if let Some(source) = BorrowedContentSource::from_call(\n-                            func.ty(self.body_cache.body(), tcx),\n+                            func.ty(&self.body_cache, tcx),\n                             tcx\n                         ) {\n                             return source;\n@@ -519,7 +519,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let base_ty = Place::ty_from(\n             deref_base.base,\n             deref_base.projection,\n-            self.body_cache.body(),\n+            &self.body_cache,\n             tcx\n         ).ty;\n         if base_ty.is_unsafe_ptr() {"}, {"sha": "a6fc3e0b21abeef0748c7e31efc2a30f87b832d9", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -646,7 +646,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                 let tcx = self.infcx.tcx;\n \n                 // Compute the type with accurate region information.\n-                let drop_place_ty = drop_place.ty(self.body_cache.body(), self.infcx.tcx);\n+                let drop_place_ty = drop_place.ty(&self.body_cache, self.infcx.tcx);\n \n                 // Erase the regions.\n                 let drop_place_ty = self.infcx.tcx.erase_regions(&drop_place_ty).ty;\n@@ -990,7 +990,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         let mut error_reported = false;\n         let tcx = self.infcx.tcx;\n-        let body = self.body_cache.body();\n+        let body_cache = self.body_cache;\n+        let body: &Body<'_> = &body_cache;\n         let param_env = self.param_env;\n         let location_table = self.location_table.start_index(location);\n         let borrow_set = self.borrow_set.clone();\n@@ -1341,7 +1342,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             _ => bug!(\"temporary initialized in arguments\"),\n                         };\n \n-                        let bbd = &self.body_cache.body()[loc.block];\n+                        let body_cache = self.body_cache;\n+                        let bbd = &body_cache[loc.block];\n                         let stmt = &bbd.statements[loc.statement_index];\n                         debug!(\"temporary assigned in: stmt={:?}\", stmt);\n "}, {"sha": "f5ef37bb0f4e82ee0282584f1a7e5fcc8e10c987", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -300,7 +300,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         // Inspect the type of the content behind the\n         // borrow to provide feedback about why this\n         // was a move rather than a copy.\n-        let ty = deref_target_place.ty(self.body_cache.body(), self.infcx.tcx).ty;\n+        let ty = deref_target_place.ty(&self.body_cache, self.infcx.tcx).ty;\n         let upvar_field = self.prefixes(move_place.as_ref(), PrefixSet::All)\n             .find_map(|p| self.is_upvar_field_projection(p));\n \n@@ -411,7 +411,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         };\n         let move_ty = format!(\n             \"{:?}\",\n-            move_place.ty(self.body_cache.body(), self.infcx.tcx).ty,\n+            move_place.ty(&self.body_cache, self.infcx.tcx).ty,\n         );\n         if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n             let is_option = move_ty.starts_with(\"std::option::Option\");\n@@ -454,7 +454,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n \n                 if binds_to.is_empty() {\n-                    let place_ty = move_from.ty(self.body_cache.body(), self.infcx.tcx).ty;\n+                    let place_ty = move_from.ty(&self.body_cache, self.infcx.tcx).ty;\n                     let place_desc = match self.describe_place(move_from.as_ref()) {\n                         Some(desc) => format!(\"`{}`\", desc),\n                         None => format!(\"value\"),\n@@ -482,7 +482,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             // No binding. Nothing to suggest.\n             GroupedMoveError::OtherIllegalMove { ref original_path, use_spans, .. } => {\n                 let span = use_spans.var_or_use();\n-                let place_ty = original_path.ty(self.body_cache.body(), self.infcx.tcx).ty;\n+                let place_ty = original_path.ty(&self.body_cache, self.infcx.tcx).ty;\n                 let place_desc = match self.describe_place(original_path.as_ref()) {\n                     Some(desc) => format!(\"`{}`\", desc),\n                     None => format!(\"value\"),"}, {"sha": "bae5d2e1742587e9cd2b2a6fc754c4849300d28b", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -64,7 +64,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     Place::ty_from(\n                         &the_place_err.base,\n                         proj_base,\n-                        self.body_cache.body(),\n+                        &self.body_cache,\n                         self.infcx.tcx\n                     ).ty));\n \n@@ -115,7 +115,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         Place::ty_from(\n                             the_place_err.base,\n                             the_place_err.projection,\n-                            self.body_cache.body(),\n+                            &self.body_cache,\n                             self.infcx.tcx\n                         )\n                         .ty\n@@ -229,7 +229,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 if let Some((span, message)) = annotate_struct_field(\n                     self.infcx.tcx,\n-                    Place::ty_from(base, proj_base, self.body_cache.body(), self.infcx.tcx).ty,\n+                    Place::ty_from(base, proj_base, &self.body_cache, self.infcx.tcx).ty,\n                     field,\n                 ) {\n                     err.span_suggestion(\n@@ -304,7 +304,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 projection: [proj_base @ .., ProjectionElem::Field(upvar_index, _)],\n             } => {\n                 debug_assert!(is_closure_or_generator(\n-                    Place::ty_from(base, proj_base, self.body_cache.body(), self.infcx.tcx).ty\n+                    Place::ty_from(base, proj_base, &self.body_cache, self.infcx.tcx).ty\n                 ));\n \n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));"}, {"sha": "1e07f354b83f7cc01e67e601b85473d7c9960578", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -237,7 +237,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         );\n \n         let regioncx = &self.nonlexical_regioncx;\n-        let body = self.body_cache.body();\n+        let body: &Body<'_> = &self.body_cache;\n         let tcx = self.infcx.tcx;\n \n         let borrow_region_vid = borrow.region;"}, {"sha": "a2929fe474762ba656004420385ea289e27aaf9b", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -38,7 +38,7 @@ pub(super) fn generate_invalidates<'tcx>(\n             param_env,\n             tcx,\n             location_table,\n-            body: body_cache.body(),\n+            body: &body_cache,\n             dominators,\n         };\n         ig.visit_body(body_cache);"}, {"sha": "ff28a27911b694bac0e53a685fd2fa99b4a54487", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -181,7 +181,8 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n \n     let universal_regions = Rc::new(universal_regions);\n \n-    let elements = &Rc::new(RegionValueElements::new(body_cache.body()));\n+    let elements\n+        = &Rc::new(RegionValueElements::new(&body_cache));\n \n     // Run the MIR type-checker.\n     let MirTypeckResults {\n@@ -206,7 +207,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         all_facts\n             .universal_region\n             .extend(universal_regions.universal_regions());\n-        populate_polonius_move_facts(all_facts, move_data, location_table, body_cache.body());\n+        populate_polonius_move_facts(all_facts, move_data, location_table, &body_cache);\n     }\n \n     // Create the region inference context, taking ownership of the\n@@ -230,7 +231,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         &mut liveness_constraints,\n         &mut all_facts,\n         location_table,\n-        body_cache.body(),\n+        &body_cache,\n         borrow_set,\n     );\n \n@@ -239,7 +240,6 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n         universal_regions,\n         placeholder_indices,\n         universal_region_relations,\n-        body_cache.body(),\n         outlives_constraints,\n         member_constraints,\n         closure_bounds_mapping,\n@@ -284,14 +284,14 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n \n     // Solve the region constraints.\n     let closure_region_requirements =\n-        regioncx.solve(infcx, body_cache.body(), local_names, upvars, def_id, errors_buffer);\n+        regioncx.solve(infcx, &body_cache, local_names, upvars, def_id, errors_buffer);\n \n     // Dump MIR results into a file, if that is enabled. This let us\n     // write unit-tests, as well as helping with debugging.\n     dump_mir_results(\n         infcx,\n         MirSource::item(def_id),\n-        body_cache.body(),\n+        &body_cache,\n         &regioncx,\n         &closure_region_requirements,\n     );\n@@ -300,7 +300,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     // information\n     dump_annotation(\n         infcx,\n-        body_cache.body(),\n+        &body_cache,\n         def_id,\n         &regioncx,\n         &closure_region_requirements,"}, {"sha": "bd9e97e5b633b6fca17f68e0fd77efb45aae06c5", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -239,7 +239,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         universal_regions: Rc<UniversalRegions<'tcx>>,\n         placeholder_indices: Rc<PlaceholderIndices>,\n         universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n-        _body: &Body<'tcx>,\n         outlives_constraints: OutlivesConstraintSet,\n         member_constraints_in: MemberConstraintSet<'tcx, RegionVid>,\n         closure_bounds_mapping: FxHashMap<"}, {"sha": "5190e0f939f34cf8d668d194852f118041374d67", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -169,7 +169,7 @@ pub(crate) fn type_check<'tcx>(\n         &universal_region_relations,\n         |mut cx| {\n             cx.equate_inputs_and_outputs(\n-                body_cache.body(),\n+                &body_cache,\n                 universal_regions,\n                 &normalized_inputs_and_output);\n             liveness::generate(\n@@ -201,7 +201,7 @@ fn type_check_internal<'a, 'tcx, R>(\n     borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n     universal_region_relations: &'a UniversalRegionRelations<'tcx>,\n     mut extra: impl FnMut(&mut TypeChecker<'a, 'tcx>) -> R,\n-) -> R where {\n+) -> R {\n     let mut checker = TypeChecker::new(\n         infcx,\n         body_cache.body(),\n@@ -220,7 +220,7 @@ fn type_check_internal<'a, 'tcx, R>(\n \n     if !errors_reported {\n         // if verifier failed, don't do further checks to avoid ICEs\n-        checker.typeck_mir(body_cache.body());\n+        checker.typeck_mir(&body_cache);\n     }\n \n     extra(&mut checker)"}, {"sha": "82763df749240d82545605c618ebae2454bfad5b", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -11,7 +11,7 @@ use super::MirBorrowckCtxt;\n \n use rustc::hir;\n use rustc::ty::{self, TyCtxt};\n-use rustc::mir::{Body, Place, PlaceBase, PlaceRef, ProjectionElem};\n+use rustc::mir::{Place, PlaceBase, PlaceRef, ProjectionElem, ReadOnlyBodyCache};\n \n pub trait IsPrefixOf<'cx, 'tcx> {\n     fn is_prefix_of(&self, other: PlaceRef<'cx, 'tcx>) -> bool;\n@@ -26,7 +26,7 @@ impl<'cx, 'tcx> IsPrefixOf<'cx, 'tcx> for PlaceRef<'cx, 'tcx> {\n }\n \n pub(super) struct Prefixes<'cx, 'tcx> {\n-    body: &'cx Body<'tcx>,\n+    body_cache: ReadOnlyBodyCache<'cx, 'tcx>,\n     tcx: TyCtxt<'tcx>,\n     kind: PrefixSet,\n     next: Option<PlaceRef<'cx, 'tcx>>,\n@@ -56,7 +56,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         Prefixes {\n             next: Some(place_ref),\n             kind,\n-            body: self.body_cache.body(),\n+            body_cache: self.body_cache,\n             tcx: self.infcx.tcx,\n         }\n     }\n@@ -143,7 +143,7 @@ impl<'cx, 'tcx> Iterator for Prefixes<'cx, 'tcx> {\n                     // derefs, except we stop at the deref of a shared\n                     // reference.\n \n-                    let ty = Place::ty_from(cursor.base, proj_base, self.body, self.tcx).ty;\n+                    let ty = Place::ty_from(cursor.base, proj_base, &self.body_cache, self.tcx).ty;\n                     match ty.kind {\n                         ty::RawPtr(_) |\n                         ty::Ref("}, {"sha": "67de4ce168c0297fac97726cf82348aed69a3561", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -1249,11 +1249,10 @@ fn collect_neighbours<'tcx>(\n ) {\n     debug!(\"collect_neighbours: {:?}\", instance.def_id());\n     let body_cache = tcx.instance_mir(instance.def);\n-    let body = body_cache.body();\n \n     MirNeighborCollector {\n         tcx,\n-        body: &body,\n+        body: &body_cache,\n         output,\n         param_substs: instance.substs,\n     }.visit_body(body_cache);"}, {"sha": "43600d6a5d8ee9067464eb2d16526ee7e6a80448", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -113,7 +113,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n             bug!(\"creating shims from intrinsics ({:?}) is unsupported\", instance)\n         }\n     };\n-    debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result.body());\n+    debug!(\"make_shim({:?}) = untransformed {:?}\", instance, result);\n \n     run_passes(tcx, &mut result, instance, None, MirPhase::Const, &[\n         &add_moves_for_packed_drops::AddMovesForPackedDrops,\n@@ -123,7 +123,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n         &add_call_guards::CriticalCallEdges,\n     ]);\n \n-    debug!(\"make_shim({:?}) = {:?}\", instance, result.body());\n+    debug!(\"make_shim({:?}) = {:?}\", instance, result);\n \n     result.ensure_predecessors();\n     tcx.arena.alloc(result)\n@@ -220,8 +220,8 @@ fn build_drop_shim<'tcx>(\n         let patch = {\n             let param_env = tcx.param_env(def_id).with_reveal_all();\n             let mut elaborator = DropShimElaborator {\n-                body: body_cache.body(),\n-                patch: MirPatch::new(body_cache.body()),\n+                body: &body_cache,\n+                patch: MirPatch::new(&body_cache),\n                 tcx,\n                 param_env\n             };"}, {"sha": "9e314dbc6e893a0cf3c9036394af242ff02af451", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -529,7 +529,7 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: DefId) -> UnsafetyCheckResult\n     };\n     let mut checker = UnsafetyChecker::new(const_context, min_const_fn, body_cache, tcx, param_env);\n     let mut cache = body_cache.cache().clone();\n-    let read_only_cache = ReadOnlyBodyCache::from_external_cache(&mut cache, body_cache.body());\n+    let read_only_cache = ReadOnlyBodyCache::from_external_cache(&mut cache, body_cache);\n     checker.visit_body(read_only_cache);\n \n     check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);"}, {"sha": "f9b8b3d6aec5225f5dd3276851bd1092435d0ef5", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -487,7 +487,7 @@ fn locals_live_across_suspend_points(\n ) -> LivenessInfo {\n     let dead_unwinds = BitSet::new_empty(body_cache.basic_blocks().len());\n     let def_id = source.def_id();\n-    let body = body_cache.body();\n+    let body: &Body<'_> = &body_cache;\n \n     // Calculate when MIR locals have live storage. This gives us an upper bound of their\n     // lifetimes.\n@@ -932,7 +932,7 @@ fn create_generator_drop_shim<'tcx>(\n ) -> BodyCache<'tcx> {\n     let mut body_cache = body_cache.clone();\n \n-    let source_info = source_info(body_cache.body());\n+    let source_info = source_info(&body_cache);\n \n     let mut cases = create_cases(&mut body_cache, transform, |point| point.drop);\n "}, {"sha": "922b0937065c4f37fc344b0dba11cafc7bcca217", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -448,7 +448,7 @@ impl Inliner<'tcx> {\n                         BorrowKind::Mut { allow_two_phase_borrow: false },\n                         destination.0);\n \n-                    let ty = dest.ty(caller_body.body(), self.tcx);\n+                    let ty = dest.ty(caller_body, self.tcx);\n \n                     let temp = LocalDecl::new_temp(ty, callsite.location.span);\n \n@@ -553,7 +553,7 @@ impl Inliner<'tcx> {\n             assert!(args.next().is_none());\n \n             let tuple = Place::from(tuple);\n-            let tuple_tys = if let ty::Tuple(s) = tuple.ty(caller_body_cache.body(), tcx).ty.kind {\n+            let tuple_tys = if let ty::Tuple(s) = tuple.ty(caller_body_cache, tcx).ty.kind {\n                 s\n             } else {\n                 bug!(\"Closure arguments are not passed as a tuple\");\n@@ -608,7 +608,7 @@ impl Inliner<'tcx> {\n         // Otherwise, create a temporary for the arg\n         let arg = Rvalue::Use(arg);\n \n-        let ty = arg.ty(caller_body_cache.body(), self.tcx);\n+        let ty = arg.ty(caller_body_cache, self.tcx);\n \n         let arg_tmp = LocalDecl::new_temp(ty, callsite.location.span);\n         let arg_tmp = caller_body_cache.local_decls.push(arg_tmp);"}, {"sha": "386e04bc0839adbaaf67264d73a5ebbbfe799f43", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -13,7 +13,7 @@ pub fn remove_noop_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body_cache: &mut BodyCa\n     if tcx.sess.no_landing_pads() {\n         return\n     }\n-    debug!(\"remove_noop_landing_pads({:?})\", body_cache.body());\n+    debug!(\"remove_noop_landing_pads({:?})\", body_cache);\n \n     RemoveNoopLandingPads.remove_nop_landing_pads(body_cache)\n }"}, {"sha": "de8a8ceed311abfeea2b6aadaacb33360f080738", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -58,23 +58,23 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n                         |_, i| DebugFormatted::new(&i));\n \n         if has_rustc_mir_with(&attributes, sym::rustc_peek_maybe_init).is_some() {\n-            sanity_check_via_rustc_peek(tcx, body_cache.body(), def_id, &attributes, &flow_inits);\n+            sanity_check_via_rustc_peek(tcx, body_cache, def_id, &attributes, &flow_inits);\n         }\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_maybe_uninit).is_some() {\n-            sanity_check_via_rustc_peek(tcx, body_cache.body(), def_id, &attributes, &flow_uninits);\n+            sanity_check_via_rustc_peek(tcx, body_cache, def_id, &attributes, &flow_uninits);\n         }\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_definite_init).is_some() {\n             sanity_check_via_rustc_peek(\n                 tcx,\n-                body_cache.body(),\n+                body_cache,\n                 def_id,\n                 &attributes,\n                 &flow_def_inits);\n         }\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_indirectly_mutable).is_some() {\n             sanity_check_via_rustc_peek(\n                 tcx,\n-                body_cache.body(),\n+                body_cache,\n                 def_id,\n                 &attributes,\n                 &flow_indirectly_mut);"}, {"sha": "3057d67f9ef575905a1ad6b383b18de744682ee7", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n     fn run_pass(\n         &self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>\n     ) {\n-        debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, body_cache.body());\n+        debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, body_cache);\n         simplify_cfg(body_cache);\n     }\n }\n@@ -264,7 +264,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n \n pub fn remove_dead_blocks(body_cache: &mut BodyCache<'_>) {\n     let mut seen = BitSet::new_empty(body_cache.basic_blocks().len());\n-    for (bb, _) in traversal::preorder(body_cache.body()) {\n+    for (bb, _) in traversal::preorder(body_cache) {\n         seen.insert(bb.index());\n     }\n "}, {"sha": "d4d24347f726c8a656efdd39a41ad52d57aac8f7", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -223,7 +223,7 @@ impl<'tcx> MirPass<'tcx> for RestoreSubsliceArrayMoveOut<'tcx> {\n                             let src_ty = Place::ty_from(\n                                 src_place.base,\n                                 src_place.projection,\n-                                body_cache.body(),\n+                                body_cache,\n                                 tcx\n                             ).ty;\n                             if let ty::Array(_, ref size_o) = src_ty.kind {"}, {"sha": "56a31337a08605e249e94895f5b98781965794fe", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595d161d36b5126e75840c29ce0413a07feebd02/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=595d161d36b5126e75840c29ce0413a07feebd02", "patch": "@@ -85,7 +85,7 @@ pub fn liveness_of_locals(\n     // any benefits. Benchmark this and find out.\n     let mut dirty_queue: WorkQueue<BasicBlock>\n         = WorkQueue::with_none(body_cache.basic_blocks().len());\n-    for (bb, _) in traversal::postorder(body_cache.body()) {\n+    for (bb, _) in traversal::postorder(&body_cache) {\n         dirty_queue.insert(bb);\n     }\n "}]}