{"sha": "4b53a2cdd8e567a40d93e9879617989c89080e5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNTNhMmNkZDhlNTY3YTQwZDkzZTk4Nzk2MTc5ODljODkwODBlNWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T01:48:19Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:33Z"}, "message": "librustc: De-`@mut` `ImportResolution::type_id`", "tree": {"sha": "62ecf73d876b1fb6f3e89dbb7e3da3e458b1056d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62ecf73d876b1fb6f3e89dbb7e3da3e458b1056d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b53a2cdd8e567a40d93e9879617989c89080e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b53a2cdd8e567a40d93e9879617989c89080e5f", "html_url": "https://github.com/rust-lang/rust/commit/4b53a2cdd8e567a40d93e9879617989c89080e5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b53a2cdd8e567a40d93e9879617989c89080e5f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9253df1844985ded53a3d5353b506b5ec8a33131", "url": "https://api.github.com/repos/rust-lang/rust/commits/9253df1844985ded53a3d5353b506b5ec8a33131", "html_url": "https://github.com/rust-lang/rust/commit/9253df1844985ded53a3d5353b506b5ec8a33131"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "5ddcae5f94329374ddf9c3118953c9529f99812f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4b53a2cdd8e567a40d93e9879617989c89080e5f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b53a2cdd8e567a40d93e9879617989c89080e5f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=4b53a2cdd8e567a40d93e9879617989c89080e5f", "patch": "@@ -364,13 +364,13 @@ struct ImportResolution {\n     type_target: RefCell<Option<Target>>,\n     /// The source node of the `use` directive leading to the type target\n     /// being non-none\n-    type_id: NodeId,\n+    type_id: Cell<NodeId>,\n }\n \n impl ImportResolution {\n     fn new(id: NodeId, is_public: bool) -> ImportResolution {\n         ImportResolution {\n-            type_id: id,\n+            type_id: Cell::new(id),\n             value_id: Cell::new(id),\n             outstanding_references: Cell::new(0),\n             value_target: RefCell::new(None),\n@@ -389,7 +389,7 @@ impl ImportResolution {\n \n     fn id(&self, namespace: Namespace) -> NodeId {\n         match namespace {\n-            TypeNS  => self.type_id,\n+            TypeNS  => self.type_id.get(),\n             ValueNS => self.value_id.get(),\n         }\n     }\n@@ -1973,7 +1973,7 @@ impl Resolver {\n                             resolution.outstanding_references.get() + 1);\n \n                         // the source of this name is different now\n-                        resolution.type_id = id;\n+                        resolution.type_id.set(id);\n                         resolution.value_id.set(id);\n                     }\n                     None => {\n@@ -2435,7 +2435,7 @@ impl Resolver {\n                         name_bindings.type_def.get().unwrap().type_def);\n                 import_resolution.type_target.set(\n                     Some(Target::new(target_module, name_bindings)));\n-                import_resolution.type_id = directive.id;\n+                import_resolution.type_id.set(directive.id);\n                 used_public = name_bindings.defined_in_public_namespace(TypeNS);\n             }\n             UnboundResult => { /* Continue. */ }\n@@ -2604,7 +2604,7 @@ impl Resolver {\n                 debug!(\"(resolving glob import) ... for type target\");\n                 dest_import_resolution.type_target.set(\n                     Some(Target::new(containing_module, name_bindings)));\n-                dest_import_resolution.type_id = id;\n+                dest_import_resolution.type_id.set(id);\n             }\n             dest_import_resolution.is_public.set(is_public);\n         };\n@@ -5392,7 +5392,8 @@ impl Resolver {\n                                                     &mut found_traits,\n                                                     trait_def_id, name);\n                                                 self.used_imports.insert(\n-                                                    import_resolution.type_id);\n+                                                    import_resolution.type_id\n+                                                                     .get());\n                                             }\n                                         }\n                                         _ => {"}]}