{"sha": "03545109f46a564ac21771125c036332d5b95bb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNTQ1MTA5ZjQ2YTU2NGFjMjE3NzExMjVjMDM2MzMyZDViOTViYjE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-05T08:23:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-10T07:58:17Z"}, "message": "clarify alloc_map description", "tree": {"sha": "f5718f90e1d3cbdc3680d9ff5ff70e8fddf0a1ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5718f90e1d3cbdc3680d9ff5ff70e8fddf0a1ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03545109f46a564ac21771125c036332d5b95bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03545109f46a564ac21771125c036332d5b95bb1", "html_url": "https://github.com/rust-lang/rust/commit/03545109f46a564ac21771125c036332d5b95bb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03545109f46a564ac21771125c036332d5b95bb1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0b17ad26cd31d3f40bb00c993eafd7be458b588", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b17ad26cd31d3f40bb00c993eafd7be458b588", "html_url": "https://github.com/rust-lang/rust/commit/e0b17ad26cd31d3f40bb00c993eafd7be458b588"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "995c8a3568a19196f87313def96916a2c4f9df0a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/03545109f46a564ac21771125c036332d5b95bb1/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03545109f46a564ac21771125c036332d5b95bb1/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=03545109f46a564ac21771125c036332d5b95bb1", "patch": "@@ -52,10 +52,12 @@ pub struct Memory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'a, 'mir, 'tcx>> {\n     /// Allocations local to this instance of the miri engine.  The kind\n     /// helps ensure that the same mechanism is used for allocation and\n     /// deallocation.  When an allocation is not found here, it is a\n-    /// static and looked up in the `tcx` for read access.  Writing to\n-    /// a static creates a copy here, in the machine.\n-    /// We have this in a RefCell to be able to cache when a new allocation\n-    /// for a static has to be created on a read access.\n+    /// static and looked up in the `tcx` for read access.  If this machine\n+    /// does pointer provenance tracking, the type of alloctions in `tcx`\n+    /// and here do not match, so we have a `MonoHashMap` to be able to\n+    /// put the \"mapped\" allocation into `alloc_map` even on a read access.\n+    /// Either way, if the machine allows writing to a static, doing so will\n+    /// create a copy of the static allocation here.\n     alloc_map: MonoHashMap<AllocId, (MemoryKind<M::MemoryKinds>, Allocation<M::PointerTag>)>,\n \n     /// To be able to compare pointers with NULL, and to check alignment for accesses"}]}