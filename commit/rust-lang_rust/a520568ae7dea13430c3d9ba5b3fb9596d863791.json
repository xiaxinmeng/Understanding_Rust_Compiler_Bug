{"sha": "a520568ae7dea13430c3d9ba5b3fb9596d863791", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MjA1NjhhZTdkZWExMzQzMGMzZDliYTViM2ZiOTU5NmQ4NjM3OTE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-03T09:49:08Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-03T12:16:35Z"}, "message": "Elide lifetimes in libcore", "tree": {"sha": "54294793c1a34fa29d757fbd7c741dbadd383ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54294793c1a34fa29d757fbd7c741dbadd383ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a520568ae7dea13430c3d9ba5b3fb9596d863791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a520568ae7dea13430c3d9ba5b3fb9596d863791", "html_url": "https://github.com/rust-lang/rust/commit/a520568ae7dea13430c3d9ba5b3fb9596d863791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a520568ae7dea13430c3d9ba5b3fb9596d863791/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1661947014fc2ecbbb7a30b1604499500dcf767e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1661947014fc2ecbbb7a30b1604499500dcf767e", "html_url": "https://github.com/rust-lang/rust/commit/1661947014fc2ecbbb7a30b1604499500dcf767e"}], "stats": {"total": 144, "additions": 72, "deletions": 72}, "files": [{"sha": "d37f5169af1dff7d7b8e14e60e77660a790f7e27", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=a520568ae7dea13430c3d9ba5b3fb9596d863791", "patch": "@@ -231,7 +231,7 @@ impl<T:Copy> Cell<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n-    pub unsafe fn as_unsafe_cell<'a>(&'a self) -> &'a UnsafeCell<T> {\n+    pub unsafe fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n         &self.value\n     }\n }\n@@ -387,7 +387,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn borrow<'a>(&'a self) -> Ref<'a, T> {\n+    pub fn borrow(&self) -> Ref<T> {\n         match BorrowRef::new(&self.borrow) {\n             Some(b) => Ref {\n                 _value: unsafe { &*self.value.get() },\n@@ -433,7 +433,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn borrow_mut<'a>(&'a self) -> RefMut<'a, T> {\n+    pub fn borrow_mut(&self) -> RefMut<T> {\n         match BorrowRefMut::new(&self.borrow) {\n             Some(b) => RefMut {\n                 _value: unsafe { &mut *self.value.get() },\n@@ -450,7 +450,7 @@ impl<T: ?Sized> RefCell<T> {\n     /// This function is `unsafe` because `UnsafeCell`'s field is public.\n     #[inline]\n     #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n-    pub unsafe fn as_unsafe_cell<'a>(&'a self) -> &'a UnsafeCell<T> {\n+    pub unsafe fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n         &self.value\n     }\n }\n@@ -541,7 +541,7 @@ impl<'b, T: ?Sized> Deref for Ref<'b, T> {\n     type Target = T;\n \n     #[inline]\n-    fn deref<'a>(&'a self) -> &'a T {\n+    fn deref(&self) -> &T {\n         self._value\n     }\n }\n@@ -750,15 +750,15 @@ impl<'b, T: ?Sized> Deref for RefMut<'b, T> {\n     type Target = T;\n \n     #[inline]\n-    fn deref<'a>(&'a self) -> &'a T {\n+    fn deref(&self) -> &T {\n         self._value\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'b, T: ?Sized> DerefMut for RefMut<'b, T> {\n     #[inline]\n-    fn deref_mut<'a>(&'a mut self) -> &'a mut T {\n+    fn deref_mut(&mut self) -> &mut T {\n         self._value\n     }\n }"}, {"sha": "c945e4e066159e9a558bf6ba2f0f0c4ba4777632", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=a520568ae7dea13430c3d9ba5b3fb9596d863791", "patch": "@@ -51,7 +51,7 @@ impl<T: Zeroable> Deref for NonZero<T> {\n     type Target = T;\n \n     #[inline]\n-    fn deref<'a>(&'a self) -> &'a T {\n+    fn deref(&self) -> &T {\n         let NonZero(ref inner) = *self;\n         inner\n     }"}, {"sha": "091e9c889da47ecdf93334aab837526b3e26ff7f", "filename": "src/libcore/num/flt2dec/bignum.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fnum%2Fflt2dec%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fnum%2Fflt2dec%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fbignum.rs?ref=a520568ae7dea13430c3d9ba5b3fb9596d863791", "patch": "@@ -211,7 +211,7 @@ macro_rules! define_bignum {\n                 self\n             }\n \n-            pub fn add_small<'a>(&'a mut self, other: $ty) -> &'a mut $name {\n+            pub fn add_small(&mut self, other: $ty) -> &mut $name {\n                 use num::flt2dec::bignum::FullOps;\n \n                 let (mut carry, v) = self.base[0].full_add(other, false);\n@@ -248,7 +248,7 @@ macro_rules! define_bignum {\n \n             /// Multiplies itself by a digit-sized `other` and returns its own\n             /// mutable reference.\n-            pub fn mul_small<'a>(&'a mut self, other: $ty) -> &'a mut $name {\n+            pub fn mul_small(&mut self, other: $ty) -> &mut $name {\n                 use num::flt2dec::bignum::FullOps;\n \n                 let mut sz = self.size;\n@@ -267,7 +267,7 @@ macro_rules! define_bignum {\n             }\n \n             /// Multiplies itself by `2^bits` and returns its own mutable reference.\n-            pub fn mul_pow2<'a>(&'a mut self, bits: usize) -> &'a mut $name {\n+            pub fn mul_pow2(&mut self, bits: usize) -> &mut $name {\n                 use mem;\n \n                 let digitbits = mem::size_of::<$ty>() * 8;\n@@ -308,7 +308,7 @@ macro_rules! define_bignum {\n             }\n \n             /// Multiplies itself by `5^e` and returns its own mutable reference.\n-            pub fn mul_pow5<'a>(&'a mut self, mut e: usize) -> &'a mut $name {\n+            pub fn mul_pow5(&mut self, mut e: usize) -> &mut $name {\n                 use mem;\n                 use num::flt2dec::bignum::SMALL_POW5;\n \n@@ -377,7 +377,7 @@ macro_rules! define_bignum {\n \n             /// Divides itself by a digit-sized `other` and returns its own\n             /// mutable reference *and* the remainder.\n-            pub fn div_rem_small<'a>(&'a mut self, other: $ty) -> (&'a mut $name, $ty) {\n+            pub fn div_rem_small(&mut self, other: $ty) -> (&mut $name, $ty) {\n                 use num::flt2dec::bignum::FullOps;\n \n                 assert!(other > 0);"}, {"sha": "40aa2a527dbc5607d4ead32b4a97fb8bbf6984c9", "filename": "src/libcore/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=a520568ae7dea13430c3d9ba5b3fb9596d863791", "patch": "@@ -42,7 +42,7 @@ static POW10TO256: [Digit; 27] =\n      0xcc5573c0, 0x65f9ef17, 0x55bc28f2, 0x80dcc7f7, 0xf46eeddc, 0x5fdcefce, 0x553f7];\n \n #[doc(hidden)]\n-pub fn mul_pow10<'a>(x: &'a mut Big, n: usize) -> &'a mut Big {\n+pub fn mul_pow10(x: &mut Big, n: usize) -> &mut Big {\n     debug_assert!(n < 512);\n     if n &   7 != 0 { x.mul_small(POW10[n & 7]); }\n     if n &   8 != 0 { x.mul_small(POW10[8]); }\n@@ -54,7 +54,7 @@ pub fn mul_pow10<'a>(x: &'a mut Big, n: usize) -> &'a mut Big {\n     x\n }\n \n-fn div_2pow10<'a>(x: &'a mut Big, mut n: usize) -> &'a mut Big {\n+fn div_2pow10(x: &mut Big, mut n: usize) -> &mut Big {\n     let largest = POW10.len() - 1;\n     while n > largest {\n         x.div_rem_small(POW10[largest]);"}, {"sha": "07de4d0761baadf7db47c3bddb3f82199fc80bcf", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=a520568ae7dea13430c3d9ba5b3fb9596d863791", "patch": "@@ -965,7 +965,7 @@ pub trait Index<Idx: ?Sized> {\n \n     /// The method for the indexing (`Foo[Bar]`) operation\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn index<'a>(&'a self, index: Idx) -> &'a Self::Output;\n+    fn index(&self, index: Idx) -> &Self::Output;\n }\n \n /// The `IndexMut` trait is used to specify the functionality of indexing\n@@ -1008,7 +1008,7 @@ pub trait Index<Idx: ?Sized> {\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n     /// The method for the indexing (`Foo[Bar]`) operation\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn index_mut<'a>(&'a mut self, index: Idx) -> &'a mut Self::Output;\n+    fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n }\n \n /// An unbounded range.\n@@ -1119,7 +1119,7 @@ pub trait Deref {\n \n     /// The method called to dereference a value\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn deref<'a>(&'a self) -> &'a Self::Target;\n+    fn deref(&self) -> &Self::Target;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1180,7 +1180,7 @@ impl<'a, T: ?Sized> Deref for &'a mut T {\n pub trait DerefMut: Deref {\n     /// The method called to mutably dereference a value\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn deref_mut<'a>(&'a mut self) -> &'a mut Self::Target;\n+    fn deref_mut(&mut self) -> &mut Self::Target;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1434617baddce5cf0eeccf3b5248ed229c225394", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=a520568ae7dea13430c3d9ba5b3fb9596d863791", "patch": "@@ -241,7 +241,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn as_ref<'r>(&'r self) -> Option<&'r T> {\n+    pub fn as_ref(&self) -> Option<&T> {\n         match *self {\n             Some(ref x) => Some(x),\n             None => None,\n@@ -262,7 +262,7 @@ impl<T> Option<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn as_mut<'r>(&'r mut self) -> Option<&'r mut T> {\n+    pub fn as_mut(&mut self) -> Option<&mut T> {\n         match *self {\n             Some(ref mut x) => Some(x),\n             None => None,\n@@ -289,7 +289,7 @@ impl<T> Option<T> {\n     #[unstable(feature = \"as_slice\",\n                reason = \"waiting for mut conventions\",\n                issue = \"27776\")]\n-    pub fn as_mut_slice<'r>(&'r mut self) -> &'r mut [T] {\n+    pub fn as_mut_slice(&mut self) -> &mut [T] {\n         match *self {\n             Some(ref mut x) => {\n                 let result: &mut [T] = slice::mut_ref_slice(x);\n@@ -692,7 +692,7 @@ impl<T> Option<T> {\n     #[inline]\n     #[unstable(feature = \"as_slice\", since = \"unsure of the utility here\",\n                issue = \"27776\")]\n-    pub fn as_slice<'a>(&'a self) -> &'a [T] {\n+    pub fn as_slice(&self) -> &[T] {\n         match *self {\n             Some(ref x) => slice::ref_slice(x),\n             None => {"}, {"sha": "142130aad9f2b16109a9c4fa3da4b482999e4c38", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=a520568ae7dea13430c3d9ba5b3fb9596d863791", "patch": "@@ -468,7 +468,7 @@ impl<T:?Sized> Deref for Unique<T> {\n     type Target = *mut T;\n \n     #[inline]\n-    fn deref<'a>(&'a self) -> &'a *mut T {\n+    fn deref(&self) -> &*mut T {\n         unsafe { mem::transmute(&*self.pointer) }\n     }\n }"}, {"sha": "cf605f507bca66db2b25854e0cae188f17cea6f5", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=a520568ae7dea13430c3d9ba5b3fb9596d863791", "patch": "@@ -69,48 +69,48 @@ use raw::Slice as RawSlice;\n pub trait SliceExt {\n     type Item;\n \n-    fn split_at<'a>(&'a self, mid: usize) -> (&'a [Self::Item], &'a [Self::Item]);\n-    fn iter<'a>(&'a self) -> Iter<'a, Self::Item>;\n-    fn split<'a, P>(&'a self, pred: P) -> Split<'a, Self::Item, P>\n+    fn split_at(&self, mid: usize) -> (&[Self::Item], &[Self::Item]);\n+    fn iter(&self) -> Iter<Self::Item>;\n+    fn split<P>(&self, pred: P) -> Split<Self::Item, P>\n                     where P: FnMut(&Self::Item) -> bool;\n-    fn splitn<'a, P>(&'a self, n: usize, pred: P) -> SplitN<'a, Self::Item, P>\n+    fn splitn<P>(&self, n: usize, pred: P) -> SplitN<Self::Item, P>\n                      where P: FnMut(&Self::Item) -> bool;\n-    fn rsplitn<'a, P>(&'a self,  n: usize, pred: P) -> RSplitN<'a, Self::Item, P>\n+    fn rsplitn<P>(&self,  n: usize, pred: P) -> RSplitN<Self::Item, P>\n                       where P: FnMut(&Self::Item) -> bool;\n-    fn windows<'a>(&'a self, size: usize) -> Windows<'a, Self::Item>;\n-    fn chunks<'a>(&'a self, size: usize) -> Chunks<'a, Self::Item>;\n-    fn get<'a>(&'a self, index: usize) -> Option<&'a Self::Item>;\n-    fn first<'a>(&'a self) -> Option<&'a Self::Item>;\n-    fn tail<'a>(&'a self) -> &'a [Self::Item];\n-    fn init<'a>(&'a self) -> &'a [Self::Item];\n-    fn split_first<'a>(&'a self) -> Option<(&'a Self::Item, &'a [Self::Item])>;\n-    fn split_last<'a>(&'a self) -> Option<(&'a Self::Item, &'a [Self::Item])>;\n-    fn last<'a>(&'a self) -> Option<&'a Self::Item>;\n-    unsafe fn get_unchecked<'a>(&'a self, index: usize) -> &'a Self::Item;\n+    fn windows(&self, size: usize) -> Windows<Self::Item>;\n+    fn chunks(&self, size: usize) -> Chunks<Self::Item>;\n+    fn get(&self, index: usize) -> Option<&Self::Item>;\n+    fn first(&self) -> Option<&Self::Item>;\n+    fn tail(&self) -> &[Self::Item];\n+    fn init(&self) -> &[Self::Item];\n+    fn split_first(&self) -> Option<(&Self::Item, &[Self::Item])>;\n+    fn split_last(&self) -> Option<(&Self::Item, &[Self::Item])>;\n+    fn last(&self) -> Option<&Self::Item>;\n+    unsafe fn get_unchecked(&self, index: usize) -> &Self::Item;\n     fn as_ptr(&self) -> *const Self::Item;\n     fn binary_search_by<F>(&self, f: F) -> Result<usize, usize> where\n         F: FnMut(&Self::Item) -> Ordering;\n     fn len(&self) -> usize;\n     fn is_empty(&self) -> bool { self.len() == 0 }\n-    fn get_mut<'a>(&'a mut self, index: usize) -> Option<&'a mut Self::Item>;\n-    fn iter_mut<'a>(&'a mut self) -> IterMut<'a, Self::Item>;\n-    fn first_mut<'a>(&'a mut self) -> Option<&'a mut Self::Item>;\n-    fn tail_mut<'a>(&'a mut self) -> &'a mut [Self::Item];\n-    fn init_mut<'a>(&'a mut self) -> &'a mut [Self::Item];\n-    fn split_first_mut<'a>(&'a mut self) -> Option<(&'a mut Self::Item, &'a mut [Self::Item])>;\n-    fn split_last_mut<'a>(&'a mut self) -> Option<(&'a mut Self::Item, &'a mut [Self::Item])>;\n-    fn last_mut<'a>(&'a mut self) -> Option<&'a mut Self::Item>;\n-    fn split_mut<'a, P>(&'a mut self, pred: P) -> SplitMut<'a, Self::Item, P>\n+    fn get_mut(&mut self, index: usize) -> Option<&mut Self::Item>;\n+    fn iter_mut(&mut self) -> IterMut<Self::Item>;\n+    fn first_mut(&mut self) -> Option<&mut Self::Item>;\n+    fn tail_mut(&mut self) -> &mut [Self::Item];\n+    fn init_mut(&mut self) -> &mut [Self::Item];\n+    fn split_first_mut(&mut self) -> Option<(&mut Self::Item, &mut [Self::Item])>;\n+    fn split_last_mut(&mut self) -> Option<(&mut Self::Item, &mut [Self::Item])>;\n+    fn last_mut(&mut self) -> Option<&mut Self::Item>;\n+    fn split_mut<P>(&mut self, pred: P) -> SplitMut<Self::Item, P>\n                         where P: FnMut(&Self::Item) -> bool;\n     fn splitn_mut<P>(&mut self, n: usize, pred: P) -> SplitNMut<Self::Item, P>\n                      where P: FnMut(&Self::Item) -> bool;\n     fn rsplitn_mut<P>(&mut self,  n: usize, pred: P) -> RSplitNMut<Self::Item, P>\n                       where P: FnMut(&Self::Item) -> bool;\n-    fn chunks_mut<'a>(&'a mut self, chunk_size: usize) -> ChunksMut<'a, Self::Item>;\n+    fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<Self::Item>;\n     fn swap(&mut self, a: usize, b: usize);\n-    fn split_at_mut<'a>(&'a mut self, mid: usize) -> (&'a mut [Self::Item], &'a mut [Self::Item]);\n+    fn split_at_mut(&mut self, mid: usize) -> (&mut [Self::Item], &mut [Self::Item]);\n     fn reverse(&mut self);\n-    unsafe fn get_unchecked_mut<'a>(&'a mut self, index: usize) -> &'a mut Self::Item;\n+    unsafe fn get_unchecked_mut(&mut self, index: usize) -> &mut Self::Item;\n     fn as_mut_ptr(&mut self) -> *mut Self::Item;\n \n     fn position_elem(&self, t: &Self::Item) -> Option<usize> where Self::Item: PartialEq;\n@@ -163,7 +163,7 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn iter<'a>(&'a self) -> Iter<'a, T> {\n+    fn iter(&self) -> Iter<T> {\n         unsafe {\n             let p = if mem::size_of::<T>() == 0 {\n                 1 as *const _\n@@ -182,7 +182,7 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn split<'a, P>(&'a self, pred: P) -> Split<'a, T, P> where P: FnMut(&T) -> bool {\n+    fn split<P>(&self, pred: P) -> Split<T, P> where P: FnMut(&T) -> bool {\n         Split {\n             v: self,\n             pred: pred,\n@@ -191,7 +191,7 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn splitn<'a, P>(&'a self, n: usize, pred: P) -> SplitN<'a, T, P> where\n+    fn splitn<P>(&self, n: usize, pred: P) -> SplitN<T, P> where\n         P: FnMut(&T) -> bool,\n     {\n         SplitN {\n@@ -204,7 +204,7 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn rsplitn<'a, P>(&'a self, n: usize, pred: P) -> RSplitN<'a, T, P> where\n+    fn rsplitn<P>(&self, n: usize, pred: P) -> RSplitN<T, P> where\n         P: FnMut(&T) -> bool,\n     {\n         RSplitN {\n@@ -311,7 +311,7 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn iter_mut<'a>(&'a mut self) -> IterMut<'a, T> {\n+    fn iter_mut(&mut self) -> IterMut<T> {\n         unsafe {\n             let p = if mem::size_of::<T>() == 0 {\n                 1 as *mut _\n@@ -368,12 +368,12 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn split_mut<'a, P>(&'a mut self, pred: P) -> SplitMut<'a, T, P> where P: FnMut(&T) -> bool {\n+    fn split_mut<P>(&mut self, pred: P) -> SplitMut<T, P> where P: FnMut(&T) -> bool {\n         SplitMut { v: self, pred: pred, finished: false }\n     }\n \n     #[inline]\n-    fn splitn_mut<'a, P>(&'a mut self, n: usize, pred: P) -> SplitNMut<'a, T, P> where\n+    fn splitn_mut<P>(&mut self, n: usize, pred: P) -> SplitNMut<T, P> where\n         P: FnMut(&T) -> bool\n     {\n         SplitNMut {\n@@ -386,7 +386,7 @@ impl<T> SliceExt for [T] {\n     }\n \n     #[inline]\n-    fn rsplitn_mut<'a, P>(&'a mut self, n: usize, pred: P) -> RSplitNMut<'a, T, P> where\n+    fn rsplitn_mut<P>(&mut self, n: usize, pred: P) -> RSplitNMut<T, P> where\n         P: FnMut(&T) -> bool,\n     {\n         RSplitNMut {\n@@ -1410,15 +1410,15 @@ impl<'a, T> ExactSizeIterator for ChunksMut<'a, T> {}\n \n /// Converts a pointer to A into a slice of length 1 (without copying).\n #[unstable(feature = \"ref_slice\", issue = \"27774\")]\n-pub fn ref_slice<'a, A>(s: &'a A) -> &'a [A] {\n+pub fn ref_slice<A>(s: &A) -> &[A] {\n     unsafe {\n         from_raw_parts(s, 1)\n     }\n }\n \n /// Converts a pointer to A into a slice of length 1 (without copying).\n #[unstable(feature = \"ref_slice\", issue = \"27774\")]\n-pub fn mut_ref_slice<'a, A>(s: &'a mut A) -> &'a mut [A] {\n+pub fn mut_ref_slice<A>(s: &mut A) -> &mut [A] {\n     unsafe {\n         from_raw_parts_mut(s, 1)\n     }"}, {"sha": "4612fc8900861f0b5e5918ecbd6c2a7b2852bf52", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a520568ae7dea13430c3d9ba5b3fb9596d863791/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=a520568ae7dea13430c3d9ba5b3fb9596d863791", "patch": "@@ -142,7 +142,7 @@ pub fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n /// that the string contains valid UTF-8.\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn from_utf8_unchecked<'a>(v: &'a [u8]) -> &'a str {\n+pub unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n     mem::transmute(v)\n }\n \n@@ -1270,9 +1270,9 @@ pub trait StrExt {\n \n     fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool;\n     fn contains_char<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool;\n-    fn chars<'a>(&'a self) -> Chars<'a>;\n-    fn bytes<'a>(&'a self) -> Bytes<'a>;\n-    fn char_indices<'a>(&'a self) -> CharIndices<'a>;\n+    fn chars(&self) -> Chars;\n+    fn bytes(&self) -> Bytes;\n+    fn char_indices(&self) -> CharIndices;\n     fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P>;\n     fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>\n         where P::Searcher: ReverseSearcher<'a>;\n@@ -1288,12 +1288,12 @@ pub trait StrExt {\n     fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P>;\n     fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n         where P::Searcher: ReverseSearcher<'a>;\n-    fn lines<'a>(&'a self) -> Lines<'a>;\n-    fn lines_any<'a>(&'a self) -> LinesAny<'a>;\n+    fn lines(&self) -> Lines;\n+    fn lines_any(&self) -> LinesAny;\n     fn char_len(&self) -> usize;\n-    fn slice_chars<'a>(&'a self, begin: usize, end: usize) -> &'a str;\n-    unsafe fn slice_unchecked<'a>(&'a self, begin: usize, end: usize) -> &'a str;\n-    unsafe fn slice_mut_unchecked<'a>(&'a mut self, begin: usize, end: usize) -> &'a mut str;\n+    fn slice_chars(&self, begin: usize, end: usize) -> &str;\n+    unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str;\n+    unsafe fn slice_mut_unchecked(&mut self, begin: usize, end: usize) -> &mut str;\n     fn starts_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool;\n     fn ends_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool\n         where P::Searcher: ReverseSearcher<'a>;\n@@ -1307,14 +1307,14 @@ pub trait StrExt {\n     fn char_range_at_reverse(&self, start: usize) -> CharRange;\n     fn char_at(&self, i: usize) -> char;\n     fn char_at_reverse(&self, i: usize) -> char;\n-    fn as_bytes<'a>(&'a self) -> &'a [u8];\n+    fn as_bytes(&self) -> &[u8];\n     fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>;\n     fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>\n         where P::Searcher: ReverseSearcher<'a>;\n     fn find_str<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>;\n     fn split_at(&self, mid: usize) -> (&str, &str);\n     fn split_at_mut(&mut self, mid: usize) -> (&mut str, &mut str);\n-    fn slice_shift_char<'a>(&'a self) -> Option<(char, &'a str)>;\n+    fn slice_shift_char(&self) -> Option<(char, &str)>;\n     fn subslice_offset(&self, inner: &str) -> usize;\n     fn as_ptr(&self) -> *const u8;\n     fn len(&self) -> usize;"}]}