{"sha": "1a09a6d00a782db90501c0921dd4c7587f6eba72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMDlhNmQwMGE3ODJkYjkwNTAxYzA5MjFkZDRjNzU4N2Y2ZWJhNzI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-23T05:02:59Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-23T05:53:53Z"}, "message": "Use config file for constants", "tree": {"sha": "fff5155cf7126bc9792894bc64e2b6d4aad86c9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fff5155cf7126bc9792894bc64e2b6d4aad86c9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a09a6d00a782db90501c0921dd4c7587f6eba72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a09a6d00a782db90501c0921dd4c7587f6eba72", "html_url": "https://github.com/rust-lang/rust/commit/1a09a6d00a782db90501c0921dd4c7587f6eba72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a09a6d00a782db90501c0921dd4c7587f6eba72/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa6f7e8d3cad4ee2737d9dce662977f216e01096", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6f7e8d3cad4ee2737d9dce662977f216e01096", "html_url": "https://github.com/rust-lang/rust/commit/aa6f7e8d3cad4ee2737d9dce662977f216e01096"}], "stats": {"total": 171, "additions": 115, "deletions": 56}, "files": [{"sha": "297e4f65fe1896b95dfa2035bee7db1bd2ee9910", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a09a6d00a782db90501c0921dd4c7587f6eba72/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1a09a6d00a782db90501c0921dd4c7587f6eba72/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1a09a6d00a782db90501c0921dd4c7587f6eba72", "patch": "@@ -3,6 +3,7 @@ name = \"rustfmt\"\n version = \"0.0.1\"\n dependencies = [\n  \"diff 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (git+https://github.com/nrc/strings.rs.git)\",\n  \"toml 0.1.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]"}, {"sha": "f76d45d39c757e14b2746717fb2e29a1bfcb6a1c", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a09a6d00a782db90501c0921dd4c7587f6eba72/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1a09a6d00a782db90501c0921dd4c7587f6eba72/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=1a09a6d00a782db90501c0921dd4c7587f6eba72", "patch": "@@ -13,6 +13,9 @@ build = \"build.rs\"\n strings = \"0.0.1\"\n git = \"https://github.com/nrc/strings.rs.git\"\n \n+[dependencies]\n+toml = \"0.1.20\"\n+rustc-serialize = \"0.3.14\"\n+\n [dev-dependencies]\n diff = \"0.1.0\"\n-toml = \"0.1.20\""}, {"sha": "3e6d051d9b1d67eda791b4bd418f290954105074", "filename": "build.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a09a6d00a782db90501c0921dd4c7587f6eba72/build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a09a6d00a782db90501c0921dd4c7587f6eba72/build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.rs?ref=1a09a6d00a782db90501c0921dd4c7587f6eba72", "patch": "@@ -17,11 +17,8 @@ fn main() {\n     let in_file = Path::new(\"src/default.toml\");\n \n     let manifest_dir = env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n-    let profile = env::var(\"PROFILE\").unwrap();\n     let mut out_file = PathBuf::new();\n     out_file.push(manifest_dir);\n-    out_file.push(\"target\");\n-    out_file.push(profile);\n     out_file.push(\"default.toml\");\n \n     std::fs::copy(in_file, out_file).unwrap();"}, {"sha": "5a12dbd639b61981a8310f947dfc72a5690dbf04", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=1a09a6d00a782db90501c0921dd4c7587f6eba72", "patch": "@@ -15,10 +15,18 @@ extern crate rustfmt;\n \n use rustfmt::{WriteMode, run};\n \n+use std::fs::File;\n+use std::io::Read;\n+\n fn main() {\n     let args: Vec<_> = std::env::args().collect();\n-    //run(args, WriteMode::Display);\n-    run(args, WriteMode::Overwrite);\n+    let mut def_config_file = File::open(\"default.toml\").unwrap();\n+    let mut def_config = String::new();\n+    def_config_file.read_to_string(&mut def_config).unwrap();\n+\n+    //run(args, WriteMode::Display, &def_config);\n+    run(args, WriteMode::Overwrite, &def_config);\n+\n     std::env::set_exit_status(0);\n \n     // TODO unit tests"}, {"sha": "5ed1c82b22f929495636a4b14bc3b50ae8d9be4f", "filename": "src/changes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Fchanges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Fchanges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchanges.rs?ref=1a09a6d00a782db90501c0921dd4c7587f6eba72", "patch": "@@ -20,7 +20,6 @@ use std::fmt;\n use std::fs::File;\n use std::io::{Write, stdout};\n use WriteMode;\n-use NEWLINE_STYLE;\n use NewlineStyle;\n \n // This is basically a wrapper around a bunch of Ropes which makes it convenient\n@@ -157,7 +156,7 @@ impl<'a> ChangeSet<'a> {\n             -> Result<(), ::std::io::Error>\n             where T: Write,\n         {\n-            match NEWLINE_STYLE {\n+            match config!(newline_style) {\n                 NewlineStyle::Unix => write!(writer, \"{}\", text),\n                 NewlineStyle::Windows => {\n                     for (c, _) in text.chars() {"}, {"sha": "218f2a04fb29784873c9692064c4096190566e4c", "filename": "src/default.toml", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Fdefault.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Fdefault.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdefault.toml?ref=1a09a6d00a782db90501c0921dd4c7587f6eba72", "patch": "@@ -1,2 +1,7 @@\n-max-width = 100\n-ideal-width = 80\n+max_width = 100\n+ideal_width = 80\n+leeway = 5\n+tab_spaces = 4\n+newline_style = \"Unix\"\n+fn_brace_style = \"SameLineWhere\"\n+fn_return_indent = \"WithArgs\""}, {"sha": "c1cbf17564579ae9eaf55aa4b7495bb421452aad", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=1a09a6d00a782db90501c0921dd4c7587f6eba72", "patch": "@@ -15,7 +15,7 @@ use lists::{write_list, ListFormatting, SeparatorTactic, ListTactic};\n use syntax::{ast, ptr};\n use syntax::codemap::{Span, Pos};\n \n-use {MAX_WIDTH, MIN_STRING};\n+use MIN_STRING;\n \n impl<'a> FmtVisitor<'a> {\n     // TODO NEEDS TESTS\n@@ -26,7 +26,7 @@ impl<'a> FmtVisitor<'a> {\n         // strings, or if the string is too long for the line.\n         let l_loc = self.codemap.lookup_char_pos(span.lo);\n         let r_loc = self.codemap.lookup_char_pos(span.hi);\n-        if l_loc.line == r_loc.line && r_loc.col.to_usize() <= MAX_WIDTH {\n+        if l_loc.line == r_loc.line && r_loc.col.to_usize() <= config!(max_width) {\n             return self.snippet(span);\n         }\n "}, {"sha": "2ca5423f0c8a0100c2af6452390e7f3ea310abd0", "filename": "src/functions.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffunctions.rs?ref=1a09a6d00a782db90501c0921dd4c7587f6eba72", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use {ReturnIndent, MAX_WIDTH, BraceStyle,\n-     IDEAL_WIDTH, LEEWAY, FN_BRACE_STYLE, FN_RETURN_INDENT};\n+use {ReturnIndent, BraceStyle};\n use utils::make_indent;\n use lists::{write_list, ListFormatting, SeparatorTactic, ListTactic};\n use visitor::FmtVisitor;\n@@ -149,8 +148,8 @@ impl<'a> FmtVisitor<'a> {\n             // If we've already gone multi-line, or the return type would push\n             // over the max width, then put the return type on a new line.\n             if result.contains(\"\\n\") ||\n-               result.len() + indent + ret_str.len() > MAX_WIDTH {\n-                let indent = match FN_RETURN_INDENT {\n+               result.len() + indent + ret_str.len() > config!(max_width) {\n+                let indent = match config!(fn_return_indent) {\n                     ReturnIndent::WithWhereClause => indent + 4,\n                     // TODO we might want to check that using the arg indent doesn't\n                     // blow our budget, and if it does, then fallback to the where\n@@ -344,15 +343,15 @@ impl<'a> FmtVisitor<'a> {\n             if !newline_brace {\n                 used_space += 2;\n             }\n-            let one_line_budget = if used_space > MAX_WIDTH {\n+            let one_line_budget = if used_space > config!(max_width) {\n                 0\n             } else {\n-                MAX_WIDTH - used_space\n+                config!(max_width) - used_space\n             };\n \n             // 2 = `()`\n             let used_space = indent + result.len() + 2;\n-            let max_space = IDEAL_WIDTH + LEEWAY;\n+            let max_space = config!(ideal_width) + config!(leeway);\n             debug!(\"compute_budgets_for_args: used_space: {}, max_space: {}\",\n                    used_space, max_space);\n             if used_space < max_space {\n@@ -368,7 +367,7 @@ impl<'a> FmtVisitor<'a> {\n             result.push_str(&make_indent(indent + 4));\n             // 6 = new indent + `()`\n             let used_space = indent + 6;\n-            let max_space = IDEAL_WIDTH + LEEWAY;\n+            let max_space = config!(ideal_width) + config!(leeway);\n             if used_space > max_space {\n                 // Whoops! bankrupt.\n                 // TODO take evasive action, perhaps kill the indent or something.\n@@ -382,7 +381,7 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     fn newline_for_brace(&self, where_clause: &ast::WhereClause) -> bool {\n-        match FN_BRACE_STYLE {\n+        match config!(fn_brace_style) {\n             BraceStyle::AlwaysNextLine => true,\n             BraceStyle::SameLineWhere if where_clause.predicates.len() > 0 => true,\n             _ => false,\n@@ -399,7 +398,7 @@ impl<'a> FmtVisitor<'a> {\n             return result;\n         }\n \n-        let budget = MAX_WIDTH - indent - 2;\n+        let budget = config!(max_width) - indent - 2;\n         // TODO might need to insert a newline if the generics are really long\n         result.push('<');\n \n@@ -475,7 +474,7 @@ impl<'a> FmtVisitor<'a> {\n                                                         .zip(comments.into_iter())\n                                                         .collect();\n \n-        let budget = IDEAL_WIDTH + LEEWAY - indent - 10;\n+        let budget = config!(ideal_width) + config!(leeway) - indent - 10;\n         let fmt = ListFormatting {\n             tactic: ListTactic::Vertical,\n             separator: \",\","}, {"sha": "1c0fe0105ef4ef1d11bc3c2a3e60710834233f81", "filename": "src/lib.rs", "status": "modified", "additions": 58, "deletions": 15, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1a09a6d00a782db90501c0921dd4c7587f6eba72", "patch": "@@ -24,13 +24,17 @@ extern crate getopts;\n extern crate rustc;\n extern crate rustc_driver;\n extern crate syntax;\n+extern crate rustc_serialize;\n \n extern crate strings;\n \n use rustc::session::Session;\n-use rustc::session::config::{self, Input};\n+use rustc::session::config as rustc_config;\n+use rustc::session::config::Input;\n use rustc_driver::{driver, CompilerCalls, Compilation};\n \n+use rustc_serialize::{Decodable, Decoder};\n+\n use syntax::ast;\n use syntax::codemap::CodeMap;\n use syntax::diagnostics;\n@@ -42,6 +46,8 @@ use std::collections::HashMap;\n use changes::ChangeSet;\n use visitor::FmtVisitor;\n \n+#[macro_use]\n+mod config;\n mod changes;\n mod visitor;\n mod functions;\n@@ -52,17 +58,12 @@ mod types;\n mod expr;\n mod imports;\n \n-const IDEAL_WIDTH: usize = 80;\n-const LEEWAY: usize = 5;\n-const MAX_WIDTH: usize = 100;\n const MIN_STRING: usize = 10;\n-const TAB_SPACES: usize = 4;\n-const NEWLINE_STYLE: NewlineStyle = NewlineStyle::Unix;\n-const FN_BRACE_STYLE: BraceStyle = BraceStyle::SameLineWhere;\n-const FN_RETURN_INDENT: ReturnIndent = ReturnIndent::WithArgs;\n // When we get scoped annotations, we should have rustfmt::skip.\n const SKIP_ANNOTATION: &'static str = \"rustfmt_skip\";\n \n+static mut CONFIG: Option<config::Config> = None;\n+\n #[derive(Copy, Clone)]\n pub enum WriteMode {\n     Overwrite,\n@@ -75,29 +76,64 @@ pub enum WriteMode {\n }\n \n #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n-enum NewlineStyle {\n+pub enum NewlineStyle {\n     Windows, // \\r\\n\n     Unix, // \\n\n }\n \n+impl Decodable for NewlineStyle {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        let s = try!(d.read_str());\n+        match &*s {\n+            \"Windows\" => Ok(NewlineStyle::Windows),\n+            \"Unix\" => Ok(NewlineStyle::Unix),\n+            _ => Err(d.error(\"Bad variant\")),\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n-enum BraceStyle {\n+pub enum BraceStyle {\n     AlwaysNextLine,\n     PreferSameLine,\n     // Prefer same line except where there is a where clause, in which case force\n     // the brace to the next line.\n     SameLineWhere,\n }\n \n+impl Decodable for BraceStyle {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        let s = try!(d.read_str());\n+        match &*s {\n+            \"AlwaysNextLine\" => Ok(BraceStyle::AlwaysNextLine),\n+            \"PreferSameLine\" => Ok(BraceStyle::PreferSameLine),\n+            \"SameLineWhere\" => Ok(BraceStyle::SameLineWhere),\n+            _ => Err(d.error(\"Bad variant\")),\n+        }\n+    }\n+}\n+\n // How to indent a function's return type.\n #[derive(Copy, Clone, Eq, PartialEq, Debug)]\n-enum ReturnIndent {\n+pub enum ReturnIndent {\n     // Aligned with the arguments\n     WithArgs,\n     // Aligned with the where clause\n     WithWhereClause,\n }\n \n+// TODO could use a macro for all these Decodable impls.\n+impl Decodable for ReturnIndent {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        let s = try!(d.read_str());\n+        match &*s {\n+            \"WithArgs\" => Ok(ReturnIndent::WithArgs),\n+            \"WithWhereClause\" => Ok(ReturnIndent::WithWhereClause),\n+            _ => Err(d.error(\"Bad variant\")),\n+        }\n+    }\n+}\n+\n // Formatting which depends on the AST.\n fn fmt_ast<'a>(krate: &ast::Crate, codemap: &'a CodeMap) -> ChangeSet<'a> {\n     let mut visitor = FmtVisitor::from_codemap(codemap);\n@@ -133,10 +169,10 @@ fn fmt_lines(changes: &mut ChangeSet) {\n                     line_len -= b - lw;\n                 }\n                 // Check for any line width errors we couldn't correct.\n-                if line_len > MAX_WIDTH {\n+                if line_len > config!(max_width) {\n                     // TODO store the error rather than reporting immediately.\n                     println!(\"Rustfmt couldn't fix (sorry). {}:{}: line longer than {} characters\",\n-                             f, cur_line, MAX_WIDTH);\n+                             f, cur_line, config!(max_width));\n                 }\n                 line_len = 0;\n                 cur_line += 1;\n@@ -200,7 +236,7 @@ impl<'a> CompilerCalls<'a> for RustFmtCalls {\n \n     fn no_input(&mut self,\n                 _: &getopts::Matches,\n-                _: &config::Options,\n+                _: &rustc_config::Options,\n                 _: &Option<PathBuf>,\n                 _: &Option<PathBuf>,\n                 _: &diagnostics::registry::Registry)\n@@ -248,7 +284,14 @@ impl<'a> CompilerCalls<'a> for RustFmtCalls {\n     }\n }\n \n-pub fn run(args: Vec<String>, write_mode: WriteMode) {\n+// args are the arguments passed on the command line, generally passed through\n+// to the compiler.\n+// write_mode determines what happens to the result of running rustfmt, see\n+// WriteMode.\n+// default_config is a string of toml data to be used to configure rustfmt.\n+pub fn run(args: Vec<String>, write_mode: WriteMode, default_config: &str) {\n+    config::set_config(default_config);\n+\n     let mut call_ctxt = RustFmtCalls { input_path: None, write_mode: write_mode };\n     rustc_driver::run_compiler(&args, &mut call_ctxt);\n }"}, {"sha": "2aac931c4e6c1a3523ed18c73fa722e4ea56549e", "filename": "src/visitor.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a09a6d00a782db90501c0921dd4c7587f6eba72/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=1a09a6d00a782db90501c0921dd4c7587f6eba72", "patch": "@@ -14,7 +14,7 @@ use syntax::visit;\n \n use utils;\n \n-use {IDEAL_WIDTH, MAX_WIDTH, TAB_SPACES, SKIP_ANNOTATION};\n+use SKIP_ANNOTATION;\n use changes::ChangeSet;\n \n pub struct FmtVisitor<'a> {\n@@ -32,7 +32,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                self.codemap.lookup_char_pos(ex.span.hi));\n         self.format_missing(ex.span.lo);\n         let offset = self.changes.cur_offset_span(ex.span);\n-        let new_str = self.rewrite_expr(ex, MAX_WIDTH - offset, offset);\n+        let new_str = self.rewrite_expr(ex, config!(max_width) - offset, offset);\n         self.changes.push_str_span(ex.span, &new_str);\n         self.last_pos = ex.span.hi;\n     }\n@@ -65,7 +65,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n \n         self.changes.push_str_span(b.span, \"{\");\n         self.last_pos = self.last_pos + BytePos(1);\n-        self.block_indent += TAB_SPACES;\n+        self.block_indent += config!(tab_spaces);\n \n         for stmt in &b.stmts {\n             self.visit_stmt(&stmt)\n@@ -78,7 +78,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             None => {}\n         }\n \n-        self.block_indent -= TAB_SPACES;\n+        self.block_indent -= config!(tab_spaces);\n         // TODO we should compress any newlines here to just one\n         self.format_missing_with_indent(b.span.hi - BytePos(1));\n         self.changes.push_str_span(b.span, \"}\");\n@@ -149,8 +149,8 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 match vp.node {\n                     ast::ViewPath_::ViewPathList(ref path, ref path_list) => {\n                         let block_indent = self.block_indent;\n-                        let one_line_budget = MAX_WIDTH - block_indent;\n-                        let multi_line_budget = IDEAL_WIDTH - block_indent;\n+                        let one_line_budget = config!(max_width) - block_indent;\n+                        let multi_line_budget = config!(ideal_width) - block_indent;\n                         let new_str = self.rewrite_use_list(block_indent,\n                                                             one_line_budget,\n                                                             multi_line_budget,\n@@ -170,9 +170,9 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n             ast::Item_::ItemImpl(..) |\n             ast::Item_::ItemMod(_) |\n             ast::Item_::ItemTrait(..) => {\n-                self.block_indent += TAB_SPACES;\n+                self.block_indent += config!(tab_spaces);\n                 visit::walk_item(self, item);\n-                self.block_indent -= TAB_SPACES;\n+                self.block_indent -= config!(tab_spaces);\n             }\n             ast::Item_::ItemExternCrate(_) => {\n                 self.format_missing_with_indent(item.span.lo);"}, {"sha": "40474b8dfee0d9691feff54d2f0fb1a81b432bac", "filename": "tests/idem.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1a09a6d00a782db90501c0921dd4c7587f6eba72/tests%2Fidem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a09a6d00a782db90501c0921dd4c7587f6eba72/tests%2Fidem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fidem.rs?ref=1a09a6d00a782db90501c0921dd4c7587f6eba72", "patch": "@@ -58,7 +58,6 @@ fn idempotent_tests() {\n // Compare output to input.\n fn print_mismatches(result: HashMap<String, String>) {\n     for (file_name, fmt_text) in result {\n-        println!(\"Mismatch in {}.\", file_name);\n         println!(\"{}\", fmt_text);\n     }\n }\n@@ -68,14 +67,16 @@ static HANDLE_RESULT: &'static Fn(HashMap<String, String>) = &handle_result;\n \n pub fn idempotent_check(filename: String) -> Result<(), HashMap<String, String>> {\n     let args = vec![\"rustfmt\".to_owned(), filename];\n+    let mut def_config_file = fs::File::open(\"default.toml\").unwrap();\n+    let mut def_config = String::new();\n+    def_config_file.read_to_string(&mut def_config).unwrap();\n     // this thread is not used for concurrency, but rather to workaround the issue that the passed\n     // function handle needs to have static lifetime. Instead of using a global RefCell, we use\n     // panic to return a result in case of failure. This has the advantage of smoothing the road to\n     // multithreaded rustfmt\n     thread::catch_panic(move || {\n-        run(args, WriteMode::Return(HANDLE_RESULT));\n+        run(args, WriteMode::Return(HANDLE_RESULT), &def_config);\n     }).map_err(|any|\n-        // i know it is a hashmap\n         *any.downcast().unwrap()\n     )\n }\n@@ -90,8 +91,8 @@ fn handle_result(result: HashMap<String, String>) {\n         // TODO: speedup by running through bytes iterator\n         f.read_to_string(&mut text).unwrap();\n         if fmt_text != text {\n-            show_diff(&file_name, &fmt_text, &text);\n-            failures.insert(file_name, fmt_text);\n+            let diff_str = make_diff(&file_name, &fmt_text, &text);\n+            failures.insert(file_name, diff_str);\n         }\n     }\n     if !failures.is_empty() {\n@@ -100,24 +101,25 @@ fn handle_result(result: HashMap<String, String>) {\n }\n \n \n-fn show_diff(file_name: &str, expected: &str, actual: &str) {\n+fn make_diff(file_name: &str, expected: &str, actual: &str) -> String {\n     let mut line_number = 1;\n     let mut prev_both = true;\n+    let mut text = String::new();\n \n     for result in diff::lines(expected, actual) {\n         match result {\n             diff::Result::Left(str) => {\n                 if prev_both {\n-                    println!(\"Mismatch @ {}:{}\", file_name, line_number);\n+                    text.push_str(&format!(\"Mismatch @ {}:{}\\n\", file_name, line_number));\n                 }\n-                println!(\"-{}\u23ce\", str);\n+                text.push_str(&format!(\"-{}\u23ce\\n\", str));\n                 prev_both = false;\n             }\n             diff::Result::Right(str) => {\n                 if prev_both {\n-                    println!(\"Mismatch @ {}:{}\", file_name, line_number);\n+                    text.push_str(&format!(\"Mismatch @ {}:{}\\n\", file_name, line_number));\n                 }\n-                println!(\"+{}\u23ce\", str);\n+                text.push_str(&format!(\"+{}\u23ce\\n\", str));\n                 prev_both = false;\n                 line_number += 1;\n             }\n@@ -127,4 +129,6 @@ fn show_diff(file_name: &str, expected: &str, actual: &str) {\n             }\n         }\n     }\n+\n+    text\n }"}]}