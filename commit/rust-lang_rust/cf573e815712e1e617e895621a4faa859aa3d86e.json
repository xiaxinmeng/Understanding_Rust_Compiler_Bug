{"sha": "cf573e815712e1e617e895621a4faa859aa3d86e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNTczZTgxNTcxMmUxZTYxN2U4OTU2MjFhNGZhYTg1OWFhM2Q4NmU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-05-04T09:51:06Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-05-06T07:58:03Z"}, "message": "Fix handling of modules in non_modrs_mods style\n\nWe need to keep track of the module relative to which we're resolving paths,\ninstead of always passing None.\n\nFixes #2673.", "tree": {"sha": "4b8a13419ba6d205fb36de691ecfd2b2f52d9969", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b8a13419ba6d205fb36de691ecfd2b2f52d9969"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf573e815712e1e617e895621a4faa859aa3d86e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf573e815712e1e617e895621a4faa859aa3d86e", "html_url": "https://github.com/rust-lang/rust/commit/cf573e815712e1e617e895621a4faa859aa3d86e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf573e815712e1e617e895621a4faa859aa3d86e/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3762d80d68103f9ec20e4db405b631dc1a9729b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3762d80d68103f9ec20e4db405b631dc1a9729b2", "html_url": "https://github.com/rust-lang/rust/commit/3762d80d68103f9ec20e4db405b631dc1a9729b2"}], "stats": {"total": 37, "additions": 26, "deletions": 11}, "files": [{"sha": "8426a751daa4d11b513f56fa2a79afeb51828808", "filename": "src/modules.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cf573e815712e1e617e895621a4faa859aa3d86e/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf573e815712e1e617e895621a4faa859aa3d86e/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=cf573e815712e1e617e895621a4faa859aa3d86e", "patch": "@@ -14,7 +14,7 @@ use std::path::{Path, PathBuf};\n \n use syntax::ast;\n use syntax::codemap::{self, FileName};\n-use syntax::parse::parser;\n+use syntax::parse::{parser, DirectoryOwnership};\n \n use utils::contains_skip;\n \n@@ -31,7 +31,7 @@ pub fn list_files<'a>(\n             FileName::Real(ref path) => path.parent().unwrap(),\n             _ => Path::new(\"\"),\n         };\n-        list_submodules(&krate.module, parent, codemap, &mut result)?;\n+        list_submodules(&krate.module, parent, None, codemap, &mut result)?;\n     }\n     result.insert(root_filename, &krate.module);\n     Ok(result)\n@@ -41,6 +41,7 @@ pub fn list_files<'a>(\n fn list_submodules<'a>(\n     module: &'a ast::Mod,\n     search_dir: &Path,\n+    relative: Option<ast::Ident>,\n     codemap: &codemap::CodeMap,\n     result: &mut BTreeMap<FileName, &'a ast::Mod>,\n ) -> Result<(), io::Error> {\n@@ -50,15 +51,16 @@ fn list_submodules<'a>(\n             if !contains_skip(&item.attrs) {\n                 let is_internal =\n                     codemap.span_to_filename(item.span) == codemap.span_to_filename(sub_mod.inner);\n-                let dir_path = if is_internal {\n-                    search_dir.join(&item.ident.to_string())\n+                let (dir_path, relative) = if is_internal {\n+                    (search_dir.join(&item.ident.to_string()), None)\n                 } else {\n-                    let mod_path = module_file(item.ident, &item.attrs, search_dir, codemap)?;\n+                    let (mod_path, relative) =\n+                        module_file(item.ident, &item.attrs, search_dir, relative, codemap)?;\n                     let dir_path = mod_path.parent().unwrap().to_owned();\n                     result.insert(FileName::Real(mod_path), sub_mod);\n-                    dir_path\n+                    (dir_path, relative)\n                 };\n-                list_submodules(sub_mod, &dir_path, codemap, result)?;\n+                list_submodules(sub_mod, &dir_path, relative, codemap, result)?;\n             }\n         }\n     }\n@@ -70,14 +72,27 @@ fn module_file(\n     id: ast::Ident,\n     attrs: &[ast::Attribute],\n     dir_path: &Path,\n+    relative: Option<ast::Ident>,\n     codemap: &codemap::CodeMap,\n-) -> Result<PathBuf, io::Error> {\n+) -> Result<(PathBuf, Option<ast::Ident>), io::Error> {\n+    eprintln!(\"module_file {:?} {:?} {:?}\", id, attrs, dir_path);\n     if let Some(path) = parser::Parser::submod_path_from_attr(attrs, dir_path) {\n-        return Ok(path);\n+        return Ok((path, None));\n     }\n \n-    match parser::Parser::default_submod_path(id, None, dir_path, codemap).result {\n-        Ok(parser::ModulePathSuccess { path, .. }) => Ok(path),\n+    match parser::Parser::default_submod_path(id, relative, dir_path, codemap).result {\n+        Ok(parser::ModulePathSuccess {\n+            path,\n+            directory_ownership,\n+            ..\n+        }) => {\n+            let relative = if let DirectoryOwnership::Owned { relative } = directory_ownership {\n+                relative\n+            } else {\n+                None\n+            };\n+            Ok((path, relative))\n+        }\n         Err(_) => Err(io::Error::new(\n             io::ErrorKind::Other,\n             format!(\"Couldn't find module {}\", id),"}]}