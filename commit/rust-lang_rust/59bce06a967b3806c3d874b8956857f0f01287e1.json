{"sha": "59bce06a967b3806c3d874b8956857f0f01287e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YmNlMDZhOTY3YjM4MDZjM2Q4NzRiODk1Njg1N2YwZjAxMjg3ZTE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-14T23:52:38Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-02-14T23:52:38Z"}, "message": "Expand expr_rec to take its optional trailing 'with' parameter.", "tree": {"sha": "4f81bc5cf6e0fa94ba9c08000e98264904a3dc53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f81bc5cf6e0fa94ba9c08000e98264904a3dc53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59bce06a967b3806c3d874b8956857f0f01287e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59bce06a967b3806c3d874b8956857f0f01287e1", "html_url": "https://github.com/rust-lang/rust/commit/59bce06a967b3806c3d874b8956857f0f01287e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59bce06a967b3806c3d874b8956857f0f01287e1/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6393a34e6e4cfc7638d698353659643e63549532", "url": "https://api.github.com/repos/rust-lang/rust/commits/6393a34e6e4cfc7638d698353659643e63549532", "html_url": "https://github.com/rust-lang/rust/commit/6393a34e6e4cfc7638d698353659643e63549532"}], "stats": {"total": 93, "additions": 69, "deletions": 24}, "files": [{"sha": "3aec322600e7b5781af9aa0d8642a4655aa94d12", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59bce06a967b3806c3d874b8956857f0f01287e1/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59bce06a967b3806c3d874b8956857f0f01287e1/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=59bce06a967b3806c3d874b8956857f0f01287e1", "patch": "@@ -146,7 +146,7 @@ type expr = spanned[expr_];\n tag expr_ {\n     expr_vec(vec[@expr], ann);\n     expr_tup(vec[elt], ann);\n-    expr_rec(vec[field], ann);\n+    expr_rec(vec[field], option.t[@expr], ann);\n     expr_call(@expr, vec[@expr], ann);\n     expr_bind(@expr, vec[option.t[@expr]], ann);\n     expr_binary(binop, @expr, @expr, ann);"}, {"sha": "2f037dfbceedf9249d2b20f95a77bab544a31d10", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/59bce06a967b3806c3d874b8956857f0f01287e1/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59bce06a967b3806c3d874b8956857f0f01287e1/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=59bce06a967b3806c3d874b8956857f0f01287e1", "patch": "@@ -529,14 +529,37 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n \n         case (token.REC) {\n             p.bump();\n-            auto pf = parse_field;\n-            auto fs =\n-                parse_seq[ast.field](token.LPAREN,\n-                                     token.RPAREN,\n-                                     some(token.COMMA),\n-                                     pf, p);\n-            hi = fs.span;\n-            ex = ast.expr_rec(fs.node, ast.ann_none);\n+            expect(p, token.LPAREN);\n+            auto fields = vec(parse_field(p));\n+\n+            auto more = true;\n+            auto base = none[@ast.expr];\n+            while (more) {\n+                alt (p.peek()) {\n+                    case (token.RPAREN) {\n+                        hi = p.get_span();\n+                        p.bump();\n+                        more = false;\n+                    }\n+                    case (token.WITH) {\n+                        p.bump();\n+                        base = some[@ast.expr](parse_expr(p));\n+                        hi = p.get_span();\n+                        expect(p, token.RPAREN);\n+                        more = false;\n+                    }\n+                    case (token.COMMA) {\n+                        p.bump();\n+                        fields += parse_field(p);\n+                    }\n+                    case (?t) {\n+                        unexpected(p, t);\n+                    }\n+                }\n+\n+            }\n+\n+            ex = ast.expr_rec(fields, base, ast.ann_none);\n         }\n \n         case (token.BIND) {\n@@ -1370,7 +1393,7 @@ fn stmt_ends_with_semi(@ast.stmt stmt) -> bool {\n             alt (e.node) {\n                 case (ast.expr_vec(_,_))        { ret true; }\n                 case (ast.expr_tup(_,_))        { ret true; }\n-                case (ast.expr_rec(_,_))        { ret true; }\n+                case (ast.expr_rec(_,_,_))      { ret true; }\n                 case (ast.expr_call(_,_,_))     { ret true; }\n                 case (ast.expr_binary(_,_,_,_)) { ret true; }\n                 case (ast.expr_unary(_,_,_))    { ret true; }"}, {"sha": "4ba65a7bb24679cc8ca44e3b1506afd87c8e17fe", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/59bce06a967b3806c3d874b8956857f0f01287e1/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59bce06a967b3806c3d874b8956857f0f01287e1/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=59bce06a967b3806c3d874b8956857f0f01287e1", "patch": "@@ -75,7 +75,8 @@ type ast_fold[ENV] =\n          vec[ast.elt] es, ann a) -> @expr)        fold_expr_tup,\n \n      (fn(&ENV e, &span sp,\n-         vec[ast.field] fields, ann a) -> @expr)  fold_expr_rec,\n+         vec[ast.field] fields,\n+         option.t[@expr] base, ann a) -> @expr)   fold_expr_rec,\n \n      (fn(&ENV e, &span sp,\n          @expr f, vec[@expr] args,\n@@ -479,12 +480,19 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n             ret fld.fold_expr_tup(env_, e.span, elts, t);\n         }\n \n-        case (ast.expr_rec(?fs, ?t)) {\n+        case (ast.expr_rec(?fs, ?base, ?t)) {\n             let vec[ast.field] fields = vec();\n+            let option.t[@expr] b = none[@expr];\n             for (ast.field f in fs) {\n                 fields += fold_rec_field(env, fld, f);\n             }\n-            ret fld.fold_expr_rec(env_, e.span, fields, t);\n+            alt (base) {\n+                case (none[@ast.expr]) { }\n+                case (some[@ast.expr](?eb)) {\n+                    b = some[@expr](fold_expr(env_, fld, eb));\n+                }\n+            }\n+            ret fld.fold_expr_rec(env_, e.span, fields, b, t);\n         }\n \n         case (ast.expr_call(?f, ?args, ?t)) {\n@@ -1011,8 +1019,9 @@ fn identity_fold_expr_tup[ENV](&ENV env, &span sp,\n }\n \n fn identity_fold_expr_rec[ENV](&ENV env, &span sp,\n-                               vec[ast.field] fields, ann a) -> @expr {\n-    ret @respan(sp, ast.expr_rec(fields, a));\n+                               vec[ast.field] fields,\n+                               option.t[@expr] base, ann a) -> @expr {\n+    ret @respan(sp, ast.expr_rec(fields, base, a));\n }\n \n fn identity_fold_expr_call[ENV](&ENV env, &span sp, @expr f,\n@@ -1358,7 +1367,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n \n          fold_expr_vec    = bind identity_fold_expr_vec[ENV](_,_,_,_),\n          fold_expr_tup    = bind identity_fold_expr_tup[ENV](_,_,_,_),\n-         fold_expr_rec    = bind identity_fold_expr_rec[ENV](_,_,_,_),\n+         fold_expr_rec    = bind identity_fold_expr_rec[ENV](_,_,_,_,_),\n          fold_expr_call   = bind identity_fold_expr_call[ENV](_,_,_,_,_),\n          fold_expr_bind   = bind identity_fold_expr_bind[ENV](_,_,_,_,_),\n          fold_expr_binary = bind identity_fold_expr_binary[ENV](_,_,_,_,_,_),"}, {"sha": "972683e9ce4cb29ba4293e0f5d1dc7a13bae895c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59bce06a967b3806c3d874b8956857f0f01287e1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59bce06a967b3806c3d874b8956857f0f01287e1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=59bce06a967b3806c3d874b8956857f0f01287e1", "patch": "@@ -2984,7 +2984,10 @@ fn trans_vec(@block_ctxt cx, vec[@ast.expr] args,\n }\n \n fn trans_rec(@block_ctxt cx, vec[ast.field] fields,\n-             &ast.ann ann) -> result {\n+             option.t[@ast.expr] base, &ast.ann ann) -> result {\n+\n+    // FIXME: handle presence of a nonempty base.\n+    check (base == none[@ast.expr]);\n \n     auto bcx = cx;\n     auto t = node_ann_type(bcx.fcx.ccx, ann);\n@@ -3099,8 +3102,8 @@ fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret trans_tup(cx, args, ann);\n         }\n \n-        case (ast.expr_rec(?args, ?ann)) {\n-            ret trans_rec(cx, args, ann);\n+        case (ast.expr_rec(?args, ?base, ?ann)) {\n+            ret trans_rec(cx, args, base, ann);\n         }\n \n         // lval cases fall through to trans_lval and then"}, {"sha": "2083ef2b8070b7b1bec170aa0357c9fd234cdae6", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59bce06a967b3806c3d874b8956857f0f01287e1/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59bce06a967b3806c3d874b8956857f0f01287e1/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=59bce06a967b3806c3d874b8956857f0f01287e1", "patch": "@@ -667,7 +667,7 @@ fn expr_ty(@ast.expr expr) -> @t {\n     alt (expr.node) {\n         case (ast.expr_vec(_, ?ann))          { ret ann_to_type(ann); }\n         case (ast.expr_tup(_, ?ann))          { ret ann_to_type(ann); }\n-        case (ast.expr_rec(_, ?ann))          { ret ann_to_type(ann); }\n+        case (ast.expr_rec(_, _, ?ann))       { ret ann_to_type(ann); }\n         case (ast.expr_bind(_, _, ?ann))      { ret ann_to_type(ann); }\n         case (ast.expr_call(_, _, ?ann))      { ret ann_to_type(ann); }\n         case (ast.expr_binary(_, _, _, ?ann)) { ret ann_to_type(ann); }"}, {"sha": "19e4a9b203bda9cb4e6a392789821faf8f4480d5", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/59bce06a967b3806c3d874b8956857f0f01287e1/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59bce06a967b3806c3d874b8956857f0f01287e1/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=59bce06a967b3806c3d874b8956857f0f01287e1", "patch": "@@ -910,7 +910,12 @@ fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n             }\n             e_1 = ast.expr_tup(elts_1, ast.ann_type(t));\n         }\n-        case (ast.expr_rec(?fields_0, ?ann)) {\n+        case (ast.expr_rec(?fields_0, ?base_0, ?ann)) {\n+\n+            // FIXME: handle presence of a nonempty base.\n+            check (base_0 == none[@ast.expr]);\n+            auto base_1 = base_0;\n+\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n             let vec[ast.field] fields_1 = vec();\n             alt (t.struct) {\n@@ -931,7 +936,7 @@ fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n                     fail;\n                 }\n             }\n-            e_1 = ast.expr_rec(fields_1, ast.ann_type(t));\n+            e_1 = ast.expr_rec(fields_1, base_1, ast.ann_type(t));\n         }\n         case (ast.expr_bind(?sube, ?es, ?ann)) {\n             auto t = demand(fcx, e.span, expected, ann_to_type(ann));\n@@ -1610,7 +1615,12 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                                         ast.expr_tup(elts_1, ann));\n         }\n \n-        case (ast.expr_rec(?fields, _)) {\n+        case (ast.expr_rec(?fields, ?base, _)) {\n+\n+            // FIXME: handle presence of a nonempty base.\n+            check (base == none[@ast.expr]);\n+            auto base_1 = base;\n+\n             let vec[ast.field] fields_1 = vec();\n             let vec[field] fields_t = vec();\n \n@@ -1626,7 +1636,7 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n \n             auto ann = ast.ann_type(plain_ty(ty.ty_rec(fields_t)));\n             ret @fold.respan[ast.expr_](expr.span,\n-                                        ast.expr_rec(fields_1, ann));\n+                                        ast.expr_rec(fields_1, base_1, ann));\n         }\n \n         case (ast.expr_field(?base, ?field, _)) {"}]}