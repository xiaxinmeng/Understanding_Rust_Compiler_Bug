{"sha": "c6a577ea116d06f22f44bfb6aa635780fc9ec174", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YTU3N2VhMTE2ZDA2ZjIyZjQ0YmZiNmFhNjM1NzgwZmM5ZWMxNzQ=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2020-11-24T15:59:28Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2020-11-24T16:05:01Z"}, "message": "Merge remote-tracking branch 'upstream/master' into rustup", "tree": {"sha": "bf93aef535ea6bf0136818c177b93181a22ede8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf93aef535ea6bf0136818c177b93181a22ede8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6a577ea116d06f22f44bfb6aa635780fc9ec174", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAl+9Ly0ACgkQHKDfKvWd\naKXwMg//Uw9zZKHbcUyjkAX7UW828468TAtE+Oy/4d91SkwGquyZJHcXNG1/8wfR\nxgpzN4KyOvtP3M1UI34EIARAdmEdnTixhYDcqlI3sOTPHY0qFo5v64xlFEpJAwVr\nKn/nRDGeIF+QMFJJYdXbFPAMon3f+E2hRtTtspzBaeVw6GEJ3aTRPAGzBiYACLIh\n4K5klymP0z3WBkJZVAHS7ZgRIY0VYHAid4SxUHUZJLON1XEPEDkZ8vGewx9dcH8h\nN0bMy8yWrqS7nAmy8A8fmg3o+YJ2hJhpziI1vRL0poBg9PXPe/yxeecWawdBNu6K\nI8y98XIgxZVHblKwqSkXZGBOq9X3/jDvyENjWGbShDmbaiJ3TiYP42nMiZC9WKDr\nsjLjOrpAy3y/YFWIA4uwKf9ytl69h0wDZnydtI0LJF53ymH0nxcCMIRSHSbnF8wG\nbrJT0phHZlhxgciSycdwWqgFjoa0CP0Qmt9QUgWqIEvt7arz395Fy94afpvdXGWz\nvU63xHKyiicbqOqK7jvUdMomiWIMNTwp8Rfc2/Uv52HiB9NGPMzghBhi5NuDWats\n3KecRA93paXWGhki/GBw9+AIwa6bcEp904G2LTd7gzZrS9jqW9NsnhmApAxwrlBT\nxtYuVDgquh2WI84jzCRs1YbPt3+I/1hgBek819NmE5j2VgorU2c=\n=e814\n-----END PGP SIGNATURE-----", "payload": "tree bf93aef535ea6bf0136818c177b93181a22ede8f\nparent 53ce1dd719442eb8a5d5d99242b1b5593cb723e6\nparent 295fe28057fedcfd9671a17880732c79ffa16d00\nauthor flip1995 <philipp.krones@embecosm.com> 1606233568 +0100\ncommitter flip1995 <philipp.krones@embecosm.com> 1606233901 +0100\n\nMerge remote-tracking branch 'upstream/master' into rustup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a577ea116d06f22f44bfb6aa635780fc9ec174", "html_url": "https://github.com/rust-lang/rust/commit/c6a577ea116d06f22f44bfb6aa635780fc9ec174", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6a577ea116d06f22f44bfb6aa635780fc9ec174/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53ce1dd719442eb8a5d5d99242b1b5593cb723e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ce1dd719442eb8a5d5d99242b1b5593cb723e6", "html_url": "https://github.com/rust-lang/rust/commit/53ce1dd719442eb8a5d5d99242b1b5593cb723e6"}, {"sha": "295fe28057fedcfd9671a17880732c79ffa16d00", "url": "https://api.github.com/repos/rust-lang/rust/commits/295fe28057fedcfd9671a17880732c79ffa16d00", "html_url": "https://github.com/rust-lang/rust/commit/295fe28057fedcfd9671a17880732c79ffa16d00"}], "stats": {"total": 142, "additions": 110, "deletions": 32}, "files": [{"sha": "eb5857348fd390804113d7ad1f27f22cce7309c9", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -92,13 +92,8 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                         |db| {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n-                                    infcx.maybe_note_obligation_cause_for_async_await(\n-                                        db,\n-                                        &obligation,\n-                                    );\n-                                    if let Trait(trait_pred, _) =\n-                                        obligation.predicate.skip_binders()\n-                                    {\n+                                    infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n+                                    if let Trait(trait_pred, _) = obligation.predicate.skip_binders() {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "143cbea55370baf3f3771b8774478877e8d14518", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -2950,7 +2950,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n         for ref stmt in block.stmts {\n             if_chain! {\n                 if let StmtKind::Local(\n-                    Local { pat: Pat { kind: PatKind::Binding(_, _, ident, .. ), .. },\n+                    Local { pat: Pat { hir_id: pat_id, kind: PatKind::Binding(_, _, ident, .. ), .. },\n                     init: Some(ref init_expr), .. }\n                 ) = stmt.kind;\n                 if let ExprKind::MethodCall(ref method_name, _, &[ref iter_source], ..) = init_expr.kind;\n@@ -2964,6 +2964,16 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, *ident);\n                 if iter_calls.len() == 1;\n                 then {\n+                    let mut used_count_visitor = UsedCountVisitor {\n+                        cx,\n+                        id: *pat_id,\n+                        count: 0,\n+                    };\n+                    walk_block(&mut used_count_visitor, block);\n+                    if used_count_visitor.count > 1 {\n+                        return;\n+                    }\n+\n                     // Suggest replacing iter_call with iter_replacement, and removing stmt\n                     let iter_call = &iter_calls[0];\n                     span_lint_and_then(\n@@ -3087,6 +3097,28 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor {\n     }\n }\n \n+struct UsedCountVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    id: HirId,\n+    count: usize,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for UsedCountVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if same_var(self.cx, expr, self.id) {\n+            self.count += 1;\n+        } else {\n+            walk_expr(self, expr);\n+        }\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    }\n+}\n+\n /// Detect the occurrences of calls to `iter` or `into_iter` for the\n /// given identifier\n fn detect_iter_and_into_iters<'tcx>(block: &'tcx Block<'tcx>, identifier: Ident) -> Option<Vec<IterFunction>> {"}, {"sha": "840adbbc57a6ccd4f4d2f0e27dfe5add7d43d589", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -8,6 +8,7 @@ use if_chain::if_chain;\n use rustc_ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n+use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericBounds, GenericParamKind, HirId,\n@@ -1632,7 +1633,14 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n         if expr.span.from_expansion() {\n             return;\n         }\n-        if let ExprKind::Cast(ref ex, _) = expr.kind {\n+        if let ExprKind::Cast(ref ex, cast_to) = expr.kind {\n+            if let TyKind::Path(QPath::Resolved(_, path)) = cast_to.kind {\n+                if let Res::Def(_, def_id) = path.res {\n+                    if cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr) {\n+                        return;\n+                    }\n+                }\n+            }\n             let (cast_from, cast_to) = (cx.typeck_results().expr_ty(ex), cx.typeck_results().expr_ty(expr));\n             lint_fn_to_numeric_cast(cx, expr, ex, cast_from, cast_to);\n             if let Some(lit) = get_numeric_literal(ex) {"}, {"sha": "cd745feec6d8acc81063dae1d74b6f0a0a4e85e2", "filename": "tests/ui/as_conversions.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.rs?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -1,7 +1,19 @@\n-#[warn(clippy::as_conversions)]\n+// aux-build:macro_rules.rs\n+\n+#![warn(clippy::as_conversions)]\n+\n+#[macro_use]\n+extern crate macro_rules;\n+\n+fn with_external_macro() {\n+    as_conv_with_arg!(0u32 as u64);\n+    as_conv!();\n+}\n \n fn main() {\n     let i = 0u32 as u64;\n \n     let j = &i as *const u64 as *mut u64;\n+\n+    with_external_macro();\n }"}, {"sha": "f5f75d3aee04a40f2032684353aa310418343389", "filename": "tests/ui/as_conversions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fas_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fas_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fas_conversions.stderr?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -1,5 +1,5 @@\n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:4:13\n+  --> $DIR/as_conversions.rs:14:13\n    |\n LL |     let i = 0u32 as u64;\n    |             ^^^^^^^^^^^\n@@ -8,15 +8,15 @@ LL |     let i = 0u32 as u64;\n    = help: consider using a safe wrapper for this conversion\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:6:13\n+  --> $DIR/as_conversions.rs:16:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a safe wrapper for this conversion\n \n error: using a potentially dangerous silent `as` conversion\n-  --> $DIR/as_conversions.rs:6:13\n+  --> $DIR/as_conversions.rs:16:13\n    |\n LL |     let j = &i as *const u64 as *mut u64;\n    |             ^^^^^^^^^^^^^^^^"}, {"sha": "f985a15eda2bb5cbc48fecbbdd1e8c1b0205346e", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -70,3 +70,17 @@ macro_rules! ref_arg_function {\n         fn fun_example(ref _x: usize) {}\n     };\n }\n+\n+#[macro_export]\n+macro_rules! as_conv_with_arg {\n+    (0u32 as u64) => {\n+        ()\n+    };\n+}\n+\n+#[macro_export]\n+macro_rules! as_conv {\n+    () => {\n+        0u32 as u64\n+    };\n+}"}, {"sha": "0918a6868ab4b08c4958f4975209012c24faa09f", "filename": "tests/ui/needless_collect_indirect.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fneedless_collect_indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fneedless_collect_indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.rs?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -22,4 +22,24 @@ fn main() {\n     let sample = vec![a.clone(), \"b\".to_string(), \"c\".to_string()];\n     let non_copy_contains = sample.into_iter().collect::<Vec<_>>();\n     non_copy_contains.contains(&a);\n+\n+    // Fix #5991\n+    let vec_a = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+    let vec_b = vec_a.iter().collect::<Vec<_>>();\n+    if vec_b.len() > 3 {}\n+    let other_vec = vec![1, 3, 12, 4, 16, 2];\n+    let we_got_the_same_numbers = other_vec.iter().filter(|item| vec_b.contains(item)).collect::<Vec<_>>();\n+\n+    // Fix #6297\n+    let sample = [1; 5];\n+    let multiple_indirect = sample.iter().collect::<Vec<_>>();\n+    let sample2 = vec![2, 3];\n+    if multiple_indirect.is_empty() {\n+        // do something\n+    } else {\n+        let found = sample2\n+            .iter()\n+            .filter(|i| multiple_indirect.iter().any(|s| **s % **i == 0))\n+            .collect::<Vec<_>>();\n+    }\n }"}, {"sha": "ac4c1bc65979fb5f38661d3f8ac37487ef802e89", "filename": "tests/ui/temporary_assignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::temporary_assignment)]\n-#![allow(const_item_mutation)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "7d79901a28d1be70a17f22f33806278c09b0e340", "filename": "tests/ui/temporary_assignment.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -1,13 +1,13 @@\n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:48:5\n+  --> $DIR/temporary_assignment.rs:47:5\n    |\n LL |     Struct { field: 0 }.field = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::temporary-assignment` implied by `-D warnings`\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:49:5\n+  --> $DIR/temporary_assignment.rs:48:5\n    |\n LL | /     MultiStruct {\n LL | |         structure: Struct { field: 0 },\n@@ -17,13 +17,13 @@ LL | |     .field = 1;\n    | |______________^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:54:5\n+  --> $DIR/temporary_assignment.rs:53:5\n    |\n LL |     ArrayStruct { array: [0] }.array[0] = 1;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: assignment to temporary\n-  --> $DIR/temporary_assignment.rs:55:5\n+  --> $DIR/temporary_assignment.rs:54:5\n    |\n LL |     (0, 0).0 = 1;\n    |     ^^^^^^^^^^^^"}, {"sha": "e8f2fb46665924848e113fa3a5ee4b2859714c0a", "filename": "tests/ui/unnecessary_cast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast.rs?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -20,4 +20,7 @@ fn main() {\n     foo!(a, i32);\n     foo!(b, f32);\n     foo!(c, f64);\n+\n+    // do not lint cast to cfg-dependant type\n+    1 as std::os::raw::c_char;\n }"}, {"sha": "c266f684a36f94f042c11e9491034efa40296446", "filename": "tests/ui/wildcard_enum_match_arm.fixed", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fwildcard_enum_match_arm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.fixed?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -7,7 +7,8 @@\n     dead_code,\n     clippy::single_match,\n     clippy::wildcard_in_or_patterns,\n-    clippy::unnested_or_patterns, clippy::diverging_sub_expression\n+    clippy::unnested_or_patterns,\n+    clippy::diverging_sub_expression\n )]\n \n use std::io::ErrorKind;"}, {"sha": "2dbf726d5d07236801f9fee0441f3c2e6b15b12f", "filename": "tests/ui/wildcard_enum_match_arm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fwildcard_enum_match_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fwildcard_enum_match_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.rs?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -7,7 +7,8 @@\n     dead_code,\n     clippy::single_match,\n     clippy::wildcard_in_or_patterns,\n-    clippy::unnested_or_patterns, clippy::diverging_sub_expression\n+    clippy::unnested_or_patterns,\n+    clippy::diverging_sub_expression\n )]\n \n use std::io::ErrorKind;"}, {"sha": "0da2b68ba0b2f80fc6c3885bc6d4b6b5f14abd23", "filename": "tests/ui/wildcard_enum_match_arm.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6a577ea116d06f22f44bfb6aa635780fc9ec174/tests%2Fui%2Fwildcard_enum_match_arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_enum_match_arm.stderr?ref=c6a577ea116d06f22f44bfb6aa635780fc9ec174", "patch": "@@ -1,5 +1,5 @@\n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:38:9\n+  --> $DIR/wildcard_enum_match_arm.rs:39:9\n    |\n LL |         _ => eprintln!(\"Not red\"),\n    |         ^ help: try this: `Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n@@ -11,25 +11,25 @@ LL | #![deny(clippy::wildcard_enum_match_arm)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:42:9\n+  --> $DIR/wildcard_enum_match_arm.rs:43:9\n    |\n LL |         _not_red => eprintln!(\"Not red\"),\n    |         ^^^^^^^^ help: try this: `_not_red @ Color::Green | _not_red @ Color::Blue | _not_red @ Color::Rgb(..) | _not_red @ Color::Cyan`\n \n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:46:9\n+  --> $DIR/wildcard_enum_match_arm.rs:47:9\n    |\n LL |         not_red => format!(\"{:?}\", not_red),\n    |         ^^^^^^^ help: try this: `not_red @ Color::Green | not_red @ Color::Blue | not_red @ Color::Rgb(..) | not_red @ Color::Cyan`\n \n error: wildcard match will miss any future added variants\n-  --> $DIR/wildcard_enum_match_arm.rs:62:9\n+  --> $DIR/wildcard_enum_match_arm.rs:63:9\n    |\n LL |         _ => \"No red\",\n    |         ^ help: try this: `Color::Red | Color::Green | Color::Blue | Color::Rgb(..) | Color::Cyan`\n \n error: match on non-exhaustive enum doesn't explicitly match all known variants\n-  --> $DIR/wildcard_enum_match_arm.rs:79:9\n+  --> $DIR/wildcard_enum_match_arm.rs:80:9\n    |\n LL |         _ => {},\n    |         ^ help: try this: `std::io::ErrorKind::PermissionDenied | std::io::ErrorKind::ConnectionRefused | std::io::ErrorKind::ConnectionReset | std::io::ErrorKind::ConnectionAborted | std::io::ErrorKind::NotConnected | std::io::ErrorKind::AddrInUse | std::io::ErrorKind::AddrNotAvailable | std::io::ErrorKind::BrokenPipe | std::io::ErrorKind::AlreadyExists | std::io::ErrorKind::WouldBlock | std::io::ErrorKind::InvalidInput | std::io::ErrorKind::InvalidData | std::io::ErrorKind::TimedOut | std::io::ErrorKind::WriteZero | std::io::ErrorKind::Interrupted | std::io::ErrorKind::Other | std::io::ErrorKind::UnexpectedEof | _`"}, {"sha": "319de217e0d90170c1bcf7545aef25e1caff11d5", "filename": "util/dev", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53ce1dd719442eb8a5d5d99242b1b5593cb723e6/util%2Fdev", "raw_url": "https://github.com/rust-lang/rust/raw/53ce1dd719442eb8a5d5d99242b1b5593cb723e6/util%2Fdev", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fdev?ref=53ce1dd719442eb8a5d5d99242b1b5593cb723e6", "patch": "@@ -1,7 +0,0 @@\n-#!/bin/sh\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n-echo 'Deprecated! `util/dev` usage is deprecated, please use `cargo dev` instead.'\n-\n-cd clippy_dev && cargo run -- \"$@\""}]}