{"sha": "b77674d25467f521786cbfd450259b07bd2c378a", "node_id": "C_kwDOAAsO6NoAKGI3NzY3NGQyNTQ2N2Y1MjE3ODZjYmZkNDUwMjU5YjA3YmQyYzM3OGE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-24T16:06:25Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-12T10:01:07Z"}, "message": "Make impl_trait_projections a feature gate.", "tree": {"sha": "7c4ddbdf5588982eb418e4bdeb1fd4e38d82f4c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c4ddbdf5588982eb418e4bdeb1fd4e38d82f4c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b77674d25467f521786cbfd450259b07bd2c378a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b77674d25467f521786cbfd450259b07bd2c378a", "html_url": "https://github.com/rust-lang/rust/commit/b77674d25467f521786cbfd450259b07bd2c378a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b77674d25467f521786cbfd450259b07bd2c378a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47de11f1ed133305a8dbd5be11b73acd0a085ba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/47de11f1ed133305a8dbd5be11b73acd0a085ba9", "html_url": "https://github.com/rust-lang/rust/commit/47de11f1ed133305a8dbd5be11b73acd0a085ba9"}], "stats": {"total": 232, "additions": 216, "deletions": 16}, "files": [{"sha": "56eaefc88e192adf43f58112688b4b377b064df3", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b77674d25467f521786cbfd450259b07bd2c378a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77674d25467f521786cbfd450259b07bd2c378a/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=b77674d25467f521786cbfd450259b07bd2c378a", "patch": "@@ -419,6 +419,8 @@ declare_features! (\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n     /// Allows `impl Trait` as output type in `Fn` traits in return position of functions.\n     (active, impl_trait_in_fn_trait_return, \"1.64.0\", Some(99697), None),\n+    /// Allows referencing `Self` and projections in impl-trait.\n+    (active, impl_trait_projections, \"CURRENT_RUSTC_VERSION\", None, None),\n     /// Allows using imported `main` function\n     (active, imported_main, \"1.53.0\", Some(28937), None),\n     /// Allows associated types in inherent impls."}, {"sha": "256ecc60516ec0a96a4bdc7f95eb35312dd7b6d8", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b77674d25467f521786cbfd450259b07bd2c378a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77674d25467f521786cbfd450259b07bd2c378a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=b77674d25467f521786cbfd450259b07bd2c378a", "patch": "@@ -231,7 +231,9 @@ fn check_opaque<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n     let substs = InternalSubsts::identity_for_item(tcx, item.owner_id.to_def_id());\n     let span = tcx.def_span(item.owner_id.def_id);\n \n-    check_opaque_for_inheriting_lifetimes(tcx, item.owner_id.def_id, span);\n+    if !tcx.features().impl_trait_projections {\n+        check_opaque_for_inheriting_lifetimes(tcx, item.owner_id.def_id, span);\n+    }\n     if tcx.type_of(item.owner_id.def_id).references_error() {\n         return;\n     }\n@@ -424,15 +426,16 @@ pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n                 _ => unreachable!(),\n             };\n \n-            let mut err = struct_span_err!(\n-                tcx.sess,\n+            let mut err = feature_err(\n+                &tcx.sess.parse_sess,\n+                sym::impl_trait_projections,\n                 span,\n-                E0760,\n-                \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n-                 a parent scope\",\n-                if is_async { \"async fn\" } else { \"impl Trait\" },\n+                &format!(\n+                    \"`{}` return type cannot contain a projection or `Self` that references \\\n+                    lifetimes from a parent scope\",\n+                    if is_async { \"async fn\" } else { \"impl Trait\" },\n+                ),\n             );\n-\n             for (span, name) in visitor.selftys {\n                 err.span_suggestion(\n                     span,"}, {"sha": "fd7456e8c9d2aee67c2c31468e12bde8afab7694", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b77674d25467f521786cbfd450259b07bd2c378a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77674d25467f521786cbfd450259b07bd2c378a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b77674d25467f521786cbfd450259b07bd2c378a", "patch": "@@ -816,6 +816,7 @@ symbols! {\n         impl_macros,\n         impl_trait_in_bindings,\n         impl_trait_in_fn_trait_return,\n+        impl_trait_projections,\n         implied_by,\n         import,\n         import_name_type,"}, {"sha": "41f887430c1cb8bcf7e3bdd3d9205d28c997db97", "filename": "src/test/ui/async-await/feature-self-return-type.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fasync-await%2Ffeature-self-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fasync-await%2Ffeature-self-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ffeature-self-return-type.rs?ref=b77674d25467f521786cbfd450259b07bd2c378a", "patch": "@@ -0,0 +1,28 @@\n+// edition:2018\n+#![feature(impl_trait_projections)]\n+\n+// This test checks that we emit the correct borrowck error when `Self` is used as a return type.\n+// See #61949 for context.\n+\n+pub struct Foo<'a> {\n+    pub bar: &'a i32,\n+}\n+\n+impl<'a> Foo<'a> {\n+    pub async fn new(_bar: &'a i32) -> Self {\n+        Foo {\n+            bar: &22\n+        }\n+    }\n+}\n+\n+pub async fn foo() {\n+    let x = {\n+        let bar = 22;\n+        Foo::new(&bar).await\n+        //~^ ERROR `bar` does not live long enough\n+    };\n+    drop(x);\n+}\n+\n+fn main() { }"}, {"sha": "8924683684fb48169d123b1cae8de2a8a9b5518d", "filename": "src/test/ui/async-await/feature-self-return-type.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fasync-await%2Ffeature-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fasync-await%2Ffeature-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ffeature-self-return-type.stderr?ref=b77674d25467f521786cbfd450259b07bd2c378a", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `bar` does not live long enough\n+  --> $DIR/feature-self-return-type.rs:22:18\n+   |\n+LL |     let x = {\n+   |         - borrow later stored here\n+LL |         let bar = 22;\n+LL |         Foo::new(&bar).await\n+   |                  ^^^^ borrowed value does not live long enough\n+LL |\n+LL |     };\n+   |     - `bar` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "d73dbc6e828f3879a7af56604062d8ee61448dd7", "filename": "src/test/ui/async-await/issue-61949-self-return-type.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs?ref=b77674d25467f521786cbfd450259b07bd2c378a", "patch": "@@ -1,4 +1,5 @@\n // edition:2018\n+// gate-test-impl_trait_projections\n \n // This test checks that `Self` is prohibited as a return type. See #61949 for context.\n "}, {"sha": "638b197bc022d6d5f68f8e2f96491d3682de5ec8", "filename": "src/test/ui/async-await/issue-61949-self-return-type.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=b77674d25467f521786cbfd450259b07bd2c378a", "patch": "@@ -1,11 +1,14 @@\n-error[E0760]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/issue-61949-self-return-type.rs:10:40\n+error[E0658]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+  --> $DIR/issue-61949-self-return-type.rs:11:40\n    |\n LL |     pub async fn new(_bar: &'a i32) -> Self {\n    |                                        ^^^^ help: consider spelling out the type instead: `Foo<'a>`\n+   |\n+   = note: see issue #103532 <https://github.com/rust-lang/rust/issues/103532> for more information\n+   = help: add `#![feature(impl_trait_projections)]` to the crate attributes to enable\n \n error[E0597]: `bar` does not live long enough\n-  --> $DIR/issue-61949-self-return-type.rs:21:18\n+  --> $DIR/issue-61949-self-return-type.rs:22:18\n    |\n LL |     let x = {\n    |         - borrow later stored here\n@@ -18,5 +21,5 @@ LL |     };\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0597, E0760.\n+Some errors have detailed explanations: E0597, E0658.\n For more information about an error, try `rustc --explain E0597`."}, {"sha": "37eafa996c535863558e25f6d1a55f902eeb5a02", "filename": "src/test/ui/async-await/issues/issue-78600.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-78600.stderr?ref=b77674d25467f521786cbfd450259b07bd2c378a", "patch": "@@ -1,11 +1,14 @@\n-error[E0760]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+error[E0658]: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n   --> $DIR/issue-78600.rs:6:33\n    |\n LL |     async fn new(i: &'a i32) -> Result<Self, ()> {\n    |                                 ^^^^^^^----^^^^^\n    |                                        |\n    |                                        help: consider spelling out the type instead: `S<'a>`\n+   |\n+   = note: see issue #103532 <https://github.com/rust-lang/rust/issues/103532> for more information\n+   = help: add `#![feature(impl_trait_projections)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0760`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "a9fa2da569f85e08be827526537979842450d504", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=b77674d25467f521786cbfd450259b07bd2c378a", "patch": "@@ -19,11 +19,14 @@ help: consider constraining the associated type `<T as impl_trait::Trait>::Assoc\n LL |     fn foo_fail<T: Trait<Assoc = ()>>() -> impl FooLike<Output = T::Assoc> {\n    |                         ++++++++++++\n \n-error[E0760]: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+error[E0658]: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n   --> $DIR/bound-normalization-fail.rs:41:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #103532 <https://github.com/rust-lang/rust/issues/103532> for more information\n+   = help: add `#![feature(impl_trait_projections)]` to the crate attributes to enable\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'a>>::Assoc`\n   --> $DIR/bound-normalization-fail.rs:41:41\n@@ -48,5 +51,5 @@ LL |     fn foo2_fail<'a, T: Trait<'a, Assoc = ()>>() -> impl FooLike<Output = T\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0271, E0760.\n+Some errors have detailed explanations: E0271, E0658.\n For more information about an error, try `rustc --explain E0271`."}, {"sha": "51877e9cc3c436287219d3fcb18b4a3ae2f84a48", "filename": "src/test/ui/impl-trait/feature-self-return-type.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fimpl-trait%2Ffeature-self-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fimpl-trait%2Ffeature-self-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ffeature-self-return-type.rs?ref=b77674d25467f521786cbfd450259b07bd2c378a", "patch": "@@ -0,0 +1,102 @@\n+// edition:2018\n+#![feature(impl_trait_projections)]\n+\n+// This test checks that we emit the correct borrowck error when `Self` or a projection is used as\n+// a return type.  See #61949 for context.\n+\n+mod with_self {\n+    pub struct Foo<'a> {\n+        pub bar: &'a i32,\n+    }\n+\n+    impl<'a> Foo<'a> {\n+        pub fn new(_bar: &'a i32) -> impl Into<Self> {\n+            Foo {\n+                bar: &22\n+            }\n+        }\n+    }\n+\n+    fn foo() {\n+        let x = {\n+            let bar = 22;\n+            Foo::new(&bar).into()\n+            //~^ ERROR `bar` does not live long enough\n+        };\n+        drop(x);\n+    }\n+}\n+\n+struct Foo<T>(T);\n+\n+trait FooLike {\n+    type Output;\n+}\n+\n+impl<T> FooLike for Foo<T> {\n+    type Output = T;\n+}\n+\n+mod impl_trait {\n+    use super::*;\n+\n+    trait Trait {\n+        type Assoc;\n+\n+        fn make_assoc(self) -> Self::Assoc;\n+    }\n+\n+    /// `T::Assoc` can't be normalized any further here.\n+    fn foo<T: Trait>(x: T) -> impl FooLike<Output = T::Assoc> {\n+        Foo(x.make_assoc())\n+    }\n+\n+    impl<'a> Trait for &'a () {\n+        type Assoc = &'a ();\n+\n+        fn make_assoc(self) -> &'a () { &() }\n+    }\n+\n+    fn usage() {\n+        let x = {\n+            let y = ();\n+            foo(&y)\n+            //~^ ERROR `y` does not live long enough\n+        };\n+        drop(x);\n+    }\n+}\n+\n+// Same with lifetimes in the trait\n+\n+mod lifetimes {\n+    use super::*;\n+\n+    trait Trait<'a> {\n+        type Assoc;\n+\n+        fn make_assoc(self) -> Self::Assoc;\n+    }\n+\n+    /// Missing bound constraining `Assoc`, `T::Assoc` can't be normalized further.\n+    fn foo<'a, T: Trait<'a>>(x: T) -> impl FooLike<Output = T::Assoc> {\n+        Foo(x.make_assoc())\n+    }\n+\n+    impl<'a> Trait<'a> for &'a () {\n+        type Assoc = &'a ();\n+\n+        fn make_assoc(self) -> &'a () { &() }\n+    }\n+\n+    fn usage() {\n+        let x = {\n+            let y = ();\n+            foo(&y)\n+            //~^ ERROR `y` does not live long enough\n+        };\n+        drop(x);\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "601e53b7694596631c84c67ada9e54e958519058", "filename": "src/test/ui/impl-trait/feature-self-return-type.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fimpl-trait%2Ffeature-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b77674d25467f521786cbfd450259b07bd2c378a/src%2Ftest%2Fui%2Fimpl-trait%2Ffeature-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ffeature-self-return-type.stderr?ref=b77674d25467f521786cbfd450259b07bd2c378a", "patch": "@@ -0,0 +1,39 @@\n+error[E0597]: `bar` does not live long enough\n+  --> $DIR/feature-self-return-type.rs:23:22\n+   |\n+LL |         let x = {\n+   |             - borrow later stored here\n+LL |             let bar = 22;\n+LL |             Foo::new(&bar).into()\n+   |                      ^^^^ borrowed value does not live long enough\n+LL |\n+LL |         };\n+   |         - `bar` dropped here while still borrowed\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/feature-self-return-type.rs:63:17\n+   |\n+LL |         let x = {\n+   |             - borrow later stored here\n+LL |             let y = ();\n+LL |             foo(&y)\n+   |                 ^^ borrowed value does not live long enough\n+LL |\n+LL |         };\n+   |         - `y` dropped here while still borrowed\n+\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/feature-self-return-type.rs:95:17\n+   |\n+LL |         let x = {\n+   |             - borrow later stored here\n+LL |             let y = ();\n+LL |             foo(&y)\n+   |                 ^^ borrowed value does not live long enough\n+LL |\n+LL |         };\n+   |         - `y` dropped here while still borrowed\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}]}