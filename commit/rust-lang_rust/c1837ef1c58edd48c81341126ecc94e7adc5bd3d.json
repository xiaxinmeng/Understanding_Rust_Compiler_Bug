{"sha": "c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxODM3ZWYxYzU4ZWRkNDhjODEzNDExMjZlY2M5NGU3YWRjNWJkM2Q=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-01T21:29:15Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-18T01:41:33Z"}, "message": "Querify `fn_abi_of_{fn_ptr,instance}`.", "tree": {"sha": "8161e4e2ad2b849b952a6e7718582016ac4f3a50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8161e4e2ad2b849b952a6e7718582016ac4f3a50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "html_url": "https://github.com/rust-lang/rust/commit/c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b68304efc447a7bcd35b06511f6dfdfe9da16d", "html_url": "https://github.com/rust-lang/rust/commit/e9b68304efc447a7bcd35b06511f6dfdfe9da16d"}], "stats": {"total": 245, "additions": 152, "deletions": 93}, "files": [{"sha": "15bb90678059daa9be2156909d3b127a9805dfb1", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -53,7 +53,11 @@ pub(crate) fn get_function_sig<'tcx>(\n     inst: Instance<'tcx>,\n ) -> Signature {\n     assert!(!inst.substs.needs_infer());\n-    clif_sig_from_fn_abi(tcx, triple, &RevealAllLayoutCx(tcx).fn_abi_of_instance(inst, &[]))\n+    clif_sig_from_fn_abi(\n+        tcx,\n+        triple,\n+        &RevealAllLayoutCx(tcx).fn_abi_of_instance(inst, ty::List::empty()),\n+    )\n }\n \n /// Instance must be monomorphized\n@@ -350,14 +354,13 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     };\n \n     let extra_args = &args[fn_sig.inputs().len()..];\n-    let extra_args = extra_args\n-        .iter()\n-        .map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx)))\n-        .collect::<Vec<_>>();\n+    let extra_args = fx\n+        .tcx\n+        .mk_type_list(extra_args.iter().map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx))));\n     let fn_abi = if let Some(instance) = instance {\n-        RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(instance, &extra_args)\n+        RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(instance, extra_args)\n     } else {\n-        RevealAllLayoutCx(fx.tcx).fn_abi_of_fn_ptr(fn_ty.fn_sig(fx.tcx), &extra_args)\n+        RevealAllLayoutCx(fx.tcx).fn_abi_of_fn_ptr(fn_ty.fn_sig(fx.tcx), extra_args)\n     };\n \n     let is_cold = instance\n@@ -525,7 +528,8 @@ pub(crate) fn codegen_drop<'tcx>(\n                     def: ty::InstanceDef::Virtual(drop_instance.def_id(), 0),\n                     substs: drop_instance.substs,\n                 };\n-                let fn_abi = RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(virtual_drop, &[]);\n+                let fn_abi =\n+                    RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(virtual_drop, ty::List::empty());\n \n                 let sig = clif_sig_from_fn_abi(fx.tcx, fx.triple(), &fn_abi);\n                 let sig = fx.bcx.import_signature(sig);\n@@ -534,7 +538,8 @@ pub(crate) fn codegen_drop<'tcx>(\n             _ => {\n                 assert!(!matches!(drop_instance.def, InstanceDef::Virtual(_, _)));\n \n-                let fn_abi = RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(drop_instance, &[]);\n+                let fn_abi =\n+                    RevealAllLayoutCx(fx.tcx).fn_abi_of_instance(drop_instance, ty::List::empty());\n \n                 let arg_value = drop_place.place_ref(\n                     fx,"}, {"sha": "d8fa2c769046827fa36c332f1e5d71047ef68507", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -61,7 +61,7 @@ pub(crate) fn codegen_fn<'tcx>(\n         instance,\n         symbol_name,\n         mir,\n-        fn_abi: Some(RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, &[])),\n+        fn_abi: Some(RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, ty::List::empty())),\n \n         bcx,\n         block_map,"}, {"sha": "0e84681d9ad94f4c40db9dcff7854c22f6017dd9", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -276,7 +276,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for FunctionCx<'_, '_, 'tcx> {\n         &self,\n         err: FnAbiError<'tcx>,\n         span: Span,\n-        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+        fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {\n         RevealAllLayoutCx(self.tcx).handle_fn_abi_err(err, span, fn_abi_request)\n     }\n@@ -402,7 +402,7 @@ impl<'tcx> FnAbiOfHelpers<'tcx> for RevealAllLayoutCx<'tcx> {\n         &self,\n         err: FnAbiError<'tcx>,\n         span: Span,\n-        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+        fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {\n         if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n             self.0.sess.span_fatal(span, &err.to_string())"}, {"sha": "ec846d71960b89863e7cb49e0d9eddf30d5a04fe", "filename": "compiler/rustc_codegen_cranelift/src/pretty_clif.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -80,7 +80,10 @@ impl CommentWriter {\n             vec![\n                 format!(\"symbol {}\", tcx.symbol_name(instance).name),\n                 format!(\"instance {:?}\", instance),\n-                format!(\"abi {:?}\", RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, &[])),\n+                format!(\n+                    \"abi {:?}\",\n+                    RevealAllLayoutCx(tcx).fn_abi_of_instance(instance, ty::List::empty())\n+                ),\n                 String::new(),\n             ]\n         } else {"}, {"sha": "dab7d3eaa8cfd45c6de1c95c831941e8f219920a", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -107,7 +107,7 @@ impl FnAbiOfHelpers<'tcx> for Builder<'_, '_, 'tcx> {\n         &self,\n         err: FnAbiError<'tcx>,\n         span: Span,\n-        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+        fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {\n         self.cx.handle_fn_abi_err(err, span, fn_abi_request)\n     }"}, {"sha": "a96ba148a6ce30f7374b2a36086401bd09e30597", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -42,7 +42,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n         sym\n     );\n \n-    let fn_abi = cx.fn_abi_of_instance(instance, &[]);\n+    let fn_abi = cx.fn_abi_of_instance(instance, ty::List::empty());\n \n     let llfn = if let Some(llfn) = cx.get_declared_value(&sym) {\n         // Create a fn pointer with the new signature."}, {"sha": "52a12b2fd81d8b16ebfd8cc73467965437f3d388", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -867,7 +867,7 @@ impl FnAbiOfHelpers<'tcx> for CodegenCx<'ll, 'tcx> {\n         &self,\n         err: FnAbiError<'tcx>,\n         span: Span,\n-        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+        fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> ! {\n         if let FnAbiError::Layout(LayoutError::SizeOverflow(_)) = err {\n             self.sess().span_fatal(span, &err.to_string())"}, {"sha": "093aceda2b7413ef4713a220598e7415bf6f6562", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -208,7 +208,7 @@ fn declare_unused_fn(cx: &CodegenCx<'ll, 'tcx>, def_id: &DefId) -> Instance<'tcx\n                 hir::Unsafety::Unsafe,\n                 Abi::Rust,\n             )),\n-            &[],\n+            ty::List::empty(),\n         ),\n     );\n "}, {"sha": "1612922d43953359453b4596f168ea99c809ff7b", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -93,7 +93,7 @@ fn make_mir_scope(\n                 ty::ParamEnv::reveal_all(),\n                 callee,\n             );\n-            let callee_fn_abi = cx.fn_abi_of_instance(callee, &[]);\n+            let callee_fn_abi = cx.fn_abi_of_instance(callee, ty::List::empty());\n             cx.dbg_scope_fn(callee, &callee_fn_abi, None)\n         }\n         None => unsafe {"}, {"sha": "9d0e0e63944341618957012b64e43bd26da33465", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -737,7 +737,7 @@ fn gen_fn<'ll, 'tcx>(\n     rust_fn_sig: ty::PolyFnSig<'tcx>,\n     codegen: &mut dyn FnMut(Builder<'_, 'll, 'tcx>),\n ) -> (&'ll Type, &'ll Value) {\n-    let fn_abi = cx.fn_abi_of_fn_ptr(rust_fn_sig, &[]);\n+    let fn_abi = cx.fn_abi_of_fn_ptr(rust_fn_sig, ty::List::empty());\n     let llty = fn_abi.llvm_type(cx);\n     let llfn = cx.declare_fn(name, &fn_abi);\n     cx.set_frame_pointer_type(llfn);"}, {"sha": "34982f769d03a5cef6dda69a6116e751a8b6cb0e", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -52,7 +52,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     ) {\n         assert!(!instance.substs.needs_infer());\n \n-        let fn_abi = self.fn_abi_of_instance(instance, &[]);\n+        let fn_abi = self.fn_abi_of_instance(instance, ty::List::empty());\n         let lldecl = self.declare_fn(symbol_name, &fn_abi);\n         unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n         let attrs = self.tcx.codegen_fn_attrs(instance.def_id());"}, {"sha": "757ccbddbeedf140c425a1eaee7608f048fcbd77", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -230,7 +230,9 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n                 ty::Adt(def, _) if def.is_box() => {\n                     cx.type_ptr_to(cx.layout_of(self.ty.boxed_ty()).llvm_type(cx))\n                 }\n-                ty::FnPtr(sig) => cx.fn_ptr_backend_type(&cx.fn_abi_of_fn_ptr(sig, &[])),\n+                ty::FnPtr(sig) => {\n+                    cx.fn_ptr_backend_type(&cx.fn_abi_of_fn_ptr(sig, ty::List::empty()))\n+                }\n                 _ => self.scalar_llvm_type_at(cx, scalar, Size::ZERO),\n             };\n             cx.scalar_lltypes.borrow_mut().insert(self.ty, llty);"}, {"sha": "cc9dd378ee497d65ad9b556b12c81d1a699fb77a", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -337,7 +337,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     def: ty::InstanceDef::Virtual(drop_fn.def_id(), 0),\n                     substs: drop_fn.substs,\n                 };\n-                let fn_abi = bx.fn_abi_of_instance(virtual_drop, &[]);\n+                let fn_abi = bx.fn_abi_of_instance(virtual_drop, ty::List::empty());\n                 let vtable = args[1];\n                 args = &args[..1];\n                 (\n@@ -346,7 +346,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     fn_abi,\n                 )\n             }\n-            _ => (bx.get_fn_addr(drop_fn), bx.fn_abi_of_instance(drop_fn, &[])),\n+            _ => (bx.get_fn_addr(drop_fn), bx.fn_abi_of_instance(drop_fn, ty::List::empty())),\n         };\n         helper.do_call(\n             self,\n@@ -433,7 +433,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // Obtain the panic entry point.\n         let def_id = common::langcall(bx.tcx(), Some(span), \"\", lang_item);\n         let instance = ty::Instance::mono(bx.tcx(), def_id);\n-        let fn_abi = bx.fn_abi_of_instance(instance, &[]);\n+        let fn_abi = bx.fn_abi_of_instance(instance, ty::List::empty());\n         let llfn = bx.get_fn_addr(instance);\n \n         // Codegen the actual panic invoke/call.\n@@ -494,7 +494,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let def_id =\n                     common::langcall(bx.tcx(), Some(source_info.span), \"\", LangItem::Panic);\n                 let instance = ty::Instance::mono(bx.tcx(), def_id);\n-                let fn_abi = bx.fn_abi_of_instance(instance, &[]);\n+                let fn_abi = bx.fn_abi_of_instance(instance, ty::List::empty());\n                 let llfn = bx.get_fn_addr(instance);\n \n                 // Codegen the actual panic invoke/call.\n@@ -570,17 +570,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         };\n \n         let extra_args = &args[sig.inputs().skip_binder().len()..];\n-        let extra_args = extra_args\n-            .iter()\n-            .map(|op_arg| {\n-                let op_ty = op_arg.ty(self.mir, bx.tcx());\n-                self.monomorphize(op_ty)\n-            })\n-            .collect::<Vec<_>>();\n+        let extra_args = bx.tcx().mk_type_list(extra_args.iter().map(|op_arg| {\n+            let op_ty = op_arg.ty(self.mir, bx.tcx());\n+            self.monomorphize(op_ty)\n+        }));\n \n         let fn_abi = match instance {\n-            Some(instance) => bx.fn_abi_of_instance(instance, &extra_args),\n-            None => bx.fn_abi_of_fn_ptr(sig, &extra_args),\n+            Some(instance) => bx.fn_abi_of_instance(instance, extra_args),\n+            None => bx.fn_abi_of_fn_ptr(sig, extra_args),\n         };\n \n         if intrinsic == Some(sym::transmute) {"}, {"sha": "9ad2a66bc6aec1bbeec8af80bcd21905a28cafc2", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -139,7 +139,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     let mir = cx.tcx().instance_mir(instance.def);\n \n-    let fn_abi = cx.fn_abi_of_instance(instance, &[]);\n+    let fn_abi = cx.fn_abi_of_instance(instance, ty::List::empty());\n     debug!(\"fn_abi: {:?}\", fn_abi);\n \n     let debug_context = cx.create_function_debug_context(instance, &fn_abi, llfn, &mir);"}, {"sha": "6a1ebbba817dbc915b325c158514dc96995319b3", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -1128,6 +1128,27 @@ rustc_queries! {\n         desc { \"computing layout of `{}`\", key.value }\n     }\n \n+    /// Compute a `FnAbi` suitable for indirect calls, i.e. to `fn` pointers.\n+    ///\n+    /// NB: this doesn't handle virtual calls - those should use `fn_abi_of_instance`\n+    /// instead, where the instance is an `InstanceDef::Virtual`.\n+    query fn_abi_of_fn_ptr(\n+        key: ty::ParamEnvAnd<'tcx, (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>)>\n+    ) -> Result<&'tcx abi::call::FnAbi<'tcx, Ty<'tcx>>, ty::layout::FnAbiError<'tcx>> {\n+        desc { \"computing call ABI of `{}` function pointers\", key.value.0 }\n+    }\n+\n+    /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for\n+    /// direct calls to an `fn`.\n+    ///\n+    /// NB: that includes virtual calls, which are represented by \"direct calls\"\n+    /// to an `InstanceDef::Virtual` instance (of `<dyn Trait as Trait>::fn`).\n+    query fn_abi_of_instance(\n+        key: ty::ParamEnvAnd<'tcx, (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>)>\n+    ) -> Result<&'tcx abi::call::FnAbi<'tcx, Ty<'tcx>>, ty::layout::FnAbiError<'tcx>> {\n+        desc { \"computing call ABI of `{}`\", key.value.0 }\n+    }\n+\n     query dylib_dependency_formats(_: CrateNum)\n                                     -> &'tcx [(CrateNum, LinkagePreference)] {\n         desc { \"dylib dependency formats of crate\" }"}, {"sha": "f72f045e9079c24b733693e2bc1f1a436f7bd8a4", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 65, "deletions": 58, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -1,12 +1,10 @@\n-use crate::ich::StableHashingContext;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n use crate::ty::subst::Subst;\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n \n use rustc_ast as ast;\n use rustc_attr as attr;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::BitSet;\n@@ -23,10 +21,14 @@ use rustc_target::spec::{abi::Abi as SpecAbi, HasTargetSpec, PanicStrategy, Targ\n use std::cmp;\n use std::fmt;\n use std::iter;\n-use std::mem;\n use std::num::NonZeroUsize;\n use std::ops::Bound;\n \n+pub fn provide(providers: &mut ty::query::Providers) {\n+    *providers =\n+        ty::query::Providers { layout_of, fn_abi_of_fn_ptr, fn_abi_of_instance, ..*providers };\n+}\n+\n pub trait IntegerExt {\n     fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>, signed: bool) -> Ty<'tcx>;\n     fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer;\n@@ -191,7 +193,7 @@ pub const FAT_PTR_EXTRA: usize = 1;\n /// * Cranelift stores the base-2 log of the lane count in a 4 bit integer.\n pub const MAX_SIMD_LANES: u64 = 1 << 0xF;\n \n-#[derive(Copy, Clone, Debug, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, Debug, HashStable, TyEncodable, TyDecodable)]\n pub enum LayoutError<'tcx> {\n     Unknown(Ty<'tcx>),\n     SizeOverflow(Ty<'tcx>),\n@@ -248,10 +250,6 @@ fn layout_of<'tcx>(\n     })\n }\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { layout_of, ..*providers };\n-}\n-\n pub struct LayoutCx<'tcx, C> {\n     pub tcx: C,\n     pub param_env: ty::ParamEnv<'tcx>,\n@@ -2537,18 +2535,6 @@ where\n     }\n }\n \n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for LayoutError<'tcx> {\n-    #[inline]\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        use crate::ty::layout::LayoutError::*;\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n-            Unknown(t) | SizeOverflow(t) => t.hash_stable(hcx, hasher),\n-        }\n-    }\n-}\n-\n impl<'tcx> ty::Instance<'tcx> {\n     // NOTE(eddyb) this is private to avoid using it from outside of\n     // `fn_abi_of_instance` - any other uses are either too high-level\n@@ -2807,6 +2793,7 @@ pub fn conv_from_spec_abi(tcx: TyCtxt<'_>, abi: SpecAbi) -> Conv {\n }\n \n /// Error produced by attempting to compute or adjust a `FnAbi`.\n+#[derive(Clone, Debug, HashStable)]\n pub enum FnAbiError<'tcx> {\n     /// Error produced by a `layout_of` call, while computing `FnAbi` initially.\n     Layout(LayoutError<'tcx>),\n@@ -2839,9 +2826,9 @@ impl<'tcx> fmt::Display for FnAbiError<'tcx> {\n // FIXME(eddyb) maybe use something like this for an unified `fn_abi_of`, not\n // just for error handling.\n #[derive(Debug)]\n-pub enum FnAbiRequest<'a, 'tcx> {\n-    OfFnPtr { sig: ty::PolyFnSig<'tcx>, extra_args: &'a [Ty<'tcx>] },\n-    OfInstance { instance: ty::Instance<'tcx>, extra_args: &'a [Ty<'tcx>] },\n+pub enum FnAbiRequest<'tcx> {\n+    OfFnPtr { sig: ty::PolyFnSig<'tcx>, extra_args: &'tcx ty::List<Ty<'tcx>> },\n+    OfInstance { instance: ty::Instance<'tcx>, extra_args: &'tcx ty::List<Ty<'tcx>> },\n }\n \n /// Trait for contexts that want to be able to compute `FnAbi`s.\n@@ -2855,14 +2842,14 @@ pub trait FnAbiOfHelpers<'tcx>: LayoutOfHelpers<'tcx> {\n     /// `Self::FnAbiOfResult` (which does not need to be a `Result<...>`).\n     ///\n     /// Most `impl`s, which propagate `FnAbiError`s, should simply return `err`,\n-    /// but this hook allows e.g. codegen to return only `&FnABi` from its\n+    /// but this hook allows e.g. codegen to return only `&FnAbi` from its\n     /// `cx.fn_abi_of_*(...)`, without any `Result<...>` around it to deal with\n     /// (and any `FnAbiError`s are turned into fatal errors or ICEs).\n     fn handle_fn_abi_err(\n         &self,\n         err: FnAbiError<'tcx>,\n         span: Span,\n-        fn_abi_request: FnAbiRequest<'_, 'tcx>,\n+        fn_abi_request: FnAbiRequest<'tcx>,\n     ) -> <Self::FnAbiOfResult as MaybeResult<&'tcx FnAbi<'tcx, Ty<'tcx>>>>::Error;\n }\n \n@@ -2876,18 +2863,15 @@ pub trait FnAbiOf<'tcx>: FnAbiOfHelpers<'tcx> {\n     fn fn_abi_of_fn_ptr(\n         &self,\n         sig: ty::PolyFnSig<'tcx>,\n-        extra_args: &[Ty<'tcx>],\n+        extra_args: &'tcx ty::List<Ty<'tcx>>,\n     ) -> Self::FnAbiOfResult {\n         // FIXME(eddyb) get a better `span` here.\n         let span = self.layout_tcx_at_span();\n-        let cx = LayoutCx { tcx: self.tcx().at(span), param_env: self.param_env() };\n+        let tcx = self.tcx().at(span);\n \n-        MaybeResult::from(\n-            cx.fn_abi_new_internal(sig, extra_args, None, CodegenFnAttrFlags::empty(), false)\n-                .map_err(|err| {\n-                    self.handle_fn_abi_err(err, span, FnAbiRequest::OfFnPtr { sig, extra_args })\n-                }),\n-        )\n+        MaybeResult::from(tcx.fn_abi_of_fn_ptr(self.param_env().and((sig, extra_args))).map_err(\n+            |err| self.handle_fn_abi_err(err, span, FnAbiRequest::OfFnPtr { sig, extra_args }),\n+        ))\n     }\n \n     /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for\n@@ -2899,36 +2883,19 @@ pub trait FnAbiOf<'tcx>: FnAbiOfHelpers<'tcx> {\n     fn fn_abi_of_instance(\n         &self,\n         instance: ty::Instance<'tcx>,\n-        extra_args: &[Ty<'tcx>],\n+        extra_args: &'tcx ty::List<Ty<'tcx>>,\n     ) -> Self::FnAbiOfResult {\n         // FIXME(eddyb) get a better `span` here.\n         let span = self.layout_tcx_at_span();\n-        let cx = LayoutCx { tcx: self.tcx().at(span), param_env: self.param_env() };\n-\n-        let sig = instance.fn_sig_for_fn_abi(cx.tcx());\n-\n-        let caller_location = if instance.def.requires_caller_location(cx.tcx()) {\n-            Some(cx.tcx.caller_location_ty())\n-        } else {\n-            None\n-        };\n-\n-        let attrs = cx.tcx.codegen_fn_attrs(instance.def_id()).flags;\n+        let tcx = self.tcx().at(span);\n \n         MaybeResult::from(\n-            cx.fn_abi_new_internal(\n-                sig,\n-                extra_args,\n-                caller_location,\n-                attrs,\n-                matches!(instance.def, ty::InstanceDef::Virtual(..)),\n-            )\n-            .map_err(|err| {\n+            tcx.fn_abi_of_instance(self.param_env().and((instance, extra_args))).map_err(|err| {\n                 // HACK(eddyb) at least for definitions of/calls to `Instance`s,\n                 // we can get some kind of span even if one wasn't provided.\n                 // However, we don't do this early in order to avoid calling\n                 // `def_span` unconditionally (which may have a perf penalty).\n-                let span = if !span.is_dummy() { span } else { cx.tcx.def_span(instance.def_id()) };\n+                let span = if !span.is_dummy() { span } else { tcx.def_span(instance.def_id()) };\n                 self.handle_fn_abi_err(err, span, FnAbiRequest::OfInstance { instance, extra_args })\n             }),\n         )\n@@ -2937,10 +2904,50 @@ pub trait FnAbiOf<'tcx>: FnAbiOfHelpers<'tcx> {\n \n impl<C: FnAbiOfHelpers<'tcx>> FnAbiOf<'tcx> for C {}\n \n-impl<'tcx> LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n+fn fn_abi_of_fn_ptr<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    query: ty::ParamEnvAnd<'tcx, (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>)>,\n+) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n+    let (param_env, (sig, extra_args)) = query.into_parts();\n+\n+    LayoutCx { tcx, param_env }.fn_abi_new_uncached(\n+        sig,\n+        extra_args,\n+        None,\n+        CodegenFnAttrFlags::empty(),\n+        false,\n+    )\n+}\n+\n+fn fn_abi_of_instance<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    query: ty::ParamEnvAnd<'tcx, (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>)>,\n+) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n+    let (param_env, (instance, extra_args)) = query.into_parts();\n+\n+    let sig = instance.fn_sig_for_fn_abi(tcx);\n+\n+    let caller_location = if instance.def.requires_caller_location(tcx) {\n+        Some(tcx.caller_location_ty())\n+    } else {\n+        None\n+    };\n+\n+    let attrs = tcx.codegen_fn_attrs(instance.def_id()).flags;\n+\n+    LayoutCx { tcx, param_env }.fn_abi_new_uncached(\n+        sig,\n+        extra_args,\n+        caller_location,\n+        attrs,\n+        matches!(instance.def, ty::InstanceDef::Virtual(..)),\n+    )\n+}\n+\n+impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n     // FIXME(eddyb) perhaps group the signature/type-containing (or all of them?)\n     // arguments of this method, into a separate `struct`.\n-    fn fn_abi_new_internal(\n+    fn fn_abi_new_uncached(\n         &self,\n         sig: ty::PolyFnSig<'tcx>,\n         extra_args: &[Ty<'tcx>],\n@@ -2949,7 +2956,7 @@ impl<'tcx> LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n         // FIXME(eddyb) replace this with something typed, like an `enum`.\n         force_thin_self_ptr: bool,\n     ) -> Result<&'tcx FnAbi<'tcx, Ty<'tcx>>, FnAbiError<'tcx>> {\n-        debug!(\"FnAbi::new_internal({:?}, {:?})\", sig, extra_args);\n+        debug!(\"fn_abi_new_uncached({:?}, {:?})\", sig, extra_args);\n \n         let sig = self.tcx.normalize_erasing_late_bound_regions(self.param_env, sig);\n \n@@ -3110,7 +3117,7 @@ impl<'tcx> LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n             can_unwind: fn_can_unwind(self.tcx(), codegen_fn_attr_flags, sig.abi),\n         };\n         self.fn_abi_adjust_for_abi(&mut fn_abi, sig.abi)?;\n-        debug!(\"FnAbi::new_internal = {:?}\", fn_abi);\n+        debug!(\"fn_abi_new_uncached = {:?}\", fn_abi);\n         Ok(self.tcx.intern_fn_abi(fn_abi))\n     }\n "}, {"sha": "154b26464a804af2fc4f3963f9d26b826eeb4c92", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -48,6 +48,7 @@ use rustc_index::{bit_set::FiniteBitSet, vec::IndexVec};\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n use rustc_session::utils::NativeLibKind;\n use rustc_session::Limits;\n+use rustc_target::abi;\n use rustc_target::spec::PanicStrategy;\n \n use rustc_ast as ast;"}, {"sha": "563a3cf14382c74ad8ef7d094be0a9677cd12ed3", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -449,3 +449,25 @@ impl<'tcx> Key for (ty::Predicate<'tcx>, traits::WellFormedLoc) {\n         DUMMY_SP\n     }\n }\n+\n+impl<'tcx> Key for (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n+    }\n+\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n+impl<'tcx> Key for (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n+    #[inline(always)]\n+    fn query_crate_is_local(&self) -> bool {\n+        true\n+    }\n+\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        self.0.default_span(tcx)\n+    }\n+}"}, {"sha": "324278c57bf144ed2a09c5762b5ab5f1b55869a3", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1837ef1c58edd48c81341126ecc94e7adc5bd3d/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=c1837ef1c58edd48c81341126ecc94e7adc5bd3d", "patch": "@@ -601,6 +601,7 @@ pub struct FnAbi<'a, Ty> {\n }\n \n /// Error produced by attempting to adjust a `FnAbi`, for a \"foreign\" ABI.\n+#[derive(Clone, Debug, HashStable_Generic)]\n pub enum AdjustForForeignAbiError {\n     /// Target architecture doesn't support \"foreign\" (i.e. non-Rust) ABIs.\n     Unsupported { arch: String, abi: spec::abi::Abi },"}]}