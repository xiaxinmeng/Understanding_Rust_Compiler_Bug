{"sha": "2727f10b216fc6ac7d3a22f216f55e46e9c99506", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MjdmMTBiMjE2ZmM2YWM3ZDNhMjJmMjE2ZjU1ZTQ2ZTljOTk1MDY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-14T22:52:54Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-01-15T00:13:21Z"}, "message": "Improve docs for new framework", "tree": {"sha": "2e8ebc90d5c37132b7eec58fece1967ad1fc5bd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e8ebc90d5c37132b7eec58fece1967ad1fc5bd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2727f10b216fc6ac7d3a22f216f55e46e9c99506", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2727f10b216fc6ac7d3a22f216f55e46e9c99506", "html_url": "https://github.com/rust-lang/rust/commit/2727f10b216fc6ac7d3a22f216f55e46e9c99506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2727f10b216fc6ac7d3a22f216f55e46e9c99506/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47dce1be81b17512db9e730fdd04adf01f7cf10f", "url": "https://api.github.com/repos/rust-lang/rust/commits/47dce1be81b17512db9e730fdd04adf01f7cf10f", "html_url": "https://github.com/rust-lang/rust/commit/47dce1be81b17512db9e730fdd04adf01f7cf10f"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "bf18bc7a5d036a6bf8e0314705e8fa5edfa55546", "filename": "src/librustc_mir/dataflow/generic/mod.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2727f10b216fc6ac7d3a22f216f55e46e9c99506/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2727f10b216fc6ac7d3a22f216f55e46e9c99506/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgeneric%2Fmod.rs?ref=2727f10b216fc6ac7d3a22f216f55e46e9c99506", "patch": "@@ -1,4 +1,36 @@\n-//! A framework for expressing dataflow problems.\n+//! A framework that can express both [gen-kill] and generic dataflow problems.\n+//!\n+//! There is another interface for dataflow in the compiler in `librustc_mir/dataflow/mod.rs`. The\n+//! interface in this module will eventually [replace that one][design-meeting].\n+//!\n+//! To actually use this framework, you must implement either the `Analysis` or the\n+//! `GenKillAnalysis` trait. If your transfer function can be expressed with only gen/kill\n+//! operations, prefer `GenKillAnalysis` as it will perform better. Create an `Engine` using the\n+//! appropriate constructor and call `iterate_to_fixpoint`. You can use a `ResultsCursor` to\n+//! inspect the fixpoint solution to your dataflow problem.\n+//!\n+//! ```ignore(cross-crate-imports)\n+//! fn do_my_analysis(tcx: TyCtxt<'tcx>, body: &mir::Body<'tcx>, did: DefId) {\n+//!     let analysis = MyAnalysis::new();\n+//!\n+//!     // If `MyAnalysis` implements `GenKillAnalysis`.\n+//!     let results = Engine::new_gen_kill(tcx, body, did, analysis).iterate_to_fixpoint();\n+//!\n+//!     // If `MyAnalysis` implements `Analysis`.\n+//!     // let results = Engine::new_generic(tcx, body, did, analysis).iterate_to_fixpoint();\n+//!\n+//!     let mut cursor = ResultsCursor::new(body, results);\n+//!\n+//!     for (_, statement_index) in body.block_data[START_BLOCK].statements.iter_enumerated() {\n+//!         cursor.seek_after(Location { block: START_BLOCK, statement_index });\n+//!         let state = cursor.get();\n+//!         println!(\"{:?}\", state);\n+//!     }\n+//! }\n+//! ```\n+//!\n+//! [gen-kill]: https://en.wikipedia.org/wiki/Data-flow_analysis#Bit_vector_problems\n+//! [design-meeting]https://github.com/rust-lang/compiler-team/issues/202\n \n use std::io;\n \n@@ -68,7 +100,7 @@ pub trait AnalysisDomain<'tcx>: BottomValue {\n     }\n }\n \n-/// Define a dataflow problem with an arbitrarily complex transfer function.\n+/// A dataflow problem with an arbitrarily complex transfer function.\n pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// Updates the current dataflow state with the effect of evaluating a statement.\n     fn apply_statement_effect(\n@@ -134,7 +166,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     );\n }\n \n-/// Define a gen/kill dataflow problem.\n+/// A gen/kill dataflow problem.\n ///\n /// Each method in this trait has a corresponding one in `Analysis`. However, these methods only\n /// allow modification of the dataflow state via \"gen\" and \"kill\" operations. By defining transfer"}]}