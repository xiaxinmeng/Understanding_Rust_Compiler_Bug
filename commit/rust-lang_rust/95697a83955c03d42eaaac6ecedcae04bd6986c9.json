{"sha": "95697a83955c03d42eaaac6ecedcae04bd6986c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1Njk3YTgzOTU1YzAzZDQyZWFhYWM2ZWNlZGNhZTA0YmQ2OTg2Yzk=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2016-03-26T11:27:33Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2016-03-26T12:02:54Z"}, "message": "Fix removal of function attributes on ARM\n\nWe use a 64bit integer to pass the set of attributes that is to be\nremoved, but the called C function expects a 32bit integer. On most\nplatforms this doesn't cause any problems other than being unable to\nunset some attributes, but on  ARM even the lower 32bit aren't handled\ncorrectly because the 64bit value is passed in different registers, so\nthe C function actually sees random garbage.\n\nSo we need to fix the relevant functions to use 32bit integers instead.\nAdditionally we need an implementation that actually accepts 64bit\nintegers because some attributes can only be unset that way.\n\nFixes #32360", "tree": {"sha": "bf75c17b3c8323e9e9c927a79c7463d4486f2246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf75c17b3c8323e9e9c927a79c7463d4486f2246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95697a83955c03d42eaaac6ecedcae04bd6986c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95697a83955c03d42eaaac6ecedcae04bd6986c9", "html_url": "https://github.com/rust-lang/rust/commit/95697a83955c03d42eaaac6ecedcae04bd6986c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95697a83955c03d42eaaac6ecedcae04bd6986c9/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d322f990b04e3b598afd6a47c09a0277f73031aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d322f990b04e3b598afd6a47c09a0277f73031aa", "html_url": "https://github.com/rust-lang/rust/commit/d322f990b04e3b598afd6a47c09a0277f73031aa"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "ee57812fb9823017e35dfae40db51d330149b66c", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95697a83955c03d42eaaac6ecedcae04bd6986c9/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95697a83955c03d42eaaac6ecedcae04bd6986c9/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=95697a83955c03d42eaaac6ecedcae04bd6986c9", "patch": "@@ -964,9 +964,10 @@ extern {\n     pub fn LLVMAddFunctionAttrStringValue(Fn: ValueRef, index: c_uint,\n                                           Name: *const c_char,\n                                           Value: *const c_char);\n+    pub fn LLVMRemoveFunctionAttributes(Fn: ValueRef, index: c_uint, attr: uint64_t);\n     pub fn LLVMRemoveFunctionAttrString(Fn: ValueRef, index: c_uint, Name: *const c_char);\n-    pub fn LLVMGetFunctionAttr(Fn: ValueRef) -> c_ulonglong;\n-    pub fn LLVMRemoveFunctionAttr(Fn: ValueRef, val: c_ulonglong);\n+    pub fn LLVMGetFunctionAttr(Fn: ValueRef) -> c_uint;\n+    pub fn LLVMRemoveFunctionAttr(Fn: ValueRef, val: c_uint);\n \n     /* Operations on parameters */\n     pub fn LLVMCountParams(Fn: ValueRef) -> c_uint;\n@@ -2184,6 +2185,13 @@ pub fn SetFunctionAttribute(fn_: ValueRef, attr: Attribute) {\n     }\n }\n \n+pub fn RemoveFunctionAttributes(fn_: ValueRef, attr: Attribute) {\n+    unsafe {\n+        LLVMRemoveFunctionAttributes(fn_, FunctionIndex as c_uint,\n+                                           attr.bits() as uint64_t)\n+    }\n+}\n+\n /* Memory-managed interface to target data. */\n \n pub struct TargetData {"}, {"sha": "b771afea0f3bde1e04fe86927ab5f9a6174b4cd5", "filename": "src/librustc_trans/trans/attributes.rs", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/95697a83955c03d42eaaac6ecedcae04bd6986c9/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95697a83955c03d42eaaac6ecedcae04bd6986c9/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fattributes.rs?ref=95697a83955c03d42eaaac6ecedcae04bd6986c9", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n //! Set and unset common attributes on LLVM values.\n \n-use libc::{c_uint, c_ulonglong};\n+use libc::c_uint;\n use llvm::{self, ValueRef};\n use session::config::NoDebugInfo;\n pub use syntax::attr::InlineAttr;\n@@ -28,9 +28,7 @@ pub fn inline(val: ValueRef, inline: InlineAttr) {\n             let attr = llvm::Attribute::InlineHint |\n                        llvm::Attribute::AlwaysInline |\n                        llvm::Attribute::NoInline;\n-            unsafe {\n-                llvm::LLVMRemoveFunctionAttr(val, attr.bits() as c_ulonglong)\n-            }\n+            llvm::RemoveFunctionAttributes(val, attr)\n         },\n     };\n }\n@@ -41,25 +39,15 @@ pub fn emit_uwtable(val: ValueRef, emit: bool) {\n     if emit {\n         llvm::SetFunctionAttribute(val, llvm::Attribute::UWTable);\n     } else {\n-        unsafe {\n-            llvm::LLVMRemoveFunctionAttr(\n-                val,\n-                llvm::Attribute::UWTable.bits() as c_ulonglong,\n-            );\n-        }\n+        llvm::RemoveFunctionAttributes(val, llvm::Attribute::UWTable);\n     }\n }\n \n /// Tell LLVM whether the function can or cannot unwind.\n #[inline]\n pub fn unwind(val: ValueRef, can_unwind: bool) {\n     if can_unwind {\n-        unsafe {\n-            llvm::LLVMRemoveFunctionAttr(\n-                val,\n-                llvm::Attribute::NoUnwind.bits() as c_ulonglong,\n-            );\n-        }\n+        llvm::RemoveFunctionAttributes(val, llvm::Attribute::NoUnwind);\n     } else {\n         llvm::SetFunctionAttribute(val, llvm::Attribute::NoUnwind);\n     }\n@@ -72,12 +60,7 @@ pub fn set_optimize_for_size(val: ValueRef, optimize: bool) {\n     if optimize {\n         llvm::SetFunctionAttribute(val, llvm::Attribute::OptimizeForSize);\n     } else {\n-        unsafe {\n-            llvm::LLVMRemoveFunctionAttr(\n-                val,\n-                llvm::Attribute::OptimizeForSize.bits() as c_ulonglong,\n-            );\n-        }\n+        llvm::RemoveFunctionAttributes(val, llvm::Attribute::OptimizeForSize);\n     }\n }\n \n@@ -87,9 +70,7 @@ pub fn naked(val: ValueRef, is_naked: bool) {\n     if is_naked {\n         llvm::SetFunctionAttribute(val, llvm::Attribute::Naked);\n     } else {\n-        unsafe {\n-            llvm::LLVMRemoveFunctionAttr(val, llvm::Attribute::Naked.bits() as c_ulonglong);\n-        }\n+        llvm::RemoveFunctionAttributes(val, llvm::Attribute::Naked);\n     }\n }\n "}, {"sha": "6ff90a8f53a04098893948488993fece9a822ac1", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/95697a83955c03d42eaaac6ecedcae04bd6986c9/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/95697a83955c03d42eaaac6ecedcae04bd6986c9/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=95697a83955c03d42eaaac6ecedcae04bd6986c9", "patch": "@@ -151,6 +151,16 @@ extern \"C\" void LLVMAddFunctionAttrStringValue(LLVMValueRef Fn, unsigned index,\n   F->addAttributes(index, AttributeSet::get(F->getContext(), index, B));\n }\n \n+extern \"C\" void LLVMRemoveFunctionAttributes(LLVMValueRef Fn, unsigned index, uint64_t Val) {\n+  Function *A = unwrap<Function>(Fn);\n+  const AttributeSet PAL = A->getAttributes();\n+  AttrBuilder B(Val);\n+  const AttributeSet PALnew =\n+    PAL.removeAttributes(A->getContext(), index,\n+                         AttributeSet::get(A->getContext(), index, B));\n+  A->setAttributes(PALnew);\n+}\n+\n extern \"C\" void LLVMRemoveFunctionAttrString(LLVMValueRef fn, unsigned index, const char *Name) {\n   Function *f = unwrap<Function>(fn);\n   LLVMContext &C = f->getContext();"}]}