{"sha": "9f4559c3452239205015a02f2695ae1ec7d5c0f2", "node_id": "C_kwDOAAsO6NoAKDlmNDU1OWMzNDUyMjM5MjA1MDE1YTAyZjI2OTVhZTFlYzdkNWMwZjI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-06T09:43:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-06T09:43:50Z"}, "message": "Rollup merge of #90998 - jhpratt:require-const-stability, r=oli-obk\n\nRequire const stability attribute on all stable functions that are `const`\n\nThis PR requires all stable functions (of all kinds) that are `const fn` to have a `#[rustc_const_stable]` or `#[rustc_const_unstable]` attribute. Stability was previously implied if omitted; a follow-up PR is planned to change the fallback to be unstable.", "tree": {"sha": "69750cace21cee68a12bdf7abad08ae4c01ca6a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69750cace21cee68a12bdf7abad08ae4c01ca6a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f4559c3452239205015a02f2695ae1ec7d5c0f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh/5hXCRBK7hj4Ov3rIwAA0T0IAJ0sPQM2Fcqn/ZOzEiJk58Qq\nXDBe/ByM1XtKHyR4YNhn8o7BzYiXFXDqAp8opiw3hFzWLeaN5CMIuQgK59fx49ub\nfgtpeOE5QqH5h6rR2pZWyjY2SkLNZtobL7EKx4hF42nr/b/C0RkE1toqgOlJNBDd\nkrIKq2NFgtV6Lo02T6OW4sGEGTfjyJr+1yZVBGU3WvwZ9+vRWWGvrmH4QGih+1aL\n8Ye4Wtg6uE1fyVczCmP+O0aToTmYJXbSUhYik4EK/J2kUy56v49djaiXslAV9qyP\nHTfIlz6uDKFIQjajFUOIXlyY43OPNK7Uv3kSt1BpKogSGZHPHvbXwI2CcDEjUl8=\n=lVYB\n-----END PGP SIGNATURE-----\n", "payload": "tree 69750cace21cee68a12bdf7abad08ae4c01ca6a5\nparent e069a711084b5617aecda7a5c8e88406ca12ed65\nparent 1911eb8b6180f513a666372baf6e56f78b82dcd8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1644140630 +0100\ncommitter GitHub <noreply@github.com> 1644140630 +0100\n\nRollup merge of #90998 - jhpratt:require-const-stability, r=oli-obk\n\nRequire const stability attribute on all stable functions that are `const`\n\nThis PR requires all stable functions (of all kinds) that are `const fn` to have a `#[rustc_const_stable]` or `#[rustc_const_unstable]` attribute. Stability was previously implied if omitted; a follow-up PR is planned to change the fallback to be unstable.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4559c3452239205015a02f2695ae1ec7d5c0f2", "html_url": "https://github.com/rust-lang/rust/commit/9f4559c3452239205015a02f2695ae1ec7d5c0f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f4559c3452239205015a02f2695ae1ec7d5c0f2/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e069a711084b5617aecda7a5c8e88406ca12ed65", "url": "https://api.github.com/repos/rust-lang/rust/commits/e069a711084b5617aecda7a5c8e88406ca12ed65", "html_url": "https://github.com/rust-lang/rust/commit/e069a711084b5617aecda7a5c8e88406ca12ed65"}, {"sha": "1911eb8b6180f513a666372baf6e56f78b82dcd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1911eb8b6180f513a666372baf6e56f78b82dcd8", "html_url": "https://github.com/rust-lang/rust/commit/1911eb8b6180f513a666372baf6e56f78b82dcd8"}], "stats": {"total": 77, "additions": 51, "deletions": 26}, "files": [{"sha": "136059677c5ae94a80203d3768b13ee63901dc90", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9f4559c3452239205015a02f2695ae1ec7d5c0f2/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4559c3452239205015a02f2695ae1ec7d5c0f2/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=9f4559c3452239205015a02f2695ae1ec7d5c0f2", "patch": "@@ -577,17 +577,21 @@ impl<'tcx> MissingStabilityAnnotations<'tcx> {\n     }\n \n     fn check_missing_const_stability(&self, def_id: LocalDefId, span: Span) {\n-        let stab_map = self.tcx.stability();\n-        let stab = stab_map.local_stability(def_id);\n-        if stab.map_or(false, |stab| stab.level.is_stable()) {\n-            let const_stab = stab_map.local_const_stability(def_id);\n-            if const_stab.is_none() {\n-                self.tcx.sess.span_err(\n-                    span,\n-                    \"`#[stable]` const functions must also be either \\\n-                    `#[rustc_const_stable]` or `#[rustc_const_unstable]`\",\n-                );\n-            }\n+        if !self.tcx.features().staged_api {\n+            return;\n+        }\n+\n+        let is_const = self.tcx.is_const_fn(def_id.to_def_id());\n+        let is_stable = self\n+            .tcx\n+            .lookup_stability(def_id)\n+            .map_or(false, |stability| stability.level.is_stable());\n+        let missing_const_stability_attribute = self.tcx.lookup_const_stability(def_id).is_none();\n+        let is_reachable = self.access_levels.is_reachable(def_id);\n+\n+        if is_const && is_stable && missing_const_stability_attribute && is_reachable {\n+            let descr = self.tcx.def_kind(def_id).descr(def_id.to_def_id());\n+            self.tcx.sess.span_err(span, &format!(\"{descr} has missing const stability attribute\"));\n         }\n     }\n }\n@@ -612,13 +616,8 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n             self.check_missing_stability(i.def_id, i.span);\n         }\n \n-        // Ensure `const fn` that are `stable` have one of `rustc_const_unstable` or\n-        // `rustc_const_stable`.\n-        if self.tcx.features().staged_api\n-            && matches!(&i.kind, hir::ItemKind::Fn(sig, ..) if sig.header.is_const())\n-        {\n-            self.check_missing_const_stability(i.def_id, i.span);\n-        }\n+        // Ensure stable `const fn` have a const stability attribute.\n+        self.check_missing_const_stability(i.def_id, i.span);\n \n         intravisit::walk_item(self, i)\n     }\n@@ -632,6 +631,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n         let impl_def_id = self.tcx.hir().get_parent_item(ii.hir_id());\n         if self.tcx.impl_trait_ref(impl_def_id).is_none() {\n             self.check_missing_stability(ii.def_id, ii.span);\n+            self.check_missing_const_stability(ii.def_id, ii.span);\n         }\n         intravisit::walk_impl_item(self, ii);\n     }"}, {"sha": "ee79021ed536e69555e6a8ba2c470549143fd7e8", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f4559c3452239205015a02f2695ae1ec7d5c0f2/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4559c3452239205015a02f2695ae1ec7d5c0f2/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=9f4559c3452239205015a02f2695ae1ec7d5c0f2", "patch": "@@ -512,6 +512,7 @@ impl<T, const N: usize> [T; N] {\n \n     /// Returns a slice containing the entire array. Equivalent to `&s[..]`.\n     #[stable(feature = \"array_as_slice\", since = \"1.57.0\")]\n+    #[rustc_const_stable(feature = \"array_as_slice\", since = \"1.57.0\")]\n     pub const fn as_slice(&self) -> &[T] {\n         self\n     }"}, {"sha": "feb9455565844ae5ae127568fb80eae4bc6ee170", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f4559c3452239205015a02f2695ae1ec7d5c0f2/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4559c3452239205015a02f2695ae1ec7d5c0f2/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=9f4559c3452239205015a02f2695ae1ec7d5c0f2", "patch": "@@ -1959,6 +1959,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// ```\n     #[inline(always)]\n     #[stable(feature = \"unsafe_cell_raw_get\", since = \"1.56.0\")]\n+    #[rustc_const_stable(feature = \"unsafe_cell_raw_get\", since = \"1.56.0\")]\n     pub const fn raw_get(this: *const Self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n         // #[repr(transparent)]. This exploits libstd's special status, there is"}, {"sha": "c5e8408d904eec23dd486b6cd4831799f0e555b3", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f4559c3452239205015a02f2695ae1ec7d5c0f2/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4559c3452239205015a02f2695ae1ec7d5c0f2/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=9f4559c3452239205015a02f2695ae1ec7d5c0f2", "patch": "@@ -1064,6 +1064,7 @@ macro_rules! int_impl {\n         ///\n         /// ```\n         #[stable(feature = \"saturating_div\", since = \"1.58.0\")]\n+        #[rustc_const_stable(feature = \"saturating_div\", since = \"1.58.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "1ebd1c58f2b59dc3b8b02e743becc57cc17b6ed3", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f4559c3452239205015a02f2695ae1ec7d5c0f2/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4559c3452239205015a02f2695ae1ec7d5c0f2/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=9f4559c3452239205015a02f2695ae1ec7d5c0f2", "patch": "@@ -972,6 +972,7 @@ macro_rules! nonzero_unsigned_is_power_of_two {\n                 /// ```\n                 #[must_use]\n                 #[stable(feature = \"nonzero_is_power_of_two\", since = \"1.59.0\")]\n+                #[rustc_const_stable(feature = \"nonzero_is_power_of_two\", since = \"1.59.0\")]\n                 #[inline]\n                 pub const fn is_power_of_two(self) -> bool {\n                     // LLVM 11 normalizes `unchecked_sub(x, 1) & x == 0` to the implementation seen here."}, {"sha": "052db4e3b3d13907b15d9011aa9483900bd20ab1", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f4559c3452239205015a02f2695ae1ec7d5c0f2/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4559c3452239205015a02f2695ae1ec7d5c0f2/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=9f4559c3452239205015a02f2695ae1ec7d5c0f2", "patch": "@@ -1132,6 +1132,7 @@ macro_rules! uint_impl {\n         ///\n         /// ```\n         #[stable(feature = \"saturating_div\", since = \"1.58.0\")]\n+        #[rustc_const_stable(feature = \"saturating_div\", since = \"1.58.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "57e64737d0faa53ae4f203234006c37f9761ab9b", "filename": "src/test/ui/stability-attribute/missing-const-stability.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f4559c3452239205015a02f2695ae1ec7d5c0f2/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f4559c3452239205015a02f2695ae1ec7d5c0f2/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs?ref=9f4559c3452239205015a02f2695ae1ec7d5c0f2", "patch": "@@ -1,12 +1,26 @@\n #![feature(staged_api)]\n+#![feature(const_trait_impl)]\n+#![stable(feature = \"stable\", since = \"1.0.0\")]\n \n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n+pub const fn foo() {} //~ ERROR function has missing const stability attribute\n \n-#[stable(feature = \"foo\", since = \"1.0.0\")]\n-pub const fn foo() {}\n-//~^ ERROR rustc_const_stable\n+#[unstable(feature = \"unstable\", issue = \"none\")]\n+pub const fn bar() {} // ok because function is unstable\n \n-#[unstable(feature = \"bar\", issue = \"none\")]\n-pub const fn bar() {} // ok\n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n+pub struct Foo;\n+impl Foo {\n+    #[stable(feature = \"stable\", since = \"1.0.0\")]\n+    pub const fn foo() {} //~ ERROR associated function has missing const stability attribute\n+\n+    #[unstable(feature = \"unstable\", issue = \"none\")]\n+    pub const fn bar() {} // ok because function is unstable\n+}\n+\n+// FIXME Once #![feature(const_trait_impl)] is allowed to be stable, add a test\n+// for const trait impls. Right now, a \"trait methods cannot be stable const fn\"\n+// error is emitted. This occurs prior to the lint being tested here, such that\n+// the lint cannot currently be tested on this use case.\n \n fn main() {}"}, {"sha": "7eba99a477abe0ed5a14f5933d3546c591e907a5", "filename": "src/test/ui/stability-attribute/missing-const-stability.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f4559c3452239205015a02f2695ae1ec7d5c0f2/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f4559c3452239205015a02f2695ae1ec7d5c0f2/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr?ref=9f4559c3452239205015a02f2695ae1ec7d5c0f2", "patch": "@@ -1,8 +1,14 @@\n-error: `#[stable]` const functions must also be either `#[rustc_const_stable]` or `#[rustc_const_unstable]`\n+error: function has missing const stability attribute\n   --> $DIR/missing-const-stability.rs:6:1\n    |\n LL | pub const fn foo() {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: associated function has missing const stability attribute\n+  --> $DIR/missing-const-stability.rs:15:5\n+   |\n+LL |     pub const fn foo() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}]}