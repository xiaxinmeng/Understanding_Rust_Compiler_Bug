{"sha": "6a979d879381448747d46c8198f35d8f1f8e9527", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhOTc5ZDg3OTM4MTQ0ODc0N2Q0NmM4MTk4ZjM1ZDhmMWY4ZTk1Mjc=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-05-30T06:21:33Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-06-19T18:05:14Z"}, "message": "Lower consts", "tree": {"sha": "bdf547322fe2f42bf22a999132125248ca942b69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdf547322fe2f42bf22a999132125248ca942b69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a979d879381448747d46c8198f35d8f1f8e9527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a979d879381448747d46c8198f35d8f1f8e9527", "html_url": "https://github.com/rust-lang/rust/commit/6a979d879381448747d46c8198f35d8f1f8e9527", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a979d879381448747d46c8198f35d8f1f8e9527/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f", "html_url": "https://github.com/rust-lang/rust/commit/64c486b6f43f79645c91a2f4a9b4494d7bbe3c9f"}], "stats": {"total": 82, "additions": 47, "deletions": 35}, "files": [{"sha": "624fc3b3fb7b7f487f42b4d5f13ea3d86956e6ef", "filename": "src/librustc_middle/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a979d879381448747d46c8198f35d8f1f8e9527/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a979d879381448747d46c8198f35d8f1f8e9527/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs?ref=6a979d879381448747d46c8198f35d8f1f8e9527", "patch": "@@ -5,6 +5,7 @@\n //! its name suggest, is to provide an abstraction boundary for creating\n //! interned Chalk types.\n \n+use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n@@ -63,7 +64,7 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n     type InternedType = Box<chalk_ir::TyData<Self>>;\n     type InternedLifetime = Box<chalk_ir::LifetimeData<Self>>;\n     type InternedConst = Box<chalk_ir::ConstData<Self>>;\n-    type InternedConcreteConst = u32;\n+    type InternedConcreteConst = ConstValue<'tcx>;\n     type InternedGenericArg = Box<chalk_ir::GenericArgData<Self>>;\n     type InternedGoal = Box<chalk_ir::GoalData<Self>>;\n     type InternedGoals = Vec<chalk_ir::Goal<Self>>;"}, {"sha": "4976ba06815c827cf84ce4f9619774293266b176", "filename": "src/librustc_traits/chalk/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a979d879381448747d46c8198f35d8f1f8e9527/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a979d879381448747d46c8198f35d8f1f8e9527/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fdb.rs?ref=6a979d879381448747d46c8198f35d8f1f8e9527", "patch": "@@ -468,8 +468,8 @@ fn binders_for<'tcx>(\n             ty::subst::GenericArgKind::Type(_ty) => {\n                 chalk_ir::VariableKind::Ty(chalk_ir::TyKind::General)\n             }\n-            ty::subst::GenericArgKind::Const(_const) => {\n-                chalk_ir::VariableKind::Ty(chalk_ir::TyKind::General)\n+            ty::subst::GenericArgKind::Const(c) => {\n+                chalk_ir::VariableKind::Const(c.ty.lower_into(interner))\n             }\n         }),\n     )"}, {"sha": "1f9444df428c74ad2ab954a47b757c1d9e8cc04e", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 43, "deletions": 32, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6a979d879381448747d46c8198f35d8f1f8e9527/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a979d879381448747d46c8198f35d8f1f8e9527/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=6a979d879381448747d46c8198f35d8f1f8e9527", "patch": "@@ -100,24 +100,26 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                     ty::PredicateKind::RegionOutlives(predicate) => {\n                         let (predicate, binders, _named_regions) =\n                             collect_bound_vars(interner, interner.tcx, predicate);\n-        \n+\n                         Some(\n                             chalk_ir::ProgramClauseData::ForAll(chalk_ir::Binders::new(\n                                 binders,\n                                 chalk_ir::ProgramClauseImplication {\n                                     consequence: chalk_ir::DomainGoal::Holds(\n-                                        chalk_ir::WhereClause::LifetimeOutlives(chalk_ir::LifetimeOutlives {\n-                                            a: predicate.0.lower_into(interner),\n-                                            b: predicate.1.lower_into(interner),\n-                                        })\n+                                        chalk_ir::WhereClause::LifetimeOutlives(\n+                                            chalk_ir::LifetimeOutlives {\n+                                                a: predicate.0.lower_into(interner),\n+                                                b: predicate.1.lower_into(interner),\n+                                            },\n+                                        ),\n                                     ),\n                                     conditions: chalk_ir::Goals::new(interner),\n                                     priority: chalk_ir::ClausePriority::High,\n                                 },\n                             ))\n                             .intern(interner),\n                         )\n-                    },\n+                    }\n                     // FIXME(chalk): need to add TypeOutlives\n                     ty::PredicateKind::TypeOutlives(_) => None,\n                     ty::PredicateKind::Projection(predicate) => {\n@@ -188,9 +190,10 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n                             chalk_ir::WhereClause::LifetimeOutlives(chalk_ir::LifetimeOutlives {\n                                 a: predicate.0.lower_into(interner),\n                                 b: predicate.1.lower_into(interner),\n-                            })\n-                        )).intern(interner)\n-                    )\n+                            }),\n+                        ))\n+                        .intern(interner),\n+                    ),\n                 )\n             }\n             // FIXME(chalk): TypeOutlives\n@@ -216,9 +219,9 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n                 GenericArgKind::Lifetime(lt) => bug!(\"unexpect well formed predicate: {:?}\", lt),\n             },\n \n-            ty::PredicateKind::ObjectSafe(t) => {\n-                chalk_ir::GoalData::DomainGoal(chalk_ir::DomainGoal::ObjectSafe(chalk_ir::TraitId(*t)))\n-            }\n+            ty::PredicateKind::ObjectSafe(t) => chalk_ir::GoalData::DomainGoal(\n+                chalk_ir::DomainGoal::ObjectSafe(chalk_ir::TraitId(*t)),\n+            ),\n \n             // FIXME(chalk): other predicates\n             //\n@@ -335,25 +338,34 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n             Adt(def, substs) => apply(struct_ty(def.did), substs.lower_into(interner)),\n             Foreign(_def_id) => unimplemented!(),\n             Str => apply(chalk_ir::TypeName::Str, empty()),\n-            Array(ty, _) => apply(\n-                chalk_ir::TypeName::Array,\n-                chalk_ir::Substitution::from(\n-                    interner,\n-                    &[\n-                        chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner),\n-                        chalk_ir::GenericArgData::Const(\n-                            chalk_ir::ConstData {\n-                                ty: apply(chalk_ir::TypeName::Tuple(0), empty()),\n-                                value: chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst {\n-                                    interned: 0,\n-                                }),\n-                            }\n+            Array(ty, len) => {\n+                let value = match len.val {\n+                    ty::ConstKind::Value(val) => {\n+                        chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst { interned: val })\n+                    }\n+                    ty::ConstKind::Bound(db, bound) => {\n+                        chalk_ir::ConstValue::BoundVar(chalk_ir::BoundVar::new(\n+                            chalk_ir::DebruijnIndex::new(db.as_u32()),\n+                            bound.index(),\n+                        ))\n+                    }\n+                    _ => unimplemented!(\"Const not implemented. {:?}\", len.val),\n+                };\n+                apply(\n+                    chalk_ir::TypeName::Array,\n+                    chalk_ir::Substitution::from(\n+                        interner,\n+                        &[\n+                            chalk_ir::GenericArgData::Ty(ty.lower_into(interner)).intern(interner),\n+                            chalk_ir::GenericArgData::Const(\n+                                chalk_ir::ConstData { ty: len.ty.lower_into(interner), value }\n+                                    .intern(interner),\n+                            )\n                             .intern(interner),\n-                        )\n-                        .intern(interner),\n-                    ],\n-                ),\n-            ),\n+                        ],\n+                    ),\n+                )\n+            }\n             Slice(ty) => apply(\n                 chalk_ir::TypeName::Slice,\n                 chalk_ir::Substitution::from1(\n@@ -532,8 +544,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n                         b: predicate.1.lower_into(interner),\n                     }),\n                 ))\n-\n-            },\n+            }\n             ty::PredicateKind::TypeOutlives(_predicate) => None,\n             ty::PredicateKind::Projection(_predicate) => None,\n             ty::PredicateKind::WellFormed(_ty) => None,"}]}