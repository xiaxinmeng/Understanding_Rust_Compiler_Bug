{"sha": "9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "node_id": "C_kwDOAAsO6NoAKDlmZWYzZDllMGEzODZmOGIxZTI3N2Q0YjU5OGU2MjU0YzljMDUxNmI", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-08-06T21:18:16Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2022-03-02T16:46:05Z"}, "message": "Added `Expect` lint level and attribute (RFC-2383)\n\n* Also added the `LintExpectationId` which will be used in future commits", "tree": {"sha": "b4a23228cdaa9492eda2f09b3a761952992b11d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4a23228cdaa9492eda2f09b3a761952992b11d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmIfn00ACgkQ/Ny/Ka9k\n1gHxJQ/7B9Ee2iiRrAg0ZDLJQGF+87R0gB7ER00kw6kD0J126HU4++pTwY7Zvoai\nUHKshlM/RP9aNPfGsezWih36jjGVVKbcvPLTQj3czadx0HnCVJHDj8czrB1WV2ss\naWjvu2Scak8uvjpJMy4kJ6IM8x0YxOAT89kZIfwiQJqn0J0xKN0fJtmgCvGqk5Kb\nIUcBXBptZPQP36FKu3W0WG0Cfwnfpdp9rAp7zkzsVUax8F12+U9DiIA0xs9IwTKL\nUOh0MkoLBWceLzUENMDdWHh9719siEsEQNKZL+YtfM6Ne10bhT65MEKJRtwvF9DU\nioQbitdfk8/ZouCyn14UIRVxpbo7GbdcaASMQjQYLdN/LIWcUEqNsIk9ZQZiAdEk\nMD/HBk1CujaMNpx+waKIBqIhMnSZCCAPFtj2mozZRRLUk4buUoQEwmNa7sKnptQ9\n9z6NUhmKzASZDsQGf4RTgk5mYUIE1q4C9RAi8c3hbaEOm6RcfT8ueD8P+R7PeahC\n6W69hP/cWf552N/hVgrultzzxE1G9bGi5WxlEAWhg4Vf0YuH5/Nk42Gbh7cOJArD\nguCPIKZ6v0j5oozzWz+AnNfB2ZFVdqronDS6F27grqYn4e5JDpqAH8zIl0KVZO9F\nvvdqB2vI5qvsVSnN1yM5bGtj07S7VaLyb6uG17ZXVasgOp18Y9s=\n=I8ZX\n-----END PGP SIGNATURE-----", "payload": "tree b4a23228cdaa9492eda2f09b3a761952992b11d5\nparent c42d846add941a26bd254911e16f02c4a3f9346f\nauthor xFrednet <xFrednet@gmail.com> 1628284696 +0200\ncommitter xFrednet <xFrednet@gmail.com> 1646239565 +0100\n\nAdded `Expect` lint level and attribute (RFC-2383)\n\n* Also added the `LintExpectationId` which will be used in future commits\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "html_url": "https://github.com/rust-lang/rust/commit/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42d846add941a26bd254911e16f02c4a3f9346f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42d846add941a26bd254911e16f02c4a3f9346f", "html_url": "https://github.com/rust-lang/rust/commit/c42d846add941a26bd254911e16f02c4a3f9346f"}], "stats": {"total": 112, "additions": 107, "deletions": 5}, "files": [{"sha": "bc2c77d9271f49ed79c371e3104b02403183b7b3", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "patch": "@@ -3882,6 +3882,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n+ \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n  \"rustc_span\","}, {"sha": "c380455012d0d430929aa6ab2671c58498d198c3", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "patch": "@@ -75,6 +75,7 @@ fn annotation_type_for_level(level: Level) -> AnnotationType {\n         // FIXME(#59346): Not sure how to map this level\n         Level::FailureNote => AnnotationType::Error,\n         Level::Allow => panic!(\"Should not call with Allow\"),\n+        Level::Expect(_) => panic!(\"Should not call with Expect\"),\n     }\n }\n "}, {"sha": "802f25606010fad16d19cf038e945c2a7517005d", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "patch": "@@ -133,7 +133,11 @@ impl Diagnostic {\n             | Level::Error { .. }\n             | Level::FailureNote => true,\n \n-            Level::Warning | Level::Note | Level::Help | Level::Allow => false,\n+            Level::Warning\n+            | Level::Note\n+            | Level::Help\n+            | Level::Allow\n+            | Level::Expect(_) => false,\n         }\n     }\n "}, {"sha": "41d2b285997385b61bdf8968ebe13def26aecdca", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "patch": "@@ -20,6 +20,7 @@ extern crate tracing;\n \n pub use emitter::ColorConfig;\n \n+use rustc_lint_defs::LintExpectationId;\n use Level::*;\n \n use emitter::{is_case_difference, Emitter, EmitterWriter};\n@@ -677,6 +678,11 @@ impl Handler {\n         DiagnosticBuilder::new(self, Level::Allow, msg)\n     }\n \n+    /// Construct a builder at the `Expect` level with the `msg`.\n+    pub fn struct_expect(&self, msg: &str, id: LintExpectationId) -> DiagnosticBuilder<'_, ()> {\n+        DiagnosticBuilder::new(self, Level::Expect(id), msg)\n+    }\n+\n     /// Construct a builder at the `Error` level at the given `span` and with the `msg`.\n     pub fn struct_span_err(\n         &self,\n@@ -953,7 +959,9 @@ impl HandlerInner {\n \n         (*TRACK_DIAGNOSTICS)(diagnostic);\n \n-        if diagnostic.level == Allow {\n+        if let Level::Expect(_) = diagnostic.level {\n+            return;\n+        } else if diagnostic.level == Allow {\n             return;\n         }\n \n@@ -1250,6 +1258,7 @@ pub enum Level {\n     Help,\n     FailureNote,\n     Allow,\n+    Expect(LintExpectationId),\n }\n \n impl fmt::Display for Level {\n@@ -1275,7 +1284,7 @@ impl Level {\n                 spec.set_fg(Some(Color::Cyan)).set_intense(true);\n             }\n             FailureNote => {}\n-            Allow => unreachable!(),\n+            Allow | Expect(_) => unreachable!(),\n         }\n         spec\n     }\n@@ -1289,6 +1298,7 @@ impl Level {\n             Help => \"help\",\n             FailureNote => \"failure-note\",\n             Allow => panic!(\"Shouldn't call on allowed error\"),\n+            Expect(_) => panic!(\"Shouldn't call on expected error\"),\n         }\n     }\n "}, {"sha": "4b9cf784495fec49cb068149b15aa3c1843bf1d3", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "patch": "@@ -282,6 +282,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(\n         allow, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n     ),\n+    gated!(\n+        expect, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk,\n+        lint_reasons, experimental!(expect)\n+    ),\n     ungated!(\n         forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#), DuplicatesOk\n     ),"}, {"sha": "c34e9f1ba78318fe5a93ea6d2a433ac5f80d4c07", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "patch": "@@ -109,6 +109,7 @@ struct LintGroup {\n     depr: Option<LintAlias>,\n }\n \n+#[derive(Debug)]\n pub enum CheckLintNameResult<'a> {\n     Ok(&'a [LintId]),\n     /// Lint doesn't exist. Potentially contains a suggestion for a correct lint name.\n@@ -377,6 +378,9 @@ impl LintStore {\n                     Level::ForceWarn => \"--force-warn\",\n                     Level::Deny => \"-D\",\n                     Level::Forbid => \"-F\",\n+                    Level::Expect(_) => {\n+                        unreachable!(\"lints with the level of `expect` should not run this code\");\n+                    }\n                 },\n                 lint_name\n             );"}, {"sha": "c37e45b46ce96902a790738d7c24e8e8bd93c284", "filename": "compiler/rustc_lint_defs/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_lint_defs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_lint_defs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2FCargo.toml?ref=9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "patch": "@@ -10,3 +10,4 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_target = { path = \"../rustc_target\" }\n+rustc_index = { path = \"../rustc_index\" }"}, {"sha": "e6643cfd544f130ff3e9fec2c949e5269c399bb9", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "patch": "@@ -1,3 +1,5 @@\n+#![feature(min_specialization)]\n+\n #[macro_use]\n extern crate rustc_macros;\n \n@@ -46,13 +48,60 @@ pub enum Applicability {\n     Unspecified,\n }\n \n+rustc_index::newtype_index! {\n+    /// FIXME: The lint expectation ID is currently a simple copy of the `AttrId`\n+    /// that the expectation originated from. In the future it should be generated\n+    /// by other means. This is for one to keep the IDs independent of each other\n+    /// and also to ensure that it is actually stable between compilation sessions.\n+    /// (The `AttrId` for instance, is not stable).\n+    ///\n+    /// Additionally, it would be nice if this generation could be moved into\n+    /// [`Level::from_symbol`] to have it all contained in one module and to\n+    /// make it simpler to use.\n+    pub struct LintExpectationId {\n+        DEBUG_FORMAT = \"LintExpectationId({})\"\n+    }\n+}\n+\n+rustc_data_structures::impl_stable_hash_via_hash!(LintExpectationId);\n+\n+impl<HCX> ToStableHashKey<HCX> for LintExpectationId {\n+    type KeyType = u32;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &HCX) -> Self::KeyType {\n+        self.as_u32()\n+    }\n+}\n+\n /// Setting for how to handle a lint.\n+///\n+/// See: https://doc.rust-lang.org/rustc/lints/levels.html\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n pub enum Level {\n+    /// The `allow` level will not issue any message.\n     Allow,\n+    /// The `expect` level will suppress the lint message but intern produce a message\n+    /// if the lint wasn't issued in the expected scope. `Expect` should not be used as\n+    /// an initial level for a lint.\n+    ///\n+    /// Note that this still means that the lint is enabled in this position and should\n+    /// be emitted, this will intern fulfill the expectation and suppress the lint.\n+    ///\n+    /// See RFC 2383.\n+    ///\n+    /// The `LintExpectationId` is used to later link a lint emission to the actual\n+    /// expectation. It can be ignored in most cases.\n+    Expect(LintExpectationId),\n+    /// The `warn` level will produce a warning if the lint was violated, however the\n+    /// compiler will continue with its execution.\n     Warn,\n     ForceWarn,\n+    /// The `deny` level will produce an error and stop further execution after the lint\n+    /// pass is complete.\n     Deny,\n+    /// `Forbid` is equivalent to the `deny` level but can't be overwritten like the previous\n+    /// levels.\n     Forbid,\n }\n \n@@ -63,28 +112,31 @@ impl Level {\n     pub fn as_str(self) -> &'static str {\n         match self {\n             Level::Allow => \"allow\",\n+            Level::Expect(_) => \"expect\",\n             Level::Warn => \"warn\",\n             Level::ForceWarn => \"force-warn\",\n             Level::Deny => \"deny\",\n             Level::Forbid => \"forbid\",\n         }\n     }\n \n-    /// Converts a lower-case string to a level.\n+    /// Converts a lower-case string to a level. This will never construct the expect\n+    /// level as that would require a [`LintExpectationId`]\n     pub fn from_str(x: &str) -> Option<Level> {\n         match x {\n             \"allow\" => Some(Level::Allow),\n             \"warn\" => Some(Level::Warn),\n             \"deny\" => Some(Level::Deny),\n             \"forbid\" => Some(Level::Forbid),\n-            _ => None,\n+            \"expect\" | _ => None,\n         }\n     }\n \n     /// Converts a symbol to a level.\n     pub fn from_symbol(x: Symbol) -> Option<Level> {\n         match x {\n             sym::allow => Some(Level::Allow),\n+            sym::expect => Some(Level::Expect(LintExpectationId::from(0u32))),\n             sym::warn => Some(Level::Warn),\n             sym::deny => Some(Level::Deny),\n             sym::forbid => Some(Level::Forbid),"}, {"sha": "5e7fc33953af5bcb505c5f40520f62b967d23831", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "patch": "@@ -225,6 +225,7 @@ pub fn explain_lint_level_source(\n                 Level::Forbid => \"-F\",\n                 Level::Allow => \"-A\",\n                 Level::ForceWarn => \"--force-warn\",\n+                Level::Expect(_) => unreachable!(\"the expect level does not have a commandline flag\"),\n             };\n             let hyphen_case_lint_name = name.replace('_', \"-\");\n             if lint_flag_val.as_str() == name {\n@@ -314,6 +315,16 @@ pub fn struct_lint_level<'s, 'd>(\n                     return;\n                 }\n             }\n+            (Level::Expect(expect_id), _) => {\n+                // This case is special as we actually allow the lint itself in this context, but\n+                // we can't return early like in the case for `Level::Allow` because we still\n+                // need the lint diagnostic to be emitted to `rustc_error::HanderInner`.\n+                //\n+                // We can also not mark the lint expectation as fulfilled here right away, as it\n+                // can still be cancelled in the decorate function. All of this means that we simply\n+                // create a `DiagnosticBuilder` and continue as we would for warnings.\n+                sess.struct_expect(\"\", expect_id)\n+            }\n             (Level::Warn | Level::ForceWarn, Some(span)) => sess.struct_span_warn(span, \"\"),\n             (Level::Warn | Level::ForceWarn, None) => sess.struct_warn(\"\"),\n             (Level::Deny | Level::Forbid, Some(span)) => {\n@@ -346,6 +357,17 @@ pub fn struct_lint_level<'s, 'd>(\n             }\n         }\n \n+        // Lint diagnostics that are covered by the expect level will not be emitted outside\n+        // the compiler. It is therefore not necessary to add any information for the user.\n+        // This will therefore directly call the decorate function which will intern emit\n+        // the `Diagnostic`.\n+        if let Level::Expect(_) = level {\n+            let name = lint.name_lower();\n+            err.code(DiagnosticId::Lint { name, has_future_breakage, is_force_warn: false });\n+            decorate(LintDiagnosticBuilder::new(err));\n+            return;\n+        }\n+\n         explain_lint_level_source(sess, lint, level, src, &mut err);\n \n         let name = lint.name_lower();"}, {"sha": "edc98abca29dcba501fadd217a2c48487121452d", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fef3d9e0a386f8b1e277d4b598e6254c9c0516b/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=9fef3d9e0a386f8b1e277d4b598e6254c9c0516b", "patch": "@@ -331,6 +331,9 @@ impl Session {\n     pub fn struct_allow(&self, msg: &str) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n+    pub fn struct_expect(&self, msg: &str, id: lint::LintExpectationId) -> DiagnosticBuilder<'_, ()> {\n+        self.diagnostic().struct_expect(msg, id)\n+    }\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}]}