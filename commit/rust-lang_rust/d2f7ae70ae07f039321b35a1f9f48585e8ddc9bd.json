{"sha": "d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZjdhZTcwYWUwN2YwMzkzMjFiMzVhMWY5ZjQ4NTg1ZThkZGM5YmQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-04-15T21:32:39Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-04-15T21:32:39Z"}, "message": "Suggest .copied() instead of .cloned() in map_clone when dealing with references", "tree": {"sha": "7e413ca1c0c25c80c611620cdc44490685e0eb9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e413ca1c0c25c80c611620cdc44490685e0eb9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd", "html_url": "https://github.com/rust-lang/rust/commit/d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbb3a47b90b6468ae9cb308c3f49548c78615326", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb3a47b90b6468ae9cb308c3f49548c78615326", "html_url": "https://github.com/rust-lang/rust/commit/fbb3a47b90b6468ae9cb308c3f49548c78615326"}], "stats": {"total": 69, "additions": 43, "deletions": 26}, "files": [{"sha": "27b5a2968b8eaf486c236e6118a7897afbc7d97f", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd", "patch": "@@ -73,14 +73,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         hir::BindingAnnotation::Unannotated, .., name, None\n                     ) = inner.node {\n                         if ident_eq(name, closure_expr) {\n-                            lint(cx, e.span, args[0].span);\n+                            lint(cx, e.span, args[0].span, true);\n                         }\n                     },\n                     hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, .., name, None) => {\n                         match closure_expr.node {\n                             hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner) => {\n                                 if ident_eq(name, inner) && !cx.tables.expr_ty(inner).is_box() {\n-                                    lint(cx, e.span, args[0].span);\n+                                    lint(cx, e.span, args[0].span, true);\n                                 }\n                             },\n                             hir::ExprKind::MethodCall(ref method, _, ref obj) => {\n@@ -89,7 +89,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n                                     let obj_ty = cx.tables.expr_ty(&obj[0]);\n                                     if let ty::Ref(..) = obj_ty.sty {\n-                                        lint(cx, e.span, args[0].span);\n+                                        lint(cx, e.span, args[0].span, false);\n                                     } else {\n                                         lint_needless_cloning(cx, e.span, args[0].span);\n                                     }\n@@ -125,18 +125,33 @@ fn lint_needless_cloning(cx: &LateContext<'_, '_>, root: Span, receiver: Span) {\n     )\n }\n \n-fn lint(cx: &LateContext<'_, '_>, replace: Span, root: Span) {\n+fn lint(cx: &LateContext<'_, '_>, replace: Span, root: Span, copied: bool) {\n     let mut applicability = Applicability::MachineApplicable;\n-    span_lint_and_sugg(\n-        cx,\n-        MAP_CLONE,\n-        replace,\n-        \"You are using an explicit closure for cloning elements\",\n-        \"Consider calling the dedicated `cloned` method\",\n-        format!(\n-            \"{}.cloned()\",\n-            snippet_with_applicability(cx, root, \"..\", &mut applicability)\n-        ),\n-        applicability,\n-    )\n+    if copied {\n+        span_lint_and_sugg(\n+            cx,\n+            MAP_CLONE,\n+            replace,\n+            \"You are using an explicit closure for copying elements\",\n+            \"Consider calling the dedicated `copied` method\",\n+            format!(\n+                \"{}.copied()\",\n+                snippet_with_applicability(cx, root, \"..\", &mut applicability)\n+            ),\n+            applicability,\n+        )\n+    } else {\n+        span_lint_and_sugg(\n+            cx,\n+            MAP_CLONE,\n+            replace,\n+            \"You are using an explicit closure for cloning elements\",\n+            \"Consider calling the dedicated `cloned` method\",\n+            format!(\n+                \"{}.cloned()\",\n+                snippet_with_applicability(cx, root, \"..\", &mut applicability)\n+            ),\n+            applicability,\n+        )\n+    }\n }"}, {"sha": "14d456b14337a5a4716c82b1f4cc747257593e41", "filename": "tests/ui/map_clone.fixed", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd/tests%2Fui%2Fmap_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd/tests%2Fui%2Fmap_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.fixed?ref=d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd", "patch": "@@ -4,11 +4,12 @@\n #![allow(clippy::clone_on_copy)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::redundant_closure)]\n+#![feature(iter_copied)]\n \n fn main() {\n-    let _: Vec<i8> = vec![5_i8; 6].iter().cloned().collect();\n+    let _: Vec<i8> = vec![5_i8; 6].iter().copied().collect();\n     let _: Vec<String> = vec![String::new()].iter().cloned().collect();\n-    let _: Vec<u32> = vec![42, 43].iter().cloned().collect();\n+    let _: Vec<u32> = vec![42, 43].iter().copied().collect();\n     let _: Option<u64> = Some(Box::new(16)).map(|b| *b);\n \n     // Don't lint these"}, {"sha": "a0160662ed4f15e69ae001e35a8146f5fa450ca7", "filename": "tests/ui/map_clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd", "patch": "@@ -4,6 +4,7 @@\n #![allow(clippy::clone_on_copy)]\n #![allow(clippy::missing_docs_in_private_items)]\n #![allow(clippy::redundant_closure)]\n+#![feature(iter_copied)]\n \n fn main() {\n     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();"}, {"sha": "8fe7f05f99f0a42281762a144a1bd130b259d5d8", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=d2f7ae70ae07f039321b35a1f9f48585e8ddc9bd", "patch": "@@ -1,25 +1,25 @@\n-error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:9:22\n+error: You are using an explicit closure for copying elements\n+  --> $DIR/map_clone.rs:10:22\n    |\n LL |     let _: Vec<i8> = vec![5_i8; 6].iter().map(|x| *x).collect();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![5_i8; 6].iter().cloned()`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `vec![5_i8; 6].iter().copied()`\n    |\n    = note: `-D clippy::map-clone` implied by `-D warnings`\n \n error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:10:26\n+  --> $DIR/map_clone.rs:11:26\n    |\n LL |     let _: Vec<String> = vec![String::new()].iter().map(|x| x.clone()).collect();\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![String::new()].iter().cloned()`\n \n-error: You are using an explicit closure for cloning elements\n-  --> $DIR/map_clone.rs:11:23\n+error: You are using an explicit closure for copying elements\n+  --> $DIR/map_clone.rs:12:23\n    |\n LL |     let _: Vec<u32> = vec![42, 43].iter().map(|&x| x).collect();\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `cloned` method: `vec![42, 43].iter().cloned()`\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Consider calling the dedicated `copied` method: `vec![42, 43].iter().copied()`\n \n error: You are needlessly cloning iterator elements\n-  --> $DIR/map_clone.rs:23:29\n+  --> $DIR/map_clone.rs:24:29\n    |\n LL |     let _ = std::env::args().map(|v| v.clone());\n    |                             ^^^^^^^^^^^^^^^^^^^ help: Remove the map call"}]}