{"sha": "c613d26ee2ed801f775af9872062775ab89609ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MTNkMjZlZTJlZDgwMWY3NzVhZjk4NzIwNjI3NzVhYjg5NjA5YWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-01T02:41:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-01T02:41:00Z"}, "message": "Auto merge of #55521 - nrc:rls-fix, r=petrochenkov\n\nsave-analysis: bug fix and optimisation.\n\nThe first commit fixes a bug in name resolution and save-analysis (introduced in #54145) and removes an unused parameter. This fixes the RLS tests, which are currently blocking distribution of the RLS. The second commit removes macro uses from save-analysis data, since these are never used, they just take up space.\n\nr? @petrochenkov", "tree": {"sha": "2e87cf135b4ce6dafc35dc2ef4c12addc89cae1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e87cf135b4ce6dafc35dc2ef4c12addc89cae1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c613d26ee2ed801f775af9872062775ab89609ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c613d26ee2ed801f775af9872062775ab89609ac", "html_url": "https://github.com/rust-lang/rust/commit/c613d26ee2ed801f775af9872062775ab89609ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c613d26ee2ed801f775af9872062775ab89609ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de9666f123e800d5fc34210f23127aa6a5d6e4ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/de9666f123e800d5fc34210f23127aa6a5d6e4ef", "html_url": "https://github.com/rust-lang/rust/commit/de9666f123e800d5fc34210f23127aa6a5d6e4ef"}, {"sha": "435d832c5d86bf2ffff02457e4ae7edbe30cfc34", "url": "https://api.github.com/repos/rust-lang/rust/commits/435d832c5d86bf2ffff02457e4ae7edbe30cfc34", "html_url": "https://github.com/rust-lang/rust/commit/435d832c5d86bf2ffff02457e4ae7edbe30cfc34"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "b6621e0962cf6e384e044a0f59bb42b87c3709b8", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c613d26ee2ed801f775af9872062775ab89609ac/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c613d26ee2ed801f775af9872062775ab89609ac/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c613d26ee2ed801f775af9872062775ab89609ac", "patch": "@@ -1754,7 +1754,6 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         def: Def,\n         p: &Path,\n-        ident: Option<Ident>,\n         param_mode: ParamMode,\n         explicit_owner: Option<NodeId>,\n     ) -> hir::Path {\n@@ -1773,15 +1772,14 @@ impl<'a> LoweringContext<'a> {\n                         explicit_owner,\n                     )\n                 })\n-                .chain(ident.map(|ident| hir::PathSegment::from_ident(ident)))\n                 .collect(),\n             span: p.span,\n         }\n     }\n \n     fn lower_path(&mut self, id: NodeId, p: &Path, param_mode: ParamMode) -> hir::Path {\n         let def = self.expect_full_def(id);\n-        self.lower_path_extra(def, p, None, param_mode, None)\n+        self.lower_path_extra(def, p, param_mode, None)\n     }\n \n     fn lower_path_segment(\n@@ -3014,7 +3012,7 @@ impl<'a> LoweringContext<'a> {\n                     self.with_hir_id_owner(new_node_id, |this| {\n                         let new_id = this.lower_node_id(new_node_id);\n                         let path =\n-                            this.lower_path_extra(def, &path, None, ParamMode::Explicit, None);\n+                            this.lower_path_extra(def, &path, ParamMode::Explicit, None);\n                         let item = hir::ItemKind::Use(P(path), hir::UseKind::Single);\n                         let vis_kind = match vis.node {\n                             hir::VisibilityKind::Public => hir::VisibilityKind::Public,\n@@ -3053,7 +3051,7 @@ impl<'a> LoweringContext<'a> {\n                 }\n \n                 let path =\n-                    P(self.lower_path_extra(ret_def, &path, None, ParamMode::Explicit, None));\n+                    P(self.lower_path_extra(ret_def, &path, ParamMode::Explicit, None));\n                 hir::ItemKind::Use(path, hir::UseKind::Single)\n             }\n             UseTreeKind::Glob => {\n@@ -3140,7 +3138,7 @@ impl<'a> LoweringContext<'a> {\n                 // the stability of `use a::{};`, to avoid it showing up as\n                 // a re-export by accident when `pub`, e.g. in documentation.\n                 let def = self.expect_full_def_from_use(id).next().unwrap_or(Def::Err);\n-                let path = P(self.lower_path_extra(def, &prefix, None, ParamMode::Explicit, None));\n+                let path = P(self.lower_path_extra(def, &prefix, ParamMode::Explicit, None));\n                 *vis = respan(prefix.span.shrink_to_lo(), hir::VisibilityKind::Inherited);\n                 hir::ItemKind::Use(path, hir::UseKind::ListStem)\n             }\n@@ -4550,7 +4548,6 @@ impl<'a> LoweringContext<'a> {\n                     path: P(self.lower_path_extra(\n                         def,\n                         path,\n-                        None,\n                         ParamMode::Explicit,\n                         explicit_owner,\n                     )),"}, {"sha": "094488f3af3cf00ac2b5b0eb5b654fe1e725fe47", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c613d26ee2ed801f775af9872062775ab89609ac/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c613d26ee2ed801f775af9872062775ab89609ac/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c613d26ee2ed801f775af9872062775ab89609ac", "patch": "@@ -3589,7 +3589,17 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         );\n \n         for (i, &Segment { ident, id }) in path.iter().enumerate() {\n-            debug!(\"resolve_path ident {} {:?}\", i, ident);\n+            debug!(\"resolve_path ident {} {:?} {:?}\", i, ident, id);\n+            let record_segment_def = |this: &mut Self, def| {\n+                if record_used {\n+                    if let Some(id) = id {\n+                        if !this.def_map.contains_key(&id) {\n+                            assert!(id != ast::DUMMY_NODE_ID, \"Trying to resolve dummy id\");\n+                            this.record_def(id, PathResolution::new(def));\n+                        }\n+                    }\n+                }\n+            };\n \n             let is_last = i == path.len() - 1;\n             let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };\n@@ -3673,6 +3683,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     // we found a local variable or type param\n                     Some(LexicalScopeBinding::Def(def))\n                             if opt_ns == Some(TypeNS) || opt_ns == Some(ValueNS) => {\n+                        record_segment_def(self, def);\n                         return PathResult::NonModule(PathResolution::with_unresolved_segments(\n                             def, path.len() - 1\n                         ));\n@@ -3690,14 +3701,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     let maybe_assoc = opt_ns != Some(MacroNS) && PathSource::Type.is_expected(def);\n                     if let Some(next_module) = binding.module() {\n                         module = Some(ModuleOrUniformRoot::Module(next_module));\n-                        if record_used {\n-                            if let Some(id) = id {\n-                                if !self.def_map.contains_key(&id) {\n-                                    assert!(id != ast::DUMMY_NODE_ID, \"Trying to resolve dummy id\");\n-                                    self.record_def(id, PathResolution::new(def));\n-                                }\n-                            }\n-                        }\n+                        record_segment_def(self, def);\n                     } else if def == Def::ToolMod && i + 1 != path.len() {\n                         let def = Def::NonMacroAttr(NonMacroAttrKind::Tool);\n                         return PathResult::NonModule(PathResolution::new(def));"}, {"sha": "9bc3fbe7c245a9ef3238439977640aabd963dba7", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c613d26ee2ed801f775af9872062775ab89609ac/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c613d26ee2ed801f775af9872062775ab89609ac/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=c613d26ee2ed801f775af9872062775ab89609ac", "patch": "@@ -92,7 +92,7 @@ pub struct DumpVisitor<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> {\n     // we only write one macro def per unique macro definition, and\n     // one macro use per unique callsite span.\n     // mac_defs: FxHashSet<Span>,\n-    macro_calls: FxHashSet<Span>,\n+    // macro_calls: FxHashSet<Span>,\n }\n \n impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n@@ -108,7 +108,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             span: span_utils,\n             cur_scope: CRATE_NODE_ID,\n             // mac_defs: FxHashSet::default(),\n-            macro_calls: FxHashSet::default(),\n+            // macro_calls: FxHashSet::default(),\n         }\n     }\n \n@@ -771,8 +771,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     }\n \n     fn process_path(&mut self, id: NodeId, path: &'l ast::Path) {\n-        debug!(\"process_path {:?}\", path);\n-        if generated_code(path.span) {\n+        if self.span.filter_generated(path.span) {\n             return;\n         }\n         self.dump_path_ref(id, path);\n@@ -1031,18 +1030,20 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     /// If the span is not macro-generated, do nothing, else use callee and\n     /// callsite spans to record macro definition and use data, using the\n     /// mac_uses and mac_defs sets to prevent multiples.\n-    fn process_macro_use(&mut self, span: Span) {\n-        let source_span = span.source_callsite();\n-        if !self.macro_calls.insert(source_span) {\n-            return;\n-        }\n+    fn process_macro_use(&mut self, _span: Span) {\n+        // FIXME if we're not dumping the defs (see below), there is no point\n+        // dumping refs either.\n+        // let source_span = span.source_callsite();\n+        // if !self.macro_calls.insert(source_span) {\n+        //     return;\n+        // }\n \n-        let data = match self.save_ctxt.get_macro_use_data(span) {\n-            None => return,\n-            Some(data) => data,\n-        };\n+        // let data = match self.save_ctxt.get_macro_use_data(span) {\n+        //     None => return,\n+        //     Some(data) => data,\n+        // };\n \n-        self.dumper.macro_use(data);\n+        // self.dumper.macro_use(data);\n \n         // FIXME write the macro def\n         // let mut hasher = DefaultHasher::new();"}, {"sha": "d2354f38e2685e90c55105952795a3133211034f", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c613d26ee2ed801f775af9872062775ab89609ac/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c613d26ee2ed801f775af9872062775ab89609ac/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=c613d26ee2ed801f775af9872062775ab89609ac", "patch": "@@ -93,7 +93,7 @@ impl<'b, O: DumpOutput + 'b> JsonDumper<O> {\n         self.result.compilation = Some(data);\n     }\n \n-    pub fn macro_use(&mut self, data: MacroRef) {\n+    pub fn _macro_use(&mut self, data: MacroRef) {\n         if self.config.pub_only || self.config.reachable_only {\n             return;\n         }"}]}