{"sha": "7132092ce6e954eb58d490fa886d0865c5cfba38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMzIwOTJjZTZlOTU0ZWI1OGQ0OTBmYTg4NmQwODY1YzVjZmJhMzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-08T18:21:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-08T18:21:51Z"}, "message": "Auto merge of #25187 - alexcrichton:mem-forget-safe, r=brson\n\nThis commit is an implementation of [RFC 1066][rfc] where the conclusion was\r\nthat leaking a value is a safe operation in Rust code, so updating the signature\r\nof this function follows suit.\r\n\r\n[rfc]: https://github.com/rust-lang/rfcs/blob/master/text/1066-safe-mem-forget.md\r\n\r\nCloses #25186", "tree": {"sha": "de59d831b163ce2821212dac4f2ce1c52917a797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de59d831b163ce2821212dac4f2ce1c52917a797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7132092ce6e954eb58d490fa886d0865c5cfba38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7132092ce6e954eb58d490fa886d0865c5cfba38", "html_url": "https://github.com/rust-lang/rust/commit/7132092ce6e954eb58d490fa886d0865c5cfba38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7132092ce6e954eb58d490fa886d0865c5cfba38/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf76e637450a861e94ef583340b8f080379a159a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf76e637450a861e94ef583340b8f080379a159a", "html_url": "https://github.com/rust-lang/rust/commit/cf76e637450a861e94ef583340b8f080379a159a"}, {"sha": "dd59b1fb4c66089c10b7e189975aeb171085312e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd59b1fb4c66089c10b7e189975aeb171085312e", "html_url": "https://github.com/rust-lang/rust/commit/dd59b1fb4c66089c10b7e189975aeb171085312e"}], "stats": {"total": 63, "additions": 49, "deletions": 14}, "files": [{"sha": "66bb84205e21ce72f2c48e3b60437b87e09265c9", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7132092ce6e954eb58d490fa886d0865c5cfba38/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7132092ce6e954eb58d490fa886d0865c5cfba38/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=7132092ce6e954eb58d490fa886d0865c5cfba38", "patch": "@@ -647,7 +647,7 @@ impl<T> Vec<T> {\n             // zero-size types consume no memory, so we can't rely on the\n             // address space running out\n             self.len = self.len.checked_add(1).expect(\"length overflow\");\n-            unsafe { mem::forget(value); }\n+            mem::forget(value);\n             return\n         }\n \n@@ -994,7 +994,7 @@ impl<T> Vec<T> {\n                 num_u: 0,\n                 marker: PhantomData,\n             };\n-            unsafe { mem::forget(vec); }\n+            mem::forget(vec);\n \n             while pv.num_t != 0 {\n                 unsafe {"}, {"sha": "100b7e70591f9c10d749fe53eed7ceefcfb842b1", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7132092ce6e954eb58d490fa886d0865c5cfba38/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7132092ce6e954eb58d490fa886d0865c5cfba38/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=7132092ce6e954eb58d490fa886d0865c5cfba38", "patch": "@@ -232,10 +232,6 @@ extern \"rust-intrinsic\" {\n     pub fn uninit<T>() -> T;\n \n     /// Moves a value out of scope without running drop glue.\n-    ///\n-    /// `forget` is unsafe because the caller is responsible for\n-    /// ensuring the argument is deallocated already.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn forget<T>(_: T) -> ();\n \n     /// Unsafely transforms a value of one type into a value of another type."}, {"sha": "a149af3a44063c44afa1376f589af192ced14c47", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7132092ce6e954eb58d490fa886d0865c5cfba38/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7132092ce6e954eb58d490fa886d0865c5cfba38/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=7132092ce6e954eb58d490fa886d0865c5cfba38", "patch": "@@ -22,15 +22,54 @@ use ptr;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use intrinsics::transmute;\n \n-/// Moves a thing into the void.\n+/// Leaks a value into the void, consuming ownership and never running its\n+/// destructor.\n ///\n-/// The forget function will take ownership of the provided value but neglect\n-/// to run any required cleanup or memory management operations on it.\n+/// This function will take ownership of its argument, but is distinct from the\n+/// `mem::drop` function in that it **does not run the destructor**, leaking the\n+/// value and any resources that it owns.\n ///\n-/// This function is the unsafe version of the `drop` function because it does\n-/// not run any destructors.\n+/// # Safety\n+///\n+/// This function is not marked as `unsafe` as Rust does not guarantee that the\n+/// `Drop` implementation for a value will always run. Note, however, that\n+/// leaking resources such as memory or I/O objects is likely not desired, so\n+/// this function is only recommended for specialized use cases.\n+///\n+/// The safety of this function implies that when writing `unsafe` code\n+/// yourself care must be taken when leveraging a destructor that is required to\n+/// run to preserve memory safety. There are known situations where the\n+/// destructor may not run (such as if ownership of the object with the\n+/// destructor is returned) which must be taken into account.\n+///\n+/// # Other forms of Leakage\n+///\n+/// It's important to point out that this function is not the only method by\n+/// which a value can be leaked in safe Rust code. Other known sources of\n+/// leakage are:\n+///\n+/// * `Rc` and `Arc` cycles\n+/// * `mpsc::{Sender, Receiver}` cycles (they use `Arc` internally)\n+/// * Panicking destructors are likely to leak local resources\n+///\n+/// # Example\n+///\n+/// ```rust,no_run\n+/// use std::mem;\n+/// use std::fs::File;\n+///\n+/// // Leak some heap memory by never deallocating it\n+/// let heap_memory = Box::new(3);\n+/// mem::forget(heap_memory);\n+///\n+/// // Leak an I/O object, never closing the file\n+/// let file = File::open(\"foo.txt\").unwrap();\n+/// mem::forget(file);\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use intrinsics::forget;\n+pub fn forget<T>(t: T) {\n+    unsafe { intrinsics::forget(t) }\n+}\n \n /// Returns the size of a type in bytes.\n ///"}, {"sha": "026380027d29e58f7c01dcc482a48d43f151677e", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7132092ce6e954eb58d490fa886d0865c5cfba38/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7132092ce6e954eb58d490fa886d0865c5cfba38/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=7132092ce6e954eb58d490fa886d0865c5cfba38", "patch": "@@ -31,7 +31,7 @@ impl FileDesc {\n     /// Extracts the actual filedescriptor without closing it.\n     pub fn into_raw(self) -> c_int {\n         let fd = self.fd;\n-        unsafe { mem::forget(self) };\n+        mem::forget(self);\n         fd\n     }\n "}, {"sha": "c835d503388c7c57925a171d4d49337e9fb47d81", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7132092ce6e954eb58d490fa886d0865c5cfba38/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7132092ce6e954eb58d490fa886d0865c5cfba38/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=7132092ce6e954eb58d490fa886d0865c5cfba38", "patch": "@@ -32,7 +32,7 @@ impl Handle {\n \n     pub fn into_raw(self) -> HANDLE {\n         let ret = self.0;\n-        unsafe { mem::forget(self) }\n+        mem::forget(self);\n         return ret;\n     }\n "}]}