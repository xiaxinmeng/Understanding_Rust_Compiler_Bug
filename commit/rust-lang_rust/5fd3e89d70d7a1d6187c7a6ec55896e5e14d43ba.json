{"sha": "5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZDNlODlkNzBkN2ExZDYxODdjN2E2ZWM1NTg5NmU1ZTE0ZDQzYmE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-13T16:03:02Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-31T15:24:53Z"}, "message": "test: support both (`legacy` and `v0`) choices of mangling.", "tree": {"sha": "dc45d279c2947e8c785b130a5c034421ae7aaafb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc45d279c2947e8c785b130a5c034421ae7aaafb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "html_url": "https://github.com/rust-lang/rust/commit/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "408bf9de3459ffbf3b5f8844895d4f0147faad9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/408bf9de3459ffbf3b5f8844895d4f0147faad9a", "html_url": "https://github.com/rust-lang/rust/commit/408bf9de3459ffbf3b5f8844895d4f0147faad9a"}], "stats": {"total": 303, "additions": 245, "deletions": 58}, "files": [{"sha": "307c4e2c1e273b061c987bc20c538996e42c4c68", "filename": "src/test/codegen/drop.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdrop.rs?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -19,15 +19,18 @@ pub fn droppy() {\n // that's one new drop call per call to possibly_unwinding(), and finally 3 drop calls for the\n // regular function exit. We used to have problems with quadratic growths of drop calls in such\n // functions.\n-// CHECK-NOT: invoke{{.*}}drop{{.*}}SomeUniqueName\n-// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n-// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n-// CHECK-NOT: call{{.*}}drop{{.*}}SomeUniqueName\n-// CHECK: invoke{{.*}}drop{{.*}}SomeUniqueName\n-// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n-// CHECK: invoke{{.*}}drop{{.*}}SomeUniqueName\n-// CHECK: call{{.*}}drop{{.*}}SomeUniqueName\n-// CHECK-NOT: {{(call|invoke).*}}drop{{.*}}SomeUniqueName\n+// FIXME(eddyb) the `void @` forces a match on the instruction, instead of the\n+// comment, that's `; call core::ptr::real_drop_in_place::<drop::SomeUniqueName>`\n+// for the `v0` mangling, should switch to matching on that once `legacy` is gone.\n+// CHECK-NOT: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK-NOT: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK: invoke void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK: call void @{{.*}}drop_in_place{{.*}}SomeUniqueName\n+// CHECK-NOT: {{(call|invoke) void @.*}}drop_in_place{{.*}}SomeUniqueName\n // The next line checks for the } that ends the function definition\n // CHECK-LABEL: {{^[}]}}\n     let _s = SomeUniqueName;"}, {"sha": "902882144996fe6ef875ecb938a5446d06d27806", "filename": "src/test/codegen/external-no-mangle-fns.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -33,7 +33,9 @@ const HIDDEN: () = {\n };\n \n // The surrounding item should not accidentally become external\n-// CHECK: define internal{{.*}} void @_ZN22external_no_mangle_fns1x\n+// CHECK-LABEL: ; external_no_mangle_fns::x\n+// CHECK-NEXT: ; Function Attrs:\n+// CHECK-NEXT: define internal\n #[inline(never)]\n fn x() {\n     // CHECK: define void @g()"}, {"sha": "e44373926b76aa45cb952d54f11808fe367fe62d", "filename": "src/test/codegen/external-no-mangle-statics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -75,4 +75,6 @@ fn x() {\n     #[no_mangle]\n     pub static mut P: u8 = 0;\n }\n-// CHECK: define internal void @_ZN26external_no_mangle_statics1x{{.*$}}\n+// CHECK-LABEL: ; external_no_mangle_statics::x\n+// CHECK-NEXT: ; Function Attrs:\n+// CHECK-NEXT: define internal"}, {"sha": "8d9192c6fa0c1fe953a60e1ef03bed6f7795eb4a", "filename": "src/test/codegen/internalize-closures.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Finternalize-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Finternalize-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finternalize-closures.rs?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -4,7 +4,11 @@ pub fn main() {\n \n     // We want to make sure that closures get 'internal' linkage instead of\n     // 'weak_odr' when they are not shared between codegen units\n-    // CHECK: define internal {{.*}}_ZN20internalize_closures4main{{.*}}$u7b$$u7b$closure$u7d$$u7d$\n+    // FIXME(eddyb) `legacy` mangling uses `{{closure}}`, while `v0`\n+    // uses `{closure#0}`, switch to the latter once `legacy` is gone.\n+    // CHECK-LABEL: ; internalize_closures::main::{{.*}}closure\n+    // CHECK-NEXT: ; Function Attrs:\n+    // CHECK-NEXT: define internal\n     let c = |x:i32| { x + 1 };\n     let _ = c(1);\n }"}, {"sha": "de5a237c5f8a357e9f2b9e8ed7127dc1ccafb0bf", "filename": "src/test/codegen/link-dead-code.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Flink-dead-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Flink-dead-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flink-dead-code.rs?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -5,12 +5,18 @@\n // This test makes sure that, when -Clink-dead-code is specified, we generate\n // code for functions that would otherwise be skipped.\n \n-// CHECK-LABEL: define hidden i32 @_ZN14link_dead_code8const_fn\n+// CHECK-LABEL: ; link_dead_code::const_fn\n+// CHECK-NEXT: ; Function Attrs:\n+// CHECK-NEXT: define hidden\n const fn const_fn() -> i32 { 1 }\n \n-// CHECK-LABEL: define hidden i32 @_ZN14link_dead_code9inline_fn\n+// CHECK-LABEL: ; link_dead_code::inline_fn\n+// CHECK-NEXT: ; Function Attrs:\n+// CHECK-NEXT: define hidden\n #[inline]\n fn inline_fn() -> i32 { 2 }\n \n-// CHECK-LABEL: define hidden i32 @_ZN14link_dead_code10private_fn\n+// CHECK-LABEL: ; link_dead_code::private_fn\n+// CHECK-NEXT: ; Function Attrs:\n+// CHECK-NEXT: define hidden\n fn private_fn() -> i32 { 3 }"}, {"sha": "e5430fbf17a1dbc3438be7499e912184c0ad3170", "filename": "src/test/codegen/local-generics-in-exe-internalized.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Flocal-generics-in-exe-internalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Flocal-generics-in-exe-internalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flocal-generics-in-exe-internalized.rs?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -2,7 +2,9 @@\n \n // Check that local generics are internalized if they are in the same CGU\n \n-// CHECK: define internal {{.*}} @_ZN34local_generics_in_exe_internalized3foo{{.*}}\n+// CHECK-LABEL: ; local_generics_in_exe_internalized::foo\n+// CHECK-NEXT: ; Function Attrs:\n+// CHECK-NEXT: define internal\n pub fn foo<T>(x: T, y: T) -> (T, T) {\n     (x, y)\n }"}, {"sha": "523216deb8400936cc8cd331458aae093a810640", "filename": "src/test/codegen/target-cpu-on-functions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -13,7 +13,9 @@ pub extern fn exported() {\n     not_exported();\n }\n \n-// CHECK-LABEL: define {{.*}} @_ZN23target_cpu_on_functions12not_exported{{.*}}() {{.*}} #0\n+// CHECK-LABEL: ; target_cpu_on_functions::not_exported\n+// CHECK-NEXT: ; Function Attrs:\n+// CHECK-NEXT: define {{.*}}() {{.*}} #0\n fn not_exported() {}\n \n // CHECK: attributes #0 = {{.*}} \"target-cpu\"=\"{{.*}}\""}, {"sha": "451af809b22239f5c1fd61fc142f86c401c40b84", "filename": "src/test/run-make-fulldeps/stable-symbol-names/Makefile", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Frun-make-fulldeps%2Fstable-symbol-names%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Frun-make-fulldeps%2Fstable-symbol-names%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fstable-symbol-names%2FMakefile?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -3,14 +3,15 @@\n # The following command will:\n #  1. dump the symbols of a library using `nm`\n #  2. extract only those lines that we are interested in via `grep`\n-#  3. from those lines, extract just the symbol name via `sed`\n-#     (symbol names always start with \"_ZN\" and end with \"E\")\n+#  3. from those lines, extract just the symbol name via `sed`, which:\n+#    * always starts with \"_ZN\" and ends with \"E\" (`legacy` mangling)\n+#    * always starts with \"_R\" (`v0` mangling)\n #  4. sort those symbol names for deterministic comparison\n #  5. write the result into a file\n \n dump-symbols = nm \"$(TMPDIR)/lib$(1).rlib\" \\\n              | grep -E \"$(2)\" \\\n-             | sed \"s/.*\\(_ZN.*E\\).*/\\1/\" \\\n+             | sed -E \"s/.*(_ZN.*E|_R[a-zA-Z0-9_]*).*/\\1/\" \\\n              | sort \\\n              > \"$(TMPDIR)/$(1)$(3).nm\"\n "}, {"sha": "7901866015bf2ffa564a7a4b8e10ddb8961baeb4", "filename": "src/test/run-make-fulldeps/symbol-visibility/Makefile", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -19,6 +19,9 @@ EXE_NAME=an_executable\n COMBINED_CDYLIB_NAME=libcombined_rlib_dylib.dylib\n endif\n \n+# `grep` regex for symbols produced by either `legacy` or `v0` mangling\n+RE_ANY_RUST_SYMBOL=\"_ZN.*h.*E\\|_R[a-zA-Z0-9_]+\"\n+\n all:\n \t$(RUSTC) -Zshare-generics=no an_rlib.rs\n \t$(RUSTC) -Zshare-generics=no a_cdylib.rs\n@@ -31,20 +34,20 @@ all:\n \t# Check that a cdylib exports the public #[no_mangle] functions of dependencies\n \t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n \t# Check that a cdylib DOES NOT export any public Rust functions\n-\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c _ZN.*h.*E)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c $(RE_ANY_RUST_SYMBOL))\" -eq \"0\" ]\n \n \t# Check that a Rust dylib exports its monomorphic functions\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rust_dylib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c _ZN.*public_rust_function_from_rust_dylib.*E)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rust_dylib)\" -eq \"1\" ]\n \t# Check that a Rust dylib does not export generics if -Zshare-generics=no\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c _ZN.*public_generic_function_from_rust_dylib.*E)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rust_dylib)\" -eq \"0\" ]\n \n \n \t# Check that a Rust dylib exports the monomorphic functions from its dependencies\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rlib)\" -eq \"1\" ]\n \t# Check that a Rust dylib does not export generics if -Zshare-generics=no\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c _ZN.*public_generic_function_from_rlib.*E)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rlib)\" -eq \"0\" ]\n \n \t# Check that an executable does not export any dynamic symbols\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_c_function_from_rlib)\" -eq \"0\" ]\n@@ -58,7 +61,7 @@ all:\n \t# Check that a cdylib exports the public #[no_mangle] functions of dependencies\n \t[ \"$$($(NM) $(TMPDIR)/$(COMBINED_CDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n \t# Check that a cdylib DOES NOT export any public Rust functions\n-\t[ \"$$($(NM) $(TMPDIR)/$(COMBINED_CDYLIB_NAME) | grep -c _ZN.*h.*E)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(COMBINED_CDYLIB_NAME) | grep -c $(RE_ANY_RUST_SYMBOL))\" -eq \"0\" ]\n \n \n \t$(RUSTC) -Zshare-generics=yes an_rlib.rs\n@@ -71,17 +74,17 @@ all:\n \t# Check that a cdylib exports the public #[no_mangle] functions of dependencies\n \t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n \t# Check that a cdylib DOES NOT export any public Rust functions\n-\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c _ZN.*h.*E)\" -eq \"0\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(CDYLIB_NAME) | grep -c $(RE_ANY_RUST_SYMBOL))\" -eq \"0\" ]\n \n \t# Check that a Rust dylib exports its monomorphic functions, including generics this time\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rust_dylib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c _ZN.*public_rust_function_from_rust_dylib.*E)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c _ZN.*public_generic_function_from_rust_dylib.*E)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rust_dylib)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rust_dylib)\" -eq \"1\" ]\n \n \t# Check that a Rust dylib exports the monomorphic functions from its dependencies\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_c_function_from_rlib)\" -eq \"1\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_rust_function_from_rlib)\" -eq \"1\" ]\n-\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c _ZN.*public_generic_function_from_rlib.*E)\" -eq \"1\" ]\n+\t[ \"$$($(NM) $(TMPDIR)/$(RDYLIB_NAME) | grep -c public_generic_function_from_rlib)\" -eq \"1\" ]\n \n \t# Check that an executable does not export any dynamic symbols\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_c_function_from_rlib)\" -eq \"0\" ]"}, {"sha": "c73ba293ee25b998ed573b5e2e32a9a612931bec", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -42,6 +42,21 @@ fn expected(fn_name: &str) -> String {\n     format!(\" backtrace::{}\", fn_name)\n }\n \n+fn contains_verbose_expected(s: &str, fn_name: &str) -> bool {\n+    // HACK(eddyb) work around the fact that verbosely demangled stack traces\n+    // (from `RUST_BACKTRACE=full`, or, as is the case here, panic-in-panic)\n+    // may contain symbols with hashes in them, i.e. `backtrace[...]::`.\n+    let prefix = \" backtrace\";\n+    let suffix = &format!(\"::{}\", fn_name);\n+    s.match_indices(prefix).any(|(i, _)| {\n+        s[i + prefix.len()..]\n+            .trim_start_matches('[')\n+            .trim_start_matches(char::is_alphanumeric)\n+            .trim_start_matches(']')\n+            .starts_with(suffix)\n+    })\n+}\n+\n fn runtest(me: &str) {\n     // Make sure that the stack trace is printed\n     let p = template(me).arg(\"fail\").env(\"RUST_BACKTRACE\", \"1\").spawn().unwrap();\n@@ -79,7 +94,7 @@ fn runtest(me: &str) {\n     let s = str::from_utf8(&out.stderr).unwrap();\n     // loosened the following from double::h to double:: due to\n     // spurious failures on mac, 32bit, optimized\n-    assert!(s.contains(\"stack backtrace\") && s.contains(&expected(\"double\")),\n+    assert!(s.contains(\"stack backtrace\") && contains_verbose_expected(s, \"double\"),\n             \"bad output3: {}\", s);\n \n     // Make sure a stack trace isn't printed too many times"}, {"sha": "e26168dcfc48826d503ef8ba70582587cefb697a", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -1,23 +1,23 @@\n error: symbol-name(_ZN5basic4main17hd72940ef9669d526E)\n-  --> $DIR/basic.rs:3:1\n+  --> $DIR/basic.rs:7:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(basic::main::hd72940ef9669d526)\n-  --> $DIR/basic.rs:3:1\n+  --> $DIR/basic.rs:7:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(basic::main)\n-  --> $DIR/basic.rs:3:1\n+  --> $DIR/basic.rs:7:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(main)\n-  --> $DIR/basic.rs:7:1\n+  --> $DIR/basic.rs:14:1\n    |\n LL | #[rustc_def_path]\n    | ^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/symbol-names/basic.stderr"}, {"sha": "aa88184eddfd462b69332a68cdaf588cba37dedb", "filename": "src/test/ui/symbol-names/basic.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -1,9 +1,18 @@\n+// revisions: legacy v0\n+//[legacy]compile-flags: -Z symbol-mangling-version=legacy\n+    //[v0]compile-flags: -Z symbol-mangling-version=v0\n+\n #![feature(rustc_attrs)]\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_ZN5basic4main\n-//~| ERROR demangling(basic::main\n-//~| ERROR demangling-alt(basic::main)\n-#[rustc_def_path] //~ ERROR def-path(main)\n+//[legacy]~^ ERROR symbol-name(_ZN5basic4main\n+//[legacy]~| ERROR demangling(basic::main\n+//[legacy]~| ERROR demangling-alt(basic::main)\n+ //[v0]~^^^^ ERROR symbol-name(_RNvCs4fqI2P2rA04_5basic4main)\n+    //[v0]~| ERROR demangling(basic[317d481089b8c8fe]::main)\n+    //[v0]~| ERROR demangling-alt(basic::main)\n+#[rustc_def_path]\n+//[legacy]~^ ERROR def-path(main)\n+   //[v0]~^^ ERROR def-path(main)\n fn main() {\n }"}, {"sha": "40a39daaedce14978b548fa3a750ff0d114001ab", "filename": "src/test/ui/symbol-names/basic.v0.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -0,0 +1,26 @@\n+error: symbol-name(_RNvCs4fqI2P2rA04_5basic4main)\n+  --> $DIR/basic.rs:7:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(basic[317d481089b8c8fe]::main)\n+  --> $DIR/basic.rs:7:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(basic::main)\n+  --> $DIR/basic.rs:7:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: def-path(main)\n+  --> $DIR/basic.rs:14:1\n+   |\n+LL | #[rustc_def_path]\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "298841aa7c974c86b8468bc4de51f3ce45ff7956", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -1,47 +1,47 @@\n error: symbol-name(_ZN5impl13foo3Foo3bar17he53b9bee7600ed8dE)\n-  --> $DIR/impl1.rs:8:9\n+  --> $DIR/impl1.rs:12:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(impl1::foo::Foo::bar::he53b9bee7600ed8d)\n-  --> $DIR/impl1.rs:8:9\n+  --> $DIR/impl1.rs:12:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(impl1::foo::Foo::bar)\n-  --> $DIR/impl1.rs:8:9\n+  --> $DIR/impl1.rs:12:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(foo::Foo::bar)\n-  --> $DIR/impl1.rs:12:9\n+  --> $DIR/impl1.rs:19:9\n    |\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h86c41f0462d901d4E)\n-  --> $DIR/impl1.rs:21:9\n+  --> $DIR/impl1.rs:30:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling(impl1::bar::<impl impl1::foo::Foo>::baz::h86c41f0462d901d4)\n-  --> $DIR/impl1.rs:21:9\n+  --> $DIR/impl1.rs:30:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(impl1::bar::<impl impl1::foo::Foo>::baz)\n-  --> $DIR/impl1.rs:21:9\n+  --> $DIR/impl1.rs:30:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: def-path(bar::<impl foo::Foo>::baz)\n-  --> $DIR/impl1.rs:25:9\n+  --> $DIR/impl1.rs:37:9\n    |\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/symbol-names/impl1.stderr"}, {"sha": "2b30362e41977d70886e67f1d3425a8da5c99aff", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -1,3 +1,7 @@\n+// revisions: legacy v0\n+//[legacy]compile-flags: -Z symbol-mangling-version=legacy\n+    //[v0]compile-flags: -Z symbol-mangling-version=v0\n+\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n@@ -6,10 +10,15 @@ mod foo {\n \n     impl Foo {\n         #[rustc_symbol_name]\n-        //~^ ERROR symbol-name(_ZN5impl13foo3Foo3bar\n-        //~| ERROR demangling(impl1::foo::Foo::bar\n-        //~| ERROR demangling-alt(impl1::foo::Foo::bar)\n-        #[rustc_def_path] //~ ERROR def-path(foo::Foo::bar)\n+        //[legacy]~^ ERROR symbol-name(_ZN5impl13foo3Foo3bar\n+        //[legacy]~| ERROR demangling(impl1::foo::Foo::bar\n+        //[legacy]~| ERROR demangling-alt(impl1::foo::Foo::bar)\n+         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs4fqI2P2rA04_5impl13fooNtB2_3Foo3bar)\n+            //[v0]~| ERROR demangling(<impl1[317d481089b8c8fe]::foo::Foo>::bar)\n+            //[v0]~| ERROR demangling-alt(<impl1::foo::Foo>::bar)\n+        #[rustc_def_path]\n+        //[legacy]~^ ERROR def-path(foo::Foo::bar)\n+           //[v0]~^^ ERROR def-path(foo::Foo::bar)\n         fn bar() { }\n     }\n }\n@@ -19,10 +28,15 @@ mod bar {\n \n     impl Foo {\n         #[rustc_symbol_name]\n-        //~^ ERROR symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz\n-        //~| ERROR demangling(impl1::bar::<impl impl1::foo::Foo>::baz\n-        //~| ERROR demangling-alt(impl1::bar::<impl impl1::foo::Foo>::baz)\n-        #[rustc_def_path] //~ ERROR def-path(bar::<impl foo::Foo>::baz)\n+        //[legacy]~^ ERROR symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz\n+        //[legacy]~| ERROR demangling(impl1::bar::<impl impl1::foo::Foo>::baz\n+        //[legacy]~| ERROR demangling-alt(impl1::bar::<impl impl1::foo::Foo>::baz)\n+         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs4fqI2P2rA04_5impl13barNtNtB4_3foo3Foo3baz)\n+            //[v0]~| ERROR demangling(<impl1[317d481089b8c8fe]::foo::Foo>::baz)\n+            //[v0]~| ERROR demangling-alt(<impl1::foo::Foo>::baz)\n+        #[rustc_def_path]\n+        //[legacy]~^ ERROR def-path(bar::<impl foo::Foo>::baz)\n+           //[v0]~^^ ERROR def-path(bar::<impl foo::Foo>::baz)\n         fn baz() { }\n     }\n }"}, {"sha": "9f6314a6c29f0b911fdde4f434eef0469b5eb167", "filename": "src/test/ui/symbol-names/impl1.v0.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -0,0 +1,50 @@\n+error: symbol-name(_RNvMNtCs4fqI2P2rA04_5impl13fooNtB2_3Foo3bar)\n+  --> $DIR/impl1.rs:12:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<impl1[317d481089b8c8fe]::foo::Foo>::bar)\n+  --> $DIR/impl1.rs:12:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<impl1::foo::Foo>::bar)\n+  --> $DIR/impl1.rs:12:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: def-path(foo::Foo::bar)\n+  --> $DIR/impl1.rs:19:9\n+   |\n+LL |         #[rustc_def_path]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RNvMNtCs4fqI2P2rA04_5impl13barNtNtB4_3foo3Foo3baz)\n+  --> $DIR/impl1.rs:30:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<impl1[317d481089b8c8fe]::foo::Foo>::baz)\n+  --> $DIR/impl1.rs:30:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<impl1::foo::Foo>::baz)\n+  --> $DIR/impl1.rs:30:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: def-path(bar::<impl foo::Foo>::baz)\n+  --> $DIR/impl1.rs:37:9\n+   |\n+LL |         #[rustc_def_path]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "0bbe424aa025b99574792a4eb2534d081daaabc0", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -0,0 +1,20 @@\n+error: symbol-name(_ZN11issue_609253foo36Foo$LT$issue_60925..llv$6d$..Foo$GT$3foo17h059a991a004536adE)\n+  --> $DIR/issue-60925.rs:21:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(issue_60925::foo::Foo<issue_60925::llv$6d$..Foo$GT$::foo::h059a991a004536ad)\n+  --> $DIR/issue-60925.rs:21:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(issue_60925::foo::Foo<issue_60925::llv$6d$..Foo$GT$::foo)\n+  --> $DIR/issue-60925.rs:21:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "09d68eebb950e77377363f24b46cf4fe7386eb57", "filename": "src/test/ui/symbol-names/issue-60925.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -1,8 +1,13 @@\n+// ignore-tidy-linelength\n+// revisions: legacy v0\n+//[legacy]compile-flags: -Z symbol-mangling-version=legacy\n+    //[v0]compile-flags: -Z symbol-mangling-version=v0\n+\n #![feature(rustc_attrs)]\n \n // This test is the same code as in ui/issue-53912.rs but this test checks that the symbol mangling\n // fix produces the correct result, whereas that test just checks that the reproduction compiles\n-// successfully and doesn't segfault\n+// successfully and doesn't crash LLVM\n \n fn dummy() {}\n \n@@ -14,9 +19,12 @@ mod foo {\n \n     impl Foo<::llvm::Foo> {\n         #[rustc_symbol_name]\n-        //~^ ERROR symbol-name(_ZN11issue_609253foo36Foo$LT$issue_60925..llv$6d$..Foo$GT$3foo\n-        //~| ERROR demangling(issue_60925::foo::Foo<issue_60925::llv$6d$..Foo$GT$::foo\n-        //~| ERROR demangling-alt(issue_60925::foo::Foo<issue_60925::llv$6d$..Foo$GT$::foo)\n+        //[legacy]~^ ERROR symbol-name(_ZN11issue_609253foo36Foo$LT$issue_60925..llv$6d$..Foo$GT$3foo\n+        //[legacy]~| ERROR demangling(issue_60925::foo::Foo<issue_60925::llv$6d$..Foo$GT$::foo\n+        //[legacy]~| ERROR demangling-alt(issue_60925::foo::Foo<issue_60925::llv$6d$..Foo$GT$::foo)\n+         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs4fqI2P2rA04_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n+            //[v0]~| ERROR demangling(<issue_60925[317d481089b8c8fe]::foo::Foo<issue_60925[317d481089b8c8fe]::llvm::Foo>>::foo)\n+            //[v0]~| ERROR demangling-alt(<issue_60925::foo::Foo<issue_60925::llvm::Foo>>::foo)\n         pub(crate) fn foo() {\n             for _ in 0..0 {\n                 for _ in &[::dummy()] {"}, {"sha": "5ead40211d20ddb7a98e4497a8e4244316fdffa4", "filename": "src/test/ui/symbol-names/issue-60925.v0.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr?ref=5fd3e89d70d7a1d6187c7a6ec55896e5e14d43ba", "patch": "@@ -0,0 +1,20 @@\n+error: symbol-name(_RNvMNtCs4fqI2P2rA04_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n+  --> $DIR/issue-60925.rs:21:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<issue_60925[317d481089b8c8fe]::foo::Foo<issue_60925[317d481089b8c8fe]::llvm::Foo>>::foo)\n+  --> $DIR/issue-60925.rs:21:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<issue_60925::foo::Foo<issue_60925::llvm::Foo>>::foo)\n+  --> $DIR/issue-60925.rs:21:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}