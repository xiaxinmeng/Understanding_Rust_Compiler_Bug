{"sha": "0db1f54f89a121de06d76d9a1a3444ec128a7199", "node_id": "C_kwDOAAsO6NoAKDBkYjFmNTRmODlhMTIxZGUwNmQ3NmQ5YTFhMzQ0NGVjMTI4YTcxOTk", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2023-02-11T16:51:04Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2023-04-05T15:59:29Z"}, "message": "Bless tests", "tree": {"sha": "e1377d49fd1f5a2ac8a7d603115f7bfe26ddb1dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1377d49fd1f5a2ac8a7d603115f7bfe26ddb1dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0db1f54f89a121de06d76d9a1a3444ec128a7199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0db1f54f89a121de06d76d9a1a3444ec128a7199", "html_url": "https://github.com/rust-lang/rust/commit/0db1f54f89a121de06d76d9a1a3444ec128a7199", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0db1f54f89a121de06d76d9a1a3444ec128a7199/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d314627aa617637c608bc343477e9a6e7268bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d314627aa617637c608bc343477e9a6e7268bb5", "html_url": "https://github.com/rust-lang/rust/commit/9d314627aa617637c608bc343477e9a6e7268bb5"}], "stats": {"total": 153, "additions": 75, "deletions": 78}, "files": [{"sha": "1d2f99cbe68ea4a0d27a434a0827616ba8387e60", "filename": "tests/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -23,7 +23,7 @@ fn foo(_1: T, _2: i32) -> i32 {\n         StorageLive(_3);                 // scope 0 at $DIR/inline_closure.rs:+1:9: +1:10\n         _3 = [closure@foo::<T>::{closure#0}]; // scope 0 at $DIR/inline_closure.rs:+1:13: +1:24\n                                          // closure\n-                                         // + def_id: DefId(0:6 ~ inline_closure[92ba]::foo::{closure#0})\n+                                         // + def_id: DefId(0:6 ~ inline_closure[8f32]::foo::{closure#0})\n                                          // + substs: [\n                                          //     T,\n                                          //     i8,"}, {"sha": "80274bb7e7ef6c7db963c77ecad2be73881a02be", "filename": "tests/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -26,7 +26,7 @@ fn foo(_1: T, _2: &i32) -> i32 {\n         StorageLive(_3);                 // scope 0 at $DIR/inline_closure_borrows_arg.rs:+1:9: +1:10\n         _3 = [closure@foo::<T>::{closure#0}]; // scope 0 at $DIR/inline_closure_borrows_arg.rs:+1:13: +4:6\n                                          // closure\n-                                         // + def_id: DefId(0:6 ~ inline_closure_borrows_arg[96e9]::foo::{closure#0})\n+                                         // + def_id: DefId(0:6 ~ inline_closure_borrows_arg[f89f]::foo::{closure#0})\n                                          // + substs: [\n                                          //     T,\n                                          //     i8,"}, {"sha": "b36711f82f40e32fe58e31a107735ab35fcee926", "filename": "tests/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -32,7 +32,7 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         _5 = &_1;                        // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n         _3 = [closure@foo::<T>::{closure#0}] { q: move _4, t: move _5 }; // scope 0 at $DIR/inline_closure_captures.rs:+1:13: +1:24\n                                          // closure\n-                                         // + def_id: DefId(0:6 ~ inline_closure_captures[8bc0]::foo::{closure#0})\n+                                         // + def_id: DefId(0:6 ~ inline_closure_captures[63a5]::foo::{closure#0})\n                                          // + substs: [\n                                          //     T,\n                                          //     i8,"}, {"sha": "04de3e61e5ff81f6b148d18fae783ac62bad7dc8", "filename": "tests/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -6,21 +6,18 @@\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n +     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle_generic.rs:9:5: 9:24\n +         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline_cycle_generic.rs:38:9: 38:31\n-+             scope 3 (inlined <A as Call>::call) { // at $DIR/inline_cycle_generic.rs:31:9: 31:28\n-+                 scope 4 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle_generic.rs:23:9: 23:31\n-+                 }\n-+             }\n +         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n-+         _1 = <C as Call>::call() -> bb1; // scope 4 at $DIR/inline_cycle_generic.rs:31:9: 31:28\n++         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline_cycle_generic.rs:31:9: 31:28\n                                            // mir::Constant\n -                                          // + span: $DIR/inline_cycle_generic.rs:9:5: 9:22\n+-                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n +                                          // + span: $DIR/inline_cycle_generic.rs:31:9: 31:26\n-                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n++                                          // + literal: Const { ty: fn() {<A as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "c3ca2d7d42c2b6811e59c2565013dee109c09c49", "filename": "tests/mir-opt/inline/inline_generator.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_generator.main.Inline.diff?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -44,7 +44,7 @@\n -     bb1: {\n +         _4 = [generator@$DIR/inline_generator.rs:15:5: 15:8 (#0)]; // scope 2 at $DIR/inline_generator.rs:15:5: 15:41\n +                                          // generator\n-+                                          // + def_id: DefId(0:7 ~ inline_generator[ea31]::g::{closure#0})\n++                                          // + def_id: DefId(0:7 ~ inline_generator[e37e]::g::{closure#0})\n +                                          // + substs: [\n +                                          //     bool,\n +                                          //     i32,"}, {"sha": "1da3c8bb7977883103f02991ceb86964b3dca868", "filename": "tests/mir-opt/inline/issue_76997_inline_scopes_parenting.main.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_76997_inline_scopes_parenting.main.Inline.after.mir?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -21,7 +21,7 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:9: +1:10\n         _1 = [closure@$DIR/issue_76997_inline_scopes_parenting.rs:5:13: 5:16]; // scope 0 at $DIR/issue_76997_inline_scopes_parenting.rs:+1:13: +1:33\n                                          // closure\n-                                         // + def_id: DefId(0:4 ~ issue_76997_inline_scopes_parenting[bc59]::main::{closure#0})\n+                                         // + def_id: DefId(0:4 ~ issue_76997_inline_scopes_parenting[5cd2]::main::{closure#0})\n                                          // + substs: [\n                                          //     i8,\n                                          //     extern \"rust-call\" fn(((),)),"}, {"sha": "2324f53566c1f5c96cbe5bda480063bd2c0accc6", "filename": "tests/mir-opt/issue_99325.main.built.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Fissue_99325.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Fissue_99325.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_99325.main.built.after.mir?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -1,8 +1,8 @@\n // MIR for `main` after built\n \n | User Type Annotations\n-| 0: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n-| 1: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(UnevaluatedConst { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[8f58]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[8f58]::function_with_bytes::BYTES)) }, substs: [] }) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 0: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[22bb]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 1: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[22bb]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(UnevaluatedConst { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[22bb]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[22bb]::function_with_bytes::BYTES)) }, substs: [] }) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue_99325.rs:+0:15: +0:15"}, {"sha": "2eb2a0980ce22fd92f53c133ce3df5a90b54d52c", "filename": "tests/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -108,7 +108,7 @@ fn main() -> () {\n         StorageLive(_14);                // scope 1 at $DIR/retag.rs:+11:31: +14:6\n         _14 = [closure@main::{closure#0}]; // scope 1 at $DIR/retag.rs:+11:31: +14:6\n                                          // closure\n-                                         // + def_id: DefId(0:14 ~ retag[4622]::main::{closure#0})\n+                                         // + def_id: DefId(0:14 ~ retag[7654]::main::{closure#0})\n                                          // + substs: [\n                                          //     i8,\n                                          //     for<'a> extern \"rust-call\" fn((&'a i32,)) -> &'a i32,"}, {"sha": "ec24527d6c0e5965710a458d3ad876aec96ab515", "filename": "tests/ui/consts/miri_unleashed/tls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -2,13 +2,13 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:11:25\n    |\n LL |     unsafe { let _val = A; }\n-   |                         ^ cannot access thread local static (DefId(0:4 ~ tls[78b0]::A))\n+   |                         ^ cannot access thread local static (DefId(0:4 ~ tls[ca29]::A))\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:18:26\n    |\n LL |     unsafe { let _val = &A; }\n-   |                          ^ cannot access thread local static (DefId(0:4 ~ tls[78b0]::A))\n+   |                          ^ cannot access thread local static (DefId(0:4 ~ tls[ca29]::A))\n \n warning: skipping const checks\n    |"}, {"sha": "429b202f603835edf093bb53229e577816b1f269", "filename": "tests/ui/generator/print/generator-print-verbose-1.drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -10,7 +10,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:38:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[7d1d]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -37,17 +37,17 @@ note: required because it's used within this generator\n    |\n LL |     || {\n    |     ^^\n-note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n+note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[7d1d]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n   --> $DIR/generator-print-verbose-1.rs:44:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[7d1d]::make_non_send_generator2::{opaque#0}), [])`\n   --> $DIR/generator-print-verbose-1.rs:50:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[7d1d]::make_non_send_generator2::{opaque#0}), [])`, `()`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:55:20\n    |"}, {"sha": "01a30fd2f4e99598378b9519ef66ad71e7433df1", "filename": "tests/ui/generator/print/generator-print-verbose-1.drop_tracking_mir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.drop_tracking_mir.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -10,7 +10,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:38:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[7d1d]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n note: required by a bound in `require_send`\n@@ -33,17 +33,17 @@ note: required because it's used within this generator\n    |\n LL |     || {\n    |     ^^\n-note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n+note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[7d1d]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n   --> $DIR/generator-print-verbose-1.rs:44:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[7d1d]::make_non_send_generator2::{opaque#0}), [])`\n   --> $DIR/generator-print-verbose-1.rs:50:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[7d1d]::make_non_send_generator2::{opaque#0}), [])`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:55:20\n    |"}, {"sha": "429b202f603835edf093bb53229e577816b1f269", "filename": "tests/ui/generator/print/generator-print-verbose-1.no_drop_tracking.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.no_drop_tracking.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -10,7 +10,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:38:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[749a]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[7d1d]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -37,17 +37,17 @@ note: required because it's used within this generator\n    |\n LL |     || {\n    |     ^^\n-note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n+note: required because it appears within the type `Opaque(DefId(0:35 ~ generator_print_verbose_1[7d1d]::make_gen2::{opaque#0}), [Arc<RefCell<i32>>])`\n   --> $DIR/generator-print-verbose-1.rs:44:30\n    |\n LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+note: required because it appears within the type `Opaque(DefId(0:36 ~ generator_print_verbose_1[7d1d]::make_non_send_generator2::{opaque#0}), [])`\n   --> $DIR/generator-print-verbose-1.rs:50:34\n    |\n LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+   = note: required because it captures the following types: `Opaque(DefId(0:36 ~ generator_print_verbose_1[7d1d]::make_non_send_generator2::{opaque#0}), [])`, `()`\n note: required because it's used within this generator\n   --> $DIR/generator-print-verbose-1.rs:55:20\n    |"}, {"sha": "59655cfcdae69a4a467ce37cab9421db5b0dfc90", "filename": "tests/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -1,4 +1,4 @@\n-error[E0700]: hidden type for `Opaque(DefId(0:13 ~ impl_trait_captures[1afc]::foo::{opaque#0}), [ReEarlyBound(0, 'a), T, ReEarlyBound(0, 'a)])` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `Opaque(DefId(0:13 ~ impl_trait_captures[aeb9]::foo::{opaque#0}), [ReEarlyBound(0, 'a), T, ReEarlyBound(0, 'a)])` captures lifetime that does not appear in bounds\n   --> $DIR/impl-trait-captures.rs:11:5\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n@@ -8,9 +8,9 @@ LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n LL |     x\n    |     ^\n    |\n-help: to declare that `Opaque(DefId(0:13 ~ impl_trait_captures[1afc]::foo::{opaque#0}), [ReEarlyBound(0, 'a), T, ReEarlyBound(2, 'a)])` captures `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_))` lifetime bound\n+help: to declare that `Opaque(DefId(0:13 ~ impl_trait_captures[aeb9]::foo::{opaque#0}), [ReEarlyBound(0, 'a), T, ReEarlyBound(2, 'a)])` captures `ReFree(DefId(0:8 ~ impl_trait_captures[aeb9]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[aeb9]::foo::'_), '_))`, you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[aeb9]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[aeb9]::foo::'_), '_))` lifetime bound\n    |\n-LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_)) {\n+LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[aeb9]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[aeb9]::foo::'_), '_)) {\n    |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error"}, {"sha": "c1cbefac828d63346070e3b196706b9ff9b3cab2", "filename": "tests/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17he9f658e438f1cac0E)\n+error: symbol-name(_ZN5basic4main17h6fc0c8d27b1a289fE)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::he9f658e438f1cac0)\n+error: demangling(basic::main::h6fc0c8d27b1a289f)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "17c6d0ce704c4d779bad9c0990055645c7afb8ef", "filename": "tests/ui/symbol-names/basic.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fbasic.v0.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvCsCRATE_HASH_5basic4main)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic[b751b4a00e2291d9]::main)\n+error: demangling(basic[a90d658f4748b9d1]::main)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "9c8633742b249c5d72e246d45b4d36594cb60831", "filename": "tests/ui/symbol-names/foreign-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fforeign-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fforeign-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fforeign-types.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RMCsCRATE_HASH_13foreign_typesINtB<REF>_5CheckNvB<REF>_11For\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<foreign_types[49eeeb51f120b431]::Check<foreign_types[49eeeb51f120b431]::ForeignType>>)\n+error: demangling(<foreign_types[fcdd87e190ad88e3]::Check<foreign_types[fcdd87e190ad88e3]::ForeignType>>)\n   --> $DIR/foreign-types.rs:13:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "a7cc5fc8ed211e32f9a41c7cfea8ec49269a843a", "filename": "tests/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvMNtCsCRATE_HASH_5impl13fooNtB<REF>_3Foo3bar)\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<impl1[2c09c4f1c7c8e90c]::foo::Foo>::bar)\n+error: demangling(<impl1[d5591eb39db23cbb]::foo::Foo>::bar)\n   --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -28,7 +28,7 @@ error: symbol-name(_RNvMNtCsCRATE_HASH_5impl13barNtNtB<REF>_3foo3Foo3baz)\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<impl1[2c09c4f1c7c8e90c]::foo::Foo>::baz)\n+error: demangling(<impl1[d5591eb39db23cbb]::foo::Foo>::baz)\n   --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -52,7 +52,7 @@ error: symbol-name(_RNvXNCNvCsCRATE_HASH_5impl14mains_0ARDNtB<REF>_3Foop5AssocFG\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1[2c09c4f1c7c8e90c]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[2c09c4f1c7c8e90c]::AutoTrait; 3usize] as impl1[2c09c4f1c7c8e90c]::main::{closure#1}::Bar>::method)\n+error: demangling(<[&dyn impl1[d5591eb39db23cbb]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[d5591eb39db23cbb]::AutoTrait; 3usize] as impl1[d5591eb39db23cbb]::main::{closure#1}::Bar>::method)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]"}, {"sha": "7dd68e6e3a8e2d2edbe33b04c564c6654653ef5d", "filename": "tests/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h13209029be24b923E)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17hab58a402db4ebf3aE)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h13209029be24b923)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::hab58a402db4ebf3a)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "77449becc84d283e482a0561e9c3078b8820927f", "filename": "tests/ui/symbol-names/issue-60925.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvMNtCsCRATE_HASH_11issue_609253fooINtB<REF>_3FooNtNtB<REF>\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_60925[775bc577f14ef671]::foo::Foo<issue_60925[775bc577f14ef671]::llvm::Foo>>::foo)\n+error: demangling(<issue_60925[294a1bee3c0c9a2f]::foo::Foo<issue_60925[294a1bee3c0c9a2f]::llvm::Foo>>::foo)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "fb742f5e44902f15f4f97f58567386ccb5cdf1d5", "filename": "tests/ui/symbol-names/issue-75326.v0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvXINICsCRATE_HASH_11issue_75326s_0pppEINtB<REF>_3FooppENtB\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_75326[e8e253d78520f2a2]::Foo<_, _> as issue_75326[e8e253d78520f2a2]::Iterator2>::next)\n+error: demangling(<issue_75326[189ebc60e18860d7]::Foo<_, _> as issue_75326[189ebc60e18860d7]::Iterator2>::next)\n   --> $DIR/issue-75326.rs:41:5\n    |\n LL |     #[rustc_symbol_name]"}, {"sha": "84f2bce66be1a545947de5a68fd7e270496edfc1", "filename": "tests/ui/symbol-names/trait-objects.v0.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -4,7 +4,7 @@ error: symbol-name(_RNvXCsCRATE_HASH_13trait_objectsRDG_INtNtNtCsCRATE_HASH_4cor\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[7260a56bea9f357b]::Bar>::method)\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[3c073c57f94bedc2]::Bar>::method)\n   --> $DIR/trait-objects.rs:15:5\n    |\n LL |     #[rustc_symbol_name]\n@@ -22,7 +22,7 @@ error: symbol-name(_RNvXs_CsCRATE_HASH_13trait_objectsRDG_INtNtNtCsCRATE_HASH_4c\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[7260a56bea9f357b]::Foo>::method)\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[3c073c57f94bedc2]::Foo>::method)\n   --> $DIR/trait-objects.rs:27:5\n    |\n LL |     #[rustc_symbol_name]\n@@ -40,7 +40,7 @@ error: symbol-name(_RNvXs0_CsCRATE_HASH_13trait_objectsRDG_INtNtNtCsCRATE_HASH_4\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[7260a56bea9f357b]::Baz>::method)\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[3c073c57f94bedc2]::Baz>::method)\n   --> $DIR/trait-objects.rs:39:5\n    |\n LL |     #[rustc_symbol_name]"}, {"sha": "9d467f73d09702148df6581449364efb7a692bab", "filename": "tests/ui/thir-print/thir-flat.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fthir-print%2Fthir-flat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fthir-print%2Fthir-flat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-flat.stdout?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -1,4 +1,4 @@\n-DefId(0:3 ~ thir_flat[45a6]::main):\n+DefId(0:3 ~ thir_flat[7b97]::main):\n Thir {\n     body_type: Fn(\n         ([]; c_variadic: false)->(),\n@@ -30,7 +30,7 @@ Thir {\n             kind: Scope {\n                 region_scope: Node(2),\n                 lint_level: Explicit(\n-                    HirId(DefId(0:3 ~ thir_flat[45a6]::main).2),\n+                    HirId(DefId(0:3 ~ thir_flat[7b97]::main).2),\n                 ),\n                 value: e0,\n             },"}, {"sha": "eea04c0951d39d5666ff7ce0cb2de673aa662e62", "filename": "tests/ui/thir-print/thir-tree-match.stdout", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fthir-print%2Fthir-tree-match.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fthir-print%2Fthir-tree-match.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-tree-match.stdout?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -1,10 +1,10 @@\n-DefId(0:16 ~ thir_tree_match[3c9a]::has_match):\n+DefId(0:16 ~ thir_tree_match[fcf8]::has_match):\n params: [\n     Param {\n         ty: Foo\n         ty_span: Some($DIR/thir-tree-match.rs:15:19: 15:22 (#0))\n         self_kind: None\n-        hir_id: Some(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).1))\n+        hir_id: Some(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).1))\n         param: Some( \n             Pat: {\n                 ty: Foo\n@@ -14,7 +14,7 @@ params: [\n                         mutability: Not\n                         name: \"foo\"\n                         mode: ByValue\n-                        var: LocalVarId(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).2))\n+                        var: LocalVarId(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).2))\n                         ty: Foo\n                         is_primary: true\n                         subpattern: None\n@@ -41,7 +41,7 @@ body:\n                         kind: \n                             Scope {\n                                 region_scope: Node(26)\n-                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).26))\n+                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).26))\n                                 value:\n                                     Expr {\n                                         ty: bool\n@@ -63,7 +63,7 @@ body:\n                                                         kind: \n                                                             Scope {\n                                                                 region_scope: Node(3)\n-                                                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).3))\n+                                                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).3))\n                                                                 value:\n                                                                     Expr {\n                                                                         ty: bool\n@@ -79,15 +79,15 @@ body:\n                                                                                         kind: \n                                                                                             Scope {\n                                                                                                 region_scope: Node(4)\n-                                                                                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).4))\n+                                                                                                lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).4))\n                                                                                                 value:\n                                                                                                     Expr {\n                                                                                                         ty: Foo\n                                                                                                         temp_lifetime: Some(Node(26))\n                                                                                                         span: $DIR/thir-tree-match.rs:16:11: 16:14 (#0)\n                                                                                                         kind: \n                                                                                                             VarRef {\n-                                                                                                                id: LocalVarId(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).2))\n+                                                                                                                id: LocalVarId(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).2))\n                                                                                                             }\n                                                                                                     }\n                                                                                             }\n@@ -102,10 +102,10 @@ body:\n                                                                                                     Variant {\n                                                                                                         adt_def: \n                                                                                                             AdtDef {\n-                                                                                                                did: DefId(0:10 ~ thir_tree_match[3c9a]::Foo)\n-                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[3c9a]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[3c9a]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[3c9a]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[3c9a])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[3c9a]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[3c9a]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n+                                                                                                                did: DefId(0:10 ~ thir_tree_match[fcf8]::Foo)\n+                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[fcf8]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[fcf8]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[fcf8]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[fcf8])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[fcf8]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[fcf8]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n                                                                                                                 flags: IS_ENUM\n-                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 11573694388057581 }\n+                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 3477539199540094892 }\n                                                                                                         substs: []\n                                                                                                         variant_index: 0\n                                                                                                         subpatterns: [\n@@ -116,10 +116,10 @@ body:\n                                                                                                                     Variant {\n                                                                                                                         adt_def: \n                                                                                                                             AdtDef {\n-                                                                                                                                did: DefId(0:3 ~ thir_tree_match[3c9a]::Bar)\n-                                                                                                                                variants: [VariantDef { def_id: DefId(0:4 ~ thir_tree_match[3c9a]::Bar::First), ctor: Some((Const, DefId(0:5 ~ thir_tree_match[3c9a]::Bar::First::{constructor#0}))), name: \"First\", discr: Relative(0), fields: [], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:6 ~ thir_tree_match[3c9a]::Bar::Second), ctor: Some((Const, DefId(0:7 ~ thir_tree_match[3c9a]::Bar::Second::{constructor#0}))), name: \"Second\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:8 ~ thir_tree_match[3c9a]::Bar::Third), ctor: Some((Const, DefId(0:9 ~ thir_tree_match[3c9a]::Bar::Third::{constructor#0}))), name: \"Third\", discr: Relative(2), fields: [], flags: NO_VARIANT_FLAGS }]\n+                                                                                                                                did: DefId(0:3 ~ thir_tree_match[fcf8]::Bar)\n+                                                                                                                                variants: [VariantDef { def_id: DefId(0:4 ~ thir_tree_match[fcf8]::Bar::First), ctor: Some((Const, DefId(0:5 ~ thir_tree_match[fcf8]::Bar::First::{constructor#0}))), name: \"First\", discr: Relative(0), fields: [], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:6 ~ thir_tree_match[fcf8]::Bar::Second), ctor: Some((Const, DefId(0:7 ~ thir_tree_match[fcf8]::Bar::Second::{constructor#0}))), name: \"Second\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:8 ~ thir_tree_match[fcf8]::Bar::Third), ctor: Some((Const, DefId(0:9 ~ thir_tree_match[fcf8]::Bar::Third::{constructor#0}))), name: \"Third\", discr: Relative(2), fields: [], flags: NO_VARIANT_FLAGS }]\n                                                                                                                                 flags: IS_ENUM\n-                                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 3125160937860410723 }\n+                                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 10333377570083945360 }\n                                                                                                                         substs: []\n                                                                                                                         variant_index: 0\n                                                                                                                         subpatterns: []\n@@ -148,7 +148,7 @@ body:\n                                                                                                                 kind: \n                                                                                                                     Scope {\n                                                                                                                         region_scope: Node(13)\n-                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).13))\n+                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).13))\n                                                                                                                         value:\n                                                                                                                             Expr {\n                                                                                                                                 ty: bool\n@@ -162,7 +162,7 @@ body:\n                                                                                                             }\n                                                                                                     }\n                                                                                             }\n-                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).12))\n+                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).12))\n                                                                                         scope: Node(12)\n                                                                                         span: $DIR/thir-tree-match.rs:17:9: 17:40 (#0)\n                                                                                     }\n@@ -175,10 +175,10 @@ body:\n                                                                                                     Variant {\n                                                                                                         adt_def: \n                                                                                                             AdtDef {\n-                                                                                                                did: DefId(0:10 ~ thir_tree_match[3c9a]::Foo)\n-                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[3c9a]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[3c9a]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[3c9a]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[3c9a])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[3c9a]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[3c9a]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n+                                                                                                                did: DefId(0:10 ~ thir_tree_match[fcf8]::Foo)\n+                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[fcf8]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[fcf8]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[fcf8]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[fcf8])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[fcf8]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[fcf8]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n                                                                                                                 flags: IS_ENUM\n-                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 11573694388057581 }\n+                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 3477539199540094892 }\n                                                                                                         substs: []\n                                                                                                         variant_index: 0\n                                                                                                         subpatterns: [\n@@ -211,7 +211,7 @@ body:\n                                                                                                                 kind: \n                                                                                                                     Scope {\n                                                                                                                         region_scope: Node(19)\n-                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).19))\n+                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).19))\n                                                                                                                         value:\n                                                                                                                             Expr {\n                                                                                                                                 ty: bool\n@@ -225,7 +225,7 @@ body:\n                                                                                                             }\n                                                                                                     }\n                                                                                             }\n-                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).18))\n+                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).18))\n                                                                                         scope: Node(18)\n                                                                                         span: $DIR/thir-tree-match.rs:18:9: 18:32 (#0)\n                                                                                     }\n@@ -238,10 +238,10 @@ body:\n                                                                                                     Variant {\n                                                                                                         adt_def: \n                                                                                                             AdtDef {\n-                                                                                                                did: DefId(0:10 ~ thir_tree_match[3c9a]::Foo)\n-                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[3c9a]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[3c9a]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[3c9a]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[3c9a])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[3c9a]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[3c9a]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n+                                                                                                                did: DefId(0:10 ~ thir_tree_match[fcf8]::Foo)\n+                                                                                                                variants: [VariantDef { def_id: DefId(0:11 ~ thir_tree_match[fcf8]::Foo::FooOne), ctor: Some((Fn, DefId(0:12 ~ thir_tree_match[fcf8]::Foo::FooOne::{constructor#0}))), name: \"FooOne\", discr: Relative(0), fields: [FieldDef { did: DefId(0:13 ~ thir_tree_match[fcf8]::Foo::FooOne::0), name: \"0\", vis: Restricted(DefId(0:0 ~ thir_tree_match[fcf8])) }], flags: NO_VARIANT_FLAGS }, VariantDef { def_id: DefId(0:14 ~ thir_tree_match[fcf8]::Foo::FooTwo), ctor: Some((Const, DefId(0:15 ~ thir_tree_match[fcf8]::Foo::FooTwo::{constructor#0}))), name: \"FooTwo\", discr: Relative(1), fields: [], flags: NO_VARIANT_FLAGS }]\n                                                                                                                 flags: IS_ENUM\n-                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 11573694388057581 }\n+                                                                                                                repr: ReprOptions { int: None, align: None, pack: None, flags: (empty), field_shuffle_seed: 3477539199540094892 }\n                                                                                                         substs: []\n                                                                                                         variant_index: 1\n                                                                                                         subpatterns: []\n@@ -266,7 +266,7 @@ body:\n                                                                                                                 kind: \n                                                                                                                     Scope {\n                                                                                                                         region_scope: Node(24)\n-                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).24))\n+                                                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).24))\n                                                                                                                         value:\n                                                                                                                             Expr {\n                                                                                                                                 ty: bool\n@@ -280,7 +280,7 @@ body:\n                                                                                                             }\n                                                                                                     }\n                                                                                             }\n-                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[3c9a]::has_match).23))\n+                                                                                        lint_level: Explicit(HirId(DefId(0:16 ~ thir_tree_match[fcf8]::has_match).23))\n                                                                                         scope: Node(23)\n                                                                                         span: $DIR/thir-tree-match.rs:19:9: 19:28 (#0)\n                                                                                     }\n@@ -297,7 +297,7 @@ body:\n     }\n \n \n-DefId(0:17 ~ thir_tree_match[3c9a]::main):\n+DefId(0:17 ~ thir_tree_match[fcf8]::main):\n params: [\n ]\n body:\n@@ -317,7 +317,7 @@ body:\n                         kind: \n                             Scope {\n                                 region_scope: Node(2)\n-                                lint_level: Explicit(HirId(DefId(0:17 ~ thir_tree_match[3c9a]::main).2))\n+                                lint_level: Explicit(HirId(DefId(0:17 ~ thir_tree_match[fcf8]::main).2))\n                                 value:\n                                     Expr {\n                                         ty: ()"}, {"sha": "1b478dbef993fcb27afbd8636d2c91320415ea4b", "filename": "tests/ui/thir-print/thir-tree.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fthir-print%2Fthir-tree.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fthir-print%2Fthir-tree.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthir-print%2Fthir-tree.stdout?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -1,4 +1,4 @@\n-DefId(0:3 ~ thir_tree[8f1d]::main):\n+DefId(0:3 ~ thir_tree[7aaa]::main):\n params: [\n ]\n body:\n@@ -18,7 +18,7 @@ body:\n                         kind: \n                             Scope {\n                                 region_scope: Node(2)\n-                                lint_level: Explicit(HirId(DefId(0:3 ~ thir_tree[8f1d]::main).2))\n+                                lint_level: Explicit(HirId(DefId(0:3 ~ thir_tree[7aaa]::main).2))\n                                 value:\n                                     Expr {\n                                         ty: ()"}, {"sha": "ce409f627be208354eaaa8850f0504bac5e86cc8", "filename": "tests/ui/where-clauses/higher-ranked-fn-type.verbose.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0db1f54f89a121de06d76d9a1a3444ec128a7199/tests%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.verbose.stderr?ref=0db1f54f89a121de06d76d9a1a3444ec128a7199", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `for<Region(BrNamed(DefId(0:6 ~ higher_ranked_fn_type[1209]::called::'b), 'b))> fn(&ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:6 ~ higher_ranked_fn_type[1209]::called::'b), 'b) }) ()): Foo` is not satisfied\n+error[E0277]: the trait bound `for<Region(BrNamed(DefId(0:6 ~ higher_ranked_fn_type[9e51]::called::'b), 'b))> fn(&ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:6 ~ higher_ranked_fn_type[9e51]::called::'b), 'b) }) ()): Foo` is not satisfied\n   --> $DIR/higher-ranked-fn-type.rs:20:5\n    |\n LL |     called()\n-   |     ^^^^^^ the trait `for<Region(BrNamed(DefId(0:6 ~ higher_ranked_fn_type[1209]::called::'b), 'b))> Foo` is not implemented for `fn(&ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:6 ~ higher_ranked_fn_type[1209]::called::'b), 'b) }) ())`\n+   |     ^^^^^^ the trait `for<Region(BrNamed(DefId(0:6 ~ higher_ranked_fn_type[9e51]::called::'b), 'b))> Foo` is not implemented for `fn(&ReLateBound(DebruijnIndex(1), BoundRegion { var: 0, kind: BrNamed(DefId(0:6 ~ higher_ranked_fn_type[9e51]::called::'b), 'b) }) ())`\n    |\n note: required by a bound in `called`\n   --> $DIR/higher-ranked-fn-type.rs:12:25"}]}