{"sha": "9782b373b381906c57967b2854a3164de95ea88a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ODJiMzczYjM4MTkwNmM1Nzk2N2IyODU0YTMxNjRkZTk1ZWE4OGE=", "commit": {"author": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-28T14:37:33Z"}, "committer": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-29T08:05:10Z"}, "message": "implementing Debug for UnsupportedInfo", "tree": {"sha": "ded6e5ccd850af9f5d80657246a6775bfb928853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded6e5ccd850af9f5d80657246a6775bfb928853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9782b373b381906c57967b2854a3164de95ea88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9782b373b381906c57967b2854a3164de95ea88a", "html_url": "https://github.com/rust-lang/rust/commit/9782b373b381906c57967b2854a3164de95ea88a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9782b373b381906c57967b2854a3164de95ea88a/comments", "author": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa3d40cd7189b324afd20fbe3baffe76ea1a67a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa3d40cd7189b324afd20fbe3baffe76ea1a67a1", "html_url": "https://github.com/rust-lang/rust/commit/aa3d40cd7189b324afd20fbe3baffe76ea1a67a1"}], "stats": {"total": 207, "additions": 108, "deletions": 99}, "files": [{"sha": "e519a83c026678801c9abe080dca210b89307c7e", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 108, "deletions": 99, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/9782b373b381906c57967b2854a3164de95ea88a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9782b373b381906c57967b2854a3164de95ea88a/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=9782b373b381906c57967b2854a3164de95ea88a", "patch": "@@ -425,171 +425,180 @@ pub enum UnsupportedInfo<'tcx> {\n     PathNotFound(Vec<String>),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum ResourceExhaustionInfo {\n-    StackFrameLimitReached,\n-    InfiniteLoop,\n-}\n-\n-impl fmt::Debug for ResourceExhaustionInfo {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use ResourceExhaustionInfo::*;\n-        match self {\n-            StackFrameLimitReached =>\n-                write!(f, \"reached the configured maximum number of stack frames\"),\n-            InfiniteLoop =>\n-                write!(f, \"duplicate interpreter state observed here, const evaluation will never \\\n-                    terminate\"),\n-        }\n-    }\n-}\n-\n-#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum InterpError<'tcx> {\n-    /// The program panicked.\n-    Panic(PanicMessage<u64>),\n-    /// The program caused undefined behavior.\n-    UndefinedBehaviour(UndefinedBehaviourInfo),\n-    /// The program did something the interpreter does not support (some of these *might* be UB\n-    /// but the interpreter is not sure).\n-    Unsupported(UnsupportedInfo<'tcx>),\n-    /// The program was invalid (ill-typed, not sufficiently monomorphized, ...).\n-    InvalidProgram(InvalidProgramInfo<'tcx>),\n-    /// The program exhausted the interpreter's resources (stack/heap too big,\n-    /// execution takes too long, ..).\n-    ResourceExhaustion(ResourceExhaustionInfo),\n-    /// Not actually an interpreter error -- used to signal that execution has exited\n-    /// with the given status code.  Used by Miri, but not by CTFE.\n-    Exit(i32),\n-}\n-\n-pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n-\n-impl fmt::Display for InterpError<'_> {\n+impl fmt::Debug for UnsupportedInfo<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        // Forward `Display` to `Debug`\n-        write!(f, \"{:?}\", self)\n-    }\n-}\n-\n-impl fmt::Debug for InterpError<'_> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        use InterpError::*;\n         use UnsupportedInfo::*;\n-        match *self {\n-            Unsupported(PointerOutOfBounds { ptr, msg, allocation_size }) => {\n+        match self {\n+            PointerOutOfBounds { ptr, msg, allocation_size } => {\n                 write!(f, \"{} failed: pointer must be in-bounds at offset {}, \\\n                           but is outside bounds of allocation {} which has size {}\",\n                     msg, ptr.offset.bytes(), ptr.alloc_id, allocation_size.bytes())\n             },\n-            Unsupported(ValidationFailure(ref err)) => {\n+            ValidationFailure(ref err) => {\n                 write!(f, \"type validation failed: {}\", err)\n             }\n-            Unsupported(NoMirFor(ref func)) => write!(f, \"no mir for `{}`\", func),\n-            Unsupported(FunctionAbiMismatch(caller_abi, callee_abi)) =>\n+            NoMirFor(ref func) => write!(f, \"no mir for `{}`\", func),\n+            FunctionAbiMismatch(caller_abi, callee_abi) =>\n                 write!(f, \"tried to call a function with ABI {:?} using caller ABI {:?}\",\n                     callee_abi, caller_abi),\n-            Unsupported(FunctionArgMismatch(caller_ty, callee_ty)) =>\n+            FunctionArgMismatch(caller_ty, callee_ty) =>\n                 write!(f, \"tried to call a function with argument of type {:?} \\\n                            passing data of type {:?}\",\n                     callee_ty, caller_ty),\n-            Unsupported(FunctionRetMismatch(caller_ty, callee_ty)) =>\n+            FunctionRetMismatch(caller_ty, callee_ty) =>\n                 write!(f, \"tried to call a function with return type {:?} \\\n                            passing return place of type {:?}\",\n                     callee_ty, caller_ty),\n-            Unsupported(FunctionArgCountMismatch) =>\n+            FunctionArgCountMismatch =>\n                 write!(f, \"tried to call a function with incorrect number of arguments\"),\n-            Unsupported(ReallocatedWrongMemoryKind(ref old, ref new)) =>\n+            ReallocatedWrongMemoryKind(ref old, ref new) =>\n                 write!(f, \"tried to reallocate memory from {} to {}\", old, new),\n-            Unsupported(DeallocatedWrongMemoryKind(ref old, ref new)) =>\n+            DeallocatedWrongMemoryKind(ref old, ref new) =>\n                 write!(f, \"tried to deallocate {} memory but gave {} as the kind\", old, new),\n-            Unsupported(InvalidChar(c)) =>\n+            InvalidChar(c) =>\n                 write!(f, \"tried to interpret an invalid 32-bit value as a char: {}\", c),\n-            Unsupported(AlignmentCheckFailed { required, has }) =>\n+            AlignmentCheckFailed { required, has } =>\n                write!(f, \"tried to access memory with alignment {}, but alignment {} is required\",\n                       has.bytes(), required.bytes()),\n-            Unsupported(TypeNotPrimitive(ty)) =>\n+            TypeNotPrimitive(ty) =>\n                 write!(f, \"expected primitive type, got {}\", ty),\n-            Unsupported(PathNotFound(ref path)) =>\n+            PathNotFound(ref path) =>\n                 write!(f, \"Cannot find path {:?}\", path),\n-            Unsupported(IncorrectAllocationInformation(size, size2, align, align2)) =>\n+            IncorrectAllocationInformation(size, size2, align, align2) =>\n                 write!(f, \"incorrect alloc info: expected size {} and align {}, \\\n                            got size {} and align {}\",\n                     size.bytes(), align.bytes(), size2.bytes(), align2.bytes()),\n-            Unsupported(InvalidDiscriminant(val)) =>\n+            InvalidDiscriminant(val) =>\n                 write!(f, \"encountered invalid enum discriminant {}\", val),\n-            Unsupported(InvalidMemoryAccess) =>\n+            InvalidMemoryAccess =>\n                 write!(f, \"tried to access memory through an invalid pointer\"),\n-            Unsupported(DanglingPointerDeref) =>\n+            DanglingPointerDeref =>\n                 write!(f, \"dangling pointer was dereferenced\"),\n-            Unsupported(DoubleFree) =>\n+            DoubleFree =>\n                 write!(f, \"tried to deallocate dangling pointer\"),\n-            Unsupported(InvalidFunctionPointer) =>\n+            InvalidFunctionPointer =>\n                 write!(f, \"tried to use a function pointer after offsetting it\"),\n-            Unsupported(InvalidBool) =>\n+            InvalidBool =>\n                 write!(f, \"invalid boolean value read\"),\n-            Unsupported(InvalidNullPointerUsage) =>\n+            InvalidNullPointerUsage =>\n                 write!(f, \"invalid use of NULL pointer\"),\n-            Unsupported(ReadPointerAsBytes) =>\n+            ReadPointerAsBytes =>\n                 write!(f, \"a raw memory access tried to access part of a pointer value as raw \\\n                     bytes\"),\n-            Unsupported(ReadBytesAsPointer) =>\n+            ReadBytesAsPointer =>\n                 write!(f, \"a memory access tried to interpret some bytes as a pointer\"),\n-            Unsupported(ReadForeignStatic) =>\n+            ReadForeignStatic =>\n                 write!(f, \"tried to read from foreign (extern) static\"),\n-            Unsupported(InvalidPointerMath) =>\n+            InvalidPointerMath =>\n                 write!(f, \"attempted to do invalid arithmetic on pointers that would leak base \\\n                     addresses, e.g., comparing pointers into different allocations\"),\n-            Unsupported(DeadLocal) =>\n+            DeadLocal =>\n                 write!(f, \"tried to access a dead local variable\"),\n-            Unsupported(DerefFunctionPointer) =>\n+            DerefFunctionPointer =>\n                 write!(f, \"tried to dereference a function pointer\"),\n-            Unsupported(ExecuteMemory) =>\n+            ExecuteMemory =>\n                 write!(f, \"tried to treat a memory pointer as a function pointer\"),\n-            Unsupported(OutOfTls) =>\n+            OutOfTls =>\n                 write!(f, \"reached the maximum number of representable TLS keys\"),\n-            Unsupported(TlsOutOfBounds) =>\n+            TlsOutOfBounds =>\n                 write!(f, \"accessed an invalid (unallocated) TLS key\"),\n-            Unsupported(CalledClosureAsFunction) =>\n+            CalledClosureAsFunction =>\n                 write!(f, \"tried to call a closure through a function pointer\"),\n-            Unsupported(VtableForArgumentlessMethod) =>\n+            VtableForArgumentlessMethod =>\n                 write!(f, \"tried to call a vtable function without arguments\"),\n-            Unsupported(ModifiedConstantMemory) =>\n+            ModifiedConstantMemory =>\n                 write!(f, \"tried to modify constant memory\"),\n-            Unsupported(ModifiedStatic) =>\n+            ModifiedStatic =>\n                 write!(f, \"tried to modify a static's initial value from another static's \\\n                     initializer\"),\n-            Unsupported(AssumptionNotHeld) =>\n+            AssumptionNotHeld =>\n                 write!(f, \"`assume` argument was false\"),\n-            Unsupported(InlineAsm) =>\n+            InlineAsm =>\n                 write!(f, \"miri does not support inline assembly\"),\n-            Unsupported(ReallocateNonBasePtr) =>\n+            ReallocateNonBasePtr =>\n                 write!(f, \"tried to reallocate with a pointer not to the beginning of an \\\n                     existing object\"),\n-            Unsupported(DeallocateNonBasePtr) =>\n+            DeallocateNonBasePtr =>\n                 write!(f, \"tried to deallocate with a pointer not to the beginning of an \\\n                     existing object\"),\n-            Unsupported(HeapAllocZeroBytes) =>\n+            HeapAllocZeroBytes =>\n                 write!(f, \"tried to re-, de- or allocate zero bytes on the heap\"),\n-            Unsupported(ReadFromReturnPointer) =>\n+            ReadFromReturnPointer =>\n                 write!(f, \"tried to read from the return pointer\"),\n-            Unsupported(UnimplementedTraitSelection) =>\n+            UnimplementedTraitSelection =>\n                 write!(f, \"there were unresolved type arguments during trait selection\"),\n-            Unsupported(InvalidBoolOp(_)) =>\n+            InvalidBoolOp(_) =>\n                 write!(f, \"invalid boolean operation\"),\n-            Unsupported(UnterminatedCString(_)) =>\n+            UnterminatedCString(_) =>\n                 write!(f, \"attempted to get length of a null terminated string, but no null \\\n                     found before end of allocation\"),\n-            Unsupported(ReadUndefBytes(_)) =>\n+            ReadUndefBytes(_) =>\n                 write!(f, \"attempted to read undefined bytes\"),\n-            Unsupported(HeapAllocNonPowerOfTwoAlignment(_)) =>\n+            HeapAllocNonPowerOfTwoAlignment(_) =>\n                 write!(f, \"tried to re-, de-, or allocate heap memory with alignment that is \\\n                     not a power of two\"),\n-            Unsupported(MachineError(ref msg)) |\n-            Unsupported(Unimplemented(ref msg)) |\n-            Unsupported(AbiViolation(ref msg)) |\n-            Unsupported(Intrinsic(ref msg)) =>\n+            MachineError(ref msg) |\n+            Unimplemented(ref msg) |\n+            AbiViolation(ref msg) |\n+            Intrinsic(ref msg) =>\n                 write!(f, \"{}\", msg),\n+        }\n+    }\n+}\n+\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum ResourceExhaustionInfo {\n+    StackFrameLimitReached,\n+    InfiniteLoop,\n+}\n+\n+impl fmt::Debug for ResourceExhaustionInfo {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use ResourceExhaustionInfo::*;\n+        match self {\n+            StackFrameLimitReached =>\n+                write!(f, \"reached the configured maximum number of stack frames\"),\n+            InfiniteLoop =>\n+                write!(f, \"duplicate interpreter state observed here, const evaluation will never \\\n+                    terminate\"),\n+        }\n+    }\n+}\n+\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum InterpError<'tcx> {\n+    /// The program panicked.\n+    Panic(PanicMessage<u64>),\n+    /// The program caused undefined behavior.\n+    UndefinedBehaviour(UndefinedBehaviourInfo),\n+    /// The program did something the interpreter does not support (some of these *might* be UB\n+    /// but the interpreter is not sure).\n+    Unsupported(UnsupportedInfo<'tcx>),\n+    /// The program was invalid (ill-typed, not sufficiently monomorphized, ...).\n+    InvalidProgram(InvalidProgramInfo<'tcx>),\n+    /// The program exhausted the interpreter's resources (stack/heap too big,\n+    /// execution takes too long, ..).\n+    ResourceExhaustion(ResourceExhaustionInfo),\n+    /// Not actually an interpreter error -- used to signal that execution has exited\n+    /// with the given status code.  Used by Miri, but not by CTFE.\n+    Exit(i32),\n+}\n+\n+pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n+\n+impl fmt::Display for InterpError<'_> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // Forward `Display` to `Debug`\n+        write!(f, \"{:?}\", self)\n+    }\n+}\n+\n+impl fmt::Debug for InterpError<'_> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use InterpError::*;\n+        match *self {\n+            Unsupported(ref msg) =>\n+                write!(f, \"{:?}\", msg),\n             InvalidProgram(ref msg) =>\n                 write!(f, \"{:?}\", msg),\n             UndefinedBehaviour(ref msg) =>"}]}