{"sha": "fee4f8feb04385e743c55d61682176ae95f235ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZTRmOGZlYjA0Mzg1ZTc0M2M1NWQ2MTY4MjE3NmFlOTVmMjM1Y2U=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-30T03:09:29Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-10-30T03:09:29Z"}, "message": "Improve wording of `core::ptr::drop_in_place` docs\n\nAnd two small intra-doc link conversions in `std::{f32, f64}`.", "tree": {"sha": "40f93a2693febab48fc809add07e84e97ad332ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40f93a2693febab48fc809add07e84e97ad332ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fee4f8feb04385e743c55d61682176ae95f235ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fee4f8feb04385e743c55d61682176ae95f235ce", "html_url": "https://github.com/rust-lang/rust/commit/fee4f8feb04385e743c55d61682176ae95f235ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fee4f8feb04385e743c55d61682176ae95f235ce/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3d7a5e94507e3d6618790187bd85250ced82c4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d7a5e94507e3d6618790187bd85250ced82c4f", "html_url": "https://github.com/rust-lang/rust/commit/a3d7a5e94507e3d6618790187bd85250ced82c4f"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "9de2758767e3ea8406c266f76b833eaf47e18576", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fee4f8feb04385e743c55d61682176ae95f235ce/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee4f8feb04385e743c55d61682176ae95f235ce/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=fee4f8feb04385e743c55d61682176ae95f235ce", "patch": "@@ -99,9 +99,9 @@ mod mut_ptr;\n ///   dropped normally.\n ///\n /// * It is friendlier to the optimizer to do this over [`ptr::read`] when\n-///   dropping manually allocated memory (e.g., when writing Box/Rc/Vec),\n-///   as the compiler doesn't need to prove that it's sound to elide the\n-///   copy.\n+///   dropping manually allocated memory (e.g., in the implementations of\n+///   `Box`/`Rc`/`Vec`), as the compiler doesn't need to prove that it's\n+///   sound to elide the copy.\n ///\n /// * It can be used to drop [pinned] data when `T` is not `repr(packed)`\n ///   (pinned data must not be moved before it is dropped)."}, {"sha": "db6255de906347d9636481f0715df877949d24a6", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fee4f8feb04385e743c55d61682176ae95f235ce/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee4f8feb04385e743c55d61682176ae95f235ce/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=fee4f8feb04385e743c55d61682176ae95f235ce", "patch": "@@ -1,7 +1,7 @@\n //! This module provides constants which are specific to the implementation\n //! of the `f32` floating point data type.\n //!\n-//! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n+//! *[See also the `f32` primitive type](primitive@f32).*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!"}, {"sha": "2c25ed9ead9aac9c2553a588c1d3f88ba366d4ea", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fee4f8feb04385e743c55d61682176ae95f235ce/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee4f8feb04385e743c55d61682176ae95f235ce/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=fee4f8feb04385e743c55d61682176ae95f235ce", "patch": "@@ -1,7 +1,7 @@\n //! This module provides constants which are specific to the implementation\n //! of the `f64` floating point data type.\n //!\n-//! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n+//! *[See also the `f64` primitive type](primitive@f64).*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!"}]}