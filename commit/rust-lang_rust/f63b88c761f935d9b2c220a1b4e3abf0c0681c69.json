{"sha": "f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2M2I4OGM3NjFmOTM1ZDliMmMyMjBhMWI0ZTNhYmYwYzA2ODFjNjk=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-02-16T00:04:20Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-03-04T21:43:13Z"}, "message": "Permit attributes on 'if' expressions\n\nPreviously, attributes on 'if' expressions (e.g. #[attr] if true {})\nwere disallowed during parsing. This made it impossible for macros to\nperform any custom handling of such attributes (e.g. stripping them\naway), since a compilation error would be emitted before they ever had a\nchance to run.\n\nThis PR permits attributes on 'if' expressions ('if-attrs' from here on).\nBoth built-in attributes (e.g. `#[allow]`, `#[cfg]`) are supported.\n\nWe still do *not* accept attributes on 'other parts' of an if-else\nchain. That is, the following code snippet still fails to parse:\n\n```rust\nif true {} #[attr] else if false {} else #[attr] if false {} #[attr]\nelse {}\n```", "tree": {"sha": "d02b16b4610ac00c024fa8a6620183f9465f4088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d02b16b4610ac00c024fa8a6620183f9465f4088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl5gIPEACgkQtAh+UQ6Y\nsWSmbhAArHjwIc3sKcWzeeXQLFpn9KHWP28hmMG88gX5+eKSkrPOm4NSHoO4Ow4k\n32b/bkaQbHDRaBIhTz5BtYhu66+Q5YE5BHAnL2qt/co8CdYgNeiYvKl36ijv6Trs\nfdtV5dWr/RUrOPrGvuWE/FcVA02CZjeRH6q9jdeqsbG7HQV0xEKhQrfXTmyRN601\nDitEyvlbo/oY3GeuU0srVZACWaHvZplPSUeZXnqZXCyyoxcTvC48MDOUarc6irmQ\nmrblxj8VOikyJ00ihCgyI7ouQuJ8hYDD403yRHrCqn5bZXClpcwbsyw7BcOJA1bM\niiHFG0tWZopYK6cd5+ZSORyxC9lYZ7JzFausXBFM3B+p9CeyvYy/Z89fOnI414Oj\noCj/oA3Tu/KVCgGXzv/vm7GIWMHX9preq9JaEgTG9NkORBlgIwzjyx2yQbvqBn7i\nl7R/kzbceeHfba8wpTgpuO7q90EY5GHQMA0QrcyIYd3pifVHGKrWMLjRVoIo81Ao\n2fFyCRMPotVS3fUNWqV/6pszjjc1m8e1Su0zUjMU/0G1LEFX5Qqvw1Snti8aEQ86\nU/JLszGknbXlkI5VR8uhCPmkF4BvCe35Cyiu6/dTFd/04nB+GMnvTdUtSbVA/KOT\nZ9vbeyZ7dFKFBveKpW4Sa1wCPZEN4BGBztaMlSbl39qjmHYl8Ls=\n=rqIX\n-----END PGP SIGNATURE-----", "payload": "tree d02b16b4610ac00c024fa8a6620183f9465f4088\nparent 2b0cfa5b4c5099f45ca540ee1c7d8c1ecd5267d2\nauthor Aaron Hill <aa1ronham@gmail.com> 1581811460 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1583358193 -0500\n\nPermit attributes on 'if' expressions\n\nPreviously, attributes on 'if' expressions (e.g. #[attr] if true {})\nwere disallowed during parsing. This made it impossible for macros to\nperform any custom handling of such attributes (e.g. stripping them\naway), since a compilation error would be emitted before they ever had a\nchance to run.\n\nThis PR permits attributes on 'if' expressions ('if-attrs' from here on).\nBoth built-in attributes (e.g. `#[allow]`, `#[cfg]`) are supported.\n\nWe still do *not* accept attributes on 'other parts' of an if-else\nchain. That is, the following code snippet still fails to parse:\n\n```rust\nif true {} #[attr] else if false {} else #[attr] if false {} #[attr]\nelse {}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "html_url": "https://github.com/rust-lang/rust/commit/f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b0cfa5b4c5099f45ca540ee1c7d8c1ecd5267d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b0cfa5b4c5099f45ca540ee1c7d8c1ecd5267d2", "html_url": "https://github.com/rust-lang/rust/commit/2b0cfa5b4c5099f45ca540ee1c7d8c1ecd5267d2"}], "stats": {"total": 171, "additions": 137, "deletions": 34}, "files": [{"sha": "f31686afd1a0b63af97faccba6055c3d37abd231", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "patch": "@@ -665,20 +665,11 @@ impl<'a> Parser<'a> {\n             expr.map(|mut expr| {\n                 attrs.extend::<Vec<_>>(expr.attrs.into());\n                 expr.attrs = attrs;\n-                self.error_attr_on_if_expr(&expr);\n                 expr\n             })\n         })\n     }\n \n-    fn error_attr_on_if_expr(&self, expr: &Expr) {\n-        if let (ExprKind::If(..), [a0, ..]) = (&expr.kind, &*expr.attrs) {\n-            // Just point to the first attribute in there...\n-            self.struct_span_err(a0.span, \"attributes are not yet allowed on `if` expressions\")\n-                .emit();\n-        }\n-    }\n-\n     fn parse_dot_or_call_expr_with_(&mut self, mut e: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         loop {\n             if self.eat(&token::Question) {"}, {"sha": "463476737a92f990f3bb71a661be2d38b3970c67", "filename": "src/test/pretty/if-attr.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fpretty%2Fif-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fpretty%2Fif-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fif-attr.rs?ref=f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "patch": "@@ -0,0 +1,28 @@\n+// pp-exact\n+\n+#[cfg(FALSE)]\n+fn simple_attr() {\n+\n+    #[attr]\n+    if true { }\n+\n+    #[allow_warnings]\n+    if true { }\n+}\n+\n+#[cfg(FALSE)]\n+fn if_else_chain() {\n+\n+    #[first_attr]\n+    if true { } else if false { } else { }\n+}\n+\n+#[cfg(FALSE)]\n+fn if_let() {\n+\n+    #[attr]\n+    if let Some(_) = Some(true) { }\n+}\n+\n+\n+fn main() { }"}, {"sha": "f3980a596481c2cd4fb6acf14ce68f983f3dc569", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs?ref=f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "patch": "@@ -38,8 +38,6 @@ fn main() {}\n //~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n //~^ ERROR an inner attribute is not permitted in this context\n-#[cfg(FALSE)] fn e() { let _ = #[attr] if 0 {}; }\n-//~^ ERROR attributes are not yet allowed on `if` expressions\n #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n //~^ ERROR expected `{`, found `#`\n #[cfg(FALSE)] fn e() { let _ = if 0 {#![attr]}; }\n@@ -51,14 +49,11 @@ fn main() {}\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n //~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n-//~^ ERROR attributes are not yet allowed on `if` expressions\n-//~| ERROR expected `{`, found `#`\n+//~^ ERROR expected `{`, found `#`\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n //~^ ERROR expected `{`, found `#`\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n //~^ ERROR an inner attribute is not permitted in this context\n-#[cfg(FALSE)] fn e() { let _ = #[attr] if let _ = 0 {}; }\n-//~^ ERROR attributes are not yet allowed on `if` expressions\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n //~^ ERROR expected `{`, found `#`\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {#![attr]}; }\n@@ -70,8 +65,7 @@ fn main() {}\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n //~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n-//~^ ERROR attributes are not yet allowed on `if` expressions\n-//~| ERROR expected `{`, found `#`\n+//~^ ERROR expected `{`, found `#`\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}; }\n //~^ ERROR expected `{`, found `#`\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 {#![attr]}; }"}, {"sha": "2932ec1a23195514df275ef58bdf163a0ad9e978", "filename": "src/test/ui/parser/if-attrs/cfg-false-if-attr.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Fcfg-false-if-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Fcfg-false-if-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Fcfg-false-if-attr.rs?ref=f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "patch": "@@ -0,0 +1,31 @@\n+// check-pass\n+\n+#[cfg(FALSE)]\n+fn simple_attr() {\n+    #[attr] if true {}\n+    #[allow_warnings] if true {}\n+}\n+\n+#[cfg(FALSE)]\n+fn if_else_chain() {\n+    #[first_attr] if true {\n+    } else if false {\n+    } else {\n+    }\n+}\n+\n+#[cfg(FALSE)]\n+fn if_let() {\n+    #[attr] if let Some(_) = Some(true) {}\n+}\n+\n+macro_rules! custom_macro {\n+    ($expr:expr) => {}\n+}\n+\n+custom_macro! {\n+    #[attr] if true {}\n+}\n+\n+\n+fn main() {}"}, {"sha": "4394b2100c1b547229b80127d66e1795ddc20d9d", "filename": "src/test/ui/parser/if-attrs/else-attrs.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Felse-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Felse-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Felse-attrs.rs?ref=f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "patch": "@@ -0,0 +1,25 @@\n+#[cfg(FALSE)]\n+fn if_else_parse_error() {\n+    if true {\n+    } #[attr] else if false { //~ ERROR expected\n+    }\n+}\n+\n+#[cfg(FALSE)]\n+fn else_attr_ifparse_error() {\n+    if true {\n+    } else #[attr] if false { //~ ERROR expected\n+    } else {\n+    }\n+}\n+\n+#[cfg(FALSE)]\n+fn else_parse_error() {\n+    if true {\n+    } else if false {\n+    } #[attr] else { //~ ERROR expected\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "af25b6abc0a3ad77a2efe11125da7c9d0fe7bdb1", "filename": "src/test/ui/parser/if-attrs/else-attrs.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Felse-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Felse-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Felse-attrs.stderr?ref=f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "patch": "@@ -0,0 +1,27 @@\n+error: expected expression, found keyword `else`\n+  --> $DIR/else-attrs.rs:4:15\n+   |\n+LL |     } #[attr] else if false {\n+   |               ^^^^ expected expression\n+\n+error: expected `{`, found `#`\n+  --> $DIR/else-attrs.rs:11:12\n+   |\n+LL |     } else #[attr] if false {\n+   |            ^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     } else #[attr] { if false {\n+LL |     } else {\n+LL |     } }\n+   |\n+\n+error: expected expression, found keyword `else`\n+  --> $DIR/else-attrs.rs:20:15\n+   |\n+LL |     } #[attr] else {\n+   |               ^^^^ expected expression\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "5237a9ff3961a060c3d459f0e985bddc2bad9a16", "filename": "src/test/ui/parser/if-attrs/let-chains-attr.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Flet-chains-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Flet-chains-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Flet-chains-attr.rs?ref=f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+#![feature(let_chains)] //~ WARN the feature `let_chains` is incomplete\n+\n+#[cfg(FALSE)]\n+fn foo() {\n+    #[attr]\n+    if let Some(_) = Some(true) && let Ok(_) = Ok(1) {\n+    } else if let Some(false) = Some(true) {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a6c91bb9203b3b180ea37b3a46ae3cb6234e4316", "filename": "src/test/ui/parser/if-attrs/let-chains-attr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Flet-chains-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Flet-chains-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fif-attrs%2Flet-chains-attr.stderr?ref=f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `let_chains` is incomplete and may cause the compiler to crash\n+  --> $DIR/let-chains-attr.rs:3:12\n+   |\n+LL | #![feature(let_chains)]\n+   |            ^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "b4fb25ec8d344d9ddce39f3a4c7a93af7cc019d7", "filename": "src/test/ui/parser/recovery-attr-on-if.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Frecovery-attr-on-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Frecovery-attr-on-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecovery-attr-on-if.rs?ref=f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "patch": "@@ -1,9 +1,7 @@\n fn main() {\n     #[attr] if true {};\n     //~^ ERROR cannot find attribute\n-    //~| ERROR attributes are not yet allowed on `if` expressions\n     #[attr] if true {};\n     //~^ ERROR cannot find attribute\n-    //~| ERROR attributes are not yet allowed on `if` expressions\n     let _recovery_witness: () = 0; //~ ERROR mismatched types\n }"}, {"sha": "cbf2714a1a1dea5bab5041cf38cf1c9c83b2e3e2", "filename": "src/test/ui/parser/recovery-attr-on-if.stderr", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Frecovery-attr-on-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f63b88c761f935d9b2c220a1b4e3abf0c0681c69/src%2Ftest%2Fui%2Fparser%2Frecovery-attr-on-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecovery-attr-on-if.stderr?ref=f63b88c761f935d9b2c220a1b4e3abf0c0681c69", "patch": "@@ -1,17 +1,5 @@\n-error: attributes are not yet allowed on `if` expressions\n-  --> $DIR/recovery-attr-on-if.rs:2:5\n-   |\n-LL |     #[attr] if true {};\n-   |     ^^^^^^^\n-\n-error: attributes are not yet allowed on `if` expressions\n-  --> $DIR/recovery-attr-on-if.rs:5:5\n-   |\n-LL |     #[attr] if true {};\n-   |     ^^^^^^^\n-\n error: cannot find attribute `attr` in this scope\n-  --> $DIR/recovery-attr-on-if.rs:5:7\n+  --> $DIR/recovery-attr-on-if.rs:4:7\n    |\n LL |     #[attr] if true {};\n    |       ^^^^\n@@ -23,13 +11,13 @@ LL |     #[attr] if true {};\n    |       ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/recovery-attr-on-if.rs:8:33\n+  --> $DIR/recovery-attr-on-if.rs:6:33\n    |\n LL |     let _recovery_witness: () = 0;\n    |                            --   ^ expected `()`, found integer\n    |                            |\n    |                            expected due to this\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}