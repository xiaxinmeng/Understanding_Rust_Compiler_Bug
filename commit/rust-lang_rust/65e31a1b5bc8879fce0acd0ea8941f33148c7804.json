{"sha": "65e31a1b5bc8879fce0acd0ea8941f33148c7804", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZTMxYTFiNWJjODg3OWZjZTBhY2QwZWE4OTQxZjMzMTQ4Yzc4MDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-15T08:38:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-15T08:38:08Z"}, "message": "Merge #6875\n\n6875: Add find usages for enum constructors r=matklad a=sasurau4\n\nFix #2549 for enum\n\nCo-authored-by: Daiki Ihara <sasurau4@gmail.com>", "tree": {"sha": "0e9459d34cd984d06f99ca21512eaa09d0cab73f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e9459d34cd984d06f99ca21512eaa09d0cab73f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65e31a1b5bc8879fce0acd0ea8941f33148c7804", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf2HXwCRBK7hj4Ov3rIwAAdHIIAGFtCProUpNxgLZ4jfvJu5eF\nPGIe0HH3+dkelK6pAr3c8MWxUJJ/0ru7oVpAXcD21JmigtDT0ARezmJOWozPUZRk\nU75Wxc7IZ+ZfSVJs2y+RSCX4ocTC4nqYPEa1OtD0hNdCWZ62fmc50yLLl+HwJ83q\nI81roXdr48gxuGH+jvgrwlJ8Y2uagflpsJxJA9a757LHuaTOoK+WdBd7Lj03wt2a\n2t4b77HjHi4DdTHwuMhM8eBFsQsiptWQPe4HzpV/U6Y6rz2IreavV8zKhbh+KCEw\nvtttHB/942RMkTet+1MqFZfyr0JnzhZ+qUNKFg+utfdY7wQQqr5Q7OYngnbPSd4=\n=BxX6\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e9459d34cd984d06f99ca21512eaa09d0cab73f\nparent 67e299f9cf5807e92cf1e398511a5d5377f9dd84\nparent 36a9daac70fe99d837ff3f5b2fb89d226423c1ba\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608021488 +0000\ncommitter GitHub <noreply@github.com> 1608021488 +0000\n\nMerge #6875\n\n6875: Add find usages for enum constructors r=matklad a=sasurau4\n\nFix #2549 for enum\n\nCo-authored-by: Daiki Ihara <sasurau4@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65e31a1b5bc8879fce0acd0ea8941f33148c7804", "html_url": "https://github.com/rust-lang/rust/commit/65e31a1b5bc8879fce0acd0ea8941f33148c7804", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65e31a1b5bc8879fce0acd0ea8941f33148c7804/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67e299f9cf5807e92cf1e398511a5d5377f9dd84", "url": "https://api.github.com/repos/rust-lang/rust/commits/67e299f9cf5807e92cf1e398511a5d5377f9dd84", "html_url": "https://github.com/rust-lang/rust/commit/67e299f9cf5807e92cf1e398511a5d5377f9dd84"}, {"sha": "36a9daac70fe99d837ff3f5b2fb89d226423c1ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a9daac70fe99d837ff3f5b2fb89d226423c1ba", "html_url": "https://github.com/rust-lang/rust/commit/36a9daac70fe99d837ff3f5b2fb89d226423c1ba"}], "stats": {"total": 130, "additions": 130, "deletions": 0}, "files": [{"sha": "66f0f7950f44a6f90e9312da9c62a071d0c40b5f", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/65e31a1b5bc8879fce0acd0ea8941f33148c7804/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e31a1b5bc8879fce0acd0ea8941f33148c7804/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=65e31a1b5bc8879fce0acd0ea8941f33148c7804", "patch": "@@ -97,6 +97,9 @@ pub(crate) fn find_all_refs(\n         get_struct_def_name_for_struct_literal_search(&sema, &syntax, position)\n     {\n         (Some(name), ReferenceKind::StructLiteral)\n+    } else if let Some(name) = get_enum_def_name_for_struct_literal_search(&sema, &syntax, position)\n+    {\n+        (Some(name), ReferenceKind::EnumLiteral)\n     } else {\n         (\n             sema.find_node_at_offset_with_descend::<ast::Name>(&syntax, position.offset),\n@@ -198,6 +201,33 @@ fn get_struct_def_name_for_struct_literal_search(\n     None\n }\n \n+fn get_enum_def_name_for_struct_literal_search(\n+    sema: &Semantics<RootDatabase>,\n+    syntax: &SyntaxNode,\n+    position: FilePosition,\n+) -> Option<ast::Name> {\n+    if let TokenAtOffset::Between(ref left, ref right) = syntax.token_at_offset(position.offset) {\n+        if right.kind() != SyntaxKind::L_CURLY && right.kind() != SyntaxKind::L_PAREN {\n+            return None;\n+        }\n+        if let Some(name) =\n+            sema.find_node_at_offset_with_descend::<ast::Name>(&syntax, left.text_range().start())\n+        {\n+            return name.syntax().ancestors().find_map(ast::Enum::cast).and_then(|l| l.name());\n+        }\n+        if sema\n+            .find_node_at_offset_with_descend::<ast::GenericParamList>(\n+                &syntax,\n+                left.text_range().start(),\n+            )\n+            .is_some()\n+        {\n+            return left.ancestors().find_map(ast::Enum::cast).and_then(|l| l.name());\n+        }\n+    }\n+    None\n+}\n+\n fn try_find_self_references(\n     syntax: &SyntaxNode,\n     position: FilePosition,\n@@ -356,6 +386,91 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn test_enum_after_space() {\n+        check(\n+            r#\"\n+enum Foo <|>{\n+    A,\n+    B,\n+}\n+fn main() {\n+    let f: Foo;\n+    f = Foo::A;\n+}\n+\"#,\n+            expect![[r#\"\n+                Foo ENUM FileId(0) 0..26 5..8 Other\n+\n+                FileId(0) 63..66 EnumLiteral\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_enum_before_space() {\n+        check(\n+            r#\"\n+enum Foo<|> {\n+    A,\n+    B,\n+}\n+fn main() {\n+    let f: Foo;\n+    f = Foo::A;\n+}\n+\"#,\n+            expect![[r#\"\n+                Foo ENUM FileId(0) 0..26 5..8 Other\n+\n+                FileId(0) 50..53 Other\n+                FileId(0) 63..66 EnumLiteral\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_enum_with_generic_type() {\n+        check(\n+            r#\"\n+enum Foo<T> <|>{\n+    A(T),\n+    B,\n+}\n+fn main() {\n+    let f: Foo<i8>;\n+    f = Foo::A(1);\n+}\n+\"#,\n+            expect![[r#\"\n+                Foo ENUM FileId(0) 0..32 5..8 Other\n+\n+                FileId(0) 73..76 EnumLiteral\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_enum_for_tuple() {\n+        check(\n+            r#\"\n+enum Foo<|>{\n+    A(i8),\n+    B(i8),\n+}\n+fn main() {\n+    let f: Foo;\n+    f = Foo::A(1);\n+}\n+\"#,\n+            expect![[r#\"\n+                Foo ENUM FileId(0) 0..33 5..8 Other\n+\n+                FileId(0) 70..73 EnumLiteral\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_find_all_refs_for_local() {\n         check("}, {"sha": "3936c7390fcb27da3678282dbf6ba24b0d66b7f0", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/65e31a1b5bc8879fce0acd0ea8941f33148c7804/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65e31a1b5bc8879fce0acd0ea8941f33148c7804/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=65e31a1b5bc8879fce0acd0ea8941f33148c7804", "patch": "@@ -32,6 +32,7 @@ pub enum ReferenceKind {\n     StructLiteral,\n     RecordFieldExprOrPat,\n     SelfKw,\n+    EnumLiteral,\n     Other,\n }\n \n@@ -284,6 +285,8 @@ impl<'a> FindUsages<'a> {\n                     ReferenceKind::RecordFieldExprOrPat\n                 } else if is_record_lit_name_ref(&name_ref) || is_call_expr_name_ref(&name_ref) {\n                     ReferenceKind::StructLiteral\n+                } else if is_enum_lit_name_ref(&name_ref) {\n+                    ReferenceKind::EnumLiteral\n                 } else {\n                     ReferenceKind::Other\n                 };\n@@ -402,3 +405,15 @@ fn is_record_field_expr_or_pat(name_ref: &ast::NameRef) -> bool {\n         false\n     }\n }\n+\n+fn is_enum_lit_name_ref(name_ref: &ast::NameRef) -> bool {\n+    name_ref\n+        .syntax()\n+        .ancestors()\n+        .find_map(ast::PathExpr::cast)\n+        .and_then(|p| p.path())\n+        .and_then(|p| p.qualifier())\n+        .and_then(|p| p.segment())\n+        .map(|p| p.name_ref().as_ref() == Some(name_ref))\n+        .unwrap_or(false)\n+}"}]}