{"sha": "9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "node_id": "C_kwDOAAsO6NoAKDlkNWU3ZDNjMDQyZjczMTUzY2Y4ZjAwOTQwMDU2OWZmOWU4ZTEyYTg", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-10T06:31:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-13T18:39:44Z"}, "message": "Suggest `collect`ing into `Vec<_>`", "tree": {"sha": "60cb2e64d7fed9fbd7ec72bfdd265579285cdd4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60cb2e64d7fed9fbd7ec72bfdd265579285cdd4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "html_url": "https://github.com/rust-lang/rust/commit/9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed620cf9690fdafed65845bf35c455db992fbba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed620cf9690fdafed65845bf35c455db992fbba1", "html_url": "https://github.com/rust-lang/rust/commit/ed620cf9690fdafed65845bf35c455db992fbba1"}], "stats": {"total": 80, "additions": 49, "deletions": 31}, "files": [{"sha": "b55cb091b1f4ed3eadb3c49da1de339af8f5a4d8", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Print, Printer};\n use rustc_middle::ty::{self, DefIdTree, InferConst};\n use rustc_middle::ty::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{IsSuggestable, Ty, TyCtxt, TypeckResults};\n-use rustc_span::symbol::{kw, Ident};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{BytePos, Span};\n use std::borrow::Cow;\n use std::iter;\n@@ -78,12 +78,12 @@ impl InferenceDiagnosticsData {\n     }\n \n     fn where_x_is_kind(&self, in_type: Ty<'_>) -> &'static str {\n-        if in_type.is_ty_infer() {\n-            \"empty\"\n-        } else if self.name == \"_\" {\n+        if self.name == \"_\" {\n             // FIXME: Consider specializing this message if there is a single `_`\n             // in the type.\n             \"underscore\"\n+        } else if in_type.is_ty_infer() {\n+            \"empty\"\n         } else {\n             \"has_name\"\n         }\n@@ -368,6 +368,7 @@ impl<'tcx> InferCtxt<'tcx> {\n }\n \n impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n+    #[instrument(level = \"debug\", skip(self, error_code))]\n     pub fn emit_inference_failure_err(\n         &self,\n         body_id: Option<hir::BodyId>,\n@@ -406,16 +407,20 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         let mut infer_subdiags = Vec::new();\n         let mut multi_suggestions = Vec::new();\n         match kind {\n-            InferSourceKind::LetBinding { insert_span, pattern_name, ty } => {\n+            InferSourceKind::LetBinding { insert_span, pattern_name, ty, is_collect } => {\n                 infer_subdiags.push(SourceKindSubdiag::LetLike {\n                     span: insert_span,\n                     name: pattern_name.map(|name| name.to_string()).unwrap_or_else(String::new),\n-                    x_kind: arg_data.where_x_is_kind(ty),\n+                    x_kind: if is_collect { \"empty\" } else { arg_data.where_x_is_kind(ty) },\n                     prefix_kind: arg_data.kind.clone(),\n                     prefix: arg_data.kind.try_get_prefix().unwrap_or_default(),\n                     arg_name: arg_data.name,\n                     kind: if pattern_name.is_some() { \"with_pattern\" } else { \"other\" },\n-                    type_name: ty_to_string(self, ty),\n+                    type_name: if is_collect {\n+                        \"Vec<_>\".to_string()\n+                    } else {\n+                        ty_to_string(self, ty)\n+                    },\n                 });\n             }\n             InferSourceKind::ClosureArg { insert_span, ty } => {\n@@ -608,6 +613,7 @@ enum InferSourceKind<'tcx> {\n         insert_span: Span,\n         pattern_name: Option<Ident>,\n         ty: Ty<'tcx>,\n+        is_collect: bool,\n     },\n     ClosureArg {\n         insert_span: Span,\n@@ -788,10 +794,19 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n     /// Uses `fn source_cost` to determine whether this inference source is preferable to\n     /// previous sources. We generally prefer earlier sources.\n     #[instrument(level = \"debug\", skip(self))]\n-    fn update_infer_source(&mut self, new_source: InferSource<'tcx>) {\n+    fn update_infer_source(&mut self, mut new_source: InferSource<'tcx>) {\n         let cost = self.source_cost(&new_source) + self.attempt;\n         debug!(?cost);\n         self.attempt += 1;\n+        if let Some(InferSource { kind: InferSourceKind::GenericArg { def_id, ..}, .. }) = self.infer_source\n+            && self.infcx.tcx.get_diagnostic_item(sym::iterator_collect_fn) == Some(def_id)\n+            && let InferSourceKind::LetBinding { ref ty, ref mut is_collect, ..} = new_source.kind\n+            && ty.is_ty_infer()\n+        {\n+            // Customize the output so we talk about `let x: Vec<_> = iter.collect();` instead of\n+            // `let x: _ = iter.collect();`, as this is a very common case.\n+            *is_collect = true;\n+        }\n         if cost < self.infer_source_cost {\n             self.infer_source_cost = cost;\n             self.infer_source = Some(new_source);\n@@ -1089,6 +1104,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n                                 insert_span: local.pat.span.shrink_to_hi(),\n                                 pattern_name: local.pat.simple_ident(),\n                                 ty,\n+                                is_collect: false,\n                             },\n                         })\n                     }"}, {"sha": "ace095736c92fd8a1a2e2b39c91b4c08b1ed6115", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -827,6 +827,7 @@ symbols! {\n         item_like_imports,\n         iter,\n         iter_repeat,\n+        iterator_collect_fn,\n         kcfi,\n         keyword,\n         kind,"}, {"sha": "1cdee992137daebebe8cafa38c4786400d46e9fe", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -1829,6 +1829,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use = \"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"iterator_collect_fn\")]\n     fn collect<B: FromIterator<Self::Item>>(self) -> B\n     where\n         Self: Sized,"}, {"sha": "bd757be126c9cf3fa6a74ccaf6ff70e6b6ea3bf5", "filename": "src/test/ui/array-slice-vec/infer_array_len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Finfer_array_len.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let [_, _] = a.into();\n    |         ^^^^^^\n    |\n-help: consider giving this pattern a type\n+help: consider giving this pattern a type, where the placeholders `_` are specified\n    |\n LL |     let [_, _]: _ = a.into();\n    |               +++"}, {"sha": "f7d34890a79318e950bf97bfb4dacf737d52a1cf", "filename": "src/test/ui/closures/issue-52437.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-52437.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -10,7 +10,7 @@ error[E0282]: type annotations needed\n LL |     [(); &(&'static: loop { |x| {}; }) as *const _ as usize]\n    |                              ^\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n    |\n LL |     [(); &(&'static: loop { |x: _| {}; }) as *const _ as usize]\n    |                               +++"}, {"sha": "892d3a81f27f9543e5b87663e64dcb3e2894cb21", "filename": "src/test/ui/error-codes/E0282.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Ferror-codes%2FE0282.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Ferror-codes%2FE0282.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0282.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -6,8 +6,8 @@ LL |     let x = \"hello\".chars().rev().collect();\n    |\n help: consider giving `x` an explicit type\n    |\n-LL |     let x: _ = \"hello\".chars().rev().collect();\n-   |          +++\n+LL |     let x: Vec<_> = \"hello\".chars().rev().collect();\n+   |          ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "da184c26bfe4a3ff2ec3bf497a473bf5c64f0098", "filename": "src/test/ui/impl-trait/issues/issue-86719.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86719.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -18,7 +18,7 @@ error[E0282]: type annotations needed\n LL |         |_| true\n    |          ^\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n    |\n LL |         |_: _| true\n    |           +++"}, {"sha": "e59bcea951250b5baf19089e3be6e7ca80e0bacc", "filename": "src/test/ui/inference/issue-72690.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-72690.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -30,7 +30,7 @@ error[E0282]: type annotations needed\n LL |     |x| String::from(\"x\".as_ref());\n    |      ^\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n    |\n LL |     |x: _| String::from(\"x\".as_ref());\n    |       +++"}, {"sha": "bedfeda2ea03910a0bc3c35bb022312fc12c29dc", "filename": "src/test/ui/issues/issue-18159.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fissues%2Fissue-18159.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fissues%2Fissue-18159.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18159.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let x;\n    |         ^\n    |\n-help: consider giving `x` an explicit type\n+help: consider giving `x` an explicit type, where the placeholders `_` are specified\n    |\n LL |     let x: _;\n    |          +++"}, {"sha": "411fdc483442a6635da077b3b426ead3f0fadee5", "filename": "src/test/ui/issues/issue-2151.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2151.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -6,7 +6,7 @@ LL |     let x = panic!();\n LL |     x.clone();\n    |     - type must be known at this point\n    |\n-help: consider giving `x` an explicit type\n+help: consider giving `x` an explicit type, where the placeholders `_` are specified\n    |\n LL |     let x: _ = panic!();\n    |          +++"}, {"sha": "fcfce56bcb15d821084e6ba28e9813b71131e7be", "filename": "src/test/ui/issues/issue-24036.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24036.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -17,7 +17,7 @@ error[E0282]: type annotations needed\n LL |         1 => |c| c + 1,\n    |               ^\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n    |\n LL |         1 => |c: _| c + 1,\n    |                +++"}, {"sha": "9d56d96c8c1701da187fea11e45ce9644e144ad7", "filename": "src/test/ui/lazy-type-alias-impl-trait/branches3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flazy-type-alias-impl-trait%2Fbranches3.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |         |s| s.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n    |\n LL |         |s: _| s.len()\n    |           +++\n@@ -15,7 +15,7 @@ error[E0282]: type annotations needed\n LL |         |s| s.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n    |\n LL |         |s: _| s.len()\n    |           +++\n@@ -26,7 +26,7 @@ error[E0282]: type annotations needed\n LL |         |s| s.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n    |\n LL |         |s: _| s.len()\n    |           +++\n@@ -37,7 +37,7 @@ error[E0282]: type annotations needed\n LL |         |s| s.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n    |\n LL |         |s: _| s.len()\n    |           +++"}, {"sha": "db5db38391e3e921e981f6c6e11361952cda09cc", "filename": "src/test/ui/match/match-unresolved-one-arm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fmatch%2Fmatch-unresolved-one-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fmatch%2Fmatch-unresolved-one-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-unresolved-one-arm.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     let x = match () {\n    |         ^\n    |\n-help: consider giving `x` an explicit type\n+help: consider giving `x` an explicit type, where the placeholders `_` are specified\n    |\n LL |     let x: _ = match () {\n    |          +++"}, {"sha": "86fd1e0c19695a531c42bfae9bdbd155a4feffaf", "filename": "src/test/ui/pattern/pat-tuple-bad-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-bad-type.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -7,7 +7,7 @@ LL |     let x;\n LL |         (..) => {}\n    |         ---- type must be known at this point\n    |\n-help: consider giving `x` an explicit type\n+help: consider giving `x` an explicit type, where the placeholders `_` are specified\n    |\n LL |     let x: _;\n    |          +++"}, {"sha": "5bf168a57115d2039451241d83ce5a4e408ab78a", "filename": "src/test/ui/pattern/rest-pat-semantic-disallowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -191,7 +191,7 @@ error[E0282]: type annotations needed\n LL |     let x @ ..;\n    |         ^^^^^^\n    |\n-help: consider giving this pattern a type\n+help: consider giving this pattern a type, where the placeholders `_` are specified\n    |\n LL |     let x @ ..: _;\n    |               +++"}, {"sha": "cc9cd3fe68be7056444c8db9ad2efeca92cd1be1", "filename": "src/test/ui/resolve/issue-85348.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fresolve%2Fissue-85348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fresolve%2Fissue-85348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-85348.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -19,7 +19,7 @@ error[E0282]: type annotations needed\n LL |         let mut N;\n    |             ^^^^^\n    |\n-help: consider giving `N` an explicit type\n+help: consider giving `N` an explicit type, where the placeholders `_` are specified\n    |\n LL |         let mut N: _;\n    |                  +++"}, {"sha": "852054646260b38f171a947975d77445f205f16b", "filename": "src/test/ui/span/method-and-field-eager-resolution.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmethod-and-field-eager-resolution.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -7,7 +7,7 @@ LL |\n LL |     x.0;\n    |     - type must be known at this point\n    |\n-help: consider giving `x` an explicit type\n+help: consider giving `x` an explicit type, where the placeholders `_` are specified\n    |\n LL |     let mut x: _ = Default::default();\n    |              +++\n@@ -21,7 +21,7 @@ LL |\n LL |     x[0];\n    |     - type must be known at this point\n    |\n-help: consider giving `x` an explicit type\n+help: consider giving `x` an explicit type, where the placeholders `_` are specified\n    |\n LL |     let mut x: _ = Default::default();\n    |              +++"}, {"sha": "6f8b5cc4cc5abef510c8872b73814bf8e5aafdb2", "filename": "src/test/ui/type-alias-impl-trait/closures_in_branches.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fclosures_in_branches.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |         |x| x.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n    |\n LL |         |x: _| x.len()\n    |           +++\n@@ -15,7 +15,7 @@ error[E0282]: type annotations needed\n LL |         |x| x.len()\n    |          ^  - type must be known at this point\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n    |\n LL |         |x: _| x.len()\n    |           +++"}, {"sha": "2ba5f07a8f4dd1711811b9e7046d4b37d0264677", "filename": "src/test/ui/type/type-check/unknown_type_for_closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Funknown_type_for_closure.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -10,7 +10,7 @@ error[E0282]: type annotations needed\n LL |     let x = |_| {};\n    |              ^\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n    |\n LL |     let x = |_: _| {};\n    |               +++"}, {"sha": "24cc4a2a761a82a5350755eeabf9510d09aaa17f", "filename": "src/test/ui/type/type-path-err-node-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9d5e7d3c042f73153cf8f009400569ff9e8e12a8/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-path-err-node-types.stderr?ref=9d5e7d3c042f73153cf8f009400569ff9e8e12a8", "patch": "@@ -28,7 +28,7 @@ error[E0282]: type annotations needed\n LL |     let _ = |a, b: _| -> _ { 0 };\n    |              ^\n    |\n-help: consider giving this closure parameter an explicit type\n+help: consider giving this closure parameter an explicit type, where the placeholders `_` are specified\n    |\n LL |     let _ = |a: _, b: _| -> _ { 0 };\n    |               +++"}]}