{"sha": "0837d630f7becb8259074a2adc35e77476e5083e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MzdkNjMwZjdiZWNiODI1OTA3NGEyYWRjMzVlNzc0NzZlNTA4M2U=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-09T19:49:34Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-04-09T19:49:34Z"}, "message": "Some final cleanup", "tree": {"sha": "f96763671122d42b20d02d9256cb37937770ad69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f96763671122d42b20d02d9256cb37937770ad69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0837d630f7becb8259074a2adc35e77476e5083e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlys904ACgkQtAh+UQ6Y\nsWStgw//aQf/ylmCzLCXPbQQJo+tUdcOYmUGdTo6lpC/LCBD977pZK4VRHZ573f1\nsAunp2tryqgExRNAOMkNt9QxEkVCx2gc2jyFT1dk2+MN9qOqdPeeBlEvjTdFN9fY\nT8lMELU/YKmCIaK80JxWjAPrSqbm202+GLqViRj3ngSvn+G5GeS2zchG39UsEMnc\nOGPhG6Q0t//O2aiT+BujiYKZzcj4bSJAUPQ1Xh1elQ5MLejIXThGZGTi0S/iFioH\ndpCj/6GePWxmdYPoh2cuj8h/fJGC/epkxV2hQy1d9efpeBRo1X72ThMVby6evqMl\nhGItf4d1PjX8EWrZr8CzpRWbrESM3RcFIKMu0AyFHLGrC3gmeZC7A1j4g/kioe+1\nS+5vdA6ZpHMuN5xB5V3gBzvwp8ur/+Vg7xse5r4e2Kz1u5bZBSQCTy4jxM/fiI3M\nciCDg94n1IZpYxXjvHe+bXJvlWUhR+e1+Pbs0eMnR9r3dQX5YuVLt8+fSJOzt361\nihh9jKEyJ8vHlOdkWX2c8CTwAC9Nl2MuXi35Z1QxGOluwp005+6O0qIdjC2Qhz2W\nw0e005w1PoyLVCYqGOSd5PX0wTyVjq9YiMngd+cA/gKq2/jWYoRiMTAWLRqBtPnU\nJzKNtzvGvCNHJu5FhqMvBYRjkFtdNL58lnuya5hnuK0RUw0GBGA=\n=NPAi\n-----END PGP SIGNATURE-----", "payload": "tree f96763671122d42b20d02d9256cb37937770ad69\nparent c6e0d097143a90ec8512a087b6cd3a475d2aeff1\nauthor Aaron Hill <aa1ronham@gmail.com> 1554839374 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1554839374 -0400\n\nSome final cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0837d630f7becb8259074a2adc35e77476e5083e", "html_url": "https://github.com/rust-lang/rust/commit/0837d630f7becb8259074a2adc35e77476e5083e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0837d630f7becb8259074a2adc35e77476e5083e/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6e0d097143a90ec8512a087b6cd3a475d2aeff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e0d097143a90ec8512a087b6cd3a475d2aeff1", "html_url": "https://github.com/rust-lang/rust/commit/c6e0d097143a90ec8512a087b6cd3a475d2aeff1"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "50351e2c70454ddf82294e8fcc6fa1f1a8c23575", "filename": "src/fn_call.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0837d630f7becb8259074a2adc35e77476e5083e/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0837d630f7becb8259074a2adc35e77476e5083e/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=0837d630f7becb8259074a2adc35e77476e5083e", "patch": "@@ -213,11 +213,11 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n             \"syscall\" => {\n                 let sys_getrandom = this.eval_path_scalar(&[\"libc\", \"SYS_getrandom\"])?\n                     .expect(\"Failed to get libc::SYS_getrandom\")\n-                    .to_usize(this)? as i64;\n+                    .to_usize(this)?;\n \n                 // `libc::syscall(NR_GETRANDOM, buf.as_mut_ptr(), buf.len(), GRND_NONBLOCK)`\n                 // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n-                match this.read_scalar(args[0])?.to_usize(this)? as i64 {\n+                match this.read_scalar(args[0])?.to_usize(this)? {\n                     id if id == sys_getrandom => {\n                         let ptr = this.read_scalar(args[1])?.to_ptr()?;\n                         let len = this.read_scalar(args[2])?.to_usize(this)?;\n@@ -795,13 +795,15 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n     }\n }\n \n-fn gen_random<'a, 'mir, 'tcx>(this: &mut MiriEvalContext<'a, 'mir, 'tcx>,\n-                                 len: usize) -> Result<Vec<u8>, EvalError<'tcx>>  {\n+fn gen_random<'a, 'mir, 'tcx>(\n+    this: &mut MiriEvalContext<'a, 'mir, 'tcx>,\n+    len: usize,\n+) -> Result<Vec<u8>, EvalError<'tcx>>  {\n \n-    match this.machine.rng.as_ref() {\n+    match &mut this.machine.rng {\n         Some(rng) => {\n             let mut data = vec![0; len];\n-            rng.borrow_mut().fill_bytes(&mut data);\n+            rng.fill_bytes(&mut data);\n             Ok(data)\n         }\n         None => {"}, {"sha": "d185ec610c9a5eb0df60c3201633460f762087db", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0837d630f7becb8259074a2adc35e77476e5083e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0837d630f7becb8259074a2adc35e77476e5083e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0837d630f7becb8259074a2adc35e77476e5083e", "patch": "@@ -23,7 +23,6 @@ mod stacked_borrows;\n \n use std::collections::HashMap;\n use std::borrow::Cow;\n-use std::cell::RefCell;\n \n use rand::rngs::StdRng;\n use rand::SeedableRng;\n@@ -336,7 +335,7 @@ pub struct Evaluator<'tcx> {\n \n     /// The random number generator to use if Miri\n     /// is running in non-deterministic mode\n-    pub(crate) rng: Option<RefCell<StdRng>>\n+    pub(crate) rng: Option<StdRng>\n }\n \n impl<'tcx> Evaluator<'tcx> {\n@@ -350,7 +349,7 @@ impl<'tcx> Evaluator<'tcx> {\n             tls: TlsData::default(),\n             validate,\n             stacked_borrows: stacked_borrows::State::default(),\n-            rng: seed.map(|s| RefCell::new(StdRng::seed_from_u64(s)))\n+            rng: seed.map(|s| StdRng::seed_from_u64(s))\n         }\n     }\n }"}]}