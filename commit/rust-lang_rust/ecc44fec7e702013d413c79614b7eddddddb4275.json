{"sha": "ecc44fec7e702013d413c79614b7eddddddb4275", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYzQ0ZmVjN2U3MDIwMTNkNDEzYzc5NjE0YjdlZGRkZGRkYjQyNzU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-21T13:51:42Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-21T13:51:42Z"}, "message": "Implement `malloc` and `free`", "tree": {"sha": "a8990e5d8e7e9c515feac1626944822f575f711d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8990e5d8e7e9c515feac1626944822f575f711d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecc44fec7e702013d413c79614b7eddddddb4275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc44fec7e702013d413c79614b7eddddddb4275", "html_url": "https://github.com/rust-lang/rust/commit/ecc44fec7e702013d413c79614b7eddddddb4275", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecc44fec7e702013d413c79614b7eddddddb4275/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f22c7e43df0e69f2e7c15f0bcaca4834cfdea715", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715", "html_url": "https://github.com/rust-lang/rust/commit/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "fa4a5e5b5f1e355156b47dcc306a20fbcce5bd39", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ecc44fec7e702013d413c79614b7eddddddb4275/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecc44fec7e702013d413c79614b7eddddddb4275/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=ecc44fec7e702013d413c79614b7eddddddb4275", "patch": "@@ -559,6 +559,18 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let usize = self.tcx.types.usize;\n \n         match &link_name[..] {\n+            \"malloc\" => {\n+                let size = self.value_to_primval(args[0], usize)?.to_u64()?;\n+                let align = self.memory.pointer_size();\n+                let ptr = self.memory.allocate(size, align)?;\n+                self.write_primval(dest, PrimVal::Ptr(ptr), dest_ty)?;\n+            }\n+\n+            \"free\" => {\n+                let ptr = args[0].read_ptr(&self.memory)?.to_ptr()?;\n+                self.memory.deallocate(ptr)?;\n+            }\n+\n             \"__rust_allocate\" => {\n                 let size = self.value_to_primval(args[0], usize)?.to_u64()?;\n                 let align = self.value_to_primval(args[1], usize)?.to_u64()?;"}, {"sha": "b67612c94b00955ab2c74c33ff71714fae54ebe3", "filename": "tests/run-pass-fullmir/regions-mock-trans.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ecc44fec7e702013d413c79614b7eddddddb4275/tests%2Frun-pass-fullmir%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecc44fec7e702013d413c79614b7eddddddb4275/tests%2Frun-pass-fullmir%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fregions-mock-trans.rs?ref=ecc44fec7e702013d413c79614b7eddddddb4275", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-expanded FIXME #23616\n+\n+#![feature(libc)]\n+\n+extern crate libc;\n+use std::mem;\n+\n+struct arena(());\n+\n+struct Bcx<'a> {\n+    fcx: &'a Fcx<'a>\n+}\n+\n+struct Fcx<'a> {\n+    arena: &'a arena,\n+    ccx: &'a Ccx\n+}\n+\n+struct Ccx {\n+    x: isize\n+}\n+\n+fn alloc<'a>(_bcx : &'a arena) -> &'a Bcx<'a> {\n+    unsafe {\n+        mem::transmute(libc::malloc(mem::size_of::<Bcx<'a>>()\n+            as libc::size_t))\n+    }\n+}\n+\n+fn h<'a>(bcx : &'a Bcx<'a>) -> &'a Bcx<'a> {\n+    return alloc(bcx.fcx.arena);\n+}\n+\n+fn g(fcx : &Fcx) {\n+    let bcx = Bcx { fcx: fcx };\n+    let bcx2 = h(&bcx);\n+    unsafe {\n+        libc::free(mem::transmute(bcx2));\n+    }\n+}\n+\n+fn f(ccx : &Ccx) {\n+    let a = arena(());\n+    let fcx = Fcx { arena: &a, ccx: ccx };\n+    return g(&fcx);\n+}\n+\n+pub fn main() {\n+    let ccx = Ccx { x: 0 };\n+    f(&ccx);\n+}"}]}