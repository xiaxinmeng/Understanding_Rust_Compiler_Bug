{"sha": "c5d223033b4f51e050de6f0073f7050dedaa316d", "node_id": "C_kwDOAAsO6NoAKGM1ZDIyMzAzM2I0ZjUxZTA1MGRlNmYwMDczZjcwNTBkZWRhYTMxNmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-22T19:34:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-22T19:34:52Z"}, "message": "Rollup merge of #102127 - TaKO8Ki:use-appropriate-variable-names, r=lcnr\n\nUse appropriate variable names", "tree": {"sha": "6786bdd5d136e8d704c20076d4d481186ec3a444", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6786bdd5d136e8d704c20076d4d481186ec3a444"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d223033b4f51e050de6f0073f7050dedaa316d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjLLjcCRBK7hj4Ov3rIwAA7nQIABSOv7vRDMxJuvCQwVOH9wY+\nlXjxJCcyrjJVRiCLyaxUaqqTMCHBD5xp5R8zINgxEFUtzAlleRzRtEpFWSbgmtem\nPzUyH9D6ezfSsFNlXMFXauXY5Njg3BzeRwjMl8U+UiYyO1FiEU7Bq9KuD6inNhry\ncGLvJgESxDQGNuARmKJXM0mN8vFsCfjl8x/CcbqoUSftkBZn7U0TLAombP8MT3fm\n2sjcOm7MNFQQEqt0LI+bXGYMY/toUq1KmX7ukNlgUIOpJB9jYJZYVo6c1b/O5LGQ\n0bcWImV+b9NOjT1ib9SHk91o5n5OhjKuRVlON7dsXdP5RZiekqtqFdKghaf5Lxg=\n=D/Vu\n-----END PGP SIGNATURE-----\n", "payload": "tree 6786bdd5d136e8d704c20076d4d481186ec3a444\nparent dee0c422e7412aaba2ad9f902780f5cc1d906945\nparent 2d7f9877153623c841517f8c6578edafd19c4daa\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1663875292 +0200\ncommitter GitHub <noreply@github.com> 1663875292 +0200\n\nRollup merge of #102127 - TaKO8Ki:use-appropriate-variable-names, r=lcnr\n\nUse appropriate variable names\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d223033b4f51e050de6f0073f7050dedaa316d", "html_url": "https://github.com/rust-lang/rust/commit/c5d223033b4f51e050de6f0073f7050dedaa316d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d223033b4f51e050de6f0073f7050dedaa316d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dee0c422e7412aaba2ad9f902780f5cc1d906945", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee0c422e7412aaba2ad9f902780f5cc1d906945", "html_url": "https://github.com/rust-lang/rust/commit/dee0c422e7412aaba2ad9f902780f5cc1d906945"}, {"sha": "2d7f9877153623c841517f8c6578edafd19c4daa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7f9877153623c841517f8c6578edafd19c4daa", "html_url": "https://github.com/rust-lang/rust/commit/2d7f9877153623c841517f8c6578edafd19c4daa"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "f112f1274b8c7d417476b8a137d21bc21a0dd7ce", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5d223033b4f51e050de6f0073f7050dedaa316d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d223033b4f51e050de6f0073f7050dedaa316d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=c5d223033b4f51e050de6f0073f7050dedaa316d", "patch": "@@ -35,8 +35,8 @@ pub(crate) fn target_from_impl_item<'tcx>(\n     match impl_item.kind {\n         hir::ImplItemKind::Const(..) => Target::AssocConst,\n         hir::ImplItemKind::Fn(..) => {\n-            let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id());\n-            let containing_item = tcx.hir().expect_item(parent_hir_id);\n+            let parent_def_id = tcx.hir().get_parent_item(impl_item.hir_id());\n+            let containing_item = tcx.hir().expect_item(parent_def_id);\n             let containing_impl_is_for_trait = match &containing_item.kind {\n                 hir::ItemKind::Impl(impl_) => impl_.of_trait.is_some(),\n                 _ => bug!(\"parent of an ImplItem must be an Impl\"),\n@@ -640,17 +640,17 @@ impl CheckAttrVisitor<'_> {\n         let span = meta.span();\n         if let Some(location) = match target {\n             Target::AssocTy => {\n-                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n-                let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n+                let parent_def_id = self.tcx.hir().get_parent_item(hir_id);\n+                let containing_item = self.tcx.hir().expect_item(parent_def_id);\n                 if Target::from_item(containing_item) == Target::Impl {\n                     Some(\"type alias in implementation block\")\n                 } else {\n                     None\n                 }\n             }\n             Target::AssocConst => {\n-                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n-                let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n+                let parent_def_id = self.tcx.hir().get_parent_item(hir_id);\n+                let containing_item = self.tcx.hir().expect_item(parent_def_id);\n                 // We can't link to trait impl's consts.\n                 let err = \"associated constant in trait implementation block\";\n                 match containing_item.kind {"}]}