{"sha": "ff336aa6f9cd3f7e3176bbc56c475e66b86bd377", "node_id": "C_kwDOAAsO6NoAKGZmMzM2YWE2ZjljZDNmN2UzMTc2YmJjNTZjNDc1ZTY2Yjg2YmQzNzc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-26T23:51:49Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-26T23:51:49Z"}, "message": "Small cleanup to one_bound_for_assoc_type", "tree": {"sha": "6e5640ef70b33e9f3387c43e0f3c273739210ba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e5640ef70b33e9f3387c43e0f3c273739210ba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff336aa6f9cd3f7e3176bbc56c475e66b86bd377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff336aa6f9cd3f7e3176bbc56c475e66b86bd377", "html_url": "https://github.com/rust-lang/rust/commit/ff336aa6f9cd3f7e3176bbc56c475e66b86bd377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff336aa6f9cd3f7e3176bbc56c475e66b86bd377/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31448badfd74ea72d2c8622cc60d3dca889ef7d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/31448badfd74ea72d2c8622cc60d3dca889ef7d4", "html_url": "https://github.com/rust-lang/rust/commit/31448badfd74ea72d2c8622cc60d3dca889ef7d4"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "00a24fdf5fcd8b10d94e6b4134aa838481f892a5", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ff336aa6f9cd3f7e3176bbc56c475e66b86bd377/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff336aa6f9cd3f7e3176bbc56c475e66b86bd377/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=ff336aa6f9cd3f7e3176bbc56c475e66b86bd377", "patch": "@@ -50,6 +50,7 @@ use rustc_trait_selection::traits::{self, astconv_object_safety_violations, Obli\n \n use smallvec::{smallvec, SmallVec};\n use std::collections::BTreeSet;\n+use std::fmt::Display;\n use std::slice;\n \n #[derive(Debug)]\n@@ -1095,11 +1096,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // those that do.\n                 self.one_bound_for_assoc_type(\n                     || traits::supertraits(tcx, trait_ref),\n-                    || trait_ref.print_only_trait_path().to_string(),\n+                    trait_ref.print_only_trait_path(),\n                     binding.item_name,\n                     path_span,\n-                    || match binding.kind {\n-                        ConvertedBindingKind::Equality(ty) => Some(ty.to_string()),\n+                    match binding.kind {\n+                        ConvertedBindingKind::Equality(term) => Some(term),\n                         _ => None,\n                     },\n                 )?\n@@ -1789,10 +1790,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     assoc_name,\n                 )\n             },\n-            || param_name.to_string(),\n+            param_name,\n             assoc_name,\n             span,\n-            || None,\n+            None,\n         )\n     }\n \n@@ -1802,10 +1803,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     fn one_bound_for_assoc_type<I>(\n         &self,\n         all_candidates: impl Fn() -> I,\n-        ty_param_name: impl Fn() -> String,\n+        ty_param_name: impl Display,\n         assoc_name: Ident,\n         span: Span,\n-        is_equality: impl Fn() -> Option<String>,\n+        is_equality: Option<ty::Term<'tcx>>,\n     ) -> Result<ty::PolyTraitRef<'tcx>, ErrorGuaranteed>\n     where\n         I: Iterator<Item = ty::PolyTraitRef<'tcx>>,\n@@ -1821,7 +1822,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             (None, None) => {\n                 let reported = self.complain_about_assoc_type_not_found(\n                     all_candidates,\n-                    &ty_param_name(),\n+                    &ty_param_name.to_string(),\n                     assoc_name,\n                     span,\n                 );\n@@ -1833,7 +1834,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if let Some(bound2) = next_cand {\n             debug!(?bound2);\n \n-            let is_equality = is_equality();\n             let bounds = IntoIterator::into_iter([bound, bound2]).chain(matching_candidates);\n             let mut err = if is_equality.is_some() {\n                 // More specific Error Index entry.\n@@ -1843,7 +1843,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     E0222,\n                     \"ambiguous associated type `{}` in bounds of `{}`\",\n                     assoc_name,\n-                    ty_param_name()\n+                    ty_param_name\n                 )\n             } else {\n                 struct_span_err!(\n@@ -1852,7 +1852,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     E0221,\n                     \"ambiguous associated type `{}` in bounds of `{}`\",\n                     assoc_name,\n-                    ty_param_name()\n+                    ty_param_name\n                 )\n             };\n             err.span_label(span, format!(\"ambiguous associated type `{}`\", assoc_name));\n@@ -1886,18 +1886,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         err.span_suggestion_verbose(\n                             span.with_hi(assoc_name.span.lo()),\n                             \"use fully qualified syntax to disambiguate\",\n-                            format!(\n-                                \"<{} as {}>::\",\n-                                ty_param_name(),\n-                                bound.print_only_trait_path(),\n-                            ),\n+                            format!(\"<{} as {}>::\", ty_param_name, bound.print_only_trait_path()),\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n                 } else {\n                     err.note(&format!(\n                         \"associated type `{}` could derive from `{}`\",\n-                        ty_param_name(),\n+                        ty_param_name,\n                         bound.print_only_trait_path(),\n                     ));\n                 }\n@@ -1906,7 +1902,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 err.help(&format!(\n                     \"consider introducing a new type parameter `T` and adding `where` constraints:\\\n                      \\n    where\\n        T: {},\\n{}\",\n-                    ty_param_name(),\n+                    ty_param_name,\n                     where_bounds.join(\",\\n\"),\n                 ));\n             }\n@@ -2070,10 +2066,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n                 self.one_bound_for_assoc_type(\n                     || traits::supertraits(tcx, ty::Binder::dummy(trait_ref.subst_identity())),\n-                    || \"Self\".to_string(),\n+                    kw::SelfUpper,\n                     assoc_ident,\n                     span,\n-                    || None,\n+                    None,\n                 )?\n             }\n             ("}]}