{"sha": "b44babf23039ed1132b0332c71e1bb959995949b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NGJhYmYyMzAzOWVkMTEzMmIwMzMyYzcxZTFiYjk1OTk5NTk0OWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-05-30T22:39:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-05-30T22:40:26Z"}, "message": "allocate return pointer only when we start the program via the start lang item", "tree": {"sha": "6eb59861db60d34bce80d96e3522dffdf3016c35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eb59861db60d34bce80d96e3522dffdf3016c35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b44babf23039ed1132b0332c71e1bb959995949b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b44babf23039ed1132b0332c71e1bb959995949b", "html_url": "https://github.com/rust-lang/rust/commit/b44babf23039ed1132b0332c71e1bb959995949b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b44babf23039ed1132b0332c71e1bb959995949b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8e0b792222af098f01d778cccb6efb5affde52a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8e0b792222af098f01d778cccb6efb5affde52a", "html_url": "https://github.com/rust-lang/rust/commit/b8e0b792222af098f01d778cccb6efb5affde52a"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "85c23ef029412c8b3d374fb1d50155197ff04722", "filename": "src/eval_context.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b44babf23039ed1132b0332c71e1bb959995949b/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b44babf23039ed1132b0332c71e1bb959995949b/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=b44babf23039ed1132b0332c71e1bb959995949b", "patch": "@@ -1689,6 +1689,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     ) -> EvalResult<'tcx> {\n         let main_instance = ty::Instance::mono(ecx.tcx, main_id);\n         let main_mir = ecx.load_mir(main_instance.def)?;\n+        let mut cleanup_ptr = None; // Pointer to be deallocated when we are done\n \n         if !main_mir.return_ty.is_nil() || main_mir.arg_count != 0 {\n             return Err(EvalError::Unimplemented(\"miri does not support main functions without `fn()` type signatures\".to_owned()));\n@@ -1702,12 +1703,22 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                 return Err(EvalError::AbiViolation(format!(\"'start' lang item should have three arguments, but has {}\", start_mir.arg_count)));\n             }\n \n+            // Return value\n+            let ret_ptr = {\n+                let ty = ecx.tcx.types.isize;\n+                let layout = ecx.type_layout_with_substs(ty, Substs::empty())?;\n+                let size = layout.size(&ecx.tcx.data_layout).bytes();\n+                let align = layout.align(&ecx.tcx.data_layout).abi();\n+                ecx.memory.allocate(size, align)?\n+            };\n+            cleanup_ptr = Some(ret_ptr);\n+\n             // Push our stack frame\n             ecx.push_stack_frame(\n                 start_instance,\n                 start_mir.span,\n                 start_mir,\n-                Lvalue::from_ptr(Pointer::zst_ptr()), // we'll fix the return lvalue later\n+                Lvalue::from_ptr(ret_ptr),\n                 StackPopCleanup::None,\n             )?;\n \n@@ -1739,19 +1750,10 @@ pub fn eval_main<'a, 'tcx: 'a>(\n             )?;\n         }\n \n-        // Allocate memory for the return value.  We have to do this when a stack frame was already pushed as the type code below\n-        // calls EvalContext::substs, which needs a frame to be allocated (?!?)\n-        let ret_ptr = {\n-            let ty = ecx.tcx.types.isize;\n-            let layout = ecx.type_layout(ty)?;\n-            let size = layout.size(&ecx.tcx.data_layout).bytes();\n-            let align = layout.align(&ecx.tcx.data_layout).abi();\n-            ecx.memory.allocate(size, align)?\n-        };\n-        ecx.frame_mut().return_lvalue = Lvalue::from_ptr(ret_ptr);\n-\n         while ecx.step()? {}\n-        ecx.memory.deallocate(ret_ptr)?;\n+        if let Some(cleanup_ptr) = cleanup_ptr {\n+            ecx.memory.deallocate(cleanup_ptr)?;\n+        }\n         return Ok(());\n     }\n "}]}