{"sha": "64bcfd246ca0a7522069bad9f6217ec3e783db8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YmNmZDI0NmNhMGE3NTIyMDY5YmFkOWY2MjE3ZWMzZTc4M2RiOGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-05T02:46:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-05T02:46:21Z"}, "message": "auto merge of #10803 : vmx/rust/integer-decode, r=cmr\n\nThe `integer_decode()` function decodes a float (f32/f64)\r\ninto integers containing the mantissa, exponent and sign.\r\n\r\nIt's needed for `rationalize()` implementation of #9838.\r\n\r\nThe code got ported from ABCL [1].\r\n\r\n[1] http://abcl.org/trac/browser/trunk/abcl/src/org/armedbear/lisp/FloatFunctions.java?rev=14465#L94\r\n\r\nI got the permission to use this code for Rust from Peter Graves (the ABCL copyright holder) . If there's any further IP clearance needed, let me know.", "tree": {"sha": "29d84af1290b370489369d86174ee85fcbd24e6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29d84af1290b370489369d86174ee85fcbd24e6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64bcfd246ca0a7522069bad9f6217ec3e783db8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64bcfd246ca0a7522069bad9f6217ec3e783db8e", "html_url": "https://github.com/rust-lang/rust/commit/64bcfd246ca0a7522069bad9f6217ec3e783db8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64bcfd246ca0a7522069bad9f6217ec3e783db8e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edb9e85ce2e3708abe3a81d9645054e3eab85395", "url": "https://api.github.com/repos/rust-lang/rust/commits/edb9e85ce2e3708abe3a81d9645054e3eab85395", "html_url": "https://github.com/rust-lang/rust/commit/edb9e85ce2e3708abe3a81d9645054e3eab85395"}, {"sha": "30a9c6e4904f1d74b5ece97a422a0f1b148f4ba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a9c6e4904f1d74b5ece97a422a0f1b148f4ba1", "html_url": "https://github.com/rust-lang/rust/commit/30a9c6e4904f1d74b5ece97a422a0f1b148f4ba1"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "92eb4a80fca6e07d816eba229c7637ed7b3a8df6", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/64bcfd246ca0a7522069bad9f6217ec3e783db8e/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bcfd246ca0a7522069bad9f6217ec3e783db8e/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=64bcfd246ca0a7522069bad9f6217ec3e783db8e", "patch": "@@ -708,6 +708,23 @@ impl Float for f32 {\n     fn next_after(&self, other: f32) -> f32 {\n         next_after(*self, other)\n     }\n+\n+    /// Returns the mantissa, exponent and sign as integers.\n+    fn integer_decode(&self) -> (u64, i16, i8) {\n+        let bits: u32 = unsafe {\n+            ::cast::transmute(*self)\n+        };\n+        let sign: i8 = if bits >> 31 == 0 { 1 } else { -1 };\n+        let mut exponent: i16 = ((bits >> 23) & 0xff) as i16;\n+        let mantissa = if exponent == 0 {\n+            (bits & 0x7fffff) << 1\n+        } else {\n+            (bits & 0x7fffff) | 0x800000\n+        };\n+        // Exponent bias + mantissa shift\n+        exponent -= 127 + 23;\n+        (mantissa as u64, exponent, sign)\n+    }\n }\n \n //\n@@ -1273,4 +1290,16 @@ mod tests {\n         assert_eq!(match neg_inf.frexp() { (x, _) => x }, neg_inf)\n         assert!(match nan.frexp() { (x, _) => x.is_nan() })\n     }\n+\n+    #[test]\n+    fn test_integer_decode() {\n+        assert_eq!(3.14159265359f32.integer_decode(), (13176795u64, -22i16, 1i8));\n+        assert_eq!((-8573.5918555f32).integer_decode(), (8779358u64, -10i16, -1i8));\n+        assert_eq!(2f32.pow(&100.0).integer_decode(), (8388608u64, 77i16, 1i8));\n+        assert_eq!(0f32.integer_decode(), (0u64, -150i16, 1i8));\n+        assert_eq!((-0f32).integer_decode(), (0u64, -150i16, -1i8));\n+        assert_eq!(INFINITY.integer_decode(), (8388608u64, 105i16, 1i8));\n+        assert_eq!(NEG_INFINITY.integer_decode(), (8388608u64, 105i16, -1i8));\n+        assert_eq!(NAN.integer_decode(), (12582912u64, 105i16, 1i8));\n+    }\n }"}, {"sha": "2dfb23283df587312c5030338ab7b0256f2563f2", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/64bcfd246ca0a7522069bad9f6217ec3e783db8e/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bcfd246ca0a7522069bad9f6217ec3e783db8e/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=64bcfd246ca0a7522069bad9f6217ec3e783db8e", "patch": "@@ -756,6 +756,23 @@ impl Float for f64 {\n     fn next_after(&self, other: f64) -> f64 {\n         next_after(*self, other)\n     }\n+\n+    /// Returns the mantissa, exponent and sign as integers.\n+    fn integer_decode(&self) -> (u64, i16, i8) {\n+        let bits: u64 = unsafe {\n+            ::cast::transmute(*self)\n+        };\n+        let sign: i8 = if bits >> 63 == 0 { 1 } else { -1 };\n+        let mut exponent: i16 = ((bits >> 52) & 0x7ff) as i16;\n+        let mantissa = if exponent == 0 {\n+            (bits & 0xfffffffffffff) << 1\n+        } else {\n+            (bits & 0xfffffffffffff) | 0x10000000000000\n+        };\n+        // Exponent bias + mantissa shift\n+        exponent -= 1023 + 52;\n+        (mantissa, exponent, sign)\n+    }\n }\n \n //\n@@ -1323,4 +1340,16 @@ mod tests {\n         assert_eq!(match neg_inf.frexp() { (x, _) => x }, neg_inf)\n         assert!(match nan.frexp() { (x, _) => x.is_nan() })\n     }\n+\n+    #[test]\n+    fn test_integer_decode() {\n+        assert_eq!(3.14159265359f64.integer_decode(), (7074237752028906u64, -51i16, 1i8));\n+        assert_eq!((-8573.5918555f64).integer_decode(), (4713381968463931u64, -39i16, -1i8));\n+        assert_eq!(2f64.pow(&100.0).integer_decode(), (4503599627370496u64, 48i16, 1i8));\n+        assert_eq!(0f64.integer_decode(), (0u64, -1075i16, 1i8));\n+        assert_eq!((-0f64).integer_decode(), (0u64, -1075i16, -1i8));\n+        assert_eq!(INFINITY.integer_decode(), (4503599627370496u64, 972i16, 1i8));\n+        assert_eq!(NEG_INFINITY.integer_decode(), (4503599627370496, 972, -1));\n+        assert_eq!(NAN.integer_decode(), (6755399441055744u64, 972i16, 1i8));\n+    }\n }"}, {"sha": "79efe5934d5c52e17dd226e69edadeb30c6546ef", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64bcfd246ca0a7522069bad9f6217ec3e783db8e/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64bcfd246ca0a7522069bad9f6217ec3e783db8e/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=64bcfd246ca0a7522069bad9f6217ec3e783db8e", "patch": "@@ -532,6 +532,8 @@ pub trait Float: Real\n     fn ln_1p(&self) -> Self;\n     fn mul_add(&self, a: Self, b: Self) -> Self;\n     fn next_after(&self, other: Self) -> Self;\n+\n+    fn integer_decode(&self) -> (u64, i16, i8);\n }\n \n /// Returns the exponential of the number, minus `1`, `exp(n) - 1`, in a way"}]}