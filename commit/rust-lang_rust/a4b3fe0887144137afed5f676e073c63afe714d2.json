{"sha": "a4b3fe0887144137afed5f676e073c63afe714d2", "node_id": "C_kwDOAAsO6NoAKGE0YjNmZTA4ODcxNDQxMzdhZmVkNWY2NzZlMDczYzYzYWZlNzE0ZDI", "commit": {"author": {"name": "woppopo", "email": "woppopo@protonmail.com", "date": "2021-12-12T04:45:27Z"}, "committer": {"name": "woppopo", "email": "woppopo@protonmail.com", "date": "2021-12-12T04:45:27Z"}, "message": "Make `PTR::as_ref` and similar methods `const`.", "tree": {"sha": "2e8917d2f9c0d4319c105484e4a63752ece7376e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e8917d2f9c0d4319c105484e4a63752ece7376e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4b3fe0887144137afed5f676e073c63afe714d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b3fe0887144137afed5f676e073c63afe714d2", "html_url": "https://github.com/rust-lang/rust/commit/a4b3fe0887144137afed5f676e073c63afe714d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4b3fe0887144137afed5f676e073c63afe714d2/comments", "author": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "html_url": "https://github.com/rust-lang/rust/commit/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "40bd2f2c12a04445376e326cbfe40eb7c626ecc9", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a4b3fe0887144137afed5f676e073c63afe714d2/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b3fe0887144137afed5f676e073c63afe714d2/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=a4b3fe0887144137afed5f676e073c63afe714d2", "patch": "@@ -163,8 +163,9 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n     #[inline]\n-    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n+    pub const unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n         // SAFETY: the caller must guarantee that `self` is valid\n         // for a reference if it isn't null.\n         if self.is_null() { None } else { unsafe { Some(&*self) } }\n@@ -211,7 +212,8 @@ impl<T: ?Sized> *const T {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_ref<'a>(self) -> Option<&'a MaybeUninit<T>>\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_ref<'a>(self) -> Option<&'a MaybeUninit<T>>\n     where\n         T: Sized,\n     {\n@@ -1068,7 +1070,8 @@ impl<T> *const [T] {\n     /// [allocated object]: crate::ptr#allocated-object\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]> {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]> {\n         if self.is_null() {\n             None\n         } else {"}, {"sha": "5ab49b5dc5fd3303608d4ae6398ce5ed3a218f3e", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a4b3fe0887144137afed5f676e073c63afe714d2/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b3fe0887144137afed5f676e073c63afe714d2/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=a4b3fe0887144137afed5f676e073c63afe714d2", "patch": "@@ -166,8 +166,9 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n     #[inline]\n-    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n+    pub const unsafe fn as_ref<'a>(self) -> Option<&'a T> {\n         // SAFETY: the caller must guarantee that `self` is valid for a\n         // reference if it isn't null.\n         if self.is_null() { None } else { unsafe { Some(&*self) } }\n@@ -217,7 +218,8 @@ impl<T: ?Sized> *mut T {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_ref<'a>(self) -> Option<&'a MaybeUninit<T>>\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_ref<'a>(self) -> Option<&'a MaybeUninit<T>>\n     where\n         T: Sized,\n     {\n@@ -411,8 +413,9 @@ impl<T: ?Sized> *mut T {\n     /// println!(\"{:?}\", s); // It'll print: \"[4, 2, 3]\".\n     /// ```\n     #[stable(feature = \"ptr_as_ref\", since = \"1.9.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n     #[inline]\n-    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {\n+    pub const unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {\n         // SAFETY: the caller must guarantee that `self` is be valid for\n         // a mutable reference if it isn't null.\n         if self.is_null() { None } else { unsafe { Some(&mut *self) } }\n@@ -446,7 +449,8 @@ impl<T: ?Sized> *mut T {\n     /// [the module documentation]: crate::ptr#safety\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_mut<'a>(self) -> Option<&'a mut MaybeUninit<T>>\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_mut<'a>(self) -> Option<&'a mut MaybeUninit<T>>\n     where\n         T: Sized,\n     {\n@@ -1334,7 +1338,8 @@ impl<T> *mut [T] {\n     /// [allocated object]: crate::ptr#allocated-object\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]> {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_slice<'a>(self) -> Option<&'a [MaybeUninit<T>]> {\n         if self.is_null() {\n             None\n         } else {\n@@ -1385,7 +1390,8 @@ impl<T> *mut [T] {\n     /// [allocated object]: crate::ptr#allocated-object\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_slice_mut<'a>(self) -> Option<&'a mut [MaybeUninit<T>]> {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_slice_mut<'a>(self) -> Option<&'a mut [MaybeUninit<T>]> {\n         if self.is_null() {\n             None\n         } else {"}, {"sha": "539ad342507960bb7e94c9fe69e05c4f9e016dd9", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a4b3fe0887144137afed5f676e073c63afe714d2/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4b3fe0887144137afed5f676e073c63afe714d2/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=a4b3fe0887144137afed5f676e073c63afe714d2", "patch": "@@ -122,7 +122,8 @@ impl<T: Sized> NonNull<T> {\n     #[inline]\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_ref<'a>(&self) -> &'a MaybeUninit<T> {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_ref<'a>(&self) -> &'a MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &*self.cast().as_ptr() }\n@@ -155,7 +156,8 @@ impl<T: Sized> NonNull<T> {\n     #[inline]\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_mut<'a>(&mut self) -> &'a mut MaybeUninit<T> {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_mut<'a>(&mut self) -> &'a mut MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &mut *self.cast().as_ptr() }\n@@ -316,9 +318,10 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n     #[must_use]\n     #[inline]\n-    pub unsafe fn as_ref<'a>(&self) -> &'a T {\n+    pub const unsafe fn as_ref<'a>(&self) -> &'a T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &*self.as_ptr() }\n@@ -366,9 +369,10 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n     #[must_use]\n     #[inline]\n-    pub unsafe fn as_mut<'a>(&mut self) -> &'a mut T {\n+    pub const unsafe fn as_mut<'a>(&mut self) -> &'a mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a mutable reference.\n         unsafe { &mut *self.as_ptr() }\n@@ -534,7 +538,8 @@ impl<T> NonNull<[T]> {\n     #[inline]\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_slice<'a>(&self) -> &'a [MaybeUninit<T>] {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_slice<'a>(&self) -> &'a [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice`.\n         unsafe { slice::from_raw_parts(self.cast().as_ptr(), self.len()) }\n     }\n@@ -596,7 +601,8 @@ impl<T> NonNull<[T]> {\n     #[inline]\n     #[must_use]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_slice_mut<'a>(&self) -> &'a mut [MaybeUninit<T>] {\n+    #[rustc_const_unstable(feature = \"const_ptr_as_ref\", issue = \"91822\")]\n+    pub const unsafe fn as_uninit_slice_mut<'a>(&self) -> &'a mut [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice_mut`.\n         unsafe { slice::from_raw_parts_mut(self.cast().as_ptr(), self.len()) }\n     }"}]}