{"sha": "4d21d302a11b743c141ad4292a3b7fd751a4e733", "node_id": "C_kwDOAAsO6NoAKDRkMjFkMzAyYTExYjc0M2MxNDFhZDQyOTJhM2I3ZmQ3NTFhNGU3MzM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-24T00:22:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-24T00:22:07Z"}, "message": "Rollup merge of #109536 - petrochenkov:qcstore3, r=cjgillot\n\nresolve: Rename some cstore methods to match queries and add comments\n\nabout costs associated with replacing them with query calls.\n\nSupersedes https://github.com/rust-lang/rust/pull/108346.\nr? `@cjgillot`", "tree": {"sha": "be19f504776a0c62f11c339e52081013a43e696c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be19f504776a0c62f11c339e52081013a43e696c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d21d302a11b743c141ad4292a3b7fd751a4e733", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHO0vCRBK7hj4Ov3rIwAAPTUIAFoXfszrT9IxUq+FhCGqQ1+j\nlrhz5yMkLCTFoFUPbcqFpW63K9LaaF/9Yj4Z2mjkDmY4tB73dgIjpovTwgw8ZW6k\nO9JrINjTsx3mAXDGfDgwnBd8KCgeKJEkLzMSqp4znK4tTfhaucuQQHD5lwSNq/8j\nvGOaanoy6NGPJJMihfO4n6ErNofGZxfU3vxpjZJEHGAL4zdQ/oKj/BgIEil9esJ9\nZOjKi2qpjXtCXoyRpKOWRSo3JfbwVjhD2w0np2J4X2wwBk3s35DBU1vYiEMfbmBk\n7inEmuZ513ErOm/vdvR0F0Hrq5ptgCcWhaBj62Ilxw7e92C4LYJNc3zw0djJXmI=\n=DqE0\n-----END PGP SIGNATURE-----\n", "payload": "tree be19f504776a0c62f11c339e52081013a43e696c\nparent 686bd46d8aa78b0834b2aa76d56a576f259098eb\nparent 1cec923fbb9f5a71ff9664e9c8eba9d40ed02319\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679617327 +0100\ncommitter GitHub <noreply@github.com> 1679617327 +0100\n\nRollup merge of #109536 - petrochenkov:qcstore3, r=cjgillot\n\nresolve: Rename some cstore methods to match queries and add comments\n\nabout costs associated with replacing them with query calls.\n\nSupersedes https://github.com/rust-lang/rust/pull/108346.\nr? `@cjgillot`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d21d302a11b743c141ad4292a3b7fd751a4e733", "html_url": "https://github.com/rust-lang/rust/commit/4d21d302a11b743c141ad4292a3b7fd751a4e733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d21d302a11b743c141ad4292a3b7fd751a4e733/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "686bd46d8aa78b0834b2aa76d56a576f259098eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/686bd46d8aa78b0834b2aa76d56a576f259098eb", "html_url": "https://github.com/rust-lang/rust/commit/686bd46d8aa78b0834b2aa76d56a576f259098eb"}, {"sha": "1cec923fbb9f5a71ff9664e9c8eba9d40ed02319", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cec923fbb9f5a71ff9664e9c8eba9d40ed02319", "html_url": "https://github.com/rust-lang/rust/commit/1cec923fbb9f5a71ff9664e9c8eba9d40ed02319"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "06a64f0db0e3232da08399f4b21785f34479d217", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d21d302a11b743c141ad4292a3b7fd751a4e733/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d21d302a11b743c141ad4292a3b7fd751a4e733/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=4d21d302a11b743c141ad4292a3b7fd751a4e733", "patch": "@@ -1041,13 +1041,6 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.tables.optimized_mir.get(self, id).is_some()\n     }\n \n-    fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {\n-        match self.def_kind(id) {\n-            DefKind::Mod | DefKind::Enum | DefKind::Trait => self.get_expn_that_defined(id, sess),\n-            _ => panic!(\"Expected module, found {:?}\", self.local_def_id(id)),\n-        }\n-    }\n-\n     fn get_fn_has_self_parameter(self, id: DefIndex, sess: &'a Session) -> bool {\n         self.root\n             .tables"}, {"sha": "3a50d7c93635c58b9aa675084b9029c58c50469d", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d21d302a11b743c141ad4292a3b7fd751a4e733/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d21d302a11b743c141ad4292a3b7fd751a4e733/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=4d21d302a11b743c141ad4292a3b7fd751a4e733", "patch": "@@ -490,6 +490,9 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n                 .alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(LOCAL_CRATE))\n         },\n         crates: |tcx, ()| {\n+            // The list of loaded crates is now frozen in query cache,\n+            // so make sure cstore is not mutably accessed from here on.\n+            tcx.untracked().cstore.leak();\n             tcx.arena.alloc_from_iter(CStore::from_tcx(tcx).iter_crate_data().map(|(cnum, _)| cnum))\n         },\n         ..*providers\n@@ -537,16 +540,16 @@ impl CStore {\n         )\n     }\n \n-    pub fn get_span_untracked(&self, def_id: DefId, sess: &Session) -> Span {\n+    pub fn def_span_untracked(&self, def_id: DefId, sess: &Session) -> Span {\n         self.get_crate_data(def_id.krate).get_span(def_id.index, sess)\n     }\n \n-    pub fn def_kind(&self, def: DefId) -> DefKind {\n+    pub fn def_kind_untracked(&self, def: DefId) -> DefKind {\n         self.get_crate_data(def.krate).def_kind(def.index)\n     }\n \n-    pub fn module_expansion_untracked(&self, def_id: DefId, sess: &Session) -> ExpnId {\n-        self.get_crate_data(def_id.krate).module_expansion(def_id.index, sess)\n+    pub fn expn_that_defined_untracked(&self, def_id: DefId, sess: &Session) -> ExpnId {\n+        self.get_crate_data(def_id.krate).get_expn_that_defined(def_id.index, sess)\n     }\n \n     /// Only public-facing way to traverse all the definitions in a non-local crate."}, {"sha": "19ccb3a6484af217e1c9b4309c9987dcbd180267", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d21d302a11b743c141ad4292a3b7fd751a4e733/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d21d302a11b743c141ad4292a3b7fd751a4e733/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=4d21d302a11b743c141ad4292a3b7fd751a4e733", "patch": "@@ -114,13 +114,16 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         if !def_id.is_local() {\n-            let def_kind = self.cstore().def_kind(def_id);\n+            // Query `def_kind` is not used because query system overhead is too expensive here.\n+            let def_kind = self.cstore().def_kind_untracked(def_id);\n             if let DefKind::Mod | DefKind::Enum | DefKind::Trait = def_kind {\n                 let parent = self\n                     .tcx\n                     .opt_parent(def_id)\n                     .map(|parent_id| self.get_nearest_non_block_module(parent_id));\n-                let expn_id = self.cstore().module_expansion_untracked(def_id, &self.tcx.sess);\n+                // Query `expn_that_defined` is not used because\n+                // hashing spans in its result is expensive.\n+                let expn_id = self.cstore().expn_that_defined_untracked(def_id, &self.tcx.sess);\n                 return Some(self.new_module(\n                     parent,\n                     ModuleKind::Def(def_kind, def_id, self.tcx.item_name(def_id)),\n@@ -194,6 +197,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     }\n \n     pub(crate) fn build_reduced_graph_external(&mut self, module: Module<'a>) {\n+        // Query `module_children` is not used because hashing spans in its result is expensive.\n         let children =\n             Vec::from_iter(self.cstore().module_children_untracked(module.def_id(), self.tcx.sess));\n         for child in children {"}, {"sha": "0e84432a5b4bf85ff23fe93ffb824d2d0a81a220", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d21d302a11b743c141ad4292a3b7fd751a4e733/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d21d302a11b743c141ad4292a3b7fd751a4e733/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4d21d302a11b743c141ad4292a3b7fd751a4e733", "patch": "@@ -1875,7 +1875,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     fn def_span(&self, def_id: DefId) -> Span {\n         match def_id.as_local() {\n             Some(def_id) => self.tcx.source_span(def_id),\n-            None => self.cstore().get_span_untracked(def_id, self.tcx.sess),\n+            // Query `def_span` is not used because hashing its result span is expensive.\n+            None => self.cstore().def_span_untracked(def_id, self.tcx.sess),\n         }\n     }\n "}]}