{"sha": "71460d4d1144de2ddc4a088b81a30c6bc47dee59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNDYwZDRkMTE0NGRlMmRkYzRhMDg4YjgxYTMwYzZiYzQ3ZGVlNTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-03T10:15:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-03T10:15:00Z"}, "message": "volatile operations docs: clarify that this does not help wrt. concurrency", "tree": {"sha": "5f32b18ef6031bcfe242a272ba97039efac6f5de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f32b18ef6031bcfe242a272ba97039efac6f5de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71460d4d1144de2ddc4a088b81a30c6bc47dee59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71460d4d1144de2ddc4a088b81a30c6bc47dee59", "html_url": "https://github.com/rust-lang/rust/commit/71460d4d1144de2ddc4a088b81a30c6bc47dee59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71460d4d1144de2ddc4a088b81a30c6bc47dee59/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dae47051315793d4d4d043b4b8b03c51e3dc877", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dae47051315793d4d4d043b4b8b03c51e3dc877", "html_url": "https://github.com/rust-lang/rust/commit/4dae47051315793d4d4d043b4b8b03c51e3dc877"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "c8670e5ec34d347b9f2f5aef6180ee29f10a0b4f", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/71460d4d1144de2ddc4a088b81a30c6bc47dee59/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71460d4d1144de2ddc4a088b81a30c6bc47dee59/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=71460d4d1144de2ddc4a088b81a30c6bc47dee59", "patch": "@@ -448,6 +448,12 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n /// `write_bytes`, or `copy`). Note that `*src = foo` counts as a use\n /// because it will attempt to drop the value previously at `*src`.\n ///\n+/// Just like in C, whether an operation is volatile has no bearing whatsoever\n+/// on questions involving concurrent access from multiple threads. Volatile\n+/// accesses behave exactly like non-atomic accesses in that regard. In particular,\n+/// a race between a `read_volatile` and any write operation to the same location\n+/// is undefined behavior.\n+///\n /// # Examples\n ///\n /// Basic usage:\n@@ -498,6 +504,12 @@ pub unsafe fn read_volatile<T>(src: *const T) -> T {\n /// This is appropriate for initializing uninitialized memory, or overwriting\n /// memory that has previously been `read` from.\n ///\n+/// Just like in C, whether an operation is volatile has no bearing whatsoever\n+/// on questions involving concurrent access from multiple threads. Volatile\n+/// accesses behave exactly like non-atomic accesses in that regard. In particular,\n+/// a race between a `write_volatile` and any other operation (reading or writing)\n+/// on the same location is undefined behavior.\n+///\n /// # Examples\n ///\n /// Basic usage:\n@@ -1057,6 +1069,12 @@ impl<T: ?Sized> *const T {\n     /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n+    /// Just like in C, whether an operation is volatile has no bearing whatsoever\n+    /// on questions involving concurrent access from multiple threads. Volatile\n+    /// accesses behave exactly like non-atomic accesses in that regard. In particular,\n+    /// a race between a `read_volatile` and any write operation to the same location\n+    /// is undefined behavior.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1790,6 +1808,12 @@ impl<T: ?Sized> *mut T {\n     /// `write_bytes`, or `copy`). Note that `*self = foo` counts as a use\n     /// because it will attempt to drop the value previously at `*self`.\n     ///\n+    /// Just like in C, whether an operation is volatile has no bearing whatsoever\n+    /// on questions involving concurrent access from multiple threads. Volatile\n+    /// accesses behave exactly like non-atomic accesses in that regard. In particular,\n+    /// a race between a `read_volatile` and any write operation to the same location\n+    /// is undefined behavior.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -2105,6 +2129,12 @@ impl<T: ?Sized> *mut T {\n     /// This is appropriate for initializing uninitialized memory, or overwriting\n     /// memory that has previously been `read` from.\n     ///\n+    /// Just like in C, whether an operation is volatile has no bearing whatsoever\n+    /// on questions involving concurrent access from multiple threads. Volatile\n+    /// accesses behave exactly like non-atomic accesses in that regard. In particular,\n+    /// a race between a `write_volatile` and any other operation (reading or writing)\n+    /// on the same location is undefined behavior.\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:"}]}