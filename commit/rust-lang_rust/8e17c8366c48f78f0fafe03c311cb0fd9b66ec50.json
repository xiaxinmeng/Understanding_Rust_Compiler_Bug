{"sha": "8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMTdjODM2NmM0OGY3OGYwZmFmZTAzYzMxMWNiMGZkOWI2NmVjNTA=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-03-13T19:03:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-13T19:03:24Z"}, "message": "Rollup merge of #69802 - matthiaskrgr:cl1ppy, r=Dylan-DPC\n\nfix more clippy findings\n\n* reduce references on match patterns (clippy::match_ref_pats)\n* Use writeln!(fmt, \"word\") instead of write!(fmt, \"word\\n\") (clippy::write_with_newline)\n* libtest: remove redundant argument to writeln!() (clippy::writeln_empty_string)\n* remove unneeded mutable references (cippy::unnecessary_mut_passed)\n* libtest: declare variables as floats instead of casting them (clippy::unnecessary_cast)\n* rustdoc: remove redundant static lifetimes (clippy::redundant_static_lifetimes)\n* call .as_deref() instead of .as_ref().map(Deref::deref) (clippy::option_as_ref_deref)\n* iterate over a maps values directly. (clippy::for_kv_map)\n* rustdoc: simplify boolean condition (clippy::nonminimal_bool)\n* Use ?-operator in more places (clippy::question_mark, had some false negatives fixed recently)\n* rustdoc: Use .any(p) instead of find(p).is_some(). (clippy::search_is_some)\n* rustdoc: don't call into_iter() on iterator. (clippy::identity_conversion)", "tree": {"sha": "aa49ba5f5b538e93b66790a858a31688e710ce9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa49ba5f5b538e93b66790a858a31688e710ce9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJea9j9CRBK7hj4Ov3rIwAAdHIIAAif0D3TTPRpPOP+EYt4yotu\nhZg03ilLbA5vh5nuIzFxR+bl6L+5lr+0Dlwt6jQaH4O7moCc8qoY0OuPUYx8nY1J\n3rH53p/KI9sYr6RxzvBlu3j93kL3tdO+skmWn/Quc9OiTLol0Eb6hnHueorWVOVh\nTcZT45uGKLmA7D0DnimAAbcNNcMLBu5Fo0grxulhXFPb8HtDHfVMB4bYf2nbZtpP\nNRiJJX73PoQN0BzScaKTzTPjtDWWb3GHBI6sKkdhMxSbDcGi7L5o9jKSlhb3Qb3A\ndkxnu4m5h3mrW0E6xf6Ssh3h04j7KJtxzxRvpVh3RDSQMIxeJQAR+JCpy2cRt7c=\n=QYFf\n-----END PGP SIGNATURE-----\n", "payload": "tree aa49ba5f5b538e93b66790a858a31688e710ce9a\nparent 35df9cca7c425d999cf98e4b852fbcb584fbbd7d\nparent 83511383706e069bc7c6b3a7d957846ad51e818f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1584126204 +0900\ncommitter GitHub <noreply@github.com> 1584126204 +0900\n\nRollup merge of #69802 - matthiaskrgr:cl1ppy, r=Dylan-DPC\n\nfix more clippy findings\n\n* reduce references on match patterns (clippy::match_ref_pats)\n* Use writeln!(fmt, \"word\") instead of write!(fmt, \"word\\n\") (clippy::write_with_newline)\n* libtest: remove redundant argument to writeln!() (clippy::writeln_empty_string)\n* remove unneeded mutable references (cippy::unnecessary_mut_passed)\n* libtest: declare variables as floats instead of casting them (clippy::unnecessary_cast)\n* rustdoc: remove redundant static lifetimes (clippy::redundant_static_lifetimes)\n* call .as_deref() instead of .as_ref().map(Deref::deref) (clippy::option_as_ref_deref)\n* iterate over a maps values directly. (clippy::for_kv_map)\n* rustdoc: simplify boolean condition (clippy::nonminimal_bool)\n* Use ?-operator in more places (clippy::question_mark, had some false negatives fixed recently)\n* rustdoc: Use .any(p) instead of find(p).is_some(). (clippy::search_is_some)\n* rustdoc: don't call into_iter() on iterator. (clippy::identity_conversion)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "html_url": "https://github.com/rust-lang/rust/commit/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35df9cca7c425d999cf98e4b852fbcb584fbbd7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35df9cca7c425d999cf98e4b852fbcb584fbbd7d", "html_url": "https://github.com/rust-lang/rust/commit/35df9cca7c425d999cf98e4b852fbcb584fbbd7d"}, {"sha": "83511383706e069bc7c6b3a7d957846ad51e818f", "url": "https://api.github.com/repos/rust-lang/rust/commits/83511383706e069bc7c6b3a7d957846ad51e818f", "html_url": "https://github.com/rust-lang/rust/commit/83511383706e069bc7c6b3a7d957846ad51e818f"}], "stats": {"total": 196, "additions": 78, "deletions": 118}, "files": [{"sha": "ffa418cba6c99346b91892adabbcfba74f25a2df", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -365,11 +365,7 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n         let haystack = self.haystack.as_bytes();\n         loop {\n             // get the haystack up to but not including the last character searched\n-            let bytes = if let Some(slice) = haystack.get(self.finger..self.finger_back) {\n-                slice\n-            } else {\n-                return None;\n-            };\n+            let bytes = haystack.get(self.finger..self.finger_back)?;\n             // the last byte of the utf8 encoded needle\n             // SAFETY: we have an invariant that `utf8_size < 5`\n             let last_byte = unsafe { *self.utf8_encoded.get_unchecked(self.utf8_size - 1) };\n@@ -575,11 +571,12 @@ macro_rules! pattern_methods {\n \n         #[inline]\n         fn is_suffix_of(self, haystack: &'a str) -> bool\n-            where $t: ReverseSearcher<'a>\n+        where\n+            $t: ReverseSearcher<'a>,\n         {\n             ($pmap)(self).is_suffix_of(haystack)\n         }\n-    }\n+    };\n }\n \n macro_rules! searcher_methods {\n@@ -614,7 +611,7 @@ macro_rules! searcher_methods {\n         fn next_reject_back(&mut self) -> Option<(usize, usize)> {\n             self.0.next_reject_back()\n         }\n-    }\n+    };\n }\n \n /////////////////////////////////////////////////////////////////////////////"}, {"sha": "4c889ef41005c4f132146310d6d2e9c9f252f23f", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -298,7 +298,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n-        let node = if let Some(node) = self.find(hir_id) { node } else { return None };\n+        let node = self.find(hir_id)?;\n \n         Some(match node {\n             Node::Item(item) => match item.kind {"}, {"sha": "69daa2da1fd0e1e9bc39fa1182b05b24a9833abb", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -346,12 +346,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         adt_did: DefId,\n         validate: &mut dyn FnMut(Self, DefId) -> Result<(), ErrorReported>,\n     ) -> Option<ty::Destructor> {\n-        let drop_trait = if let Some(def_id) = self.lang_items().drop_trait() {\n-            def_id\n-        } else {\n-            return None;\n-        };\n-\n+        let drop_trait = self.lang_items().drop_trait()?;\n         self.ensure().coherent_trait(drop_trait);\n \n         let mut dtor_did = None;"}, {"sha": "8acb2260cbe894e3b9247de271463de6c7937e59", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -1124,12 +1124,7 @@ fn extra_compiler_flags() -> Option<(Vec<String>, bool)> {\n         return None;\n     }\n \n-    let matches = if let Some(matches) = handle_options(&args) {\n-        matches\n-    } else {\n-        return None;\n-    };\n-\n+    let matches = handle_options(&args)?;\n     let mut result = Vec::new();\n     let mut excluded_cargo_defaults = false;\n     for flag in ICE_REPORT_COMPILER_FLAGS {"}, {"sha": "d221d6886e9fbd6edf8f21d50590fef73f78091a", "filename": "src/librustc_infer/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fauto_trait.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -113,7 +113,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n             return AutoTraitResult::ExplicitImpl;\n         }\n \n-        return tcx.infer_ctxt().enter(|mut infcx| {\n+        return tcx.infer_ctxt().enter(|infcx| {\n             let mut fresh_preds = FxHashSet::default();\n \n             // Due to the way projections are handled by SelectionContext, we need to run\n@@ -164,7 +164,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n \n             let (full_env, full_user_env) = self\n                 .evaluate_predicates(\n-                    &mut infcx,\n+                    &infcx,\n                     trait_did,\n                     ty,\n                     new_env,"}, {"sha": "d1d4a58fdf297369f1b580c2b8bdacadff8f64d9", "filename": "src/librustc_infer/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fspecialize%2Fmod.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -413,12 +413,7 @@ pub(super) fn specialization_graph_provider(\n fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String> {\n     use std::fmt::Write;\n \n-    let trait_ref = if let Some(tr) = tcx.impl_trait_ref(impl_def_id) {\n-        tr\n-    } else {\n-        return None;\n-    };\n-\n+    let trait_ref = tcx.impl_trait_ref(impl_def_id)?;\n     let mut w = \"impl\".to_owned();\n \n     let substs = InternalSubsts::identity_for_item(tcx, impl_def_id);"}, {"sha": "27a1373cdcc7a573a81f0fa5784d3daf94f8a883", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -944,7 +944,7 @@ fn create_generator_drop_shim<'tcx>(\n     // unrelated code from the resume part of the function\n     simplify::remove_dead_blocks(&mut body);\n \n-    dump_mir(tcx, None, \"generator_drop\", &0, source, &mut body, |_, _| Ok(()));\n+    dump_mir(tcx, None, \"generator_drop\", &0, source, &body, |_, _| Ok(()));\n \n     body\n }"}, {"sha": "f6c6f55549593c6b57bf0586b527767411ffee56", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -293,7 +293,7 @@ fn dump_matched_mir_node<'tcx>(\n         writeln!(file, \"// MIR local liveness analysis for `{}`\", node_path)?;\n         writeln!(file, \"// source = {:?}\", source)?;\n         writeln!(file, \"// pass_name = {}\", pass_name)?;\n-        writeln!(file, \"\")?;\n+        writeln!(file)?;\n         write_mir_fn(tcx, source, body, &mut file, result)?;\n         Ok(())\n     });\n@@ -316,7 +316,7 @@ pub fn write_mir_fn<'tcx>(\n         write_basic_block(tcx, block, body, &mut |_, _| Ok(()), w)?;\n         print(w, \"   \", &result.outs)?;\n         if block.index() + 1 != body.basic_blocks().len() {\n-            writeln!(w, \"\")?;\n+            writeln!(w)?;\n         }\n     }\n "}, {"sha": "f8dfddef2bbd5a087e4ba08b4445fb37580c30f1", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -134,7 +134,7 @@ fn dump_matched_mir_node<'tcx, F>(\n         if let Some(ref layout) = body.generator_layout {\n             writeln!(file, \"// generator_layout = {:?}\", layout)?;\n         }\n-        writeln!(file, \"\")?;\n+        writeln!(file)?;\n         extra_data(PassWhere::BeforeCFG, &mut file)?;\n         write_user_type_annotations(body, &mut file)?;\n         write_mir_fn(tcx, source, body, &mut extra_data, &mut file)?;\n@@ -242,13 +242,13 @@ pub fn write_mir_pretty<'tcx>(\n             first = false;\n         } else {\n             // Put empty lines between all items\n-            writeln!(w, \"\")?;\n+            writeln!(w)?;\n         }\n \n         write_mir_fn(tcx, MirSource::item(def_id), body, &mut |_, _| Ok(()), w)?;\n \n         for (i, body) in tcx.promoted_mir(def_id).iter_enumerated() {\n-            writeln!(w, \"\")?;\n+            writeln!(w)?;\n             let src = MirSource { instance: ty::InstanceDef::Item(def_id), promoted: Some(i) };\n             write_mir_fn(tcx, src, body, &mut |_, _| Ok(()), w)?;\n         }\n@@ -271,7 +271,7 @@ where\n         extra_data(PassWhere::BeforeBlock(block), w)?;\n         write_basic_block(tcx, block, body, extra_data, w)?;\n         if block.index() + 1 != body.basic_blocks().len() {\n-            writeln!(w, \"\")?;\n+            writeln!(w)?;\n         }\n     }\n \n@@ -529,7 +529,7 @@ pub fn write_mir_intro<'tcx>(\n     write_scope_tree(tcx, body, &scope_tree, w, OUTERMOST_SOURCE_SCOPE, 1)?;\n \n     // Add an empty line before the first block is printed.\n-    writeln!(w, \"\")?;\n+    writeln!(w)?;\n \n     Ok(())\n }"}, {"sha": "13d433052809db835d36652d6ef166aadc2c1d3f", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -1107,11 +1107,7 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 }\n             };\n \n-            match (\n-                lifetime_names.len(),\n-                lifetime_names.iter().next(),\n-                snippet.as_ref().map(|s| s.as_str()),\n-            ) {\n+            match (lifetime_names.len(), lifetime_names.iter().next(), snippet.as_deref()) {\n                 (1, Some(name), Some(\"&\")) => {\n                     suggest_existing(err, format!(\"&{} \", name));\n                 }"}, {"sha": "948b86225f38b7a6f735c54ec32c7069327a3a60", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -2773,12 +2773,8 @@ impl<'a> Resolver<'a> {\n             } else {\n                 let crate_id = if !speculative {\n                     self.crate_loader.process_path_extern(ident.name, ident.span)\n-                } else if let Some(crate_id) =\n-                    self.crate_loader.maybe_process_path_extern(ident.name, ident.span)\n-                {\n-                    crate_id\n                 } else {\n-                    return None;\n+                    self.crate_loader.maybe_process_path_extern(ident.name, ident.span)?\n                 };\n                 let crate_root = self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 Some("}, {"sha": "b5224e57cd2b6c4694e64564be4c39f272ff1068", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -1147,11 +1147,7 @@ impl SourceFile {\n         }\n \n         let begin = {\n-            let line = if let Some(line) = self.lines.get(line_number) {\n-                line\n-            } else {\n-                return None;\n-            };\n+            let line = self.lines.get(line_number)?;\n             let begin: BytePos = *line - self.start_pos;\n             begin.to_usize()\n         };"}, {"sha": "153f7af9f97cae1d3151579e295bd1686be6af60", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -41,11 +41,7 @@ pub fn try_inline(\n     attrs: Option<Attrs<'_>>,\n     visited: &mut FxHashSet<DefId>,\n ) -> Option<Vec<clean::Item>> {\n-    let did = if let Some(did) = res.opt_def_id() {\n-        did\n-    } else {\n-        return None;\n-    };\n+    let did = res.opt_def_id()?;\n     if did.is_local() {\n         return None;\n     }\n@@ -578,7 +574,7 @@ fn filter_non_trait_generics(trait_did: DefId, mut g: clean::Generics) -> clean:\n                     name: ref _name,\n                 },\n             ref bounds,\n-        } => !(*s == \"Self\" && did == trait_did) && !bounds.is_empty(),\n+        } => !(bounds.is_empty() || *s == \"Self\" && did == trait_did),\n         _ => true,\n     });\n     g"}, {"sha": "e13bf270440e20bfce4d11d5150e35acd8526c43", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -844,11 +844,7 @@ pub fn plain_summary_line(md: &str) -> String {\n         type Item = String;\n \n         fn next(&mut self) -> Option<String> {\n-            let next_event = self.inner.next();\n-            if next_event.is_none() {\n-                return None;\n-            }\n-            let next_event = next_event.unwrap();\n+            let next_event = self.inner.next()?;\n             let (ret, is_in) = match next_event {\n                 Event::Start(Tag::Paragraph) => (None, 1),\n                 Event::Start(Tag::Heading(_)) => (None, 1),\n@@ -870,7 +866,7 @@ pub fn plain_summary_line(md: &str) -> String {\n     }\n     let mut s = String::with_capacity(md.len() * 3 / 2);\n     let p = ParserWrapper { inner: Parser::new(md), is_in: 0, is_first: true };\n-    p.into_iter().filter(|t| !t.is_empty()).for_each(|i| s.push_str(&i));\n+    p.filter(|t| !t.is_empty()).for_each(|i| s.push_str(&i));\n     s\n }\n "}, {"sha": "ceae42cc598b4ada05ba9268e69d791ac7b9da31", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -1543,7 +1543,7 @@ impl Context {\n         }\n \n         if self.shared.sort_modules_alphabetically {\n-            for (_, items) in &mut map {\n+            for items in map.values_mut() {\n                 items.sort();\n             }\n         }\n@@ -3396,10 +3396,8 @@ fn render_assoc_items(\n         let deref_impl =\n             traits.iter().find(|t| t.inner_impl().trait_.def_id() == c.deref_trait_did);\n         if let Some(impl_) = deref_impl {\n-            let has_deref_mut = traits\n-                .iter()\n-                .find(|t| t.inner_impl().trait_.def_id() == c.deref_mut_trait_did)\n-                .is_some();\n+            let has_deref_mut =\n+                traits.iter().any(|t| t.inner_impl().trait_.def_id() == c.deref_mut_trait_did);\n             render_deref_methods(w, cx, impl_, containing_item, has_deref_mut);\n         }\n \n@@ -3740,7 +3738,7 @@ fn render_impl(\n     ) {\n         for trait_item in &t.items {\n             let n = trait_item.name.clone();\n-            if i.items.iter().find(|m| m.name == n).is_some() {\n+            if i.items.iter().any(|m| m.name == n) {\n                 continue;\n             }\n             let did = i.trait_.as_ref().unwrap().def_id().unwrap();"}, {"sha": "6790f3bd5d0b19d2cf9cf573e5c0292ea4d965d9", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -8,106 +8,106 @@\n //! directly written to a `Write` handle.\n \n /// The file contents of the main `rustdoc.css` file, responsible for the core layout of the page.\n-pub static RUSTDOC_CSS: &'static str = include_str!(\"static/rustdoc.css\");\n+pub static RUSTDOC_CSS: &str = include_str!(\"static/rustdoc.css\");\n \n /// The file contents of `settings.css`, responsible for the items on the settings page.\n-pub static SETTINGS_CSS: &'static str = include_str!(\"static/settings.css\");\n+pub static SETTINGS_CSS: &str = include_str!(\"static/settings.css\");\n \n /// The file contents of the `noscript.css` file, used in case JS isn't supported or is disabled.\n-pub static NOSCRIPT_CSS: &'static str = include_str!(\"static/noscript.css\");\n+pub static NOSCRIPT_CSS: &str = include_str!(\"static/noscript.css\");\n \n /// The file contents of `normalize.css`, included to even out standard elements between browser\n /// implementations.\n-pub static NORMALIZE_CSS: &'static str = include_str!(\"static/normalize.css\");\n+pub static NORMALIZE_CSS: &str = include_str!(\"static/normalize.css\");\n \n /// The file contents of `main.js`, which contains the core JavaScript used on documentation pages,\n /// including search behavior and docblock folding, among others.\n-pub static MAIN_JS: &'static str = include_str!(\"static/main.js\");\n+pub static MAIN_JS: &str = include_str!(\"static/main.js\");\n \n /// The file contents of `settings.js`, which contains the JavaScript used to handle the settings\n /// page.\n-pub static SETTINGS_JS: &'static str = include_str!(\"static/settings.js\");\n+pub static SETTINGS_JS: &str = include_str!(\"static/settings.js\");\n \n /// The file contents of `storage.js`, which contains functionality related to browser Local\n /// Storage, used to store documentation settings.\n-pub static STORAGE_JS: &'static str = include_str!(\"static/storage.js\");\n+pub static STORAGE_JS: &str = include_str!(\"static/storage.js\");\n \n /// The file contents of `brush.svg`, the icon used for the theme-switch button.\n-pub static BRUSH_SVG: &'static [u8] = include_bytes!(\"static/brush.svg\");\n+pub static BRUSH_SVG: &[u8] = include_bytes!(\"static/brush.svg\");\n \n /// The file contents of `wheel.svg`, the icon used for the settings button.\n-pub static WHEEL_SVG: &'static [u8] = include_bytes!(\"static/wheel.svg\");\n+pub static WHEEL_SVG: &[u8] = include_bytes!(\"static/wheel.svg\");\n \n /// The file contents of `down-arrow.svg`, the icon used for the crate choice combobox.\n-pub static DOWN_ARROW_SVG: &'static [u8] = include_bytes!(\"static/down-arrow.svg\");\n+pub static DOWN_ARROW_SVG: &[u8] = include_bytes!(\"static/down-arrow.svg\");\n \n /// The contents of `COPYRIGHT.txt`, the license listing for files distributed with documentation\n /// output.\n-pub static COPYRIGHT: &'static [u8] = include_bytes!(\"static/COPYRIGHT.txt\");\n+pub static COPYRIGHT: &[u8] = include_bytes!(\"static/COPYRIGHT.txt\");\n \n /// The contents of `LICENSE-APACHE.txt`, the text of the Apache License, version 2.0.\n-pub static LICENSE_APACHE: &'static [u8] = include_bytes!(\"static/LICENSE-APACHE.txt\");\n+pub static LICENSE_APACHE: &[u8] = include_bytes!(\"static/LICENSE-APACHE.txt\");\n \n /// The contents of `LICENSE-MIT.txt`, the text of the MIT License.\n-pub static LICENSE_MIT: &'static [u8] = include_bytes!(\"static/LICENSE-MIT.txt\");\n+pub static LICENSE_MIT: &[u8] = include_bytes!(\"static/LICENSE-MIT.txt\");\n \n /// The contents of `rust-logo.png`, the default icon of the documentation.\n-pub static RUST_LOGO: &'static [u8] = include_bytes!(\"static/rust-logo.png\");\n+pub static RUST_LOGO: &[u8] = include_bytes!(\"static/rust-logo.png\");\n /// The contents of `favicon.ico`, the default favicon of the documentation.\n-pub static RUST_FAVICON: &'static [u8] = include_bytes!(\"static/favicon.ico\");\n+pub static RUST_FAVICON: &[u8] = include_bytes!(\"static/favicon.ico\");\n \n /// The built-in themes given to every documentation site.\n pub mod themes {\n     /// The \"light\" theme, selected by default when no setting is available. Used as the basis for\n     /// the `--check-theme` functionality.\n-    pub static LIGHT: &'static str = include_str!(\"static/themes/light.css\");\n+    pub static LIGHT: &str = include_str!(\"static/themes/light.css\");\n \n     /// The \"dark\" theme.\n-    pub static DARK: &'static str = include_str!(\"static/themes/dark.css\");\n+    pub static DARK: &str = include_str!(\"static/themes/dark.css\");\n }\n \n /// Files related to the Fira Sans font.\n pub mod fira_sans {\n     /// The file `FiraSans-Regular.woff`, the Regular variant of the Fira Sans font.\n-    pub static REGULAR: &'static [u8] = include_bytes!(\"static/FiraSans-Regular.woff\");\n+    pub static REGULAR: &[u8] = include_bytes!(\"static/FiraSans-Regular.woff\");\n \n     /// The file `FiraSans-Medium.woff`, the Medium variant of the Fira Sans font.\n-    pub static MEDIUM: &'static [u8] = include_bytes!(\"static/FiraSans-Medium.woff\");\n+    pub static MEDIUM: &[u8] = include_bytes!(\"static/FiraSans-Medium.woff\");\n \n     /// The file `FiraSans-LICENSE.txt`, the license text for the Fira Sans font.\n-    pub static LICENSE: &'static [u8] = include_bytes!(\"static/FiraSans-LICENSE.txt\");\n+    pub static LICENSE: &[u8] = include_bytes!(\"static/FiraSans-LICENSE.txt\");\n }\n \n /// Files related to the Source Serif Pro font.\n pub mod source_serif_pro {\n     /// The file `SourceSerifPro-Regular.ttf.woff`, the Regular variant of the Source Serif Pro\n     /// font.\n-    pub static REGULAR: &'static [u8] = include_bytes!(\"static/SourceSerifPro-Regular.ttf.woff\");\n+    pub static REGULAR: &[u8] = include_bytes!(\"static/SourceSerifPro-Regular.ttf.woff\");\n \n     /// The file `SourceSerifPro-Bold.ttf.woff`, the Bold variant of the Source Serif Pro font.\n-    pub static BOLD: &'static [u8] = include_bytes!(\"static/SourceSerifPro-Bold.ttf.woff\");\n+    pub static BOLD: &[u8] = include_bytes!(\"static/SourceSerifPro-Bold.ttf.woff\");\n \n     /// The file `SourceSerifPro-It.ttf.woff`, the Italic variant of the Source Serif Pro font.\n-    pub static ITALIC: &'static [u8] = include_bytes!(\"static/SourceSerifPro-It.ttf.woff\");\n+    pub static ITALIC: &[u8] = include_bytes!(\"static/SourceSerifPro-It.ttf.woff\");\n \n     /// The file `SourceSerifPro-LICENSE.txt`, the license text for the Source Serif Pro font.\n-    pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceSerifPro-LICENSE.md\");\n+    pub static LICENSE: &[u8] = include_bytes!(\"static/SourceSerifPro-LICENSE.md\");\n }\n \n /// Files related to the Source Code Pro font.\n pub mod source_code_pro {\n     /// The file `SourceCodePro-Regular.woff`, the Regular variant of the Source Code Pro font.\n-    pub static REGULAR: &'static [u8] = include_bytes!(\"static/SourceCodePro-Regular.woff\");\n+    pub static REGULAR: &[u8] = include_bytes!(\"static/SourceCodePro-Regular.woff\");\n \n     /// The file `SourceCodePro-Semibold.woff`, the Semibold variant of the Source Code Pro font.\n-    pub static SEMIBOLD: &'static [u8] = include_bytes!(\"static/SourceCodePro-Semibold.woff\");\n+    pub static SEMIBOLD: &[u8] = include_bytes!(\"static/SourceCodePro-Semibold.woff\");\n \n     /// The file `SourceCodePro-LICENSE.txt`, the license text of the Source Code Pro font.\n-    pub static LICENSE: &'static [u8] = include_bytes!(\"static/SourceCodePro-LICENSE.txt\");\n+    pub static LICENSE: &[u8] = include_bytes!(\"static/SourceCodePro-LICENSE.txt\");\n }\n \n /// Files related to the sidebar in rustdoc sources.\n pub mod sidebar {\n     /// File script to handle sidebar.\n-    pub static SOURCE_SCRIPT: &'static str = include_str!(\"static/source-script.js\");\n+    pub static SOURCE_SCRIPT: &str = include_str!(\"static/source-script.js\");\n }"}, {"sha": "2c7ba8f8ea1fd97cbba071815a611871a36adb6a", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -70,7 +70,7 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n     let mut print_path = move |fmt: &mut fmt::Formatter<'_>, bows: BytesOrWideString<'_>| {\n         output_filename(fmt, bows, print_fmt, cwd.as_ref())\n     };\n-    write!(fmt, \"stack backtrace:\\n\")?;\n+    writeln!(fmt, \"stack backtrace:\")?;\n     let mut bt_fmt = BacktraceFmt::new(fmt, print_fmt, &mut print_path);\n     bt_fmt.add_context()?;\n     let mut idx = 0;"}, {"sha": "f3a2962098b4d484865a2b687eb6fa6f02a09e42", "filename": "src/libstd/sys_common/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibstd%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibstd%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fprocess.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -47,7 +47,7 @@ impl CommandEnv {\n             }\n         }\n         for (key, maybe_val) in self.vars.iter() {\n-            if let &Some(ref val) = maybe_val {\n+            if let Some(ref val) = maybe_val {\n                 env::set_var(key, val);\n             } else {\n                 env::remove_var(key);"}, {"sha": "7509e1ee35dee7821cade4f2afe4d1e04dec06a5", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -603,8 +603,8 @@ impl Wtf8 {\n         if len < 3 {\n             return None;\n         }\n-        match &self.bytes[(len - 3)..] {\n-            &[0xED, b2 @ 0xA0..=0xAF, b3] => Some(decode_surrogate(b2, b3)),\n+        match self.bytes[(len - 3)..] {\n+            [0xED, b2 @ 0xA0..=0xAF, b3] => Some(decode_surrogate(b2, b3)),\n             _ => None,\n         }\n     }\n@@ -615,8 +615,8 @@ impl Wtf8 {\n         if len < 3 {\n             return None;\n         }\n-        match &self.bytes[..3] {\n-            &[0xED, b2 @ 0xB0..=0xBF, b3] => Some(decode_surrogate(b2, b3)),\n+        match self.bytes[..3] {\n+            [0xED, b2 @ 0xB0..=0xBF, b3] => Some(decode_surrogate(b2, b3)),\n             _ => None,\n         }\n     }"}, {"sha": "ff741e3bd53bec702ece44826a2ce927c51de46b", "filename": "src/libtest/console.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibtest%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibtest%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fconsole.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -169,7 +169,7 @@ pub fn list_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Res\n \n     if !quiet {\n         if ntest != 0 || nbench != 0 {\n-            writeln!(output, \"\")?;\n+            writeln!(output)?;\n         }\n \n         writeln!(output, \"{}, {}\", plural(ntest, \"test\"), plural(nbench, \"benchmark\"))?;"}, {"sha": "1fb840520a6567e41d4f3de7a854da7ac6e44d7c", "filename": "src/libtest/formatters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibtest%2Fformatters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibtest%2Fformatters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fmod.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -36,5 +36,5 @@ pub(crate) fn write_stderr_delimiter(test_output: &mut Vec<u8>, test_name: &Test\n         Some(_) => test_output.push(b'\\n'),\n         None => (),\n     }\n-    write!(test_output, \"---- {} stderr ----\\n\", test_name).unwrap();\n+    writeln!(test_output, \"---- {} stderr ----\", test_name).unwrap();\n }"}, {"sha": "077005371c0cf1c70573a890a510500852aaf9b0", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -204,7 +204,7 @@ impl Stats for [f64] {\n     }\n \n     fn median(&self) -> f64 {\n-        self.percentile(50 as f64)\n+        self.percentile(50_f64)\n     }\n \n     fn var(&self) -> f64 {\n@@ -230,7 +230,7 @@ impl Stats for [f64] {\n     }\n \n     fn std_dev_pct(&self) -> f64 {\n-        let hundred = 100 as f64;\n+        let hundred = 100_f64;\n         (self.std_dev() / self.mean()) * hundred\n     }\n \n@@ -244,7 +244,7 @@ impl Stats for [f64] {\n     }\n \n     fn median_abs_dev_pct(&self) -> f64 {\n-        let hundred = 100 as f64;\n+        let hundred = 100_f64;\n         (self.median_abs_dev() / self.median()) * hundred\n     }\n \n@@ -257,11 +257,11 @@ impl Stats for [f64] {\n     fn quartiles(&self) -> (f64, f64, f64) {\n         let mut tmp = self.to_vec();\n         local_sort(&mut tmp);\n-        let first = 25f64;\n+        let first = 25_f64;\n         let a = percentile_of_sorted(&tmp, first);\n-        let second = 50f64;\n+        let second = 50_f64;\n         let b = percentile_of_sorted(&tmp, second);\n-        let third = 75f64;\n+        let third = 75_f64;\n         let c = percentile_of_sorted(&tmp, third);\n         (a, b, c)\n     }\n@@ -281,7 +281,7 @@ fn percentile_of_sorted(sorted_samples: &[f64], pct: f64) -> f64 {\n     }\n     let zero: f64 = 0.0;\n     assert!(zero <= pct);\n-    let hundred = 100f64;\n+    let hundred = 100_f64;\n     assert!(pct <= hundred);\n     if pct == hundred {\n         return sorted_samples[sorted_samples.len() - 1];\n@@ -307,7 +307,7 @@ pub fn winsorize(samples: &mut [f64], pct: f64) {\n     let mut tmp = samples.to_vec();\n     local_sort(&mut tmp);\n     let lo = percentile_of_sorted(&tmp, pct);\n-    let hundred = 100 as f64;\n+    let hundred = 100_f64;\n     let hi = percentile_of_sorted(&tmp, hundred - pct);\n     for samp in samples {\n         if *samp > hi {"}, {"sha": "5b75d2f367fff3ef09c332e6882c60fbffc4012e", "filename": "src/libtest/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibtest%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e17c8366c48f78f0fafe03c311cb0fd9b66ec50/src%2Flibtest%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Ftypes.rs?ref=8e17c8366c48f78f0fafe03c311cb0fd9b66ec50", "patch": "@@ -59,10 +59,10 @@ impl TestName {\n     }\n \n     pub fn with_padding(&self, padding: NamePadding) -> TestName {\n-        let name = match self {\n-            &TestName::StaticTestName(name) => Cow::Borrowed(name),\n-            &TestName::DynTestName(ref name) => Cow::Owned(name.clone()),\n-            &TestName::AlignedTestName(ref name, _) => name.clone(),\n+        let name = match *self {\n+            TestName::StaticTestName(name) => Cow::Borrowed(name),\n+            TestName::DynTestName(ref name) => Cow::Owned(name.clone()),\n+            TestName::AlignedTestName(ref name, _) => name.clone(),\n         };\n \n         TestName::AlignedTestName(name, padding)"}]}