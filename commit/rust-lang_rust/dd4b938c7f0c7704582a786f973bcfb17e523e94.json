{"sha": "dd4b938c7f0c7704582a786f973bcfb17e523e94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNGI5MzhjN2YwYzc3MDQ1ODJhNzg2Zjk3M2JjZmIxN2U1MjNlOTQ=", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-02-20T01:47:17Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-02-20T01:50:12Z"}, "message": "Implement using @set values", "tree": {"sha": "a30be6c6b46ac58fb35db7aba8bbaf507cf574f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a30be6c6b46ac58fb35db7aba8bbaf507cf574f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd4b938c7f0c7704582a786f973bcfb17e523e94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd4b938c7f0c7704582a786f973bcfb17e523e94", "html_url": "https://github.com/rust-lang/rust/commit/dd4b938c7f0c7704582a786f973bcfb17e523e94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd4b938c7f0c7704582a786f973bcfb17e523e94/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd5f603c314edcf2d75656ac86fc1d303aacfb83", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5f603c314edcf2d75656ac86fc1d303aacfb83", "html_url": "https://github.com/rust-lang/rust/commit/cd5f603c314edcf2d75656ac86fc1d303aacfb83"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "a3d4935f49614a1474fcc22d539dddff9c1cb7b9", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd4b938c7f0c7704582a786f973bcfb17e523e94/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4b938c7f0c7704582a786f973bcfb17e523e94/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=dd4b938c7f0c7704582a786f973bcfb17e523e94", "patch": "@@ -7,18 +7,19 @@\n // @is nested.json \"$.index[*][?(@.name=='l1')].kind\" \\\"module\\\"\n // @is - \"$.index[*][?(@.name=='l1')].inner.is_crate\" false\n // @count - \"$.index[*][?(@.name=='l1')].inner.items[*]\" 2\n-// @set l1_id = - \"$.index[*][?(@.name=='l1')].id\"\n pub mod l1 {\n \n     // @is nested.json \"$.index[*][?(@.name=='l3')].kind\" \\\"module\\\"\n     // @is - \"$.index[*][?(@.name=='l3')].inner.is_crate\" false\n     // @count - \"$.index[*][?(@.name=='l3')].inner.items[*]\" 1\n     // @set l3_id = - \"$.index[*][?(@.name=='l3')].id\"\n+    // @has - \"$.index[*][?(@.name=='l1')].inner.items[*]\" $l3_id\n     pub mod l3 {\n \n         // @is nested.json \"$.index[*][?(@.name=='L4')].kind\" \\\"struct\\\"\n         // @is - \"$.index[*][?(@.name=='L4')].inner.struct_type\" \\\"unit\\\"\n         // @set l4_id = - \"$.index[*][?(@.name=='L4')].id\"\n+        // @has - \"$.index[*][?(@.name=='l3')].inner.items[*]\" $l4_id\n         pub struct L4;\n     }\n     // @is nested.json \"$.index[*][?(@.inner.span=='l3::L4')].kind\" \\\"import\\\""}, {"sha": "8cb9564531a983e23222dca8392a2e3e4c915731", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dd4b938c7f0c7704582a786f973bcfb17e523e94/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd4b938c7f0c7704582a786f973bcfb17e523e94/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=dd4b938c7f0c7704582a786f973bcfb17e523e94", "patch": "@@ -207,9 +207,15 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n                     let val = cache.get_value(&command.args[0])?;\n                     match select(&val, &command.args[1]) {\n                         Ok(results) => {\n-                            let pat: Value = serde_json::from_str(&command.args[2]).unwrap();\n-\n-                            !results.is_empty() && results.into_iter().any(|val| *val == pat)\n+                            // FIXME: Share the pat getting code with the `Is` branch.\n+                            let v_holder;\n+                            let pat: &Value = if command.args[2].starts_with(\"$\") {\n+                                &cache.variables[&command.args[2][1..]]\n+                            } else {\n+                                v_holder = serde_json::from_str(&command.args[2]).unwrap();\n+                                &v_holder\n+                            };\n+                            !results.is_empty() && results.into_iter().any(|val| val == pat)\n                         }\n                         Err(_) => false,\n                     }\n@@ -234,8 +240,14 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n             let val = cache.get_value(&command.args[0])?;\n             match select(&val, &command.args[1]) {\n                 Ok(results) => {\n-                    let pat: Value = serde_json::from_str(&command.args[2]).unwrap();\n-                    results.len() == 1 && *results[0] == pat\n+                    let v_holder;\n+                    let pat: &Value = if command.args[2].starts_with(\"$\") {\n+                        &cache.variables[&command.args[2][1..]]\n+                    } else {\n+                        v_holder = serde_json::from_str(&command.args[2]).unwrap();\n+                        &v_holder\n+                    };\n+                    results.len() == 1 && results[0] == pat\n                 }\n                 Err(_) => false,\n             }"}]}