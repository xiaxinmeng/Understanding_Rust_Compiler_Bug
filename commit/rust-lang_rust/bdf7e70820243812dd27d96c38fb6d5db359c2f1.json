{"sha": "bdf7e70820243812dd27d96c38fb6d5db359c2f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZjdlNzA4MjAyNDM4MTJkZDI3ZDk2YzM4ZmI2ZDVkYjM1OWMyZjE=", "commit": {"author": {"name": "BGluth", "email": "gluthb@gmail.com", "date": "2020-06-15T20:30:25Z"}, "committer": {"name": "BGluth", "email": "gluthb@gmail.com", "date": "2020-06-22T14:28:53Z"}, "message": "Enum variants with `Self::[variant]` now resolve (#4879)", "tree": {"sha": "c25c39dca1574b8bb8db5709df2c39ed42e2066c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c25c39dca1574b8bb8db5709df2c39ed42e2066c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdf7e70820243812dd27d96c38fb6d5db359c2f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf7e70820243812dd27d96c38fb6d5db359c2f1", "html_url": "https://github.com/rust-lang/rust/commit/bdf7e70820243812dd27d96c38fb6d5db359c2f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdf7e70820243812dd27d96c38fb6d5db359c2f1/comments", "author": {"login": "BGluth", "id": 7939279, "node_id": "MDQ6VXNlcjc5MzkyNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/7939279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGluth", "html_url": "https://github.com/BGluth", "followers_url": "https://api.github.com/users/BGluth/followers", "following_url": "https://api.github.com/users/BGluth/following{/other_user}", "gists_url": "https://api.github.com/users/BGluth/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGluth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGluth/subscriptions", "organizations_url": "https://api.github.com/users/BGluth/orgs", "repos_url": "https://api.github.com/users/BGluth/repos", "events_url": "https://api.github.com/users/BGluth/events{/privacy}", "received_events_url": "https://api.github.com/users/BGluth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BGluth", "id": 7939279, "node_id": "MDQ6VXNlcjc5MzkyNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/7939279?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BGluth", "html_url": "https://github.com/BGluth", "followers_url": "https://api.github.com/users/BGluth/followers", "following_url": "https://api.github.com/users/BGluth/following{/other_user}", "gists_url": "https://api.github.com/users/BGluth/gists{/gist_id}", "starred_url": "https://api.github.com/users/BGluth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BGluth/subscriptions", "organizations_url": "https://api.github.com/users/BGluth/orgs", "repos_url": "https://api.github.com/users/BGluth/repos", "events_url": "https://api.github.com/users/BGluth/events{/privacy}", "received_events_url": "https://api.github.com/users/BGluth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a3b40a55430756436cb9a0602d4449a5177be69", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a3b40a55430756436cb9a0602d4449a5177be69", "html_url": "https://github.com/rust-lang/rust/commit/3a3b40a55430756436cb9a0602d4449a5177be69"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "1d6c471032bd8efd9c03bc4dde82660bb361513d", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bdf7e70820243812dd27d96c38fb6d5db359c2f1/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdf7e70820243812dd27d96c38fb6d5db359c2f1/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=bdf7e70820243812dd27d96c38fb6d5db359c2f1", "patch": "@@ -216,13 +216,43 @@ impl SourceAnalyzer {\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_expr(expr_id) {\n                 return Some(PathResolution::AssocItem(assoc.into()));\n             }\n+            if let Some(VariantId::EnumVariantId(variant)) =\n+                self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n+            {\n+                return Some(PathResolution::Def(ModuleDef::EnumVariant(variant.into())));\n+            }\n         }\n+\n         if let Some(path_pat) = path.syntax().parent().and_then(ast::PathPat::cast) {\n             let pat_id = self.pat_id(&path_pat.into())?;\n             if let Some(assoc) = self.infer.as_ref()?.assoc_resolutions_for_pat(pat_id) {\n                 return Some(PathResolution::AssocItem(assoc.into()));\n             }\n+            if let Some(VariantId::EnumVariantId(variant)) =\n+                self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n+            {\n+                return Some(PathResolution::Def(ModuleDef::EnumVariant(variant.into())));\n+            }\n+        }\n+\n+        if let Some(rec_lit) = path.syntax().parent().and_then(ast::RecordLit::cast) {\n+            let expr_id = self.expr_id(db, &rec_lit.into())?;\n+            if let Some(VariantId::EnumVariantId(variant)) =\n+                self.infer.as_ref()?.variant_resolution_for_expr(expr_id)\n+            {\n+                return Some(PathResolution::Def(ModuleDef::EnumVariant(variant.into())));\n+            }\n         }\n+\n+        if let Some(rec_pat) = path.syntax().parent().and_then(ast::RecordPat::cast) {\n+            let pat_id = self.pat_id(&rec_pat.into())?;\n+            if let Some(VariantId::EnumVariantId(variant)) =\n+                self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n+            {\n+                return Some(PathResolution::Def(ModuleDef::EnumVariant(variant.into())));\n+            }\n+        }\n+\n         // This must be a normal source file rather than macro file.\n         let hir_path =\n             crate::Path::from_src(path.clone(), &Hygiene::new(db.upcast(), self.file_id))?;"}]}