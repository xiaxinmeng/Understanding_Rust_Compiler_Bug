{"sha": "fb4c3f0af287423489e54b6415452d3f7881b592", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNGMzZjBhZjI4NzQyMzQ4OWU1NGI2NDE1NDUyZDNmNzg4MWI1OTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-19T07:11:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-19T07:11:33Z"}, "message": "auto merge of #15752 : nham/rust/dlist_docs, r=alexcrichton\n\nSomeone rightfully complained in IRC that DList was lacking examples. Here are some.", "tree": {"sha": "d69aac47a2ce8a032aa63d337551221d2f7a428d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d69aac47a2ce8a032aa63d337551221d2f7a428d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb4c3f0af287423489e54b6415452d3f7881b592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb4c3f0af287423489e54b6415452d3f7881b592", "html_url": "https://github.com/rust-lang/rust/commit/fb4c3f0af287423489e54b6415452d3f7881b592", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb4c3f0af287423489e54b6415452d3f7881b592/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44a71dee377bebd39a45ba3fe0ccc31e59ac2821", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a71dee377bebd39a45ba3fe0ccc31e59ac2821", "html_url": "https://github.com/rust-lang/rust/commit/44a71dee377bebd39a45ba3fe0ccc31e59ac2821"}, {"sha": "7ee45aa6e5cf6114517baf30a61662ec5bdf9e40", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee45aa6e5cf6114517baf30a61662ec5bdf9e40", "html_url": "https://github.com/rust-lang/rust/commit/7ee45aa6e5cf6114517baf30a61662ec5bdf9e40"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "226fbbe7f941b31b6a81c9c56f968881c6461bf9", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/fb4c3f0af287423489e54b6415452d3f7881b592/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb4c3f0af287423489e54b6415452d3f7881b592/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=fb4c3f0af287423489e54b6415452d3f7881b592", "patch": "@@ -278,6 +278,23 @@ impl<T> DList<T> {\n     /// Move the last element to the front of the list.\n     ///\n     /// If the list is empty, do nothing.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::collections::{DList, Deque};\n+    ///\n+    /// let mut dl = DList::new();\n+    /// dl.push_back(1i);\n+    /// dl.push_back(2);\n+    /// dl.push_back(3);\n+    ///\n+    /// dl.rotate_forward();\n+    ///\n+    /// for e in dl.iter() {\n+    ///     println!(\"{}\", e); // prints 3, then 1, then 2\n+    /// }\n+    /// ```\n     #[inline]\n     pub fn rotate_forward(&mut self) {\n         self.pop_back_node().map(|tail| {\n@@ -288,6 +305,23 @@ impl<T> DList<T> {\n     /// Move the first element to the back of the list.\n     ///\n     /// If the list is empty, do nothing.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::collections::{DList, Deque};\n+    ///\n+    /// let mut dl = DList::new();\n+    /// dl.push_back(1i);\n+    /// dl.push_back(2);\n+    /// dl.push_back(3);\n+    ///\n+    /// dl.rotate_backward();\n+    ///\n+    /// for e in dl.iter() {\n+    ///     println!(\"{}\", e); // prints 2, then 3, then 1\n+    /// }\n+    /// ```\n     #[inline]\n     pub fn rotate_backward(&mut self) {\n         self.pop_front_node().map(|head| {\n@@ -298,6 +332,25 @@ impl<T> DList<T> {\n     /// Add all elements from `other` to the end of the list\n     ///\n     /// O(1)\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::collections::{DList, Deque};\n+    ///\n+    /// let mut a = DList::new();\n+    /// let mut b = DList::new();\n+    /// a.push_back(1i);\n+    /// a.push_back(2);\n+    /// b.push_back(3i);\n+    /// b.push_back(4);\n+    ///\n+    /// a.append(b);\n+    ///\n+    /// for e in a.iter() {\n+    ///     println!(\"{}\", e); // prints 1, then 2, then 3, then 4\n+    /// }\n+    /// ```\n     pub fn append(&mut self, mut other: DList<T>) {\n         match self.list_tail.resolve() {\n             None => *self = other,\n@@ -320,6 +373,25 @@ impl<T> DList<T> {\n     /// Add all elements from `other` to the beginning of the list\n     ///\n     /// O(1)\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::collections::{DList, Deque};\n+    ///\n+    /// let mut a = DList::new();\n+    /// let mut b = DList::new();\n+    /// a.push_back(1i);\n+    /// a.push_back(2);\n+    /// b.push_back(3i);\n+    /// b.push_back(4);\n+    ///\n+    /// a.prepend(b);\n+    ///\n+    /// for e in a.iter() {\n+    ///     println!(\"{}\", e); // prints 3, then 4, then 1, then 2\n+    /// }\n+    /// ```\n     #[inline]\n     pub fn prepend(&mut self, mut other: DList<T>) {\n         mem::swap(self, &mut other);\n@@ -330,6 +402,25 @@ impl<T> DList<T> {\n     /// or at the end.\n     ///\n     /// O(N)\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::collections::{DList, Deque};\n+    ///\n+    /// let mut a: DList<int> = DList::new();\n+    /// a.push_back(2i);\n+    /// a.push_back(4);\n+    /// a.push_back(7);\n+    /// a.push_back(8);\n+    ///\n+    /// // insert 11 before the first odd number in the list\n+    /// a.insert_when(11, |&e, _| e % 2 == 1);\n+    ///\n+    /// for e in a.iter() {\n+    ///     println!(\"{}\", e); // prints 2, then 4, then 11, then 7, then 8\n+    /// }\n+    /// ```\n     pub fn insert_when(&mut self, elt: T, f: |&T, &T| -> bool) {\n         {\n             let mut it = self.mut_iter();"}]}