{"sha": "54307cd88847e099b021cad788b51013d1453820", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MzA3Y2Q4ODg0N2UwOTliMDIxY2FkNzg4YjUxMDEzZDE0NTM4MjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-09T13:04:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-09T13:04:22Z"}, "message": "bump compiletest so that we can share the tempdir() call", "tree": {"sha": "48d3540869dc7967373450d1de88335b96b8f3c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48d3540869dc7967373450d1de88335b96b8f3c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54307cd88847e099b021cad788b51013d1453820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54307cd88847e099b021cad788b51013d1453820", "html_url": "https://github.com/rust-lang/rust/commit/54307cd88847e099b021cad788b51013d1453820", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54307cd88847e099b021cad788b51013d1453820/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97302e86c29cea97863cb1c977366c696d681755", "url": "https://api.github.com/repos/rust-lang/rust/commits/97302e86c29cea97863cb1c977366c696d681755", "html_url": "https://github.com/rust-lang/rust/commit/97302e86c29cea97863cb1c977366c696d681755"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "94d13a83fafd52cbde996c1210bf4099cac42f75", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54307cd88847e099b021cad788b51013d1453820/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/54307cd88847e099b021cad788b51013d1453820/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=54307cd88847e099b021cad788b51013d1453820", "patch": "@@ -46,5 +46,5 @@ cargo_miri = [\"cargo_metadata\"]\n rustc_tests = []\n \n [dev-dependencies]\n-compiletest_rs = { version = \"0.3.16\", features = [\"tmp\"] }\n+compiletest_rs = { version = \"0.3.17\", features = [\"tmp\"] }\n colored = \"1.6\""}, {"sha": "55eaa7bfbab6885ca6395ab420ba75ba294aec3f", "filename": "tests/compiletest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/54307cd88847e099b021cad788b51013d1453820/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54307cd88847e099b021cad788b51013d1453820/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=54307cd88847e099b021cad788b51013d1453820", "patch": "@@ -29,8 +29,8 @@ fn have_fullmir() -> bool {\n     std::env::var(\"MIRI_SYSROOT\").is_ok() || rustc_test_suite().is_some()\n }\n \n-fn mk_config(mode: &str) -> compiletest::Config {\n-    let mut config = compiletest::Config::default();\n+fn mk_config(mode: &str) -> compiletest::common::ConfigWithTemp {\n+    let mut config = compiletest::Config::default().tempdir();\n     config.mode = mode.parse().expect(\"Invalid mode\");\n     config.rustc_path = miri_path();\n     if rustc_test_suite().is_some() {\n@@ -74,7 +74,7 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n     config.target = target.to_owned();\n     config.host = host.to_owned();\n     config.target_rustcflags = Some(flags.join(\" \"));\n-    compiletest::run_tests(&config.tempdir()); // FIXME: `tempdir` can be done by `mk_config` once `ConfigWithTemp` is exposed as type from compiletest\n+    compiletest::run_tests(&config);\n }\n \n fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir: bool, opt: bool) {\n@@ -107,7 +107,7 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n     config.target = target.to_owned();\n     config.host = host.to_owned();\n     config.target_rustcflags = Some(flags.join(\" \"));\n-    compiletest::run_tests(&config.tempdir()); // FIXME: `tempdir` can be done by `mk_config` once `ConfigWithTemp` is exposed as type from compiletest\n+    compiletest::run_tests(&config);\n }\n \n fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {"}]}