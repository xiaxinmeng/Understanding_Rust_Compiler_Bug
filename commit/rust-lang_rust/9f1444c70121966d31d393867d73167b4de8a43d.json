{"sha": "9f1444c70121966d31d393867d73167b4de8a43d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMTQ0NGM3MDEyMTk2NmQzMWQzOTM4NjdkNzMxNjdiNGRlOGE0M2Q=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-06-28T23:29:37Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-06-28T23:41:06Z"}, "message": "Implement \"claim\"\n\nImplement \"claim\" (issue #14), which is a version of \"check\" that\ndoesn't really do the check at runtime. It's an unsafe feature.\n\nThe new flag --check-claims turns claims into checks automatically --\nbut it's off by default, so by default, the assertion in a claim\ndoesn't execute at runtime.", "tree": {"sha": "5c77247207beb65a55fe6f576860e479f7bfd2e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c77247207beb65a55fe6f576860e479f7bfd2e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f1444c70121966d31d393867d73167b4de8a43d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1444c70121966d31d393867d73167b4de8a43d", "html_url": "https://github.com/rust-lang/rust/commit/9f1444c70121966d31d393867d73167b4de8a43d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f1444c70121966d31d393867d73167b4de8a43d/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "866ee6ecb42e35d18bdbd89e63c45c1ccb38540b", "url": "https://api.github.com/repos/rust-lang/rust/commits/866ee6ecb42e35d18bdbd89e63c45c1ccb38540b", "html_url": "https://github.com/rust-lang/rust/commit/866ee6ecb42e35d18bdbd89e63c45c1ccb38540b"}], "stats": {"total": 94, "additions": 79, "deletions": 15}, "files": [{"sha": "d4bda29a9b9fe39c2a75614a59a6d0eb806ffa5b", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -157,7 +157,8 @@ options:\n     --time-passes      time the individual phases of the compiler\n     --time-llvm-passes time the individual phases of the LLVM backend\n     --sysroot <path>   override the system root (default: rustc's directory)\n-    --no-typestate     don't run the typestate pass (unsafe!)\\n\\n\");\n+    --no-typestate     don't run the typestate pass (unsafe!)\n+    --check-claims     treat 'claim' and 'check' synonymously\\n\\n\");\n }\n \n fn get_os(str triple) -> session::os {\n@@ -226,6 +227,7 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n     auto time_llvm_passes = opt_present(match, \"time-llvm-passes\");\n     auto run_typestate = !opt_present(match, \"no-typestate\");\n     auto sysroot_opt = getopts::opt_maybe_str(match, \"sysroot\");\n+    auto check_claims = opt_present(match, \"check-claims\");\n     let uint opt_level =\n         if (opt_present(match, \"O\")) {\n             if (opt_present(match, \"OptLevel\")) {\n@@ -261,6 +263,7 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n              stats=stats,\n              time_passes=time_passes,\n              time_llvm_passes=time_llvm_passes,\n+             check_claims=check_claims,\n              output_type=output_type,\n              library_search_paths=library_search_paths,\n              sysroot=sysroot);\n@@ -296,7 +299,7 @@ fn main(vec[str] args) {\n          optflag(\"c\"), optopt(\"o\"), optflag(\"g\"), optflag(\"save-temps\"),\n          optopt(\"sysroot\"), optflag(\"stats\"), optflag(\"time-passes\"),\n          optflag(\"time-llvm-passes\"), optflag(\"no-typestate\"),\n-         optflag(\"noverify\")];\n+         optflag(\"check-claims\"), optflag(\"noverify\")];\n     auto binary = vec::shift[str](args);\n     auto binary_dir = fs::dirname(binary);\n     auto match ="}, {"sha": "d416d9c57f4a2afdb1265f99639f2b3c86743780", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -32,6 +32,7 @@ type options =\n         bool stats,\n         bool time_passes,\n         bool time_llvm_passes,\n+        bool check_claims,\n         back::link::output_type output_type,\n         vec[str] library_search_paths,\n         str sysroot);"}, {"sha": "cae0794c945ecc7ab0440c057a81f7765c350a4c", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -231,6 +231,7 @@ type field = spanned[field_];\n \n tag spawn_dom { dom_implicit; dom_thread; }\n \n+tag check_mode { checked; unchecked; }\n \n // FIXME: temporary\n tag seq_kind { sk_unique; sk_rc; }\n@@ -286,7 +287,7 @@ tag expr_ {\n     expr_assert(@expr);\n \n     /* preds that typestate is aware of */\n-    expr_check(@expr);\n+    expr_check(check_mode, @expr);\n    /* FIXME Would be nice if expr_check desugared\n       to expr_if_check. */\n     expr_if_check(@expr, block, option::t[@expr]);"}, {"sha": "5d3764c858e617b9c37cb7fc7340e791167c1dc6", "filename": "src/comp/front/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Ffront%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Ffront%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ffold.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -404,7 +404,7 @@ fn noop_fold_expr(&expr_ e, ast_fold fld) -> expr_ {\n         case (expr_be(?e)) { expr_be(fld.fold_expr(e)) }\n         case (expr_log(?lv, ?e)) { expr_log(lv, fld.fold_expr(e)) }\n         case (expr_assert(?e)) { expr_assert(fld.fold_expr(e)) }\n-        case (expr_check(?e)) { expr_check(fld.fold_expr(e)) }\n+        case (expr_check(?m, ?e)) { expr_check(m, fld.fold_expr(e)) }\n         case (expr_port(?ot)) { \n             expr_port(alt(ot) {\n                     case (option::some(?t)) { option::some(fld.fold_ty(t)) }"}, {"sha": "d1f47eb06c17f531d93663ce1756f36d72a252f4", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -865,7 +865,20 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n \n         auto e = parse_expr(p);\n         auto hi = e.span.hi;\n-        ex = ast::expr_check(e);\n+        ex = ast::expr_check(ast::checked, e);\n+    } else if (eat_word(p, \"claim\")) {\n+        /* Same rules as check, except that if check-claims\n+         is enabled (a command-line flag), then the parser turns\n+        claims into check */\n+        \n+        auto e = parse_expr(p);\n+        auto hi = e.span.hi;\n+        ex = if (p.get_session().get_opts().check_claims) {\n+            ast::expr_check(ast::checked, e)\n+        }\n+        else {\n+            ast::expr_check(ast::unchecked, e)\n+        };\n     } else if (eat_word(p, \"ret\")) {\n         alt (p.peek()) {\n             case (token::SEMI) { ex = ast::expr_ret(none); }\n@@ -1596,7 +1609,7 @@ fn stmt_ends_with_semi(&ast::stmt stmt) -> bool {\n                 case (ast::expr_put(_)) { true }\n                 case (ast::expr_be(_)) { true }\n                 case (ast::expr_log(_, _)) { true }\n-                case (ast::expr_check(_)) { true }\n+                case (ast::expr_check(_, _)) { true }\n                 case (ast::expr_if_check(_, _, _)) { false }\n                 case (ast::expr_port(_)) { true }\n                 case (ast::expr_chan(_)) { true }"}, {"sha": "79fadcd8c9f401e3e69c56db5c0e6ca7404f7fa3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -5988,9 +5988,17 @@ fn trans_expr_out(&@block_ctxt cx, &@ast::expr e, out_method output) ->\n         case (ast::expr_assert(?a)) {\n             ret trans_check_expr(cx, a, \"Assertion\");\n         }\n-        case (ast::expr_check(?a)) {\n+        case (ast::expr_check(ast::checked, ?a)) {\n             ret trans_check_expr(cx, a, \"Predicate\");\n         }\n+        case (ast::expr_check(ast::unchecked, ?a)) {\n+            if (cx.fcx.lcx.ccx.sess.get_opts().check_claims) {\n+                ret trans_check_expr(cx, a, \"Claim\");\n+            }\n+            else {\n+                ret rslt(cx, C_nil());\n+            }\n+        }\n         case (ast::expr_break) { ret trans_break(e.span, cx); }\n         case (ast::expr_cont) { ret trans_cont(e.span, cx); }\n         case (ast::expr_ret(?ex)) { ret trans_ret(cx, ex); }"}, {"sha": "79375c4b40d2d6b21ff8b36c9d5463652d8372f6", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -36,7 +36,7 @@ fn collect_local(&ctxt cx, &@local loc) {\n \n fn collect_pred(&ctxt cx, &@expr e) {\n     alt (e.node) {\n-        case (expr_check(?ch)) {\n+        case (expr_check(_, ?ch)) {\n             vec::push(*cx.cs, expr_to_constr(cx.tcx, ch));\n         }\n         case (expr_if_check(?ex, _, _)) {"}, {"sha": "ccff10fae5b9e6f3d5a34dc38117114e21475af1", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -536,7 +536,7 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) {\n             find_pre_post_expr(fcx, p);\n             copy_pre_post(fcx.ccx, e.id, p);\n         }\n-        case (expr_check(?p)) {\n+        case (expr_check(_, ?p)) {\n             find_pre_post_expr(fcx, p);\n             copy_pre_post(fcx.ccx, e.id, p);\n             /* predicate p holds after this expression executes */"}, {"sha": "04b29f5ffa51da755302cb98c89c33e8f4fe76c5", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -554,7 +554,7 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n         case (expr_assert(?p)) {\n             ret find_pre_post_state_sub(fcx, pres, p, e.id, none);\n         }\n-        case (expr_check(?p)) {\n+        case (expr_check(_, ?p)) {\n             /* predicate p holds after this expression executes */\n             let aux::constr c = expr_to_constr(fcx.ccx.tcx, p);\n             ret find_pre_post_state_sub(fcx, pres, p, e.id, some(c.node));"}, {"sha": "95cd9d77b26f30af8f8399ce4921807c0e31c582", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -1626,7 +1626,7 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n             auto expr_t = check_expr(fcx, e);\n             write::nil_ty(fcx.ccx.tcx, id);\n         }\n-        case (ast::expr_check(?e)) {\n+        case (ast::expr_check(_, ?e)) {\n             check_pred_expr(fcx, e);\n             write::nil_ty(fcx.ccx.tcx, id);\n         }"}, {"sha": "e2d0248ae201a638379ff17eee9bc2411c71a8ed", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -372,7 +372,7 @@ fn visit_expr[E](&@expr ex, &E e, &vt[E] v) {\n         case (expr_put(?eo)) { visit_expr_opt(eo, e, v); }\n         case (expr_be(?x)) { vt(v).visit_expr(x, e, v); }\n         case (expr_log(_, ?x)) { vt(v).visit_expr(x, e, v); }\n-        case (expr_check(?x)) { vt(v).visit_expr(x, e, v); }\n+        case (expr_check(_, ?x)) { vt(v).visit_expr(x, e, v); }\n         case (expr_assert(?x)) { vt(v).visit_expr(x, e, v); }\n         case (expr_port(_)) { }\n         case (expr_chan(?x)) { vt(v).visit_expr(x, e, v); }"}, {"sha": "c6f607835718a63a1408c660280eeedd79765b4c", "filename": "src/comp/middle/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fmiddle%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fwalk.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -378,7 +378,7 @@ fn walk_expr(&ast_visitor v, @ast::expr e) {\n         case (ast::expr_put(?eo)) { walk_expr_opt(v, eo); }\n         case (ast::expr_be(?x)) { walk_expr(v, x); }\n         case (ast::expr_log(_, ?x)) { walk_expr(v, x); }\n-        case (ast::expr_check(?x)) { walk_expr(v, x); }\n+        case (ast::expr_check(_, ?x)) { walk_expr(v, x); }\n         case (ast::expr_assert(?x)) { walk_expr(v, x); }\n         case (ast::expr_port(_)) { }\n         case (ast::expr_chan(?x)) { walk_expr(v, x); }"}, {"sha": "433a7234dd421cb7e49ebabbc037aaaaed34422e", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -859,8 +859,15 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             }\n             print_expr(s, expr);\n         }\n-        case (ast::expr_check(?expr)) {\n-            word_nbsp(s, \"check\");\n+        case (ast::expr_check(?m, ?expr)) {\n+            alt (m) {\n+                case (ast::unchecked) {\n+                    word_nbsp(s, \"claim\");\n+                }\n+                case (ast::checked) {\n+                    word_nbsp(s, \"check\");\n+                }\n+            }\n             popen(s);\n             print_expr(s, expr);\n             pclose(s);"}, {"sha": "d70bef210f1c1576e8b6707827ef324d1e73d44a", "filename": "src/test/run-fail/fn-constraint-claim.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Ftest%2Frun-fail%2Ffn-constraint-claim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Ftest%2Frun-fail%2Ffn-constraint-claim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffn-constraint-claim.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -0,0 +1,16 @@\n+// xfail-stage0\n+// error-pattern:quux\n+use std;\n+import std::str::*;\n+import std::uint::*;\n+\n+fn nop(uint a, uint b) : le(a, b) {\n+  fail \"quux\";\n+}\n+\n+fn main() {\n+  let uint a = 5u;\n+  let uint b = 4u;\n+  claim le(a, b);\n+  nop(a, b);\n+}\n\\ No newline at end of file"}, {"sha": "d86154e9ea87f629994fe995bdfb075a633e3fef", "filename": "src/test/run-pass/claim-nonterm.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f1444c70121966d31d393867d73167b4de8a43d/src%2Ftest%2Frun-pass%2Fclaim-nonterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f1444c70121966d31d393867d73167b4de8a43d/src%2Ftest%2Frun-pass%2Fclaim-nonterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclaim-nonterm.rs?ref=9f1444c70121966d31d393867d73167b4de8a43d", "patch": "@@ -0,0 +1,15 @@\n+// xfail-stage0\n+// tests that the pred in a claim isn't actually eval'd\n+use std;\n+import std::str::*;\n+import std::uint::*;\n+\n+pred fails(uint a) -> bool {\n+  fail;\n+}\n+\n+fn main() {\n+  let uint a = 5u;\n+  let uint b = 4u;\n+  claim fails(b);\n+}\n\\ No newline at end of file"}]}