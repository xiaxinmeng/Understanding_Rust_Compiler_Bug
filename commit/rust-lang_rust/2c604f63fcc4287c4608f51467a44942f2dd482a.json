{"sha": "2c604f63fcc4287c4608f51467a44942f2dd482a", "node_id": "C_kwDOAAsO6NoAKDJjNjA0ZjYzZmNjNDI4N2M0NjA4ZjUxNDY3YTQ0OTQyZjJkZDQ4MmE", "commit": {"author": {"name": "minami.yoshihiko", "email": "nannany@hey.jp", "date": "2022-05-11T11:21:10Z"}, "committer": {"name": "minami.yoshihiko", "email": "nannany@hey.jp", "date": "2022-05-12T09:31:42Z"}, "message": "update graphviz links\n\nadd subdomain", "tree": {"sha": "0d91150e155bb38e8aef820fd4d182bed6ce2651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d91150e155bb38e8aef820fd4d182bed6ce2651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c604f63fcc4287c4608f51467a44942f2dd482a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c604f63fcc4287c4608f51467a44942f2dd482a", "html_url": "https://github.com/rust-lang/rust/commit/2c604f63fcc4287c4608f51467a44942f2dd482a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c604f63fcc4287c4608f51467a44942f2dd482a/comments", "author": {"login": "nannany", "id": 14943122, "node_id": "MDQ6VXNlcjE0OTQzMTIy", "avatar_url": "https://avatars.githubusercontent.com/u/14943122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nannany", "html_url": "https://github.com/nannany", "followers_url": "https://api.github.com/users/nannany/followers", "following_url": "https://api.github.com/users/nannany/following{/other_user}", "gists_url": "https://api.github.com/users/nannany/gists{/gist_id}", "starred_url": "https://api.github.com/users/nannany/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nannany/subscriptions", "organizations_url": "https://api.github.com/users/nannany/orgs", "repos_url": "https://api.github.com/users/nannany/repos", "events_url": "https://api.github.com/users/nannany/events{/privacy}", "received_events_url": "https://api.github.com/users/nannany/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nannany", "id": 14943122, "node_id": "MDQ6VXNlcjE0OTQzMTIy", "avatar_url": "https://avatars.githubusercontent.com/u/14943122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nannany", "html_url": "https://github.com/nannany", "followers_url": "https://api.github.com/users/nannany/followers", "following_url": "https://api.github.com/users/nannany/following{/other_user}", "gists_url": "https://api.github.com/users/nannany/gists{/gist_id}", "starred_url": "https://api.github.com/users/nannany/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nannany/subscriptions", "organizations_url": "https://api.github.com/users/nannany/orgs", "repos_url": "https://api.github.com/users/nannany/repos", "events_url": "https://api.github.com/users/nannany/events{/privacy}", "received_events_url": "https://api.github.com/users/nannany/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee6eaabdd402583ab759eb271ac69d26e06842d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6eaabdd402583ab759eb271ac69d26e06842d7", "html_url": "https://github.com/rust-lang/rust/commit/ee6eaabdd402583ab759eb271ac69d26e06842d7"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "676c66f41a9ae9eb8c19c413b72f99fdd298a1ef", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c604f63fcc4287c4608f51467a44942f2dd482a/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c604f63fcc4287c4608f51467a44942f2dd482a/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=2c604f63fcc4287c4608f51467a44942f2dd482a", "patch": "@@ -4,18 +4,16 @@\n //! use with [Graphviz](https://www.graphviz.org/) by walking a labeled\n //! graph. (Graphviz can then automatically lay out the nodes and edges\n //! of the graph, and also optionally render the graph as an image or\n-//! other [output formats](\n-//! https://www.graphviz.org/content/output-formats), such as SVG.)\n+//! other [output formats](https://www.graphviz.org/docs/outputs), such as SVG.)\n //!\n //! Rather than impose some particular graph data structure on clients,\n //! this library exposes two traits that clients can implement on their\n //! own structs before handing them over to the rendering function.\n //!\n //! Note: This library does not yet provide access to the full\n-//! expressiveness of the [DOT language](\n-//! https://www.graphviz.org/doc/info/lang.html). For example, there are\n-//! many [attributes](https://www.graphviz.org/content/attrs) related to\n-//! providing layout hints (e.g., left-to-right versus top-down, which\n+//! expressiveness of the [DOT language](https://www.graphviz.org/doc/info/lang.html).\n+//! For example, there are many [attributes](https://www.graphviz.org/doc/info/attrs.html)\n+//! related to providing layout hints (e.g., left-to-right versus top-down, which\n //! algorithm to use, etc). The current intention of this library is to\n //! emit a human-readable .dot file with very regular structure suitable\n //! for easy post-processing.\n@@ -292,7 +290,7 @@ pub enum LabelText<'a> {\n     LabelStr(Cow<'a, str>),\n \n     /// This kind of label uses the graphviz label escString type:\n-    /// <https://www.graphviz.org/content/attrs#kescString>\n+    /// <https://www.graphviz.org/docs/attr-types/escString>\n     ///\n     /// Occurrences of backslashes (`\\`) are not escaped; instead they\n     /// are interpreted as initiating an escString escape sequence.\n@@ -307,12 +305,12 @@ pub enum LabelText<'a> {\n     /// printed exactly as given, but between `<` and `>`. **No\n     /// escaping is performed.**\n     ///\n-    /// [html]: https://www.graphviz.org/content/node-shapes#html\n+    /// [html]: https://www.graphviz.org/doc/info/shapes.html#html\n     HtmlStr(Cow<'a, str>),\n }\n \n /// The style for a node or edge.\n-/// See <https://www.graphviz.org/doc/info/attrs.html#k:style> for descriptions.\n+/// See <https://www.graphviz.org/docs/attr-types/style/> for descriptions.\n /// Note that some of these are not valid for edges.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum Style {\n@@ -439,7 +437,7 @@ pub trait Labeller<'a> {\n     /// Maps `n` to one of the [graphviz `shape` names][1]. If `None`\n     /// is returned, no `shape` attribute is specified.\n     ///\n-    /// [1]: https://www.graphviz.org/content/node-shapes\n+    /// [1]: https://www.graphviz.org/doc/info/shapes.html\n     fn node_shape(&'a self, _node: &Self::Node) -> Option<LabelText<'a>> {\n         None\n     }"}]}