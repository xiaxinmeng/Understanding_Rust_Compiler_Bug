{"sha": "882bea5b6d016006ab110d3a9526ffca0a479e27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MmJlYTViNmQwMTYwMDZhYjExMGQzYTk1MjZmZmNhMGE0NzllMjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-19T02:10:51Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-19T15:11:50Z"}, "message": "Rename fn*() to fn() as originally planned.", "tree": {"sha": "128947943bb451a54c1e5425d78fd423ed5cfafd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/128947943bb451a54c1e5425d78fd423ed5cfafd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/882bea5b6d016006ab110d3a9526ffca0a479e27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/882bea5b6d016006ab110d3a9526ffca0a479e27", "html_url": "https://github.com/rust-lang/rust/commit/882bea5b6d016006ab110d3a9526ffca0a479e27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/882bea5b6d016006ab110d3a9526ffca0a479e27/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f0b3d2247ce6ff381f572450dbe733291ffe01a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f0b3d2247ce6ff381f572450dbe733291ffe01a", "html_url": "https://github.com/rust-lang/rust/commit/1f0b3d2247ce6ff381f572450dbe733291ffe01a"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "a5980465048f478d9315a4d60425d0b9d2b99ae4", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/882bea5b6d016006ab110d3a9526ffca0a479e27/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/882bea5b6d016006ab110d3a9526ffca0a479e27/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=882bea5b6d016006ab110d3a9526ffca0a479e27", "patch": "@@ -146,8 +146,8 @@ fn bad_expr_word_table() -> hashmap<str, ()> {\n     for word in [\"mod\", \"if\", \"else\", \"while\", \"do\", \"alt\", \"for\", \"break\",\n                  \"cont\", \"ret\", \"be\", \"fail\", \"type\", \"resource\", \"check\",\n                  \"assert\", \"claim\", \"native\", \"fn\", \"pure\",\n-                 \"unsafe\", \"import\", \"export\", \"let\", \"const\",\n-                 \"log\", \"copy\", \"impl\", \"iface\", \"enum\"] {\n+                 \"unsafe\", \"block\", \"import\", \"export\", \"let\", \"const\",\n+                 \"log\", \"copy\", \"sendfn\", \"impl\", \"iface\", \"enum\"] {\n         words.insert(word, ());\n     }\n     words\n@@ -493,6 +493,9 @@ fn parse_ty(p: parser, colons_before_params: bool) -> @ast::ty {\n           _ { /* fallthrough */ }\n         }\n         t = parse_ty_fn(proto, p);\n+    } else if eat_word(p, \"block\") {\n+        //p.warn(\"block is deprecated, use fn& or fn\");\n+        t = parse_ty_fn(ast::proto_block, p);\n     } else if eat_word(p, \"native\") {\n         expect_word(p, \"fn\");\n         t = parse_ty_fn(ast::proto_bare, p);\n@@ -799,6 +802,9 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n           _ { /* fallthrough */ }\n         }\n         ret pexpr(parse_fn_expr(p, proto));\n+    } else if eat_word(p, \"block\") {\n+        p.warn(\"block is deprecated, use fn& or fn\");\n+        ret pexpr(parse_fn_expr(p, ast::proto_block));\n     } else if eat_word(p, \"unchecked\") {\n         ret pexpr(parse_block_expr(p, lo, ast::unchecked_blk));\n     } else if eat_word(p, \"unsafe\") {\n@@ -2109,12 +2115,8 @@ fn parse_fn_ty_proto(p: parser) -> ast::proto {\n         p.bump();\n         ast::proto_block\n       }\n-      token::BINOP(token::STAR) {\n-        p.bump(); // temporary: fn* for any closure\n-        ast::proto_any\n-      }\n       _ {\n-        ast::proto_bare\n+        ast::proto_any\n       }\n     }\n }"}, {"sha": "d666e0e3fabb29e34ce5943409ad4ec22fff298b", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/882bea5b6d016006ab110d3a9526ffca0a479e27/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/882bea5b6d016006ab110d3a9526ffca0a479e27/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=882bea5b6d016006ab110d3a9526ffca0a479e27", "patch": "@@ -1643,7 +1643,7 @@ fn opt_proto_to_str(opt_p: option<ast::proto>) -> str {\n fn proto_to_str(p: ast::proto) -> str {\n     ret alt p {\n       ast::proto_bare { \"native fn\" }\n-      ast::proto_any { \"fn*\" }\n+      ast::proto_any { \"fn\" }\n       ast::proto_block { \"fn&\" }\n       ast::proto_uniq { \"fn~\" }\n       ast::proto_box { \"fn@\" }"}, {"sha": "0ef325aadd3ab39e4f585eb7401136b20bf56d4d", "filename": "src/test/compile-fail/block-coerce-no-2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/882bea5b6d016006ab110d3a9526ffca0a479e27/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/882bea5b6d016006ab110d3a9526ffca0a479e27/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no-2.rs?ref=882bea5b6d016006ab110d3a9526ffca0a479e27", "patch": "@@ -1,14 +1,13 @@\n-// error-pattern: mismatched types\n-\n // Make sure that fn-to-block coercion isn't incorrectly lifted over\n // other tycons.\n \n fn main() {\n-    fn f(f: fn(fn(fn()))) {\n+    fn f(f: native fn(native fn(native fn()))) {\n     }\n \n-    fn g(f: fn(block())) {\n+    fn g(f: native fn(fn())) {\n     }\n \n     f(g);\n+    //!^ ERROR mismatched types: expected `native fn(native fn(native fn()))`\n }"}, {"sha": "42c893a2064216d0c80f255138bf7089db2abd06", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/882bea5b6d016006ab110d3a9526ffca0a479e27/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/882bea5b6d016006ab110d3a9526ffca0a479e27/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=882bea5b6d016006ab110d3a9526ffca0a479e27", "patch": "@@ -1,16 +1,16 @@\n-// error-pattern: mismatched types\n-\n // Make sure that fn-to-block coercion isn't incorrectly lifted over\n // other tycons.\n \n-fn coerce(b: block()) -> fn() {\n-    fn lol(f: fn(block()) -> fn(), g: block()) -> fn() { ret f(g); }\n-    fn fn_id(f: fn()) -> fn() { ret f }\n+fn coerce(b: fn()) -> native fn() {\n+    fn lol(f: native fn(block()) -> native fn(),\n+           g: fn()) -> native fn() { ret f(g); }\n+    fn fn_id(f: native fn()) -> native fn() { ret f }\n     ret lol(fn_id, b);\n+    //!^ ERROR mismatched types: expected `native fn(fn&()) -> native fn()`\n }\n \n-\n fn main() {\n     let i = 8;\n-    let f = coerce(block () { log(error, i); });\n-    f(); }\n+    let f = coerce({|| log(error, i); });\n+    f();\n+}"}, {"sha": "f0e48076416c6d3dca8901fd01414a52ca5926ed", "filename": "src/test/pretty/fn-types.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/882bea5b6d016006ab110d3a9526ffca0a479e27/src%2Ftest%2Fpretty%2Ffn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/882bea5b6d016006ab110d3a9526ffca0a479e27/src%2Ftest%2Fpretty%2Ffn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ffn-types.rs?ref=882bea5b6d016006ab110d3a9526ffca0a479e27", "patch": "@@ -0,0 +1,8 @@\n+// pp-exact\n+\n+fn from_native_fn(x: native fn()) { }\n+fn from_closure(x: fn()) { }\n+fn from_stack_closure(x: fn&()) { }\n+fn from_box_closure(x: fn@()) { }\n+fn from_unique_closure(x: fn~()) { }\n+fn main() { }"}, {"sha": "a13e03d94ce5a5398ba611c8c4eb5c331777eb97", "filename": "src/test/run-pass/block-arg-used-as-any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/882bea5b6d016006ab110d3a9526ffca0a479e27/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/882bea5b6d016006ab110d3a9526ffca0a479e27/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs?ref=882bea5b6d016006ab110d3a9526ffca0a479e27", "patch": "@@ -1,4 +1,4 @@\n-fn call_any(f: fn*() -> uint) -> uint {\n+fn call_any(f: fn() -> uint) -> uint {\n     ret f();\n }\n "}]}