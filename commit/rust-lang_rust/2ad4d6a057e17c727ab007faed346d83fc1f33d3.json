{"sha": "2ad4d6a057e17c727ab007faed346d83fc1f33d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZDRkNmEwNTdlMTdjNzI3YWIwMDdmYWVkMzQ2ZDgzZmMxZjMzZDM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-07T19:53:56Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-07T19:53:56Z"}, "message": "rustup: update for the new Ty::walk interface.", "tree": {"sha": "018166c2afd8723958ea5fe0b028acb8c321a804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/018166c2afd8723958ea5fe0b028acb8c321a804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ad4d6a057e17c727ab007faed346d83fc1f33d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ad4d6a057e17c727ab007faed346d83fc1f33d3", "html_url": "https://github.com/rust-lang/rust/commit/2ad4d6a057e17c727ab007faed346d83fc1f33d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ad4d6a057e17c727ab007faed346d83fc1f33d3/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89e14d201db8c8dc49fab4c1d17d6546b00817ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/89e14d201db8c8dc49fab4c1d17d6546b00817ae", "html_url": "https://github.com/rust-lang/rust/commit/89e14d201db8c8dc49fab4c1d17d6546b00817ae"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "da83b1f3ce6614f8592d61359c86d66121441127", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2ad4d6a057e17c727ab007faed346d83fc1f33d3/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ad4d6a057e17c727ab007faed346d83fc1f33d3/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=2ad4d6a057e17c727ab007faed346d83fc1f33d3", "patch": "@@ -2,6 +2,7 @@ use if_chain::if_chain;\n use rustc_hir::{Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n@@ -75,8 +76,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n             if let PatKind::Wild = local.pat.kind;\n             if let Some(ref init) = local.init;\n             then {\n-                let check_ty = |ty| SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, ty, path));\n-                if cx.tables.expr_ty(init).walk().any(check_ty) {\n+                let init_ty = cx.tables.expr_ty(init);\n+                let contains_sync_guard = init_ty.walk().any(|inner| match inner.unpack() {\n+                    GenericArgKind::Type(inner_ty) => SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, inner_ty, path)),\n+\n+                    GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+                });\n+                if contains_sync_guard {\n                     span_lint_and_help(\n                         cx,\n                         LET_UNDERSCORE_LOCK,"}, {"sha": "124fc1d9878e80ef22b501941608eb5802c809de", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2ad4d6a057e17c727ab007faed346d83fc1f33d3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ad4d6a057e17c727ab007faed346d83fc1f33d3/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2ad4d6a057e17c727ab007faed346d83fc1f33d3", "patch": "@@ -15,6 +15,7 @@ use rustc_hir::intravisit::{self, Visitor};\n use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n+use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Predicate, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -1407,7 +1408,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id);\n         let item = cx.tcx.hir().expect_item(parent);\n         let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-        let ty = cx.tcx.type_of(def_id);\n+        let self_ty = cx.tcx.type_of(def_id);\n         if_chain! {\n             if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind;\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n@@ -1429,7 +1430,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                         if name == method_name &&\n                         sig.decl.inputs.len() == n_args &&\n                         out_type.matches(cx, &sig.decl.output) &&\n-                        self_kind.matches(cx, ty, first_arg_ty) {\n+                        self_kind.matches(cx, self_ty, first_arg_ty) {\n                             span_lint(cx, SHOULD_IMPLEMENT_TRAIT, impl_item.span, &format!(\n                                 \"defining a method called `{}` on this type; consider implementing \\\n                                 the `{}` trait or choosing a less ambiguous name\", name, trait_name));\n@@ -1441,7 +1442,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                     .iter()\n                     .find(|(ref conv, _)| conv.check(&name))\n                 {\n-                    if !self_kinds.iter().any(|k| k.matches(cx, ty, first_arg_ty)) {\n+                    if !self_kinds.iter().any(|k| k.matches(cx, self_ty, first_arg_ty)) {\n                         let lint = if item.vis.node.is_pub() {\n                             WRONG_PUB_SELF_CONVENTION\n                         } else {\n@@ -1471,8 +1472,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n             let ret_ty = return_ty(cx, impl_item.hir_id);\n \n+            let contains_self_ty = |ty: Ty<'tcx>| {\n+                ty.walk().any(|inner| match inner.unpack() {\n+                    GenericArgKind::Type(inner_ty) => same_tys(cx, self_ty, inner_ty),\n+\n+                    GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,\n+                })\n+            };\n+\n             // walk the return type and check for Self (this does not check associated types)\n-            if ret_ty.walk().any(|inner_type| same_tys(cx, ty, inner_type)) {\n+            if contains_self_ty(ret_ty) {\n                 return;\n             }\n \n@@ -1486,18 +1495,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                             let associated_type = binder.skip_binder();\n \n                             // walk the associated type and check for Self\n-                            for inner_type in associated_type.walk() {\n-                                if same_tys(cx, ty, inner_type) {\n-                                    return;\n-                                }\n+                            if contains_self_ty(associated_type) {\n+                                return;\n                             }\n                         },\n                         (_, _) => {},\n                     }\n                 }\n             }\n \n-            if name == \"new\" && !same_tys(cx, ret_ty, ty) {\n+            if name == \"new\" && !same_tys(cx, ret_ty, self_ty) {\n                 span_lint(\n                     cx,\n                     NEW_RET_NO_SELF,"}]}