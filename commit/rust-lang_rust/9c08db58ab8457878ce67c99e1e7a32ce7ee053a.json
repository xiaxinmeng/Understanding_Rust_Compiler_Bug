{"sha": "9c08db58ab8457878ce67c99e1e7a32ce7ee053a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMDhkYjU4YWI4NDU3ODc4Y2U2N2M5OWUxZTdhMzJjZTdlZTA1M2E=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-04T02:59:46Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-08-04T03:01:00Z"}, "message": "librustc: Implement `#[no_main]`, which omits the entry point entirely.\n\nUseful for SDL and possibly Android too.", "tree": {"sha": "a547322591f219ea30719af00c110f59df04269f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a547322591f219ea30719af00c110f59df04269f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c08db58ab8457878ce67c99e1e7a32ce7ee053a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c08db58ab8457878ce67c99e1e7a32ce7ee053a", "html_url": "https://github.com/rust-lang/rust/commit/9c08db58ab8457878ce67c99e1e7a32ce7ee053a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c08db58ab8457878ce67c99e1e7a32ce7ee053a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34101d2320583a0a95ab3afc4c2b6b75dadb5cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/34101d2320583a0a95ab3afc4c2b6b75dadb5cd7", "html_url": "https://github.com/rust-lang/rust/commit/34101d2320583a0a95ab3afc4c2b6b75dadb5cd7"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "d725e2db1eba109474b71b0a65eaf6d655fd8e6c", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c08db58ab8457878ce67c99e1e7a32ce7ee053a/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c08db58ab8457878ce67c99e1e7a32ce7ee053a/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=9c08db58ab8457878ce67c99e1e7a32ce7ee053a", "patch": "@@ -179,7 +179,8 @@ pub struct crate_metadata {\n #[deriving(Eq)]\n pub enum EntryFnType {\n     EntryMain,\n-    EntryStart\n+    EntryStart,\n+    EntryNone,\n }\n \n pub struct Session_ {"}, {"sha": "39e569a29c90d99e7953e2ad5f5406405e3f156b", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c08db58ab8457878ce67c99e1e7a32ce7ee053a/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c08db58ab8457878ce67c99e1e7a32ce7ee053a/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=9c08db58ab8457878ce67c99e1e7a32ce7ee053a", "patch": "@@ -50,6 +50,12 @@ pub fn find_entry_point(session: Session, crate: &Crate, ast_map: ast_map::map)\n         return;\n     }\n \n+    // If the user wants no main function at all, then stop here.\n+    if attr::contains_name(crate.attrs, \"no_main\") {\n+        *session.entry_type = Some(session::EntryNone);\n+        return\n+    }\n+\n     let ctxt = @mut EntryContext {\n         session: session,\n         ast_map: ast_map,"}, {"sha": "ff6fa714322dae54a98adcea4f5cd825a8f1a282", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c08db58ab8457878ce67c99e1e7a32ce7ee053a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c08db58ab8457878ce67c99e1e7a32ce7ee053a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9c08db58ab8457878ce67c99e1e7a32ce7ee053a", "patch": "@@ -2295,13 +2295,16 @@ pub fn is_entry_fn(sess: &Session, node_id: ast::NodeId) -> bool {\n // Create a _rust_main(args: ~[str]) function which will be called from the\n // runtime rust_start function\n pub fn create_entry_wrapper(ccx: @mut CrateContext,\n-                           _sp: span, main_llfn: ValueRef) {\n+                           _sp: span,\n+                           main_llfn: ValueRef) {\n     let et = ccx.sess.entry_type.unwrap();\n-    if et == session::EntryMain {\n-        let llfn = create_main(ccx, main_llfn);\n-        create_entry_fn(ccx, llfn, true);\n-    } else {\n-        create_entry_fn(ccx, main_llfn, false);\n+    match et {\n+        session::EntryMain => {\n+            let llfn = create_main(ccx, main_llfn);\n+            create_entry_fn(ccx, llfn, true);\n+        }\n+        session::EntryStart => create_entry_fn(ccx, main_llfn, false),\n+        session::EntryNone => {}    // Do nothing.\n     }\n \n     fn create_main(ccx: @mut CrateContext, main_llfn: ValueRef) -> ValueRef {"}, {"sha": "e6c27fc8f836d1ee5db0a598ae661a551a939885", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c08db58ab8457878ce67c99e1e7a32ce7ee053a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c08db58ab8457878ce67c99e1e7a32ce7ee053a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=9c08db58ab8457878ce67c99e1e7a32ce7ee053a", "patch": "@@ -408,9 +408,10 @@ fn check_for_entry_fn(ccx: &CrateCtxt) {\n           Some((id, sp)) => match *tcx.sess.entry_type {\n               Some(session::EntryMain) => check_main_fn_ty(ccx, id, sp),\n               Some(session::EntryStart) => check_start_fn_ty(ccx, id, sp),\n+              Some(session::EntryNone) => {}\n               None => tcx.sess.bug(\"entry function without a type\")\n           },\n-          None => tcx.sess.bug(\"type checking without entry function\")\n+          None => {}\n         }\n     }\n }"}]}