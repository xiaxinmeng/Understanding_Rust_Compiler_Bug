{"sha": "9031ac4840e4da725a5972ac3e6d43f0074b4f3c", "node_id": "C_kwDOAAsO6NoAKDkwMzFhYzQ4NDBlNGRhNzI1YTU5NzJhYzNlNmQ0M2YwMDc0YjRmM2M", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-11T22:31:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-11T22:31:55Z"}, "message": "Rollup merge of #91806 - woppopo:const_unique, r=dtolnay\n\nMake `Unique`s methods `const`\n\nTracking issue: None", "tree": {"sha": "f2a58e982bff400faa4e8274d1029da1f78ffd27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2a58e982bff400faa4e8274d1029da1f78ffd27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9031ac4840e4da725a5972ac3e6d43f0074b4f3c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtSbbCRBK7hj4Ov3rIwAAn4EIAAcaic0YOL/8fWN+N3Y9vZc3\nnIKOf0W1KhmoH+Q8ZcmC4ykXNsGcvZXnDqjrjMkewqUhe27pYJOYmo4G5eBfch5a\nq9xjBefNjd8dKhP1BCEioAXCChchyCUfvpEJUVmSVMk0BtzKw0VHUbTeVCHdKSOU\n3+0kyx70umtHXflxblC7eP7FJum4ZCunnGkBhVslGxoLZOyc//qrinoCCWfezyEl\nOOm4i3DuwCfbqIl3divXb/DDaEPlBc56C43LZgtjJp0WOMC5xEcmGmN7JikvKn8V\nucF0kVqcwq3sH0l5XMf9oDVDR5SWCiRAZNZqe8DrchpT+cVtDiCT2DumFRtZiMI=\n=qU4L\n-----END PGP SIGNATURE-----\n", "payload": "tree f2a58e982bff400faa4e8274d1029da1f78ffd27\nparent 9aade508d57d2e18bc1789fc02d5e7fc8dab2cf3\nparent 34eaf52829b193c8a87c17b4011e342ebf7ca90a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639261915 +0100\ncommitter GitHub <noreply@github.com> 1639261915 +0100\n\nRollup merge of #91806 - woppopo:const_unique, r=dtolnay\n\nMake `Unique`s methods `const`\n\nTracking issue: None\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9031ac4840e4da725a5972ac3e6d43f0074b4f3c", "html_url": "https://github.com/rust-lang/rust/commit/9031ac4840e4da725a5972ac3e6d43f0074b4f3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9031ac4840e4da725a5972ac3e6d43f0074b4f3c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aade508d57d2e18bc1789fc02d5e7fc8dab2cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aade508d57d2e18bc1789fc02d5e7fc8dab2cf3", "html_url": "https://github.com/rust-lang/rust/commit/9aade508d57d2e18bc1789fc02d5e7fc8dab2cf3"}, {"sha": "34eaf52829b193c8a87c17b4011e342ebf7ca90a", "url": "https://api.github.com/repos/rust-lang/rust/commits/34eaf52829b193c8a87c17b4011e342ebf7ca90a", "html_url": "https://github.com/rust-lang/rust/commit/34eaf52829b193c8a87c17b4011e342ebf7ca90a"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "d9a40a9b2ec0dd35028844880555370afd00dece", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9031ac4840e4da725a5972ac3e6d43f0074b4f3c/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9031ac4840e4da725a5972ac3e6d43f0074b4f3c/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=9031ac4840e4da725a5972ac3e6d43f0074b4f3c", "patch": "@@ -124,6 +124,7 @@\n #![feature(const_option)]\n #![feature(const_pin)]\n #![feature(const_replace)]\n+#![feature(const_ptr_is_null)]\n #![feature(const_ptr_offset)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_ptr_read)]"}, {"sha": "f5c624c225f26350b17c0b04cf36c928bb7fdc44", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9031ac4840e4da725a5972ac3e6d43f0074b4f3c/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9031ac4840e4da725a5972ac3e6d43f0074b4f3c/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=9031ac4840e4da725a5972ac3e6d43f0074b4f3c", "patch": "@@ -92,7 +92,7 @@ impl<T: ?Sized> Unique<T> {\n \n     /// Creates a new `Unique` if `ptr` is non-null.\n     #[inline]\n-    pub fn new(ptr: *mut T) -> Option<Self> {\n+    pub const fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n             // SAFETY: The pointer has already been checked and is not null.\n             Some(unsafe { Unique { pointer: ptr as _, _marker: PhantomData } })\n@@ -115,7 +115,7 @@ impl<T: ?Sized> Unique<T> {\n     /// (unbound) lifetime is needed, use `&*my_ptr.as_ptr()`.\n     #[must_use]\n     #[inline]\n-    pub unsafe fn as_ref(&self) -> &T {\n+    pub const unsafe fn as_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &*self.as_ptr() }\n@@ -128,7 +128,7 @@ impl<T: ?Sized> Unique<T> {\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.as_ptr()`.\n     #[must_use]\n     #[inline]\n-    pub unsafe fn as_mut(&mut self) -> &mut T {\n+    pub const unsafe fn as_mut(&mut self) -> &mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a mutable reference.\n         unsafe { &mut *self.as_ptr() }"}]}