{"sha": "11d7be9c6fc72c9337067e0713b06644d3574c45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZDdiZTljNmZjNzJjOTMzNzA2N2UwNzEzYjA2NjQ0ZDM1NzRjNDU=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-03T15:21:55Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-07T14:15:32Z"}, "message": "Move last_error into memory", "tree": {"sha": "66bace9501186dfd8c9491157fed4c4de92541e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66bace9501186dfd8c9491157fed4c4de92541e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11d7be9c6fc72c9337067e0713b06644d3574c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11d7be9c6fc72c9337067e0713b06644d3574c45", "html_url": "https://github.com/rust-lang/rust/commit/11d7be9c6fc72c9337067e0713b06644d3574c45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11d7be9c6fc72c9337067e0713b06644d3574c45/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "905c70cfa55a42af4f5e90a4e5cf0bebc307150c", "url": "https://api.github.com/repos/rust-lang/rust/commits/905c70cfa55a42af4f5e90a4e5cf0bebc307150c", "html_url": "https://github.com/rust-lang/rust/commit/905c70cfa55a42af4f5e90a4e5cf0bebc307150c"}], "stats": {"total": 78, "additions": 60, "deletions": 18}, "files": [{"sha": "aa876d6617ce8af8ff63b3825dff4b21529bf82b", "filename": "src/eval.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11d7be9c6fc72c9337067e0713b06644d3574c45/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d7be9c6fc72c9337067e0713b06644d3574c45/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=11d7be9c6fc72c9337067e0713b06644d3574c45", "patch": "@@ -183,6 +183,13 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         \"start lang item has more arguments than expected\"\n     );\n \n+    // Set the last_error to 0\n+    let errno_layout = ecx.layout_of(ecx.tcx.types.u32)?;\n+    let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Static.into());\n+    ecx.write_scalar(Scalar::from_u32(0), errno_place.into())?;\n+    let errno_ptr = ecx.check_mplace_access(errno_place.into(), Some(Size::from_bits(32)))?;\n+    ecx.machine.last_error = errno_ptr;\n+\n     Ok(ecx)\n }\n "}, {"sha": "c22b3805d46ba2c12b9560e9db78f70d21b414be", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11d7be9c6fc72c9337067e0713b06644d3574c45/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d7be9c6fc72c9337067e0713b06644d3574c45/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=11d7be9c6fc72c9337067e0713b06644d3574c45", "patch": "@@ -92,7 +92,7 @@ pub struct Evaluator<'tcx> {\n     pub(crate) cmd_line: Option<Pointer<Tag>>,\n \n     /// Last OS error.\n-    pub(crate) last_error: u32,\n+    pub(crate) last_error: Option<Pointer<Tag>>,\n \n     /// TLS state.\n     pub(crate) tls: TlsData<'tcx>,\n@@ -113,7 +113,7 @@ impl<'tcx> Evaluator<'tcx> {\n             argc: None,\n             argv: None,\n             cmd_line: None,\n-            last_error: 0,\n+            last_error: None,\n             tls: TlsData::default(),\n             communicate,\n             file_handler: Default::default(),"}, {"sha": "23ba8d96567d12a4d9d174debb00da154eb6c8d4", "filename": "src/shims/env.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/11d7be9c6fc72c9337067e0713b06644d3574c45/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d7be9c6fc72c9337067e0713b06644d3574c45/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=11d7be9c6fc72c9337067e0713b06644d3574c45", "patch": "@@ -137,18 +137,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 if (bytes.len() as u64) < size {\n                     // We add a `/0` terminator\n                     bytes.push(0);\n-                    // This is ok because the buffer is larger than the path with the null terminator.\n+                    // This is ok because the buffer is larger than the path with terminatorhe null terminator.\n                     this.memory_mut()\n                         .get_mut(buf.alloc_id)?\n                         .write_bytes(tcx, buf, &bytes)?;\n                     return Ok(Scalar::Ptr(buf));\n                 }\n-                this.machine.last_error = this\n-                    .eval_path_scalar(&[\"libc\", \"ERANGE\"])?\n-                    .unwrap()\n-                    .to_u32()?;\n+                let erange = this.eval_libc(\"ERANGE\")?;\n+                this.set_last_error(erange)?;\n             }\n-            Err(e) => this.machine.last_error = e.raw_os_error().unwrap() as u32,\n+            Err(e) => this.set_last_error(Scalar::from_int(\n+                e.raw_os_error().unwrap(),\n+                Size::from_bits(32),\n+            ))?,\n         }\n         Ok(Scalar::ptr_null(&*this.tcx))\n     }\n@@ -172,7 +173,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match env::set_current_dir(path) {\n             Ok(()) => Ok(0),\n             Err(e) => {\n-                this.machine.last_error = e.raw_os_error().unwrap() as u32;\n+                this.set_last_error(Scalar::from_int(\n+                    e.raw_os_error().unwrap(),\n+                    Size::from_bits(32),\n+                ))?;\n                 Ok(-1)\n             }\n         }"}, {"sha": "76430260f7ec108c769b939d86cf137ea1f0601e", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11d7be9c6fc72c9337067e0713b06644d3574c45/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d7be9c6fc72c9337067e0713b06644d3574c45/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=11d7be9c6fc72c9337067e0713b06644d3574c45", "patch": "@@ -808,11 +808,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             \"SetLastError\" => {\n-                let err = this.read_scalar(args[0])?.to_u32()?;\n-                this.machine.last_error = err;\n+                this.set_last_error(this.read_scalar(args[0])?.not_undef()?)?;\n             }\n             \"GetLastError\" => {\n-                this.write_scalar(Scalar::from_u32(this.machine.last_error), dest)?;\n+                let last_error = this.get_last_error()?;\n+                this.write_scalar(last_error, dest)?;\n             }\n \n             \"AddVectoredExceptionHandler\" => {\n@@ -929,7 +929,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"GetEnvironmentVariableW\" => {\n                 // This is not the env var you are looking for.\n-                this.machine.last_error = 203; // ERROR_ENVVAR_NOT_FOUND\n+                this.set_last_error(Scalar::from_u32(203))?; // ERROR_ENVVAR_NOT_FOUND\n                 this.write_null(dest)?;\n             }\n             \"GetCommandLineW\" => {\n@@ -971,11 +971,37 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         return Ok(None);\n     }\n \n-    fn eval_libc_i32(&mut self, name: &str) -> InterpResult<'tcx, i32> {\n+    fn eval_libc(&mut self, name: &str) -> InterpResult<'tcx, Scalar<Tag>> {\n         self.eval_context_mut()\n             .eval_path_scalar(&[\"libc\", name])?\n             .ok_or_else(|| err_unsup_format!(\"Path libc::{} cannot be resolved.\", name).into())\n-            .and_then(|scalar| scalar.to_i32())\n+            .and_then(|scalar| scalar.not_undef())\n+    }\n+\n+    fn eval_libc_i32(&mut self, name: &str) -> InterpResult<'tcx, i32> {\n+        self.eval_libc(name).and_then(|scalar| scalar.to_i32())\n+    }\n+\n+    fn set_last_error(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx, ()> {\n+        let this = self.eval_context_mut();\n+        let tcx = &{ this.tcx.tcx };\n+        let errno_ptr = this.machine.last_error.unwrap();\n+        this.memory_mut().get_mut(errno_ptr.alloc_id)?.write_scalar(\n+            tcx,\n+            errno_ptr,\n+            scalar.into(),\n+            Size::from_bits(32),\n+        )\n+    }\n+\n+    fn get_last_error(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n+        let this = self.eval_context_mut();\n+        let tcx = &{ this.tcx.tcx };\n+        let errno_ptr = this.machine.last_error.unwrap();\n+        this.memory()\n+            .get(errno_ptr.alloc_id)?\n+            .read_scalar(tcx, errno_ptr, Size::from_bits(32))?\n+            .not_undef()\n     }\n }\n "}, {"sha": "1eaebbf0b8870916298bb0b39ec9f323bc058193", "filename": "src/shims/io.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11d7be9c6fc72c9337067e0713b06644d3574c45/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d7be9c6fc72c9337067e0713b06644d3574c45/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=11d7be9c6fc72c9337067e0713b06644d3574c45", "patch": "@@ -221,7 +221,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some(handle) = this.machine.file_handler.handles.get(&fd) {\n             f(handle)\n         } else {\n-            this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n+            let ebadf = this.eval_libc(\"EBADF\")?;\n+            this.set_last_error(ebadf)?;\n             Ok((-1).into())\n         }\n     }\n@@ -244,7 +245,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Some(handle) = this.machine.file_handler.handles.remove(&fd) {\n             f(handle, this)\n         } else {\n-            this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n+            let ebadf = this.eval_libc(\"EBADF\")?;\n+            this.set_last_error(ebadf)?;\n             Ok((-1).into())\n         }\n     }\n@@ -262,7 +264,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match result {\n             Ok(ok) => Ok(ok),\n             Err(e) => {\n-                self.eval_context_mut().machine.last_error = e.raw_os_error().unwrap() as u32;\n+                self.eval_context_mut().set_last_error(Scalar::from_int(\n+                    e.raw_os_error().unwrap(),\n+                    Size::from_bits(32),\n+                ))?;\n                 Ok((-1).into())\n             }\n         }"}]}