{"sha": "d384ff79308c4eb0a3679817cd0def0147ad8612", "node_id": "C_kwDOAAsO6NoAKGQzODRmZjc5MzA4YzRlYjBhMzY3OTgxN2NkMGRlZjAxNDdhZDg2MTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-01T02:51:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-01T02:51:15Z"}, "message": "Auto merge of #91406 - matthiaskrgr:rollup-a2whn8m, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #91294 (Visit type in process_projection_elem.)\n - #91340 (Bump compiler_builtins to 0.1.55 to bring in fixes for targets lackin\u2026)\n - #91366 (Only show notable traits if both types are the same)\n - #91397 (Emit a warning on generic parameters with doc comments)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b2ab6d98fbe14974fee2fbc802ce673978b3816f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2ab6d98fbe14974fee2fbc802ce673978b3816f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d384ff79308c4eb0a3679817cd0def0147ad8612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d384ff79308c4eb0a3679817cd0def0147ad8612", "html_url": "https://github.com/rust-lang/rust/commit/d384ff79308c4eb0a3679817cd0def0147ad8612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d384ff79308c4eb0a3679817cd0def0147ad8612/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "207c80f105282245d93024c95ac408c622f70114", "url": "https://api.github.com/repos/rust-lang/rust/commits/207c80f105282245d93024c95ac408c622f70114", "html_url": "https://github.com/rust-lang/rust/commit/207c80f105282245d93024c95ac408c622f70114"}, {"sha": "7baafb1f5eba346a04b54c0501671dd0e1ad8aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7baafb1f5eba346a04b54c0501671dd0e1ad8aa4", "html_url": "https://github.com/rust-lang/rust/commit/7baafb1f5eba346a04b54c0501671dd0e1ad8aa4"}], "stats": {"total": 157, "additions": 92, "deletions": 65}, "files": [{"sha": "2233162be3b6b464749f9d474f7d189064dbcd10", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d384ff79308c4eb0a3679817cd0def0147ad8612/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d384ff79308c4eb0a3679817cd0def0147ad8612/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d384ff79308c4eb0a3679817cd0def0147ad8612", "patch": "@@ -678,9 +678,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.53\"\n+version = \"0.1.55\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2467ff455350a4df7d02f1ed1449d0279605a763de5d586dcf6aa7d732508bcb\"\n+checksum = \"c9ac60765140c97aaf531dae151a287646b0805ec725805da9e2a3ee31cd501c\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\","}, {"sha": "4b6cab24cdb70457537d01f21608a3cacea06e68", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d384ff79308c4eb0a3679817cd0def0147ad8612/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d384ff79308c4eb0a3679817cd0def0147ad8612/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=d384ff79308c4eb0a3679817cd0def0147ad8612", "patch": "@@ -1,7 +1,7 @@\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::mir::visit::{MutVisitor, TyContext};\n-use rustc_middle::mir::{Body, Location, PlaceElem, Promoted};\n+use rustc_middle::mir::{Body, Location, Promoted};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n@@ -62,22 +62,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n         debug!(?ty);\n     }\n \n-    fn process_projection_elem(\n-        &mut self,\n-        elem: PlaceElem<'tcx>,\n-        _: Location,\n-    ) -> Option<PlaceElem<'tcx>> {\n-        if let PlaceElem::Field(field, ty) = elem {\n-            let new_ty = self.renumber_regions(ty);\n-\n-            if new_ty != ty {\n-                return Some(PlaceElem::Field(field, new_ty));\n-            }\n-        }\n-\n-        None\n-    }\n-\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, location: Location) {\n         *substs = self.renumber_regions(*substs);"}, {"sha": "077d3e1c82058bd055d33ed0b673571ab001c134", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d384ff79308c4eb0a3679817cd0def0147ad8612/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d384ff79308c4eb0a3679817cd0def0147ad8612/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=d384ff79308c4eb0a3679817cd0def0147ad8612", "patch": "@@ -1079,6 +1079,10 @@ impl EarlyLintPass for UnusedDocComment {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n         warn_if_doc(cx, expr.span, \"expressions\", &expr.attrs);\n     }\n+\n+    fn check_generic_param(&mut self, cx: &EarlyContext<'_>, param: &ast::GenericParam) {\n+        warn_if_doc(cx, param.ident.span, \"generic parameters\", &param.attrs);\n+    }\n }\n \n declare_lint! {"}, {"sha": "4c23ab49fa29f71efd91a9e12c482d41bf0ada32", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d384ff79308c4eb0a3679817cd0def0147ad8612/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d384ff79308c4eb0a3679817cd0def0147ad8612/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=d384ff79308c4eb0a3679817cd0def0147ad8612", "patch": "@@ -1004,8 +1004,12 @@ macro_rules! visit_place_fns {\n \n                     if new_local == local { None } else { Some(PlaceElem::Index(new_local)) }\n                 }\n+                PlaceElem::Field(field, ty) => {\n+                    let mut new_ty = ty;\n+                    self.visit_ty(&mut new_ty, TyContext::Location(location));\n+                    if ty != new_ty { Some(PlaceElem::Field(field, new_ty)) } else { None }\n+                }\n                 PlaceElem::Deref\n-                | PlaceElem::Field(..)\n                 | PlaceElem::ConstantIndex { .. }\n                 | PlaceElem::Subslice { .. }\n                 | PlaceElem::Downcast(..) => None,"}, {"sha": "c45946a9e2a982d6ca43e534934250481922453a", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d384ff79308c4eb0a3679817cd0def0147ad8612/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d384ff79308c4eb0a3679817cd0def0147ad8612/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=d384ff79308c4eb0a3679817cd0def0147ad8612", "patch": "@@ -316,28 +316,6 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n         }\n     }\n \n-    fn process_projection_elem(\n-        &mut self,\n-        elem: PlaceElem<'tcx>,\n-        _: Location,\n-    ) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Index(local) => {\n-                if let Some(replacement) = self.replacements.for_src(local) {\n-                    bug!(\n-                        \"cannot replace {:?} with {:?} in index projection {:?}\",\n-                        local,\n-                        replacement,\n-                        elem,\n-                    );\n-                } else {\n-                    None\n-                }\n-            }\n-            _ => None,\n-        }\n-    }\n-\n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n         if let Some(replacement) = self.replacements.for_src(place.local) {\n             // Rebase `place`s projections onto `replacement`'s."}, {"sha": "3bcb71b64f455e2cf0ba4dcd55f4a9c85d50b6e0", "filename": "compiler/rustc_mir_transform/src/reveal_all.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d384ff79308c4eb0a3679817cd0def0147ad8612/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d384ff79308c4eb0a3679817cd0def0147ad8612/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs?ref=d384ff79308c4eb0a3679817cd0def0147ad8612", "patch": "@@ -35,24 +35,4 @@ impl<'tcx> MutVisitor<'tcx> for RevealAllVisitor<'tcx> {\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: TyContext) {\n         *ty = self.tcx.normalize_erasing_regions(self.param_env, ty);\n     }\n-\n-    #[inline]\n-    fn process_projection_elem(\n-        &mut self,\n-        elem: PlaceElem<'tcx>,\n-        _: Location,\n-    ) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Field(field, ty) => {\n-                let new_ty = self.tcx.normalize_erasing_regions(self.param_env, ty);\n-                if ty != new_ty { Some(PlaceElem::Field(field, new_ty)) } else { None }\n-            }\n-            // None of those contain a Ty.\n-            PlaceElem::Index(..)\n-            | PlaceElem::Deref\n-            | PlaceElem::ConstantIndex { .. }\n-            | PlaceElem::Subslice { .. }\n-            | PlaceElem::Downcast(..) => None,\n-        }\n-    }\n }"}, {"sha": "f71117483214297ba4c5cc4d8300a2cb14673845", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d384ff79308c4eb0a3679817cd0def0147ad8612/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d384ff79308c4eb0a3679817cd0def0147ad8612/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=d384ff79308c4eb0a3679817cd0def0147ad8612", "patch": "@@ -16,7 +16,7 @@ panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n libc = { version = \"0.2.108\", default-features = false, features = ['rustc-dep-of-std'] }\n-compiler_builtins = { version = \"0.1.53\" }\n+compiler_builtins = { version = \"0.1.55\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }\n hashbrown = { version = \"0.11\", default-features = false, features = ['rustc-dep-of-std'] }"}, {"sha": "11dd140504ae381e7c3f6295827b5f9fc3a569f8", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d384ff79308c4eb0a3679817cd0def0147ad8612/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d384ff79308c4eb0a3679817cd0def0147ad8612/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d384ff79308c4eb0a3679817cd0def0147ad8612", "patch": "@@ -1468,6 +1468,45 @@ crate enum Type {\n rustc_data_structures::static_assert_size!(Type, 72);\n \n impl Type {\n+    /// When comparing types for equality, it can help to ignore `&` wrapping.\n+    crate fn without_borrowed_ref(&self) -> &Type {\n+        let mut result = self;\n+        while let Type::BorrowedRef { type_, .. } = result {\n+            result = &*type_;\n+        }\n+        result\n+    }\n+\n+    /// Check if two types are \"potentially the same\".\n+    /// This is different from `Eq`, because it knows that things like\n+    /// `Placeholder` are possible matches for everything.\n+    crate fn is_same(&self, other: &Self, cache: &Cache) -> bool {\n+        match (self, other) {\n+            // Recursive cases.\n+            (Type::Tuple(a), Type::Tuple(b)) => {\n+                a.len() == b.len() && a.iter().zip(b).all(|(a, b)| a.is_same(&b, cache))\n+            }\n+            (Type::Slice(a), Type::Slice(b)) => a.is_same(&b, cache),\n+            (Type::Array(a, al), Type::Array(b, bl)) => al == bl && a.is_same(&b, cache),\n+            (Type::RawPointer(mutability, type_), Type::RawPointer(b_mutability, b_type_)) => {\n+                mutability == b_mutability && type_.is_same(&b_type_, cache)\n+            }\n+            (\n+                Type::BorrowedRef { mutability, type_, .. },\n+                Type::BorrowedRef { mutability: b_mutability, type_: b_type_, .. },\n+            ) => mutability == b_mutability && type_.is_same(&b_type_, cache),\n+            // Placeholders and generics are equal to all other types.\n+            (Type::Infer, _) | (_, Type::Infer) => true,\n+            (Type::Generic(_), _) | (_, Type::Generic(_)) => true,\n+            // Other cases, such as primitives, just use recursion.\n+            (a, b) => a\n+                .def_id(cache)\n+                .and_then(|a| Some((a, b.def_id(cache)?)))\n+                .map(|(a, b)| a == b)\n+                .unwrap_or(false),\n+        }\n+    }\n+\n     crate fn primitive_type(&self) -> Option<PrimitiveType> {\n         match *self {\n             Primitive(p) | BorrowedRef { type_: box Primitive(p), .. } => Some(p),"}, {"sha": "8bf7d0416dd0a2594ab2452cb04e1d82b5b381fb", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d384ff79308c4eb0a3679817cd0def0147ad8612/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d384ff79308c4eb0a3679817cd0def0147ad8612/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=d384ff79308c4eb0a3679817cd0def0147ad8612", "patch": "@@ -1235,10 +1235,17 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, tcx: TyCtxt<'_>) ->\n fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n     let mut out = Buffer::html();\n \n-    if let Some(did) = decl.output.as_return().and_then(|t| t.def_id(cx.cache())) {\n+    if let Some((did, ty)) = decl.output.as_return().and_then(|t| Some((t.def_id(cx.cache())?, t)))\n+    {\n         if let Some(impls) = cx.cache().impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();\n+                if !impl_.for_.without_borrowed_ref().is_same(ty.without_borrowed_ref(), cx.cache())\n+                {\n+                    // Two different types might have the same did,\n+                    // without actually being the same.\n+                    continue;\n+                }\n                 if let Some(trait_) = &impl_.trait_ {\n                     let trait_did = trait_.def_id();\n "}, {"sha": "b0d414027216ac7ca1ad7558479c463272151ea2", "filename": "src/test/rustdoc/doc-notable_trait-slice.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d384ff79308c4eb0a3679817cd0def0147ad8612/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d384ff79308c4eb0a3679817cd0def0147ad8612/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.rs?ref=d384ff79308c4eb0a3679817cd0def0147ad8612", "patch": "@@ -0,0 +1,20 @@\n+#![feature(doc_notable_trait)]\n+\n+#[doc(notable_trait)]\n+pub trait SomeTrait {}\n+\n+pub struct SomeStruct;\n+pub struct OtherStruct;\n+impl SomeTrait for &[SomeStruct] {}\n+\n+// @has doc_notable_trait_slice/fn.bare_fn_matches.html\n+// @has - '//code[@class=\"content\"]' 'impl SomeTrait for &[SomeStruct]'\n+pub fn bare_fn_matches() -> &'static [SomeStruct] {\n+    &[]\n+}\n+\n+// @has doc_notable_trait_slice/fn.bare_fn_no_matches.html\n+// @!has - '//code[@class=\"content\"]' 'impl SomeTrait for &[SomeStruct]'\n+pub fn bare_fn_no_matches() -> &'static [OtherStruct] {\n+    &[]\n+}"}, {"sha": "258f9e4831f9a3cddefc110f71cb43c55de0d763", "filename": "src/test/ui/lint/unused/unused-doc-comments-edge-cases.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d384ff79308c4eb0a3679817cd0def0147ad8612/src%2Ftest%2Fui%2Flint%2Funused%2Funused-doc-comments-edge-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d384ff79308c4eb0a3679817cd0def0147ad8612/src%2Ftest%2Fui%2Flint%2Funused%2Funused-doc-comments-edge-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-doc-comments-edge-cases.rs?ref=d384ff79308c4eb0a3679817cd0def0147ad8612", "patch": "@@ -26,4 +26,7 @@ fn doc_comment_on_expr(num: u8) -> bool {\n     num == 3\n }\n \n+fn doc_comment_on_generic<#[doc = \"x\"] T>(val: T) {}\n+//~^ ERROR: unused doc comment\n+\n fn main() {}"}, {"sha": "3ce1df71a2ed58b9c41004cc102416075dde40fc", "filename": "src/test/ui/lint/unused/unused-doc-comments-edge-cases.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d384ff79308c4eb0a3679817cd0def0147ad8612/src%2Ftest%2Fui%2Flint%2Funused%2Funused-doc-comments-edge-cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d384ff79308c4eb0a3679817cd0def0147ad8612/src%2Ftest%2Fui%2Flint%2Funused%2Funused-doc-comments-edge-cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-doc-comments-edge-cases.stderr?ref=d384ff79308c4eb0a3679817cd0def0147ad8612", "patch": "@@ -41,6 +41,14 @@ LL |     num == 3\n    |\n    = help: use `//` for a plain comment\n \n+error: unused doc comment\n+  --> $DIR/unused-doc-comments-edge-cases.rs:29:27\n+   |\n+LL | fn doc_comment_on_generic<#[doc = \"x\"] T>(val: T) {}\n+   |                           ^^^^^^^^^^^^ - rustdoc does not generate documentation for generic parameters\n+   |\n+   = help: use `//` for a plain comment\n+\n error[E0308]: mismatched types\n   --> $DIR/unused-doc-comments-edge-cases.rs:14:9\n    |\n@@ -55,7 +63,7 @@ help: you might have meant to return this value\n LL |         return true;\n    |         ++++++     +\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0308, E0658.\n For more information about an error, try `rustc --explain E0308`."}]}