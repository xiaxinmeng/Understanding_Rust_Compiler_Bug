{"sha": "5205c84ec7d6284b258e66a06c3e330c3f9fdd88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMDVjODRlYzdkNjI4NGIyNThlNjZhMDZjM2UzMzBjM2Y5ZmRkODg=", "commit": {"author": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-17T20:15:31Z"}, "committer": {"name": "uHOOCCOOHu", "email": "hooccooh1896@gmail.com", "date": "2019-09-25T22:02:04Z"}, "message": "Support auto-deref in argument position", "tree": {"sha": "0f91cb3081f435dd547f9183b145ce1c58164ab1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f91cb3081f435dd547f9183b145ce1c58164ab1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5205c84ec7d6284b258e66a06c3e330c3f9fdd88", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl2L494ACgkQztOS3gxI\nPQCmUw//YBbcrTgulxw5EPLcmLWv1eRHHDsowbFBUhofBNHJURGh4NVYkmWyd9fr\nNWtoN+AUhuch1754hWTxhG/s9KEi7gzxjGyQoG7Fb/qn7IJDy+J9QE9TnwyxXVL4\n4G58V+nppSvC2fjvOnsWaEZVd/9sG2JTuB3iVNH+4yaVH4zoEt/ZFlpoo0JdTpMA\nogSpM2FHvBsSEL/Rt3ZYRPWXHJ4kpop0KoUPiBGRzhv/D6gTGIQFBSXi7Wv4AoKV\nvY6HQC474LAoPhqQtNSrKwyavLsIg/P47CEw7IPlE+DEF+PlsAz6zhkT1WFuRa6n\nFb2oQ6KFg1UUT11aAHdxMyMvRI88x5cYSPS1+0orAQ/MAyxV/f2DsxbYBptS3vGr\niCXdPJBX+YI5Ep8wGg1M+8rpv2q/MuYLe6055hVtSz6xumHYPrk3Ojm7hQxLw2oT\nMSXNmumiK6RQfW3YZXglZ8GrKT4qe1rhBJSbbyBERraQZICNvUsc+gxH1n8YuxoH\nfvgMFrZxl0Fjb1dn/6NIZOrpfrQsmKmxIkAN0o8FLgX+PpfPXguU1DO/huMlrfLp\nC8kb3J8+jHrrbVMHSos5w8ZMY++5XMa0pPuE0F3ubBG2PqIqrKFgs3f4OiUG1ehW\n77+V+dFz6yWS4JhD6sMxTvygHyo08zMhSqZAj1WxGV+ov9tWBs8=\n=N7lb\n-----END PGP SIGNATURE-----", "payload": "tree 0f91cb3081f435dd547f9183b145ce1c58164ab1\nparent 870ce4b1a50a07e3a536ab26215804acdfc9ba8a\nauthor uHOOCCOOHu <hooccooh1896@gmail.com> 1568751331 +0800\ncommitter uHOOCCOOHu <hooccooh1896@gmail.com> 1569448924 +0800\n\nSupport auto-deref in argument position\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5205c84ec7d6284b258e66a06c3e330c3f9fdd88", "html_url": "https://github.com/rust-lang/rust/commit/5205c84ec7d6284b258e66a06c3e330c3f9fdd88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5205c84ec7d6284b258e66a06c3e330c3f9fdd88/comments", "author": null, "committer": null, "parents": [{"sha": "870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/870ce4b1a50a07e3a536ab26215804acdfc9ba8a", "html_url": "https://github.com/rust-lang/rust/commit/870ce4b1a50a07e3a536ab26215804acdfc9ba8a"}], "stats": {"total": 162, "additions": 161, "deletions": 1}, "files": [{"sha": "746b07a0543f119ce9cbc9edc7f8318ccb0f7690", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5205c84ec7d6284b258e66a06c3e330c3f9fdd88/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5205c84ec7d6284b258e66a06c3e330c3f9fdd88/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=5205c84ec7d6284b258e66a06c3e330c3f9fdd88", "patch": "@@ -806,6 +806,47 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         }\n     }\n \n+    fn unify_with_autoderef(&mut self, from_ty: &Ty, to_ty: &Ty) -> bool {\n+        macro_rules! ty_app {\n+            ($ctor:pat, $param:pat) => {\n+                Ty::Apply(ApplicationTy { ctor: $ctor, parameters: $param })\n+            };\n+        }\n+\n+        // If given type and expected type are compatible reference,\n+        // trigger auto-deref.\n+        let (_to_mut, from_ty, to_ty) =\n+            match (&*self.resolve_ty_shallow(&from_ty), &*self.resolve_ty_shallow(&to_ty)) {\n+                (\n+                    ty_app!(TypeCtor::Ref(from_mut), from_param),\n+                    ty_app!(TypeCtor::Ref(to_mut), to_param),\n+                ) if *from_mut == Mutability::Mut || from_mut == to_mut => {\n+                    (to_mut, from_param[0].clone(), to_param[0].clone())\n+                }\n+                _ => {\n+                    // Otherwise, just unify\n+                    return self.unify(&from_ty, &to_ty);\n+                }\n+            };\n+\n+        let canonicalized = self.canonicalizer().canonicalize_ty(from_ty);\n+        // FIXME: Auto DerefMut\n+        for derefed_ty in\n+            autoderef::autoderef(self.db, &self.resolver.clone(), canonicalized.value.clone())\n+        {\n+            let derefed_ty = canonicalized.decanonicalize_ty(derefed_ty.value);\n+            match (&*self.resolve_ty_shallow(&derefed_ty), &*self.resolve_ty_shallow(&to_ty)) {\n+                // Unify when constructor matches.\n+                (ty_app!(from_ctor, _), ty_app!(to_ctor, _)) if from_ctor == to_ctor => {\n+                    return self.unify(&derefed_ty, &to_ty);\n+                }\n+                _ => {}\n+            }\n+        }\n+\n+        false\n+    }\n+\n     fn infer_expr(&mut self, tgt_expr: ExprId, expected: &Expectation) -> Ty {\n         let ty = self.infer_expr_inner(tgt_expr, expected);\n         let could_unify = self.unify(&ty, &expected.ty);\n@@ -1285,7 +1326,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 }\n \n                 let param_ty = self.normalize_associated_types_in(param_ty);\n-                self.infer_expr(arg, &Expectation::has_type(param_ty));\n+                let arg_ty = self.infer_expr_inner(arg, &Expectation::has_type(param_ty.clone()));\n+                self.unify_with_autoderef(&arg_ty, &param_ty);\n             }\n         }\n     }"}, {"sha": "6076e40250380a0a51197d6768cef2262851db9e", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/5205c84ec7d6284b258e66a06c3e330c3f9fdd88/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5205c84ec7d6284b258e66a06c3e330c3f9fdd88/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=5205c84ec7d6284b258e66a06c3e330c3f9fdd88", "patch": "@@ -800,6 +800,124 @@ fn test2(a1: *const A, a2: *mut A) {\n     );\n }\n \n+#[test]\n+fn infer_argument_autoderef() {\n+    assert_snapshot!(\n+        infer(r#\"\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target: ?Sized;\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+struct A<T>(T);\n+\n+impl<T: Copy> A<T> {\n+    fn foo(&self) -> T {\n+        self.0\n+    }\n+}\n+\n+struct B<T>(T);\n+\n+impl<T> Deref for B<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+fn test() {\n+    A::foo(&&B(B(A(42))));\n+}\n+\"#),\n+        @r###\"\n+    [76; 80) 'self': &Self\n+    [153; 157) 'self': &A<T>\n+    [164; 186) '{     ...     }': T\n+    [174; 178) 'self': &A<T>\n+    [174; 180) 'self.0': T\n+    [267; 271) 'self': &B<T>\n+    [290; 313) '{     ...     }': &T\n+    [300; 307) '&self.0': &T\n+    [301; 305) 'self': &B<T>\n+    [301; 307) 'self.0': T\n+    [327; 357) '{     ...))); }': ()\n+    [333; 339) 'A::foo': fn foo<i32>(&A<T>) -> T\n+    [333; 354) 'A::foo...42))))': i32\n+    [340; 353) '&&B(B(A(42)))': &&B<B<A<i32>>>\n+    [341; 353) '&B(B(A(42)))': &B<B<A<i32>>>\n+    [342; 343) 'B': B<B<A<i32>>>(T) -> B<T>\n+    [342; 353) 'B(B(A(42)))': B<B<A<i32>>>\n+    [344; 345) 'B': B<A<i32>>(T) -> B<T>\n+    [344; 352) 'B(A(42))': B<A<i32>>\n+    [346; 347) 'A': A<i32>(T) -> A<T>\n+    [346; 351) 'A(42)': A<i32>\n+    [348; 350) '42': i32\n+\"###\n+    );\n+}\n+\n+#[test]\n+fn infer_method_argument_autoderef() {\n+    assert_snapshot!(\n+        infer(r#\"\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target: ?Sized;\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+struct A<T>(*mut T);\n+\n+impl<T: Copy> A<T> {\n+    fn foo(&self, x: &A<T>) -> T {\n+        x\n+    }\n+}\n+\n+struct B<T>(T);\n+\n+impl<T> Deref for B<T> {\n+    type Target = T;\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+fn test(a: A<i32>) {\n+    A(0 as *mut _).foo(&&B(B(a)));\n+}\n+\"#),\n+        @r###\"\n+    [76; 80) 'self': &Self\n+    [158; 162) 'self': &A<T>\n+    [164; 165) 'x': &A<T>\n+    [179; 196) '{     ...     }': &A<T>\n+    [189; 190) 'x': &A<T>\n+    [277; 281) 'self': &B<T>\n+    [300; 323) '{     ...     }': &T\n+    [310; 317) '&self.0': &T\n+    [311; 315) 'self': &B<T>\n+    [311; 317) 'self.0': T\n+    [335; 336) 'a': A<i32>\n+    [346; 384) '{     ...))); }': ()\n+    [352; 353) 'A': A<i32>(*mut T) -> A<T>\n+    [352; 366) 'A(0 as *mut _)': A<i32>\n+    [352; 381) 'A(0 as...B(a)))': i32\n+    [354; 355) '0': i32\n+    [354; 365) '0 as *mut _': *mut i32\n+    [371; 380) '&&B(B(a))': &&B<B<A<i32>>>\n+    [372; 380) '&B(B(a))': &B<B<A<i32>>>\n+    [373; 374) 'B': B<B<A<i32>>>(T) -> B<T>\n+    [373; 380) 'B(B(a))': B<B<A<i32>>>\n+    [375; 376) 'B': B<A<i32>>(T) -> B<T>\n+    [375; 379) 'B(a)': B<A<i32>>\n+    [377; 378) 'a': A<i32>\n+\"###\n+    );\n+}\n+\n #[test]\n fn bug_484() {\n     assert_snapshot!("}]}