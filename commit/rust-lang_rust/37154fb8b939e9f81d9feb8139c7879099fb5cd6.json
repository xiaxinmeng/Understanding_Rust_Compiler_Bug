{"sha": "37154fb8b939e9f81d9feb8139c7879099fb5cd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MTU0ZmI4YjkzOWU5ZjgxZDlmZWI4MTM5Yzc4NzkwOTlmYjVjZDY=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-03T22:27:46Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-20T09:16:55Z"}, "message": "Add a Share kind\n\nFixes #11781", "tree": {"sha": "96bdf3f13de03d400d9d60be1084537e2ff33752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96bdf3f13de03d400d9d60be1084537e2ff33752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37154fb8b939e9f81d9feb8139c7879099fb5cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37154fb8b939e9f81d9feb8139c7879099fb5cd6", "html_url": "https://github.com/rust-lang/rust/commit/37154fb8b939e9f81d9feb8139c7879099fb5cd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37154fb8b939e9f81d9feb8139c7879099fb5cd6/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a92dcb082851359bb5855ee642af3e3e1eda377f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a92dcb082851359bb5855ee642af3e3e1eda377f", "html_url": "https://github.com/rust-lang/rust/commit/a92dcb082851359bb5855ee642af3e3e1eda377f"}], "stats": {"total": 105, "additions": 76, "deletions": 29}, "files": [{"sha": "157cc8cd0f08da88db84c75760d5099d5e705440", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=37154fb8b939e9f81d9feb8139c7879099fb5cd6", "patch": "@@ -603,6 +603,9 @@ fn parse_bounds(st: &mut PState, conv: conv_did) -> ty::ParamBounds {\n             'P' => {\n                 param_bounds.builtin_bounds.add(ty::BoundPod);\n             }\n+            'T' => {\n+                param_bounds.builtin_bounds.add(ty::BoundShare);\n+            }\n             'I' => {\n                 param_bounds.trait_bounds.push(@parse_trait_ref(st, |x,y| conv(x,y)));\n             }"}, {"sha": "792fca5eca679fc5d0551c7249bfce28ce29b2fa", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=37154fb8b939e9f81d9feb8139c7879099fb5cd6", "patch": "@@ -410,6 +410,7 @@ fn enc_bounds(w: &mut MemWriter, cx: &ctxt, bs: &ty::ParamBounds) {\n             ty::BoundStatic => mywrite!(w, \"O\"),\n             ty::BoundSized => mywrite!(w, \"Z\"),\n             ty::BoundPod => mywrite!(w, \"P\"),\n+            ty::BoundShare => mywrite!(w, \"T\"),\n         }\n     }\n "}, {"sha": "4e16683bcba04f0a6a0706a68437bb2d6b3b5f56", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=37154fb8b939e9f81d9feb8139c7879099fb5cd6", "patch": "@@ -22,7 +22,7 @@\n \n use driver::session::Session;\n use metadata::csearch::each_lang_item;\n-use middle::ty::{BuiltinBound, BoundFreeze, BoundPod, BoundSend, BoundSized};\n+use middle::ty;\n use syntax::ast;\n use syntax::ast_util::local_def;\n use syntax::attr::AttrMetaMethods;\n@@ -82,15 +82,17 @@ impl LanguageItems {\n         }\n     }\n \n-    pub fn to_builtin_kind(&self, id: ast::DefId) -> Option<BuiltinBound> {\n+    pub fn to_builtin_kind(&self, id: ast::DefId) -> Option<ty::BuiltinBound> {\n         if Some(id) == self.freeze_trait() {\n-            Some(BoundFreeze)\n+            Some(ty::BoundFreeze)\n         } else if Some(id) == self.send_trait() {\n-            Some(BoundSend)\n+            Some(ty::BoundSend)\n         } else if Some(id) == self.sized_trait() {\n-            Some(BoundSized)\n+            Some(ty::BoundSized)\n         } else if Some(id) == self.pod_trait() {\n-            Some(BoundPod)\n+            Some(ty::BoundPod)\n+        } else if Some(id) == self.share_trait() {\n+            Some(ty::BoundShare)\n         } else {\n             None\n         }\n@@ -213,6 +215,7 @@ lets_do_this! {\n     SendTraitLangItem,               \"send\",                    send_trait;\n     SizedTraitLangItem,              \"sized\",                   sized_trait;\n     PodTraitLangItem,                \"pod\",                     pod_trait;\n+    ShareTraitLangItem,              \"share\",                   share_trait;\n \n     DropTraitLangItem,               \"drop\",                    drop_trait;\n \n@@ -274,5 +277,6 @@ lets_do_this! {\n     NoFreezeItem,                    \"no_freeze_bound\",         no_freeze_bound;\n     NoSendItem,                      \"no_send_bound\",           no_send_bound;\n     NoPodItem,                       \"no_pod_bound\",            no_pod_bound;\n+    NoShareItem,                     \"no_share_bound\",          no_share_bound;\n     ManagedItem,                     \"managed_bound\",           managed_bound;\n }"}, {"sha": "00ccadc68c600a0cc7ae6d220c4ec70c0281745c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=37154fb8b939e9f81d9feb8139c7879099fb5cd6", "patch": "@@ -850,6 +850,7 @@ pub enum BuiltinBound {\n     BoundFreeze,\n     BoundSized,\n     BoundPod,\n+    BoundShare,\n }\n \n pub fn EmptyBuiltinBounds() -> BuiltinBounds {\n@@ -862,6 +863,7 @@ pub fn AllBuiltinBounds() -> BuiltinBounds {\n     set.add(BoundSend);\n     set.add(BoundFreeze);\n     set.add(BoundSized);\n+    set.add(BoundShare);\n     set\n }\n \n@@ -1872,31 +1874,32 @@ macro_rules! def_type_content_sets(\n \n def_type_content_sets!(\n     mod TC {\n-        None                                = 0b0000__00000000__0000,\n+        None                                = 0b0000_0000__0000_0000__0000,\n \n         // Things that are interior to the value (first nibble):\n-        InteriorUnsized                     = 0b0000__00000000__0001,\n-        // InteriorAll                         = 0b0000__00000000__1111,\n+        InteriorUnsized                     = 0b0000_0000__0000_0000__0001,\n+        // InteriorAll                         = 0b0000_0000__0000_0000__1111,\n \n         // Things that are owned by the value (second and third nibbles):\n-        OwnsOwned                           = 0b0000__00000001__0000,\n-        OwnsDtor                            = 0b0000__00000010__0000,\n-        OwnsManaged /* see [1] below */     = 0b0000__00000100__0000,\n-        OwnsAffine                          = 0b0000__00001000__0000,\n-        OwnsAll                             = 0b0000__11111111__0000,\n+        OwnsOwned                           = 0b0000_0000__0000_0001__0000,\n+        OwnsDtor                            = 0b0000_0000__0000_0010__0000,\n+        OwnsManaged /* see [1] below */     = 0b0000_0000__0000_0100__0000,\n+        OwnsAffine                          = 0b0000_0000__0000_1000__0000,\n+        OwnsAll                             = 0b0000_0000__1111_1111__0000,\n \n         // Things that are reachable by the value in any way (fourth nibble):\n-        ReachesNonsendAnnot                 = 0b0001__00000000__0000,\n-        ReachesBorrowed                     = 0b0010__00000000__0000,\n-        // ReachesManaged /* see [1] below */  = 0b0100__00000000__0000,\n-        ReachesMutable                      = 0b1000__00000000__0000,\n-        ReachesAll                          = 0b1111__00000000__0000,\n+        ReachesNonsendAnnot                 = 0b0000_0001__0000_0000__0000,\n+        ReachesBorrowed                     = 0b0000_0010__0000_0000__0000,\n+        // ReachesManaged /* see [1] below */  = 0b0000_0100__0000_0000__0000,\n+        ReachesMutable                      = 0b0000_1000__0000_0000__0000,\n+        ReachesNoShare                      = 0b0001_0000__0000_0000__0000,\n+        ReachesAll                          = 0b0001_1111__0000_0000__0000,\n \n         // Things that cause values to *move* rather than *copy*\n-        Moves                               = 0b0000__00001011__0000,\n+        Moves                               = 0b0000_0000__0000_1011__0000,\n \n         // Things that mean drop glue is necessary\n-        NeedsDrop                           = 0b0000__00000111__0000,\n+        NeedsDrop                           = 0b0000_0000__0000_0111__0000,\n \n         // Things that prevent values from being sent\n         //\n@@ -1905,31 +1908,34 @@ def_type_content_sets!(\n         //       both ReachesManaged and OwnsManaged so that when\n         //       a parameter has a bound T:Send, we are able to deduce\n         //       that it neither reaches nor owns a managed pointer.\n-        Nonsendable                         = 0b0111__00000100__0000,\n+        Nonsendable                         = 0b0000_0111__0000_0100__0000,\n \n         // Things that prevent values from being considered freezable\n-        Nonfreezable                        = 0b1000__00000000__0000,\n+        Nonfreezable                        = 0b0000_1000__0000_0000__0000,\n \n         // Things that prevent values from being considered 'static\n-        Nonstatic                           = 0b0010__00000000__0000,\n+        Nonstatic                           = 0b0000_0010__0000_0000__0000,\n \n         // Things that prevent values from being considered sized\n-        Nonsized                            = 0b0000__00000000__0001,\n+        Nonsized                            = 0b0000_0000__0000_0000__0001,\n+\n+        // Things that prevent values from being shared\n+        Nonsharable                         = 0b0001_0000__0000_0000__0000,\n \n         // Things that make values considered not POD (would be same\n         // as `Moves`, but for the fact that managed data `@` is\n         // not considered POD)\n-        Nonpod                              = 0b0000__00001111__0000,\n+        Nonpod                              = 0b0000_0000__0000_1111__0000,\n \n         // Bits to set when a managed value is encountered\n         //\n         // [1] Do not set the bits TC::OwnsManaged or\n         //     TC::ReachesManaged directly, instead reference\n         //     TC::Managed to set them both at once.\n-        Managed                             = 0b0100__00000100__0000,\n+        Managed                             = 0b0000_0100__0000_0100__0000,\n \n         // All bits\n-        All                                 = 0b1111__11111111__1111\n+        All                                 = 0b1111_1111__1111_1111__1111\n     }\n )\n \n@@ -1945,6 +1951,7 @@ impl TypeContents {\n             BoundSend => self.is_sendable(cx),\n             BoundSized => self.is_sized(cx),\n             BoundPod => self.is_pod(cx),\n+            BoundShare => self.is_sharable(cx),\n         }\n     }\n \n@@ -1964,6 +1971,10 @@ impl TypeContents {\n         !self.intersects(TC::Nonsendable)\n     }\n \n+    pub fn is_sharable(&self, _: &ctxt) -> bool {\n+        !self.intersects(TC::Nonsharable)\n+    }\n+\n     pub fn owns_managed(&self) -> bool {\n         self.intersects(TC::OwnsManaged)\n     }\n@@ -2284,6 +2295,8 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n             tc | TC::Managed\n         } else if Some(did) == cx.lang_items.no_pod_bound() {\n             tc | TC::OwnsAffine\n+        } else if Some(did) == cx.lang_items.no_share_bound() {\n+            tc | TC::ReachesNoShare\n         } else {\n             tc\n         }\n@@ -2362,6 +2375,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n                 BoundFreeze => TC::Nonfreezable,\n                 BoundSized => TC::Nonsized,\n                 BoundPod => TC::Nonpod,\n+                BoundShare => TC::Nonsharable,\n             };\n         });\n         return tc;"}, {"sha": "2b6c6825c7e3f123f5cbf383242551c7f4448993", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=37154fb8b939e9f81d9feb8139c7879099fb5cd6", "patch": "@@ -674,6 +674,7 @@ impl Repr for ty::ParamBounds {\n                 ty::BoundFreeze => ~\"Freeze\",\n                 ty::BoundSized => ~\"Sized\",\n                 ty::BoundPod => ~\"Pod\",\n+                ty::BoundShare => ~\"Share\",\n             });\n         }\n         for t in self.trait_bounds.iter() {\n@@ -961,6 +962,7 @@ impl UserString for ty::BuiltinBound {\n             ty::BoundFreeze => ~\"Freeze\",\n             ty::BoundSized => ~\"Sized\",\n             ty::BoundPod => ~\"Pod\",\n+            ty::BoundShare => ~\"Share\",\n         }\n     }\n }"}, {"sha": "b44616421d1826617c5528118c259b58c5953679", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=37154fb8b939e9f81d9feb8139c7879099fb5cd6", "patch": "@@ -46,6 +46,22 @@ pub trait Pod {\n     // Empty.\n }\n \n+/// Types that can be safely shared between threads, hence thread-safe.\n+#[cfg(stage0)]\n+pub trait Share {\n+    // Empty\n+}\n+\n+#[cfg(stage0)]\n+impl<T> Share for T {}\n+\n+/// Types that can be safely shared between threads, hence thread-safe.\n+#[cfg(not(stage0))]\n+#[lang=\"share\"]\n+pub trait Share {\n+    // Empty\n+}\n+\n /// Marker types are special types that are used with unsafe code to\n /// inform the compiler of special constraints. Marker types should\n /// only be needed when you are creating an abstraction that is\n@@ -232,6 +248,13 @@ pub mod marker {\n     #[deriving(Eq,Clone)]\n     pub struct NoPod;\n \n+    /// A type which is considered \"not sharable\", meaning that\n+    /// its contents are not threadsafe, hence they cannot be\n+    /// shared between tasks.\n+    #[lang=\"no_share_bound\"]\n+    #[deriving(Eq,Clone)]\n+    pub struct NoShare;\n+\n     /// A type which is considered managed by the GC. This is typically\n     /// embedded in other types.\n     #[lang=\"managed_bound\"]"}, {"sha": "f3a5bd3d3b5829d0012c74be21be33a896cc7a6f", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37154fb8b939e9f81d9feb8139c7879099fb5cd6/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=37154fb8b939e9f81d9feb8139c7879099fb5cd6", "patch": "@@ -20,7 +20,7 @@ generally useful to many Rust programs.\n */\n \n // Reexported core operators\n-pub use kinds::{Freeze, Pod, Send, Sized};\n+pub use kinds::{Freeze, Pod, Send, Sized, Share};\n pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Drop, Deref, DerefMut};"}]}