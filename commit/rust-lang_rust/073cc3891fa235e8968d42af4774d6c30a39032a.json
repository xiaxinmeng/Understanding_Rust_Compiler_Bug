{"sha": "073cc3891fa235e8968d42af4774d6c30a39032a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3M2NjMzg5MWZhMjM1ZTg5NjhkNDJhZjQ3NzRkNmMzMGEzOTAzMmE=", "commit": {"author": {"name": "Matt", "email": "matthieufelix@gmail.com", "date": "2020-11-16T23:24:03Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-11-19T03:37:42Z"}, "message": "Option to create groups for std, external crates, and other imports\n\nBackport of 17d90ca.", "tree": {"sha": "e1698949b67f584aa5e455bbe7c120df096b8f66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1698949b67f584aa5e455bbe7c120df096b8f66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/073cc3891fa235e8968d42af4774d6c30a39032a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/073cc3891fa235e8968d42af4774d6c30a39032a", "html_url": "https://github.com/rust-lang/rust/commit/073cc3891fa235e8968d42af4774d6c30a39032a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/073cc3891fa235e8968d42af4774d6c30a39032a/comments", "author": {"login": "MattX", "id": 125402, "node_id": "MDQ6VXNlcjEyNTQwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/125402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MattX", "html_url": "https://github.com/MattX", "followers_url": "https://api.github.com/users/MattX/followers", "following_url": "https://api.github.com/users/MattX/following{/other_user}", "gists_url": "https://api.github.com/users/MattX/gists{/gist_id}", "starred_url": "https://api.github.com/users/MattX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MattX/subscriptions", "organizations_url": "https://api.github.com/users/MattX/orgs", "repos_url": "https://api.github.com/users/MattX/repos", "events_url": "https://api.github.com/users/MattX/events{/privacy}", "received_events_url": "https://api.github.com/users/MattX/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "580d826e9b0f407a2d4b36696cda2f0fa8d7ddaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/580d826e9b0f407a2d4b36696cda2f0fa8d7ddaa", "html_url": "https://github.com/rust-lang/rust/commit/580d826e9b0f407a2d4b36696cda2f0fa8d7ddaa"}], "stats": {"total": 276, "additions": 254, "deletions": 22}, "files": [{"sha": "3b993f3fd4879e9dbc5ebf01561c5c873d0109c7", "filename": "Configurations.md", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/073cc3891fa235e8968d42af4774d6c30a39032a/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/073cc3891fa235e8968d42af4774d6c30a39032a/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=073cc3891fa235e8968d42af4774d6c30a39032a", "patch": "@@ -1889,6 +1889,56 @@ use dolor;\n use sit;\n ```\n \n+## `group_imports`\n+\n+Controls the strategy for how imports are grouped together.\n+\n+- **Default value**: `Preserve`\n+- **Possible values**: `Preserve`, `StdExternalCrate`\n+- **Stable**: No\n+\n+#### `Preserve` (default):\n+\n+Preserve the source file's import groups.\n+\n+```rust\n+use super::update::convert_publish_payload;\n+use chrono::Utc;\n+\n+use alloc::alloc::Layout;\n+use juniper::{FieldError, FieldResult};\n+use uuid::Uuid;\n+\n+use std::sync::Arc;\n+\n+use broker::database::PooledConnection;\n+\n+use super::schema::{Context, Payload};\n+use crate::models::Event;\n+use core::f32;\n+```\n+\n+#### `StdExternalCrate`:\n+\n+Discard existing import groups, and create three groups for:\n+1. `std`, `core` and `alloc`,\n+2. external crates,\n+3. `self`, `super` and `crate` imports.\n+\n+```rust\n+use alloc::alloc::Layout;\n+use core::f32;\n+use std::sync::Arc;\n+\n+use broker::database::PooledConnection;\n+use chrono::Utc;\n+use juniper::{FieldError, FieldResult};\n+use uuid::Uuid;\n+\n+use super::schema::{Context, Payload};\n+use super::update::convert_publish_payload;\n+use crate::models::Event;\n+```\n \n ## `reorder_modules`\n "}, {"sha": "5b5aed4bc83652a8220d9377e9cfc1f5a530b41b", "filename": "src/config/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/073cc3891fa235e8968d42af4774d6c30a39032a/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073cc3891fa235e8968d42af4774d6c30a39032a/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=073cc3891fa235e8968d42af4774d6c30a39032a", "patch": "@@ -65,6 +65,8 @@ create_config! {\n     imports_indent: IndentStyle, IndentStyle::Block, false, \"Indent of imports\";\n     imports_layout: ListTactic, ListTactic::Mixed, false, \"Item layout inside a import block\";\n     merge_imports: bool, false, false, \"Merge imports\";\n+    group_imports: GroupImportsTactic, GroupImportsTactic::Preserve, false,\n+        \"Controls the strategy for how imports are grouped together\";\n \n     // Ordering\n     reorder_imports: bool, true, true, \"Reorder import and extern crate statements alphabetically\";\n@@ -528,6 +530,7 @@ where_single_line = false\n imports_indent = \"Block\"\n imports_layout = \"Mixed\"\n merge_imports = false\n+group_imports = \"Preserve\"\n reorder_imports = true\n reorder_modules = true\n reorder_impl_items = false"}, {"sha": "ae120a475f468777d7972628b0f65ebe5bfe6c95", "filename": "src/config/options.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/073cc3891fa235e8968d42af4774d6c30a39032a/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073cc3891fa235e8968d42af4774d6c30a39032a/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=073cc3891fa235e8968d42af4774d6c30a39032a", "patch": "@@ -99,6 +99,18 @@ impl Density {\n     }\n }\n \n+#[config_type]\n+/// Configuration for import groups, i.e. sets of imports separated by newlines.\n+pub enum GroupImportsTactic {\n+    /// Keep groups as they are.\n+    Preserve,\n+    /// Discard existing groups, and create new groups for\n+    ///  1. `std` / `core` / `alloc` imports\n+    ///  2. other imports\n+    ///  3. `self` / `crate` / `super` imports\n+    StdExternalCrate,\n+}\n+\n #[config_type]\n pub enum ReportTactic {\n     Always,"}, {"sha": "d6b6c1963bda54264da7c97af1ac9d8cb2c9527b", "filename": "src/reorder.rs", "status": "modified", "additions": 83, "deletions": 22, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/073cc3891fa235e8968d42af4774d6c30a39032a/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073cc3891fa235e8968d42af4774d6c30a39032a/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=073cc3891fa235e8968d42af4774d6c30a39032a", "patch": "@@ -11,8 +11,8 @@ use std::cmp::{Ord, Ordering};\n use rustc_ast::ast;\n use rustc_span::{symbol::sym, Span};\n \n-use crate::config::Config;\n-use crate::imports::{merge_use_trees, UseTree};\n+use crate::config::{Config, GroupImportsTactic};\n+use crate::imports::{merge_use_trees, UseSegment, UseTree};\n use crate::items::{is_mod_decl, rewrite_extern_crate, rewrite_mod};\n use crate::lists::{itemize_list, write_list, ListFormatting, ListItem};\n use crate::rewrite::RewriteContext;\n@@ -74,9 +74,10 @@ fn rewrite_reorderable_item(\n     }\n }\n \n-/// Rewrite a list of items with reordering. Every item in `items` must have\n-/// the same `ast::ItemKind`.\n-fn rewrite_reorderable_items(\n+/// Rewrite a list of items with reordering and/or regrouping. Every item\n+/// in `items` must have the same `ast::ItemKind`. Whether reordering, regrouping,\n+/// or both are done is determined from the `context`.\n+fn rewrite_reorderable_or_regroupable_items(\n     context: &RewriteContext<'_>,\n     reorderable_items: &[&ast::Item],\n     shape: Shape,\n@@ -109,19 +110,35 @@ fn rewrite_reorderable_items(\n             if context.config.merge_imports() {\n                 normalized_items = merge_use_trees(normalized_items);\n             }\n-            normalized_items.sort();\n+\n+            let mut regrouped_items = match context.config.group_imports() {\n+                GroupImportsTactic::Preserve => vec![normalized_items],\n+                GroupImportsTactic::StdExternalCrate => group_imports(normalized_items),\n+            };\n+\n+            if context.config.reorder_imports() {\n+                regrouped_items.iter_mut().for_each(|items| items.sort())\n+            }\n \n             // 4 = \"use \", 1 = \";\"\n             let nested_shape = shape.offset_left(4)?.sub_width(1)?;\n-            let item_vec: Vec<_> = normalized_items\n+            let item_vec: Vec<_> = regrouped_items\n                 .into_iter()\n-                .map(|use_tree| ListItem {\n-                    item: use_tree.rewrite_top_level(context, nested_shape),\n-                    ..use_tree.list_item.unwrap_or_else(ListItem::empty)\n+                .filter(|use_group| !use_group.is_empty())\n+                .map(|use_group| {\n+                    let item_vec: Vec<_> = use_group\n+                        .into_iter()\n+                        .map(|use_tree| ListItem {\n+                            item: use_tree.rewrite_top_level(context, nested_shape),\n+                            ..use_tree.list_item.unwrap_or_else(ListItem::empty)\n+                        })\n+                        .collect();\n+                    wrap_reorderable_items(context, &item_vec, nested_shape)\n                 })\n-                .collect();\n+                .collect::<Option<Vec<_>>>()?;\n \n-            wrap_reorderable_items(context, &item_vec, nested_shape)\n+            let join_string = format!(\"\\n\\n{}\", shape.indent.to_string(context.config));\n+            Some(item_vec.join(&join_string))\n         }\n         _ => {\n             let list_items = itemize_list(\n@@ -150,6 +167,34 @@ fn contains_macro_use_attr(item: &ast::Item) -> bool {\n     crate::attr::contains_name(&item.attrs, sym::macro_use)\n }\n \n+/// Divides imports into three groups, corresponding to standard, external\n+/// and local imports. Sorts each subgroup.\n+fn group_imports(uts: Vec<UseTree>) -> Vec<Vec<UseTree>> {\n+    let mut std_imports = Vec::new();\n+    let mut external_imports = Vec::new();\n+    let mut local_imports = Vec::new();\n+\n+    for ut in uts.into_iter() {\n+        if ut.path.is_empty() {\n+            external_imports.push(ut);\n+            continue;\n+        }\n+        match &ut.path[0] {\n+            UseSegment::Ident(id, _) => match id.as_ref() {\n+                \"std\" | \"alloc\" | \"core\" => std_imports.push(ut),\n+                _ => external_imports.push(ut),\n+            },\n+            UseSegment::Slf(_) | UseSegment::Super(_) | UseSegment::Crate(_) => {\n+                local_imports.push(ut)\n+            }\n+            // These are probably illegal here\n+            UseSegment::Glob | UseSegment::List(_) => external_imports.push(ut),\n+        }\n+    }\n+\n+    vec![std_imports, external_imports, local_imports]\n+}\n+\n /// A simplified version of `ast::ItemKind`.\n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n enum ReorderableItemKind {\n@@ -187,21 +232,29 @@ impl ReorderableItemKind {\n         }\n     }\n \n-    fn in_group(self) -> bool {\n+    fn is_regroupable(self, config: &Config) -> bool {\n         match self {\n             ReorderableItemKind::ExternCrate\n             | ReorderableItemKind::Mod\n-            | ReorderableItemKind::Use => true,\n+            | ReorderableItemKind::Other => false,\n+            ReorderableItemKind::Use => config.group_imports() != GroupImportsTactic::Preserve,\n+        }\n+    }\n+\n+    fn in_group(self, config: &Config) -> bool {\n+        match self {\n+            ReorderableItemKind::ExternCrate | ReorderableItemKind::Mod => true,\n+            ReorderableItemKind::Use => config.group_imports() == GroupImportsTactic::Preserve,\n             ReorderableItemKind::Other => false,\n         }\n     }\n }\n \n impl<'b, 'a: 'b> FmtVisitor<'a> {\n-    /// Format items with the same item kind and reorder them. If `in_group` is\n-    /// `true`, then the items separated by an empty line will not be reordered\n-    /// together.\n-    fn walk_reorderable_items(\n+    /// Format items with the same item kind and reorder them, regroup them, or\n+    /// both. If `in_group` is `true`, then the items separated by an empty line\n+    /// will not be reordered together.\n+    fn walk_reorderable_or_regroupable_items(\n         &mut self,\n         items: &[&ast::Item],\n         item_kind: ReorderableItemKind,\n@@ -230,7 +283,12 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             let lo = items.first().unwrap().span().lo();\n             let hi = items.last().unwrap().span().hi();\n             let span = mk_sp(lo, hi);\n-            let rw = rewrite_reorderable_items(&self.get_context(), items, self.shape(), span);\n+            let rw = rewrite_reorderable_or_regroupable_items(\n+                &self.get_context(),\n+                items,\n+                self.shape(),\n+                span,\n+            );\n             self.push_rewrite(span, rw);\n         } else {\n             for item in items {\n@@ -249,9 +307,12 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             // subsequent items that have the same item kind to be reordered within\n             // `walk_reorderable_items`. Otherwise, just format the next item for output.\n             let item_kind = ReorderableItemKind::from(items[0]);\n-            if item_kind.is_reorderable(self.config) {\n-                let visited_items_num =\n-                    self.walk_reorderable_items(items, item_kind, item_kind.in_group());\n+            if item_kind.is_reorderable(self.config) || item_kind.is_regroupable(self.config) {\n+                let visited_items_num = self.walk_reorderable_or_regroupable_items(\n+                    items,\n+                    item_kind,\n+                    item_kind.in_group(self.config),\n+                );\n                 let (_, rest) = items.split_at(visited_items_num);\n                 items = rest;\n             } else {"}, {"sha": "1a60126d2d111896ae706a03334bbed693d85f79", "filename": "tests/source/configs/group_imports/StdExternalCrate-merge_imports.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-merge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-merge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-merge_imports.rs?ref=073cc3891fa235e8968d42af4774d6c30a39032a", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-group_imports: StdExternalCrate\n+// rustfmt-merge_imports: true\n+use chrono::Utc;\n+use super::update::convert_publish_payload;\n+\n+use juniper::{FieldError, FieldResult};\n+use uuid::Uuid;\n+use alloc::alloc::Layout;\n+\n+use std::sync::Arc;\n+use alloc::vec::Vec;\n+\n+use broker::database::PooledConnection;\n+\n+use super::schema::{Context, Payload};\n+use core::f32;\n+use crate::models::Event;"}, {"sha": "08f4e07b704e6edf0e3ab3dbd5a962a7c7e161b2", "filename": "tests/source/configs/group_imports/StdExternalCrate-nested.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-nested.rs?ref=073cc3891fa235e8968d42af4774d6c30a39032a", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-group_imports: StdExternalCrate\n+mod test {\n+    use crate::foo::bar;\n+    use std::path;\n+    use crate::foo::bar2;\n+}"}, {"sha": "08c9a72ae61e0ebc1577b20d1632ed10c0226c16", "filename": "tests/source/configs/group_imports/StdExternalCrate-no_reorder.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-no_reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-no_reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-no_reorder.rs?ref=073cc3891fa235e8968d42af4774d6c30a39032a", "patch": "@@ -0,0 +1,17 @@\n+// rustfmt-group_imports: StdExternalCrate\n+// rustfmt-reorder_imports: false\n+\n+use chrono::Utc;\n+use super::update::convert_publish_payload;\n+\n+use juniper::{FieldError, FieldResult};\n+use uuid::Uuid;\n+use alloc::alloc::Layout;\n+\n+use std::sync::Arc;\n+\n+use broker::database::PooledConnection;\n+\n+use super::schema::{Context, Payload};\n+use core::f32;\n+use crate::models::Event;"}, {"sha": "d49c8941e6d5628ec5620a9056bd2a1f13d1f3c0", "filename": "tests/source/configs/group_imports/StdExternalCrate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fgroup_imports%2FStdExternalCrate.rs?ref=073cc3891fa235e8968d42af4774d6c30a39032a", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-group_imports: StdExternalCrate\n+use chrono::Utc;\n+use super::update::convert_publish_payload;\n+\n+use juniper::{FieldError, FieldResult};\n+use uuid::Uuid;\n+use alloc::alloc::Layout;\n+\n+use std::sync::Arc;\n+\n+use broker::database::PooledConnection;\n+\n+use super::schema::{Context, Payload};\n+use core::f32;\n+use crate::models::Event;"}, {"sha": "a3d99eb907ed704ef09bf2d19b98392424cf8e48", "filename": "tests/target/configs/group_imports/StdExternalCrate-merge_imports.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-merge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-merge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-merge_imports.rs?ref=073cc3891fa235e8968d42af4774d6c30a39032a", "patch": "@@ -0,0 +1,16 @@\n+// rustfmt-group_imports: StdExternalCrate\n+// rustfmt-merge_imports: true\n+use alloc::{alloc::Layout, vec::Vec};\n+use core::f32;\n+use std::sync::Arc;\n+\n+use broker::database::PooledConnection;\n+use chrono::Utc;\n+use juniper::{FieldError, FieldResult};\n+use uuid::Uuid;\n+\n+use super::{\n+    schema::{Context, Payload},\n+    update::convert_publish_payload,\n+};\n+use crate::models::Event;"}, {"sha": "daf23375c0e469815a6edf73319de07c66b81762", "filename": "tests/target/configs/group_imports/StdExternalCrate-nested.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-nested.rs?ref=073cc3891fa235e8968d42af4774d6c30a39032a", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-group_imports: StdExternalCrate\n+mod test {\n+    use std::path;\n+\n+    use crate::foo::bar;\n+    use crate::foo::bar2;\n+}"}, {"sha": "76d3d6ccb9541d6238d8f236eebcf9a068c306c0", "filename": "tests/target/configs/group_imports/StdExternalCrate-no_reorder.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-no_reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-no_reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate-no_reorder.rs?ref=073cc3891fa235e8968d42af4774d6c30a39032a", "patch": "@@ -0,0 +1,15 @@\n+// rustfmt-group_imports: StdExternalCrate\n+// rustfmt-reorder_imports: false\n+\n+use alloc::alloc::Layout;\n+use std::sync::Arc;\n+use core::f32;\n+\n+use chrono::Utc;\n+use juniper::{FieldError, FieldResult};\n+use uuid::Uuid;\n+use broker::database::PooledConnection;\n+\n+use super::update::convert_publish_payload;\n+use super::schema::{Context, Payload};\n+use crate::models::Event;"}, {"sha": "080257968982f7d410fda96f9e8bf0665a0e2ded", "filename": "tests/target/configs/group_imports/StdExternalCrate.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/073cc3891fa235e8968d42af4774d6c30a39032a/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fgroup_imports%2FStdExternalCrate.rs?ref=073cc3891fa235e8968d42af4774d6c30a39032a", "patch": "@@ -0,0 +1,13 @@\n+// rustfmt-group_imports: StdExternalCrate\n+use alloc::alloc::Layout;\n+use core::f32;\n+use std::sync::Arc;\n+\n+use broker::database::PooledConnection;\n+use chrono::Utc;\n+use juniper::{FieldError, FieldResult};\n+use uuid::Uuid;\n+\n+use super::schema::{Context, Payload};\n+use super::update::convert_publish_payload;\n+use crate::models::Event;"}]}