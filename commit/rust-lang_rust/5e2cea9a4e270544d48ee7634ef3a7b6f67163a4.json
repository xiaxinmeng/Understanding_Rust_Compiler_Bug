{"sha": "5e2cea9a4e270544d48ee7634ef3a7b6f67163a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMmNlYTlhNGUyNzA1NDRkNDhlZTc2MzRlZjNhN2I2ZjY3MTYzYTQ=", "commit": {"author": {"name": "Ivan Molodetskikh", "email": "yalterz@gmail.com", "date": "2016-12-22T08:47:26Z"}, "committer": {"name": "Ivan Molodetskikh", "email": "yalterz@gmail.com", "date": "2016-12-22T11:54:42Z"}, "message": "Cleaned up the code and added tests.", "tree": {"sha": "28a615e0e1bbd381f6cddcf57768e6541ee27b8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28a615e0e1bbd381f6cddcf57768e6541ee27b8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e2cea9a4e270544d48ee7634ef3a7b6f67163a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIvBAABCAAZBQJYW78DEhx5YWx0ZXJ6QGdtYWlsLmNvbQAKCRACzjjaR+nWkVxh\nEACgL2fApA3rRO7b/24zb7DumvMMjU5nKlsXdPtvK9y735sNhnnOIO8wXA5k6VIr\ncM5a9g00vF0TJXLznEMk3q57egpARkiyVuScNXm8Aix4xiW0/EkLxmZmDcbHqCpV\nsiKqTpkiB91CSEfhTeKaH4bYt/UWN9fSEQUs2p/n3cbVf8Ozsrt8EFoizKZevcQ+\nwMDpPL4j55eZgndl/gKNeQtzbFDT+K1UKcCnacKR3QxlnjZXg8dRWVsTrwDrs2jo\n2gMs45VNcxnJmzw43y8pWiaJxtmdRDyxRkb12bvl96HPW7OgOkUCudU7zPo+9U/F\nHjaXJ1OL6ixofwvKPDQ3HsBlRa/jgdMzqruTC/7BKhxN5CaeMdC3498vE41ODvsg\nk0wphiXp2mLfiTtY7s+n4A3ReKz19RZIFV7wgEwel/xJxypiA9lQy6rgXUBUYf1Q\nBH4FBR3Ur0Nd0PuehLduyOTjFjzXiT3KUoe23dldPMnhq8uoRWtUg1tMUlUzcs93\ng7vGeIa6LGEkbMjXy4jIL7myWerzCWGGmMVu3f68BE9VVhxdwVEQAgkFjg8YrR4t\nX/KuGb0SpALc9ym9rzi/59C9zI4oGsr6SfUaFIxjHj3wN9zzzB3AR87Gc8fNVDT0\nS+hnSBLf7V5xiRpbRON1ibf1X8ab55Vj9sW2sf1NPJWpSA==\n=XS9a\n-----END PGP SIGNATURE-----", "payload": "tree 28a615e0e1bbd381f6cddcf57768e6541ee27b8c\nparent c461cdfdf686caec2b93fe9e41efaa79b7a5c292\nauthor Ivan Molodetskikh <yalterz@gmail.com> 1482396446 +0300\ncommitter Ivan Molodetskikh <yalterz@gmail.com> 1482407682 +0300\n\nCleaned up the code and added tests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2cea9a4e270544d48ee7634ef3a7b6f67163a4", "html_url": "https://github.com/rust-lang/rust/commit/5e2cea9a4e270544d48ee7634ef3a7b6f67163a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e2cea9a4e270544d48ee7634ef3a7b6f67163a4/comments", "author": {"login": "YaLTeR", "id": 1794388, "node_id": "MDQ6VXNlcjE3OTQzODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1794388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YaLTeR", "html_url": "https://github.com/YaLTeR", "followers_url": "https://api.github.com/users/YaLTeR/followers", "following_url": "https://api.github.com/users/YaLTeR/following{/other_user}", "gists_url": "https://api.github.com/users/YaLTeR/gists{/gist_id}", "starred_url": "https://api.github.com/users/YaLTeR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YaLTeR/subscriptions", "organizations_url": "https://api.github.com/users/YaLTeR/orgs", "repos_url": "https://api.github.com/users/YaLTeR/repos", "events_url": "https://api.github.com/users/YaLTeR/events{/privacy}", "received_events_url": "https://api.github.com/users/YaLTeR/received_events", "type": "User", "site_admin": false}, "committer": {"login": "YaLTeR", "id": 1794388, "node_id": "MDQ6VXNlcjE3OTQzODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1794388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/YaLTeR", "html_url": "https://github.com/YaLTeR", "followers_url": "https://api.github.com/users/YaLTeR/followers", "following_url": "https://api.github.com/users/YaLTeR/following{/other_user}", "gists_url": "https://api.github.com/users/YaLTeR/gists{/gist_id}", "starred_url": "https://api.github.com/users/YaLTeR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/YaLTeR/subscriptions", "organizations_url": "https://api.github.com/users/YaLTeR/orgs", "repos_url": "https://api.github.com/users/YaLTeR/repos", "events_url": "https://api.github.com/users/YaLTeR/events{/privacy}", "received_events_url": "https://api.github.com/users/YaLTeR/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c461cdfdf686caec2b93fe9e41efaa79b7a5c292", "url": "https://api.github.com/repos/rust-lang/rust/commits/c461cdfdf686caec2b93fe9e41efaa79b7a5c292", "html_url": "https://github.com/rust-lang/rust/commit/c461cdfdf686caec2b93fe9e41efaa79b7a5c292"}], "stats": {"total": 140, "additions": 110, "deletions": 30}, "files": [{"sha": "fea005f3d77da388194cdaf7a9f4d1734b544dd0", "filename": "src/librustc_trans/cabi_x86.rs", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5e2cea9a4e270544d48ee7634ef3a7b6f67163a4/src%2Flibrustc_trans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2cea9a4e270544d48ee7634ef3a7b6f67163a4/src%2Flibrustc_trans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86.rs?ref=5e2cea9a4e270544d48ee7634ef3a7b6f67163a4", "patch": "@@ -61,46 +61,41 @@ pub fn compute_abi_info(ccx: &CrateContext, fty: &mut FnType, flavor: Flavor) {\n     if flavor == Flavor::Fastcall {\n         // Mark arguments as InReg like clang does it,\n         // so our fastcall is compatible with C/C++ fastcall.\n-        // Clang reference: ib/CodeGen/TargetInfo.cpp\n-        let is_mcu_abi = ccx.sess().target.target.target_os.eq(\"elfiamcu\");\n-        let is_soft_float_abi = ccx.sess().target.target.options.features.contains(\"+soft-float\");\n+\n+        // Clang reference: lib/CodeGen/TargetInfo.cpp\n+        // See X86_32ABIInfo::shouldPrimitiveUseInReg(), X86_32ABIInfo::updateFreeRegs()\n+\n+        // IsSoftFloatABI is only set to true on ARM platforms,\n+        // which in turn can't be x86?\n \n         let mut free_regs = 2;\n \n         for arg in &mut fty.args {\n-            if !arg.is_ignore() && !arg.is_indirect() {\n-                if !is_soft_float_abi {\n-                    if arg.ty.kind() == Float {\n-                        continue;\n-                    }\n-                }\n+            if arg.is_ignore() || arg.is_indirect() { continue; }\n \n-                let size = llbitsize_of_real(ccx, arg.ty);\n-                let size_in_regs = (size + 31) / 32;\n+            if arg.ty.kind() == Float {\n+                continue;\n+            }\n \n-                if size_in_regs == 0 {\n-                    continue;\n-                }\n+            let size = llbitsize_of_real(ccx, arg.ty);\n+            let size_in_regs = (size + 31) / 32;\n \n-                if !is_mcu_abi {\n-                    if size_in_regs > free_regs {\n-                        break;\n-                    }\n-                } else {\n-                    if size_in_regs > free_regs || size_in_regs > 2 {\n-                        continue;\n-                    }\n-                }\n+            if size_in_regs == 0 {\n+                continue;\n+            }\n \n-                free_regs -= size_in_regs;\n+            if size_in_regs > free_regs {\n+                break;\n+            }\n \n-                if !is_mcu_abi && size <= 32 && (arg.ty.kind() == Pointer || arg.ty.kind() == Integer) {\n-                    arg.attrs.set(ArgAttribute::InReg);\n-                }\n+            free_regs -= size_in_regs;\n \n-                if free_regs == 0 {\n-                    break;\n-                }\n+            if size <= 32 && (arg.ty.kind() == Pointer || arg.ty.kind() == Integer) {\n+                arg.attrs.set(ArgAttribute::InReg);\n+            }\n+\n+            if free_regs == 0 {\n+                break;\n             }\n         }\n     }"}, {"sha": "e1dda4d2be0843295b9efd3ee0ef4beede008cfd", "filename": "src/test/codegen/fastcall-inreg.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/5e2cea9a4e270544d48ee7634ef3a7b6f67163a4/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2cea9a4e270544d48ee7634ef3a7b6f67163a4/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs?ref=5e2cea9a4e270544d48ee7634ef3a7b6f67163a4", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks if the \"fastcall\" calling convention marks function arguments\n+// as \"inreg\" like the C/C++ compilers for the platforms.\n+// x86 only.\n+\n+// ignore-aarch64\n+// ignore-aarch64_be\n+// ignore-arm\n+// ignore-armeb\n+// ignore-avr\n+// ignore-bpfel\n+// ignore-bpfeb\n+// ignore-hexagon\n+// ignore-mips\n+// ignore-mipsel\n+// ignore-mips64\n+// ignore-mips64el\n+// ignore-msp430\n+// ignore-powerpc64\n+// ignore-powerpc64le\n+// ignore-powerpc\n+// ignore-r600\n+// ignore-amdgcn\n+// ignore-sparc\n+// ignore-sparcv9\n+// ignore-sparcel\n+// ignore-s390x\n+// ignore-tce\n+// ignore-thumb\n+// ignore-thumbeb\n+// ignore-x86_64 no-ignore-x86\n+// ignore-xcore\n+// ignore-nvptx\n+// ignore-nvptx64\n+// ignore-le32\n+// ignore-le64\n+// ignore-amdil\n+// ignore-amdil64\n+// ignore-hsail\n+// ignore-hsail64\n+// ignore-spir\n+// ignore-spir64\n+// ignore-kalimba\n+// ignore-shave\n+// ignore-wasm32\n+// ignore-wasm64\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+mod tests {\n+    // CHECK: @f1(i32 inreg, i32 inreg, i32)\n+    #[no_mangle]\n+    extern \"fastcall\" fn f1(_: i32, _: i32, _: i32) {}\n+\n+    // CHECK: @f2(i32* inreg, i32* inreg, i32*)\n+    #[no_mangle]\n+    extern \"fastcall\" fn f2(_: *const i32, _: *const i32, _: *const i32) {}\n+\n+    // CHECK: @f3(float, i32 inreg, i32 inreg, i32)\n+    #[no_mangle]\n+    extern \"fastcall\" fn f3(_: f32, _: i32, _: i32, _: i32) {}\n+\n+    // CHECK: @f4(i32 inreg, float, i32 inreg, i32)\n+    #[no_mangle]\n+    extern \"fastcall\" fn f4(_: i32, _: f32, _: i32, _: i32) {}\n+\n+    // CHECK: @f5(i64, i32)\n+    #[no_mangle]\n+    extern \"fastcall\" fn f5(_: i64, _: i32) {}\n+\n+    // CHECK: @f6(i1 inreg zeroext, i32 inreg, i32)\n+    #[no_mangle]\n+    extern \"fastcall\" fn f6(_: bool, _: i32, _: i32) {}\n+}"}]}