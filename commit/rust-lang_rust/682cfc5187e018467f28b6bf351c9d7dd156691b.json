{"sha": "682cfc5187e018467f28b6bf351c9d7dd156691b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MmNmYzUxODdlMDE4NDY3ZjI4YjZiZjM1MWM5ZDdkZDE1NjY5MWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-30T19:37:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-30T19:37:53Z"}, "message": "Auto merge of #30467 - shahn:master, r=brson\n\nThis adds a constructor for a Weak that can never be upgraded. These are\nmostly useless, but for example are required when deserializing.", "tree": {"sha": "3cffa33da3257d8f0d0187b6a24f54849d4fbefc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cffa33da3257d8f0d0187b6a24f54849d4fbefc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/682cfc5187e018467f28b6bf351c9d7dd156691b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/682cfc5187e018467f28b6bf351c9d7dd156691b", "html_url": "https://github.com/rust-lang/rust/commit/682cfc5187e018467f28b6bf351c9d7dd156691b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/682cfc5187e018467f28b6bf351c9d7dd156691b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efb5a9a9f03016b8d3d3c13f940bbbfeac2cdfa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb5a9a9f03016b8d3d3c13f940bbbfeac2cdfa6", "html_url": "https://github.com/rust-lang/rust/commit/efb5a9a9f03016b8d3d3c13f940bbbfeac2cdfa6"}, {"sha": "5b3bdafb9649b8cbaf62535c12dbfee6e9e073be", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3bdafb9649b8cbaf62535c12dbfee6e9e073be", "html_url": "https://github.com/rust-lang/rust/commit/5b3bdafb9649b8cbaf62535c12dbfee6e9e073be"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "1feac7fdf7e07014b9dd390148be5c1d79aa0e79", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/682cfc5187e018467f28b6bf351c9d7dd156691b/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/682cfc5187e018467f28b6bf351c9d7dd156691b/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=682cfc5187e018467f28b6bf351c9d7dd156691b", "patch": "@@ -79,6 +79,7 @@ use core::cmp::Ordering;\n use core::mem::{align_of_val, size_of_val};\n use core::intrinsics::abort;\n use core::mem;\n+use core::mem::uninitialized;\n use core::ops::Deref;\n use core::ops::CoerceUnsized;\n use core::ptr::{self, Shared};\n@@ -904,6 +905,35 @@ impl<T> From<T> for Arc<T> {\n     }\n }\n \n+impl<T> Weak<T> {\n+    /// Constructs a new `Weak<T>` without an accompanying instance of T.\n+    ///\n+    /// This allocates memory for T, but does not initialize it. Calling\n+    /// Weak<T>::upgrade() on the return value always gives None.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downgraded_weak)]\n+    ///\n+    /// use std::sync::Weak;\n+    ///\n+    /// let empty: Weak<i64> = Weak::new();\n+    /// ```\n+    #[unstable(feature = \"downgraded_weak\",\n+               reason = \"recently added\",\n+               issue = \"30425\")]\n+    pub fn new() -> Weak<T> {\n+        unsafe {\n+            Weak { _ptr: Shared::new(Box::into_raw(box ArcInner {\n+                strong: atomic::AtomicUsize::new(0),\n+                weak: atomic::AtomicUsize::new(1),\n+                data: uninitialized(),\n+            }))}\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use std::clone::Clone;\n@@ -1154,6 +1184,12 @@ mod tests {\n         let foo_arc = Arc::from(foo);\n         assert!(123 == *foo_arc);\n     }\n+\n+    #[test]\n+    fn test_new_weak() {\n+        let foo: Weak<usize> = Weak::new();\n+        assert!(foo.upgrade().is_none());\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ba61a37456ae858bed26f8db466f902de6f55ace", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/682cfc5187e018467f28b6bf351c9d7dd156691b/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/682cfc5187e018467f28b6bf351c9d7dd156691b/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=682cfc5187e018467f28b6bf351c9d7dd156691b", "patch": "@@ -163,7 +163,7 @@ use core::hash::{Hasher, Hash};\n use core::intrinsics::{assume, abort};\n use core::marker;\n use core::marker::Unsize;\n-use core::mem::{self, align_of_val, size_of_val, forget};\n+use core::mem::{self, align_of_val, size_of_val, forget, uninitialized};\n use core::ops::Deref;\n use core::ops::CoerceUnsized;\n use core::ptr::{self, Shared};\n@@ -824,6 +824,37 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for Weak<T> {\n     }\n }\n \n+impl<T> Weak<T> {\n+    /// Constructs a new `Weak<T>` without an accompanying instance of T.\n+    ///\n+    /// This allocates memory for T, but does not initialize it. Calling\n+    /// Weak<T>::upgrade() on the return value always gives None.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(downgraded_weak)]\n+    ///\n+    /// use std::rc::Weak;\n+    ///\n+    /// let empty: Weak<i64> = Weak::new();\n+    /// ```\n+    #[unstable(feature = \"downgraded_weak\",\n+               reason = \"recently added\",\n+               issue=\"30425\")]\n+    pub fn new() -> Weak<T> {\n+        unsafe {\n+            Weak {\n+                _ptr: Shared::new(Box::into_raw(box RcBox {\n+                    strong: Cell::new(0),\n+                    weak: Cell::new(1),\n+                    value: uninitialized(),\n+                })),\n+            }\n+        }\n+    }\n+}\n+\n // NOTE: We checked_add here to deal with mem::forget safety. In particular\n // if you mem::forget Rcs (or Weaks), the ref-count can overflow, and then\n // you can free the allocation while outstanding Rcs (or Weaks) exist.\n@@ -1116,6 +1147,12 @@ mod tests {\n         let foo_rc = Rc::from(foo);\n         assert!(123 == *foo_rc);\n     }\n+\n+    #[test]\n+    fn test_new_weak() {\n+        let foo: Weak<usize> = Weak::new();\n+        assert!(foo.upgrade().is_none());\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}