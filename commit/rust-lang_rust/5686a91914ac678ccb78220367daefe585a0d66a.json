{"sha": "5686a91914ac678ccb78220367daefe585a0d66a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ODZhOTE5MTRhYzY3OGNjYjc4MjIwMzY3ZGFlZmU1ODVhMGQ2NmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-10T00:59:20Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-14T16:11:55Z"}, "message": "Parse `unsafe trait` but do not do anything with it beyond parsing and integrating into rustdoc etc.", "tree": {"sha": "7bd32601968e48d22798cc425f0f1347feda80db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bd32601968e48d22798cc425f0f1347feda80db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5686a91914ac678ccb78220367daefe585a0d66a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5686a91914ac678ccb78220367daefe585a0d66a", "html_url": "https://github.com/rust-lang/rust/commit/5686a91914ac678ccb78220367daefe585a0d66a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5686a91914ac678ccb78220367daefe585a0d66a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "092d04a40a3db44af2dd50e43a77449a7e56dd13", "url": "https://api.github.com/repos/rust-lang/rust/commits/092d04a40a3db44af2dd50e43a77449a7e56dd13", "html_url": "https://github.com/rust-lang/rust/commit/092d04a40a3db44af2dd50e43a77449a7e56dd13"}], "stats": {"total": 137, "additions": 103, "deletions": 34}, "files": [{"sha": "5af7fec41816885416af431792075fc53b60b868", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -1721,7 +1721,7 @@ impl LintPass for Stability {\n         if self.is_internal(cx, item.span) { return }\n \n         match item.node {\n-            ast::ItemTrait(_, _, ref supertraits, _) => {\n+            ast::ItemTrait(_, _, _, ref supertraits, _) => {\n                 for t in supertraits.iter() {\n                     if let ast::TraitTyParamBound(ref t) = *t {\n                         let id = ty::trait_ref_to_def_id(cx.tcx, &t.trait_ref);"}, {"sha": "b698e4fcc7f7bc6719f79bd781940fddf71958a7", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -255,3 +255,5 @@ pub const tag_method_ty_generics: uint = 0xa7;\n pub const tag_predicate: uint = 0xa8;\n pub const tag_predicate_space: uint = 0xa9;\n pub const tag_predicate_data: uint = 0xb0;\n+\n+pub const tag_unsafety: uint = 0xb1;"}, {"sha": "371242863984d7adde4233e0c892f5679c10fb1f", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -368,8 +368,13 @@ pub fn get_trait_def<'tcx>(cdata: Cmd,\n     let item_doc = lookup_item(item_id, cdata.data());\n     let generics = doc_generics(item_doc, tcx, cdata, tag_item_generics);\n     let bounds = trait_def_bounds(item_doc, tcx, cdata);\n+    let unsafety = match reader::maybe_get_doc(item_doc, tag_unsafety) {\n+        Some(_) => ast::Unsafety::Unsafe,\n+        None => ast::Unsafety::Normal,\n+    };\n \n     ty::TraitDef {\n+        unsafety: unsafety,\n         generics: generics,\n         bounds: bounds,\n         trait_ref: Rc::new(item_trait_ref(item_doc, tcx, cdata))"}, {"sha": "cb8de256448013567d35e2675ba0b0d2a8fb90b4", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -1308,13 +1308,22 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             }\n         }\n       }\n-      ast::ItemTrait(_, _, _, ref ms) => {\n+      ast::ItemTrait(_, _, _, _, ref ms) => {\n         add_to_index(item, rbml_w, index);\n         rbml_w.start_tag(tag_items_data_item);\n         encode_def_id(rbml_w, def_id);\n         encode_family(rbml_w, 'I');\n         encode_item_variances(rbml_w, ecx, item.id);\n         let trait_def = ty::lookup_trait_def(tcx, def_id);\n+\n+        match trait_def.unsafety {\n+            ast::Unsafety::Unsafe => {\n+                rbml_w.start_tag(tag_unsafety);\n+                rbml_w.end_tag();\n+            }\n+            ast::Unsafety::Normal => { }\n+        }\n+\n         encode_generics(rbml_w, ecx, &trait_def.generics, tag_item_generics);\n         encode_trait_ref(rbml_w, ecx, &*trait_def.trait_ref, tag_item_trait_ref);\n         encode_name(rbml_w, item.ident.name);"}, {"sha": "352c2add00028f42e1bf953dccc750a790e74cbf", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -76,7 +76,7 @@ impl<'v> Visitor<'v> for ParentVisitor {\n             // method to the root. In this case, if the trait is private, then\n             // parent all the methods to the trait to indicate that they're\n             // private.\n-            ast::ItemTrait(_, _, _, ref methods) if item.vis != ast::Public => {\n+            ast::ItemTrait(_, _, _, _, ref methods) if item.vis != ast::Public => {\n                 for m in methods.iter() {\n                     match *m {\n                         ast::ProvidedMethod(ref m) => {\n@@ -282,7 +282,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n \n             // Default methods on traits are all public so long as the trait\n             // is public\n-            ast::ItemTrait(_, _, _, ref methods) if public_first => {\n+            ast::ItemTrait(_, _, _, _, ref methods) if public_first => {\n                 for method in methods.iter() {\n                     match *method {\n                         ast::ProvidedMethod(ref m) => {\n@@ -1134,7 +1134,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            ast::ItemTrait(_, _, _, ref methods) => {\n+            ast::ItemTrait(_, _, _, _, ref methods) => {\n                 for m in methods.iter() {\n                     match *m {\n                         ast::ProvidedMethod(ref m) => {\n@@ -1198,7 +1198,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n \n             ast::ItemStruct(ref def, _) => check_struct(&**def),\n \n-            ast::ItemTrait(_, _, _, ref methods) => {\n+            ast::ItemTrait(_, _, _, _, ref methods) => {\n                 for m in methods.iter() {\n                     match *m {\n                         ast::RequiredMethod(..) => {}\n@@ -1305,7 +1305,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n             // namespace (the contents have their own privacies).\n             ast::ItemForeignMod(_) => {}\n \n-            ast::ItemTrait(_, _, ref bounds, _) => {\n+            ast::ItemTrait(_, _, _, ref bounds, _) => {\n                 if !self.trait_is_public(item.id) {\n                     return\n                 }"}, {"sha": "2e52bab2ae3ee0fbfa737e057cb0045444ed7232", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -1583,7 +1583,7 @@ impl<'a> Resolver<'a> {\n \n             ItemImpl(_, Some(_), _, _) => parent,\n \n-            ItemTrait(_, _, _, ref items) => {\n+            ItemTrait(_, _, _, _, ref items) => {\n                 let name_bindings =\n                     self.add_child(name,\n                                    parent.clone(),\n@@ -4241,7 +4241,7 @@ impl<'a> Resolver<'a> {\n                                             impl_items.as_slice());\n             }\n \n-            ItemTrait(ref generics, ref unbound, ref bounds, ref trait_items) => {\n+            ItemTrait(_, ref generics, ref unbound, ref bounds, ref trait_items) => {\n                 // Create a new rib for the self type.\n                 let mut self_type_rib = Rib::new(ItemRibKind);\n "}, {"sha": "683948cd2e7e905dafce8678ecfe7cbb07ee4579", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n             ast::ItemTy(_, ref generics) |\n             ast::ItemEnum(_, ref generics) |\n             ast::ItemStruct(_, ref generics) |\n-            ast::ItemTrait(ref generics, _, _, _) => {\n+            ast::ItemTrait(_, ref generics, _, _, _) => {\n                 // These kinds of items have only early bound lifetime parameters.\n                 let lifetimes = &generics.lifetimes;\n                 self.with(EarlyScope(subst::TypeSpace, lifetimes, &ROOT_SCOPE), |this| {"}, {"sha": "4c4df698f33801736707ee3f17721c24cfb81f4e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -1915,6 +1915,8 @@ pub struct Polytype<'tcx> {\n \n /// As `Polytype` but for a trait ref.\n pub struct TraitDef<'tcx> {\n+    pub unsafety: ast::Unsafety,\n+\n     /// Generic type definitions. Note that `Self` is listed in here\n     /// as having a single bound, the trait itself (e.g., in the trait\n     /// `Eq`, there is a single bound `Self : Eq`). This is so that\n@@ -4572,7 +4574,7 @@ pub fn provided_trait_methods<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n         match cx.map.find(id.node) {\n             Some(ast_map::NodeItem(item)) => {\n                 match item.node {\n-                    ItemTrait(_, _, _, ref ms) => {\n+                    ItemTrait(_, _, _, _, ref ms) => {\n                         let (_, p) =\n                             ast_util::split_trait_methods(ms.as_slice());\n                         p.iter()"}, {"sha": "779fcd708647b9db32a4ca0f954a6eefa108fa09", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -1050,7 +1050,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n                                   &**typ,\n                                   impl_items)\n             }\n-            ast::ItemTrait(ref generics, _, ref trait_refs, ref methods) =>\n+            ast::ItemTrait(_, ref generics, _, ref trait_refs, ref methods) =>\n                 self.process_trait(item, generics, trait_refs, methods),\n             ast::ItemMod(ref m) => self.process_mod(item, m),\n             ast::ItemTy(ref ty, ref ty_params) => {"}, {"sha": "c64519c96dd1c2fe7035be0f15e0871703e124f8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -625,7 +625,7 @@ pub fn check_item(ccx: &CrateCtxt, it: &ast::Item) {\n         }\n \n       }\n-      ast::ItemTrait(_, _, _, ref trait_methods) => {\n+      ast::ItemTrait(_, _, _, _, ref trait_methods) => {\n         let trait_def = ty::lookup_trait_def(ccx.tcx, local_def(it.id));\n         for trait_method in trait_methods.iter() {\n             match *trait_method {"}, {"sha": "643d8eb60ceea0c58d4f54af68dba2abfcab3a81", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -258,7 +258,7 @@ fn collect_trait_methods<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                    trait_def: &ty::TraitDef<'tcx>) {\n     let tcx = ccx.tcx;\n     if let ast_map::NodeItem(item) = tcx.map.get(trait_id) {\n-        if let ast::ItemTrait(_, _, _, ref trait_items) = item.node {\n+        if let ast::ItemTrait(_, _, _, _, ref trait_items) = item.node {\n             // For each method, construct a suitable ty::Method and\n             // store it into the `tcx.impl_or_trait_items` table:\n             for trait_item in trait_items.iter() {\n@@ -1144,7 +1144,7 @@ pub fn convert(ccx: &CrateCtxt, it: &ast::Item) {\n                                                AllowEqConstraints::DontAllow);\n             }\n         },\n-        ast::ItemTrait(_, _, _, ref trait_methods) => {\n+        ast::ItemTrait(_, _, _, _, ref trait_methods) => {\n             let trait_def = trait_def_of_item(ccx, it);\n \n             debug!(\"trait_def: ident={} trait_def={}\",\n@@ -1335,12 +1335,13 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         return def.clone();\n     }\n \n-    let (generics, unbound, bounds, items) = match it.node {\n-        ast::ItemTrait(ref generics,\n+    let (unsafety, generics, unbound, bounds, items) = match it.node {\n+        ast::ItemTrait(unsafety,\n+                       ref generics,\n                        ref unbound,\n                        ref supertraits,\n                        ref items) => {\n-            (generics, unbound, supertraits, items.as_slice())\n+            (unsafety, generics, unbound, supertraits, items.as_slice())\n         }\n         ref s => {\n             tcx.sess.span_bug(\n@@ -1369,6 +1370,7 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n     let substs = mk_item_substs(ccx, &ty_generics);\n     let trait_def = Rc::new(ty::TraitDef {\n+        unsafety: unsafety,\n         generics: ty_generics,\n         bounds: bounds,\n         trait_ref: Rc::new(ty::TraitRef {"}, {"sha": "8fe14bae0f5bc00b7b96d2ab0ee54cfaaa80987f", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -358,7 +358,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n         match item.node {\n             ast::ItemEnum(_, ref generics) |\n             ast::ItemStruct(_, ref generics) |\n-            ast::ItemTrait(ref generics, _, _, _) => {\n+            ast::ItemTrait(_, ref generics, _, _, _) => {\n                 for (i, p) in generics.lifetimes.iter().enumerate() {\n                     let id = p.lifetime.id;\n                     self.add_inferred(item.id, RegionParam, TypeSpace, i, id);"}, {"sha": "a7d7c5207550b88a552acf65d6becfab7fe2bfe0", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -161,6 +161,7 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n     let trait_def = ty::lookup_trait_def(tcx, did);\n     let (bounds, default_unbound) = trait_def.bounds.clean(cx);\n     clean::Trait {\n+        unsafety: def.unsafety,\n         generics: (&def.generics, subst::TypeSpace).clean(cx),\n         items: items.collect(),\n         bounds: bounds,"}, {"sha": "92184ce93deeca2188f40ec2ac1dcfc49fbf720b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -974,6 +974,7 @@ impl Clean<FunctionRetTy> for ast::FunctionRetTy {\n \n #[deriving(Clone, Encodable, Decodable)]\n pub struct Trait {\n+    pub unsafety: ast::Unsafety,\n     pub items: Vec<TraitMethod>,\n     pub generics: Generics,\n     pub bounds: Vec<TyParamBound>,\n@@ -991,6 +992,7 @@ impl Clean<Item> for doctree::Trait {\n             visibility: self.vis.clean(cx),\n             stability: self.stab.clean(cx),\n             inner: TraitItem(Trait {\n+                unsafety: self.unsafety,\n                 items: self.items.clean(cx),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),"}, {"sha": "79f04e91260d8cfe7359f5b180f182cd63ed03c6", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -170,6 +170,7 @@ pub struct Constant {\n }\n \n pub struct Trait {\n+    pub unsafety: ast::Unsafety,\n     pub name: Ident,\n     pub items: Vec<ast::TraitItem>, //should be TraitItem\n     pub generics: ast::Generics,"}, {"sha": "1977b6320d0ecade3cd69627d2bc01e7d1aed454", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -1693,8 +1693,9 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     }\n \n     // Output the trait definition\n-    try!(write!(w, \"<pre class='rust trait'>{}trait {}{}{}{} \",\n+    try!(write!(w, \"<pre class='rust trait'>{}{}trait {}{}{}{} \",\n                   VisSpace(it.visibility),\n+                  UnsafetySpace(t.unsafety),\n                   it.name.as_ref().unwrap().as_slice(),\n                   t.generics,\n                   bounds,"}, {"sha": "f94e647b1cf03859b3be7d477c9ba328ddec7d2e", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -322,8 +322,9 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 };\n                 om.constants.push(s);\n             },\n-            ast::ItemTrait(ref gen, ref def_ub, ref b, ref items) => {\n+            ast::ItemTrait(unsafety, ref gen, ref def_ub, ref b, ref items) => {\n                 let t = Trait {\n+                    unsafety: unsafety,\n                     name: name,\n                     items: items.clone(),\n                     generics: gen.clone(),"}, {"sha": "1cc6b6feee83c3632e421f864a7811cf8c7a8411", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -1611,7 +1611,8 @@ pub enum Item_ {\n     ItemEnum(EnumDef, Generics),\n     ItemStruct(P<StructDef>, Generics),\n     /// Represents a Trait Declaration\n-    ItemTrait(Generics,\n+    ItemTrait(Unsafety,\n+              Generics,\n               Option<TraitRef>, // (optional) default bound not required for Self.\n                                 // Currently, only Sized makes sense here.\n               TyParamBounds,"}, {"sha": "a2cdc4d2fbc7d504a06e0c1c5fe1e01442c6480e", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -786,7 +786,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                     None => {}\n                 }\n             }\n-            ItemTrait(_, _, ref bounds, ref trait_items) => {\n+            ItemTrait(_, _, _, ref bounds, ref trait_items) => {\n                 for b in bounds.iter() {\n                     if let TraitTyParamBound(ref t) = *b {\n                         self.insert(t.trait_ref.ref_id, NodeItem(i));"}, {"sha": "ee6515921177a90a9971fc60bcb838622062abe3", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -139,11 +139,11 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n                                        .collect();\n             ast::ItemImpl(a, b, c, impl_items)\n         }\n-        ast::ItemTrait(a, b, c, methods) => {\n+        ast::ItemTrait(u, a, b, c, methods) => {\n             let methods = methods.into_iter()\n                                  .filter(|m| trait_method_in_cfg(cx, m))\n                                  .collect();\n-            ast::ItemTrait(a, b, c, methods)\n+            ast::ItemTrait(u, a, b, c, methods)\n         }\n         ast::ItemStruct(def, generics) => {\n             ast::ItemStruct(fold_struct(cx, def), generics)"}, {"sha": "daed014f4eb072fa321c21f93a5c358e3b28cc2b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -1035,7 +1035,7 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n                      folder.fold_ty(ty),\n                      new_impl_items)\n         }\n-        ItemTrait(generics, unbound, bounds, methods) => {\n+        ItemTrait(unsafety, generics, unbound, bounds, methods) => {\n             let bounds = folder.fold_bounds(bounds);\n             let methods = methods.into_iter().flat_map(|method| {\n                 let r = match method {\n@@ -1063,7 +1063,8 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n                 };\n                 r\n             }).collect();\n-            ItemTrait(folder.fold_generics(generics),\n+            ItemTrait(unsafety,\n+                      folder.fold_generics(generics),\n                       unbound,\n                       bounds,\n                       methods)"}, {"sha": "b2c30797cacb4149ac68fd08edd74ffb61ce2f12", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -4628,7 +4628,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse trait Foo { ... }\n-    fn parse_item_trait(&mut self) -> ItemInfo {\n+    fn parse_item_trait(&mut self, unsafety: Unsafety) -> ItemInfo {\n         let ident = self.parse_ident();\n         let mut tps = self.parse_generics();\n         let sized = self.parse_for_sized();\n@@ -4639,7 +4639,7 @@ impl<'a> Parser<'a> {\n         self.parse_where_clause(&mut tps);\n \n         let meths = self.parse_trait_items();\n-        (ident, ItemTrait(tps, sized, bounds, meths), None)\n+        (ident, ItemTrait(unsafety, tps, sized, bounds, meths), None)\n     }\n \n     fn parse_impl_items(&mut self) -> (Vec<ImplItem>, Vec<Attribute>) {\n@@ -5539,6 +5539,23 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return IoviItem(item);\n         }\n+        if self.token.is_keyword(keywords::Unsafe) &&\n+            self.look_ahead(1u, |t| t.is_keyword(keywords::Trait))\n+        {\n+            // UNSAFE TRAIT ITEM\n+            self.expect_keyword(keywords::Unsafe);\n+            self.expect_keyword(keywords::Trait);\n+            let (ident, item_, extra_attrs) =\n+                self.parse_item_trait(ast::Unsafety::Unsafe);\n+            let last_span = self.last_span;\n+            let item = self.mk_item(lo,\n+                                    last_span.hi,\n+                                    ident,\n+                                    item_,\n+                                    visibility,\n+                                    maybe_append(attrs, extra_attrs));\n+            return IoviItem(item);\n+        }\n         if self.token.is_keyword(keywords::Fn) &&\n                 self.look_ahead(1, |f| !Parser::fn_expr_lookahead(f)) {\n             // FUNCTION ITEM\n@@ -5614,7 +5631,8 @@ impl<'a> Parser<'a> {\n         }\n         if self.eat_keyword(keywords::Trait) {\n             // TRAIT ITEM\n-            let (ident, item_, extra_attrs) = self.parse_item_trait();\n+            let (ident, item_, extra_attrs) =\n+                self.parse_item_trait(ast::Unsafety::Normal);\n             let last_span = self.last_span;\n             let item = self.mk_item(lo,\n                                     last_span.hi,"}, {"sha": "037118b145f4be7c7b7c3014c4ec5907db4abb63", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -955,9 +955,11 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.bclose(item.span));\n             }\n-            ast::ItemTrait(ref generics, ref unbound, ref bounds, ref methods) => {\n-                try!(self.head(visibility_qualified(item.vis,\n-                                                    \"trait\").as_slice()));\n+            ast::ItemTrait(unsafety, ref generics, ref unbound, ref bounds, ref methods) => {\n+                try!(self.head(\"\"));\n+                try!(self.print_visibility(item.vis));\n+                try!(self.print_unsafety(unsafety));\n+                try!(self.word_nbsp(\"trait\"));\n                 try!(self.print_ident(item.ident));\n                 try!(self.print_generics(generics));\n                 if let &Some(ref tref) = unbound {"}, {"sha": "7bb79a15f4549201998547dbf90b7220916b17e7", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -311,7 +311,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n                                      generics,\n                                      item.id)\n         }\n-        ItemTrait(ref generics, _, ref bounds, ref methods) => {\n+        ItemTrait(_, ref generics, _, ref bounds, ref methods) => {\n             visitor.visit_generics(generics);\n             walk_ty_param_bounds_helper(visitor, bounds);\n             for method in methods.iter() {"}, {"sha": "42e578482e6e0240d76375b7940a57b5f19432d9", "filename": "src/test/pretty/trait-safety.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5686a91914ac678ccb78220367daefe585a0d66a/src%2Ftest%2Fpretty%2Ftrait-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5686a91914ac678ccb78220367daefe585a0d66a/src%2Ftest%2Fpretty%2Ftrait-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftrait-safety.rs?ref=5686a91914ac678ccb78220367daefe585a0d66a", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pp-exact\n+\n+unsafe trait UnsafeTrait {\n+    fn foo(&self);\n+}\n+\n+pub unsafe trait PubUnsafeTrait {\n+    fn foo(&self);\n+}\n+\n+fn main() { }"}]}