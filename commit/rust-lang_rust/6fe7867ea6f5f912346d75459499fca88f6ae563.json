{"sha": "6fe7867ea6f5f912346d75459499fca88f6ae563", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZTc4NjdlYTZmNWY5MTIzNDZkNzU0NTk0OTlmY2E4OGY2YWU1NjM=", "commit": {"author": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2020-03-19T08:57:37Z"}, "committer": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2020-03-19T10:21:50Z"}, "message": "Add Result<Result<T, E>, E>::flatten -> Result<T, E>", "tree": {"sha": "705c13541941a8a275139802c465f1694939e3b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/705c13541941a8a275139802c465f1694939e3b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fe7867ea6f5f912346d75459499fca88f6ae563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe7867ea6f5f912346d75459499fca88f6ae563", "html_url": "https://github.com/rust-lang/rust/commit/6fe7867ea6f5f912346d75459499fca88f6ae563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fe7867ea6f5f912346d75459499fca88f6ae563/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a", "html_url": "https://github.com/rust-lang/rust/commit/7760cd0fbbbf2c59a625e075a5bdfa88b8e30f8a"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "0087b92f1f2d6f311f1cd1ad413891ac492728ae", "filename": "src/libcore/result.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6fe7867ea6f5f912346d75459499fca88f6ae563/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fe7867ea6f5f912346d75459499fca88f6ae563/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=6fe7867ea6f5f912346d75459499fca88f6ae563", "patch": "@@ -230,9 +230,9 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use crate::fmt;\n use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};\n use crate::ops::{self, Deref, DerefMut};\n+use crate::{convert, fmt};\n \n /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).\n ///\n@@ -1214,6 +1214,38 @@ impl<T, E> Result<Option<T>, E> {\n     }\n }\n \n+impl<T, E> Result<Result<T, E>, E> {\n+    /// Converts from `Result<Result<T, E>, E>` to `Result<T, E>`\n+    ///\n+    /// # Examples\n+    /// Basic usage:\n+    /// ```\n+    /// #![feature(result_flattening)]\n+    /// let x: Result<Result<&'static str, u32>, u32> = Ok(Ok(\"hello\"));\n+    /// assert_eq!(Ok(\"hello\"), x.flatten());\n+    ///\n+    /// let x: Result<Result<&'static str, u32>, u32> = Ok(Err(6));\n+    /// assert_eq!(Err(6), x.flatten());\n+    ///\n+    /// let x: Result<Result<&'static str, u32>, u32> = Err(6);\n+    /// assert_eq!(Err(6), x.flatten());\n+    /// ```\n+    ///\n+    /// Flattening once only removes one level of nesting:\n+    ///\n+    /// ```\n+    /// #![feature(result_flattening)]\n+    /// let x: Result<Result<Result<&'static str, u32>, u32>, u32> = Ok(Ok(Ok(\"hello\")));\n+    /// assert_eq!(Ok(Ok(\"hello\")), x.flatten());\n+    /// assert_eq!(Ok(\"hello\"), x.flatten().flatten());\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"result_flattening\", issue = \"70142\")]\n+    pub fn flatten(self) -> Result<T, E> {\n+        self.and_then(convert::identity)\n+    }\n+}\n+\n // This is a separate function to reduce the code size of the methods\n #[inline(never)]\n #[cold]"}]}