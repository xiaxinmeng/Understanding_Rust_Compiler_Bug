{"sha": "42b8c77da5c57d3431b5445152ff702c614ce6d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYjhjNzdkYTVjNTdkMzQzMWI1NDQ1MTUyZmY3MDJjNjE0Y2U2ZDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-03T13:35:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-03T13:35:15Z"}, "message": "Auto merge of #57922 - davidtwco:issue-57410, r=petrochenkov\n\nUpdate visibility of intermediate use items.\n\nFixes #57410 and fixes #53925 and fixes #47816.\n\nCurrently, the target of a use statement will be updated with\nthe visibility of the use statement itself (if the use statement was\nvisible).\n\nThis PR ensures that if the path to the target item is via another\nuse statement then that intermediate use statement will also have the\nvisibility updated like the target. This silences incorrect\n`unreachable_pub` lints with inactionable suggestions.", "tree": {"sha": "0ccbcd1133798c5f9de69415cf3e9a70c81a18a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ccbcd1133798c5f9de69415cf3e9a70c81a18a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42b8c77da5c57d3431b5445152ff702c614ce6d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42b8c77da5c57d3431b5445152ff702c614ce6d8", "html_url": "https://github.com/rust-lang/rust/commit/42b8c77da5c57d3431b5445152ff702c614ce6d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42b8c77da5c57d3431b5445152ff702c614ce6d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc6e9a2845e8bb4560811ed21136483a596505bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6e9a2845e8bb4560811ed21136483a596505bb", "html_url": "https://github.com/rust-lang/rust/commit/fc6e9a2845e8bb4560811ed21136483a596505bb"}, {"sha": "71023394772e9194e3c7a2426364faef6c3ad2c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/71023394772e9194e3c7a2426364faef6c3ad2c4", "html_url": "https://github.com/rust-lang/rust/commit/71023394772e9194e3c7a2426364faef6c3ad2c4"}], "stats": {"total": 116, "additions": 107, "deletions": 9}, "files": [{"sha": "bca1b76dbb97514acd74de7a0a130533cbf548c6", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=42b8c77da5c57d3431b5445152ff702c614ce6d8", "patch": "@@ -11,6 +11,7 @@ mod flatten;\n mod zip;\n \n pub use self::chain::Chain;\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::flatten::{FlatMap, Flatten};\n pub use self::zip::Zip;\n pub(crate) use self::zip::TrustedRandomAccess;"}, {"sha": "cf3013f423c94f3bf23044b52b774cd53d57cbfd", "filename": "src/libcore/iter/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Flibcore%2Fiter%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Flibcore%2Fiter%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fmod.rs?ref=42b8c77da5c57d3431b5445152ff702c614ce6d8", "patch": "@@ -5,9 +5,11 @@ mod collect;\n mod accum;\n mod marker;\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::iterator::Iterator;\n pub use self::double_ended::DoubleEndedIterator;\n pub use self::exact_size::ExactSizeIterator;\n pub use self::collect::{FromIterator, IntoIterator, Extend};\n pub use self::accum::{Sum, Product};\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::marker::{FusedIterator, TrustedLen};"}, {"sha": "f8f27992b3ea88f23c5728bb9450b1ba9975baf6", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=42b8c77da5c57d3431b5445152ff702c614ce6d8", "patch": "@@ -252,12 +252,14 @@ impl NonMacroAttrKind {\n }\n \n impl Def {\n+    /// Return the `DefId` of this `Def` if it has an id, else panic.\n     pub fn def_id(&self) -> DefId {\n         self.opt_def_id().unwrap_or_else(|| {\n             bug!(\"attempted .def_id() on invalid def: {:?}\", self)\n         })\n     }\n \n+    /// Return `Some(..)` with the `DefId` of this `Def` if it has a id, else `None`.\n     pub fn opt_def_id(&self) -> Option<DefId> {\n         match *self {\n             Def::Fn(id) | Def::Mod(id) | Def::Static(id, _) |\n@@ -284,6 +286,14 @@ impl Def {\n         }\n     }\n \n+    /// Return the `DefId` of this `Def` if it represents a module.\n+    pub fn mod_def_id(&self) -> Option<DefId> {\n+        match *self {\n+            Def::Mod(id) => Some(id),\n+            _ => None,\n+        }\n+    }\n+\n     /// A human readable name for the def kind (\"function\", \"module\", etc.).\n     pub fn kind_name(&self) -> &'static str {\n         match *self {"}, {"sha": "3baf0f0ea39ff1bf9ec555dc7a9b07cdbbd9f5a9", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=42b8c77da5c57d3431b5445152ff702c614ce6d8", "patch": "@@ -11,16 +11,16 @@ use syntax::ast::NodeId;\n // Accessibility levels, sorted in ascending order\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum AccessLevel {\n-    // Superset of Reachable used to mark impl Trait items.\n+    /// Superset of `AccessLevel::Reachable` used to mark impl Trait items.\n     ReachableFromImplTrait,\n-    // Exported items + items participating in various kinds of public interfaces,\n-    // but not directly nameable. For example, if function `fn f() -> T {...}` is\n-    // public, then type `T` is reachable. Its values can be obtained by other crates\n-    // even if the type itself is not nameable.\n+    /// Exported items + items participating in various kinds of public interfaces,\n+    /// but not directly nameable. For example, if function `fn f() -> T {...}` is\n+    /// public, then type `T` is reachable. Its values can be obtained by other crates\n+    /// even if the type itself is not nameable.\n     Reachable,\n-    // Public items + items accessible to other crates with help of `pub use` re-exports\n+    /// Public items + items accessible to other crates with help of `pub use` re-exports\n     Exported,\n-    // Items accessible to other crates directly, without help of re-exports\n+    /// Items accessible to other crates directly, without help of re-exports\n     Public,\n }\n \n@@ -31,12 +31,17 @@ pub struct AccessLevels<Id = NodeId> {\n }\n \n impl<Id: Hash + Eq> AccessLevels<Id> {\n+    /// See `AccessLevel::Reachable`.\n     pub fn is_reachable(&self, id: Id) -> bool {\n         self.map.get(&id) >= Some(&AccessLevel::Reachable)\n     }\n+\n+    /// See `AccessLevel::Exported`.\n     pub fn is_exported(&self, id: Id) -> bool {\n         self.map.get(&id) >= Some(&AccessLevel::Exported)\n     }\n+\n+    /// See `AccessLevel::Public`.\n     pub fn is_public(&self, id: Id) -> bool {\n         self.map.get(&id) >= Some(&AccessLevel::Public)\n     }"}, {"sha": "05d20562d34e7687c864044a33499613b917fc37", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=42b8c77da5c57d3431b5445152ff702c614ce6d8", "patch": "@@ -437,6 +437,43 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n             ev: self,\n         }\n     }\n+\n+\n+    /// Given the path segments of a `ItemKind::Use`, then we need\n+    /// to update the visibility of the intermediate use so that it isn't linted\n+    /// by `unreachable_pub`.\n+    ///\n+    /// This isn't trivial as `path.def` has the `DefId` of the eventual target\n+    /// of the use statement not of the next intermediate use statement.\n+    ///\n+    /// To do this, consider the last two segments of the path to our intermediate\n+    /// use statement. We expect the penultimate segment to be a module and the\n+    /// last segment to be the name of the item we are exporting. We can then\n+    /// look at the items contained in the module for the use statement with that\n+    /// name and update that item's visibility.\n+    ///\n+    /// FIXME: This solution won't work with glob imports and doesn't respect\n+    /// namespaces. See <https://github.com/rust-lang/rust/pull/57922#discussion_r251234202>.\n+    fn update_visibility_of_intermediate_use_statements(&mut self, segments: &[hir::PathSegment]) {\n+        if let Some([module, segment]) = segments.rchunks_exact(2).next() {\n+            if let Some(item) = module.def\n+                .and_then(|def| def.mod_def_id())\n+                .and_then(|def_id| self.tcx.hir().as_local_node_id(def_id))\n+                .map(|module_node_id| self.tcx.hir().expect_item(module_node_id))\n+             {\n+                if let hir::ItemKind::Mod(m) = &item.node {\n+                    for item_id in m.item_ids.as_ref() {\n+                        let item = self.tcx.hir().expect_item(item_id.id);\n+                        let def_id = self.tcx.hir().local_def_id(item_id.id);\n+                        if !self.tcx.hygienic_eq(segment.ident, item.ident, def_id) { continue; }\n+                        if let hir::ItemKind::Use(..) = item.node {\n+                            self.update(item.id, Some(AccessLevel::Exported));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n@@ -523,8 +560,14 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemKind::ExternCrate(..) => {}\n             // All nested items are checked by `visit_item`.\n             hir::ItemKind::Mod(..) => {}\n-            // Re-exports are handled in `visit_mod`.\n-            hir::ItemKind::Use(..) => {}\n+            // Re-exports are handled in `visit_mod`. However, in order to avoid looping over\n+            // all of the items of a mod in `visit_mod` looking for use statements, we handle\n+            // making sure that intermediate use statements have their visibilities updated here.\n+            hir::ItemKind::Use(ref path, _) => {\n+                if item_level.is_some() {\n+                    self.update_visibility_of_intermediate_use_statements(path.segments.as_ref());\n+                }\n+            }\n             // The interface is empty.\n             hir::ItemKind::GlobalAsm(..) => {}\n             hir::ItemKind::Existential(..) => {"}, {"sha": "99ef74179c2ba9a7ba01d48cd865d9d7d77e8d31", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=42b8c77da5c57d3431b5445152ff702c614ce6d8", "patch": "@@ -54,6 +54,7 @@ cfg_if! {\n cfg_if! {\n     if #[cfg(any(unix, target_os = \"redox\"))] {\n         // On unix we'll document what's already available\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub use self::ext as unix_ext;\n     } else if #[cfg(any(target_os = \"cloudabi\",\n                         target_arch = \"wasm32\",\n@@ -77,6 +78,7 @@ cfg_if! {\n     if #[cfg(windows)] {\n         // On windows we'll just be documenting what's already available\n         #[allow(missing_docs)]\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         pub use self::ext as windows_ext;\n     } else if #[cfg(any(target_os = \"cloudabi\",\n                         target_arch = \"wasm32\","}, {"sha": "dab77bd660ca0d9d64a55ed369742d44016c74b3", "filename": "src/test/ui/issues/issue-57410-1.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Ftest%2Fui%2Fissues%2Fissue-57410-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Ftest%2Fui%2Fissues%2Fissue-57410-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57410-1.rs?ref=42b8c77da5c57d3431b5445152ff702c614ce6d8", "patch": "@@ -0,0 +1,18 @@\n+// compile-pass\n+\n+// Originally from #53925.\n+// Tests that the `unreachable_pub` lint doesn't fire for `pub self::bar::Bar`.\n+\n+#![deny(unreachable_pub)]\n+\n+mod foo {\n+    mod bar {\n+        pub struct Bar;\n+    }\n+\n+    pub use self::bar::Bar;\n+}\n+\n+pub use foo::Bar;\n+\n+fn main() {}"}, {"sha": "0d697e5619d249df7a121bd05dd3b47c45e07a0d", "filename": "src/test/ui/issues/issue-57410.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Ftest%2Fui%2Fissues%2Fissue-57410.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b8c77da5c57d3431b5445152ff702c614ce6d8/src%2Ftest%2Fui%2Fissues%2Fissue-57410.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57410.rs?ref=42b8c77da5c57d3431b5445152ff702c614ce6d8", "patch": "@@ -0,0 +1,17 @@\n+// compile-pass\n+\n+// Tests that the `unreachable_pub` lint doesn't fire for `pub self::imp::f`.\n+\n+#![deny(unreachable_pub)]\n+\n+mod m {\n+    mod imp {\n+        pub fn f() {}\n+    }\n+\n+    pub use self::imp::f;\n+}\n+\n+pub use self::m::f;\n+\n+fn main() {}"}]}