{"sha": "938058b0040e3c482e10b78eeef7afb941b2b64e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzODA1OGIwMDQwZTNjNDgyZTEwYjc4ZWVlZjdhZmI5NDFiMmI2NGU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-12-19T04:48:23Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-12-19T04:48:51Z"}, "message": "Fix vec::flat_map_to_vec method", "tree": {"sha": "b8206362ee530bacb34447ad6bd1efbcdc5f2422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8206362ee530bacb34447ad6bd1efbcdc5f2422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/938058b0040e3c482e10b78eeef7afb941b2b64e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/938058b0040e3c482e10b78eeef7afb941b2b64e", "html_url": "https://github.com/rust-lang/rust/commit/938058b0040e3c482e10b78eeef7afb941b2b64e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/938058b0040e3c482e10b78eeef7afb941b2b64e/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "url": "https://api.github.com/repos/rust-lang/rust/commits/97ddf3c7bdbd874ad6596e9444abb61b5903bc04", "html_url": "https://github.com/rust-lang/rust/commit/97ddf3c7bdbd874ad6596e9444abb61b5903bc04"}], "stats": {"total": 153, "additions": 139, "deletions": 14}, "files": [{"sha": "5071fb903d91d1bcb6127974f435c028dae986f1", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/938058b0040e3c482e10b78eeef7afb941b2b64e/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938058b0040e3c482e10b78eeef7afb941b2b64e/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=938058b0040e3c482e10b78eeef7afb941b2b64e", "patch": "@@ -2024,6 +2024,32 @@ impl<A> &[A]: iter::BaseIter<A> {\n     pure fn size_hint(&self) -> Option<uint> { Some(len(*self)) }\n }\n \n+// FIXME(#4148): This should be redundant\n+impl<A> ~[A]: iter::BaseIter<A> {\n+    pub pure fn each(&self, blk: fn(v: &A) -> bool) {\n+        // FIXME(#2263)---should be able to call each(self, blk)\n+        for each(*self) |e| {\n+            if (!blk(e)) {\n+                return;\n+            }\n+        }\n+    }\n+    pure fn size_hint(&self) -> Option<uint> { Some(len(*self)) }\n+}\n+\n+// FIXME(#4148): This should be redundant\n+impl<A> @[A]: iter::BaseIter<A> {\n+    pub pure fn each(&self, blk: fn(v: &A) -> bool) {\n+        // FIXME(#2263)---should be able to call each(self, blk)\n+        for each(*self) |e| {\n+            if (!blk(e)) {\n+                return;\n+            }\n+        }\n+    }\n+    pure fn size_hint(&self) -> Option<uint> { Some(len(*self)) }\n+}\n+\n impl<A> &[A]: iter::ExtendedIter<A> {\n     pub pure fn eachi(&self, blk: fn(uint, v: &A) -> bool) {\n         iter::eachi(self, blk)\n@@ -2049,11 +2075,75 @@ impl<A> &[A]: iter::ExtendedIter<A> {\n     }\n }\n \n+// FIXME(#4148): This should be redundant\n+impl<A> ~[A]: iter::ExtendedIter<A> {\n+    pub pure fn eachi(&self, blk: fn(uint, v: &A) -> bool) {\n+        iter::eachi(self, blk)\n+    }\n+    pub pure fn all(&self, blk: fn(&A) -> bool) -> bool {\n+        iter::all(self, blk)\n+    }\n+    pub pure fn any(&self, blk: fn(&A) -> bool) -> bool {\n+        iter::any(self, blk)\n+    }\n+    pub pure fn foldl<B>(&self, b0: B, blk: fn(&B, &A) -> B) -> B {\n+        iter::foldl(self, b0, blk)\n+    }\n+    pub pure fn position(&self, f: fn(&A) -> bool) -> Option<uint> {\n+        iter::position(self, f)\n+    }\n+    pure fn map_to_vec<B>(&self, op: fn(&A) -> B) -> ~[B] {\n+        iter::map_to_vec(self, op)\n+    }\n+    pure fn flat_map_to_vec<B,IB:BaseIter<B>>(&self, op: fn(&A) -> IB)\n+        -> ~[B] {\n+        iter::flat_map_to_vec(self, op)\n+    }\n+}\n+\n+// FIXME(#4148): This should be redundant\n+impl<A> @[A]: iter::ExtendedIter<A> {\n+    pub pure fn eachi(&self, blk: fn(uint, v: &A) -> bool) {\n+        iter::eachi(self, blk)\n+    }\n+    pub pure fn all(&self, blk: fn(&A) -> bool) -> bool {\n+        iter::all(self, blk)\n+    }\n+    pub pure fn any(&self, blk: fn(&A) -> bool) -> bool {\n+        iter::any(self, blk)\n+    }\n+    pub pure fn foldl<B>(&self, b0: B, blk: fn(&B, &A) -> B) -> B {\n+        iter::foldl(self, b0, blk)\n+    }\n+    pub pure fn position(&self, f: fn(&A) -> bool) -> Option<uint> {\n+        iter::position(self, f)\n+    }\n+    pure fn map_to_vec<B>(&self, op: fn(&A) -> B) -> ~[B] {\n+        iter::map_to_vec(self, op)\n+    }\n+    pure fn flat_map_to_vec<B,IB:BaseIter<B>>(&self, op: fn(&A) -> IB)\n+        -> ~[B] {\n+        iter::flat_map_to_vec(self, op)\n+    }\n+}\n+\n impl<A: Eq> &[A]: iter::EqIter<A> {\n     pub pure fn contains(&self, x: &A) -> bool { iter::contains(self, x) }\n     pub pure fn count(&self, x: &A) -> uint { iter::count(self, x) }\n }\n \n+// FIXME(#4148): This should be redundant\n+impl<A: Eq> ~[A]: iter::EqIter<A> {\n+    pub pure fn contains(&self, x: &A) -> bool { iter::contains(self, x) }\n+    pub pure fn count(&self, x: &A) -> uint { iter::count(self, x) }\n+}\n+\n+// FIXME(#4148): This should be redundant\n+impl<A: Eq> @[A]: iter::EqIter<A> {\n+    pub pure fn contains(&self, x: &A) -> bool { iter::contains(self, x) }\n+    pub pure fn count(&self, x: &A) -> uint { iter::count(self, x) }\n+}\n+\n impl<A: Copy> &[A]: iter::CopyableIter<A> {\n     pure fn filter_to_vec(&self, pred: fn(&A) -> bool) -> ~[A] {\n         iter::filter_to_vec(self, pred)\n@@ -2064,11 +2154,45 @@ impl<A: Copy> &[A]: iter::CopyableIter<A> {\n     }\n }\n \n+// FIXME(#4148): This should be redundant\n+impl<A: Copy> ~[A]: iter::CopyableIter<A> {\n+    pure fn filter_to_vec(&self, pred: fn(&A) -> bool) -> ~[A] {\n+        iter::filter_to_vec(self, pred)\n+    }\n+    pure fn to_vec(&self) -> ~[A] { iter::to_vec(self) }\n+    pub pure fn find(&self, f: fn(&A) -> bool) -> Option<A> {\n+        iter::find(self, f)\n+    }\n+}\n+\n+// FIXME(#4148): This should be redundant\n+impl<A: Copy> @[A]: iter::CopyableIter<A> {\n+    pure fn filter_to_vec(&self, pred: fn(&A) -> bool) -> ~[A] {\n+        iter::filter_to_vec(self, pred)\n+    }\n+    pure fn to_vec(&self) -> ~[A] { iter::to_vec(self) }\n+    pub pure fn find(&self, f: fn(&A) -> bool) -> Option<A> {\n+        iter::find(self, f)\n+    }\n+}\n+\n impl<A: Copy Ord> &[A]: iter::CopyableOrderedIter<A> {\n     pure fn min(&self) -> A { iter::min(self) }\n     pure fn max(&self) -> A { iter::max(self) }\n }\n \n+// FIXME(#4148): This should be redundant\n+impl<A: Copy Ord> ~[A]: iter::CopyableOrderedIter<A> {\n+    pure fn min(&self) -> A { iter::min(self) }\n+    pure fn max(&self) -> A { iter::max(self) }\n+}\n+\n+// FIXME(#4148): This should be redundant\n+impl<A: Copy Ord> @[A]: iter::CopyableOrderedIter<A> {\n+    pure fn min(&self) -> A { iter::min(self) }\n+    pure fn max(&self) -> A { iter::max(self) }\n+}\n+\n impl<A:Copy> &[A] : iter::CopyableNonstrictIter<A> {\n     pure fn each_val(&const self, f: fn(A) -> bool) {\n         let mut i = 0;\n@@ -2079,6 +2203,7 @@ impl<A:Copy> &[A] : iter::CopyableNonstrictIter<A> {\n     }\n }\n \n+// FIXME(#4148): This should be redundant\n impl<A:Copy> ~[A] : iter::CopyableNonstrictIter<A> {\n     pure fn each_val(&const self, f: fn(A) -> bool) {\n         let mut i = 0;\n@@ -2089,6 +2214,7 @@ impl<A:Copy> ~[A] : iter::CopyableNonstrictIter<A> {\n     }\n }\n \n+// FIXME(#4148): This should be redundant\n impl<A:Copy> @[A] : iter::CopyableNonstrictIter<A> {\n     pure fn each_val(&const self, f: fn(A) -> bool) {\n         let mut i = 0;"}, {"sha": "a90206188e3884fe6061b5c84b70aa53abd2b93c", "filename": "src/test/run-pass/iter-flat-map-to-vec.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/938058b0040e3c482e10b78eeef7afb941b2b64e/src%2Ftest%2Frun-pass%2Fiter-flat-map-to-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/938058b0040e3c482e10b78eeef7afb941b2b64e/src%2Ftest%2Frun-pass%2Fiter-flat-map-to-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-flat-map-to-vec.rs?ref=938058b0040e3c482e10b78eeef7afb941b2b64e", "patch": "@@ -8,23 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test -- flat_map_to_vec currently disable\n-fn repeat(x: &uint) -> ~[uint] { ~[x, x] }\n+fn repeat(x: &uint) -> ~[uint] { ~[*x, *x] }\n \n-fn incd_if_even(x: &uint) -> option<uint> {\n-    if (x % 2u) == 0u {some(x + 1u)} else {none}\n+fn incd_if_even(x: &uint) -> Option<uint> {\n+    if (*x % 2u) == 0u {Some(*x + 1u)} else {None}\n }\n \n fn main() {\n-    assert ~[1u, 3u].flat_map_to_vec(repeat) == ~[1u, 1u, 3u, 3u];\n-    assert ~[].flat_map_to_vec(repeat) == ~[];\n-    assert none.flat_map_to_vec(repeat) == ~[];\n-    assert some(1u).flat_map_to_vec(repeat) == ~[1u, 1u];\n-    assert some(2u).flat_map_to_vec(repeat) == ~[2u, 2u];\n+    assert (~[1u, 3u]).flat_map_to_vec(repeat) == ~[1u, 1u, 3u, 3u];\n+    assert (~[]).flat_map_to_vec(repeat) == ~[];\n+    assert None.flat_map_to_vec(repeat) == ~[];\n+    assert Some(1u).flat_map_to_vec(repeat) == ~[1u, 1u];\n+    assert Some(2u).flat_map_to_vec(repeat) == ~[2u, 2u];\n \n-    assert ~[1u, 2u, 5u].flat_map_to_vec(incd_if_even) == ~[3u];\n-    assert ~[].flat_map_to_vec(incd_if_even) == ~[];\n-    assert none.flat_map_to_vec(incd_if_even) == ~[];\n-    assert some(1u).flat_map_to_vec(incd_if_even) == ~[];\n-    assert some(2u).flat_map_to_vec(incd_if_even) == ~[3u];\n+    assert (~[1u, 2u, 5u]).flat_map_to_vec(incd_if_even) == ~[3u];\n+    assert (~[]).flat_map_to_vec(incd_if_even) == ~[];\n+    assert None.flat_map_to_vec(incd_if_even) == ~[];\n+    assert Some(1u).flat_map_to_vec(incd_if_even) == ~[];\n+    assert Some(2u).flat_map_to_vec(incd_if_even) == ~[3u];\n }"}]}