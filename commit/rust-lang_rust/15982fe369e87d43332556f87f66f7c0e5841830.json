{"sha": "15982fe369e87d43332556f87f66f7c0e5841830", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTgyZmUzNjllODdkNDMzMzI1NTZmODdmNjZmN2MwZTU4NDE4MzA=", "commit": {"author": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-17T13:33:37Z"}, "committer": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-17T13:33:37Z"}, "message": "Better trick for allowing trailing comma at forward!", "tree": {"sha": "fa29de8c0edb57afdea11c791072b82bf874d689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa29de8c0edb57afdea11c791072b82bf874d689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15982fe369e87d43332556f87f66f7c0e5841830", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQQzEHnM5f9ubG8rMBnAlyIdbgPfaAUCW5+tMQAKCRDAlyIdbgPf\naD1DAP9UerBNEvytu4RRkHMZx6duv/FOJ3IGgRcK0PQPKgan1gD/ewPxbUVJ9OwB\ncyHxP/5+W0dWBlb9xjuV529VLQTnjbE=\n=SR9H\n-----END PGP SIGNATURE-----", "payload": "tree fa29de8c0edb57afdea11c791072b82bf874d689\nparent 0269e662955a823ef94cd58316a0b9f914ddbedf\nauthor Vitaly _Vi Shukela <vi0oss@gmail.com> 1537191217 +0300\ncommitter Vitaly _Vi Shukela <vi0oss@gmail.com> 1537191217 +0300\n\nBetter trick for allowing trailing comma at forward!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15982fe369e87d43332556f87f66f7c0e5841830", "html_url": "https://github.com/rust-lang/rust/commit/15982fe369e87d43332556f87f66f7c0e5841830", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15982fe369e87d43332556f87f66f7c0e5841830/comments", "author": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0269e662955a823ef94cd58316a0b9f914ddbedf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0269e662955a823ef94cd58316a0b9f914ddbedf", "html_url": "https://github.com/rust-lang/rust/commit/0269e662955a823ef94cd58316a0b9f914ddbedf"}], "stats": {"total": 23, "additions": 13, "deletions": 10}, "files": [{"sha": "3b909cd88c35f122049fedd257fbd9220477cb3d", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/15982fe369e87d43332556f87f66f7c0e5841830/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15982fe369e87d43332556f87f66f7c0e5841830/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=15982fe369e87d43332556f87f66f7c0e5841830", "patch": "@@ -39,7 +39,7 @@ pub struct DiagnosticBuilder<'a> {\n /// it easy to declare such methods on the builder.\n macro_rules! forward {\n     // Forward pattern for &self -> &Self\n-    (pub fn $n:ident(&self, $($name:ident: $ty:ty,)*) -> &Self) => {\n+    (pub fn $n:ident(&self, $($name:ident: $ty:ty),* $(,)*) -> &Self) => {\n         pub fn $n(&self, $($name: $ty),*) -> &Self {\n             #[allow(deprecated)]\n             self.diagnostic.$n($($name),*);\n@@ -48,7 +48,7 @@ macro_rules! forward {\n     };\n \n     // Forward pattern for &mut self -> &mut Self\n-    (pub fn $n:ident(&mut self, $($name:ident: $ty:ty,)*) -> &mut Self) => {\n+    (pub fn $n:ident(&mut self, $($name:ident: $ty:ty),* $(,)*) -> &mut Self) => {\n         pub fn $n(&mut self, $($name: $ty),*) -> &mut Self {\n             #[allow(deprecated)]\n             self.diagnostic.$n($($name),*);\n@@ -58,8 +58,11 @@ macro_rules! forward {\n \n     // Forward pattern for &mut self -> &mut Self, with S: Into<MultiSpan>\n     // type parameter. No obvious way to make this more generic.\n-    (pub fn $n:ident<S: Into<MultiSpan>>(&mut self, $($name:ident: $ty:ty,)*) -> &mut Self) => {\n-        pub fn $n<S: Into<MultiSpan>>(&mut self, $($name: $ty,)*) -> &mut Self {\n+    (pub fn $n:ident<S: Into<MultiSpan>>(\n+                    &mut self,\n+                    $($name:ident: $ty:ty),*\n+                    $(,)*) -> &mut Self) => {\n+        pub fn $n<S: Into<MultiSpan>>(&mut self, $($name: $ty),*) -> &mut Self {\n             #[allow(deprecated)]\n             self.diagnostic.$n($($name),*);\n             self\n@@ -158,14 +161,14 @@ impl<'a> DiagnosticBuilder<'a> {\n                                               found_extra: &dyn fmt::Display,\n                                               ) -> &mut Self);\n \n-    forward!(pub fn note(&mut self, msg: &str,) -> &mut Self);\n+    forward!(pub fn note(&mut self, msg: &str) -> &mut Self);\n     forward!(pub fn span_note<S: Into<MultiSpan>>(&mut self,\n                                                   sp: S,\n                                                   msg: &str,\n                                                   ) -> &mut Self);\n-    forward!(pub fn warn(&mut self, msg: &str,) -> &mut Self);\n-    forward!(pub fn span_warn<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str,) -> &mut Self);\n-    forward!(pub fn help(&mut self , msg: &str,) -> &mut Self);\n+    forward!(pub fn warn(&mut self, msg: &str) -> &mut Self);\n+    forward!(pub fn span_warn<S: Into<MultiSpan>>(&mut self, sp: S, msg: &str) -> &mut Self);\n+    forward!(pub fn help(&mut self , msg: &str) -> &mut Self);\n     forward!(pub fn span_help<S: Into<MultiSpan>>(&mut self,\n                                                   sp: S,\n                                                   msg: &str,\n@@ -269,8 +272,8 @@ impl<'a> DiagnosticBuilder<'a> {\n         );\n         self\n     }\n-    forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S,) -> &mut Self);\n-    forward!(pub fn code(&mut self, s: DiagnosticId,) -> &mut Self);\n+    forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n+    forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n \n     pub fn allow_suggestions(&mut self, allow: bool) -> &mut Self {\n         self.allow_suggestions = allow;"}]}