{"sha": "cba0761e5f3677b90390fe7aee1eeda684296658", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYTA3NjFlNWYzNjc3YjkwMzkwZmU3YWVlMWVlZGE2ODQyOTY2NTg=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-10-27T14:39:14Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-10-27T14:39:14Z"}, "message": "update tests", "tree": {"sha": "4e6b766a90713c6b02d2c744088fdb87724e6661", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e6b766a90713c6b02d2c744088fdb87724e6661"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cba0761e5f3677b90390fe7aee1eeda684296658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cba0761e5f3677b90390fe7aee1eeda684296658", "html_url": "https://github.com/rust-lang/rust/commit/cba0761e5f3677b90390fe7aee1eeda684296658", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cba0761e5f3677b90390fe7aee1eeda684296658/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0026e3ec3f7945aa99b5c1ba7c1bed1a5d6bacf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0026e3ec3f7945aa99b5c1ba7c1bed1a5d6bacf3", "html_url": "https://github.com/rust-lang/rust/commit/0026e3ec3f7945aa99b5c1ba7c1bed1a5d6bacf3"}], "stats": {"total": 616, "additions": 409, "deletions": 207}, "files": [{"sha": "b8c54b13d8b4d0ec16f92a865ee73fffcdc4734d", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n ...\n LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n    |                                                        ^^^^^ type annotation requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/implied-region-constraints.rs:40:64\n@@ -19,6 +21,8 @@ LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n ...\n LL |             let _failure_proves_not_implied_outlives_region_b: &'b T = &x;\n    |                                                                ^^^^^ type annotation requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e12d42e5ed0cc654e1cb3b4bbb3cded857d63035", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n ...\n LL |     let z: I::A = if cond { x } else { y };\n    |                             ^ assignment requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:22:40\n@@ -19,6 +21,10 @@ LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n ...\n LL |     let z: I::A = if cond { x } else { y };\n    |                                        ^ assignment requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+help: `'a` and `'b` must be the same: replace one with the other\n \n error: aborting due to 2 previous errors\n "}, {"sha": "11d3cfe5b46690b9890fa0c4558de10eec56cccd", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n ...\n LL |     let a: <T as Trait<'a>>::Type = make_any();\n    |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/associated-types-subtyping-1.rs:35:13\n@@ -19,6 +21,8 @@ LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n ...\n LL |     let _c: <T as Trait<'a>>::Type = b;\n    |             ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a5b6d6403914757359c3b3c270be747f07e0e38f", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n ...\n LL |    (a, b)\n    |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/project-fn-ret-contravariant.rs:45:4\n@@ -19,6 +21,10 @@ LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n ...\n LL |    (a, b)\n    |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+help: `'a` and `'b` must be the same: replace one with the other\n \n error: aborting due to 2 previous errors\n "}, {"sha": "558f394ef86445cd415e159d4cf4db4f66433874", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |    bar(foo, x)\n    |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "71a533a36f41820c6d49a9c2aa555d138ecaa1c1", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n ...\n LL |    (a, b)\n    |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/project-fn-ret-invariant.rs:55:4\n@@ -19,6 +21,10 @@ LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n ...\n LL |    (a, b)\n    |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+help: `'a` and `'b` must be the same: replace one with the other\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c39030fbed1e1a7f74062425ada2c95680d24bad", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n LL |    let f = foo; // <-- No consistent type can be inferred for `f` here.\n LL |    let a = bar(f, x);\n    |            ^^^^^^^^^ argument requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/project-fn-ret-invariant.rs:39:12\n@@ -19,6 +21,10 @@ LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n ...\n LL |    let b = bar(f, y);\n    |            ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+help: `'a` and `'b` must be the same: replace one with the other\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f74d4ba73bf4e34ad32e63636e60cf1a6d1e7c81", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,6 +6,8 @@ LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n ...\n LL |    bar(foo, x)\n    |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "53b0dd691b8916679ae7703f89a327c8e93cbe0d", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -10,6 +10,8 @@ LL | |\n LL | |     (a, b)\n LL | | }\n    | |_^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "f28c42ce2d58f04dd875fc4049bbba24031c7287", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n    |                      lifetime `'a` defined here\n LL |     S { pointer: &mut *p.pointer }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "f816f27a89236d9af506ca48a3afa72579fe9c1f", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -37,6 +37,8 @@ LL | fn expect_bound_supply_named<'x>() {\n ...\n LL |     closure_expecting_bound(|x: &'x u32| {\n    |                              ^ requires that `'x` must outlive `'static`\n+   |\n+   = help: consider replacing `'x` with `'static`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9b0c987c0545dc0f650f294b8e120356f7b08437", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -11,6 +11,8 @@ LL |               gimme::<$t2>(None::<$t1>);\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n+   |\n+   = help: consider adding the following bound: `'x: 'y`\n \n error: lifetime may not live long enough\n   --> $DIR/hr-subtype.rs:39:13\n@@ -25,6 +27,8 @@ LL |               gimme::<$t1>(None::<$t2>);\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n+   |\n+   = help: consider adding the following bound: `'x: 'y`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "48558fad0051e84b8f38bb565c8b7f34bbdae2ef", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -11,6 +11,8 @@ LL |               gimme::<$t1>(None::<$t2>);\n LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n LL | |                             fn(&'y u32)) }\n    | |__________________________________________- in this macro invocation\n+   |\n+   = help: consider adding the following bound: `'x: 'y`\n \n error: aborting due to previous error\n "}, {"sha": "f1647d3d2e43be52594b4bbe73b6b6bd993517b7", "filename": "src/test/ui/hrtb/hrtb-perfect-forwarding.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-perfect-forwarding.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -58,6 +58,8 @@ LL | fn foo_hrtb_bar_not<'b,T>(mut t: T)\n ...\n LL |     foo_hrtb_bar_not(&mut t);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n+   |\n+   = help: consider replacing `'b` with `'static`\n \n warning: function cannot return without recursing\n   --> $DIR/hrtb-perfect-forwarding.rs:49:1"}, {"sha": "8e660d6814c43cb3f5dd9b8e777db688f2471e0a", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    |                              - `x` is a reference that is only valid in the function body\n LL |     static_val(x);\n    |     ^^^^^^^^^^^^^ `x` escapes the function body here\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "45c5142d93f2881fefc6e6ae40c4cdc94583a457", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -4,6 +4,7 @@ error: lifetime may not live long enough\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        -- lifetime `'a` defined here                   ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n    |\n+   = help: consider replacing `'a` with `'static`\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n    |\n LL | type E<'a, 'b> = impl Sized; + 'a"}, {"sha": "bb5a85aba9709573b0536e8ebf13ef0bab1fa580", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -19,6 +19,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             |\n    |             lifetime `'a` defined here\n    |\n+   = help: consider replacing `'a` with `'static`\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n@@ -31,6 +32,7 @@ LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n    |\n    = help: consider replacing `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:17:61\n@@ -39,6 +41,8 @@ LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32\n    |                          --  -- lifetime `'b` defined here  ^^^^^^^^^^^^^^^^ opaque type requires that `'b` must outlive `'a`\n    |                          |\n    |                          lifetime `'a` defined here\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:22:51"}, {"sha": "22f081b79f157b53b861445081e247582bd5fa35", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -19,6 +19,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    |\n    |                    lifetime `'a` defined here\n    |\n+   = help: consider replacing `'a` with `'static`\n help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {"}, {"sha": "db028e63a8244de84e323db4314c1473cd64c343", "filename": "src/test/ui/in-band-lifetimes/mismatched.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -14,6 +14,8 @@ LL | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y }\n    |             |           |\n    |             |           lifetime `'b` defined here\n    |             lifetime `'a` defined here\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1ebb0c6cf1e7b106ff35d004ca6a8bd1ddaf391c", "filename": "src/test/ui/issues/issue-10291.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,6 +6,8 @@ LL | fn test<'x>(x: &'x isize) {\n LL |     drop::<Box<dyn for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n LL |         x\n    |         ^ returning this value requires that `'x` must outlive `'static`\n+   |\n+   = help: consider replacing `'x` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "83f10c67d43a579169cc7b0e0a9b7feb14d3c56a", "filename": "src/test/ui/issues/issue-26217.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn bar<'a>() {\n    |        -- lifetime `'a` defined here\n LL |     foo::<&'a i32>();\n    |     ^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "a29dac4c9c87c3c8f73656d0c32531d187baf219", "filename": "src/test/ui/issues/issue-28848.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fissues%2Fissue-28848.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fissues%2Fissue-28848.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28848.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |            lifetime `'a` defined here\n LL |     Foo::<'a, 'b>::xmute(u)\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "359f91309d4f3dc52743f1ef1621114f632158ee", "filename": "src/test/ui/issues/issue-52213.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n LL |     match (&t,) {\n LL |         ((u,),) => u,\n    |                    ^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "5bf6d3382d2eb85c5c14515973a2e5b4a631fa5d", "filename": "src/test/ui/issues/issue-54943.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,6 +6,8 @@ LL | fn boo<'a>() {\n ...\n LL |     let x = foo::<&'a u32>();\n    |             ^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "baa0e6c29bfc448c97b25db67d06b35ee243031a", "filename": "src/test/ui/issues/issue-55796.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55796.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,6 +6,8 @@ LL | pub trait Graph<'a> {\n ...\n LL |         Box::new(self.out_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-55796.rs:21:9\n@@ -15,6 +17,8 @@ LL | pub trait Graph<'a> {\n ...\n LL |         Box::new(self.in_edges(u).map(|e| e.target()))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "60420973e1ee0359cfdba1b1d4d5e4539adae1b0", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,6 +6,8 @@ LL | fn test2<'a>(x: &'a Box<dyn Fn() + 'a>) {\n LL |     // but ref_obj will not, so warn.\n LL |     ref_obj(x)\n    |     ^^^^^^^^^^ `x` escapes the function body here\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/lifetime-bound-will-change-warning.rs:39:5\n@@ -15,6 +17,8 @@ LL | fn test2cc<'a>(x: &'a Box<dyn Fn() + 'a>) {\n LL |     // same as test2, but cross crate\n LL |     lib::ref_obj(x)\n    |     ^^^^^^^^^^^^^^^ `x` escapes the function body here\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "99fab4631a2164c70564d54f7397e98c32b9c759", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n LL |     let z = Ref { data: y.data };\n LL |     x.push(z);\n    |     ^^^^^^^^^ argument requires that `'c` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'c: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "52c5752f6ea1eb32c13110a19d67740e825e94af", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n ...\n LL |     a.push(b);\n    |     ^^^^^^^^^ argument requires that `'c` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'c: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "e90c81ee3e1af61bb4438ee0d5ed1b8eafd70a6f", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n ...\n LL |     Vec::push(a, b);\n    |     ^^^^^^^^^^^^^^^ argument requires that `'c` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'c: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "b3d0bc2b882f9907b21358fac8fb042122d30427", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n ...\n LL |     x.push(y);\n    |     ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "fbe98a4263ec1a797e0534cdcb803fddf46a4940", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n    |        lifetime `'a` defined here\n LL |     x.push(y);\n    |     ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "1e24032fc1ce26eece85a83f9e015737c46a5311", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n    |        lifetime `'a` defined here\n LL |     x.push(y);\n    |     ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "1ef479fcd4bc0566cec444bfb3c10a452e68a2e4", "filename": "src/test/ui/lub-if.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flub-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flub-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-if.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,6 +6,8 @@ LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n ...\n LL |         s\n    |         ^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/lub-if.rs:35:9\n@@ -15,6 +17,8 @@ LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n ...\n LL |         s\n    |         ^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ed551da54f55e3a68feb33a1dda9b6d96097070d", "filename": "src/test/ui/lub-match.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flub-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Flub-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-match.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,6 +6,8 @@ LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n ...\n LL |             s\n    |             ^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/lub-match.rs:39:13\n@@ -15,6 +17,8 @@ LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n ...\n LL |             s\n    |             ^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1658efa28bf307ff7661cbe1bd1df807758a8035", "filename": "src/test/ui/match/match-ref-mut-invariance.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n    |            -- lifetime `'a` defined here\n LL |         match self.0 { ref mut x => x }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "dc227a36566e6d68345cddd6c5340a2156704822", "filename": "src/test/ui/match/match-ref-mut-let-invariance.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n LL |         let ref mut x = self.0;\n LL |         x\n    |         ^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "d383dcca9c12765eb251ad8a196497e006ccd168", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -42,10 +42,8 @@ LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n ...\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "20b9144341c2ee3c4b7dea9405a2fcc9b8a0fd69", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -45,10 +45,8 @@ LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "7fe00271fc4d21d316c6897e06ae6096e0d95023", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -45,10 +45,8 @@ LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "7678f24381ec49132c54cc692747b76f67699ca1", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -42,10 +42,8 @@ LL | fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n ...\n LL |         demand_y(outlives1, outlives2, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "1fa3d01017af520d9c58826f475ff63f144e8d03", "filename": "src/test/ui/nll/closure-requirements/region-lbr-named-does-not-outlive-static.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-named-does-not-outlive-static.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,10 +5,8 @@ LL | fn foo<'a>(x: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     &*x\n    |     ^^^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "d0ba539253248f979e0c12bcb04ac78459251f18", "filename": "src/test/ui/nll/closure-requirements/region-lbr1-does-not-outlive-ebr2.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr1-does-not-outlive-ebr2.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,10 +7,8 @@ LL | fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> &'b u32 {\n    |        lifetime `'a` defined here\n LL |     &*x\n    |     ^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "7b83e4beaf38750ca8c487f0c25e3f7ca9d491e7", "filename": "src/test/ui/nll/issue-50716.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,6 +6,8 @@ LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n ...\n LL |     let _x = *s;\n    |              ^^ proving this value is `Sized` requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "dcf0338673483acd784d792129ac87099e490005", "filename": "src/test/ui/nll/issue-52113.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52113.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,10 +8,8 @@ LL | fn produce_err<'a, 'b: 'a>(data: &'b mut Vec<&'b u32>, value: &'a u32) -> i\n ...\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "df320aa0844add1238c5f6c604fc3ec007ca0bc6", "filename": "src/test/ui/nll/issue-55401.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,6 +6,8 @@ LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u\n LL |     let (ref y, _z): (&'a u32, u32) = (&22, 44);\n LL |     *y\n    |     ^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "5be4e56171c52adc333c3d12d3701118114958db", "filename": "src/test/ui/nll/issue-58299.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-58299.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,10 +6,8 @@ LL | fn foo<'a>(x: i32) {\n ...\n LL |         A::<'a>::X..=A::<'static>::X => (),\n    |         ^^^^^^^^^^ requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-58299.rs:24:27\n@@ -19,10 +17,8 @@ LL | fn bar<'a>(x: i32) {\n ...\n LL |         A::<'static>::X..=A::<'a>::X => (),\n    |                           ^^^^^^^^^^ requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "113e220e5137e7e64af2d345ebe06231d514cdc9", "filename": "src/test/ui/nll/mir_check_cast_closure.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_closure.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,10 +8,8 @@ LL | fn bar<'a, 'b>() -> fn(&'a u32, &'b u32) -> &'a u32 {\n LL |     let g: fn(_, _) -> _ = |_x, y| y;\n LL |     g\n    |     ^ returning this value requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "1722da8f343de48d6cba747140098d69a6d17cf5", "filename": "src/test/ui/nll/mir_check_cast_reify.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,10 +6,8 @@ LL | fn bar<'a>(x: &'a u32) -> &'static u32 {\n ...\n LL |     f(x)\n    |     ^^^^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "c87425ecfc0fa3b9b6345840227eea1c27bc8794", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,10 +6,8 @@ LL | fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n ...\n LL |     unsafe { g(input) }\n    |              ^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "cb7328d117984eba0bf1c6fa5f3c193835a6a649", "filename": "src/test/ui/nll/mir_check_cast_unsize.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,10 +5,8 @@ LL | fn bar<'a>(x: &'a u32) -> &'static dyn Debug {\n    |        -- lifetime `'a` defined here\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "f7603e29d488c701fd9f05f33fcc0e79c81091b2", "filename": "src/test/ui/nll/outlives-suggestion-simple.stderr", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Foutlives-suggestion-simple.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,10 +7,8 @@ LL | fn foo1<'a, 'b>(x: &'a usize) -> &'b usize {\n    |         lifetime `'a` defined here\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/outlives-suggestion-simple.rs:10:5\n@@ -19,10 +17,8 @@ LL | fn foo2<'a>(x: &'a usize) -> &'static usize {\n    |         -- lifetime `'a` defined here\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/outlives-suggestion-simple.rs:14:5\n@@ -33,6 +29,8 @@ LL | fn foo3<'a, 'b>(x: &'a usize, y: &'b usize) -> (&'b usize, &'a usize) {\n    |         lifetime `'a` defined here\n LL |     (x, y)\n    |     ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/outlives-suggestion-simple.rs:14:5\n@@ -43,10 +41,10 @@ LL | fn foo3<'a, 'b>(x: &'a usize, y: &'b usize) -> (&'b usize, &'a usize) {\n    |         lifetime `'a` defined here\n LL |     (x, y)\n    |     ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: `'a` and `'b` must be the same; replace one with the other\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+help: `'a` and `'b` must be the same: replace one with the other\n \n error: lifetime may not live long enough\n   --> $DIR/outlives-suggestion-simple.rs:22:5\n@@ -58,10 +56,8 @@ LL | fn foo4<'a, 'b, 'c>(x: &'a usize) -> (&'b usize, &'c usize) {\n ...\n LL |     (x, x)\n    |     ^^^^^^ returning this value requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/outlives-suggestion-simple.rs:31:9\n@@ -70,10 +66,8 @@ LL |     pub fn foo<'a>(x: &'a usize) -> Self {\n    |                -- lifetime `'a` defined here\n LL |         Foo { x }\n    |         ^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/outlives-suggestion-simple.rs:41:9\n@@ -84,10 +78,8 @@ LL |     pub fn get<'b>(&self) -> &'b usize {\n    |                -- lifetime `'b` defined here\n LL |         self.x\n    |         ^^^^^^ returning this value requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/outlives-suggestion-simple.rs:52:9\n@@ -98,10 +90,8 @@ LL |     fn get<'b>(&'b self) -> &'a i32 {\n    |            -- lifetime `'b` defined here\n LL |         self.x\n    |         ^^^^^^ returning this value requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/outlives-suggestion-simple.rs:73:9"}, {"sha": "7c5a6eecea1eafcfc3c68ea2a4040985c60b8268", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -50,10 +50,8 @@ LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:56:29\n@@ -108,10 +106,8 @@ LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:70:29"}, {"sha": "a2ba2e36edf42524bd53e6f183677675528a2b4e", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -41,10 +41,8 @@ LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:47:29\n@@ -90,10 +88,8 @@ LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:60:29"}, {"sha": "109edfec43c0e1bb42fa9526a0b58cd213de76d6", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -236,10 +236,8 @@ LL | fn two_regions<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:97:29"}, {"sha": "f15c2ffd0d7eb61d0b7a48fea3e2598691636c17", "filename": "src/test/ui/nll/ty-outlives/wf-unreachable.stderr", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fwf-unreachable.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,10 +6,8 @@ LL | fn uninit<'a>() {\n LL |     return;\n LL |     let x: &'static &'a ();\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:13:12\n@@ -19,10 +17,8 @@ LL | fn var_type<'a>() {\n LL |     return;\n LL |     let x: &'static &'a () = &&();\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:17:12\n@@ -31,10 +27,8 @@ LL | fn uninit_infer<'a>() {\n    |                 -- lifetime `'a` defined here\n LL |     let x: &'static &'a _;\n    |            ^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:23:12\n@@ -44,10 +38,8 @@ LL | fn infer<'a>() {\n LL |     return;\n LL |     let x: &'static &'a _ = &&();\n    |            ^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:28:12\n@@ -57,10 +49,8 @@ LL | fn uninit_no_var<'a>() {\n LL |     return;\n LL |     let _: &'static &'a ();\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:33:12\n@@ -70,10 +60,8 @@ LL | fn no_var<'a>() {\n LL |     return;\n LL |     let _: &'static &'a () = &&();\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:38:12\n@@ -83,10 +71,8 @@ LL | fn infer_no_var<'a>() {\n LL |     return;\n LL |     let _: &'static &'a _ = &&();\n    |            ^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-unreachable.rs:51:12\n@@ -96,10 +82,8 @@ LL | fn required_substs<'a>() {\n LL |     return;\n LL |     let _: C<'static, 'a, _> = C((), &(), &());\n    |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "39fd98f7151a000eb5f8490a71a63ad2d38ba2ef", "filename": "src/test/ui/nll/type-check-pointer-coercions.stderr", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-coercions.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,10 +7,8 @@ LL | fn shared_to_const<'a, 'b>(x: &&'a i32) -> *const &'b i32 {\n    |                    lifetime `'a` defined here\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:8:5\n@@ -21,10 +19,8 @@ LL | fn unique_to_const<'a, 'b>(x: &mut &'a i32) -> *const &'b i32 {\n    |                    lifetime `'a` defined here\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:13:5\n@@ -36,6 +32,8 @@ LL | fn unique_to_mut<'a, 'b>(x: &mut &'a i32) -> *mut &'b i32 {\n LL |     // Two errors because *mut is invariant\n LL |     x\n    |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:13:5\n@@ -47,10 +45,10 @@ LL | fn unique_to_mut<'a, 'b>(x: &mut &'a i32) -> *mut &'b i32 {\n LL |     // Two errors because *mut is invariant\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: `'b` and `'a` must be the same; replace one with the other\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+help: `'b` and `'a` must be the same: replace one with the other\n \n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:18:5\n@@ -61,10 +59,8 @@ LL | fn mut_to_const<'a, 'b>(x: *mut &'a i32) -> *const &'b i32 {\n    |                 lifetime `'a` defined here\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:24:5\n@@ -76,10 +72,8 @@ LL | fn array_elem<'a, 'b>(x: &'a i32) -> *const &'b i32 {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:30:5\n@@ -91,10 +85,8 @@ LL | fn array_coerce<'a, 'b>(x: &'a i32) -> *const [&'b i32; 3] {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-coercions.rs:36:5\n@@ -106,10 +98,8 @@ LL | fn nested_array<'a, 'b>(x: &'a i32) -> *const [&'b i32; 2] {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "f350b861eb6d2447c690d0852f9d4df910fc75ba", "filename": "src/test/ui/nll/type-check-pointer-comparisons.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn compare_const<'a, 'b>(x: *const &mut &'a i32, y: *const &mut &'b i32) {\n    |                  lifetime `'a` defined here\n LL |     x == y;\n    |     ^ requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-comparisons.rs:6:10\n@@ -17,10 +19,10 @@ LL | fn compare_const<'a, 'b>(x: *const &mut &'a i32, y: *const &mut &'b i32) {\n    |                  lifetime `'a` defined here\n LL |     x == y;\n    |          ^ requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: `'b` and `'a` must be the same; replace one with the other\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+help: `'a` and `'b` must be the same: replace one with the other\n \n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-comparisons.rs:12:5\n@@ -31,6 +33,8 @@ LL | fn compare_mut<'a, 'b>(x: *mut &'a i32, y: *mut &'b i32) {\n    |                lifetime `'a` defined here\n LL |     x == y;\n    |     ^ requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-comparisons.rs:12:10\n@@ -41,10 +45,10 @@ LL | fn compare_mut<'a, 'b>(x: *mut &'a i32, y: *mut &'b i32) {\n    |                lifetime `'a` defined here\n LL |     x == y;\n    |          ^ requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: `'a` and `'b` must be the same; replace one with the other\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+help: `'a` and `'b` must be the same: replace one with the other\n \n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-comparisons.rs:18:5\n@@ -55,6 +59,8 @@ LL | fn compare_fn_ptr<'a, 'b, 'c>(f: fn(&'c mut &'a i32), g: fn(&'c mut &'b i32\n    |                   lifetime `'a` defined here\n LL |     f == g;\n    |     ^ requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/type-check-pointer-comparisons.rs:18:10\n@@ -65,10 +71,10 @@ LL | fn compare_fn_ptr<'a, 'b, 'c>(f: fn(&'c mut &'a i32), g: fn(&'c mut &'b i32\n    |                   lifetime `'a` defined here\n LL |     f == g;\n    |          ^ requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: `'a` and `'b` must be the same; replace one with the other\n+   = help: consider adding the following bound: `'b: 'a`\n+\n+help: `'a` and `'b` must be the same: replace one with the other\n \n error: aborting due to 6 previous errors\n "}, {"sha": "e3e294106d168d26f0288d0042a5d459d1bc02ce", "filename": "src/test/ui/nll/user-annotations/closure-substs.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fclosure-substs.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,10 +6,8 @@ LL | fn foo<'a>() {\n ...\n LL |         return x;\n    |                ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/closure-substs.rs:15:16\n@@ -27,10 +25,8 @@ LL | fn bar<'a>() {\n ...\n LL |         b(x);\n    |         ^^^^ argument requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error[E0521]: borrowed data escapes outside of closure\n   --> $DIR/closure-substs.rs:29:9"}, {"sha": "e9a0b8173ceaaab471bec9f5bf60b9e6dcaf0f42", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-inherent-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-inherent-1.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     <Foo<'a>>::C\n    |     ^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "52ec36ef542cc46dbc153dc73acdc6c8b525e82c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "5f3212eb9aa349ea5ba3218ef54c5c7945b223c3", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     <() as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "490030d30f3171dd50d250ac224f9fae3a033386", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     <T as Foo<'a>>::C\n    |     ^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "5e687805c6fc359eb8d2cb49bc38c7e56c57390c", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-3.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-3.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n    |        -- lifetime `'a` defined here\n LL |     T::C\n    |     ^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "7b5646de775abb88fc2c05cbc4232329bc273464", "filename": "src/test/ui/nll/user-annotations/inherent-associated-constants.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Finherent-associated-constants.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,10 +5,8 @@ LL | fn non_wf_associated_const<'a>(x: i32) {\n    |                            -- lifetime `'a` defined here\n LL |     A::<'a>::IC;\n    |     ^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "97653b8c199c80d3b652986a02c627da45ff8813", "filename": "src/test/ui/nll/user-annotations/issue-54124.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-54124.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -15,10 +15,8 @@ LL | fn test<'a>() {\n    |         -- lifetime `'a` defined here\n LL |     let _:fn(&()) = |_:&'a ()| {};\n    |                      ^ requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f23ea9fdb5c3146a9d29e350408907f96a915cd3", "filename": "src/test/ui/nll/user-annotations/issue-55748-pat-types-constrain-bindings.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,10 +6,8 @@ LL | fn coupled_regions_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-55748-pat-types-constrain-bindings.rs:49:5\n@@ -19,10 +17,8 @@ LL | fn coupled_types_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-55748-pat-types-constrain-bindings.rs:62:5\n@@ -32,10 +28,8 @@ LL | fn coupled_wilds_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "426c57ef9c4e76e1bfa2ccfc687aea95cd1678a8", "filename": "src/test/ui/nll/user-annotations/issue-57731-ascibed-coupled-types.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-57731-ascibed-coupled-types.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,10 +6,8 @@ LL | fn coupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n LL |     let ((y, _z),) = ((s, _x),): (PairCoupledTypes<_>,);\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-57731-ascibed-coupled-types.rs:22:5\n@@ -19,10 +17,8 @@ LL | fn coupled_regions_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n LL |     let ((y, _z),) = ((s, _x),): (PairCoupledRegions<_>,);\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-57731-ascibed-coupled-types.rs:32:5\n@@ -32,10 +28,8 @@ LL | fn cast_coupled_wilds_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32\n LL |     let ((y, _z),) = ((s, _x),) as (PairCoupledTypes<_>,);\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/issue-57731-ascibed-coupled-types.rs:37:5\n@@ -45,10 +39,8 @@ LL | fn cast_coupled_regions_rhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u\n LL |     let ((y, _z),) = ((s, _x),) as (PairCoupledRegions<_>,);\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c2786f0e8cca2faa1d9143a46020a100904b9bf3", "filename": "src/test/ui/nll/user-annotations/patterns.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fpatterns.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -156,10 +156,8 @@ LL | fn static_to_a_to_static_through_variable<'a>(x: &'a u32) -> &'static u32 {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/patterns.rs:125:5\n@@ -169,10 +167,8 @@ LL | fn static_to_a_to_static_through_tuple<'a>(x: &'a u32) -> &'static u32 {\n ...\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/patterns.rs:130:5\n@@ -182,10 +178,8 @@ LL | fn static_to_a_to_static_through_struct<'a>(_x: &'a u32) -> &'static u32 {\n LL |     let Single { value: y }: Single<&'a u32> = Single { value: &22 };\n LL |     y\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/patterns.rs:134:18\n@@ -194,10 +188,8 @@ LL | fn a_to_static_then_static<'a>(x: &'a u32) -> &'static u32 {\n    |                            -- lifetime `'a` defined here\n LL |     let (y, _z): (&'static u32, u32) = (x, 44);\n    |                  ^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 19 previous errors\n "}, {"sha": "33bb1c519b16ea751b150efd98c8d8cda0f15228", "filename": "src/test/ui/nll/user-annotations/wf-self-type.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fwf-self-type.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,10 +7,8 @@ LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |            lifetime `'a` defined here\n LL |     Foo::xmute(u)\n    |     ^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "1badb7d753b6e9d7d936005d5ed267f6246b1b0d", "filename": "src/test/ui/nll/where_clauses_in_functions.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_functions.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,10 +7,8 @@ LL | fn bar<'a, 'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n    |        lifetime `'a` defined here\n LL |     foo(x, y)\n    |     ^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "2e990131e61de810b0041a90eda6d707e358c5b2", "filename": "src/test/ui/nll/where_clauses_in_structs.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fwhere_clauses_in_structs.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,10 +7,8 @@ LL | fn bar<'a, 'b>(x: Cell<&'a u32>, y: Cell<&'b u32>) {\n    |        lifetime `'a` defined here\n LL |     Foo { x, y };\n    |           ^ requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "900cdfca2443808edb96ca0db61339a2d04463d3", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn load3<'a,'b>(ss: &'a dyn SomeTrait) -> &'b dyn SomeTrait {\n ...\n LL |     ss\n    |     ^^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "defffe2b84b0d56bc0451ffd150d177b562414da", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-box-error.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn c<'a>(t: &'a Box<dyn Test+'a>, mut ss: SomeStruct<'a>) {\n    |      -- lifetime `'a` defined here\n LL |     ss.t = t;\n    |     ^^^^^^^^ assignment requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "8c28a7a011abaa13e67730d53b16648c0bfe1b31", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-struct-error.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn c<'a>(t: &'a MyBox<dyn Test+'a>, mut ss: SomeStruct<'a>) {\n    |      -- lifetime `'a` defined here\n LL |     ss.t = t;\n    |     ^^^^^^^^ assignment requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "d871eb5327d221352a25fe23bdbab8362ede6797", "filename": "src/test/ui/object-lifetime/object-lifetime-default-mybox.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn load1<'a,'b>(a: &'a MyBox<dyn SomeTrait>,\n ...\n LL |     a\n    |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error[E0521]: borrowed data escapes outside of function\n   --> $DIR/object-lifetime-default-mybox.rs:31:5\n@@ -16,6 +18,8 @@ LL | fn load2<'a>(ss: &MyBox<dyn SomeTrait + 'a>) -> MyBox<dyn SomeTrait + 'a> {\n    |              -- `ss` is a reference that is only valid in the function body\n LL |     load0(ss)\n    |     ^^^^^^^^^ `ss` escapes the function body here\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d941030d8247456392e0f01fe5ac1add6e8fa96d", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,6 +6,8 @@ LL | fn unify<'a>(x: Option<Invariant<'a>>, f: fn(Invariant<'a>)) {\n LL |     let bad = if x.is_some() {\n LL |         x.unwrap()\n    |         ^^^^^^^^^^ `x` escapes the function body here\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "db45a03ad18fb928d688222f0fe687fe87f52eec", "filename": "src/test/ui/regions/region-object-lifetime-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a dyn Foo) -> &'b () {\n    |                                          lifetime `'a` defined here\n LL |     x.borrowed()\n    |     ^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "fda66a2412ccb85ebb7c8a4c084c3ec34e198304", "filename": "src/test/ui/regions/region-object-lifetime-4.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (dyn Foo + 'b)) -> &'\n    |                                         lifetime `'a` defined here\n LL |     x.borrowed()\n    |     ^^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "767853d81480e8fcdb7d2f99ad0877cf02ac76ea", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -32,6 +32,8 @@ LL | fn d<'a,'b>(v: &'a [u8]) -> Box<dyn Foo+'b> {\n    |      lifetime `'a` defined here\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9bb385b0dcdc8e0c0801f5b9003619c2450cad20", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn with_assoc<'a,'b>() {\n ...\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "9bb385b0dcdc8e0c0801f5b9003619c2450cad20", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.nll.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,10 +8,8 @@ LL | fn with_assoc<'a,'b>() {\n ...\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "ca153b9d9b1d7d765cd499478c0d6c6ce932634d", "filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.nll.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn param_not_ok<'a>(x: &'a isize) {\n    |                 -- lifetime `'a` defined here\n LL |     assert_send::<&'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:26:5\n@@ -13,6 +15,8 @@ LL | fn param_not_ok1<'a>(_: &'a isize) {\n    |                  -- lifetime `'a` defined here\n LL |     assert_send::<&'a str>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:30:5\n@@ -21,6 +25,8 @@ LL | fn param_not_ok2<'a>(_: &'a isize) {\n    |                  -- lifetime `'a` defined here\n LL |     assert_send::<&'a [isize]>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:44:5\n@@ -29,6 +35,8 @@ LL | fn box_with_region_not_ok<'a>() {\n    |                           -- lifetime `'a` defined here\n LL |     assert_send::<Box<&'a isize>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:55:5\n@@ -37,6 +45,8 @@ LL | fn unsafe_ok2<'a>(_: &'a isize) {\n    |               -- lifetime `'a` defined here\n LL |     assert_send::<*const &'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-bounded-by-trait-requiring-static.rs:59:5\n@@ -45,6 +55,8 @@ LL | fn unsafe_ok3<'a>(_: &'a isize) {\n    |               -- lifetime `'a` defined here\n LL |     assert_send::<*mut &'a isize>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "47796e50a888f397df15677e81fe96c68f4f949f", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-cross-crate.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn call_bigger_region<'x, 'y>(a: Inv<'x>, b: Inv<'y>) {\n LL |     // Here the value provided for 'y is 'y, and hence 'y:'x does not hold.\n LL |     a.bigger_region(b)\n    |     ^^^^^^^^^^^^^^^^^^ argument requires that `'y` must outlive `'x`\n+   |\n+   = help: consider adding the following bound: `'y: 'x`\n \n error: aborting due to previous error\n "}, {"sha": "d352d119a70e85e2997fcff19d0d150a8ebd8b68", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn caller2<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n LL |     // Here the value provided for 'y is 'b, and hence 'b:'a does not hold.\n LL |     f.method(b);\n    |     ^^^^^^^^^^^ `b` escapes the function body here\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "2076772b59df432e3bd2d4933de876d7ba06bc1c", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn caller<'a>(x: &isize) {\n    |           -- lifetime `'a` defined here\n LL |     Foo.some_method::<&'a isize>();\n    |         ^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "dd702755c7e7b12d5641fbec311e523a3b45be98", "filename": "src/test/ui/regions/regions-bounds.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn a_fn1<'a,'b>(e: TupleStruct<'a>) -> TupleStruct<'b> {\n    |          lifetime `'a` defined here\n LL |     return e;\n    |            ^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-bounds.rs:13:12\n@@ -17,6 +19,8 @@ LL | fn a_fn3<'a,'b>(e: Struct<'a>) -> Struct<'b> {\n    |          lifetime `'a` defined here\n LL |     return e;\n    |            ^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "882faf4ece316a34fc1dd781d153d99f2a5d08ee", "filename": "src/test/ui/regions/regions-close-object-into-object-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |      -- lifetime `'a` defined here\n LL |     box B(&*v) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-2.rs:10:5"}, {"sha": "93ac17810dae2015fd6fc92fa598524e722badf7", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -13,6 +13,8 @@ LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |      -- lifetime `'a` defined here\n LL |     box B(&*v) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-4.rs:10:5"}, {"sha": "2fb9dcc4e9ec77c3c9b5f59c79b59aeaaeee8ab3", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn make_object_bad<'a,'b,'c,A:SomeTrait+'a+'b>(v: A) -> Box<dyn SomeTrait +\n LL |     // A outlives 'a AND 'b...but not 'c.\n LL |     box v as Box<dyn SomeTrait + 'a>\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'c`\n+   |\n+   = help: consider adding the following bound: `'a: 'c`\n \n error: aborting due to previous error\n "}, {"sha": "41d609b56d233a2967822f30f7f120e52dcaf668", "filename": "src/test/ui/regions/regions-creating-enums3.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn mk_add_bad1<'a,'b>(x: &'a Ast<'a>, y: &'b Ast<'b>) -> Ast<'a> {\n    |                lifetime `'a` defined here\n LL |     Ast::Add(x, y)\n    |     ^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "dda374c90d937be8cb67a9ac270de77432662c37", "filename": "src/test/ui/regions/regions-creating-enums4.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn mk_add_bad2<'a,'b>(x: &'a Ast<'a>, y: &'a Ast<'a>, z: &Ast) -> Ast<'b> {\n    |                lifetime `'a` defined here\n LL |     Ast::Add(x, y)\n    |     ^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "4957bcf3f737190aeebe753995923b2bf2410300", "filename": "src/test/ui/regions/regions-early-bound-error-method.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL |     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n    |           -- lifetime `'b` defined here\n LL |         g2.get()\n    |         ^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "eb4cd5ca72ea11e2fb3511f18e5127c932d0b33a", "filename": "src/test/ui/regions/regions-early-bound-error.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n    |        lifetime `'a` defined here\n LL |     g1.get()\n    |     ^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "f61f068a4861bb6addd395ada164514e173eae45", "filename": "src/test/ui/regions/regions-free-region-ordering-callee.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn ordering2<'a, 'b>(x: &'a &'b usize, y: &'a usize) -> &'b usize {\n LL |     // However, it is not safe to assume that 'b <= 'a\n LL |     &*y\n    |     ^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-free-region-ordering-callee.rs:18:12\n@@ -19,6 +21,8 @@ LL | fn ordering3<'a, 'b>(x: &'a usize, y: &'b usize) -> &'a &'b usize {\n LL |     // Do not infer an ordering from the return value.\n LL |     let z: &'b usize = &*x;\n    |            ^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0d4694a64d087c7f7502b550ef7f043ba1bacd81", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.migrate.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.migrate.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          lifetime `'a` defined here\n LL |     let z: Option<&'b &'a usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-free-region-ordering-caller.rs:17:12\n@@ -18,6 +20,8 @@ LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n LL |     let y: Paramd<'a> = Paramd { x: a };\n LL |     let z: Option<&'b Paramd<'a>> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-free-region-ordering-caller.rs:22:12\n@@ -28,6 +32,8 @@ LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          lifetime `'a` defined here\n LL |     let z: Option<&'a &'b usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0d4694a64d087c7f7502b550ef7f043ba1bacd81", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.nll.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,10 +7,8 @@ LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          lifetime `'a` defined here\n LL |     let z: Option<&'b &'a usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-free-region-ordering-caller.rs:17:12\n@@ -22,10 +20,8 @@ LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n LL |     let y: Paramd<'a> = Paramd { x: a };\n LL |     let z: Option<&'b Paramd<'a>> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'a: 'b`\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-free-region-ordering-caller.rs:22:12\n@@ -36,10 +32,8 @@ LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |          lifetime `'a` defined here\n LL |     let z: Option<&'a &'b usize> = None;\n    |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "106d3df2744359202f762f3fd19aae402a04e597", "filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -10,6 +10,8 @@ LL | |             Some(ref next) => next.get(),\n LL | |             None => &self.val\n LL | |         }\n    | |_________^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "94b80852d01242b86162ae834520c551f7e272f8", "filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn use_<'short,'long>(c: Contravariant<'short>,\n ...\n LL |     let _: Contravariant<'long> = c;\n    |            ^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+   |\n+   = help: consider adding the following bound: `'short: 'long`\n \n error: aborting due to previous error\n "}, {"sha": "f44a0fad59b2e58d40623e98591d2fbccaacd292", "filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn use_<'short,'long>(c: Covariant<'long>,\n ...\n LL |     let _: Covariant<'short> = c;\n    |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+   |\n+   = help: consider adding the following bound: `'short: 'long`\n \n error: aborting due to previous error\n "}, {"sha": "3256e3c0dd381af2f88cef5f2a662ab587fd707d", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here\n LL |     b_isize\n    |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n+   |\n+   = help: consider replacing `'r` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "991f9a287b9bfed04f553c1f1ec7aa1eec55582e", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here\n LL |     b_isize\n    |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n+   |\n+   = help: consider replacing `'r` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "2d62fb85b81eb842ad6c953705d5d037130656f0", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n    |                       -- lifetime `'r` defined here\n LL |     b_isize\n    |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n+   |\n+   = help: consider replacing `'r` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "fcc2ec31f3e02f96933e01b89874de9a4d69f975", "filename": "src/test/ui/regions/regions-infer-not-param.nll.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn take_direct<'a,'b>(p: Direct<'a>) -> Direct<'b> { p }\n    |                -- -- lifetime `'b` defined here      ^ returning this value requires that `'a` must outlive `'b`\n    |                |\n    |                lifetime `'a` defined here\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-infer-not-param.rs:19:63\n@@ -13,6 +15,8 @@ LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                   -- -- lifetime `'b` defined here            ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n    |                   |\n    |                   lifetime `'a` defined here\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-infer-not-param.rs:19:63\n@@ -21,6 +25,10 @@ LL | fn take_indirect2<'a,'b>(p: Indirect2<'a>) -> Indirect2<'b> { p }\n    |                   -- -- lifetime `'b` defined here            ^ returning this value requires that `'a` must outlive `'b`\n    |                   |\n    |                   lifetime `'a` defined here\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n+\n+help: `'b` and `'a` must be the same: replace one with the other\n \n error: aborting due to 3 previous errors\n "}, {"sha": "305a76815aca98ba6c50ee3a3b2641fdff203c93", "filename": "src/test/ui/regions/regions-nested-fns.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -45,6 +45,8 @@ LL | fn nested<'x>(x: &'x isize) {\n ...\n LL |         if false { return x; }\n    |                           ^ returning this value requires that `'x` must outlive `'static`\n+   |\n+   = help: consider replacing `'x` with `'static`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "29e92f33ec9148a97bc12a522b49883726195c17", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.migrate.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn with_assoc<'a,'b>() {\n ...\n LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-outlives-projection-container-hrtb.rs:50:12\n@@ -19,6 +21,8 @@ LL | fn with_assoc_sub<'a,'b>() {\n ...\n LL |     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "29e92f33ec9148a97bc12a522b49883726195c17", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.nll.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,10 +8,8 @@ LL | fn with_assoc<'a,'b>() {\n ...\n LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-outlives-projection-container-hrtb.rs:50:12\n@@ -23,10 +21,8 @@ LL | fn with_assoc_sub<'a,'b>() {\n ...\n LL |     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7035144302479f4a0578aa074b6d1d4607f78bca", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.migrate.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn with_assoc<'a,'b>() {\n ...\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "7035144302479f4a0578aa074b6d1d4607f78bca", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.nll.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,10 +8,8 @@ LL | fn with_assoc<'a,'b>() {\n ...\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: add bound `'b: 'a`\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to previous error\n "}, {"sha": "073a31900227e43e357b339d947df136eba08b9a", "filename": "src/test/ui/regions/regions-outlives-projection-container.nll.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn with_assoc<'a,'b>() {\n ...\n LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-outlives-projection-container.rs:54:13\n@@ -19,6 +21,8 @@ LL | fn without_assoc<'a,'b>() {\n ...\n LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-outlives-projection-container.rs:63:5\n@@ -30,6 +34,8 @@ LL | fn call_with_assoc<'a,'b>() {\n ...\n LL |     call::<&'a WithAssoc<TheType<'b>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-outlives-projection-container.rs:70:5\n@@ -41,6 +47,8 @@ LL | fn call_without_assoc<'a,'b>() {\n ...\n LL |     call::<&'a WithoutAssoc<TheType<'b>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "dc905d076bb7d5ce4f99e292833aa5b28d16732f", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn copy_borrowed_ptr<'a, 'b, 'c>(p: &'a mut &'b mut &'c mut isize) -> &'b m\n    |                      lifetime `'a` defined here\n LL |     &mut ***p\n    |     ^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "c98ec477417bd3e5ffc70426e184f8146ad681c4", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -7,6 +7,8 @@ LL | fn copy_borrowed_ptr<'a, 'b>(p: &'a mut &'b mut isize) -> &'b mut isize {\n    |                      lifetime `'a` defined here\n LL |     &mut **p\n    |     ^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: aborting due to previous error\n "}, {"sha": "6f2c75d2ebad8fdf81a9dfbed7049ff7a1ccea11", "filename": "src/test/ui/regions/regions-static-bound.migrate.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        -- lifetime `'a` defined here\n LL |     t\n    |     ^ returning this value requires that `'a` must outlive `'static`\n+   |\n+   = help: consider replacing `'a` with `'static`\n \n error[E0621]: explicit lifetime required in the type of `u`\n   --> $DIR/regions-static-bound.rs:14:5"}, {"sha": "6f2c75d2ebad8fdf81a9dfbed7049ff7a1ccea11", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,10 +5,8 @@ LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        -- lifetime `'a` defined here\n LL |     t\n    |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-help: the following changes may resolve your lifetime errors\n    |\n-   = help: replace `'a` with `'static`\n+   = help: consider replacing `'a` with `'static`\n \n error[E0621]: explicit lifetime required in the type of `u`\n   --> $DIR/regions-static-bound.rs:14:5"}, {"sha": "f92923a112584138fcfd35dd36c0da70356438b5", "filename": "src/test/ui/regions/regions-trait-object-subtyping.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn foo3<'a,'b>(x: &'a mut dyn Dummy) -> &'b mut dyn Dummy {\n LL |     // Without knowing 'a:'b, we can't coerce\n LL |     x\n    |     ^ returning this value requires that `'a` must outlive `'b`\n+   |\n+   = help: consider adding the following bound: `'a: 'b`\n \n error: lifetime may not live long enough\n   --> $DIR/regions-trait-object-subtyping.rs:22:5\n@@ -19,6 +21,8 @@ LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut dyn Dummy>) -> Wrapper<&'b mut dyn Dum\n LL |     // We can't coerce because it is packed in `Wrapper`\n LL |     x\n    |     ^ returning this value requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5352be430fbc57158a2daef5731049561ece29d1", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn use_<'short,'long>(c: S<'long, 'short>,\n ...\n LL |     let _: S<'long, 'long> = c;\n    |            ^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+   |\n+   = help: consider adding the following bound: `'short: 'long`\n \n error: aborting due to previous error\n "}, {"sha": "22c9b915bb9ee6574db1af52905795e9d2e0864b", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn use_<'short,'long>(c: Contravariant<'short>,\n ...\n LL |     let _: Contravariant<'long> = c;\n    |            ^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+   |\n+   = help: consider adding the following bound: `'short: 'long`\n \n error: aborting due to previous error\n "}, {"sha": "a07181ad553e6f4ccb3ca4804058691850573765", "filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn use_<'short,'long>(c: Covariant<'long>,\n ...\n LL |     let _: Covariant<'short> = c;\n    |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+   |\n+   = help: consider adding the following bound: `'short: 'long`\n \n error: aborting due to previous error\n "}, {"sha": "d51db99f81f7b32ed612428de1a9234c81a16e38", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn use_<'short,'long>(c: Invariant<'long>,\n ...\n LL |     let _: Invariant<'short> = c;\n    |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+   |\n+   = help: consider adding the following bound: `'short: 'long`\n \n error: aborting due to previous error\n "}, {"sha": "90388a1c51b1f7389fb15ba942c60ae39c372f42", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -6,6 +6,8 @@ LL | fn use_<'b>(c: Invariant<'b>) {\n ...\n LL |     let _: Invariant<'static> = c;\n    |            ^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'static`\n+   |\n+   = help: consider replacing `'b` with `'static`\n \n error: aborting due to previous error\n "}, {"sha": "be18737b5f13105b8d5b7b89d01a727c679a5fa2", "filename": "src/test/ui/variance/variance-btree-invariant-types.nll.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -5,6 +5,8 @@ LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &\n    |                     ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:7:5\n@@ -13,6 +15,8 @@ LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (\n    |                     ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:10:5\n@@ -21,6 +25,8 @@ LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &\n    |                        ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:13:5\n@@ -29,6 +35,8 @@ LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (\n    |                        ---- lifetime `'new` defined here\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:18:5\n@@ -38,6 +46,8 @@ LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n LL |                          -> OccupiedEntry<'a, &'new (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:22:5\n@@ -47,6 +57,8 @@ LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n LL |                          -> OccupiedEntry<'a, (), &'new ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:26:5\n@@ -56,6 +68,8 @@ LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n LL |                             -> OccupiedEntry<'a, &'static (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:30:5\n@@ -65,6 +79,8 @@ LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n LL |                             -> OccupiedEntry<'a, (), &'static ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:35:5\n@@ -74,6 +90,8 @@ LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n LL |                          -> VacantEntry<'a, &'new (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:39:5\n@@ -83,6 +101,8 @@ LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n LL |                          -> VacantEntry<'a, (), &'new ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:43:5\n@@ -92,6 +112,8 @@ LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n LL |                             -> VacantEntry<'a, &'static (), ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = help: consider replacing `'new` with `'static`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-btree-invariant-types.rs:47:5\n@@ -101,6 +123,8 @@ LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n LL |                             -> VacantEntry<'a, (), &'static ()> {\n LL |     v\n    |     ^ returning this value requires that `'new` must outlive `'static`\n+   |\n+   = help: consider replacing `'new` with `'static`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "1fcdfc4b5bbb234b63647de81e4cc5731deab9ce", "filename": "src/test/ui/variance/variance-cell-is-invariant.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn use_<'short,'long>(c: Foo<'short>,\n ...\n LL |     let _: Foo<'long> = c;\n    |            ^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n+   |\n+   = help: consider adding the following bound: `'short: 'long`\n \n error: aborting due to previous error\n "}, {"sha": "91d4fd2e971fa7c481106e9c116fdb99bf01c12c", "filename": "src/test/ui/variance/variance-contravariant-arg-object.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n ...\n LL |     v\n    |     ^ returning this value requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-contravariant-arg-object.rs:22:5\n@@ -19,6 +21,8 @@ LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n ...\n LL |     v\n    |     ^ returning this value requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6f136750ee13df4c253d7f54cc59b4e018316642", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn get_min_from_max<'min, 'max, G>()\n ...\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-contravariant-arg-trait-match.rs:21:5\n@@ -19,6 +21,8 @@ LL | fn get_max_from_min<'min, 'max, G>()\n ...\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fe08ce0b84d218e08a3c38c6feec48bf74d52493", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn get_min_from_max<'min, 'max, G>()\n ...\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-contravariant-self-trait-match.rs:22:5\n@@ -19,6 +21,8 @@ LL | fn get_max_from_min<'min, 'max, G>()\n ...\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "37fdea960be7ca2703c7680397537a65fae83ed2", "filename": "src/test/ui/variance/variance-covariant-arg-object.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n ...\n LL |     v\n    |     ^ returning this value requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-covariant-arg-object.rs:22:5\n@@ -19,6 +21,8 @@ LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n ...\n LL |     v\n    |     ^ returning this value requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a982a29d499c4f07672b1f27894ba5769fc24427", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn get_min_from_max<'min, 'max, G>()\n ...\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-covariant-arg-trait-match.rs:20:5\n@@ -19,6 +21,8 @@ LL | fn get_max_from_min<'min, 'max, G>()\n ...\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "81b25e38ec6d85729ca38674e8eeee121281dc4f", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn get_min_from_max<'min, 'max, G>()\n ...\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-covariant-self-trait-match.rs:20:5\n@@ -19,6 +21,8 @@ LL | fn get_max_from_min<'min, 'max, G>()\n ...\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f6265980af7dad0e5911b327a726627f4d676b25", "filename": "src/test/ui/variance/variance-invariant-arg-object.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn get_min_from_max<'min, 'max>(v: Box<dyn Get<&'max i32>>)\n ...\n LL |     v\n    |     ^ returning this value requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-invariant-arg-object.rs:18:5\n@@ -19,6 +21,8 @@ LL | fn get_max_from_min<'min, 'max, G>(v: Box<dyn Get<&'min i32>>)\n ...\n LL |     v\n    |     ^ returning this value requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2909e81fcbf767e5c6793c3c43be90377b9b03bf", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn get_min_from_max<'min, 'max, G>()\n ...\n LL |     impls_get::<G,&'min i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-invariant-arg-trait-match.rs:16:5\n@@ -19,6 +21,8 @@ LL | fn get_max_from_min<'min, 'max, G>()\n ...\n LL |     impls_get::<G,&'max i32>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "01b2c8803ae7248a5af1f19e01ab5806a5f33aaf", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn get_min_from_max<'min, 'max, G>()\n ...\n LL |     impls_get::<&'min G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-invariant-self-trait-match.rs:16:5\n@@ -19,6 +21,8 @@ LL | fn get_max_from_min<'min, 'max, G>()\n ...\n LL |     impls_get::<&'max G>();\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eddd4b217c088447889437631455e4327b238f73", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n ...\n LL |     v\n    |     ^ returning this value requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: aborting due to previous error\n "}, {"sha": "a86c1b93a73b885afb4f6818dc672d2e8ecef735", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n ...\n LL |     v\n    |     ^ returning this value requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: aborting due to previous error\n "}, {"sha": "385d83adaf830b5898b42c2bc19d41277dd3af94", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.nll.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n ...\n LL |     v\n    |     ^ returning this value requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: lifetime may not live long enough\n   --> $DIR/variance-use-invariant-struct-1.rs:19:5\n@@ -19,6 +21,8 @@ LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n ...\n LL |     v\n    |     ^ returning this value requires that `'min` must outlive `'max`\n+   |\n+   = help: consider adding the following bound: `'min: 'max`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d031a68a51d9c7f82d4f8b66b3e5b03216e9931a", "filename": "src/test/ui/wf/wf-static-method.nll.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cba0761e5f3677b90390fe7aee1eeda684296658/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr?ref=cba0761e5f3677b90390fe7aee1eeda684296658", "patch": "@@ -8,6 +8,8 @@ LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n ...\n LL |         u\n    |         ^ returning this value requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-static-method.rs:26:18\n@@ -19,6 +21,8 @@ LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n ...\n LL |         let me = Self::make_me();\n    |                  ^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-static-method.rs:33:9\n@@ -30,6 +34,8 @@ LL | impl<'a, 'b> Evil<'a, 'b> {\n LL |     fn inherent_evil(u: &'b u32) -> &'a u32 {\n LL |         u\n    |         ^ returning this value requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-static-method.rs:41:5\n@@ -40,6 +46,8 @@ LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |         lifetime `'a` defined here\n LL |     <()>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-static-method.rs:45:5\n@@ -50,6 +58,8 @@ LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  lifetime `'a` defined here\n LL |     <IndirectEvil>::static_evil(b)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: lifetime may not live long enough\n   --> $DIR/wf-static-method.rs:50:5\n@@ -60,6 +70,8 @@ LL | fn inherent_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n    |                  lifetime `'a` defined here\n LL |     <Evil>::inherent_evil(b) // bug? shouldn't this be an error\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n \n error: aborting due to 6 previous errors\n "}]}