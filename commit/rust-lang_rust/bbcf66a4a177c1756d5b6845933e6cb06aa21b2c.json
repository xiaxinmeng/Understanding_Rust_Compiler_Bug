{"sha": "bbcf66a4a177c1756d5b6845933e6cb06aa21b2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiY2Y2NmE0YTE3N2MxNzU2ZDViNjg0NTkzM2U2Y2IwNmFhMjFiMmM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-10-15T23:07:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-15T23:07:53Z"}, "message": "Rollup merge of #65389 - ecstatic-morse:zero-sized-array-no-drop, r=eddyb\n\nReturn `false` from `needs_drop` for all zero-sized arrays.\n\nResolves #65348.\n\nThis changes the result of the `needs_drop` query from `true` to `false` for types such as `[Box<i32>; 0]`. I believe this change to be sound because a zero-sized array can never actually hold a value. This is an elegant way of resolving #65348 and #64945, but obviously it has much broader implications.", "tree": {"sha": "e8afbeeb22cc0a0ddc3e088dadfd0aa5150d35e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8afbeeb22cc0a0ddc3e088dadfd0aa5150d35e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbcf66a4a177c1756d5b6845933e6cb06aa21b2c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdplFKCRBK7hj4Ov3rIwAAdHIIAAP/KqP3sJ2O2kOUVEkqWmMW\niAV7esfxWAMnOGd/LysTq/7sYUgrqZjf5bhTsJ8oagRmZ+yop5ufuRcm51gdNdkl\nvs7Aj64cBL0h/ZJO7V9bUbHB9QOMxg8Ms2qbi57elK0kp7v3SYBIuleMCLQfU3xH\nO5ZsqY1ZupsyfHB7hIkJzs013nExx5Qdiq9mywsGMHKHK8wGCUO/D/zjUPSDasjw\nfheFwC+Av3qgB3Wsc2EOVI1yepSNYF8SFt++o+TTkLOw5lQTsfVWywrG9UId4l/5\nsutm8WEKSVQa45xMdJ6AaFb2p4g6bm685dXCZAAByWrc2Yzu5YAGZgPFWtoRDIs=\n=n26K\n-----END PGP SIGNATURE-----\n", "payload": "tree e8afbeeb22cc0a0ddc3e088dadfd0aa5150d35e9\nparent 820fb7ccbf2fa6116ce09a178b2deb9e9b736704\nparent c08a8713381ed67caea826a793145240cd873081\nauthor Tyler Mandry <tmandry@gmail.com> 1571180873 -0700\ncommitter GitHub <noreply@github.com> 1571180873 -0700\n\nRollup merge of #65389 - ecstatic-morse:zero-sized-array-no-drop, r=eddyb\n\nReturn `false` from `needs_drop` for all zero-sized arrays.\n\nResolves #65348.\n\nThis changes the result of the `needs_drop` query from `true` to `false` for types such as `[Box<i32>; 0]`. I believe this change to be sound because a zero-sized array can never actually hold a value. This is an elegant way of resolving #65348 and #64945, but obviously it has much broader implications.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbcf66a4a177c1756d5b6845933e6cb06aa21b2c", "html_url": "https://github.com/rust-lang/rust/commit/bbcf66a4a177c1756d5b6845933e6cb06aa21b2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbcf66a4a177c1756d5b6845933e6cb06aa21b2c/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "820fb7ccbf2fa6116ce09a178b2deb9e9b736704", "url": "https://api.github.com/repos/rust-lang/rust/commits/820fb7ccbf2fa6116ce09a178b2deb9e9b736704", "html_url": "https://github.com/rust-lang/rust/commit/820fb7ccbf2fa6116ce09a178b2deb9e9b736704"}, {"sha": "c08a8713381ed67caea826a793145240cd873081", "url": "https://api.github.com/repos/rust-lang/rust/commits/c08a8713381ed67caea826a793145240cd873081", "html_url": "https://github.com/rust-lang/rust/commit/c08a8713381ed67caea826a793145240cd873081"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "e1eab2c6579e1892df943f0629e79e34541b7220", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf66a4a177c1756d5b6845933e6cb06aa21b2c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf66a4a177c1756d5b6845933e6cb06aa21b2c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=bbcf66a4a177c1756d5b6845933e6cb06aa21b2c", "patch": "@@ -1109,6 +1109,9 @@ fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>\n \n         ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n \n+        // Zero-length arrays never contain anything to drop.\n+        ty::Array(_, len) if len.try_eval_usize(tcx, param_env) == Some(0) => false,\n+\n         // Structural recursion.\n         ty::Array(ty, _) | ty::Slice(ty) => needs_drop(ty),\n "}, {"sha": "bc09e327179268e12f351bae0c8030252497fee5", "filename": "src/librustc_mir/dataflow/impls/indirect_mutation.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf66a4a177c1756d5b6845933e6cb06aa21b2c/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf66a4a177c1756d5b6845933e6cb06aa21b2c/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs?ref=bbcf66a4a177c1756d5b6845933e6cb06aa21b2c", "patch": "@@ -104,25 +104,16 @@ impl<'tcx> TransferFunction<'_, '_, 'tcx> {\n         kind: mir::BorrowKind,\n         borrowed_place: &mir::Place<'tcx>,\n     ) -> bool {\n-        let borrowed_ty = borrowed_place.ty(self.body, self.tcx).ty;\n-\n-        // Zero-sized types cannot be mutated, since there is nothing inside to mutate.\n-        //\n-        // FIXME: For now, we only exempt arrays of length zero. We need to carefully\n-        // consider the effects before extending this to all ZSTs.\n-        if let ty::Array(_, len) = borrowed_ty.kind {\n-            if len.try_eval_usize(self.tcx, self.param_env) == Some(0) {\n-                return false;\n-            }\n-        }\n-\n         match kind {\n             mir::BorrowKind::Mut { .. } => true,\n \n             | mir::BorrowKind::Shared\n             | mir::BorrowKind::Shallow\n             | mir::BorrowKind::Unique\n-            => !borrowed_ty.is_freeze(self.tcx, self.param_env, DUMMY_SP),\n+            => !borrowed_place\n+                .ty(self.body, self.tcx)\n+                .ty\n+                .is_freeze(self.tcx, self.param_env, DUMMY_SP),\n         }\n     }\n }"}, {"sha": "5eafa831d63174bfedcfd993a3032cbc7441ed5d", "filename": "src/test/ui/consts/issue-65348.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bbcf66a4a177c1756d5b6845933e6cb06aa21b2c/src%2Ftest%2Fui%2Fconsts%2Fissue-65348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbcf66a4a177c1756d5b6845933e6cb06aa21b2c/src%2Ftest%2Fui%2Fconsts%2Fissue-65348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-65348.rs?ref=bbcf66a4a177c1756d5b6845933e6cb06aa21b2c", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+struct Generic<T>(T);\n+\n+impl<T> Generic<T> {\n+    const ARRAY: [T; 0] = [];\n+    const NEWTYPE_ARRAY: Generic<[T; 0]> = Generic([]);\n+    const ARRAY_FIELD: Generic<(i32, [T; 0])> = Generic((0, []));\n+}\n+\n+pub const fn array<T>() ->  &'static T {\n+    &Generic::<T>::ARRAY[0]\n+}\n+\n+pub const fn newtype_array<T>() ->  &'static T {\n+    &Generic::<T>::NEWTYPE_ARRAY.0[0]\n+}\n+\n+pub const fn array_field<T>() ->  &'static T {\n+    &(Generic::<T>::ARRAY_FIELD.0).1[0]\n+}\n+\n+fn main() {}"}]}