{"sha": "96bbb0d67eee9cbe8565afd8b56d537c5937dd62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YmJiMGQ2N2VlZTljYmU4NTY1YWZkOGI1NmQ1MzdjNTkzN2RkNjI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-30T19:53:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-05T18:32:01Z"}, "message": "Account for `impl Trait`\n\nAddress #49287", "tree": {"sha": "9dd81fb19e6b560dda5c8fe68aac70e72eb29dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dd81fb19e6b560dda5c8fe68aac70e72eb29dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96bbb0d67eee9cbe8565afd8b56d537c5937dd62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96bbb0d67eee9cbe8565afd8b56d537c5937dd62", "html_url": "https://github.com/rust-lang/rust/commit/96bbb0d67eee9cbe8565afd8b56d537c5937dd62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96bbb0d67eee9cbe8565afd8b56d537c5937dd62/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1beac2b774fa7081ad22f9856ebb6bb9d04297fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1beac2b774fa7081ad22f9856ebb6bb9d04297fb", "html_url": "https://github.com/rust-lang/rust/commit/1beac2b774fa7081ad22f9856ebb6bb9d04297fb"}], "stats": {"total": 105, "additions": 71, "deletions": 34}, "files": [{"sha": "075dca8f01d7bdabeaf1cb006b09d22a3310b7e3", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 55, "deletions": 34, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/96bbb0d67eee9cbe8565afd8b56d537c5937dd62/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bbb0d67eee9cbe8565afd8b56d537c5937dd62/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=96bbb0d67eee9cbe8565afd8b56d537c5937dd62", "patch": "@@ -1519,9 +1519,21 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n         for missing in &self.missing_named_lifetime_spots {\n             match missing {\n                 MissingLifetimeSpot::Generics(generics) => {\n-                    let (span, sugg) = match &generics.params {\n-                        [] => (generics.span, format!(\"<{}>\", lifetime_ref)),\n-                        [param, ..] => (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref)),\n+                    let (span, sugg) = if let Some(param) = generics\n+                        .params\n+                        .iter()\n+                        .filter(|p| match p.kind {\n+                            hir::GenericParamKind::Type {\n+                                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+                                ..\n+                            } => false,\n+                            _ => true,\n+                        })\n+                        .next()\n+                    {\n+                        (param.span.shrink_to_lo(), format!(\"{}, \", lifetime_ref))\n+                    } else {\n+                        (generics.span, format!(\"<{}>\", lifetime_ref))\n                     };\n                     err.span_suggestion(\n                         span,\n@@ -1592,20 +1604,28 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                     Applicability::MaybeIncorrect,\n                 );\n             };\n-            let suggest_new = |err: &mut DiagnosticBuilder<'_>, sugg: &str| {\n-                err.span_label(span, \"expected named lifetime parameter\");\n-\n-                for missing in self.missing_named_lifetime_spots.iter().rev() {\n-                    let mut introduce_suggestion = vec![];\n-                    let msg;\n-                    let should_break;\n-                    introduce_suggestion.push(match missing {\n+            let suggest_new =\n+                |err: &mut DiagnosticBuilder<'_>, sugg: &str| {\n+                    err.span_label(span, \"expected named lifetime parameter\");\n+\n+                    for missing in self.missing_named_lifetime_spots.iter().rev() {\n+                        let mut introduce_suggestion = vec![];\n+                        let msg;\n+                        let should_break;\n+                        introduce_suggestion.push(match missing {\n                         MissingLifetimeSpot::Generics(generics) => {\n                             msg = \"consider introducing a named lifetime parameter\".to_string();\n                             should_break = true;\n-                            match &generics.params {\n-                                [] => (generics.span, \"<'a>\".to_string()),\n-                                [param, ..] => (param.span.shrink_to_lo(), \"'a, \".to_string()),\n+                            if let Some(param) = generics.params.iter().filter(|p| match p.kind {\n+                                hir::GenericParamKind::Type {\n+                                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+                                    ..\n+                                } => false,\n+                                _ => true,\n+                            }).next() {\n+                                (param.span.shrink_to_lo(), \"'a, \".to_string())\n+                            } else {\n+                                (generics.span, \"<'a>\".to_string())\n                             }\n                         }\n                         MissingLifetimeSpot::HigherRanked { span, span_type } => {\n@@ -1621,29 +1641,30 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                             (*span, span_type.suggestion(\"'a\"))\n                         }\n                     });\n-                    for param in params {\n-                        if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(param.span)\n-                        {\n-                            if snippet.starts_with(\"&\") && !snippet.starts_with(\"&'\") {\n-                                introduce_suggestion\n-                                    .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n-                            } else if snippet.starts_with(\"&'_ \") {\n-                                introduce_suggestion\n-                                    .push((param.span, format!(\"&'a {}\", &snippet[4..])));\n+                        for param in params {\n+                            if let Ok(snippet) =\n+                                self.tcx.sess.source_map().span_to_snippet(param.span)\n+                            {\n+                                if snippet.starts_with(\"&\") && !snippet.starts_with(\"&'\") {\n+                                    introduce_suggestion\n+                                        .push((param.span, format!(\"&'a {}\", &snippet[1..])));\n+                                } else if snippet.starts_with(\"&'_ \") {\n+                                    introduce_suggestion\n+                                        .push((param.span, format!(\"&'a {}\", &snippet[4..])));\n+                                }\n                             }\n                         }\n+                        introduce_suggestion.push((span, sugg.to_string()));\n+                        err.multipart_suggestion(\n+                            &msg,\n+                            introduce_suggestion,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        if should_break {\n+                            break;\n+                        }\n                     }\n-                    introduce_suggestion.push((span, sugg.to_string()));\n-                    err.multipart_suggestion(\n-                        &msg,\n-                        introduce_suggestion,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                    if should_break {\n-                        break;\n-                    }\n-                }\n-            };\n+                };\n \n             match (\n                 lifetime_names.len(),"}, {"sha": "22dc448c97ff0f13ac13f24b024951af2a68779c", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96bbb0d67eee9cbe8565afd8b56d537c5937dd62/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bbb0d67eee9cbe8565afd8b56d537c5937dd62/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.rs?ref=96bbb0d67eee9cbe8565afd8b56d537c5937dd62", "patch": "@@ -0,0 +1,2 @@\n+fn f(_: impl Iterator<Item = &'_ ()>) {} //~ ERROR missing lifetime specifier\n+fn main() {}"}, {"sha": "e31f25ab60304627e30e05219df1c00cdee324dd", "filename": "src/test/ui/suggestions/impl-trait-missing-lifetime.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/96bbb0d67eee9cbe8565afd8b56d537c5937dd62/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96bbb0d67eee9cbe8565afd8b56d537c5937dd62/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-missing-lifetime.stderr?ref=96bbb0d67eee9cbe8565afd8b56d537c5937dd62", "patch": "@@ -0,0 +1,14 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/impl-trait-missing-lifetime.rs:1:31\n+   |\n+LL | fn f(_: impl Iterator<Item = &'_ ()>) {}\n+   |                               ^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL | fn f<'a>(_: impl Iterator<Item = &'a ()>) {}\n+   |     ^^^^                          ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}]}