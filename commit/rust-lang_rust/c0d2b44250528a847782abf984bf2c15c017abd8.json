{"sha": "c0d2b44250528a847782abf984bf2c15c017abd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwZDJiNDQyNTA1MjhhODQ3NzgyYWJmOTg0YmYyYzE1YzAxN2FiZDg=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-08-26T16:44:46Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2021-08-26T16:44:46Z"}, "message": "fix: correctly complete macro call if cursor at `!`", "tree": {"sha": "e7c400a33a97406f559a0bb95f0fbf8255f99120", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7c400a33a97406f559a0bb95f0fbf8255f99120"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0d2b44250528a847782abf984bf2c15c017abd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d2b44250528a847782abf984bf2c15c017abd8", "html_url": "https://github.com/rust-lang/rust/commit/c0d2b44250528a847782abf984bf2c15c017abd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0d2b44250528a847782abf984bf2c15c017abd8/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55d4813561e36aa96fcff7fc4bde6ccb675fe115", "url": "https://api.github.com/repos/rust-lang/rust/commits/55d4813561e36aa96fcff7fc4bde6ccb675fe115", "html_url": "https://github.com/rust-lang/rust/commit/55d4813561e36aa96fcff7fc4bde6ccb675fe115"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "8d421fc78d783791dcf032f6556bcf47fcfa5600", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c0d2b44250528a847782abf984bf2c15c017abd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d2b44250528a847782abf984bf2c15c017abd8/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=c0d2b44250528a847782abf984bf2c15c017abd8", "patch": "@@ -304,4 +304,31 @@ pub mod prelude {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn completes_macro_call_if_cursor_at_bang_token() {\n+        // Regression test for https://github.com/rust-analyzer/rust-analyzer/issues/9904\n+        cov_mark::check!(completes_macro_call_if_cursor_at_bang_token);\n+        check_edit(\n+            \"foo!\",\n+            r#\"\n+macro_rules! foo {\n+    () => {}\n+}\n+\n+fn main() {\n+    foo!$0\n+}\n+\"#,\n+            r#\"\n+macro_rules! foo {\n+    () => {}\n+}\n+\n+fn main() {\n+    foo!($0)\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "d9024157ce458e826a1e41c7f557859a04b1419d", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c0d2b44250528a847782abf984bf2c15c017abd8/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d2b44250528a847782abf984bf2c15c017abd8/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=c0d2b44250528a847782abf984bf2c15c017abd8", "patch": "@@ -236,14 +236,21 @@ impl<'a> CompletionContext<'a> {\n         let kind = self.token.kind();\n         if kind == IDENT || kind == LIFETIME_IDENT || kind == UNDERSCORE || kind.is_keyword() {\n             cov_mark::hit!(completes_if_prefix_is_keyword);\n-            self.original_token.text_range()\n+            return self.original_token.text_range();\n         } else if kind == CHAR {\n             // assume we are completing a lifetime but the user has only typed the '\n             cov_mark::hit!(completes_if_lifetime_without_idents);\n-            TextRange::at(self.original_token.text_range().start(), TextSize::from(1))\n-        } else {\n-            TextRange::empty(self.position.offset)\n+            return TextRange::at(self.original_token.text_range().start(), TextSize::from(1));\n+        } else if kind == BANG {\n+            if let Some(n) = self.token.parent() {\n+                if n.kind() == SyntaxKind::MACRO_CALL {\n+                    cov_mark::hit!(completes_macro_call_if_cursor_at_bang_token);\n+                    return n.text_range();\n+                }\n+            }\n         }\n+\n+        TextRange::empty(self.position.offset)\n     }\n \n     pub(crate) fn previous_token_is(&self, kind: SyntaxKind) -> bool {"}]}