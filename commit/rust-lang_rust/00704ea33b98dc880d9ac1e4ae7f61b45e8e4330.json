{"sha": "00704ea33b98dc880d9ac1e4ae7f61b45e8e4330", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNzA0ZWEzM2I5OGRjODgwZDlhYzFlNGFlN2Y2MWI0NWU4ZTQzMzA=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-05-19T20:32:51Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-05-28T19:42:21Z"}, "message": "Add patterns to MacResult", "tree": {"sha": "0049887c8ffe7cd42dade72209ac48cb5c25fb63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0049887c8ffe7cd42dade72209ac48cb5c25fb63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00704ea33b98dc880d9ac1e4ae7f61b45e8e4330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00704ea33b98dc880d9ac1e4ae7f61b45e8e4330", "html_url": "https://github.com/rust-lang/rust/commit/00704ea33b98dc880d9ac1e4ae7f61b45e8e4330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00704ea33b98dc880d9ac1e4ae7f61b45e8e4330/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fdd0e4b05979a0a01ca6c14e0510880d320250c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fdd0e4b05979a0a01ca6c14e0510880d320250c", "html_url": "https://github.com/rust-lang/rust/commit/5fdd0e4b05979a0a01ca6c14e0510880d320250c"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "e4c7fbb1debdda208b878b4c5f356c1f778dcc21", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/00704ea33b98dc880d9ac1e4ae7f61b45e8e4330/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00704ea33b98dc880d9ac1e4ae7f61b45e8e4330/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=00704ea33b98dc880d9ac1e4ae7f61b45e8e4330", "patch": "@@ -114,6 +114,10 @@ pub trait MacResult {\n     fn make_items(&self) -> Option<SmallVector<@ast::Item>> {\n         None\n     }\n+    /// Create a pattern.\n+    fn make_pat(&self) -> Option<@ast::Pat> {\n+        None\n+    }\n \n     /// Create a statement.\n     ///\n@@ -139,6 +143,20 @@ impl MacResult for MacExpr {\n         Some(self.e)\n     }\n }\n+/// A convenience type for macros that return a single pattern.\n+pub struct MacPat {\n+    p: @ast::Pat\n+}\n+impl MacPat {\n+    pub fn new(p: @ast::Pat) -> Box<MacResult> {\n+        box MacPat { p: p } as Box<MacResult>\n+    }\n+}\n+impl MacResult for MacPat {\n+    fn make_pat(&self) -> Option<@ast::Pat> {\n+        Some(self.p)\n+    }\n+}\n /// A convenience type for macros that return a single item.\n pub struct MacItem {\n     i: @ast::Item\n@@ -194,12 +212,24 @@ impl DummyResult {\n             span: sp,\n         }\n     }\n+\n+    /// A plain dummy pattern.\n+    pub fn raw_pat(sp: Span) -> @ast::Pat {\n+        @ast::Pat {\n+            id: ast::DUMMY_NODE_ID,\n+            node: ast::PatWild,\n+            span: sp,\n+        }\n+    }\n }\n \n impl MacResult for DummyResult {\n     fn make_expr(&self) -> Option<@ast::Expr> {\n         Some(DummyResult::raw_expr(self.span))\n     }\n+    fn make_pat(&self) -> Option<@ast::Pat> {\n+        Some(DummyResult::raw_pat(self.span))\n+    }\n     fn make_items(&self) -> Option<SmallVector<@ast::Item>> {\n         if self.expr_only {\n             None"}, {"sha": "c69e5f9ba0f11ec8651669c64e57a9035cdaea13", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00704ea33b98dc880d9ac1e4ae7f61b45e8e4330/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00704ea33b98dc880d9ac1e4ae7f61b45e8e4330/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=00704ea33b98dc880d9ac1e4ae7f61b45e8e4330", "patch": "@@ -63,6 +63,11 @@ impl<'a> MacResult for ParserAnyMacro<'a> {\n         self.ensure_complete_parse(true);\n         Some(ret)\n     }\n+    fn make_pat(&self) -> Option<@ast::Pat> {\n+        let ret = self.parser.borrow_mut().parse_pat();\n+        self.ensure_complete_parse(false);\n+        Some(ret)\n+    }\n     fn make_items(&self) -> Option<SmallVector<@ast::Item>> {\n         let mut ret = SmallVector::zero();\n         loop {"}]}