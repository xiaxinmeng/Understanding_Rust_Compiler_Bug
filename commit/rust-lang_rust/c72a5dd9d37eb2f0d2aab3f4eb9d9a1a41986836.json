{"sha": "c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MmE1ZGQ5ZDM3ZWIyZjBkMmFhYjNmNGViOWQ5YTFhNDE5ODY4MzY=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-06-28T00:11:04Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-06-28T00:11:29Z"}, "message": "Rename the lint to clashing_extern_declarations.\n\nAlso, run RustFmt on the clashing_extern_fn test case and update\nstderrs.", "tree": {"sha": "90d08947ec4634b24542bb40f983c7fe77337ff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90d08947ec4634b24542bb40f983c7fe77337ff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "html_url": "https://github.com/rust-lang/rust/commit/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "394e1b40d264aa6928811919c1124fa248e7d802", "url": "https://api.github.com/repos/rust-lang/rust/commits/394e1b40d264aa6928811919c1124fa248e7d802", "html_url": "https://github.com/rust-lang/rust/commit/394e1b40d264aa6928811919c1124fa248e7d802"}], "stats": {"total": 155, "additions": 91, "deletions": 64}, "files": [{"sha": "15466ce94a82e08d3be57fb878e099c3518f7f45", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "patch": "@@ -279,9 +279,9 @@ pub mod primitive;\n // crate uses the this crate as its libcore.\n #[path = \"../stdarch/crates/core_arch/src/mod.rs\"]\n #[allow(missing_docs, missing_debug_implementations, dead_code, unused_imports)]\n-// FIXME: This annotation should be moved into rust-lang/stdarch after clashing_extern_decl is\n+// FIXME: This annotation should be moved into rust-lang/stdarch after clashing_extern_declarations is\n // merged. It currently cannot because bootstrap fails as the lint hasn't been defined yet.\n-#[cfg_attr(not(bootstrap), allow(clashing_extern_decl))]\n+#[cfg_attr(not(bootstrap), allow(clashing_extern_declarations))]\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]\n mod core_arch;\n "}, {"sha": "36d2954ac6ef779a31abcb1e1d8fe6ed796ed4d1", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "patch": "@@ -2055,12 +2055,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n }\n \n declare_lint! {\n-    pub CLASHING_EXTERN_DECL,\n+    pub CLASHING_EXTERN_DECLARATIONS,\n     Warn,\n     \"detects when an extern fn has been declared with the same name but different types\"\n }\n \n-pub struct ClashingExternDecl {\n+pub struct ClashingExternDeclarations {\n     seen_decls: FxHashMap<Symbol, HirId>,\n }\n \n@@ -2083,9 +2083,9 @@ impl SymbolName {\n     }\n }\n \n-impl ClashingExternDecl {\n+impl ClashingExternDeclarations {\n     crate fn new() -> Self {\n-        ClashingExternDecl { seen_decls: FxHashMap::default() }\n+        ClashingExternDeclarations { seen_decls: FxHashMap::default() }\n     }\n     /// Insert a new foreign item into the seen set. If a symbol with the same name already exists\n     /// for the item, return its HirId without updating the set.\n@@ -2211,18 +2211,18 @@ impl ClashingExternDecl {\n     }\n }\n \n-impl_lint_pass!(ClashingExternDecl => [CLASHING_EXTERN_DECL]);\n+impl_lint_pass!(ClashingExternDeclarations => [CLASHING_EXTERN_DECLARATIONS]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ClashingExternDecl {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ClashingExternDeclarations {\n     fn check_foreign_item(&mut self, cx: &LateContext<'a, 'tcx>, this_fi: &hir::ForeignItem<'_>) {\n-        trace!(\"ClashingExternDecl: check_foreign_item: {:?}\", this_fi);\n+        trace!(\"ClashingExternDeclarations: check_foreign_item: {:?}\", this_fi);\n         if let ForeignItemKind::Fn(..) = this_fi.kind {\n             let tcx = *&cx.tcx;\n             if let Some(existing_hid) = self.insert(tcx, this_fi) {\n                 let existing_decl_ty = tcx.type_of(tcx.hir().local_def_id(existing_hid));\n                 let this_decl_ty = tcx.type_of(tcx.hir().local_def_id(this_fi.hir_id));\n                 debug!(\n-                    \"ClashingExternDecl: Comparing existing {:?}: {:?} to this {:?}: {:?}\",\n+                    \"ClashingExternDeclarations: Comparing existing {:?}: {:?} to this {:?}: {:?}\",\n                     existing_hid, existing_decl_ty, this_fi.hir_id, this_decl_ty\n                 );\n                 // Check that the declarations match.\n@@ -2239,7 +2239,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ClashingExternDecl {\n                         };\n                     // Finally, emit the diagnostic.\n                     tcx.struct_span_lint_hir(\n-                        CLASHING_EXTERN_DECL,\n+                        CLASHING_EXTERN_DECLARATIONS,\n                         this_fi.hir_id,\n                         get_relevant_span(this_fi),\n                         |lint| {"}, {"sha": "4da98d201593b1dbf6715dba90076c2907e51086", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "patch": "@@ -155,7 +155,7 @@ macro_rules! late_lint_passes {\n                 // and change this to a module lint pass\n                 MissingDebugImplementations: MissingDebugImplementations::default(),\n                 ArrayIntoIter: ArrayIntoIter,\n-                ClashingExternDecl: ClashingExternDecl::new(),\n+                ClashingExternDeclarations: ClashingExternDeclarations::new(),\n             ]\n         );\n     };"}, {"sha": "773fab36be22127a7b62a367a7c98e3d4636e78d", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "patch": "@@ -205,15 +205,15 @@ mod imp {\n         #[cfg(target_arch = \"aarch64\")]\n         extern \"C\" {\n             fn objc_msgSend(obj: NsId, sel: Sel) -> NsId;\n-            #[cfg_attr(not(bootstrap), allow(clashing_extern_decl))]\n+            #[cfg_attr(not(bootstrap), allow(clashing_extern_declarations))]\n             #[link_name = \"objc_msgSend\"]\n             fn objc_msgSend_ul(obj: NsId, sel: Sel, i: libc::c_ulong) -> NsId;\n         }\n \n         #[cfg(not(target_arch = \"aarch64\"))]\n         extern \"C\" {\n             fn objc_msgSend(obj: NsId, sel: Sel, ...) -> NsId;\n-            #[cfg_attr(not(bootstrap), allow(clashing_extern_decl))]\n+            #[cfg_attr(not(bootstrap), allow(clashing_extern_declarations))]\n             #[link_name = \"objc_msgSend\"]\n             fn objc_msgSend_ul(obj: NsId, sel: Sel, ...) -> NsId;\n         }"}, {"sha": "9f8a3a82624446cc259bf3b237f28c22917ce553", "filename": "src/test/ui/issues/issue-1866.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1866.rs?ref=c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "patch": "@@ -1,7 +1,7 @@\n // build-pass\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n-#![warn(clashing_extern_decl)]\n+#![warn(clashing_extern_declarations)]\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "5edae48a10f23b8435d2de75d5bd953db3c0a02c", "filename": "src/test/ui/issues/issue-1866.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Fissues%2Fissue-1866.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Fissues%2Fissue-1866.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1866.stderr?ref=c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "patch": "@@ -10,8 +10,8 @@ LL |             pub fn rust_task_is_unwinding(rt: *const rust_task) -> bool;\n note: the lint level is defined here\n   --> $DIR/issue-1866.rs:4:9\n    |\n-LL | #![warn(clashing_extern_decl)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clashing_extern_declarations)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `unsafe extern \"C\" fn(*const usize) -> bool`\n               found `unsafe extern \"C\" fn(*const bool) -> bool`\n "}, {"sha": "d9be27250cdeafacab6898a83925d9adf735400e", "filename": "src/test/ui/issues/issue-5791.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Fissues%2Fissue-5791.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Fissues%2Fissue-5791.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5791.rs?ref=c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n-#![warn(clashing_extern_decl)]\n+#![warn(clashing_extern_declarations)]\n // pretty-expanded FIXME #23616\n \n extern {"}, {"sha": "cf60e609deb318e241757cbb885dd5175eac89f8", "filename": "src/test/ui/issues/issue-5791.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Fissues%2Fissue-5791.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Fissues%2Fissue-5791.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5791.stderr?ref=c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "patch": "@@ -12,8 +12,8 @@ LL | |     fn malloc2(len: i32, foo: i32) -> *const u8;\n note: the lint level is defined here\n   --> $DIR/issue-5791.rs:3:9\n    |\n-LL | #![warn(clashing_extern_decl)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clashing_extern_declarations)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `unsafe extern \"C\" fn(i32) -> *const u8`\n               found `unsafe extern \"C\" fn(i32, i32) -> *const u8`\n "}, {"sha": "544614100ba28f28e39cae85702286ea574ecbb3", "filename": "src/test/ui/lint/clashing-extern-fn.rs", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "patch": "@@ -1,17 +1,17 @@\n // check-pass\n // aux-build:external_extern_fn.rs\n #![crate_type = \"lib\"]\n-#![warn(clashing_extern_decl)]\n+#![warn(clashing_extern_declarations)]\n \n extern crate external_extern_fn;\n \n-extern {\n+extern \"C\" {\n     fn clash(x: u8);\n     fn no_clash(x: u8);\n }\n \n fn redeclared_different_signature() {\n-    extern {\n+    extern \"C\" {\n         fn clash(x: u64); //~ WARN `clash` redeclared with a different signature\n     }\n \n@@ -22,20 +22,20 @@ fn redeclared_different_signature() {\n }\n \n fn redeclared_same_signature() {\n-    extern {\n+    extern \"C\" {\n         fn no_clash(x: u8);\n     }\n     unsafe {\n         no_clash(123);\n     }\n }\n \n-extern {\n+extern \"C\" {\n     fn extern_fn(x: u64);\n }\n \n fn extern_clash() {\n-    extern {\n+    extern \"C\" {\n         fn extern_fn(x: u32); //~ WARN `extern_fn` redeclared with a different signature\n     }\n     unsafe {\n@@ -49,7 +49,7 @@ fn extern_no_clash() {\n         crate::extern_fn(123);\n     }\n }\n-extern {\n+extern \"C\" {\n     fn some_other_new_name(x: i16);\n \n     #[link_name = \"extern_link_name\"]\n@@ -60,7 +60,7 @@ extern {\n }\n \n fn link_name_clash() {\n-    extern {\n+    extern \"C\" {\n         fn extern_link_name(x: u32);\n         //~^ WARN `extern_link_name` redeclared with a different signature\n \n@@ -75,85 +75,112 @@ fn link_name_clash() {\n }\n \n mod a {\n-    extern {\n+    extern \"C\" {\n         fn different_mod(x: u8);\n     }\n }\n mod b {\n-    extern {\n+    extern \"C\" {\n         fn different_mod(x: u64); //~ WARN `different_mod` redeclared with a different signature\n     }\n }\n \n-extern {\n+extern \"C\" {\n     fn variadic_decl(x: u8, ...);\n }\n \n fn variadic_clash() {\n-    extern {\n+    extern \"C\" {\n         fn variadic_decl(x: u8); //~ WARN `variadic_decl` redeclared with a different signature\n     }\n }\n \n #[no_mangle]\n-fn no_mangle_name(x: u8) { }\n+fn no_mangle_name(x: u8) {}\n \n-extern {\n+extern \"C\" {\n     #[link_name = \"unique_link_name\"]\n     fn link_name_specified(x: u8);\n }\n \n fn tricky_no_clash() {\n-    extern {\n+    extern \"C\" {\n         // Shouldn't warn, because the declaration above actually declares a different symbol (and\n         // Rust's name resolution rules around shadowing will handle this gracefully).\n         fn link_name_specified() -> u32;\n \n         // The case of a no_mangle name colliding with an extern decl (see #28179) is related but\n-        // shouldn't be reported by ClashingExternDecl, because this is an example of unmangled\n-        // name clash causing bad behaviour in functions with a defined body.\n+        // shouldn't be reported by ClashingExternDeclarations, because this is an example of\n+        // unmangled name clash causing bad behaviour in functions with a defined body.\n         fn no_mangle_name() -> u32;\n     }\n }\n \n mod banana {\n     mod one {\n-        #[repr(C)] struct Banana { weight: u32, length: u16 }\n-        extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n+        #[repr(C)]\n+        struct Banana {\n+            weight: u32,\n+            length: u16,\n+        }\n+        extern \"C\" {\n+            fn weigh_banana(count: *const Banana) -> u64;\n+        }\n     }\n \n     mod two {\n-        #[repr(C)] struct Banana { weight: u32, length: u16 } // note: distinct type\n-        // This should not trigger the lint because two::Banana is structurally equivalent to\n-        // one::Banana.\n-        extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n+        #[repr(C)]\n+        struct Banana {\n+            weight: u32,\n+            length: u16,\n+        } // note: distinct type\n+        extern \"C\" {\n+          // This should not trigger the lint because two::Banana is structurally equivalent to\n+          // one::Banana.\n+            fn weigh_banana(count: *const Banana) -> u64;\n+        }\n     }\n \n     mod three {\n         // This _should_ trigger the lint, because repr(packed) should generate a struct that has a\n         // different layout.\n-        #[repr(packed)] struct Banana { weight: u32, length: u16 }\n+        #[repr(packed)]\n+        struct Banana {\n+            weight: u32,\n+            length: u16,\n+        }\n         #[allow(improper_ctypes)]\n-        extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n-        //~^ WARN `weigh_banana` redeclared with a different signature\n+        extern \"C\" {\n+            fn weigh_banana(count: *const Banana) -> u64;\n+            //~^ WARN `weigh_banana` redeclared with a different signature\n+        }\n     }\n }\n \n mod sameish_members {\n     mod a {\n         #[repr(C)]\n-        struct Point { x: i16, y: i16 }\n+        struct Point {\n+            x: i16,\n+            y: i16,\n+        }\n \n-        extern \"C\" { fn draw_point(p: Point); }\n+        extern \"C\" {\n+            fn draw_point(p: Point);\n+        }\n     }\n     mod b {\n         #[repr(C)]\n-        struct Point { coordinates: [i16; 2] }\n+        struct Point {\n+            coordinates: [i16; 2],\n+        }\n \n         // It's possible we are overconservative for this case, as accessing the elements of the\n         // coordinates array might end up correctly accessing `.x` and `.y`. However, this may not\n         // always be the case, for every architecture and situation. This is also a really odd\n         // thing to do anyway.\n-        extern \"C\" { fn draw_point(p: Point); } //~ WARN `draw_point` redeclared with a different\n+        extern \"C\" {\n+            fn draw_point(p: Point); //~ WARN `draw_point` redeclared with a different\n+        }\n     }\n }"}, {"sha": "96e51ab5a3ec7057e0a5450d23d5c0c1c7736a44", "filename": "src/test/ui/lint/clashing-extern-fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fclashing-extern-fn.stderr?ref=c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "patch": "@@ -10,8 +10,8 @@ LL |         fn clash(x: u64);\n note: the lint level is defined here\n   --> $DIR/clashing-extern-fn.rs:4:9\n    |\n-LL | #![warn(clashing_extern_decl)]\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(clashing_extern_declarations)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: expected `unsafe extern \"C\" fn(u8)`\n               found `unsafe extern \"C\" fn(u64)`\n \n@@ -94,25 +94,25 @@ LL |         fn variadic_decl(x: u8);\n               found `unsafe extern \"C\" fn(u8)`\n \n warning: `weigh_banana` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:137:22\n+  --> $DIR/clashing-extern-fn.rs:154:13\n    |\n-LL |         extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n-   |                      --------------------------------------------- `weigh_banana` previously declared here\n+LL |             fn weigh_banana(count: *const Banana) -> u64;\n+   |             --------------------------------------------- `weigh_banana` previously declared here\n ...\n-LL |         extern \"C\" { fn weigh_banana(count: *const Banana) -> u64; }\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n+LL |             fn weigh_banana(count: *const Banana) -> u64;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n    = note: expected `unsafe extern \"C\" fn(*const banana::one::Banana) -> u64`\n               found `unsafe extern \"C\" fn(*const banana::three::Banana) -> u64`\n \n warning: `draw_point` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:157:22\n+  --> $DIR/clashing-extern-fn.rs:183:13\n    |\n-LL |         extern \"C\" { fn draw_point(p: Point); }\n-   |                      ------------------------ `draw_point` previously declared here\n+LL |             fn draw_point(p: Point);\n+   |             ------------------------ `draw_point` previously declared here\n ...\n-LL |         extern \"C\" { fn draw_point(p: Point); }\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n+LL |             fn draw_point(p: Point);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ this signature doesn't match the previous declaration\n    |\n    = note: expected `unsafe extern \"C\" fn(sameish_members::a::Point)`\n               found `unsafe extern \"C\" fn(sameish_members::b::Point)`"}, {"sha": "fe3c392ccf1001eff9b73779b9e909ed95fa617b", "filename": "src/test/ui/lint/dead-code/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs?ref=c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "patch": "@@ -1,6 +1,6 @@\n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n-#![allow(clashing_extern_decl)]\n+#![allow(clashing_extern_declarations)]\n #![deny(dead_code)]\n \n #![crate_type=\"lib\"]"}, {"sha": "8f5d7f4f7f8fd966a2eb93b521671be2aa0c1a74", "filename": "src/test/ui/parser/extern-abi-from-mac-literal-frag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Fparser%2Fextern-abi-from-mac-literal-frag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836/src%2Ftest%2Fui%2Fparser%2Fextern-abi-from-mac-literal-frag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-abi-from-mac-literal-frag.rs?ref=c72a5dd9d37eb2f0d2aab3f4eb9d9a1a41986836", "patch": "@@ -1,4 +1,4 @@\n-#![allow(clashing_extern_decl)]\n+#![allow(clashing_extern_declarations)]\n // check-pass\n \n // In this test we check that the parser accepts an ABI string when it"}]}