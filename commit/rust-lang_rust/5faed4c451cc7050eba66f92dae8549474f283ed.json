{"sha": "5faed4c451cc7050eba66f92dae8549474f283ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYWVkNGM0NTFjYzcwNTBlYmE2NmY5MmRhZTg1NDk0NzRmMjgzZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-25T01:14:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-25T01:14:43Z"}, "message": "Auto merge of #29687 - Havvy:ux-guidelines, r=pnkfelix\n\nSee https://github.com/rust-lang/rfcs/pull/1246 for discussion.", "tree": {"sha": "ed757e10132ee9f5d6e0397b167a4c719c8f1065", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed757e10132ee9f5d6e0397b167a4c719c8f1065"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5faed4c451cc7050eba66f92dae8549474f283ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5faed4c451cc7050eba66f92dae8549474f283ed", "html_url": "https://github.com/rust-lang/rust/commit/5faed4c451cc7050eba66f92dae8549474f283ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5faed4c451cc7050eba66f92dae8549474f283ed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "338cdd7e05a7202cdfc1319376b2c6c66d9ccab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/338cdd7e05a7202cdfc1319376b2c6c66d9ccab1", "html_url": "https://github.com/rust-lang/rust/commit/338cdd7e05a7202cdfc1319376b2c6c66d9ccab1"}, {"sha": "13b7b0707559b6603927526481f024cde9265deb", "url": "https://api.github.com/repos/rust-lang/rust/commits/13b7b0707559b6603927526481f024cde9265deb", "html_url": "https://github.com/rust-lang/rust/commit/13b7b0707559b6603927526481f024cde9265deb"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "563614f873d22da71ddb2c05d6505293503a07a3", "filename": "src/doc/rustc-ux-guidelines.md", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/5faed4c451cc7050eba66f92dae8549474f283ed/src%2Fdoc%2Frustc-ux-guidelines.md", "raw_url": "https://github.com/rust-lang/rust/raw/5faed4c451cc7050eba66f92dae8549474f283ed/src%2Fdoc%2Frustc-ux-guidelines.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-ux-guidelines.md?ref=5faed4c451cc7050eba66f92dae8549474f283ed", "patch": "@@ -0,0 +1,73 @@\n+Don't forget the user. Whether human or another program, such as an IDE, a\n+good user experience with the compiler goes a long way into making developer\n+lives better. We don't want users to be baffled by compiler output or\n+learn arcane patterns to compile their program.\n+\n+## Error, Warning, Help, Note Messages\n+\n+When the compiler detects a problem, it can emit either an error, warning,\n+note, or help message.\n+\n+An `error` is emitted when the compiler detects a problem that makes it unable\n+ to compile the program, either because the program is invalid or the\n+ programmer has decided to make a specific `warning` into an error.\n+\n+A `warning` is emitted when the compiler detects something odd about a\n+program. For instance, dead code and unused `Result` values.\n+\n+A `help` is emitted following either an `error` or `warning` giving extra\n+information to the user about how to solve their problem.\n+\n+A `note` is for identifying additional circumstances and parts of the code\n+that lead to a warning or error. For example, the borrow checker will note any\n+previous conflicting borrows.\n+\n+* Write in plain simple English. If your message, when shown on a \u2013 possibly\n+small \u2013 screen (which hasn't been cleaned for a while), cannot be understood\n+by a normal programmer, who just came out of bed after a night partying, it's\n+too complex.\n+* `Errors` and `Warnings` should not suggest how to fix the problem. A `Help`\n+message should be emitted instead.\n+* `Error`, `Warning`, `Note`, and `Help` messages start with a lowercase\n+letter and do not end with punctuation.\n+* Error messages should be succinct. Users will see these error messages many\n+times, and more verbose descriptions can be viewed with the `--explain` flag.\n+That said, don't make it so terse that it's hard to understand.\n+* The word \"illegal\" is illegal. Prefer \"invalid\" or a more specific word\n+instead.\n+* Errors should document the span of code where they occur \u2013 the `span_..`\n+methods allow to easily do this. Also `note` other spans that have contributed\n+to the error if the span isn't too large.\n+* When emitting a message with span, try to reduce the span to the smallest\n+amount possible that still signifies the issue\n+* Try not to emit multiple error messages for the same error. This may require\n+detecting duplicates.\n+* When the compiler has too little information for a specific error message,\n+lobby for annotations for library code that allow adding more. For example see\n+`#[on_unimplemented]`. Use these annotations when available!\n+* Keep in mind that Rust's learning curve is rather steep, and that the\n+compiler messages are an important learning tool.\n+\n+## Error Explanations\n+\n+Error explanations are long form descriptions of error messages provided with\n+the compiler. They are accessible via the `--explain` flag. Each explanation\n+comes with an example of how to trigger it and advice on how to fix it.\n+\n+* All of them are accessible [online](https://github.com/rust-lang/rust/blob/master/src/librustc/diagnostics.rs).\n+* Explanations have full markdown support. Use it, especially to highlight\n+code with backticks.\n+* When talking about the compiler, call it `the compiler`, not `Rust` or\n+`rustc`.\n+\n+## Compiler Flags\n+\n+* Flags should be orthogonal to each other. For example, if we'd have a\n+json-emitting variant of multiple actions `foo` and `bar`, an additional\n+--json flag is better than adding `--foo-json` and `--bar-json`.\n+* Always give options a long descriptive name, if only for better\n+understandable compiler scripts.\n+* The `--verbose` flag is for adding verbose information to `rustc` output\n+when not compiling a program. For example, using it with the `--version` flag\n+gives information about the hashes of the code.\n+* Experimental flags and options must be guarded behind the `-Z unstable-options` flag.\n\\ No newline at end of file"}]}