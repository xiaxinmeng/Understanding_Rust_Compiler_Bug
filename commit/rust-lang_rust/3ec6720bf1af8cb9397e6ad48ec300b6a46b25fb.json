{"sha": "3ec6720bf1af8cb9397e6ad48ec300b6a46b25fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYzY3MjBiZjFhZjhjYjkzOTdlNmFkNDhlYzMwMGI2YTQ2YjI1ZmI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-24T00:20:16Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-16T21:27:20Z"}, "message": "add IdFunctor to rustc_data_structures", "tree": {"sha": "44999261fb72d81a0b76ecdd9395744df5703d8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44999261fb72d81a0b76ecdd9395744df5703d8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ec6720bf1af8cb9397e6ad48ec300b6a46b25fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ec6720bf1af8cb9397e6ad48ec300b6a46b25fb", "html_url": "https://github.com/rust-lang/rust/commit/3ec6720bf1af8cb9397e6ad48ec300b6a46b25fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ec6720bf1af8cb9397e6ad48ec300b6a46b25fb/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5230fbf76bafd86ee4376a0e26e551df8d17fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5230fbf76bafd86ee4376a0e26e551df8d17fec", "html_url": "https://github.com/rust-lang/rust/commit/f5230fbf76bafd86ee4376a0e26e551df8d17fec"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "5d3639388f039eefecf8b656df3f0cb8c596e61d", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/3ec6720bf1af8cb9397e6ad48ec300b6a46b25fb/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ec6720bf1af8cb9397e6ad48ec300b6a46b25fb/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=3ec6720bf1af8cb9397e6ad48ec300b6a46b25fb", "patch": "@@ -0,0 +1,82 @@\n+use rustc_index::vec::{Idx, IndexVec};\n+use std::mem;\n+use std::ptr;\n+\n+pub trait IdFunctor {\n+    type Inner;\n+\n+    fn map_id<F>(self, f: F) -> Self\n+    where\n+        F: FnMut(Self::Inner) -> Self::Inner;\n+}\n+\n+impl<T> IdFunctor for Box<T> {\n+    type Inner = T;\n+\n+    #[inline]\n+    fn map_id<F>(self, mut f: F) -> Self\n+    where\n+        F: FnMut(Self::Inner) -> Self::Inner,\n+    {\n+        let raw = Box::into_raw(self);\n+        unsafe {\n+            // SAFETY: The raw pointer points to a valid value of type `T`.\n+            let value = ptr::read(raw);\n+            // SAFETY: Convert's `Box<T>` to `Box<MaybeUninit<T>>` which is the\n+            // inverse of `Box::assume_init()` and should be safe.\n+            let mut raw: Box<mem::MaybeUninit<T>> = Box::from_raw(raw.cast());\n+            // SAFETY: Write the mapped value back into the `Box`.\n+            ptr::write(raw.as_mut_ptr(), f(value));\n+            // SAFETY: We just initialized `raw`.\n+            raw.assume_init()\n+        }\n+    }\n+}\n+\n+impl<T> IdFunctor for Vec<T> {\n+    type Inner = T;\n+\n+    #[inline]\n+    fn map_id<F>(mut self, mut f: F) -> Self\n+    where\n+        F: FnMut(Self::Inner) -> Self::Inner,\n+    {\n+        // FIXME: We don't really care about panics here and leak\n+        // far more than we should, but that should be fine for now.\n+        let len = self.len();\n+        unsafe {\n+            self.set_len(0);\n+            let start = self.as_mut_ptr();\n+            for i in 0..len {\n+                let p = start.add(i);\n+                ptr::write(p, f(ptr::read(p)));\n+            }\n+            self.set_len(len);\n+        }\n+        self\n+    }\n+}\n+\n+impl<T> IdFunctor for Box<[T]> {\n+    type Inner = T;\n+\n+    #[inline]\n+    fn map_id<F>(self, f: F) -> Self\n+    where\n+        F: FnMut(Self::Inner) -> Self::Inner,\n+    {\n+        Vec::from(self).map_id(f).into()\n+    }\n+}\n+\n+impl<I: Idx, T> IdFunctor for IndexVec<I, T> {\n+    type Inner = T;\n+\n+    #[inline]\n+    fn map_id<F>(self, f: F) -> Self\n+    where\n+        F: FnMut(Self::Inner) -> Self::Inner,\n+    {\n+        IndexVec::from_raw(self.raw.map_id(f))\n+    }\n+}"}]}