{"sha": "9668ab58f338b27d8f53357c7fd4ea3d3f06305e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2NjhhYjU4ZjMzOGIyN2Q4ZjUzMzU3YzdmZDRlYTNkM2YwNjMwNWU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-05T18:35:30Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-06T05:48:08Z"}, "message": "std: Move libnative task count bookkeeping to std\n\nWhen using tasks in Rust, the expectation is that the runtime does not exit\nbefore all tasks have exited. This is enforced in libgreen through the\n`SchedPool` type, and it is enforced in libnative through a `bookkeeping` module\nand a global count/mutex pair. Unfortunately, this means that a process which\noriginates with libgreen will not wait for spawned native tasks.\n\nIn order to fix this problem, the bookkeeping module was moved from libnative to\nlibstd so the runtime itself can wait for native tasks to exit. Green tasks do\nnot manage themselves through this bookkeeping module, but native tasks will\ncontinue to manage themselves through this module.\n\nCloses #12684", "tree": {"sha": "a51174739f9ed9c1910d9676a29a818d49a15009", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a51174739f9ed9c1910d9676a29a818d49a15009"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9668ab58f338b27d8f53357c7fd4ea3d3f06305e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9668ab58f338b27d8f53357c7fd4ea3d3f06305e", "html_url": "https://github.com/rust-lang/rust/commit/9668ab58f338b27d8f53357c7fd4ea3d3f06305e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6acff828787b9b6c65ef66942f45e58b2f22ad6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6acff828787b9b6c65ef66942f45e58b2f22ad6", "html_url": "https://github.com/rust-lang/rust/commit/e6acff828787b9b6c65ef66942f45e58b2f22ad6"}], "stats": {"total": 61, "additions": 49, "deletions": 12}, "files": [{"sha": "62e41771423d46d0ba61f8888f7bef53af6f29cc", "filename": "src/libnative/io/timer_helper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Flibnative%2Fio%2Ftimer_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Flibnative%2Fio%2Ftimer_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ftimer_helper.rs?ref=9668ab58f338b27d8f53357c7fd4ea3d3f06305e", "patch": "@@ -21,10 +21,10 @@\n //! time.\n \n use std::cast;\n+use std::rt::bookkeeping;\n use std::rt;\n use std::unstable::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n \n-use bookkeeping;\n use io::timer::{Req, Shutdown};\n use task;\n "}, {"sha": "4b6942a1083163dcd0cdf9da9cd9e2d802c4b12b", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=9668ab58f338b27d8f53357c7fd4ea3d3f06305e", "patch": "@@ -58,7 +58,6 @@\n use std::os;\n use std::rt;\n \n-mod bookkeeping;\n pub mod io;\n pub mod task;\n \n@@ -105,6 +104,5 @@ pub fn start(argc: int, argv: **u8, main: proc()) -> int {\n /// number of arguments.\n pub fn run(main: proc()) -> int {\n     main();\n-    bookkeeping::wait_for_other_tasks();\n     os::get_exit_status()\n }"}, {"sha": "793e4d48e13de22a5cb486b6bb414ed33f0056fb", "filename": "src/libnative/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=9668ab58f338b27d8f53357c7fd4ea3d3f06305e", "patch": "@@ -16,19 +16,19 @@\n \n use std::any::Any;\n use std::cast;\n+use std::rt::bookkeeping;\n use std::rt::env;\n use std::rt::local::Local;\n use std::rt::rtio;\n+use std::rt::stack;\n use std::rt::task::{Task, BlockedTask, SendMessage};\n use std::rt::thread::Thread;\n use std::rt;\n use std::task::TaskOpts;\n use std::unstable::mutex::NativeMutex;\n-use std::rt::stack;\n \n use io;\n use task;\n-use bookkeeping;\n \n /// Creates a new Task which is ready to execute as a 1:1 task.\n pub fn new(stack_bounds: (uint, uint)) -> ~Task {"}, {"sha": "5851a6a39c640fde161d35ff6e52da37bfa6609d", "filename": "src/libstd/rt/bookkeeping.rs", "status": "renamed", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Flibstd%2Frt%2Fbookkeeping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Flibstd%2Frt%2Fbookkeeping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbookkeeping.rs?ref=9668ab58f338b27d8f53357c7fd4ea3d3f06305e", "patch": "@@ -8,16 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! 1:1 Task bookkeeping\n+//! Task bookkeeping\n //!\n-//! This module keeps track of the number of running 1:1 tasks so that entry\n-//! points with libnative know when it's possible to exit the program (once all\n-//! tasks have exited).\n+//! This module keeps track of the number of running tasks so that entry points\n+//! with libnative know when it's possible to exit the program (once all tasks\n+//! have exited).\n //!\n-//! The green counterpart for this is bookkeeping on sched pools.\n+//! The green counterpart for this is bookkeeping on sched pools, and it's up to\n+//! each respective runtime to make sure that they call increment() and\n+//! decrement() manually.\n \n-use std::sync::atomics;\n-use std::unstable::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n+#[experimental]; // this is a massive code smell\n+#[doc(hidden)];\n+\n+use sync::atomics;\n+use unstable::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};\n \n static mut TASK_COUNT: atomics::AtomicUint = atomics::INIT_ATOMIC_UINT;\n static mut TASK_LOCK: StaticNativeMutex = NATIVE_MUTEX_INIT;", "previous_filename": "src/libnative/bookkeeping.rs"}, {"sha": "459bc061c569d175a499a6e235155955547b938a", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=9668ab58f338b27d8f53357c7fd4ea3d3f06305e", "patch": "@@ -128,6 +128,9 @@ pub mod args;\n // Support for running procedures when a program has exited.\n mod at_exit_imp;\n \n+// Bookkeeping for task counts\n+pub mod bookkeeping;\n+\n // Stack overflow protection\n pub mod stack;\n \n@@ -207,6 +210,7 @@ pub fn at_exit(f: proc()) {\n /// Invoking cleanup while portions of the runtime are still in use may cause\n /// undefined behavior.\n pub unsafe fn cleanup() {\n+    bookkeeping::wait_for_other_tasks();\n     at_exit_imp::run();\n     args::cleanup();\n     local_ptr::cleanup();"}, {"sha": "a6eef4e20215fd108885ec79739ab7809706d8b9", "filename": "src/test/run-pass/issue-12684.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12684.rs?ref=9668ab58f338b27d8f53357c7fd4ea3d3f06305e", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-fast\n+\n+extern crate native;\n+extern crate green;\n+extern crate rustuv;\n+\n+#[start]\n+fn start(argc: int, argv: **u8) -> int { green::start(argc, argv, main) }\n+\n+fn main() {\n+    native::task::spawn(proc() customtask());\n+}\n+\n+fn customtask() {\n+    let mut timer = std::io::timer::Timer::new().unwrap();\n+    let periodic = timer.periodic(10);\n+    periodic.recv();\n+}"}, {"sha": "6409ba5137584841e56a827d4f931dfad49d0069", "filename": "src/test/run-pass/issue-12699.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Ftest%2Frun-pass%2Fissue-12699.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9668ab58f338b27d8f53357c7fd4ea3d3f06305e/src%2Ftest%2Frun-pass%2Fissue-12699.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12699.rs?ref=9668ab58f338b27d8f53357c7fd4ea3d3f06305e", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-fast\n+\n extern crate native;\n \n use std::io::timer;"}]}