{"sha": "e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MDE5MTAxYTgyZGQ3ZjYxZGNkY2Q1MmJjYzAxMjNkNWVkMjVkMjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-03-13T22:28:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-03-23T21:40:26Z"}, "message": "Add #![feature] attributes to doctests", "tree": {"sha": "6553b47da56745ce8cab9e17265bba143608aa97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6553b47da56745ce8cab9e17265bba143608aa97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "html_url": "https://github.com/rust-lang/rust/commit/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df290f127e923e0aacfe8223dd77f0fa222f0bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/df290f127e923e0aacfe8223dd77f0fa222f0bc8", "html_url": "https://github.com/rust-lang/rust/commit/df290f127e923e0aacfe8223dd77f0fa222f0bc8"}], "stats": {"total": 671, "additions": 649, "deletions": 22}, "files": [{"sha": "07df3bdad34900ff00de2e1a6e6ed8c03ae2130e", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -816,8 +816,7 @@ may optionally begin with any number of `attributes` that apply to the\n containing module. Attributes on the anonymous crate module define important\n metadata that influences the behavior of the compiler.\n \n-```{.rust}\n-# #![allow(unused_attribute)]\n+```no_run\n // Crate name\n #![crate_name = \"projx\"]\n \n@@ -1020,6 +1019,7 @@ Use declarations support a number of convenient shortcuts:\n An example of `use` declarations:\n \n ```\n+# #![feature(core)]\n use std::iter::range_step;\n use std::option::Option::{Some, None};\n use std::collections::hash_map::{self, HashMap};\n@@ -1080,6 +1080,7 @@ declarations.\n An example of what will and will not work for `use` items:\n \n ```\n+# #![feature(core)]\n # #![allow(unused_imports)]\n use foo::core::iter;  // good: foo is at the root of the crate\n use foo::baz::foobaz;    // good: foo is at the root of the crate\n@@ -1781,6 +1782,7 @@ functions, with the exception that they may not have a body and are instead\n terminated by a semicolon.\n \n ```\n+# #![feature(libc)]\n extern crate libc;\n use libc::{c_char, FILE};\n "}, {"sha": "9c86d2d3b84a018da4c7a10116e9318d6e5f0809", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -88,6 +88,7 @@ When `guard` goes out of scope, it will block execution until the thread is\n finished. If we didn't want this behaviour, we could use `thread::spawn()`:\n \n ```\n+# #![feature(old_io, std_misc)]\n use std::thread;\n use std::old_io::timer;\n use std::time::Duration;\n@@ -146,6 +147,7 @@ As an example, here is a Rust program that would have a data race in many\n languages. It will not compile:\n \n ```ignore\n+# #![feature(old_io, std_misc)]\n use std::thread;\n use std::old_io::timer;\n use std::time::Duration;\n@@ -185,6 +187,7 @@ only one person at a time can mutate what's inside. For that, we can use the\n but for a different reason:\n \n ```ignore\n+# #![feature(old_io, std_misc)]\n use std::thread;\n use std::old_io::timer;\n use std::time::Duration;\n@@ -229,6 +232,7 @@ guard across thread boundaries, which gives us our error.\n We can use `Arc<T>` to fix this. Here's the working version:\n \n ```\n+# #![feature(old_io, std_misc)]\n use std::sync::{Arc, Mutex};\n use std::thread;\n use std::old_io::timer;\n@@ -254,6 +258,7 @@ handle is then moved into the new thread. Let's examine the body of the\n thread more closely:\n \n ```\n+# #![feature(old_io, std_misc)]\n # use std::sync::{Arc, Mutex};\n # use std::thread;\n # use std::old_io::timer;"}, {"sha": "695279e2d5bb6983cd34a3c6903633969fa2992a", "filename": "src/doc/trpl/ffi.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Fffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Fffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fffi.md?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -12,6 +12,7 @@ The following is a minimal example of calling a foreign function which will\n compile if snappy is installed:\n \n ```no_run\n+# #![feature(libc)]\n extern crate libc;\n use libc::size_t;\n \n@@ -45,6 +46,7 @@ keeping the binding correct at runtime.\n The `extern` block can be extended to cover the entire snappy API:\n \n ```no_run\n+# #![feature(libc)]\n extern crate libc;\n use libc::{c_int, size_t};\n \n@@ -80,6 +82,7 @@ length is number of elements currently contained, and the capacity is the total\n the allocated memory. The length is less than or equal to the capacity.\n \n ```\n+# #![feature(libc)]\n # extern crate libc;\n # use libc::{c_int, size_t};\n # unsafe fn snappy_validate_compressed_buffer(_: *const u8, _: size_t) -> c_int { 0 }\n@@ -104,6 +107,7 @@ required capacity to hold the compressed output. The vector can then be passed t\n the true length after compression for setting the length.\n \n ```\n+# #![feature(libc)]\n # extern crate libc;\n # use libc::{size_t, c_int};\n # unsafe fn snappy_compress(a: *const u8, b: size_t, c: *mut u8,\n@@ -130,6 +134,7 @@ Decompression is similar, because snappy stores the uncompressed size as part of\n format and `snappy_uncompressed_length` will retrieve the exact buffer size required.\n \n ```\n+# #![feature(libc)]\n # extern crate libc;\n # use libc::{size_t, c_int};\n # unsafe fn snappy_uncompress(compressed: *const u8,\n@@ -408,6 +413,7 @@ global state. In order to access these variables, you declare them in `extern`\n blocks with the `static` keyword:\n \n ```no_run\n+# #![feature(libc)]\n extern crate libc;\n \n #[link(name = \"readline\")]\n@@ -426,6 +432,7 @@ interface. To do this, statics can be declared with `mut` so we can mutate\n them.\n \n ```no_run\n+# #![feature(libc)]\n extern crate libc;\n \n use std::ffi::CString;\n@@ -458,6 +465,7 @@ calling foreign functions. Some foreign functions, most notably the Windows API,\n conventions. Rust provides a way to tell the compiler which convention to use:\n \n ```\n+# #![feature(libc)]\n extern crate libc;\n \n #[cfg(all(target_os = \"win32\", target_arch = \"x86\"))]"}, {"sha": "8d7b1c3bd83932dbaab824ac5752d1ca87f64d1e", "filename": "src/doc/trpl/iterators.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fiterators.md?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -246,6 +246,7 @@ These two basic iterators should serve you well. There are some more\n advanced iterators, including ones that are infinite. Like `count`:\n \n ```rust\n+# #![feature(core)]\n std::iter::count(1, 5);\n ```\n \n@@ -294,6 +295,7 @@ has no side effect on the original iterator. Let's try it out with our infinite\n iterator from before, `count()`:\n \n ```rust\n+# #![feature(core)]\n for i in std::iter::count(1, 5).take(5) {\n     println!(\"{}\", i);\n }"}, {"sha": "8cb16f7ab33406422659b3d3a57eb82a7de220ec", "filename": "src/doc/trpl/method-syntax.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmethod-syntax.md?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -23,6 +23,7 @@ the ability to use this *method call syntax* via the `impl` keyword.\n Here's how it works:\n \n ```{rust}\n+# #![feature(core)]\n struct Circle {\n     x: f64,\n     y: f64,\n@@ -87,6 +88,7 @@ original example, `foo.bar().baz()`? This is called 'method chaining', and we\n can do it by returning `self`.\n \n ```\n+# #![feature(core)]\n struct Circle {\n     x: f64,\n     y: f64,\n@@ -164,6 +166,7 @@ have method overloading, named arguments, or variable arguments. We employ\n the builder pattern instead. It looks like this:\n \n ```\n+# #![feature(core)]\n struct Circle {\n     x: f64,\n     y: f64,"}, {"sha": "4b2281badd7ae9105fa5a9c5a8a5e7084c11b033", "filename": "src/doc/trpl/more-strings.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Fmore-strings.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Fmore-strings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmore-strings.md?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -148,6 +148,7 @@ Rust provides iterators for each of these situations:\n Usually, the `graphemes()` method on `&str` is what you want:\n \n ```\n+# #![feature(unicode)]\n let s = \"u\u0354n\u030e\u0348\u0330i\u0319\u032e\u035a\u0326c\u0309\u035ao\u0357\u033c\u0329\u0330d\u0306\u0343\u0365\u0354e\u0301\";\n \n for l in s.graphemes(true) {"}, {"sha": "0ef286ac0691438805fe65f5a869b57a7bbe6ed8", "filename": "src/doc/trpl/standard-input.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Fstandard-input.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Fstandard-input.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstandard-input.md?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -5,7 +5,7 @@ we haven't seen before. Here's a simple program that reads some input,\n and then prints it back out:\n \n ```{rust,ignore}\n-fn main() {\n+corefn main() {\n     println!(\"Type something!\");\n \n     let input = std::old_io::stdin().read_line().ok().expect(\"Failed to read line\");\n@@ -28,6 +28,7 @@ Since writing the fully qualified name all the time is annoying, we can use\n the `use` statement to import it in:\n \n ```{rust}\n+# #![feature(old_io)]\n use std::old_io::stdin;\n \n stdin();\n@@ -37,6 +38,7 @@ However, it's considered better practice to not import individual functions, but\n to import the module, and only use one level of qualification:\n \n ```{rust}\n+# #![feature(old_io)]\n use std::old_io;\n \n old_io::stdin();"}, {"sha": "8fb08e1c6cfdea4f529e051e98cdd66b3e1b169f", "filename": "src/doc/trpl/testing.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Ftesting.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Ftesting.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftesting.md?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -546,6 +546,8 @@ is an opaque \"black box\" to the optimizer and so forces it to consider any\n argument as used.\n \n ```rust\n+# #![feature(test)]\n+\n extern crate test;\n \n # fn main() {"}, {"sha": "fe26fc5e1eb200a71cd45f74b8c826dfb7f7a573", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -4,6 +4,7 @@ Do you remember the `impl` keyword, used to call a function with method\n syntax?\n \n ```{rust}\n+# #![feature(core)]\n struct Circle {\n     x: f64,\n     y: f64,\n@@ -21,6 +22,7 @@ Traits are similar, except that we define a trait with just the method\n signature, then implement the trait for that struct. Like this:\n \n ```{rust}\n+# #![feature(core)]\n struct Circle {\n     x: f64,\n     y: f64,\n@@ -84,6 +86,7 @@ which implements `HasArea` will have an `.area()` method.\n Here's an extended example of how this works:\n \n ```{rust}\n+# #![feature(core)]\n trait HasArea {\n     fn area(&self) -> f64;\n }\n@@ -225,6 +228,7 @@ If we add a `use` line right above `main` and make the right things public,\n everything is fine:\n \n ```{rust}\n+# #![feature(core)]\n use shapes::HasArea;\n \n mod shapes {\n@@ -408,6 +412,7 @@ but instead, we found a floating-point variable. We need a different bound. `Flo\n to the rescue:\n \n ```\n+# #![feature(std_misc)]\n use std::num::Float;\n \n fn inverse<T: Float>(x: T) -> Result<T, String> {\n@@ -423,6 +428,7 @@ from the `Float` trait. Both `f32` and `f64` implement `Float`, so our function\n works just fine:\n \n ```\n+# #![feature(std_misc)]\n # use std::num::Float;\n # fn inverse<T: Float>(x: T) -> Result<T, String> {\n #     if x == Float::zero() { return Err(\"x cannot be zero!\".to_string()) }"}, {"sha": "2116976d55a4d56764bad679633c3cbb27d14533", "filename": "src/doc/trpl/unsafe.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Funsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fdoc%2Ftrpl%2Funsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Funsafe.md?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -187,6 +187,7 @@ As an example, we give a reimplementation of owned boxes by wrapping\n reimplementation is as safe as the `Box` type.\n \n ```\n+# #![feature(libc)]\n #![feature(unsafe_destructor)]\n \n extern crate libc;\n@@ -443,6 +444,7 @@ The function marked `#[start]` is passed the command line parameters\n in the same format as C:\n \n ```\n+# #![feature(libc)]\n #![feature(lang_items, start, no_std)]\n #![no_std]\n \n@@ -470,6 +472,7 @@ correct ABI and the correct name, which requires overriding the\n compiler's name mangling too:\n \n ```ignore\n+# #![feature(libc)]\n #![feature(no_std)]\n #![no_std]\n #![no_main]\n@@ -526,6 +529,7 @@ As an example, here is a program that will calculate the dot product of two\n vectors provided from C, using idiomatic Rust practices.\n \n ```\n+# #![feature(libc, core)]\n #![feature(lang_items, start, no_std)]\n #![no_std]\n \n@@ -650,6 +654,7 @@ and one for deallocation. A freestanding program that uses the `Box`\n sugar for dynamic allocations via `malloc` and `free`:\n \n ```\n+# #![feature(libc)]\n #![feature(lang_items, box_syntax, start, no_std)]\n #![no_std]\n "}, {"sha": "97d3f78f67cbcd0a93e2acece525e458815a659c", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -95,6 +95,7 @@ use heap::deallocate;\n /// task.\n ///\n /// ```\n+/// # #![feature(alloc, core)]\n /// use std::sync::Arc;\n /// use std::thread;\n ///\n@@ -185,6 +186,7 @@ impl<T> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -246,6 +248,7 @@ impl<T> Clone for Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -289,6 +292,7 @@ impl<T: Send + Sync + Clone> Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// let mut five = Arc::new(5);\n@@ -324,6 +328,7 @@ impl<T: Sync + Send> Drop for Arc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// {\n@@ -387,6 +392,7 @@ impl<T: Sync + Send> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// let five = Arc::new(5);\n@@ -424,6 +430,7 @@ impl<T: Sync + Send> Clone for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// let weak_five = Arc::new(5).downgrade();\n@@ -448,6 +455,7 @@ impl<T: Sync + Send> Drop for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::sync::Arc;\n     ///\n     /// {"}, {"sha": "8b18fbf554a4cad6218fb0bf99b79135c637aa1b", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -65,6 +65,7 @@ use core::raw::TraitObject;\n /// The following two examples are equivalent:\n ///\n /// ```\n+/// # #![feature(alloc)]\n /// #![feature(box_syntax)]\n /// use std::boxed::HEAP;\n ///\n@@ -135,6 +136,7 @@ impl<T : ?Sized> Box<T> {\n ///\n /// # Examples\n /// ```\n+/// # #![feature(alloc)]\n /// use std::boxed;\n ///\n /// let seventeen = Box::new(17u32);\n@@ -178,6 +180,7 @@ impl<T: Clone> Clone for Box<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc, core)]\n     /// let x = Box::new(5);\n     /// let mut y = Box::new(10);\n     ///"}, {"sha": "541de2d37fbe0cf68f47a6c51d6c9df8e96a2203", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -66,6 +66,7 @@\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n+#![doc(test(no_crate_inject))]\n \n #![feature(no_std)]\n #![no_std]"}, {"sha": "e4b09bba5298902711250e3b8dd7f8f9614b9e74", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -32,6 +32,7 @@\n //! and have the `Owner` remain allocated as long as any `Gadget` points at it.\n //!\n //! ```rust\n+//! # #![feature(alloc, collections)]\n //! use std::rc::Rc;\n //!\n //! struct Owner {\n@@ -88,6 +89,7 @@\n //! Read the `Cell` documentation for more details on interior mutability.\n //!\n //! ```rust\n+//! # #![feature(alloc)]\n //! use std::rc::Rc;\n //! use std::rc::Weak;\n //! use std::cell::RefCell;\n@@ -218,6 +220,7 @@ impl<T> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -247,6 +250,7 @@ pub fn strong_count<T>(this: &Rc<T>) -> usize { this.strong() }\n /// # Examples\n ///\n /// ```\n+/// # #![feature(alloc)]\n /// use std::rc;\n /// use std::rc::Rc;\n ///\n@@ -267,6 +271,7 @@ pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(alloc)]\n /// use std::rc::{self, Rc};\n ///\n /// let x = Rc::new(3);\n@@ -301,6 +306,7 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(alloc)]\n /// use std::rc::{self, Rc};\n ///\n /// let mut x = Rc::new(3);\n@@ -330,6 +336,7 @@ impl<T: Clone> Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// let mut five = Rc::new(5);\n@@ -372,6 +379,7 @@ impl<T> Drop for Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// {\n@@ -420,6 +428,7 @@ impl<T> Clone for Rc<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -648,6 +657,7 @@ impl<T> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// let five = Rc::new(5);\n@@ -676,6 +686,7 @@ impl<T> Drop for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// {\n@@ -721,6 +732,7 @@ impl<T> Clone for Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(alloc)]\n     /// use std::rc::Rc;\n     ///\n     /// let weak_five = Rc::new(5).downgrade();"}, {"sha": "6edee82dc30afe6e5d26ef498761197a9fb15739", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -216,6 +216,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![9, 1, 2, 7, 3, 2]);\n     /// ```\n@@ -235,6 +236,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n     ///\n@@ -255,6 +257,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n     ///\n@@ -360,6 +363,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::from_vec(vec![1, 3]);\n     ///\n@@ -405,6 +409,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n     /// heap.push(1);\n@@ -436,6 +441,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n     ///\n@@ -461,6 +467,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4, 5, 6, 7]);\n     /// let vec = heap.into_vec();\n@@ -478,6 +485,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BinaryHeap;\n     ///\n     /// let mut heap = BinaryHeap::from_vec(vec![1, 2, 4, 5, 7]);"}, {"sha": "d83ff92bf3d7e5be183f07fe94a3144cd28a01bc", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -38,6 +38,7 @@\n //! [sieve]: http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n //!\n //! ```\n+//! # #![feature(collections, core)]\n //! use std::collections::{BitSet, BitVec};\n //! use std::num::Float;\n //! use std::iter;\n@@ -134,6 +135,7 @@ static FALSE: bool = false;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(collections)]\n /// use std::collections::BitVec;\n ///\n /// let mut bv = BitVec::from_elem(10, false);\n@@ -250,6 +252,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     /// let mut bv = BitVec::new();\n     /// ```\n@@ -264,6 +267,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(10, false);\n@@ -304,6 +308,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b10100000, 0b00010010]);\n@@ -346,6 +351,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_fn(5, |i| { i % 2 == 0 });\n@@ -364,6 +370,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01100000]);\n@@ -396,6 +403,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(5, false);\n@@ -420,6 +428,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let before = 0b01100000;\n@@ -440,6 +449,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let before = 0b01100000;\n@@ -468,6 +478,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -498,6 +509,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -528,6 +540,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let a   = 0b01100100;\n@@ -557,6 +570,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(5, true);\n@@ -581,6 +595,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01110100, 0b10010010]);\n@@ -597,6 +612,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(10, false);\n@@ -614,6 +630,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(10, false);\n@@ -635,6 +652,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, true);\n@@ -682,6 +700,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let bv = BitVec::from_bytes(&[0b10100000]);\n@@ -702,6 +721,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001011]);\n@@ -728,6 +748,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, false);\n@@ -758,6 +779,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_elem(3, false);\n@@ -780,6 +802,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::new();\n@@ -801,6 +824,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001011]);\n@@ -851,6 +875,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::from_bytes(&[0b01001001]);\n@@ -881,6 +906,7 @@ impl BitVec {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitVec;\n     ///\n     /// let mut bv = BitVec::new();\n@@ -1091,6 +1117,7 @@ impl<'a> IntoIterator for &'a BitVec {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(collections)]\n /// use std::collections::{BitSet, BitVec};\n ///\n /// // It's a regular set\n@@ -1187,6 +1214,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1203,6 +1231,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::with_capacity(100);\n@@ -1220,6 +1249,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let bv = BitVec::from_bytes(&[0b01100000]);\n@@ -1249,6 +1279,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::with_capacity(100);\n@@ -1270,6 +1301,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1296,6 +1328,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1316,6 +1349,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1336,6 +1370,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1382,6 +1417,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BitSet;\n     ///\n     /// let mut s = BitSet::new();\n@@ -1414,6 +1450,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let s = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01001010]));\n@@ -1435,6 +1472,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1465,6 +1503,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitVec, BitSet};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1495,6 +1534,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1533,6 +1573,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a = BitSet::from_bit_vec(BitVec::from_bytes(&[0b01101000]));\n@@ -1562,6 +1603,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1585,6 +1627,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1609,6 +1652,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;\n@@ -1641,6 +1685,7 @@ impl BitSet {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::{BitSet, BitVec};\n     ///\n     /// let a   = 0b01101000;"}, {"sha": "e69ca8c9a0940d4b027089d0f0e2b47cb9ebf58c", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -1269,6 +1269,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n@@ -1291,6 +1292,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n@@ -1478,6 +1480,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BTreeMap;\n     /// use std::collections::Bound::{Included, Unbounded};\n     ///\n@@ -1504,6 +1507,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BTreeMap;\n     /// use std::collections::Bound::{Included, Excluded};\n     ///\n@@ -1529,6 +1533,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BTreeMap;\n     /// use std::collections::btree_map::Entry;\n     ///"}, {"sha": "bce0450852f110c80be6e4d0c9e6d5d723701251", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -116,6 +116,7 @@ impl<T> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let set: BTreeSet<usize> = [1, 2, 3, 4].iter().cloned().collect();\n@@ -137,6 +138,7 @@ impl<T> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let set: BTreeSet<usize> = [1, 2, 3, 4].iter().cloned().collect();\n@@ -162,6 +164,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::BTreeSet;\n     /// use std::collections::Bound::{Included, Unbounded};\n     ///\n@@ -190,6 +193,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -213,6 +217,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -237,6 +242,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -261,6 +267,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let mut a = BTreeSet::new();\n@@ -333,6 +340,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let set: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -350,6 +358,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let a: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -371,6 +380,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let sup: BTreeSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -413,6 +423,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::BTreeSet;\n     ///\n     /// let sub: BTreeSet<_> = [1, 2].iter().cloned().collect();"}, {"sha": "b106f4adbc708219524bf1a368cdac19211c7689", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -174,6 +174,7 @@\n //! like:\n //!\n //! ```\n+//! # #![feature(core, std_misc)]\n //! use std::fmt;\n //! use std::f64;\n //! use std::num::Float;\n@@ -261,6 +262,7 @@\n //! Example usage is:\n //!\n //! ```\n+//! # #![feature(old_io)]\n //! # #![allow(unused_must_use)]\n //! use std::io::Write;\n //! let mut w = Vec::new();\n@@ -288,6 +290,7 @@\n //! off, some example usage is:\n //!\n //! ```\n+//! # #![feature(old_io)]\n //! use std::fmt;\n //! use std::io::{self, Write};\n //!"}, {"sha": "fa8413ff1702ca89ad6f9cecdafa3d04b0d8ab86", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -22,6 +22,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![doc(test(no_crate_inject))]\n \n #![feature(alloc)]\n #![feature(box_syntax)]"}, {"sha": "ae00c820a1d489802b7aa74ff097e6b11ff2e7e9", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -235,6 +235,7 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut a = LinkedList::new();\n@@ -483,6 +484,7 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut dl = LinkedList::new();\n@@ -530,6 +532,7 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut d = LinkedList::new();\n@@ -548,6 +551,7 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut d = LinkedList::new();\n@@ -573,6 +577,7 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut d = LinkedList::new();\n@@ -765,6 +770,7 @@ impl<'a, A> IterMut<'a, A> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut list: LinkedList<_> = vec![1, 3, 4].into_iter().collect();\n@@ -792,6 +798,7 @@ impl<'a, A> IterMut<'a, A> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut list: LinkedList<_> = vec![1, 2, 3].into_iter().collect();"}, {"sha": "9b9417d2be782bdacf3ccf96a5e8e7c6d4cb84f1", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -14,6 +14,7 @@\n //! Slices are a view into a block of memory represented as a pointer and a length.\n //!\n //! ```rust\n+//! # #![feature(core)]\n //! // slicing a Vec\n //! let vec = vec!(1, 2, 3);\n //! let int_slice = vec.as_slice();\n@@ -270,6 +271,7 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```rust\n+    /// # #![feature(collections)]\n     /// let mut a = [1, 2, 3, 4, 5];\n     /// let b = vec![6, 7, 8];\n     /// let num_moved = a.move_from(b, 0, 3);\n@@ -560,6 +562,7 @@ impl<T> [T] {\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n     /// ```rust\n+    /// # #![feature(core)]\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     /// let s = s.as_slice();\n     ///\n@@ -842,6 +845,7 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```rust\n+    /// # #![feature(collections)]\n     /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n@@ -853,6 +857,7 @@ impl<T> [T] {\n     /// Iterating through permutations one by one.\n     ///\n     /// ```rust\n+    /// # #![feature(collections)]\n     /// let v = [1, 2, 3];\n     /// let mut perms = v.permutations();\n     ///\n@@ -874,6 +879,7 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(collections)]\n     /// let mut dst = [0, 0, 0];\n     /// let src = [1, 2];\n     ///\n@@ -921,6 +927,7 @@ impl<T> [T] {\n     /// found; the fourth could match any position in `[1,4]`.\n     ///\n     /// ```rust\n+    /// # #![feature(core)]\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     /// let s = s.as_slice();\n     ///\n@@ -950,6 +957,7 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(collections)]\n     /// let v: &mut [_] = &mut [0, 1, 2];\n     /// v.next_permutation();\n     /// let b: &mut [_] = &mut [0, 2, 1];\n@@ -972,6 +980,7 @@ impl<T> [T] {\n     /// # Example\n     ///\n     /// ```rust\n+    /// # #![feature(collections)]\n     /// let v: &mut [_] = &mut [1, 0, 2];\n     /// v.prev_permutation();\n     /// let b: &mut [_] = &mut [0, 2, 1];"}, {"sha": "494dd009ea9ed365f55e9f50d72a7b0907b97f34", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -548,6 +548,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// assert!(\"hello\".contains_char('e'));\n     ///\n     /// assert!(!\"hello\".contains_char('z'));\n@@ -739,6 +740,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let v: Vec<(usize, usize)> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\n     /// assert_eq!(v, [(0,3), (6,9), (12,15)]);\n     ///\n@@ -761,6 +763,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let v: Vec<&str> = \"abcXXXabcYYYabc\".split_str(\"abc\").collect();\n     /// assert_eq!(v, [\"\", \"XXX\", \"YYY\", \"\"]);\n     ///\n@@ -869,6 +872,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     ///\n     /// assert_eq!(s.slice_chars(0, 4), \"L\u00f6we\");\n@@ -1019,6 +1023,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(str_char)]\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     /// assert!(s.is_char_boundary(0));\n     /// // start of `\u8001`\n@@ -1055,6 +1060,7 @@ impl str {\n     /// done by `.chars()` or `.char_indices()`.\n     ///\n     /// ```\n+    /// # #![feature(str_char, core)]\n     /// use std::str::CharRange;\n     ///\n     /// let s = \"\u4e2d\u534eVi\u1ec7t Nam\";\n@@ -1105,6 +1111,7 @@ impl str {\n     /// done by `.chars().rev()` or `.char_indices()`.\n     ///\n     /// ```\n+    /// # #![feature(str_char, core)]\n     /// use std::str::CharRange;\n     ///\n     /// let s = \"\u4e2d\u534eVi\u1ec7t Nam\";\n@@ -1148,6 +1155,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(str_char)]\n     /// let s = \"ab\u03c0c\";\n     /// assert_eq!(s.char_at(1), 'b');\n     /// assert_eq!(s.char_at(2), '\u03c0');\n@@ -1172,6 +1180,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(str_char)]\n     /// let s = \"ab\u03c0c\";\n     /// assert_eq!(s.char_at_reverse(1), 'a');\n     /// assert_eq!(s.char_at_reverse(2), 'b');\n@@ -1286,6 +1295,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     ///\n     /// assert_eq!(s.find_str(\"\u8001\u864e L\"), Some(6));\n@@ -1307,6 +1317,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(str_char)]\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     /// let (c, s1) = s.slice_shift_char().unwrap();\n     ///\n@@ -1335,6 +1346,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let string = \"a\\nb\\nc\";\n     /// let lines: Vec<&str> = string.lines().collect();\n     ///\n@@ -1434,6 +1446,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(unicode, core)]\n     /// let gr1 = \"a\\u{310}e\\u{301}o\\u{308}\\u{332}\".graphemes(true).collect::<Vec<&str>>();\n     /// let b: &[_] = &[\"a\\u{310}\", \"e\\u{301}\", \"o\\u{308}\\u{332}\"];\n     ///\n@@ -1456,6 +1469,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(unicode, core)]\n     /// let gr_inds = \"a\u0310e\u0301o\u0308\u0332\\r\\n\".grapheme_indices(true).collect::<Vec<(usize, &str)>>();\n     /// let b: &[_] = &[(0, \"a\u0310\"), (3, \"e\u0301\"), (6, \"o\u0308\u0332\"), (11, \"\\r\\n\")];\n     ///\n@@ -1475,6 +1489,7 @@ impl str {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(str_words)]\n     /// let some_words = \" Mary   had\\ta little  \\n\\t lamb\";\n     /// let v: Vec<&str> = some_words.words().collect();\n     ///"}, {"sha": "abc67aa61366d793430cc38ceaf11f8d4a9de1ec", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -90,6 +90,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections, core)]\n     /// let s = String::from_str(\"hello\");\n     /// assert_eq!(s.as_slice(), \"hello\");\n     /// ```\n@@ -122,6 +123,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::str::Utf8Error;\n     ///\n     /// let hello_vec = vec![104, 101, 108, 108, 111];\n@@ -350,6 +352,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let s = String::from_str(\"hello\");\n     /// let bytes = s.into_bytes();\n     /// assert_eq!(bytes, [104, 101, 108, 108, 111]);\n@@ -365,6 +368,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"foo\");\n     /// s.push_str(\"bar\");\n     /// assert_eq!(s, \"foobar\");\n@@ -441,6 +445,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"foo\");\n     /// s.reserve(100);\n     /// assert!(s.capacity() >= 100);\n@@ -458,6 +463,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"abc\");\n     /// s.push('1');\n     /// s.push('2');\n@@ -493,6 +499,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let s = String::from_str(\"hello\");\n     /// let b: &[_] = &[104, 101, 108, 108, 111];\n     /// assert_eq!(s.as_bytes(), b);\n@@ -513,6 +520,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"hello\");\n     /// s.truncate(2);\n     /// assert_eq!(s, \"he\");\n@@ -530,6 +538,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"foo\");\n     /// assert_eq!(s.pop(), Some('o'));\n     /// assert_eq!(s.pop(), Some('o'));\n@@ -567,6 +576,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"foo\");\n     /// assert_eq!(s.remove(0), 'f');\n     /// assert_eq!(s.remove(1), 'o');\n@@ -629,6 +639,7 @@ impl String {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut s = String::from_str(\"hello\");\n     /// unsafe {\n     ///     let vec = s.as_mut_vec();\n@@ -930,6 +941,7 @@ impl<'a> Deref for DerefString<'a> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(collections)]\n /// use std::string::as_string;\n ///\n /// fn string_consumer(s: String) {"}, {"sha": "473442e531b5d06cd5ee76820118d2bdc9327618", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -73,6 +73,7 @@ use borrow::{Cow, IntoCow};\n /// # Examples\n ///\n /// ```\n+/// # #![feature(collections)]\n /// let mut vec = Vec::new();\n /// vec.push(1);\n /// vec.push(2);\n@@ -345,6 +346,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut vec = Vec::with_capacity(10);\n     /// vec.push_all(&[1, 2, 3]);\n     /// assert_eq!(vec.capacity(), 10);\n@@ -400,6 +402,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut vec = vec![1, 2, 3, 4];\n     /// vec.truncate(2);\n     /// assert_eq!(vec, [1, 2]);\n@@ -565,6 +568,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut v = vec![1, 2, 3];\n     /// assert_eq!(v.remove(1), 2);\n     /// assert_eq!(v, [1, 3]);\n@@ -696,6 +700,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut vec = vec![1, 2, 3];\n     /// let mut vec2 = vec![4, 5, 6];\n     /// vec.append(&mut vec2);\n@@ -732,6 +737,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut v = vec![\"a\".to_string(), \"b\".to_string()];\n     /// for s in v.drain() {\n     ///     // s has type String, not &String\n@@ -813,6 +819,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections, core)]\n     /// let v = vec![0, 1, 2];\n     /// let w = v.map_in_place(|i| i + 3);\n     /// assert_eq!(w.as_slice(), [3, 4, 5].as_slice());\n@@ -1015,6 +1022,7 @@ impl<T> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut vec = vec![1,2,3];\n     /// let vec2 = vec.split_off(1);\n     /// assert_eq!(vec, [1]);\n@@ -1053,6 +1061,7 @@ impl<T: Clone> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut vec = vec![\"hello\"];\n     /// vec.resize(3, \"world\");\n     /// assert_eq!(vec, [\"hello\", \"world\", \"world\"]);\n@@ -1081,6 +1090,7 @@ impl<T: Clone> Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// let mut vec = vec![1];\n     /// vec.push_all(&[2, 3, 4]);\n     /// assert_eq!(vec, [1, 2, 3, 4]);\n@@ -1554,6 +1564,7 @@ impl<T> AsSlice<T> for Vec<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// fn foo(slice: &[i32]) {}\n     ///\n     /// let vec = vec![1, 2];"}, {"sha": "d25706400386eabe72e34ca839a0e9d85e73ed1f", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -257,6 +257,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -284,6 +285,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let buf: VecDeque<i32> = VecDeque::with_capacity(10);\n@@ -307,6 +309,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<i32> = vec![1].into_iter().collect();\n@@ -328,6 +331,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<i32> = vec![1].into_iter().collect();\n@@ -403,6 +407,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::with_capacity(15);\n@@ -489,6 +494,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -512,6 +518,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -535,6 +542,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -644,6 +652,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut v = VecDeque::new();\n@@ -882,6 +891,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -915,6 +925,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -948,6 +959,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Examples\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();\n@@ -1321,6 +1333,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = vec![1,2,3].into_iter().collect();\n@@ -1383,6 +1396,7 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf: VecDeque<_> = vec![1, 2, 3].into_iter().collect();\n@@ -1407,6 +1421,7 @@ impl<T: Clone> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut buf = VecDeque::new();"}, {"sha": "84fb06809b95dc87766316f202f99d2bfa95e456", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -34,6 +34,7 @@ use vec::Vec;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(collections)]\n /// use std::collections::VecMap;\n ///\n /// let mut months = VecMap::new();\n@@ -132,6 +133,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// ```\n@@ -144,6 +146,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::with_capacity(10);\n     /// ```\n@@ -158,6 +161,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     /// let map: VecMap<String> = VecMap::with_capacity(10);\n     /// assert!(map.capacity() >= 10);\n@@ -177,6 +181,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// map.reserve_len(10);\n@@ -201,6 +206,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     /// let mut map: VecMap<&str> = VecMap::new();\n     /// map.reserve_len_exact(10);\n@@ -240,6 +246,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -268,6 +275,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -299,6 +307,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -325,6 +334,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -360,6 +370,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -416,6 +427,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -443,6 +455,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -460,6 +473,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -477,6 +491,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut a = VecMap::new();\n@@ -492,6 +507,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -516,6 +532,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -534,6 +551,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -562,6 +580,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -587,6 +606,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     ///\n     /// let mut map = VecMap::new();\n@@ -608,6 +628,7 @@ impl<V> VecMap<V> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(collections)]\n     /// use std::collections::VecMap;\n     /// use std::collections::vec_map::Entry;\n     ///"}, {"sha": "a9c5de23d948bcbcde2650ae9833ecd172670fe7", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -220,6 +220,7 @@ impl<T:Copy> Cell<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::cell::Cell;\n     ///\n     /// let c = Cell::new(5);"}, {"sha": "9ab8ab8672dfac71670014abe794beab39f3c505", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -19,7 +19,8 @@\n //! could do the following:\n //!\n //! ```\n-//! use core::num::SignedInt;\n+//! # #![feature(core)]\n+//! use std::num::SignedInt;\n //!\n //! struct FuzzyNum {\n //!     num: i32,\n@@ -398,6 +399,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::cmp;\n ///\n /// assert_eq!(Some(1), cmp::partial_min(1, 2));\n@@ -407,6 +409,7 @@ pub fn max<T: Ord>(v1: T, v2: T) -> T {\n /// When comparison is impossible:\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::cmp;\n ///\n /// let result = cmp::partial_min(std::f64::NAN, 1.0);\n@@ -429,6 +432,7 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::cmp;\n ///\n /// assert_eq!(Some(2), cmp::partial_max(1, 2));\n@@ -438,6 +442,7 @@ pub fn partial_min<T: PartialOrd>(v1: T, v2: T) -> Option<T> {\n /// When comparison is impossible:\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::cmp;\n ///\n /// let result = cmp::partial_max(std::f64::NAN, 1.0);"}, {"sha": "8baf9744bbc48b6d4903544694a05c10575ae417", "filename": "src/libcore/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ferror.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -48,6 +48,7 @@\n //! For example,\n //!\n //! ```\n+//! # #![feature(os, old_io, old_path)]\n //! use std::error::FromError;\n //! use std::old_io::{File, IoError};\n //! use std::os::{MemoryMap, MapError};"}, {"sha": "93a7d2bb17b92237a305a8b5ac033060b51a12b1", "filename": "src/libcore/finally.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffinally.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -19,6 +19,7 @@\n //! # Examples\n //!\n //! ```\n+//! # #![feature(core)]\n //! # #![feature(unboxed_closures)]\n //!\n //! use std::finally::Finally;\n@@ -70,6 +71,7 @@ impl<T, F> Finally<T> for F where F: FnMut() -> T {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::finally::try_finally;\n ///\n /// struct State<'a> { buffer: &'a mut [u8], len: usize }"}, {"sha": "cf427c16588d9add3682c30ff51449be8380151f", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -624,6 +624,7 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n+    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo {\n@@ -655,6 +656,7 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n+    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo(i32, String);\n@@ -683,6 +685,7 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n+    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo(Vec<i32>);\n@@ -712,6 +715,7 @@ impl<'a> Formatter<'a> {\n     /// # Examples\n     ///\n     /// ```rust\n+    /// # #![feature(debug_builders, core)]\n     /// use std::fmt;\n     ///\n     /// struct Foo(Vec<(String, i32)>);"}, {"sha": "49da99b97cb206571b768a1e88e94b6ae86a6d1e", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -146,6 +146,7 @@ pub struct RadixFmt<T, R>(T, R);\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::fmt::radix;\n /// assert_eq!(format!(\"{}\", radix(55, 36)), \"1j\".to_string());\n /// ```"}, {"sha": "3c5810fdf804dcaf2caef0422f3a07e806505c18", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -16,6 +16,7 @@\n //! # Examples\n //!\n //! ```rust\n+//! # #![feature(hash)]\n //! use std::hash::{hash, Hash, SipHasher};\n //!\n //! #[derive(Hash)]\n@@ -35,6 +36,7 @@\n //! the trait `Hash`:\n //!\n //! ```rust\n+//! # #![feature(hash)]\n //! use std::hash::{hash, Hash, Hasher, SipHasher};\n //!\n //! struct Person {"}, {"sha": "9873ba476acf0fe0cb95d20950d8e7edd1b982f4", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -262,6 +262,7 @@ extern \"rust-intrinsic\" {\n     /// A safe swap function:\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::mem;\n     /// use std::ptr;\n     ///\n@@ -301,6 +302,7 @@ extern \"rust-intrinsic\" {\n     /// Efficiently create a Rust vector from an unsafe buffer:\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::ptr;\n     ///\n     /// unsafe fn from_buf_raw<T>(ptr: *const T, elts: uint) -> Vec<T> {"}, {"sha": "5f5b8ef73ef54edf1702e92c64369b5e318a38d6", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -334,6 +334,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let xs = [100, 200, 300];\n     /// let mut it = xs.iter().cloned().peekable();\n     /// assert_eq!(*it.peek().unwrap(), 100);\n@@ -465,6 +466,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let xs = [2, 3];\n     /// let ys = [0, 1, 0, 1, 2];\n     /// let it = xs.iter().flat_map(|&x| std::iter::count(0, 1).take(x));\n@@ -521,6 +523,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::iter::AdditiveIterator;\n     ///\n     /// let a = [1, 4, 2, 3, 8, 9, 6];\n@@ -563,6 +566,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let a = [1, 2, 3, 4, 5];\n     /// let b: Vec<_> = a.iter().cloned().collect();\n     /// assert_eq!(a, b);\n@@ -579,6 +583,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// do not.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let vec = vec![1, 2, 3, 4];\n     /// let (even, odd): (Vec<_>, Vec<_>) = vec.into_iter().partition(|&n| n % 2 == 0);\n     /// assert_eq!(even, [2, 4]);\n@@ -648,6 +653,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert!(it.any(|x| *x == 3));\n@@ -668,6 +674,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert_eq!(it.find(|&x| *x == 3).unwrap(), &3);\n@@ -690,6 +697,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let a = [1, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert_eq!(it.position(|x| *x == 3).unwrap(), 2);\n@@ -718,6 +726,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let a = [1, 2, 2, 4, 5];\n     /// let mut it = a.iter();\n     /// assert_eq!(it.rposition(|x| *x == 2).unwrap(), 2);\n@@ -795,6 +804,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::iter::MinMaxResult::{NoElements, OneElement, MinMax};\n     ///\n     /// let a: [i32; 0] = [];\n@@ -860,7 +870,8 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n-    /// use core::num::SignedInt;\n+    /// # #![feature(core)]\n+    /// use std::num::SignedInt;\n     ///\n     /// let a = [-3, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().max_by(|x| x.abs()).unwrap(), -10);\n@@ -890,7 +901,8 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n-    /// use core::num::SignedInt;\n+    /// # #![feature(core)]\n+    /// use std::num::SignedInt;\n     ///\n     /// let a = [-3, 0, 1, 5, -10];\n     /// assert_eq!(*a.iter().min_by(|x| x.abs()).unwrap(), 0);\n@@ -940,6 +952,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let a = [(1, 2), (3, 4)];\n     /// let (left, right): (Vec<_>, Vec<_>) = a.iter().cloned().unzip();\n     /// assert_eq!([1, 3], left);\n@@ -1146,6 +1159,7 @@ pub trait AdditiveIterator<A> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::iter::AdditiveIterator;\n     ///\n     /// let a = [1, 2, 3, 4, 5];\n@@ -1188,6 +1202,7 @@ pub trait MultiplicativeIterator<A> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::iter::{count, MultiplicativeIterator};\n     ///\n     /// fn factorial(n: usize) -> usize {\n@@ -1248,6 +1263,7 @@ impl<T: Clone> MinMaxResult<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::iter::MinMaxResult::{self, NoElements, OneElement, MinMax};\n     ///\n     /// let r: MinMaxResult<i32> = NoElements;\n@@ -2292,6 +2308,7 @@ impl<I: RandomAccessIterator, F> RandomAccessIterator for Inspect<I, F>\n /// An iterator that yields sequential Fibonacci numbers, and stops on overflow.\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::iter::Unfold;\n /// use std::num::Int; // For `.checked_add()`\n ///\n@@ -2693,6 +2710,7 @@ pub struct RangeStepInclusive<A> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::iter::range_step_inclusive;\n ///\n /// for i in range_step_inclusive(0, 10, 2) {"}, {"sha": "6e82f0f854c6750068c880365b19299f3e8714c3", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -56,6 +56,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![doc(test(no_crate_inject))]\n \n #![feature(no_std)]\n #![no_std]"}, {"sha": "40e32f4171a2d509900ccc4f685374710dfbef1f", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -231,6 +231,7 @@ macro_rules! writeln {\n /// Iterators:\n ///\n /// ```\n+/// # #![feature(core)]\n /// fn divide_by_three(x: u32) -> u32 { // one of the poorest implementations of x/3\n ///     for i in std::iter::count(0, 1) {\n ///         if 3*i < i { panic!(\"u32 overflow\"); }"}, {"sha": "ae6bcc79539e17981e7300854dedb14f3a727671", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -319,6 +319,7 @@ impl<T:?Sized> MarkerTrait for T { }\n /// `MarkerTrait`:\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::marker::MarkerTrait;\n /// trait Even : MarkerTrait { }\n /// ```"}, {"sha": "d211b0f9928cd2db17e276f8c72611462ff97b5e", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -282,7 +282,8 @@ impl Float for f32 {\n     /// The fractional part of the number, satisfying:\n     ///\n     /// ```\n-    /// use core::num::Float;\n+    /// # #![feature(core)]\n+    /// use std::num::Float;\n     ///\n     /// let x = 1.65f32;\n     /// assert!(x == x.trunc() + x.fract())"}, {"sha": "1421fdd72f2335c09855183f991cedc228d9b754", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -289,7 +289,8 @@ impl Float for f64 {\n     /// The fractional part of the number, satisfying:\n     ///\n     /// ```\n-    /// use core::num::Float;\n+    /// # #![feature(core)]\n+    /// use std::num::Float;\n     ///\n     /// let x = 1.65f64;\n     /// assert!(x == x.trunc() + x.fract())"}, {"sha": "9ca7b48fbe5ef05b9a125ea7323266ce44cb0b4d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -85,6 +85,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// let n = 0b01001100u8;\n@@ -100,6 +101,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// let n = 0b01001100u8;\n@@ -119,6 +121,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// let n = 0b0101000u16;\n@@ -135,6 +138,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// let n = 0b0101000u16;\n@@ -151,6 +155,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// let n = 0x0123456789ABCDEFu64;\n@@ -168,6 +173,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// let n = 0x0123456789ABCDEFu64;\n@@ -392,6 +398,7 @@ pub trait Int\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Int;\n     ///\n     /// assert_eq!(2.pow(4), 16);\n@@ -787,6 +794,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b01001100u8;\n@@ -803,6 +811,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b01001100u8;\n@@ -822,6 +831,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b0101000u16;\n@@ -841,6 +851,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b0101000u16;\n@@ -860,6 +871,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0x0123456789ABCDEFu64;\n@@ -881,6 +893,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0x0123456789ABCDEFu64;\n@@ -1112,6 +1125,7 @@ macro_rules! int_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// assert_eq!(2.pow(4), 16);\n@@ -1277,6 +1291,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b01001100u8;\n@@ -1295,6 +1310,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b01001100u8;\n@@ -1314,6 +1330,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b0101000u16;\n@@ -1333,6 +1350,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0b0101000u16;\n@@ -1352,6 +1370,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0x0123456789ABCDEFu64;\n@@ -1375,6 +1394,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// let n = 0x0123456789ABCDEFu64;\n@@ -1606,6 +1626,7 @@ macro_rules! uint_impl {\n         /// # Examples\n         ///\n         /// ```rust\n+        /// # #![feature(core)]\n         /// use std::num::Int;\n         ///\n         /// assert_eq!(2.pow(4), 16);\n@@ -2266,6 +2287,7 @@ impl_from_primitive! { f64, to_f64 }\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::num;\n ///\n /// let twenty: f32 = num::cast(0x14).unwrap();"}, {"sha": "ecb060397ab2293ab02d3155f2c038f2f237ddbe", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -275,6 +275,7 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let mut x = Some(\"Diamonds\");\n     /// {\n     ///     let v = x.as_mut_slice();\n@@ -470,6 +471,7 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let x = Some(\"foo\");\n     /// assert_eq!(x.ok_or(0), Ok(\"foo\"));\n     ///\n@@ -491,6 +493,7 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let x = Some(\"foo\");\n     /// assert_eq!(x.ok_or_else(|| 0), Ok(\"foo\"));\n     ///\n@@ -532,6 +535,7 @@ impl<T> Option<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let mut x = Some(4);\n     /// match x.iter_mut().next() {\n     ///     Some(&mut ref mut v) => *v = 42,"}, {"sha": "c05dffb369682df4cbb69939f6a39faefe0fece3", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -52,6 +52,7 @@\n //! the raw pointer. It doesn't destroy `T` or deallocate any memory.\n //!\n //! ```\n+//! # #![feature(alloc)]\n //! use std::boxed;\n //!\n //! unsafe {\n@@ -70,6 +71,7 @@\n //! ## 3. Get it from C.\n //!\n //! ```\n+//! # #![feature(libc)]\n //! extern crate libc;\n //!\n //! use std::mem;"}, {"sha": "8502a9c53c4a88cc4a0b24fd3dc0d98e08eeca35", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -48,6 +48,7 @@ use mem;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::raw::{self, Repr};\n ///\n /// let slice: &[u16] = &[1, 2, 3, 4];\n@@ -106,6 +107,7 @@ pub struct Closure {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(core)]\n /// use std::mem;\n /// use std::raw;\n ///"}, {"sha": "a994590a395df5701e17512083a9f4caa70a2890", "filename": "src/libcore/result.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -95,6 +95,7 @@\n //! by the [`Writer`](../io/trait.Writer.html) trait:\n //!\n //! ```\n+//! # #![feature(old_io)]\n //! use std::old_io::IoError;\n //!\n //! trait Writer {\n@@ -110,6 +111,7 @@\n //! something like this:\n //!\n //! ```{.ignore}\n+//! # #![feature(old_io)]\n //! use std::old_io::*;\n //! use std::old_path::Path;\n //!\n@@ -129,6 +131,7 @@\n //! a marginally useful message indicating why:\n //!\n //! ```{.no_run}\n+//! # #![feature(old_io, old_path)]\n //! use std::old_io::*;\n //! use std::old_path::Path;\n //!\n@@ -140,6 +143,7 @@\n //! You might also simply assert success:\n //!\n //! ```{.no_run}\n+//! # #![feature(old_io, old_path)]\n //! # use std::old_io::*;\n //! # use std::old_path::Path;\n //!\n@@ -151,6 +155,7 @@\n //! Or propagate the error up the call stack with `try!`:\n //!\n //! ```\n+//! # #![feature(old_io, old_path)]\n //! # use std::old_io::*;\n //! # use std::old_path::Path;\n //! fn write_message() -> Result<(), IoError> {\n@@ -171,6 +176,7 @@\n //! It replaces this:\n //!\n //! ```\n+//! # #![feature(old_io, old_path)]\n //! use std::old_io::*;\n //! use std::old_path::Path;\n //!\n@@ -196,6 +202,7 @@\n //! With this:\n //!\n //! ```\n+//! # #![feature(old_io, old_path)]\n //! use std::old_io::*;\n //! use std::old_path::Path;\n //!\n@@ -411,6 +418,7 @@ impl<T, E> Result<T, E> {\n     /// Convert from `Result<T, E>` to `&mut [T]` (without copying)\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// let mut x: Result<&str, u32> = Ok(\"Gold\");\n     /// {\n     ///     let v = x.as_mut_slice();\n@@ -452,6 +460,7 @@ impl<T, E> Result<T, E> {\n     /// ignoring I/O and parse errors:\n     ///\n     /// ```\n+    /// # #![feature(old_io)]\n     /// use std::old_io::*;\n     ///\n     /// let mut buffer: &[u8] = b\"1\\n2\\n3\\n4\\n\";"}, {"sha": "21cff3021abea400af1831356fe2644b384e1bf0", "filename": "src/libcore/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsimd.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -19,7 +19,7 @@\n //! provided beyond this module.\n //!\n //! ```rust\n-//!\n+//! # #![feature(core)]\n //! fn main() {\n //!     use std::simd::f32x4;\n //!     let a = f32x4(40.0, 41.0, 42.0, 43.0);"}, {"sha": "b8e6a05f3da0d741a63355d0f22193f0acfe02cc", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -1491,6 +1491,7 @@ pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {\n /// # Examples\n ///\n /// ```\n+/// #![feature(core)]\n /// use std::slice;\n ///\n /// // manifest a slice out of thin air!"}, {"sha": "a5017c67ee4d63483371bb6bdea53c59eafb34c6", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -47,6 +47,7 @@\n //! which is cyclic.\n //!\n //! ```rust\n+//! # #![feature(rustc_private, core)]\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;\n@@ -148,6 +149,7 @@\n //! entity `&sube`).\n //!\n //! ```rust\n+//! # #![feature(rustc_private, core)]\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;\n@@ -205,6 +207,7 @@\n //! Hasse-diagram for the subsets of the set `{x, y}`.\n //!\n //! ```rust\n+//! # #![feature(rustc_private, core)]\n //! use std::borrow::IntoCow;\n //! use std::io::Write;\n //! use graphviz as dot;"}, {"sha": "41c782a2a464a5c90ffe24d22cf0a0e3a9c7d00b", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -5031,7 +5031,7 @@ pub mod funcs {\n                 ///\n                 /// # Examples\n                 ///\n-                /// ```no_run\n+                /// ```no_run,ignore\n                 /// extern crate libc;\n                 ///\n                 /// fn main() {"}, {"sha": "0c5f5cb0d444ee44962375c1b6a8818dde76b294", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -60,6 +60,7 @@ impl Rand for Exp1 {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{Exp, IndependentSample};\n ///"}, {"sha": "d04e83e84f7289e1a8cecbec01d1048bb1503b06", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -40,6 +40,7 @@ use super::{IndependentSample, Sample, Exp};\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{IndependentSample, Gamma};\n ///\n@@ -187,6 +188,7 @@ impl IndependentSample<f64> for GammaLargeShape {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{ChiSquared, IndependentSample};\n ///\n@@ -244,6 +246,7 @@ impl IndependentSample<f64> for ChiSquared {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{FisherF, IndependentSample};\n ///\n@@ -288,6 +291,7 @@ impl IndependentSample<f64> for FisherF {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{StudentT, IndependentSample};\n ///"}, {"sha": "5cafb8d2e5eae2ab6f61339c9f4f2c42536d75d8", "filename": "src/librand/distributions/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Fdistributions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Fdistributions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fmod.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -94,6 +94,7 @@ pub struct Weighted<T> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{Weighted, WeightedChoice, IndependentSample};\n ///"}, {"sha": "7cecc6ac611e2af1e6b587b03b2adaa228974f0b", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -76,6 +76,7 @@ impl Rand for StandardNormal {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{Normal, IndependentSample};\n ///\n@@ -124,6 +125,7 @@ impl IndependentSample<f64> for Normal {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::distributions::{LogNormal, IndependentSample};\n ///"}, {"sha": "e6f27a28ffa7ca118d7d6595c33afe8ae54b5b51", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -36,6 +36,7 @@ use distributions::{Sample, IndependentSample};\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand::distributions::{IndependentSample, Range};\n ///\n /// fn main() {"}, {"sha": "9f6399ff12dd659f792aa448eb1cb377456d06ca", "filename": "src/librand/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -149,6 +149,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand, core)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut v = [0; 13579];\n@@ -184,6 +185,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -202,6 +204,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -229,6 +232,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -247,6 +251,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -261,6 +266,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let s: String = thread_rng().gen_ascii_chars().take(10).collect();\n@@ -277,6 +283,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let choices = [1, 2, 4, 8, 16, 32];\n@@ -297,6 +304,7 @@ pub trait Rng : Sized {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand, core)]\n     /// use std::rand::{thread_rng, Rng};\n     ///\n     /// let mut rng = thread_rng();\n@@ -360,6 +368,7 @@ pub trait SeedableRng<Seed>: Rng {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{Rng, SeedableRng, StdRng};\n     ///\n     /// let seed: &[_] = &[1, 2, 3, 4];\n@@ -375,6 +384,7 @@ pub trait SeedableRng<Seed>: Rng {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rand)]\n     /// use std::rand::{Rng, SeedableRng, StdRng};\n     ///\n     /// let seed: &[_] = &[1, 2, 3, 4];\n@@ -480,6 +490,7 @@ impl Rand for XorShiftRng {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand::{random, Open01};\n ///\n /// let Open01(val) = random::<Open01<f32>>();\n@@ -497,6 +508,7 @@ pub struct Open01<F>(pub F);\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand::{random, Closed01};\n ///\n /// let Closed01(val) = random::<Closed01<f32>>();"}, {"sha": "95dd986d2e3c7be0556708349b6b55f3411ccdf5", "filename": "src/librand/reseeding.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Freseeding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrand%2Freseeding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Freseeding.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -103,6 +103,7 @@ impl<S, R: SeedableRng<S>, Rsdr: Reseeder<R> + Default>\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand::{Rng, SeedableRng, StdRng};\n /// use std::rand::reseeding::{Reseeder, ReseedingRng};\n ///"}, {"sha": "93a2a5d125778eeab36329aa661ec2dec366a926", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -33,6 +33,7 @@\n /// # Examples\n ///\n /// ```{.rust}\n+/// # #![feature(rustc_private)]\n /// #[macro_use] extern crate rustc_bitflags;\n ///\n /// bitflags! {\n@@ -59,6 +60,7 @@\n /// The generated `struct`s can also be extended with type and trait implementations:\n ///\n /// ```{.rust}\n+/// # #![feature(rustc_private)]\n /// #[macro_use] extern crate rustc_bitflags;\n ///\n /// use std::fmt;"}, {"sha": "0f645d2b8eadb1dd8f919848d375cc76ff8ec997", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -268,7 +268,7 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool,\n \n     // Don't inject `extern crate std` because it's already injected by the\n     // compiler.\n-    if !s.contains(\"extern crate\") && cratename != Some(\"std\") && inject_crate {\n+    if !s.contains(\"extern crate\") && inject_crate {\n         match cratename {\n             Some(cratename) => {\n                 if s.contains(cratename) {"}, {"sha": "e42aa1835dc4466e46e6429eaa292b801267bd54", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -32,6 +32,7 @@ impl ToHex for [u8] {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(rustc_private)]\n     /// extern crate serialize;\n     /// use serialize::hex::ToHex;\n     ///\n@@ -101,6 +102,7 @@ impl FromHex for str {\n     /// This converts a string literal to hexadecimal and back.\n     ///\n     /// ```\n+    /// # #![feature(rustc_private)]\n     /// extern crate serialize;\n     /// use serialize::hex::{FromHex, ToHex};\n     ///"}, {"sha": "a632306454e565fbfd4a57168c6b9079eeb0f9ec", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -538,6 +538,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::collections::HashMap;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -566,6 +567,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::collections::HashMap;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -981,6 +983,7 @@ impl<K, V, S> HashMap<K, V, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut a = HashMap::new();"}, {"sha": "3bc511f8a22399482ba2e804ea996b856fdf1c3c", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -145,6 +145,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::collections::HashSet;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -169,6 +170,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::collections::HashSet;\n     /// use std::collections::hash_map::RandomState;\n     ///\n@@ -295,6 +297,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n     /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n@@ -325,6 +328,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n     /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n@@ -351,6 +355,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n     /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n@@ -376,6 +381,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n     /// let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();\n@@ -458,6 +464,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     ///\n     /// let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -477,6 +484,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     ///\n     /// let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -498,6 +506,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     ///\n     /// let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();\n@@ -519,6 +528,7 @@ impl<T, S> HashSet<T, S>\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::collections::HashSet;\n     ///\n     /// let sub: HashSet<_> = [1, 2].iter().cloned().collect();"}, {"sha": "8d24f6b191659f622aa6379aa4dc968ed8a2e499", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -300,6 +300,7 @@\n //! #### Counting the number of times each character in a string occurs\n //!\n //! ```\n+//! # #![feature(collections)]\n //! use std::collections::btree_map::{BTreeMap, Entry};\n //!\n //! let mut count = BTreeMap::new();\n@@ -327,6 +328,7 @@\n //! #### Tracking the inebriation of customers at a bar\n //!\n //! ```\n+//! # #![feature(collections)]\n //! use std::collections::btree_map::{BTreeMap, Entry};\n //!\n //! // A client of the bar. They have an id and a blood alcohol level."}, {"sha": "96088003b9987ee495dd0cd31b63b7fd55365ade", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -44,6 +44,7 @@ use vec::Vec;\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(libc)]\n /// # extern crate libc;\n /// # fn main() {\n /// use std::ffi::CString;\n@@ -82,6 +83,7 @@ pub struct CString {\n /// Inspecting a foreign C string\n ///\n /// ```no_run\n+/// # #![feature(libc)]\n /// extern crate libc;\n /// use std::ffi::CStr;\n ///\n@@ -98,6 +100,7 @@ pub struct CString {\n /// Passing a Rust-originating C string\n ///\n /// ```no_run\n+/// # #![feature(libc)]\n /// extern crate libc;\n /// use std::ffi::{CString, CStr};\n ///\n@@ -144,6 +147,7 @@ impl CString {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(libc)]\n     /// extern crate libc;\n     /// use std::ffi::CString;\n     ///\n@@ -179,6 +183,7 @@ impl CString {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(libc)]\n     /// extern crate libc;\n     /// use std::ffi::CString;\n     ///\n@@ -329,6 +334,7 @@ impl CStr {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(libc)]\n     /// # extern crate libc;\n     /// # fn main() {\n     /// use std::ffi::CStr;"}, {"sha": "ba98e1ddd5573c66d1ec1b69de6f671ee0a66e56", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -633,6 +633,7 @@ pub fn remove_dir_all<P: AsPath>(path: P) -> io::Result<()> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(path_ext)]\n /// use std::io;\n /// use std::fs::{self, PathExt, DirEntry};\n /// use std::path::Path;\n@@ -771,6 +772,7 @@ pub fn set_file_times<P: AsPath>(path: P, accessed: u64,\n /// # Examples\n ///\n /// ```\n+/// # #![feature(fs)]\n /// # fn foo() -> std::io::Result<()> {\n /// use std::fs;\n ///"}, {"sha": "dc390b534b7d30f4496f47959b885d65f2388c78", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -105,6 +105,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n+#![doc(test(no_crate_inject))]\n \n #![feature(alloc)]\n #![feature(box_syntax)]"}, {"sha": "061c00329d20213acd00c3d6200e4857f3fe35a2", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -112,6 +112,7 @@ macro_rules! try {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(std_misc)]\n /// use std::thread;\n /// use std::sync::mpsc;\n ///"}, {"sha": "e8187dc2c402720453e8083195224bb6f4010d25", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -263,6 +263,7 @@ impl hash::Hash for SocketAddrV6 {\n /// Some examples:\n ///\n /// ```no_run\n+/// # #![feature(net)]\n /// use std::net::{SocketAddrV4, TcpStream, UdpSocket, TcpListener, Ipv4Addr};\n ///\n /// fn main() {"}, {"sha": "48b3247f2127abd143646e0243add745cb9129bd", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -91,6 +91,7 @@ impl Iterator for LookupHost {\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(net)]\n /// use std::net;\n ///\n /// # fn foo() -> std::io::Result<()> {"}, {"sha": "869faa795f9c3fb1c0cd506578ac26cc67360bb4", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -27,6 +27,7 @@ use sys_common::AsInner;\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(net)]\n /// use std::io::prelude::*;\n /// use std::net::TcpStream;\n ///\n@@ -46,6 +47,7 @@ pub struct TcpStream(net_imp::TcpStream);\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(net)]\n /// use std::net::{TcpListener, TcpStream};\n /// use std::thread;\n ///"}, {"sha": "e593bbe8e489b526e67eb1e94da25dd25c9d378d", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -27,6 +27,7 @@ use sys_common::AsInner;\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(net)]\n /// use std::net::UdpSocket;\n ///\n /// # fn foo() -> std::io::Result<()> {"}, {"sha": "a4f06f14d49df4d77a0a5de8f190d2d5928281c9", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -365,6 +365,7 @@ impl f32 {\n     /// Returns the `NaN` value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let nan: f32 = Float::nan();\n@@ -379,6 +380,7 @@ impl f32 {\n     /// Returns the infinite value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -396,6 +398,7 @@ impl f32 {\n     /// Returns the negative infinite value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -413,6 +416,7 @@ impl f32 {\n     /// Returns `0.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let inf: f32 = Float::infinity();\n@@ -431,6 +435,7 @@ impl f32 {\n     /// Returns `-0.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let inf: f32 = Float::infinity();\n@@ -449,6 +454,7 @@ impl f32 {\n     /// Returns `1.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let one: f32 = Float::one();\n@@ -525,6 +531,7 @@ impl f32 {\n     /// Returns the smallest finite value that this type can represent.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -548,6 +555,7 @@ impl f32 {\n     /// Returns the largest finite value that this type can represent.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -563,6 +571,7 @@ impl f32 {\n     /// Returns `true` if this value is `NaN` and false otherwise.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -580,6 +589,7 @@ impl f32 {\n     /// false otherwise.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -601,6 +611,7 @@ impl f32 {\n     /// Returns `true` if this number is neither infinite nor `NaN`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -623,6 +634,7 @@ impl f32 {\n     /// [subnormal][subnormal], or `NaN`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -650,6 +662,7 @@ impl f32 {\n     /// predicate instead.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::{Float, FpCategory};\n     /// use std::f32;\n     ///\n@@ -668,6 +681,7 @@ impl f32 {\n     /// The floating point encoding is documented in the [Reference][floating-point].\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let num = 2.0f32;\n@@ -770,6 +784,7 @@ impl f32 {\n     /// number is `Float::nan()`.\n     ///\n     /// ```\n+    /// # #![feature(core, std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -795,6 +810,7 @@ impl f32 {\n     /// - `Float::nan()` if the number is `Float::nan()`\n     ///\n     /// ```\n+    /// # #![feature(core, std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -856,6 +872,7 @@ impl f32 {\n     /// a separate multiplication operation followed by an add.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let m = 10.0;\n@@ -875,6 +892,7 @@ impl f32 {\n     /// Take the reciprocal (inverse) of a number, `1/x`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 2.0;\n@@ -922,6 +940,7 @@ impl f32 {\n     /// Returns NaN if `self` is a negative number.\n     ///\n     /// ```\n+    /// # #![feature(core, std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let positive = 4.0;\n@@ -940,6 +959,7 @@ impl f32 {\n     /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let f = 4.0;\n@@ -1061,6 +1081,7 @@ impl f32 {\n     /// Convert radians to degrees.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -1077,6 +1098,7 @@ impl f32 {\n     /// Convert degrees to radians.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -1093,6 +1115,7 @@ impl f32 {\n     /// Constructs a floating point number of `x*2^exp`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// // 3*2^2 - 12 == 0\n@@ -1114,6 +1137,7 @@ impl f32 {\n     ///  * `0.5 <= abs(x) < 1.0`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 4.0;\n@@ -1141,6 +1165,7 @@ impl f32 {\n     /// `other`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 1.0f32;\n@@ -1194,6 +1219,7 @@ impl f32 {\n     /// * Else: `self - other`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 3.0;\n@@ -1214,6 +1240,7 @@ impl f32 {\n     /// Take the cubic root of a number.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 8.0;\n@@ -1233,6 +1260,7 @@ impl f32 {\n     /// legs of length `x` and `y`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 2.0;\n@@ -1253,6 +1281,7 @@ impl f32 {\n     /// Computes the sine of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1271,6 +1300,7 @@ impl f32 {\n     /// Computes the cosine of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1289,6 +1319,7 @@ impl f32 {\n     /// Computes the tangent of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1308,6 +1339,7 @@ impl f32 {\n     /// [-1, 1].\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1329,6 +1361,7 @@ impl f32 {\n     /// [-1, 1].\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1372,6 +1405,7 @@ impl f32 {\n     /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1401,6 +1435,7 @@ impl f32 {\n     /// `(sin(x), cos(x))`.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1423,6 +1458,7 @@ impl f32 {\n     /// number is close to zero.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 7.0;\n@@ -1442,6 +1478,7 @@ impl f32 {\n     /// the operations were performed separately.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1461,6 +1498,7 @@ impl f32 {\n     /// Hyperbolic sine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1483,6 +1521,7 @@ impl f32 {\n     /// Hyperbolic cosine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1505,6 +1544,7 @@ impl f32 {\n     /// Hyperbolic tangent function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1527,6 +1567,7 @@ impl f32 {\n     /// Inverse hyperbolic sine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     ///\n     /// let x = 1.0;\n@@ -1548,6 +1589,7 @@ impl f32 {\n     /// Inverse hyperbolic cosine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     ///\n     /// let x = 1.0;\n@@ -1569,6 +1611,7 @@ impl f32 {\n     /// Inverse hyperbolic tangent function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///"}, {"sha": "9306804d1f787aa34f8345fd5595ffa4da96bf7f", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -374,6 +374,7 @@ impl f64 {\n     /// Returns the `NaN` value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let nan: f32 = Float::nan();\n@@ -388,6 +389,7 @@ impl f64 {\n     /// Returns the infinite value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -405,6 +407,7 @@ impl f64 {\n     /// Returns the negative infinite value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -422,6 +425,7 @@ impl f64 {\n     /// Returns `0.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let inf: f32 = Float::infinity();\n@@ -440,6 +444,7 @@ impl f64 {\n     /// Returns `-0.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let inf: f32 = Float::infinity();\n@@ -458,6 +463,7 @@ impl f64 {\n     /// Returns `1.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let one: f32 = Float::one();\n@@ -534,6 +540,7 @@ impl f64 {\n     /// Returns the smallest finite value that this type can represent.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -557,6 +564,7 @@ impl f64 {\n     /// Returns the largest finite value that this type can represent.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -572,6 +580,7 @@ impl f64 {\n     /// Returns `true` if this value is `NaN` and false otherwise.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -589,6 +598,7 @@ impl f64 {\n     /// false otherwise.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -610,6 +620,7 @@ impl f64 {\n     /// Returns `true` if this number is neither infinite nor `NaN`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -632,6 +643,7 @@ impl f64 {\n     /// [subnormal][subnormal], or `NaN`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -659,6 +671,7 @@ impl f64 {\n     /// predicate instead.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::{Float, FpCategory};\n     /// use std::f32;\n     ///\n@@ -677,6 +690,7 @@ impl f64 {\n     /// The floating point encoding is documented in the [Reference][floating-point].\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let num = 2.0f32;\n@@ -779,6 +793,7 @@ impl f64 {\n     /// number is `Float::nan()`.\n     ///\n     /// ```\n+    /// # #![feature(core, std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -804,6 +819,7 @@ impl f64 {\n     /// - `Float::nan()` if the number is `Float::nan()`\n     ///\n     /// ```\n+    /// # #![feature(core, std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -865,6 +881,7 @@ impl f64 {\n     /// a separate multiplication operation followed by an add.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let m = 10.0;\n@@ -884,6 +901,7 @@ impl f64 {\n     /// Take the reciprocal (inverse) of a number, `1/x`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 2.0;\n@@ -931,6 +949,7 @@ impl f64 {\n     /// Returns NaN if `self` is a negative number.\n     ///\n     /// ```\n+    /// # #![feature(core, std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let positive = 4.0;\n@@ -948,6 +967,7 @@ impl f64 {\n     /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let f = 4.0;\n@@ -1069,6 +1089,7 @@ impl f64 {\n     /// Convert radians to degrees.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -1085,6 +1106,7 @@ impl f64 {\n     /// Convert degrees to radians.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -1101,6 +1123,7 @@ impl f64 {\n     /// Constructs a floating point number of `x*2^exp`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// // 3*2^2 - 12 == 0\n@@ -1122,6 +1145,7 @@ impl f64 {\n     ///  * `0.5 <= abs(x) < 1.0`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 4.0;\n@@ -1149,6 +1173,7 @@ impl f64 {\n     /// `other`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 1.0f32;\n@@ -1202,6 +1227,7 @@ impl f64 {\n     /// * Else: `self - other`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 3.0;\n@@ -1222,6 +1248,7 @@ impl f64 {\n     /// Take the cubic root of a number.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 8.0;\n@@ -1241,6 +1268,7 @@ impl f64 {\n     /// legs of length `x` and `y`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 2.0;\n@@ -1261,6 +1289,7 @@ impl f64 {\n     /// Computes the sine of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1279,6 +1308,7 @@ impl f64 {\n     /// Computes the cosine of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1297,6 +1327,7 @@ impl f64 {\n     /// Computes the tangent of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1316,6 +1347,7 @@ impl f64 {\n     /// [-1, 1].\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1337,6 +1369,7 @@ impl f64 {\n     /// [-1, 1].\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1380,6 +1413,7 @@ impl f64 {\n     /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1409,6 +1443,7 @@ impl f64 {\n     /// `(sin(x), cos(x))`.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1431,6 +1466,7 @@ impl f64 {\n     /// number is close to zero.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 7.0;\n@@ -1450,6 +1486,7 @@ impl f64 {\n     /// the operations were performed separately.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1469,6 +1506,7 @@ impl f64 {\n     /// Hyperbolic sine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1491,6 +1529,7 @@ impl f64 {\n     /// Hyperbolic cosine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1513,6 +1552,7 @@ impl f64 {\n     /// Hyperbolic tangent function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1577,6 +1617,7 @@ impl f64 {\n     /// Inverse hyperbolic tangent function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///"}, {"sha": "b9e9433e3ee5addbd0ae3765286e817eb1bc7ba9", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -55,6 +55,7 @@ pub trait Float\n     /// Returns the `NaN` value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let nan: f32 = Float::nan();\n@@ -67,6 +68,7 @@ pub trait Float\n     /// Returns the infinite value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -82,6 +84,7 @@ pub trait Float\n     /// Returns the negative infinite value.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -97,6 +100,7 @@ pub trait Float\n     /// Returns `0.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let inf: f32 = Float::infinity();\n@@ -113,6 +117,7 @@ pub trait Float\n     /// Returns `-0.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let inf: f32 = Float::infinity();\n@@ -129,6 +134,7 @@ pub trait Float\n     /// Returns `1.0`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let one: f32 = Float::one();\n@@ -182,6 +188,7 @@ pub trait Float\n     /// Returns the smallest finite value that this type can represent.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -199,6 +206,7 @@ pub trait Float\n     /// Returns the largest finite value that this type can represent.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -211,6 +219,7 @@ pub trait Float\n     /// Returns `true` if this value is `NaN` and false otherwise.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -226,6 +235,7 @@ pub trait Float\n     /// false otherwise.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -245,6 +255,7 @@ pub trait Float\n     /// Returns `true` if this number is neither infinite nor `NaN`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -265,6 +276,7 @@ pub trait Float\n     /// [subnormal][subnormal], or `NaN`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f32;\n     ///\n@@ -291,6 +303,7 @@ pub trait Float\n     /// predicate instead.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::{Float, FpCategory};\n     /// use std::f32;\n     ///\n@@ -308,6 +321,7 @@ pub trait Float\n     /// The floating point encoding is documented in the [Reference][floating-point].\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let num = 2.0f32;\n@@ -399,6 +413,7 @@ pub trait Float\n     /// number is `Float::nan()`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -422,6 +437,7 @@ pub trait Float\n     /// - `Float::nan()` if the number is `Float::nan()`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -478,6 +494,7 @@ pub trait Float\n     /// a separate multiplication operation followed by an add.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let m = 10.0;\n@@ -495,6 +512,7 @@ pub trait Float\n     /// Take the reciprocal (inverse) of a number, `1/x`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 2.0;\n@@ -537,6 +555,7 @@ pub trait Float\n     /// Returns NaN if `self` is a negative number.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let positive = 4.0;\n@@ -553,6 +572,7 @@ pub trait Float\n     /// Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let f = 4.0;\n@@ -662,6 +682,7 @@ pub trait Float\n     /// Convert radians to degrees.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -676,6 +697,7 @@ pub trait Float\n     /// Convert degrees to radians.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64::consts;\n     ///\n@@ -690,6 +712,7 @@ pub trait Float\n     /// Constructs a floating point number of `x*2^exp`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// // 3*2^2 - 12 == 0\n@@ -707,6 +730,7 @@ pub trait Float\n     ///  * `0.5 <= abs(x) < 1.0`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 4.0;\n@@ -726,6 +750,7 @@ pub trait Float\n     /// `other`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 1.0f32;\n@@ -769,6 +794,7 @@ pub trait Float\n     /// * Else: `self - other`\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 3.0;\n@@ -785,6 +811,7 @@ pub trait Float\n     /// Take the cubic root of a number.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 8.0;\n@@ -800,6 +827,7 @@ pub trait Float\n     /// legs of length `x` and `y`.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 2.0;\n@@ -817,6 +845,7 @@ pub trait Float\n     /// Computes the sine of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -831,6 +860,7 @@ pub trait Float\n     /// Computes the cosine of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -845,6 +875,7 @@ pub trait Float\n     /// Computes the tangent of a number (in radians).\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -860,6 +891,7 @@ pub trait Float\n     /// [-1, 1].\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -877,6 +909,7 @@ pub trait Float\n     /// [-1, 1].\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -912,6 +945,7 @@ pub trait Float\n     /// * `y < 0`: `arctan(y/x) - pi` -> `(-pi, -pi/2)`\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -937,6 +971,7 @@ pub trait Float\n     /// `(sin(x), cos(x))`.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -956,6 +991,7 @@ pub trait Float\n     /// number is close to zero.\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::num::Float;\n     ///\n     /// let x = 7.0;\n@@ -971,6 +1007,7 @@ pub trait Float\n     /// the operations were performed separately.\n     ///\n     /// ```\n+    /// # #![feature(std_misc, core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -987,6 +1024,7 @@ pub trait Float\n     /// Hyperbolic sine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1005,6 +1043,7 @@ pub trait Float\n     /// Hyperbolic cosine function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1023,6 +1062,7 @@ pub trait Float\n     /// Hyperbolic tangent function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///\n@@ -1069,6 +1109,7 @@ pub trait Float\n     /// Inverse hyperbolic tangent function.\n     ///\n     /// ```\n+    /// # #![feature(core)]\n     /// use std::num::Float;\n     /// use std::f64;\n     ///"}, {"sha": "cb67d709a143ab6d289a8750ef65768cb28e302f", "filename": "src/libstd/old_io/buffered.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fbuffered.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -33,6 +33,7 @@ use vec::Vec;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n ///\n@@ -137,6 +138,7 @@ impl<R: Reader> Reader for BufferedReader<R> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n ///\n@@ -324,6 +326,7 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n /// use std::old_path::Path;"}, {"sha": "cd8252540dacce9eaa1ccc4445856479e4e27b45", "filename": "src/libstd/old_io/comm_adapters.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fcomm_adapters.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -23,6 +23,7 @@ use vec::Vec;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// use std::sync::mpsc::channel;\n /// use std::old_io::*;\n ///\n@@ -114,6 +115,7 @@ impl Reader for ChanReader {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, io)]\n /// # #![allow(unused_must_use)]\n /// use std::sync::mpsc::channel;\n /// use std::old_io::*;"}, {"sha": "40a7cce81dd01ebb8b85c7e481f30d0848612084", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -30,6 +30,7 @@\n //! # Examples\n //!\n //! ```rust\n+//! # #![feature(old_io, io, old_path)]\n //! # #![allow(unused_must_use)]\n //! use std::old_io::fs::PathExtensions;\n //! use std::old_io::*;\n@@ -105,6 +106,7 @@ impl File {\n     /// # Examples\n     ///\n     /// ```rust,should_fail\n+    /// # #![feature(old_io, old_path)]\n     /// use std::old_io::*;\n     /// use std::old_path::Path;\n     ///\n@@ -177,6 +179,7 @@ impl File {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, old_path)]\n     /// use std::old_io::*;\n     /// use std::old_path::Path;\n     ///\n@@ -197,6 +200,7 @@ impl File {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, old_path, io)]\n     /// # #![allow(unused_must_use)]\n     /// use std::old_io::*;\n     /// use std::old_path::Path;\n@@ -289,6 +293,7 @@ impl File {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n@@ -321,6 +326,7 @@ pub fn unlink(path: &Path) -> IoResult<()> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n ///\n@@ -364,6 +370,7 @@ pub fn lstat(path: &Path) -> IoResult<FileStat> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n@@ -393,6 +400,7 @@ pub fn rename(from: &Path, to: &Path) -> IoResult<()> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n@@ -444,6 +452,7 @@ pub fn copy(from: &Path, to: &Path) -> IoResult<()> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io;\n /// use std::old_io::*;\n@@ -516,6 +525,7 @@ pub fn readlink(path: &Path) -> IoResult<Path> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path, old_fs)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io;\n /// use std::old_io::*;\n@@ -541,6 +551,7 @@ pub fn mkdir(path: &Path, mode: FilePermission) -> IoResult<()> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n /// use std::old_path::Path;\n@@ -566,6 +577,7 @@ pub fn rmdir(path: &Path) -> IoResult<()> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, old_path)]\n /// use std::old_io::fs::PathExtensions;\n /// use std::old_io;\n /// use std::old_io::*;"}, {"sha": "d877a60b079d7f6c8b8e1f2986c6055ea1d22f67", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -54,6 +54,7 @@ impl Writer for Vec<u8> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, io)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n ///\n@@ -114,6 +115,7 @@ impl Writer for MemWriter {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n ///\n@@ -244,6 +246,7 @@ impl<'a> Buffer for &'a [u8] {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, io)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n ///\n@@ -316,6 +319,7 @@ impl<'a> Seek for BufWriter<'a> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// # #![allow(unused_must_use)]\n /// use std::old_io::*;\n ///"}, {"sha": "ac908c529dca661b0a6c2b70e59932919ff663ba", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -48,6 +48,7 @@\n //! * Read lines from stdin\n //!\n //!     ```rust\n+//!     # #![feature(old_io, old_path)]\n //!     use std::old_io as io;\n //!     use std::old_io::*;\n //!\n@@ -60,6 +61,7 @@\n //! * Read a complete file\n //!\n //!     ```rust\n+//!     # #![feature(old_io, old_path)]\n //!     use std::old_io::*;\n //!     use std::old_path::Path;\n //!\n@@ -69,6 +71,7 @@\n //! * Write a line to a file\n //!\n //!     ```rust\n+//!     # #![feature(old_io, old_path)]\n //!     # #![allow(unused_must_use)]\n //!     use std::old_io::*;\n //!     use std::old_path::Path;\n@@ -82,6 +85,7 @@\n //! * Iterate over the lines of a file\n //!\n //!     ```rust,no_run\n+//!     # #![feature(old_io, old_path)]\n //!     use std::old_io::*;\n //!     use std::old_path::Path;\n //!\n@@ -95,6 +99,7 @@\n //! * Pull the lines of a file into a vector of strings\n //!\n //!     ```rust,no_run\n+//!     # #![feature(old_io, old_path)]\n //!     use std::old_io::*;\n //!     use std::old_path::Path;\n //!\n@@ -106,6 +111,7 @@\n //! * Make a simple TCP client connection and request\n //!\n //!     ```rust\n+//!     # #![feature(old_io)]\n //!     # #![allow(unused_must_use)]\n //!     use std::old_io::*;\n //!\n@@ -122,6 +128,7 @@\n //! * Make a simple TCP server\n //!\n //!     ```rust\n+//!     # #![feature(old_io)]\n //!     # fn main() { }\n //!     # fn foo() {\n //!     # #![allow(dead_code)]\n@@ -186,6 +193,7 @@\n //! If you wanted to handle the error though you might write:\n //!\n //! ```rust\n+//! # #![feature(old_io, old_path)]\n //! # #![allow(unused_must_use)]\n //! use std::old_io::*;\n //! use std::old_path::Path;\n@@ -221,6 +229,7 @@\n //! If you wanted to read several `u32`s from a file and return their product:\n //!\n //! ```rust\n+//! # #![feature(old_io, old_path)]\n //! use std::old_io::*;\n //! use std::old_path::Path;\n //!\n@@ -948,6 +957,7 @@ unsafe fn slice_vec_capacity<'a, T>(v: &'a mut Vec<T>, start: uint, end: uint) -\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// use std::old_io as io;\n /// use std::old_io::*;\n /// use std::old_io::util::LimitReader;\n@@ -1282,6 +1292,7 @@ impl<'a> Writer for &'a mut (Writer+'a) {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// use std::old_io::util::TeeReader;\n /// use std::old_io::*;\n ///\n@@ -1407,6 +1418,7 @@ pub trait Buffer: Reader {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io)]\n     /// use std::old_io::*;\n     ///\n     /// let mut reader = BufReader::new(b\"hello\\nworld\");\n@@ -1631,6 +1643,7 @@ impl<'a, T, A: ?Sized + Acceptor<T>> Iterator for IncomingConnections<'a, A> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// use std::old_io as io;\n ///\n /// let eof = io::standard_error(io::EndOfFile);\n@@ -1719,6 +1732,7 @@ pub enum FileType {\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(old_io, old_path)]\n ///\n /// use std::old_io::fs::PathExtensions;\n /// use std::old_path::Path;"}, {"sha": "f7953ac51b8e63e74146211226cb64399b8e7477", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -414,6 +414,7 @@ pub struct ParseError;\n /// Some examples:\n ///\n /// ```rust,no_run\n+/// # #![feature(old_io, core)]\n /// # #![allow(unused_must_use)]\n ///\n /// use std::old_io::{TcpStream, TcpListener};"}, {"sha": "f9e5ae71e12e5b737e7d92a62b3c17ba70e7077d", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -54,6 +54,7 @@ impl UnixStream {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, old_path, io)]\n     /// # #![allow(unused_must_use)]\n     /// use std::old_io::net::pipe::UnixStream;\n     /// use std::old_io::*;\n@@ -181,6 +182,7 @@ impl UnixListener {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, io, old_path)]\n     /// # fn foo() {\n     /// use std::old_io::net::pipe::UnixListener;\n     /// use std::old_io::*;"}, {"sha": "75f786f0bb1e4d7271f4d5d312adabbecb116f58", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -41,6 +41,7 @@ use sys_common;\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(old_io, io)]\n /// use std::old_io::*;\n ///\n /// {\n@@ -133,6 +134,7 @@ impl TcpStream {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(old_io, std_misc)]\n     /// # #![allow(unused_must_use)]\n     /// use std::old_io::*;\n     /// use std::time::Duration;\n@@ -278,6 +280,7 @@ impl sys_common::AsInner<TcpStreamImp> for TcpStream {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// # fn foo() {\n /// use std::old_io::*;\n /// use std::thread;\n@@ -374,6 +377,7 @@ impl TcpAcceptor {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(old_io, io)]\n     /// use std::old_io::*;\n     ///\n     /// let mut a = TcpListener::bind(\"127.0.0.1:8482\").listen().unwrap();\n@@ -417,6 +421,7 @@ impl TcpAcceptor {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, io)]\n     /// use std::old_io::*;\n     /// use std::thread;\n     ///"}, {"sha": "3aa811974b3aa965364da836c355e9a5694a9516", "filename": "src/libstd/old_io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -31,6 +31,7 @@ use sys_common;\n /// # Examples\n ///\n /// ```rust,no_run\n+/// # #![feature(old_io)]\n /// # #![allow(unused_must_use)]\n ///\n /// use std::old_io::net::udp::UdpSocket;"}, {"sha": "0b555e2f0ff7e9c5eed72f11e3f135cc6c71070e", "filename": "src/libstd/old_io/pipe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fpipe.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -46,6 +46,7 @@ impl PipeStream {\n     /// # Examples\n     ///\n     /// ```{rust,no_run}\n+    /// # #![feature(old_io, libc, io)]\n     /// # #![allow(unused_must_use)]\n     /// extern crate libc;\n     ///"}, {"sha": "d7ede451fb8b79460b3916374ac59b4de9aad267", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -61,6 +61,7 @@ use thread;\n /// # Examples\n ///\n /// ```should_fail\n+/// # #![feature(old_io)]\n /// use std::old_io::*;\n ///\n /// let mut child = match Command::new(\"/bin/cat\").arg(\"file.txt\").spawn() {\n@@ -164,6 +165,7 @@ pub type EnvMap = HashMap<EnvKey, CString>;\n /// to be changed (for example, by adding arguments) prior to spawning:\n ///\n /// ```\n+/// # #![feature(old_io)]\n /// use std::old_io::*;\n ///\n /// let mut process = match Command::new(\"sh\").arg(\"-c\").arg(\"echo hello\").spawn() {\n@@ -365,6 +367,7 @@ impl Command {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, core)]\n     /// use std::old_io::Command;\n     ///\n     /// let output = match Command::new(\"cat\").arg(\"foot.txt\").output() {\n@@ -386,6 +389,7 @@ impl Command {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io)]\n     /// use std::old_io::Command;\n     ///\n     /// let status = match Command::new(\"ls\").status() {\n@@ -660,6 +664,7 @@ impl Process {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(old_io, io)]\n     /// use std::old_io::{Command, IoResult};\n     /// use std::old_io::process::ProcessExit;\n     ///"}, {"sha": "ef811f832b394133a47b69f3591624db41ed8160", "filename": "src/libstd/old_io/stdio.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fstdio.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -18,6 +18,7 @@\n //! # Examples\n //!\n //! ```rust\n+//! # #![feature(old_io)]\n //! # #![allow(unused_must_use)]\n //! use std::old_io;\n //! use std::old_io::*;\n@@ -140,6 +141,7 @@ impl StdinReader {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io)]\n     /// use std::old_io;\n     /// use std::old_io::*;\n     ///"}, {"sha": "c0f6ddaaef7cc3e7264ea3a465e6c34fcc72bff4", "filename": "src/libstd/old_io/tempfile.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftempfile.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -29,6 +29,7 @@ use string::String;\n /// # Examples\n ///\n /// ```no_run\n+/// # #![feature(old_io, old_path)]\n /// use std::old_io::*;\n /// use std::old_path::{Path, GenericPath};\n ///"}, {"sha": "f8cba0444433175b02a141ed88cdd62b234b81c5", "filename": "src/libstd/old_io/timer.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_io%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftimer.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -31,6 +31,7 @@ use sys::timer::Timer as TimerImp;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_io, std_misc)]\n /// # fn foo() {\n /// use std::old_io::Timer;\n /// use std::time::Duration;\n@@ -54,6 +55,7 @@ use sys::timer::Timer as TimerImp;\n /// the `old_io::timer` module.\n ///\n /// ```\n+/// # #![feature(old_io, std_misc)]\n /// # fn foo() {\n /// use std::old_io::timer;\n /// use std::time::Duration;\n@@ -116,6 +118,7 @@ impl Timer {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, std_misc)]\n     /// use std::old_io::Timer;\n     /// use std::time::Duration;\n     ///\n@@ -129,6 +132,7 @@ impl Timer {\n     /// ```\n     ///\n     /// ```\n+    /// # #![feature(old_io, std_misc)]\n     /// use std::old_io::Timer;\n     /// use std::time::Duration;\n     ///\n@@ -168,6 +172,7 @@ impl Timer {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_io, std_misc)]\n     /// use std::old_io::Timer;\n     /// use std::time::Duration;\n     ///\n@@ -187,6 +192,7 @@ impl Timer {\n     /// ```\n     ///\n     /// ```\n+    /// # #![feature(old_io, std_misc)]\n     /// use std::old_io::Timer;\n     /// use std::time::Duration;\n     ///"}, {"sha": "50bda04b5d0745c33ce30b2baab8b886e472923e", "filename": "src/libstd/old_path/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_path%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_path%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fmod.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -49,6 +49,7 @@\n //! ## Examples\n //!\n //! ```rust\n+//! # #![feature(old_path, old_io)]\n //! use std::old_io::fs::PathExtensions;\n //! use std::old_path::{Path, GenericPath};\n //!\n@@ -143,6 +144,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -168,6 +170,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -191,6 +194,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -209,6 +213,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -224,6 +229,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -240,6 +246,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -259,6 +266,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -277,6 +285,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -293,6 +302,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -313,6 +323,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -329,6 +340,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -349,6 +361,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -377,6 +390,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -398,6 +412,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -426,6 +441,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -445,6 +461,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -472,6 +489,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -523,6 +541,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -549,6 +568,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -574,6 +594,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -594,6 +615,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -610,6 +632,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -635,6 +658,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -665,6 +689,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -683,6 +708,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -709,6 +735,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -732,6 +759,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -750,6 +778,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -769,6 +798,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -789,6 +819,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}\n@@ -806,6 +837,7 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// # foo();\n     /// # #[cfg(windows)] fn foo() {}"}, {"sha": "4f367e3052673eb839b7f32ff656588a2d627b01", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -605,6 +605,7 @@ impl Path {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// println!(\"{}\", Path::new(r\"C:\\some\\path\").display());\n     /// ```\n@@ -620,6 +621,7 @@ impl Path {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(old_path)]\n     /// use std::old_path::{Path, GenericPath};\n     /// let path = Path::new_opt(r\"C:\\some\\path\");\n     ///"}, {"sha": "6296cd9554cce42bce7a82a914eb97b110a7d1ea", "filename": "src/libstd/os.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -125,6 +125,7 @@ pub const TMPBUF_SZ : uint = 1000;\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -146,6 +147,7 @@ pub fn getcwd() -> IoResult<Path> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os)]\n /// use std::os;\n ///\n /// // We will iterate through the references to the element returned by os::env();\n@@ -182,6 +184,7 @@ pub fn env_as_bytes() -> Vec<(Vec<u8>, Vec<u8>)> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os)]\n /// use std::os;\n ///\n /// let key = \"HOME\";\n@@ -224,6 +227,7 @@ fn byteify(s: OsString) -> Vec<u8> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os)]\n /// use std::os;\n ///\n /// let key = \"KEY\";\n@@ -265,6 +269,7 @@ pub fn unsetenv(n: &str) {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(old_path, os)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -298,6 +303,7 @@ pub fn split_paths<T: BytesContainer>(unparsed: T) -> Vec<Path> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path, core)]\n /// use std::os;\n /// use std::old_path::Path;\n ///\n@@ -359,6 +365,7 @@ pub fn dll_filename(base: &str) -> String {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -380,6 +387,7 @@ pub fn self_exe_name() -> Option<Path> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -410,6 +418,7 @@ pub fn self_exe_path() -> Option<Path> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -501,6 +510,7 @@ pub fn tmpdir() -> Path {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -533,6 +543,7 @@ pub fn make_absolute(p: &Path) -> IoResult<Path> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os, old_path)]\n /// use std::os;\n /// use std::old_path::{Path, GenericPath};\n ///\n@@ -555,6 +566,7 @@ pub fn errno() -> i32 {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os)]\n /// use std::os;\n ///\n /// // Same as println!(\"{}\", last_os_error());\n@@ -751,6 +763,7 @@ extern \"system\" {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(os)]\n /// use std::os;\n ///\n /// // Prints each argument on a separate line"}, {"sha": "656ca980624dcdcf9302693bbbbb11ed3e4cbae0", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -58,6 +58,7 @@\n //! # Examples\n //!\n //! ```rust\n+//! # #![feature(rand)]\n //! use std::rand;\n //! use std::rand::Rng;\n //!\n@@ -68,6 +69,7 @@\n //! ```\n //!\n //! ```rust\n+//! # #![feature(rand)]\n //! use std::rand;\n //!\n //! let tuple = rand::random::<(f64, char)>();\n@@ -92,6 +94,7 @@\n //! multiply this fraction by 4.\n //!\n //! ```\n+//! # #![feature(rand)]\n //! use std::rand;\n //! use std::rand::distributions::{IndependentSample, Range};\n //!\n@@ -134,6 +137,7 @@\n //! [Monty Hall Problem]: http://en.wikipedia.org/wiki/Monty_Hall_problem\n //!\n //! ```\n+//! # #![feature(rand)]\n //! use std::rand;\n //! use std::rand::Rng;\n //! use std::rand::distributions::{IndependentSample, Range};\n@@ -384,6 +388,7 @@ impl Rng for ThreadRng {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n ///\n /// let x: u8 = rand::random();\n@@ -400,6 +405,7 @@ impl Rng for ThreadRng {\n /// Caching the thread local random number generator:\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand;\n /// use std::rand::Rng;\n ///\n@@ -427,6 +433,7 @@ pub fn random<T: Rand>() -> T {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand)]\n /// use std::rand::{thread_rng, sample};\n ///\n /// let mut rng = thread_rng();"}, {"sha": "d3a8fa864fce39a0594f26cba18ffaba1dcb1cbb", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -24,6 +24,7 @@ use result::Result::{Ok, Err};\n /// # Examples\n ///\n /// ```\n+/// # #![feature(rand, old_io)]\n /// use std::rand::{reader, Rng};\n /// use std::old_io::MemReader;\n ///"}, {"sha": "69c5267ab69fccdbddf013277216c831b26d6170", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -69,6 +69,7 @@ pub struct Condvar { inner: Box<StaticCondvar> }\n /// # Examples\n ///\n /// ```\n+/// # #![feature(std_misc)]\n /// use std::sync::{StaticCondvar, CONDVAR_INIT};\n ///\n /// static CVAR: StaticCondvar = CONDVAR_INIT;"}, {"sha": "3c7fecb75153a9913473ff92f45cb835181a9497", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -14,6 +14,7 @@\n //! # Examples\n //!\n //! ```\n+//! # #![feature(std_misc)]\n //! use std::sync::Future;\n //!\n //! // a fake, for now"}, {"sha": "cb8acf14e13864c1f14dcedaa0ee54c345e3089c", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -119,6 +119,7 @@\n //! after 10 seconds no matter what:\n //!\n //! ```no_run\n+//! # #![feature(std_misc, old_io)]\n //! use std::sync::mpsc::channel;\n //! use std::old_io::timer::Timer;\n //! use std::time::Duration;\n@@ -143,6 +144,7 @@\n //! has been inactive for 5 seconds:\n //!\n //! ```no_run\n+//! # #![feature(std_misc, old_io)]\n //! use std::sync::mpsc::channel;\n //! use std::old_io::timer::Timer;\n //! use std::time::Duration;"}, {"sha": "0f936641cdc75bb5081f3bf63a09b3d9e8e58f39", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -27,6 +27,7 @@\n //! # Examples\n //!\n //! ```rust\n+//! # #![feature(std_misc)]\n //! use std::sync::mpsc::channel;\n //!\n //! let (tx1, rx1) = channel();\n@@ -119,6 +120,7 @@ impl Select {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// use std::sync::mpsc::Select;\n     ///\n     /// let select = Select::new();"}, {"sha": "2bf75cf1d3764c97ea0c89fba9e2bd206f6340f8", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -85,6 +85,7 @@ use fmt;\n /// To recover from a poisoned mutex:\n ///\n /// ```\n+/// # #![feature(std_misc)]\n /// use std::sync::{Arc, Mutex};\n /// use std::thread;\n ///\n@@ -136,6 +137,7 @@ unsafe impl<T: Send> Sync for Mutex<T> { }\n /// # Examples\n ///\n /// ```\n+/// # #![feature(std_misc)]\n /// use std::sync::{StaticMutex, MUTEX_INIT};\n ///\n /// static LOCK: StaticMutex = MUTEX_INIT;"}, {"sha": "6e94db6d7530c027a569bacbee71a9bb0b9c9401", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -77,6 +77,7 @@ unsafe impl<T: Send + Sync> Sync for RwLock<T> {}\n /// # Examples\n ///\n /// ```\n+/// # #![feature(std_misc)]\n /// use std::sync::{StaticRwLock, RW_LOCK_INIT};\n ///\n /// static LOCK: StaticRwLock = RW_LOCK_INIT;"}, {"sha": "059cce572459e61767cf4ae7235f96d6b7c77923", "filename": "src/libstd/sync/semaphore.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Fsemaphore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Fsemaphore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fsemaphore.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -25,6 +25,7 @@ use sync::{Mutex, Condvar};\n /// # Examples\n ///\n /// ```\n+/// # #![feature(std_misc)]\n /// use std::sync::Semaphore;\n ///\n /// // Create a semaphore that represents 5 resources"}, {"sha": "51cf70e615bcc17eb1619a794b61c64ea595e37f", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -61,6 +61,7 @@ impl<'a> Drop for Sentinel<'a> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(std_misc, core)]\n /// use std::sync::TaskPool;\n /// use std::iter::AdditiveIterator;\n /// use std::sync::mpsc::channel;"}, {"sha": "34b581f7fdaa793005564ad04962bc8dfb8bca8d", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -24,6 +24,7 @@\n //! # Examples\n //!\n //! ```\n+//! # #![feature(std_misc)]\n //! scoped_thread_local!(static FOO: u32);\n //!\n //! // Initially each scoped slot is empty.\n@@ -142,6 +143,7 @@ impl<T> Key<T> {\n     /// # Examples\n     ///\n     /// ```\n+    /// # #![feature(std_misc)]\n     /// scoped_thread_local!(static FOO: u32);\n     ///\n     /// FOO.set(&100, || {\n@@ -194,6 +196,7 @@ impl<T> Key<T> {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// # #![feature(std_misc)]\n     /// scoped_thread_local!(static FOO: u32);\n     ///\n     /// FOO.with(|slot| {"}, {"sha": "990ce769d9b0eb3c6270616c2e88354d3c8453bd", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -19,6 +19,7 @@\n //! # Examples\n //!\n //! ```no_run\n+//! # #![feature(rustc_private)]\n //! extern crate term;\n //!\n //! use std::io::prelude::*;"}, {"sha": "db5a25b9bedcaf9e2352a9284566ba2626e99c14", "filename": "src/libunicode/char.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibunicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibunicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fchar.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -209,6 +209,7 @@ pub trait CharExt {\n     /// In both of these examples, '\u00df' takes two bytes to encode.\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 2];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -219,6 +220,7 @@ pub trait CharExt {\n     /// A buffer that's too small:\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 1];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);\n@@ -241,6 +243,7 @@ pub trait CharExt {\n     /// In both of these examples, '\u00df' takes one `u16` to encode.\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 1];\n     ///\n     /// let result = '\u00df'.encode_utf16(&mut b);\n@@ -251,6 +254,7 @@ pub trait CharExt {\n     /// A buffer that's too small:\n     ///\n     /// ```\n+    /// # #![feature(unicode)]\n     /// let mut b = [0; 0];\n     ///\n     /// let result = '\u00df'.encode_utf8(&mut b);"}, {"sha": "6879fa7b3ba6834a7df0543d1aef4f6e560ff94b", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -35,6 +35,7 @@\n #![feature(no_std)]\n #![no_std]\n #![feature(core)]\n+#![doc(test(no_crate_inject))]\n \n extern crate core;\n "}, {"sha": "de3a593143e79191852a1d682cea733af46c5d63", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -481,19 +481,24 @@ impl<'a> Iterator for Utf16Items<'a> {\n /// # Examples\n ///\n /// ```\n+/// # #![feature(unicode)]\n+/// extern crate unicode;\n+///\n /// use unicode::str::Utf16Item::{ScalarValue, LoneSurrogate};\n ///\n-/// // \ud834\udd1emus<invalid>ic<invalid>\n-/// let v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n-///          0x0073, 0xDD1E, 0x0069, 0x0063,\n-///          0xD834];\n+/// fn main() {\n+///     // \ud834\udd1emus<invalid>ic<invalid>\n+///     let v = [0xD834, 0xDD1E, 0x006d, 0x0075,\n+///              0x0073, 0xDD1E, 0x0069, 0x0063,\n+///              0xD834];\n ///\n-/// assert_eq!(unicode::str::utf16_items(&v).collect::<Vec<_>>(),\n-///            vec![ScalarValue('\ud834\udd1e'),\n-///                 ScalarValue('m'), ScalarValue('u'), ScalarValue('s'),\n-///                 LoneSurrogate(0xDD1E),\n-///                 ScalarValue('i'), ScalarValue('c'),\n-///                 LoneSurrogate(0xD834)]);\n+///     assert_eq!(unicode::str::utf16_items(&v).collect::<Vec<_>>(),\n+///                vec![ScalarValue('\ud834\udd1e'),\n+///                     ScalarValue('m'), ScalarValue('u'), ScalarValue('s'),\n+///                     LoneSurrogate(0xDD1E),\n+///                     ScalarValue('i'), ScalarValue('c'),\n+///                     LoneSurrogate(0xD834)]);\n+/// }\n /// ```\n pub fn utf16_items<'a>(v: &'a [u16]) -> Utf16Items<'a> {\n     Utf16Items { iter : v.iter() }"}, {"sha": "509bee9def2731e2d65023c0fd98e1a4d35af415", "filename": "src/test/pretty/default-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Ftest%2Fpretty%2Fdefault-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9019101a82dd7f61dcdcd52bcc0123d5ed25d22/src%2Ftest%2Fpretty%2Fdefault-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fdefault-trait-impl.rs?ref=e9019101a82dd7f61dcdcd52bcc0123d5ed25d22", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(optin_builtin_traits)]\n+#![feature(optin_builtin_traits, core)]\n \n // pp-exact\n "}]}