{"sha": "b7cfb6a9ac1b59f62cfce2be6d09e45557af84d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Y2ZiNmE5YWMxYjU5ZjYyY2ZjZTJiZTZkMDllNDU1NTdhZjg0ZDU=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-05-23T12:11:28Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-05-23T12:15:29Z"}, "message": "Improve debugging", "tree": {"sha": "80945ca384a2e7522b48d6759dfaa222032363d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80945ca384a2e7522b48d6759dfaa222032363d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7cfb6a9ac1b59f62cfce2be6d09e45557af84d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cfb6a9ac1b59f62cfce2be6d09e45557af84d5", "html_url": "https://github.com/rust-lang/rust/commit/b7cfb6a9ac1b59f62cfce2be6d09e45557af84d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7cfb6a9ac1b59f62cfce2be6d09e45557af84d5/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b0a68f35a06fc7aed8aa95831df8eace4afffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b0a68f35a06fc7aed8aa95831df8eace4afffb", "html_url": "https://github.com/rust-lang/rust/commit/75b0a68f35a06fc7aed8aa95831df8eace4afffb"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "928d1f6a68abc43fedcbf9da4335a43ac4874f4f", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b7cfb6a9ac1b59f62cfce2be6d09e45557af84d5/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7cfb6a9ac1b59f62cfce2be6d09e45557af84d5/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=b7cfb6a9ac1b59f62cfce2be6d09e45557af84d5", "patch": "@@ -1066,10 +1066,9 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n         constructor: &Constructor<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> Self {\n-        debug!(\"Fields::wildcards({:#?}, {:?})\", constructor, ty);\n         let wildcard_from_ty = |ty| &*cx.pattern_arena.alloc(Pat::wildcard_from_ty(ty));\n \n-        match constructor {\n+        let ret = match constructor {\n             Single | Variant(_) => match ty.kind {\n                 ty::Tuple(ref fs) => {\n                     Fields::wildcards_from_tys(cx, fs.into_iter().map(|ty| ty.expect_ty()))\n@@ -1129,7 +1128,9 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n                 _ => bug!(\"bad slice pattern {:?} {:?}\", constructor, ty),\n             },\n             ConstantValue(..) | FloatRange(..) | IntRange(..) | NonExhaustive => Fields::empty(),\n-        }\n+        };\n+        debug!(\"Fields::wildcards({:?}, {:?}) = {:#?}\", constructor, ty, ret);\n+        ret\n     }\n \n     fn len(&self) -> usize {\n@@ -1870,7 +1871,7 @@ crate fn is_useful<'p, 'tcx>(\n \n     debug!(\"is_useful_expand_first_col: pcx={:#?}, expanding {:#?}\", pcx, v.head());\n \n-    if let Some(constructor) = pat_constructor(cx.tcx, cx.param_env, v.head()) {\n+    let ret = if let Some(constructor) = pat_constructor(cx.tcx, cx.param_env, v.head()) {\n         debug!(\"is_useful - expanding constructor: {:#?}\", constructor);\n         split_grouped_constructors(\n             cx.tcx,\n@@ -1901,11 +1902,11 @@ crate fn is_useful<'p, 'tcx>(\n \n         let used_ctors: Vec<Constructor<'_>> =\n             matrix.heads().filter_map(|p| pat_constructor(cx.tcx, cx.param_env, p)).collect();\n-        debug!(\"used_ctors = {:#?}\", used_ctors);\n+        debug!(\"is_useful_used_ctors = {:#?}\", used_ctors);\n         // `all_ctors` are all the constructors for the given type, which\n         // should all be represented (or caught with the wild pattern `_`).\n         let all_ctors = all_constructors(cx, pcx);\n-        debug!(\"all_ctors = {:#?}\", all_ctors);\n+        debug!(\"is_useful_all_ctors = {:#?}\", all_ctors);\n \n         // `missing_ctors` is the set of constructors from the same type as the\n         // first column of `matrix` that are matched only by wildcard patterns\n@@ -1920,7 +1921,7 @@ crate fn is_useful<'p, 'tcx>(\n         // can be big.\n         let missing_ctors = MissingConstructors::new(all_ctors, used_ctors);\n \n-        debug!(\"missing_ctors.empty()={:#?}\", missing_ctors.is_empty(),);\n+        debug!(\"is_useful_missing_ctors.empty()={:#?}\", missing_ctors.is_empty(),);\n \n         if missing_ctors.is_empty() {\n             let (all_ctors, _) = missing_ctors.into_inner();\n@@ -1988,7 +1989,9 @@ crate fn is_useful<'p, 'tcx>(\n                 usefulness.apply_missing_ctors(cx, pcx.ty, &missing_ctors)\n             }\n         }\n-    }\n+    };\n+    debug!(\"is_useful::returns({:#?}, {:#?}) = {:?}\", matrix, v, ret);\n+    ret\n }\n \n /// A shorthand for the `U(S(c, P), S(c, q))` operation from the paper. I.e., `is_useful` applied\n@@ -2647,7 +2650,10 @@ fn specialize_one_pattern<'p, 'tcx>(\n \n         PatKind::Or { .. } => bug!(\"Or-pattern should have been expanded earlier on.\"),\n     };\n-    debug!(\"specialize({:#?}, {:#?}) = {:#?}\", pat, ctor_wild_subpatterns, result);\n+    debug!(\n+        \"specialize({:#?}, {:#?}, {:#?}) = {:#?}\",\n+        pat, constructor, ctor_wild_subpatterns, result\n+    );\n \n     result\n }"}]}