{"sha": "bb40db7adc6c42fb675559b7ac92468ed416747f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNDBkYjdhZGM2YzQyZmI2NzU1NTliN2FjOTI0NjhlZDQxNjc0N2Y=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-10-16T11:26:02Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-02-10T10:57:28Z"}, "message": "Update test files", "tree": {"sha": "9dfb40efd83a5d82408082298770e58451bae514", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dfb40efd83a5d82408082298770e58451bae514"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb40db7adc6c42fb675559b7ac92468ed416747f", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmAjvBgACgkQHKDfKvWd\naKUhxxAAjVeFsVkYTwXnMuIvLzXBvJ5FCoEHZgN0dDwugJJ3g1yUeY8wjokmysfa\nAc8+jwDbRnZA5Qds0HUn400fKRGzN4Zu8Ss1jwip/1hRJfMKnEp0Oemn7f/DMXFN\nJwHR0/2RCRSJVUH8Q/+62LzfKkkucYkDmp/8xngw6UwNr/TbieV6MpbUZPCnvDY1\nV/ny9rWdJBa9N1AajJxBkmwJ3MNEW28/55Y74OWZ2VQYIgkD1c9+nQY+xQ65fmcL\nQtta1k6fknCIossygCGphpGRElQPtIgn3ft3owbDjAS2fzjSp+9KwAk6a7yoim6o\n2DwTiXSFErzcfbf3OxaZ623if0HaoxuGAY4eF2oHMWePcjMd+ORFL3af2yjFPOIT\nZEdU2dnutT+7Vv5dTRtOJ5i3oR0eMlP4FNLmBJP9VXFdQJnAbRrTEnqD5iOFfjkS\nuI50MD88zFaMFZxTt1uRkGQ7NUmHZA8NT1734WR+nqD1U6p/zGFnXzjPNfQ+VxYL\nSDhLx4kn9f/bOI7CIVIpW9MLt0wEFi+EYK8stRnRttx8fzd1qWEBxSIefsm5DsCg\nMvJXmq+ILCcSUq/3oAS6Ur2V4Gv/5HYzurykfgGLvSHxdW+CcpFnC72b2XB67uFU\nH+sXX+NRosmOkZlFflJKZ53nh+atVKeub1X9xQLHrSEZu7kFtJk=\n=7LVB\n-----END PGP SIGNATURE-----", "payload": "tree 9dfb40efd83a5d82408082298770e58451bae514\nparent ae2dd671f5003e6722ca4d18ef447141db237213\nauthor flip1995 <hello@philkrones.com> 1602847562 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1612954648 +0100\n\nUpdate test files\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb40db7adc6c42fb675559b7ac92468ed416747f", "html_url": "https://github.com/rust-lang/rust/commit/bb40db7adc6c42fb675559b7ac92468ed416747f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb40db7adc6c42fb675559b7ac92468ed416747f/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae2dd671f5003e6722ca4d18ef447141db237213", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2dd671f5003e6722ca4d18ef447141db237213", "html_url": "https://github.com/rust-lang/rust/commit/ae2dd671f5003e6722ca4d18ef447141db237213"}], "stats": {"total": 300, "additions": 208, "deletions": 92}, "files": [{"sha": "1632e6aca448dda4a926662d690ea8d5a479fa64", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 13, "deletions": 28, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bb40db7adc6c42fb675559b7ac92468ed416747f/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb40db7adc6c42fb675559b7ac92468ed416747f/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=bb40db7adc6c42fb675559b7ac92468ed416747f", "patch": "@@ -3,7 +3,7 @@\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n-#![allow(clippy::should_implement_trait, clippy::upper_case_acronyms)]\n+#![allow(clippy::should_implement_trait, clippy::upper_case_acronyms, clippy::from_over_into)]\n \n fn main() {}\n \n@@ -15,16 +15,13 @@ mod use_self {\n             Self {}\n         }\n         fn test() -> Self {\n-            // FIXME: applicable here\n-            Foo::new()\n+            Self::new()\n         }\n     }\n \n     impl Default for Foo {\n-        // FIXME: applicable here\n-        fn default() -> Foo {\n-            // FIXME: applicable here\n-            Foo::new()\n+        fn default() -> Self {\n+            Self::new()\n         }\n     }\n }\n@@ -74,13 +71,12 @@ mod lifetimes {\n \n mod issue2894 {\n     trait IntoBytes {\n-        #[allow(clippy::wrong_self_convention)]\n-        fn into_bytes(&self) -> Vec<u8>;\n+        fn to_bytes(&self) -> Vec<u8>;\n     }\n \n     // This should not be linted\n     impl IntoBytes for u8 {\n-        fn into_bytes(&self) -> Vec<u8> {\n+        fn to_bytes(&self) -> Vec<u8> {\n             vec![*self]\n         }\n     }\n@@ -90,11 +86,7 @@ mod existential {\n     struct Foo;\n \n     impl Foo {\n-        // FIXME:\n-        // TyKind::Def (used for `impl Trait` types) does not include type parameters yet.\n-        // See documentation in rustc_hir::hir::TyKind.\n-        // The hir tree walk stops at `impl Iterator` level and does not inspect &Foo.\n-        fn bad(foos: &[Self]) -> impl Iterator<Item = &Foo> {\n+        fn bad(foos: &[Self]) -> impl Iterator<Item = &Self> {\n             foos.iter()\n         }\n \n@@ -215,10 +207,8 @@ mod rustfix {\n         fn fun_1() {}\n \n         fn fun_2() {\n-            // FIXME: applicable here\n-            nested::A::fun_1();\n-            // FIXME: applicable here\n-            nested::A::A;\n+            Self::fun_1();\n+            Self::A;\n \n             Self {};\n         }\n@@ -239,8 +229,7 @@ mod issue3567 {\n \n     impl Test for TestStruct {\n         fn test() -> TestStruct {\n-            // FIXME: applicable here\n-            TestStruct::from_something()\n+            Self::from_something()\n         }\n     }\n }\n@@ -254,14 +243,12 @@ mod paths_created_by_lowering {\n         const A: usize = 0;\n         const B: usize = 1;\n \n-        // FIXME: applicable here\n-        async fn g() -> S {\n+        async fn g() -> Self {\n             Self {}\n         }\n \n         fn f<'a>(&self, p: &'a [u8]) -> &'a [u8] {\n-            // FIXME: applicable here twice\n-            &p[S::A..S::B]\n+            &p[Self::A..Self::B]\n         }\n     }\n \n@@ -381,7 +368,6 @@ mod issue4305 {\n \n     impl<T: Foo> From<T> for Box<dyn Foo> {\n         fn from(t: T) -> Self {\n-            // FIXME: applicable here\n             Box::new(t)\n         }\n     }\n@@ -461,8 +447,7 @@ mod nested_paths {\n \n     impl A<submod::C> {\n         fn test() -> Self {\n-            // FIXME: applicable here\n-            A::new::<submod::B>(submod::B {})\n+            Self::new::<submod::B>(submod::B {})\n         }\n     }\n }"}, {"sha": "bbe92c9e3386b5589bd16d8f3e21a2906fac28f2", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bb40db7adc6c42fb675559b7ac92468ed416747f/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb40db7adc6c42fb675559b7ac92468ed416747f/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=bb40db7adc6c42fb675559b7ac92468ed416747f", "patch": "@@ -3,7 +3,7 @@\n \n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n-#![allow(clippy::should_implement_trait, clippy::upper_case_acronyms)]\n+#![allow(clippy::should_implement_trait, clippy::upper_case_acronyms, clippy::from_over_into)]\n \n fn main() {}\n \n@@ -15,15 +15,12 @@ mod use_self {\n             Foo {}\n         }\n         fn test() -> Foo {\n-            // FIXME: applicable here\n             Foo::new()\n         }\n     }\n \n     impl Default for Foo {\n-        // FIXME: applicable here\n         fn default() -> Foo {\n-            // FIXME: applicable here\n             Foo::new()\n         }\n     }\n@@ -74,13 +71,12 @@ mod lifetimes {\n \n mod issue2894 {\n     trait IntoBytes {\n-        #[allow(clippy::wrong_self_convention)]\n-        fn into_bytes(&self) -> Vec<u8>;\n+        fn to_bytes(&self) -> Vec<u8>;\n     }\n \n     // This should not be linted\n     impl IntoBytes for u8 {\n-        fn into_bytes(&self) -> Vec<u8> {\n+        fn to_bytes(&self) -> Vec<u8> {\n             vec![*self]\n         }\n     }\n@@ -90,10 +86,6 @@ mod existential {\n     struct Foo;\n \n     impl Foo {\n-        // FIXME:\n-        // TyKind::Def (used for `impl Trait` types) does not include type parameters yet.\n-        // See documentation in rustc_hir::hir::TyKind.\n-        // The hir tree walk stops at `impl Iterator` level and does not inspect &Foo.\n         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n             foos.iter()\n         }\n@@ -215,9 +207,7 @@ mod rustfix {\n         fn fun_1() {}\n \n         fn fun_2() {\n-            // FIXME: applicable here\n             nested::A::fun_1();\n-            // FIXME: applicable here\n             nested::A::A;\n \n             nested::A {};\n@@ -239,7 +229,6 @@ mod issue3567 {\n \n     impl Test for TestStruct {\n         fn test() -> TestStruct {\n-            // FIXME: applicable here\n             TestStruct::from_something()\n         }\n     }\n@@ -254,13 +243,11 @@ mod paths_created_by_lowering {\n         const A: usize = 0;\n         const B: usize = 1;\n \n-        // FIXME: applicable here\n         async fn g() -> S {\n             S {}\n         }\n \n         fn f<'a>(&self, p: &'a [u8]) -> &'a [u8] {\n-            // FIXME: applicable here twice\n             &p[S::A..S::B]\n         }\n     }\n@@ -381,7 +368,6 @@ mod issue4305 {\n \n     impl<T: Foo> From<T> for Box<dyn Foo> {\n         fn from(t: T) -> Self {\n-            // FIXME: applicable here\n             Box::new(t)\n         }\n     }\n@@ -461,7 +447,6 @@ mod nested_paths {\n \n     impl A<submod::C> {\n         fn test() -> Self {\n-            // FIXME: applicable here\n             A::new::<submod::B>(submod::B {})\n         }\n     }"}, {"sha": "d86453eb2f0571114c39ec157c1dc4dc521e8ebb", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 103, "deletions": 37, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/bb40db7adc6c42fb675559b7ac92468ed416747f/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb40db7adc6c42fb675559b7ac92468ed416747f/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=bb40db7adc6c42fb675559b7ac92468ed416747f", "patch": "@@ -1,16 +1,16 @@\n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:15:13\n+  --> $DIR/use_self.rs:14:21\n    |\n-LL |             Foo {}\n-   |             ^^^ help: use the applicable keyword: `Self`\n+LL |         fn new() -> Foo {\n+   |                     ^^^ help: use the applicable keyword: `Self`\n    |\n    = note: `-D clippy::use-self` implied by `-D warnings`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:14:21\n+  --> $DIR/use_self.rs:15:13\n    |\n-LL |         fn new() -> Foo {\n-   |                     ^^^ help: use the applicable keyword: `Self`\n+LL |             Foo {}\n+   |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n   --> $DIR/use_self.rs:17:22\n@@ -19,116 +19,182 @@ LL |         fn test() -> Foo {\n    |                      ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:96:24\n+  --> $DIR/use_self.rs:18:13\n+   |\n+LL |             Foo::new()\n+   |             ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:23:25\n+   |\n+LL |         fn default() -> Foo {\n+   |                         ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:24:13\n+   |\n+LL |             Foo::new()\n+   |             ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:89:24\n    |\n LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n    |                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:111:13\n+  --> $DIR/use_self.rs:89:55\n+   |\n+LL |         fn bad(foos: &[Foo]) -> impl Iterator<Item = &Foo> {\n+   |                                                       ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:104:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:120:17\n+  --> $DIR/use_self.rs:112:25\n    |\n-LL |                 Foo {}\n-   |                 ^^^ help: use the applicable keyword: `Self`\n+LL |             fn new() -> Foo {\n+   |                         ^^^ help: use the applicable keyword: `Self`\n ...\n LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:119:25\n+  --> $DIR/use_self.rs:113:17\n    |\n-LL |             fn new() -> Foo {\n-   |                         ^^^ help: use the applicable keyword: `Self`\n+LL |                 Foo {}\n+   |                 ^^^ help: use the applicable keyword: `Self`\n ...\n LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:144:21\n-   |\n-LL |                     Bar { foo: Foo {} }\n-   |                     ^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:143:29\n+  --> $DIR/use_self.rs:136:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:156:13\n+  --> $DIR/use_self.rs:137:21\n    |\n-LL |             Foo {}\n-   |             ^^^ help: use the applicable keyword: `Self`\n+LL |                     Bar { foo: Foo {} }\n+   |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:155:21\n+  --> $DIR/use_self.rs:148:21\n    |\n LL |         fn baz() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:173:21\n+  --> $DIR/use_self.rs:149:13\n+   |\n+LL |             Foo {}\n+   |             ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:166:21\n    |\n LL |             let _ = Enum::B(42);\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:174:21\n+  --> $DIR/use_self.rs:167:21\n    |\n LL |             let _ = Enum::C { field: true };\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:175:21\n+  --> $DIR/use_self.rs:168:21\n    |\n LL |             let _ = Enum::A;\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:222:13\n+  --> $DIR/use_self.rs:210:13\n+   |\n+LL |             nested::A::fun_1();\n+   |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:211:13\n+   |\n+LL |             nested::A::A;\n+   |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:213:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:258:13\n+  --> $DIR/use_self.rs:232:13\n+   |\n+LL |             TestStruct::from_something()\n+   |             ^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:246:25\n+   |\n+LL |         async fn g() -> S {\n+   |                         ^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:247:13\n    |\n LL |             S {}\n    |             ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:287:13\n+  --> $DIR/use_self.rs:251:16\n    |\n-LL |             Foo { value }\n-   |             ^^^ help: use the applicable keyword: `Self`\n+LL |             &p[S::A..S::B]\n+   |                ^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:251:22\n+   |\n+LL |             &p[S::A..S::B]\n+   |                      ^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:286:29\n+  --> $DIR/use_self.rs:274:29\n    |\n LL |         fn foo(value: T) -> Foo<T> {\n    |                             ^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:324:21\n+  --> $DIR/use_self.rs:275:13\n+   |\n+LL |             Foo { value }\n+   |             ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:312:21\n    |\n LL |         type From = T::From;\n    |                     ^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:325:19\n+  --> $DIR/use_self.rs:313:19\n    |\n LL |         type To = T::To;\n    |                   ^^^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 20 previous errors\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:450:13\n+   |\n+LL |             A::new::<submod::B>(submod::B {})\n+   |             ^ help: use the applicable keyword: `Self`\n+\n+error: aborting due to 31 previous errors\n "}, {"sha": "9bcd692fb3511d805c24f6b49902eb31300936de", "filename": "tests/ui/use_self_trait.fixed", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb40db7adc6c42fb675559b7ac92468ed416747f/tests%2Fui%2Fuse_self_trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb40db7adc6c42fb675559b7ac92468ed416747f/tests%2Fui%2Fuse_self_trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.fixed?ref=bb40db7adc6c42fb675559b7ac92468ed416747f", "patch": "@@ -18,35 +18,36 @@ trait SelfTrait {\n struct Bad;\n \n impl SelfTrait for Bad {\n-    fn refs(p1: &Bad) -> &Bad {\n+    fn refs(p1: &Self) -> &Self {\n         p1\n     }\n \n-    fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n+    fn ref_refs<'a>(p1: &'a &'a Self) -> &'a &'a Self {\n         p1\n     }\n \n-    fn mut_refs(p1: &mut Bad) -> &mut Bad {\n+    fn mut_refs(p1: &mut Self) -> &mut Self {\n         p1\n     }\n \n-    fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n+    fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n \n-    fn vals(_: Bad) -> Bad {\n-        Bad::default()\n+    fn vals(_: Self) -> Self {\n+        Self::default()\n     }\n }\n \n impl Mul for Bad {\n     type Output = Self;\n \n-    fn mul(self, rhs: Bad) -> Bad {\n+    fn mul(self, rhs: Self) -> Self {\n         rhs\n     }\n }\n \n impl Clone for Bad {\n     fn clone(&self) -> Self {\n+        // FIXME: applicable here\n         Bad\n     }\n }"}, {"sha": "de305d40f330b1a4707995a0f286a844b6da0449", "filename": "tests/ui/use_self_trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb40db7adc6c42fb675559b7ac92468ed416747f/tests%2Fui%2Fuse_self_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb40db7adc6c42fb675559b7ac92468ed416747f/tests%2Fui%2Fuse_self_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.rs?ref=bb40db7adc6c42fb675559b7ac92468ed416747f", "patch": "@@ -47,6 +47,7 @@ impl Mul for Bad {\n \n impl Clone for Bad {\n     fn clone(&self) -> Self {\n+        // FIXME: applicable here\n         Bad\n     }\n }"}, {"sha": "55af3ff2a93d9af515ccfea3db0cf2afd2a0be11", "filename": "tests/ui/use_self_trait.stderr", "status": "modified", "additions": 80, "deletions": 2, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/bb40db7adc6c42fb675559b7ac92468ed416747f/tests%2Fui%2Fuse_self_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb40db7adc6c42fb675559b7ac92468ed416747f/tests%2Fui%2Fuse_self_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.stderr?ref=bb40db7adc6c42fb675559b7ac92468ed416747f", "patch": "@@ -1,10 +1,88 @@\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:21:18\n+   |\n+LL |     fn refs(p1: &Bad) -> &Bad {\n+   |                  ^^^ help: use the applicable keyword: `Self`\n+   |\n+   = note: `-D clippy::use-self` implied by `-D warnings`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:21:27\n+   |\n+LL |     fn refs(p1: &Bad) -> &Bad {\n+   |                           ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:25:33\n+   |\n+LL |     fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n+   |                                 ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:25:49\n+   |\n+LL |     fn ref_refs<'a>(p1: &'a &'a Bad) -> &'a &'a Bad {\n+   |                                                 ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:29:26\n+   |\n+LL |     fn mut_refs(p1: &mut Bad) -> &mut Bad {\n+   |                          ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:29:39\n+   |\n+LL |     fn mut_refs(p1: &mut Bad) -> &mut Bad {\n+   |                                       ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:33:24\n+   |\n+LL |     fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n+   |                        ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:33:42\n+   |\n+LL |     fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n+   |                                          ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:35:16\n+   |\n+LL |     fn vals(_: Bad) -> Bad {\n+   |                ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:35:24\n+   |\n+LL |     fn vals(_: Bad) -> Bad {\n+   |                        ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:36:9\n+   |\n+LL |         Bad::default()\n+   |         ^^^ help: use the applicable keyword: `Self`\n+\n error: unnecessary structure name repetition\n   --> $DIR/use_self_trait.rs:41:19\n    |\n LL |     type Output = Bad;\n    |                   ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:43:23\n    |\n-   = note: `-D clippy::use-self` implied by `-D warnings`\n+LL |     fn mul(self, rhs: Bad) -> Bad {\n+   |                       ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self_trait.rs:43:31\n+   |\n+LL |     fn mul(self, rhs: Bad) -> Bad {\n+   |                               ^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to previous error\n+error: aborting due to 14 previous errors\n "}]}