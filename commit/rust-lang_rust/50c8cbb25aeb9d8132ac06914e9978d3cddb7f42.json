{"sha": "50c8cbb25aeb9d8132ac06914e9978d3cddb7f42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYzhjYmIyNWFlYjlkODEzMmFjMDY5MTRlOTk3OGQzY2RkYjdmNDI=", "commit": {"author": {"name": "Chris Peterson", "email": "cpeterson@mozilla.com", "date": "2013-01-21T06:50:00Z"}, "committer": {"name": "Chris Peterson", "email": "cpeterson@mozilla.com", "date": "2013-01-21T06:56:45Z"}, "message": "doc: Fix tutorial-ffi xfail-tests and update SHA1() to use size_t", "tree": {"sha": "67bdd0957424f0b96dc5d9b04dc8c44bac3dc179", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67bdd0957424f0b96dc5d9b04dc8c44bac3dc179"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50c8cbb25aeb9d8132ac06914e9978d3cddb7f42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50c8cbb25aeb9d8132ac06914e9978d3cddb7f42", "html_url": "https://github.com/rust-lang/rust/commit/50c8cbb25aeb9d8132ac06914e9978d3cddb7f42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50c8cbb25aeb9d8132ac06914e9978d3cddb7f42/comments", "author": {"login": "cpeterso", "id": 629193, "node_id": "MDQ6VXNlcjYyOTE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/629193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpeterso", "html_url": "https://github.com/cpeterso", "followers_url": "https://api.github.com/users/cpeterso/followers", "following_url": "https://api.github.com/users/cpeterso/following{/other_user}", "gists_url": "https://api.github.com/users/cpeterso/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpeterso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpeterso/subscriptions", "organizations_url": "https://api.github.com/users/cpeterso/orgs", "repos_url": "https://api.github.com/users/cpeterso/repos", "events_url": "https://api.github.com/users/cpeterso/events{/privacy}", "received_events_url": "https://api.github.com/users/cpeterso/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cpeterso", "id": 629193, "node_id": "MDQ6VXNlcjYyOTE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/629193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpeterso", "html_url": "https://github.com/cpeterso", "followers_url": "https://api.github.com/users/cpeterso/followers", "following_url": "https://api.github.com/users/cpeterso/following{/other_user}", "gists_url": "https://api.github.com/users/cpeterso/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpeterso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpeterso/subscriptions", "organizations_url": "https://api.github.com/users/cpeterso/orgs", "repos_url": "https://api.github.com/users/cpeterso/repos", "events_url": "https://api.github.com/users/cpeterso/events{/privacy}", "received_events_url": "https://api.github.com/users/cpeterso/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b6487cf2c51945c7107f4ebf2b49e4c4e873043", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6487cf2c51945c7107f4ebf2b49e4c4e873043", "html_url": "https://github.com/rust-lang/rust/commit/0b6487cf2c51945c7107f4ebf2b49e4c4e873043"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "7b39dc2f198da5d7d35860aa26962a3b470bb9c2", "filename": "doc/tutorial-ffi.md", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/50c8cbb25aeb9d8132ac06914e9978d3cddb7f42/doc%2Ftutorial-ffi.md", "raw_url": "https://github.com/rust-lang/rust/raw/50c8cbb25aeb9d8132ac06914e9978d3cddb7f42/doc%2Ftutorial-ffi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-ffi.md?ref=50c8cbb25aeb9d8132ac06914e9978d3cddb7f42", "patch": "@@ -12,12 +12,12 @@ argument, which it then converts to a hexadecimal string and prints to\n standard output. If you have the OpenSSL libraries installed, it\n should compile and run without any extra effort.\n \n-~~~~ {.xfail-test}\n+~~~~\n extern mod std;\n-use libc::c_uint;\n+use libc::size_t;\n \n extern mod crypto {\n-    fn SHA1(src: *u8, sz: c_uint, out: *u8) -> *u8;\n+    fn SHA1(src: *u8, sz: size_t, out: *u8) -> *u8;\n }\n \n fn as_hex(data: ~[u8]) -> ~str {\n@@ -29,7 +29,7 @@ fn as_hex(data: ~[u8]) -> ~str {\n fn sha1(data: ~str) -> ~str unsafe {\n     let bytes = str::to_bytes(data);\n     let hash = crypto::SHA1(vec::raw::to_ptr(bytes),\n-                            vec::len(bytes) as c_uint, ptr::null());\n+                            vec::len(bytes) as size_t, ptr::null());\n     return as_hex(vec::from_buf(hash, 20));\n }\n \n@@ -43,9 +43,11 @@ fn main() {\n Before we can call the `SHA1` function defined in the OpenSSL library, we have\n to declare it. That is what this part of the program does:\n \n-~~~~ {.xfail-test}\n+~~~~\n+# use libc::size_t;\n extern mod crypto {\n-    fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8; }\n+    fn SHA1(src: *u8, sz: size_t, out: *u8) -> *u8;\n+}\n ~~~~\n \n An `extern` module declaration containing function signatures introduces the\n@@ -62,10 +64,11 @@ searches for the shared library with that name, and links the library into the\n program. If you want the module to have a different name from the actual\n library, you can use the `\"link_name\"` attribute, like:\n \n-~~~~ {.xfail-test}\n+~~~~\n+# use libc::size_t;\n #[link_name = \"crypto\"]\n extern mod something {\n-    fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8;\n+    fn SHA1(src: *u8, sz: size_t, out: *u8) -> *u8;\n }\n ~~~~\n \n@@ -94,9 +97,10 @@ calling conventions.\n \n The foreign `SHA1` function takes three arguments, and returns a pointer.\n \n-~~~~ {.xfail-test}\n+~~~~\n+# use libc::size_t;\n # extern mod crypto {\n-fn SHA1(src: *u8, sz: libc::c_uint, out: *u8) -> *u8;\n+fn SHA1(src: *u8, sz: size_t, out: *u8) -> *u8;\n # }\n ~~~~\n \n@@ -108,8 +112,8 @@ probably even worse, your code will work on one platform, but break on\n another.\n \n In this case, we declare that `SHA1` takes two `unsigned char*`\n-arguments and one `unsigned long`. The Rust equivalents are `*u8`\n-unsafe pointers and an `uint` (which, like `unsigned long`, is a\n+arguments and one `size_t`. The Rust equivalents are `*u8`\n+unsafe pointers and an `libc::size_t` (which, like `unsigned long`, is a\n machine-word-sized type).\n \n The standard library provides various functions to create unsafe pointers,\n@@ -124,14 +128,16 @@ The `sha1` function is the most obscure part of the program.\n \n ~~~~\n # pub mod crypto {\n-#   pub fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8 { out }\n+#   use libc::size_t;\n+#   pub fn SHA1(src: *u8, sz: size_t, out: *u8) -> *u8 { out }\n # }\n+# use libc::size_t;\n # fn as_hex(data: ~[u8]) -> ~str { ~\"hi\" }\n fn sha1(data: ~str) -> ~str {\n     unsafe {\n         let bytes = str::to_bytes(data);\n         let hash = crypto::SHA1(vec::raw::to_ptr(bytes),\n-                                vec::len(bytes), ptr::null());\n+                                vec::len(bytes) as size_t, ptr::null());\n         return as_hex(vec::from_buf(hash, 20));\n     }\n }\n@@ -169,14 +175,16 @@ Let's look at our `sha1` function again.\n \n ~~~~\n # pub mod crypto {\n-#     pub fn SHA1(src: *u8, sz: uint, out: *u8) -> *u8 { out }\n+#     use libc::size_t;\n+#     pub fn SHA1(src: *u8, sz: size_t, out: *u8) -> *u8 { out }\n # }\n+# use libc::size_t;\n # fn as_hex(data: ~[u8]) -> ~str { ~\"hi\" }\n # fn x(data: ~str) -> ~str {\n # unsafe {\n let bytes = str::to_bytes(data);\n let hash = crypto::SHA1(vec::raw::to_ptr(bytes),\n-                        vec::len(bytes), ptr::null());\n+                        vec::len(bytes) as size_t, ptr::null());\n return as_hex(vec::from_buf(hash, 20));\n # }\n # }"}]}