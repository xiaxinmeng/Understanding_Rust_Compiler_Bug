{"sha": "c09206899656f5730f8007dbc86385122c34a9ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOTIwNjg5OTY1NmY1NzMwZjgwMDdkYmM4NjM4NTEyMmMzNGE5Y2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-07T11:52:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-07T11:52:23Z"}, "message": "Auto merge of #5000 - JohnTitor:backticks, r=flip1995\n\nNormalize lint messages\n\nOn rustc diagnostics, we prefer to use backticks over `'`,  `\"`, or something else. I think we should follow their manner here.\nIn first commit, normalizes lint messages with backticks.\nIn second commit, updates all stderrs.\nIn third commit, updates descriptions on lintlist.\n\nchangelog: none", "tree": {"sha": "d685880d51bfcfa61b734aec5eaebdd821ad0b82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d685880d51bfcfa61b734aec5eaebdd821ad0b82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09206899656f5730f8007dbc86385122c34a9ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09206899656f5730f8007dbc86385122c34a9ca", "html_url": "https://github.com/rust-lang/rust/commit/c09206899656f5730f8007dbc86385122c34a9ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09206899656f5730f8007dbc86385122c34a9ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdccfe7bca7bc922503e40ca3e83a62bbfbaf0fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdccfe7bca7bc922503e40ca3e83a62bbfbaf0fd", "html_url": "https://github.com/rust-lang/rust/commit/fdccfe7bca7bc922503e40ca3e83a62bbfbaf0fd"}, {"sha": "abc49c31399bf694fe0b7ffc848cd89027a801c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc49c31399bf694fe0b7ffc848cd89027a801c2", "html_url": "https://github.com/rust-lang/rust/commit/abc49c31399bf694fe0b7ffc848cd89027a801c2"}], "stats": {"total": 1354, "additions": 680, "deletions": 674}, "files": [{"sha": "e2de7f8296e5129fdb91c818eed43e138c24b11b", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -209,7 +209,7 @@ fn lint_misrefactored_assign_op(\n                 db.span_suggestion(\n                     expr.span,\n                     &format!(\n-                        \"Did you mean {} = {} {} {} or {}? Consider replacing it with\",\n+                        \"Did you mean `{} = {} {} {}` or `{}`? Consider replacing it with\",\n                         snip_a,\n                         snip_a,\n                         op.node.as_str(),"}, {"sha": "c57061c0bfa9782f3f012363fbc2e53a4e4f9fa5", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -187,7 +187,7 @@ declare_clippy_lint! {\n     /// ```\n     pub DEPRECATED_CFG_ATTR,\n     complexity,\n-    \"usage of `cfg_attr(rustfmt)` instead of `tool_attributes`\"\n+    \"usage of `cfg_attr(rustfmt)` instead of tool attributes\"\n }\n \n declare_lint_pass!(Attributes => [\n@@ -449,7 +449,7 @@ fn check_attrs(cx: &LateContext<'_, '_>, span: Span, name: Name, attrs: &[Attrib\n                         EMPTY_LINE_AFTER_OUTER_ATTR,\n                         begin_of_attr_to_item,\n                         \"Found an empty line after an outer attribute. \\\n-                         Perhaps you forgot to add a '!' to make it an inner attribute?\",\n+                         Perhaps you forgot to add a `!` to make it an inner attribute?\",\n                     );\n                 }\n             }\n@@ -520,7 +520,7 @@ impl EarlyLintPass for DeprecatedCfgAttribute {\n                     cx,\n                     DEPRECATED_CFG_ATTR,\n                     attr.span,\n-                    \"`cfg_attr` is deprecated for rustfmt and got replaced by tool_attributes\",\n+                    \"`cfg_attr` is deprecated for rustfmt and got replaced by tool attributes\",\n                     \"use\",\n                     \"#[rustfmt::skip]\".to_string(),\n                     Applicability::MachineApplicable,"}, {"sha": "76b5c5d8f15d60cdfec957e104dd00ac213d96b6", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -68,8 +68,8 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n }\n \n const BRACED_EXPR_MESSAGE: &str = \"omit braces around single expression condition\";\n-const COMPLEX_BLOCK_MESSAGE: &str = \"in an 'if' condition, avoid complex blocks or closures with blocks; \\\n-                                     instead, move the block or closure higher and bind it with a 'let'\";\n+const COMPLEX_BLOCK_MESSAGE: &str = \"in an `if` condition, avoid complex blocks or closures with blocks; \\\n+                                     instead, move the block or closure higher and bind it with a `let`\";\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {"}, {"sha": "e34dfc9d9993665f8078cb0266165ef436a05e59", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -138,7 +138,7 @@ fn check_collapsible_no_if_let(cx: &EarlyContext<'_>, expr: &ast::Expr, check: &\n             if expr.span.ctxt() != inner.span.ctxt() {\n                 return;\n             }\n-            span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this if statement can be collapsed\", |db| {\n+            span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this `if` statement can be collapsed\", |db| {\n                 let lhs = Sugg::ast(cx, check, \"..\");\n                 let rhs = Sugg::ast(cx, check_inner, \"..\");\n                 db.span_suggestion("}, {"sha": "5d04286575ad8265f6dd15844569edc853b9ee39", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -38,7 +38,7 @@ declare_clippy_lint! {\n     /// ```\n     pub IFS_SAME_COND,\n     correctness,\n-    \"consecutive `ifs` with the same condition\"\n+    \"consecutive `if`s with the same condition\"\n }\n \n declare_clippy_lint! {\n@@ -85,7 +85,7 @@ declare_clippy_lint! {\n     /// ```\n     pub SAME_FUNCTIONS_IN_IF_CONDITION,\n     pedantic,\n-    \"consecutive `ifs` with the same function call\"\n+    \"consecutive `if`s with the same function call\"\n }\n \n declare_clippy_lint! {\n@@ -106,7 +106,7 @@ declare_clippy_lint! {\n     /// ```\n     pub IF_SAME_THEN_ELSE,\n     correctness,\n-    \"if with the same *then* and *else* blocks\"\n+    \"`if` with the same `then` and `else` blocks\"\n }\n \n declare_clippy_lint! {\n@@ -206,7 +206,7 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n             cx,\n             IFS_SAME_COND,\n             j.span,\n-            \"this `if` has the same condition as a previous if\",\n+            \"this `if` has the same condition as a previous `if`\",\n             i.span,\n             \"same as this\",\n         );\n@@ -234,7 +234,7 @@ fn lint_same_fns_in_if_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n             cx,\n             SAME_FUNCTIONS_IN_IF_CONDITION,\n             j.span,\n-            \"this `if` has the same function call as a previous if\",\n+            \"this `if` has the same function call as a previous `if`\",\n             i.span,\n             \"same as this\",\n         );\n@@ -300,7 +300,7 @@ fn lint_match_arms<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr<'_>) {\n                         db.span_note(\n                             i.body.span,\n                             &format!(\n-                                \"`{}` has the same arm body as the `_` wildcard, consider removing it`\",\n+                                \"`{}` has the same arm body as the `_` wildcard, consider removing it\",\n                                 lhs\n                             ),\n                         );"}, {"sha": "253d9b8d542fa64012d2b5a91a0506b86baca812", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -26,7 +26,7 @@ declare_clippy_lint! {\n     /// ```\n     pub DEFAULT_TRAIT_ACCESS,\n     pedantic,\n-    \"checks for literal calls to Default::default()\"\n+    \"checks for literal calls to `Default::default()`\"\n }\n \n declare_lint_pass!(DefaultTraitAccess => [DEFAULT_TRAIT_ACCESS]);\n@@ -62,7 +62,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n                                 cx,\n                                 DEFAULT_TRAIT_ACCESS,\n                                 expr.span,\n-                                &format!(\"Calling {} is more clear than this expression\", replacement),\n+                                &format!(\"Calling `{}` is more clear than this expression\", replacement),\n                                 \"try\",\n                                 replacement,\n                                 Applicability::Unspecified, // First resolve the TODO above"}, {"sha": "d8ce2fcf661a7c06795eae33bc7bf61566859b62", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -102,9 +102,9 @@ const DROP_REF_SUMMARY: &str = \"calls to `std::mem::drop` with a reference inste\n                                 Dropping a reference does nothing.\";\n const FORGET_REF_SUMMARY: &str = \"calls to `std::mem::forget` with a reference instead of an owned value. \\\n                                   Forgetting a reference does nothing.\";\n-const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that implements Copy. \\\n+const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that implements `Copy`. \\\n                                  Dropping a copy leaves the original intact.\";\n-const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements Copy. \\\n+const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements `Copy`. \\\n                                    Forgetting a copy leaves the original intact.\";\n \n declare_lint_pass!(DropForgetRef => [DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY]);\n@@ -137,7 +137,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n                                        expr.span,\n                                        &msg,\n                                        arg.span,\n-                                       &format!(\"argument has type {}\", arg_ty));\n+                                       &format!(\"argument has type `{}`\", arg_ty));\n                 } else if is_copy(cx, arg_ty) {\n                     if match_def_path(cx, def_id, &paths::DROP) {\n                         lint = DROP_COPY;"}, {"sha": "8043a8c855558194b83e0e44fa15b27eb3badedd", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -43,7 +43,7 @@ declare_clippy_lint! {\n     /// ```\n     pub ELSE_IF_WITHOUT_ELSE,\n     restriction,\n-    \"if expression with an `else if`, but without a final `else` branch\"\n+    \"`if` expression with an `else if`, but without a final `else` branch\"\n }\n \n declare_lint_pass!(ElseIfWithoutElse => [ELSE_IF_WITHOUT_ELSE]);\n@@ -60,7 +60,7 @@ impl EarlyLintPass for ElseIfWithoutElse {\n                     cx,\n                     ELSE_IF_WITHOUT_ELSE,\n                     els.span,\n-                    \"if expression with an `else if`, but without a final `else`\",\n+                    \"`if` expression with an `else if`, but without a final `else`\",\n                     \"add an `else` block here\",\n                 );\n             }"}, {"sha": "bd0e1ab290931f854b6f182641455e5639481c1c", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -46,9 +46,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessFormat {\n \n         // Operate on the only argument of `alloc::fmt::format`.\n         if let Some(sugg) = on_new_v1(cx, expr) {\n-            span_useless_format(cx, span, \"consider using .to_string()\", sugg);\n+            span_useless_format(cx, span, \"consider using `.to_string()`\", sugg);\n         } else if let Some(sugg) = on_new_v1_fmt(cx, expr) {\n-            span_useless_format(cx, span, \"consider using .to_string()\", sugg);\n+            span_useless_format(cx, span, \"consider using `.to_string()`\", sugg);\n         }\n     }\n }"}, {"sha": "a266d7c2434493b8404df3a5674a27ed1b25a349", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -61,7 +61,7 @@ impl EarlyLintPass for IfNotElse {\n                             IF_NOT_ELSE,\n                             item.span,\n                             \"Unnecessary boolean `not` operation\",\n-                            \"remove the `!` and swap the blocks of the if/else\",\n+                            \"remove the `!` and swap the blocks of the `if`/`else`\",\n                         );\n                     },\n                     ExprKind::Binary(ref kind, _, _) if kind.node == BinOpKind::Ne => {\n@@ -70,7 +70,7 @@ impl EarlyLintPass for IfNotElse {\n                             IF_NOT_ELSE,\n                             item.span,\n                             \"Unnecessary `!=` operation\",\n-                            \"change to `==` and swap the blocks of the if/else\",\n+                            \"change to `==` and swap the blocks of the `if`/`else`\",\n                         );\n                     },\n                     _ => (),"}, {"sha": "7ea329fae6b748d589d66351c96463758e42139e", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -51,7 +51,7 @@ fn lint(cx: &LateContext<'_, '_>, outer_span: Span, inner_span: Span, msg: &str)\n     let outer_span = outer_span.source_callsite();\n     let inner_span = inner_span.source_callsite();\n \n-    span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing return statement\", |db| {\n+    span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing `return` statement\", |db| {\n         if let Some(snippet) = snippet_opt(cx, inner_span) {\n             db.span_suggestion(\n                 outer_span,\n@@ -102,7 +102,7 @@ fn expr_match(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                     expr_match(cx, &arm.body);\n                 }\n             } else {\n-                expr_match(cx, &arms.first().expect(\"if let doesn't have a single arm\").body);\n+                expr_match(cx, &arms.first().expect(\"`if let` doesn't have a single arm\").body);\n             }\n         },\n         // skip if it already has a return statement"}, {"sha": "d70b45eaecb82590aca833a4e46cbbf9fb2a12b4", "filename": "clippy_lints/src/infallible_destructuring_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -38,7 +38,7 @@ declare_clippy_lint! {\n     /// ```\n     pub INFALLIBLE_DESTRUCTURING_MATCH,\n     style,\n-    \"a match statement with a single infallible arm instead of a `let`\"\n+    \"a `match` statement with a single infallible arm instead of a `let`\"\n }\n \n declare_lint_pass!(InfallibleDestructingMatch => [INFALLIBLE_DESTRUCTURING_MATCH]);\n@@ -61,7 +61,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InfallibleDestructingMatch {\n                     cx,\n                     INFALLIBLE_DESTRUCTURING_MATCH,\n                     local.span,\n-                    \"you seem to be trying to use match to destructure a single infallible pattern. \\\n+                    \"you seem to be trying to use `match` to destructure a single infallible pattern. \\\n                      Consider using `let`\",\n                     \"try this\",\n                     format!("}, {"sha": "9d7c3b46fed5678489f1e5206324f52c4a53f9f0", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -88,7 +88,7 @@ declare_clippy_lint! {\n     /// ```\n     pub INHERENT_TO_STRING_SHADOW_DISPLAY,\n     correctness,\n-    \"type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait \"\n+    \"type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait\"\n }\n \n declare_lint_pass!(InherentToString => [INHERENT_TO_STRING, INHERENT_TO_STRING_SHADOW_DISPLAY]);"}, {"sha": "d9dd13923604d62d74aa2979f718cf9178464fc7", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -32,7 +32,7 @@ declare_clippy_lint! {\n     /// ```\n     pub INT_PLUS_ONE,\n     complexity,\n-    \"instead of using x >= y + 1, use x > y\"\n+    \"instead of using `x >= y + 1`, use `x > y`\"\n }\n \n declare_lint_pass!(IntPlusOne => [INT_PLUS_ONE]);"}, {"sha": "eef583a6e6251ef87f365bf18c77058382bcd288", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -59,7 +59,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeStackArrays {\n                         self.maximum_allowed_size\n                     ),\n                     &format!(\n-                        \"consider allocating on the heap with vec!{}.into_boxed_slice()\",\n+                        \"consider allocating on the heap with `vec!{}.into_boxed_slice()`\",\n                         snippet(cx, expr.span, \"[...]\")\n                     ),\n                 );"}, {"sha": "7787a55a2bb68d7d22bce576a9b30d2d1d6f444f", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -27,7 +27,7 @@ declare_clippy_lint! {\n     /// ```\n     pub LET_UNDERSCORE_MUST_USE,\n     restriction,\n-    \"non-binding let on a #[must_use] expression\"\n+    \"non-binding let on a `#[must_use]` expression\"\n }\n \n declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE]);\n@@ -44,15 +44,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n                         cx,\n                         LET_UNDERSCORE_MUST_USE,\n                         stmt.span,\n-                        \"non-binding let on an expression with #[must_use] type\",\n+                        \"non-binding let on an expression with `#[must_use]` type\",\n                         \"consider explicitly using expression value\"\n                     )\n                 } else if is_must_use_func_call(cx, init) {\n                     span_help_and_lint(\n                         cx,\n                         LET_UNDERSCORE_MUST_USE,\n                         stmt.span,\n-                        \"non-binding let on a result of a #[must_use] function\",\n+                        \"non-binding let on a result of a `#[must_use]` function\",\n                         \"consider explicitly using function result\"\n                     )\n                 }"}, {"sha": "d63255408efe11d9f8c7aabf7cb93cfbada47a1a", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1353,7 +1353,7 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>, e\n                         EXPLICIT_INTO_ITER_LOOP,\n                         arg.span,\n                         \"it is more concise to loop over containers instead of using explicit \\\n-                         iteration methods`\",\n+                         iteration methods\",\n                         \"to write this more concisely, try\",\n                         object.to_string(),\n                         applicability,"}, {"sha": "ae2d0830128513a2e6d68c97cd9dea128b3e7ba6", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -112,7 +112,7 @@ fn lint_needless_cloning(cx: &LateContext<'_, '_>, root: Span, receiver: Span) {\n         MAP_CLONE,\n         root.trim_start(receiver).unwrap(),\n         \"You are needlessly cloning iterator elements\",\n-        \"Remove the map call\",\n+        \"Remove the `map` call\",\n         String::new(),\n         Applicability::MachineApplicable,\n     )"}, {"sha": "3855b5a21f99fcb66763bed4111ffe000edb8c3b", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -48,7 +48,7 @@ declare_clippy_lint! {\n     /// ```\n     pub OPTION_MAP_UNIT_FN,\n     complexity,\n-    \"using `option.map(f)`, where f is a function or closure that returns ()\"\n+    \"using `option.map(f)`, where `f` is a function or closure that returns `()`\"\n }\n \n declare_clippy_lint! {\n@@ -89,7 +89,7 @@ declare_clippy_lint! {\n     /// ```\n     pub RESULT_MAP_UNIT_FN,\n     complexity,\n-    \"using `result.map(f)`, where f is a function or closure that returns ()\"\n+    \"using `result.map(f)`, where `f` is a function or closure that returns `()`\"\n }\n \n declare_lint_pass!(MapUnit => [OPTION_MAP_UNIT_FN, RESULT_MAP_UNIT_FN]);\n@@ -199,7 +199,7 @@ fn let_binding_name(cx: &LateContext<'_, '_>, var_arg: &hir::Expr<'_>) -> String\n #[must_use]\n fn suggestion_msg(function_type: &str, map_type: &str) -> String {\n     format!(\n-        \"called `map(f)` on an {0} value where `f` is a unit {1}\",\n+        \"called `map(f)` on an `{0}` value where `f` is a unit {1}\",\n         map_type, function_type\n     )\n }"}, {"sha": "3200de1cfc1726ab79889a805dfd4889d7370d01", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -37,7 +37,7 @@ declare_clippy_lint! {\n     /// ```\n     pub SINGLE_MATCH,\n     style,\n-    \"a match statement with a single nontrivial arm (i.e., where the other arm is `_ => {}`) instead of `if let`\"\n+    \"a `match` statement with a single nontrivial arm (i.e., where the other arm is `_ => {}`) instead of `if let`\"\n }\n \n declare_clippy_lint! {\n@@ -76,7 +76,7 @@ declare_clippy_lint! {\n     /// ```\n     pub SINGLE_MATCH_ELSE,\n     pedantic,\n-    \"a match statement with two arms where the second arm's pattern is a placeholder instead of a specific match pattern\"\n+    \"a `match` statement with two arms where the second arm's pattern is a placeholder instead of a specific match pattern\"\n }\n \n declare_clippy_lint! {\n@@ -99,7 +99,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MATCH_REF_PATS,\n     style,\n-    \"a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\"\n+    \"a `match` or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\"\n }\n \n declare_clippy_lint! {\n@@ -133,7 +133,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MATCH_BOOL,\n     style,\n-    \"a match on a boolean expression instead of an `if..else` block\"\n+    \"a `match` on a boolean expression instead of an `if..else` block\"\n }\n \n declare_clippy_lint! {\n@@ -155,7 +155,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MATCH_OVERLAPPING_ARM,\n     style,\n-    \"a match with overlapping arms\"\n+    \"a `match` with overlapping arms\"\n }\n \n declare_clippy_lint! {\n@@ -177,7 +177,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MATCH_WILD_ERR_ARM,\n     style,\n-    \"a match with `Err(_)` arm and take drastic actions\"\n+    \"a `match` with `Err(_)` arm and take drastic actions\"\n }\n \n declare_clippy_lint! {\n@@ -198,7 +198,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MATCH_AS_REF,\n     complexity,\n-    \"a match on an Option value instead of using `as_ref()` or `as_mut`\"\n+    \"a `match` on an Option value instead of using `as_ref()` or `as_mut`\"\n }\n \n declare_clippy_lint! {\n@@ -407,7 +407,7 @@ fn check_match_bool(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>], e\n                         if let Some(sugg) = sugg {\n                             db.span_suggestion(\n                                 expr.span,\n-                                \"consider using an if/else expression\",\n+                                \"consider using an `if`/`else` expression\",\n                                 sugg,\n                                 Applicability::HasPlaceholders,\n                             );\n@@ -461,10 +461,10 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                         span_note_and_lint(cx,\n                                            MATCH_WILD_ERR_ARM,\n                                            arm.pat.span,\n-                                           \"Err(_) will match all errors, maybe not a good idea\",\n+                                           \"`Err(_)` will match all errors, maybe not a good idea\",\n                                            arm.pat.span,\n                                            \"to remove this warning, match each error separately \\\n-                                            or use unreachable macro\");\n+                                            or use `unreachable!` macro\");\n                     }\n                 }\n             }\n@@ -650,7 +650,7 @@ fn check_match_as_ref(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>],\n                 cx,\n                 MATCH_AS_REF,\n                 expr.span,\n-                &format!(\"use {}() instead\", suggestion),\n+                &format!(\"use `{}()` instead\", suggestion),\n                 \"try this\",\n                 format!(\n                     \"{}.{}(){}\","}, {"sha": "636c0f97578993eabac6eac3dbe5ff73a07f5458", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -25,7 +25,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MEM_DISCRIMINANT_NON_ENUM,\n     correctness,\n-    \"calling mem::descriminant on non-enum type\"\n+    \"calling `mem::descriminant` on non-enum type\"\n }\n \n declare_lint_pass!(MemDiscriminant => [MEM_DISCRIMINANT_NON_ENUM]);"}, {"sha": "4172ea33950c4bd183f4afb17a19f245aac71aee", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemForget {\n                         let forgot_ty = cx.tables.expr_ty(&args[0]);\n \n                         if forgot_ty.ty_adt_def().map_or(false, |def| def.has_dtor(cx.tcx)) {\n-                            span_lint(cx, MEM_FORGET, e.span, \"usage of mem::forget on Drop type\");\n+                            span_lint(cx, MEM_FORGET, e.span, \"usage of `mem::forget` on `Drop` type\");\n                         }\n                     }\n                 }"}, {"sha": "419522f0d27f74923ba007d04fb48699fa035c8a", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1828,7 +1828,7 @@ fn lint_clone_on_ref_ptr(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg: &h\n             cx,\n             CLONE_ON_REF_PTR,\n             expr.span,\n-            \"using '.clone()' on a ref-counted pointer\",\n+            \"using `.clone()` on a ref-counted pointer\",\n             \"try this\",\n             format!(\n                 \"{}::<{}>::clone(&{})\",\n@@ -2220,8 +2220,8 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hi\n             lint,\n             expr.span,\n             &format!(\n-                \"used unwrap() on {} value. If you don't want to handle the {} case gracefully, consider \\\n-                 using expect() to provide a better panic \\\n+                \"used `unwrap()` on `{}` value. If you don't want to handle the `{}` case gracefully, consider \\\n+                 using `expect()` to provide a better panic \\\n                  message\",\n                 kind, none_value\n             ),\n@@ -2247,7 +2247,7 @@ fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, expect_args: &[hi\n             lint,\n             expr.span,\n             &format!(\n-                \"used expect() on {} value. If this value is an {} it will panic\",\n+                \"used `expect()` on `{}` value. If this value is an `{}` it will panic\",\n                 kind, none_value\n             ),\n         );\n@@ -2268,7 +2268,7 @@ fn lint_ok_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, ok_args: &[hir\n                 cx,\n                 OK_EXPECT,\n                 expr.span,\n-                \"called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\",\n+                \"called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\",\n             );\n         }\n     }\n@@ -2286,7 +2286,7 @@ fn lint_map_flatten<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<\n         span_lint_and_then(cx, MAP_FLATTEN, expr.span, msg, |db| {\n             db.span_suggestion(\n                 expr.span,\n-                \"try using flat_map instead\",\n+                \"try using `flat_map` instead\",\n                 hint,\n                 Applicability::MachineApplicable,\n             );\n@@ -2320,10 +2320,10 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n \n         // lint message\n         let msg = if is_option {\n-            \"called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling \\\n+            \"called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling \\\n              `map_or_else(g, f)` instead\"\n         } else {\n-            \"called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling \\\n+            \"called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling \\\n              `.map_or_else(g, f)` instead\"\n         };\n         // get snippets for args to map() and unwrap_or_else()\n@@ -2380,15 +2380,15 @@ fn lint_map_or_none<'a, 'tcx>(\n \n         if map_or_arg_is_none {\n             // lint message\n-            let msg = \"called `map_or(None, f)` on an Option value. This can be done more directly by calling \\\n+            let msg = \"called `map_or(None, f)` on an `Option` value. This can be done more directly by calling \\\n                        `and_then(f)` instead\";\n             let map_or_self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n             let map_or_func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n             let hint = format!(\"{0}.and_then({1})\", map_or_self_snippet, map_or_func_snippet);\n             span_lint_and_then(cx, OPTION_MAP_OR_NONE, expr.span, msg, |db| {\n                 db.span_suggestion(\n                     expr.span,\n-                    \"try using and_then instead\",\n+                    \"try using `and_then` instead\",\n                     hint,\n                     Applicability::MachineApplicable, // snippet\n                 );\n@@ -2860,7 +2860,7 @@ fn lint_single_char_pattern<'a, 'tcx>(\n                 SINGLE_CHAR_PATTERN,\n                 arg.span,\n                 \"single-character string constant used as pattern\",\n-                \"try using a char instead\",\n+                \"try using a `char` instead\",\n                 hint,\n                 applicability,\n             );\n@@ -2928,7 +2928,7 @@ fn lint_into_iter(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, self_ref_ty: T\n             INTO_ITER_ON_REF,\n             method_span,\n             &format!(\n-                \"this .into_iter() call is equivalent to .{}() and will not move the {}\",\n+                \"this `.into_iter()` call is equivalent to `.{}()` and will not move the `{}`\",\n                 method_name, kind,\n             ),\n             \"call directly\","}, {"sha": "f440d864570effae25ae335700c8efdd1b808047", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -60,7 +60,7 @@ pub(super) fn lint<'a, 'tcx>(\n             \"map_or(a, f)\"\n         };\n         let msg = &format!(\n-            \"called `map(f).unwrap_or({})` on an Option value. \\\n+            \"called `map(f).unwrap_or({})` on an `Option` value. \\\n              This can be done more directly by calling `{}` instead\",\n             arg, suggest\n         );"}, {"sha": "749f6b9251512cb8b2810edf361d4217b75f5cfb", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MinMaxPass {\n                             cx,\n                             MIN_MAX,\n                             expr.span,\n-                            \"this min/max combination leads to constant result\",\n+                            \"this `min`/`max` combination leads to constant result\",\n                         );\n                     },\n                 }"}, {"sha": "6fd83cf6ac0fdcc57dfe1238a7e64ac96925749e", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -63,7 +63,7 @@ declare_clippy_lint! {\n     /// ```\n     pub CMP_NAN,\n     correctness,\n-    \"comparisons to NAN, which will always return false, probably not intended\"\n+    \"comparisons to `NAN`, which will always return false, probably not intended\"\n }\n \n declare_clippy_lint! {\n@@ -194,7 +194,7 @@ declare_clippy_lint! {\n     /// ```\n     pub ZERO_PTR,\n     style,\n-    \"using 0 as *{const, mut} T\"\n+    \"using `0 as *{const, mut} T`\"\n }\n \n declare_clippy_lint! {\n@@ -370,9 +370,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                         }\n                     }\n                     let (lint, msg) = if is_named_constant(cx, left) || is_named_constant(cx, right) {\n-                        (FLOAT_CMP_CONST, \"strict comparison of f32 or f64 constant\")\n+                        (FLOAT_CMP_CONST, \"strict comparison of `f32` or `f64` constant\")\n                     } else {\n-                        (FLOAT_CMP, \"strict comparison of f32 or f64\")\n+                        (FLOAT_CMP, \"strict comparison of `f32` or `f64`\")\n                     };\n                     span_lint_and_then(cx, lint, expr.span, msg, |db| {\n                         let lhs = Sugg::hir(cx, left, \"..\");\n@@ -388,7 +388,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                             ),\n                             Applicability::HasPlaceholders, // snippet\n                         );\n-                        db.span_note(expr.span, \"std::f32::EPSILON and std::f64::EPSILON are available.\");\n+                        db.span_note(expr.span, \"`std::f32::EPSILON` and `std::f64::EPSILON` are available.\");\n                     });\n                 } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n                     span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n@@ -456,7 +456,7 @@ fn check_nan(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cmp_expr: &Expr<'_>) {\n                     cx,\n                     CMP_NAN,\n                     cmp_expr.span,\n-                    \"doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\",\n+                    \"doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\",\n                 );\n             }\n         }"}, {"sha": "eb2a3220a04e8671928c9f7550db8a24f28e41fb", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n                 cx.tcx.sess.span_err(span, &err);\n             }\n         } else {\n-            span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a const_fn\");\n+            span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a `const fn`\");\n         }\n     }\n }"}, {"sha": "c25131c520cba775d97c9e8ba0e7d0ae0305fe61", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -54,7 +54,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MISSING_INLINE_IN_PUBLIC_ITEMS,\n     restriction,\n-    \"detects missing #[inline] attribute for public callables (functions, trait methods, methods...)\"\n+    \"detects missing `#[inline]` attribute for public callables (functions, trait methods, methods...)\"\n }\n \n fn check_missing_inline_attrs(cx: &LateContext<'_, '_>, attrs: &[ast::Attribute], sp: Span, desc: &'static str) {"}, {"sha": "27f598c141e11c835dc822e1acfe564e5713258f", "filename": "clippy_lints/src/mul_add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmul_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmul_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmul_add.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MulAddCheck {\n                             cx,\n                             MANUAL_MUL_ADD,\n                             expr.span,\n-                            \"consider using mul_add() for better numerical precision\",\n+                            \"consider using `mul_add()` for better numerical precision\",\n                             \"try\",\n                             format!(\n                                 \"{}.mul_add({}, {})\",\n@@ -94,7 +94,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MulAddCheck {\n                             cx,\n                             MANUAL_MUL_ADD,\n                             expr.span,\n-                            \"consider using mul_add() for better numerical precision\",\n+                            \"consider using `mul_add()` for better numerical precision\",\n                             \"try\",\n                             format!(\n                                 \"{}.mul_add({}, {})\","}, {"sha": "a64467ef6a241cb4a9e3538bdfc7873cb73b6c6c", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -47,7 +47,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MUTABLE_KEY_TYPE,\n     correctness,\n-    \"Check for mutable Map/Set key type\"\n+    \"Check for mutable `Map`/`Set` key type\"\n }\n \n declare_lint_pass!(MutableKeyType => [ MUTABLE_KEY_TYPE ]);"}, {"sha": "e04bd56e054f26c7cf2e4296ebf5ea4c2613b584", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -63,8 +63,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Mutex {\n                 let mutex_param = subst.type_at(0);\n                 if let Some(atomic_name) = get_atomic_name(mutex_param) {\n                     let msg = format!(\n-                        \"Consider using an {} instead of a Mutex here. If you just want the locking \\\n-                         behaviour and not the internal type, consider using Mutex<()>.\",\n+                        \"Consider using an `{}` instead of a `Mutex` here. If you just want the locking \\\n+                         behavior and not the internal type, consider using `Mutex<()>`.\",\n                         atomic_name\n                     );\n                     match mutex_param.kind {"}, {"sha": "78c121b6dd8afa20be37b3cf92be17e11537cd25", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n                     _ => (),\n                 }\n             } else {\n-                panic!(\"IfExpr 'then' node is not an ExprKind::Block\");\n+                panic!(\"IfExpr `then` node is not an `ExprKind::Block`\");\n             }\n         }\n     }"}, {"sha": "f35b84c449b20f51d9d5f1892fac19028e8bbe8b", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -274,15 +274,15 @@ struct LintData<'a> {\n     block_stmts: &'a [ast::Stmt],\n }\n \n-const MSG_REDUNDANT_ELSE_BLOCK: &str = \"This else block is redundant.\\n\";\n+const MSG_REDUNDANT_ELSE_BLOCK: &str = \"This `else` block is redundant.\\n\";\n \n const MSG_ELSE_BLOCK_NOT_NEEDED: &str = \"There is no need for an explicit `else` block for this `if` \\\n                                          expression\\n\";\n \n-const DROP_ELSE_BLOCK_AND_MERGE_MSG: &str = \"Consider dropping the else clause and merging the code that \\\n-                                             follows (in the loop) with the if block, like so:\\n\";\n+const DROP_ELSE_BLOCK_AND_MERGE_MSG: &str = \"Consider dropping the `else` clause and merging the code that \\\n+                                             follows (in the loop) with the `if` block, like so:\\n\";\n \n-const DROP_ELSE_BLOCK_MSG: &str = \"Consider dropping the else clause, and moving out the code in the else \\\n+const DROP_ELSE_BLOCK_MSG: &str = \"Consider dropping the `else` clause, and moving out the code in the `else` \\\n                                    block, like so:\\n\";\n \n fn emit_warning<'a>(ctx: &EarlyContext<'_>, data: &'a LintData<'_>, header: &str, typ: LintType) {"}, {"sha": "2a58f6c3dc25f52ea2d118a376f3ef8d9d37b88d", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -206,7 +206,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         if let ty::Adt(def, ..) = ty.kind {\n                             if let Some(span) = cx.tcx.hir().span_if_local(def.did) {\n                                 if cx.param_env.can_type_implement_copy(cx.tcx, ty).is_ok() {\n-                                    db.span_help(span, \"consider marking this type as Copy\");\n+                                    db.span_help(span, \"consider marking this type as `Copy`\");\n                                 }\n                             }\n                         }"}, {"sha": "6e77a7a77fa002de2bd3bd50a55208e159f97e40", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -21,7 +21,7 @@ declare_clippy_lint! {\n     /// ```\n     pub NEG_MULTIPLY,\n     style,\n-    \"multiplying integers with -1\"\n+    \"multiplying integers with `-1`\"\n }\n \n declare_lint_pass!(NegMultiply => [NEG_MULTIPLY]);\n@@ -48,7 +48,7 @@ fn check_mul(cx: &LateContext<'_, '_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_\n         if let Constant::Int(1) = consts::lit_to_constant(&l.node, cx.tables.expr_ty_opt(lit));\n         if cx.tables.expr_ty(exp).is_integral();\n         then {\n-            span_lint(cx, NEG_MULTIPLY, span, \"Negation by multiplying with -1\");\n+            span_lint(cx, NEG_MULTIPLY, span, \"Negation by multiplying with `-1`\");\n         }\n     }\n }"}, {"sha": "6ffad405c2a2db4aaacb1d2d179e9e2ad1b926c8", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -49,7 +49,7 @@ declare_clippy_lint! {\n     /// ```\n     pub DECLARE_INTERIOR_MUTABLE_CONST,\n     correctness,\n-    \"declaring const with interior mutability\"\n+    \"declaring `const` with interior mutability\"\n }\n \n declare_clippy_lint! {\n@@ -81,7 +81,7 @@ declare_clippy_lint! {\n     /// ```\n     pub BORROW_INTERIOR_MUTABLE_CONST,\n     correctness,\n-    \"referencing const with interior mutability\"\n+    \"referencing `const` with interior mutability\"\n }\n \n #[allow(dead_code)]\n@@ -98,12 +98,12 @@ impl Source {\n         match self {\n             Self::Item { item } | Self::Assoc { item, .. } => (\n                 DECLARE_INTERIOR_MUTABLE_CONST,\n-                \"a const item should never be interior mutable\",\n+                \"a `const` item should never be interior mutable\",\n                 *item,\n             ),\n             Self::Expr { expr } => (\n                 BORROW_INTERIOR_MUTABLE_CONST,\n-                \"a const item with interior mutability should not be borrowed\",\n+                \"a `const` item with interior mutability should not be borrowed\",\n                 *expr,\n             ),\n         }"}, {"sha": "f41ac30c4815ebe2998e9dbcc292cb4921839e4a", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -123,7 +123,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                         cx,\n                         NONSENSICAL_OPEN_OPTIONS,\n                         span,\n-                        \"the method \\\"create\\\" is called more than once\",\n+                        \"the method `create` is called more than once\",\n                     );\n                 } else {\n                     create = true\n@@ -136,7 +136,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                         cx,\n                         NONSENSICAL_OPEN_OPTIONS,\n                         span,\n-                        \"the method \\\"append\\\" is called more than once\",\n+                        \"the method `append` is called more than once\",\n                     );\n                 } else {\n                     append = true\n@@ -149,7 +149,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                         cx,\n                         NONSENSICAL_OPEN_OPTIONS,\n                         span,\n-                        \"the method \\\"truncate\\\" is called more than once\",\n+                        \"the method `truncate` is called more than once\",\n                     );\n                 } else {\n                     truncate = true\n@@ -162,7 +162,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                         cx,\n                         NONSENSICAL_OPEN_OPTIONS,\n                         span,\n-                        \"the method \\\"read\\\" is called more than once\",\n+                        \"the method `read` is called more than once\",\n                     );\n                 } else {\n                     read = true\n@@ -175,7 +175,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                         cx,\n                         NONSENSICAL_OPEN_OPTIONS,\n                         span,\n-                        \"the method \\\"write\\\" is called more than once\",\n+                        \"the method `write` is called more than once\",\n                     );\n                 } else {\n                     write = true\n@@ -190,15 +190,15 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n             cx,\n             NONSENSICAL_OPEN_OPTIONS,\n             span,\n-            \"file opened with \\\"truncate\\\" and \\\"read\\\"\",\n+            \"file opened with `truncate` and `read`\",\n         );\n     }\n     if append && truncate && append_arg && truncate_arg {\n         span_lint(\n             cx,\n             NONSENSICAL_OPEN_OPTIONS,\n             span,\n-            \"file opened with \\\"append\\\" and \\\"truncate\\\"\",\n+            \"file opened with `append` and `truncate`\",\n         );\n     }\n }"}, {"sha": "907a46846d07a60162aead762feb9fa7de60b1b0", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n                     cx,\n                     CMP_NULL,\n                     expr.span,\n-                    \"Comparing with null is better expressed by the .is_null() method\",\n+                    \"Comparing with null is better expressed by the `.is_null()` method\",\n                 );\n             }\n         }"}, {"sha": "a5e61da6740115c39cdf45e35255369251deae46", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n                          span_lint(cx,\n                                    RANGE_ZIP_WITH_LEN,\n                                    expr.span,\n-                                   &format!(\"It is more idiomatic to use {}.iter().enumerate()\",\n+                                   &format!(\"It is more idiomatic to use `{}.iter().enumerate()`\",\n                                             snippet(cx, iter_args[0].span, \"_\")));\n                     }\n                 }"}, {"sha": "ced784ca4917464838bd0afd28f417cdca4a15fa", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -154,15 +154,15 @@ impl Return {\n                     return;\n                 }\n \n-                span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |db| {\n                     if let Some(snippet) = snippet_opt(cx, inner_span) {\n                         db.span_suggestion(ret_span, \"remove `return`\", snippet, Applicability::MachineApplicable);\n                     }\n                 })\n             },\n             None => match replacement {\n                 RetReplacement::Empty => {\n-                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |db| {\n                         db.span_suggestion(\n                             ret_span,\n                             \"remove `return`\",\n@@ -172,7 +172,7 @@ impl Return {\n                     });\n                 },\n                 RetReplacement::Block => {\n-                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |db| {\n                         db.span_suggestion(\n                             ret_span,\n                             \"replace `return` with an empty block\",\n@@ -211,9 +211,9 @@ impl Return {\n                     cx,\n                     LET_AND_RETURN,\n                     retexpr.span,\n-                    \"returning the result of a let binding from a block\",\n+                    \"returning the result of a `let` binding from a block\",\n                     |err| {\n-                        err.span_label(local.span, \"unnecessary let binding\");\n+                        err.span_label(local.span, \"unnecessary `let` binding\");\n \n                         if let Some(snippet) = snippet_opt(cx, initexpr.span) {\n                             err.multipart_suggestion("}, {"sha": "9d211b7b93516708d919e732b47cd18478abc0d5", "filename": "clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -36,7 +36,7 @@ declare_clippy_lint! {\n     /// ```\n     ///\n     /// Will be converted to:\n-     /// ```rust\n+    /// ```rust\n     /// ///\n     /// /// Struct to hold two strings:\n     /// ///     - first        one"}, {"sha": "fadac06c10f62eb4cbd6c783c7c216055c78b06c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -141,7 +141,7 @@ declare_clippy_lint! {\n     /// ```\n     pub LINKEDLIST,\n     pedantic,\n-    \"usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque\"\n+    \"usage of LinkedList, usually a vector is faster, or a more specialized data structure like a `VecDeque`\"\n }\n \n declare_clippy_lint! {\n@@ -316,7 +316,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty<'_>, is_local: bool) {\n                         LINKEDLIST,\n                         hir_ty.span,\n                         \"I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n-                        \"a VecDeque might work\",\n+                        \"a `VecDeque` might work\",\n                     );\n                     return; // don't recurse into the type\n                 }\n@@ -464,7 +464,7 @@ declare_clippy_lint! {\n     /// ```\n     pub LET_UNIT_VALUE,\n     style,\n-    \"creating a let binding to a value of unit type, which usually can't be used afterwards\"\n+    \"creating a `let` binding to a value of unit type, which usually can't be used afterwards\"\n }\n \n declare_lint_pass!(LetUnitValue => [LET_UNIT_VALUE]);\n@@ -998,7 +998,7 @@ fn span_lossless_lint(cx: &LateContext<'_, '_>, expr: &Expr<'_>, op: &Expr<'_>,\n         CAST_LOSSLESS,\n         expr.span,\n         &format!(\n-            \"casting {} to {} may become silently lossy if you later change the type\",\n+            \"casting `{}` to `{}` may become silently lossy if you later change the type\",\n             cast_from, cast_to\n         ),\n         \"try\",\n@@ -1053,7 +1053,10 @@ fn check_loss_of_sign(cx: &LateContext<'_, '_>, expr: &Expr<'_>, op: &Expr<'_>,\n         cx,\n         CAST_SIGN_LOSS,\n         expr.span,\n-        &format!(\"casting {} to {} may lose the sign of the value\", cast_from, cast_to),\n+        &format!(\n+            \"casting `{}` to `{}` may lose the sign of the value\",\n+            cast_from, cast_to\n+        ),\n     );\n }\n \n@@ -1098,7 +1101,7 @@ fn check_truncation_and_wrapping(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cast\n             CAST_POSSIBLE_TRUNCATION,\n             expr.span,\n             &format!(\n-                \"casting {} to {} may truncate the value{}\",\n+                \"casting `{}` to `{}` may truncate the value{}\",\n                 cast_from,\n                 cast_to,\n                 match suffix_truncation {\n@@ -1115,7 +1118,7 @@ fn check_truncation_and_wrapping(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cast\n             CAST_POSSIBLE_WRAP,\n             expr.span,\n             &format!(\n-                \"casting {} to {} may wrap around the value{}\",\n+                \"casting `{}` to `{}` may wrap around the value{}\",\n                 cast_from,\n                 cast_to,\n                 match suffix_wrap {\n@@ -1194,7 +1197,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n                                 cx,\n                                 UNNECESSARY_CAST,\n                                 expr.span,\n-                                &format!(\"casting integer literal to {} is unnecessary\", cast_to),\n+                                &format!(\"casting integer literal to `{}` is unnecessary\", cast_to),\n                                 \"try\",\n                                 format!(\"{}_{}\", n, cast_to),\n                                 Applicability::MachineApplicable,\n@@ -1256,14 +1259,17 @@ fn lint_numeric_casts<'tcx>(\n                 cx,\n                 CAST_POSSIBLE_TRUNCATION,\n                 expr.span,\n-                &format!(\"casting {} to {} may truncate the value\", cast_from, cast_to),\n+                &format!(\"casting `{}` to `{}` may truncate the value\", cast_from, cast_to),\n             );\n             if !cast_to.is_signed() {\n                 span_lint(\n                     cx,\n                     CAST_SIGN_LOSS,\n                     expr.span,\n-                    &format!(\"casting {} to {} may lose the sign of the value\", cast_from, cast_to),\n+                    &format!(\n+                        \"casting `{}` to `{}` may lose the sign of the value\",\n+                        cast_from, cast_to\n+                    ),\n                 );\n             }\n         },\n@@ -1278,7 +1284,7 @@ fn lint_numeric_casts<'tcx>(\n                     cx,\n                     CAST_POSSIBLE_TRUNCATION,\n                     expr.span,\n-                    \"casting f64 to f32 may truncate the value\",\n+                    \"casting `f64` to `f32` may truncate the value\",\n                 );\n             }\n             if let (&ty::Float(FloatTy::F32), &ty::Float(FloatTy::F64)) = (&cast_from.kind, &cast_to.kind) {\n@@ -1550,7 +1556,7 @@ declare_clippy_lint! {\n     /// ```\n     pub CHAR_LIT_AS_U8,\n     complexity,\n-    \"casting a character literal to u8 truncates\"\n+    \"casting a character literal to `u8` truncates\"\n }\n \n declare_lint_pass!(CharLitAsU8 => [CHAR_LIT_AS_U8]);\n@@ -1742,15 +1748,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AbsurdExtremeComparisons {\n                         AlwaysFalse => \"this comparison is always false\".to_owned(),\n                         AlwaysTrue => \"this comparison is always true\".to_owned(),\n                         InequalityImpossible => format!(\n-                            \"the case where the two sides are not equal never occurs, consider using {} == {} \\\n+                            \"the case where the two sides are not equal never occurs, consider using `{} == {}` \\\n                              instead\",\n                             snippet(cx, lhs.span, \"lhs\"),\n                             snippet(cx, rhs.span, \"rhs\")\n                         ),\n                     };\n \n                     let help = format!(\n-                        \"because {} is the {} value for this type, {}\",\n+                        \"because `{}` is the {} value for this type, {}\",\n                         snippet(cx, culprit.expr.span, \"x\"),\n                         match culprit.which {\n                             Minimum => \"minimum\",\n@@ -1813,7 +1819,7 @@ impl FullInt {\n impl PartialEq for FullInt {\n     #[must_use]\n     fn eq(&self, other: &Self) -> bool {\n-        self.partial_cmp(other).expect(\"partial_cmp only returns Some(_)\") == Ordering::Equal\n+        self.partial_cmp(other).expect(\"`partial_cmp` only returns `Some(_)`\") == Ordering::Equal\n     }\n }\n \n@@ -1832,7 +1838,7 @@ impl Ord for FullInt {\n     #[must_use]\n     fn cmp(&self, other: &Self) -> Ordering {\n         self.partial_cmp(other)\n-            .expect(\"partial_cmp for FullInt can never return None\")\n+            .expect(\"`partial_cmp` for FullInt can never return `None`\")\n     }\n }\n \n@@ -2404,7 +2410,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RefToMut {\n                     cx,\n                     CAST_REF_TO_MUT,\n                     expr.span,\n-                    \"casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\",\n+                    \"casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\",\n                 );\n             }\n         }"}, {"sha": "008dc578bf905c7236b2dc5f072bf5f625df1d1b", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -66,7 +66,7 @@ fn unsafe_to_safe_check(old_name: Ident, new_name: Ident, cx: &EarlyContext<'_>,\n             UNSAFE_REMOVED_FROM_NAME,\n             span,\n             &format!(\n-                \"removed \\\"unsafe\\\" from the name of `{}` in use as `{}`\",\n+                \"removed `unsafe` from the name of `{}` in use as `{}`\",\n                 old_str, new_str\n             ),\n         );"}, {"sha": "7f127350ba92ac9c61a5798c55b42c3e2d945ddd", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -35,7 +35,7 @@ declare_clippy_lint! {\n     /// ```\n     pub UNNECESSARY_UNWRAP,\n     complexity,\n-    \"checks for calls of unwrap[_err]() that cannot fail\"\n+    \"checks for calls of `unwrap[_err]()` that cannot fail\"\n }\n \n declare_clippy_lint! {\n@@ -58,7 +58,7 @@ declare_clippy_lint! {\n     /// This code will always panic. The if condition should probably be inverted.\n     pub PANICKING_UNWRAP,\n     correctness,\n-    \"checks for calls of unwrap[_err]() that will always fail\"\n+    \"checks for calls of `unwrap[_err]()` that will always fail\"\n }\n \n /// Visitor that keeps track of which variables are unwrappable."}, {"sha": "11cc594fb5dc56e55b37427f30a5b5b65c177268", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -20,7 +20,7 @@ declare_clippy_lint! {\n     /// ```\n     pub ZERO_DIVIDED_BY_ZERO,\n     complexity,\n-    \"usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\"\n+    \"usage of `0.0 / 0.0` to obtain NaN instead of `std::f32::NAN` or `std::f64::NAN`\"\n }\n \n declare_lint_pass!(ZeroDiv => [ZERO_DIVIDED_BY_ZERO]);\n@@ -50,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ZeroDiv {\n                     cx,\n                     ZERO_DIVIDED_BY_ZERO,\n                     expr.span,\n-                    \"constant division of 0.0 with 0.0 will always result in NaN\",\n+                    \"constant division of `0.0` with `0.0` will always result in NaN\",\n                     &format!(\n                         \"Consider using `std::{}::NAN` if you would like a constant representing NaN\",\n                         float_type,"}, {"sha": "1086f5e48f9ad728db69e0a607cebdf63b7a4987", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -87,7 +87,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"borrow_interior_mutable_const\",\n         group: \"correctness\",\n-        desc: \"referencing const with interior mutability\",\n+        desc: \"referencing `const` with interior mutability\",\n         deprecation: None,\n         module: \"non_copy_const\",\n     },\n@@ -178,7 +178,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"char_lit_as_u8\",\n         group: \"complexity\",\n-        desc: \"casting a character literal to u8 truncates\",\n+        desc: \"casting a character literal to `u8` truncates\",\n         deprecation: None,\n         module: \"types\",\n     },\n@@ -227,7 +227,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"cmp_nan\",\n         group: \"correctness\",\n-        desc: \"comparisons to NAN, which will always return false, probably not intended\",\n+        desc: \"comparisons to `NAN`, which will always return false, probably not intended\",\n         deprecation: None,\n         module: \"misc\",\n     },\n@@ -304,21 +304,21 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"declare_interior_mutable_const\",\n         group: \"correctness\",\n-        desc: \"declaring const with interior mutability\",\n+        desc: \"declaring `const` with interior mutability\",\n         deprecation: None,\n         module: \"non_copy_const\",\n     },\n     Lint {\n         name: \"default_trait_access\",\n         group: \"pedantic\",\n-        desc: \"checks for literal calls to Default::default()\",\n+        desc: \"checks for literal calls to `Default::default()`\",\n         deprecation: None,\n         module: \"default_trait_access\",\n     },\n     Lint {\n         name: \"deprecated_cfg_attr\",\n         group: \"complexity\",\n-        desc: \"usage of `cfg_attr(rustfmt)` instead of `tool_attributes`\",\n+        desc: \"usage of `cfg_attr(rustfmt)` instead of tool attributes\",\n         deprecation: None,\n         module: \"attrs\",\n     },\n@@ -423,7 +423,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"else_if_without_else\",\n         group: \"restriction\",\n-        desc: \"if expression with an `else if`, but without a final `else` branch\",\n+        desc: \"`if` expression with an `else if`, but without a final `else` branch\",\n         deprecation: None,\n         module: \"else_if_without_else\",\n     },\n@@ -710,14 +710,14 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"if_same_then_else\",\n         group: \"correctness\",\n-        desc: \"if with the same *then* and *else* blocks\",\n+        desc: \"`if` with the same `then` and `else` blocks\",\n         deprecation: None,\n         module: \"copies\",\n     },\n     Lint {\n         name: \"ifs_same_cond\",\n         group: \"correctness\",\n-        desc: \"consecutive `ifs` with the same condition\",\n+        desc: \"consecutive `if`s with the same condition\",\n         deprecation: None,\n         module: \"copies\",\n     },\n@@ -766,7 +766,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"infallible_destructuring_match\",\n         group: \"style\",\n-        desc: \"a match statement with a single infallible arm instead of a `let`\",\n+        desc: \"a `match` statement with a single infallible arm instead of a `let`\",\n         deprecation: None,\n         module: \"infallible_destructuring_match\",\n     },\n@@ -787,7 +787,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"inherent_to_string_shadow_display\",\n         group: \"correctness\",\n-        desc: \"type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait \",\n+        desc: \"type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait\",\n         deprecation: None,\n         module: \"inherent_to_string\",\n     },\n@@ -808,7 +808,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"int_plus_one\",\n         group: \"complexity\",\n-        desc: \"instead of using x >= y + 1, use x > y\",\n+        desc: \"instead of using `x >= y + 1`, use `x > y`\",\n         deprecation: None,\n         module: \"int_plus_one\",\n     },\n@@ -955,21 +955,21 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"let_underscore_must_use\",\n         group: \"restriction\",\n-        desc: \"non-binding let on a #[must_use] expression\",\n+        desc: \"non-binding let on a `#[must_use]` expression\",\n         deprecation: None,\n         module: \"let_underscore\",\n     },\n     Lint {\n         name: \"let_unit_value\",\n         group: \"style\",\n-        desc: \"creating a let binding to a value of unit type, which usually can\\'t be used afterwards\",\n+        desc: \"creating a `let` binding to a value of unit type, which usually can\\'t be used afterwards\",\n         deprecation: None,\n         module: \"types\",\n     },\n     Lint {\n         name: \"linkedlist\",\n         group: \"pedantic\",\n-        desc: \"usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque\",\n+        desc: \"usage of LinkedList, usually a vector is faster, or a more specialized data structure like a `VecDeque`\",\n         deprecation: None,\n         module: \"types\",\n     },\n@@ -1046,28 +1046,28 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"match_as_ref\",\n         group: \"complexity\",\n-        desc: \"a match on an Option value instead of using `as_ref()` or `as_mut`\",\n+        desc: \"a `match` on an Option value instead of using `as_ref()` or `as_mut`\",\n         deprecation: None,\n         module: \"matches\",\n     },\n     Lint {\n         name: \"match_bool\",\n         group: \"style\",\n-        desc: \"a match on a boolean expression instead of an `if..else` block\",\n+        desc: \"a `match` on a boolean expression instead of an `if..else` block\",\n         deprecation: None,\n         module: \"matches\",\n     },\n     Lint {\n         name: \"match_overlapping_arm\",\n         group: \"style\",\n-        desc: \"a match with overlapping arms\",\n+        desc: \"a `match` with overlapping arms\",\n         deprecation: None,\n         module: \"matches\",\n     },\n     Lint {\n         name: \"match_ref_pats\",\n         group: \"style\",\n-        desc: \"a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\",\n+        desc: \"a `match` or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\",\n         deprecation: None,\n         module: \"matches\",\n     },\n@@ -1081,7 +1081,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"match_wild_err_arm\",\n         group: \"style\",\n-        desc: \"a match with `Err(_)` arm and take drastic actions\",\n+        desc: \"a `match` with `Err(_)` arm and take drastic actions\",\n         deprecation: None,\n         module: \"matches\",\n     },\n@@ -1095,7 +1095,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"mem_discriminant_non_enum\",\n         group: \"correctness\",\n-        desc: \"calling mem::descriminant on non-enum type\",\n+        desc: \"calling `mem::descriminant` on non-enum type\",\n         deprecation: None,\n         module: \"mem_discriminant\",\n     },\n@@ -1165,7 +1165,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"missing_inline_in_public_items\",\n         group: \"restriction\",\n-        desc: \"detects missing #[inline] attribute for public callables (functions, trait methods, methods...)\",\n+        desc: \"detects missing `#[inline]` attribute for public callables (functions, trait methods, methods...)\",\n         deprecation: None,\n         module: \"missing_inline\",\n     },\n@@ -1270,7 +1270,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"mutable_key_type\",\n         group: \"correctness\",\n-        desc: \"Check for mutable Map/Set key type\",\n+        desc: \"Check for mutable `Map`/`Set` key type\",\n         deprecation: None,\n         module: \"mut_key\",\n     },\n@@ -1382,7 +1382,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"neg_multiply\",\n         group: \"style\",\n-        desc: \"multiplying integers with -1\",\n+        desc: \"multiplying integers with `-1`\",\n         deprecation: None,\n         module: \"neg_multiply\",\n     },\n@@ -1480,7 +1480,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"option_map_unit_fn\",\n         group: \"complexity\",\n-        desc: \"using `option.map(f)`, where f is a function or closure that returns ()\",\n+        desc: \"using `option.map(f)`, where `f` is a function or closure that returns `()`\",\n         deprecation: None,\n         module: \"map_unit_fn\",\n     },\n@@ -1550,7 +1550,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"panicking_unwrap\",\n         group: \"correctness\",\n-        desc: \"checks for calls of unwrap[_err]() that will always fail\",\n+        desc: \"checks for calls of `unwrap[_err]()` that will always fail\",\n         deprecation: None,\n         module: \"unwrap\",\n     },\n@@ -1746,7 +1746,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"result_map_unit_fn\",\n         group: \"complexity\",\n-        desc: \"using `result.map(f)`, where f is a function or closure that returns ()\",\n+        desc: \"using `result.map(f)`, where `f` is a function or closure that returns `()`\",\n         deprecation: None,\n         module: \"map_unit_fn\",\n     },\n@@ -1774,7 +1774,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"same_functions_in_if_condition\",\n         group: \"pedantic\",\n-        desc: \"consecutive `ifs` with the same function call\",\n+        desc: \"consecutive `if`s with the same function call\",\n         deprecation: None,\n         module: \"copies\",\n     },\n@@ -1844,14 +1844,14 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"single_match\",\n         group: \"style\",\n-        desc: \"a match statement with a single nontrivial arm (i.e., where the other arm is `_ => {}`) instead of `if let`\",\n+        desc: \"a `match` statement with a single nontrivial arm (i.e., where the other arm is `_ => {}`) instead of `if let`\",\n         deprecation: None,\n         module: \"matches\",\n     },\n     Lint {\n         name: \"single_match_else\",\n         group: \"pedantic\",\n-        desc: \"a match statement with two arms where the second arm\\'s pattern is a placeholder instead of a specific match pattern\",\n+        desc: \"a `match` statement with two arms where the second arm\\'s pattern is a placeholder instead of a specific match pattern\",\n         deprecation: None,\n         module: \"matches\",\n     },\n@@ -2159,7 +2159,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"unnecessary_unwrap\",\n         group: \"complexity\",\n-        desc: \"checks for calls of unwrap[_err]() that cannot fail\",\n+        desc: \"checks for calls of `unwrap[_err]()` that cannot fail\",\n         deprecation: None,\n         module: \"unwrap\",\n     },\n@@ -2390,7 +2390,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"zero_divided_by_zero\",\n         group: \"complexity\",\n-        desc: \"usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\",\n+        desc: \"usage of `0.0 / 0.0` to obtain NaN instead of `std::f32::NAN` or `std::f64::NAN`\",\n         deprecation: None,\n         module: \"zero_div_zero\",\n     },\n@@ -2404,7 +2404,7 @@ pub const ALL_LINTS: [Lint; 345] = [\n     Lint {\n         name: \"zero_ptr\",\n         group: \"style\",\n-        desc: \"using 0 as *{const, mut} T\",\n+        desc: \"using `0 as *{const, mut} T`\",\n         deprecation: None,\n         module: \"misc\",\n     },"}, {"sha": "4ef364148cda8f4f090f0fb3eaad316114c4c004", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -5,135 +5,135 @@ LL |     u <= 0;\n    |     ^^^^^^\n    |\n    = note: `-D clippy::absurd-extreme-comparisons` implied by `-D warnings`\n-   = help: because 0 is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == 0 instead\n+   = help: because `0` is the minimum value for this type, the case where the two sides are not equal never occurs, consider using `u == 0` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:15:5\n    |\n LL |     u <= Z;\n    |     ^^^^^^\n    |\n-   = help: because Z is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == Z instead\n+   = help: because `Z` is the minimum value for this type, the case where the two sides are not equal never occurs, consider using `u == Z` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:16:5\n    |\n LL |     u < Z;\n    |     ^^^^^\n    |\n-   = help: because Z is the minimum value for this type, this comparison is always false\n+   = help: because `Z` is the minimum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:17:5\n    |\n LL |     Z >= u;\n    |     ^^^^^^\n    |\n-   = help: because Z is the minimum value for this type, the case where the two sides are not equal never occurs, consider using Z == u instead\n+   = help: because `Z` is the minimum value for this type, the case where the two sides are not equal never occurs, consider using `Z == u` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:18:5\n    |\n LL |     Z > u;\n    |     ^^^^^\n    |\n-   = help: because Z is the minimum value for this type, this comparison is always false\n+   = help: because `Z` is the minimum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:19:5\n    |\n LL |     u > std::u32::MAX;\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = help: because std::u32::MAX is the maximum value for this type, this comparison is always false\n+   = help: because `std::u32::MAX` is the maximum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:20:5\n    |\n LL |     u >= std::u32::MAX;\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = help: because std::u32::MAX is the maximum value for this type, the case where the two sides are not equal never occurs, consider using u == std::u32::MAX instead\n+   = help: because `std::u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u == std::u32::MAX` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:21:5\n    |\n LL |     std::u32::MAX < u;\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = help: because std::u32::MAX is the maximum value for this type, this comparison is always false\n+   = help: because `std::u32::MAX` is the maximum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:22:5\n    |\n LL |     std::u32::MAX <= u;\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = help: because std::u32::MAX is the maximum value for this type, the case where the two sides are not equal never occurs, consider using std::u32::MAX == u instead\n+   = help: because `std::u32::MAX` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `std::u32::MAX == u` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:23:5\n    |\n LL |     1-1 > u;\n    |     ^^^^^^^\n    |\n-   = help: because 1-1 is the minimum value for this type, this comparison is always false\n+   = help: because `1-1` is the minimum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:24:5\n    |\n LL |     u >= !0;\n    |     ^^^^^^^\n    |\n-   = help: because !0 is the maximum value for this type, the case where the two sides are not equal never occurs, consider using u == !0 instead\n+   = help: because `!0` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `u == !0` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:25:5\n    |\n LL |     u <= 12 - 2*6;\n    |     ^^^^^^^^^^^^^\n    |\n-   = help: because 12 - 2*6 is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == 12 - 2*6 instead\n+   = help: because `12 - 2*6` is the minimum value for this type, the case where the two sides are not equal never occurs, consider using `u == 12 - 2*6` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:27:5\n    |\n LL |     i < -127 - 1;\n    |     ^^^^^^^^^^^^\n    |\n-   = help: because -127 - 1 is the minimum value for this type, this comparison is always false\n+   = help: because `-127 - 1` is the minimum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:28:5\n    |\n LL |     std::i8::MAX >= i;\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = help: because std::i8::MAX is the maximum value for this type, this comparison is always true\n+   = help: because `std::i8::MAX` is the maximum value for this type, this comparison is always true\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:29:5\n    |\n LL |     3-7 < std::i32::MIN;\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: because std::i32::MIN is the minimum value for this type, this comparison is always false\n+   = help: because `std::i32::MIN` is the minimum value for this type, this comparison is always false\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:31:5\n    |\n LL |     b >= true;\n    |     ^^^^^^^^^\n    |\n-   = help: because true is the maximum value for this type, the case where the two sides are not equal never occurs, consider using b == true instead\n+   = help: because `true` is the maximum value for this type, the case where the two sides are not equal never occurs, consider using `b == true` instead\n \n error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n   --> $DIR/absurd-extreme-comparisons.rs:32:5\n    |\n LL |     false > b;\n    |     ^^^^^^^^^\n    |\n-   = help: because false is the minimum value for this type, this comparison is always false\n+   = help: because `false` is the minimum value for this type, this comparison is always false\n \n error: <-comparison of unit values detected. This will always be false\n   --> $DIR/absurd-extreme-comparisons.rs:35:5"}, {"sha": "70b15d18a568b878ea39cb6c2efe9869b1285828", "filename": "tests/ui/assign_ops2.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fassign_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fassign_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -5,7 +5,7 @@ LL |     a += a + 1;\n    |     ^^^^^^^^^^\n    |\n    = note: `-D clippy::misrefactored-assign-op` implied by `-D warnings`\n-help: Did you mean a = a + 1 or a = a + a + 1? Consider replacing it with\n+help: Did you mean `a = a + 1` or `a = a + a + 1`? Consider replacing it with\n    |\n LL |     a += 1;\n    |     ^^^^^^\n@@ -20,7 +20,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a += 1 + a;\n    |     ^^^^^^^^^^\n    |\n-help: Did you mean a = a + 1 or a = a + 1 + a? Consider replacing it with\n+help: Did you mean `a = a + 1` or `a = a + 1 + a`? Consider replacing it with\n    |\n LL |     a += 1;\n    |     ^^^^^^\n@@ -35,7 +35,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a -= a - 1;\n    |     ^^^^^^^^^^\n    |\n-help: Did you mean a = a - 1 or a = a - (a - 1)? Consider replacing it with\n+help: Did you mean `a = a - 1` or `a = a - (a - 1)`? Consider replacing it with\n    |\n LL |     a -= 1;\n    |     ^^^^^^\n@@ -50,7 +50,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a *= a * 99;\n    |     ^^^^^^^^^^^\n    |\n-help: Did you mean a = a * 99 or a = a * a * 99? Consider replacing it with\n+help: Did you mean `a = a * 99` or `a = a * a * 99`? Consider replacing it with\n    |\n LL |     a *= 99;\n    |     ^^^^^^^\n@@ -65,7 +65,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a *= 42 * a;\n    |     ^^^^^^^^^^^\n    |\n-help: Did you mean a = a * 42 or a = a * 42 * a? Consider replacing it with\n+help: Did you mean `a = a * 42` or `a = a * 42 * a`? Consider replacing it with\n    |\n LL |     a *= 42;\n    |     ^^^^^^^\n@@ -80,7 +80,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a /= a / 2;\n    |     ^^^^^^^^^^\n    |\n-help: Did you mean a = a / 2 or a = a / (a / 2)? Consider replacing it with\n+help: Did you mean `a = a / 2` or `a = a / (a / 2)`? Consider replacing it with\n    |\n LL |     a /= 2;\n    |     ^^^^^^\n@@ -95,7 +95,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a %= a % 5;\n    |     ^^^^^^^^^^\n    |\n-help: Did you mean a = a % 5 or a = a % (a % 5)? Consider replacing it with\n+help: Did you mean `a = a % 5` or `a = a % (a % 5)`? Consider replacing it with\n    |\n LL |     a %= 5;\n    |     ^^^^^^\n@@ -110,7 +110,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a &= a & 1;\n    |     ^^^^^^^^^^\n    |\n-help: Did you mean a = a & 1 or a = a & a & 1? Consider replacing it with\n+help: Did you mean `a = a & 1` or `a = a & a & 1`? Consider replacing it with\n    |\n LL |     a &= 1;\n    |     ^^^^^^\n@@ -125,7 +125,7 @@ error: variable appears on both sides of an assignment operation\n LL |     a *= a * a;\n    |     ^^^^^^^^^^\n    |\n-help: Did you mean a = a * a or a = a * a * a? Consider replacing it with\n+help: Did you mean `a = a * a` or `a = a * a * a`? Consider replacing it with\n    |\n LL |     a *= a;\n    |     ^^^^^^"}, {"sha": "d75f3c02f1978b704398f67a3e4e23c2912b6906", "filename": "tests/ui/block_in_if_condition.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fblock_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fblock_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n+error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n   --> $DIR/block_in_if_condition.rs:26:8\n    |\n LL |       if {\n@@ -30,7 +30,7 @@ LL |     if { true } {\n                6\n            } ... \n \n-error: in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n+error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n   --> $DIR/block_in_if_condition.rs:58:17\n    |\n LL |               |x| {\n@@ -40,7 +40,7 @@ LL | |                 x == target\n LL | |             },\n    | |_____________^\n \n-error: in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n+error: in an `if` condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`\n   --> $DIR/block_in_if_condition.rs:67:13\n    |\n LL |           |x| {"}, {"sha": "d01be83f803a09440004dca3385b80210648985e", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -36,103 +36,103 @@ error: casting u64 to f64 causes a loss of precision (u64 is 64 bits wide, but f\n LL |     x3 as f64;\n    |     ^^^^^^^^^\n \n-error: casting f32 to i32 may truncate the value\n+error: casting `f32` to `i32` may truncate the value\n   --> $DIR/cast.rs:21:5\n    |\n LL |     1f32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n \n-error: casting f32 to u32 may truncate the value\n+error: casting `f32` to `u32` may truncate the value\n   --> $DIR/cast.rs:22:5\n    |\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n \n-error: casting f32 to u32 may lose the sign of the value\n+error: casting `f32` to `u32` may lose the sign of the value\n   --> $DIR/cast.rs:22:5\n    |\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-sign-loss` implied by `-D warnings`\n \n-error: casting f64 to f32 may truncate the value\n+error: casting `f64` to `f32` may truncate the value\n   --> $DIR/cast.rs:23:5\n    |\n LL |     1f64 as f32;\n    |     ^^^^^^^^^^^\n \n-error: casting i32 to i8 may truncate the value\n+error: casting `i32` to `i8` may truncate the value\n   --> $DIR/cast.rs:24:5\n    |\n LL |     1i32 as i8;\n    |     ^^^^^^^^^^\n \n-error: casting i32 to u8 may truncate the value\n+error: casting `i32` to `u8` may truncate the value\n   --> $DIR/cast.rs:25:5\n    |\n LL |     1i32 as u8;\n    |     ^^^^^^^^^^\n \n-error: casting f64 to isize may truncate the value\n+error: casting `f64` to `isize` may truncate the value\n   --> $DIR/cast.rs:26:5\n    |\n LL |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting f64 to usize may truncate the value\n+error: casting `f64` to `usize` may truncate the value\n   --> $DIR/cast.rs:27:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting f64 to usize may lose the sign of the value\n+error: casting `f64` to `usize` may lose the sign of the value\n   --> $DIR/cast.rs:27:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting u8 to i8 may wrap around the value\n+error: casting `u8` to `i8` may wrap around the value\n   --> $DIR/cast.rs:29:5\n    |\n LL |     1u8 as i8;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n-error: casting u16 to i16 may wrap around the value\n+error: casting `u16` to `i16` may wrap around the value\n   --> $DIR/cast.rs:30:5\n    |\n LL |     1u16 as i16;\n    |     ^^^^^^^^^^^\n \n-error: casting u32 to i32 may wrap around the value\n+error: casting `u32` to `i32` may wrap around the value\n   --> $DIR/cast.rs:31:5\n    |\n LL |     1u32 as i32;\n    |     ^^^^^^^^^^^\n \n-error: casting u64 to i64 may wrap around the value\n+error: casting `u64` to `i64` may wrap around the value\n   --> $DIR/cast.rs:32:5\n    |\n LL |     1u64 as i64;\n    |     ^^^^^^^^^^^\n \n-error: casting usize to isize may wrap around the value\n+error: casting `usize` to `isize` may wrap around the value\n   --> $DIR/cast.rs:33:5\n    |\n LL |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n-error: casting i32 to u32 may lose the sign of the value\n+error: casting `i32` to `u32` may lose the sign of the value\n   --> $DIR/cast.rs:36:5\n    |\n LL |     -1i32 as u32;\n    |     ^^^^^^^^^^^^\n \n-error: casting isize to usize may lose the sign of the value\n+error: casting `isize` to `usize` may lose the sign of the value\n   --> $DIR/cast.rs:38:5\n    |\n LL |     -1isize as usize;"}, {"sha": "0ed09f3083c285687efcd53a7afc0fcb920903c4", "filename": "tests/ui/cast_lossless_float.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcast_lossless_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcast_lossless_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,66 +1,66 @@\n-error: casting i8 to f32 may become silently lossy if you later change the type\n+error: casting `i8` to `f32` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_float.rs:9:5\n    |\n LL |     x0 as f32;\n    |     ^^^^^^^^^ help: try: `f32::from(x0)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n-error: casting i8 to f64 may become silently lossy if you later change the type\n+error: casting `i8` to `f64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_float.rs:10:5\n    |\n LL |     x0 as f64;\n    |     ^^^^^^^^^ help: try: `f64::from(x0)`\n \n-error: casting u8 to f32 may become silently lossy if you later change the type\n+error: casting `u8` to `f32` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_float.rs:12:5\n    |\n LL |     x1 as f32;\n    |     ^^^^^^^^^ help: try: `f32::from(x1)`\n \n-error: casting u8 to f64 may become silently lossy if you later change the type\n+error: casting `u8` to `f64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_float.rs:13:5\n    |\n LL |     x1 as f64;\n    |     ^^^^^^^^^ help: try: `f64::from(x1)`\n \n-error: casting i16 to f32 may become silently lossy if you later change the type\n+error: casting `i16` to `f32` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_float.rs:15:5\n    |\n LL |     x2 as f32;\n    |     ^^^^^^^^^ help: try: `f32::from(x2)`\n \n-error: casting i16 to f64 may become silently lossy if you later change the type\n+error: casting `i16` to `f64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_float.rs:16:5\n    |\n LL |     x2 as f64;\n    |     ^^^^^^^^^ help: try: `f64::from(x2)`\n \n-error: casting u16 to f32 may become silently lossy if you later change the type\n+error: casting `u16` to `f32` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_float.rs:18:5\n    |\n LL |     x3 as f32;\n    |     ^^^^^^^^^ help: try: `f32::from(x3)`\n \n-error: casting u16 to f64 may become silently lossy if you later change the type\n+error: casting `u16` to `f64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_float.rs:19:5\n    |\n LL |     x3 as f64;\n    |     ^^^^^^^^^ help: try: `f64::from(x3)`\n \n-error: casting i32 to f64 may become silently lossy if you later change the type\n+error: casting `i32` to `f64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_float.rs:21:5\n    |\n LL |     x4 as f64;\n    |     ^^^^^^^^^ help: try: `f64::from(x4)`\n \n-error: casting u32 to f64 may become silently lossy if you later change the type\n+error: casting `u32` to `f64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_float.rs:23:5\n    |\n LL |     x5 as f64;\n    |     ^^^^^^^^^ help: try: `f64::from(x5)`\n \n-error: casting f32 to f64 may become silently lossy if you later change the type\n+error: casting `f32` to `f64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_float.rs:26:5\n    |\n LL |     1.0f32 as f64;"}, {"sha": "8e2890f9c28d02a6c6d87b25590c5c13c34c4e5a", "filename": "tests/ui/cast_lossless_integer.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcast_lossless_integer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcast_lossless_integer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,114 +1,114 @@\n-error: casting i8 to i16 may become silently lossy if you later change the type\n+error: casting `i8` to `i16` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:8:5\n    |\n LL |     1i8 as i16;\n    |     ^^^^^^^^^^ help: try: `i16::from(1i8)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n-error: casting i8 to i32 may become silently lossy if you later change the type\n+error: casting `i8` to `i32` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:9:5\n    |\n LL |     1i8 as i32;\n    |     ^^^^^^^^^^ help: try: `i32::from(1i8)`\n \n-error: casting i8 to i64 may become silently lossy if you later change the type\n+error: casting `i8` to `i64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:10:5\n    |\n LL |     1i8 as i64;\n    |     ^^^^^^^^^^ help: try: `i64::from(1i8)`\n \n-error: casting u8 to i16 may become silently lossy if you later change the type\n+error: casting `u8` to `i16` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:11:5\n    |\n LL |     1u8 as i16;\n    |     ^^^^^^^^^^ help: try: `i16::from(1u8)`\n \n-error: casting u8 to i32 may become silently lossy if you later change the type\n+error: casting `u8` to `i32` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:12:5\n    |\n LL |     1u8 as i32;\n    |     ^^^^^^^^^^ help: try: `i32::from(1u8)`\n \n-error: casting u8 to i64 may become silently lossy if you later change the type\n+error: casting `u8` to `i64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:13:5\n    |\n LL |     1u8 as i64;\n    |     ^^^^^^^^^^ help: try: `i64::from(1u8)`\n \n-error: casting u8 to u16 may become silently lossy if you later change the type\n+error: casting `u8` to `u16` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:14:5\n    |\n LL |     1u8 as u16;\n    |     ^^^^^^^^^^ help: try: `u16::from(1u8)`\n \n-error: casting u8 to u32 may become silently lossy if you later change the type\n+error: casting `u8` to `u32` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:15:5\n    |\n LL |     1u8 as u32;\n    |     ^^^^^^^^^^ help: try: `u32::from(1u8)`\n \n-error: casting u8 to u64 may become silently lossy if you later change the type\n+error: casting `u8` to `u64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:16:5\n    |\n LL |     1u8 as u64;\n    |     ^^^^^^^^^^ help: try: `u64::from(1u8)`\n \n-error: casting i16 to i32 may become silently lossy if you later change the type\n+error: casting `i16` to `i32` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:17:5\n    |\n LL |     1i16 as i32;\n    |     ^^^^^^^^^^^ help: try: `i32::from(1i16)`\n \n-error: casting i16 to i64 may become silently lossy if you later change the type\n+error: casting `i16` to `i64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:18:5\n    |\n LL |     1i16 as i64;\n    |     ^^^^^^^^^^^ help: try: `i64::from(1i16)`\n \n-error: casting u16 to i32 may become silently lossy if you later change the type\n+error: casting `u16` to `i32` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:19:5\n    |\n LL |     1u16 as i32;\n    |     ^^^^^^^^^^^ help: try: `i32::from(1u16)`\n \n-error: casting u16 to i64 may become silently lossy if you later change the type\n+error: casting `u16` to `i64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:20:5\n    |\n LL |     1u16 as i64;\n    |     ^^^^^^^^^^^ help: try: `i64::from(1u16)`\n \n-error: casting u16 to u32 may become silently lossy if you later change the type\n+error: casting `u16` to `u32` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:21:5\n    |\n LL |     1u16 as u32;\n    |     ^^^^^^^^^^^ help: try: `u32::from(1u16)`\n \n-error: casting u16 to u64 may become silently lossy if you later change the type\n+error: casting `u16` to `u64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:22:5\n    |\n LL |     1u16 as u64;\n    |     ^^^^^^^^^^^ help: try: `u64::from(1u16)`\n \n-error: casting i32 to i64 may become silently lossy if you later change the type\n+error: casting `i32` to `i64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:23:5\n    |\n LL |     1i32 as i64;\n    |     ^^^^^^^^^^^ help: try: `i64::from(1i32)`\n \n-error: casting u32 to i64 may become silently lossy if you later change the type\n+error: casting `u32` to `i64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:24:5\n    |\n LL |     1u32 as i64;\n    |     ^^^^^^^^^^^ help: try: `i64::from(1u32)`\n \n-error: casting u32 to u64 may become silently lossy if you later change the type\n+error: casting `u32` to `u64` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:25:5\n    |\n LL |     1u32 as u64;\n    |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n \n-error: casting u8 to u16 may become silently lossy if you later change the type\n+error: casting `u8` to `u16` may become silently lossy if you later change the type\n   --> $DIR/cast_lossless_integer.rs:28:5\n    |\n LL |     (1u8 + 1u8) as u16;"}, {"sha": "aacd99437d9fc3eadde5b8a60a5b0a11e9de8b30", "filename": "tests/ui/cast_ref_to_mut.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcast_ref_to_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcast_ref_to_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_ref_to_mut.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,18 +1,18 @@\n-error: casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\n+error: casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\n   --> $DIR/cast_ref_to_mut.rs:18:9\n    |\n LL |         (*(a as *const _ as *mut String)).push_str(\" world\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-ref-to-mut` implied by `-D warnings`\n \n-error: casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\n+error: casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\n   --> $DIR/cast_ref_to_mut.rs:19:9\n    |\n LL |         *(a as *const _ as *mut _) = String::from(\"Replaced\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\n+error: casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\n   --> $DIR/cast_ref_to_mut.rs:20:9\n    |\n LL |         *(a as *const _ as *mut String) += \" world\";"}, {"sha": "e3093e5a10b5ed6f7901e01af175e0ca91c32df4", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: casting isize to i8 may truncate the value\n+error: casting `isize` to `i8` may truncate the value\n   --> $DIR/cast_size.rs:12:5\n    |\n LL |     1isize as i8;\n@@ -32,69 +32,69 @@ error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits w\n LL |     x1 as f32;\n    |     ^^^^^^^^^\n \n-error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n+error: casting `isize` to `i32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:19:5\n    |\n LL |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n \n-error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n+error: casting `isize` to `u32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:20:5\n    |\n LL |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n-error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n+error: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:21:5\n    |\n LL |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n \n-error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n+error: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:22:5\n    |\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n-error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n+error: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:22:5\n    |\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n-error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n+error: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:24:5\n    |\n LL |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n+error: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:25:5\n    |\n LL |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n+error: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:26:5\n    |\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n+error: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size.rs:26:5\n    |\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n+error: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:27:5\n    |\n LL |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n+error: casting `u32` to `isize` may wrap around the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size.rs:28:5\n    |\n LL |     1u32 as isize;"}, {"sha": "fba5b5e18b2001c7fc347d3d750697fe37bee4b9", "filename": "tests/ui/cast_size_32bit.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcast_size_32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcast_size_32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size_32bit.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: casting isize to i8 may truncate the value\n+error: casting `isize` to `i8` may truncate the value\n   --> $DIR/cast_size_32bit.rs:12:5\n    |\n LL |     1isize as i8;\n@@ -14,7 +14,7 @@ LL |     x0 as f64;\n    |\n    = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n \n-error: casting isize to f64 may become silently lossy if you later change the type\n+error: casting `isize` to `f64` may become silently lossy if you later change the type\n   --> $DIR/cast_size_32bit.rs:15:5\n    |\n LL |     x0 as f64;\n@@ -28,7 +28,7 @@ error: casting usize to f64 causes a loss of precision on targets with 64-bit wi\n LL |     x1 as f64;\n    |     ^^^^^^^^^\n \n-error: casting usize to f64 may become silently lossy if you later change the type\n+error: casting `usize` to `f64` may become silently lossy if you later change the type\n   --> $DIR/cast_size_32bit.rs:16:5\n    |\n LL |     x1 as f64;\n@@ -46,69 +46,69 @@ error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits w\n LL |     x1 as f32;\n    |     ^^^^^^^^^\n \n-error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n+error: casting `isize` to `i32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size_32bit.rs:19:5\n    |\n LL |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n \n-error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n+error: casting `isize` to `u32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size_32bit.rs:20:5\n    |\n LL |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n-error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n+error: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size_32bit.rs:21:5\n    |\n LL |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n \n-error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n+error: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size_32bit.rs:22:5\n    |\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n-error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n+error: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size_32bit.rs:22:5\n    |\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n-error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n+error: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size_32bit.rs:24:5\n    |\n LL |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n+error: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size_32bit.rs:25:5\n    |\n LL |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n+error: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size_32bit.rs:26:5\n    |\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n+error: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers\n   --> $DIR/cast_size_32bit.rs:26:5\n    |\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n+error: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size_32bit.rs:27:5\n    |\n LL |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n \n-error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n+error: casting `u32` to `isize` may wrap around the value on targets with 32-bit wide pointers\n   --> $DIR/cast_size_32bit.rs:28:5\n    |\n LL |     1u32 as isize;\n@@ -120,7 +120,7 @@ error: casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f\n LL |     999_999_999 as f32;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: casting integer literal to f64 is unnecessary\n+error: casting integer literal to `f64` is unnecessary\n   --> $DIR/cast_size_32bit.rs:34:5\n    |\n LL |     3_999_999_999usize as f64;"}, {"sha": "c1efd47db90b0f313132e0a0465c5cf2826672e2", "filename": "tests/ui/cfg_attr_rustfmt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcfg_attr_rustfmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcfg_attr_rustfmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg_attr_rustfmt.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,12 +1,12 @@\n-error: `cfg_attr` is deprecated for rustfmt and got replaced by tool_attributes\n+error: `cfg_attr` is deprecated for rustfmt and got replaced by tool attributes\n   --> $DIR/cfg_attr_rustfmt.rs:18:5\n    |\n LL |     #[cfg_attr(rustfmt, rustfmt::skip)]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `#[rustfmt::skip]`\n    |\n    = note: `-D clippy::deprecated-cfg-attr` implied by `-D warnings`\n \n-error: `cfg_attr` is deprecated for rustfmt and got replaced by tool_attributes\n+error: `cfg_attr` is deprecated for rustfmt and got replaced by tool attributes\n   --> $DIR/cfg_attr_rustfmt.rs:22:1\n    |\n LL | #[cfg_attr(rustfmt, rustfmt_skip)]"}, {"sha": "7aceeeaf78fccec8df0d88c59549e8fe63df5de6", "filename": "tests/ui/cmp_nan.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcmp_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcmp_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,144 +1,144 @@\n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:8:5\n    |\n LL |     x == std::f32::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cmp-nan` implied by `-D warnings`\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:9:5\n    |\n LL |     x != std::f32::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:10:5\n    |\n LL |     x < std::f32::NAN;\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:11:5\n    |\n LL |     x > std::f32::NAN;\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:12:5\n    |\n LL |     x <= std::f32::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:13:5\n    |\n LL |     x >= std::f32::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:14:5\n    |\n LL |     x == NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:15:5\n    |\n LL |     x != NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:16:5\n    |\n LL |     x < NAN_F32;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:17:5\n    |\n LL |     x > NAN_F32;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:18:5\n    |\n LL |     x <= NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:19:5\n    |\n LL |     x >= NAN_F32;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:22:5\n    |\n LL |     y == std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:23:5\n    |\n LL |     y != std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:24:5\n    |\n LL |     y < std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:25:5\n    |\n LL |     y > std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:26:5\n    |\n LL |     y <= std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:27:5\n    |\n LL |     y >= std::f64::NAN;\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:28:5\n    |\n LL |     y == NAN_F64;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:29:5\n    |\n LL |     y != NAN_F64;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:30:5\n    |\n LL |     y < NAN_F64;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:31:5\n    |\n LL |     y > NAN_F64;\n    |     ^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:32:5\n    |\n LL |     y <= NAN_F64;\n    |     ^^^^^^^^^^^^\n \n-error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+error: doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\n   --> $DIR/cmp_nan.rs:33:5\n    |\n LL |     y >= NAN_F64;"}, {"sha": "b563a2ebec2d2fd1b55f7f436799f6efe6920864", "filename": "tests/ui/cmp_null.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcmp_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcmp_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,12 +1,12 @@\n-error: Comparing with null is better expressed by the .is_null() method\n+error: Comparing with null is better expressed by the `.is_null()` method\n   --> $DIR/cmp_null.rs:9:8\n    |\n LL |     if p == ptr::null() {\n    |        ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cmp-null` implied by `-D warnings`\n \n-error: Comparing with null is better expressed by the .is_null() method\n+error: Comparing with null is better expressed by the `.is_null()` method\n   --> $DIR/cmp_null.rs:14:8\n    |\n LL |     if m == ptr::null_mut() {"}, {"sha": "b123bc1c7bd79d61eed09e4339660a42440cfdd9", "filename": "tests/ui/collapsible_if.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: this if statement can be collapsed\n+error: this `if` statement can be collapsed\n   --> $DIR/collapsible_if.rs:9:5\n    |\n LL | /     if x == \"hello\" {\n@@ -16,7 +16,7 @@ LL |     println!(\"Hello world!\");\n LL | }\n    |\n \n-error: this if statement can be collapsed\n+error: this `if` statement can be collapsed\n   --> $DIR/collapsible_if.rs:15:5\n    |\n LL | /     if x == \"hello\" || x == \"world\" {\n@@ -33,7 +33,7 @@ LL |     println!(\"Hello world!\");\n LL | }\n    |\n \n-error: this if statement can be collapsed\n+error: this `if` statement can be collapsed\n   --> $DIR/collapsible_if.rs:21:5\n    |\n LL | /     if x == \"hello\" && x == \"world\" {\n@@ -50,7 +50,7 @@ LL |     println!(\"Hello world!\");\n LL | }\n    |\n \n-error: this if statement can be collapsed\n+error: this `if` statement can be collapsed\n   --> $DIR/collapsible_if.rs:27:5\n    |\n LL | /     if x == \"hello\" || x == \"world\" {\n@@ -67,7 +67,7 @@ LL |     println!(\"Hello world!\");\n LL | }\n    |\n \n-error: this if statement can be collapsed\n+error: this `if` statement can be collapsed\n   --> $DIR/collapsible_if.rs:33:5\n    |\n LL | /     if x == \"hello\" && x == \"world\" {\n@@ -84,7 +84,7 @@ LL |     println!(\"Hello world!\");\n LL | }\n    |\n \n-error: this if statement can be collapsed\n+error: this `if` statement can be collapsed\n   --> $DIR/collapsible_if.rs:39:5\n    |\n LL | /     if 42 == 1337 {\n@@ -101,7 +101,7 @@ LL |     println!(\"world!\")\n LL | }\n    |\n \n-error: this if statement can be collapsed\n+error: this `if` statement can be collapsed\n   --> $DIR/collapsible_if.rs:95:5\n    |\n LL | /     if x == \"hello\" {"}, {"sha": "453760c6b9211c338130d9fadad206af116440e2", "filename": "tests/ui/default_trait_access.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_trait_access.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,48 +1,48 @@\n-error: Calling std::string::String::default() is more clear than this expression\n+error: Calling `std::string::String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:8:22\n    |\n LL |     let s1: String = Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n    |\n    = note: `-D clippy::default-trait-access` implied by `-D warnings`\n \n-error: Calling std::string::String::default() is more clear than this expression\n+error: Calling `std::string::String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:12:22\n    |\n LL |     let s3: String = D2::default();\n    |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: Calling std::string::String::default() is more clear than this expression\n+error: Calling `std::string::String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:14:22\n    |\n LL |     let s4: String = std::default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: Calling std::string::String::default() is more clear than this expression\n+error: Calling `std::string::String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:18:22\n    |\n LL |     let s6: String = default::Default::default();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n \n-error: Calling GenericDerivedDefault<std::string::String>::default() is more clear than this expression\n+error: Calling `GenericDerivedDefault<std::string::String>::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:28:46\n    |\n LL |     let s11: GenericDerivedDefault<String> = Default::default();\n    |                                              ^^^^^^^^^^^^^^^^^^ help: try: `GenericDerivedDefault<std::string::String>::default()`\n \n-error: Calling TupleDerivedDefault::default() is more clear than this expression\n+error: Calling `TupleDerivedDefault::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:34:36\n    |\n LL |     let s14: TupleDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `TupleDerivedDefault::default()`\n \n-error: Calling ArrayDerivedDefault::default() is more clear than this expression\n+error: Calling `ArrayDerivedDefault::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:36:36\n    |\n LL |     let s15: ArrayDerivedDefault = Default::default();\n    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `ArrayDerivedDefault::default()`\n \n-error: Calling TupleStructDerivedDefault::default() is more clear than this expression\n+error: Calling `TupleStructDerivedDefault::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:40:42\n    |\n LL |     let s17: TupleStructDerivedDefault = Default::default();"}, {"sha": "64fde33c64f5228edb53bd57ad423972c1e4320d", "filename": "tests/ui/dlist.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fdlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fdlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -5,47 +5,47 @@ LL |     type Baz = LinkedList<u8>;\n    |                ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::linkedlist` implied by `-D warnings`\n-   = help: a VecDeque might work\n+   = help: a `VecDeque` might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n   --> $DIR/dlist.rs:10:15\n    |\n LL |     fn foo(_: LinkedList<u8>);\n    |               ^^^^^^^^^^^^^^\n    |\n-   = help: a VecDeque might work\n+   = help: a `VecDeque` might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n   --> $DIR/dlist.rs:11:23\n    |\n LL |     const BAR: Option<LinkedList<u8>>;\n    |                       ^^^^^^^^^^^^^^\n    |\n-   = help: a VecDeque might work\n+   = help: a `VecDeque` might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n   --> $DIR/dlist.rs:22:15\n    |\n LL |     fn foo(_: LinkedList<u8>) {}\n    |               ^^^^^^^^^^^^^^\n    |\n-   = help: a VecDeque might work\n+   = help: a `VecDeque` might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n   --> $DIR/dlist.rs:25:39\n    |\n LL | pub fn test(my_favourite_linked_list: LinkedList<u8>) {\n    |                                       ^^^^^^^^^^^^^^\n    |\n-   = help: a VecDeque might work\n+   = help: a `VecDeque` might work\n \n error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n   --> $DIR/dlist.rs:29:29\n    |\n LL | pub fn test_ret() -> Option<LinkedList<u8>> {\n    |                             ^^^^^^^^^^^^^^\n    |\n-   = help: a VecDeque might work\n+   = help: a `VecDeque` might work\n \n error: aborting due to 6 previous errors\n "}, {"sha": "82a4f047ba858a355de5833a0f715648e61ce0ff", "filename": "tests/ui/drop_forget_copy.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fdrop_forget_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fdrop_forget_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: calls to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact.\n   --> $DIR/drop_forget_copy.rs:33:5\n    |\n LL |     drop(s1);\n@@ -11,7 +11,7 @@ note: argument has type SomeStruct\n LL |     drop(s1);\n    |          ^^\n \n-error: calls to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact.\n   --> $DIR/drop_forget_copy.rs:34:5\n    |\n LL |     drop(s2);\n@@ -23,7 +23,7 @@ note: argument has type SomeStruct\n LL |     drop(s2);\n    |          ^^\n \n-error: calls to `std::mem::drop` with a value that implements Copy. Dropping a copy leaves the original intact.\n+error: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact.\n   --> $DIR/drop_forget_copy.rs:36:5\n    |\n LL |     drop(s4);\n@@ -35,7 +35,7 @@ note: argument has type SomeStruct\n LL |     drop(s4);\n    |          ^^\n \n-error: calls to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact.\n   --> $DIR/drop_forget_copy.rs:39:5\n    |\n LL |     forget(s1);\n@@ -48,7 +48,7 @@ note: argument has type SomeStruct\n LL |     forget(s1);\n    |            ^^\n \n-error: calls to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact.\n   --> $DIR/drop_forget_copy.rs:40:5\n    |\n LL |     forget(s2);\n@@ -60,7 +60,7 @@ note: argument has type SomeStruct\n LL |     forget(s2);\n    |            ^^\n \n-error: calls to `std::mem::forget` with a value that implements Copy. Forgetting a copy leaves the original intact.\n+error: calls to `std::mem::forget` with a value that implements `Copy`. Forgetting a copy leaves the original intact.\n   --> $DIR/drop_forget_copy.rs:42:5\n    |\n LL |     forget(s4);"}, {"sha": "b51c45ea5ee2a64e1350053da284dfb92c0378d4", "filename": "tests/ui/drop_forget_ref.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fdrop_forget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fdrop_forget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -5,7 +5,7 @@ LL |     drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::drop-ref` implied by `-D warnings`\n-note: argument has type &SomeStruct\n+note: argument has type `&SomeStruct`\n   --> $DIR/drop_forget_ref.rs:9:10\n    |\n LL |     drop(&SomeStruct);\n@@ -18,7 +18,7 @@ LL |     forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::forget-ref` implied by `-D warnings`\n-note: argument has type &SomeStruct\n+note: argument has type `&SomeStruct`\n   --> $DIR/drop_forget_ref.rs:10:12\n    |\n LL |     forget(&SomeStruct);\n@@ -30,7 +30,7 @@ error: calls to `std::mem::drop` with a reference instead of an owned value. Dro\n LL |     drop(&owned1);\n    |     ^^^^^^^^^^^^^\n    |\n-note: argument has type &SomeStruct\n+note: argument has type `&SomeStruct`\n   --> $DIR/drop_forget_ref.rs:13:10\n    |\n LL |     drop(&owned1);\n@@ -42,7 +42,7 @@ error: calls to `std::mem::drop` with a reference instead of an owned value. Dro\n LL |     drop(&&owned1);\n    |     ^^^^^^^^^^^^^^\n    |\n-note: argument has type &&SomeStruct\n+note: argument has type `&&SomeStruct`\n   --> $DIR/drop_forget_ref.rs:14:10\n    |\n LL |     drop(&&owned1);\n@@ -54,7 +54,7 @@ error: calls to `std::mem::drop` with a reference instead of an owned value. Dro\n LL |     drop(&mut owned1);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-note: argument has type &mut SomeStruct\n+note: argument has type `&mut SomeStruct`\n   --> $DIR/drop_forget_ref.rs:15:10\n    |\n LL |     drop(&mut owned1);\n@@ -66,7 +66,7 @@ error: calls to `std::mem::forget` with a reference instead of an owned value. F\n LL |     forget(&owned2);\n    |     ^^^^^^^^^^^^^^^\n    |\n-note: argument has type &SomeStruct\n+note: argument has type `&SomeStruct`\n   --> $DIR/drop_forget_ref.rs:18:12\n    |\n LL |     forget(&owned2);\n@@ -78,7 +78,7 @@ error: calls to `std::mem::forget` with a reference instead of an owned value. F\n LL |     forget(&&owned2);\n    |     ^^^^^^^^^^^^^^^^\n    |\n-note: argument has type &&SomeStruct\n+note: argument has type `&&SomeStruct`\n   --> $DIR/drop_forget_ref.rs:19:12\n    |\n LL |     forget(&&owned2);\n@@ -90,7 +90,7 @@ error: calls to `std::mem::forget` with a reference instead of an owned value. F\n LL |     forget(&mut owned2);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-note: argument has type &mut SomeStruct\n+note: argument has type `&mut SomeStruct`\n   --> $DIR/drop_forget_ref.rs:20:12\n    |\n LL |     forget(&mut owned2);\n@@ -102,7 +102,7 @@ error: calls to `std::mem::drop` with a reference instead of an owned value. Dro\n LL |     drop(reference1);\n    |     ^^^^^^^^^^^^^^^^\n    |\n-note: argument has type &SomeStruct\n+note: argument has type `&SomeStruct`\n   --> $DIR/drop_forget_ref.rs:24:10\n    |\n LL |     drop(reference1);\n@@ -114,7 +114,7 @@ error: calls to `std::mem::forget` with a reference instead of an owned value. F\n LL |     forget(&*reference1);\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-note: argument has type &SomeStruct\n+note: argument has type `&SomeStruct`\n   --> $DIR/drop_forget_ref.rs:25:12\n    |\n LL |     forget(&*reference1);\n@@ -126,7 +126,7 @@ error: calls to `std::mem::drop` with a reference instead of an owned value. Dro\n LL |     drop(reference2);\n    |     ^^^^^^^^^^^^^^^^\n    |\n-note: argument has type &mut SomeStruct\n+note: argument has type `&mut SomeStruct`\n   --> $DIR/drop_forget_ref.rs:28:10\n    |\n LL |     drop(reference2);\n@@ -138,7 +138,7 @@ error: calls to `std::mem::forget` with a reference instead of an owned value. F\n LL |     forget(reference3);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-note: argument has type &mut SomeStruct\n+note: argument has type `&mut SomeStruct`\n   --> $DIR/drop_forget_ref.rs:30:12\n    |\n LL |     forget(reference3);\n@@ -150,7 +150,7 @@ error: calls to `std::mem::drop` with a reference instead of an owned value. Dro\n LL |     drop(reference4);\n    |     ^^^^^^^^^^^^^^^^\n    |\n-note: argument has type &SomeStruct\n+note: argument has type `&SomeStruct`\n   --> $DIR/drop_forget_ref.rs:33:10\n    |\n LL |     drop(reference4);\n@@ -162,7 +162,7 @@ error: calls to `std::mem::forget` with a reference instead of an owned value. F\n LL |     forget(reference4);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n-note: argument has type &SomeStruct\n+note: argument has type `&SomeStruct`\n   --> $DIR/drop_forget_ref.rs:34:12\n    |\n LL |     forget(reference4);\n@@ -174,7 +174,7 @@ error: calls to `std::mem::drop` with a reference instead of an owned value. Dro\n LL |     drop(&val);\n    |     ^^^^^^^^^^\n    |\n-note: argument has type &T\n+note: argument has type `&T`\n   --> $DIR/drop_forget_ref.rs:39:10\n    |\n LL |     drop(&val);\n@@ -186,7 +186,7 @@ error: calls to `std::mem::forget` with a reference instead of an owned value. F\n LL |     forget(&val);\n    |     ^^^^^^^^^^^^\n    |\n-note: argument has type &T\n+note: argument has type `&T`\n   --> $DIR/drop_forget_ref.rs:45:12\n    |\n LL |     forget(&val);\n@@ -198,7 +198,7 @@ error: calls to `std::mem::drop` with a reference instead of an owned value. Dro\n LL |     std::mem::drop(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: argument has type &SomeStruct\n+note: argument has type `&SomeStruct`\n   --> $DIR/drop_forget_ref.rs:53:20\n    |\n LL |     std::mem::drop(&SomeStruct);\n@@ -210,7 +210,7 @@ error: calls to `std::mem::forget` with a reference instead of an owned value. F\n LL |     std::mem::forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: argument has type &SomeStruct\n+note: argument has type `&SomeStruct`\n   --> $DIR/drop_forget_ref.rs:56:22\n    |\n LL |     std::mem::forget(&SomeStruct);"}, {"sha": "6f47658cfb18400f0df75a7ab24e8f10fcec8ad8", "filename": "tests/ui/else_if_without_else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Felse_if_without_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Felse_if_without_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Felse_if_without_else.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: if expression with an `else if`, but without a final `else`\n+error: `if` expression with an `else if`, but without a final `else`\n   --> $DIR/else_if_without_else.rs:45:12\n    |\n LL |       } else if bla2() {\n@@ -11,7 +11,7 @@ LL | |     }\n    = note: `-D clippy::else-if-without-else` implied by `-D warnings`\n    = help: add an `else` block here\n \n-error: if expression with an `else if`, but without a final `else`\n+error: `if` expression with an `else if`, but without a final `else`\n   --> $DIR/else_if_without_else.rs:54:12\n    |\n LL |       } else if bla3() {"}, {"sha": "d8c9786541f0b75f19a7836b73861322924b4a73", "filename": "tests/ui/empty_line_after_outer_attribute.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fempty_line_after_outer_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n+error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:7:1\n    |\n LL | / #[crate_type = \"lib\"]\n@@ -9,15 +9,15 @@ LL | | fn with_one_newline_and_comment() { assert!(true) }\n    |\n    = note: `-D clippy::empty-line-after-outer-attr` implied by `-D warnings`\n \n-error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n+error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:19:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | fn with_one_newline() { assert!(true) }\n    | |_\n \n-error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n+error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:24:1\n    |\n LL | / #[crate_type = \"lib\"]\n@@ -26,23 +26,23 @@ LL | |\n LL | | fn with_two_newlines() { assert!(true) }\n    | |_\n \n-error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n+error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:31:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | enum Baz {\n    | |_\n \n-error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n+error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:39:1\n    |\n LL | / #[crate_type = \"lib\"]\n LL | |\n LL | | struct Foo {\n    | |_\n \n-error: Found an empty line after an outer attribute. Perhaps you forgot to add a '!' to make it an inner attribute?\n+error: Found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?\n   --> $DIR/empty_line_after_outer_attribute.rs:47:1\n    |\n LL | / #[crate_type = \"lib\"]"}, {"sha": "444675259a909e0c77a00a140fc3a50c47752e92", "filename": "tests/ui/expect.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,12 +1,12 @@\n-error: used expect() on an Option value. If this value is an None it will panic\n+error: used `expect()` on `an Option` value. If this value is an `None` it will panic\n   --> $DIR/expect.rs:5:13\n    |\n LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-expect-used` implied by `-D warnings`\n \n-error: used expect() on a Result value. If this value is an Err it will panic\n+error: used `expect()` on `a Result` value. If this value is an `Err` it will panic\n   --> $DIR/expect.rs:10:13\n    |\n LL |     let _ = res.expect(\"\");"}, {"sha": "68f5b23bdc73a19839c5cd37b2f60eebda3b7dbe", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,35 +1,35 @@\n-error: strict comparison of f32 or f64\n+error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:59:5\n    |\n LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE as f64 - 2.0).abs() > error`\n    |\n    = note: `-D clippy::float-cmp` implied by `-D warnings`\n-note: std::f32::EPSILON and std::f64::EPSILON are available.\n+note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n   --> $DIR/float_cmp.rs:59:5\n    |\n LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: strict comparison of f32 or f64\n+error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:64:5\n    |\n LL |     x == 1.0;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(x - 1.0).abs() < error`\n    |\n-note: std::f32::EPSILON and std::f64::EPSILON are available.\n+note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n   --> $DIR/float_cmp.rs:64:5\n    |\n LL |     x == 1.0;\n    |     ^^^^^^^^\n \n-error: strict comparison of f32 or f64\n+error: strict comparison of `f32` or `f64`\n   --> $DIR/float_cmp.rs:67:5\n    |\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(twice(x) - twice(ONE as f64)).abs() > error`\n    |\n-note: std::f32::EPSILON and std::f64::EPSILON are available.\n+note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n   --> $DIR/float_cmp.rs:67:5\n    |\n LL |     twice(x) != twice(ONE as f64);"}, {"sha": "c13c555cd119fd3a40cac9765dcf9673cb1512c2", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,83 +1,83 @@\n-error: strict comparison of f32 or f64 constant\n+error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:20:5\n    |\n LL |     1f32 == ONE;\n    |     ^^^^^^^^^^^ help: consider comparing them within some error: `(1f32 - ONE).abs() < error`\n    |\n    = note: `-D clippy::float-cmp-const` implied by `-D warnings`\n-note: std::f32::EPSILON and std::f64::EPSILON are available.\n+note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:20:5\n    |\n LL |     1f32 == ONE;\n    |     ^^^^^^^^^^^\n \n-error: strict comparison of f32 or f64 constant\n+error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:21:5\n    |\n LL |     TWO == ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() < error`\n    |\n-note: std::f32::EPSILON and std::f64::EPSILON are available.\n+note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:21:5\n    |\n LL |     TWO == ONE;\n    |     ^^^^^^^^^^\n \n-error: strict comparison of f32 or f64 constant\n+error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:22:5\n    |\n LL |     TWO != ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() > error`\n    |\n-note: std::f32::EPSILON and std::f64::EPSILON are available.\n+note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:22:5\n    |\n LL |     TWO != ONE;\n    |     ^^^^^^^^^^\n \n-error: strict comparison of f32 or f64 constant\n+error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:23:5\n    |\n LL |     ONE + ONE == TWO;\n    |     ^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE + ONE - TWO).abs() < error`\n    |\n-note: std::f32::EPSILON and std::f64::EPSILON are available.\n+note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:23:5\n    |\n LL |     ONE + ONE == TWO;\n    |     ^^^^^^^^^^^^^^^^\n \n-error: strict comparison of f32 or f64 constant\n+error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:25:5\n    |\n LL |     x as f32 == ONE;\n    |     ^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(x as f32 - ONE).abs() < error`\n    |\n-note: std::f32::EPSILON and std::f64::EPSILON are available.\n+note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:25:5\n    |\n LL |     x as f32 == ONE;\n    |     ^^^^^^^^^^^^^^^\n \n-error: strict comparison of f32 or f64 constant\n+error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:28:5\n    |\n LL |     v == ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() < error`\n    |\n-note: std::f32::EPSILON and std::f64::EPSILON are available.\n+note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:28:5\n    |\n LL |     v == ONE;\n    |     ^^^^^^^^\n \n-error: strict comparison of f32 or f64 constant\n+error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:29:5\n    |\n LL |     v != ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() > error`\n    |\n-note: std::f32::EPSILON and std::f64::EPSILON are available.\n+note: `std::f32::EPSILON` and `std::f64::EPSILON` are available.\n   --> $DIR/float_cmp_const.rs:29:5\n    |\n LL |     v != ONE;"}, {"sha": "f84b7a660ff4287a800b9c9cedebd02d123e91da", "filename": "tests/ui/for_loop_fixable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Ffor_loop_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Ffor_loop_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -68,7 +68,7 @@ error: it is more concise to loop over references to containers instead of using\n LL |     for _v in vec.iter_mut() {}\n    |               ^^^^^^^^^^^^^^ help: to write this more concisely, try: `&mut vec`\n \n-error: it is more concise to loop over containers instead of using explicit iteration methods`\n+error: it is more concise to loop over containers instead of using explicit iteration methods\n   --> $DIR/for_loop_fixable.rs:103:15\n    |\n LL |     for _v in out_vec.into_iter() {}\n@@ -130,7 +130,7 @@ error: it is more concise to loop over references to containers instead of using\n LL |     for _v in bs.iter() {}\n    |               ^^^^^^^^^ help: to write this more concisely, try: `&bs`\n \n-error: it is more concise to loop over containers instead of using explicit iteration methods`\n+error: it is more concise to loop over containers instead of using explicit iteration methods\n   --> $DIR/for_loop_fixable.rs:310:18\n    |\n LL |         for i in iterator.into_iter() {\n@@ -142,7 +142,7 @@ error: it is more concise to loop over references to containers instead of using\n LL |         for _ in t.into_iter() {}\n    |                  ^^^^^^^^^^^^^ help: to write this more concisely, try: `&t`\n \n-error: it is more concise to loop over containers instead of using explicit iteration methods`\n+error: it is more concise to loop over containers instead of using explicit iteration methods\n   --> $DIR/for_loop_fixable.rs:332:18\n    |\n LL |         for _ in r.into_iter() {}"}, {"sha": "9734492154e8009fca62c7e5a2903cb649507c00", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -2,21 +2,21 @@ error: useless use of `format!`\n   --> $DIR/format.rs:13:5\n    |\n LL |     format!(\"foo\");\n-   |     ^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string();`\n+   |     ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string();`\n    |\n    = note: `-D clippy::useless-format` implied by `-D warnings`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:14:5\n    |\n LL |     format!(\"{{}}\");\n-   |     ^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"{}\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{}\".to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:15:5\n    |\n LL |     format!(\"{{}} abc {{}}\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"{} abc {}\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{} abc {}\".to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:16:5\n@@ -25,61 +25,61 @@ LL | /     format!(\n LL | |         r##\"foo {{}}\n LL | | \" bar\"##\n LL | |     );\n-   | |______^ help: consider using .to_string(): `\"foo {}/n/\" bar\".to_string();`\n+   | |______^ help: consider using `.to_string()`: `\"foo {}/n/\" bar\".to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:21:5\n    |\n LL |     format!(\"{}\", \"foo\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:25:5\n    |\n LL |     format!(\"{:+}\", \"foo\"); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:26:5\n    |\n LL |     format!(\"{:<}\", \"foo\"); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `\"foo\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:31:5\n    |\n LL |     format!(\"{}\", arg);\n-   |     ^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:35:5\n    |\n LL |     format!(\"{:+}\", arg); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:36:5\n    |\n LL |     format!(\"{:<}\", arg); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `arg.to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:63:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `42.to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:65:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `x.display().to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string();`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:69:18\n    |\n LL |     let _ = Some(format!(\"{}\", a + \"bar\"));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using .to_string(): `a + \"bar\"`\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `a + \"bar\"`\n \n error: aborting due to 13 previous errors\n "}, {"sha": "78bc4d4bd20a30359e686ac4e891dec16c2108bf", "filename": "tests/ui/if_not_else.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fif_not_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fif_not_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -9,7 +9,7 @@ LL | |     }\n    | |_____^\n    |\n    = note: `-D clippy::if-not-else` implied by `-D warnings`\n-   = help: remove the `!` and swap the blocks of the if/else\n+   = help: remove the `!` and swap the blocks of the `if`/`else`\n \n error: Unnecessary `!=` operation\n   --> $DIR/if_not_else.rs:14:5\n@@ -21,7 +21,7 @@ LL | |         println!(\"Bunny\");\n LL | |     }\n    | |_____^\n    |\n-   = help: change to `==` and swap the blocks of the if/else\n+   = help: change to `==` and swap the blocks of the `if`/`else`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0c2a1fdb78a4df78b3d0ff20baba97fd1850dbc4", "filename": "tests/ui/if_same_then_else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -230,7 +230,7 @@ LL | |         return Ok(&foo[0..]);\n LL | |     } else {\n    | |_____^\n \n-error: this `if` has the same condition as a previous if\n+error: this `if` has the same condition as a previous `if`\n   --> $DIR/if_same_then_else.rs:241:15\n    |\n LL |     } else if true {"}, {"sha": "0c8f49b8687f0a2c639e0c4090de5aa7006269b0", "filename": "tests/ui/ifs_same_cond.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fifs_same_cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fifs_same_cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fifs_same_cond.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: this `if` has the same condition as a previous if\n+error: this `if` has the same condition as a previous `if`\n   --> $DIR/ifs_same_cond.rs:9:15\n    |\n LL |     } else if b {\n@@ -11,7 +11,7 @@ note: same as this\n LL |     if b {\n    |        ^\n \n-error: this `if` has the same condition as a previous if\n+error: this `if` has the same condition as a previous `if`\n   --> $DIR/ifs_same_cond.rs:14:15\n    |\n LL |     } else if a == 1 {\n@@ -23,7 +23,7 @@ note: same as this\n LL |     if a == 1 {\n    |        ^^^^^^\n \n-error: this `if` has the same condition as a previous if\n+error: this `if` has the same condition as a previous `if`\n   --> $DIR/ifs_same_cond.rs:20:15\n    |\n LL |     } else if 2 * a == 1 {"}, {"sha": "411b98067d0efbf15c85d398c926e06d82511a52", "filename": "tests/ui/implicit_return.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fimplicit_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fimplicit_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_return.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,66 +1,66 @@\n-error: missing return statement\n+error: missing `return` statement\n   --> $DIR/implicit_return.rs:12:5\n    |\n LL |     true\n    |     ^^^^ help: add `return` as shown: `return true`\n    |\n    = note: `-D clippy::implicit-return` implied by `-D warnings`\n \n-error: missing return statement\n+error: missing `return` statement\n   --> $DIR/implicit_return.rs:18:9\n    |\n LL |         true\n    |         ^^^^ help: add `return` as shown: `return true`\n \n-error: missing return statement\n+error: missing `return` statement\n   --> $DIR/implicit_return.rs:20:9\n    |\n LL |         false\n    |         ^^^^^ help: add `return` as shown: `return false`\n \n-error: missing return statement\n+error: missing `return` statement\n   --> $DIR/implicit_return.rs:28:17\n    |\n LL |         true => false,\n    |                 ^^^^^ help: add `return` as shown: `return false`\n \n-error: missing return statement\n+error: missing `return` statement\n   --> $DIR/implicit_return.rs:29:20\n    |\n LL |         false => { true },\n    |                    ^^^^ help: add `return` as shown: `return true`\n \n-error: missing return statement\n+error: missing `return` statement\n   --> $DIR/implicit_return.rs:44:9\n    |\n LL |         break true;\n    |         ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n-error: missing return statement\n+error: missing `return` statement\n   --> $DIR/implicit_return.rs:52:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n-error: missing return statement\n+error: missing `return` statement\n   --> $DIR/implicit_return.rs:61:13\n    |\n LL |             break true;\n    |             ^^^^^^^^^^ help: change `break` to `return` as shown: `return true`\n \n-error: missing return statement\n+error: missing `return` statement\n   --> $DIR/implicit_return.rs:79:18\n    |\n LL |     let _ = || { true };\n    |                  ^^^^ help: add `return` as shown: `return true`\n \n-error: missing return statement\n+error: missing `return` statement\n   --> $DIR/implicit_return.rs:80:16\n    |\n LL |     let _ = || true;\n    |                ^^^^ help: add `return` as shown: `return true`\n \n-error: missing return statement\n+error: missing `return` statement\n   --> $DIR/implicit_return.rs:88:5\n    |\n LL |     format!(\"test {}\", \"test\")"}, {"sha": "2f6b81cf3b5680ba09acdb176bbafc6fb44b44a6", "filename": "tests/ui/infallible_destructuring_match.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Finfallible_destructuring_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Finfallible_destructuring_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: you seem to be trying to use match to destructure a single infallible pattern. Consider using `let`\n+error: you seem to be trying to use `match` to destructure a single infallible pattern. Consider using `let`\n   --> $DIR/infallible_destructuring_match.rs:18:5\n    |\n LL | /     let data = match wrapper {\n@@ -8,15 +8,15 @@ LL | |     };\n    |\n    = note: `-D clippy::infallible-destructuring-match` implied by `-D warnings`\n \n-error: you seem to be trying to use match to destructure a single infallible pattern. Consider using `let`\n+error: you seem to be trying to use `match` to destructure a single infallible pattern. Consider using `let`\n   --> $DIR/infallible_destructuring_match.rs:39:5\n    |\n LL | /     let data = match wrapper {\n LL | |         TupleStruct(i) => i,\n LL | |     };\n    | |______^ help: try this: `let TupleStruct(data) = wrapper;`\n \n-error: you seem to be trying to use match to destructure a single infallible pattern. Consider using `let`\n+error: you seem to be trying to use `match` to destructure a single infallible pattern. Consider using `let`\n   --> $DIR/infallible_destructuring_match.rs:60:5\n    |\n LL | /     let data = match wrapper {"}, {"sha": "80e2d104f824f440461fd5f3b039bc42eeae2aca", "filename": "tests/ui/into_iter_on_ref.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Finto_iter_on_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Finto_iter_on_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,156 +1,156 @@\n-error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `Vec`\n   --> $DIR/into_iter_on_ref.rs:14:30\n    |\n LL |     let _ = (&vec![1, 2, 3]).into_iter(); //~ WARN equivalent to .iter()\n    |                              ^^^^^^^^^ help: call directly: `iter`\n    |\n    = note: `-D clippy::into-iter-on-ref` implied by `-D warnings`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the slice\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `slice`\n   --> $DIR/into_iter_on_ref.rs:15:46\n    |\n LL |     let _ = vec![1, 2, 3].into_boxed_slice().into_iter(); //~ WARN equivalent to .iter()\n    |                                              ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the slice\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `slice`\n   --> $DIR/into_iter_on_ref.rs:16:41\n    |\n LL |     let _ = std::rc::Rc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the slice\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `slice`\n   --> $DIR/into_iter_on_ref.rs:17:44\n    |\n LL |     let _ = std::sync::Arc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the array\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `array`\n   --> $DIR/into_iter_on_ref.rs:19:32\n    |\n LL |     let _ = (&&&&&&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the array\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `array`\n   --> $DIR/into_iter_on_ref.rs:20:36\n    |\n LL |     let _ = (&&&&mut &&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                    ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter_mut() and will not move the array\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `array`\n   --> $DIR/into_iter_on_ref.rs:21:40\n    |\n LL |     let _ = (&mut &mut &mut [1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter_mut()\n    |                                        ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the Option\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `Option`\n   --> $DIR/into_iter_on_ref.rs:23:24\n    |\n LL |     let _ = (&Some(4)).into_iter(); //~ WARN equivalent to .iter()\n    |                        ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter_mut() and will not move the Option\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `Option`\n   --> $DIR/into_iter_on_ref.rs:24:28\n    |\n LL |     let _ = (&mut Some(5)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                            ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the Result\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `Result`\n   --> $DIR/into_iter_on_ref.rs:25:32\n    |\n LL |     let _ = (&Ok::<_, i32>(6)).into_iter(); //~ WARN equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter_mut() and will not move the Result\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `Result`\n   --> $DIR/into_iter_on_ref.rs:26:37\n    |\n LL |     let _ = (&mut Err::<i32, _>(7)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                     ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the Vec\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `Vec`\n   --> $DIR/into_iter_on_ref.rs:27:34\n    |\n LL |     let _ = (&Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                  ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter_mut() and will not move the Vec\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `Vec`\n   --> $DIR/into_iter_on_ref.rs:28:38\n    |\n LL |     let _ = (&mut Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                      ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the BTreeMap\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `BTreeMap`\n   --> $DIR/into_iter_on_ref.rs:29:44\n    |\n LL |     let _ = (&BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter_mut() and will not move the BTreeMap\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `BTreeMap`\n   --> $DIR/into_iter_on_ref.rs:30:48\n    |\n LL |     let _ = (&mut BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                                ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the VecDeque\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `VecDeque`\n   --> $DIR/into_iter_on_ref.rs:31:39\n    |\n LL |     let _ = (&VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter_mut() and will not move the VecDeque\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `VecDeque`\n   --> $DIR/into_iter_on_ref.rs:32:43\n    |\n LL |     let _ = (&mut VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                           ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the LinkedList\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `LinkedList`\n   --> $DIR/into_iter_on_ref.rs:33:41\n    |\n LL |     let _ = (&LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter_mut() and will not move the LinkedList\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `LinkedList`\n   --> $DIR/into_iter_on_ref.rs:34:45\n    |\n LL |     let _ = (&mut LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                             ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the HashMap\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `HashMap`\n   --> $DIR/into_iter_on_ref.rs:35:43\n    |\n LL |     let _ = (&HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter_mut() and will not move the HashMap\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `HashMap`\n   --> $DIR/into_iter_on_ref.rs:36:47\n    |\n LL |     let _ = (&mut HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                               ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the BTreeSet\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `BTreeSet`\n   --> $DIR/into_iter_on_ref.rs:38:39\n    |\n LL |     let _ = (&BTreeSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the BinaryHeap\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `BinaryHeap`\n   --> $DIR/into_iter_on_ref.rs:39:41\n    |\n LL |     let _ = (&BinaryHeap::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the HashSet\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `HashSet`\n   --> $DIR/into_iter_on_ref.rs:40:38\n    |\n LL |     let _ = (&HashSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                      ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the Path\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `Path`\n   --> $DIR/into_iter_on_ref.rs:41:43\n    |\n LL |     let _ = std::path::Path::new(\"12/34\").into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n-error: this .into_iter() call is equivalent to .iter() and will not move the PathBuf\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `PathBuf`\n   --> $DIR/into_iter_on_ref.rs:42:47\n    |\n LL |     let _ = std::path::PathBuf::from(\"12/34\").into_iter(); //~ ERROR equivalent to .iter()"}, {"sha": "58c0a77c1c84136c6205232aa03ef54be3498cf9", "filename": "tests/ui/large_stack_arrays.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Flarge_stack_arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Flarge_stack_arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_stack_arrays.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -5,31 +5,31 @@ LL |         [0u32; 20_000_000],\n    |         ^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::large-stack-arrays` implied by `-D warnings`\n-   = help: consider allocating on the heap with vec![0u32; 20_000_000].into_boxed_slice()\n+   = help: consider allocating on the heap with `vec![0u32; 20_000_000].into_boxed_slice()`\n \n error: allocating a local array larger than 512000 bytes\n   --> $DIR/large_stack_arrays.rs:18:9\n    |\n LL |         [S { data: [0; 32] }; 5000],\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider allocating on the heap with vec![S { data: [0; 32] }; 5000].into_boxed_slice()\n+   = help: consider allocating on the heap with `vec![S { data: [0; 32] }; 5000].into_boxed_slice()`\n \n error: allocating a local array larger than 512000 bytes\n   --> $DIR/large_stack_arrays.rs:19:9\n    |\n LL |         [Some(\"\"); 20_000_000],\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider allocating on the heap with vec![Some(\"\"); 20_000_000].into_boxed_slice()\n+   = help: consider allocating on the heap with `vec![Some(\"\"); 20_000_000].into_boxed_slice()`\n \n error: allocating a local array larger than 512000 bytes\n   --> $DIR/large_stack_arrays.rs:20:9\n    |\n LL |         [E::T(0); 5000],\n    |         ^^^^^^^^^^^^^^^\n    |\n-   = help: consider allocating on the heap with vec![E::T(0); 5000].into_boxed_slice()\n+   = help: consider allocating on the heap with `vec![E::T(0); 5000].into_boxed_slice()`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "128a22c86e36079026be192ca7c52225ded17908", "filename": "tests/ui/let_return.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Flet_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Flet_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,8 +1,8 @@\n-error: returning the result of a let binding from a block\n+error: returning the result of a `let` binding from a block\n   --> $DIR/let_return.rs:7:5\n    |\n LL |     let x = 5;\n-   |     ---------- unnecessary let binding\n+   |     ---------- unnecessary `let` binding\n LL |     x\n    |     ^\n    |\n@@ -13,11 +13,11 @@ LL |\n LL |     5\n    |\n \n-error: returning the result of a let binding from a block\n+error: returning the result of a `let` binding from a block\n   --> $DIR/let_return.rs:13:9\n    |\n LL |         let x = 5;\n-   |         ---------- unnecessary let binding\n+   |         ---------- unnecessary `let` binding\n LL |         x\n    |         ^\n    |"}, {"sha": "6fa587a4c0a7b6ca538041bc1dcb04692bc1c87a", "filename": "tests/ui/let_underscore.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Flet_underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Flet_underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: non-binding let on a result of a #[must_use] function\n+error: non-binding let on a result of a `#[must_use]` function\n   --> $DIR/let_underscore.rs:59:5\n    |\n LL |     let _ = f();\n@@ -7,87 +7,87 @@ LL |     let _ = f();\n    = note: `-D clippy::let-underscore-must-use` implied by `-D warnings`\n    = help: consider explicitly using function result\n \n-error: non-binding let on an expression with #[must_use] type\n+error: non-binding let on an expression with `#[must_use]` type\n   --> $DIR/let_underscore.rs:60:5\n    |\n LL |     let _ = g();\n    |     ^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n-error: non-binding let on a result of a #[must_use] function\n+error: non-binding let on a result of a `#[must_use]` function\n   --> $DIR/let_underscore.rs:62:5\n    |\n LL |     let _ = l(0_u32);\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n-error: non-binding let on a result of a #[must_use] function\n+error: non-binding let on a result of a `#[must_use]` function\n   --> $DIR/let_underscore.rs:66:5\n    |\n LL |     let _ = s.f();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n-error: non-binding let on an expression with #[must_use] type\n+error: non-binding let on an expression with `#[must_use]` type\n   --> $DIR/let_underscore.rs:67:5\n    |\n LL |     let _ = s.g();\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n-error: non-binding let on a result of a #[must_use] function\n+error: non-binding let on a result of a `#[must_use]` function\n   --> $DIR/let_underscore.rs:70:5\n    |\n LL |     let _ = S::h();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n-error: non-binding let on an expression with #[must_use] type\n+error: non-binding let on an expression with `#[must_use]` type\n   --> $DIR/let_underscore.rs:71:5\n    |\n LL |     let _ = S::p();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n-error: non-binding let on a result of a #[must_use] function\n+error: non-binding let on a result of a `#[must_use]` function\n   --> $DIR/let_underscore.rs:73:5\n    |\n LL |     let _ = S::a();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n-error: non-binding let on an expression with #[must_use] type\n+error: non-binding let on an expression with `#[must_use]` type\n   --> $DIR/let_underscore.rs:75:5\n    |\n LL |     let _ = if true { Ok(()) } else { Err(()) };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n-error: non-binding let on a result of a #[must_use] function\n+error: non-binding let on a result of a `#[must_use]` function\n   --> $DIR/let_underscore.rs:79:5\n    |\n LL |     let _ = a.is_ok();\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using function result\n \n-error: non-binding let on an expression with #[must_use] type\n+error: non-binding let on an expression with `#[must_use]` type\n   --> $DIR/let_underscore.rs:81:5\n    |\n LL |     let _ = a.map(|_| ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider explicitly using expression value\n \n-error: non-binding let on an expression with #[must_use] type\n+error: non-binding let on an expression with `#[must_use]` type\n   --> $DIR/let_underscore.rs:83:5\n    |\n LL |     let _ = a;"}, {"sha": "f67679c7b967db9c41705c70f52771782a7d5a99", "filename": "tests/ui/map_clone.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -34,7 +34,7 @@ error: You are needlessly cloning iterator elements\n   --> $DIR/map_clone.rs:25:29\n    |\n LL |     let _ = std::env::args().map(|v| v.clone());\n-   |                             ^^^^^^^^^^^^^^^^^^^ help: Remove the map call\n+   |                             ^^^^^^^^^^^^^^^^^^^ help: Remove the `map` call\n \n error: aborting due to 6 previous errors\n "}, {"sha": "e2ebd89b4c46fa98b25023bca1ad03266c8b3691", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -2,7 +2,7 @@ error: called `map(..).flatten()` on an `Iterator`. This is more succinctly expr\n   --> $DIR/map_flatten.rs:7:21\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using flat_map instead: `vec![5_i8; 6].into_iter().flat_map(|x| 0..x)`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `vec![5_i8; 6].into_iter().flat_map(|x| 0..x)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n "}, {"sha": "c3b62849cb33f5823d506a5dcea836b29705536b", "filename": "tests/ui/match_as_ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmatch_as_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmatch_as_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_as_ref.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: use as_ref() instead\n+error: use `as_ref()` instead\n   --> $DIR/match_as_ref.rs:8:33\n    |\n LL |       let borrowed: Option<&()> = match owned {\n@@ -10,7 +10,7 @@ LL | |     };\n    |\n    = note: `-D clippy::match-as-ref` implied by `-D warnings`\n \n-error: use as_mut() instead\n+error: use `as_mut()` instead\n   --> $DIR/match_as_ref.rs:14:39\n    |\n LL |       let borrow_mut: Option<&mut ()> = match mut_owned {\n@@ -20,7 +20,7 @@ LL | |         Some(ref mut v) => Some(v),\n LL | |     };\n    | |_____^ help: try this: `mut_owned.as_mut()`\n \n-error: use as_ref() instead\n+error: use `as_ref()` instead\n   --> $DIR/match_as_ref.rs:30:13\n    |\n LL | /             match self.source {"}, {"sha": "42f20862939bf890472ee884f2954fdc9e2d098c", "filename": "tests/ui/match_bool.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmatch_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmatch_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_bool.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -13,7 +13,7 @@ LL | /     match test {\n LL | |         true => 0,\n LL | |         false => 42,\n LL | |     };\n-   | |_____^ help: consider using an if/else expression: `if test { 0 } else { 42 }`\n+   | |_____^ help: consider using an `if`/`else` expression: `if test { 0 } else { 42 }`\n    |\n    = note: `-D clippy::match-bool` implied by `-D warnings`\n \n@@ -24,7 +24,7 @@ LL | /     match option == 1 {\n LL | |         true => 1,\n LL | |         false => 0,\n LL | |     };\n-   | |_____^ help: consider using an if/else expression: `if option == 1 { 1 } else { 0 }`\n+   | |_____^ help: consider using an `if`/`else` expression: `if option == 1 { 1 } else { 0 }`\n \n error: you seem to be trying to match on a boolean expression\n   --> $DIR/match_bool.rs:15:5\n@@ -37,7 +37,7 @@ LL | |         },\n LL | |     };\n    | |_____^\n    |\n-help: consider using an if/else expression\n+help: consider using an `if`/`else` expression\n    |\n LL |     if !test {\n LL |     println!(\"Noooo!\");\n@@ -55,7 +55,7 @@ LL | |         _ => (),\n LL | |     };\n    | |_____^\n    |\n-help: consider using an if/else expression\n+help: consider using an `if`/`else` expression\n    |\n LL |     if !test {\n LL |     println!(\"Noooo!\");\n@@ -73,7 +73,7 @@ LL | |         _ => (),\n LL | |     };\n    | |_____^\n    |\n-help: consider using an if/else expression\n+help: consider using an `if`/`else` expression\n    |\n LL |     if !(test && test) {\n LL |     println!(\"Noooo!\");\n@@ -100,7 +100,7 @@ LL | |         },\n LL | |     };\n    | |_____^\n    |\n-help: consider using an if/else expression\n+help: consider using an `if`/`else` expression\n    |\n LL |     if test {\n LL |     println!(\"Yes!\");"}, {"sha": "f2153cfb3ad3f5b17503c0462f8fbfc55d9cd96f", "filename": "tests/ui/match_same_arms.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmatch_same_arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmatch_same_arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -24,7 +24,7 @@ LL | |             if true {\n LL | |             a\n LL | |         },\n    | |_________^\n-note: `42` has the same arm body as the `_` wildcard, consider removing it`\n+note: `42` has the same arm body as the `_` wildcard, consider removing it\n   --> $DIR/match_same_arms.rs:28:15\n    |\n LL |           42 => {\n@@ -48,7 +48,7 @@ note: same as this\n    |\n LL |         Abc::A => 0,\n    |                   ^\n-note: `Abc::A` has the same arm body as the `_` wildcard, consider removing it`\n+note: `Abc::A` has the same arm body as the `_` wildcard, consider removing it\n   --> $DIR/match_same_arms.rs:50:19\n    |\n LL |         Abc::A => 0,"}, {"sha": "75d050f316b551fd24df8cb9fca86f0b024d5615", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,11 +1,11 @@\n-error: Err(_) will match all errors, maybe not a good idea\n+error: `Err(_)` will match all errors, maybe not a good idea\n   --> $DIR/matches.rs:14:9\n    |\n LL |         Err(_) => panic!(\"err\"),\n    |         ^^^^^^\n    |\n    = note: `-D clippy::match-wild-err-arm` implied by `-D warnings`\n-   = note: to remove this warning, match each error separately or use unreachable macro\n+   = note: to remove this warning, match each error separately or use `unreachable!` macro\n \n error: this `match` has identical arm bodies\n   --> $DIR/matches.rs:13:18\n@@ -26,13 +26,13 @@ LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: Err(_) will match all errors, maybe not a good idea\n+error: `Err(_)` will match all errors, maybe not a good idea\n   --> $DIR/matches.rs:20:9\n    |\n LL |         Err(_) => panic!(),\n    |         ^^^^^^\n    |\n-   = note: to remove this warning, match each error separately or use unreachable macro\n+   = note: to remove this warning, match each error separately or use `unreachable!` macro\n \n error: this `match` has identical arm bodies\n   --> $DIR/matches.rs:19:18\n@@ -52,13 +52,13 @@ LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: Err(_) will match all errors, maybe not a good idea\n+error: `Err(_)` will match all errors, maybe not a good idea\n   --> $DIR/matches.rs:26:9\n    |\n LL |         Err(_) => {\n    |         ^^^^^^\n    |\n-   = note: to remove this warning, match each error separately or use unreachable macro\n+   = note: to remove this warning, match each error separately or use `unreachable!` macro\n \n error: this `match` has identical arm bodies\n   --> $DIR/matches.rs:25:18"}, {"sha": "a90d8b1655dc4d0f0c4216bad9215dcf6d595877", "filename": "tests/ui/mem_forget.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmem_forget.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmem_forget.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,18 +1,18 @@\n-error: usage of mem::forget on Drop type\n+error: usage of `mem::forget` on `Drop` type\n   --> $DIR/mem_forget.rs:14:5\n    |\n LL |     memstuff::forget(six);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::mem-forget` implied by `-D warnings`\n \n-error: usage of mem::forget on Drop type\n+error: usage of `mem::forget` on `Drop` type\n   --> $DIR/mem_forget.rs:17:5\n    |\n LL |     std::mem::forget(seven);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: usage of mem::forget on Drop type\n+error: usage of `mem::forget` on `Drop` type\n   --> $DIR/mem_forget.rs:20:5\n    |\n LL |     forgetSomething(eight);"}, {"sha": "b552c137f7c7c8513799936ce51fe45c7f8c14b3", "filename": "tests/ui/min_max.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmin_max.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmin_max.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,42 +1,42 @@\n-error: this min/max combination leads to constant result\n+error: this `min`/`max` combination leads to constant result\n   --> $DIR/min_max.rs:12:5\n    |\n LL |     min(1, max(3, x));\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::min-max` implied by `-D warnings`\n \n-error: this min/max combination leads to constant result\n+error: this `min`/`max` combination leads to constant result\n   --> $DIR/min_max.rs:13:5\n    |\n LL |     min(max(3, x), 1);\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: this min/max combination leads to constant result\n+error: this `min`/`max` combination leads to constant result\n   --> $DIR/min_max.rs:14:5\n    |\n LL |     max(min(x, 1), 3);\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: this min/max combination leads to constant result\n+error: this `min`/`max` combination leads to constant result\n   --> $DIR/min_max.rs:15:5\n    |\n LL |     max(3, min(x, 1));\n    |     ^^^^^^^^^^^^^^^^^\n \n-error: this min/max combination leads to constant result\n+error: this `min`/`max` combination leads to constant result\n   --> $DIR/min_max.rs:17:5\n    |\n LL |     my_max(3, my_min(x, 1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: this min/max combination leads to constant result\n+error: this `min`/`max` combination leads to constant result\n   --> $DIR/min_max.rs:29:5\n    |\n LL |     min(\"Apple\", max(\"Zoo\", s));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: this min/max combination leads to constant result\n+error: this `min`/`max` combination leads to constant result\n   --> $DIR/min_max.rs:30:5\n    |\n LL |     max(min(s, \"Apple\"), \"Zoo\");"}, {"sha": "7d3dca1800b30a6d50b77c50ff5fb0d56fbe853e", "filename": "tests/ui/missing_const_for_fn/could_be_const.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: this could be a const_fn\n+error: this could be a `const fn`\n   --> $DIR/could_be_const.rs:12:5\n    |\n LL | /     pub fn new() -> Self {\n@@ -8,15 +8,15 @@ LL | |     }\n    |\n    = note: `-D clippy::missing-const-for-fn` implied by `-D warnings`\n \n-error: this could be a const_fn\n+error: this could be a `const fn`\n   --> $DIR/could_be_const.rs:18:1\n    |\n LL | / fn one() -> i32 {\n LL | |     1\n LL | | }\n    | |_^\n \n-error: this could be a const_fn\n+error: this could be a `const fn`\n   --> $DIR/could_be_const.rs:23:1\n    |\n LL | / fn two() -> i32 {\n@@ -25,39 +25,39 @@ LL | |     abc\n LL | | }\n    | |_^\n \n-error: this could be a const_fn\n+error: this could be a `const fn`\n   --> $DIR/could_be_const.rs:30:1\n    |\n LL | / fn string() -> String {\n LL | |     String::new()\n LL | | }\n    | |_^\n \n-error: this could be a const_fn\n+error: this could be a `const fn`\n   --> $DIR/could_be_const.rs:35:1\n    |\n LL | / unsafe fn four() -> i32 {\n LL | |     4\n LL | | }\n    | |_^\n \n-error: this could be a const_fn\n+error: this could be a `const fn`\n   --> $DIR/could_be_const.rs:40:1\n    |\n LL | / fn generic<T>(t: T) -> T {\n LL | |     t\n LL | | }\n    | |_^\n \n-error: this could be a const_fn\n+error: this could be a `const fn`\n   --> $DIR/could_be_const.rs:44:1\n    |\n LL | / fn sub(x: u32) -> usize {\n LL | |     unsafe { transmute(&x) }\n LL | | }\n    | |_^\n \n-error: this could be a const_fn\n+error: this could be a `const fn`\n   --> $DIR/could_be_const.rs:63:9\n    |\n LL | /         pub fn b(self, a: &A) -> B {"}, {"sha": "3b21646f7c3012ed987d58de03b965285a0439c3", "filename": "tests/ui/mul_add.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmul_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmul_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmul_add.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,30 +1,30 @@\n-error: consider using mul_add() for better numerical precision\n+error: consider using `mul_add()` for better numerical precision\n   --> $DIR/mul_add.rs:10:17\n    |\n LL |     let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(a * b + c).mul_add((c + a * b), (c + (a * b) + c))`\n    |\n    = note: `-D clippy::manual-mul-add` implied by `-D warnings`\n \n-error: consider using mul_add() for better numerical precision\n+error: consider using `mul_add()` for better numerical precision\n   --> $DIR/mul_add.rs:10:17\n    |\n LL |     let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n    |                 ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n \n-error: consider using mul_add() for better numerical precision\n+error: consider using `mul_add()` for better numerical precision\n   --> $DIR/mul_add.rs:10:31\n    |\n LL |     let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n    |                               ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n \n-error: consider using mul_add() for better numerical precision\n+error: consider using `mul_add()` for better numerical precision\n   --> $DIR/mul_add.rs:10:46\n    |\n LL |     let test1 = (a * b + c) * (c + a * b) + (c + (a * b) + c);\n    |                                              ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n \n-error: consider using mul_add() for better numerical precision\n+error: consider using `mul_add()` for better numerical precision\n   --> $DIR/mul_add.rs:11:17\n    |\n LL |     let test2 = 1234.567 * 45.67834 + 0.0004;"}, {"sha": "235443f4b02b3ef9c19d41c9f13e89b321c10982", "filename": "tests/ui/mul_add_fixable.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmul_add_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmul_add_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmul_add_fixable.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,36 +1,36 @@\n-error: consider using mul_add() for better numerical precision\n+error: consider using `mul_add()` for better numerical precision\n   --> $DIR/mul_add_fixable.rs:12:17\n    |\n LL |     let test1 = a * b + c;\n    |                 ^^^^^^^^^ help: try: `a.mul_add(b, c)`\n    |\n    = note: `-D clippy::manual-mul-add` implied by `-D warnings`\n \n-error: consider using mul_add() for better numerical precision\n+error: consider using `mul_add()` for better numerical precision\n   --> $DIR/mul_add_fixable.rs:13:17\n    |\n LL |     let test2 = c + a * b;\n    |                 ^^^^^^^^^ help: try: `a.mul_add(b, c)`\n \n-error: consider using mul_add() for better numerical precision\n+error: consider using `mul_add()` for better numerical precision\n   --> $DIR/mul_add_fixable.rs:15:17\n    |\n LL |     let test3 = (a * b) + c;\n    |                 ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n \n-error: consider using mul_add() for better numerical precision\n+error: consider using `mul_add()` for better numerical precision\n   --> $DIR/mul_add_fixable.rs:16:17\n    |\n LL |     let test4 = c + (a * b);\n    |                 ^^^^^^^^^^^ help: try: `a.mul_add(b, c)`\n \n-error: consider using mul_add() for better numerical precision\n+error: consider using `mul_add()` for better numerical precision\n   --> $DIR/mul_add_fixable.rs:18:17\n    |\n LL |     let test5 = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c))`\n \n-error: consider using mul_add() for better numerical precision\n+error: consider using `mul_add()` for better numerical precision\n   --> $DIR/mul_add_fixable.rs:19:17\n    |\n LL |     let test6 = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;"}, {"sha": "7dac086585548431a9c8b0cbd66a6376fecd504c", "filename": "tests/ui/mutex_atomic.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmutex_atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fmutex_atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,44 +1,44 @@\n-error: Consider using an AtomicBool instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+error: Consider using an `AtomicBool` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n   --> $DIR/mutex_atomic.rs:6:5\n    |\n LL |     Mutex::new(true);\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::mutex-atomic` implied by `-D warnings`\n \n-error: Consider using an AtomicUsize instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+error: Consider using an `AtomicUsize` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n   --> $DIR/mutex_atomic.rs:7:5\n    |\n LL |     Mutex::new(5usize);\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: Consider using an AtomicIsize instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+error: Consider using an `AtomicIsize` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n   --> $DIR/mutex_atomic.rs:8:5\n    |\n LL |     Mutex::new(9isize);\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: Consider using an AtomicPtr instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+error: Consider using an `AtomicPtr` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n   --> $DIR/mutex_atomic.rs:10:5\n    |\n LL |     Mutex::new(&x as *const u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Consider using an AtomicPtr instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+error: Consider using an `AtomicPtr` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n   --> $DIR/mutex_atomic.rs:11:5\n    |\n LL |     Mutex::new(&mut x as *mut u32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Consider using an AtomicUsize instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+error: Consider using an `AtomicUsize` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n   --> $DIR/mutex_atomic.rs:12:5\n    |\n LL |     Mutex::new(0u32);\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::mutex-integer` implied by `-D warnings`\n \n-error: Consider using an AtomicIsize instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+error: Consider using an `AtomicIsize` instead of a `Mutex` here. If you just want the locking behavior and not the internal type, consider using `Mutex<()>`.\n   --> $DIR/mutex_atomic.rs:13:5\n    |\n LL |     Mutex::new(0i32);"}, {"sha": "b9215885877dce7c100fc2a99c02b75be760cfb0", "filename": "tests/ui/needless_continue.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fneedless_continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fneedless_continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_continue.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: This else block is redundant.\n+error: This `else` block is redundant.\n \n   --> $DIR/needless_continue.rs:28:16\n    |\n@@ -9,7 +9,7 @@ LL | |         }\n    | |_________^\n    |\n    = note: `-D clippy::needless-continue` implied by `-D warnings`\n-   = help: Consider dropping the else clause and merging the code that follows (in the loop) with the if block, like so:\n+   = help: Consider dropping the `else` clause and merging the code that follows (in the loop) with the `if` block, like so:\n            if i % 2 == 0 && i % 3 == 0 {\n            println!(\"{}\", i);\n            println!(\"{}\", i + 1);\n@@ -47,15 +47,15 @@ LL | |             println!(\"Jabber\");\n LL | |         }\n    | |_________^\n    |\n-   = help: Consider dropping the else clause, and moving out the code in the else block, like so:\n+   = help: Consider dropping the `else` clause, and moving out the code in the `else` block, like so:\n            if (zero!(i % 2) || nonzero!(i % 5)) && i % 3 != 0 {\n                continue;\n            }\n            println!(\"Blabber\");\n            println!(\"Jabber\");\n            ...\n \n-error: This else block is redundant.\n+error: This `else` block is redundant.\n \n   --> $DIR/needless_continue.rs:100:24\n    |\n@@ -65,7 +65,7 @@ LL | |                     continue 'inner; // should lint here\n LL | |                 }\n    | |_________________^\n    |\n-   = help: Consider dropping the else clause and merging the code that follows (in the loop) with the if block, like so:\n+   = help: Consider dropping the `else` clause and merging the code that follows (in the loop) with the `if` block, like so:\n            if condition() {\n            println!(\"bar-3\");\n            // Merged code follows...println!(\"bar-4\");\n@@ -90,7 +90,7 @@ LL | |                     println!(\"bar-5\");\n LL | |                 }\n    | |_________________^\n    |\n-   = help: Consider dropping the else clause, and moving out the code in the else block, like so:\n+   = help: Consider dropping the `else` clause, and moving out the code in the `else` block, like so:\n            if condition() {\n                continue;\n            }"}, {"sha": "9aa783bf904e1224a5d1361c0579fd01a2050c73", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -120,7 +120,7 @@ error: this argument is passed by value, but not consumed in the function body\n LL | fn bar_copy(x: u32, y: CopyWrapper) {\n    |                        ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n-help: consider marking this type as Copy\n+help: consider marking this type as `Copy`\n   --> $DIR/needless_pass_by_value.rs:124:1\n    |\n LL | struct CopyWrapper(u32);\n@@ -132,7 +132,7 @@ error: this argument is passed by value, but not consumed in the function body\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n-help: consider marking this type as Copy\n+help: consider marking this type as `Copy`\n   --> $DIR/needless_pass_by_value.rs:124:1\n    |\n LL | struct CopyWrapper(u32);\n@@ -144,7 +144,7 @@ error: this argument is passed by value, but not consumed in the function body\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n-help: consider marking this type as Copy\n+help: consider marking this type as `Copy`\n   --> $DIR/needless_pass_by_value.rs:124:1\n    |\n LL | struct CopyWrapper(u32);\n@@ -156,7 +156,7 @@ error: this argument is passed by value, but not consumed in the function body\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                                                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n-help: consider marking this type as Copy\n+help: consider marking this type as `Copy`\n   --> $DIR/needless_pass_by_value.rs:124:1\n    |\n LL | struct CopyWrapper(u32);"}, {"sha": "c34eecbcbb639bc906ff845e5332e790cf3364ee", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,72 +1,72 @@\n-error: unneeded return statement\n+error: unneeded `return` statement\n   --> $DIR/needless_return.rs:18:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n \n-error: unneeded return statement\n+error: unneeded `return` statement\n   --> $DIR/needless_return.rs:22:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n-error: unneeded return statement\n+error: unneeded `return` statement\n   --> $DIR/needless_return.rs:27:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n-error: unneeded return statement\n+error: unneeded `return` statement\n   --> $DIR/needless_return.rs:29:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n-error: unneeded return statement\n+error: unneeded `return` statement\n   --> $DIR/needless_return.rs:35:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n-error: unneeded return statement\n+error: unneeded `return` statement\n   --> $DIR/needless_return.rs:37:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n-error: unneeded return statement\n+error: unneeded `return` statement\n   --> $DIR/needless_return.rs:44:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n-error: unneeded return statement\n+error: unneeded `return` statement\n   --> $DIR/needless_return.rs:46:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n-error: unneeded return statement\n+error: unneeded `return` statement\n   --> $DIR/needless_return.rs:54:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n-error: unneeded return statement\n+error: unneeded `return` statement\n   --> $DIR/needless_return.rs:59:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n-error: unneeded return statement\n+error: unneeded `return` statement\n   --> $DIR/needless_return.rs:61:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n-error: unneeded return statement\n+error: unneeded `return` statement\n   --> $DIR/needless_return.rs:68:14\n    |\n LL |         _ => return,"}, {"sha": "f08bbd6a12c597e4b0912db1a23cbe0bd8bf9bd4", "filename": "tests/ui/neg_multiply.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fneg_multiply.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fneg_multiply.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_multiply.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,12 +1,12 @@\n-error: Negation by multiplying with -1\n+error: Negation by multiplying with `-1`\n   --> $DIR/neg_multiply.rs:27:5\n    |\n LL |     x * -1;\n    |     ^^^^^^\n    |\n    = note: `-D clippy::neg-multiply` implied by `-D warnings`\n \n-error: Negation by multiplying with -1\n+error: Negation by multiplying with `-1`\n   --> $DIR/neg_multiply.rs:29:5\n    |\n LL |     -1 * x;"}, {"sha": "c80bf3deb95b9475e72452d3dfdcdb893a80951d", "filename": "tests/ui/non_copy_const.stderr", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fnon_copy_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fnon_copy_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_copy_const.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:9:1\n    |\n LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n@@ -8,23 +8,23 @@ LL | const ATOMIC: AtomicUsize = AtomicUsize::new(5); //~ ERROR interior mutable\n    |\n    = note: `#[deny(clippy::declare_interior_mutable_const)]` on by default\n \n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:10:1\n    |\n LL | const CELL: Cell<usize> = Cell::new(6); //~ ERROR interior mutable\n    | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |\n    | make this a static item (maybe with lazy_static)\n \n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:11:1\n    |\n LL | const ATOMIC_TUPLE: ([AtomicUsize; 1], Vec<AtomicUsize>, u8) = ([ATOMIC], Vec::new(), 7);\n    | -----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |\n    | make this a static item (maybe with lazy_static)\n \n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:16:9\n    |\n LL |         const $name: $ty = $e;\n@@ -33,37 +33,37 @@ LL |         const $name: $ty = $e;\n LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n    | ------------------------------------------ in this macro invocation\n \n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:40:5\n    |\n LL |     const ATOMIC: AtomicUsize; //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:44:5\n    |\n LL |     const INPUT: T;\n    |     ^^^^^^^^^^^^^-^\n    |                  |\n    |                  consider requiring `T` to be `Copy`\n \n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:47:5\n    |\n LL |     const ASSOC: Self::NonCopyType;\n    |     ^^^^^^^^^^^^^-----------------^\n    |                  |\n    |                  consider requiring `<Self as Trait<T>>::NonCopyType` to be `Copy`\n \n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:51:5\n    |\n LL |     const AN_INPUT: T = Self::INPUT;\n    |     ^^^^^^^^^^^^^^^^-^^^^^^^^^^^^^^^\n    |                     |\n    |                     consider requiring `T` to be `Copy`\n \n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:16:9\n    |\n LL |         const $name: $ty = $e;\n@@ -72,37 +72,37 @@ LL |         const $name: $ty = $e;\n LL |     declare_const!(ANOTHER_INPUT: T = Self::INPUT); //~ ERROR interior mutable\n    |     ----------------------------------------------- in this macro invocation\n \n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:60:5\n    |\n LL |     const SELF_2: Self;\n    |     ^^^^^^^^^^^^^^----^\n    |                   |\n    |                   consider requiring `Self` to be `Copy`\n \n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:81:5\n    |\n LL |     const ASSOC_3: AtomicUsize = AtomicUsize::new(14); //~ ERROR interior mutable\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:84:5\n    |\n LL |     const U_SELF: U = U::SELF_2;\n    |     ^^^^^^^^^^^^^^-^^^^^^^^^^^^^\n    |                   |\n    |                   consider requiring `U` to be `Copy`\n \n-error: a const item should never be interior mutable\n+error: a `const` item should never be interior mutable\n   --> $DIR/non_copy_const.rs:87:5\n    |\n LL |     const T_ASSOC: T::NonCopyType = T::ASSOC;\n    |     ^^^^^^^^^^^^^^^--------------^^^^^^^^^^^^\n    |                    |\n    |                    consider requiring `<T as Trait<u32>>::NonCopyType` to be `Copy`\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:94:5\n    |\n LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n@@ -111,119 +111,119 @@ LL |     ATOMIC.store(1, Ordering::SeqCst); //~ ERROR interior mutability\n    = note: `#[deny(clippy::borrow_interior_mutable_const)]` on by default\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:95:16\n    |\n LL |     assert_eq!(ATOMIC.load(Ordering::SeqCst), 5); //~ ERROR interior mutability\n    |                ^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:98:22\n    |\n LL |     let _once_ref = &ONCE_INIT; //~ ERROR interior mutability\n    |                      ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:99:25\n    |\n LL |     let _once_ref_2 = &&ONCE_INIT; //~ ERROR interior mutability\n    |                         ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:100:27\n    |\n LL |     let _once_ref_4 = &&&&ONCE_INIT; //~ ERROR interior mutability\n    |                           ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:101:26\n    |\n LL |     let _once_mut = &mut ONCE_INIT; //~ ERROR interior mutability\n    |                          ^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:112:14\n    |\n LL |     let _ = &ATOMIC_TUPLE; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:113:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:114:19\n    |\n LL |     let _ = &(&&&&ATOMIC_TUPLE).0; //~ ERROR interior mutability\n    |                   ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:115:14\n    |\n LL |     let _ = &ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |              ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:116:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0].load(Ordering::SeqCst); //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:122:13\n    |\n LL |     let _ = ATOMIC_TUPLE.0[0]; //~ ERROR interior mutability\n    |             ^^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:127:5\n    |\n LL |     CELL.set(2); //~ ERROR interior mutability\n    |     ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:128:16\n    |\n LL |     assert_eq!(CELL.get(), 6); //~ ERROR interior mutability\n    |                ^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:141:5\n    |\n LL |     u64::ATOMIC.store(5, Ordering::SeqCst); //~ ERROR interior mutability\n    |     ^^^^^^^^^^^\n    |\n    = help: assign this const to a local or static variable, and use the variable here\n \n-error: a const item with interior mutability should not be borrowed\n+error: a `const` item with interior mutability should not be borrowed\n   --> $DIR/non_copy_const.rs:142:16\n    |\n LL |     assert_eq!(u64::ATOMIC.load(Ordering::SeqCst), 9); //~ ERROR interior mutability"}, {"sha": "f588c8bfed4c5b209c20e505b239607d25b0f0ba", "filename": "tests/ui/ok_expect.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fok_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fok_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_expect.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,30 +1,30 @@\n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n   --> $DIR/ok_expect.rs:14:5\n    |\n LL |     res.ok().expect(\"disaster!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::ok-expect` implied by `-D warnings`\n \n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n   --> $DIR/ok_expect.rs:20:5\n    |\n LL |     res3.ok().expect(\"whoof\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n   --> $DIR/ok_expect.rs:22:5\n    |\n LL |     res4.ok().expect(\"argh\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n   --> $DIR/ok_expect.rs:24:5\n    |\n LL |     res5.ok().expect(\"oops\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n   --> $DIR/ok_expect.rs:26:5\n    |\n LL |     res6.ok().expect(\"meh\");"}, {"sha": "26fe9f6fb206f86433da3592d13f6adf30771c1d", "filename": "tests/ui/open_options.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fopen_options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fopen_options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopen_options.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,42 +1,42 @@\n-error: file opened with \"truncate\" and \"read\"\n+error: file opened with `truncate` and `read`\n   --> $DIR/open_options.rs:6:5\n    |\n LL |     OpenOptions::new().read(true).truncate(true).open(\"foo.txt\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::nonsensical-open-options` implied by `-D warnings`\n \n-error: file opened with \"append\" and \"truncate\"\n+error: file opened with `append` and `truncate`\n   --> $DIR/open_options.rs:7:5\n    |\n LL |     OpenOptions::new().append(true).truncate(true).open(\"foo.txt\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the method \"read\" is called more than once\n+error: the method `read` is called more than once\n   --> $DIR/open_options.rs:9:5\n    |\n LL |     OpenOptions::new().read(true).read(false).open(\"foo.txt\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the method \"create\" is called more than once\n+error: the method `create` is called more than once\n   --> $DIR/open_options.rs:10:5\n    |\n LL |     OpenOptions::new().create(true).create(false).open(\"foo.txt\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the method \"write\" is called more than once\n+error: the method `write` is called more than once\n   --> $DIR/open_options.rs:11:5\n    |\n LL |     OpenOptions::new().write(true).write(false).open(\"foo.txt\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the method \"append\" is called more than once\n+error: the method `append` is called more than once\n   --> $DIR/open_options.rs:12:5\n    |\n LL |     OpenOptions::new().append(true).append(false).open(\"foo.txt\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: the method \"truncate\" is called more than once\n+error: the method `truncate` is called more than once\n   --> $DIR/open_options.rs:13:5\n    |\n LL |     OpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\");"}, {"sha": "6f707987dbcaafd6ce879830f8c46b492de69428", "filename": "tests/ui/option_map_or_none.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Foption_map_or_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Foption_map_or_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_or_none.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,12 +1,12 @@\n-error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n+error: called `map_or(None, f)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n   --> $DIR/option_map_or_none.rs:10:13\n    |\n LL |     let _ = opt.map_or(None, |x| Some(x + 1));\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using and_then instead: `opt.and_then(|x| Some(x + 1))`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `opt.and_then(|x| Some(x + 1))`\n    |\n    = note: `-D clippy::option-map-or-none` implied by `-D warnings`\n \n-error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n+error: called `map_or(None, f)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n   --> $DIR/option_map_or_none.rs:13:13\n    |\n LL |       let _ = opt.map_or(None, |x| {\n@@ -15,7 +15,7 @@ LL | |                         Some(x + 1)\n LL | |                        });\n    | |_________________________^\n    |\n-help: try using and_then instead\n+help: try using `and_then` instead\n    |\n LL |     let _ = opt.and_then(|x| {\n LL |                         Some(x + 1)"}, {"sha": "f993e1931d59fabc4f6cd40fa3d4ab72b2aa2695", "filename": "tests/ui/option_map_unit_fn_fixable.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Foption_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f)` on an Option value where `f` is a unit function\n+error: called `map(f)` on an `Option` value where `f` is a unit function\n   --> $DIR/option_map_unit_fn_fixable.rs:34:5\n    |\n LL |     x.field.map(do_nothing);\n@@ -8,127 +8,127 @@ LL |     x.field.map(do_nothing);\n    |\n    = note: `-D clippy::option-map-unit-fn` implied by `-D warnings`\n \n-error: called `map(f)` on an Option value where `f` is a unit function\n+error: called `map(f)` on an `Option` value where `f` is a unit function\n   --> $DIR/option_map_unit_fn_fixable.rs:36:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { do_nothing(x_field) }`\n \n-error: called `map(f)` on an Option value where `f` is a unit function\n+error: called `map(f)` on an `Option` value where `f` is a unit function\n   --> $DIR/option_map_unit_fn_fixable.rs:38:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(x_field) = x.field { diverge(x_field) }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:44:5\n    |\n LL |     x.field.map(|value| x.do_option_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_nothing(value + captured) }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:46:5\n    |\n LL |     x.field.map(|value| { x.do_option_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { x.do_option_plus_one(value + captured); }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:49:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:51:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:53:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:55:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:58:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:60:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:62:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:64:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:69:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { let y = plus_one(value + captured); }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:71:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:73:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Some(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an Option value where `f` is a unit closure\n+error: called `map(f)` on an `Option` value where `f` is a unit closure\n   --> $DIR/option_map_unit_fn_fixable.rs:76:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });}"}, {"sha": "f05f2893de23ad69ee78ad7a827aa8a1b2f86265", "filename": "tests/ui/option_map_unwrap_or.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Foption_map_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Foption_map_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unwrap_or.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n+error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n   --> $DIR/option_map_unwrap_or.rs:20:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n@@ -13,7 +13,7 @@ help: use `map_or(a, f)` instead\n LL |     let _ = opt.map_or(0, |x| x + 1);\n    |                 ^^^^^^ ^^          --\n \n-error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n+error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n   --> $DIR/option_map_unwrap_or.rs:24:13\n    |\n LL |       let _ = opt.map(|x| {\n@@ -31,7 +31,7 @@ LL |     }\n LL |     );\n    |\n \n-error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n+error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n   --> $DIR/option_map_unwrap_or.rs:28:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n@@ -48,7 +48,7 @@ LL |             0\n LL |         }, |x| x + 1);\n    |\n \n-error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n+error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n   --> $DIR/option_map_unwrap_or.rs:33:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n@@ -59,7 +59,7 @@ help: use `and_then(f)` instead\n LL |     let _ = opt.and_then(|x| Some(x + 1));\n    |                 ^^^^^^^^                --\n \n-error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n+error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n   --> $DIR/option_map_unwrap_or.rs:35:13\n    |\n LL |       let _ = opt.map(|x| {\n@@ -77,7 +77,7 @@ LL |     }\n LL |     );\n    |\n \n-error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n+error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n   --> $DIR/option_map_unwrap_or.rs:39:13\n    |\n LL |       let _ = opt\n@@ -91,7 +91,7 @@ help: use `and_then(f)` instead\n LL |         .and_then(|x| Some(x + 1));\n    |          ^^^^^^^^                --\n \n-error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n+error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n   --> $DIR/option_map_unwrap_or.rs:50:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n@@ -102,7 +102,7 @@ help: use `map_or(a, f)` instead\n LL |     let _ = Some(\"prefix\").map_or(id, |p| format!(\"{}.\", p));\n    |                            ^^^^^^ ^^^                      --\n \n-error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n+error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n   --> $DIR/option_map_unwrap_or.rs:54:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n@@ -114,7 +114,7 @@ LL | |         .unwrap_or_else(|| 0);\n    = note: `-D clippy::option-map-unwrap-or-else` implied by `-D warnings`\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n-error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n+error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n   --> $DIR/option_map_unwrap_or.rs:58:13\n    |\n LL |       let _ = opt.map(|x| {\n@@ -124,7 +124,7 @@ LL | |     }\n LL | |     ).unwrap_or_else(|| 0);\n    | |__________________________^\n \n-error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n+error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n   --> $DIR/option_map_unwrap_or.rs:62:13\n    |\n LL |       let _ = opt.map(|x| x + 1)"}, {"sha": "d53c1edecac018f5d605b0653cc8f9c71603dd8e", "filename": "tests/ui/range.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: It is more idiomatic to use v1.iter().enumerate()\n+error: It is more idiomatic to use `v1.iter().enumerate()`\n   --> $DIR/range.rs:5:14\n    |\n LL |     let _x = v1.iter().zip(0..v1.len());"}, {"sha": "33be39e34f15eee3c8fff95c08d492af431d5cd7", "filename": "tests/ui/result_map_unit_fn_fixable.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f)` on an Result value where `f` is a unit function\n+error: called `map(f)` on an `Result` value where `f` is a unit function\n   --> $DIR/result_map_unit_fn_fixable.rs:35:5\n    |\n LL |     x.field.map(do_nothing);\n@@ -8,127 +8,127 @@ LL |     x.field.map(do_nothing);\n    |\n    = note: `-D clippy::result-map-unit-fn` implied by `-D warnings`\n \n-error: called `map(f)` on an Result value where `f` is a unit function\n+error: called `map(f)` on an `Result` value where `f` is a unit function\n   --> $DIR/result_map_unit_fn_fixable.rs:37:5\n    |\n LL |     x.field.map(do_nothing);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(x_field) = x.field { do_nothing(x_field) }`\n \n-error: called `map(f)` on an Result value where `f` is a unit function\n+error: called `map(f)` on an `Result` value where `f` is a unit function\n   --> $DIR/result_map_unit_fn_fixable.rs:39:5\n    |\n LL |     x.field.map(diverge);\n    |     ^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(x_field) = x.field { diverge(x_field) }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:45:5\n    |\n LL |     x.field.map(|value| x.do_result_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_nothing(value + captured) }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:47:5\n    |\n LL |     x.field.map(|value| { x.do_result_plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { x.do_result_plus_one(value + captured); }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:50:5\n    |\n LL |     x.field.map(|value| do_nothing(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:52:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured) }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:54:5\n    |\n LL |     x.field.map(|value| { do_nothing(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:56:5\n    |\n LL |     x.field.map(|value| { { do_nothing(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { do_nothing(value + captured); }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:59:5\n    |\n LL |     x.field.map(|value| diverge(value + captured));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:61:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured) });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured) }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:63:5\n    |\n LL |     x.field.map(|value| { diverge(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:65:5\n    |\n LL |     x.field.map(|value| { { diverge(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { diverge(value + captured); }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:70:5\n    |\n LL |     x.field.map(|value| { let y = plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { let y = plus_one(value + captured); }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:72:5\n    |\n LL |     x.field.map(|value| { plus_one(value + captured); });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:74:5\n    |\n LL |     x.field.map(|value| { { plus_one(value + captured); } });\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n    |     |\n    |     help: try this: `if let Ok(value) = x.field { plus_one(value + captured); }`\n \n-error: called `map(f)` on an Result value where `f` is a unit closure\n+error: called `map(f)` on an `Result` value where `f` is a unit closure\n   --> $DIR/result_map_unit_fn_fixable.rs:77:5\n    |\n LL |     x.field.map(|ref value| { do_nothing(value + captured) });"}, {"sha": "ec7bc8f12414f05258c2e0feb2336cd289c3e5f6", "filename": "tests/ui/result_map_unwrap_or_else.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fresult_map_unwrap_or_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fresult_map_unwrap_or_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unwrap_or_else.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `.map_or_else(g, f)` instead\n+error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n   --> $DIR/result_map_unwrap_or_else.rs:15:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n@@ -7,15 +7,15 @@ LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even t\n    = note: `-D clippy::result-map-unwrap-or-else` implied by `-D warnings`\n    = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n \n-error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `.map_or_else(g, f)` instead\n+error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n   --> $DIR/result_map_unwrap_or_else.rs:17:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n \n-error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `.map_or_else(g, f)` instead\n+error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n   --> $DIR/result_map_unwrap_or_else.rs:18:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);"}, {"sha": "363a03846d236e72ce5b2cd3296e16bb4d7aaf02", "filename": "tests/ui/same_functions_in_if_condition.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fsame_functions_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_functions_in_if_condition.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: this `if` has the same function call as a previous if\n+error: this `if` has the same function call as a previous `if`\n   --> $DIR/same_functions_in_if_condition.rs:29:15\n    |\n LL |     } else if function() {\n@@ -11,7 +11,7 @@ note: same as this\n LL |     if function() {\n    |        ^^^^^^^^^^\n \n-error: this `if` has the same function call as a previous if\n+error: this `if` has the same function call as a previous `if`\n   --> $DIR/same_functions_in_if_condition.rs:34:15\n    |\n LL |     } else if fn_arg(a) {\n@@ -23,7 +23,7 @@ note: same as this\n LL |     if fn_arg(a) {\n    |        ^^^^^^^^^\n \n-error: this `if` has the same function call as a previous if\n+error: this `if` has the same function call as a previous `if`\n   --> $DIR/same_functions_in_if_condition.rs:39:15\n    |\n LL |     } else if obj.method() {\n@@ -35,7 +35,7 @@ note: same as this\n LL |     if obj.method() {\n    |        ^^^^^^^^^^^^\n \n-error: this `if` has the same function call as a previous if\n+error: this `if` has the same function call as a previous `if`\n   --> $DIR/same_functions_in_if_condition.rs:44:15\n    |\n LL |     } else if obj.method_arg(a) {\n@@ -47,7 +47,7 @@ note: same as this\n LL |     if obj.method_arg(a) {\n    |        ^^^^^^^^^^^^^^^^^\n \n-error: this `if` has the same function call as a previous if\n+error: this `if` has the same function call as a previous `if`\n   --> $DIR/same_functions_in_if_condition.rs:51:15\n    |\n LL |     } else if v.pop() == None {\n@@ -59,7 +59,7 @@ note: same as this\n LL |     if v.pop() == None {\n    |        ^^^^^^^^^^^^^^^\n \n-error: this `if` has the same function call as a previous if\n+error: this `if` has the same function call as a previous `if`\n   --> $DIR/same_functions_in_if_condition.rs:56:15\n    |\n LL |     } else if v.len() == 42 {"}, {"sha": "fe7211c53f8521bb6f155121b14bc0c69eb341f3", "filename": "tests/ui/single_char_pattern.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fsingle_char_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fsingle_char_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -2,165 +2,165 @@ error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:9:13\n    |\n LL |     x.split(\"x\");\n-   |             ^^^ help: try using a char instead: `'x'`\n+   |             ^^^ help: try using a `char` instead: `'x'`\n    |\n    = note: `-D clippy::single-char-pattern` implied by `-D warnings`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:26:16\n    |\n LL |     x.contains(\"x\");\n-   |                ^^^ help: try using a char instead: `'x'`\n+   |                ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:27:19\n    |\n LL |     x.starts_with(\"x\");\n-   |                   ^^^ help: try using a char instead: `'x'`\n+   |                   ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:28:17\n    |\n LL |     x.ends_with(\"x\");\n-   |                 ^^^ help: try using a char instead: `'x'`\n+   |                 ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:29:12\n    |\n LL |     x.find(\"x\");\n-   |            ^^^ help: try using a char instead: `'x'`\n+   |            ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:30:13\n    |\n LL |     x.rfind(\"x\");\n-   |             ^^^ help: try using a char instead: `'x'`\n+   |             ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:31:14\n    |\n LL |     x.rsplit(\"x\");\n-   |              ^^^ help: try using a char instead: `'x'`\n+   |              ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:32:24\n    |\n LL |     x.split_terminator(\"x\");\n-   |                        ^^^ help: try using a char instead: `'x'`\n+   |                        ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:33:25\n    |\n LL |     x.rsplit_terminator(\"x\");\n-   |                         ^^^ help: try using a char instead: `'x'`\n+   |                         ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:34:17\n    |\n LL |     x.splitn(0, \"x\");\n-   |                 ^^^ help: try using a char instead: `'x'`\n+   |                 ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:35:18\n    |\n LL |     x.rsplitn(0, \"x\");\n-   |                  ^^^ help: try using a char instead: `'x'`\n+   |                  ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:36:15\n    |\n LL |     x.matches(\"x\");\n-   |               ^^^ help: try using a char instead: `'x'`\n+   |               ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:37:16\n    |\n LL |     x.rmatches(\"x\");\n-   |                ^^^ help: try using a char instead: `'x'`\n+   |                ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:38:21\n    |\n LL |     x.match_indices(\"x\");\n-   |                     ^^^ help: try using a char instead: `'x'`\n+   |                     ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:39:22\n    |\n LL |     x.rmatch_indices(\"x\");\n-   |                      ^^^ help: try using a char instead: `'x'`\n+   |                      ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:40:26\n    |\n LL |     x.trim_start_matches(\"x\");\n-   |                          ^^^ help: try using a char instead: `'x'`\n+   |                          ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:41:24\n    |\n LL |     x.trim_end_matches(\"x\");\n-   |                        ^^^ help: try using a char instead: `'x'`\n+   |                        ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:43:13\n    |\n LL |     x.split(\"/n\");\n-   |             ^^^^ help: try using a char instead: `'/n'`\n+   |             ^^^^ help: try using a `char` instead: `'/n'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:44:13\n    |\n LL |     x.split(\"'\");\n-   |             ^^^ help: try using a char instead: `'/''`\n+   |             ^^^ help: try using a `char` instead: `'/''`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:45:13\n    |\n LL |     x.split(\"/'\");\n-   |             ^^^^ help: try using a char instead: `'/''`\n+   |             ^^^^ help: try using a `char` instead: `'/''`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:50:31\n    |\n LL |     x.replace(\";\", \",\").split(\",\"); // issue #2978\n-   |                               ^^^ help: try using a char instead: `','`\n+   |                               ^^^ help: try using a `char` instead: `','`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:51:19\n    |\n LL |     x.starts_with(\"/x03\"); // issue #2996\n-   |                   ^^^^^^ help: try using a char instead: `'/x03'`\n+   |                   ^^^^^^ help: try using a `char` instead: `'/x03'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:58:13\n    |\n LL |     x.split(r\"a\");\n-   |             ^^^^ help: try using a char instead: `'a'`\n+   |             ^^^^ help: try using a `char` instead: `'a'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:59:13\n    |\n LL |     x.split(r#\"a\"#);\n-   |             ^^^^^^ help: try using a char instead: `'a'`\n+   |             ^^^^^^ help: try using a `char` instead: `'a'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:60:13\n    |\n LL |     x.split(r###\"a\"###);\n-   |             ^^^^^^^^^^ help: try using a char instead: `'a'`\n+   |             ^^^^^^^^^^ help: try using a `char` instead: `'a'`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:61:13\n    |\n LL |     x.split(r###\"'\"###);\n-   |             ^^^^^^^^^^ help: try using a char instead: `'/''`\n+   |             ^^^^^^^^^^ help: try using a `char` instead: `'/''`\n \n error: single-character string constant used as pattern\n   --> $DIR/single_char_pattern.rs:62:13\n    |\n LL |     x.split(r###\"#\"###);\n-   |             ^^^^^^^^^^ help: try using a char instead: `'#'`\n+   |             ^^^^^^^^^^ help: try using a `char` instead: `'#'`\n \n error: aborting due to 27 previous errors\n "}, {"sha": "59c3e05a1aa3ce9bf94ffc9cc87f4088275868b9", "filename": "tests/ui/types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Ftypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Ftypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypes.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,4 +1,4 @@\n-error: casting i32 to i64 may become silently lossy if you later change the type\n+error: casting `i32` to `i64` may become silently lossy if you later change the type\n   --> $DIR/types.rs:14:22\n    |\n LL |     let c_i64: i64 = c as i64;"}, {"sha": "8ff1e5dea600363fd583099b9e3b51b2aca7facf", "filename": "tests/ui/unnecessary_cast_fixable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Funnecessary_cast_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Funnecessary_cast_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_cast_fixable.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,18 +1,18 @@\n-error: casting integer literal to f32 is unnecessary\n+error: casting integer literal to `f32` is unnecessary\n   --> $DIR/unnecessary_cast_fixable.rs:8:5\n    |\n LL |     100 as f32;\n    |     ^^^^^^^^^^ help: try: `100_f32`\n    |\n    = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n \n-error: casting integer literal to f64 is unnecessary\n+error: casting integer literal to `f64` is unnecessary\n   --> $DIR/unnecessary_cast_fixable.rs:9:5\n    |\n LL |     100 as f64;\n    |     ^^^^^^^^^^ help: try: `100_f64`\n \n-error: casting integer literal to f64 is unnecessary\n+error: casting integer literal to `f64` is unnecessary\n   --> $DIR/unnecessary_cast_fixable.rs:10:5\n    |\n LL |     100_i32 as f64;"}, {"sha": "69447e6826c19e989fd6b819aea47f849c0ab7ec", "filename": "tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_clone.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -18,33 +18,33 @@ error: using `clone` on a `Copy` type\n LL |     rc.borrow().clone();\n    |     ^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*rc.borrow()`\n \n-error: using '.clone()' on a ref-counted pointer\n+error: using `.clone()` on a ref-counted pointer\n   --> $DIR/unnecessary_clone.rs:39:5\n    |\n LL |     rc.clone();\n    |     ^^^^^^^^^^ help: try this: `Rc::<bool>::clone(&rc)`\n    |\n    = note: `-D clippy::clone-on-ref-ptr` implied by `-D warnings`\n \n-error: using '.clone()' on a ref-counted pointer\n+error: using `.clone()` on a ref-counted pointer\n   --> $DIR/unnecessary_clone.rs:42:5\n    |\n LL |     arc.clone();\n    |     ^^^^^^^^^^^ help: try this: `Arc::<bool>::clone(&arc)`\n \n-error: using '.clone()' on a ref-counted pointer\n+error: using `.clone()` on a ref-counted pointer\n   --> $DIR/unnecessary_clone.rs:45:5\n    |\n LL |     rcweak.clone();\n    |     ^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&rcweak)`\n \n-error: using '.clone()' on a ref-counted pointer\n+error: using `.clone()` on a ref-counted pointer\n   --> $DIR/unnecessary_clone.rs:48:5\n    |\n LL |     arc_weak.clone();\n    |     ^^^^^^^^^^^^^^^^ help: try this: `Weak::<bool>::clone(&arc_weak)`\n \n-error: using '.clone()' on a ref-counted pointer\n+error: using `.clone()` on a ref-counted pointer\n   --> $DIR/unnecessary_clone.rs:52:33\n    |\n LL |     let _: Arc<dyn SomeTrait> = x.clone();"}, {"sha": "4f871cbe41b06a0588fa1f9c95fade5c4e47f254", "filename": "tests/ui/unsafe_removed_from_name.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Funsafe_removed_from_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Funsafe_removed_from_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_removed_from_name.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,18 +1,18 @@\n-error: removed \"unsafe\" from the name of `UnsafeCell` in use as `TotallySafeCell`\n+error: removed `unsafe` from the name of `UnsafeCell` in use as `TotallySafeCell`\n   --> $DIR/unsafe_removed_from_name.rs:5:1\n    |\n LL | use std::cell::UnsafeCell as TotallySafeCell;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unsafe-removed-from-name` implied by `-D warnings`\n \n-error: removed \"unsafe\" from the name of `UnsafeCell` in use as `TotallySafeCellAgain`\n+error: removed `unsafe` from the name of `UnsafeCell` in use as `TotallySafeCellAgain`\n   --> $DIR/unsafe_removed_from_name.rs:7:1\n    |\n LL | use std::cell::UnsafeCell as TotallySafeCellAgain;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: removed \"unsafe\" from the name of `Unsafe` in use as `LieAboutModSafety`\n+error: removed `unsafe` from the name of `Unsafe` in use as `LieAboutModSafety`\n   --> $DIR/unsafe_removed_from_name.rs:21:1\n    |\n LL | use mod_with_some_unsafe_things::Unsafe as LieAboutModSafety;"}, {"sha": "6609a3ff72d476e6f2a538a036c4132a3a25062a", "filename": "tests/ui/unwrap.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Funwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Funwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -1,12 +1,12 @@\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n+error: used `unwrap()` on `an Option` value. If you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n   --> $DIR/unwrap.rs:5:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: used unwrap() on a Result value. If you don't want to handle the Err case gracefully, consider using expect() to provide a better panic message\n+error: used `unwrap()` on `a Result` value. If you don't want to handle the `Err` case gracefully, consider using `expect()` to provide a better panic message\n   --> $DIR/unwrap.rs:10:13\n    |\n LL |     let _ = res.unwrap();"}, {"sha": "e4d6f168038b9c92a8c49a73385d761e06f0f403", "filename": "tests/ui/zero_div_zero.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c09206899656f5730f8007dbc86385122c34a9ca/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=c09206899656f5730f8007dbc86385122c34a9ca", "patch": "@@ -6,7 +6,7 @@ LL |     let nan = 0.0 / 0.0;\n    |\n    = note: `#[deny(clippy::eq_op)]` on by default\n \n-error: constant division of 0.0 with 0.0 will always result in NaN\n+error: constant division of `0.0` with `0.0` will always result in NaN\n   --> $DIR/zero_div_zero.rs:4:15\n    |\n LL |     let nan = 0.0 / 0.0;\n@@ -21,7 +21,7 @@ error: equal expressions as operands to `/`\n LL |     let f64_nan = 0.0 / 0.0f64;\n    |                   ^^^^^^^^^^^^\n \n-error: constant division of 0.0 with 0.0 will always result in NaN\n+error: constant division of `0.0` with `0.0` will always result in NaN\n   --> $DIR/zero_div_zero.rs:5:19\n    |\n LL |     let f64_nan = 0.0 / 0.0f64;\n@@ -35,7 +35,7 @@ error: equal expressions as operands to `/`\n LL |     let other_f64_nan = 0.0f64 / 0.0;\n    |                         ^^^^^^^^^^^^\n \n-error: constant division of 0.0 with 0.0 will always result in NaN\n+error: constant division of `0.0` with `0.0` will always result in NaN\n   --> $DIR/zero_div_zero.rs:6:25\n    |\n LL |     let other_f64_nan = 0.0f64 / 0.0;\n@@ -49,7 +49,7 @@ error: equal expressions as operands to `/`\n LL |     let one_more_f64_nan = 0.0f64 / 0.0f64;\n    |                            ^^^^^^^^^^^^^^^\n \n-error: constant division of 0.0 with 0.0 will always result in NaN\n+error: constant division of `0.0` with `0.0` will always result in NaN\n   --> $DIR/zero_div_zero.rs:7:28\n    |\n LL |     let one_more_f64_nan = 0.0f64 / 0.0f64;"}]}