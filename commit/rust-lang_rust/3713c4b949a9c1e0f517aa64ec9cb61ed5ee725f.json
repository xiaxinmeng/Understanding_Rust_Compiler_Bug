{"sha": "3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f", "node_id": "C_kwDOAAsO6NoAKDM3MTNjNGI5NDlhOWMxZTBmNTE3YWE2NGVjOWNiNjFlZDVlZTcyNWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T14:59:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T14:59:41Z"}, "message": "Auto merge of #14904 - Veykril:hover-hex, r=Veykril\n\nRender size, align and offset hover values in hex\n\nArguably, these values are usually almost always viewed in hex format so I think we should do the same here", "tree": {"sha": "ac3b11fe6a52f4a3d835c1604d8aedd76b9d7a18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac3b11fe6a52f4a3d835c1604d8aedd76b9d7a18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f", "html_url": "https://github.com/rust-lang/rust/commit/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eee6872647fff3d168149e015264673c44b5b062", "url": "https://api.github.com/repos/rust-lang/rust/commits/eee6872647fff3d168149e015264673c44b5b062", "html_url": "https://github.com/rust-lang/rust/commit/eee6872647fff3d168149e015264673c44b5b062"}, {"sha": "be9cc0baaea4285e332b32f771302b0852961a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/be9cc0baaea4285e332b32f771302b0852961a3f", "html_url": "https://github.com/rust-lang/rust/commit/be9cc0baaea4285e332b32f771302b0852961a3f"}], "stats": {"total": 275, "additions": 165, "deletions": 110}, "files": [{"sha": "693c0494dbd74f80b8ce1707b4a18b6102f49175", "filename": "crates/hir-ty/src/layout.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f", "patch": "@@ -1,7 +1,7 @@\n //! Compute the binary representation of a type\n \n use base_db::CrateId;\n-use chalk_ir::{AdtId, TyKind};\n+use chalk_ir::{AdtId, FloatTy, IntTy, TyKind, UintTy};\n use hir_def::{\n     layout::{\n         Abi, FieldsShape, Integer, LayoutCalculator, LayoutS, Primitive, ReprOptions, Scalar, Size,\n@@ -83,7 +83,7 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Lay\n     let dl = &*cx.current_data_layout();\n     let trait_env = Arc::new(TraitEnvironment::empty(krate));\n     let ty = normalize(db, trait_env, ty.clone());\n-    Ok(match ty.kind(Interner) {\n+    let layout = match ty.kind(Interner) {\n         TyKind::Adt(AdtId(def), subst) => db.layout_of_adt(*def, subst.clone(), krate)?,\n         TyKind::Scalar(s) => match s {\n             chalk_ir::Scalar::Bool => Layout::scalar(\n@@ -104,12 +104,12 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Lay\n                 dl,\n                 Primitive::Int(\n                     match i {\n-                        chalk_ir::IntTy::Isize => dl.ptr_sized_integer(),\n-                        chalk_ir::IntTy::I8 => Integer::I8,\n-                        chalk_ir::IntTy::I16 => Integer::I16,\n-                        chalk_ir::IntTy::I32 => Integer::I32,\n-                        chalk_ir::IntTy::I64 => Integer::I64,\n-                        chalk_ir::IntTy::I128 => Integer::I128,\n+                        IntTy::Isize => dl.ptr_sized_integer(),\n+                        IntTy::I8 => Integer::I8,\n+                        IntTy::I16 => Integer::I16,\n+                        IntTy::I32 => Integer::I32,\n+                        IntTy::I64 => Integer::I64,\n+                        IntTy::I128 => Integer::I128,\n                     },\n                     true,\n                 ),\n@@ -118,21 +118,21 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Lay\n                 dl,\n                 Primitive::Int(\n                     match i {\n-                        chalk_ir::UintTy::Usize => dl.ptr_sized_integer(),\n-                        chalk_ir::UintTy::U8 => Integer::I8,\n-                        chalk_ir::UintTy::U16 => Integer::I16,\n-                        chalk_ir::UintTy::U32 => Integer::I32,\n-                        chalk_ir::UintTy::U64 => Integer::I64,\n-                        chalk_ir::UintTy::U128 => Integer::I128,\n+                        UintTy::Usize => dl.ptr_sized_integer(),\n+                        UintTy::U8 => Integer::I8,\n+                        UintTy::U16 => Integer::I16,\n+                        UintTy::U32 => Integer::I32,\n+                        UintTy::U64 => Integer::I64,\n+                        UintTy::U128 => Integer::I128,\n                     },\n                     false,\n                 ),\n             ),\n             chalk_ir::Scalar::Float(f) => scalar(\n                 dl,\n                 match f {\n-                    chalk_ir::FloatTy::F32 => Primitive::F32,\n-                    chalk_ir::FloatTy::F64 => Primitive::F64,\n+                    FloatTy::F32 => Primitive::F32,\n+                    FloatTy::F64 => Primitive::F64,\n                 },\n             ),\n         },\n@@ -283,7 +283,8 @@ pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Lay\n         | TyKind::Placeholder(_)\n         | TyKind::BoundVar(_)\n         | TyKind::InferenceVar(_, _) => return Err(LayoutError::HasPlaceholder),\n-    })\n+    };\n+    Ok(layout)\n }\n \n fn layout_of_unit(cx: &LayoutCx<'_>, dl: &TargetDataLayout) -> Result<Layout, LayoutError> {"}, {"sha": "b1583c9d00b5ecb13719e751a459d26bbcda37c3", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f", "patch": "@@ -1125,6 +1125,25 @@ impl Enum {\n     pub fn is_data_carrying(self, db: &dyn HirDatabase) -> bool {\n         self.variants(db).iter().any(|v| !matches!(v.kind(db), StructKind::Unit))\n     }\n+\n+    pub fn layout(self, db: &dyn HirDatabase) -> Result<(Layout, usize), LayoutError> {\n+        let layout = Adt::from(self).layout(db)?;\n+        let tag_size =\n+            if let layout::Variants::Multiple { tag, tag_encoding, .. } = &layout.variants {\n+                match tag_encoding {\n+                    TagEncoding::Direct => {\n+                        let target_data_layout = db\n+                            .target_data_layout(self.module(db).krate().id)\n+                            .ok_or(LayoutError::TargetLayoutNotAvailable)?;\n+                        tag.size(&*target_data_layout).bytes_usize()\n+                    }\n+                    TagEncoding::Niche { .. } => 0,\n+                }\n+            } else {\n+                0\n+            };\n+        Ok((layout, tag_size))\n+    }\n }\n \n impl HasVisibility for Enum {\n@@ -1185,23 +1204,16 @@ impl Variant {\n     /// Return layout of the variant and tag size of the parent enum.\n     pub fn layout(&self, db: &dyn HirDatabase) -> Result<(Layout, usize), LayoutError> {\n         let parent_enum = self.parent_enum(db);\n-        let parent_layout = Adt::from(parent_enum).layout(db)?;\n-        if let layout::Variants::Multiple { variants, tag, tag_encoding, tag_field: _ } =\n-            parent_layout.variants\n-        {\n-            let tag_size = match tag_encoding {\n-                TagEncoding::Direct => {\n-                    let target_data_layout = db\n-                        .target_data_layout(parent_enum.module(db).krate().id)\n-                        .ok_or(LayoutError::TargetLayoutNotAvailable)?;\n-                    tag.size(&*target_data_layout).bytes_usize()\n+        let (parent_layout, tag_size) = parent_enum.layout(db)?;\n+        Ok((\n+            match parent_layout.variants {\n+                layout::Variants::Multiple { variants, .. } => {\n+                    variants[RustcEnumVariantIdx(self.id)].clone()\n                 }\n-                TagEncoding::Niche { .. } => 0,\n-            };\n-            Ok((variants[RustcEnumVariantIdx(self.id)].clone(), tag_size))\n-        } else {\n-            Ok((parent_layout, 0))\n-        }\n+                _ => parent_layout,\n+            },\n+            tag_size,\n+        ))\n     }\n }\n "}, {"sha": "4cbe7cca5afe30ccd40beec6dbc1bea1baae3a87", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 45, "deletions": 30, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f", "patch": "@@ -401,11 +401,11 @@ pub(super) fn definition(\n                 hir::VariantDef::Struct(s) => Adt::from(s)\n                     .layout(db)\n                     .ok()\n-                    .map(|layout| format!(\", offset = {}\", layout.fields.offset(id).bytes())),\n+                    .map(|layout| format!(\", offset = {:#X}\", layout.fields.offset(id).bytes())),\n                 _ => None,\n             };\n             Some(format!(\n-                \"size = {}, align = {}{}\",\n+                \"size = {:#X}, align = {:#X}{}\",\n                 layout.size.bytes(),\n                 layout.align.abi.bytes(),\n                 offset.as_deref().unwrap_or_default()\n@@ -415,28 +415,38 @@ pub(super) fn definition(\n         Definition::Function(it) => label_and_docs(db, it),\n         Definition::Adt(it) => label_and_layout_info_and_docs(db, it, config, |&it| {\n             let layout = it.layout(db).ok()?;\n-            Some(format!(\"size = {}, align = {}\", layout.size.bytes(), layout.align.abi.bytes()))\n+            Some(format!(\n+                \"size = {:#X}, align = {:#X}\",\n+                layout.size.bytes(),\n+                layout.align.abi.bytes()\n+            ))\n         }),\n-        Definition::Variant(it) => label_value_and_layout_info_and_docs(db, it, config, |&it| {\n-            let layout = (|| {\n+        Definition::Variant(it) => label_value_and_layout_info_and_docs(\n+            db,\n+            it,\n+            config,\n+            |&it| {\n+                if !it.parent_enum(db).is_data_carrying(db) {\n+                    match it.eval(db) {\n+                        Ok(x) => {\n+                            Some(if x >= 10 { format!(\"{x} ({x:#X})\") } else { format!(\"{x}\") })\n+                        }\n+                        Err(_) => it.value(db).map(|x| format!(\"{x:?}\")),\n+                    }\n+                } else {\n+                    None\n+                }\n+            },\n+            |it| {\n                 let (layout, tag_size) = it.layout(db).ok()?;\n                 let size = layout.size.bytes_usize() - tag_size;\n                 if size == 0 {\n                     // There is no value in showing layout info for fieldless variants\n                     return None;\n                 }\n-                Some(format!(\"size = {}\", layout.size.bytes()))\n-            })();\n-            let value = if !it.parent_enum(db).is_data_carrying(db) {\n-                match it.eval(db) {\n-                    Ok(x) => Some(if x >= 10 { format!(\"{x} ({x:#X})\") } else { format!(\"{x}\") }),\n-                    Err(_) => it.value(db).map(|x| format!(\"{x:?}\")),\n-                }\n-            } else {\n-                None\n-            };\n-            (value, layout)\n-        }),\n+                Some(format!(\"size = {:#X}\", layout.size.bytes()))\n+            },\n+        ),\n         Definition::Const(it) => label_value_and_docs(db, it, |it| {\n             let body = it.render_eval(db);\n             match body {\n@@ -463,7 +473,11 @@ pub(super) fn definition(\n         Definition::TraitAlias(it) => label_and_docs(db, it),\n         Definition::TypeAlias(it) => label_and_layout_info_and_docs(db, it, config, |&it| {\n             let layout = it.ty(db).layout(db).ok()?;\n-            Some(format!(\"size = {}, align = {}\", layout.size.bytes(), layout.align.abi.bytes()))\n+            Some(format!(\n+                \"size = {:#X}, align = {:#X}\",\n+                layout.size.bytes(),\n+                layout.align.abi.bytes()\n+            ))\n         }),\n         Definition::BuiltinType(it) => {\n             return famous_defs\n@@ -634,41 +648,42 @@ fn label_and_layout_info_and_docs<D, E, V>(\n     db: &RootDatabase,\n     def: D,\n     config: &HoverConfig,\n-    value_extractor: E,\n+    layout_extractor: E,\n ) -> (String, Option<hir::Documentation>)\n where\n     D: HasAttrs + HirDisplay,\n     E: Fn(&D) -> Option<V>,\n     V: Display,\n {\n-    let label = match value_extractor(&def) {\n-        Some(value) if config.memory_layout => format!(\"{} // {value}\", def.display(db)),\n+    let label = match config.memory_layout.then(|| layout_extractor(&def)).flatten() {\n+        Some(layout) => format!(\"{} // {layout}\", def.display(db)),\n         _ => def.display(db).to_string(),\n     };\n     let docs = def.attrs(db).docs();\n     (label, docs)\n }\n \n-fn label_value_and_layout_info_and_docs<D, E, V, L>(\n+fn label_value_and_layout_info_and_docs<D, E, E2, V, L>(\n     db: &RootDatabase,\n     def: D,\n     config: &HoverConfig,\n     value_extractor: E,\n+    layout_extractor: E2,\n ) -> (String, Option<hir::Documentation>)\n where\n     D: HasAttrs + HirDisplay,\n-    E: Fn(&D) -> (Option<V>, Option<L>),\n+    E: Fn(&D) -> Option<V>,\n+    E2: Fn(&D) -> Option<L>,\n     V: Display,\n     L: Display,\n {\n-    let (value, layout) = value_extractor(&def);\n-    let label = if let Some(value) = value {\n-        format!(\"{} = {value}\", def.display(db))\n-    } else {\n-        def.display(db).to_string()\n+    let value = value_extractor(&def);\n+    let label = match value {\n+        Some(value) => format!(\"{} = {value}\", def.display(db)),\n+        None => def.display(db).to_string(),\n     };\n-    let label = match layout {\n-        Some(layout) if config.memory_layout => format!(\"{} // {layout}\", label),\n+    let label = match config.memory_layout.then(|| layout_extractor(&def)).flatten() {\n+        Some(layout) => format!(\"{} // {layout}\", label),\n         _ => label,\n     };\n     let docs = def.attrs(db).docs();"}, {"sha": "4e171867fbff0114169231ee462914f544193df4", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 62, "deletions": 41, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f", "patch": "@@ -667,7 +667,7 @@ struct Foo { fiel$0d_a: u8, field_b: i32, field_c: i16 }\n             ```\n \n             ```rust\n-            field_a: u8 // size = 1, align = 1, offset = 4\n+            field_a: u8 // size = 0x1, align = 0x1, offset = 0x4\n             ```\n         \"#]],\n     );\n@@ -692,7 +692,7 @@ fn main() {\n             ```\n \n             ```rust\n-            field_a: u32 // size = 4, align = 4, offset = 0\n+            field_a: u32 // size = 0x4, align = 0x4, offset = 0x0\n             ```\n         \"#]],\n     );\n@@ -714,7 +714,7 @@ fn main() {\n             ```\n \n             ```rust\n-            field_a: u32 // size = 4, align = 4, offset = 0\n+            field_a: u32 // size = 0x4, align = 0x4, offset = 0x0\n             ```\n         \"#]],\n     );\n@@ -1521,16 +1521,16 @@ fn test_hover_function_pointer_show_identifiers() {\n     check(\n         r#\"type foo$0 = fn(a: i32, b: i32) -> i32;\"#,\n         expect![[r#\"\n-                *foo*\n+            *foo*\n \n-                ```rust\n-                test\n-                ```\n+            ```rust\n+            test\n+            ```\n \n-                ```rust\n-                type foo = fn(a: i32, b: i32) -> i32 // size = 8, align = 8\n-                ```\n-            \"#]],\n+            ```rust\n+            type foo = fn(a: i32, b: i32) -> i32 // size = 0x8, align = 0x8\n+            ```\n+        \"#]],\n     );\n }\n \n@@ -1539,16 +1539,16 @@ fn test_hover_function_pointer_no_identifier() {\n     check(\n         r#\"type foo$0 = fn(i32, _: i32) -> i32;\"#,\n         expect![[r#\"\n-                *foo*\n+            *foo*\n \n-                ```rust\n-                test\n-                ```\n+            ```rust\n+            test\n+            ```\n \n-                ```rust\n-                type foo = fn(i32, i32) -> i32 // size = 8, align = 8\n-                ```\n-            \"#]],\n+            ```rust\n+            type foo = fn(i32, i32) -> i32 // size = 0x8, align = 0x8\n+            ```\n+        \"#]],\n     );\n }\n \n@@ -1674,7 +1674,7 @@ fn foo() { let bar = Ba$0r; }\n             ```\n \n             ```rust\n-            struct Bar // size = 0, align = 1\n+            struct Bar // size = 0x0, align = 0x1\n             ```\n \n             ---\n@@ -1710,7 +1710,7 @@ fn foo() { let bar = Ba$0r; }\n             ```\n \n             ```rust\n-            struct Bar // size = 0, align = 1\n+            struct Bar // size = 0x0, align = 0x1\n             ```\n \n             ---\n@@ -1739,7 +1739,7 @@ fn foo() { let bar = Ba$0r; }\n             ```\n \n             ```rust\n-            struct Bar // size = 0, align = 1\n+            struct Bar // size = 0x0, align = 0x1\n             ```\n \n             ---\n@@ -1767,7 +1767,7 @@ pub struct B$0ar\n             ```\n \n             ```rust\n-            pub struct Bar // size = 0, align = 1\n+            pub struct Bar // size = 0x0, align = 0x1\n             ```\n \n             ---\n@@ -1794,7 +1794,7 @@ pub struct B$0ar\n             ```\n \n             ```rust\n-            pub struct Bar // size = 0, align = 1\n+            pub struct Bar // size = 0x0, align = 0x1\n             ```\n \n             ---\n@@ -1883,7 +1883,28 @@ fn test_hover_layout_of_variant() {\n             ```\n \n             ```rust\n-            Variant1(u8, u16) // size = 4\n+            Variant1(u8, u16) // size = 0x4\n+            ```\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_hover_layout_of_enum() {\n+    check(\n+        r#\"enum $0Foo {\n+            Variant1(u8, u16),\n+            Variant2(i32, u8, i64),\n+        }\"#,\n+        expect![[r#\"\n+            *Foo*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            enum Foo // size = 0x10, align = 0x8\n             ```\n         \"#]],\n     );\n@@ -3192,7 +3213,7 @@ fn main() {\n             ```\n \n             ```rust\n-            f: i32 // size = 4, align = 4, offset = 0\n+            f: i32 // size = 0x4, align = 0x4, offset = 0x0\n             ```\n         \"#]],\n     );\n@@ -3730,16 +3751,16 @@ struct Foo<const LEN: usize>;\n type Fo$0o2 = Foo<2>;\n \"#,\n         expect![[r#\"\n-                *Foo2*\n+            *Foo2*\n \n-                ```rust\n-                test\n-                ```\n+            ```rust\n+            test\n+            ```\n \n-                ```rust\n-                type Foo2 = Foo<2> // size = 0, align = 1\n-                ```\n-            \"#]],\n+            ```rust\n+            type Foo2 = Foo<2> // size = 0x0, align = 0x1\n+            ```\n+        \"#]],\n     );\n }\n \n@@ -4648,7 +4669,7 @@ pub fn gimme() -> theitem::TheItem {\n             ```\n \n             ```rust\n-            pub struct TheItem // size = 0, align = 1\n+            pub struct TheItem // size = 0x0, align = 0x1\n             ```\n \n             ---\n@@ -4796,7 +4817,7 @@ mod string {\n             ```\n \n             ```rust\n-            struct String // size = 0, align = 1\n+            struct String // size = 0x0, align = 0x1\n             ```\n \n             ---\n@@ -5465,7 +5486,7 @@ foo_macro!(\n             ```\n \n             ```rust\n-            pub struct Foo // size = 0, align = 1\n+            pub struct Foo // size = 0x0, align = 0x1\n             ```\n \n             ---\n@@ -5490,7 +5511,7 @@ pub struct Foo(i32);\n             ```\n \n             ```rust\n-            pub struct Foo // size = 4, align = 4\n+            pub struct Foo // size = 0x4, align = 0x4\n             ```\n \n             ---\n@@ -5589,7 +5610,7 @@ enum Enum {\n             ```\n \n             ```rust\n-            RecordV { field: u32 } // size = 4\n+            RecordV { field: u32 } // size = 0x4\n             ```\n         \"#]],\n     );\n@@ -5611,7 +5632,7 @@ enum Enum {\n             ```\n \n             ```rust\n-            field: u32 // size = 4, align = 4\n+            field: u32 // size = 0x4, align = 0x4\n             ```\n         \"#]],\n     );\n@@ -6113,7 +6134,7 @@ fn test() {\n             ```\n \n             ```rust\n-            f: u32 // size = 4, align = 4, offset = 0\n+            f: u32 // size = 0x4, align = 0x4, offset = 0x0\n             ```\n         \"#]],\n     );"}, {"sha": "9f49344924958b236daa39a90816c810aa71776c", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f", "patch": "@@ -474,7 +474,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 9164..9172,\n+                                        range: 9165..9173,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -487,7 +487,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 9196..9200,\n+                                        range: 9197..9201,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -511,7 +511,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 9164..9172,\n+                                        range: 9165..9173,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -524,7 +524,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 9196..9200,\n+                                        range: 9197..9201,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -548,7 +548,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 9164..9172,\n+                                        range: 9165..9173,\n                                     },\n                                 ),\n                                 tooltip: \"\",\n@@ -561,7 +561,7 @@ fn main() {\n                                         file_id: FileId(\n                                             1,\n                                         ),\n-                                        range: 9196..9200,\n+                                        range: 9197..9201,\n                                     },\n                                 ),\n                                 tooltip: \"\","}, {"sha": "7f4838888bd796b1eb3b8d097b494248e6d8185f", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=3713c4b949a9c1e0f517aa64ec9cb61ed5ee725f", "patch": "@@ -38,6 +38,7 @@\n //!     option: panic\n //!     ord: eq, option\n //!     panic: fmt\n+//!     phantom_data:\n //!     pin:\n //!     range:\n //!     result:\n@@ -119,6 +120,11 @@ pub mod marker {\n     #[lang = \"tuple_trait\"]\n     pub trait Tuple {}\n     // endregion:fn\n+\n+    // region:phantom_data\n+    #[lang = \"phantom_data\"]\n+    pub struct PhantomData<T: ?Sized>;\n+    // endregion:phantom_data\n }\n \n // region:default"}]}