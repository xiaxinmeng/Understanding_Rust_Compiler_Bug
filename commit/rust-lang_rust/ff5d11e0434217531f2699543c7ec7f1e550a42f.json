{"sha": "ff5d11e0434217531f2699543c7ec7f1e550a42f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNWQxMWUwNDM0MjE3NTMxZjI2OTk1NDNjN2VjN2YxZTU1MGE0MmY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-06-16T18:53:35Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-21T18:41:22Z"}, "message": "Add comments and tests explaining the shallow substitution rule", "tree": {"sha": "6cb2fc56959f608a7bdafa69b4ad8702b0d5931d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb2fc56959f608a7bdafa69b4ad8702b0d5931d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff5d11e0434217531f2699543c7ec7f1e550a42f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5d11e0434217531f2699543c7ec7f1e550a42f", "html_url": "https://github.com/rust-lang/rust/commit/ff5d11e0434217531f2699543c7ec7f1e550a42f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff5d11e0434217531f2699543c7ec7f1e550a42f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e9317a023ef6b5b5146a29d6b96ca3710d8fbfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9317a023ef6b5b5146a29d6b96ca3710d8fbfe", "html_url": "https://github.com/rust-lang/rust/commit/5e9317a023ef6b5b5146a29d6b96ca3710d8fbfe"}], "stats": {"total": 122, "additions": 73, "deletions": 49}, "files": [{"sha": "9f1ae37da1ad3ba6c02eb038162d0a183a73e512", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ff5d11e0434217531f2699543c7ec7f1e550a42f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5d11e0434217531f2699543c7ec7f1e550a42f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ff5d11e0434217531f2699543c7ec7f1e550a42f", "patch": "@@ -461,6 +461,27 @@ fn check_associated_type_defaults(\n         })\n         .collect::<FxHashMap<_, _>>();\n \n+    /// Replaces projections of associated types with their default types.\n+    ///\n+    /// This does a \"shallow substitution\", meaning that defaults that refer to\n+    /// other defaulted assoc. types will still refer to the projection\n+    /// afterwards, not to the other default. For example:\n+    ///\n+    /// ```compile_fail\n+    /// trait Tr {\n+    ///     type A: Clone = Vec<Self::B>;\n+    ///     type B = u8;\n+    /// }\n+    /// ```\n+    ///\n+    /// This will end up replacing the bound `Self::A: Clone` with\n+    /// `Vec<Self::B>: Clone`, not with `Vec<u8>: Clone`. If we did a deep\n+    /// substitution and ended up with the latter, the trait would be accepted.\n+    /// If an `impl` then replaced `B` with something that isn't `Clone`,\n+    /// suddenly the default for `A` is no longer valid. The shallow\n+    /// substitution forces the trait to add a `B: Clone` bound to be accepted,\n+    /// which means that an `impl` can replace any default without breaking\n+    /// others.\n     struct DefaultNormalizer<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         map: FxHashMap<ty::ProjectionTy<'tcx>, Ty<'tcx>>,"}, {"sha": "5a128e56bcb1413f2a3d1c4c51facec8a63340f4", "filename": "src/test/ui/associated-types/defaults-suitability.rs", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ff5d11e0434217531f2699543c7ec7f1e550a42f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff5d11e0434217531f2699543c7ec7f1e550a42f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs?ref=ff5d11e0434217531f2699543c7ec7f1e550a42f", "patch": "@@ -66,28 +66,43 @@ trait D where\n     type Assoc = NotClone;\n }\n \n-trait Foo2<T> where\n-    <Self as Foo2<T>>::Bar: Clone,\n+// Test behavior of the check when defaults refer to other defaults:\n+\n+// Shallow substitution rejects this trait since `Baz` isn't guaranteed to be\n+// `Clone`.\n+trait Foo2<T> {\n+    type Bar: Clone = Vec<Self::Baz>;\n     //~^ ERROR the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n-{\n-    type Bar = Vec<Self::Baz>;\n     type Baz = T;\n }\n \n-trait Foo3<T: Clone> where\n-    <Self as Foo3<T>>::Bar: Clone,\n-    //~^ ERROR the trait bound `<Self as Foo3<T>>::Baz: std::clone::Clone` is not satisfied\n+// Adding a `T: Clone` bound doesn't help since the requirement doesn't see `T`\n+// because of the shallow substitution. If we did a deep substitution instead,\n+// this would be accepted.\n+trait Foo25<T: Clone> {\n+    type Bar: Clone = Vec<Self::Baz>;\n+    //~^ ERROR the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n+    type Baz = T;\n+}\n+\n+// Adding the `Baz: Clone` bound isn't enough since the default is type\n+// parameter `T`, which also might not be `Clone`.\n+trait Foo3<T> where\n+    Self::Bar: Clone,\n+    Self::Baz: Clone,\n+    //~^ ERROR the trait bound `T: std::clone::Clone` is not satisfied\n {\n     type Bar = Vec<Self::Baz>;\n     type Baz = T;\n }\n \n+// This one finally works, with `Clone` bounds on all assoc. types and the type\n+// parameter.\n trait Foo4<T> where\n-    <Self as Foo4<T>>::Bar: Clone,\n+    T: Clone,\n {\n-    type Bar = Vec<Self::Baz>;\n+    type Bar: Clone = Vec<Self::Baz>;\n     type Baz: Clone = T;\n-    //~^ ERROR the trait bound `T: std::clone::Clone` is not satisfied\n }\n \n fn main() {}"}, {"sha": "9a7febeb62de09fa6aa5c71862a97f7171ee7935", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 27, "deletions": 39, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ff5d11e0434217531f2699543c7ec7f1e550a42f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff5d11e0434217531f2699543c7ec7f1e550a42f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=ff5d11e0434217531f2699543c7ec7f1e550a42f", "patch": "@@ -104,61 +104,49 @@ LL | | }\n    | |_^\n \n error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:70:29\n+  --> $DIR/defaults-suitability.rs:74:15\n    |\n-LL |     <Self as Foo2<T>>::Bar: Clone,\n-   |                             ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n+LL |     type Bar: Clone = Vec<Self::Baz>;\n+   |               ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n    |\n    = help: consider adding a `where <Self as Foo2<T>>::Baz: std::clone::Clone` bound\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo2<T>>::Baz>`\n note: required by `Foo2`\n-  --> $DIR/defaults-suitability.rs:69:1\n+  --> $DIR/defaults-suitability.rs:73:1\n    |\n-LL | / trait Foo2<T> where\n-LL | |     <Self as Foo2<T>>::Bar: Clone,\n-LL | |\n-LL | | {\n-LL | |     type Bar = Vec<Self::Baz>;\n-LL | |     type Baz = T;\n-LL | | }\n-   | |_^\n+LL | trait Foo2<T> {\n+   | ^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `<Self as Foo3<T>>::Baz: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:78:29\n+error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:83:15\n    |\n-LL |     <Self as Foo3<T>>::Bar: Clone,\n-   |                             ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo3<T>>::Baz`\n+LL |     type Bar: Clone = Vec<Self::Baz>;\n+   |               ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n    |\n-   = help: consider adding a `where <Self as Foo3<T>>::Baz: std::clone::Clone` bound\n-   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo3<T>>::Baz>`\n-note: required by `Foo3`\n-  --> $DIR/defaults-suitability.rs:77:1\n+   = help: consider adding a `where <Self as Foo25<T>>::Baz: std::clone::Clone` bound\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo25<T>>::Baz>`\n+note: required by `Foo25`\n+  --> $DIR/defaults-suitability.rs:82:1\n    |\n-LL | / trait Foo3<T: Clone> where\n-LL | |     <Self as Foo3<T>>::Bar: Clone,\n-LL | |\n-LL | | {\n-LL | |     type Bar = Vec<Self::Baz>;\n-LL | |     type Baz = T;\n-LL | | }\n-   | |_^\n+LL | trait Foo25<T: Clone> {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n-  --> $DIR/defaults-suitability.rs:89:15\n+  --> $DIR/defaults-suitability.rs:92:16\n    |\n-LL |     type Baz: Clone = T;\n-   |               ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n+LL |     Self::Baz: Clone,\n+   |                ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::clone::Clone` bound\n-note: required by `Foo4`\n-  --> $DIR/defaults-suitability.rs:85:1\n-   |\n-LL | / trait Foo4<T> where\n-LL | |     <Self as Foo4<T>>::Bar: Clone,\n-LL | | {\n-LL | |     type Bar = Vec<Self::Baz>;\n-LL | |     type Baz: Clone = T;\n+note: required by `Foo3`\n+  --> $DIR/defaults-suitability.rs:90:1\n+   |\n+LL | / trait Foo3<T> where\n+LL | |     Self::Bar: Clone,\n+LL | |     Self::Baz: Clone,\n LL | |\n+...  |\n+LL | |     type Baz = T;\n LL | | }\n    | |_^\n "}]}