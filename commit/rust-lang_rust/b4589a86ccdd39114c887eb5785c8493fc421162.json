{"sha": "b4589a86ccdd39114c887eb5785c8493fc421162", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NTg5YTg2Y2NkZDM5MTE0Yzg4N2ViNTc4NWM4NDkzZmM0MjExNjI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-09T00:13:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-09T00:13:42Z"}, "message": "Rollup merge of #78674 - tmiasko:inline-substs-for-mir-body, r=oli-obk\n\ninliner: Use substs_for_mir_body\n\nChanges from 68965 extended the kind of instances that are being\ninlined. For some of those, the `instance_mir` returns a MIR body that\nis already expressed in terms of the types found in substitution array,\nand doesn't need further substitution.\n\nUse `substs_for_mir_body` to take that into account.\n\nResolves #78529.\nResolves #78560.", "tree": {"sha": "4b7c9b30c9ae4a1ef2f06673c366f269b3efb4b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b7c9b30c9ae4a1ef2f06673c366f269b3efb4b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4589a86ccdd39114c887eb5785c8493fc421162", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfqIm2CRBK7hj4Ov3rIwAAdHIIAHNYkinIRkjeNID6y0P4npu1\n/NnEmcxGTibR7jb9jUyeyr+82aasMYVzGwu6hBRSCFcCNZ+O2QVYObvQkS9s+Myf\nhKFvmACksOZB9KA0ZNeKzHjbw9Ddm7W/IqqEObv67go95/1NqQrS37NwV5ANfzjw\nQ/Ycfa3uAC6sp6ELss8NgZVooyHGc4V9g4R5nhhPleGmmYHLtyCyDqx8GLukVUWM\n19dGig3WIENhoBXn8ei/V9N49mXszr85PfRs0QKFUONi+gKXT83j3+PC3N2NnsBI\ntVgTE4TNnx4iXmOqs1KDd2OOwX7kkhNMZ8RBW6QWIwloD8aJkZdjgx40e2yfjtI=\n=6JAH\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b7c9b30c9ae4a1ef2f06673c366f269b3efb4b8\nparent 5639d9793f1d2440bb9a8c8630f20d757a48e111\nparent 8a8ee1a3ed249e4077a7ce0b88903b493419e7d7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1604880822 +0100\ncommitter GitHub <noreply@github.com> 1604880822 +0100\n\nRollup merge of #78674 - tmiasko:inline-substs-for-mir-body, r=oli-obk\n\ninliner: Use substs_for_mir_body\n\nChanges from 68965 extended the kind of instances that are being\ninlined. For some of those, the `instance_mir` returns a MIR body that\nis already expressed in terms of the types found in substitution array,\nand doesn't need further substitution.\n\nUse `substs_for_mir_body` to take that into account.\n\nResolves #78529.\nResolves #78560.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4589a86ccdd39114c887eb5785c8493fc421162", "html_url": "https://github.com/rust-lang/rust/commit/b4589a86ccdd39114c887eb5785c8493fc421162", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4589a86ccdd39114c887eb5785c8493fc421162/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5639d9793f1d2440bb9a8c8630f20d757a48e111", "url": "https://api.github.com/repos/rust-lang/rust/commits/5639d9793f1d2440bb9a8c8630f20d757a48e111", "html_url": "https://github.com/rust-lang/rust/commit/5639d9793f1d2440bb9a8c8630f20d757a48e111"}, {"sha": "8a8ee1a3ed249e4077a7ce0b88903b493419e7d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a8ee1a3ed249e4077a7ce0b88903b493419e7d7", "html_url": "https://github.com/rust-lang/rust/commit/8a8ee1a3ed249e4077a7ce0b88903b493419e7d7"}], "stats": {"total": 184, "additions": 142, "deletions": 42}, "files": [{"sha": "466758f2f86f5a14613cb7d55762589ed352760d", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4589a86ccdd39114c887eb5785c8493fc421162/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4589a86ccdd39114c887eb5785c8493fc421162/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=b4589a86ccdd39114c887eb5785c8493fc421162", "patch": "@@ -361,13 +361,11 @@ impl<'tcx, M: Module> FunctionCx<'_, 'tcx, M> {\n     where\n         T: TypeFoldable<'tcx> + Copy,\n     {\n-        if let Some(substs) = self.instance.substs_for_mir_body() {\n-            self.tcx\n-                .subst_and_normalize_erasing_regions(substs, ty::ParamEnv::reveal_all(), value)\n-        } else {\n-            self.tcx\n-                .normalize_erasing_regions(ty::ParamEnv::reveal_all(), *value)\n-        }\n+        self.instance.subst_mir_and_normalize_erasing_regions(\n+            self.tcx,\n+            ty::ParamEnv::reveal_all(),\n+            value\n+        )\n     }\n \n     pub(crate) fn clif_type(&self, ty: Ty<'tcx>) -> Option<Type> {"}, {"sha": "01fd1681593e885cd0b659afbb730fbd1055147e", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4589a86ccdd39114c887eb5785c8493fc421162/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4589a86ccdd39114c887eb5785c8493fc421162/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=b4589a86ccdd39114c887eb5785c8493fc421162", "patch": "@@ -92,15 +92,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         T: Copy + TypeFoldable<'tcx>,\n     {\n         debug!(\"monomorphize: self.instance={:?}\", self.instance);\n-        if let Some(substs) = self.instance.substs_for_mir_body() {\n-            self.cx.tcx().subst_and_normalize_erasing_regions(\n-                substs,\n-                ty::ParamEnv::reveal_all(),\n-                &value,\n-            )\n-        } else {\n-            self.cx.tcx().normalize_erasing_regions(ty::ParamEnv::reveal_all(), *value)\n-        }\n+        self.instance.subst_mir_and_normalize_erasing_regions(\n+            self.cx.tcx(),\n+            ty::ParamEnv::reveal_all(),\n+            value,\n+        )\n     }\n }\n "}, {"sha": "306cebd9cb72221d54741af08d5c5103015806aa", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b4589a86ccdd39114c887eb5785c8493fc421162/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4589a86ccdd39114c887eb5785c8493fc421162/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=b4589a86ccdd39114c887eb5785c8493fc421162", "patch": "@@ -1,6 +1,6 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n-use crate::ty::subst::InternalSubsts;\n+use crate::ty::subst::{InternalSubsts, Subst};\n use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeFoldable};\n use rustc_errors::ErrorReported;\n use rustc_hir::def::Namespace;\n@@ -470,10 +470,33 @@ impl<'tcx> Instance<'tcx> {\n     /// This function returns `Some(substs)` in the former case and `None` otherwise -- i.e., if\n     /// this function returns `None`, then the MIR body does not require substitution during\n     /// codegen.\n-    pub fn substs_for_mir_body(&self) -> Option<SubstsRef<'tcx>> {\n+    fn substs_for_mir_body(&self) -> Option<SubstsRef<'tcx>> {\n         if self.def.has_polymorphic_mir_body() { Some(self.substs) } else { None }\n     }\n \n+    pub fn subst_mir<T>(&self, tcx: TyCtxt<'tcx>, v: &T) -> T\n+    where\n+        T: TypeFoldable<'tcx> + Copy,\n+    {\n+        if let Some(substs) = self.substs_for_mir_body() { v.subst(tcx, substs) } else { *v }\n+    }\n+\n+    pub fn subst_mir_and_normalize_erasing_regions<T>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        v: &T,\n+    ) -> T\n+    where\n+        T: TypeFoldable<'tcx> + Clone,\n+    {\n+        if let Some(substs) = self.substs_for_mir_body() {\n+            tcx.subst_and_normalize_erasing_regions(substs, param_env, v)\n+        } else {\n+            tcx.normalize_erasing_regions(param_env, v.clone())\n+        }\n+    }\n+\n     /// Returns a new `Instance` where generic parameters in `instance.substs` are replaced by\n     /// identify parameters if they are determined to be unused in `instance.def`.\n     pub fn polymorphize(self, tcx: TyCtxt<'tcx>) -> Self {"}, {"sha": "0f86a181a55f7197acb9068e09ed116dbf4c44f7", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4589a86ccdd39114c887eb5785c8493fc421162/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4589a86ccdd39114c887eb5785c8493fc421162/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=b4589a86ccdd39114c887eb5785c8493fc421162", "patch": "@@ -505,11 +505,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         frame: &Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,\n         value: T,\n     ) -> T {\n-        if let Some(substs) = frame.instance.substs_for_mir_body() {\n-            self.tcx.subst_and_normalize_erasing_regions(substs, self.param_env, &value)\n-        } else {\n-            self.tcx.normalize_erasing_regions(self.param_env, value)\n-        }\n+        frame.instance.subst_mir_and_normalize_erasing_regions(*self.tcx, self.param_env, &value)\n     }\n \n     /// The `substs` are assumed to already be in our interpreter \"universe\" (param_env)."}, {"sha": "938181abff244cfad0ba8c1c6b613c26671143a6", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4589a86ccdd39114c887eb5785c8493fc421162/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4589a86ccdd39114c887eb5785c8493fc421162/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=b4589a86ccdd39114c887eb5785c8493fc421162", "patch": "@@ -543,11 +543,11 @@ impl<'a, 'tcx> MirNeighborCollector<'a, 'tcx> {\n         T: TypeFoldable<'tcx>,\n     {\n         debug!(\"monomorphize: self.instance={:?}\", self.instance);\n-        if let Some(substs) = self.instance.substs_for_mir_body() {\n-            self.tcx.subst_and_normalize_erasing_regions(substs, ty::ParamEnv::reveal_all(), &value)\n-        } else {\n-            self.tcx.normalize_erasing_regions(ty::ParamEnv::reveal_all(), value)\n-        }\n+        self.instance.subst_mir_and_normalize_erasing_regions(\n+            self.tcx,\n+            ty::ParamEnv::reveal_all(),\n+            &value,\n+        )\n     }\n }\n "}, {"sha": "a41304236b23dd5ae4fa73615a25189835a793ca", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b4589a86ccdd39114c887eb5785c8493fc421162/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4589a86ccdd39114c887eb5785c8493fc421162/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=b4589a86ccdd39114c887eb5785c8493fc421162", "patch": "@@ -6,7 +6,6 @@ use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_span::{hygiene::ExpnKind, ExpnData, Span};\n use rustc_target::spec::abi::Abi;\n@@ -128,17 +127,15 @@ impl Inliner<'tcx> {\n                 self.tcx.instance_mir(callsite.callee.def)\n             };\n \n-            let callee_body: &Body<'tcx> = &*callee_body;\n-\n-            let callee_body = if self.consider_optimizing(callsite, callee_body) {\n-                self.tcx.subst_and_normalize_erasing_regions(\n-                    &callsite.callee.substs,\n-                    self.param_env,\n-                    callee_body,\n-                )\n-            } else {\n+            if !self.consider_optimizing(callsite, &callee_body) {\n                 continue;\n-            };\n+            }\n+\n+            let callee_body = callsite.callee.subst_mir_and_normalize_erasing_regions(\n+                self.tcx,\n+                self.param_env,\n+                callee_body,\n+            );\n \n             let start = caller_body.basic_blocks().len();\n             debug!(\"attempting to inline callsite {:?} - body={:?}\", callsite, callee_body);\n@@ -309,7 +306,7 @@ impl Inliner<'tcx> {\n                     work_list.push(target);\n                     // If the place doesn't actually need dropping, treat it like\n                     // a regular goto.\n-                    let ty = place.ty(callee_body, tcx).subst(tcx, callsite.callee.substs).ty;\n+                    let ty = callsite.callee.subst_mir(self.tcx, &place.ty(callee_body, tcx).ty);\n                     if ty.needs_drop(tcx, self.param_env) {\n                         cost += CALL_PENALTY;\n                         if let Some(unwind) = unwind {\n@@ -371,8 +368,7 @@ impl Inliner<'tcx> {\n         let ptr_size = tcx.data_layout.pointer_size.bytes();\n \n         for v in callee_body.vars_and_temps_iter() {\n-            let v = &callee_body.local_decls[v];\n-            let ty = v.ty.subst(tcx, callsite.callee.substs);\n+            let ty = callsite.callee.subst_mir(self.tcx, &callee_body.local_decls[v].ty);\n             // Cost of the var is the size in machine-words, if we know\n             // it.\n             if let Some(size) = type_size_of(tcx, self.param_env, ty) {"}, {"sha": "7c8618f71e5f55cf767630e2595197a0375c92d4", "filename": "src/test/mir-opt/inline/inline-shims.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b4589a86ccdd39114c887eb5785c8493fc421162/src%2Ftest%2Fmir-opt%2Finline%2Finline-shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4589a86ccdd39114c887eb5785c8493fc421162/src%2Ftest%2Fmir-opt%2Finline%2Finline-shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-shims.rs?ref=b4589a86ccdd39114c887eb5785c8493fc421162", "patch": "@@ -0,0 +1,13 @@\n+// ignore-wasm32-bare compiled with panic=abort by default\n+#![crate_type = \"lib\"]\n+\n+// EMIT_MIR inline_shims.clone.Inline.diff\n+pub fn clone<A, B>(f: fn(A, B)) -> fn(A, B) {\n+    f.clone()\n+}\n+\n+// EMIT_MIR inline_shims.drop.Inline.diff\n+pub fn drop<A, B>(a: *mut Vec<A>, b: *mut Option<B>) {\n+    unsafe { std::ptr::drop_in_place(a) }\n+    unsafe { std::ptr::drop_in_place(b) }\n+}"}, {"sha": "3bdd4f4ff56cc7583aba6815e8917ef57761a416", "filename": "src/test/mir-opt/inline/inline_shims.clone.Inline.diff", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b4589a86ccdd39114c887eb5785c8493fc421162/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b4589a86ccdd39114c887eb5785c8493fc421162/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff?ref=b4589a86ccdd39114c887eb5785c8493fc421162", "patch": "@@ -0,0 +1,26 @@\n+- // MIR for `clone` before Inline\n++ // MIR for `clone` after Inline\n+  \n+  fn clone(_1: fn(A, B)) -> fn(A, B) {\n+      debug f => _1;                       // in scope 0 at $DIR/inline-shims.rs:5:20: 5:21\n+      let mut _0: fn(A, B);                // return place in scope 0 at $DIR/inline-shims.rs:5:36: 5:44\n+      let mut _2: &fn(A, B);               // in scope 0 at $DIR/inline-shims.rs:6:5: 6:6\n++     scope 1 (inlined <fn(A, B) as Clone>::clone - shim(fn(A, B))) { // at $DIR/inline-shims.rs:6:5: 6:14\n++     }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-shims.rs:6:5: 6:6\n+          _2 = &_1;                        // scope 0 at $DIR/inline-shims.rs:6:5: 6:6\n+-         _0 = <fn(A, B) as Clone>::clone(move _2) -> bb1; // scope 0 at $DIR/inline-shims.rs:6:5: 6:14\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-shims.rs:6:7: 6:12\n+-                                          // + literal: Const { ty: for<'r> fn(&'r fn(A, B)) -> fn(A, B) {<fn(A, B) as std::clone::Clone>::clone}, val: Value(Scalar(<ZST>)) }\n+-     }\n+- \n+-     bb1: {\n++         _0 = (*_2);                      // scope 1 at $DIR/inline-shims.rs:6:5: 6:14\n+          StorageDead(_2);                 // scope 0 at $DIR/inline-shims.rs:6:13: 6:14\n+          return;                          // scope 0 at $DIR/inline-shims.rs:7:2: 7:2\n+      }\n+  }\n+  "}, {"sha": "503d8bc6b7a68d291de30a9c3968ef36698dbeb6", "filename": "src/test/mir-opt/inline/inline_shims.drop.Inline.diff", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b4589a86ccdd39114c887eb5785c8493fc421162/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/b4589a86ccdd39114c887eb5785c8493fc421162/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.drop.Inline.diff?ref=b4589a86ccdd39114c887eb5785c8493fc421162", "patch": "@@ -0,0 +1,52 @@\n+- // MIR for `drop` before Inline\n++ // MIR for `drop` after Inline\n+  \n+  fn drop(_1: *mut Vec<A>, _2: *mut Option<B>) -> () {\n+      debug a => _1;                       // in scope 0 at $DIR/inline-shims.rs:10:19: 10:20\n+      debug b => _2;                       // in scope 0 at $DIR/inline-shims.rs:10:35: 10:36\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-shims.rs:10:54: 10:54\n+      let _3: ();                          // in scope 0 at $DIR/inline-shims.rs:11:14: 11:40\n+      let mut _4: *mut std::vec::Vec<A>;   // in scope 0 at $DIR/inline-shims.rs:11:38: 11:39\n+      let mut _5: *mut std::option::Option<B>; // in scope 0 at $DIR/inline-shims.rs:12:38: 12:39\n+      scope 1 {\n+      }\n+      scope 2 {\n++         scope 3 (inlined drop_in_place::<Option<B>> - shim(Some(Option<B>))) { // at $DIR/inline-shims.rs:12:14: 12:40\n++             let mut _6: isize;           // in scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n++             let mut _7: isize;           // in scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n++         }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/inline-shims.rs:11:5: 11:42\n+          StorageLive(_4);                 // scope 1 at $DIR/inline-shims.rs:11:38: 11:39\n+          _4 = _1;                         // scope 1 at $DIR/inline-shims.rs:11:38: 11:39\n+          _3 = drop_in_place::<Vec<A>>(move _4) -> bb1; // scope 1 at $DIR/inline-shims.rs:11:14: 11:40\n+                                           // mir::Constant\n+                                           // + span: $DIR/inline-shims.rs:11:14: 11:37\n+                                           // + literal: Const { ty: unsafe fn(*mut std::vec::Vec<A>) {std::intrinsics::drop_in_place::<std::vec::Vec<A>>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_4);                 // scope 1 at $DIR/inline-shims.rs:11:39: 11:40\n+          StorageDead(_3);                 // scope 0 at $DIR/inline-shims.rs:11:41: 11:42\n+          StorageLive(_5);                 // scope 2 at $DIR/inline-shims.rs:12:38: 12:39\n+          _5 = _2;                         // scope 2 at $DIR/inline-shims.rs:12:38: 12:39\n+-         _0 = drop_in_place::<Option<B>>(move _5) -> bb2; // scope 2 at $DIR/inline-shims.rs:12:14: 12:40\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-shims.rs:12:14: 12:37\n+-                                          // + literal: Const { ty: unsafe fn(*mut std::option::Option<B>) {std::intrinsics::drop_in_place::<std::option::Option<B>>}, val: Value(Scalar(<ZST>)) }\n++         _6 = discriminant((*_5));        // scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n++         switchInt(move _6) -> [0_isize: bb2, otherwise: bb3]; // scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n+      }\n+  \n+      bb2: {\n+          StorageDead(_5);                 // scope 2 at $DIR/inline-shims.rs:12:39: 12:40\n+          return;                          // scope 0 at $DIR/inline-shims.rs:13:2: 13:2\n++     }\n++ \n++     bb3: {\n++         drop((((*_5) as Some).0: B)) -> bb2; // scope 3 at $DIR/inline-shims.rs:12:14: 12:40\n+      }\n+  }\n+  "}]}