{"sha": "954ae9c975cebb7186dfc1182a68d2559bdef4bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NGFlOWM5NzVjZWJiNzE4NmRmYzExODJhNjhkMjU1OWJkZWY0YmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-06T02:22:13Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-08T06:32:55Z"}, "message": "libsyntax: Remove struct literal expressions from the compiler", "tree": {"sha": "32be334480b45806ecd242400f23b42befa4e648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32be334480b45806ecd242400f23b42befa4e648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/954ae9c975cebb7186dfc1182a68d2559bdef4bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/954ae9c975cebb7186dfc1182a68d2559bdef4bd", "html_url": "https://github.com/rust-lang/rust/commit/954ae9c975cebb7186dfc1182a68d2559bdef4bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/954ae9c975cebb7186dfc1182a68d2559bdef4bd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e3dbfe05257b4f5862e7b57777cba6d179d9cc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3dbfe05257b4f5862e7b57777cba6d179d9cc0", "html_url": "https://github.com/rust-lang/rust/commit/4e3dbfe05257b4f5862e7b57777cba6d179d9cc0"}], "stats": {"total": 167, "additions": 24, "deletions": 143}, "files": [{"sha": "9d7a041ca099032910e052c6000a195a4b9e5293", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -162,8 +162,7 @@ pub fn check_expr(sess: Session,\n           expr_field(*) |\n           expr_index(*) |\n           expr_tup(*) |\n-          expr_struct(_, _, None) |\n-          expr_rec(_, None) => { }\n+          expr_struct(_, _, None) => { }\n           expr_addr_of(*) => {\n                 sess.span_err(\n                     e.span,"}, {"sha": "441e01bbc344c7316b11e62fbe68a0af456877a8", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -117,8 +117,7 @@ pub fn classify(e: @expr,\n                   }\n               }\n \n-              ast::expr_struct(_, ref fs, None) |\n-              ast::expr_rec(ref fs, None) => {\n+              ast::expr_struct(_, ref fs, None) => {\n                 let cs = do vec::map((*fs)) |f| {\n                     if f.node.mutbl == ast::m_imm {\n                         classify(f.node.expr, def_map, tcx)"}, {"sha": "7d0562e39012490420f0d563f69f157150626d70", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -73,7 +73,6 @@ pub enum lint {\n     deprecated_mode,\n     deprecated_pattern,\n     non_camel_case_types,\n-    structural_records,\n     type_limits,\n     default_methods,\n     deprecated_self,\n@@ -217,13 +216,6 @@ pub fn get_lint_dict() -> LintDict {\n             default: allow\n          }),\n \n-        (@~\"structural_records\",\n-         @LintSpec {\n-            lint: structural_records,\n-            desc: \"use of any structural records\",\n-            default: deny\n-         }),\n-\n         (@~\"legacy modes\",\n          @LintSpec {\n             lint: legacy_modes,\n@@ -486,7 +478,6 @@ fn check_item(i: @ast::item, cx: ty::ctxt) {\n     check_item_path_statement(cx, i);\n     check_item_non_camel_case_types(cx, i);\n     check_item_heap(cx, i);\n-    check_item_structural_records(cx, i);\n     check_item_deprecated_modes(cx, i);\n     check_item_type_limits(cx, i);\n     check_item_default_methods(cx, i);\n@@ -729,24 +720,6 @@ fn check_item_deprecated_mutable_fields(cx: ty::ctxt, item: @ast::item) {\n     }\n }\n \n-fn check_item_structural_records(cx: ty::ctxt, it: @ast::item) {\n-    let visit = item_stopping_visitor(\n-        visit::mk_simple_visitor(@visit::SimpleVisitor {\n-            visit_expr: |e: @ast::expr| {\n-                match e.node {\n-                    ast::expr_rec(*) =>\n-                        cx.sess.span_lint(\n-                            structural_records, e.id, it.id,\n-                            e.span,\n-                            ~\"structural records are deprecated\"),\n-                    _ => ()\n-                }\n-            },\n-            .. *visit::default_simple_visitor()\n-        }));\n-    visit::visit_item(it, (), visit);\n-}\n-\n fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n \n     fn check_foreign_fn(cx: ty::ctxt, fn_id: ast::node_id,"}, {"sha": "3f054ec86a96995f249c58a4fef62887dba30012", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -615,16 +615,13 @@ fn visit_expr(expr: @expr, &&self: @mut IrMaps, vt: vt<@mut IrMaps>) {\n       }\n \n       // otherwise, live nodes are not required:\n-      expr_index(*) | expr_field(*) | expr_vstore(*) |\n-      expr_vec(*) | expr_rec(*) | expr_call(*) | expr_method_call(*) |\n-      expr_tup(*) | expr_log(*) | expr_binary(*) |\n-      expr_assert(*) | expr_addr_of(*) | expr_copy(*) |\n-      expr_loop_body(*) | expr_do_body(*) | expr_cast(*) |\n-      expr_unary(*) |\n+      expr_index(*) | expr_field(*) | expr_vstore(*) | expr_vec(*) |\n+      expr_call(*) | expr_method_call(*) | expr_tup(*) | expr_log(*) |\n+      expr_binary(*) | expr_assert(*) | expr_addr_of(*) | expr_copy(*) |\n+      expr_loop_body(*) | expr_do_body(*) | expr_cast(*) | expr_unary(*) |\n       expr_break(_) | expr_again(_) | expr_lit(_) | expr_ret(*) |\n-      expr_block(*) | expr_assign(*) |\n-      expr_swap(*) | expr_assign_op(*) | expr_mac(*) | expr_struct(*) |\n-      expr_repeat(*) | expr_paren(*) => {\n+      expr_block(*) | expr_assign(*) | expr_swap(*) | expr_assign_op(*) |\n+      expr_mac(*) | expr_struct(*) | expr_repeat(*) | expr_paren(*) => {\n           visit::visit_expr(expr, self, vt);\n       }\n     }\n@@ -1287,13 +1284,6 @@ pub impl Liveness {\n             self.propagate_through_expr(element, succ)\n           }\n \n-          expr_rec(ref fields, with_expr) => {\n-            let succ = self.propagate_through_opt_expr(with_expr, succ);\n-            do (*fields).foldr(succ) |field, succ| {\n-                self.propagate_through_expr(field.node.expr, succ)\n-            }\n-          }\n-\n           expr_struct(_, ref fields, with_expr) => {\n             let succ = self.propagate_through_opt_expr(with_expr, succ);\n             do (*fields).foldr(succ) |field, succ| {\n@@ -1618,18 +1608,14 @@ fn check_expr(expr: @expr, &&self: @Liveness, vt: vt<@Liveness>) {\n       }\n \n       // no correctness conditions related to liveness\n-      expr_call(*) | expr_method_call(*) |\n-      expr_if(*) | expr_match(*) |\n-      expr_while(*) | expr_loop(*) |\n-      expr_index(*) | expr_field(*) | expr_vstore(*) |\n-      expr_vec(*) | expr_rec(*) | expr_tup(*) |\n-      expr_log(*) | expr_binary(*) |\n-      expr_assert(*) | expr_copy(*) |\n-      expr_loop_body(*) | expr_do_body(*) |\n-      expr_cast(*) | expr_unary(*) |\n-      expr_ret(*) | expr_break(*) | expr_again(*) | expr_lit(_) |\n-      expr_block(*) | expr_swap(*) | expr_mac(*) | expr_addr_of(*) |\n-      expr_struct(*) | expr_repeat(*) | expr_paren(*) => {\n+      expr_call(*) | expr_method_call(*) | expr_if(*) | expr_match(*) |\n+      expr_while(*) | expr_loop(*) | expr_index(*) | expr_field(*) |\n+      expr_vstore(*) | expr_vec(*) | expr_tup(*) | expr_log(*) |\n+      expr_binary(*) | expr_assert(*) | expr_copy(*) | expr_loop_body(*) |\n+      expr_do_body(*) | expr_cast(*) | expr_unary(*) | expr_ret(*) |\n+      expr_break(*) | expr_again(*) | expr_lit(_) | expr_block(*) |\n+      expr_swap(*) | expr_mac(*) | expr_addr_of(*) | expr_struct(*) |\n+      expr_repeat(*) | expr_paren(*) => {\n         visit::visit_expr(expr, self, vt);\n       }\n     }"}, {"sha": "0fc55e589568d63aaa65381787f935b04ef04bcd", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -449,8 +449,7 @@ pub impl mem_categorization_ctxt {\n           ast::expr_binary(*) | ast::expr_while(*) |\n           ast::expr_block(*) | ast::expr_loop(*) | ast::expr_match(*) |\n           ast::expr_lit(*) | ast::expr_break(*) | ast::expr_mac(*) |\n-          ast::expr_again(*) | ast::expr_rec(*) | ast::expr_struct(*) |\n-          ast::expr_repeat(*) => {\n+          ast::expr_again(*) | ast::expr_struct(*) | ast::expr_repeat(*) => {\n             return self.cat_rvalue(expr, expr_ty);\n           }\n         }"}, {"sha": "826fc54f05483ba1bce60424f29fa0ad08cde882", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -469,7 +469,6 @@ pub impl VisitContext {\n                 self.use_fn_args(expr.callee_id, *args, visitor);\n             }\n \n-            expr_rec(ref fields, opt_with) |\n             expr_struct(_, ref fields, opt_with) => {\n                 for fields.each |field| {\n                     self.consume_expr(field.node.expr, visitor);"}, {"sha": "6390beb309742e331d198ea529894bc1c4a11b12", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -368,12 +368,6 @@ fn const_expr_unchecked(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n               let repr = adt::represent_type(cx, ety);\n               adt::trans_const(cx, repr, 0, es.map(|e| const_expr(cx, *e)))\n           }\n-          ast::expr_rec(ref fs, None) => {\n-              let ety = ty::expr_ty(cx.tcx, e);\n-              let repr = adt::represent_type(cx, ety);\n-              adt::trans_const(cx, repr, 0,\n-                               fs.map(|f| const_expr(cx, f.node.expr)))\n-          }\n           ast::expr_struct(_, ref fs, None) => {\n               let ety = ty::expr_ty(cx.tcx, e);\n               let repr = adt::represent_type(cx, ety);"}, {"sha": "91454a91fe2f9ed7e1ae0b9f18c7248b10f016d0", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -599,7 +599,6 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n                 controlflow::trans_block(bcx, blk, dest)\n             };\n         }\n-        ast::expr_rec(ref fields, base) |\n         ast::expr_struct(_, ref fields, base) => {\n             return trans_rec_or_struct(bcx, (*fields), base, expr.id, dest);\n         }"}, {"sha": "8699b4f0139916e56362846bc9829e5c078dcb06", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -263,12 +263,9 @@ pub fn mark_for_method_call(cx: Context, e_id: node_id, callee_id: node_id) {\n \n pub fn mark_for_expr(cx: Context, e: @expr) {\n     match e.node {\n-      expr_vstore(_, _) |\n-      expr_vec(_, _) |\n-      expr_rec(_, _) | expr_struct(*) | expr_tup(_) |\n+      expr_vstore(_, _) | expr_vec(_, _) | expr_struct(*) | expr_tup(_) |\n       expr_unary(box(_), _) | expr_unary(uniq(_), _) |\n-      expr_binary(add, _, _) |\n-      expr_copy(_) | expr_repeat(*) => {\n+      expr_binary(add, _, _) | expr_copy(_) | expr_repeat(*) => {\n         node_type_needs(cx, use_repr, e.id);\n       }\n       expr_cast(base, _) => {"}, {"sha": "802c9a8d20bf9e74914902acea2e27fc99ccd178", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -3066,7 +3066,6 @@ pub fn expr_kind(tcx: ctxt,\n \n         ast::expr_call(*) |\n         ast::expr_method_call(*) |\n-        ast::expr_rec(*) |\n         ast::expr_struct(*) |\n         ast::expr_tup(*) |\n         ast::expr_if(*) |"}, {"sha": "0c4f7a6d30fa1a9d3cb3a5c961691d7b9dcbf24f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -2508,9 +2508,6 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let typ = ty::mk_tup(tcx, elt_ts);\n         fcx.write_ty(id, typ);\n       }\n-      ast::expr_rec(ref fields, base) => {\n-        fail!()\n-      }\n       ast::expr_struct(path, ref fields, base_expr) => {\n         // Resolve the path.\n         match tcx.def_map.find(&id) {"}, {"sha": "2b3931a5d6d116f1604a3d97ae5c69d672ef308a", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -701,7 +701,6 @@ pub mod guarantor {\n             ast::expr_cast(*) |\n             ast::expr_call(*) |\n             ast::expr_method_call(*) |\n-            ast::expr_rec(*) |\n             ast::expr_struct(*) |\n             ast::expr_tup(*) |\n             ast::expr_if(*) |"}, {"sha": "68afa38ba89e66b6761971ef92d51af95f431e99", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -564,7 +564,6 @@ pub enum CallSugar {\n pub enum expr_ {\n     expr_vstore(@expr, expr_vstore),\n     expr_vec(~[@expr], mutability),\n-    expr_rec(~[field], Option<@expr>),\n     expr_call(@expr, ~[@expr], CallSugar),\n     expr_method_call(@expr, ident, ~[@Ty], ~[@expr], CallSugar),\n     expr_tup(~[@expr]),"}, {"sha": "5d071b8d517f3a48ba7b6b62e49ab551fe2d8a75", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -162,13 +162,6 @@ pub fn mk_field(sp: span, f: &Field) -> ast::field {\n pub fn mk_fields(sp: span, fields: ~[Field]) -> ~[ast::field] {\n     fields.map(|f| mk_field(sp, f))\n }\n-pub fn mk_rec_e(cx: ext_ctxt,\n-                sp: span,\n-                +fields: ~[Field])\n-             -> @ast::expr {\n-    mk_expr(cx, sp, ast::expr_rec(mk_fields(sp, fields),\n-                                  option::None::<@ast::expr>))\n-}\n pub fn mk_struct_e(cx: ext_ctxt,\n                    sp: span,\n                    +ctor_path: ~[ast::ident],"}, {"sha": "8a8583420f8fc9c55d7f112357cb0d988b4dda6c", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -32,7 +32,10 @@ pub fn expand_syntax_ext(cx: ext_ctxt,\n     MRExpr(@ast::expr {\n         id: cx.next_id(),\n         callee_id: cx.next_id(),\n-        node: ast::expr_rec(~[], option::None),\n+        node: ast::expr_lit(@codemap::spanned {\n+            node: ast::lit_nil,\n+            span: sp\n+        }),\n         span: sp,\n     })\n }"}, {"sha": "3ada03c08f427faa23574f933fec4187eecd83bc", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -479,12 +479,6 @@ pub fn noop_fold_expr(e: &expr_, fld: @ast_fold) -> expr_ {\n         expr_repeat(expr, count, mutt) => {\n             expr_repeat(fld.fold_expr(expr), fld.fold_expr(count), mutt)\n         }\n-        expr_rec(ref fields, maybe_expr) => {\n-            expr_rec(\n-                fields.map(|x| fold_field(*x)),\n-                maybe_expr.map(|x| fld.fold_expr(*x))\n-            )\n-        }\n         expr_tup(ref elts) => expr_tup(elts.map(|x| fld.fold_expr(*x))),\n         expr_call(f, ref args, blk) => {\n             expr_call("}, {"sha": "498b6f3ca70650c35267fa27684b9f3f5b641993", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -25,7 +25,7 @@ use ast::{expr_assert, expr_assign, expr_assign_op, expr_binary, expr_block};\n use ast::{expr_break, expr_call, expr_cast, expr_copy, expr_do_body};\n use ast::{expr_field, expr_fn_block, expr_if, expr_index};\n use ast::{expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac};\n-use ast::{expr_method_call, expr_paren, expr_path, expr_rec, expr_repeat};\n+use ast::{expr_method_call, expr_paren, expr_path, expr_repeat};\n use ast::{expr_ret, expr_swap, expr_struct, expr_tup, expr_unary};\n use ast::{expr_vec, expr_vstore, expr_vstore_mut_box};\n use ast::{expr_vstore_fixed, expr_vstore_slice, expr_vstore_box};\n@@ -1956,34 +1956,6 @@ pub impl Parser {\n               self.look_ahead(2) == token::COLON))\n     }\n \n-    fn parse_record_literal(&self) -> expr_ {\n-        self.expect(&token::LBRACE);\n-        let mut fields = ~[self.parse_field(token::COLON)];\n-        let mut base = None;\n-        while *self.token != token::RBRACE {\n-            if *self.token == token::COMMA\n-                && self.look_ahead(1) == token::DOTDOT {\n-                self.bump();\n-                self.bump();\n-                base = Some(self.parse_expr()); break;\n-            }\n-\n-            if self.try_parse_obsolete_with() {\n-                break;\n-            }\n-\n-            self.expect(&token::COMMA);\n-            if *self.token == token::RBRACE {\n-                // record ends by an optional trailing comma\n-                break;\n-            }\n-            fields.push(self.parse_field(token::COLON));\n-        }\n-        self.expect(&token::RBRACE);\n-        self.warn(~\"REC\");\n-        return expr_rec(fields, base);\n-    }\n-\n     fn parse_match_expr(&self) -> @expr {\n         let lo = self.last_span.lo;\n         let discriminant = self.parse_expr();"}, {"sha": "8e26f37d7de9dee24bc16e10e6c87a5eeb18087c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -1169,22 +1169,6 @@ pub fn print_expr(s: @ps, &&expr: @ast::expr) {\n         end(s);\n       }\n \n-      ast::expr_rec(ref fields, wth) => {\n-        word(s.s, ~\"{\");\n-        commasep_cmnt(s, consistent, (*fields), print_field, get_span);\n-        match wth {\n-          Some(expr) => {\n-            ibox(s, indent_unit);\n-            word(s.s, ~\",\");\n-            space(s.s);\n-            word(s.s, ~\"..\");\n-            print_expr(s, expr);\n-            end(s);\n-          }\n-          _ => word(s.s, ~\",\")\n-        }\n-        word(s.s, ~\"}\");\n-      }\n       ast::expr_struct(path, ref fields, wth) => {\n         print_path(s, path, true);\n         word(s.s, ~\"{\");"}, {"sha": "2f086534ed5e57857537d4dd6f615b19004a82f7", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/954ae9c975cebb7186dfc1182a68d2559bdef4bd/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=954ae9c975cebb7186dfc1182a68d2559bdef4bd", "patch": "@@ -479,10 +479,6 @@ pub fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n             (v.visit_expr)(element, e, v);\n             (v.visit_expr)(count, e, v);\n         }\n-        expr_rec(ref flds, base) => {\n-            for flds.each |f| { (v.visit_expr)(f.node.expr, e, v); }\n-            visit_expr_opt(base, e, v);\n-        }\n         expr_struct(p, ref flds, base) => {\n             visit_path(p, e, v);\n             for flds.each |f| { (v.visit_expr)(f.node.expr, e, v); }"}]}