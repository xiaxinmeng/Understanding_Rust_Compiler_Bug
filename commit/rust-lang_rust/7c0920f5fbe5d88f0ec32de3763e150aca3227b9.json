{"sha": "7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "node_id": "C_kwDOAAsO6NoAKDdjMDkyMGY1ZmJlNWQ4OGYwZWMzMmRlMzc2M2UxNTBhY2EzMjI3Yjk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-17T15:37:20Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-23T14:59:19Z"}, "message": "Build the query vtable directly.", "tree": {"sha": "d6f0204c5d4a7fde99d7cdf4fcfae5b2b5142883", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6f0204c5d4a7fde99d7cdf4fcfae5b2b5142883"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "html_url": "https://github.com/rust-lang/rust/commit/7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff", "html_url": "https://github.com/rust-lang/rust/commit/55ccbd090d96ec3bb28dbcb383e65bbfa3c293ff"}], "stats": {"total": 187, "additions": 67, "deletions": 120}, "files": [{"sha": "f5cb36b5ba2162e2db94526cc7409094d347918c", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "patch": "@@ -349,24 +349,14 @@ fn add_query_description_impl(\n         let try_load_from_disk = if let Some((tcx, id, block)) = modifiers.load_cached.as_ref() {\n             // Use custom code to load the query from disk\n             quote! {\n-                #[inline]\n-                fn try_load_from_disk(\n-                    #tcx: QueryCtxt<'tcx>,\n-                    #id: SerializedDepNodeIndex\n-                ) -> Option<Self::Value> {\n-                    #block\n-                }\n+                const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<$tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n+                    = Some(|#tcx, #id| { #block });\n             }\n         } else {\n             // Use the default code to load the query from disk\n             quote! {\n-                #[inline]\n-                fn try_load_from_disk(\n-                    tcx: QueryCtxt<'tcx>,\n-                    id: SerializedDepNodeIndex\n-                ) -> Option<Self::Value> {\n-                    tcx.on_disk_cache().as_ref()?.try_load_query_result(*tcx, id)\n-                }\n+                const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<$tcx>, SerializedDepNodeIndex) -> Option<Self::Value>>\n+                    = Some(|tcx, id| tcx.on_disk_cache().as_ref()?.try_load_query_result(*tcx, id));\n             }\n         };\n \n@@ -380,12 +370,9 @@ fn add_query_description_impl(\n         // expr is a `Block`, meaning that `{ #expr }` gets expanded\n         // to `{ { stmts... } }`, which triggers the `unused_braces` lint.\n         quote! {\n-            #[inline]\n             #[allow(unused_variables, unused_braces)]\n-            fn cache_on_disk(\n-                #tcx: QueryCtxt<'tcx>,\n-                #key: &Self::Key,\n-            ) -> bool {\n+            #[inline]\n+            fn cache_on_disk(#tcx: QueryCtxt<'tcx>, #key: &Self::Key) -> bool {\n                 #expr\n             }\n \n@@ -395,25 +382,32 @@ fn add_query_description_impl(\n         if modifiers.load_cached.is_some() {\n             panic!(\"load_cached modifier on query `{}` without a cache modifier\", name);\n         }\n-        quote! {}\n+        quote! {\n+            #[inline]\n+            fn cache_on_disk(_: QueryCtxt<'tcx>, _: &Self::Key) -> bool {\n+                false\n+            }\n+\n+            const TRY_LOAD_FROM_DISK: Option<fn(QueryCtxt<$tcx>, SerializedDepNodeIndex) -> Option<Self::Value>> = None;\n+        }\n     };\n \n     let (tcx, desc) = modifiers.desc;\n     let tcx = tcx.as_ref().map_or_else(|| quote! { _ }, |t| quote! { #t });\n \n     let desc = quote! {\n         #[allow(unused_variables)]\n-        fn describe(tcx: QueryCtxt<'tcx>, key: Self::Key) -> String {\n+        fn describe(tcx: QueryCtxt<$tcx>, key: Self::Key) -> String {\n             let (#tcx, #key) = (*tcx, key);\n             ::rustc_middle::ty::print::with_no_trimmed_paths(|| format!(#desc).into())\n         }\n     };\n \n     impls.extend(quote! {\n-        impl<'tcx> QueryDescription<QueryCtxt<'tcx>> for queries::#name<'tcx> {\n+        (#name<$tcx:tt>) => {\n             #desc\n             #cache\n-        }\n+        };\n     });\n }\n \n@@ -521,7 +515,7 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n         }\n         #[macro_export]\n         macro_rules! rustc_query_description {\n-            () => { #query_description_stream }\n+            #query_description_stream\n         }\n     })\n }"}, {"sha": "ffe74ec8854f35f98f7d91ce1c58198b257037ec", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "patch": "@@ -14,15 +14,13 @@ extern crate rustc_macros;\n #[macro_use]\n extern crate rustc_middle;\n \n-use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_errors::DiagnosticBuilder;\n use rustc_middle::arena::Arena;\n-use rustc_middle::dep_graph::{self, DepKindStruct};\n+use rustc_middle::dep_graph::{self, DepKindStruct, SerializedDepNodeIndex};\n use rustc_middle::ty::query::{query_keys, query_storage, query_stored, query_values};\n use rustc_middle::ty::query::{Providers, QueryEngine};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_query_system::ich::StableHashingContext;\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::Span;\n \n #[macro_use]\n@@ -39,9 +37,8 @@ use keys::Key;\n mod values;\n use self::values::Value;\n \n-use rustc_query_system::query::QueryAccessors;\n pub use rustc_query_system::query::QueryConfig;\n-pub(crate) use rustc_query_system::query::QueryDescription;\n+pub(crate) use rustc_query_system::query::{QueryDescription, QueryVtable};\n \n mod on_disk_cache;\n pub use on_disk_cache::OnDiskCache;\n@@ -51,6 +48,14 @@ pub use self::profiling_support::alloc_self_profile_query_strings;\n \n mod util;\n \n+fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n+    if def_id.is_top_level_module() {\n+        \"top-level module\".to_string()\n+    } else {\n+        format!(\"module `{}`\", tcx.def_path_str(def_id.to_def_id()))\n+    }\n+}\n+\n rustc_query_append! { [define_queries!][<'tcx>] }\n \n impl<'tcx> Queries<'tcx> {"}, {"sha": "90c06c7b231abd4f2c8c13df0a8434eacb711b04", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "patch": "@@ -1018,7 +1018,7 @@ pub fn encode_query_results<'a, 'tcx, CTX, Q>(\n ) -> FileEncodeResult\n where\n     CTX: QueryContext + 'tcx,\n-    Q: super::QueryDescription<CTX> + super::QueryAccessors<CTX>,\n+    Q: super::QueryDescription<CTX>,\n     Q::Value: Encodable<CacheEncoder<'a, 'tcx, FileEncoder>>,\n {\n     let _timer = tcx"}, {"sha": "8401104e7c6d741c710f64d7fa8c10a11455f68d", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "patch": "@@ -2,20 +2,17 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::{on_disk_cache, queries, Queries};\n+use crate::{on_disk_cache, Queries};\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex, SerializedDepNodeIndex};\n use rustc_middle::ty::tls::{self, ImplicitCtxt};\n-use rustc_middle::ty::{self, TyCtxt};\n+use rustc_middle::ty::TyCtxt;\n use rustc_query_system::dep_graph::HasDepContext;\n-use rustc_query_system::query::{\n-    QueryContext, QueryDescription, QueryJobId, QueryMap, QuerySideEffects,\n-};\n+use rustc_query_system::query::{QueryContext, QueryJobId, QueryMap, QuerySideEffects};\n \n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_errors::{Diagnostic, Handler};\n use rustc_serialize::opaque;\n-use rustc_span::def_id::LocalDefId;\n \n use std::any::Any;\n \n@@ -290,11 +287,8 @@ macro_rules! define_queries {\n             const NAME: &'static str = stringify!($name);\n         }\n \n-        impl<$tcx> QueryAccessors<QueryCtxt<$tcx>> for queries::$name<$tcx> {\n-            const ANON: bool = is_anon!([$($modifiers)*]);\n-            const EVAL_ALWAYS: bool = is_eval_always!([$($modifiers)*]);\n-            const DEP_KIND: dep_graph::DepKind = dep_graph::DepKind::$name;\n-            const HASH_RESULT: Option<fn(&mut StableHashingContext<'_>, &Self::Value) -> Fingerprint> = hash_result!([$($modifiers)*]);\n+        impl<$tcx> QueryDescription<QueryCtxt<$tcx>> for queries::$name<$tcx> {\n+            rustc_query_description! { $name<$tcx> }\n \n             type Cache = query_storage::$name<$tcx>;\n \n@@ -313,22 +307,26 @@ macro_rules! define_queries {\n             }\n \n             #[inline]\n-            fn compute_fn(tcx: QueryCtxt<'tcx>, key: &Self::Key) ->\n-                fn(TyCtxt<'tcx>, Self::Key) -> Self::Value\n+            fn make_vtable(tcx: QueryCtxt<'tcx>, key: &Self::Key) ->\n+                QueryVtable<QueryCtxt<$tcx>, Self::Key, Self::Value>\n             {\n-                if key.query_crate_is_local() {\n+                let compute = if key.query_crate_is_local() {\n                     tcx.queries.local_providers.$name\n                 } else {\n                     tcx.queries.extern_providers.$name\n+                };\n+                let cache_on_disk = Self::cache_on_disk(tcx, key);\n+                QueryVtable {\n+                    anon: is_anon!([$($modifiers)*]),\n+                    eval_always: is_eval_always!([$($modifiers)*]),\n+                    dep_kind: dep_graph::DepKind::$name,\n+                    hash_result: hash_result!([$($modifiers)*]),\n+                    handle_cycle_error: |tcx, mut error| handle_cycle_error!([$($modifiers)*][tcx, error]),\n+                    compute,\n+                    cache_on_disk,\n+                    try_load_from_disk: Self::TRY_LOAD_FROM_DISK,\n                 }\n             }\n-\n-            fn handle_cycle_error(\n-                tcx: QueryCtxt<'tcx>,\n-                mut error: DiagnosticBuilder<'_>,\n-            ) -> Self::Value {\n-                handle_cycle_error!([$($modifiers)*][tcx, error])\n-            }\n         })*\n \n         #[allow(nonstandard_style)]\n@@ -518,13 +516,3 @@ macro_rules! define_queries_struct {\n         }\n     };\n }\n-\n-fn describe_as_module(def_id: LocalDefId, tcx: TyCtxt<'_>) -> String {\n-    if def_id.is_top_level_module() {\n-        \"top-level module\".to_string()\n-    } else {\n-        format!(\"module `{}`\", tcx.def_path_str(def_id.to_def_id()))\n-    }\n-}\n-\n-rustc_query_description! {}"}, {"sha": "6c4e6196c9d6d0f4426fce23889f1ad079cf4ba1", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 13, "deletions": 53, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "patch": "@@ -19,16 +19,16 @@ pub trait QueryConfig {\n     type Stored: Clone;\n }\n \n-pub(crate) struct QueryVtable<CTX: QueryContext, K, V> {\n+pub struct QueryVtable<CTX: QueryContext, K, V> {\n     pub anon: bool,\n     pub dep_kind: CTX::DepKind,\n     pub eval_always: bool,\n+    pub cache_on_disk: bool,\n \n     pub compute: fn(CTX::DepContext, K) -> V,\n     pub hash_result: Option<fn(&mut StableHashingContext<'_>, &V) -> Fingerprint>,\n     pub handle_cycle_error: fn(CTX, DiagnosticBuilder<'_>) -> V,\n-    pub cache_on_disk: fn(CTX, &K) -> bool,\n-    pub try_load_from_disk: fn(CTX, SerializedDepNodeIndex) -> Option<V>,\n+    pub try_load_from_disk: Option<fn(CTX, SerializedDepNodeIndex) -> Option<V>>,\n }\n \n impl<CTX: QueryContext, K, V> QueryVtable<CTX, K, V> {\n@@ -43,25 +43,21 @@ impl<CTX: QueryContext, K, V> QueryVtable<CTX, K, V> {\n         (self.compute)(tcx, key)\n     }\n \n-    pub(crate) fn cache_on_disk(&self, tcx: CTX, key: &K) -> bool {\n-        (self.cache_on_disk)(tcx, key)\n-    }\n-\n     pub(crate) fn try_load_from_disk(&self, tcx: CTX, index: SerializedDepNodeIndex) -> Option<V> {\n-        (self.try_load_from_disk)(tcx, index)\n+        self.try_load_from_disk\n+            .expect(\"QueryDescription::load_from_disk() called for an unsupported query.\")(\n+            tcx, index,\n+        )\n     }\n }\n \n-pub trait QueryAccessors<CTX: QueryContext>: QueryConfig {\n-    const ANON: bool;\n-    const EVAL_ALWAYS: bool;\n-    const DEP_KIND: CTX::DepKind;\n-    const HASH_RESULT: Option<\n-        fn(hcx: &mut StableHashingContext<'_>, result: &Self::Value) -> Fingerprint,\n-    >;\n+pub trait QueryDescription<CTX: QueryContext>: QueryConfig {\n+    const TRY_LOAD_FROM_DISK: Option<fn(CTX, SerializedDepNodeIndex) -> Option<Self::Value>>;\n \n     type Cache: QueryCache<Key = Self::Key, Stored = Self::Stored, Value = Self::Value>;\n \n+    fn describe(tcx: CTX, key: Self::Key) -> String;\n+\n     // Don't use this method to access query results, instead use the methods on TyCtxt\n     fn query_state<'a>(tcx: CTX) -> &'a QueryState<CTX::DepKind, Self::Key>\n     where\n@@ -73,43 +69,7 @@ pub trait QueryAccessors<CTX: QueryContext>: QueryConfig {\n         CTX: 'a;\n \n     // Don't use this method to compute query results, instead use the methods on TyCtxt\n-    fn compute_fn(tcx: CTX, key: &Self::Key) -> fn(CTX::DepContext, Self::Key) -> Self::Value;\n-\n-    fn handle_cycle_error(tcx: CTX, diag: DiagnosticBuilder<'_>) -> Self::Value;\n-}\n-\n-pub trait QueryDescription<CTX: QueryContext>: QueryAccessors<CTX> {\n-    fn describe(tcx: CTX, key: Self::Key) -> String;\n+    fn make_vtable(tcx: CTX, key: &Self::Key) -> QueryVtable<CTX, Self::Key, Self::Value>;\n \n-    #[inline]\n-    fn cache_on_disk(_: CTX, _: &Self::Key) -> bool {\n-        false\n-    }\n-\n-    fn try_load_from_disk(_: CTX, _: SerializedDepNodeIndex) -> Option<Self::Value> {\n-        panic!(\"QueryDescription::load_from_disk() called for an unsupported query.\")\n-    }\n-}\n-\n-pub(crate) trait QueryVtableExt<CTX: QueryContext, K, V> {\n-    fn make_vtable(tcx: CTX, key: &K) -> QueryVtable<CTX, K, V>;\n-}\n-\n-impl<CTX, Q> QueryVtableExt<CTX, Q::Key, Q::Value> for Q\n-where\n-    CTX: QueryContext,\n-    Q: QueryDescription<CTX>,\n-{\n-    fn make_vtable(tcx: CTX, key: &Q::Key) -> QueryVtable<CTX, Q::Key, Q::Value> {\n-        QueryVtable {\n-            anon: Q::ANON,\n-            dep_kind: Q::DEP_KIND,\n-            eval_always: Q::EVAL_ALWAYS,\n-            hash_result: Q::HASH_RESULT,\n-            compute: Q::compute_fn(tcx, key),\n-            handle_cycle_error: Q::handle_cycle_error,\n-            cache_on_disk: Q::cache_on_disk,\n-            try_load_from_disk: Q::try_load_from_disk,\n-        }\n-    }\n+    fn cache_on_disk(tcx: CTX, key: &Self::Key) -> bool;\n }"}, {"sha": "a2f7843baaa680b2c1b52cf679646d470102f0ae", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "patch": "@@ -12,7 +12,7 @@ pub use self::caches::{\n };\n \n mod config;\n-pub use self::config::{QueryAccessors, QueryConfig, QueryDescription};\n+pub use self::config::{QueryConfig, QueryDescription, QueryVtable};\n \n use crate::dep_graph::{DepNodeIndex, HasDepContext, SerializedDepNodeIndex};\n "}, {"sha": "238b92a61342b451ce842a09e46a8fc925a00de2", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c0920f5fbe5d88f0ec32de3763e150aca3227b9/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=7c0920f5fbe5d88f0ec32de3763e150aca3227b9", "patch": "@@ -4,7 +4,7 @@\n \n use crate::dep_graph::{DepContext, DepNode, DepNodeIndex, DepNodeParams};\n use crate::query::caches::QueryCache;\n-use crate::query::config::{QueryDescription, QueryVtable, QueryVtableExt};\n+use crate::query::config::{QueryDescription, QueryVtable};\n use crate::query::job::{\n     report_cycle, QueryInfo, QueryJob, QueryJobId, QueryJobInfo, QueryShardJobId,\n };\n@@ -512,7 +512,7 @@ where\n \n     // First we try to load the result from the on-disk cache.\n     // Some things are never cached on disk.\n-    if query.cache_on_disk(tcx, key) {\n+    if query.cache_on_disk {\n         let prof_timer = tcx.dep_context().profiler().incr_cache_loading();\n         let result = query.try_load_from_disk(tcx, prev_dep_node_index);\n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n@@ -713,8 +713,6 @@ where\n     Q::Key: DepNodeParams<CTX::DepContext>,\n     CTX: QueryContext,\n {\n-    assert!(!Q::ANON);\n-\n     // We may be concurrently trying both execute and force a query.\n     // Ensure that only one of them runs the query.\n     let cache = Q::query_cache(tcx);\n@@ -731,5 +729,7 @@ where\n \n     let query = Q::make_vtable(tcx, &key);\n     let state = Q::query_state(tcx);\n+    debug_assert!(!query.anon);\n+\n     try_execute_query(tcx, state, cache, DUMMY_SP, key, lookup, Some(dep_node), &query);\n }"}]}