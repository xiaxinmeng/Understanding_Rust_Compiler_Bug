{"sha": "990c297ffb86af3d6d80172effcee8fb8b83e304", "node_id": "C_kwDOAAsO6NoAKDk5MGMyOTdmZmI4NmFmM2Q2ZDgwMTcyZWZmY2VlOGZiOGI4M2UzMDQ", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-20T02:36:42Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-22T22:20:01Z"}, "message": "Filter for all features instead of any\n\nAdds regression tests for feature logic\nCo-authored-by: bjorn3 <bjorn3@users.noreply.github.com>\nCo-authored-by: Simonas Kazlauskas <git@kazlauskas.me>", "tree": {"sha": "015fae5d70c3be23ad953b63e37dcb231abd797d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/015fae5d70c3be23ad953b63e37dcb231abd797d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/990c297ffb86af3d6d80172effcee8fb8b83e304", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/990c297ffb86af3d6d80172effcee8fb8b83e304", "html_url": "https://github.com/rust-lang/rust/commit/990c297ffb86af3d6d80172effcee8fb8b83e304", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/990c297ffb86af3d6d80172effcee8fb8b83e304/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b807d5970bd5b20d2dd22d76a05a4f65dbea03a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5", "html_url": "https://github.com/rust-lang/rust/commit/b807d5970bd5b20d2dd22d76a05a4f65dbea03a5"}], "stats": {"total": 73, "additions": 70, "deletions": 3}, "files": [{"sha": "abcdb81c0e2e6cf454363ee84bc42e2d21320c5c", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/990c297ffb86af3d6d80172effcee8fb8b83e304/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990c297ffb86af3d6d80172effcee8fb8b83e304/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=990c297ffb86af3d6d80172effcee8fb8b83e304", "patch": "@@ -229,6 +229,8 @@ pub fn check_tied_features(\n     None\n }\n \n+// Used to generate cfg variables and apply features\n+// Must express features in the way Rust understands them\n pub fn target_features(sess: &Session) -> Vec<Symbol> {\n     let target_machine = create_informational_target_machine(sess);\n     let mut features: Vec<Symbol> =\n@@ -238,13 +240,14 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n                 if sess.is_nightly_build() || gate.is_none() { Some(feature) } else { None }\n             })\n             .filter(|feature| {\n+                // check that all features in a given smallvec are enabled\n                 for llvm_feature in to_llvm_features(sess, feature) {\n                     let cstr = SmallCStr::new(llvm_feature);\n-                    if unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) } {\n-                        return true;\n+                    if !unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) } {\n+                        return false;\n                     }\n                 }\n-                false\n+                true\n             })\n             .map(|feature| Symbol::intern(feature))\n             .collect();"}, {"sha": "5a71b2166c3ae2fa44fa243391dc334dd69b64c9", "filename": "src/test/ui/target-feature/no-llvm-leaks.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/990c297ffb86af3d6d80172effcee8fb8b83e304/src%2Ftest%2Fui%2Ftarget-feature%2Fno-llvm-leaks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/990c297ffb86af3d6d80172effcee8fb8b83e304/src%2Ftest%2Fui%2Ftarget-feature%2Fno-llvm-leaks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fno-llvm-leaks.rs?ref=990c297ffb86af3d6d80172effcee8fb8b83e304", "patch": "@@ -0,0 +1,64 @@\n+// revisions: aarch64 x86-64\n+// [aarch64] compile-flags: -Ctarget-feature=+neon,+fp16,+fhm --target=aarch64-unknown-linux-gnu\n+// [aarch64] needs-llvm-components: aarch64\n+// [x86-64] compile-flags: -Ctarget-feature=+sse4.2,+rdrand --target=x86_64-unknown-linux-gnu\n+// [x86-64] needs-llvm-components: x86\n+// build-pass\n+#![no_core]\n+#![crate_type = \"rlib\"]\n+#![feature(intrinsics, rustc_attrs, no_core, lang_items, staged_api)]\n+#![stable(feature = \"test\", since = \"1.0.0\")]\n+\n+// Supporting minimal rust core code\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+impl Copy for bool {}\n+\n+extern \"rust-intrinsic\" {\n+    #[rustc_const_stable(feature = \"test\", since = \"1.0.0\")]\n+    fn unreachable() -> !;\n+}\n+\n+#[rustc_builtin_macro]\n+macro_rules! cfg {\n+    ($($cfg:tt)*) => {};\n+}\n+\n+// Test code\n+const fn do_or_die(cond: bool) {\n+    if cond {\n+    } else {\n+        unsafe { unreachable() }\n+    }\n+}\n+\n+macro_rules! assert {\n+    ($x:expr $(,)?) => {\n+        const _: () = do_or_die($x);\n+    };\n+}\n+\n+\n+#[cfg(target_arch = \"aarch64\")]\n+fn check_aarch64() {\n+    // This checks that the rustc feature name is used, not the LLVM feature.\n+    assert!(cfg!(target_feature = \"neon\"));\n+    assert!(cfg!(not(target_feature = \"fp-armv8\")));\n+    assert!(cfg!(target_feature = \"fhm\"));\n+    assert!(cfg!(not(target_feature = \"fp16fml\")));\n+    assert!(cfg!(target_feature = \"fp16\"));\n+    assert!(cfg!(not(target_feature = \"fullfp16\")));\n+}\n+\n+#[cfg(target_arch = \"x86_64\")]\n+fn check_x86_64() {\n+    // This checks that the rustc feature name is used, not the LLVM feature.\n+    assert!(cfg!(target_feature = \"rdrand\"));\n+    assert!(cfg!(not(target_feature = \"rdrnd\")));\n+\n+    // Likewise: We enable LLVM's crc32 feature with SSE4.2, but Rust says it's just SSE4.2\n+    assert!(cfg!(target_feature = \"sse4.2\"));\n+    assert!(cfg!(not(target_feature = \"crc32\")));\n+}"}]}