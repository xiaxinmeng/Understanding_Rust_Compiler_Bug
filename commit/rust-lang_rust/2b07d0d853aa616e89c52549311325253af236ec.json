{"sha": "2b07d0d853aa616e89c52549311325253af236ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMDdkMGQ4NTNhYTYxNmU4OWM1MjU0OTMxMTMyNTI1M2FmMjM2ZWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-01T20:22:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-01T20:44:27Z"}, "message": "inhibit enum layout optimizations under `#[repr(C)]` or `#[repr(u8)]`\n\nFixes #40029", "tree": {"sha": "1c9710d378b26a63156b3050aab45aff1f5b0cd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c9710d378b26a63156b3050aab45aff1f5b0cd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b07d0d853aa616e89c52549311325253af236ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b07d0d853aa616e89c52549311325253af236ec", "html_url": "https://github.com/rust-lang/rust/commit/2b07d0d853aa616e89c52549311325253af236ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b07d0d853aa616e89c52549311325253af236ec/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "691eba1358fc3c9c7a8033314a4112d43680c128", "url": "https://api.github.com/repos/rust-lang/rust/commits/691eba1358fc3c9c7a8033314a4112d43680c128", "html_url": "https://github.com/rust-lang/rust/commit/691eba1358fc3c9c7a8033314a4112d43680c128"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "123db6e89476c52c0418ad4c3db34cdd8839da8d", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2b07d0d853aa616e89c52549311325253af236ec/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b07d0d853aa616e89c52549311325253af236ec/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=2b07d0d853aa616e89c52549311325253af236ec", "patch": "@@ -1201,7 +1201,8 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     });\n                 }\n \n-                if !def.is_enum() || def.variants.len() == 1 {\n+                if !def.is_enum() || (def.variants.len() == 1 &&\n+                                      !def.repr.inhibit_enum_layout_opt()) {\n                     // Struct, or union, or univariant enum equivalent to a struct.\n                     // (Typechecking will reject discriminant-sizing attrs.)\n \n@@ -1250,7 +1251,7 @@ impl<'a, 'gcx, 'tcx> Layout {\n                     v.fields.iter().map(|field| field.ty(tcx, substs)).collect::<Vec<_>>()\n                 }).collect::<Vec<_>>();\n \n-                if variants.len() == 2 && !def.repr.c {\n+                if variants.len() == 2 && !def.repr.inhibit_enum_layout_opt() {\n                     // Nullable pointer optimization\n                     for discr in 0..2 {\n                         let other_fields = variants[1 - discr].iter().map(|ty| {"}, {"sha": "8cf8a839afbffaca5e62c42c532be118a1168509", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b07d0d853aa616e89c52549311325253af236ec/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b07d0d853aa616e89c52549311325253af236ec/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=2b07d0d853aa616e89c52549311325253af236ec", "patch": "@@ -1391,6 +1391,13 @@ impl ReprOptions {\n     pub fn discr_type(&self) -> attr::IntType {\n         self.int.unwrap_or(attr::SignedInt(ast::IntTy::Is))\n     }\n+\n+    /// Returns true if this `#[repr()]` should inhabit \"smart enum\n+    /// layout\" optimizations, such as representing `Foo<&T>` as a\n+    /// single pointer.\n+    pub fn inhibit_enum_layout_opt(&self) -> bool {\n+        self.c || self.int.is_some()\n+    }\n }\n \n impl<'a, 'gcx, 'tcx> AdtDef {"}, {"sha": "a562761cab92b5f75bdc54d865dfd288177c40ad", "filename": "src/test/run-pass/enum-layout-optimization.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2b07d0d853aa616e89c52549311325253af236ec/src%2Ftest%2Frun-pass%2Fenum-layout-optimization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b07d0d853aa616e89c52549311325253af236ec/src%2Ftest%2Frun-pass%2Fenum-layout-optimization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-layout-optimization.rs?ref=2b07d0d853aa616e89c52549311325253af236ec", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we will do various size optimizations to enum layout, but\n+// *not* if `#[repr(u8)]` or `#[repr(C)]` is passed. See also #40029.\n+\n+#![allow(dead_code)]\n+\n+use std::mem;\n+\n+enum Nullable<T> {\n+    Alive(T),\n+    Dropped,\n+}\n+\n+#[repr(u8)]\n+enum NullableU8<T> {\n+    Alive(T),\n+    Dropped,\n+}\n+\n+#[repr(C)]\n+enum NullableC<T> {\n+    Alive(T),\n+    Dropped,\n+}\n+\n+struct StructNewtype<T>(T);\n+\n+#[repr(C)]\n+struct StructNewtypeC<T>(T);\n+\n+enum EnumNewtype<T> { Variant(T) }\n+\n+#[repr(u8)]\n+enum EnumNewtypeU8<T> { Variant(T) }\n+\n+#[repr(C)]\n+enum EnumNewtypeC<T> { Variant(T) }\n+\n+fn main() {\n+    assert!(mem::size_of::<Box<i32>>() == mem::size_of::<Nullable<Box<i32>>>());\n+    assert!(mem::size_of::<Box<i32>>() < mem::size_of::<NullableU8<Box<i32>>>());\n+    assert!(mem::size_of::<Box<i32>>() < mem::size_of::<NullableC<Box<i32>>>());\n+\n+    assert!(mem::size_of::<i32>() == mem::size_of::<StructNewtype<i32>>());\n+    assert!(mem::size_of::<i32>() == mem::size_of::<StructNewtypeC<i32>>());\n+\n+    assert!(mem::size_of::<i32>() == mem::size_of::<EnumNewtype<i32>>());\n+    assert!(mem::size_of::<i32>() < mem::size_of::<EnumNewtypeU8<i32>>());\n+    assert!(mem::size_of::<i32>() < mem::size_of::<EnumNewtypeC<i32>>());\n+}"}]}