{"sha": "8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMDVhMTVmMGE1YjU0MWE1ZWIyOWY4OGYyZDZkZmZhNTg4OGEyY2U=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-09-03T20:24:29Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-09-08T09:13:45Z"}, "message": "Use binary-dep-depinfo to resolve UI dependencies", "tree": {"sha": "d1c42e7cf5bc7dda8622734299a104c591e8340c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c42e7cf5bc7dda8622734299a104c591e8340c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmE4fskACgkQHKDfKvWd\naKVNoBAAzLwijq3U5E1XHESKwG1ISZtU2l4Gimh6WnFSVyGC6EaGIrbPGeVBOzZB\neQPngO7CSGoJRU+3YkD9rqLbDbq3KUg2EZl7brS5dO7827U1O5QY7GUkvCdD/Ir+\n/gWnwaKlldBMRdtHG7xTPkc93M4PNpgsiNuQF/HtaBMp7jzNyhz4AwWjEYKNV+TX\nzKEtbW6gwBDRqvffuIeNqRGr3mnZvZHqLNIT0+nJm9Zd2kcZgugCCzCYqTZZ7qJS\nsYpotp5jiCVlKcrnaHtgJy46FOtWpNqdsLFZxrd+K552qdZA9oGa0425nH6oH9fa\nnZajfN4Lh1NARFcJ/IzhPqUc38dOq9xB3jPZAuF2uhZ1WM/g3oQL1BUaQXGGC/lq\nJ/RZKV8lBJHTUmi9OjRwac8sYIXCNZwgYeSNd4yw89ITw5oRagQ4SBdZ3B9j3qhz\n8PfqCw6qQYCtuOL6jdR+JE4s1fUp96ULvLvY4Rkzs1yPvR7tGfVnGP630nE/uUmt\nanpFUkOY5XvCjAFwbPKNxpXbYfCruVb/EJcXx3JRwk/uH1EfuEdOwdwq6+eKqTmM\nCM/lf6zGlxrhI09DpEw/NZie0fX6YLfC+QvXHJgNZDOXpqHjdH5pDVecU4HoVrqZ\nEPMMAD8gUeYZBCNjs+SlQheY4zT3ege2sZBPja8te18eZyT3dfo=\n=cE+l\n-----END PGP SIGNATURE-----", "payload": "tree d1c42e7cf5bc7dda8622734299a104c591e8340c\nparent ffe21e58a07816fd1e2492abce2620113a7dc6e3\nauthor Cameron Steffen <cam.steffen94@gmail.com> 1630700669 -0500\ncommitter flip1995 <philipp.krones@embecosm.com> 1631092425 +0200\n\nUse binary-dep-depinfo to resolve UI dependencies\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce", "html_url": "https://github.com/rust-lang/rust/commit/8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffe21e58a07816fd1e2492abce2620113a7dc6e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe21e58a07816fd1e2492abce2620113a7dc6e3", "html_url": "https://github.com/rust-lang/rust/commit/ffe21e58a07816fd1e2492abce2620113a7dc6e3"}], "stats": {"total": 168, "additions": 88, "deletions": 80}, "files": [{"sha": "84ae36a46d71de51a394f27bc3fe2533c2ccec60", "filename": ".cargo/config", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce", "patch": "@@ -5,4 +5,5 @@ lintcheck = \"run --target-dir lintcheck/target --package lintcheck --bin lintche\n collect-metadata = \"test --test dogfood --features metadata-collector-lint -- run_metadata_collection_lint --ignored\"\n \n [build]\n-rustflags = [\"-Zunstable-options\"]\n+# -Zbinary-dep-depinfo allows us to track which rlib files to use for compiling UI tests\n+rustflags = [\"-Zunstable-options\", \"-Zbinary-dep-depinfo\"]"}, {"sha": "2310370fb9fbe7eaed80f888f40633a2f8151fd3", "filename": "Cargo.toml", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce", "patch": "@@ -32,11 +32,7 @@ tempfile = { version = \"3.1.0\", optional = true }\n cargo_metadata = \"0.12\"\n compiletest_rs = { version = \"0.6.0\", features = [\"tmp\"] }\n tester = \"0.9\"\n-serde = { version = \"1.0\", features = [\"derive\"] }\n-derive-new = \"0.5\"\n regex = \"1.4\"\n-quote = \"1\"\n-syn = { version = \"1\", features = [\"full\"] }\n # This is used by the `collect-metadata` alias.\n filetime = \"0.2\"\n \n@@ -45,6 +41,15 @@ filetime = \"0.2\"\n # for more information.\n rustc-workspace-hack = \"1.0.0\"\n \n+# UI test dependencies\n+clippy_utils = { path = \"clippy_utils\" }\n+derive-new = \"0.5\"\n+if_chain = \"1.0\"\n+itertools = \"0.10.1\"\n+quote = \"1\"\n+serde = { version = \"1.0\", features = [\"derive\"] }\n+syn = { version = \"1\", features = [\"full\"] }\n+\n [build-dependencies]\n rustc_tools_util = { version = \"0.2.0\", path = \"rustc_tools_util\" }\n "}, {"sha": "74fe6f548a1b67525e2a37d417e18b908c71a70f", "filename": "tests/compile-test.rs", "status": "modified", "additions": 77, "deletions": 75, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=8c05a15f0a5b541a5eb29f88f2d6dffa5888a2ce", "patch": "@@ -1,10 +1,10 @@\n #![feature(test)] // compiletest_rs requires this attribute\n #![feature(once_cell)]\n-#![feature(try_blocks)]\n \n use compiletest_rs as compiletest;\n use compiletest_rs::common::Mode as TestMode;\n \n+use std::collections::HashMap;\n use std::env::{self, remove_var, set_var, var_os};\n use std::ffi::{OsStr, OsString};\n use std::fs;\n@@ -16,6 +16,28 @@ mod cargo;\n // whether to run internal tests or not\n const RUN_INTERNAL_TESTS: bool = cfg!(feature = \"internal-lints\");\n \n+/// All crates used in UI tests are listed here\n+static TEST_DEPENDENCIES: &[&str] = &[\n+    \"clippy_utils\",\n+    \"derive_new\",\n+    \"if_chain\",\n+    \"itertools\",\n+    \"quote\",\n+    \"regex\",\n+    \"serde\",\n+    \"serde_derive\",\n+    \"syn\",\n+];\n+\n+// Test dependencies may need an `extern crate` here to ensure that they show up\n+// in the depinfo file (otherwise cargo thinks they are unused)\n+extern crate clippy_utils;\n+extern crate derive_new;\n+extern crate if_chain;\n+extern crate itertools;\n+extern crate quote;\n+extern crate syn;\n+\n fn host_lib() -> PathBuf {\n     option_env!(\"HOST_LIBS\").map_or(cargo::CARGO_TARGET_DIR.join(env!(\"PROFILE\")), PathBuf::from)\n }\n@@ -24,72 +46,58 @@ fn clippy_driver_path() -> PathBuf {\n     option_env!(\"CLIPPY_DRIVER_PATH\").map_or(cargo::TARGET_LIB.join(\"clippy-driver\"), PathBuf::from)\n }\n \n-// When we'll want to use `extern crate ..` for a dependency that is used\n-// both by the crate and the compiler itself, we can't simply pass -L flags\n-// as we'll get a duplicate matching versions. Instead, disambiguate with\n-// `--extern dep=path`.\n-// See https://github.com/rust-lang/rust-clippy/issues/4015.\n-//\n-// FIXME: We cannot use `cargo build --message-format=json` to resolve to dependency files.\n-//        Because it would force-rebuild if the options passed to `build` command is not the same\n-//        as what we manually pass to `cargo` invocation\n-fn third_party_crates() -> String {\n-    use std::collections::HashMap;\n-    static CRATES: &[&str] = &[\n-        \"clippy_lints\",\n-        \"clippy_utils\",\n-        \"if_chain\",\n-        \"itertools\",\n-        \"quote\",\n-        \"regex\",\n-        \"serde\",\n-        \"serde_derive\",\n-        \"syn\",\n-    ];\n-    let dep_dir = cargo::TARGET_LIB.join(\"deps\");\n-    let mut crates: HashMap<&str, Vec<PathBuf>> = HashMap::with_capacity(CRATES.len());\n-    let mut flags = String::new();\n-    for entry in fs::read_dir(dep_dir).unwrap().flatten() {\n-        let path = entry.path();\n-        if let Some(name) = try {\n-            let name = path.file_name()?.to_str()?;\n-            let (name, _) = name.strip_suffix(\".rlib\")?.strip_prefix(\"lib\")?.split_once('-')?;\n-            CRATES.iter().copied().find(|&c| c == name)?\n-        } {\n-            flags += &format!(\" --extern {}={}\", name, path.display());\n-            crates.entry(name).or_default().push(path.clone());\n+/// Produces a string with an `--extern` flag for all UI test crate\n+/// dependencies.\n+///\n+/// The dependency files are located by parsing the depinfo file for this test\n+/// module. This assumes the `-Z binary-dep-depinfo` flag is enabled. All test\n+/// dependencies must be added to Cargo.toml at the project root. Test\n+/// dependencies that are not *directly* used by this test module require an\n+/// `extern crate` declaration.\n+fn extern_flags() -> String {\n+    let current_exe_depinfo = {\n+        let mut path = env::current_exe().unwrap();\n+        path.set_extension(\"d\");\n+        std::fs::read_to_string(path).unwrap()\n+    };\n+    let mut crates: HashMap<&str, &str> = HashMap::with_capacity(TEST_DEPENDENCIES.len());\n+    for line in current_exe_depinfo.lines() {\n+        // each dependency is expected to have a Makefile rule like `/path/to/crate-hash.rlib:`\n+        let parse_name_path = || {\n+            if line.starts_with(char::is_whitespace) {\n+                return None;\n+            }\n+            let path_str = line.strip_suffix(':')?;\n+            let path = Path::new(path_str);\n+            if !matches!(path.extension()?.to_str()?, \"rlib\" | \"so\" | \"dylib\" | \"dll\") {\n+                return None;\n+            }\n+            let (name, _hash) = path.file_stem()?.to_str()?.rsplit_once('-')?;\n+            // the \"lib\" prefix is not present for dll files\n+            let name = name.strip_prefix(\"lib\").unwrap_or(name);\n+            Some((name, path_str))\n+        };\n+        if let Some((name, path)) = parse_name_path() {\n+            if TEST_DEPENDENCIES.contains(&name) {\n+                // A dependency may be listed twice if it is available in sysroot,\n+                // and the sysroot dependencies are listed first. As of the writing,\n+                // this only seems to apply to if_chain.\n+                crates.insert(name, path);\n+            }\n         }\n     }\n-    crates.retain(|_, paths| paths.len() > 1);\n-    if !crates.is_empty() {\n-        let crate_names = crates.keys().map(|s| format!(\"`{}`\", s)).collect::<Vec<_>>().join(\", \");\n-        // add backslashes for an easy copy-paste `rm` command\n-        let paths = crates\n-            .into_values()\n-            .flatten()\n-            .map(|p| strip_current_dir(&p).display().to_string())\n-            .collect::<Vec<_>>()\n-            .join(\" \\\\\\n\");\n-        // Check which action should be done in order to remove compiled deps.\n-        // If pre-installed version of compiler is used, `cargo clean` will do.\n-        // Otherwise (for bootstrapped compiler), the dependencies directory\n-        // must be removed manually.\n-        let suggested_action = if std::env::var_os(\"RUSTC_BOOTSTRAP\").is_some() {\n-            \"removing the stageN-tools directory\"\n-        } else {\n-            \"running `cargo clean`\"\n-        };\n-\n-        panic!(\n-            \"\\n----------------------------------------------------------------------\\n\\\n-            ERROR: Found multiple rlibs for crates: {}\\n\\\n-            Try {} or remove the following files:\\n\\n{}\\n\\n\\\n-            For details on this error see https://github.com/rust-lang/rust-clippy/issues/7343\\n\\\n-            ----------------------------------------------------------------------\\n\",\n-            crate_names, suggested_action, paths\n-        );\n+    let not_found: Vec<&str> = TEST_DEPENDENCIES\n+        .iter()\n+        .copied()\n+        .filter(|n| !crates.contains_key(n))\n+        .collect();\n+    if !not_found.is_empty() {\n+        panic!(\"dependencies not found in depinfo: {:?}\", not_found);\n     }\n-    flags\n+    crates\n+        .into_iter()\n+        .map(|(name, path)| format!(\"--extern {}={} \", name, path))\n+        .collect()\n }\n \n fn default_config() -> compiletest::Config {\n@@ -105,11 +113,14 @@ fn default_config() -> compiletest::Config {\n         config.compile_lib_path = path;\n     }\n \n+    // Using `-L dependency={}` enforces that external dependencies are added with `--extern`.\n+    // This is valuable because a) it allows us to monitor what external dependencies are used\n+    // and b) it ensures that conflicting rlibs are resolved properly.\n     config.target_rustcflags = Some(format!(\n-        \"--emit=metadata -L {0} -L {1} -Dwarnings -Zui-testing {2}\",\n+        \"--emit=metadata -L dependency={} -L dependency={} -Dwarnings -Zui-testing {}\",\n         host_lib().join(\"deps\").display(),\n         cargo::TARGET_LIB.join(\"deps\").display(),\n-        third_party_crates(),\n+        extern_flags(),\n     ));\n \n     config.build_base = host_lib().join(\"test_build_base\");\n@@ -316,12 +327,3 @@ impl Drop for VarGuard {\n         }\n     }\n }\n-\n-fn strip_current_dir(path: &Path) -> &Path {\n-    if let Ok(curr) = env::current_dir() {\n-        if let Ok(stripped) = path.strip_prefix(curr) {\n-            return stripped;\n-        }\n-    }\n-    path\n-}"}]}