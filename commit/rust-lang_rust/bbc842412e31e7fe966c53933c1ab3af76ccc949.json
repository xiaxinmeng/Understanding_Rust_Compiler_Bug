{"sha": "bbc842412e31e7fe966c53933c1ab3af76ccc949", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYzg0MjQxMmUzMWU3ZmU5NjZjNTM5MzNjMWFiM2FmNzZjY2M5NDk=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-07-01T22:39:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-01T22:39:47Z"}, "message": "Merge pull request #41 from oli-obk/master\n\noptimize all ZST allocations into one single allocation", "tree": {"sha": "a0b8883c08cb5df88a5eaa139576ae78935699b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0b8883c08cb5df88a5eaa139576ae78935699b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbc842412e31e7fe966c53933c1ab3af76ccc949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc842412e31e7fe966c53933c1ab3af76ccc949", "html_url": "https://github.com/rust-lang/rust/commit/bbc842412e31e7fe966c53933c1ab3af76ccc949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbc842412e31e7fe966c53933c1ab3af76ccc949/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1720b1f4af5edaf10cdc97a81d233c81a16eee0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1720b1f4af5edaf10cdc97a81d233c81a16eee0d", "html_url": "https://github.com/rust-lang/rust/commit/1720b1f4af5edaf10cdc97a81d233c81a16eee0d"}, {"sha": "3d9588332f82a085586b0a847715ff3835986861", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9588332f82a085586b0a847715ff3835986861", "html_url": "https://github.com/rust-lang/rust/commit/3d9588332f82a085586b0a847715ff3835986861"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "8f5ec0e1b597b4c612c492e0c062bbe3b9d8c2df", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbc842412e31e7fe966c53933c1ab3af76ccc949/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc842412e31e7fe966c53933c1ab3af76ccc949/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=bbc842412e31e7fe966c53933c1ab3af76ccc949", "patch": "@@ -423,8 +423,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"__rust_reallocate\" => {\n                 let ptr = self.memory.read_ptr(args[0])?;\n                 let size = self.memory.read_usize(args[2])?;\n-                self.memory.reallocate(ptr, size as usize)?;\n-                self.memory.write_ptr(dest, ptr)?;\n+                let new_ptr = self.memory.reallocate(ptr, size as usize)?;\n+                self.memory.write_ptr(dest, new_ptr)?;\n             }\n \n             \"memcmp\" => {"}, {"sha": "2f5b4470cf993e95b6c6317eeed676cf05ff028e", "filename": "src/memory.rs", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bbc842412e31e7fe966c53933c1ab3af76ccc949/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc842412e31e7fe966c53933c1ab3af76ccc949/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=bbc842412e31e7fe966c53933c1ab3af76ccc949", "patch": "@@ -41,6 +41,15 @@ impl Pointer {\n     pub fn offset(self, i: isize) -> Self {\n         Pointer { offset: (self.offset as isize + i) as usize, ..self }\n     }\n+    pub fn points_to_zst(&self) -> bool {\n+        self.alloc_id.0 == 0\n+    }\n+    fn zst_ptr() -> Self {\n+        Pointer {\n+            alloc_id: ZST_ALLOC_ID,\n+            offset: 0,\n+        }\n+    }\n }\n \n #[derive(Debug, Copy, Clone, Hash, Eq, PartialEq)]\n@@ -66,15 +75,29 @@ pub struct Memory<'a, 'tcx> {\n     pub layout: &'a TargetDataLayout,\n }\n \n+const ZST_ALLOC_ID: AllocId = AllocId(0);\n+\n impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn new(layout: &'a TargetDataLayout) -> Self {\n-        Memory {\n+        let mut mem = Memory {\n             alloc_map: HashMap::new(),\n             functions: HashMap::new(),\n             function_alloc_cache: HashMap::new(),\n-            next_id: AllocId(0),\n+            next_id: AllocId(1),\n             layout: layout,\n-        }\n+        };\n+        // alloc id 0 is reserved for ZSTs, this is an optimization to prevent ZST\n+        // (e.g. function items, (), [], ...) from requiring memory\n+        let alloc = Allocation {\n+            bytes: Vec::new(),\n+            relocations: BTreeMap::new(),\n+            undef_mask: UndefMask::new(0),\n+        };\n+        mem.alloc_map.insert(ZST_ALLOC_ID, alloc);\n+        // check that additional zst allocs work\n+        debug_assert!(mem.allocate(0).points_to_zst());\n+        debug_assert!(mem.get(ZST_ALLOC_ID).is_ok());\n+        mem\n     }\n \n     pub fn allocations<'b>(&'b self) -> ::std::collections::hash_map::Iter<'b, AllocId, Allocation> {\n@@ -105,6 +128,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn allocate(&mut self, size: usize) -> Pointer {\n+        if size == 0 {\n+            return Pointer::zst_ptr();\n+        }\n         let alloc = Allocation {\n             bytes: vec![0; size],\n             relocations: BTreeMap::new(),\n@@ -121,11 +147,14 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n     // TODO(solson): Track which allocations were returned from __rust_allocate and report an error\n     // when reallocating/deallocating any others.\n-    pub fn reallocate(&mut self, ptr: Pointer, new_size: usize) -> EvalResult<'tcx, ()> {\n+    pub fn reallocate(&mut self, ptr: Pointer, new_size: usize) -> EvalResult<'tcx, Pointer> {\n         if ptr.offset != 0 {\n             // TODO(solson): Report error about non-__rust_allocate'd pointer.\n             return Err(EvalError::Unimplemented(format!(\"bad pointer offset: {}\", ptr.offset)));\n         }\n+        if ptr.points_to_zst() {\n+            return Ok(self.allocate(new_size));\n+        }\n \n         let size = self.get_mut(ptr.alloc_id)?.bytes.len();\n \n@@ -141,21 +170,26 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             alloc.undef_mask.truncate(new_size);\n         }\n \n-        Ok(())\n+        Ok(ptr)\n     }\n \n     // TODO(solson): See comment on `reallocate`.\n     pub fn deallocate(&mut self, ptr: Pointer) -> EvalResult<'tcx, ()> {\n+        if ptr.points_to_zst() {\n+            return Ok(());\n+        }\n         if ptr.offset != 0 {\n             // TODO(solson): Report error about non-__rust_allocate'd pointer.\n             return Err(EvalError::Unimplemented(format!(\"bad pointer offset: {}\", ptr.offset)));\n         }\n \n         if self.alloc_map.remove(&ptr.alloc_id).is_none() {\n+            debug!(\"deallocated a pointer twice: {}\", ptr.alloc_id);\n             // TODO(solson): Report error about erroneous free. This is blocked on properly tracking\n             // already-dropped state since this if-statement is entered even in safe code without\n             // it.\n         }\n+        debug!(\"deallocated : {}\", ptr.alloc_id);\n \n         Ok(())\n     }"}, {"sha": "f6a305840c241be8213fbad1c5c11532e3f27a35", "filename": "tests/compile-fail/out_of_bounds_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbc842412e31e7fe966c53933c1ab3af76ccc949/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc842412e31e7fe966c53933c1ab3af76ccc949/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read.rs?ref=bbc842412e31e7fe966c53933c1ab3af76ccc949", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.get_unchecked(5) }; //~ ERROR: memory access of 5..6 outside bounds of allocation 31 which has size 2\n+    let x = unsafe { *v.get_unchecked(5) }; //~ ERROR: which has size 2\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "5509a8346e552b323f16fb755ab46cd8aff3ce9c", "filename": "tests/compile-fail/out_of_bounds_read2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbc842412e31e7fe966c53933c1ab3af76ccc949/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc842412e31e7fe966c53933c1ab3af76ccc949/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs?ref=bbc842412e31e7fe966c53933c1ab3af76ccc949", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let v: Vec<u8> = vec![1, 2];\n+    let x = unsafe { *v.get_unchecked(5) }; //~ ERROR: memory access of 5..6 outside bounds of allocation\n+    panic!(\"this should never print: {}\", x);\n+}"}, {"sha": "4ebb2001e7203f3f4d0b60e55461657384741273", "filename": "tests/run-pass/zst.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbc842412e31e7fe966c53933c1ab3af76ccc949/tests%2Frun-pass%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbc842412e31e7fe966c53933c1ab3af76ccc949/tests%2Frun-pass%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fzst.rs?ref=bbc842412e31e7fe966c53933c1ab3af76ccc949", "patch": "@@ -1,3 +1,9 @@\n+// the following flag prevents this test from running on the host machine\n+// this should only be run on miri, because rust doesn't (yet?) optimize ZSTs of different types\n+// into the same memory location\n+// ignore-test\n+\n+\n #[derive(PartialEq, Debug)]\n struct A;\n \n@@ -13,4 +19,6 @@ fn use_zst() -> A {\n fn main() {\n     assert_eq!(zst_ret(), A);\n     assert_eq!(use_zst(), A);\n+    assert_eq!(&A as *const A as *const (), &() as *const _);\n+    assert_eq!(&A as *const A, &A as *const A);\n }"}]}