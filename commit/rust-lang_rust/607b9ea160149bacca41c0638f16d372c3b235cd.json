{"sha": "607b9ea160149bacca41c0638f16d372c3b235cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwN2I5ZWExNjAxNDliYWNjYTQxYzA2MzhmMTZkMzcyYzNiMjM1Y2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-10T18:16:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-10T18:16:29Z"}, "message": "Merge #7218\n\n7218: Fix typos r=Veykril a=regexident\n\nApart from the very last commit on this PR (which fixes a public type's name) all changes are non-breaking.\n\nCo-authored-by: Vincent Esche <regexident@gmail.com>", "tree": {"sha": "c1ef9b29af2f080530fd3d79b9bb6622bcff0a2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1ef9b29af2f080530fd3d79b9bb6622bcff0a2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/607b9ea160149bacca41c0638f16d372c3b235cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf+0R9CRBK7hj4Ov3rIwAAdHIIAJoSA896+9zI/LUalp9mREzm\nIC2BdH/87LvtPt0DkLuwpSkcE9fEcW55F9nqpdgWVNn79RPz/8I6WSDuUNZxgGke\n9zuVFkmnfPNxwO6DkAnVudb0x1HPi4ei84XfFcqoylVtF2uUScIjqZYm9bqPj9Vf\nt6IuOHQV5pwAuOyIr7nMeCj4MbeDTHc8AKHgcweBTI8v1EDb+YRw+XhFC7BOkyfb\nMustvnpPXItezXK/yp6SJGWRyWF6BHgaiznJeNxPGHbw0rPGtFbYiDlP8A/EMLiO\nVJi2HuO30Ep1ZldrwvtCydYyCDMP4PV6H1KCFmlcpEwIDQdP19oQICJQ7N/uqVE=\n=QP6y\n-----END PGP SIGNATURE-----\n", "payload": "tree c1ef9b29af2f080530fd3d79b9bb6622bcff0a2a\nparent 3e32e39da765632dd5c61d31b846bfa93738e786\nparent d4621197447d6906305ed30f8ab4fb48d657ec86\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610302589 +0000\ncommitter GitHub <noreply@github.com> 1610302589 +0000\n\nMerge #7218\n\n7218: Fix typos r=Veykril a=regexident\n\nApart from the very last commit on this PR (which fixes a public type's name) all changes are non-breaking.\n\nCo-authored-by: Vincent Esche <regexident@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/607b9ea160149bacca41c0638f16d372c3b235cd", "html_url": "https://github.com/rust-lang/rust/commit/607b9ea160149bacca41c0638f16d372c3b235cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/607b9ea160149bacca41c0638f16d372c3b235cd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e32e39da765632dd5c61d31b846bfa93738e786", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e32e39da765632dd5c61d31b846bfa93738e786", "html_url": "https://github.com/rust-lang/rust/commit/3e32e39da765632dd5c61d31b846bfa93738e786"}, {"sha": "d4621197447d6906305ed30f8ab4fb48d657ec86", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4621197447d6906305ed30f8ab4fb48d657ec86", "html_url": "https://github.com/rust-lang/rust/commit/d4621197447d6906305ed30f8ab4fb48d657ec86"}], "stats": {"total": 232, "additions": 114, "deletions": 118}, "files": [{"sha": "c8c5fecd7069446a1ff3596d784dda5f1b932801", "filename": "crates/hir/src/from_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Ffrom_id.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -1,6 +1,6 @@\n //! Utility module for converting between hir_def ids and code_model wrappers.\n //!\n-//! It's unclear if we need this long-term, but it's definitelly useful while we\n+//! It's unclear if we need this long-term, but it's definitely useful while we\n //! are splitting the hir.\n \n use hir_def::{"}, {"sha": "3dc33f248faedf91425888504c853b8f1d27ee57", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -581,7 +581,7 @@ impl ExprCollector<'_> {\n         match res.value {\n             Some((mark, expansion)) => {\n                 // FIXME: Statements are too complicated to recover from error for now.\n-                // It is because we don't have any hygenine for local variable expansion right now.\n+                // It is because we don't have any hygiene for local variable expansion right now.\n                 if T::can_cast(syntax::SyntaxKind::MACRO_STMTS) && res.err.is_some() {\n                     self.expander.exit(self.db, mark);\n                     collector(self, None);\n@@ -959,7 +959,7 @@ impl ExprCollector<'_> {\n \n     fn collect_tuple_pat(&mut self, args: AstChildren<ast::Pat>) -> (Vec<PatId>, Option<usize>) {\n         // Find the location of the `..`, if there is one. Note that we do not\n-        // consider the possiblity of there being multiple `..` here.\n+        // consider the possibility of there being multiple `..` here.\n         let ellipsis = args.clone().position(|p| matches!(p, ast::Pat::RestPat(_)));\n         // We want to skip the `..` pattern here, since we account for it above.\n         let args = args"}, {"sha": "76f5721e58786424ecf0b368ed5c654cb8f8b732", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -1,6 +1,6 @@\n //! This module describes hir-level representation of expressions.\n //!\n-//! This representaion is:\n+//! This representation is:\n //!\n //! 1. Identity-based. Each expression has an `id`, so we can distinguish\n //!    between different `1` in `1 + 1`."}, {"sha": "f027fd48d35cbaaa76e72befd60391cd8aa8e24c", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -267,7 +267,7 @@ impl DefCollector<'_> {\n \n         // Resolve all indeterminate resolved imports again\n         // As some of the macros will expand newly import shadowing partial resolved imports\n-        // FIXME: We maybe could skip this, if we handle the Indetermine imports in `resolve_imports`\n+        // FIXME: We maybe could skip this, if we handle the indeterminate imports in `resolve_imports`\n         // correctly\n         let partial_resolved = self.resolved_imports.iter().filter_map(|directive| {\n             if let PartialResolvedImport::Indeterminate(_) = directive.status {\n@@ -402,7 +402,7 @@ impl DefCollector<'_> {\n \n     /// Define a proc macro\n     ///\n-    /// A proc macro is similar to normal macro scope, but it would not visiable in legacy textual scoped.\n+    /// A proc macro is similar to normal macro scope, but it would not visible in legacy textual scoped.\n     /// And unconditionally exported.\n     fn define_proc_macro(&mut self, name: Name, macro_: MacroDefId) {\n         self.update(\n@@ -592,7 +592,7 @@ impl DefCollector<'_> {\n                     // XXX: urgh, so this works by accident! Here, we look at\n                     // the enum data, and, in theory, this might require us to\n                     // look back at the crate_def_map, creating a cycle. For\n-                    // example, `enum E { crate::some_macro!(); }`. Luckely, the\n+                    // example, `enum E { crate::some_macro!(); }`. Luckily, the\n                     // only kind of macro that is allowed inside enum is a\n                     // `cfg_macro`, and we don't need to run name resolution for\n                     // it, but this is sheer luck!\n@@ -655,7 +655,7 @@ impl DefCollector<'_> {\n         &mut self,\n         module_id: LocalModuleId,\n         resolutions: &[(Option<Name>, PerNs)],\n-        // All resolutions are imported with this visibility; the visibilies in\n+        // All resolutions are imported with this visibility; the visibilities in\n         // the `PerNs` values are ignored and overwritten\n         vis: Visibility,\n         import_type: ImportType,"}, {"sha": "e4152a0be4b23a6ebd36a27d99d06f02830b2264", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -27,7 +27,7 @@ use crate::{\n \n #[derive(Debug, Clone, Default)]\n pub struct Resolver {\n-    // FIXME: all usages generally call `.rev`, so maybe reverse once in consturciton?\n+    // FIXME: all usages generally call `.rev`, so maybe reverse once in construction?\n     scopes: Vec<Scope>,\n }\n "}, {"sha": "c6208639050e0f42e1cfcdf65ee4fba0233ace1f", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -40,7 +40,7 @@ impl TokenExpander {\n             // FIXME switch these to ExpandResult as well\n             TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n             TokenExpander::ProcMacro(_) => {\n-                // We store the result in salsa db to prevent non-determinisc behavior in\n+                // We store the result in salsa db to prevent non-deterministic behavior in\n                 // some proc-macro implementation\n                 // See #4315 for details\n                 db.expand_proc_macro(id.into()).into()"}, {"sha": "107417c27809f8b7a0fe4d26868074b901ec7bc0", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -379,7 +379,7 @@ pub fn record_literal_missing_fields(\n     id: ExprId,\n     expr: &Expr,\n ) -> Option<(VariantId, Vec<LocalFieldId>, /*exhaustive*/ bool)> {\n-    let (fields, exhausitve) = match expr {\n+    let (fields, exhaustive) = match expr {\n         Expr::RecordLit { path: _, fields, spread } => (fields, spread.is_none()),\n         _ => return None,\n     };\n@@ -400,7 +400,7 @@ pub fn record_literal_missing_fields(\n     if missed_fields.is_empty() {\n         return None;\n     }\n-    Some((variant_def, missed_fields, exhausitve))\n+    Some((variant_def, missed_fields, exhaustive))\n }\n \n pub fn record_pattern_missing_fields("}, {"sha": "61c47eec876d9959241cd8ee8dc3c5a79c898444", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -14,7 +14,7 @@\n //! The algorithm implemented here is a modified version of the one described in\n //! <http://moscova.inria.fr/~maranget/papers/warn/index.html>.\n //! However, to save future implementors from reading the original paper, we\n-//! summarise the algorithm here to hopefully save time and be a little clearer\n+//! summarize the algorithm here to hopefully save time and be a little clearer\n //! (without being so rigorous).\n //!\n //! The core of the algorithm revolves about a \"usefulness\" check. In particular, we\n@@ -132,7 +132,7 @@\n //! The algorithm is inductive (on the number of columns: i.e., components of tuple patterns).\n //! That means we're going to check the components from left-to-right, so the algorithm\n //! operates principally on the first component of the matrix and new pattern-stack `p`.\n-//! This algorithm is realised in the `is_useful` function.\n+//! This algorithm is realized in the `is_useful` function.\n //!\n //! Base case (`n = 0`, i.e., an empty tuple pattern):\n //! - If `P` already contains an empty pattern (i.e., if the number of patterns `m > 0`), then"}, {"sha": "9594cce8b7f4b809065c551c693559a6baf30c5a", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -491,16 +491,16 @@ impl Ty {\n     fn from_hir_path_inner(\n         ctx: &TyLoweringContext<'_>,\n         segment: PathSegment<'_>,\n-        typable: TyDefId,\n+        typeable: TyDefId,\n         infer_args: bool,\n     ) -> Ty {\n-        let generic_def = match typable {\n+        let generic_def = match typeable {\n             TyDefId::BuiltinType(_) => None,\n             TyDefId::AdtId(it) => Some(it.into()),\n             TyDefId::TypeAliasId(it) => Some(it.into()),\n         };\n         let substs = substs_from_path_segment(ctx, segment, generic_def, infer_args);\n-        ctx.db.ty(typable).subst(&substs)\n+        ctx.db.ty(typeable).subst(&substs)\n     }\n \n     /// Collect generic arguments from a path into a `Substs`. See also"}, {"sha": "de10406bc62807e394b08251aff696d9a45834b5", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn rewrite_links(db: &RootDatabase, markdown: &str, definition: &Defi\n         if target.contains(\"://\") {\n             (target.to_string(), title.to_string())\n         } else {\n-            // Two posibilities:\n+            // Two possibilities:\n             // * path-based links: `../../module/struct.MyStruct.html`\n             // * module-based links (AKA intra-doc links): `super::super::module::MyStruct`\n             if let Some(rewritten) = rewrite_intra_doc_link(db, *definition, target, title) {\n@@ -442,7 +442,7 @@ fn get_symbol_fragment(db: &dyn HirDatabase, field_or_assoc: &FieldOrAssocItem)\n                     function.as_assoc_item(db).map(|assoc| assoc.container(db)),\n                     Some(AssocItemContainer::Trait(..))\n                 );\n-                // This distinction may get more complicated when specialisation is available.\n+                // This distinction may get more complicated when specialization is available.\n                 // Rustdoc makes this decision based on whether a method 'has defaultness'.\n                 // Currently this is only the case for provided trait methods.\n                 if is_trait_method && !function.has_body(db) {"}, {"sha": "e892d5588f58a6c5462820da61d1ff2eb36f65cc", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -1953,16 +1953,16 @@ struct S {\n /// Test cases:\n /// case 1.  bare URL: https://www.example.com/\n /// case 2.  inline URL with title: [example](https://www.example.com/)\n-/// case 3.  code refrence: [`Result`]\n-/// case 4.  code refrence but miss footnote: [`String`]\n+/// case 3.  code reference: [`Result`]\n+/// case 4.  code reference but miss footnote: [`String`]\n /// case 5.  autolink: <http://www.example.com/>\n /// case 6.  email address: <test@example.com>\n-/// case 7.  refrence: [example][example]\n+/// case 7.  reference: [example][example]\n /// case 8.  collapsed link: [example][]\n /// case 9.  shortcut link: [example]\n /// case 10. inline without URL: [example]()\n-/// case 11. refrence: [foo][foo]\n-/// case 12. refrence: [foo][bar]\n+/// case 11. reference: [foo][foo]\n+/// case 12. reference: [foo][bar]\n /// case 13. collapsed link: [foo][]\n /// case 14. shortcut link: [foo]\n /// case 15. inline without URL: [foo]()\n@@ -1989,16 +1989,16 @@ pub fn fo$0o() {}\n                 Test cases:\n                 case 1.  bare URL: https://www.example.com/\n                 case 2.  inline URL with title: [example](https://www.example.com/)\n-                case 3.  code refrence: `Result`\n-                case 4.  code refrence but miss footnote: `String`\n+                case 3.  code reference: `Result`\n+                case 4.  code reference but miss footnote: `String`\n                 case 5.  autolink: http://www.example.com/\n                 case 6.  email address: test@example.com\n-                case 7.  refrence: example\n+                case 7.  reference: example\n                 case 8.  collapsed link: example\n                 case 9.  shortcut link: example\n                 case 10. inline without URL: example\n-                case 11. refrence: foo\n-                case 12. refrence: foo\n+                case 11. reference: foo\n+                case 12. reference: foo\n                 case 13. collapsed link: foo\n                 case 14. shortcut link: foo\n                 case 15. inline without URL: foo"}, {"sha": "b774a2be1baf698d1b11f43e12d4b91bb9e5bc33", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -3,7 +3,7 @@\n //! or `ast::NameRef`. If it's a `ast::NameRef`, at the classification step we\n //! try to resolve the direct tree parent of this element, otherwise we\n //! already have a definition and just need to get its HIR together with\n-//! some information that is needed for futher steps of searching.\n+//! some information that is needed for further steps of searching.\n //! After that, we collect files that might contain references and look\n //! for text occurrences of the identifier. If there's an `ast::NameRef`\n //! at the index that the match starts at and its tree parent is"}, {"sha": "099900673aa5a6cbb330445e7c5a0bfa5c844643", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -945,7 +945,7 @@ use crate::foo$0::FooContent;\n //- /lib.rs\n mod fo$0o;\n //- /foo/mod.rs\n-// emtpy\n+// empty\n \"#,\n             expect![[r#\"\n                 RangeInfo {\n@@ -995,7 +995,7 @@ mod fo$0o;\n mod outer { mod fo$0o; }\n \n //- /outer/foo.rs\n-// emtpy\n+// empty\n \"#,\n             expect![[r#\"\n                 RangeInfo {"}, {"sha": "e9f23adf8388d8d7fa439168a3f8f353a9fe19c3", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -1,4 +1,4 @@\n-//! This module contains an import search funcionality that is provided to the assists module.\n+//! This module contains an import search functionality that is provided to the assists module.\n //! Later, this should be moved away to a separate crate that is accessible from the assists module.\n \n use hir::{import_map, AsAssocItem, Crate, MacroDef, ModuleDef, Semantics};"}, {"sha": "19543d777a42c87fe20b7577f7f728bd3885b64e", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -24,7 +24,7 @@ use crate::{\n #[derive(Debug, PartialEq, Eq)]\n pub enum ParseError {\n     Expected(String),\n-    RepetitionEmtpyTokenTree,\n+    RepetitionEmptyTokenTree,\n }\n \n #[derive(Debug, PartialEq, Eq, Clone)]\n@@ -270,7 +270,7 @@ fn validate(pattern: &MetaTemplate) -> Result<(), ParseError> {\n                         }\n                         false\n                     }) {\n-                        return Err(ParseError::RepetitionEmtpyTokenTree);\n+                        return Err(ParseError::RepetitionEmptyTokenTree);\n                     }\n                 }\n                 validate(subtree)?"}, {"sha": "d32e60521471de37d7620525eb57513f4d7277b1", "filename": "crates/mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -378,7 +378,7 @@ pub(super) fn match_repeat(\n     src: &mut TtIter,\n ) -> Result<(), ExpandError> {\n     // Dirty hack to make macro-expansion terminate.\n-    // This should be replaced by a propper macro-by-example implementation\n+    // This should be replaced by a proper macro-by-example implementation\n     let mut limit = 65536;\n     let mut counter = 0;\n "}, {"sha": "59a3c80a8b626adb464b195e5b794927002480c0", "filename": "crates/mbe/src/mbe_expander/transcriber.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -67,7 +67,7 @@ struct NestingState {\n     /// because there is no variable in use by the current repetition\n     hit: bool,\n     /// `at_end` is currently necessary to tell `expand_repeat` if it should stop\n-    /// because there is no more value avaible for the current repetition\n+    /// because there is no more value available for the current repetition\n     at_end: bool,\n }\n \n@@ -179,11 +179,7 @@ fn expand_repeat(\n \n         counter += 1;\n         if counter == limit {\n-            log::warn!(\n-                \"expand_tt excced in repeat pattern exceed limit => {:#?}\\n{:#?}\",\n-                template,\n-                ctx\n-            );\n+            log::warn!(\"expand_tt in repeat pattern exceed limit => {:#?}\\n{:#?}\", template, ctx);\n             break;\n         }\n "}, {"sha": "e648519f9b922c658250a0cb6b043eeb48c3df53", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -149,7 +149,7 @@ impl TokenMap {\n     }\n \n     fn remove_delim(&mut self, idx: usize) {\n-        // FIXME: This could be accidently quadratic\n+        // FIXME: This could be accidentally quadratic\n         self.entries.remove(idx);\n     }\n }\n@@ -476,14 +476,14 @@ impl Convertor {\n \n #[derive(Debug)]\n enum SynToken {\n-    Ordiniary(SyntaxToken),\n+    Ordinary(SyntaxToken),\n     Punch(SyntaxToken, TextSize),\n }\n \n impl SynToken {\n     fn token(&self) -> &SyntaxToken {\n         match self {\n-            SynToken::Ordiniary(it) => it,\n+            SynToken::Ordinary(it) => it,\n             SynToken::Punch(it, _) => it,\n         }\n     }\n@@ -495,7 +495,7 @@ impl SrcToken for SynToken {\n     }\n     fn to_char(&self) -> Option<char> {\n         match self {\n-            SynToken::Ordiniary(_) => None,\n+            SynToken::Ordinary(_) => None,\n             SynToken::Punch(it, i) => it.text().chars().nth((*i).into()),\n         }\n     }\n@@ -535,7 +535,7 @@ impl TokenConvertor for Convertor {\n         } else {\n             self.punct_offset = None;\n             let range = curr.text_range();\n-            (SynToken::Ordiniary(curr), range)\n+            (SynToken::Ordinary(curr), range)\n         };\n \n         Some(token)\n@@ -557,7 +557,7 @@ impl TokenConvertor for Convertor {\n         let token = if curr.kind().is_punct() {\n             SynToken::Punch(curr, 0.into())\n         } else {\n-            SynToken::Ordiniary(curr)\n+            SynToken::Ordinary(curr)\n         };\n         Some(token)\n     }"}, {"sha": "ecea15c114f56b68bf9eff0dbef67788878b91c3", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -1967,7 +1967,7 @@ fn test_no_space_after_semi_colon() {\n #[test]\n fn test_rustc_issue_57597() {\n     fn test_error(fixture: &str) {\n-        assert_eq!(parse_macro_error(fixture), ParseError::RepetitionEmtpyTokenTree);\n+        assert_eq!(parse_macro_error(fixture), ParseError::RepetitionEmptyTokenTree);\n     }\n \n     test_error(\"macro_rules! foo { ($($($i:ident)?)+) => {}; }\");"}, {"sha": "5cb8b08e715c381225a42d49643f429565ed95a5", "filename": "crates/parser/src/grammar/items/use_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Fuse_item.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -46,7 +46,7 @@ fn use_tree(p: &mut Parser, top_level: bool) {\n         // test use_tree_list\n         // use {crate::path::from::root, or::path::from::crate_name}; // Rust 2018 (with a crate named `or`)\n         // use {path::from::root}; // Rust 2015\n-        // use ::{some::arbritrary::path}; // Rust 2015\n+        // use ::{some::arbitrary::path}; // Rust 2015\n         // use ::{{{root::export}}}; // Nonsensical but perfectly legal nesting\n         T!['{'] => {\n             use_tree_list(p);"}, {"sha": "970f165edc3f5a3b68cf95b52d0d3cf81871b9f6", "filename": "crates/proc_macro_api/src/msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fmsg.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -79,7 +79,7 @@ impl Message for Response {}\n fn read_json(inp: &mut impl BufRead) -> io::Result<Option<String>> {\n     let mut buf = String::new();\n     inp.read_line(&mut buf)?;\n-    buf.pop(); // Remove traling '\\n'\n+    buf.pop(); // Remove trailing '\\n'\n     Ok(match buf.len() {\n         0 => None,\n         _ => Some(buf),"}, {"sha": "bd1e7c2fcede9102f4dbb4351db83229a2228791", "filename": "crates/proc_macro_srv/src/proc_macro/bridge/rpc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fbridge%2Frpc.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -251,7 +251,7 @@ impl<S> DecodeMut<'_, '_, S> for String {\n     }\n }\n \n-/// Simplied version of panic payloads, ignoring\n+/// Simplified version of panic payloads, ignoring\n /// types other than `&'static str` and `String`.\n #[derive(Debug)]\n pub enum PanicMessage {"}, {"sha": "e6006a3c8ce7832232c8b243846ecaf671b7469a", "filename": "crates/proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -4,7 +4,7 @@\n //! The lib-proc-macro server backend is `TokenStream`-agnostic, such that\n //! we could provide any TokenStream implementation.\n //! The original idea from fedochet is using proc-macro2 as backend,\n-//! we use tt instead for better intergation with RA.\n+//! we use tt instead for better integration with RA.\n //!\n //! FIXME: No span and source file information is implemented yet\n "}, {"sha": "2d06fe538d7136f3a5f298f569a8d3160b84d2b6", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -130,7 +130,7 @@ pub(crate) fn apply_document_changes(\n }\n \n /// Checks that the edits inside the completion and the additional edits do not overlap.\n-/// LSP explicitly forbits the additional edits to overlap both with the main edit and themselves.\n+/// LSP explicitly forbids the additional edits to overlap both with the main edit and themselves.\n pub(crate) fn all_edits_are_disjoint(\n     completion: &lsp_types::CompletionItem,\n     additional_edits: &[lsp_types::TextEdit],\n@@ -290,15 +290,15 @@ mod tests {\n             Some(vec![disjoint_edit.clone(), joint_edit.clone()]);\n         assert!(\n             !all_edits_are_disjoint(&completion_with_joint_edits, &[]),\n-            \"Completion with disjoint edits fails the validaton even with empty extra edits\"\n+            \"Completion with disjoint edits fails the validation even with empty extra edits\"\n         );\n \n         completion_with_joint_edits.text_edit =\n             Some(CompletionTextEdit::Edit(disjoint_edit.clone()));\n         completion_with_joint_edits.additional_text_edits = Some(vec![joint_edit.clone()]);\n         assert!(\n             !all_edits_are_disjoint(&completion_with_joint_edits, &[]),\n-            \"Completion with disjoint edits fails the validaton even with empty extra edits\"\n+            \"Completion with disjoint edits fails the validation even with empty extra edits\"\n         );\n \n         completion_with_joint_edits.text_edit =\n@@ -310,7 +310,7 @@ mod tests {\n         completion_with_joint_edits.additional_text_edits = None;\n         assert!(\n             !all_edits_are_disjoint(&completion_with_joint_edits, &[]),\n-            \"Completion with disjoint edits fails the validaton even with empty extra edits\"\n+            \"Completion with disjoint edits fails the validation even with empty extra edits\"\n         );\n \n         completion_with_joint_edits.text_edit =\n@@ -322,7 +322,7 @@ mod tests {\n         completion_with_joint_edits.additional_text_edits = Some(vec![joint_edit]);\n         assert!(\n             !all_edits_are_disjoint(&completion_with_joint_edits, &[]),\n-            \"Completion with disjoint edits fails the validaton even with empty extra edits\"\n+            \"Completion with disjoint edits fails the validation even with empty extra edits\"\n         );\n     }\n "}, {"sha": "865eaae9b622847047e79cd20c19d7d44cef8434", "filename": "crates/rust-analyzer/src/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmarkdown.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -106,7 +106,7 @@ mod tests {\n \n     #[test]\n     fn test_format_docs_preserves_newlines() {\n-        let comment = \"this\\nis\\nultiline\";\n+        let comment = \"this\\nis\\nmultiline\";\n         assert_eq!(format_docs(comment), comment);\n     }\n "}, {"sha": "384d031e714034bb9a7a0c4bf9d0a18c3b96deb4", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -88,8 +88,8 @@ pub fn least_common_ancestor(u: &SyntaxNode, v: &SyntaxNode) -> Option<SyntaxNod\n     let keep = u_depth.min(v_depth);\n \n     let u_candidates = u.ancestors().skip(u_depth - keep);\n-    let v_canidates = v.ancestors().skip(v_depth - keep);\n-    let (res, _) = u_candidates.zip(v_canidates).find(|(x, y)| x == y)?;\n+    let v_candidates = v.ancestors().skip(v_depth - keep);\n+    let (res, _) = u_candidates.zip(v_candidates).find(|(x, y)| x == y)?;\n     Some(res)\n }\n "}, {"sha": "1ed8a96e5fcb7381ade83af86f3db05558bb2b0d", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -241,7 +241,7 @@ pub fn wildcard_pat() -> ast::WildcardPat {\n     }\n }\n \n-/// Creates a tuple of patterns from an interator of patterns.\n+/// Creates a tuple of patterns from an iterator of patterns.\n ///\n /// Invariant: `pats` must be length > 1\n ///"}, {"sha": "7c8d0a4c48c409b73b0eb0687e2ef2be2201ff13", "filename": "crates/syntax/src/parsing/lexer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -24,7 +24,7 @@ pub struct Token {\n /// Beware that it checks for shebang first and its length contributes to resulting\n /// tokens offsets.\n pub fn tokenize(text: &str) -> (Vec<Token>, Vec<SyntaxError>) {\n-    // non-empty string is a precondtion of `rustc_lexer::strip_shebang()`.\n+    // non-empty string is a precondition of `rustc_lexer::strip_shebang()`.\n     if text.is_empty() {\n         return Default::default();\n     }\n@@ -76,7 +76,7 @@ pub fn lex_single_syntax_kind(text: &str) -> Option<(SyntaxKind, Option<SyntaxEr\n }\n \n /// The same as `lex_single_syntax_kind()` but returns only `SyntaxKind` and\n-/// returns `None` if any tokenization error occured.\n+/// returns `None` if any tokenization error occurred.\n ///\n /// Beware that unescape errors are not checked at tokenization time.\n pub fn lex_single_valid_syntax_kind(text: &str) -> Option<SyntaxKind> {\n@@ -96,7 +96,7 @@ pub fn lex_single_valid_syntax_kind(text: &str) -> Option<SyntaxKind> {\n ///\n /// Beware that unescape errors are not checked at tokenization time.\n fn lex_first_token(text: &str) -> Option<(Token, Option<SyntaxError>)> {\n-    // non-empty string is a precondtion of `rustc_lexer::first_token()`.\n+    // non-empty string is a precondition of `rustc_lexer::first_token()`.\n     if text.is_empty() {\n         return None;\n     }\n@@ -117,7 +117,7 @@ fn rustc_token_kind_to_syntax_kind(\n     token_text: &str,\n ) -> (SyntaxKind, Option<&'static str>) {\n     // A note on an intended tradeoff:\n-    // We drop some useful infromation here (see patterns with double dots `..`)\n+    // We drop some useful information here (see patterns with double dots `..`)\n     // Storing that info in `SyntaxKind` is not possible due to its layout requirements of\n     // being `u16` that come from `rowan::SyntaxKind`.\n "}, {"sha": "bfa2dc4ba09770776e91633e6b4fdc6b5134da0d", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -173,7 +173,7 @@ pub(crate) fn validate_block_structure(root: &SyntaxNode) {\n                     assert_eq!(\n                         node.parent(),\n                         pair.parent(),\n-                        \"\\nunpaired curleys:\\n{}\\n{:#?}\\n\",\n+                        \"\\nunpaired curlys:\\n{}\\n{:#?}\\n\",\n                         root.text(),\n                         root,\n                     );"}, {"sha": "f40500e3890c1e5d67a21a9164ca89737ddbdabf", "filename": "crates/syntax/test_data/parser/inline/ok/0002_use_tree_list.rast", "status": "modified", "additions": 49, "deletions": 49, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rast?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -1,4 +1,4 @@\n-SOURCE_FILE@0..249\n+SOURCE_FILE@0..248\n   USE@0..58\n     USE_KW@0..3 \"use\"\n     WHITESPACE@3..4 \" \"\n@@ -75,62 +75,62 @@ SOURCE_FILE@0..249\n         R_CURLY@119..120 \"}\"\n     SEMICOLON@120..121 \";\"\n   WHITESPACE@121..122 \" \"\n-  USE@122..166\n+  USE@122..165\n     COMMENT@122..134 \"// Rust 2015\"\n     WHITESPACE@134..135 \"\\n\"\n     USE_KW@135..138 \"use\"\n     WHITESPACE@138..139 \" \"\n-    USE_TREE@139..165\n+    USE_TREE@139..164\n       COLON2@139..141 \"::\"\n-      USE_TREE_LIST@141..165\n+      USE_TREE_LIST@141..164\n         L_CURLY@141..142 \"{\"\n-        USE_TREE@142..164\n-          PATH@142..164\n-            PATH@142..158\n+        USE_TREE@142..163\n+          PATH@142..163\n+            PATH@142..157\n               PATH@142..146\n                 PATH_SEGMENT@142..146\n                   NAME_REF@142..146\n                     IDENT@142..146 \"some\"\n               COLON2@146..148 \"::\"\n-              PATH_SEGMENT@148..158\n-                NAME_REF@148..158\n-                  IDENT@148..158 \"arbritrary\"\n-            COLON2@158..160 \"::\"\n-            PATH_SEGMENT@160..164\n-              NAME_REF@160..164\n-                IDENT@160..164 \"path\"\n-        R_CURLY@164..165 \"}\"\n-    SEMICOLON@165..166 \";\"\n-  WHITESPACE@166..167 \" \"\n-  USE@167..205\n-    COMMENT@167..179 \"// Rust 2015\"\n-    WHITESPACE@179..180 \"\\n\"\n-    USE_KW@180..183 \"use\"\n-    WHITESPACE@183..184 \" \"\n-    USE_TREE@184..204\n-      COLON2@184..186 \"::\"\n-      USE_TREE_LIST@186..204\n-        L_CURLY@186..187 \"{\"\n-        USE_TREE@187..203\n-          USE_TREE_LIST@187..203\n-            L_CURLY@187..188 \"{\"\n-            USE_TREE@188..202\n-              USE_TREE_LIST@188..202\n-                L_CURLY@188..189 \"{\"\n-                USE_TREE@189..201\n-                  PATH@189..201\n-                    PATH@189..193\n-                      PATH_SEGMENT@189..193\n-                        NAME_REF@189..193\n-                          IDENT@189..193 \"root\"\n-                    COLON2@193..195 \"::\"\n-                    PATH_SEGMENT@195..201\n-                      NAME_REF@195..201\n-                        IDENT@195..201 \"export\"\n-                R_CURLY@201..202 \"}\"\n-            R_CURLY@202..203 \"}\"\n-        R_CURLY@203..204 \"}\"\n-    SEMICOLON@204..205 \";\"\n-  WHITESPACE@205..206 \" \"\n-  COMMENT@206..248 \"// Nonsensical but pe ...\"\n-  WHITESPACE@248..249 \"\\n\"\n+              PATH_SEGMENT@148..157\n+                NAME_REF@148..157\n+                  IDENT@148..157 \"arbitrary\"\n+            COLON2@157..159 \"::\"\n+            PATH_SEGMENT@159..163\n+              NAME_REF@159..163\n+                IDENT@159..163 \"path\"\n+        R_CURLY@163..164 \"}\"\n+    SEMICOLON@164..165 \";\"\n+  WHITESPACE@165..166 \" \"\n+  USE@166..204\n+    COMMENT@166..178 \"// Rust 2015\"\n+    WHITESPACE@178..179 \"\\n\"\n+    USE_KW@179..182 \"use\"\n+    WHITESPACE@182..183 \" \"\n+    USE_TREE@183..203\n+      COLON2@183..185 \"::\"\n+      USE_TREE_LIST@185..203\n+        L_CURLY@185..186 \"{\"\n+        USE_TREE@186..202\n+          USE_TREE_LIST@186..202\n+            L_CURLY@186..187 \"{\"\n+            USE_TREE@187..201\n+              USE_TREE_LIST@187..201\n+                L_CURLY@187..188 \"{\"\n+                USE_TREE@188..200\n+                  PATH@188..200\n+                    PATH@188..192\n+                      PATH_SEGMENT@188..192\n+                        NAME_REF@188..192\n+                          IDENT@188..192 \"root\"\n+                    COLON2@192..194 \"::\"\n+                    PATH_SEGMENT@194..200\n+                      NAME_REF@194..200\n+                        IDENT@194..200 \"export\"\n+                R_CURLY@200..201 \"}\"\n+            R_CURLY@201..202 \"}\"\n+        R_CURLY@202..203 \"}\"\n+    SEMICOLON@203..204 \";\"\n+  WHITESPACE@204..205 \" \"\n+  COMMENT@205..247 \"// Nonsensical but pe ...\"\n+  WHITESPACE@247..248 \"\\n\""}, {"sha": "02af4b446e1970750d07d1b39fe07e9f96e022d6", "filename": "crates/syntax/test_data/parser/inline/ok/0002_use_tree_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0002_use_tree_list.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -1,4 +1,4 @@\n use {crate::path::from::root, or::path::from::crate_name}; // Rust 2018 (with a crate named `or`)\n use {path::from::root}; // Rust 2015\n-use ::{some::arbritrary::path}; // Rust 2015\n+use ::{some::arbitrary::path}; // Rust 2015\n use ::{{{root::export}}}; // Nonsensical but perfectly legal nesting"}, {"sha": "e19d2ad616e931011950cb4d1b3e33fd343f5645", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607b9ea160149bacca41c0638f16d372c3b235cd/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=607b9ea160149bacca41c0638f16d372c3b235cd", "patch": "@@ -63,7 +63,7 @@ pub fn extract_offset(text: &str) -> (TextSize, String) {\n     }\n }\n \n-/// Returns the offset of the first occurence of `$0` marker and the copy of `text`\n+/// Returns the offset of the first occurrence of `$0` marker and the copy of `text`\n /// without the marker.\n fn try_extract_offset(text: &str) -> Option<(TextSize, String)> {\n     let cursor_pos = text.find(CURSOR_MARKER)?;"}]}