{"sha": "bd4365f15b8518e2ccaad53d8d8c5be909189512", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNDM2NWYxNWI4NTE4ZTJjY2FhZDUzZDhkOGM1YmU5MDkxODk1MTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-19T01:06:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-19T22:32:33Z"}, "message": "rustdoc: Fix some script-mangled idents", "tree": {"sha": "7673c75a94680e42370359917732df450aea84c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7673c75a94680e42370359917732df450aea84c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd4365f15b8518e2ccaad53d8d8c5be909189512", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd4365f15b8518e2ccaad53d8d8c5be909189512", "html_url": "https://github.com/rust-lang/rust/commit/bd4365f15b8518e2ccaad53d8d8c5be909189512", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd4365f15b8518e2ccaad53d8d8c5be909189512/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afdd8204ea30d06be1918e32094692a3c086f693", "url": "https://api.github.com/repos/rust-lang/rust/commits/afdd8204ea30d06be1918e32094692a3c086f693", "html_url": "https://github.com/rust-lang/rust/commit/afdd8204ea30d06be1918e32094692a3c086f693"}], "stats": {"total": 106, "additions": 53, "deletions": 53}, "files": [{"sha": "129c55689790fed2effad5664ef24d55d7ede806", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bd4365f15b8518e2ccaad53d8d8c5be909189512/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4365f15b8518e2ccaad53d8d8c5be909189512/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=bd4365f15b8518e2ccaad53d8d8c5be909189512", "patch": "@@ -372,71 +372,71 @@ impl Doc {\n impl ModDoc {\n \n     fn mods() -> ~[ModDoc] {\n-        do vec::filter_map(self.items) |ItemTag| {\n-            match ItemTag {\n+        do vec::filter_map(self.items) |itemtag| {\n+            match itemtag {\n               ModTag(ModDoc) => Some(ModDoc),\n               _ => None\n             }\n         }\n     }\n \n     fn nmods() -> ~[NmodDoc] {\n-        do vec::filter_map(self.items) |ItemTag| {\n-            match ItemTag {\n+        do vec::filter_map(self.items) |itemtag| {\n+            match itemtag {\n               NmodTag(nModDoc) => Some(nModDoc),\n               _ => None\n             }\n         }\n     }\n \n     fn fns() -> ~[FnDoc] {\n-        do vec::filter_map(self.items) |ItemTag| {\n-            match ItemTag {\n+        do vec::filter_map(self.items) |itemtag| {\n+            match itemtag {\n               FnTag(FnDoc) => Some(FnDoc),\n               _ => None\n             }\n         }\n     }\n \n     fn consts() -> ~[ConstDoc] {\n-        do vec::filter_map(self.items) |ItemTag| {\n-            match ItemTag {\n+        do vec::filter_map(self.items) |itemtag| {\n+            match itemtag {\n               ConstTag(ConstDoc) => Some(ConstDoc),\n               _ => None\n             }\n         }\n     }\n \n     fn enums() -> ~[EnumDoc] {\n-        do vec::filter_map(self.items) |ItemTag| {\n-            match ItemTag {\n+        do vec::filter_map(self.items) |itemtag| {\n+            match itemtag {\n               EnumTag(EnumDoc) => Some(EnumDoc),\n               _ => None\n             }\n         }\n     }\n \n     fn traits() -> ~[TraitDoc] {\n-        do vec::filter_map(self.items) |ItemTag| {\n-            match ItemTag {\n+        do vec::filter_map(self.items) |itemtag| {\n+            match itemtag {\n               TraitTag(TraitDoc) => Some(TraitDoc),\n               _ => None\n             }\n         }\n     }\n \n     fn impls() -> ~[ImplDoc] {\n-        do vec::filter_map(self.items) |ItemTag| {\n-            match ItemTag {\n+        do vec::filter_map(self.items) |itemtag| {\n+            match itemtag {\n               ImplTag(ImplDoc) => Some(ImplDoc),\n               _ => None\n             }\n         }\n     }\n \n     fn types() -> ~[TyDoc] {\n-        do vec::filter_map(self.items) |ItemTag| {\n-            match ItemTag {\n+        do vec::filter_map(self.items) |itemtag| {\n+            match itemtag {\n               TyTag(TyDoc) => Some(TyDoc),\n               _ => None\n             }"}, {"sha": "2cce66555426ce00dcb31fef55174fc1342c1c19", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/bd4365f15b8518e2ccaad53d8d8c5be909189512/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd4365f15b8518e2ccaad53d8d8c5be909189512/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=bd4365f15b8518e2ccaad53d8d8c5be909189512", "patch": "@@ -44,21 +44,21 @@ fn extract(\n     doc::Doc_({\n         pages: ~[\n             doc::CratePage({\n-                topmod: top_ModDoc_from_crate(crate, default_name),\n+                topmod: top_moddoc_from_crate(crate, default_name),\n             })\n         ]\n     })\n }\n \n-fn top_ModDoc_from_crate(\n+fn top_moddoc_from_crate(\n     crate: @ast::crate,\n     default_name: ~str\n ) -> doc::ModDoc {\n-    ModDoc_from_mod(mk_ItemDoc(ast::crate_node_id, default_name),\n+    moddoc_from_mod(mk_itemdoc(ast::crate_node_id, default_name),\n                     crate.node.module)\n }\n \n-fn mk_ItemDoc(id: ast::node_id, name: ~str) -> doc::ItemDoc {\n+fn mk_itemdoc(id: ast::node_id, name: ~str) -> doc::ItemDoc {\n     {\n         id: id,\n         name: name,\n@@ -70,53 +70,53 @@ fn mk_ItemDoc(id: ast::node_id, name: ~str) -> doc::ItemDoc {\n     }\n }\n \n-fn ModDoc_from_mod(\n-    ItemDoc: doc::ItemDoc,\n+fn moddoc_from_mod(\n+    itemdoc: doc::ItemDoc,\n     module_: ast::_mod\n ) -> doc::ModDoc {\n     doc::ModDoc_({\n-        item: ItemDoc,\n+        item: itemdoc,\n         items: do vec::filter_map(module_.items) |item| {\n-            let ItemDoc = mk_ItemDoc(item.id, to_str(item.ident));\n+            let ItemDoc = mk_itemdoc(item.id, to_str(item.ident));\n             match item.node {\n               ast::item_mod(m) => {\n                 Some(doc::ModTag(\n-                    ModDoc_from_mod(ItemDoc, m)\n+                    moddoc_from_mod(ItemDoc, m)\n                 ))\n               }\n               ast::item_foreign_mod(nm) => {\n                 Some(doc::NmodTag(\n-                    nModDoc_from_mod(ItemDoc, nm)\n+                    nmoddoc_from_mod(ItemDoc, nm)\n                 ))\n               }\n               ast::item_fn(*) => {\n                 Some(doc::FnTag(\n-                    FnDoc_from_fn(ItemDoc)\n+                    fndoc_from_fn(ItemDoc)\n                 ))\n               }\n               ast::item_const(_, _) => {\n                 Some(doc::ConstTag(\n-                    ConstDoc_from_const(ItemDoc)\n+                    constdoc_from_const(ItemDoc)\n                 ))\n               }\n               ast::item_enum(enum_definition, _) => {\n                 Some(doc::EnumTag(\n-                    EnumDoc_from_enum(ItemDoc, enum_definition.variants)\n+                    enumdoc_from_enum(ItemDoc, enum_definition.variants)\n                 ))\n               }\n               ast::item_trait(_, _, methods) => {\n                 Some(doc::TraitTag(\n-                    TraitDoc_from_trait(ItemDoc, methods)\n+                    traitdoc_from_trait(ItemDoc, methods)\n                 ))\n               }\n               ast::item_impl(_, _, _, methods) => {\n                 Some(doc::ImplTag(\n-                    ImplDoc_from_impl(ItemDoc, methods)\n+                    impldoc_from_impl(ItemDoc, methods)\n                 ))\n               }\n               ast::item_ty(_, _) => {\n                 Some(doc::TyTag(\n-                    TyDoc_from_ty(ItemDoc)\n+                    tydoc_from_ty(ItemDoc)\n                 ))\n               }\n               _ => None\n@@ -126,37 +126,37 @@ fn ModDoc_from_mod(\n     })\n }\n \n-fn nModDoc_from_mod(\n-    ItemDoc: doc::ItemDoc,\n+fn nmoddoc_from_mod(\n+    itemdoc: doc::ItemDoc,\n     module_: ast::foreign_mod\n ) -> doc::NmodDoc {\n     let mut fns = ~[];\n     for module_.items.each |item| {\n-        let ItemDoc = mk_ItemDoc(item.id, to_str(item.ident));\n+        let ItemDoc = mk_itemdoc(item.id, to_str(item.ident));\n         match item.node {\n           ast::foreign_item_fn(*) => {\n-            vec::push(fns, FnDoc_from_fn(ItemDoc));\n+            vec::push(fns, fndoc_from_fn(ItemDoc));\n           }\n           ast::foreign_item_const(*) => {} // XXX: Not implemented.\n         }\n     }\n     {\n-        item: ItemDoc,\n+        item: itemdoc,\n         fns: fns,\n         index: None\n     }\n }\n \n-fn FnDoc_from_fn(ItemDoc: doc::ItemDoc) -> doc::FnDoc {\n+fn fndoc_from_fn(itemdoc: doc::ItemDoc) -> doc::FnDoc {\n     {\n-        item: ItemDoc,\n+        item: itemdoc,\n         sig: None\n     }\n }\n \n-fn ConstDoc_from_const(ItemDoc: doc::ItemDoc) -> doc::ConstDoc {\n+fn constdoc_from_const(itemdoc: doc::ItemDoc) -> doc::ConstDoc {\n     {\n-        item: ItemDoc,\n+        item: itemdoc,\n         sig: None\n     }\n }\n@@ -168,12 +168,12 @@ fn should_extract_const_name_and_id() {\n     assert doc.cratemod().consts()[0].name() == ~\"a\";\n }\n \n-fn EnumDoc_from_enum(\n-    ItemDoc: doc::ItemDoc,\n+fn enumdoc_from_enum(\n+    itemdoc: doc::ItemDoc,\n     variants: ~[ast::variant]\n ) -> doc::EnumDoc {\n     {\n-        item: ItemDoc,\n+        item: itemdoc,\n         variants: variantdocs_from_variants(variants)\n     }\n }\n@@ -206,12 +206,12 @@ fn should_extract_enum_variants() {\n     assert doc.cratemod().enums()[0].variants[0].name == ~\"v\";\n }\n \n-fn TraitDoc_from_trait(\n-    ItemDoc: doc::ItemDoc,\n+fn traitdoc_from_trait(\n+    itemdoc: doc::ItemDoc,\n     methods: ~[ast::trait_method]\n ) -> doc::TraitDoc {\n     {\n-        item: ItemDoc,\n+        item: itemdoc,\n         methods: do vec::map(methods) |method| {\n             match method {\n               ast::required(ty_m) => {\n@@ -251,12 +251,12 @@ fn should_extract_trait_methods() {\n     assert doc.cratemod().traits()[0].methods[0].name == ~\"f\";\n }\n \n-fn ImplDoc_from_impl(\n-    ItemDoc: doc::ItemDoc,\n+fn impldoc_from_impl(\n+    itemdoc: doc::ItemDoc,\n     methods: ~[@ast::method]\n ) -> doc::ImplDoc {\n     {\n-        item: ItemDoc,\n+        item: itemdoc,\n         trait_types: ~[],\n         self_ty: None,\n         methods: do vec::map(methods) |method| {\n@@ -278,11 +278,11 @@ fn should_extract_impl_methods() {\n     assert doc.cratemod().impls()[0].methods[0].name == ~\"f\";\n }\n \n-fn TyDoc_from_ty(\n-    ItemDoc: doc::ItemDoc\n+fn tydoc_from_ty(\n+    itemdoc: doc::ItemDoc\n ) -> doc::TyDoc {\n     {\n-        item: ItemDoc,\n+        item: itemdoc,\n         sig: None\n     }\n }"}]}