{"sha": "5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZWYxNWRmMTI2ZThkZmVkYzllNzJlZTNkOTQ1NmVhZDBjOWQwNmQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-29T20:26:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-08-29T20:26:52Z"}, "message": "Rename resolve3 -> resolve.", "tree": {"sha": "104f18125d5284246a0d1e5de7e39d2ceecb0925", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/104f18125d5284246a0d1e5de7e39d2ceecb0925"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "html_url": "https://github.com/rust-lang/rust/commit/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d22a805d73c6b6f42e496fc23cffbf6ffeeed1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d22a805d73c6b6f42e496fc23cffbf6ffeeed1b", "html_url": "https://github.com/rust-lang/rust/commit/6d22a805d73c6b6f42e496fc23cffbf6ffeeed1b"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "6aa3451271dc377b0711393efdc7869cc2d24ef7", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -187,7 +187,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n           exp_map2: exp_map2,\n           trait_map: trait_map } =\n         time(time_passes, ~\"resolution\", ||\n-             middle::resolve3::resolve_crate(sess, lang_items, crate));\n+             middle::resolve::resolve_crate(sess, lang_items, crate));\n \n     let freevars = time(time_passes, ~\"freevar finding\", ||\n         freevars::annotate_freevars(def_map, crate));"}, {"sha": "af28556fd33f5d20f654ba01ae9bf8080cb99d2f", "filename": "src/rustc/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -5,8 +5,8 @@\n mod middle {\n     import ty = middle_::ty;\n     export ty;\n-    import resolve3 = middle_::resolve3;\n-    export resolve3;\n+    import resolve = middle_::resolve;\n+    export resolve;\n }\n \n mod front {"}, {"sha": "712d8ef691aa16515dca8299e90b49e1c1e5ff63", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -13,7 +13,7 @@ import syntax::ast_util::*;\n import common::*;\n import middle::ty;\n import middle::ty::node_id_to_type;\n-import middle::resolve3;\n+import middle::resolve;\n import syntax::ast_map;\n import syntax::attr;\n import std::serialization::serializer;\n@@ -46,7 +46,7 @@ type encode_parms = {\n     tcx: ty::ctxt,\n     reachable: hashmap<ast::node_id, ()>,\n     reexports: ~[(~str, def_id)],\n-    reexports2: middle::resolve3::ExportMap2,\n+    reexports2: middle::resolve::ExportMap2,\n     item_symbols: hashmap<ast::node_id, ~str>,\n     discrim_symbols: hashmap<ast::node_id, ~str>,\n     link_meta: link_meta,\n@@ -73,7 +73,7 @@ enum encode_ctxt = {\n     stats: stats,\n     reachable: hashmap<ast::node_id, ()>,\n     reexports: ~[(~str, def_id)],\n-    reexports2: middle::resolve3::ExportMap2,\n+    reexports2: middle::resolve::ExportMap2,\n     item_symbols: hashmap<ast::node_id, ~str>,\n     discrim_symbols: hashmap<ast::node_id, ~str>,\n     link_meta: link_meta,"}, {"sha": "cc426b5cb74db82d5b9cf93c8df7a25579a997e8", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -5,7 +5,7 @@ import std::map::hashmap;\n import dvec::DVec;\n \n fn check_crate(sess: session, crate: @crate, ast_map: ast_map::map,\n-               def_map: resolve3::DefMap,\n+               def_map: resolve::DefMap,\n                 method_map: typeck::method_map, tcx: ty::ctxt) {\n     visit::visit_crate(*crate, false, visit::mk_vt(@{\n         visit_item: |a,b,c| check_item(sess, ast_map, def_map, a, b, c),\n@@ -18,7 +18,7 @@ fn check_crate(sess: session, crate: @crate, ast_map: ast_map::map,\n }\n \n fn check_item(sess: session, ast_map: ast_map::map,\n-              def_map: resolve3::DefMap,\n+              def_map: resolve::DefMap,\n               it: @item, &&_is_const: bool, v: visit::vt<bool>) {\n     match it.node {\n       item_const(_, ex) => {\n@@ -55,7 +55,7 @@ fn check_pat(p: @pat, &&_is_const: bool, v: visit::vt<bool>) {\n     }\n }\n \n-fn check_expr(sess: session, def_map: resolve3::DefMap,\n+fn check_expr(sess: session, def_map: resolve::DefMap,\n               method_map: typeck::method_map, tcx: ty::ctxt,\n               e: @expr, &&is_const: bool, v: visit::vt<bool>) {\n     if is_const {\n@@ -143,13 +143,13 @@ fn check_expr(sess: session, def_map: resolve3::DefMap,\n // Make sure a const item doesn't recursively refer to itself\n // FIXME: Should use the dependency graph when it's available (#1356)\n fn check_item_recursion(sess: session, ast_map: ast_map::map,\n-                        def_map: resolve3::DefMap, it: @item) {\n+                        def_map: resolve::DefMap, it: @item) {\n \n     type env = {\n         root_it: @item,\n         sess: session,\n         ast_map: ast_map::map,\n-        def_map: resolve3::DefMap,\n+        def_map: resolve::DefMap,\n         idstack: @DVec<node_id>,\n     };\n "}, {"sha": "9cc74c56b90722b1a004895b40dc670d2179699e", "filename": "src/rustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fconst_eval.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -55,7 +55,7 @@ fn join_all(cs: &[constness]) -> constness {\n }\n \n fn classify(e: @expr,\n-            def_map: resolve3::DefMap,\n+            def_map: resolve::DefMap,\n             tcx: ty::ctxt) -> constness {\n     let did = ast_util::local_def(e.id);\n     match tcx.ccache.find(did) {\n@@ -168,7 +168,7 @@ fn classify(e: @expr,\n }\n \n fn process_crate(crate: @ast::crate,\n-                 def_map: resolve3::DefMap,\n+                 def_map: resolve::DefMap,\n                  tcx: ty::ctxt) {\n     let v = visit::mk_simple_visitor(@{\n         visit_expr_post: |e| { classify(e, def_map, tcx); }"}, {"sha": "143c494684abb9d110e575827617983101599098", "filename": "src/rustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffreevars.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -30,7 +30,7 @@ type freevar_map = hashmap<ast::node_id, freevar_info>;\n // Since we want to be able to collect upvars in some arbitrary piece\n // of the AST, we take a walker function that we invoke with a visitor\n // in order to start the search.\n-fn collect_freevars(def_map: resolve3::DefMap, blk: ast::blk)\n+fn collect_freevars(def_map: resolve::DefMap, blk: ast::blk)\n     -> freevar_info {\n     let seen = int_hash();\n     let refs = @mut ~[];\n@@ -85,7 +85,7 @@ fn collect_freevars(def_map: resolve3::DefMap, blk: ast::blk)\n // efficient as it fully recomputes the free variables at every\n // node of interest rather than building up the free variables in\n // one pass. This could be improved upon if it turns out to matter.\n-fn annotate_freevars(def_map: resolve3::DefMap, crate: @ast::crate) ->\n+fn annotate_freevars(def_map: resolve::DefMap, crate: @ast::crate) ->\n    freevar_map {\n     let freevars = int_hash();\n "}, {"sha": "9b473c32256c6480d389a171773fbbd358735500", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -13,15 +13,15 @@ type pat_id_map = std::map::hashmap<ident, node_id>;\n \n // This is used because same-named variables in alternative patterns need to\n // use the node_id of their namesake in the first pattern.\n-fn pat_id_map(dm: resolve3::DefMap, pat: @pat) -> pat_id_map {\n+fn pat_id_map(dm: resolve::DefMap, pat: @pat) -> pat_id_map {\n     let map = std::map::uint_hash();\n     do pat_bindings(dm, pat) |_bm, p_id, _s, n| {\n       map.insert(path_to_ident(n), p_id);\n     };\n     return map;\n }\n \n-fn pat_is_variant(dm: resolve3::DefMap, pat: @pat) -> bool {\n+fn pat_is_variant(dm: resolve::DefMap, pat: @pat) -> bool {\n     match pat.node {\n       pat_enum(_, _) => true,\n       pat_ident(_, _, None) => match dm.find(pat.id) {\n@@ -32,7 +32,7 @@ fn pat_is_variant(dm: resolve3::DefMap, pat: @pat) -> bool {\n     }\n }\n \n-fn pat_bindings(dm: resolve3::DefMap, pat: @pat,\n+fn pat_bindings(dm: resolve::DefMap, pat: @pat,\n                 it: fn(binding_mode, node_id, span, @path)) {\n     do walk_pat(pat) |p| {\n         match p.node {\n@@ -44,7 +44,7 @@ fn pat_bindings(dm: resolve3::DefMap, pat: @pat,\n     }\n }\n \n-fn pat_binding_ids(dm: resolve3::DefMap, pat: @pat) -> ~[node_id] {\n+fn pat_binding_ids(dm: resolve::DefMap, pat: @pat) -> ~[node_id] {\n     let mut found = ~[];\n     pat_bindings(dm, pat, |_bm, b_id, _sp, _pt| vec::push(found, b_id) );\n     return found;"}, {"sha": "10bdce082ab4ab0990cfb92d425dce637ebcf856", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -43,7 +43,7 @@ type region_map = hashmap<ast::node_id, ast::node_id>;\n \n struct ctxt {\n     sess: session;\n-    def_map: resolve3::DefMap;\n+    def_map: resolve::DefMap;\n \n     // Generated maps:\n     region_map: region_map;\n@@ -325,7 +325,7 @@ fn resolve_fn(fk: visit::fn_kind, decl: ast::fn_decl, body: ast::blk,\n     visit::visit_fn(fk, decl, body, sp, id, fn_cx, visitor);\n }\n \n-fn resolve_crate(sess: session, def_map: resolve3::DefMap,\n+fn resolve_crate(sess: session, def_map: resolve::DefMap,\n                  crate: @ast::crate) -> region_map {\n     let cx: ctxt = ctxt {sess: sess,\n                          def_map: def_map,\n@@ -373,7 +373,7 @@ type dep_map = hashmap<ast::node_id, @DVec<region_dep>>;\n type determine_rp_ctxt_ = {\n     sess: session,\n     ast_map: ast_map::map,\n-    def_map: resolve3::DefMap,\n+    def_map: resolve::DefMap,\n     region_paramd_items: region_paramd_items,\n     dep_map: dep_map,\n     worklist: DVec<ast::node_id>,\n@@ -746,7 +746,7 @@ fn determine_rp_in_struct_field(cm: @ast::struct_field,\n \n fn determine_rp_in_crate(sess: session,\n                          ast_map: ast_map::map,\n-                         def_map: resolve3::DefMap,\n+                         def_map: resolve::DefMap,\n                          crate: @ast::crate) -> region_paramd_items {\n     let cx = determine_rp_ctxt_(@{sess: sess,\n                                   ast_map: ast_map,"}, {"sha": "33260e1fe6f6fd7f9a2253c8a777a1f510ad7948", "filename": "src/rustc/middle/resolve.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "previous_filename": "src/rustc/middle/resolve3.rs"}, {"sha": "134e25da11e3f63bb1bc941c85ce9e4117ac1715", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -10,7 +10,7 @@ import syntax::ast_util::{dummy_sp, path_to_ident};\n import syntax::ast::def_id;\n import syntax::codemap::span;\n import syntax::print::pprust::pat_to_str;\n-import middle::resolve3::DefMap;\n+import middle::resolve::DefMap;\n import back::abi;\n import std::map::hashmap;\n import dvec::DVec;"}, {"sha": "a25b5e28410ea815b9a6bf9d5a6c934e4f53b1bd", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -5868,8 +5868,8 @@ fn trans_crate(sess: session::session,\n                crate: @ast::crate,\n                tcx: ty::ctxt,\n                output: &Path,\n-               emap: resolve3::ExportMap,\n-               emap2: resolve3::ExportMap2,\n+               emap: resolve::ExportMap,\n+               emap2: resolve::ExportMap2,\n                maps: astencode::maps)\n             -> (ModuleRef, link_meta) {\n "}, {"sha": "2f66da09a78ef0e4aa5fff0a70d5cf8606900b8e", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -107,8 +107,8 @@ type crate_ctxt = {\n      externs: hashmap<~str, ValueRef>,\n      intrinsics: hashmap<~str, ValueRef>,\n      item_vals: hashmap<ast::node_id, ValueRef>,\n-     exp_map: resolve3::ExportMap,\n-     exp_map2: resolve3::ExportMap2,\n+     exp_map: resolve::ExportMap,\n+     exp_map2: resolve::ExportMap2,\n      reachable: reachable::map,\n      item_symbols: hashmap<ast::node_id, ~str>,\n      mut main_fn: Option<ValueRef>,"}, {"sha": "b252351cd982e6f7cfd1f82e2993db1f62a76548", "filename": "src/rustc/middle/trans/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -17,12 +17,12 @@ export map, find_reachable;\n \n type map = std::map::hashmap<node_id, ()>;\n \n-type ctx = {exp_map: resolve3::ExportMap,\n+type ctx = {exp_map: resolve::ExportMap,\n             tcx: ty::ctxt,\n             method_map: typeck::method_map,\n             rmap: map};\n \n-fn find_reachable(crate_mod: _mod, exp_map: resolve3::ExportMap,\n+fn find_reachable(crate_mod: _mod, exp_map: resolve::ExportMap,\n                   tcx: ty::ctxt, method_map: typeck::method_map) -> map {\n     let rmap = std::map::int_hash();\n     let cx = {exp_map: exp_map, tcx: tcx, method_map: method_map, rmap: rmap};"}, {"sha": "18d54dbf5d8c7fcb634011877d1744db2e084355", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -253,7 +253,7 @@ type ctxt =\n       vecs_implicitly_copyable: bool,\n       cstore: metadata::cstore::cstore,\n       sess: session::session,\n-      def_map: resolve3::DefMap,\n+      def_map: resolve::DefMap,\n \n       region_map: middle::region::region_map,\n       region_paramd_items: middle::region::region_paramd_items,\n@@ -603,7 +603,7 @@ fn new_ty_hash<V: copy>() -> map::hashmap<t, V> {\n }\n \n fn mk_ctxt(s: session::session,\n-           dm: resolve3::DefMap,\n+           dm: resolve::DefMap,\n            amap: ast_map::map,\n            freevars: freevars::freevar_map,\n            region_map: middle::region::region_map,"}, {"sha": "1fa619a1ca31a8ba8f1b7e437fbbae7287ad55ca", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -157,13 +157,13 @@ type vtable_map = hashmap<ast::node_id, vtable_res>;\n // Maps from a trait's def_id to a MethodInfo about\n // that method in that trait.\n type provided_methods_map = hashmap<ast::node_id,\n-                                    ~[@resolve3::MethodInfo]>;\n+                                    ~[@resolve::MethodInfo]>;\n \n type ty_param_substs_and_ty = {substs: ty::substs, ty: ty::t};\n \n type crate_ctxt_ = {// A mapping from method call sites to traits that have\n                     // that method.\n-                    trait_map: resolve3::TraitMap,\n+                    trait_map: resolve::TraitMap,\n                     method_map: method_map,\n                     vtable_map: vtable_map,\n                     coherence_info: @coherence::CoherenceInfo,\n@@ -301,7 +301,7 @@ fn check_for_main_fn(ccx: @crate_ctxt) {\n }\n \n fn check_crate(tcx: ty::ctxt,\n-               trait_map: resolve3::TraitMap,\n+               trait_map: resolve::TraitMap,\n                crate: @ast::crate)\n             -> (method_map, vtable_map) {\n "}, {"sha": "bb90bcaea0126c153a1b2336235015d1fbd8b065", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -1,7 +1,7 @@\n /* Code to handle method lookups (which can be quite complex) */\n \n import coherence::get_base_type_def_id;\n-import middle::resolve3::{Impl, MethodInfo};\n+import middle::resolve::{Impl, MethodInfo};\n import middle::ty::{mk_box, mk_rptr, mk_uniq};\n import syntax::ast::{def_id,\n                      sty_static, sty_box, sty_by_ref, sty_region, sty_uniq};\n@@ -462,7 +462,7 @@ struct lookup {\n     }\n \n     // Returns true if any were added and false otherwise.\n-    fn add_candidates_from_impl(im: @resolve3::Impl, mode: method_lookup_mode)\n+    fn add_candidates_from_impl(im: @resolve::Impl, mode: method_lookup_mode)\n                              -> bool {\n         let mut added_any = false;\n "}, {"sha": "8076da7c971165bc05c1ab8a9be48ed5a015e58e", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -7,7 +7,7 @@\n import metadata::csearch::{each_path, get_impl_traits, get_impls_for_mod};\n import metadata::cstore::{cstore, iter_crate_data};\n import metadata::decoder::{dl_def, dl_field, dl_impl};\n-import middle::resolve3::{Impl, MethodInfo};\n+import middle::resolve::{Impl, MethodInfo};\n import middle::ty::{get, lookup_item_type, subst, t, ty_box};\n import middle::ty::{ty_uniq, ty_ptr, ty_rptr, ty_enum};\n import middle::ty::{ty_class, ty_nil, ty_bot, ty_bool, ty_int, ty_uint};"}, {"sha": "ce77613da06aa41266b1c72a6e3727a57261c5f8", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5eef15df126e8dfedc9e72ee3d9456ead0c9d06d/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=5eef15df126e8dfedc9e72ee3d9456ead0c9d06d", "patch": "@@ -53,7 +53,7 @@ mod middle {\n         mod reachable;\n     }\n     mod ty;\n-    mod resolve3;\n+    mod resolve;\n     mod typeck {\n         mod check {\n             mod alt;"}]}