{"sha": "6c4e236b955ba6a2dd8ef8e054f50ff64135a8be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNGUyMzZiOTU1YmE2YTJkZDhlZjhlMDU0ZjUwZmY2NDEzNWE4YmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-09T16:38:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-09T16:38:00Z"}, "message": "Auto merge of #26766 - jespino:add-more-filetypes, r=alexcrichton\n\nI find that isn't supported on the current API and I think is necesary.\r\n\r\nIt is my first PR to rust (I'm not a rust expert and I'm not sure if this is the better way to propose this thinks), of course any suggestion of change will be welcome.\r\n\r\nI'm almost sure that in windows aren't supported this filetypes, then, i put in the api of win::fs the functions with a fixed false in the response, I hope this is correct.", "tree": {"sha": "54966c2817a669c4d63e5ad7d5c4500b53416570", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54966c2817a669c4d63e5ad7d5c4500b53416570"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be", "html_url": "https://github.com/rust-lang/rust/commit/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92a95fe5507a41bdfb055913bec1be24509a5146", "url": "https://api.github.com/repos/rust-lang/rust/commits/92a95fe5507a41bdfb055913bec1be24509a5146", "html_url": "https://github.com/rust-lang/rust/commit/92a95fe5507a41bdfb055913bec1be24509a5146"}, {"sha": "74f42980e19dd74a55d95cc0cd6428477797b6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f42980e19dd74a55d95cc0cd6428477797b6cf", "html_url": "https://github.com/rust-lang/rust/commit/74f42980e19dd74a55d95cc0cd6428477797b6cf"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "0a32c73a848d0dccd0f121dab06c441040ec61a3", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=6c4e236b955ba6a2dd8ef8e054f50ff64135a8be", "patch": "@@ -2522,6 +2522,7 @@ pub mod consts {\n             pub const S_IFDIR : c_int = 16384;\n             pub const S_IFREG : c_int = 32768;\n             pub const S_IFLNK : c_int = 40960;\n+            pub const S_IFSOCK : mode_t = 49152;\n             pub const S_IFMT : c_int = 61440;\n             pub const S_IEXEC : c_int = 64;\n             pub const S_IWRITE : c_int = 128;\n@@ -2881,6 +2882,7 @@ pub mod consts {\n             pub const S_IFDIR : mode_t = 16384;\n             pub const S_IFREG : mode_t = 32768;\n             pub const S_IFLNK : mode_t = 40960;\n+            pub const S_IFSOCK : mode_t = 49152;\n             pub const S_IFMT : mode_t = 61440;\n             pub const S_IEXEC : mode_t = 64;\n             pub const S_IWRITE : mode_t = 128;\n@@ -3103,6 +3105,7 @@ pub mod consts {\n             pub const S_IFDIR : mode_t = 16384;\n             pub const S_IFREG : mode_t = 32768;\n             pub const S_IFLNK : mode_t = 40960;\n+            pub const S_IFSOCK : mode_t = 49152;\n             pub const S_IFMT : mode_t = 61440;\n             pub const S_IEXEC : mode_t = 64;\n             pub const S_IWRITE : mode_t = 128;\n@@ -3905,6 +3908,7 @@ pub mod consts {\n             pub const S_IFDIR : mode_t = 16384;\n             pub const S_IFREG : mode_t = 32768;\n             pub const S_IFLNK : mode_t = 40960;\n+            pub const S_IFSOCK : mode_t = 49152;\n             pub const S_IFMT : mode_t = 61440;\n             pub const S_IEXEC : mode_t = 64;\n             pub const S_IWRITE : mode_t = 128;\n@@ -4365,6 +4369,7 @@ pub mod consts {\n             pub const S_IFDIR : mode_t = 16384;\n             pub const S_IFREG : mode_t = 32768;\n             pub const S_IFLNK : mode_t = 40960;\n+            pub const S_IFSOCK : mode_t = 49152;\n             pub const S_IFMT : mode_t = 61440;\n             pub const S_IEXEC : mode_t = 64;\n             pub const S_IWRITE : mode_t = 128;\n@@ -4791,6 +4796,7 @@ pub mod consts {\n             pub const S_IFDIR : mode_t = 16384;\n             pub const S_IFREG : mode_t = 32768;\n             pub const S_IFLNK : mode_t = 40960;\n+            pub const S_IFSOCK : mode_t = 49152;\n             pub const S_IFMT : mode_t = 61440;\n             pub const S_IEXEC : mode_t = 64;\n             pub const S_IWRITE : mode_t = 128;"}, {"sha": "e058d9d07078e401b0559eeef3880f6ffc580770", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=6c4e236b955ba6a2dd8ef8e054f50ff64135a8be", "patch": "@@ -637,6 +637,10 @@ impl FileType {\n     pub fn is_symlink(&self) -> bool { self.0.is_symlink() }\n }\n \n+impl AsInner<fs_imp::FileType> for FileType {\n+    fn as_inner(&self) -> &fs_imp::FileType { &self.0 }\n+}\n+\n impl FromInner<fs_imp::FilePermissions> for Permissions {\n     fn from_inner(f: fs_imp::FilePermissions) -> Permissions {\n         Permissions(f)"}, {"sha": "4ee790b0161716d215e5af67e5f6fa8889a45747", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=6c4e236b955ba6a2dd8ef8e054f50ff64135a8be", "patch": "@@ -16,6 +16,7 @@ use prelude::v1::*;\n \n use fs::{self, Permissions, OpenOptions};\n use io;\n+use libc;\n use os::raw::c_long;\n use os::unix::raw;\n use path::Path;\n@@ -178,6 +179,27 @@ impl MetadataExt for fs::Metadata {\n     }\n }\n \n+/// Add special unix types (block/char device, fifo and socket)\n+#[unstable(feature = \"file_type_ext\", reason = \"recently added API\")]\n+pub trait FileTypeExt {\n+    /// Returns whether this file type is a block device.\n+    fn is_block_device(&self) -> bool;\n+    /// Returns whether this file type is a char device.\n+    fn is_char_device(&self) -> bool;\n+    /// Returns whether this file type is a fifo.\n+    fn is_fifo(&self) -> bool;\n+    /// Returns whether this file type is a socket.\n+    fn is_socket(&self) -> bool;\n+}\n+\n+#[unstable(feature = \"file_type_ext\", reason = \"recently added API\")]\n+impl FileTypeExt for fs::FileType {\n+    fn is_block_device(&self) -> bool { self.as_inner().is(libc::S_IFBLK) }\n+    fn is_char_device(&self) -> bool { self.as_inner().is(libc::S_IFCHR) }\n+    fn is_fifo(&self) -> bool { self.as_inner().is(libc::S_IFIFO) }\n+    fn is_socket(&self) -> bool { self.as_inner().is(libc::S_IFSOCK) }\n+}\n+\n /// Unix-specific extension methods for `fs::DirEntry`\n #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n pub trait DirEntryExt {"}, {"sha": "f7dee1a8f355f2a96453ac0c54c2ce0b80ad6167", "filename": "src/libstd/sys/unix/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs?ref=6c4e236b955ba6a2dd8ef8e054f50ff64135a8be", "patch": "@@ -45,7 +45,7 @@ pub mod prelude {\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::ffi::{OsStrExt, OsStringExt};\n     #[doc(no_inline)]\n-    pub use super::fs::{PermissionsExt, OpenOptionsExt, MetadataExt};\n+    pub use super::fs::{PermissionsExt, OpenOptionsExt, MetadataExt, FileTypeExt};\n     #[doc(no_inline)]\n     pub use super::fs::{DirEntryExt};\n     #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "7396d088ade909ce45b3f55e3224af94b48129b0", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4e236b955ba6a2dd8ef8e054f50ff64135a8be/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=6c4e236b955ba6a2dd8ef8e054f50ff64135a8be", "patch": "@@ -113,7 +113,7 @@ impl FileType {\n     pub fn is_file(&self) -> bool { self.is(libc::S_IFREG) }\n     pub fn is_symlink(&self) -> bool { self.is(libc::S_IFLNK) }\n \n-    fn is(&self, mode: mode_t) -> bool { self.mode & libc::S_IFMT == mode }\n+    pub fn is(&self, mode: mode_t) -> bool { self.mode & libc::S_IFMT == mode }\n }\n \n impl FromInner<raw::mode_t> for FilePermissions {"}]}