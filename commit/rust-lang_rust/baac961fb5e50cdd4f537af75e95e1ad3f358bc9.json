{"sha": "baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYWM5NjFmYjVlNTBjZGQ0ZjUzN2FmNzVlOTVlMWFkM2YzNThiYzk=", "commit": {"author": {"name": "YI", "email": "uuuuuu@protonmail.com", "date": "2020-04-22T12:18:22Z"}, "committer": {"name": "YI", "email": "uuuuuu@protonmail.com", "date": "2020-04-23T07:46:05Z"}, "message": "fix error code for E0751", "tree": {"sha": "f13183aebc1baacdeb71ab69174b22e917945272", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f13183aebc1baacdeb71ab69174b22e917945272"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "html_url": "https://github.com/rust-lang/rust/commit/baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/comments", "author": {"login": "contrun", "id": 32609395, "node_id": "MDQ6VXNlcjMyNjA5Mzk1", "avatar_url": "https://avatars.githubusercontent.com/u/32609395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/contrun", "html_url": "https://github.com/contrun", "followers_url": "https://api.github.com/users/contrun/followers", "following_url": "https://api.github.com/users/contrun/following{/other_user}", "gists_url": "https://api.github.com/users/contrun/gists{/gist_id}", "starred_url": "https://api.github.com/users/contrun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/contrun/subscriptions", "organizations_url": "https://api.github.com/users/contrun/orgs", "repos_url": "https://api.github.com/users/contrun/repos", "events_url": "https://api.github.com/users/contrun/events{/privacy}", "received_events_url": "https://api.github.com/users/contrun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "contrun", "id": 32609395, "node_id": "MDQ6VXNlcjMyNjA5Mzk1", "avatar_url": "https://avatars.githubusercontent.com/u/32609395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/contrun", "html_url": "https://github.com/contrun", "followers_url": "https://api.github.com/users/contrun/followers", "following_url": "https://api.github.com/users/contrun/following{/other_user}", "gists_url": "https://api.github.com/users/contrun/gists{/gist_id}", "starred_url": "https://api.github.com/users/contrun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/contrun/subscriptions", "organizations_url": "https://api.github.com/users/contrun/orgs", "repos_url": "https://api.github.com/users/contrun/repos", "events_url": "https://api.github.com/users/contrun/events{/privacy}", "received_events_url": "https://api.github.com/users/contrun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25f070d1edf3d54d8933e00eeac95ce55ca8eabb", "url": "https://api.github.com/repos/rust-lang/rust/commits/25f070d1edf3d54d8933e00eeac95ce55ca8eabb", "html_url": "https://github.com/rust-lang/rust/commit/25f070d1edf3d54d8933e00eeac95ce55ca8eabb"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "809b888d92ac3bf0e1397e3021e779aa3406af30", "filename": "src/librustc_error_codes/error_codes/E0751.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0751.md", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0751.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0751.md?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -2,7 +2,7 @@ There are both a positive and negative trait implementation for the same type.\n \n Erroneous code example:\n \n-```compile_fail,E0748\n+```compile_fail,E0751\n trait MyTrait {}\n impl MyTrait for i32 { }\n impl !MyTrait for i32 { }"}, {"sha": "57d13e35fd2dc6ae4fae3ca25ff095959fd08bff", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -345,7 +345,7 @@ fn report_negative_positive_conflict(\n     let mut err = struct_span_err!(\n         tcx.sess,\n         impl_span,\n-        E0748,\n+        E0751,\n         \"found both positive and negative implementation of trait `{}`{}:\",\n         overlap.trait_desc,\n         overlap.self_desc.clone().map_or(String::new(), |ty| format!(\" for type `{}`\", ty))"}, {"sha": "4d9f815c7958184e4d4c2440ea400446fc20a401", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0751]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n   --> $DIR/coherence-conflicting-negative-trait-impl.rs:11:1\n    |\n LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n@@ -18,5 +18,5 @@ LL | unsafe impl<T: 'static> Send for TestType<T> {}\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0119, E0748.\n+Some errors have detailed explanations: E0119, E0751.\n For more information about an error, try `rustc --explain E0119`."}, {"sha": "d091162fced6b926ed6457a618946bc6f9f5c799", "filename": "src/test/ui/issues/issue-33140-hack-boundaries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -23,7 +23,7 @@ trait Trait2 {}\n \n impl Trait2 for dyn Send {}\n impl !Trait2 for dyn Send {}\n-//~^ ERROR E0748\n+//~^ ERROR E0751\n \n // Problem 3: type parameter\n trait Trait3<T: ?Sized> {}"}, {"sha": "ae65701ecb52ab96683b5baf458b46df79a97618", "filename": "src/test/ui/issues/issue-33140-hack-boundaries.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.stderr?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -6,7 +6,7 @@ LL | impl Trait1 for dyn Send {}\n LL | impl Trait1 for dyn Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n \n-error[E0748]: found both positive and negative implementation of trait `Trait2` for type `(dyn std::marker::Send + 'static)`:\n+error[E0751]: found both positive and negative implementation of trait `Trait2` for type `(dyn std::marker::Send + 'static)`:\n   --> $DIR/issue-33140-hack-boundaries.rs:25:1\n    |\n LL | impl Trait2 for dyn Send {}\n@@ -64,5 +64,5 @@ LL | impl Trait5 for dyn Send where u32: Copy {}\n \n error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0119, E0748.\n+Some errors have detailed explanations: E0119, E0751.\n For more information about an error, try `rustc --explain E0119`."}, {"sha": "90dbef3075b7f54f8e3e4fdf7f7b718e8542c54f", "filename": "src/test/ui/specialization/specialization-overlap-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -6,6 +6,6 @@ trait MyTrait {}\n struct TestType<T>(::std::marker::PhantomData<T>);\n \n unsafe impl<T: Clone> Send for TestType<T> {}\n-impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR E0748\n+impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR E0751\n \n fn main() {}"}, {"sha": "e2616534d20412679359a1147a8a2f52500c16af", "filename": "src/test/ui/specialization/specialization-overlap-negative.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.stderr?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n+error[E0751]: found both positive and negative implementation of trait `std::marker::Send` for type `TestType<_>`:\n   --> $DIR/specialization-overlap-negative.rs:9:1\n    |\n LL | unsafe impl<T: Clone> Send for TestType<T> {}\n@@ -8,4 +8,4 @@ LL | impl<T: MyTrait> !Send for TestType<T> {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}, {"sha": "e78035f171075c5016a8a525ee4dc907325fe5d3", "filename": "src/test/ui/specialization/specialization-polarity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -7,11 +7,11 @@\n auto trait Foo {}\n \n impl<T> Foo for T {}\n-impl !Foo for u8 {} //~ ERROR E0748\n+impl !Foo for u8 {} //~ ERROR E0751\n \n auto trait Bar {}\n \n impl<T> !Bar for T {}\n-impl Bar for u8 {} //~ ERROR E0748\n+impl Bar for u8 {} //~ ERROR E0751\n \n fn main() {}"}, {"sha": "44e60cad67aa4b3fe8f1af5430be8871aa066cc6", "filename": "src/test/ui/specialization/specialization-polarity.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -1,12 +1,12 @@\n-error[E0748]: found both positive and negative implementation of trait `Foo` for type `u8`:\n+error[E0751]: found both positive and negative implementation of trait `Foo` for type `u8`:\n   --> $DIR/specialization-polarity.rs:10:1\n    |\n LL | impl<T> Foo for T {}\n    | ----------------- positive implementation here\n LL | impl !Foo for u8 {}\n    | ^^^^^^^^^^^^^^^^ negative implementation here\n \n-error[E0748]: found both positive and negative implementation of trait `Bar` for type `u8`:\n+error[E0751]: found both positive and negative implementation of trait `Bar` for type `u8`:\n   --> $DIR/specialization-polarity.rs:15:1\n    |\n LL | impl<T> !Bar for T {}\n@@ -16,4 +16,4 @@ LL | impl Bar for u8 {}\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}, {"sha": "da22e43377f52a1ec51e17a4402726a14f8f7f2f", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -8,6 +8,6 @@ trait MyTrait {\n impl<T> MyTrait for T {\n     default fn foo() {}\n }\n-impl !MyTrait for u32 {} //~ ERROR E0748\n+impl !MyTrait for u32 {} //~ ERROR E0751\n \n fn main() {}"}, {"sha": "079546a7df40b8816e96fa6c39f2ed943d117d37", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n+error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/negative-specializes-positive-item.rs:11:1\n    |\n LL | impl<T> MyTrait for T {\n@@ -9,4 +9,4 @@ LL | impl !MyTrait for u32 {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}, {"sha": "1939a098b50ee08aa8d892f7e38cc5459b486a49", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -4,7 +4,7 @@\n // Negative impl for u32 cannot \"specialize\" the base impl.\n trait MyTrait {}\n impl<T> MyTrait for T {}\n-impl !MyTrait for u32 {} //~ ERROR E0748\n+impl !MyTrait for u32 {} //~ ERROR E0751\n \n // The second impl specializes the first, no error.\n trait MyTrait2 {}"}, {"sha": "ea005c1cbe0c69dab2a0a017b0464c757d32e193", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n+error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/negative-specializes-positive.rs:7:1\n    |\n LL | impl<T> MyTrait for T {}\n@@ -8,4 +8,4 @@ LL | impl !MyTrait for u32 {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}, {"sha": "499ac461e59a597a268d3bbe86dc74ff9210d039", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -5,7 +5,7 @@ use std::pin::Pin;\n struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n \n impl<'a> Clone for &'a mut MyType<'a> {\n-    //~^ ERROR E0748\n+    //~^ ERROR E0751\n     fn clone(&self) -> &'a mut MyType<'a> {\n         self.0.replace(None).unwrap()\n     }"}, {"sha": "d7039e3db6bde1a36feefec69285946b6e2d81c7", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `std::clone::Clone` for type `&mut MyType<'_>`:\n+error[E0751]: found both positive and negative implementation of trait `std::clone::Clone` for type `&mut MyType<'_>`:\n   --> $DIR/pin-unsound-issue-66544-clone.rs:7:1\n    |\n LL | impl<'a> Clone for &'a mut MyType<'a> {\n@@ -8,4 +8,4 @@ LL | impl<'a> Clone for &'a mut MyType<'a> {\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}, {"sha": "245be800780565b4c71543e1c37d9481db597377", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -10,7 +10,7 @@ use std::pin::Pin;\n struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n \n impl<'a> DerefMut for &'a MyType<'a> {\n-    //~^ ERROR E0748\n+    //~^ ERROR E0751\n     fn deref_mut(&mut self) -> &mut MyType<'a> {\n         self.0.replace(None).unwrap()\n     }"}, {"sha": "a0b62a8bab68f32b4c236bcf9155fd8569a45bf6", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `std::ops::DerefMut` for type `&MyType<'_>`:\n+error[E0751]: found both positive and negative implementation of trait `std::ops::DerefMut` for type `&MyType<'_>`:\n   --> $DIR/pin-unsound-issue-66544-derefmut.rs:12:1\n    |\n LL | impl<'a> DerefMut for &'a MyType<'a> {\n@@ -8,4 +8,4 @@ LL | impl<'a> DerefMut for &'a MyType<'a> {\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}, {"sha": "f2c5f507a4ebbd5fcf5126b97589fdd05e893fd8", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -4,6 +4,6 @@\n trait MyTrait {}\n \n impl<T> !MyTrait for T {}\n-impl MyTrait for u32 {} //~ ERROR E0748\n+impl MyTrait for u32 {} //~ ERROR E0751\n \n fn main() {}"}, {"sha": "a24d7aa442f4ab97326a87a2ae287e26adffd323", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baac961fb5e50cdd4f537af75e95e1ad3f358bc9/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr?ref=baac961fb5e50cdd4f537af75e95e1ad3f358bc9", "patch": "@@ -1,4 +1,4 @@\n-error[E0748]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n+error[E0751]: found both positive and negative implementation of trait `MyTrait` for type `u32`:\n   --> $DIR/positive-specializes-negative.rs:7:1\n    |\n LL | impl<T> !MyTrait for T {}\n@@ -8,4 +8,4 @@ LL | impl MyTrait for u32 {}\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0748`.\n+For more information about this error, try `rustc --explain E0751`."}]}