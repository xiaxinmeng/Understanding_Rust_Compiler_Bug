{"sha": "ebc4df3c7add208195e84940f69648be793b328f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYzRkZjNjN2FkZDIwODE5NWU4NDk0MGY2OTY0OGJlNzkzYjMyOGY=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-03-25T01:54:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-25T18:01:52Z"}, "message": "Implement local declarations with receive. Un-XFAIL decl-with-recv.rs.", "tree": {"sha": "18ef8e7b7dc9f6199679186755497dfa8421d86f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18ef8e7b7dc9f6199679186755497dfa8421d86f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebc4df3c7add208195e84940f69648be793b328f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc4df3c7add208195e84940f69648be793b328f", "html_url": "https://github.com/rust-lang/rust/commit/ebc4df3c7add208195e84940f69648be793b328f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebc4df3c7add208195e84940f69648be793b328f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71f058499a0e551d2b8deb5d098bdb04387dc021", "url": "https://api.github.com/repos/rust-lang/rust/commits/71f058499a0e551d2b8deb5d098bdb04387dc021", "html_url": "https://github.com/rust-lang/rust/commit/71f058499a0e551d2b8deb5d098bdb04387dc021"}], "stats": {"total": 71, "additions": 51, "deletions": 20}, "files": [{"sha": "e2cf9f34cbd1c160fcef0a759d458a8fd919981c", "filename": "Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebc4df3c7add208195e84940f69648be793b328f/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/ebc4df3c7add208195e84940f69648be793b328f/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=ebc4df3c7add208195e84940f69648be793b328f", "patch": "@@ -653,7 +653,6 @@ TEST_XFAILS_STAGE0 := $(FLOAT_XFAILS) \\\n                         clone-with-exterior.rs \\\n                         comm.rs \\\n                         constrained-type.rs \\\n-                        decl-with-recv.rs \\\n                         destructor-ordering.rs \\\n                         iter-ret.rs \\\n                         lazychan.rs \\"}, {"sha": "a903124d5f2143823692188cb4a623605eaab8df", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ebc4df3c7add208195e84940f69648be793b328f/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc4df3c7add208195e84940f69648be793b328f/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=ebc4df3c7add208195e84940f69648be793b328f", "patch": "@@ -1365,13 +1365,21 @@ impure fn parse_expr_inner(parser p) -> @ast.expr {\n }\n \n impure fn parse_initializer(parser p) -> option.t[ast.initializer] {\n-    if (p.peek() == token.EQ) {\n-        p.bump();\n-        ret some(rec(op = ast.init_assign,\n-                     expr = parse_expr(p)));\n+    alt (p.peek()) {\n+        case (token.EQ) {\n+            p.bump();\n+            ret some(rec(op = ast.init_assign,\n+                         expr = parse_expr(p)));\n+        }\n+        case (token.LARROW) {\n+            p.bump();\n+            ret some(rec(op = ast.init_recv,\n+                         expr = parse_expr(p)));\n+        }\n+        case (_) {\n+            ret none[ast.initializer];\n+        }\n     }\n-\n-    ret none[ast.initializer];\n }\n \n impure fn parse_pat(parser p) -> @ast.pat {"}, {"sha": "9525e58b324c00929acbf90dd43767b81fd96627", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ebc4df3c7add208195e84940f69648be793b328f/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc4df3c7add208195e84940f69648be793b328f/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=ebc4df3c7add208195e84940f69648be793b328f", "patch": "@@ -437,7 +437,7 @@ fn fold_decl[ENV](&ENV env, ast_fold[ENV] fld, @decl d) -> @decl {\n     alt (d.node) {\n         case (ast.decl_local(?local)) {\n             auto ty_ = none[@ast.ty];\n-            auto initopt = none[ast.initializer];\n+            auto init_ = none[ast.initializer];\n             alt (local.ty) {\n                 case (some[@ast.ty](?t)) {\n                     ty_ = some[@ast.ty](fold_ty(env, fld, t));\n@@ -446,13 +446,12 @@ fn fold_decl[ENV](&ENV env, ast_fold[ENV] fld, @decl d) -> @decl {\n             }\n             alt (local.init) {\n                 case (some[ast.initializer](?init)) {\n-                    auto init_ = rec(expr = fold_expr(env, fld, init.expr)\n-                                     with init);\n-                    initopt = some[ast.initializer](init_);\n+                    auto e =  fold_expr(env, fld, init.expr);\n+                    init_ = some[ast.initializer](rec(expr = e with init));\n                 }\n                 case (_) { /* fall through */  }\n             }\n-            let @ast.local local_ = @rec(ty=ty_, init=initopt with *local);\n+            let @ast.local local_ = @rec(ty=ty_, init=init_ with *local);\n             ret fld.fold_decl_local(env_, d.span, local_);\n         }\n "}, {"sha": "0acbb7e1461fc35cf60b8a99a219a99147934c44", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ebc4df3c7add208195e84940f69648be793b328f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc4df3c7add208195e84940f69648be793b328f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ebc4df3c7add208195e84940f69648be793b328f", "patch": "@@ -4839,22 +4839,31 @@ fn trans_recv(@block_ctxt cx, @ast.expr lhs, @ast.expr rhs,\n     auto data = trans_lval(bcx, lhs);\n     check (data.is_mem);\n     bcx = data.res.bcx;\n+    auto unit_ty = node_ann_type(bcx.fcx.ccx, ann);\n+\n+    // FIXME: calculate copy init-ness in typestate.\n+    ret recv_val(bcx, data.res.val, rhs, unit_ty, DROP_EXISTING);\n+ }\n+\n+fn recv_val(@block_ctxt cx, ValueRef lhs, @ast.expr rhs,\n+            @ty.t unit_ty, copy_action action) -> result {\n+\n+    auto bcx = cx;\n     auto prt = trans_expr(bcx, rhs);\n     bcx = prt.bcx;\n \n     auto sub = trans_upcall(bcx, \"upcall_recv\",\n-                            vec(vp2i(bcx, data.res.val),\n+                            vec(vp2i(bcx, lhs),\n                                 vp2i(bcx, prt.val)));\n     bcx = sub.bcx;\n \n-    auto unit_ty = node_ann_type(cx.fcx.ccx, ann);\n-    auto data_load = load_scalar_or_boxed(bcx, data.res.val, unit_ty);\n-    auto cp = copy_ty(bcx, DROP_EXISTING, data.res.val, data_load, unit_ty);\n+    auto data_load = load_scalar_or_boxed(bcx, lhs, unit_ty);\n+    auto cp = copy_ty(bcx, action, lhs, data_load, unit_ty);\n     bcx = cp.bcx;\n \n     // TODO: Any cleanup need to be done here?\n \n-    ret res(bcx, data.res.val);\n+    ret res(bcx, lhs);\n }\n \n fn init_local(@block_ctxt cx, @ast.local local) -> result {\n@@ -4870,8 +4879,15 @@ fn init_local(@block_ctxt cx, @ast.local local) -> result {\n \n     alt (local.init) {\n         case (some[ast.initializer](?init)) {\n-            auto sub = trans_expr(bcx, init.expr);\n-            bcx = copy_ty(sub.bcx, INIT, llptr, sub.val, ty).bcx;\n+            alt (init.op) {\n+                case (ast.init_assign) {\n+                    auto sub = trans_expr(bcx, init.expr);\n+                    bcx = copy_ty(sub.bcx, INIT, llptr, sub.val, ty).bcx;\n+                }\n+                case (ast.init_recv) {\n+                    bcx = recv_val(bcx, llptr, init.expr, ty, INIT).bcx;\n+                }\n+            }\n         }\n         case (_) {\n             if (middle.ty.type_has_dynamic_size(ty)) {"}, {"sha": "1130920222e164a6152ff193a42adc0f85a0cb6e", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ebc4df3c7add208195e84940f69648be793b328f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc4df3c7add208195e84940f69648be793b328f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=ebc4df3c7add208195e84940f69648be793b328f", "patch": "@@ -2409,7 +2409,16 @@ fn check_decl_local(&@fn_ctxt fcx, &@ast.decl decl) -> @ast.decl {\n                 case (some[ast.initializer](?init)) {\n                     auto expr_0 = check_expr(fcx, init.expr);\n                     auto lty = plain_ty(ty.ty_local(local.id));\n-                    auto expr_1 = demand_expr(fcx, lty, expr_0);\n+                    auto expr_1;\n+                    alt (init.op) {\n+                        case (ast.init_assign) {\n+                            expr_1 = demand_expr(fcx, lty, expr_0);\n+                        }\n+                        case (ast.init_recv) {\n+                            auto port_ty = plain_ty(ty.ty_port(lty));\n+                            expr_1 = demand_expr(fcx, port_ty, expr_0);\n+                        }\n+                    }\n                     auto init_0 = rec(expr = expr_1 with init);\n                     initopt = some[ast.initializer](init_0);\n                 }"}]}