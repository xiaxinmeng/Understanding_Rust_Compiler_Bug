{"sha": "a8e6a2cd9efa19787dbbb469c202dfb922e799c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZTZhMmNkOWVmYTE5Nzg3ZGJiYjQ2OWMyMDJkZmI5MjJlNzk5YzY=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-06-13T15:56:13Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-06-24T20:13:08Z"}, "message": "tidy: tests with --target need llvm components\n\nHerein we verify that all of the tests that specify a `--target`\ncompile-flag, are also annotated with the minimal set of required llvm\ncomponents necessary to run that test.", "tree": {"sha": "9b8430161ed004d12671bce8bcd13096a96c6328", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b8430161ed004d12671bce8bcd13096a96c6328"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8e6a2cd9efa19787dbbb469c202dfb922e799c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e6a2cd9efa19787dbbb469c202dfb922e799c6", "html_url": "https://github.com/rust-lang/rust/commit/a8e6a2cd9efa19787dbbb469c202dfb922e799c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8e6a2cd9efa19787dbbb469c202dfb922e799c6/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d95745e5fa39680d97a52d0e07ed7842b163bacc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d95745e5fa39680d97a52d0e07ed7842b163bacc", "html_url": "https://github.com/rust-lang/rust/commit/d95745e5fa39680d97a52d0e07ed7842b163bacc"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "a1c41eb99810e8c51b247b6b6dcb47f9604fb981", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6a2cd9efa19787dbbb469c202dfb922e799c6/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6a2cd9efa19787dbbb469c202dfb922e799c6/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=a8e6a2cd9efa19787dbbb469c202dfb922e799c6", "patch": "@@ -47,6 +47,7 @@ pub mod extdeps;\n pub mod features;\n pub mod pal;\n pub mod style;\n+pub mod target_specific_tests;\n pub mod ui_tests;\n pub mod unit_tests;\n pub mod unstable_book;"}, {"sha": "440c352ea5320de9319e91c01525929028e3b96f", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6a2cd9efa19787dbbb469c202dfb922e799c6/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6a2cd9efa19787dbbb469c202dfb922e799c6/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=a8e6a2cd9efa19787dbbb469c202dfb922e799c6", "patch": "@@ -55,6 +55,8 @@ fn main() {\n             }\n         }\n \n+        check!(target_specific_tests, &src_path);\n+\n         // Checks that are done on the cargo workspace.\n         check!(deps, &root_path, &cargo);\n         check!(extdeps, &root_path);"}, {"sha": "8e1749196d2ec5927675b98b072b4231b8e40ca5", "filename": "src/tools/tidy/src/target_specific_tests.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/a8e6a2cd9efa19787dbbb469c202dfb922e799c6/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8e6a2cd9efa19787dbbb469c202dfb922e799c6/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs?ref=a8e6a2cd9efa19787dbbb469c202dfb922e799c6", "patch": "@@ -0,0 +1,96 @@\n+//! Tidy check to ensure that all target specific tests (those that require a `--target` flag)\n+//! also require the pre-requisite LLVM components to run.\n+\n+use std::collections::BTreeMap;\n+use std::path::Path;\n+\n+const COMMENT: &str = \"//\";\n+const LLVM_COMPONENTS_HEADER: &str = \"needs-llvm-components:\";\n+const COMPILE_FLAGS_HEADER: &str = \"compile-flags:\";\n+\n+/// Iterate through compiletest headers in a test contents.\n+///\n+/// Adjusted from compiletest/src/header.rs.\n+fn iter_header<'a>(contents: &'a str, it: &mut dyn FnMut(Option<&'a str>, &'a str)) {\n+    for ln in contents.lines() {\n+        let ln = ln.trim();\n+        if ln.starts_with(COMMENT) && ln[COMMENT.len()..].trim_start().starts_with('[') {\n+            if let Some(close_brace) = ln.find(']') {\n+                let open_brace = ln.find('[').unwrap();\n+                let lncfg = &ln[open_brace + 1..close_brace];\n+                it(Some(lncfg), ln[(close_brace + 1)..].trim_start());\n+            } else {\n+                panic!(\"malformed condition directive: expected `//[foo]`, found `{}`\", ln)\n+            }\n+        } else if ln.starts_with(COMMENT) {\n+            it(None, ln[COMMENT.len()..].trim_start());\n+        }\n+    }\n+}\n+\n+#[derive(Default, Debug)]\n+struct RevisionInfo<'a> {\n+    target_arch: Option<&'a str>,\n+    llvm_components: Option<Vec<&'a str>>,\n+}\n+\n+pub fn check(path: &Path, bad: &mut bool) {\n+    let tests = path.join(\"test\");\n+    super::walk(\n+        &tests,\n+        &mut |path| path.extension().map(|p| p == \"rs\") == Some(false),\n+        &mut |entry, content| {\n+            let file = entry.path().display();\n+            let mut header_map = BTreeMap::new();\n+            iter_header(content, &mut |cfg, directive| {\n+                if let Some(value) = directive.strip_prefix(LLVM_COMPONENTS_HEADER) {\n+                    let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n+                    let comp_vec = info.llvm_components.get_or_insert(Vec::new());\n+                    for component in value.split(' ') {\n+                        let component = component.trim();\n+                        if !component.is_empty() {\n+                            comp_vec.push(component);\n+                        }\n+                    }\n+                } else if directive.starts_with(COMPILE_FLAGS_HEADER) {\n+                    let compile_flags = &directive[COMPILE_FLAGS_HEADER.len()..];\n+                    if let Some((_, v)) = compile_flags.split_once(\"--target\") {\n+                        if let Some((arch, _)) =\n+                            v.trim_start_matches(|c| c == ' ' || c == '=').split_once(\"-\")\n+                        {\n+                            let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n+                            info.target_arch.replace(arch);\n+                        } else {\n+                            eprintln!(\"{}: seems to have a malformed --target value\", file);\n+                            *bad = true;\n+                        }\n+                    }\n+                }\n+            });\n+            for (rev, RevisionInfo { target_arch, llvm_components }) in &header_map {\n+                let rev = rev.unwrap_or(\"[unspecified]\");\n+                match (target_arch, llvm_components) {\n+                    (None, None) => {}\n+                    (Some(_), None) => {\n+                        eprintln!(\n+                            \"{}: revision {} should specify `{}` as it has `--target` set\",\n+                            file, rev, LLVM_COMPONENTS_HEADER\n+                        );\n+                        *bad = true;\n+                    }\n+                    (None, Some(_)) => {\n+                        eprintln!(\n+                            \"{}: revision {} should not specify `{}` as it doesn't need `--target`\",\n+                            file, rev, LLVM_COMPONENTS_HEADER\n+                        );\n+                        *bad = true;\n+                    }\n+                    (Some(_), Some(_)) => {\n+                        // FIXME: check specified components against the target architectures we\n+                        // gathered.\n+                    }\n+                }\n+            }\n+        },\n+    );\n+}"}]}