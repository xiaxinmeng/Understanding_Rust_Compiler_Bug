{"sha": "2443eb46cf20d6663b055ad93b3984646696a894", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NDNlYjQ2Y2YyMGQ2NjYzYjA1NWFkOTNiMzk4NDY0NjY5NmE4OTQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-16T12:16:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-16T12:16:35Z"}, "message": "Rollup merge of #69122 - dtolnay:backtrace, r=cramertj\n\nBacktrace Debug tweaks\n\n- Change Debug representation of disabled and unsupported backtraces to use \\<placeholder\\> style, same as what we do for debug printing locked mutexes and mutably borrowed refcells;\n\n    ```diff\n    - Error { msg: \"...\", backtrace: disabled backtrace }\n    + Error { msg: \"...\", backtrace: <disabled> }\n    ```\n\n- Remove quotes around unresolved symbol names;\n\n    ```diff\n    - Backtrace [{ fn: \"<unknown>\" }]\n    + Backtrace [{ fn: <unknown> }]\n    ```\n\n- Add quotes around file paths;\n\n    ```diff\n    - Backtrace [{ fn: \"krate::main\", file: /path/to/main.rs, line: 10 }]\n    + Backtrace [{ fn: \"krate::main\", file: \"/path/to/main.rs\", line: 10 }]\n    ```\n\n- Add test.", "tree": {"sha": "ef553ada9fdd92603a2da03c5e76000d5e66cad2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef553ada9fdd92603a2da03c5e76000d5e66cad2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2443eb46cf20d6663b055ad93b3984646696a894", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeb24kCRBK7hj4Ov3rIwAAdHIIAKpy1sKrGERXgaQvRQ5ap3xj\nQWGCBeNtQtumP1e1Gh8yX6C9g934gtrDzJBiWwInjW8wtrahNpUwFQvAd1kSHWDE\n2lbGx2VBYSOgGm+lY1dBtCXwh2mP2jfm1E//o5whGcsz2GNE5XiJeTex1KhCWbu1\npYtRrDkLfax2ZfxW32bzBWjBAb6KVQ7fPu3oWypD85rLH94K59Ai8rsynXp6WHf7\nHDk7/tb7gNIxRLxpWePIYsWGeALyEZxvY1zF4TLOLWxT/usAEJQ7xSYhFJNifX8T\n2L62RrBDxnqhoEOby8Ru5pEgIUIkVw7mF8Daz675zlVOI7OxvSQ1/JPLSMxup20=\n=gBon\n-----END PGP SIGNATURE-----\n", "payload": "tree ef553ada9fdd92603a2da03c5e76000d5e66cad2\nparent 59b0058c0cb875e539052a91ff9ccf355f0427a8\nparent a2364dc85fb505487c272988b8c5073a3f6fef2a\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584360995 +0100\ncommitter GitHub <noreply@github.com> 1584360995 +0100\n\nRollup merge of #69122 - dtolnay:backtrace, r=cramertj\n\nBacktrace Debug tweaks\n\n- Change Debug representation of disabled and unsupported backtraces to use \\<placeholder\\> style, same as what we do for debug printing locked mutexes and mutably borrowed refcells;\n\n    ```diff\n    - Error { msg: \"...\", backtrace: disabled backtrace }\n    + Error { msg: \"...\", backtrace: <disabled> }\n    ```\n\n- Remove quotes around unresolved symbol names;\n\n    ```diff\n    - Backtrace [{ fn: \"<unknown>\" }]\n    + Backtrace [{ fn: <unknown> }]\n    ```\n\n- Add quotes around file paths;\n\n    ```diff\n    - Backtrace [{ fn: \"krate::main\", file: /path/to/main.rs, line: 10 }]\n    + Backtrace [{ fn: \"krate::main\", file: \"/path/to/main.rs\", line: 10 }]\n    ```\n\n- Add test.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2443eb46cf20d6663b055ad93b3984646696a894", "html_url": "https://github.com/rust-lang/rust/commit/2443eb46cf20d6663b055ad93b3984646696a894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2443eb46cf20d6663b055ad93b3984646696a894/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59b0058c0cb875e539052a91ff9ccf355f0427a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/59b0058c0cb875e539052a91ff9ccf355f0427a8", "html_url": "https://github.com/rust-lang/rust/commit/59b0058c0cb875e539052a91ff9ccf355f0427a8"}, {"sha": "a2364dc85fb505487c272988b8c5073a3f6fef2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2364dc85fb505487c272988b8c5073a3f6fef2a", "html_url": "https://github.com/rust-lang/rust/commit/a2364dc85fb505487c272988b8c5073a3f6fef2a"}], "stats": {"total": 91, "additions": 84, "deletions": 7}, "files": [{"sha": "34317c7a2ee3d9ab2cb10f0d06409749604dfea5", "filename": "src/libstd/backtrace.rs", "status": "modified", "additions": 84, "deletions": 7, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/2443eb46cf20d6663b055ad93b3984646696a894/src%2Flibstd%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2443eb46cf20d6663b055ad93b3984646696a894/src%2Flibstd%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbacktrace.rs?ref=2443eb46cf20d6663b055ad93b3984646696a894", "patch": "@@ -92,6 +92,7 @@\n // a backtrace or actually symbolizing it.\n \n use crate::env;\n+use crate::ffi::c_void;\n use crate::fmt;\n use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n use crate::sync::Mutex;\n@@ -144,10 +145,16 @@ fn _assert_send_sync() {\n }\n \n struct BacktraceFrame {\n-    frame: backtrace::Frame,\n+    frame: RawFrame,\n     symbols: Vec<BacktraceSymbol>,\n }\n \n+enum RawFrame {\n+    Actual(backtrace::Frame),\n+    #[cfg(test)]\n+    Fake,\n+}\n+\n struct BacktraceSymbol {\n     name: Option<Vec<u8>>,\n     filename: Option<BytesOrWide>,\n@@ -162,8 +169,8 @@ enum BytesOrWide {\n impl fmt::Debug for Backtrace {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut capture = match &self.inner {\n-            Inner::Unsupported => return fmt.write_str(\"unsupported backtrace\"),\n-            Inner::Disabled => return fmt.write_str(\"disabled backtrace\"),\n+            Inner::Unsupported => return fmt.write_str(\"<unsupported>\"),\n+            Inner::Disabled => return fmt.write_str(\"<disabled>\"),\n             Inner::Captured(c) => c.lock().unwrap(),\n         };\n         capture.resolve();\n@@ -193,11 +200,11 @@ impl fmt::Debug for BacktraceSymbol {\n         if let Some(fn_name) = self.name.as_ref().map(|b| backtrace::SymbolName::new(b)) {\n             write!(fmt, \"fn: \\\"{:#}\\\"\", fn_name)?;\n         } else {\n-            write!(fmt, \"fn: \\\"<unknown>\\\"\")?;\n+            write!(fmt, \"fn: <unknown>\")?;\n         }\n \n         if let Some(fname) = self.filename.as_ref() {\n-            write!(fmt, \", file: {:?}\", fname)?;\n+            write!(fmt, \", file: \\\"{:?}\\\"\", fname)?;\n         }\n \n         if let Some(line) = self.lineno.as_ref() {\n@@ -293,7 +300,10 @@ impl Backtrace {\n         let mut actual_start = None;\n         unsafe {\n             backtrace::trace_unsynchronized(|frame| {\n-                frames.push(BacktraceFrame { frame: frame.clone(), symbols: Vec::new() });\n+                frames.push(BacktraceFrame {\n+                    frame: RawFrame::Actual(frame.clone()),\n+                    symbols: Vec::new(),\n+                });\n                 if frame.symbol_address() as usize == ip && actual_start.is_none() {\n                     actual_start = Some(frames.len());\n                 }\n@@ -393,8 +403,13 @@ impl Capture {\n         let _lock = lock();\n         for frame in self.frames.iter_mut() {\n             let symbols = &mut frame.symbols;\n+            let frame = match &frame.frame {\n+                RawFrame::Actual(frame) => frame,\n+                #[cfg(test)]\n+                RawFrame::Fake => unimplemented!(),\n+            };\n             unsafe {\n-                backtrace::resolve_frame_unsynchronized(&frame.frame, |symbol| {\n+                backtrace::resolve_frame_unsynchronized(frame, |symbol| {\n                     symbols.push(BacktraceSymbol {\n                         name: symbol.name().map(|m| m.as_bytes().to_vec()),\n                         filename: symbol.filename_raw().map(|b| match b {\n@@ -408,3 +423,65 @@ impl Capture {\n         }\n     }\n }\n+\n+impl RawFrame {\n+    fn ip(&self) -> *mut c_void {\n+        match self {\n+            RawFrame::Actual(frame) => frame.ip(),\n+            #[cfg(test)]\n+            RawFrame::Fake => 1 as *mut c_void,\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_debug() {\n+    let backtrace = Backtrace {\n+        inner: Inner::Captured(Mutex::new(Capture {\n+            actual_start: 1,\n+            resolved: true,\n+            frames: vec![\n+                BacktraceFrame {\n+                    frame: RawFrame::Fake,\n+                    symbols: vec![BacktraceSymbol {\n+                        name: Some(b\"std::backtrace::Backtrace::create\".to_vec()),\n+                        filename: Some(BytesOrWide::Bytes(b\"rust/backtrace.rs\".to_vec())),\n+                        lineno: Some(100),\n+                    }],\n+                },\n+                BacktraceFrame {\n+                    frame: RawFrame::Fake,\n+                    symbols: vec![BacktraceSymbol {\n+                        name: Some(b\"__rust_maybe_catch_panic\".to_vec()),\n+                        filename: None,\n+                        lineno: None,\n+                    }],\n+                },\n+                BacktraceFrame {\n+                    frame: RawFrame::Fake,\n+                    symbols: vec![\n+                        BacktraceSymbol {\n+                            name: Some(b\"std::rt::lang_start_internal\".to_vec()),\n+                            filename: Some(BytesOrWide::Bytes(b\"rust/rt.rs\".to_vec())),\n+                            lineno: Some(300),\n+                        },\n+                        BacktraceSymbol {\n+                            name: Some(b\"std::rt::lang_start\".to_vec()),\n+                            filename: Some(BytesOrWide::Bytes(b\"rust/rt.rs\".to_vec())),\n+                            lineno: Some(400),\n+                        },\n+                    ],\n+                },\n+            ],\n+        })),\n+    };\n+\n+    #[rustfmt::skip]\n+    let expected = \"Backtrace [\\\n+    \\n    { fn: \\\"__rust_maybe_catch_panic\\\" },\\\n+    \\n    { fn: \\\"std::rt::lang_start_internal\\\", file: \\\"rust/rt.rs\\\", line: 300 },\\\n+    \\n    { fn: \\\"std::rt::lang_start\\\", file: \\\"rust/rt.rs\\\", line: 400 },\\\n+    \\n]\";\n+\n+    assert_eq!(format!(\"{:#?}\", backtrace), expected);\n+}"}]}