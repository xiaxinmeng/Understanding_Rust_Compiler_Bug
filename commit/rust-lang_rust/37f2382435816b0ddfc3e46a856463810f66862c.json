{"sha": "37f2382435816b0ddfc3e46a856463810f66862c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ZjIzODI0MzU4MTZiMGRkZmMzZTQ2YTg1NjQ2MzgxMGY2Njg2MmM=", "commit": {"author": {"name": "Josh Leeb-du Toit", "email": "josh.leebdutoit@gmail.com", "date": "2017-10-29T22:58:09Z"}, "committer": {"name": "Josh Leeb-du Toit", "email": "josh.leebdutoit@gmail.com", "date": "2017-10-29T22:58:09Z"}, "message": "Refactor if block to use idiomatic matches", "tree": {"sha": "50cd1699cd17837cb4b094ed17c98bac00475cc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50cd1699cd17837cb4b094ed17c98bac00475cc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37f2382435816b0ddfc3e46a856463810f66862c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37f2382435816b0ddfc3e46a856463810f66862c", "html_url": "https://github.com/rust-lang/rust/commit/37f2382435816b0ddfc3e46a856463810f66862c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37f2382435816b0ddfc3e46a856463810f66862c/comments", "author": null, "committer": null, "parents": [{"sha": "014e61094a6547cf1aee521c41e86eba22c8ac8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/014e61094a6547cf1aee521c41e86eba22c8ac8f", "html_url": "https://github.com/rust-lang/rust/commit/014e61094a6547cf1aee521c41e86eba22c8ac8f"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "c1d0d849dfb46c33ada376324ebc7b25c1de9e46", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37f2382435816b0ddfc3e46a856463810f66862c/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37f2382435816b0ddfc3e46a856463810f66862c/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=37f2382435816b0ddfc3e46a856463810f66862c", "patch": "@@ -395,22 +395,18 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         assert!(self.bccx.region_scope_tree.scopes_intersect(old_loan.kill_scope,\n                                                        new_loan.kill_scope));\n \n-        let err_old_new = Result::err(self.report_error_if_loan_conflicts_with_restriction(\n-            old_loan, new_loan, old_loan, new_loan\n-        ));\n-        let err_new_old = Result::err(self.report_error_if_loan_conflicts_with_restriction(\n-            new_loan, old_loan, old_loan, new_loan\n-        ));\n-\n-        if let Some(mut err_old) = err_old_new {\n-            err_old.emit();\n-            if let Some(mut err_new) = err_new_old {\n+        let err_old_new = self.report_error_if_loan_conflicts_with_restriction(\n+            old_loan, new_loan, old_loan, new_loan).err();\n+        let err_new_old = self.report_error_if_loan_conflicts_with_restriction(\n+            new_loan, old_loan, old_loan, new_loan).err();\n+\n+        match (err_old_new, err_new_old) {\n+            (Some(mut err), None) | (None, Some(mut err)) => err.emit(),\n+            (Some(mut err_old), Some(mut err_new)) => {\n+                err_old.emit();\n                 err_new.cancel();\n             }\n-        } else if let Some(mut err_new) = err_new_old {\n-            err_new.emit();\n-        } else {\n-            return true;\n+            (None, None) => return true,\n         }\n \n         false"}]}