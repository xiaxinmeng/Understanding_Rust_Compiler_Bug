{"sha": "c5041f88ea6bb48379db3539e339e175534e4352", "node_id": "C_kwDOAAsO6NoAKGM1MDQxZjg4ZWE2YmI0ODM3OWRiMzUzOWUzMzllMTc1NTM0ZTQzNTI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-16T15:58:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-16T15:58:15Z"}, "message": "Rollup merge of #92646 - mdibaiee:76935/pass-by-value, r=lcnr\n\nfeat: rustc_pass_by_value lint attribute\n\nUseful for thin wrapper attributes that are best passed as value instead\nof reference.\n\nFixes #76935", "tree": {"sha": "e54d70956ce0e9041c7be74e3368ddfaad818104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e54d70956ce0e9041c7be74e3368ddfaad818104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5041f88ea6bb48379db3539e339e175534e4352", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5ECYCRBK7hj4Ov3rIwAAndMIAA0K6k0ALS8lGE20syr0WY5I\nFFL1TmljzB1fciz+1n4CkPNro09auZ10yYFE2J14jxGgACDgkipWZeuu6KzyAeJK\ntc8SKocJbij1p8jiFwbcMimgkIYGzum52JEPccsf7M5a6vXrmq2wKqhy24GawuBq\nZYQBPReWFTEMdMYugoI8lvOmJ06NkLsbH63XKuaOigEiwBsn0nr/i+aH3ZD35S0/\nMVNU9BbIKWOvglPrmViXnRsCwco33ib+BiBoL5xhkairXYjPLX/dRAK5Kl3JvcVd\njpmbGykgHlECB4sw4PXNkpZA83tbDISX/s28XgjFsmuPAXjvNB0KODD2m29Iyi4=\n=Cwh6\n-----END PGP SIGNATURE-----\n", "payload": "tree e54d70956ce0e9041c7be74e3368ddfaad818104\nparent e1b943991f33702ee4cf2e7c6dfcc29c60ab89da\nparent 2728af7bc02ab48bf4dd861cb69b5b786ecb261d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642348695 +0100\ncommitter GitHub <noreply@github.com> 1642348695 +0100\n\nRollup merge of #92646 - mdibaiee:76935/pass-by-value, r=lcnr\n\nfeat: rustc_pass_by_value lint attribute\n\nUseful for thin wrapper attributes that are best passed as value instead\nof reference.\n\nFixes #76935\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5041f88ea6bb48379db3539e339e175534e4352", "html_url": "https://github.com/rust-lang/rust/commit/c5041f88ea6bb48379db3539e339e175534e4352", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5041f88ea6bb48379db3539e339e175534e4352/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1b943991f33702ee4cf2e7c6dfcc29c60ab89da", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1b943991f33702ee4cf2e7c6dfcc29c60ab89da", "html_url": "https://github.com/rust-lang/rust/commit/e1b943991f33702ee4cf2e7c6dfcc29c60ab89da"}, {"sha": "2728af7bc02ab48bf4dd861cb69b5b786ecb261d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2728af7bc02ab48bf4dd861cb69b5b786ecb261d", "html_url": "https://github.com/rust-lang/rust/commit/2728af7bc02ab48bf4dd861cb69b5b786ecb261d"}], "stats": {"total": 510, "additions": 372, "deletions": 138}, "files": [{"sha": "46817bc9c3f08ebba8105127544f250a0ed36b75", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=c5041f88ea6bb48379db3539e339e175534e4352", "patch": "@@ -623,6 +623,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         lang, Normal, template!(NameValueStr: \"name\"), DuplicatesOk, lang_items,\n         \"language items are subject to change\",\n     ),\n+    rustc_attr!(\n+        rustc_pass_by_value, Normal,\n+        template!(Word), WarnFollowing,\n+        \"#[rustc_pass_by_value] is used to mark types that must be passed by value instead of reference.\"\n+    ),\n     BuiltinAttribute {\n         name: sym::rustc_diagnostic_item,\n         type_: Normal,"}, {"sha": "7353cd6b876b9642bbae981bd9b7d610c9f35015", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=c5041f88ea6bb48379db3539e339e175534e4352", "patch": "@@ -5,10 +5,7 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n-use rustc_hir::{\n-    GenericArg, HirId, Item, ItemKind, MutTy, Mutability, Node, Path, PathSegment, QPath, Ty,\n-    TyKind,\n-};\n+use rustc_hir::{GenericArg, HirId, Item, ItemKind, Node, Path, PathSegment, QPath, Ty, TyKind};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -58,13 +55,6 @@ declare_tool_lint! {\n     report_in_external_macro: true\n }\n \n-declare_tool_lint! {\n-    pub rustc::TY_PASS_BY_REFERENCE,\n-    Allow,\n-    \"passing `Ty` or `TyCtxt` by reference\",\n-    report_in_external_macro: true\n-}\n-\n declare_tool_lint! {\n     pub rustc::USAGE_OF_QUALIFIED_TY,\n     Allow,\n@@ -74,7 +64,6 @@ declare_tool_lint! {\n \n declare_lint_pass!(TyTyKind => [\n     USAGE_OF_TY_TYKIND,\n-    TY_PASS_BY_REFERENCE,\n     USAGE_OF_QUALIFIED_TY,\n ]);\n \n@@ -131,26 +120,6 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                     }\n                 }\n             }\n-            TyKind::Rptr(_, MutTy { ty: inner_ty, mutbl: Mutability::Not }) => {\n-                if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner.to_def_id()) {\n-                    if cx.tcx.impl_trait_ref(impl_did).is_some() {\n-                        return;\n-                    }\n-                }\n-                if let Some(t) = is_ty_or_ty_ctxt(cx, &inner_ty) {\n-                    cx.struct_span_lint(TY_PASS_BY_REFERENCE, ty.span, |lint| {\n-                        lint.build(&format!(\"passing `{}` by reference\", t))\n-                            .span_suggestion(\n-                                ty.span,\n-                                \"try passing by value\",\n-                                t,\n-                                // Changing type of function argument\n-                                Applicability::MaybeIncorrect,\n-                            )\n-                            .emit();\n-                    })\n-                }\n-            }\n             _ => {}\n         }\n     }"}, {"sha": "4aa8505c9408dda782d97e677578a9bac5feec44", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=c5041f88ea6bb48379db3539e339e175534e4352", "patch": "@@ -56,6 +56,7 @@ mod non_ascii_idents;\n mod non_fmt_panic;\n mod nonstandard_style;\n mod noop_method_call;\n+mod pass_by_value;\n mod passes;\n mod redundant_semicolon;\n mod traits;\n@@ -85,6 +86,7 @@ use non_ascii_idents::*;\n use non_fmt_panic::NonPanicFmt;\n use nonstandard_style::*;\n use noop_method_call::*;\n+use pass_by_value::*;\n use redundant_semicolon::*;\n use traits::*;\n use types::*;\n@@ -490,15 +492,17 @@ fn register_internals(store: &mut LintStore) {\n     store.register_late_pass(|| Box::new(ExistingDocKeyword));\n     store.register_lints(&TyTyKind::get_lints());\n     store.register_late_pass(|| Box::new(TyTyKind));\n+    store.register_lints(&PassByValue::get_lints());\n+    store.register_late_pass(|| Box::new(PassByValue));\n     store.register_group(\n         false,\n         \"rustc::internal\",\n         None,\n         vec![\n             LintId::of(DEFAULT_HASH_TYPES),\n             LintId::of(USAGE_OF_TY_TYKIND),\n+            LintId::of(PASS_BY_VALUE),\n             LintId::of(LINT_PASS_IMPL_WITHOUT_MACRO),\n-            LintId::of(TY_PASS_BY_REFERENCE),\n             LintId::of(USAGE_OF_QUALIFIED_TY),\n             LintId::of(EXISTING_DOC_KEYWORD),\n         ],"}, {"sha": "26d0560bf89bbb692c495f01cdd807e63ea0bb98", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=c5041f88ea6bb48379db3539e339e175534e4352", "patch": "@@ -0,0 +1,94 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_hir::def::Res;\n+use rustc_hir::{GenericArg, PathSegment, QPath, TyKind};\n+use rustc_middle::ty;\n+use rustc_span::symbol::sym;\n+\n+declare_tool_lint! {\n+    /// The `rustc_pass_by_value` lint marks a type with `#[rustc_pass_by_value]` requiring it to always be passed by value.\n+    /// This is usually used for types that are thin wrappers around references, so there is no benefit to an extra\n+    /// layer of indirection. (Example: `Ty` which is a reference to a `TyS`)\n+    pub rustc::PASS_BY_VALUE,\n+    Warn,\n+    \"pass by reference of a type flagged as `#[rustc_pass_by_value]`\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(PassByValue => [PASS_BY_VALUE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for PassByValue {\n+    fn check_ty(&mut self, cx: &LateContext<'_>, ty: &'tcx hir::Ty<'tcx>) {\n+        match &ty.kind {\n+            TyKind::Rptr(_, hir::MutTy { ty: inner_ty, mutbl: hir::Mutability::Not }) => {\n+                if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner.to_def_id()) {\n+                    if cx.tcx.impl_trait_ref(impl_did).is_some() {\n+                        return;\n+                    }\n+                }\n+                if let Some(t) = path_for_pass_by_value(cx, &inner_ty) {\n+                    cx.struct_span_lint(PASS_BY_VALUE, ty.span, |lint| {\n+                        lint.build(&format!(\"passing `{}` by reference\", t))\n+                            .span_suggestion(\n+                                ty.span,\n+                                \"try passing by value\",\n+                                t,\n+                                // Changing type of function argument\n+                                Applicability::MaybeIncorrect,\n+                            )\n+                            .emit();\n+                    })\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+}\n+\n+fn path_for_pass_by_value(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> Option<String> {\n+    if let TyKind::Path(QPath::Resolved(_, path)) = &ty.kind {\n+        match path.res {\n+            Res::Def(_, def_id) if cx.tcx.has_attr(def_id, sym::rustc_pass_by_value) => {\n+                let name = cx.tcx.item_name(def_id).to_ident_string();\n+                let path_segment = path.segments.last().unwrap();\n+                return Some(format!(\"{}{}\", name, gen_args(cx, path_segment)));\n+            }\n+            Res::SelfTy(None, Some((did, _))) => {\n+                if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n+                    if cx.tcx.has_attr(adt.did, sym::rustc_pass_by_value) {\n+                        return Some(cx.tcx.def_path_str_with_substs(adt.did, substs));\n+                    }\n+                }\n+            }\n+            _ => (),\n+        }\n+    }\n+\n+    None\n+}\n+\n+fn gen_args(cx: &LateContext<'_>, segment: &PathSegment<'_>) -> String {\n+    if let Some(args) = &segment.args {\n+        let params = args\n+            .args\n+            .iter()\n+            .map(|arg| match arg {\n+                GenericArg::Lifetime(lt) => lt.name.ident().to_string(),\n+                GenericArg::Type(ty) => {\n+                    cx.tcx.sess.source_map().span_to_snippet(ty.span).unwrap_or_default()\n+                }\n+                GenericArg::Const(c) => {\n+                    cx.tcx.sess.source_map().span_to_snippet(c.span).unwrap_or_default()\n+                }\n+                GenericArg::Infer(_) => String::from(\"_\"),\n+            })\n+            .collect::<Vec<_>>();\n+\n+        if !params.is_empty() {\n+            return format!(\"<{}>\", params.join(\", \"));\n+        }\n+    }\n+\n+    String::new()\n+}"}, {"sha": "e7b99995ca4aecca6a3587915600fb0ee06e7a5f", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c5041f88ea6bb48379db3539e339e175534e4352", "patch": "@@ -961,6 +961,7 @@ pub struct FreeRegionInfo {\n /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/ty.html\n #[derive(Copy, Clone)]\n #[rustc_diagnostic_item = \"TyCtxt\"]\n+#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n pub struct TyCtxt<'tcx> {\n     gcx: &'tcx GlobalCtxt<'tcx>,\n }"}, {"sha": "d6e89e52b95ed45f37f7eb84ebad6ff90a96bba2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c5041f88ea6bb48379db3539e339e175534e4352", "patch": "@@ -464,6 +464,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TyS<'tcx> {\n }\n \n #[rustc_diagnostic_item = \"Ty\"]\n+#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n impl ty::EarlyBoundRegion {"}, {"sha": "41d4d5115a47cc1528b8b1df96cd6522dd583555", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=c5041f88ea6bb48379db3539e339e175534e4352", "patch": "@@ -114,6 +114,7 @@ impl CheckAttrVisitor<'_> {\n                 }\n                 sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n                 sym::must_use => self.check_must_use(hir_id, &attr, span, target),\n+                sym::rustc_pass_by_value => self.check_pass_by_value(&attr, span, target),\n                 sym::rustc_const_unstable\n                 | sym::rustc_const_stable\n                 | sym::unstable\n@@ -1066,6 +1067,24 @@ impl CheckAttrVisitor<'_> {\n         is_valid\n     }\n \n+    /// Warns against some misuses of `#[pass_by_value]`\n+    fn check_pass_by_value(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        match target {\n+            Target::Struct | Target::Enum | Target::TyAlias => true,\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"`pass_by_value` attribute should be applied to a struct, enum or type alias.\",\n+                    )\n+                    .span_label(*span, \"is not a struct, enum or type alias\")\n+                    .emit();\n+                false\n+            }\n+        }\n+    }\n+\n     /// Warns against some misuses of `#[must_use]`\n     fn check_must_use(\n         &self,"}, {"sha": "14ac286476ca9205376f79829c441b618208ecc7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5041f88ea6bb48379db3539e339e175534e4352/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=c5041f88ea6bb48379db3539e339e175534e4352", "patch": "@@ -1170,6 +1170,7 @@ symbols! {\n         rustc_paren_sugar,\n         rustc_partition_codegened,\n         rustc_partition_reused,\n+        rustc_pass_by_value,\n         rustc_peek,\n         rustc_peek_definite_init,\n         rustc_peek_liveness,"}, {"sha": "2751a37f7419d788fc8f1591e6a500a49615c1ee", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref.stderr", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e1b943991f33702ee4cf2e7c6dfcc29c60ab89da/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b943991f33702ee4cf2e7c6dfcc29c60ab89da/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr?ref=e1b943991f33702ee4cf2e7c6dfcc29c60ab89da", "patch": "@@ -1,80 +0,0 @@\n-error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:13:13\n-   |\n-LL |     ty_ref: &Ty<'_>,\n-   |             ^^^^^^^ help: try passing by value: `Ty<'_>`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/pass_ty_by_ref.rs:4:9\n-   |\n-LL | #![deny(rustc::ty_pass_by_reference)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:15:18\n-   |\n-LL |     ty_ctxt_ref: &TyCtxt<'_>,\n-   |                  ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n-\n-error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:19:28\n-   |\n-LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n-   |                            ^^^^^^^ help: try passing by value: `Ty<'_>`\n-\n-error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:19:55\n-   |\n-LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n-   |                                                       ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n-\n-error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:26:17\n-   |\n-LL |         ty_ref: &Ty<'_>,\n-   |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n-\n-error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:28:22\n-   |\n-LL |         ty_ctxt_ref: &TyCtxt<'_>,\n-   |                      ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n-\n-error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:31:41\n-   |\n-LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>);\n-   |                                         ^^^^^^^ help: try passing by value: `Ty<'_>`\n-\n-error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:31:68\n-   |\n-LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>);\n-   |                                                                    ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n-\n-error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:53:17\n-   |\n-LL |         ty_ref: &Ty<'_>,\n-   |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n-\n-error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:55:22\n-   |\n-LL |         ty_ctxt_ref: &TyCtxt<'_>,\n-   |                      ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n-\n-error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:59:38\n-   |\n-LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n-   |                                      ^^^^^^^ help: try passing by value: `Ty<'_>`\n-\n-error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:59:65\n-   |\n-LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n-   |                                                                 ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n-\n-error: aborting due to 12 previous errors\n-"}, {"sha": "15a06e721ddcb440692273b9badcf03035863513", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref_self.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e1b943991f33702ee4cf2e7c6dfcc29c60ab89da/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1b943991f33702ee4cf2e7c6dfcc29c60ab89da/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.stderr?ref=e1b943991f33702ee4cf2e7c6dfcc29c60ab89da", "patch": "@@ -1,20 +0,0 @@\n-error: passing `TyCtxt<'tcx>` by reference\n-  --> $DIR/pass_ty_by_ref_self.rs:18:15\n-   |\n-LL |     fn by_ref(&self) {}\n-   |               ^^^^^ help: try passing by value: `TyCtxt<'tcx>`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/pass_ty_by_ref_self.rs:8:9\n-   |\n-LL | #![deny(rustc::ty_pass_by_reference)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: passing `Ty<'tcx>` by reference\n-  --> $DIR/pass_ty_by_ref_self.rs:31:21\n-   |\n-LL |     fn by_ref(self: &Ty<'tcx>) {}\n-   |                     ^^^^^^^^^ help: try passing by value: `Ty<'tcx>`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "402c41f376602f8b07266cc732bf342aecf81468", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value.rs", "status": "renamed", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c5041f88ea6bb48379db3539e339e175534e4352/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5041f88ea6bb48379db3539e339e175534e4352/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs?ref=c5041f88ea6bb48379db3539e339e175534e4352", "patch": "@@ -1,7 +1,8 @@\n // compile-flags: -Z unstable-options\n \n+#![feature(rustc_attrs)]\n #![feature(rustc_private)]\n-#![deny(rustc::ty_pass_by_reference)]\n+#![deny(rustc::pass_by_value)]\n #![allow(unused)]\n \n extern crate rustc_middle;\n@@ -61,4 +62,57 @@ impl Foo {\n     //~^^ ERROR passing `TyCtxt<'_>` by reference\n }\n \n+#[rustc_pass_by_value]\n+enum CustomEnum {\n+    A,\n+    B,\n+}\n+\n+impl CustomEnum {\n+    fn test(\n+        value: CustomEnum,\n+        reference: &CustomEnum, //~ ERROR passing `CustomEnum` by reference\n+    ) {\n+    }\n+}\n+\n+#[rustc_pass_by_value]\n+struct CustomStruct {\n+    s: u8,\n+}\n+\n+#[rustc_pass_by_value]\n+type CustomAlias<'a> = &'a CustomStruct; //~ ERROR passing `CustomStruct` by reference\n+\n+impl CustomStruct {\n+    fn test(\n+        value: CustomStruct,\n+        reference: &CustomStruct, //~ ERROR passing `CustomStruct` by reference\n+    ) {\n+    }\n+\n+    fn test_alias(\n+        value: CustomAlias,\n+        reference: &CustomAlias, //~ ERROR passing `CustomAlias<>` by reference\n+    ) {\n+    }\n+}\n+\n+#[rustc_pass_by_value]\n+struct WithParameters<T, const N: usize, M = u32> {\n+    slice: [T; N],\n+    m: M,\n+}\n+\n+impl<T> WithParameters<T, 1> {\n+    fn test<'a>(\n+        value: WithParameters<T, 1>,\n+        reference: &'a WithParameters<T, 1>, //~ ERROR passing `WithParameters<T, 1>` by reference\n+        reference_with_m: &WithParameters<T, 1, u32>, //~ ERROR passing `WithParameters<T, 1, u32>` by reference\n+    ) -> &'a WithParameters<T, 1> {\n+        //~^ ERROR passing `WithParameters<T, 1>` by reference\n+        reference as &WithParameters<_, 1> //~ ERROR passing `WithParameters<_, 1>` by reference\n+    }\n+}\n+\n fn main() {}", "previous_filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref.rs"}, {"sha": "7f6e57b38f38d936c37b5a9541d4cf343a9f3393", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value.stderr", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/c5041f88ea6bb48379db3539e339e175534e4352/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5041f88ea6bb48379db3539e339e175534e4352/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr?ref=c5041f88ea6bb48379db3539e339e175534e4352", "patch": "@@ -0,0 +1,128 @@\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:14:13\n+   |\n+LL |     ty_ref: &Ty<'_>,\n+   |             ^^^^^^^ help: try passing by value: `Ty<'_>`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rustc_pass_by_value.rs:5:9\n+   |\n+LL | #![deny(rustc::pass_by_value)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: passing `TyCtxt<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:16:18\n+   |\n+LL |     ty_ctxt_ref: &TyCtxt<'_>,\n+   |                  ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:20:28\n+   |\n+LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n+   |                            ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:20:55\n+   |\n+LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n+   |                                                       ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:27:17\n+   |\n+LL |         ty_ref: &Ty<'_>,\n+   |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:29:22\n+   |\n+LL |         ty_ctxt_ref: &TyCtxt<'_>,\n+   |                      ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:32:41\n+   |\n+LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>);\n+   |                                         ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:32:68\n+   |\n+LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>);\n+   |                                                                    ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:54:17\n+   |\n+LL |         ty_ref: &Ty<'_>,\n+   |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:56:22\n+   |\n+LL |         ty_ctxt_ref: &TyCtxt<'_>,\n+   |                      ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:60:38\n+   |\n+LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n+   |                                      ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:60:65\n+   |\n+LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n+   |                                                                 ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n+\n+error: passing `CustomEnum` by reference\n+  --> $DIR/rustc_pass_by_value.rs:74:20\n+   |\n+LL |         reference: &CustomEnum,\n+   |                    ^^^^^^^^^^^ help: try passing by value: `CustomEnum`\n+\n+error: passing `CustomStruct` by reference\n+  --> $DIR/rustc_pass_by_value.rs:85:24\n+   |\n+LL | type CustomAlias<'a> = &'a CustomStruct;\n+   |                        ^^^^^^^^^^^^^^^^ help: try passing by value: `CustomStruct`\n+\n+error: passing `CustomStruct` by reference\n+  --> $DIR/rustc_pass_by_value.rs:90:20\n+   |\n+LL |         reference: &CustomStruct,\n+   |                    ^^^^^^^^^^^^^ help: try passing by value: `CustomStruct`\n+\n+error: passing `CustomAlias<>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:96:20\n+   |\n+LL |         reference: &CustomAlias,\n+   |                    ^^^^^^^^^^^^ help: try passing by value: `CustomAlias<>`\n+\n+error: passing `WithParameters<T, 1>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:110:20\n+   |\n+LL |         reference: &'a WithParameters<T, 1>,\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ help: try passing by value: `WithParameters<T, 1>`\n+\n+error: passing `WithParameters<T, 1, u32>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:111:27\n+   |\n+LL |         reference_with_m: &WithParameters<T, 1, u32>,\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try passing by value: `WithParameters<T, 1, u32>`\n+\n+error: passing `WithParameters<T, 1>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:112:10\n+   |\n+LL |     ) -> &'a WithParameters<T, 1> {\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try passing by value: `WithParameters<T, 1>`\n+\n+error: passing `WithParameters<_, 1>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:114:22\n+   |\n+LL |         reference as &WithParameters<_, 1>\n+   |                      ^^^^^^^^^^^^^^^^^^^^^ help: try passing by value: `WithParameters<_, 1>`\n+\n+error: aborting due to 20 previous errors\n+"}, {"sha": "2868517774d46bc2c9b72dfe1d92cd0e0bac7cb1", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value_self.rs", "status": "renamed", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c5041f88ea6bb48379db3539e339e175534e4352/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5041f88ea6bb48379db3539e339e175534e4352/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.rs?ref=c5041f88ea6bb48379db3539e339e175534e4352", "patch": "@@ -5,10 +5,10 @@\n // Considering that all other `internal-lints` are tested here\n // this seems like the cleaner solution though.\n #![feature(rustc_attrs)]\n-#![deny(rustc::ty_pass_by_reference)]\n+#![deny(rustc::pass_by_value)]\n #![allow(unused)]\n \n-#[rustc_diagnostic_item = \"TyCtxt\"]\n+#[rustc_pass_by_value]\n struct TyCtxt<'tcx> {\n     inner: &'tcx (),\n }\n@@ -18,17 +18,37 @@ impl<'tcx> TyCtxt<'tcx> {\n     fn by_ref(&self) {} //~ ERROR passing `TyCtxt<'tcx>` by reference\n }\n \n-\n struct TyS<'tcx> {\n     inner: &'tcx (),\n }\n \n-#[rustc_diagnostic_item = \"Ty\"]\n+#[rustc_pass_by_value]\n type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n impl<'tcx> TyS<'tcx> {\n     fn by_value(self: Ty<'tcx>) {}\n     fn by_ref(self: &Ty<'tcx>) {} //~ ERROR passing `Ty<'tcx>` by reference\n }\n \n+#[rustc_pass_by_value]\n+struct Foo;\n+\n+impl Foo {\n+    fn with_ref(&self) {} //~ ERROR passing `Foo` by reference\n+}\n+\n+#[rustc_pass_by_value]\n+struct WithParameters<T, const N: usize, M = u32> {\n+    slice: [T; N],\n+    m: M,\n+}\n+\n+impl<T> WithParameters<T, 1> {\n+    fn with_ref(&self) {} //~ ERROR passing `WithParameters<T, 1_usize>` by reference\n+}\n+\n+impl<T> WithParameters<T, 1, u8> {\n+    fn with_ref(&self) {} //~ ERROR passing `WithParameters<T, 1_usize, u8>` by reference\n+}\n+\n fn main() {}", "previous_filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref_self.rs"}, {"sha": "54a7cf7cab7570bf01f976f02e9df27ebfef6952", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value_self.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c5041f88ea6bb48379db3539e339e175534e4352/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5041f88ea6bb48379db3539e339e175534e4352/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.stderr?ref=c5041f88ea6bb48379db3539e339e175534e4352", "patch": "@@ -0,0 +1,38 @@\n+error: passing `TyCtxt<'tcx>` by reference\n+  --> $DIR/rustc_pass_by_value_self.rs:18:15\n+   |\n+LL |     fn by_ref(&self) {}\n+   |               ^^^^^ help: try passing by value: `TyCtxt<'tcx>`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rustc_pass_by_value_self.rs:8:9\n+   |\n+LL | #![deny(rustc::pass_by_value)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: passing `Ty<'tcx>` by reference\n+  --> $DIR/rustc_pass_by_value_self.rs:30:21\n+   |\n+LL |     fn by_ref(self: &Ty<'tcx>) {}\n+   |                     ^^^^^^^^^ help: try passing by value: `Ty<'tcx>`\n+\n+error: passing `Foo` by reference\n+  --> $DIR/rustc_pass_by_value_self.rs:37:17\n+   |\n+LL |     fn with_ref(&self) {}\n+   |                 ^^^^^ help: try passing by value: `Foo`\n+\n+error: passing `WithParameters<T, 1_usize>` by reference\n+  --> $DIR/rustc_pass_by_value_self.rs:47:17\n+   |\n+LL |     fn with_ref(&self) {}\n+   |                 ^^^^^ help: try passing by value: `WithParameters<T, 1_usize>`\n+\n+error: passing `WithParameters<T, 1_usize, u8>` by reference\n+  --> $DIR/rustc_pass_by_value_self.rs:51:17\n+   |\n+LL |     fn with_ref(&self) {}\n+   |                 ^^^^^ help: try passing by value: `WithParameters<T, 1_usize, u8>`\n+\n+error: aborting due to 5 previous errors\n+"}]}