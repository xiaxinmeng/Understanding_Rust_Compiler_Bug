{"sha": "cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYzMxZGY0ZmMwODRiNDdhNWM2NDU2ZGYyZWZiNmUyOGI4MmE3ZGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-13T21:58:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T00:24:07Z"}, "message": "std: Move the owned module from core to std\n\nThe compiler was updated to recognize that implementations for ty_uniq(..) are\nallowed if the Box lang item is located in the current crate. This enforces the\nidea that libcore cannot allocated, and moves all related trait implementations\nfrom libcore to libstd.\n\nThis is a breaking change in that the AnyOwnExt trait has moved from the any\nmodule to the owned module. Any previous users of std::any::AnyOwnExt should now\nuse std::owned::AnyOwnExt instead. This was done because the trait is intended\nfor Box traits and only Box traits.\n\n[breaking-change]", "tree": {"sha": "d978963435cc73d848ff8b936e9b0dba050b482b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d978963435cc73d848ff8b936e9b0dba050b482b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "html_url": "https://github.com/rust-lang/rust/commit/cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527", "html_url": "https://github.com/rust-lang/rust/commit/cb115ac2d4f57d8b590c8d46d8f9e2958ed9a527"}], "stats": {"total": 324, "additions": 219, "deletions": 105}, "files": [{"sha": "70cd46dcfa2b45ce8b9fc03685ba3c7b8226fe35", "filename": "src/libcore/any.rs", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -22,11 +22,8 @@\n \n use mem::{transmute, transmute_copy};\n use option::{Option, Some, None};\n-use owned::Box;\n use raw::TraitObject;\n-use result::{Result, Ok, Err};\n use intrinsics::TypeId;\n-use intrinsics;\n \n /// A type with no inhabitants\n pub enum Void { }\n@@ -117,38 +114,11 @@ impl<'a> AnyMutRefExt<'a> for &'a mut Any {\n     }\n }\n \n-/// Extension methods for an owning `Any` trait object\n-pub trait AnyOwnExt {\n-    /// Returns the boxed value if it is of type `T`, or\n-    /// `Err(Self)` if it isn't.\n-    fn move<T: 'static>(self) -> Result<Box<T>, Self>;\n-}\n-\n-impl AnyOwnExt for Box<Any> {\n-    #[inline]\n-    fn move<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n-        if self.is::<T>() {\n-            unsafe {\n-                // Get the raw representation of the trait object\n-                let to: TraitObject = transmute_copy(&self);\n-\n-                // Prevent destructor on self being run\n-                intrinsics::forget(self);\n-\n-                // Extract the data pointer\n-                Ok(transmute(to.data))\n-            }\n-        } else {\n-            Err(self)\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use prelude::*;\n     use super::*;\n-    use owned::Box;\n+    use realstd::owned::{Box, AnyOwnExt};\n     use realstd::str::StrAllocating;\n \n     #[deriving(Eq, Show)]\n@@ -253,6 +223,8 @@ mod tests {\n \n     #[test]\n     fn any_move() {\n+        use realstd::any::Any;\n+        use realstd::result::{Ok, Err};\n         let a = box 8u as Box<Any>;\n         let b = box Test as Box<Any>;\n "}, {"sha": "cd66beabc12de3fce964966012ded57abb79a347", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -21,8 +21,6 @@ the `clone` method.\n \n */\n \n-use owned::Box;\n-\n /// A common trait for cloning an object.\n pub trait Clone {\n     /// Returns a copy of the value. The contents of owned pointers\n@@ -41,18 +39,6 @@ pub trait Clone {\n     }\n }\n \n-impl<T: Clone> Clone for Box<T> {\n-    /// Return a copy of the owned box.\n-    #[inline]\n-    fn clone(&self) -> Box<T> { box {(**self).clone()} }\n-\n-    /// Perform copy-assignment from `source` by reusing the existing allocation.\n-    #[inline]\n-    fn clone_from(&mut self, source: &Box<T>) {\n-        (**self).clone_from(&(**source));\n-    }\n-}\n-\n impl<T> Clone for @T {\n     /// Return a shallow copy of the managed box.\n     #[inline]\n@@ -129,12 +115,22 @@ extern_fn_clone!(A, B, C, D, E, F, G, H)\n #[cfg(test)]\n mod test {\n     use prelude::*;\n-    use owned::Box;\n+    use realstd::owned::Box;\n+\n+    fn realclone<T: ::realstd::clone::Clone>(t: &T) -> T {\n+        use realstd::clone::Clone;\n+        t.clone()\n+    }\n+\n+    fn realclone_from<T: ::realstd::clone::Clone>(t1: &mut T, t2: &T) {\n+        use realstd::clone::Clone;\n+        t1.clone_from(t2)\n+    }\n \n     #[test]\n     fn test_owned_clone() {\n         let a = box 5i;\n-        let b: Box<int> = a.clone();\n+        let b: Box<int> = realclone(&a);\n         assert_eq!(a, b);\n     }\n \n@@ -157,7 +153,7 @@ mod test {\n     fn test_clone_from() {\n         let a = box 5;\n         let mut b = box 10;\n-        b.clone_from(&a);\n+        realclone_from(&mut b, &a);\n         assert_eq!(*b, 5);\n     }\n "}, {"sha": "f2b1c1cd4cde699af5d80a13f3c799b219536e38", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -193,7 +193,6 @@ pub fn max<T: TotalOrd>(v1: T, v2: T) -> T {\n #[cfg(not(test))]\n mod impls {\n     use cmp::{Ord, TotalOrd, Eq, TotalEq, Ordering};\n-    use owned::Box;\n \n     // & pointers\n     impl<'a, T: Eq> Eq for &'a T {\n@@ -240,29 +239,6 @@ mod impls {\n         fn cmp(&self, other: &@T) -> Ordering { (**self).cmp(*other) }\n     }\n     impl<T: TotalEq> TotalEq for @T {}\n-\n-    // box pointers\n-    impl<T:Eq> Eq for Box<T> {\n-        #[inline]\n-        fn eq(&self, other: &Box<T>) -> bool { *(*self) == *(*other) }\n-        #[inline]\n-        fn ne(&self, other: &Box<T>) -> bool { *(*self) != *(*other) }\n-    }\n-    impl<T:Ord> Ord for Box<T> {\n-        #[inline]\n-        fn lt(&self, other: &Box<T>) -> bool { *(*self) < *(*other) }\n-        #[inline]\n-        fn le(&self, other: &Box<T>) -> bool { *(*self) <= *(*other) }\n-        #[inline]\n-        fn ge(&self, other: &Box<T>) -> bool { *(*self) >= *(*other) }\n-        #[inline]\n-        fn gt(&self, other: &Box<T>) -> bool { *(*self) > *(*other) }\n-    }\n-    impl<T: TotalOrd> TotalOrd for Box<T> {\n-        #[inline]\n-        fn cmp(&self, other: &Box<T>) -> Ordering { (**self).cmp(*other) }\n-    }\n-    impl<T: TotalEq> TotalEq for Box<T> {}\n }\n \n #[cfg(test)]"}, {"sha": "af65fcc5a779da550cbf2410c9b6b732148bfe1f", "filename": "src/libcore/default.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -10,8 +10,6 @@\n \n //! The `Default` trait for types which may have meaningful default values\n \n-use owned::Box;\n-\n /// A trait that types which have a useful default value should implement.\n pub trait Default {\n     /// Return the \"default value\" for a type.\n@@ -21,7 +19,3 @@ pub trait Default {\n impl<T: Default + 'static> Default for @T {\n     fn default() -> @T { @Default::default() }\n }\n-\n-impl<T: Default> Default for Box<T> {\n-    fn default() -> Box<T> { box Default::default() }\n-}"}, {"sha": "f6a77d6decae048c278ef1de1d7fac4695c0d7f6", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -2334,7 +2334,7 @@ mod tests {\n     use realstd::num;\n \n     use cmp;\n-    use owned::Box;\n+    use realstd::owned::Box;\n     use uint;\n \n     #[test]"}, {"sha": "97b086a093d2a11a8389d1cc70e5dc6ae4daa79d", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -30,7 +30,6 @@\n #[cfg(test)] pub use cmp = realcore::cmp;\n #[cfg(test)] pub use kinds = realcore::kinds;\n #[cfg(test)] pub use ops = realcore::ops;\n-#[cfg(test)] pub use owned = realcore::owned;\n #[cfg(test)] pub use ty = realcore::ty;\n \n #[cfg(not(test))]\n@@ -73,7 +72,6 @@ pub mod ptr;\n #[cfg(not(test))] pub mod ops;\n #[cfg(not(test))] pub mod ty;\n #[cfg(not(test))] pub mod cmp;\n-#[cfg(not(test))] pub mod owned;\n pub mod clone;\n pub mod default;\n pub mod container;\n@@ -95,6 +93,9 @@ pub mod slice;\n pub mod str;\n pub mod tuple;\n \n+#[cfg(stage0, not(test))]\n+pub mod owned;\n+\n mod failure;\n \n // FIXME: this module should not exist. Once owned allocations are no longer a"}, {"sha": "c5c6d751777288618469afdbf6fc8bb6568e2fe0", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -380,7 +380,7 @@ mod tests {\n     use mem::*;\n     use option::{Some,None};\n     use realstd::str::StrAllocating;\n-    use owned::Box;\n+    use realstd::owned::Box;\n     use raw;\n \n     #[test]"}, {"sha": "3af12c5154c29d5f08847f5ca209ff53f477781d", "filename": "src/libcore/owned.rs", "status": "modified", "additions": 74, "deletions": 11, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibcore%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fowned.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -10,10 +10,14 @@\n \n //! Operations on unique pointer types\n \n-// FIXME: this module should not exist in libcore. It must currently because the\n-//        Box implementation is quite ad-hoc in the compiler. Once there is\n-//        proper support in the compiler this type will be able to be defined in\n-//        its own module.\n+use any::{Any, AnyRefExt};\n+use clone::Clone;\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering};\n+use default::Default;\n+use intrinsics;\n+use mem;\n+use raw::TraitObject;\n+use result::{Ok, Err, Result};\n \n /// A value that represents the global exchange heap. This is the default\n /// place that the `box` keyword allocates into when no place is supplied.\n@@ -23,16 +27,75 @@\n ///     let foo = box(HEAP) Bar::new(...);\n ///     let foo = box Bar::new(...);\n #[lang=\"exchange_heap\"]\n-#[cfg(not(test))]\n-pub static HEAP: () = ();\n-\n-#[cfg(test)]\n pub static HEAP: () = ();\n \n /// A type that represents a uniquely-owned value.\n #[lang=\"owned_box\"]\n-#[cfg(not(test))]\n pub struct Box<T>(*T);\n \n-#[cfg(test)]\n-pub struct Box<T>(*T);\n+impl<T: Default> Default for Box<T> {\n+    fn default() -> Box<T> { box Default::default() }\n+}\n+\n+impl<T: Clone> Clone for Box<T> {\n+    /// Return a copy of the owned box.\n+    #[inline]\n+    fn clone(&self) -> Box<T> { box {(**self).clone()} }\n+\n+    /// Perform copy-assignment from `source` by reusing the existing allocation.\n+    #[inline]\n+    fn clone_from(&mut self, source: &Box<T>) {\n+        (**self).clone_from(&(**source));\n+    }\n+}\n+\n+// box pointers\n+impl<T:Eq> Eq for Box<T> {\n+    #[inline]\n+    fn eq(&self, other: &Box<T>) -> bool { *(*self) == *(*other) }\n+    #[inline]\n+    fn ne(&self, other: &Box<T>) -> bool { *(*self) != *(*other) }\n+}\n+impl<T:Ord> Ord for Box<T> {\n+    #[inline]\n+    fn lt(&self, other: &Box<T>) -> bool { *(*self) < *(*other) }\n+    #[inline]\n+    fn le(&self, other: &Box<T>) -> bool { *(*self) <= *(*other) }\n+    #[inline]\n+    fn ge(&self, other: &Box<T>) -> bool { *(*self) >= *(*other) }\n+    #[inline]\n+    fn gt(&self, other: &Box<T>) -> bool { *(*self) > *(*other) }\n+}\n+impl<T: TotalOrd> TotalOrd for Box<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Box<T>) -> Ordering { (**self).cmp(*other) }\n+}\n+impl<T: TotalEq> TotalEq for Box<T> {}\n+\n+/// Extension methods for an owning `Any` trait object\n+pub trait AnyOwnExt {\n+    /// Returns the boxed value if it is of type `T`, or\n+    /// `Err(Self)` if it isn't.\n+    fn move<T: 'static>(self) -> Result<Box<T>, Self>;\n+}\n+\n+impl AnyOwnExt for Box<Any> {\n+    #[inline]\n+    fn move<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n+        if self.is::<T>() {\n+            unsafe {\n+                // Get the raw representation of the trait object\n+                let to: TraitObject =\n+                    *mem::transmute::<&Box<Any>, &TraitObject>(&self);\n+\n+                // Prevent destructor on self being run\n+                intrinsics::forget(self);\n+\n+                // Extract the data pointer\n+                Ok(mem::transmute(to.data))\n+            }\n+        } else {\n+            Err(self)\n+        }\n+    }\n+}"}, {"sha": "f853b0dbad40f9254f3553c958b33da962da1ed8", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -90,7 +90,7 @@ fn get_base_type(inference_context: &InferCtxt,\n     }\n }\n \n-fn type_is_defined_in_local_crate(original_type: t) -> bool {\n+fn type_is_defined_in_local_crate(tcx: &ty::ctxt, original_type: t) -> bool {\n     /*!\n      *\n      * For coherence, when we have `impl Trait for Type`, we need to\n@@ -109,6 +109,14 @@ fn type_is_defined_in_local_crate(original_type: t) -> bool {\n                     found_nominal = true;\n                 }\n             }\n+            ty_uniq(..) => {\n+                match tcx.lang_items.owned_box() {\n+                    Some(did) if did.krate == ast::LOCAL_CRATE => {\n+                        found_nominal = true;\n+                    }\n+                    _ => {}\n+                }\n+            }\n \n             _ => { }\n         }\n@@ -194,11 +202,10 @@ impl<'a> visit::Visitor<()> for PrivilegedScopeVisitor<'a> {\n                 }\n             }\n             ItemImpl(_, Some(ref trait_ref), _, _) => {\n+                let tcx = self.cc.crate_context.tcx;\n                 // `for_ty` is `Type` in `impl Trait for Type`\n-                let for_ty =\n-                    ty::node_id_to_type(self.cc.crate_context.tcx,\n-                                        item.id);\n-                if !type_is_defined_in_local_crate(for_ty) {\n+                let for_ty = ty::node_id_to_type(tcx, item.id);\n+                if !type_is_defined_in_local_crate(tcx, for_ty) {\n                     // This implementation is not in scope of its base\n                     // type. This still might be OK if the trait is\n                     // defined in the same crate."}, {"sha": "a37f9a516fdb92afda011f05a15d4869ae14ffc4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -133,14 +133,16 @@ extern crate core;\n #[cfg(test)] pub use ops = realstd::ops;\n #[cfg(test)] pub use cmp = realstd::cmp;\n #[cfg(test)] pub use ty = realstd::ty;\n-#[cfg(test)] pub use owned = realstd::owned;\n+#[cfg(not(stage0), test)] pub use owned = realstd::owned;\n \n #[cfg(not(test))] pub use cmp = core::cmp;\n #[cfg(not(test))] pub use kinds = core::kinds;\n #[cfg(not(test))] pub use ops = core::ops;\n-#[cfg(not(test))] pub use owned = core::owned;\n #[cfg(not(test))] pub use ty = core::ty;\n \n+#[cfg(stage0, test)] pub use owned = realstd::owned;\n+#[cfg(stage0, not(test))] pub use owned = core::owned;\n+\n pub use core::any;\n pub use core::bool;\n pub use core::cell;\n@@ -207,6 +209,8 @@ pub mod ascii;\n \n pub mod rc;\n pub mod gc;\n+#[cfg(not(stage0), not(test))]\n+pub mod owned;\n \n /* Common traits */\n "}, {"sha": "3af12c5154c29d5f08847f5ca209ff53f477781d", "filename": "src/libstd/owned.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibstd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibstd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fowned.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -0,0 +1,101 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Operations on unique pointer types\n+\n+use any::{Any, AnyRefExt};\n+use clone::Clone;\n+use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering};\n+use default::Default;\n+use intrinsics;\n+use mem;\n+use raw::TraitObject;\n+use result::{Ok, Err, Result};\n+\n+/// A value that represents the global exchange heap. This is the default\n+/// place that the `box` keyword allocates into when no place is supplied.\n+///\n+/// The following two examples are equivalent:\n+///\n+///     let foo = box(HEAP) Bar::new(...);\n+///     let foo = box Bar::new(...);\n+#[lang=\"exchange_heap\"]\n+pub static HEAP: () = ();\n+\n+/// A type that represents a uniquely-owned value.\n+#[lang=\"owned_box\"]\n+pub struct Box<T>(*T);\n+\n+impl<T: Default> Default for Box<T> {\n+    fn default() -> Box<T> { box Default::default() }\n+}\n+\n+impl<T: Clone> Clone for Box<T> {\n+    /// Return a copy of the owned box.\n+    #[inline]\n+    fn clone(&self) -> Box<T> { box {(**self).clone()} }\n+\n+    /// Perform copy-assignment from `source` by reusing the existing allocation.\n+    #[inline]\n+    fn clone_from(&mut self, source: &Box<T>) {\n+        (**self).clone_from(&(**source));\n+    }\n+}\n+\n+// box pointers\n+impl<T:Eq> Eq for Box<T> {\n+    #[inline]\n+    fn eq(&self, other: &Box<T>) -> bool { *(*self) == *(*other) }\n+    #[inline]\n+    fn ne(&self, other: &Box<T>) -> bool { *(*self) != *(*other) }\n+}\n+impl<T:Ord> Ord for Box<T> {\n+    #[inline]\n+    fn lt(&self, other: &Box<T>) -> bool { *(*self) < *(*other) }\n+    #[inline]\n+    fn le(&self, other: &Box<T>) -> bool { *(*self) <= *(*other) }\n+    #[inline]\n+    fn ge(&self, other: &Box<T>) -> bool { *(*self) >= *(*other) }\n+    #[inline]\n+    fn gt(&self, other: &Box<T>) -> bool { *(*self) > *(*other) }\n+}\n+impl<T: TotalOrd> TotalOrd for Box<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Box<T>) -> Ordering { (**self).cmp(*other) }\n+}\n+impl<T: TotalEq> TotalEq for Box<T> {}\n+\n+/// Extension methods for an owning `Any` trait object\n+pub trait AnyOwnExt {\n+    /// Returns the boxed value if it is of type `T`, or\n+    /// `Err(Self)` if it isn't.\n+    fn move<T: 'static>(self) -> Result<Box<T>, Self>;\n+}\n+\n+impl AnyOwnExt for Box<Any> {\n+    #[inline]\n+    fn move<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n+        if self.is::<T>() {\n+            unsafe {\n+                // Get the raw representation of the trait object\n+                let to: TraitObject =\n+                    *mem::transmute::<&Box<Any>, &TraitObject>(&self);\n+\n+                // Prevent destructor on self being run\n+                intrinsics::forget(self);\n+\n+                // Extract the data pointer\n+                Ok(mem::transmute(to.data))\n+            }\n+        } else {\n+            Err(self)\n+        }\n+    }\n+}"}, {"sha": "31a2014530607ff5d596d0d6d48e94f599892ce7", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -13,7 +13,6 @@\n //! local storage, and logging. Even a 'freestanding' Rust would likely want\n //! to implement this.\n \n-use any::AnyOwnExt;\n use cleanup;\n use clone::Clone;\n use comm::Sender;\n@@ -24,7 +23,7 @@ use local_data;\n use mem;\n use ops::Drop;\n use option::{Option, Some, None};\n-use owned::Box;\n+use owned::{AnyOwnExt, Box};\n use prelude::drop;\n use result::{Result, Ok, Err};\n use rt::Runtime;"}, {"sha": "7fb61c29112dee8b26ecaaa5b587677240c4a5d4", "filename": "src/libstd/task.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -47,10 +47,11 @@ use rt::local::Local;\n use rt::task::Task;\n use str::{Str, SendStr, IntoMaybeOwned};\n \n-#[cfg(test)] use any::{AnyOwnExt, AnyRefExt};\n+#[cfg(test)] use any::AnyRefExt;\n+#[cfg(test)] use owned::AnyOwnExt;\n+#[cfg(test)] use realstd::result::ResultUnwrap;\n #[cfg(test)] use result;\n #[cfg(test)] use str::StrAllocating;\n-#[cfg(test)] use realstd::result::ResultUnwrap;\n \n /// Indicates the manner in which a task exited.\n ///"}, {"sha": "ae4623c6e66eb3b050c8a2a1645b6652c5a67a2d", "filename": "src/test/run-pass/unit-like-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbc31df4fc084b47a5c6456df2efb6e28b82a7da/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs?ref=cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "patch": "@@ -10,7 +10,7 @@\n \n // Make sure the destructor is run for unit-like structs.\n \n-use std::any::AnyOwnExt;\n+use std::owned::AnyOwnExt;\n use std::task;\n \n struct Foo;"}]}