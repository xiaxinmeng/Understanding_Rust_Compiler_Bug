{"sha": "1c18f8fd59b9d7e4632393076bf2780d7c97ba12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMThmOGZkNTliOWQ3ZTQ2MzIzOTMwNzZiZjI3ODBkN2M5N2JhMTI=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-05-24T12:37:15Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-05-24T22:02:45Z"}, "message": "Add byte conversions", "tree": {"sha": "8272b857d00dce42524753bf2b416e340690e3cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8272b857d00dce42524753bf2b416e340690e3cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c18f8fd59b9d7e4632393076bf2780d7c97ba12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c18f8fd59b9d7e4632393076bf2780d7c97ba12", "html_url": "https://github.com/rust-lang/rust/commit/1c18f8fd59b9d7e4632393076bf2780d7c97ba12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c18f8fd59b9d7e4632393076bf2780d7c97ba12/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce92300a49367a10489d0f9280adfa52ff60f6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce92300a49367a10489d0f9280adfa52ff60f6cf", "html_url": "https://github.com/rust-lang/rust/commit/ce92300a49367a10489d0f9280adfa52ff60f6cf"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "0a16b5dacf025db50f3a30c43d2ec307753ac198", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c18f8fd59b9d7e4632393076bf2780d7c97ba12/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c18f8fd59b9d7e4632393076bf2780d7c97ba12/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=1c18f8fd59b9d7e4632393076bf2780d7c97ba12", "patch": "@@ -17,6 +17,9 @@ mod reduction;\n mod select;\n pub use select::Select;\n \n+mod to_bytes;\n+pub use to_bytes::ToBytes;\n+\n mod comparisons;\n mod fmt;\n mod intrinsics;"}, {"sha": "a2d9cc4ef56cd58b1e36b6e6475a30faa9054f86", "filename": "crates/core_simd/src/to_bytes.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/1c18f8fd59b9d7e4632393076bf2780d7c97ba12/crates%2Fcore_simd%2Fsrc%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c18f8fd59b9d7e4632393076bf2780d7c97ba12/crates%2Fcore_simd%2Fsrc%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fto_bytes.rs?ref=1c18f8fd59b9d7e4632393076bf2780d7c97ba12", "patch": "@@ -0,0 +1,68 @@\n+mod sealed {\n+    pub trait Sealed {}\n+}\n+use sealed::Sealed;\n+\n+/// Supporting trait for byte conversion functions.\n+pub trait ToBytes: Sealed {\n+    /// The bytes representation of this type.\n+    type Bytes;\n+\n+    #[doc(hidden)]\n+    fn to_bytes_impl(self) -> Self::Bytes;\n+\n+    #[doc(hidden)]\n+    fn from_bytes_impl(bytes: Self::Bytes) -> Self;\n+}\n+\n+macro_rules! impl_to_bytes {\n+    { $name:ident, $($int_width:literal -> $byte_width:literal),* } => {\n+        $(\n+        impl Sealed for crate::$name<$int_width> where Self: crate::LanesAtMost32 {}\n+        impl ToBytes for crate::$name<$int_width>\n+        where\n+            Self: crate::LanesAtMost32,\n+            crate::SimdU8<$byte_width>: crate::LanesAtMost32,\n+        {\n+            type Bytes = crate::SimdU8<$byte_width>;\n+            fn to_bytes_impl(self) -> Self::Bytes {\n+                unsafe { core::mem::transmute(self) }\n+            }\n+            fn from_bytes_impl(bytes: Self::Bytes) -> Self {\n+                unsafe { core::mem::transmute(bytes) }\n+            }\n+        }\n+        )*\n+\n+        impl<const LANES: usize> crate::$name<LANES>\n+        where\n+            Self: ToBytes + crate::LanesAtMost32,\n+        {\n+            /// Return the memory representation of this integer as a byte array in native byte\n+            /// order.\n+            pub fn to_ne_bytes(self) -> <Self as ToBytes>::Bytes { self.to_bytes_impl() }\n+\n+            /// Create a native endian integer value from its memory representation as a byte array\n+            /// in native endianness.\n+            pub fn from_ne_bytes(bytes: <Self as ToBytes>::Bytes) -> Self { Self::from_bytes_impl(bytes) }\n+        }\n+    }\n+}\n+\n+impl_to_bytes! { SimdU8, 1 -> 1, 2 -> 2, 4 -> 4, 8 -> 8, 16 -> 16, 32 -> 32 }\n+impl_to_bytes! { SimdU16, 1 -> 2, 2 -> 4, 4 -> 8, 8 -> 16, 16 -> 32 }\n+impl_to_bytes! { SimdU32, 1 -> 4, 2 -> 8, 4 -> 16, 8 -> 32 }\n+impl_to_bytes! { SimdU64, 1 -> 8, 2 -> 16, 4 -> 32 }\n+#[cfg(target_pointer_width = \"32\")]\n+impl_to_bytes! { SimdUsize, 1 -> 4, 2 -> 8, 4 -> 16, 8 -> 32 }\n+#[cfg(target_pointer_width = \"64\")]\n+impl_to_bytes! { SimdUsize, 1 -> 8, 2 -> 16, 4 -> 32 }\n+\n+impl_to_bytes! { SimdI8, 1 -> 1, 2 -> 2, 4 -> 4, 8 -> 8, 16 -> 16, 32 -> 32 }\n+impl_to_bytes! { SimdI16, 1 -> 2, 2 -> 4, 4 -> 8, 8 -> 16, 16 -> 32 }\n+impl_to_bytes! { SimdI32, 1 -> 4, 2 -> 8, 4 -> 16, 8 -> 32 }\n+impl_to_bytes! { SimdI64, 1 -> 8, 2 -> 16, 4 -> 32 }\n+#[cfg(target_pointer_width = \"32\")]\n+impl_to_bytes! { SimdIsize, 1 -> 4, 2 -> 8, 4 -> 16, 8 -> 32 }\n+#[cfg(target_pointer_width = \"64\")]\n+impl_to_bytes! { SimdIsize, 1 -> 8, 2 -> 16, 4 -> 32 }"}, {"sha": "20da1652a6ddfa46a356cb37efdf8a6f27b40e5e", "filename": "crates/core_simd/tests/to_bytes.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c18f8fd59b9d7e4632393076bf2780d7c97ba12/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c18f8fd59b9d7e4632393076bf2780d7c97ba12/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs?ref=1c18f8fd59b9d7e4632393076bf2780d7c97ba12", "patch": "@@ -0,0 +1,10 @@\n+use core_simd::SimdU32;\n+\n+#[test]\n+fn byte_convert() {\n+    let int = SimdU32::from_array([0xdeadbeef, 0x8badf00d]);\n+    let bytes = int.to_ne_bytes();\n+    assert_eq!(int[0].to_ne_bytes(), bytes[..4]); \n+    assert_eq!(int[1].to_ne_bytes(), bytes[4..]);\n+    assert_eq!(SimdU32::from_ne_bytes(bytes), int);\n+}"}]}