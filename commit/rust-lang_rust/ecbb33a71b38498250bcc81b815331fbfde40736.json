{"sha": "ecbb33a71b38498250bcc81b815331fbfde40736", "node_id": "C_kwDOAAsO6NoAKGVjYmIzM2E3MWIzODQ5ODI1MGJjYzgxYjgxNTMzMWZiZmRlNDA3MzY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-12T13:25:58Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-12T13:25:58Z"}, "message": "Implement and fix a couple more simd intrinsics", "tree": {"sha": "1eb2178a6ad91859266c617d158c635c1de95c4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eb2178a6ad91859266c617d158c635c1de95c4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecbb33a71b38498250bcc81b815331fbfde40736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecbb33a71b38498250bcc81b815331fbfde40736", "html_url": "https://github.com/rust-lang/rust/commit/ecbb33a71b38498250bcc81b815331fbfde40736", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecbb33a71b38498250bcc81b815331fbfde40736/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6ba10deadda0ed11fcee5db5084f9e08f5c7bbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ba10deadda0ed11fcee5db5084f9e08f5c7bbd", "html_url": "https://github.com/rust-lang/rust/commit/f6ba10deadda0ed11fcee5db5084f9e08f5c7bbd"}], "stats": {"total": 64, "additions": 50, "deletions": 14}, "files": [{"sha": "7697571da95e7cc7380342c448c821e577afd178", "filename": "scripts/test_rustc_tests.sh", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb33a71b38498250bcc81b815331fbfde40736/scripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb33a71b38498250bcc81b815331fbfde40736/scripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftest_rustc_tests.sh?ref=ecbb33a71b38498250bcc81b815331fbfde40736", "patch": "@@ -36,6 +36,14 @@ rm tests/ui/parser/unclosed-delimiter-in-dep.rs # submodule contains //~ERROR\n # FIXME add needs-unwind to this test\n rm -r tests/run-make/libtest-junit\n \n+# extra warning about -Cpanic=abort for proc macros\n+rm tests/ui/proc-macro/crt-static.rs\n+rm tests/ui/proc-macro/proc-macro-deprecated-attr.rs\n+rm tests/ui/proc-macro/quote-debug.rs\n+rm tests/ui/proc-macro/no-missing-docs.rs\n+rm tests/ui/rust-2018/proc-macro-crate-in-paths.rs\n+rm tests/ui/proc-macro/allowed-signatures.rs\n+\n # vendor intrinsics\n rm tests/ui/sse2.rs # cpuid not supported, so sse2 not detected\n rm tests/ui/intrinsics/const-eval-select-x86_64.rs # requires x86_64 vendor intrinsics\n@@ -111,13 +119,6 @@ rm tests/ui/pattern/usefulness/doc-hidden-non-exhaustive.rs # same\n rm tests/ui/suggestions/derive-trait-for-method-call.rs # same\n rm tests/ui/typeck/issue-46112.rs # same\n \n-rm tests/ui/proc-macro/crt-static.rs # extra warning about -Cpanic=abort for proc macros\n-rm tests/ui/proc-macro/proc-macro-deprecated-attr.rs # same\n-rm tests/ui/proc-macro/quote-debug.rs # same\n-rm tests/ui/proc-macro/no-missing-docs.rs # same\n-rm tests/ui/rust-2018/proc-macro-crate-in-paths.rs # same\n-rm tests/ui/proc-macro/allowed-signatures.rs # same\n-\n # rustdoc-clif passes extra args, suppressing the help message when no args are passed\n rm -r tests/run-make/issue-88756-default-output\n \n@@ -132,9 +133,7 @@ rm -r tests/ui/consts/missing_span_in_backtrace.rs # expects sysroot source to b\n rm tests/incremental/spike-neg1.rs # errors out for some reason\n rm tests/incremental/spike-neg2.rs # same\n \n-rm tests/ui/simd/intrinsic/generic-reduction-pass.rs # simd_reduce_add_unordered doesn't accept an accumulator for integer vectors\n-\n-rm tests/ui/simd/simd-bitmask.rs # crash\n+rm tests/ui/simd/simd-bitmask.rs # simd_bitmask doesn't implement [u*; N] return type\n \n rm -r tests/run-make/issue-51671 # wrong filename given in case of --emit=obj\n rm -r tests/run-make/issue-30063 # same"}, {"sha": "a0ccf291c42ba0e618ea14f6c8ff4a28308f77b2", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ecbb33a71b38498250bcc81b815331fbfde40736/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecbb33a71b38498250bcc81b815331fbfde40736/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=ecbb33a71b38498250bcc81b815331fbfde40736", "patch": "@@ -488,7 +488,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         }\n \n-        sym::simd_reduce_add_ordered | sym::simd_reduce_add_unordered => {\n+        sym::simd_reduce_add_ordered => {\n             intrinsic_args!(fx, args => (v, acc); intrinsic);\n             let acc = acc.load_scalar(fx);\n \n@@ -507,7 +507,25 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         }\n \n-        sym::simd_reduce_mul_ordered | sym::simd_reduce_mul_unordered => {\n+        sym::simd_reduce_add_unordered => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n+\n+            // FIXME there must be no acc param for integer vectors\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n+            simd_reduce(fx, v, None, ret, &|fx, lane_ty, a, b| {\n+                if lane_ty.is_floating_point() {\n+                    fx.bcx.ins().fadd(a, b)\n+                } else {\n+                    fx.bcx.ins().iadd(a, b)\n+                }\n+            });\n+        }\n+\n+        sym::simd_reduce_mul_ordered => {\n             intrinsic_args!(fx, args => (v, acc); intrinsic);\n             let acc = acc.load_scalar(fx);\n \n@@ -526,6 +544,24 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         }\n \n+        sym::simd_reduce_mul_unordered => {\n+            intrinsic_args!(fx, args => (v); intrinsic);\n+\n+            // FIXME there must be no acc param for integer vectors\n+            if !v.layout().ty.is_simd() {\n+                report_simd_type_validation_error(fx, intrinsic, span, v.layout().ty);\n+                return;\n+            }\n+\n+            simd_reduce(fx, v, None, ret, &|fx, lane_ty, a, b| {\n+                if lane_ty.is_floating_point() {\n+                    fx.bcx.ins().fmul(a, b)\n+                } else {\n+                    fx.bcx.ins().imul(a, b)\n+                }\n+            });\n+        }\n+\n         sym::simd_reduce_all => {\n             intrinsic_args!(fx, args => (v); intrinsic);\n \n@@ -581,7 +617,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             simd_reduce(fx, v, None, ret, &|fx, _ty, a, b| fx.bcx.ins().bxor(a, b));\n         }\n \n-        sym::simd_reduce_min => {\n+        sym::simd_reduce_min | sym::simd_reduce_min_nanless => {\n             intrinsic_args!(fx, args => (v); intrinsic);\n \n             if !v.layout().ty.is_simd() {\n@@ -600,7 +636,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         }\n \n-        sym::simd_reduce_max => {\n+        sym::simd_reduce_max | sym::simd_reduce_max_nanless => {\n             intrinsic_args!(fx, args => (v); intrinsic);\n \n             if !v.layout().ty.is_simd() {\n@@ -878,6 +914,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             fx.tcx.sess.span_err(span, format!(\"Unknown SIMD intrinsic {}\", intrinsic));\n             // Prevent verifier error\n             fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n+            return;\n         }\n     }\n     let ret_block = fx.get_block(target);"}]}