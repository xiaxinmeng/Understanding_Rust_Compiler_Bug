{"sha": "eb0473df93b49d6a2ff50f82e435dbd2e19467c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMDQ3M2RmOTNiNDlkNmEyZmY1MGY4MmU0MzVkYmQyZTE5NDY3Yzc=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-04-12T03:59:18Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-04-14T06:47:53Z"}, "message": "Make Result::{unwrap, unwrap_err} require Show\n\n`foo.ok().unwrap()` and `foo.err().unwrap()` are the fallbacks for types\nthat aren't `Show`.\n\nCloses #13379", "tree": {"sha": "a34483e0c817fd840d7dd5e38401a5dc7883fbb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a34483e0c817fd840d7dd5e38401a5dc7883fbb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb0473df93b49d6a2ff50f82e435dbd2e19467c7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb0473df93b49d6a2ff50f82e435dbd2e19467c7", "html_url": "https://github.com/rust-lang/rust/commit/eb0473df93b49d6a2ff50f82e435dbd2e19467c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb0473df93b49d6a2ff50f82e435dbd2e19467c7/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb9b2e0ebe63b6853a7936aa8071859e433c6597", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9b2e0ebe63b6853a7936aa8071859e433c6597", "html_url": "https://github.com/rust-lang/rust/commit/bb9b2e0ebe63b6853a7936aa8071859e433c6597"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "49a2b6326c81d3d1646345ed60e3d7fede60960c", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eb0473df93b49d6a2ff50f82e435dbd2e19467c7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0473df93b49d6a2ff50f82e435dbd2e19467c7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=eb0473df93b49d6a2ff50f82e435dbd2e19467c7", "patch": "@@ -266,7 +266,7 @@ trait def_id_encoder_helpers {\n \n impl<S:serialize::Encoder<E>, E> def_id_encoder_helpers for S {\n     fn emit_def_id(&mut self, did: ast::DefId) {\n-        did.encode(self).unwrap()\n+        did.encode(self).ok().unwrap()\n     }\n }\n \n@@ -278,13 +278,13 @@ trait def_id_decoder_helpers {\n \n impl<D:serialize::Decoder<E>, E> def_id_decoder_helpers for D {\n     fn read_def_id(&mut self, xcx: &ExtendedDecodeContext) -> ast::DefId {\n-        let did: ast::DefId = Decodable::decode(self).unwrap();\n+        let did: ast::DefId = Decodable::decode(self).ok().unwrap();\n         did.tr(xcx)\n     }\n \n     fn read_def_id_noxcx(&mut self,\n                          cdata: @cstore::crate_metadata) -> ast::DefId {\n-        let did: ast::DefId = Decodable::decode(self).unwrap();\n+        let did: ast::DefId = Decodable::decode(self).ok().unwrap();\n         decoder::translate_def_id(cdata, did)\n     }\n }"}, {"sha": "e2d7a869fbcdc888698e381946b1651e8e34056d", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb0473df93b49d6a2ff50f82e435dbd2e19467c7/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0473df93b49d6a2ff50f82e435dbd2e19467c7/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=eb0473df93b49d6a2ff50f82e435dbd2e19467c7", "patch": "@@ -496,7 +496,7 @@ impl<T: Send> Sender<T> {\n                                 // This send cannot fail because the task is\n                                 // asleep (we're looking at it), so the receiver\n                                 // can't go away.\n-                                (*a.get()).send(t).unwrap();\n+                                (*a.get()).send(t).ok().unwrap();\n                                 task.wake().map(|t| t.reawaken());\n                                 (a, Ok(()))\n                             }"}, {"sha": "9ca1443ea50178f0b77b70714624af5e2e2dd31a", "filename": "src/libstd/result.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/eb0473df93b49d6a2ff50f82e435dbd2e19467c7/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0473df93b49d6a2ff50f82e435dbd2e19467c7/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=eb0473df93b49d6a2ff50f82e435dbd2e19467c7", "patch": "@@ -12,6 +12,7 @@\n \n use clone::Clone;\n use cmp::Eq;\n+use std::fmt::Show;\n use iter::{Iterator, FromIterator};\n use option::{None, Option, Some};\n \n@@ -174,46 +175,50 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n-    /////////////////////////////////////////////////////////////////////////\n-    // Common special cases\n-    /////////////////////////////////////////////////////////////////////////\n-\n     /// Unwraps a result, yielding the content of an `Ok`.\n-    /// Fails if the value is an `Err`.\n+    /// Else it returns `optb`.\n     #[inline]\n-    pub fn unwrap(self) -> T {\n+    pub fn unwrap_or(self, optb: T) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(_) => fail!(\"called `Result::unwrap()` on an `Err` value\")\n+            Err(_) => optb\n         }\n     }\n \n     /// Unwraps a result, yielding the content of an `Ok`.\n-    /// Else it returns `optb`.\n+    /// If the value is an `Err` then it calls `op` with its value.\n     #[inline]\n-    pub fn unwrap_or(self, optb: T) -> T {\n+    pub fn unwrap_or_handle(self, op: |E| -> T) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(_) => optb\n+            Err(e) => op(e)\n         }\n     }\n+}\n \n+impl<T, E: Show> Result<T, E> {\n     /// Unwraps a result, yielding the content of an `Ok`.\n-    /// If the value is an `Err` then it calls `op` with its value.\n+    ///\n+    /// Fails if the value is an `Err`.\n     #[inline]\n-    pub fn unwrap_or_handle(self, op: |E| -> T) -> T {\n+    pub fn unwrap(self) -> T {\n         match self {\n             Ok(t) => t,\n-            Err(e) => op(e)\n+            Err(e) =>\n+                fail!(\"called `Result::unwrap()` on an `Err` value: {}\", e)\n         }\n     }\n+}\n \n+impl<T: Show, E> Result<T, E> {\n     /// Unwraps a result, yielding the content of an `Err`.\n+    ///\n     /// Fails if the value is an `Ok`.\n     #[inline]\n     pub fn unwrap_err(self) -> E {\n         match self {\n-            Ok(_) => fail!(\"called `Result::unwrap_err()` on an `Ok` value\"),\n+            Ok(t) =>\n+                fail!(\"called `Result::unwrap_err()` on an `Ok` value: {}\", t),\n             Err(e) => e\n         }\n     }"}, {"sha": "84ba122631ecdacd368dfdc2a3a09e06ecb0ba6c", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eb0473df93b49d6a2ff50f82e435dbd2e19467c7/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb0473df93b49d6a2ff50f82e435dbd2e19467c7/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=eb0473df93b49d6a2ff50f82e435dbd2e19467c7", "patch": "@@ -132,21 +132,22 @@ impl<T: Writer> Terminal<T> {\n             None => return Err(~\"TERM environment variable undefined\")\n         };\n \n-        let entry = open(term);\n-        if entry.is_err() {\n-            if \"cygwin\" == term { // msys terminal\n-                return Ok(Terminal {out: out, ti: msys_terminfo(), num_colors: 8});\n+        let mut file = match open(term) {\n+            Ok(file) => file,\n+            Err(err) => {\n+                if \"cygwin\" == term { // msys terminal\n+                    return Ok(Terminal {\n+                        out: out,\n+                        ti: msys_terminfo(),\n+                        num_colors: 8\n+                    });\n+                }\n+                return Err(err);\n             }\n-            return Err(entry.unwrap_err());\n-        }\n+        };\n \n-        let mut file = entry.unwrap();\n-        let ti = parse(&mut file, false);\n-        if ti.is_err() {\n-            return Err(ti.unwrap_err());\n-        }\n+        let inf = try!(parse(&mut file, false));\n \n-        let inf = ti.unwrap();\n         let nc = if inf.strings.find_equiv(&(\"setaf\")).is_some()\n                  && inf.strings.find_equiv(&(\"setab\")).is_some() {\n                      inf.numbers.find_equiv(&(\"colors\")).map_or(0, |&n| n)"}]}