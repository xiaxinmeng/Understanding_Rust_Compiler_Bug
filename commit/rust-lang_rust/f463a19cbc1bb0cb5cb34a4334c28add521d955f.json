{"sha": "f463a19cbc1bb0cb5cb34a4334c28add521d955f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NjNhMTljYmMxYmIwY2I1Y2IzNGE0MzM0YzI4YWRkNTIxZDk1NWY=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-07-04T23:52:12Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2014-07-04T23:52:12Z"}, "message": "Remove entry_bcx from FunctionContext\n\nWe no longer need to refer to the entry block from arbitrary places, so\nwe can drop it from FunctionContext.", "tree": {"sha": "b5ba2128bfd35a359e848e3cb7b8113d4c2a9df4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5ba2128bfd35a359e848e3cb7b8113d4c2a9df4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f463a19cbc1bb0cb5cb34a4334c28add521d955f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f463a19cbc1bb0cb5cb34a4334c28add521d955f", "html_url": "https://github.com/rust-lang/rust/commit/f463a19cbc1bb0cb5cb34a4334c28add521d955f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f463a19cbc1bb0cb5cb34a4334c28add521d955f/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db44468de0998814446fbca8b88ed57a5bf301b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/db44468de0998814446fbca8b88ed57a5bf301b0", "html_url": "https://github.com/rust-lang/rust/commit/db44468de0998814446fbca8b88ed57a5bf301b0"}], "stats": {"total": 39, "additions": 11, "deletions": 28}, "files": [{"sha": "7d5ae5c7c1bfe0e817d2fe189a6c119da33753e3", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f463a19cbc1bb0cb5cb34a4334c28add521d955f", "patch": "@@ -1113,8 +1113,7 @@ pub fn make_return_pointer(fcx: &FunctionContext, output_type: ty::t)\n             llvm::LLVMGetParam(fcx.llfn, 0)\n         } else {\n             let lloutputtype = type_of::type_of(fcx.ccx, output_type);\n-            let bcx = fcx.entry_bcx.borrow().clone().unwrap();\n-            Alloca(bcx, lloutputtype, \"__make_return_pointer\")\n+            AllocaFcx(fcx, lloutputtype, \"__make_return_pointer\")\n         }\n     }\n }\n@@ -1155,7 +1154,6 @@ pub fn new_fn_ctxt<'a>(ccx: &'a CrateContext,\n           llfn: llfndecl,\n           llenv: None,\n           llretptr: Cell::new(None),\n-          entry_bcx: RefCell::new(None),\n           alloca_insert_pt: Cell::new(None),\n           llreturn: Cell::new(None),\n           personality: Cell::new(None),\n@@ -1185,11 +1183,9 @@ pub fn new_fn_ctxt<'a>(ccx: &'a CrateContext,\n /// and allocating space for the return pointer.\n pub fn init_function<'a>(fcx: &'a FunctionContext<'a>,\n                          skip_retptr: bool,\n-                         output_type: ty::t) {\n+                         output_type: ty::t) -> &'a Block<'a> {\n     let entry_bcx = fcx.new_temp_block(\"entry-block\");\n \n-    *fcx.entry_bcx.borrow_mut() = Some(entry_bcx);\n-\n     // Use a dummy instruction as the insertion point for all allocas.\n     // This is later removed in FunctionContext::cleanup.\n     fcx.alloca_insert_pt.set(Some(unsafe {\n@@ -1211,6 +1207,8 @@ pub fn init_function<'a>(fcx: &'a FunctionContext<'a>,\n             fcx.llretptr.set(Some(make_return_pointer(fcx, substd_output_type)));\n         }\n     }\n+\n+    entry_bcx\n }\n \n // NB: must keep 4 fns in sync:\n@@ -1365,15 +1363,11 @@ pub fn trans_closure(ccx: &CrateContext,\n                           param_substs,\n                           Some(body.span),\n                           &arena);\n-    init_function(&fcx, false, output_type);\n+    let mut bcx = init_function(&fcx, false, output_type);\n \n     // cleanup scope for the incoming arguments\n     let arg_scope = fcx.push_custom_cleanup_scope();\n \n-    // Create the first basic block in the function and keep a handle on it to\n-    //  pass to finish_fn later.\n-    let bcx_top = fcx.entry_bcx.borrow().clone().unwrap();\n-    let mut bcx = bcx_top;\n     let block_ty = node_id_type(bcx, body.id);\n \n     // Set up arguments to the function.\n@@ -1500,14 +1494,12 @@ fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,\n     let arena = TypedArena::new();\n     let fcx = new_fn_ctxt(ccx, llfndecl, ctor_id, false, result_ty,\n                           param_substs, None, &arena);\n-    init_function(&fcx, false, result_ty);\n+    let bcx = init_function(&fcx, false, result_ty);\n \n     let arg_tys = ty::ty_fn_args(ctor_ty);\n \n     let arg_datums = create_datums_for_fn_args(&fcx, arg_tys.as_slice());\n \n-    let bcx = fcx.entry_bcx.borrow().clone().unwrap();\n-\n     if !type_is_zero_size(fcx.ccx, result_ty) {\n         let repr = adt::represent_type(ccx, result_ty);\n         adt::trans_start_init(bcx, &*repr, fcx.llretptr.get().unwrap(), disr);"}, {"sha": "c4e5fa3fa687e3c391715f91ebe9fb454d7d2f49", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=f463a19cbc1bb0cb5cb34a4334c28add521d955f", "patch": "@@ -279,10 +279,9 @@ pub fn trans_unboxing_shim(bcx: &Block,\n                           &empty_param_substs,\n                           None,\n                           &block_arena);\n-    init_function(&fcx, false, return_type);\n+    let mut bcx = init_function(&fcx, false, return_type);\n \n     // Create the substituted versions of the self type.\n-    let mut bcx = fcx.entry_bcx.borrow().clone().unwrap();\n     let arg_scope = fcx.push_custom_cleanup_scope();\n     let arg_scope_id = cleanup::CustomScope(arg_scope);\n     let boxed_arg_types = ty::ty_fn_args(boxed_function_type);"}, {"sha": "b2564936fa40668936e58a4de73297de9032b35e", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=f463a19cbc1bb0cb5cb34a4334c28add521d955f", "patch": "@@ -424,8 +424,7 @@ pub fn get_wrapper_for_bare_fn(ccx: &CrateContext,\n     let empty_param_substs = param_substs::empty();\n     let fcx = new_fn_ctxt(ccx, llfn, -1, true, f.sig.output,\n                           &empty_param_substs, None, &arena);\n-    init_function(&fcx, true, f.sig.output);\n-    let bcx = fcx.entry_bcx.borrow().clone().unwrap();\n+    let bcx = init_function(&fcx, true, f.sig.output);\n \n     let args = create_datums_for_fn_args(&fcx,\n                                          ty::ty_fn_args(closure_ty)"}, {"sha": "33e8d1736fb388cb1f9efab2c3d63d30de5b296f", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=f463a19cbc1bb0cb5cb34a4334c28add521d955f", "patch": "@@ -239,8 +239,6 @@ pub struct FunctionContext<'a> {\n     // always be Some.\n     pub llretptr: Cell<Option<ValueRef>>,\n \n-    pub entry_bcx: RefCell<Option<&'a Block<'a>>>,\n-\n     // These pub elements: \"hoisted basic blocks\" containing\n     // administrative activities that have to happen in only one place in\n     // the function, due to LLVM's quirks.\n@@ -322,8 +320,6 @@ impl<'a> FunctionContext<'a> {\n                                                      .get()\n                                                      .unwrap());\n         }\n-        // Remove the cycle between fcx and bcx, so memory can be freed\n-        *self.entry_bcx.borrow_mut() = None;\n     }\n \n     pub fn get_llreturn(&self) -> BasicBlockRef {"}, {"sha": "a59bcda0c59b00f6f457819862392d325e4ee786", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=f463a19cbc1bb0cb5cb34a4334c28add521d955f", "patch": "@@ -490,7 +490,7 @@ fn make_generic_glue(ccx: &CrateContext,\n     let fcx = new_fn_ctxt(ccx, llfn, -1, false, ty::mk_nil(),\n                           &empty_param_substs, None, &arena);\n \n-    init_function(&fcx, false, ty::mk_nil());\n+    let bcx = init_function(&fcx, false, ty::mk_nil());\n \n     lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n     ccx.stats.n_glues_created.set(ccx.stats.n_glues_created.get() + 1u);\n@@ -502,7 +502,6 @@ fn make_generic_glue(ccx: &CrateContext,\n     // llfn is expected be declared to take a parameter of the appropriate\n     // type, so we don't need to explicitly cast the function parameter.\n \n-    let bcx = fcx.entry_bcx.borrow().clone().unwrap();\n     let llrawptr0 = unsafe { llvm::LLVMGetParam(llfn, fcx.arg_pos(0) as c_uint) };\n     let bcx = helper(bcx, llrawptr0, t);\n     finish_fn(&fcx, bcx);"}, {"sha": "fbfd38d7be34b91a016bf56d8c0a16a1c9b42b06", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=f463a19cbc1bb0cb5cb34a4334c28add521d955f", "patch": "@@ -188,11 +188,10 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n     let arena = TypedArena::new();\n     let fcx = new_fn_ctxt(ccx, decl, item.id, false, output_type,\n                           substs, Some(item.span), &arena);\n-    init_function(&fcx, true, output_type);\n+    let mut bcx = init_function(&fcx, true, output_type);\n \n     set_always_inline(fcx.llfn);\n \n-    let mut bcx = fcx.entry_bcx.borrow().clone().unwrap();\n     let first_real_arg = fcx.arg_pos(0u);\n \n     let name = token::get_ident(item.ident);"}, {"sha": "1d21180f5ab8dd4f30bc81552c9120e5376cbaf7", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f463a19cbc1bb0cb5cb34a4334c28add521d955f/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=f463a19cbc1bb0cb5cb34a4334c28add521d955f", "patch": "@@ -313,7 +313,7 @@ impl<'a, 'b> Reflector<'a, 'b> {\n                 let fcx = new_fn_ctxt(ccx, llfdecl, -1, false,\n                                       ty::mk_u64(), &empty_param_substs,\n                                       None, &arena);\n-                init_function(&fcx, false, ty::mk_u64());\n+                let bcx = init_function(&fcx, false, ty::mk_u64());\n \n                 let arg = unsafe {\n                     //\n@@ -323,7 +323,6 @@ impl<'a, 'b> Reflector<'a, 'b> {\n                     //\n                     llvm::LLVMGetParam(llfdecl, fcx.arg_pos(0u) as c_uint)\n                 };\n-                let bcx = fcx.entry_bcx.borrow().clone().unwrap();\n                 let arg = BitCast(bcx, arg, llptrty);\n                 let ret = adt::trans_get_discr(bcx, &*repr, arg, Some(Type::i64(ccx)));\n                 Store(bcx, ret, fcx.llretptr.get().unwrap());"}]}