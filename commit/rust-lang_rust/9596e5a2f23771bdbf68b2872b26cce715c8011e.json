{"sha": "9596e5a2f23771bdbf68b2872b26cce715c8011e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OTZlNWEyZjIzNzcxYmRiZjY4YjI4NzJiMjZjY2U3MTVjODAxMWU=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-07-15T18:53:03Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:26Z"}, "message": "pacify tidy", "tree": {"sha": "654cdfd869d1419cc548fe598957f6934a0fde60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/654cdfd869d1419cc548fe598957f6934a0fde60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9596e5a2f23771bdbf68b2872b26cce715c8011e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9596e5a2f23771bdbf68b2872b26cce715c8011e", "html_url": "https://github.com/rust-lang/rust/commit/9596e5a2f23771bdbf68b2872b26cce715c8011e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9596e5a2f23771bdbf68b2872b26cce715c8011e/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ed05fd99573c481e2484edc28f18588e9135d1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed05fd99573c481e2484edc28f18588e9135d1f", "html_url": "https://github.com/rust-lang/rust/commit/6ed05fd99573c481e2484edc28f18588e9135d1f"}], "stats": {"total": 167, "additions": 90, "deletions": 77}, "files": [{"sha": "226448b4379a055b2db969e5fe5ac77415fd2e45", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=9596e5a2f23771bdbf68b2872b26cce715c8011e", "patch": "@@ -151,7 +151,7 @@ use core::ops::{Deref, DerefMut};\n use core::ptr;\n \n use crate::slice;\n-use crate::vec::{self, Vec, AsIntoIter};\n+use crate::vec::{self, AsIntoIter, Vec};\n \n use super::SpecExtend;\n \n@@ -1173,7 +1173,7 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<T> SourceIter for IntoIter<T> {\n     type Source = IntoIter<T>;\n \n@@ -1183,7 +1183,7 @@ unsafe impl<T> SourceIter for IntoIter<T> {\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<I> InPlaceIterable for IntoIter<I> {}\n \n impl<I> AsIntoIter<I> for IntoIter<I> {"}, {"sha": "9b7f2af3ba9e70a6b8130f4ddc2cad5da32b5a83", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=9596e5a2f23771bdbf68b2872b26cce715c8011e", "patch": "@@ -2941,7 +2941,7 @@ impl<T> FusedIterator for IntoIter<T> {}\n unsafe impl<T> TrustedLen for IntoIter<T> {}\n \n #[doc(hidden)]\n-#[unstable(issue = \"0\", feature = \"std_internals\")]\n+#[unstable(issue = \"none\", feature = \"std_internals\")]\n // T: Copy as approximation for !Drop since get_unchecked does not advance self.ptr\n // and thus we can't implement drop-handling\n unsafe impl<T> TrustedRandomAccess for IntoIter<T>\n@@ -2987,10 +2987,10 @@ unsafe impl<#[may_dangle] T> Drop for IntoIter<T> {\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<T> InPlaceIterable for IntoIter<T> {}\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<T> SourceIter for IntoIter<T> {\n     type Source = IntoIter<T>;\n "}, {"sha": "280f1075be69a630a4385f6e6605cfc219933a6f", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=9596e5a2f23771bdbf68b2872b26cce715c8011e", "patch": "@@ -520,8 +520,7 @@ where\n     }\n }\n \n-\n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<S: Iterator, I: FusedIterator> SourceIter for Fuse<I>\n     where\n         I: SourceIter<Source = S>,\n@@ -539,5 +538,5 @@ unsafe impl<S: Iterator, I: FusedIterator> SourceIter for Fuse<I>\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<I: InPlaceIterable> InPlaceIterable for Fuse<I> {}"}, {"sha": "ed5600f1824a5947b6673de87a7680202fc3ac98", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 75, "deletions": 62, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=9596e5a2f23771bdbf68b2872b26cce715c8011e", "patch": "@@ -55,7 +55,7 @@ pub use self::zip::Zip;\n ///\n /// [`FromIterator`]: crate::iter::FromIterator\n /// [`as_inner`]: SourceIter::as_inner\n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n pub unsafe trait SourceIter {\n     /// A source stage in an iterator pipeline.\n     type Source: Iterator;\n@@ -1010,7 +1010,7 @@ where\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for Map<I, F>\n where\n     F: FnMut(I::Item) -> B,\n@@ -1025,7 +1025,7 @@ where\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<B, I: InPlaceIterable, F> InPlaceIterable for Map<I, F> where F: FnMut(I::Item) -> B {}\n \n /// An iterator that filters the elements of `iter` with `predicate`.\n@@ -1159,10 +1159,11 @@ where\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I: FusedIterator, P> FusedIterator for Filter<I, P> where P: FnMut(&I::Item) -> bool {}\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, P, I: Iterator> SourceIter for Filter<I, P> where\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, P, I: Iterator> SourceIter for Filter<I, P>\n+where\n     P: FnMut(&I::Item) -> bool,\n-    I: SourceIter<Source = S>\n+    I: SourceIter<Source = S>,\n {\n     type Source = S;\n \n@@ -1173,9 +1174,8 @@ unsafe impl<S: Iterator, P, I: Iterator> SourceIter for Filter<I, P> where\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<I: InPlaceIterable, P> InPlaceIterable for Filter<I, P>\n-    where P: FnMut(&I::Item) -> bool {}\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable, P> InPlaceIterable for Filter<I, P> where P: FnMut(&I::Item) -> bool {}\n \n /// An iterator that uses `f` to both filter and map elements from `iter`.\n ///\n@@ -1303,10 +1303,11 @@ where\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<B, I: FusedIterator, F> FusedIterator for FilterMap<I, F> where F: FnMut(I::Item) -> Option<B> {}\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for FilterMap<I, F> where\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for FilterMap<I, F>\n+where\n     F: FnMut(I::Item) -> Option<B>,\n-    I: SourceIter<Source = S>\n+    I: SourceIter<Source = S>,\n {\n     type Source = S;\n \n@@ -1317,10 +1318,11 @@ unsafe impl<S: Iterator, B, I: Iterator, F> SourceIter for FilterMap<I, F> where\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<B, I: InPlaceIterable, F> InPlaceIterable for FilterMap<I, F>\n-    where F: FnMut(I::Item) -> Option<B> {}\n-\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<B, I: InPlaceIterable, F> InPlaceIterable for FilterMap<I, F> where\n+    F: FnMut(I::Item) -> Option<B>\n+{\n+}\n \n /// An iterator that yields the current count and the element during iteration.\n ///\n@@ -1540,7 +1542,7 @@ impl<I> FusedIterator for Enumerate<I> where I: FusedIterator {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<I> TrustedLen for Enumerate<I> where I: TrustedLen {}\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<S: Iterator, I: Iterator> SourceIter for Enumerate<I>\n where\n     I: SourceIter<Source = S>,\n@@ -1554,7 +1556,7 @@ where\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<I: InPlaceIterable> InPlaceIterable for Enumerate<I> {}\n \n /// An iterator with a `peek()` that returns an optional reference to the next\n@@ -1838,7 +1840,7 @@ impl<I: Iterator> Peekable<I> {\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<I> TrustedLen for Peekable<I> where I: TrustedLen {}\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<S: Iterator, I: Iterator> SourceIter for Peekable<I>\n where\n     I: SourceIter<Source = S>,\n@@ -1852,7 +1854,7 @@ where\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<I: InPlaceIterable> InPlaceIterable for Peekable<I> {}\n \n /// An iterator that rejects elements while `predicate` returns `true`.\n@@ -1956,10 +1958,11 @@ where\n {\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, P, I: Iterator> SourceIter for SkipWhile<I, P> where\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, P, I: Iterator> SourceIter for SkipWhile<I, P>\n+where\n     P: FnMut(&I::Item) -> bool,\n-    I: SourceIter<Source = S>\n+    I: SourceIter<Source = S>,\n {\n     type Source = S;\n \n@@ -1970,9 +1973,11 @@ unsafe impl<S: Iterator, P, I: Iterator> SourceIter for SkipWhile<I, P> where\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<I: InPlaceIterable, F> InPlaceIterable for SkipWhile<I, F>\n-    where F: FnMut(&I::Item) -> bool {}\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable, F> InPlaceIterable for SkipWhile<I, F> where\n+    F: FnMut(&I::Item) -> bool\n+{\n+}\n \n /// An iterator that only accepts elements while `predicate` returns `true`.\n ///\n@@ -2088,6 +2093,27 @@ where\n {\n }\n \n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, P, I: Iterator> SourceIter for TakeWhile<I, P>\n+    where\n+        P: FnMut(&I::Item) -> bool,\n+        I: SourceIter<Source = S>,\n+{\n+    type Source = S;\n+\n+    #[inline]\n+    unsafe fn as_inner(&mut self) -> &mut S {\n+        // Safety: unsafe function forwarding to unsafe function with the same requirements\n+        unsafe { SourceIter::as_inner(&mut self.iter) }\n+    }\n+}\n+\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable, F> InPlaceIterable for TakeWhile<I, F> where\n+    F: FnMut(&I::Item) -> bool\n+{\n+}\n+\n /// An iterator that only accepts elements while `predicate` returns `Some(_)`.\n ///\n /// This `struct` is created by the [`map_while`] method on [`Iterator`]. See its\n@@ -2165,25 +2191,6 @@ where\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, P, I: Iterator> SourceIter for TakeWhile<I, P> where\n-    P: FnMut(&I::Item) -> bool,\n-    I: SourceIter<Source = S>\n-{\n-    type Source = S;\n-\n-    #[inline]\n-    unsafe fn as_inner(&mut self) -> &mut S {\n-        // Safety: unsafe function forwarding to unsafe function with the same requirements\n-        unsafe { SourceIter::as_inner(&mut self.iter) }\n-    }\n-}\n-\n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<I: InPlaceIterable, F> InPlaceIterable for TakeWhile<I, F>\n-    where F: FnMut(&I::Item) -> bool {}\n-\n-\n /// An iterator that skips over `n` elements of `iter`.\n ///\n /// This `struct` is created by the [`skip`] method on [`Iterator`]. See its\n@@ -2367,7 +2374,7 @@ where\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I> FusedIterator for Skip<I> where I: FusedIterator {}\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<S: Iterator, I: Iterator> SourceIter for Skip<I>\n where\n     I: SourceIter<Source = S>,\n@@ -2381,7 +2388,7 @@ where\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<I: InPlaceIterable> InPlaceIterable for Skip<I> {}\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n@@ -2494,8 +2501,11 @@ where\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator> SourceIter for Take<I> where I: SourceIter<Source = S> {\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, I: Iterator> SourceIter for Take<I>\n+where\n+    I: SourceIter<Source = S>,\n+{\n     type Source = S;\n \n     #[inline]\n@@ -2505,7 +2515,7 @@ unsafe impl<S: Iterator, I: Iterator> SourceIter for Take<I> where I: SourceIter\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<I: InPlaceIterable> InPlaceIterable for Take<I> {}\n \n #[stable(feature = \"double_ended_take_iterator\", since = \"1.38.0\")]\n@@ -2672,10 +2682,11 @@ where\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<St, F, B, S: Iterator, I: Iterator> SourceIter for Scan<I, St, F>\n-    where I: SourceIter<Source = S>,\n-          F: FnMut(&mut St, I::Item) -> Option<B>,\n+where\n+    I: SourceIter<Source = S>,\n+    F: FnMut(&mut St, I::Item) -> Option<B>,\n {\n     type Source = S;\n \n@@ -2686,10 +2697,11 @@ unsafe impl<St, F, B, S: Iterator, I: Iterator> SourceIter for Scan<I, St, F>\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<St, F, B, I: InPlaceIterable> InPlaceIterable for Scan<I, St, F>\n-    where F: FnMut(&mut St, I::Item) -> Option<B>,\n-{}\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<St, F, B, I: InPlaceIterable> InPlaceIterable for Scan<I, St, F> where\n+    F: FnMut(&mut St, I::Item) -> Option<B>\n+{\n+}\n \n /// An iterator that calls a function with a reference to each element before\n /// yielding it.\n@@ -2837,10 +2849,11 @@ where\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I: FusedIterator, F> FusedIterator for Inspect<I, F> where F: FnMut(&I::Item) {}\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<S: Iterator, I: Iterator, F> SourceIter for Inspect<I, F> where\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<S: Iterator, I: Iterator, F> SourceIter for Inspect<I, F>\n+where\n     F: FnMut(&I::Item),\n-    I: SourceIter<Source = S>\n+    I: SourceIter<Source = S>,\n {\n     type Source = S;\n \n@@ -2851,8 +2864,8 @@ unsafe impl<S: Iterator, I: Iterator, F> SourceIter for Inspect<I, F> where\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n-unsafe impl<I: InPlaceIterable, F> InPlaceIterable for Inspect<I, F> where F: FnMut(&I::Item)  {}\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n+unsafe impl<I: InPlaceIterable, F> InPlaceIterable for Inspect<I, F> where F: FnMut(&I::Item) {}\n \n /// An iterator adapter that produces output as long as the underlying\n /// iterator produces `Result::Ok` values."}, {"sha": "0597d950185056cef08d6ca99269bea7b1a89574", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=9596e5a2f23771bdbf68b2872b26cce715c8011e", "patch": "@@ -332,7 +332,7 @@ where\n \n // Arbitrarily selects the left side of the zip iteration as extractable \"source\"\n // it would require negative trait bounds to be able to try both\n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n unsafe impl<S, A, B> SourceIter for Zip<A, B>\n     where\n         A: SourceIter<Source = S>,\n@@ -348,7 +348,7 @@ unsafe impl<S, A, B> SourceIter for Zip<A, B>\n     }\n }\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n // Limited to Item: Copy since interaction between Zip's use of TrustedRandomAccess\n // and Drop implementation of the source is unclear.\n //"}, {"sha": "59f333e888b88cd7e2af852959d282347da6b21d", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=9596e5a2f23771bdbf68b2872b26cce715c8011e", "patch": "@@ -342,7 +342,7 @@ pub use self::traits::{DoubleEndedIterator, Extend, FromIterator, IntoIterator};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::traits::{ExactSizeIterator, Product, Sum};\n \n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n pub use self::traits::InPlaceIterable;\n \n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n@@ -351,9 +351,10 @@ pub use self::adapters::Cloned;\n pub use self::adapters::Copied;\n #[stable(feature = \"iterator_flatten\", since = \"1.29.0\")]\n pub use self::adapters::Flatten;\n+\n #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n pub use self::adapters::MapWhile;\n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n pub use self::adapters::SourceIter;\n #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n pub use self::adapters::StepBy;"}, {"sha": "f287196da03efccb7317f3c3b5bae06ec251ebd8", "filename": "library/core/src/iter/traits/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmarker.rs?ref=9596e5a2f23771bdbf68b2872b26cce715c8011e", "patch": "@@ -52,5 +52,5 @@ unsafe impl<I: TrustedLen + ?Sized> TrustedLen for &mut I {}\n /// In other words this trait indicates that an iterator pipeline can be collected in place.\n ///\n /// [`SourceIter`]: ../../std/iter/trait.SourceIter.html\n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n pub unsafe trait InPlaceIterable: Iterator {}"}, {"sha": "880f8d831fd922bf9961296dda96ab137871727d", "filename": "library/core/src/iter/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9596e5a2f23771bdbf68b2872b26cce715c8011e/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fmod.rs?ref=9596e5a2f23771bdbf68b2872b26cce715c8011e", "patch": "@@ -11,7 +11,7 @@ pub use self::double_ended::DoubleEndedIterator;\n pub use self::exact_size::ExactSizeIterator;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::iterator::Iterator;\n-#[unstable(issue = \"0\", feature = \"inplace_iteration\")]\n+#[unstable(issue = \"none\", feature = \"inplace_iteration\")]\n pub use self::marker::InPlaceIterable;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::marker::{FusedIterator, TrustedLen};"}]}