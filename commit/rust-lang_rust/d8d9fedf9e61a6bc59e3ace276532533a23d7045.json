{"sha": "d8d9fedf9e61a6bc59e3ace276532533a23d7045", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZDlmZWRmOWU2MWE2YmM1OWUzYWNlMjc2NTMyNTMzYTIzZDcwNDU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-06T12:45:54Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-06T12:48:18Z"}, "message": "Propagate an error rather than panic", "tree": {"sha": "661b3225278541d0da11e998dd38927a53a1a1d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/661b3225278541d0da11e998dd38927a53a1a1d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8d9fedf9e61a6bc59e3ace276532533a23d7045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d9fedf9e61a6bc59e3ace276532533a23d7045", "html_url": "https://github.com/rust-lang/rust/commit/d8d9fedf9e61a6bc59e3ace276532533a23d7045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8d9fedf9e61a6bc59e3ace276532533a23d7045/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e8f4b79072c6d6ba4769f240e0b481d1615d37b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8f4b79072c6d6ba4769f240e0b481d1615d37b", "html_url": "https://github.com/rust-lang/rust/commit/3e8f4b79072c6d6ba4769f240e0b481d1615d37b"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "c042d9d795415782ffd6d816f64c9ea4be590ffe", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8d9fedf9e61a6bc59e3ace276532533a23d7045/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d9fedf9e61a6bc59e3ace276532533a23d7045/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d8d9fedf9e61a6bc59e3ace276532533a23d7045", "patch": "@@ -309,7 +309,7 @@ where\n     // We always skip children for the \"Plain\" write mode, since there is\n     // nothing to distinguish the nested module contents.\n     let skip_children = config.skip_children() || config.write_mode() == config::WriteMode::Plain;\n-    for (path, module) in modules::list_files(krate, parse_session.codemap()) {\n+    for (path, module) in modules::list_files(krate, parse_session.codemap())? {\n         if skip_children && path.as_path() != main_file {\n             continue;\n         }"}, {"sha": "d136f2709914a969f7a7c79ce324909869a59ccf", "filename": "src/modules.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d8d9fedf9e61a6bc59e3ace276532533a23d7045/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d9fedf9e61a6bc59e3ace276532533a23d7045/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=d8d9fedf9e61a6bc59e3ace276532533a23d7045", "patch": "@@ -10,6 +10,7 @@\n \n use std::collections::BTreeMap;\n use std::path::{Path, PathBuf};\n+use std::io;\n \n use syntax::ast;\n use syntax::codemap;\n@@ -23,17 +24,17 @@ use utils::contains_skip;\n pub fn list_files<'a>(\n     krate: &'a ast::Crate,\n     codemap: &codemap::CodeMap,\n-) -> BTreeMap<PathBuf, &'a ast::Mod> {\n+) -> Result<BTreeMap<PathBuf, &'a ast::Mod>, io::Error> {\n     let mut result = BTreeMap::new(); // Enforce file order determinism\n     let root_filename: PathBuf = codemap.span_to_filename(krate.span).into();\n     list_submodules(\n         &krate.module,\n         root_filename.parent().unwrap(),\n         codemap,\n         &mut result,\n-    );\n+    )?;\n     result.insert(root_filename, &krate.module);\n-    result\n+    Ok(result)\n }\n \n /// Recursively list all external modules included in a module.\n@@ -42,7 +43,7 @@ fn list_submodules<'a>(\n     search_dir: &Path,\n     codemap: &codemap::CodeMap,\n     result: &mut BTreeMap<PathBuf, &'a ast::Mod>,\n-) {\n+) -> Result<(), io::Error> {\n     debug!(\"list_submodules: search_dir: {:?}\", search_dir);\n     for item in &module.items {\n         if let ast::ItemKind::Mod(ref sub_mod) = item.node {\n@@ -52,15 +53,16 @@ fn list_submodules<'a>(\n                 let dir_path = if is_internal {\n                     search_dir.join(&item.ident.to_string())\n                 } else {\n-                    let mod_path = module_file(item.ident, &item.attrs, search_dir, codemap);\n+                    let mod_path = module_file(item.ident, &item.attrs, search_dir, codemap)?;\n                     let dir_path = mod_path.parent().unwrap().to_owned();\n                     result.insert(mod_path, sub_mod);\n                     dir_path\n                 };\n-                list_submodules(sub_mod, &dir_path, codemap, result);\n+                list_submodules(sub_mod, &dir_path, codemap, result)?;\n             }\n         }\n     }\n+    Ok(())\n }\n \n /// Find the file corresponding to an external mod\n@@ -69,13 +71,16 @@ fn module_file(\n     attrs: &[ast::Attribute],\n     dir_path: &Path,\n     codemap: &codemap::CodeMap,\n-) -> PathBuf {\n+) -> Result<PathBuf, io::Error> {\n     if let Some(path) = parser::Parser::submod_path_from_attr(attrs, dir_path) {\n-        return path;\n+        return Ok(path);\n     }\n \n     match parser::Parser::default_submod_path(id, dir_path, codemap).result {\n-        Ok(parser::ModulePathSuccess { path, .. }) => path,\n-        Err(_) => unreachable!(\"Couldn't find module {}\", id),\n+        Ok(parser::ModulePathSuccess { path, .. }) => Ok(path),\n+        Err(_) => Err(io::Error::new(\n+            io::ErrorKind::Other,\n+            format!(\"Couldn't find module {}\", id),\n+        )),\n     }\n }"}]}