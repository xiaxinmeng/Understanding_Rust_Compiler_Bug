{"sha": "684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NGM0ZTg0MTlhZTczN2ZhMmUxYmM0YTQzOTYxZTNhNWRhYTdjM2E=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-16T13:10:59Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-17T12:40:46Z"}, "message": "mir/borrowck: a few string tweaks", "tree": {"sha": "8ace1e6d5c0db5ace0c4c695ccd81c789a47debc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ace1e6d5c0db5ace0c4c695ccd81c789a47debc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a", "html_url": "https://github.com/rust-lang/rust/commit/684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ba62dd0f6d3c609a5d5ac61f0e1fc7c6861f66c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba62dd0f6d3c609a5d5ac61f0e1fc7c6861f66c", "html_url": "https://github.com/rust-lang/rust/commit/3ba62dd0f6d3c609a5d5ac61f0e1fc7c6861f66c"}], "stats": {"total": 34, "additions": 16, "deletions": 18}, "files": [{"sha": "a316fc5ca1029ca2f47f86532b5b0e07bcd18f11", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a", "patch": "@@ -92,12 +92,12 @@ impl<'tcx> fmt::Display for BorrowData<'tcx> {\n             mir::BorrowKind::Mut { .. } => \"mut \",\n         };\n         let region = self.region.to_string();\n-        let region = if region.len() > 0 {\n-            format!(\"{} \", region)\n+        let separator = if !region.is_empty() {\n+            \" \"\n         } else {\n-            region\n+            \"\"\n         };\n-        write!(w, \"&{}{}{:?}\", region, kind, self.borrowed_place)\n+        write!(w, \"&{}{}{}{:?}\", region, separator, kind, self.borrowed_place)\n     }\n }\n "}, {"sha": "06918d9ebab37eb10547a31c4cb241fff8a773e3", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a", "patch": "@@ -579,7 +579,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     fn report_local_value_does_not_live_long_enough(\n         &mut self,\n         context: Context,\n-        name: &String,\n+        name: &str,\n         scope_tree: &Lrc<ScopeTree>,\n         borrow: &BorrowData<'tcx>,\n         drop_span: Span,\n@@ -1192,10 +1192,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Place::Static(ref static_) => self.describe_field_from_ty(&static_.ty, field),\n             Place::Projection(ref proj) => match proj.elem {\n                 ProjectionElem::Deref => self.describe_field(&proj.base, field),\n-                ProjectionElem::Downcast(def, variant_index) => format!(\n-                    \"{}\",\n-                    def.variants[variant_index].fields[field.index()].ident\n-                ),\n+                ProjectionElem::Downcast(def, variant_index) =>\n+                    def.variants[variant_index].fields[field.index()].ident.to_string(),\n                 ProjectionElem::Field(_, field_type) => {\n                     self.describe_field_from_ty(&field_type, field)\n                 }\n@@ -1783,8 +1781,8 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n                 ty::RegionKind::RePlaceholder(ty::Placeholder { name: br, .. }),\n                 _,\n                 _,\n-            ) => with_highlight_region_for_bound_region(*br, counter, || format!(\"{}\", ty)),\n-            _ => format!(\"{}\", ty),\n+            ) => with_highlight_region_for_bound_region(*br, counter, || ty.to_string()),\n+            _ => ty.to_string(),\n         }\n     }\n \n@@ -1795,9 +1793,9 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n             ty::TyKind::Ref(region, _, _) => match region {\n                 ty::RegionKind::ReLateBound(_, br)\n                 | ty::RegionKind::RePlaceholder(ty::Placeholder { name: br, .. }) => {\n-                    with_highlight_region_for_bound_region(*br, counter, || format!(\"{}\", region))\n+                    with_highlight_region_for_bound_region(*br, counter, || region.to_string())\n                 }\n-                _ => format!(\"{}\", region),\n+                _ => region.to_string(),\n             },\n             _ => bug!(\"ty for annotation of borrow region is not a reference\"),\n         }"}, {"sha": "a556199b875bf343d046e73740224d0a6b4adcc1", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                             _ => {\n                                 let source = self.borrowed_content_source(place);\n                                 self.infcx.tcx.cannot_move_out_of(\n-                                    span, &format!(\"{}\", source), origin\n+                                    span, &source.to_string(), origin\n                                 )\n                             },\n                         }\n@@ -469,9 +469,9 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n             let binding_span = bind_to.source_info.span;\n \n             if j == 0 {\n-                err.span_label(binding_span, format!(\"data moved here\"));\n+                err.span_label(binding_span, \"data moved here\");\n             } else {\n-                err.span_label(binding_span, format!(\"...and here\"));\n+                err.span_label(binding_span, \"...and here\");\n             }\n \n             if binds_to.len() == 1 {"}, {"sha": "30f4fc9d5ea231388159297f0850924e507bf7b1", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=684c4e8419ae737fa2e1bc4a43961e3a5daa7c3a", "patch": "@@ -504,7 +504,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                                 );\n \n                                 let extra = if found {\n-                                    String::from(\"\")\n+                                    String::new()\n                                 } else {\n                                     format!(\", but it is not implemented for `{}`\",\n                                             substs.type_at(0))\n@@ -583,7 +583,7 @@ fn suggest_ampmut<'cx, 'gcx, 'tcx>(\n                 let ty = &src[ws_pos..];\n                 return (assignment_rhs_span, format!(\"&{} mut {}\", lt_name, ty));\n             } else if src.starts_with('&') {\n-                let borrowed_expr = src[1..].to_string();\n+                let borrowed_expr = &src[1..];\n                 return (assignment_rhs_span, format!(\"&mut {}\", borrowed_expr));\n             }\n         }"}]}