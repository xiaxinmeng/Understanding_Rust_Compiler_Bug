{"sha": "201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMWU1MmU1ZmU3M2NjZjNkZDIyOTQ2YjEyMTZhZDhkNjRmOGMyYmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-22T06:14:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-22T06:14:49Z"}, "message": "Auto merge of #63175 - jsgf:argsfile, r=jsgf\n\nrustc: implement argsfiles for command line\n\nMany tools, such as gcc and gnu-ld, support \"args files\" - that is, being able to specify @file on the command line.  This causes `file` to be opened and parsed for command line options. They're separated with whitespace; whitespace can be quoted with double or single quotes, and everything can be \\\\-escaped. Args files may recursively include other args files via `@file2`.\n\nSee https://sourceware.org/binutils/docs/ld/Options.html#Options for the documentation of gnu-ld's @file parameters.\n\nThis is useful for very large command lines, or when command lines are being generated into files by other tooling.", "tree": {"sha": "806f2cb070e65c8e1bd10e8d41c5ad3d4367c55d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/806f2cb070e65c8e1bd10e8d41c5ad3d4367c55d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "html_url": "https://github.com/rust-lang/rust/commit/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42dcd4b7c5fb7b61bc2f4c0842f66e5ad40057e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/42dcd4b7c5fb7b61bc2f4c0842f66e5ad40057e4", "html_url": "https://github.com/rust-lang/rust/commit/42dcd4b7c5fb7b61bc2f4c0842f66e5ad40057e4"}, {"sha": "d9497749a87440d836495da6d40a5ce667a67ccb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9497749a87440d836495da6d40a5ce667a67ccb", "html_url": "https://github.com/rust-lang/rust/commit/d9497749a87440d836495da6d40a5ce667a67ccb"}], "stats": {"total": 147, "additions": 139, "deletions": 8}, "files": [{"sha": "5eea9c86879001ef9a13ee6f3c8ecbc487697ccc", "filename": "src/doc/rustc/src/command-line-arguments.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcommand-line-arguments.md?ref=201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "patch": "@@ -304,3 +304,10 @@ to customize the output:\n \n Note that it is invalid to combine the `--json` argument with the `--color`\n argument, and it is required to combine `--json` with `--error-format=json`.\n+\n+## `@path`: load command-line flags from a path\n+\n+If you specify `@path` on the command-line, then it will open `path` and read\n+command line options from it. These options are one per line; a blank line indicates\n+an empty option. The file can use Unix or Windows style line endings, and must be\n+encoded as UTF-8."}, {"sha": "0906d358badd49dcbd940e5fc6e2f59ccd817756", "filename": "src/librustc_driver/args.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Flibrustc_driver%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Flibrustc_driver%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fargs.rs?ref=201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "patch": "@@ -0,0 +1,53 @@\n+use std::error;\n+use std::fmt;\n+use std::fs;\n+use std::io;\n+use std::str;\n+use std::sync::atomic::{AtomicBool, Ordering};\n+\n+static USED_ARGSFILE_FEATURE: AtomicBool = AtomicBool::new(false);\n+\n+pub fn used_unstable_argsfile() -> bool {\n+    USED_ARGSFILE_FEATURE.load(Ordering::Relaxed)\n+}\n+\n+pub fn arg_expand(arg: String) -> Result<Vec<String>, Error> {\n+    if arg.starts_with(\"@\") {\n+        let path = &arg[1..];\n+        let file = match fs::read_to_string(path) {\n+            Ok(file) => {\n+                USED_ARGSFILE_FEATURE.store(true, Ordering::Relaxed);\n+                file\n+            }\n+            Err(ref err) if err.kind() == io::ErrorKind::InvalidData => {\n+                return Err(Error::Utf8Error(Some(path.to_string())));\n+            }\n+            Err(err) => return Err(Error::IOError(path.to_string(), err)),\n+        };\n+        Ok(file.lines().map(ToString::to_string).collect())\n+    } else {\n+        Ok(vec![arg])\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub enum Error {\n+    Utf8Error(Option<String>),\n+    IOError(String, io::Error),\n+}\n+\n+impl fmt::Display for Error {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Error::Utf8Error(None) => write!(fmt, \"Utf8 error\"),\n+            Error::Utf8Error(Some(path)) => write!(fmt, \"Utf8 error in {}\", path),\n+            Error::IOError(path, err) => write!(fmt, \"IO Error: {}: {}\", path, err),\n+        }\n+    }\n+}\n+\n+impl error::Error for Error {\n+    fn description(&self) -> &'static str {\n+        \"argument error\"\n+    }\n+}"}, {"sha": "e7712ae115f5480dfd067eaecfd1dc3ee5ce3cea", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "patch": "@@ -68,6 +68,7 @@ use syntax::symbol::sym;\n use syntax_pos::{DUMMY_SP, MultiSpan, FileName};\n \n pub mod pretty;\n+mod args;\n \n /// Exit status code used for successful compilation and help output.\n pub const EXIT_SUCCESS: i32 = 0;\n@@ -141,14 +142,22 @@ impl Callbacks for TimePassesCallbacks {\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n pub fn run_compiler(\n-    args: &[String],\n+    at_args: &[String],\n     callbacks: &mut (dyn Callbacks + Send),\n     file_loader: Option<Box<dyn FileLoader + Send + Sync>>,\n     emitter: Option<Box<dyn Write + Send>>\n ) -> interface::Result<()> {\n+    let mut args = Vec::new();\n+    for arg in at_args {\n+        match args::arg_expand(arg.clone()) {\n+            Ok(arg) => args.extend(arg),\n+            Err(err) => early_error(ErrorOutputType::default(),\n+                &format!(\"Failed to load argument file: {}\", err)),\n+        }\n+    }\n     let diagnostic_output = emitter.map(|emitter| DiagnosticOutput::Raw(emitter))\n                                    .unwrap_or(DiagnosticOutput::Default);\n-    let matches = match handle_options(args) {\n+    let matches = match handle_options(&args) {\n         Some(matches) => matches,\n         None => return Ok(()),\n     };\n@@ -779,13 +788,19 @@ fn usage(verbose: bool, include_unstable_options: bool) {\n     } else {\n         \"\\n    --help -v           Print the full set of options rustc accepts\"\n     };\n-    println!(\"{}\\nAdditional help:\n+    let at_path = if verbose && nightly_options::is_nightly_build() {\n+        \"    @path               Read newline separated options from `path`\\n\"\n+    } else {\n+        \"\"\n+    };\n+    println!(\"{options}{at_path}\\nAdditional help:\n     -C help             Print codegen options\n     -W help             \\\n-              Print 'lint' options and default settings{}{}\\n\",\n-             options.usage(message),\n-             nightly_help,\n-             verbose_help);\n+              Print 'lint' options and default settings{nightly}{verbose}\\n\",\n+             options = options.usage(message),\n+             at_path = at_path,\n+             nightly = nightly_help,\n+             verbose = verbose_help);\n }\n \n fn print_wall_help() {\n@@ -1010,6 +1025,12 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     //   (unstable option being used on stable)\n     nightly_options::check_nightly_options(&matches, &config::rustc_optgroups());\n \n+    // Late check to see if @file was used without unstable options enabled\n+    if crate::args::used_unstable_argsfile() && !nightly_options::is_unstable_enabled(&matches) {\n+        early_error(ErrorOutputType::default(),\n+            \"@path is unstable - use -Z unstable-options to enable its use\");\n+    }\n+\n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n         // Only show unstable options in --help if we accept unstable options.\n         usage(matches.opt_present(\"verbose\"), nightly_options::is_unstable_enabled(&matches));\n@@ -1190,7 +1211,7 @@ pub fn main() {\n     let result = report_ices_to_stderr_if_any(|| {\n         let args = env::args_os().enumerate()\n             .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n-                early_error(ErrorOutputType::default(),\n+                    early_error(ErrorOutputType::default(),\n                             &format!(\"Argument {} is not valid Unicode: {:?}\", i, arg))\n             }))\n             .collect::<Vec<_>>();"}, {"sha": "c070b0c2400d84bf703e9c647d2b988c60fca366", "filename": "src/test/ui/commandline-argfile-badutf8.args", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.args", "raw_url": "https://github.com/rust-lang/rust/raw/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.args", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.args?ref=201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "patch": "@@ -0,0 +1,2 @@\n+--cfg\n+unbroken\ufffd\n\\ No newline at end of file"}, {"sha": "161715685b57fa70d35e1ebc4467017c439273fd", "filename": "src/test/ui/commandline-argfile-badutf8.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.rs?ref=201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "patch": "@@ -0,0 +1,13 @@\n+// Check to see if we can get parameters from an @argsfile file\n+//\n+// build-fail\n+// compile-flags: --cfg cmdline_set @{{src-base}}/commandline-argfile-badutf8.args\n+\n+#[cfg(not(cmdline_set))]\n+compile_error!(\"cmdline_set not set\");\n+\n+#[cfg(not(unbroken))]\n+compile_error!(\"unbroken not set\");\n+\n+fn main() {\n+}"}, {"sha": "9af6fc0a518dfd05e76c56920bbd17ff3359e18e", "filename": "src/test/ui/commandline-argfile-badutf8.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-badutf8.stderr?ref=201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "patch": "@@ -0,0 +1,2 @@\n+error: Failed to load argument file: Utf8 error in $DIR/commandline-argfile-badutf8.args\n+"}, {"sha": "a29b4ab062de34c90ed2308687048590fece805e", "filename": "src/test/ui/commandline-argfile-missing.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-missing.rs?ref=201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "patch": "@@ -0,0 +1,16 @@\n+// Check to see if we can get parameters from an @argsfile file\n+//\n+// ignore-tidy-linelength\n+// build-fail\n+// normalize-stderr-test: \"os error \\d+\" -> \"os error $$ERR\"\n+// normalize-stderr-test: \"commandline-argfile-missing.args:[^(]*\" -> \"commandline-argfile-missing.args: $$FILE_MISSING \"\n+// compile-flags: --cfg cmdline_set @{{src-base}}/commandline-argfile-missing.args\n+\n+#[cfg(not(cmdline_set))]\n+compile_error!(\"cmdline_set not set\");\n+\n+#[cfg(not(unbroken))]\n+compile_error!(\"unbroken not set\");\n+\n+fn main() {\n+}"}, {"sha": "179ad83100419591c92ae7f948be2255c2fcd193", "filename": "src/test/ui/commandline-argfile-missing.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile-missing.stderr?ref=201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "patch": "@@ -0,0 +1,2 @@\n+error: Failed to load argument file: IO Error: $DIR/commandline-argfile-missing.args: $FILE_MISSING (os error $ERR)\n+"}, {"sha": "972938bf6c8dddf9a1a3a24d94e3fdc20f07fc29", "filename": "src/test/ui/commandline-argfile.args", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile.args", "raw_url": "https://github.com/rust-lang/rust/raw/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile.args", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile.args?ref=201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "patch": "@@ -0,0 +1,2 @@\n+--cfg\n+unbroken\n\\ No newline at end of file"}, {"sha": "fc1ba0c8d677d7a57d8d3eb9c1e415107449ccb6", "filename": "src/test/ui/commandline-argfile.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba/src%2Ftest%2Fui%2Fcommandline-argfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommandline-argfile.rs?ref=201e52e5fe73ccf3dd22946b1216ad8d64f8c2ba", "patch": "@@ -0,0 +1,13 @@\n+// Check to see if we can get parameters from an @argsfile file\n+//\n+// build-pass\n+// compile-flags: --cfg cmdline_set @{{src-base}}/commandline-argfile.args\n+\n+#[cfg(not(cmdline_set))]\n+compile_error!(\"cmdline_set not set\");\n+\n+#[cfg(not(unbroken))]\n+compile_error!(\"unbroken not set\");\n+\n+fn main() {\n+}"}]}