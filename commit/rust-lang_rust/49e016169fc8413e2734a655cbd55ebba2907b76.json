{"sha": "49e016169fc8413e2734a655cbd55ebba2907b76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZTAxNjE2OWZjODQxM2UyNzM0YTY1NWNiZDU1ZWJiYTI5MDdiNzY=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-10T08:22:13Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-31T19:03:47Z"}, "message": "Check pattern types.", "tree": {"sha": "7688ba28eea44454e4d541890e1d311a3a87fffb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7688ba28eea44454e4d541890e1d311a3a87fffb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49e016169fc8413e2734a655cbd55ebba2907b76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49e016169fc8413e2734a655cbd55ebba2907b76", "html_url": "https://github.com/rust-lang/rust/commit/49e016169fc8413e2734a655cbd55ebba2907b76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49e016169fc8413e2734a655cbd55ebba2907b76/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b841a9a044d9d71cece62a3e44880325bc15f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b841a9a044d9d71cece62a3e44880325bc15f78", "html_url": "https://github.com/rust-lang/rust/commit/9b841a9a044d9d71cece62a3e44880325bc15f78"}], "stats": {"total": 115, "additions": 85, "deletions": 30}, "files": [{"sha": "e4e9ab5c03b18ade6ed8400cd251d6107c5b435d", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 48, "deletions": 29, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/49e016169fc8413e2734a655cbd55ebba2907b76/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e016169fc8413e2734a655cbd55ebba2907b76/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=49e016169fc8413e2734a655cbd55ebba2907b76", "patch": "@@ -379,32 +379,58 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         let (body, source_map): (Arc<Body>, Arc<BodySourceMap>) =\n             db.body_with_source_map(self.owner);\n \n-        let _match_expr_ty = if infer.type_of_expr[match_expr].is_unknown() {\n+        let match_expr_ty = if infer.type_of_expr[match_expr].is_unknown() {\n             return;\n         } else {\n             &infer.type_of_expr[match_expr]\n         };\n-        // eprintln!(\"ExprValidator::validate_match2({:?})\", _match_expr_ty.kind(&Interner));\n \n         let pattern_arena = RefCell::new(PatternArena::new());\n \n-        let mut have_errors = false;\n-        let m_arms: Vec<_> = arms\n-            .iter()\n-            .map(|arm| usefulness::MatchArm {\n-                pat: self.lower_pattern(\n-                    arm.pat,\n-                    &mut pattern_arena.borrow_mut(),\n-                    db,\n-                    &body,\n-                    &mut have_errors,\n-                ),\n-                has_guard: arm.guard.is_some(),\n-            })\n-            .collect();\n-\n-        // Bail out early if lowering failed.\n-        if have_errors {\n+        let mut m_arms = Vec::new();\n+        let mut has_lowering_errors = false;\n+        for arm in arms {\n+            if let Some(pat_ty) = infer.type_of_pat.get(arm.pat) {\n+                // We only include patterns whose type matches the type\n+                // of the match expression. If we had a InvalidMatchArmPattern\n+                // diagnostic or similar we could raise that in an else\n+                // block here.\n+                //\n+                // When comparing the types, we also have to consider that rustc\n+                // will automatically de-reference the match expression type if\n+                // necessary.\n+                //\n+                // FIXME we should use the type checker for this.\n+                if pat_ty == match_expr_ty\n+                    || match_expr_ty\n+                        .as_reference()\n+                        .map(|(match_expr_ty, ..)| match_expr_ty == pat_ty)\n+                        .unwrap_or(false)\n+                {\n+                    // If we had a NotUsefulMatchArm diagnostic, we could\n+                    // check the usefulness of each pattern as we added it\n+                    // to the matrix here.\n+                    let m_arm = usefulness::MatchArm {\n+                        pat: self.lower_pattern(\n+                            arm.pat,\n+                            &mut pattern_arena.borrow_mut(),\n+                            db,\n+                            &body,\n+                            &mut has_lowering_errors,\n+                        ),\n+                        has_guard: arm.guard.is_some(),\n+                    };\n+                    m_arms.push(m_arm);\n+                    if !has_lowering_errors {\n+                        continue;\n+                    }\n+                }\n+            }\n+\n+            // If we can't resolve the type of a pattern, or the pattern type doesn't\n+            // fit the match expression, we skip this diagnostic. Skipping the entire\n+            // diagnostic rather than just not including this match arm is preferred\n+            // to avoid the chance of false positives.\n             return;\n         }\n \n@@ -418,18 +444,11 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         };\n         let report = usefulness::compute_match_usefulness(&cx, &m_arms);\n \n-        // TODO Report unreacheble arms\n-        // let mut catchall = None;\n-        // for (arm_index, (arm, is_useful)) in report.arm_usefulness.iter().enumerate() {\n-        //     match is_useful{\n-        //         Unreachable => {\n-        //         }\n-        //         Reachable(_) => {}\n-        //     }\n-        // }\n+        // FIXME Report unreacheble arms\n+        // https://github.com/rust-lang/rust/blob/25c15cdbe/compiler/rustc_mir_build/src/thir/pattern/check_match.rs#L200-L201\n \n         let witnesses = report.non_exhaustiveness_witnesses;\n-        eprintln!(\"compute_match_usefulness(..) -> {:?}\", &witnesses);\n+        // eprintln!(\"compute_match_usefulness(..) -> {:?}\", &witnesses);\n         if !witnesses.is_empty() {\n             if let Ok(source_ptr) = source_map.expr_syntax(id) {\n                 let root = source_ptr.file_syntax(db.upcast());"}, {"sha": "38e4b53b7fb9230f01757d684c26a8ab2553044e", "filename": "crates/hir_ty/src/diagnostics/pattern.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/49e016169fc8413e2734a655cbd55ebba2907b76/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e016169fc8413e2734a655cbd55ebba2907b76/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern.rs?ref=49e016169fc8413e2734a655cbd55ebba2907b76", "patch": "@@ -511,4 +511,40 @@ fn main() {\n \"#,\n         );\n     }\n+\n+    /// These failing tests are narrowed down from \"hir_ty::diagnostics::match_check::tests\"\n+    // TODO fix\n+    mod failing {\n+        use super::*;\n+\n+        #[test]\n+        fn never() {\n+            check_diagnostics(\n+                r#\"\n+enum Never {}\n+\n+fn enum_ref(never: &Never) {\n+    match never {}\n+}\n+\"#,\n+            );\n+        }\n+\n+        #[test]\n+        fn unknown_type() {\n+            check_diagnostics(\n+                r#\"\n+enum Option<T> { Some(T), None }\n+\n+fn main() {\n+    // `Never` is deliberately not defined so that it's an uninferred type.\n+    match Option::<Never>::None {\n+        None => {}\n+        Some(never) => {}\n+    }\n+}\n+\"#,\n+            );\n+        }\n+    }\n }"}, {"sha": "01a7fb0d9a1a0786adad589d3744db8c6eea22af", "filename": "crates/hir_ty/src/diagnostics/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49e016169fc8413e2734a655cbd55ebba2907b76/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49e016169fc8413e2734a655cbd55ebba2907b76/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fpattern%2Fusefulness.rs?ref=49e016169fc8413e2734a655cbd55ebba2907b76", "patch": "@@ -28,7 +28,7 @@ pub(crate) struct MatchCheckCtx<'a> {\n     pub(crate) body: Arc<Body>,\n     pub(crate) infer: &'a InferenceResult,\n     pub(crate) db: &'a dyn HirDatabase,\n-    /// Patterns from self.body.pats plus generated by the check.\n+    /// Lowered patterns from self.body.pats plus generated by the check.\n     pub(crate) pattern_arena: &'a RefCell<PatternArena>,\n }\n "}]}