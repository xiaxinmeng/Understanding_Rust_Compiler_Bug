{"sha": "249dc9e5cd5abaea710345fcabca815e5e59eec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0OWRjOWU1Y2Q1YWJhZWE3MTAzNDVmY2FiY2E4MTVlNWU1OWVlYzY=", "commit": {"author": {"name": "Steven Malis", "email": "smmalis37@gmail.com", "date": "2018-04-08T04:09:26Z"}, "committer": {"name": "Steven Malis", "email": "smmalis37@gmail.com", "date": "2018-04-08T06:51:12Z"}, "message": "Add float NaN tests.", "tree": {"sha": "88619a7a46aa88a55ba9071bf434e9a1da1d253f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88619a7a46aa88a55ba9071bf434e9a1da1d253f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/249dc9e5cd5abaea710345fcabca815e5e59eec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/249dc9e5cd5abaea710345fcabca815e5e59eec6", "html_url": "https://github.com/rust-lang/rust/commit/249dc9e5cd5abaea710345fcabca815e5e59eec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/249dc9e5cd5abaea710345fcabca815e5e59eec6/comments", "author": {"login": "smmalis37", "id": 4054472, "node_id": "MDQ6VXNlcjQwNTQ0NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4054472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smmalis37", "html_url": "https://github.com/smmalis37", "followers_url": "https://api.github.com/users/smmalis37/followers", "following_url": "https://api.github.com/users/smmalis37/following{/other_user}", "gists_url": "https://api.github.com/users/smmalis37/gists{/gist_id}", "starred_url": "https://api.github.com/users/smmalis37/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smmalis37/subscriptions", "organizations_url": "https://api.github.com/users/smmalis37/orgs", "repos_url": "https://api.github.com/users/smmalis37/repos", "events_url": "https://api.github.com/users/smmalis37/events{/privacy}", "received_events_url": "https://api.github.com/users/smmalis37/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smmalis37", "id": 4054472, "node_id": "MDQ6VXNlcjQwNTQ0NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4054472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smmalis37", "html_url": "https://github.com/smmalis37", "followers_url": "https://api.github.com/users/smmalis37/followers", "following_url": "https://api.github.com/users/smmalis37/following{/other_user}", "gists_url": "https://api.github.com/users/smmalis37/gists{/gist_id}", "starred_url": "https://api.github.com/users/smmalis37/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smmalis37/subscriptions", "organizations_url": "https://api.github.com/users/smmalis37/orgs", "repos_url": "https://api.github.com/users/smmalis37/repos", "events_url": "https://api.github.com/users/smmalis37/events{/privacy}", "received_events_url": "https://api.github.com/users/smmalis37/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16f30c2da2a92ff9264935ac309b3e94bbd83ddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/16f30c2da2a92ff9264935ac309b3e94bbd83ddf", "html_url": "https://github.com/rust-lang/rust/commit/16f30c2da2a92ff9264935ac309b3e94bbd83ddf"}], "stats": {"total": 80, "additions": 59, "deletions": 21}, "files": [{"sha": "868308cafd131405aa3bf9e16da4e8fd14a49054", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 59, "deletions": 21, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/249dc9e5cd5abaea710345fcabca815e5e59eec6/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/249dc9e5cd5abaea710345fcabca815e5e59eec6/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=249dc9e5cd5abaea710345fcabca815e5e59eec6", "patch": "@@ -100,13 +100,20 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// ```\n     /// #![feature(range_contains)]\n     ///\n+    /// use std::f32;\n+    ///\n     /// assert!(!(3..5).contains(&2));\n     /// assert!( (3..5).contains(&3));\n     /// assert!( (3..5).contains(&4));\n     /// assert!(!(3..5).contains(&5));\n     ///\n     /// assert!(!(3..3).contains(&3));\n     /// assert!(!(3..2).contains(&3));\n+    ///\n+    /// assert!( (0.0..1.0).contains(&0.5));\n+    /// assert!(!(0.0..1.0).contains(&f32::NAN));\n+    /// assert!(!(0.0..f32::NAN).contains(&0.5));\n+    /// assert!(!(f32::NAN..1.0).contains(&0.5));\n     /// ```\n     #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n@@ -191,9 +198,15 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n     /// ```\n     /// #![feature(range_contains)]\n     ///\n+    /// use std::f32;\n+    ///\n     /// assert!(!(3..).contains(&2));\n     /// assert!( (3..).contains(&3));\n     /// assert!( (3..).contains(&1_000_000_000));\n+    ///\n+    /// assert!( (0.0..).contains(&0.5));\n+    /// assert!(!(0.0..).contains(&f32::NAN));\n+    /// assert!(!(f32::NAN..).contains(&0.5));\n     /// ```\n     #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n@@ -266,9 +279,15 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n     /// ```\n     /// #![feature(range_contains)]\n     ///\n+    /// use std::f32;\n+    ///\n     /// assert!( (..5).contains(&-1_000_000_000));\n     /// assert!( (..5).contains(&4));\n     /// assert!(!(..5).contains(&5));\n+    ///\n+    /// assert!( (..1.0).contains(&0.5));\n+    /// assert!(!(..1.0).contains(&f32::NAN));\n+    /// assert!(!(..f32::NAN).contains(&0.5));\n     /// ```\n     #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n@@ -330,6 +349,8 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// ```\n     /// #![feature(range_contains)]\n     ///\n+    /// use std::f32;\n+    ///\n     /// assert!(!(3..=5).contains(&2));\n     /// assert!( (3..=5).contains(&3));\n     /// assert!( (3..=5).contains(&4));\n@@ -338,6 +359,11 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     ///\n     /// assert!( (3..=3).contains(&3));\n     /// assert!(!(3..=2).contains(&3));\n+    ///\n+    /// assert!( (0.0..=1.0).contains(&1.0));\n+    /// assert!(!(0.0..=1.0).contains(&f32::NAN));\n+    /// assert!(!(0.0..=f32::NAN).contains(&0.0));\n+    /// assert!(!(f32::NAN..=1.0).contains(&1.0));\n     /// ```\n     #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n@@ -447,9 +473,15 @@ impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n     /// ```\n     /// #![feature(range_contains)]\n     ///\n+    /// use std::f32;\n+    ///\n     /// assert!( (..=5).contains(&-1_000_000_000));\n     /// assert!( (..=5).contains(&5));\n     /// assert!(!(..=5).contains(&6));\n+    ///\n+    /// assert!( (..=1.0).contains(&1.0));\n+    /// assert!(!(..=1.0).contains(&f32::NAN));\n+    /// assert!(!(..=f32::NAN).contains(&0.5));\n     /// ```\n     #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n@@ -559,34 +591,40 @@ pub trait RangeBounds<T: ?Sized> {\n     /// ```\n     fn end(&self) -> Bound<&T>;\n \n+\n     /// Returns `true` if `item` is contained in the range.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(range_contains)]\n+    ///\n+    /// use std::f32;\n+    ///\n+    /// assert!( (3..5).contains(&4));\n+    /// assert!(!(3..5).contains(&2));\n+    ///\n+    /// assert!( (0.0..1.0).contains(&0.5));\n+    /// assert!(!(0.0..1.0).contains(&f32::NAN));\n+    /// assert!(!(0.0..f32::NAN).contains(&0.5));\n+    /// assert!(!(f32::NAN..1.0).contains(&0.5));\n     #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n     fn contains<U>(&self, item: &U) -> bool\n     where\n         T: PartialOrd<U>,\n         U: ?Sized,\n     {\n-        match self.start() {\n-            Included(ref start) => if *start > item {\n-                return false;\n-            },\n-            Excluded(ref start) => if *start >= item {\n-                return false;\n-            },\n-            Unbounded => (),\n-        };\n-\n-        match self.end() {\n-            Included(ref end) => if *end < item  {\n-                return false;\n-            },\n-            Excluded(ref end) => if *end <= item {\n-                return false;\n-            },\n-            Unbounded => (),\n-        }\n-\n-        true\n+        (match self.start() {\n+            Included(ref start) => *start <= item,\n+            Excluded(ref start) => *start < item,\n+            Unbounded => true,\n+        })\n+        &&\n+        (match self.end() {\n+            Included(ref end) => *end >= item,\n+            Excluded(ref end) => *end > item,\n+            Unbounded => true,\n+        })\n     }\n }\n "}]}