{"sha": "c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OWRlMmM1NmJhZWI2MWU3Y2M0MzQ5MjRkY2M4YmVkZDMyYjI2Yjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-28T22:11:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-28T22:11:49Z"}, "message": "Auto merge of #23300 - sfackler:rm-iterator-ext, r=alexcrichton\n\nAll methods are inlined into Iterator with `Self: Sized` bounds to make\r\nsure Iterator is still object safe.\r\n\r\n[breaking-change]\r\n\r\nThis is blocked on ICEs: https://gist.github.com/sfackler/5aff7c57cf8d896e2c6f\r\nSeem to be similar to #23281.", "tree": {"sha": "8a2dced6be4fee3b13783e13521c665211ffdd3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a2dced6be4fee3b13783e13521c665211ffdd3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "html_url": "https://github.com/rust-lang/rust/commit/c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01f2c67c966297279e42be5285ccae9f5b43703e", "url": "https://api.github.com/repos/rust-lang/rust/commits/01f2c67c966297279e42be5285ccae9f5b43703e", "html_url": "https://github.com/rust-lang/rust/commit/01f2c67c966297279e42be5285ccae9f5b43703e"}, {"sha": "d502f4221fd5472c4a7905cdc3c59533e9612822", "url": "https://api.github.com/repos/rust-lang/rust/commits/d502f4221fd5472c4a7905cdc3c59533e9612822", "html_url": "https://github.com/rust-lang/rust/commit/d502f4221fd5472c4a7905cdc3c59533e9612822"}], "stats": {"total": 259, "additions": 130, "deletions": 129}, "files": [{"sha": "5b392c87652fa027dfa65e0de9fc235364d59ab4", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -951,7 +951,7 @@ impl<A: Hash> Hash for LinkedList<A> {\n #[cfg(test)]\n mod test {\n     use std::clone::Clone;\n-    use std::iter::{Iterator, IteratorExt};\n+    use std::iter::Iterator;\n     use std::option::Option::{Some, None, self};\n     use std::rand;\n     use std::thread;"}, {"sha": "ba1ab75de803a432e33e9775d98abcc77a26216a", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -76,7 +76,6 @@\n //!   iterators.\n //! * Further methods that return iterators are `.split()`, `.splitn()`,\n //!   `.chunks()`, `.windows()` and more.\n-\n #![doc(primitive = \"slice\")]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -85,7 +84,7 @@ use core::convert::AsRef;\n use core::clone::Clone;\n use core::cmp::Ordering::{self, Greater, Less};\n use core::cmp::{self, Ord, PartialEq};\n-use core::iter::{Iterator, IteratorExt};\n+use core::iter::Iterator;\n use core::iter::MultiplicativeIterator;\n use core::marker::Sized;\n use core::mem::size_of;\n@@ -131,7 +130,7 @@ mod hack {\n     use alloc::boxed::Box;\n     use core::clone::Clone;\n     #[cfg(test)]\n-    use core::iter::{Iterator, IteratorExt};\n+    use core::iter::Iterator;\n     use core::mem;\n     #[cfg(test)]\n     use core::option::Option::{Some, None};"}, {"sha": "0665abc9e9585fb12db8cb4c913cddddf777a5e0", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -58,7 +58,7 @@ use self::DecompositionType::*;\n \n use core::clone::Clone;\n use core::iter::AdditiveIterator;\n-use core::iter::{Iterator, IteratorExt, Extend};\n+use core::iter::{Iterator, Extend};\n use core::option::Option::{self, Some, None};\n use core::result::Result;\n use core::str as core_str;"}, {"sha": "8f3f4e6b890e0d75a602394c8b54aa2d55895a27", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -1785,7 +1785,7 @@ impl<T: fmt::Debug> fmt::Debug for VecDeque<T> {\n \n #[cfg(test)]\n mod test {\n-    use core::iter::{IteratorExt, self};\n+    use core::iter::{Iterator, self};\n     use core::option::Option::Some;\n \n     use test;"}, {"sha": "e883b07dc5a48fde17e02877d35858e79071c8ec", "filename": "src/libcollectionstest/bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcollectionstest%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcollectionstest%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbench.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -66,7 +66,7 @@ macro_rules! map_find_rand_bench {\n     ($name: ident, $n: expr, $map: ident) => (\n         #[bench]\n         pub fn $name(b: &mut ::test::Bencher) {\n-            use std::iter::IteratorExt;\n+            use std::iter::Iterator;\n             use std::rand::Rng;\n             use std::rand;\n             use std::vec::Vec;"}, {"sha": "6e82b18abc6aedc9533b7c8453262c68291c4bce", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -17,7 +17,7 @@ pub use self::SignFormat::*;\n use char;\n use char::CharExt;\n use fmt;\n-use iter::IteratorExt;\n+use iter::Iterator;\n use num::{cast, Float, ToPrimitive};\n use num::FpCategory as Fp;\n use ops::FnOnce;"}, {"sha": "a3de23bd7f3ccaa362b93d2e9365265c6e835c43", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -15,7 +15,7 @@\n use any;\n use cell::{Cell, RefCell, Ref, RefMut, BorrowState};\n use char::CharExt;\n-use iter::{Iterator, IteratorExt};\n+use iter::Iterator;\n use marker::{Copy, PhantomData, Sized};\n use mem;\n use option::Option;"}, {"sha": "974252a92af22296479dfa57fcc9265153c14b7c", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -15,7 +15,7 @@\n #![allow(unsigned_negation)]\n \n use fmt;\n-use iter::IteratorExt;\n+use iter::Iterator;\n use num::{Int, cast};\n use slice::SliceExt;\n use str;"}, {"sha": "bb057c553db05af4726e6a062c4e0a4caeca30e1", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 94, "deletions": 89, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -71,6 +71,8 @@ use option::Option::{Some, None};\n use marker::Sized;\n use usize;\n \n+fn _assert_is_object_safe(_: &Iterator) {}\n+\n /// An interface for dealing with \"external iterators\". These types of iterators\n /// can be resumed at any time as all state is stored internally as opposed to\n /// being located on the call stack.\n@@ -101,62 +103,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn size_hint(&self) -> (usize, Option<usize>) { (0, None) }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n-    type Item = I::Item;\n-    fn next(&mut self) -> Option<I::Item> { (**self).next() }\n-    fn size_hint(&self) -> (usize, Option<usize>) { (**self).size_hint() }\n-}\n-\n-/// Conversion from an `Iterator`\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be \\\n-                          built from an iterator over elements of type `{A}`\"]\n-pub trait FromIterator<A> {\n-    /// Build a container with elements from something iterable.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn from_iter<T: IntoIterator<Item=A>>(iterator: T) -> Self;\n-}\n-\n-/// Conversion into an `Iterator`\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait IntoIterator {\n-    /// The type of the elements being iterated\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    type Item;\n-\n-    /// A container for iterating over elements of type Item\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    type IntoIter: Iterator<Item=Self::Item>;\n-\n-    /// Consumes `Self` and returns an iterator over it\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn into_iter(self) -> Self::IntoIter;\n-}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I: Iterator> IntoIterator for I {\n-    type Item = I::Item;\n-    type IntoIter = I;\n-\n-    fn into_iter(self) -> I {\n-        self\n-    }\n-}\n-\n-/// A type growable from an `Iterator` implementation\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait Extend<A> {\n-    /// Extend a container with the elements yielded by an arbitrary iterator\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn extend<T: IntoIterator<Item=A>>(&mut self, iterable: T);\n-}\n-\n-/// An extension trait providing numerous methods applicable to all iterators.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait IteratorExt: Iterator + Sized {\n     /// Counts the number of elements in this iterator.\n     ///\n     /// # Examples\n@@ -167,7 +114,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn count(self) -> usize {\n+    fn count(self) -> usize where Self: Sized {\n         self.fold(0, |cnt, _x| cnt + 1)\n     }\n \n@@ -181,7 +128,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn last(self) -> Option<Self::Item> {\n+    fn last(self) -> Option<Self::Item> where Self: Sized {\n         let mut last = None;\n         for x in self { last = Some(x); }\n         last\n@@ -200,7 +147,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn nth(&mut self, mut n: usize) -> Option<Self::Item> {\n+    fn nth(&mut self, mut n: usize) -> Option<Self::Item> where Self: Sized {\n         for x in self.by_ref() {\n             if n == 0 { return Some(x) }\n             n -= 1;\n@@ -225,7 +172,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn chain<U>(self, other: U) -> Chain<Self, U> where\n-        U: Iterator<Item=Self::Item>,\n+        Self: Sized, U: Iterator<Item=Self::Item>,\n     {\n         Chain{a: self, b: other, flag: false}\n     }\n@@ -260,7 +207,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// both produce the same output.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn zip<U: Iterator>(self, other: U) -> Zip<Self, U> {\n+    fn zip<U: Iterator>(self, other: U) -> Zip<Self, U> where Self: Sized {\n         Zip{a: self, b: other}\n     }\n \n@@ -279,7 +226,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn map<B, F>(self, f: F) -> Map<Self, F> where\n-        F: FnMut(Self::Item) -> B,\n+        Self: Sized, F: FnMut(Self::Item) -> B,\n     {\n         Map{iter: self, f: f}\n     }\n@@ -299,7 +246,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn filter<P>(self, predicate: P) -> Filter<Self, P> where\n-        P: FnMut(&Self::Item) -> bool,\n+        Self: Sized, P: FnMut(&Self::Item) -> bool,\n     {\n         Filter{iter: self, predicate: predicate}\n     }\n@@ -319,7 +266,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> where\n-        F: FnMut(Self::Item) -> Option<B>,\n+        Self: Sized, F: FnMut(Self::Item) -> Option<B>,\n     {\n         FilterMap { iter: self, f: f }\n     }\n@@ -341,7 +288,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn enumerate(self) -> Enumerate<Self> {\n+    fn enumerate(self) -> Enumerate<Self> where Self: Sized {\n         Enumerate{iter: self, count: 0}\n     }\n \n@@ -365,7 +312,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn peekable(self) -> Peekable<Self> {\n+    fn peekable(self) -> Peekable<Self> where Self: Sized {\n         Peekable{iter: self, peeked: None}\n     }\n \n@@ -386,7 +333,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn skip_while<P>(self, predicate: P) -> SkipWhile<Self, P> where\n-        P: FnMut(&Self::Item) -> bool,\n+        Self: Sized, P: FnMut(&Self::Item) -> bool,\n     {\n         SkipWhile{iter: self, flag: false, predicate: predicate}\n     }\n@@ -407,7 +354,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn take_while<P>(self, predicate: P) -> TakeWhile<Self, P> where\n-        P: FnMut(&Self::Item) -> bool,\n+        Self: Sized, P: FnMut(&Self::Item) -> bool,\n     {\n         TakeWhile{iter: self, flag: false, predicate: predicate}\n     }\n@@ -426,7 +373,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn skip(self, n: usize) -> Skip<Self> {\n+    fn skip(self, n: usize) -> Skip<Self> where Self: Sized {\n         Skip{iter: self, n: n}\n     }\n \n@@ -445,7 +392,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn take(self, n: usize) -> Take<Self> {\n+    fn take(self, n: usize) -> Take<Self> where Self: Sized, {\n         Take{iter: self, n: n}\n     }\n \n@@ -472,7 +419,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F>\n-        where F: FnMut(&mut St, Self::Item) -> Option<B>,\n+        where Self: Sized, F: FnMut(&mut St, Self::Item) -> Option<B>,\n     {\n         Scan{iter: self, f: f, state: initial_state}\n     }\n@@ -495,7 +442,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn flat_map<U, F>(self, f: F) -> FlatMap<Self, U, F>\n-        where U: Iterator, F: FnMut(Self::Item) -> U,\n+        where Self: Sized, U: Iterator, F: FnMut(Self::Item) -> U,\n     {\n         FlatMap{iter: self, f: f, frontiter: None, backiter: None }\n     }\n@@ -529,7 +476,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fuse(self) -> Fuse<Self> {\n+    fn fuse(self) -> Fuse<Self> where Self: Sized {\n         Fuse{iter: self, done: false}\n     }\n \n@@ -555,7 +502,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn inspect<F>(self, f: F) -> Inspect<Self, F> where\n-        F: FnMut(&Self::Item),\n+        Self: Sized, F: FnMut(&Self::Item),\n     {\n         Inspect{iter: self, f: f}\n     }\n@@ -575,7 +522,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// assert!(it.next() == Some(5));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn by_ref(&mut self) -> &mut Self { self }\n+    fn by_ref(&mut self) -> &mut Self where Self: Sized { self }\n \n     /// Loops through the entire iterator, collecting all of the elements into\n     /// a container implementing `FromIterator`.\n@@ -590,7 +537,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn collect<B: FromIterator<Self::Item>>(self) -> B {\n+    fn collect<B: FromIterator<Self::Item>>(self) -> B where Self: Sized {\n         FromIterator::from_iter(self)\n     }\n \n@@ -609,6 +556,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[unstable(feature = \"core\",\n                reason = \"recently added as part of collections reform\")]\n     fn partition<B, F>(self, mut f: F) -> (B, B) where\n+        Self: Sized,\n         B: Default + Extend<Self::Item>,\n         F: FnMut(&Self::Item) -> bool\n     {\n@@ -638,7 +586,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fold<B, F>(self, init: B, mut f: F) -> B where\n-        F: FnMut(B, Self::Item) -> B,\n+        Self: Sized, F: FnMut(B, Self::Item) -> B,\n     {\n         let mut accum = init;\n         for x in self {\n@@ -658,7 +606,9 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn all<F>(&mut self, mut f: F) -> bool where F: FnMut(Self::Item) -> bool {\n+    fn all<F>(&mut self, mut f: F) -> bool where\n+        Self: Sized, F: FnMut(Self::Item) -> bool\n+    {\n         for x in self.by_ref() { if !f(x) { return false; } }\n         true\n     }\n@@ -679,7 +629,10 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn any<F>(&mut self, mut f: F) -> bool where F: FnMut(Self::Item) -> bool {\n+    fn any<F>(&mut self, mut f: F) -> bool where\n+        Self: Sized,\n+        F: FnMut(Self::Item) -> bool\n+    {\n         for x in self.by_ref() { if f(x) { return true; } }\n         false\n     }\n@@ -699,6 +652,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n+        Self: Sized,\n         P: FnMut(&Self::Item) -> bool,\n     {\n         for x in self.by_ref() {\n@@ -722,6 +676,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn position<P>(&mut self, mut predicate: P) -> Option<usize> where\n+        Self: Sized,\n         P: FnMut(Self::Item) -> bool,\n     {\n         let mut i = 0;\n@@ -752,7 +707,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where\n         P: FnMut(Self::Item) -> bool,\n-        Self: ExactSizeIterator + DoubleEndedIterator\n+        Self: Sized + ExactSizeIterator + DoubleEndedIterator\n     {\n         let mut i = self.len();\n \n@@ -775,7 +730,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn max(self) -> Option<Self::Item> where Self::Item: Ord\n+    fn max(self) -> Option<Self::Item> where Self: Sized, Self::Item: Ord\n     {\n         self.fold(None, |max, x| {\n             match max {\n@@ -795,7 +750,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn min(self) -> Option<Self::Item> where Self::Item: Ord\n+    fn min(self) -> Option<Self::Item> where Self: Sized, Self::Item: Ord\n     {\n         self.fold(None, |min, x| {\n             match min {\n@@ -837,7 +792,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// assert!(a.iter().min_max() == MinMax(&1, &1));\n     /// ```\n     #[unstable(feature = \"core\", reason = \"return type may change\")]\n-    fn min_max(mut self) -> MinMaxResult<Self::Item> where Self::Item: Ord\n+    fn min_max(mut self) -> MinMaxResult<Self::Item> where Self: Sized, Self::Item: Ord\n     {\n         let (mut min, mut max) = match self.next() {\n             None => return NoElements,\n@@ -897,6 +852,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[unstable(feature = \"core\",\n                reason = \"may want to produce an Ordering directly; see #15311\")]\n     fn max_by<B: Ord, F>(self, mut f: F) -> Option<Self::Item> where\n+        Self: Sized,\n         F: FnMut(&Self::Item) -> B,\n     {\n         self.fold(None, |max: Option<(Self::Item, B)>, x| {\n@@ -928,6 +884,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[unstable(feature = \"core\",\n                reason = \"may want to produce an Ordering directly; see #15311\")]\n     fn min_by<B: Ord, F>(self, mut f: F) -> Option<Self::Item> where\n+        Self: Sized,\n         F: FnMut(&Self::Item) -> B,\n     {\n         self.fold(None, |min: Option<(Self::Item, B)>, x| {\n@@ -957,7 +914,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// `std::usize::MAX` elements of the original iterator.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn rev(self) -> Rev<Self> {\n+    fn rev(self) -> Rev<Self> where Self: Sized {\n         Rev{iter: self}\n     }\n \n@@ -979,7 +936,7 @@ pub trait IteratorExt: Iterator + Sized {\n     fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB) where\n         FromA: Default + Extend<A>,\n         FromB: Default + Extend<B>,\n-        Self: Iterator<Item=(A, B)>,\n+        Self: Sized + Iterator<Item=(A, B)>,\n     {\n         struct SizeHint<A>(usize, Option<usize>, marker::PhantomData<A>);\n         impl<A> Iterator for SizeHint<A> {\n@@ -1010,7 +967,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// converting an Iterator<&T> to an Iterator<T>.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn cloned<'a, T: 'a>(self) -> Cloned<Self>\n-        where Self: Iterator<Item=&'a T>, T: Clone\n+        where Self: Sized + Iterator<Item=&'a T>, T: Clone\n     {\n         Cloned { it: self }\n     }\n@@ -1028,15 +985,15 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    fn cycle(self) -> Cycle<Self> where Self: Clone {\n+    fn cycle(self) -> Cycle<Self> where Self: Sized + Clone {\n         Cycle{orig: self.clone(), iter: self}\n     }\n \n     /// Use an iterator to reverse a container in place.\n     #[unstable(feature = \"core\",\n                reason = \"uncertain about placement or widespread use\")]\n     fn reverse_in_place<'a, T: 'a>(&mut self) where\n-        Self: Iterator<Item=&'a mut T> + DoubleEndedIterator\n+        Self: Sized + Iterator<Item=&'a mut T> + DoubleEndedIterator\n     {\n         loop {\n             match (self.next(), self.next_back()) {\n@@ -1048,7 +1005,55 @@ pub trait IteratorExt: Iterator + Sized {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> IteratorExt for I where I: Iterator {}\n+impl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n+    type Item = I::Item;\n+    fn next(&mut self) -> Option<I::Item> { (**self).next() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { (**self).size_hint() }\n+}\n+\n+/// Conversion from an `Iterator`\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be \\\n+                          built from an iterator over elements of type `{A}`\"]\n+pub trait FromIterator<A> {\n+    /// Build a container with elements from something iterable.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn from_iter<T: IntoIterator<Item=A>>(iterator: T) -> Self;\n+}\n+\n+/// Conversion into an `Iterator`\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait IntoIterator {\n+    /// The type of the elements being iterated\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    type Item;\n+\n+    /// A container for iterating over elements of type Item\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    type IntoIter: Iterator<Item=Self::Item>;\n+\n+    /// Consumes `Self` and returns an iterator over it\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn into_iter(self) -> Self::IntoIter;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I: Iterator> IntoIterator for I {\n+    type Item = I::Item;\n+    type IntoIter = I;\n+\n+    fn into_iter(self) -> I {\n+        self\n+    }\n+}\n+\n+/// A type growable from an `Iterator` implementation\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait Extend<A> {\n+    /// Extend a container with the elements yielded by an arbitrary iterator\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn extend<T: IntoIterator<Item=A>>(&mut self, iterable: T);\n+}\n \n /// A range iterator able to yield elements from both ends\n ///\n@@ -1256,7 +1261,7 @@ impl_multiplicative! { usize, 1 }\n impl_multiplicative! { f32,  1.0 }\n impl_multiplicative! { f64,  1.0 }\n \n-/// `MinMaxResult` is an enum returned by `min_max`. See `IteratorOrdExt::min_max` for more detail.\n+/// `MinMaxResult` is an enum returned by `min_max`. See `Iterator::min_max` for more detail.\n #[derive(Clone, PartialEq, Debug)]\n #[unstable(feature = \"core\",\n            reason = \"unclear whether such a fine-grained result is widely useful\")]"}, {"sha": "dc98bb8e6035f31062b3ae9f191e751e4caf252b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -23,7 +23,7 @@ use cmp::{PartialEq, Eq, PartialOrd, Ord};\n use error::Error;\n use fmt;\n use intrinsics;\n-use iter::IteratorExt;\n+use iter::Iterator;\n use marker::Copy;\n use mem::size_of;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};"}, {"sha": "cd82936b0b3ee414b1041794b9caee6692a16648", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -149,7 +149,7 @@ use clone::Clone;\n use cmp::{Eq, Ord};\n use default::Default;\n use iter::ExactSizeIterator;\n-use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, IntoIterator};\n+use iter::{Iterator, DoubleEndedIterator, FromIterator, IntoIterator};\n use mem;\n use ops::FnOnce;\n use result::Result::{Ok, Err};"}, {"sha": "448b90c0dbdaf5af2074f9df5ef6fc1e0290bd48", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -37,7 +37,7 @@ pub use char::CharExt;\n pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n pub use convert::{AsRef, AsMut, Into, From};\n-pub use iter::{Extend, IteratorExt};\n+pub use iter::Extend;\n pub use iter::{Iterator, DoubleEndedIterator};\n pub use iter::{ExactSizeIterator};\n pub use option::Option::{self, Some, None};"}, {"sha": "eff04dd5903936f997ff147a76d39b530349cb63", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -243,8 +243,7 @@ use self::Result::{Ok, Err};\n \n use clone::Clone;\n use fmt;\n-use iter::{Iterator, IteratorExt, DoubleEndedIterator,\n-           FromIterator, ExactSizeIterator, IntoIterator};\n+use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSizeIterator, IntoIterator};\n use ops::{FnMut, FnOnce};\n use option::Option::{self, None, Some};\n #[allow(deprecated)]"}, {"sha": "189cf3d3498919aa3ae6775bda99b3b0ca895965", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -25,7 +25,7 @@ use default::Default;\n use error::Error;\n use fmt;\n use iter::ExactSizeIterator;\n-use iter::{Map, Iterator, IteratorExt, DoubleEndedIterator};\n+use iter::{Map, Iterator, DoubleEndedIterator};\n use marker::Sized;\n use mem;\n #[allow(deprecated)]\n@@ -1237,7 +1237,7 @@ Section: Trait implementations\n mod traits {\n     use cmp::{Ordering, Ord, PartialEq, PartialOrd, Eq};\n     use cmp::Ordering::{Less, Equal, Greater};\n-    use iter::IteratorExt;\n+    use iter::Iterator;\n     use option::Option;\n     use option::Option::Some;\n     use ops;"}, {"sha": "9e229a28279bb5f32d67dd3f410674831cbb082f", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -20,7 +20,7 @@ use cmp::{max, Eq, PartialEq};\n use default::Default;\n use fmt::{self, Debug};\n use hash::{Hash, SipHasher};\n-use iter::{self, Iterator, ExactSizeIterator, IntoIterator, IteratorExt, FromIterator, Extend, Map};\n+use iter::{self, Iterator, ExactSizeIterator, IntoIterator, FromIterator, Extend, Map};\n use marker::Sized;\n use mem::{self, replace};\n use ops::{Deref, FnMut, FnOnce, Index};"}, {"sha": "34b905595b7e77beab67577deab4e7e5c292a8ea", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -18,9 +18,7 @@ use default::Default;\n use fmt::Debug;\n use fmt;\n use hash::Hash;\n-use iter::{\n-    Iterator, IntoIterator, ExactSizeIterator, IteratorExt, FromIterator, Map, Chain, Extend,\n-};\n+use iter::{Iterator, IntoIterator, ExactSizeIterator, FromIterator, Map, Chain, Extend};\n use ops::{BitOr, BitAnd, BitXor, Sub};\n use option::Option::{Some, None, self};\n "}, {"sha": "8f65933453854a6d3f4f3ebba141b5e8cb2a1327", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -15,7 +15,7 @@ use self::BucketState::*;\n use clone::Clone;\n use cmp;\n use hash::{Hash, Hasher};\n-use iter::{Iterator, IteratorExt, ExactSizeIterator, count};\n+use iter::{Iterator, ExactSizeIterator, count};\n use marker::{Copy, Send, Sync, Sized, self};\n use mem::{min_align_of, size_of};\n use mem;"}, {"sha": "d8a95133d94144dc6d062ca552a9c08314177dfa", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -261,7 +261,7 @@ mod dl {\n #[cfg(target_os = \"windows\")]\n mod dl {\n     use ffi::OsStr;\n-    use iter::IteratorExt;\n+    use iter::Iterator;\n     use libc;\n     use libc::consts::os::extra::ERROR_CALL_NOT_IMPLEMENTED;\n     use ops::FnOnce;"}, {"sha": "a00f77080252c70292950b2ac17202478674be99", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -15,7 +15,7 @@ use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use error::{Error, FromError};\n use fmt;\n use io;\n-use iter::IteratorExt;\n+use iter::Iterator;\n use libc;\n use mem;\n #[allow(deprecated)]"}, {"sha": "be0b3687bad89b0e88ef45056b3bc2e7b63a348c", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -16,7 +16,7 @@ use cmp;\n use unicode::str as core_str;\n use error as std_error;\n use fmt;\n-use iter::{self, Iterator, IteratorExt, Extend};\n+use iter::{self, Iterator, Extend};\n use marker::Sized;\n use ops::{Drop, FnOnce};\n use option::Option::{self, Some, None};"}, {"sha": "b8b7df750033157c219cbe8c4d76be820efe1337", "filename": "src/libstd/old_io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_io%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_io%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fbuffered.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -15,7 +15,7 @@\n use cmp;\n use fmt;\n use old_io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n-use iter::{IteratorExt, ExactSizeIterator, repeat};\n+use iter::{Iterator, ExactSizeIterator, repeat};\n use ops::Drop;\n use option::Option;\n use option::Option::{Some, None};"}, {"sha": "5f20c383bb7586388901f826f1b9be138e6a6d0d", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -400,7 +400,7 @@ mod test {\n     extern crate test as test_crate;\n     use old_io::{SeekSet, SeekCur, SeekEnd, Reader, Writer, Seek, Buffer};\n     use prelude::v1::{Ok, Err, Vec,  AsSlice};\n-    use prelude::v1::IteratorExt;\n+    use prelude::v1::Iterator;\n     use old_io;\n     use iter::repeat;\n     use self::test_crate::Bencher;"}, {"sha": "df8ac78f7e581c107d85d9c32f3a895788af72bb", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -268,7 +268,7 @@ use default::Default;\n use error::Error;\n use fmt;\n use isize;\n-use iter::{Iterator, IteratorExt};\n+use iter::Iterator;\n use marker::{PhantomFn, Sized};\n use mem::transmute;\n use ops::FnOnce;"}, {"sha": "739439ebd151ba50b5ff401a75c1fe183829022b", "filename": "src/libstd/old_io/net/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Faddrinfo.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -19,7 +19,7 @@ pub use self::SocketType::*;\n pub use self::Flag::*;\n pub use self::Protocol::*;\n \n-use iter::IteratorExt;\n+use iter::Iterator;\n use old_io::IoResult;\n use old_io::net::ip::{SocketAddr, IpAddr};\n use option::Option;"}, {"sha": "26e1bb6550b7a152887e05d26a246f2dd1cb8b8f", "filename": "src/libstd/old_io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fip.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -21,7 +21,7 @@ use boxed::Box;\n use fmt;\n use old_io::{self, IoResult, IoError};\n use old_io::net;\n-use iter::{Iterator, IteratorExt};\n+use iter::Iterator;\n use ops::{FnOnce, FnMut};\n use option::Option;\n use option::Option::{None, Some};"}, {"sha": "0a2cc517a0631096ed58ddc0b3a2e70fc0971b73", "filename": "src/libstd/old_io/tempfile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_io%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_io%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftempfile.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -12,7 +12,7 @@\n #![allow(deprecated)] // rand\n \n use env;\n-use iter::IteratorExt;\n+use iter::Iterator;\n use old_io::{fs, IoError, IoErrorKind, IoResult};\n use old_io;\n use ops::Drop;"}, {"sha": "c405df2824e818bc4736c3d8b4e264d923f048d3", "filename": "src/libstd/old_path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_path%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_path%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fmod.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -70,7 +70,7 @@ use core::marker::Sized;\n use ffi::CString;\n use clone::Clone;\n use fmt;\n-use iter::IteratorExt;\n+use iter::Iterator;\n use option::Option;\n use option::Option::{None, Some};\n use str;"}, {"sha": "bbc1756bee6321004625b2bd4c14a0d3ede76859", "filename": "src/libstd/old_path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_path%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_path%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fposix.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -16,7 +16,7 @@ use fmt;\n use hash;\n use old_io::Writer;\n use iter::{AdditiveIterator, Extend};\n-use iter::{Iterator, IteratorExt, Map};\n+use iter::{Iterator, Map};\n use marker::Sized;\n use option::Option::{self, Some, None};\n use result::Result::{self, Ok, Err};\n@@ -444,13 +444,13 @@ mod tests {\n     use super::*;\n \n     use clone::Clone;\n-    use iter::IteratorExt;\n     use option::Option::{self, Some, None};\n     use old_path::GenericPath;\n     use slice::AsSlice;\n     use str::{self, Str};\n     use string::ToString;\n     use vec::Vec;\n+    use iter::Iterator;\n \n     macro_rules! t {\n         (s: $path:expr, $exp:expr) => ("}, {"sha": "bd67855bf1b8c45fbbe4d4a6932844c4d8f072c1", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -21,7 +21,7 @@ use fmt;\n use hash;\n use old_io::Writer;\n use iter::{AdditiveIterator, Extend};\n-use iter::{Iterator, IteratorExt, Map, repeat};\n+use iter::{Iterator, Map, repeat};\n use mem;\n use option::Option::{self, Some, None};\n use result::Result::{self, Ok, Err};\n@@ -1126,7 +1126,7 @@ mod tests {\n     use super::*;\n \n     use clone::Clone;\n-    use iter::IteratorExt;\n+    use iter::Iterator;\n     use option::Option::{self, Some, None};\n     use old_path::GenericPath;\n     use slice::AsSlice;"}, {"sha": "e19c734b8a3acc3646a8712c4ff83558d16389ea", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -43,7 +43,7 @@ use env;\n use error::{FromError, Error};\n use ffi::{OsString, OsStr};\n use fmt;\n-use iter::{Iterator, IteratorExt};\n+use iter::Iterator;\n use libc::{c_void, c_int, c_char};\n use libc;\n use marker::{Copy, Send};"}, {"sha": "611dd85a71b364f8d5de1a2dffe8deed7387b319", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -36,7 +36,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use iter::ExactSizeIterator;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[doc(no_inline)] pub use iter::{Iterator, IteratorExt, Extend};\n+#[doc(no_inline)] pub use iter::{Iterator, Extend};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use option::Option::{self, Some, None};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "fad57323d34baf6e443addf71ea9688067214bbf", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -231,7 +231,7 @@\n use cell::RefCell;\n use clone::Clone;\n use old_io::IoResult;\n-use iter::{Iterator, IteratorExt};\n+use iter::Iterator;\n use mem;\n use rc::Rc;\n use result::Result::{Ok, Err};"}, {"sha": "9e9bb86446e7c11b1f395ed598c888a89764ea4e", "filename": "src/libstd/sys/windows/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89de2c56baeb61e7cc434924dcc8bedd32b26b8/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs?ref=c89de2c56baeb61e7cc434924dcc8bedd32b26b8", "patch": "@@ -127,7 +127,7 @@ impl Process {\n \n         use env::split_paths;\n         use mem;\n-        use iter::IteratorExt;\n+        use iter::Iterator;\n \n         // To have the spawning semantics of unix/windows stay the same, we need to\n         // read the *child's* PATH if one is provided. See #15149 for more details."}]}