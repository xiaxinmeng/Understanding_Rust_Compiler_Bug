{"sha": "82f25b32ae568986de275d87fe355ec63307d8cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjI1YjMyYWU1Njg5ODZkZTI3NWQ4N2ZlMzU1ZWM2MzMwN2Q4Y2I=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-06-22T17:56:05Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2017-06-29T13:37:18Z"}, "message": "code review fixes", "tree": {"sha": "29a76aaf2e859226f4d8eb3c24e6f66def806bbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a76aaf2e859226f4d8eb3c24e6f66def806bbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f25b32ae568986de275d87fe355ec63307d8cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f25b32ae568986de275d87fe355ec63307d8cb", "html_url": "https://github.com/rust-lang/rust/commit/82f25b32ae568986de275d87fe355ec63307d8cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f25b32ae568986de275d87fe355ec63307d8cb/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a851e1e543c944b38472751d251593f3c593cc3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a851e1e543c944b38472751d251593f3c593cc3a", "html_url": "https://github.com/rust-lang/rust/commit/a851e1e543c944b38472751d251593f3c593cc3a"}], "stats": {"total": 55, "additions": 26, "deletions": 29}, "files": [{"sha": "4a1f4b418ae4a1555089d4f566c7d7da846f385f", "filename": "src/librustc/infer/error_reporting/named_anon_conflict.rs", "status": "modified", "additions": 26, "deletions": 29, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/82f25b32ae568986de275d87fe355ec63307d8cb/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f25b32ae568986de275d87fe355ec63307d8cb/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnamed_anon_conflict.rs?ref=82f25b32ae568986de275d87fe355ec63307d8cb", "patch": "@@ -43,39 +43,36 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 let body_id = self.tcx.hir.maybe_body_owned_by(node_id).unwrap();\n                 let mut is_first = false;\n                 let body = self.tcx.hir.body(body_id);\n-                body.arguments\n-                    .iter()\n-                    .filter_map(|arg| if let Some(tables) = self.in_progress_tables {\n-                                    let ty = tables.borrow().node_id_to_type(arg.id);\n-                                    let mut found_anon_region = false;\n-                                    let new_arg_ty = self.tcx\n-                                        .fold_regions(&ty,\n-                                                      &mut false,\n-                                                      |r, _| if *r == *anon_region {\n-                                                          found_anon_region = true;\n-                                                          named_region\n-                                                      } else {\n-                                                          r\n-                                                      });\n-                                    if found_anon_region {\n-                                        if body.arguments.iter().nth(0) == Some(&arg) {\n-                                            is_first = true;\n-                                        }\n-                                        return Some((arg,\n-                                                     new_arg_ty,\n-                                                     free_region.bound_region,\n-                                                     is_first));\n-                                    } else {\n-                                        None\n-                                    }\n+                if let Some(tables) = self.in_progress_tables {\n+                    body.arguments\n+                        .iter()\n+                        .filter_map(|arg| {\n+                            let ty = tables.borrow().node_id_to_type(arg.id);\n+                            let mut found_anon_region = false;\n+                            let new_arg_ty = self.tcx\n+                                .fold_regions(&ty, &mut false, |r, _| if *r == *anon_region {\n+                                    found_anon_region = true;\n+                                    named_region\n                                 } else {\n-                                    None\n-                                })\n-                    .next()\n+                                    r\n+                                });\n+                            if found_anon_region {\n+                                if body.arguments.iter().nth(0) == Some(&arg) {\n+                                    is_first = true;\n+                                }\n+                                Some((arg, new_arg_ty, free_region.bound_region, is_first))\n+                            } else {\n+                                None\n+                            }\n+                        })\n+                        .next()\n+                } else {\n+                    None\n+                }\n             }\n             _ => None,\n-        }\n \n+        }\n     }\n \n     // This method generates the error message for the case when"}]}