{"sha": "44792f108949048c8945a29e6eee6a35c282f210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NzkyZjEwODk0OTA0OGM4OTQ1YTI5ZTZlZWU2YTM1YzI4MmYyMTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-09-28T09:13:40Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-09-28T12:06:12Z"}, "message": "Rustup to rustc 1.40.0-nightly (084beb83e 2019-09-27)", "tree": {"sha": "eefff1def9ab11d70b5ed0f0551015c4ab79a17f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eefff1def9ab11d70b5ed0f0551015c4ab79a17f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44792f108949048c8945a29e6eee6a35c282f210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44792f108949048c8945a29e6eee6a35c282f210", "html_url": "https://github.com/rust-lang/rust/commit/44792f108949048c8945a29e6eee6a35c282f210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44792f108949048c8945a29e6eee6a35c282f210/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd65b24d542e0c456f04ac927218120b15a267e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd65b24d542e0c456f04ac927218120b15a267e", "html_url": "https://github.com/rust-lang/rust/commit/cbd65b24d542e0c456f04ac927218120b15a267e"}], "stats": {"total": 154, "additions": 82, "deletions": 72}, "files": [{"sha": "05a71d697ab6296bc6ca78231e2eb4af250098f5", "filename": "patches/0017-Fix-libtest-compilation.patch", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/patches%2F0017-Fix-libtest-compilation.patch", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/patches%2F0017-Fix-libtest-compilation.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0017-Fix-libtest-compilation.patch?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -11,7 +11,7 @@ diff --git a/src/libtest/lib.rs b/src/libtest/lib.rs\n index 810a98e..4fdde0e 100644\n --- a/src/libtest/lib.rs\n +++ b/src/libtest/lib.rs\n-@@ -1441,11 +1441,11 @@ pub fn run_test(\n+@@ -1441,12 +1441,12 @@ pub fn run_test(\n          return;\n      }\n  \n@@ -20,30 +20,38 @@ index 810a98e..4fdde0e 100644\n          desc: TestDesc,\n          monitor_ch: Sender<MonitorMsg>,\n          nocapture: bool,\n+         report_time: bool,\n -        testfn: Box<dyn FnOnce() + Send>,\n +        testfn: F,\n          concurrency: Concurrent,\n      ) {\n          // Buffer for capturing standard I/O\n-@@ -1500,15 +1500,14 @@ pub fn run_test(\n+@@ -1500,23 +1500,15 @@ pub fn run_test(\n                  (benchfn.clone())(harness)\n              });\n          }\n -        DynTestFn(f) => {\n -            let cb = move || __rust_begin_short_backtrace(f);\n--            run_test_inner(desc, monitor_ch, opts.nocapture, Box::new(cb), concurrency)\n+-            run_test_inner(\n+-                desc,\n+-                monitor_ch,\n+-                opts.nocapture,\n+-                opts.report_time,\n+-                Box::new(cb),\n+-                concurrency,\n+-            )\n +        DynTestFn(_f) => {\n +            unimplemented!();\n          }\n          StaticTestFn(f) => run_test_inner(\n              desc,\n              monitor_ch,\n              opts.nocapture,\n+             opts.report_time,\n -            Box::new(move || __rust_begin_short_backtrace(f)),\n +            move || __rust_begin_short_backtrace(f),\n              concurrency,\n          ),\n      }\n -- \n 2.11.0\n-"}, {"sha": "30d59949df81428e464a7ddc68e10fd881f83277", "filename": "src/abi/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -30,7 +30,7 @@ fn clif_sig_from_fn_sig<'tcx>(\n         Abi::C => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n         Abi::RustCall => {\n             assert_eq!(sig.inputs().len(), 2);\n-            let extra_args = match sig.inputs().last().unwrap().sty {\n+            let extra_args = match sig.inputs().last().unwrap().kind {\n                 ty::Tuple(ref tupled_arguments) => tupled_arguments,\n                 _ => bug!(\"argument to function with \\\"rust-call\\\" ABI is not a tuple\"),\n             };\n@@ -177,7 +177,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n             })\n             .unzip();\n         let return_layout = self.layout_of(return_ty);\n-        let return_tys = if let ty::Tuple(tup) = return_ty.sty {\n+        let return_tys = if let ty::Tuple(tup) = return_ty.kind {\n             tup.types().map(|ty| self.clif_type(ty).unwrap()).collect()\n         } else {\n             vec![self.clif_type(return_ty).unwrap()]\n@@ -255,7 +255,7 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n                 // to reconstruct it into a tuple local variable, from multiple\n                 // individual function arguments.\n \n-                let tupled_arg_tys = match arg_ty.sty {\n+                let tupled_arg_tys = match arg_ty.kind {\n                     ty::Tuple(ref tys) => tys,\n                     _ => bug!(\"spread argument isn't a tuple?! but {:?}\", arg_ty),\n                 };\n@@ -367,7 +367,7 @@ pub fn codegen_terminator_call<'tcx>(\n         .as_ref()\n         .map(|&(ref place, bb)| (trans_place(fx, place), bb));\n \n-    if let ty::FnDef(def_id, substs) = fn_ty.sty {\n+    if let ty::FnDef(def_id, substs) = fn_ty.kind {\n         let instance =\n             ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap();\n \n@@ -405,7 +405,7 @@ pub fn codegen_terminator_call<'tcx>(\n         let pack_arg = trans_operand(fx, &args[1]);\n         let mut args = Vec::new();\n         args.push(self_arg);\n-        match pack_arg.layout().ty.sty {\n+        match pack_arg.layout().ty.kind {\n             ty::Tuple(ref tupled_arguments) => {\n                 for (i, _) in tupled_arguments.iter().enumerate() {\n                     args.push(pack_arg.value_field(fx, mir::Field::new(i)));\n@@ -447,7 +447,7 @@ fn codegen_call_inner<'tcx>(\n         .tcx\n         .normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &fn_ty.fn_sig(fx.tcx));\n \n-    let instance = match fn_ty.sty {\n+    let instance = match fn_ty.kind {\n         ty::FnDef(def_id, substs) => {\n             Some(Instance::resolve(fx.tcx, ParamEnv::reveal_all(), def_id, substs).unwrap())\n         }\n@@ -562,7 +562,7 @@ pub fn codegen_drop<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl Backend>, drop_plac\n         // we don't actually need to drop anything\n     } else {\n         let drop_fn_ty = drop_fn.ty(fx.tcx);\n-        match ty.sty {\n+        match ty.kind {\n             ty::Dynamic(..) => {\n                 let (ptr, vtable) = drop_place.to_addr_maybe_unsized(fx);\n                 let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable.unwrap());"}, {"sha": "f4ba22b7d1a243dfb38dcdfbbe2c99fc16f1d7bc", "filename": "src/allocator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -13,14 +13,14 @@ use crate::prelude::*;\n use syntax::ext::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n \n /// Returns whether an allocator shim was created\n-pub fn codegen(sess: &Session, module: &mut Module<impl Backend + 'static>) -> bool {\n-    let any_dynamic_crate = sess.dependency_formats.borrow().iter().any(|(_, list)| {\n+pub fn codegen(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) -> bool {\n+    let any_dynamic_crate = tcx.dependency_formats(LOCAL_CRATE).iter().any(|(_, list)| {\n         use rustc::middle::dependency_format::Linkage;\n         list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n     });\n     if any_dynamic_crate {\n         false\n-    } else if let Some(kind) = *sess.allocator_kind.get() {\n+    } else if let Some(kind) = *tcx.sess.allocator_kind.get() {\n         codegen_inner(module, kind);\n         true\n     } else {"}, {"sha": "e58ab93158a715d58fa209c7dd226052505e3c76", "filename": "src/base.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -307,7 +307,7 @@ fn trans_stmt<'tcx>(\n                     let val = operand.load_scalar(fx);\n                     let res = match un_op {\n                         UnOp::Not => {\n-                            match layout.ty.sty {\n+                            match layout.ty.kind {\n                                 ty::Bool => {\n                                     let val = fx.bcx.ins().uextend(types::I32, val); // WORKAROUND for CraneStation/cranelift#466\n                                     let res = fx.bcx.ins().icmp_imm(IntCC::Equal, val, 0);\n@@ -317,7 +317,7 @@ fn trans_stmt<'tcx>(\n                                 _ => unimplemented!(\"un op Not for {:?}\", layout.ty),\n                             }\n                         }\n-                        UnOp::Neg => match layout.ty.sty {\n+                        UnOp::Neg => match layout.ty.kind {\n                             ty::Int(_) => {\n                                 let clif_ty = fx.clif_type(layout.ty).unwrap();\n                                 if clif_ty == types::I128 {\n@@ -343,7 +343,7 @@ fn trans_stmt<'tcx>(\n                     let layout = fx.layout_of(ty);\n                     match fx\n                         .monomorphize(&operand.ty(&fx.mir.local_decls, fx.tcx))\n-                        .sty\n+                        .kind\n                     {\n                         ty::FnDef(def_id, substs) => {\n                             let func_ref = fx.get_function_ref(\n@@ -390,10 +390,10 @@ fn trans_stmt<'tcx>(\n                             let (ptr, _extra) = operand.load_scalar_pair(fx);\n                             lval.write_cvalue(fx, CValue::by_val(ptr, dest_layout))\n                         }\n-                    } else if let ty::Adt(adt_def, _substs) = from_ty.sty {\n+                    } else if let ty::Adt(adt_def, _substs) = from_ty.kind {\n                         // enum -> discriminant value\n                         assert!(adt_def.is_enum());\n-                        match to_ty.sty {\n+                        match to_ty.kind {\n                             ty::Uint(_) | ty::Int(_) => {}\n                             _ => unreachable!(\"cast adt {} -> {}\", from_ty, to_ty),\n                         }\n@@ -420,7 +420,7 @@ fn trans_stmt<'tcx>(\n                 }\n                 Rvalue::Cast(CastKind::Pointer(PointerCast::ClosureFnPointer(_)), operand, _ty) => {\n                     let operand = trans_operand(fx, operand);\n-                    match operand.layout().ty.sty {\n+                    match operand.layout().ty.kind {\n                         ty::Closure(def_id, substs) => {\n                             let instance = Instance::resolve_closure(\n                                 fx.tcx,\n@@ -587,7 +587,7 @@ fn codegen_array_len<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     place: CPlace<'tcx>,\n ) -> Value {\n-    match place.layout().ty.sty {\n+    match place.layout().ty.kind {\n         ty::Array(_elem_ty, len) => {\n             let len = crate::constant::force_eval_const(fx, len)\n                 .eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64;\n@@ -647,7 +647,7 @@ pub fn trans_place<'tcx>(\n                 // These indices are generated by slice patterns.\n                 // slice[from:-to] in Python terms.\n \n-                match cplace.layout().ty.sty {\n+                match cplace.layout().ty.kind {\n                     ty::Array(elem_ty, len) => {\n                         let elem_layout = fx.layout_of(elem_ty);\n                         let ptr = cplace.to_addr(fx);"}, {"sha": "85778f4c8e98dde7827ed8ae19d5fd8fe21d7ee0", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -36,7 +36,7 @@ pub fn scalar_to_clif_type(tcx: TyCtxt, scalar: Scalar) -> Type {\n }\n \n pub fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types::Type> {\n-    Some(match ty.sty {\n+    Some(match ty.kind {\n         ty::Bool => types::I8,\n         ty::Uint(size) => match size {\n             UintTy::U8 => types::I8,\n@@ -262,7 +262,7 @@ pub fn type_min_max_value(ty: Type, signed: bool) -> (i64, i64) {\n }\n \n pub fn type_sign(ty: Ty<'_>) -> bool {\n-    match ty.sty {\n+    match ty.kind {\n         ty::Ref(..) | ty::RawPtr(..) | ty::FnPtr(..) | ty::Char | ty::Uint(..) | ty::Bool => false,\n         ty::Int(..) => true,\n         ty::Float(..) => false, // `signed` is unused for floats"}, {"sha": "9a1685038bd1e01aa587f96c484ce9a6ad7b1ba6", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -103,7 +103,7 @@ pub fn trans_const_value<'tcx>(\n ) -> CValue<'tcx> {\n     let ty = fx.monomorphize(&const_.ty);\n     let layout = fx.layout_of(ty);\n-    match ty.sty {\n+    match ty.kind {\n         ty::Bool | ty::Uint(_) => {\n             let bits = const_.val.try_to_bits(layout.size).unwrap();\n             CValue::const_val(fx, ty, bits)\n@@ -230,7 +230,7 @@ fn data_id_for_static(\n         .unwrap();\n \n     if linkage == Linkage::Preemptible {\n-        if let ty::RawPtr(_) = ty.sty {\n+        if let ty::RawPtr(_) = ty.kind {\n         } else {\n             tcx.sess.span_fatal(\n                 tcx.def_span(def_id),"}, {"sha": "d58e13bec67590e8a5238188bcf7fe4db301630f", "filename": "src/driver.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -68,7 +68,7 @@ fn run_jit(tcx: TyCtxt<'_>, log: &mut Option<File>) -> ! {\n         .unwrap();\n \n     codegen_cgus(tcx, &mut jit_module, &mut None, log);\n-    crate::allocator::codegen(tcx.sess, &mut jit_module);\n+    crate::allocator::codegen(tcx, &mut jit_module);\n     jit_module.finalize_definitions();\n \n     tcx.sess.abort_if_errors();\n@@ -101,8 +101,12 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n     let mut dylib_paths = Vec::new();\n \n     let crate_info = CrateInfo::new(tcx);\n-    let formats = tcx.sess.dependency_formats.borrow();\n-    let data = formats.get(&CrateType::Executable).unwrap();\n+    let formats = tcx.dependency_formats(LOCAL_CRATE);\n+    let data = &formats\n+        .iter()\n+        .find(|(crate_type, _data)| *crate_type == CrateType::Executable)\n+        .unwrap()\n+        .1;\n     for &(cnum, _) in &crate_info.used_crates_dynamic {\n         let src = &crate_info.used_crate_source[&cnum];\n         match data[cnum.as_usize() - 1] {\n@@ -167,26 +171,26 @@ fn run_aot(\n     let emit_module = |kind: ModuleKind,\n                        mut module: Module<FaerieBackend>,\n                        debug: Option<DebugContext>| {\n-        module.finalize_definitions();\n-        let mut artifact = module.finish().artifact;\n+            module.finalize_definitions();\n+            let mut artifact = module.finish().artifact;\n \n-        if let Some(mut debug) = debug {\n-            debug.emit(&mut artifact);\n-        }\n+            if let Some(mut debug) = debug {\n+                debug.emit(&mut artifact);\n+            }\n \n-        let tmp_file = tcx\n-            .output_filenames(LOCAL_CRATE)\n-            .temp_path(OutputType::Object, Some(&artifact.name));\n-        let obj = artifact.emit().unwrap();\n-        std::fs::write(&tmp_file, obj).unwrap();\n-        CompiledModule {\n-            name: artifact.name,\n-            kind,\n-            object: Some(tmp_file),\n-            bytecode: None,\n-            bytecode_compressed: None,\n-        }\n-    };\n+            let tmp_file = tcx\n+                .output_filenames(LOCAL_CRATE)\n+                .temp_path(OutputType::Object, Some(&artifact.name));\n+            let obj = artifact.emit().unwrap();\n+            std::fs::write(&tmp_file, obj).unwrap();\n+            CompiledModule {\n+                name: artifact.name,\n+                kind,\n+                object: Some(tmp_file),\n+                bytecode: None,\n+                bytecode_compressed: None,\n+            }\n+        };\n \n     let mut faerie_module = new_module(\"some_file\".to_string());\n \n@@ -208,7 +212,7 @@ fn run_aot(\n     tcx.sess.abort_if_errors();\n \n     let mut allocator_module = new_module(\"allocator_shim\".to_string());\n-    let created_alloc_shim = crate::allocator::codegen(tcx.sess, &mut allocator_module);\n+    let created_alloc_shim = crate::allocator::codegen(tcx, &mut allocator_module);\n \n     rustc_incremental::assert_dep_graph(tcx);\n     rustc_incremental::save_dep_graph(tcx);"}, {"sha": "f55dd7d875fe4f96ff0a81974f6e0b23e3252a19", "filename": "src/intrinsics.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -213,7 +213,7 @@ macro_rules! simd_cmp {\n             $y,\n             $ret,\n             |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.sty {\n+                let res_lane = match lane_layout.ty.kind {\n                     ty::Uint(_) | ty::Int(_) => codegen_icmp(fx, IntCC::$cc, x_lane, y_lane),\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),\n                 };\n@@ -229,7 +229,7 @@ macro_rules! simd_cmp {\n             $y,\n             $ret,\n             |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.sty {\n+                let res_lane = match lane_layout.ty.kind {\n                     ty::Uint(_) => codegen_icmp(fx, IntCC::$cc_u, x_lane, y_lane),\n                     ty::Int(_) => codegen_icmp(fx, IntCC::$cc_s, x_lane, y_lane),\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),\n@@ -249,7 +249,7 @@ macro_rules! simd_int_binop {\n             $y,\n             $ret,\n             |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.sty {\n+                let res_lane = match lane_layout.ty.kind {\n                     ty::Uint(_) | ty::Int(_) => fx.bcx.ins().$op(x_lane, y_lane),\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),\n                 };\n@@ -265,7 +265,7 @@ macro_rules! simd_int_binop {\n             $y,\n             $ret,\n             |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.sty {\n+                let res_lane = match lane_layout.ty.kind {\n                     ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n                     ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),\n@@ -285,7 +285,7 @@ macro_rules! simd_int_flt_binop {\n             $y,\n             $ret,\n             |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.sty {\n+                let res_lane = match lane_layout.ty.kind {\n                     ty::Uint(_) | ty::Int(_) => fx.bcx.ins().$op(x_lane, y_lane),\n                     ty::Float(_) => fx.bcx.ins().$op_f(x_lane, y_lane),\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),\n@@ -302,7 +302,7 @@ macro_rules! simd_int_flt_binop {\n             $y,\n             $ret,\n             |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.sty {\n+                let res_lane = match lane_layout.ty.kind {\n                     ty::Uint(_) => fx.bcx.ins().$op_u(x_lane, y_lane),\n                     ty::Int(_) => fx.bcx.ins().$op_s(x_lane, y_lane),\n                     ty::Float(_) => fx.bcx.ins().$op_f(x_lane, y_lane),\n@@ -323,7 +323,7 @@ macro_rules! simd_flt_binop {\n             $y,\n             $ret,\n             |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.sty {\n+                let res_lane = match lane_layout.ty.kind {\n                     ty::Float(_) => fx.bcx.ins().$op(x_lane, y_lane),\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),\n                 };"}, {"sha": "2464bca1c0a61686bb0d73030e4f00b06b45d755", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -15,7 +15,6 @@ extern crate rustc_target;\n extern crate syntax;\n \n use std::any::Any;\n-use std::sync::mpsc;\n \n use rustc::dep_graph::DepGraph;\n use rustc::middle::cstore::{EncodedMetadata, MetadataLoader};\n@@ -200,7 +199,6 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         tcx: TyCtxt<'tcx>,\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n-        _rx: mpsc::Receiver<Box<dyn Any + Send>>,\n     ) -> Box<dyn Any> {\n         rustc_codegen_utils::check_for_rustc_errors_attr(tcx);\n "}, {"sha": "b281c3d186d26a7d0e1a0691d7a4017353b863e1", "filename": "src/llvm_intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/src%2Fllvm_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/src%2Fllvm_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm_intrinsics.rs?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -87,7 +87,7 @@ pub fn codegen_llvm_intrinsic_call<'tcx>(\n             };\n \n             simd_for_each_lane(fx, intrinsic, x, y, ret, |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n-                let res_lane = match lane_layout.ty.sty {\n+                let res_lane = match lane_layout.ty.kind {\n                     ty::Float(_) => fx.bcx.ins().fcmp(flt_cc, x_lane, y_lane),\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),\n                 };"}, {"sha": "5dee1d8c2abb4648cb36ded22cfb5948dd442ddc", "filename": "src/num.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -59,15 +59,15 @@ pub fn codegen_binop<'tcx>(\n ) -> CValue<'tcx> {\n     match bin_op {\n         BinOp::Eq | BinOp::Lt | BinOp::Le | BinOp::Ne | BinOp::Ge | BinOp::Gt => {\n-            match in_lhs.layout().ty.sty {\n+            match in_lhs.layout().ty.kind {\n                 ty::Bool | ty::Uint(_) | ty::Int(_) | ty::Char => {\n                     let signed = type_sign(in_lhs.layout().ty);\n                     let lhs = in_lhs.load_scalar(fx);\n                     let rhs = in_rhs.load_scalar(fx);\n \n                     let (lhs, rhs) = if (bin_op == BinOp::Eq || bin_op == BinOp::Ne)\n-                        && (in_lhs.layout().ty.sty == fx.tcx.types.i8.sty\n-                            || in_lhs.layout().ty.sty == fx.tcx.types.i16.sty)\n+                        && (in_lhs.layout().ty.kind == fx.tcx.types.i8.kind\n+                            || in_lhs.layout().ty.kind == fx.tcx.types.i16.kind)\n                     {\n                         // FIXME(CraneStation/cranelift#896) icmp_imm.i8/i16 with eq/ne for signed ints is implemented wrong.\n                         (\n@@ -86,7 +86,7 @@ pub fn codegen_binop<'tcx>(\n         _ => {}\n     }\n \n-    match in_lhs.layout().ty.sty {\n+    match in_lhs.layout().ty.kind {\n         ty::Bool => crate::num::trans_bool_binop(fx, bin_op, in_lhs, in_rhs),\n         ty::Uint(_) | ty::Int(_) => crate::num::trans_int_binop(fx, bin_op, in_lhs, in_rhs),\n         ty::Float(_) => crate::num::trans_float_binop(fx, bin_op, in_lhs, in_rhs),\n@@ -314,7 +314,7 @@ pub fn trans_float_binop<'tcx>(\n         BinOp::Mul => b.fmul(lhs, rhs),\n         BinOp::Div => b.fdiv(lhs, rhs),\n         BinOp::Rem => {\n-            let name = match in_lhs.layout().ty.sty {\n+            let name = match in_lhs.layout().ty.kind {\n                 ty::Float(FloatTy::F32) => \"fmodf\",\n                 ty::Float(FloatTy::F64) => \"fmod\",\n                 _ => bug!(),"}, {"sha": "6d497b188669fedb38ca38bcc7057fcc026a58d3", "filename": "src/unsize.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/src%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/src%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funsize.rs?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -17,7 +17,7 @@ pub fn unsized_info<'tcx>(\n     let (source, target) =\n         fx.tcx\n             .struct_lockstep_tails_erasing_lifetimes(source, target, ParamEnv::reveal_all());\n-    match (&source.sty, &target.sty) {\n+    match (&source.kind, &target.kind) {\n         (&ty::Array(_, len), &ty::Slice(_)) => fx.bcx.ins().iconst(\n             fx.pointer_type,\n             len.eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64,\n@@ -44,7 +44,7 @@ pub fn unsize_thin_ptr<'tcx>(\n     src_ty: Ty<'tcx>,\n     dst_ty: Ty<'tcx>,\n ) -> (Value, Value) {\n-    match (&src_ty.sty, &dst_ty.sty) {\n+    match (&src_ty.kind, &dst_ty.kind) {\n         (&ty::Ref(_, a, _), &ty::Ref(_, b, _))\n         | (&ty::Ref(_, a, _), &ty::RawPtr(ty::TypeAndMut { ty: b, .. }))\n         | (&ty::RawPtr(ty::TypeAndMut { ty: a, .. }), &ty::RawPtr(ty::TypeAndMut { ty: b, .. })) => {\n@@ -105,7 +105,7 @@ pub fn coerce_unsized_into<'tcx>(\n         };\n         dst.write_cvalue(fx, CValue::by_val_pair(base, info, dst.layout()));\n     };\n-    match (&src_ty.sty, &dst_ty.sty) {\n+    match (&src_ty.kind, &dst_ty.kind) {\n         (&ty::Ref(..), &ty::Ref(..))\n         | (&ty::Ref(..), &ty::RawPtr(..))\n         | (&ty::RawPtr(..), &ty::RawPtr(..)) => coerce_ptr(),\n@@ -154,7 +154,7 @@ pub fn size_and_align_of_dst<'tcx>(\n             .iconst(fx.pointer_type, layout.align.abi.bytes() as i64);\n         return (size, align);\n     }\n-    match ty.sty {\n+    match ty.kind {\n         ty::Dynamic(..) => {\n             // load size/align from vtable\n             (\n@@ -200,7 +200,7 @@ pub fn size_and_align_of_dst<'tcx>(\n             let size = fx.bcx.ins().iadd_imm(unsized_size, sized_size as i64);\n \n             // Packed types ignore the alignment of their fields.\n-            if let ty::Adt(def, _) = ty.sty {\n+            if let ty::Adt(def, _) = ty.kind {\n                 if def.repr.packed() {\n                     unsized_align = sized_align;\n                 }"}, {"sha": "c152b8d3c512257a3a2e26531e60dd2299920308", "filename": "src/value_and_place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44792f108949048c8945a29e6eee6a35c282f210/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44792f108949048c8945a29e6eee6a35c282f210/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=44792f108949048c8945a29e6eee6a35c282f210", "patch": "@@ -25,7 +25,7 @@ fn codegen_field<'tcx>(\n         if !field_layout.is_unsized() {\n             return simple(fx);\n         }\n-        match field_layout.ty.sty {\n+        match field_layout.ty.kind {\n             ty::Slice(..) | ty::Str | ty::Foreign(..) => return simple(fx),\n             ty::Adt(def, _) if def.repr.packed() => {\n                 assert_eq!(layout.align.abi.bytes(), 1);\n@@ -178,7 +178,7 @@ impl<'tcx> CValue<'tcx> {\n         let clif_ty = fx.clif_type(ty).unwrap();\n         let layout = fx.layout_of(ty);\n \n-        let val = match ty.sty {\n+        let val = match ty.kind {\n             ty::TyKind::Uint(UintTy::U128) | ty::TyKind::Int(IntTy::I128) => {\n                 let lsb = fx.bcx.ins().iconst(types::I64, const_val as u64 as i64);\n                 let msb = fx\n@@ -350,7 +350,7 @@ impl<'tcx> CPlace<'tcx> {\n             from_ty: Ty<'tcx>,\n             to_ty: Ty<'tcx>,\n         ) {\n-            match (&from_ty.sty, &to_ty.sty) {\n+            match (&from_ty.kind, &to_ty.kind) {\n                 (ty::Ref(_, t, MutImmutable), ty::Ref(_, u, MutImmutable))\n                 | (ty::Ref(_, t, MutMutable), ty::Ref(_, u, MutImmutable))\n                 | (ty::Ref(_, t, MutMutable), ty::Ref(_, u, MutMutable)) => {\n@@ -480,7 +480,7 @@ impl<'tcx> CPlace<'tcx> {\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n         index: Value,\n     ) -> CPlace<'tcx> {\n-        let (elem_layout, addr) = match self.layout().ty.sty {\n+        let (elem_layout, addr) = match self.layout().ty.kind {\n             ty::Array(elem_ty, _) => (fx.layout_of(elem_ty), self.to_addr(fx)),\n             ty::Slice(elem_ty) => (fx.layout_of(elem_ty), self.to_addr_maybe_unsized(fx).0),\n             _ => bug!(\"place_index({:?})\", self.layout().ty),"}]}