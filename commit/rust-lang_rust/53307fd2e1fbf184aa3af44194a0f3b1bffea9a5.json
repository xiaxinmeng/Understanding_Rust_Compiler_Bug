{"sha": "53307fd2e1fbf184aa3af44194a0f3b1bffea9a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMzA3ZmQyZTFmYmYxODRhYTNhZjQ0MTk0YTBmM2IxYmZmZWE5YTU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-28T16:42:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-11T12:59:01Z"}, "message": "Introduce PointerBase::Dangling", "tree": {"sha": "cbc9bb0b6d53ab1c2cc8f9346fa41fca726a744c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbc9bb0b6d53ab1c2cc8f9346fa41fca726a744c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53307fd2e1fbf184aa3af44194a0f3b1bffea9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53307fd2e1fbf184aa3af44194a0f3b1bffea9a5", "html_url": "https://github.com/rust-lang/rust/commit/53307fd2e1fbf184aa3af44194a0f3b1bffea9a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53307fd2e1fbf184aa3af44194a0f3b1bffea9a5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfb5d16fb33948746d5d0c83eecb3acb5c49a49b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb5d16fb33948746d5d0c83eecb3acb5c49a49b", "html_url": "https://github.com/rust-lang/rust/commit/dfb5d16fb33948746d5d0c83eecb3acb5c49a49b"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "d949bf7f57db03d715f6ea47887a1490f44c6855", "filename": "src/abi/comments.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53307fd2e1fbf184aa3af44194a0f3b1bffea9a5/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53307fd2e1fbf184aa3af44194a0f3b1bffea9a5/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=53307fd2e1fbf184aa3af44194a0f3b1bffea9a5", "patch": "@@ -90,6 +90,9 @@ pub(super) fn add_local_place_comments<'tcx>(\n                 (crate::pointer::PointerBase::Stack(stack_slot), offset) => {\n                     (\"stack\", format!(\"storage={}{}{}\", stack_slot, offset, meta).into())\n                 }\n+                (crate::pointer::PointerBase::Dangling(align), offset) => {\n+                    (\"zst\", format!(\"align={},offset={}\", align.bytes(), offset).into())\n+                }\n             }\n         }\n     };"}, {"sha": "a338e2b0197e85f61dee84cbf468ecfb0148f408", "filename": "src/pointer.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/53307fd2e1fbf184aa3af44194a0f3b1bffea9a5/src%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53307fd2e1fbf184aa3af44194a0f3b1bffea9a5/src%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpointer.rs?ref=53307fd2e1fbf184aa3af44194a0f3b1bffea9a5", "patch": "@@ -1,5 +1,7 @@\n use crate::prelude::*;\n \n+use rustc_target::abi::Align;\n+\n use cranelift_codegen::ir::immediates::Offset32;\n \n #[derive(Copy, Clone, Debug)]\n@@ -12,6 +14,7 @@ pub(crate) struct Pointer {\n pub(crate) enum PointerBase {\n     Addr(Value),\n     Stack(StackSlot),\n+    Dangling(Align),\n }\n \n impl Pointer {\n@@ -37,6 +40,13 @@ impl Pointer {\n         }\n     }\n \n+    pub(crate) fn dangling(align: Align) -> Self {\n+        Pointer {\n+            base: PointerBase::Dangling(align),\n+            offset: Offset32::new(0),\n+        }\n+    }\n+\n     #[cfg(debug_assertions)]\n     pub(crate) fn base_and_offset(self) -> (PointerBase, Offset32) {\n         (self.base, self.offset)\n@@ -53,6 +63,9 @@ impl Pointer {\n                 }\n             }\n             PointerBase::Stack(stack_slot) => fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, self.offset),\n+            PointerBase::Dangling(align) => {\n+                fx.bcx.ins().iconst(fx.pointer_type, i64::try_from(align.bytes()).unwrap())\n+            }\n         }\n     }\n \n@@ -80,6 +93,7 @@ impl Pointer {\n                 let base_addr = match self.base {\n                     PointerBase::Addr(addr) => addr,\n                     PointerBase::Stack(stack_slot) => fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0),\n+                    PointerBase::Dangling(align) => fx.bcx.ins().iconst(fx.pointer_type, i64::try_from(align.bytes()).unwrap()),\n                 };\n                 let addr = fx.bcx.ins().iadd_imm(base_addr, new_offset);\n                 Pointer {\n@@ -109,6 +123,13 @@ impl Pointer {\n                     offset: Offset32::new(0),\n                 }\n             }\n+            PointerBase::Dangling(align) => {\n+                let addr = fx.bcx.ins().iconst(fx.pointer_type, i64::try_from(align.bytes()).unwrap());\n+                Pointer {\n+                    base: PointerBase::Addr(fx.bcx.ins().iadd(addr, extra_offset)),\n+                    offset: self.offset,\n+                }\n+            }\n         }\n     }\n \n@@ -127,6 +148,7 @@ impl Pointer {\n             } else {\n                 fx.bcx.ins().stack_load(ty, stack_slot, self.offset)\n             }\n+            PointerBase::Dangling(_align) => unreachable!(),\n         }\n     }\n \n@@ -150,6 +172,7 @@ impl Pointer {\n                     fx.bcx.ins().stack_store(value, stack_slot, self.offset);\n                 }\n             }\n+            PointerBase::Dangling(_align) => unreachable!(),\n         }\n     }\n }"}, {"sha": "6d164e70f0e9f3fce0ca49d6a9415f568dd0c414", "filename": "src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53307fd2e1fbf184aa3af44194a0f3b1bffea9a5/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53307fd2e1fbf184aa3af44194a0f3b1bffea9a5/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=53307fd2e1fbf184aa3af44194a0f3b1bffea9a5", "patch": "@@ -344,7 +344,7 @@ impl<'tcx> CPlace<'tcx> {\n                 }\n             }\n             CPlaceInner::NoPlace => CValue::by_ref(\n-                Pointer::const_addr(fx, i64::try_from(self.layout.align.pref.bytes()).unwrap()),\n+                Pointer::dangling(self.layout.align.pref),\n                 layout,\n             ),\n         }"}]}