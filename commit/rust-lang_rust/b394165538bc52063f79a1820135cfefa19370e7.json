{"sha": "b394165538bc52063f79a1820135cfefa19370e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzOTQxNjU1MzhiYzUyMDYzZjc5YTE4MjAxMzVjZmVmYTE5MzcwZTc=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-04-01T05:35:37Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-04-01T05:35:37Z"}, "message": "Deprecate offset_to; switch core&alloc to using offset_from instead\n\nBonus: might make code than uses `.len()` on slice iterators faster", "tree": {"sha": "a5f7dd9904f273e68887449cd4fc6d755e37ec3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5f7dd9904f273e68887449cd4fc6d755e37ec3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b394165538bc52063f79a1820135cfefa19370e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b394165538bc52063f79a1820135cfefa19370e7", "html_url": "https://github.com/rust-lang/rust/commit/b394165538bc52063f79a1820135cfefa19370e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b394165538bc52063f79a1820135cfefa19370e7/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80785a547d29519dbdb5781437ec318fb210b980", "url": "https://api.github.com/repos/rust-lang/rust/commits/80785a547d29519dbdb5781437ec318fb210b980", "html_url": "https://github.com/rust-lang/rust/commit/80785a547d29519dbdb5781437ec318fb210b980"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "009441e1680ddbbb1236d545c7acedd695c9a066", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b394165538bc52063f79a1820135cfefa19370e7/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b394165538bc52063f79a1820135cfefa19370e7/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=b394165538bc52063f79a1820135cfefa19370e7", "patch": "@@ -103,13 +103,13 @@\n #![feature(lang_items)]\n #![feature(needs_allocator)]\n #![feature(nonzero)]\n-#![feature(offset_to)]\n #![feature(optin_builtin_traits)]\n #![feature(pattern)]\n #![feature(pin)]\n #![feature(placement_in_syntax)]\n #![feature(placement_new_protocol)]\n #![feature(ptr_internals)]\n+#![feature(ptr_offset_from)]\n #![feature(rustc_attrs)]\n #![feature(slice_get_slice)]\n #![feature(slice_rsplit)]"}, {"sha": "d8ec956df8a7a164780fa0e1c4a8c3b7aa956276", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b394165538bc52063f79a1820135cfefa19370e7/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b394165538bc52063f79a1820135cfefa19370e7/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=b394165538bc52063f79a1820135cfefa19370e7", "patch": "@@ -2338,9 +2338,10 @@ impl<T> Iterator for IntoIter<T> {\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let exact = match self.ptr.offset_to(self.end) {\n-            Some(x) => x as usize,\n-            None => (self.end as usize).wrapping_sub(self.ptr as usize),\n+        let exact = if mem::size_of::<T>() == 0 {\n+            (self.end as usize).wrapping_sub(self.ptr as usize)\n+        } else {\n+            unsafe { self.end.offset_from(self.ptr) as usize }\n         };\n         (exact, Some(exact))\n     }"}, {"sha": "c1e150e9fb909906e41d4b35835b64c4df4e8b47", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b394165538bc52063f79a1820135cfefa19370e7/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b394165538bc52063f79a1820135cfefa19370e7/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b394165538bc52063f79a1820135cfefa19370e7", "patch": "@@ -677,6 +677,7 @@ impl<T: ?Sized> *const T {\n     ///\n     /// ```\n     /// #![feature(offset_to)]\n+    /// #![allow(deprecated)]\n     ///\n     /// fn main() {\n     ///     let a = [0; 5];\n@@ -689,14 +690,15 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[unstable(feature = \"offset_to\", issue = \"41079\")]\n+    #[rustc_deprecated(since = \"1.27.0\", reason = \"Replaced by `wrapping_offset_from`, with the \\\n+        opposite argument order.  If you're writing unsafe code, consider `offset_from`.\")]\n     #[inline]\n     pub fn offset_to(self, other: *const T) -> Option<isize> where T: Sized {\n         let size = mem::size_of::<T>();\n         if size == 0 {\n             None\n         } else {\n-            let diff = (other as isize).wrapping_sub(self as isize);\n-            Some(diff / size as isize)\n+            Some(other.wrapping_offset_from(self))\n         }\n     }\n \n@@ -1442,6 +1444,7 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// ```\n     /// #![feature(offset_to)]\n+    /// #![allow(deprecated)]\n     ///\n     /// fn main() {\n     ///     let mut a = [0; 5];\n@@ -1454,14 +1457,15 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[unstable(feature = \"offset_to\", issue = \"41079\")]\n+    #[rustc_deprecated(since = \"1.27.0\", reason = \"Replaced by `wrapping_offset_from`, with the \\\n+        opposite argument order.  If you're writing unsafe code, consider `offset_from`.\")]\n     #[inline]\n     pub fn offset_to(self, other: *const T) -> Option<isize> where T: Sized {\n         let size = mem::size_of::<T>();\n         if size == 0 {\n             None\n         } else {\n-            let diff = (other as isize).wrapping_sub(self as isize);\n-            Some(diff / size as isize)\n+            Some(other.wrapping_offset_from(self))\n         }\n     }\n "}, {"sha": "0a22028da81f4b3293015033eb8c8a535fdd497a", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b394165538bc52063f79a1820135cfefa19370e7/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b394165538bc52063f79a1820135cfefa19370e7/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=b394165538bc52063f79a1820135cfefa19370e7", "patch": "@@ -1185,7 +1185,7 @@ macro_rules! iterator {\n \n             #[inline]\n             fn size_hint(&self) -> (usize, Option<usize>) {\n-                let exact = ptrdistance(self.ptr, self.end);\n+                let exact = unsafe { ptrdistance(self.ptr, self.end) };\n                 (exact, Some(exact))\n             }\n \n@@ -1593,10 +1593,11 @@ unsafe impl<'a, T> TrustedLen for IterMut<'a, T> {}\n // Return the number of elements of `T` from `start` to `end`.\n // Return the arithmetic difference if `T` is zero size.\n #[inline(always)]\n-fn ptrdistance<T>(start: *const T, end: *const T) -> usize {\n-    match start.offset_to(end) {\n-        Some(x) => x as usize,\n-        None => (end as usize).wrapping_sub(start as usize),\n+unsafe fn ptrdistance<T>(start: *const T, end: *const T) -> usize {\n+    if mem::size_of::<T>() == 0 {\n+        (end as usize).wrapping_sub(start as usize)\n+    } else {\n+        end.offset_from(start) as usize\n     }\n }\n "}]}