{"sha": "1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhOGYyYWEwMjRjNmYxYTVlOTcwNGM5Y2JkMmU1YTAyMGRlYmUyYzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-21T16:34:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-21T16:34:28Z"}, "message": "Move LocalImportId", "tree": {"sha": "2d432efaf61acd53adc8cf0f78f4ed60f1fa758c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d432efaf61acd53adc8cf0f78f4ed60f1fa758c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2", "html_url": "https://github.com/rust-lang/rust/commit/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f79e37ca1c4a617a46b85bf897dffbf4abed9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f79e37ca1c4a617a46b85bf897dffbf4abed9e", "html_url": "https://github.com/rust-lang/rust/commit/02f79e37ca1c4a617a46b85bf897dffbf4abed9e"}], "stats": {"total": 48, "additions": 20, "deletions": 28}, "files": [{"sha": "9e082c5f741d32dc3cf0a5e5d7339166adfc43bf", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2", "patch": "@@ -5,7 +5,7 @@ use hir_expand::name::Name;\n use once_cell::sync::Lazy;\n use rustc_hash::FxHashMap;\n \n-use crate::{per_ns::PerNs, BuiltinType, ImplId, LocalImportId, MacroDefId, ModuleDefId, TraitId};\n+use crate::{per_ns::PerNs, BuiltinType, ImplId, MacroDefId, ModuleDefId, TraitId};\n \n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ItemScope {\n@@ -112,28 +112,23 @@ impl ItemScope {\n         self.legacy_macros.insert(name, mac);\n     }\n \n-    pub(crate) fn push_res(\n-        &mut self,\n-        name: Name,\n-        res: &Resolution,\n-        import: Option<LocalImportId>,\n-    ) -> bool {\n+    pub(crate) fn push_res(&mut self, name: Name, res: &Resolution, import: bool) -> bool {\n         let mut changed = false;\n         let existing = self.items.entry(name.clone()).or_default();\n \n         if existing.def.types.is_none() && res.def.types.is_some() {\n             existing.def.types = res.def.types;\n-            existing.import = import.is_some() || res.import;\n+            existing.import = import || res.import;\n             changed = true;\n         }\n         if existing.def.values.is_none() && res.def.values.is_some() {\n             existing.def.values = res.def.values;\n-            existing.import = import.is_some() || res.import;\n+            existing.import = import || res.import;\n             changed = true;\n         }\n         if existing.def.macros.is_none() && res.def.macros.is_some() {\n             existing.def.macros = res.def.macros;\n-            existing.import = import.is_some() || res.import;\n+            existing.import = import || res.import;\n             changed = true;\n         }\n "}, {"sha": "f6c7f38d171c2e06812bc79f8de962672966951c", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2", "patch": "@@ -51,10 +51,6 @@ use ra_syntax::{ast, AstNode};\n use crate::body::Expander;\n use crate::builtin_type::BuiltinType;\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub(crate) struct LocalImportId(RawId);\n-impl_arena_id!(LocalImportId);\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ModuleId {\n     pub krate: CrateId,"}, {"sha": "2b194f4881b594968cac11662eb920939d1b2437", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2", "patch": "@@ -26,8 +26,7 @@ use crate::{\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n     AdtId, AstId, ConstLoc, ContainerId, EnumLoc, EnumVariantId, FunctionLoc, ImplLoc, Intern,\n-    LocalImportId, LocalModuleId, ModuleDefId, ModuleId, StaticLoc, StructLoc, TraitLoc,\n-    TypeAliasLoc, UnionLoc,\n+    LocalModuleId, ModuleDefId, ModuleId, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc, UnionLoc,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -93,7 +92,7 @@ impl PartialResolvedImport {\n #[derive(Clone, Debug, Eq, PartialEq)]\n struct ImportDirective {\n     module_id: LocalModuleId,\n-    import_id: LocalImportId,\n+    import_id: raw::Import,\n     import: raw::ImportData,\n     status: PartialResolvedImport,\n }\n@@ -110,7 +109,7 @@ struct MacroDirective {\n struct DefCollector<'a, DB> {\n     db: &'a DB,\n     def_map: CrateDefMap,\n-    glob_imports: FxHashMap<LocalModuleId, Vec<(LocalModuleId, LocalImportId)>>,\n+    glob_imports: FxHashMap<LocalModuleId, Vec<(LocalModuleId, raw::Import)>>,\n     unresolved_imports: Vec<ImportDirective>,\n     resolved_imports: Vec<ImportDirective>,\n     unexpanded_macros: Vec<MacroDirective>,\n@@ -442,7 +441,7 @@ where\n     fn update(\n         &mut self,\n         module_id: LocalModuleId,\n-        import: Option<LocalImportId>,\n+        import: Option<raw::Import>,\n         resolutions: &[(Name, Resolution)],\n     ) {\n         self.update_recursive(module_id, import, resolutions, 0)\n@@ -451,7 +450,7 @@ where\n     fn update_recursive(\n         &mut self,\n         module_id: LocalModuleId,\n-        import: Option<LocalImportId>,\n+        import: Option<raw::Import>,\n         resolutions: &[(Name, Resolution)],\n         depth: usize,\n     ) {\n@@ -462,7 +461,7 @@ where\n         let scope = &mut self.def_map.modules[module_id].scope;\n         let mut changed = false;\n         for (name, res) in resolutions {\n-            changed |= scope.push_res(name.clone(), res, import);\n+            changed |= scope.push_res(name.clone(), res, import.is_some());\n         }\n \n         if !changed {"}, {"sha": "1b83b224742a4e20786bd0fd4d0ea16e557815a3", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=1a8f2aa024c6f1a5e9704c9cbd2e5a020debe2c2", "patch": "@@ -20,9 +20,7 @@ use ra_syntax::{\n };\n use test_utils::tested_by;\n \n-use crate::{\n-    attr::Attrs, db::DefDatabase, path::ModPath, FileAstId, HirFileId, InFile, LocalImportId,\n-};\n+use crate::{attr::Attrs, db::DefDatabase, path::ModPath, FileAstId, HirFileId, InFile};\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n ///\n@@ -31,7 +29,7 @@ use crate::{\n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct RawItems {\n     modules: Arena<Module, ModuleData>,\n-    imports: Arena<LocalImportId, ImportData>,\n+    imports: Arena<Import, ImportData>,\n     defs: Arena<Def, DefData>,\n     macros: Arena<Macro, MacroData>,\n     impls: Arena<Impl, ImplData>,\n@@ -73,9 +71,9 @@ impl Index<Module> for RawItems {\n     }\n }\n \n-impl Index<LocalImportId> for RawItems {\n+impl Index<Import> for RawItems {\n     type Output = ImportData;\n-    fn index(&self, idx: LocalImportId) -> &ImportData {\n+    fn index(&self, idx: Import) -> &ImportData {\n         &self.imports[idx]\n     }\n }\n@@ -110,7 +108,7 @@ pub(super) struct RawItem {\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n pub(super) enum RawItemKind {\n     Module(Module),\n-    Import(LocalImportId),\n+    Import(Import),\n     Def(Def),\n     Macro(Macro),\n     Impl(Impl),\n@@ -126,6 +124,10 @@ pub(super) enum ModuleData {\n     Definition { name: Name, ast_id: FileAstId<ast::Module>, items: Vec<RawItem> },\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub(crate) struct Import(RawId);\n+impl_arena_id!(Import);\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImportData {\n     pub(super) path: ModPath,"}]}