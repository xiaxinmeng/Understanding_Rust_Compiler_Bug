{"sha": "18482f7b2341fcabdbb854e3d4fe9a724726aa97", "node_id": "C_kwDOAAsO6NoAKDE4NDgyZjdiMjM0MWZjYWJkYmI4NTRlM2Q0ZmU5YTcyNDcyNmFhOTc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-06T18:26:36Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-13T14:05:30Z"}, "message": "Store a LocalDefId in hir::GenericParam.", "tree": {"sha": "9badca8e44f1260d0a799ec649c8319c3b99bd83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9badca8e44f1260d0a799ec649c8319c3b99bd83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18482f7b2341fcabdbb854e3d4fe9a724726aa97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18482f7b2341fcabdbb854e3d4fe9a724726aa97", "html_url": "https://github.com/rust-lang/rust/commit/18482f7b2341fcabdbb854e3d4fe9a724726aa97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18482f7b2341fcabdbb854e3d4fe9a724726aa97/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82c08f58e18078361a1d404cefebc3ed4c9d24a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82c08f58e18078361a1d404cefebc3ed4c9d24a", "html_url": "https://github.com/rust-lang/rust/commit/e82c08f58e18078361a1d404cefebc3ed4c9d24a"}], "stats": {"total": 155, "additions": 67, "deletions": 88}, "files": [{"sha": "66003cada4afcd09df79f97a937669411bae4033", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -830,8 +830,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             ),\n         };\n         let hir_id = self.lower_node_id(node_id);\n+        let def_id = self.local_def_id(node_id);\n         Some(hir::GenericParam {\n             hir_id,\n+            def_id,\n             name,\n             span: self.lower_span(ident.span),\n             pure_wrt_drop: false,\n@@ -1521,6 +1523,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                         hir::GenericParam {\n                             hir_id,\n+                            def_id: lctx.local_def_id(new_node_id),\n                             name,\n                             span: lifetime.ident.span,\n                             pure_wrt_drop: false,\n@@ -1978,6 +1981,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n                         hir::GenericParam {\n                             hir_id,\n+                            def_id: this.local_def_id(new_node_id),\n                             name,\n                             span: lifetime.ident.span,\n                             pure_wrt_drop: false,\n@@ -2176,6 +2180,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.lower_attrs(hir_id, &param.attrs);\n         hir::GenericParam {\n             hir_id,\n+            def_id: self.local_def_id(param.id),\n             name,\n             span: self.lower_span(param.span()),\n             pure_wrt_drop: self.tcx.sess.contains_name(&param.attrs, sym::may_dangle),\n@@ -2280,6 +2285,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // Set the name to `impl Bound1 + Bound2`.\n         let param = hir::GenericParam {\n             hir_id: self.lower_node_id(node_id),\n+            def_id,\n             name: ParamName::Plain(self.lower_ident(ident)),\n             pure_wrt_drop: false,\n             span: self.lower_span(span),"}, {"sha": "4493bd3b48e59f1af8eb8574ad92c381eabba154", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -487,6 +487,7 @@ pub enum GenericParamKind<'hir> {\n #[derive(Debug, HashStable_Generic)]\n pub struct GenericParam<'hir> {\n     pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n     pub name: ParamName,\n     pub span: Span,\n     pub pure_wrt_drop: bool,\n@@ -1628,7 +1629,7 @@ impl ArrayLen {\n /// explicit discriminant values for enum variants.\n ///\n /// You can check if this anon const is a default in a const param\n-/// `const N: usize = { ... }` with `tcx.hir().opt_const_param_default_param_hir_id(..)`\n+/// `const N: usize = { ... }` with `tcx.hir().opt_const_param_default_param_def_id(..)`\n #[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug, HashStable_Generic)]\n pub struct AnonConst {\n     pub hir_id: HirId,"}, {"sha": "a0ac43aa9f050b13aeecfa32fdc0b28cc958a7b2", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -856,7 +856,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         bounds: &mut Bounds<'hir>,\n         ast_bounds: &'hir [hir::GenericBound<'hir>],\n-        self_ty_where_predicates: Option<(hir::HirId, &'hir [hir::WherePredicate<'hir>])>,\n+        self_ty_where_predicates: Option<(LocalDefId, &'hir [hir::WherePredicate<'hir>])>,\n         span: Span,\n     ) {\n         let tcx = self.tcx();\n@@ -876,10 +876,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         };\n         search_bounds(ast_bounds);\n         if let Some((self_ty, where_clause)) = self_ty_where_predicates {\n-            let self_ty_def_id = tcx.hir().local_def_id(self_ty).to_def_id();\n             for clause in where_clause {\n                 if let hir::WherePredicate::BoundPredicate(pred) = clause {\n-                    if pred.is_param_bound(self_ty_def_id) {\n+                    if pred.is_param_bound(self_ty.to_def_id()) {\n                         search_bounds(pred.bounds);\n                     }\n                 }"}, {"sha": "efb34e4ff65924bc92746c854ad7e16d12b1fdd4", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -853,7 +853,7 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n \n         // Const parameters are well formed if their type is structural match.\n         hir::GenericParamKind::Const { ty: hir_ty, default: _ } => {\n-            let ty = tcx.type_of(tcx.hir().local_def_id(param.hir_id));\n+            let ty = tcx.type_of(param.def_id);\n \n             if tcx.features().adt_const_params {\n                 if let Some(non_structural_match_ty) ="}, {"sha": "c269855af089614da02b186bbfed486738b28e5b", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -291,18 +291,16 @@ impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n             match param.kind {\n                 hir::GenericParamKind::Lifetime { .. } => {}\n                 hir::GenericParamKind::Type { default: Some(_), .. } => {\n-                    let def_id = self.tcx.hir().local_def_id(param.hir_id);\n-                    self.tcx.ensure().type_of(def_id);\n+                    self.tcx.ensure().type_of(param.def_id);\n                 }\n                 hir::GenericParamKind::Type { .. } => {}\n                 hir::GenericParamKind::Const { default, .. } => {\n-                    let def_id = self.tcx.hir().local_def_id(param.hir_id);\n-                    self.tcx.ensure().type_of(def_id);\n+                    self.tcx.ensure().type_of(param.def_id);\n                     if let Some(default) = default {\n                         let default_def_id = self.tcx.hir().local_def_id(default.hir_id);\n                         // need to store default and type of default\n                         self.tcx.ensure().type_of(default_def_id);\n-                        self.tcx.ensure().const_param_default(def_id);\n+                        self.tcx.ensure().const_param_default(param.def_id);\n                     }\n                 }\n             }"}, {"sha": "b369a1eb109c7e49ceb3cbadeaeb066d66d5283e", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -51,7 +51,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 // of a const parameter type, e.g. `struct Foo<const N: usize, const M: [u8; N]>` is not allowed.\n                 None\n             } else if tcx.lazy_normalization() {\n-                if let Some(param_id) = tcx.hir().opt_const_param_default_param_hir_id(hir_id) {\n+                if let Some(param_id) = tcx.hir().opt_const_param_default_param_def_id(hir_id) {\n                     // If the def_id we are calling generics_of on is an anon ct default i.e:\n                     //\n                     // struct Foo<const N: usize = { .. }>;\n@@ -77,8 +77,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                     // This has some implications for how we get the predicates available to the anon const\n                     // see `explicit_predicates_of` for more information on this\n                     let generics = tcx.generics_of(parent_def_id.to_def_id());\n-                    let param_def = tcx.hir().local_def_id(param_id).to_def_id();\n-                    let param_def_idx = generics.param_def_id_to_index[&param_def];\n+                    let param_def_idx = generics.param_def_id_to_index[&param_id.to_def_id()];\n                     // In the above example this would be .params[..N#0]\n                     let params = generics.params[..param_def_idx as usize].to_owned();\n                     let param_def_id_to_index =\n@@ -241,7 +240,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     params.extend(early_lifetimes.enumerate().map(|(i, param)| ty::GenericParamDef {\n         name: param.name.ident().name,\n         index: own_start + i as u32,\n-        def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n+        def_id: param.def_id.to_def_id(),\n         pure_wrt_drop: param.pure_wrt_drop,\n         kind: ty::GenericParamDefKind::Lifetime,\n     }));\n@@ -286,7 +285,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             Some(ty::GenericParamDef {\n                 index: next_index(),\n                 name: param.name.ident().name,\n-                def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n+                def_id: param.def_id.to_def_id(),\n                 pure_wrt_drop: param.pure_wrt_drop,\n                 kind,\n             })\n@@ -303,7 +302,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             Some(ty::GenericParamDef {\n                 index: next_index(),\n                 name: param.name.ident().name,\n-                def_id: tcx.hir().local_def_id(param.hir_id).to_def_id(),\n+                def_id: param.def_id.to_def_id(),\n                 pure_wrt_drop: param.pure_wrt_drop,\n                 kind: ty::GenericParamDefKind::Const { has_default: default.is_some() },\n             })"}, {"sha": "ce5cde5b88335460504f2af11fa0a26c6c91326b", "filename": "compiler/rustc_hir_analysis/src/collect/lifetimes.rs", "status": "modified", "additions": 19, "deletions": 29, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Flifetimes.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -15,7 +15,6 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{GenericArg, GenericParam, GenericParamKind, HirIdMap, LifetimeName, Node};\n use rustc_middle::bug;\n-use rustc_middle::hir::map::Map;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::resolve_lifetime::*;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt, TypeSuperVisitable, TypeVisitor};\n@@ -25,30 +24,28 @@ use rustc_span::Span;\n use std::fmt;\n \n trait RegionExt {\n-    fn early(hir_map: Map<'_>, param: &GenericParam<'_>) -> (LocalDefId, Region);\n+    fn early(param: &GenericParam<'_>) -> (LocalDefId, Region);\n \n-    fn late(index: u32, hir_map: Map<'_>, param: &GenericParam<'_>) -> (LocalDefId, Region);\n+    fn late(index: u32, param: &GenericParam<'_>) -> (LocalDefId, Region);\n \n     fn id(&self) -> Option<DefId>;\n \n     fn shifted(self, amount: u32) -> Region;\n }\n \n impl RegionExt for Region {\n-    fn early(hir_map: Map<'_>, param: &GenericParam<'_>) -> (LocalDefId, Region) {\n-        let def_id = hir_map.local_def_id(param.hir_id);\n-        debug!(\"Region::early: def_id={:?}\", def_id);\n-        (def_id, Region::EarlyBound(def_id.to_def_id()))\n+    fn early(param: &GenericParam<'_>) -> (LocalDefId, Region) {\n+        debug!(\"Region::early: def_id={:?}\", param.def_id);\n+        (param.def_id, Region::EarlyBound(param.def_id.to_def_id()))\n     }\n \n-    fn late(idx: u32, hir_map: Map<'_>, param: &GenericParam<'_>) -> (LocalDefId, Region) {\n+    fn late(idx: u32, param: &GenericParam<'_>) -> (LocalDefId, Region) {\n         let depth = ty::INNERMOST;\n-        let def_id = hir_map.local_def_id(param.hir_id);\n         debug!(\n             \"Region::late: idx={:?}, param={:?} depth={:?} def_id={:?}\",\n-            idx, param, depth, def_id,\n+            idx, param, depth, param.def_id,\n         );\n-        (def_id, Region::LateBound(depth, idx, def_id.to_def_id()))\n+        (param.def_id, Region::LateBound(depth, idx, param.def_id.to_def_id()))\n     }\n \n     fn id(&self) -> Option<DefId> {\n@@ -395,7 +392,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n                     .enumerate()\n                     .map(|(late_bound_idx, param)| {\n-                        let pair = Region::late(late_bound_idx as u32, self.tcx.hir(), param);\n+                        let pair = Region::late(late_bound_idx as u32, param);\n                         let r = late_region_as_bound_region(self.tcx, &pair.1);\n                         (pair, r)\n                     })\n@@ -492,7 +489,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 for param in generics.params {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {\n-                            let (def_id, reg) = Region::early(self.tcx.hir(), &param);\n+                            let (def_id, reg) = Region::early(&param);\n                             lifetimes.insert(def_id, reg);\n                         }\n                         GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {}\n@@ -523,9 +520,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .params\n                     .iter()\n                     .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(self.tcx.hir(), param))\n-                        }\n+                        GenericParamKind::Lifetime { .. } => Some(Region::early(param)),\n                         GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => None,\n                     })\n                     .collect();\n@@ -573,7 +568,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n                     .enumerate()\n                     .map(|(late_bound_idx, param)| {\n-                        let pair = Region::late(late_bound_idx as u32, self.tcx.hir(), param);\n+                        let pair = Region::late(late_bound_idx as u32, param);\n                         let r = late_region_as_bound_region(self.tcx, &pair.1);\n                         (pair, r)\n                     })\n@@ -731,9 +726,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .params\n                     .iter()\n                     .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(self.tcx.hir(), param))\n-                        }\n+                        GenericParamKind::Lifetime { .. } => Some(Region::early(param)),\n                         GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => None,\n                     })\n                     .collect();\n@@ -779,9 +772,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     .params\n                     .iter()\n                     .filter_map(|param| match param.kind {\n-                        GenericParamKind::Lifetime { .. } => {\n-                            Some(Region::early(self.tcx.hir(), param))\n-                        }\n+                        GenericParamKind::Lifetime { .. } => Some(Region::early(param)),\n                         GenericParamKind::Const { .. } | GenericParamKind::Type { .. } => None,\n                     })\n                     .collect();\n@@ -886,7 +877,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 })\n                                 .enumerate()\n                                 .map(|(late_bound_idx, param)| {\n-                                        Region::late(late_bound_idx as u32, this.tcx.hir(), param)\n+                                        Region::late(late_bound_idx as u32, param)\n                                 })\n                                 .collect();\n                         let binders: Vec<_> =\n@@ -999,8 +990,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             .filter(|param| matches!(param.kind, GenericParamKind::Lifetime { .. }))\n             .enumerate()\n             .map(|(late_bound_idx, param)| {\n-                let pair =\n-                    Region::late(initial_bound_vars + late_bound_idx as u32, self.tcx.hir(), param);\n+                let pair = Region::late(initial_bound_vars + late_bound_idx as u32, param);\n                 let r = late_region_as_bound_region(self.tcx, &pair.1);\n                 lifetimes.insert(pair.0, pair.1);\n                 r\n@@ -1131,9 +1121,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     if self.tcx.is_late_bound(param.hir_id) {\n                         let late_bound_idx = named_late_bound_vars;\n                         named_late_bound_vars += 1;\n-                        Some(Region::late(late_bound_idx, self.tcx.hir(), param))\n+                        Some(Region::late(late_bound_idx, param))\n                     } else {\n-                        Some(Region::early(self.tcx.hir(), param))\n+                        Some(Region::early(param))\n                     }\n                 }\n                 GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => None,\n@@ -1149,7 +1139,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             })\n             .enumerate()\n             .map(|(late_bound_idx, param)| {\n-                let pair = Region::late(late_bound_idx as u32, self.tcx.hir(), param);\n+                let pair = Region::late(late_bound_idx as u32, param);\n                 late_region_as_bound_region(self.tcx, &pair.1)\n             })\n             .collect();"}, {"sha": "5ed3ccdbf1ea03cdbba6ee2c68bc5d79e72196aa", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -199,7 +199,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                     &icx,\n                     &mut bounds,\n                     &[],\n-                    Some((param.hir_id, ast_generics.predicates)),\n+                    Some((param.def_id, ast_generics.predicates)),\n                     param.span,\n                 );\n                 trace!(?bounds);\n@@ -429,7 +429,7 @@ pub(super) fn explicit_predicates_of<'tcx>(\n             let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n             let parent_def_id = tcx.hir().get_parent_item(hir_id);\n \n-            if tcx.hir().opt_const_param_default_param_hir_id(hir_id).is_some() {\n+            if tcx.hir().opt_const_param_default_param_def_id(hir_id).is_some() {\n                 // In `generics_of` we set the generics' parent to be our parent's parent which means that\n                 // we lose out on the predicates of our actual parent if we dont return those predicates here.\n                 // (See comment in `generics_of` for more information on why the parent shenanigans is necessary)\n@@ -531,7 +531,7 @@ pub(super) fn super_predicates_that_define_assoc_type(\n         let is_trait_alias = tcx.is_trait_alias(trait_def_id);\n         let superbounds2 = icx.type_parameter_bounds_in_generics(\n             generics,\n-            item.hir_id(),\n+            item.owner_id.def_id,\n             self_param_ty,\n             OnlySelfBounds(!is_trait_alias),\n             assoc_name,\n@@ -641,7 +641,7 @@ pub(super) fn type_param_predicates(\n     let extra_predicates = extend.into_iter().chain(\n         icx.type_parameter_bounds_in_generics(\n             ast_generics,\n-            param_id,\n+            def_id,\n             ty,\n             OnlySelfBounds(true),\n             Some(assoc_name),\n@@ -666,13 +666,11 @@ impl<'tcx> ItemCtxt<'tcx> {\n     fn type_parameter_bounds_in_generics(\n         &self,\n         ast_generics: &'tcx hir::Generics<'tcx>,\n-        param_id: hir::HirId,\n+        param_def_id: LocalDefId,\n         ty: Ty<'tcx>,\n         only_self_bounds: OnlySelfBounds,\n         assoc_name: Option<Ident>,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n-        let param_def_id = self.tcx.hir().local_def_id(param_id).to_def_id();\n-        trace!(?param_def_id);\n         ast_generics\n             .predicates\n             .iter()\n@@ -681,7 +679,7 @@ impl<'tcx> ItemCtxt<'tcx> {\n                 _ => None,\n             })\n             .flat_map(|bp| {\n-                let bt = if bp.is_param_bound(param_def_id) {\n+                let bt = if bp.is_param_bound(param_def_id.to_def_id()) {\n                     Some(ty)\n                 } else if !only_self_bounds.0 {\n                     Some(self.to_ty(bp.bounded_ty))"}, {"sha": "9bd1715ce39ffe21fe413a4bb0dee0c95b30e890", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -514,10 +514,10 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 }\n \n                 Node::GenericParam(&GenericParam {\n-                    hir_id: param_hir_id,\n+                    def_id: param_def_id,\n                     kind: GenericParamKind::Const { default: Some(ct), .. },\n                     ..\n-                }) if ct.hir_id == hir_id => tcx.type_of(tcx.hir().local_def_id(param_hir_id)),\n+                }) if ct.hir_id == hir_id => tcx.type_of(param_def_id),\n \n                 x => tcx.ty_error_with_message(\n                     DUMMY_SP,"}, {"sha": "ea0c2a20de33ec2cb59d26e6ca1822f2b8740298", "filename": "compiler/rustc_hir_analysis/src/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -22,7 +22,7 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n \n     if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst) && tcx.lazy_normalization()\n     {\n-        if tcx.hir().opt_const_param_default_param_hir_id(id).is_some() {\n+        if tcx.hir().opt_const_param_default_param_def_id(id).is_some() {\n             // In `generics_of` we set the generics' parent to be our parent's parent which means that\n             // we lose out on the predicates of our actual parent if we dont return those predicates here.\n             // (See comment in `generics_of` for more information on why the parent shenanigans is necessary)"}, {"sha": "df7731d6036f14d25b9f90121e8ed1d2c67cdd71", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -2101,11 +2101,10 @@ impl<'a, 'tcx> Visitor<'tcx> for EncodeContext<'a, 'tcx> {\n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_info_for_generics(&mut self, generics: &hir::Generics<'tcx>) {\n         for param in generics.params {\n-            let def_id = self.tcx.hir().local_def_id(param.hir_id);\n             match param.kind {\n                 hir::GenericParamKind::Lifetime { .. } | hir::GenericParamKind::Type { .. } => {}\n                 hir::GenericParamKind::Const { ref default, .. } => {\n-                    let def_id = def_id.to_def_id();\n+                    let def_id = param.def_id.to_def_id();\n                     if default.is_some() {\n                         record!(self.tables.const_param_default[def_id] <- self.tcx.const_param_default(def_id))\n                     }"}, {"sha": "2581b01193daddd42231a19c42c440f5e3e29347", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -1086,10 +1086,10 @@ impl<'hir> Map<'hir> {\n \n     /// Returns the HirId of `N` in `struct Foo<const N: usize = { ... }>` when\n     /// called with the HirId for the `{ ... }` anon const\n-    pub fn opt_const_param_default_param_hir_id(self, anon_const: HirId) -> Option<HirId> {\n+    pub fn opt_const_param_default_param_def_id(self, anon_const: HirId) -> Option<LocalDefId> {\n         match self.get(self.get_parent_node(anon_const)) {\n             Node::GenericParam(GenericParam {\n-                hir_id: param_id,\n+                def_id: param_id,\n                 kind: GenericParamKind::Const { .. },\n                 ..\n             }) => Some(*param_id),"}, {"sha": "f49efd460f741d62ab2fd36ba5b918b25815b0de", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -10,7 +10,7 @@ use crate::ty::codec::{TyDecoder, TyEncoder};\n use crate::ty::fold::{FallibleTypeFolder, TypeFoldable};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n-use crate::ty::{self, List, Ty, TyCtxt};\n+use crate::ty::{self, DefIdTree, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, ScalarInt, UserTypeAnnotationIndex};\n use crate::ty::{GenericArg, InternalSubsts, SubstsRef};\n \n@@ -2470,12 +2470,10 @@ impl<'tcx> ConstantKind<'tcx> {\n             ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {\n                 // Find the name and index of the const parameter by indexing the generics of\n                 // the parent item and construct a `ParamConst`.\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-                let item_id = tcx.hir().get_parent_node(hir_id);\n-                let item_def_id = tcx.hir().local_def_id(item_id);\n-                let generics = tcx.generics_of(item_def_id.to_def_id());\n+                let item_def_id = tcx.parent(def_id);\n+                let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n-                let name = tcx.hir().name(hir_id);\n+                let name = tcx.item_name(def_id);\n                 let ty_const =\n                     tcx.mk_const(ty::ConstKind::Param(ty::ParamConst::new(index, name)), ty);\n                 debug!(?ty_const);"}, {"sha": "c93abdfaa689c3778d5e8f1ce82b9aeb88896d63", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -1,6 +1,6 @@\n use crate::mir::interpret::LitToConstInput;\n use crate::mir::ConstantKind;\n-use crate::ty::{self, InternalSubsts, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n+use crate::ty::{self, DefIdTree, InternalSubsts, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::intern::Interned;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -131,12 +131,10 @@ impl<'tcx> Const<'tcx> {\n             ExprKind::Path(QPath::Resolved(_, &Path { res: Res::Def(ConstParam, def_id), .. })) => {\n                 // Find the name and index of the const parameter by indexing the generics of\n                 // the parent item and construct a `ParamConst`.\n-                let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-                let item_id = tcx.hir().get_parent_node(hir_id);\n-                let item_def_id = tcx.hir().local_def_id(item_id);\n-                let generics = tcx.generics_of(item_def_id.to_def_id());\n+                let item_def_id = tcx.parent(def_id);\n+                let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n-                let name = tcx.hir().name(hir_id);\n+                let name = tcx.item_name(def_id);\n                 Some(tcx.mk_const(ty::ConstKind::Param(ty::ParamConst::new(index, name)), ty))\n             }\n             _ => None,"}, {"sha": "029ee15d68d4a67fce26d81677b5eb7691c37cdb", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -151,7 +151,6 @@ enum SuggestChangingConstraintsMessage<'a> {\n }\n \n fn suggest_removing_unsized_bound(\n-    tcx: TyCtxt<'_>,\n     generics: &hir::Generics<'_>,\n     suggestions: &mut Vec<(Span, String, SuggestChangingConstraintsMessage<'_>)>,\n     param: &hir::GenericParam<'_>,\n@@ -160,17 +159,16 @@ fn suggest_removing_unsized_bound(\n     // See if there's a `?Sized` bound that can be removed to suggest that.\n     // First look at the `where` clause because we can have `where T: ?Sized`,\n     // then look at params.\n-    let param_def_id = tcx.hir().local_def_id(param.hir_id);\n     for (where_pos, predicate) in generics.predicates.iter().enumerate() {\n         let WherePredicate::BoundPredicate(predicate) = predicate else {\n             continue;\n         };\n-        if !predicate.is_param_bound(param_def_id.to_def_id()) {\n+        if !predicate.is_param_bound(param.def_id.to_def_id()) {\n             continue;\n         };\n \n         for (pos, bound) in predicate.bounds.iter().enumerate() {\n-            let    hir::GenericBound::Trait(poly, hir::TraitBoundModifier::Maybe) = bound else {\n+            let hir::GenericBound::Trait(poly, hir::TraitBoundModifier::Maybe) = bound else {\n                 continue;\n             };\n             if poly.trait_ref.trait_def_id() != def_id {\n@@ -232,7 +230,7 @@ pub fn suggest_constraining_type_params<'a>(\n                     param.span,\n                     &format!(\"this type parameter needs to be `{}`\", constraint),\n                 );\n-                suggest_removing_unsized_bound(tcx, generics, &mut suggestions, param, def_id);\n+                suggest_removing_unsized_bound(generics, &mut suggestions, param, def_id);\n             }\n         }\n \n@@ -283,8 +281,7 @@ pub fn suggest_constraining_type_params<'a>(\n         //          --\n         //          |\n         //          replace with: `T: Bar +`\n-        let param_def_id = tcx.hir().local_def_id(param.hir_id);\n-        if let Some(span) = generics.bounds_span_for_suggestions(param_def_id) {\n+        if let Some(span) = generics.bounds_span_for_suggestions(param.def_id) {\n             suggest_restrict(span, true);\n             continue;\n         }"}, {"sha": "a7b59e50ad1feddb7c3af7c409f85209d3419522", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -859,9 +859,7 @@ impl<'tcx> Cx<'tcx> {\n \n             Res::Def(DefKind::ConstParam, def_id) => {\n                 let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-                let item_id = self.tcx.hir().get_parent_node(hir_id);\n-                let item_def_id = self.tcx.hir().local_def_id(item_id);\n-                let generics = self.tcx.generics_of(item_def_id);\n+                let generics = self.tcx.generics_of(hir_id.owner);\n                 let index = generics.param_def_id_to_index[&def_id];\n                 let name = self.tcx.hir().name(hir_id);\n                 let param = ty::ParamConst::new(index, name);"}, {"sha": "3afe609bd0f0ed909f3acbd89dcd9f9f0bab6d5c", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -411,8 +411,7 @@ impl CheckAttrVisitor<'_> {\n         if let Some(generics) = tcx.hir().get_generics(tcx.hir().local_def_id(hir_id)) {\n             for p in generics.params {\n                 let hir::GenericParamKind::Type { .. } = p.kind else { continue };\n-                let param_id = tcx.hir().local_def_id(p.hir_id);\n-                let default = tcx.object_lifetime_default(param_id);\n+                let default = tcx.object_lifetime_default(p.def_id);\n                 let repr = match default {\n                     ObjectLifetimeDefault::Empty => \"BaseDefault\".to_owned(),\n                     ObjectLifetimeDefault::Static => \"'static\".to_owned(),"}, {"sha": "172a948b37263db6bc7c8cea1a77250a9fdc1e48", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -500,7 +500,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         };\n \n         self.annotate(\n-            self.tcx.hir().local_def_id(p.hir_id),\n+            p.def_id,\n             p.span,\n             None,\n             kind,"}, {"sha": "7c93e2d66ead16aed2aca0e661e6247cabae5b75", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18482f7b2341fcabdbb854e3d4fe9a724726aa97/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=18482f7b2341fcabdbb854e3d4fe9a724726aa97", "patch": "@@ -2619,11 +2619,10 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let Some(param) = generics.params.iter().find(|param| param.span == span) else {\n             return;\n         };\n-        let param_def_id = self.tcx.hir().local_def_id(param.hir_id);\n         // Check that none of the explicit trait bounds is `Sized`. Assume that an explicit\n         // `Sized` bound is there intentionally and we don't need to suggest relaxing it.\n         let explicitly_sized = generics\n-            .bounds_for_param(param_def_id)\n+            .bounds_for_param(param.def_id)\n             .flat_map(|bp| bp.bounds)\n             .any(|bound| bound.trait_ref().and_then(|tr| tr.trait_def_id()) == sized_trait);\n         if explicitly_sized {\n@@ -2646,7 +2645,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             _ => {}\n         };\n         // Didn't add an indirection suggestion, so add a general suggestion to relax `Sized`.\n-        let (span, separator) = if let Some(s) = generics.bounds_span_for_suggestions(param_def_id)\n+        let (span, separator) = if let Some(s) = generics.bounds_span_for_suggestions(param.def_id)\n         {\n             (s, \" +\")\n         } else {"}]}