{"sha": "454133127a78e14ae4922d96579f1d1a433fa54c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NDEzMzEyN2E3OGUxNGFlNDkyMmQ5NjU3OWYxZDFhNDMzZmE1NGM=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-02T23:16:40Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-02T23:24:33Z"}, "message": "ptr: split out borrowed pointer utilities\n\nThe ptr module is intended to be for raw pointers.\n\nCloses #3111", "tree": {"sha": "f9e28067580663eecced78d9d101404567487ec2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9e28067580663eecced78d9d101404567487ec2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/454133127a78e14ae4922d96579f1d1a433fa54c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/454133127a78e14ae4922d96579f1d1a433fa54c", "html_url": "https://github.com/rust-lang/rust/commit/454133127a78e14ae4922d96579f1d1a433fa54c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/454133127a78e14ae4922d96579f1d1a433fa54c/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "077ca799418b291f45ccba072aedab4daeace057", "url": "https://api.github.com/repos/rust-lang/rust/commits/077ca799418b291f45ccba072aedab4daeace057", "html_url": "https://github.com/rust-lang/rust/commit/077ca799418b291f45ccba072aedab4daeace057"}], "stats": {"total": 125, "additions": 72, "deletions": 53}, "files": [{"sha": "6c838a82a2f98fa430614c485f1f1be50af6d6a5", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=454133127a78e14ae4922d96579f1d1a433fa54c", "patch": "@@ -48,6 +48,7 @@ use core::cast;\n use core::unstable::sync::UnsafeAtomicRcBox;\n use core::ptr;\n use core::task;\n+use core::borrow;\n \n /// As sync::condvar, a mechanism for unlock-and-descheduling and signaling.\n pub struct Condvar<'self> {\n@@ -425,7 +426,7 @@ impl<T:Const + Owned> RWARC<T> {\n             // of this cast is removing the mutability.)\n             let new_data = cast::transmute_immut(data);\n             // Downgrade ensured the token belonged to us. Just a sanity check.\n-            assert!(ptr::ref_eq(&(*state).data, new_data));\n+            assert!(borrow::ref_eq(&(*state).data, new_data));\n             // Produce new token\n             RWReadMode {\n                 data: new_data,"}, {"sha": "79ecf4abbee5b9971e21868a6657f17fdf24cd4b", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=454133127a78e14ae4922d96579f1d1a433fa54c", "patch": "@@ -17,6 +17,7 @@\n \n use core::prelude::*;\n \n+use core::borrow;\n use core::comm;\n use core::ptr;\n use core::task;\n@@ -589,7 +590,7 @@ impl RWlock {\n     /// To be called inside of the write_downgrade block.\n     pub fn downgrade<'a>(&self, token: RWlockWriteMode<'a>)\n                          -> RWlockReadMode<'a> {\n-        if !ptr::ref_eq(self, token.lock) {\n+        if !borrow::ref_eq(self, token.lock) {\n             fail!(\"Can't downgrade() with a different rwlock's write_mode!\");\n         }\n         unsafe {"}, {"sha": "703011aea7f868612a14ebd6d7cb8ecda45527ee", "filename": "src/libstd/borrow.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Flibstd%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Flibstd%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fborrow.rs?ref=454133127a78e14ae4922d96579f1d1a433fa54c", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Borrowed pointer utilities\n+\n+#[cfg(not(test))]\n+use prelude::*;\n+\n+/// Cast a region pointer - &T - to a uint.\n+#[inline(always)]\n+pub fn to_uint<T>(thing: &T) -> uint {\n+    thing as *T as uint\n+}\n+\n+/// Determine if two borrowed pointers point to the same thing.\n+#[inline(always)]\n+pub fn ref_eq<'a, 'b, T>(thing: &'a T, other: &'b T) -> bool {\n+    to_uint(thing) == to_uint(other)\n+}\n+\n+// Equality for region pointers\n+#[cfg(not(test))]\n+impl<'self, T: Eq> Eq for &'self T {\n+    #[inline(always)]\n+    fn eq(&self, other: & &'self T) -> bool {\n+        *(*self) == *(*other)\n+    }\n+    #[inline(always)]\n+    fn ne(&self, other: & &'self T) -> bool {\n+        *(*self) != *(*other)\n+    }\n+}\n+\n+// Comparison for region pointers\n+#[cfg(not(test))]\n+impl<'self, T: Ord> Ord for &'self T {\n+    #[inline(always)]\n+    fn lt(&self, other: & &'self T) -> bool {\n+        *(*self) < *(*other)\n+    }\n+    #[inline(always)]\n+    fn le(&self, other: & &'self T) -> bool {\n+        *(*self) <= *(*other)\n+    }\n+    #[inline(always)]\n+    fn ge(&self, other: & &'self T) -> bool {\n+        *(*self) >= *(*other)\n+    }\n+    #[inline(always)]\n+    fn gt(&self, other: & &'self T) -> bool {\n+        *(*self) > *(*other)\n+    }\n+}"}, {"sha": "e629db9244dbd4e6e3dc4bba53770ee35810bc52", "filename": "src/libstd/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Flibstd%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Flibstd%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcore.rc?ref=454133127a78e14ae4922d96579f1d1a433fa54c", "patch": "@@ -125,6 +125,7 @@ pub mod ascii;\n pub mod ptr;\n pub mod owned;\n pub mod managed;\n+pub mod borrow;\n \n \n /* Core language traits */"}, {"sha": "1d9a9b9be369e0b49d035d2a4bd1c3198854af10", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=454133127a78e14ae4922d96579f1d1a433fa54c", "patch": "@@ -255,18 +255,6 @@ pub fn to_mut_unsafe_ptr<T>(thing: &mut T) -> *mut T {\n     thing as *mut T\n }\n \n-/// Cast a region pointer - &T - to a uint.\n-#[inline(always)]\n-pub fn to_uint<T>(thing: &T) -> uint {\n-    thing as *T as uint\n-}\n-\n-/// Determine if two borrowed pointers point to the same thing.\n-#[inline(always)]\n-pub fn ref_eq<'a,'b,T>(thing: &'a T, other: &'b T) -> bool {\n-    to_uint(thing) == to_uint(other)\n-}\n-\n /**\n   Given a **T (pointer to an array of pointers),\n   iterate through each *T, up to the provided `len`,\n@@ -411,40 +399,6 @@ impl<T> Ord for *const T {\n     }\n }\n \n-// Equality for region pointers\n-#[cfg(not(test))]\n-impl<'self,T:Eq> Eq for &'self T {\n-    #[inline(always)]\n-    fn eq(&self, other: & &'self T) -> bool {\n-        *(*self) == *(*other)\n-    }\n-    #[inline(always)]\n-    fn ne(&self, other: & &'self T) -> bool {\n-        *(*self) != *(*other)\n-    }\n-}\n-\n-// Comparison for region pointers\n-#[cfg(not(test))]\n-impl<'self,T:Ord> Ord for &'self T {\n-    #[inline(always)]\n-    fn lt(&self, other: & &'self T) -> bool {\n-        *(*self) < *(*other)\n-    }\n-    #[inline(always)]\n-    fn le(&self, other: & &'self T) -> bool {\n-        *(*self) <= *(*other)\n-    }\n-    #[inline(always)]\n-    fn ge(&self, other: & &'self T) -> bool {\n-        *(*self) >= *(*other)\n-    }\n-    #[inline(always)]\n-    fn gt(&self, other: & &'self T) -> bool {\n-        *(*self) > *(*other)\n-    }\n-}\n-\n #[cfg(test)]\n pub mod ptr_tests {\n     use super::*;"}, {"sha": "620efed99ca32c76a650bc9122375e3781326ed5", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=454133127a78e14ae4922d96579f1d1a433fa54c", "patch": "@@ -13,6 +13,7 @@\n //! local storage, and logging. Even a 'freestanding' Rust would likely want\n //! to implement this.\n \n+use borrow;\n use cast::transmute;\n use libc::{c_void, uintptr_t};\n use ptr;\n@@ -64,7 +65,7 @@ impl Task {\n         // This is just an assertion that `run` was called unsafely\n         // and this instance of Task is still accessible.\n         do Local::borrow::<Task> |task| {\n-            assert!(ptr::ref_eq(task, self));\n+            assert!(borrow::ref_eq(task, self));\n         }\n \n         match self.unwinder {\n@@ -89,7 +90,7 @@ impl Task {\n         // This is just an assertion that `destroy` was called unsafely\n         // and this instance of Task is still accessible.\n         do Local::borrow::<Task> |task| {\n-            assert!(ptr::ref_eq(task, self));\n+            assert!(borrow::ref_eq(task, self));\n         }\n         match self.storage {\n             LocalStorage(ptr, Some(ref dtor)) => {"}, {"sha": "d6d440782e774f25567cc8c6f3a72f7b22168281", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=454133127a78e14ae4922d96579f1d1a433fa54c", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::borrow;\n use std::ptr;\n \n fn borrow(x: &int, f: &fn(x: &int)) {\n@@ -17,7 +18,7 @@ fn borrow(x: &int, f: &fn(x: &int)) {\n fn test1(x: @~int) {\n     do borrow(&*(*x).clone()) |p| {\n         let x_a = ptr::to_unsafe_ptr(&**x);\n-        assert!((x_a as uint) != ptr::to_uint(p));\n+        assert!((x_a as uint) != borrow::to_uint(p));\n         assert_eq!(unsafe{*x_a}, *p);\n     }\n }"}, {"sha": "6a3424535b90cbc928c9d9447ebcd32d38b17bdb", "filename": "src/test/run-pass/cast-region-to-uint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/454133127a78e14ae4922d96579f1d1a433fa54c/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs?ref=454133127a78e14ae4922d96579f1d1a433fa54c", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::ptr;\n+use std::borrow;\n \n pub fn main() {\n     let x = 3;\n-    debug!(\"&x=%x\", ptr::to_uint(&x));\n+    debug!(\"&x=%x\", borrow::to_uint(&x));\n }"}]}