{"sha": "1e21b3cfa38c5040ae0faf99178b0112fc90fd93", "node_id": "C_kwDOAAsO6NoAKDFlMjFiM2NmYTM4YzUwNDBhZTBmYWY5OTE3OGIwMTEyZmM5MGZkOTM", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-27T20:03:34Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-02T20:09:41Z"}, "message": "Add some debug logs to macro matching\n\nThese were useful while debugging, so I'll leave them here.", "tree": {"sha": "0f4f16e337d63a2a9acca3a0b637d9d0e59f14d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f4f16e337d63a2a9acca3a0b637d9d0e59f14d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e21b3cfa38c5040ae0faf99178b0112fc90fd93", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQLFSeXwuwQhZaLs1DYfRmvKfbBn85lhIAHGL0vmuRAvMj5PXSJm86G7149h+iaeTv4\nkBBIRUSSnxwrk6hnE7agM=\n-----END SSH SIGNATURE-----", "payload": "tree 0f4f16e337d63a2a9acca3a0b637d9d0e59f14d0\nparent 5f73eac51bebc2c2a9768a84e029cbd719cdb6dc\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1666901014 +0200\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1667419781 +0100\n\nAdd some debug logs to macro matching\n\nThese were useful while debugging, so I'll leave them here.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e21b3cfa38c5040ae0faf99178b0112fc90fd93", "html_url": "https://github.com/rust-lang/rust/commit/1e21b3cfa38c5040ae0faf99178b0112fc90fd93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e21b3cfa38c5040ae0faf99178b0112fc90fd93/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f73eac51bebc2c2a9768a84e029cbd719cdb6dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f73eac51bebc2c2a9768a84e029cbd719cdb6dc", "html_url": "https://github.com/rust-lang/rust/commit/5f73eac51bebc2c2a9768a84e029cbd719cdb6dc"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "78b3fa337ae7b167b271a7fbcb401230232ef717", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e21b3cfa38c5040ae0faf99178b0112fc90fd93/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e21b3cfa38c5040ae0faf99178b0112fc90fd93/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=1e21b3cfa38c5040ae0faf99178b0112fc90fd93", "patch": "@@ -234,6 +234,7 @@ impl<'matcher> Tracker<'matcher> for NoopTracker {\n \n /// Expands the rules based macro defined by `lhses` and `rhses` for a given\n /// input `arg`.\n+#[instrument(skip(cx, transparency, arg, lhses, rhses))]\n fn expand_macro<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n@@ -429,6 +430,7 @@ enum CanRetry {\n /// Try expanding the macro. Returns the index of the sucessful arm and its named_matches if it was successful,\n /// and nothing if it failed. On failure, it's the callers job to use `track` accordingly to record all errors\n /// correctly.\n+#[instrument(level = \"debug\", skip(sess, arg, lhses, track), fields(tracking = %T::description()))]\n fn try_match_macro<'matcher, T: Tracker<'matcher>>(\n     sess: &ParseSess,\n     name: Ident,\n@@ -460,6 +462,8 @@ fn try_match_macro<'matcher, T: Tracker<'matcher>>(\n     // Try each arm's matchers.\n     let mut tt_parser = TtParser::new(name);\n     for (i, lhs) in lhses.iter().enumerate() {\n+        let _tracing_span = trace_span!(\"Matching arm\", %i);\n+\n         // Take a snapshot of the state of pre-expansion gating at this point.\n         // This is used so that if a matcher is not `Success(..)`ful,\n         // then the spans which became gated when parsing the unsuccessful matcher\n@@ -472,20 +476,24 @@ fn try_match_macro<'matcher, T: Tracker<'matcher>>(\n \n         match result {\n             Success(named_matches) => {\n+                debug!(\"Parsed arm successfully\");\n                 // The matcher was `Success(..)`ful.\n                 // Merge the gated spans from parsing the matcher with the pre-existing ones.\n                 sess.gated_spans.merge(gated_spans_snapshot);\n \n                 return Ok((i, named_matches));\n             }\n             Failure(_, _) => {\n+                trace!(\"Failed to match arm, trying the next one\");\n                 // Try the next arm\n             }\n             Error(_, _) => {\n+                debug!(\"Fatal error occurred during matching\");\n                 // We haven't emitted an error yet\n                 return Err(CanRetry::Yes);\n             }\n             ErrorReported(guarantee) => {\n+                debug!(\"Fatal error occurred and was reported during matching\");\n                 return Err(CanRetry::No(guarantee));\n             }\n         }"}]}