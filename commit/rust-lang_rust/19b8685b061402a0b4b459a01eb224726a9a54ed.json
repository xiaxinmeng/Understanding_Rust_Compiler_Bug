{"sha": "19b8685b061402a0b4b459a01eb224726a9a54ed", "node_id": "C_kwDOAAsO6NoAKDE5Yjg2ODViMDYxNDAyYTBiNGI0NTlhMDFlYjIyNDcyNmE5YTU0ZWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-26T11:04:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-26T11:04:58Z"}, "message": "Rollup merge of #108379 - compiler-errors:hir-error-guaranteed, r=cjgillot\n\nAdd `ErrorGuaranteed` to `hir::{Expr,Ty}Kind::Err` variants\n\nFirst step in making the `Err` variants of `ExprKind` and `TyKind` require an `ErrorGuaranteed` during parsing. Making the corresponding AST versions require `ErrorGuaranteed` is a bit harder, whereas it was pretty easy to do this for HIR, so let's do that first.\n\nThe only weird thing about this PR is that `ErrorGuaranteed` is moved to `rustc_span`. This is *certainly* not the right place to put it, but `rustc_hir` cannot depend on `rustc_error` because the latter already depends on the former. Should I just pull out some of the error machinery from `rustc_error` into an even more minimal crate that `rustc_hir` can depend on? Advice would be appreciated.", "tree": {"sha": "1e0b4f4f792ed687cee265062be87bc71124e86b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e0b4f4f792ed687cee265062be87bc71124e86b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19b8685b061402a0b4b459a01eb224726a9a54ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj+zzaCRBK7hj4Ov3rIwAA7CQIAIamTFmSR+OVwu8LBs3T3tH8\npk3PTpUElujuSV+j6eygOFhk2eNgsX2Mg2cOGQp423x9dMZmcF/GUgx+IXUzhBQZ\njINmA/RXVEw3ymkdm42ZV9aGAfh+SevcU6Jmwj9PcSKPnCKXePn0thZwRW9v9foB\n9rf+34mIOgvYDFla+xCbLv2IkvQkjHlnI03HM4Lq8cRnqz4WFDkh7gDtzMNdeOj0\nV5z8EpeUYwYODRnb5GbCJZpp8xz/t23I90jtakwjKBb7nAssfbEFc6baLWuXsLZe\nrcOphrw/EoWIE9Kxoy1AzrWCsic2NqsfDYeeIw01unHLqpko23WWZR/oOo9WPlE=\n=BIQK\n-----END PGP SIGNATURE-----\n", "payload": "tree 1e0b4f4f792ed687cee265062be87bc71124e86b\nparent b27f37da07c8bb49a4c71970a55b5d2ec209bef7\nparent 0f4a7d174e471814faecb94315675dbf00e5063a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677409498 +0100\ncommitter GitHub <noreply@github.com> 1677409498 +0100\n\nRollup merge of #108379 - compiler-errors:hir-error-guaranteed, r=cjgillot\n\nAdd `ErrorGuaranteed` to `hir::{Expr,Ty}Kind::Err` variants\n\nFirst step in making the `Err` variants of `ExprKind` and `TyKind` require an `ErrorGuaranteed` during parsing. Making the corresponding AST versions require `ErrorGuaranteed` is a bit harder, whereas it was pretty easy to do this for HIR, so let's do that first.\n\nThe only weird thing about this PR is that `ErrorGuaranteed` is moved to `rustc_span`. This is *certainly* not the right place to put it, but `rustc_hir` cannot depend on `rustc_error` because the latter already depends on the former. Should I just pull out some of the error machinery from `rustc_error` into an even more minimal crate that `rustc_hir` can depend on? Advice would be appreciated.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19b8685b061402a0b4b459a01eb224726a9a54ed", "html_url": "https://github.com/rust-lang/rust/commit/19b8685b061402a0b4b459a01eb224726a9a54ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19b8685b061402a0b4b459a01eb224726a9a54ed/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b27f37da07c8bb49a4c71970a55b5d2ec209bef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b27f37da07c8bb49a4c71970a55b5d2ec209bef7", "html_url": "https://github.com/rust-lang/rust/commit/b27f37da07c8bb49a4c71970a55b5d2ec209bef7"}, {"sha": "0f4a7d174e471814faecb94315675dbf00e5063a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4a7d174e471814faecb94315675dbf00e5063a", "html_url": "https://github.com/rust-lang/rust/commit/0f4a7d174e471814faecb94315675dbf00e5063a"}], "stats": {"total": 199, "additions": 111, "deletions": 88}, "files": [{"sha": "d4fafe38638a42139f6e41b9c674da24d1f1da97", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -88,8 +88,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             let kind = hir::ExprKind::Box(self.lower_expr(&inner));\n                             return hir::Expr { hir_id, kind, span: self.lower_span(e.span) };\n                         } else {\n-                            self.tcx.sess.emit_err(RustcBoxAttributeError { span: e.span });\n-                            hir::ExprKind::Err\n+                            let guar = self.tcx.sess.emit_err(RustcBoxAttributeError { span: e.span });\n+                            hir::ExprKind::Err(guar)\n                         }\n                     } else if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {\n                         self.lower_legacy_const_generics((**f).clone(), args.clone(), &legacy_args)\n@@ -266,8 +266,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.lower_expr_range(e.span, e1.as_deref(), e2.as_deref(), *lims)\n                 }\n                 ExprKind::Underscore => {\n-                    self.tcx.sess.emit_err(UnderscoreExprLhsAssign { span: e.span });\n-                    hir::ExprKind::Err\n+                    let guar = self.tcx.sess.emit_err(UnderscoreExprLhsAssign { span: e.span });\n+                    hir::ExprKind::Err(guar)\n                 }\n                 ExprKind::Path(qself, path) => {\n                     let qpath = self.lower_qpath(\n@@ -299,8 +299,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let rest = match &se.rest {\n                         StructRest::Base(e) => Some(self.lower_expr(e)),\n                         StructRest::Rest(sp) => {\n-                            self.tcx.sess.emit_err(BaseExpressionDoubleDot { span: *sp });\n-                            Some(&*self.arena.alloc(self.expr_err(*sp)))\n+                            let guar =\n+                                self.tcx.sess.emit_err(BaseExpressionDoubleDot { span: *sp });\n+                            Some(&*self.arena.alloc(self.expr_err(*sp, guar)))\n                         }\n                         StructRest::None => None,\n                     };\n@@ -318,7 +319,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     )\n                 }\n                 ExprKind::Yield(opt_expr) => self.lower_expr_yield(e.span, opt_expr.as_deref()),\n-                ExprKind::Err => hir::ExprKind::Err,\n+                ExprKind::Err => hir::ExprKind::Err(\n+                    self.tcx.sess.delay_span_bug(e.span, \"lowered ExprKind::Err\"),\n+                ),\n                 ExprKind::Try(sub_expr) => self.lower_expr_try(e.span, sub_expr),\n \n                 ExprKind::Paren(_) | ExprKind::ForLoop(..) => unreachable!(\"already handled\"),\n@@ -761,7 +764,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self.expr_ident_mut(span, task_context_ident, task_context_hid)\n             } else {\n                 // Use of `await` outside of an async context, we cannot use `task_context` here.\n-                self.expr_err(span)\n+                self.expr_err(span, self.tcx.sess.delay_span_bug(span, \"no task_context hir id\"))\n             };\n             let new_unchecked = self.expr_call_lang_item_fn_mut(\n                 span,"}, {"sha": "4095e225a8019ea846a88b67e70cc470863c1f5c", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -102,7 +102,12 @@ fn make_count<'hir>(\n                 let value = ctx.arena.alloc_from_iter([ctx.expr_usize(sp, i)]);\n                 ctx.expr_call_mut(sp, count_param, value)\n             } else {\n-                ctx.expr(sp, hir::ExprKind::Err)\n+                ctx.expr(\n+                    sp,\n+                    hir::ExprKind::Err(\n+                        ctx.tcx.sess.delay_span_bug(sp, \"lowered bad format_args count\"),\n+                    ),\n+                )\n             }\n         }\n         None => ctx.expr_lang_item_type_relative(sp, hir::LangItem::FormatCount, sym::Implied),\n@@ -135,7 +140,10 @@ fn make_format_spec<'hir>(\n                 argmap.insert_full((arg_index, ArgumentType::Format(placeholder.format_trait)));\n             ctx.expr_usize(sp, i)\n         }\n-        Err(_) => ctx.expr(sp, hir::ExprKind::Err),\n+        Err(_) => ctx.expr(\n+            sp,\n+            hir::ExprKind::Err(ctx.tcx.sess.delay_span_bug(sp, \"lowered bad format_args count\")),\n+        ),\n     };\n     let &FormatOptions {\n         ref width,\n@@ -294,7 +302,12 @@ fn expand_format_args<'hir>(\n                 ));\n                 make_argument(ctx, sp, arg, ty)\n             } else {\n-                ctx.expr(macsp, hir::ExprKind::Err)\n+                ctx.expr(\n+                    macsp,\n+                    hir::ExprKind::Err(\n+                        ctx.tcx.sess.delay_span_bug(macsp, format!(\"no arg at {arg_index}\")),\n+                    ),\n+                )\n             }\n         }));\n         let elements: Vec<_> = arguments"}, {"sha": "7325bce6055923cf73af599e43a6eb7ba651136d", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -7,6 +7,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::visit::AssocCtxt;\n use rustc_ast::*;\n use rustc_data_structures::sorted_map::SortedMap;\n+use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n@@ -284,7 +285,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     .alloc_from_iter(fm.items.iter().map(|x| self.lower_foreign_item_ref(x))),\n             },\n             ItemKind::GlobalAsm(asm) => hir::ItemKind::GlobalAsm(self.lower_inline_asm(span, asm)),\n-            ItemKind::TyAlias(box TyAlias { generics, where_clauses, ty: Some(ty), .. }) => {\n+            ItemKind::TyAlias(box TyAlias { generics, where_clauses, ty, .. }) => {\n                 // We lower\n                 //\n                 // type Foo = impl Trait\n@@ -299,18 +300,16 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     &generics,\n                     id,\n                     &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                    |this| this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy),\n-                );\n-                hir::ItemKind::TyAlias(ty, generics)\n-            }\n-            ItemKind::TyAlias(box TyAlias { generics, where_clauses, ty: None, .. }) => {\n-                let mut generics = generics.clone();\n-                add_ty_alias_where_clause(&mut generics, *where_clauses, true);\n-                let (generics, ty) = self.lower_generics(\n-                    &generics,\n-                    id,\n-                    &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n-                    |this| this.arena.alloc(this.ty(span, hir::TyKind::Err)),\n+                    |this| match ty {\n+                        None => {\n+                            let guar = this.tcx.sess.delay_span_bug(\n+                                span,\n+                                \"expected to lower type alias type, but it was missing\",\n+                            );\n+                            this.arena.alloc(this.ty(span, hir::TyKind::Err(guar)))\n+                        }\n+                        Some(ty) => this.lower_ty(ty, &ImplTraitContext::TypeAliasesOpaqueTy),\n+                    },\n                 );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n@@ -798,8 +797,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     /// Construct `ExprKind::Err` for the given `span`.\n-    pub(crate) fn expr_err(&mut self, span: Span) -> hir::Expr<'hir> {\n-        self.expr(span, hir::ExprKind::Err)\n+    pub(crate) fn expr_err(&mut self, span: Span, guar: ErrorGuaranteed) -> hir::Expr<'hir> {\n+        self.expr(span, hir::ExprKind::Err(guar))\n     }\n \n     fn lower_impl_item(&mut self, i: &AssocItem) -> &'hir hir::ImplItem<'hir> {\n@@ -847,7 +846,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     &ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                     |this| match ty {\n                         None => {\n-                            let ty = this.arena.alloc(this.ty(i.span, hir::TyKind::Err));\n+                            let guar = this.tcx.sess.delay_span_bug(\n+                                i.span,\n+                                \"expected to lower associated type, but it was missing\",\n+                            );\n+                            let ty = this.arena.alloc(this.ty(i.span, hir::TyKind::Err(guar)));\n                             hir::ImplItemKind::Type(ty)\n                         }\n                         Some(ty) => {\n@@ -973,7 +976,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_block_expr_opt(&mut self, span: Span, block: Option<&Block>) -> hir::Expr<'hir> {\n         match block {\n             Some(block) => self.lower_block_expr(block),\n-            None => self.expr_err(span),\n+            None => self.expr_err(span, self.tcx.sess.delay_span_bug(span, \"no block\")),\n         }\n     }\n \n@@ -983,7 +986,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 &[],\n                 match expr {\n                     Some(expr) => this.lower_expr_mut(expr),\n-                    None => this.expr_err(span),\n+                    None => this.expr_err(span, this.tcx.sess.delay_span_bug(span, \"no block\")),\n                 },\n             )\n         })"}, {"sha": "5d78d914b6d7f7c67ab46bfa7d3ad832a9b494cb", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -1082,11 +1082,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         hir::TypeBindingKind::Constraint { bounds }\n                     }\n                     DesugarKind::Error(position) => {\n-                        self.tcx.sess.emit_err(errors::MisplacedAssocTyBinding {\n+                        let guar = self.tcx.sess.emit_err(errors::MisplacedAssocTyBinding {\n                             span: constraint.span,\n                             position: DiagnosticArgFromDisplay(position),\n                         });\n-                        let err_ty = &*self.arena.alloc(self.ty(constraint.span, hir::TyKind::Err));\n+                        let err_ty =\n+                            &*self.arena.alloc(self.ty(constraint.span, hir::TyKind::Err(guar)));\n                         hir::TypeBindingKind::Equality { term: err_ty.into() }\n                     }\n                 }\n@@ -1255,7 +1256,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_ty_direct(&mut self, t: &Ty, itctx: &ImplTraitContext) -> hir::Ty<'hir> {\n         let kind = match &t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n-            TyKind::Err => hir::TyKind::Err,\n+            TyKind::Err => {\n+                hir::TyKind::Err(self.tcx.sess.delay_span_bug(t.span, \"TyKind::Err lowered\"))\n+            }\n             TyKind::Slice(ty) => hir::TyKind::Slice(self.lower_ty(ty, itctx)),\n             TyKind::Ptr(mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n             TyKind::Ref(region, mt) => {\n@@ -1381,7 +1384,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         path\n                     }\n                     ImplTraitContext::FeatureGated(position, feature) => {\n-                        self.tcx\n+                        let guar = self\n+                            .tcx\n                             .sess\n                             .create_feature_err(\n                                 MisplacedImplTrait {\n@@ -1391,24 +1395,24 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 *feature,\n                             )\n                             .emit();\n-                        hir::TyKind::Err\n+                        hir::TyKind::Err(guar)\n                     }\n                     ImplTraitContext::Disallowed(position) => {\n-                        self.tcx.sess.emit_err(MisplacedImplTrait {\n+                        let guar = self.tcx.sess.emit_err(MisplacedImplTrait {\n                             span: t.span,\n                             position: DiagnosticArgFromDisplay(position),\n                         });\n-                        hir::TyKind::Err\n+                        hir::TyKind::Err(guar)\n                     }\n                 }\n             }\n             TyKind::MacCall(_) => panic!(\"`TyKind::MacCall` should have been expanded by now\"),\n             TyKind::CVarArgs => {\n-                self.tcx.sess.delay_span_bug(\n+                let guar = self.tcx.sess.delay_span_bug(\n                     t.span,\n                     \"`TyKind::CVarArgs` should have been handled elsewhere\",\n                 );\n-                hir::TyKind::Err\n+                hir::TyKind::Err(guar)\n             }\n         };\n "}, {"sha": "2509b70563956758860d1f855675d71d5e2c68f7", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -330,8 +330,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             ExprKind::Path(..) if allow_paths => {}\n             ExprKind::Unary(UnOp::Neg, inner) if matches!(inner.kind, ExprKind::Lit(_)) => {}\n             _ => {\n-                self.tcx.sess.emit_err(ArbitraryExpressionInPattern { span: expr.span });\n-                return self.arena.alloc(self.expr_err(expr.span));\n+                let guar = self.tcx.sess.emit_err(ArbitraryExpressionInPattern { span: expr.span });\n+                return self.arena.alloc(self.expr_err(expr.span, guar));\n             }\n         }\n         self.lower_expr(expr)"}, {"sha": "18c824d8b4e66e69b6d1301455b7abc440c1cfa8", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -42,7 +42,7 @@ pub use rustc_error_messages::{\n pub use rustc_lint_defs::{pluralize, Applicability};\n use rustc_macros::fluent_messages;\n use rustc_span::source_map::SourceMap;\n-use rustc_span::HashStableContext;\n+pub use rustc_span::ErrorGuaranteed;\n use rustc_span::{Loc, Span};\n \n use std::borrow::Cow;\n@@ -1846,17 +1846,3 @@ pub enum TerminalUrl {\n     Yes,\n     Auto,\n }\n-\n-/// Useful type to use with `Result<>` indicate that an error has already\n-/// been reported to the user, so no need to continue checking.\n-#[derive(Clone, Copy, Debug, Encodable, Decodable, Hash, PartialEq, Eq, PartialOrd, Ord)]\n-#[derive(HashStable_Generic)]\n-pub struct ErrorGuaranteed(());\n-\n-impl ErrorGuaranteed {\n-    /// To be used only if you really know what you are doing... ideally, we would find a way to\n-    /// eliminate all calls to this method.\n-    pub fn unchecked_claim_error_was_emitted() -> Self {\n-        ErrorGuaranteed(())\n-    }\n-}"}, {"sha": "72e9f7c13437e3366e0ecfd8bc16fd3251ac974b", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -369,10 +369,10 @@ impl<'hir> GenericArgs<'hir> {\n \n     pub fn has_err(&self) -> bool {\n         self.args.iter().any(|arg| match arg {\n-            GenericArg::Type(ty) => matches!(ty.kind, TyKind::Err),\n+            GenericArg::Type(ty) => matches!(ty.kind, TyKind::Err(_)),\n             _ => false,\n         }) || self.bindings.iter().any(|arg| match arg.kind {\n-            TypeBindingKind::Equality { term: Term::Ty(ty) } => matches!(ty.kind, TyKind::Err),\n+            TypeBindingKind::Equality { term: Term::Ty(ty) } => matches!(ty.kind, TyKind::Err(_)),\n             _ => false,\n         })\n     }\n@@ -1688,7 +1688,7 @@ impl Expr<'_> {\n             ExprKind::Struct(..) => ExprPrecedence::Struct,\n             ExprKind::Repeat(..) => ExprPrecedence::Repeat,\n             ExprKind::Yield(..) => ExprPrecedence::Yield,\n-            ExprKind::Err => ExprPrecedence::Err,\n+            ExprKind::Err(_) => ExprPrecedence::Err,\n         }\n     }\n \n@@ -1754,7 +1754,7 @@ impl Expr<'_> {\n             | ExprKind::Yield(..)\n             | ExprKind::Cast(..)\n             | ExprKind::DropTemps(..)\n-            | ExprKind::Err => false,\n+            | ExprKind::Err(_) => false,\n         }\n     }\n \n@@ -1840,7 +1840,7 @@ impl Expr<'_> {\n             | ExprKind::Binary(..)\n             | ExprKind::Yield(..)\n             | ExprKind::DropTemps(..)\n-            | ExprKind::Err => true,\n+            | ExprKind::Err(_) => true,\n         }\n     }\n \n@@ -2013,7 +2013,7 @@ pub enum ExprKind<'hir> {\n     Yield(&'hir Expr<'hir>, YieldSource),\n \n     /// A placeholder for an expression that wasn't syntactically well formed in some way.\n-    Err,\n+    Err(rustc_span::ErrorGuaranteed),\n }\n \n /// Represents an optionally `Self`-qualified value/type path or associated extension.\n@@ -2676,7 +2676,7 @@ pub enum TyKind<'hir> {\n     /// specified. This can appear anywhere in a type.\n     Infer,\n     /// Placeholder for a type that has failed to be defined.\n-    Err,\n+    Err(rustc_span::ErrorGuaranteed),\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "cc0f64017e426d7c78111475e0d7bab4711ecd13", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -790,7 +790,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n         ExprKind::Yield(ref subexpression, _) => {\n             visitor.visit_expr(subexpression);\n         }\n-        ExprKind::Lit(_) | ExprKind::Err => {}\n+        ExprKind::Lit(_) | ExprKind::Err(_) => {}\n     }\n }\n \n@@ -844,7 +844,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {\n             visitor.visit_lifetime(lifetime);\n         }\n         TyKind::Typeof(ref expression) => visitor.visit_anon_const(expression),\n-        TyKind::Infer | TyKind::Err => {}\n+        TyKind::Infer | TyKind::Err(_) => {}\n     }\n }\n "}, {"sha": "a15cf454df72f30ead7aabfafb1f3fe92611e90b", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -3113,7 +3113,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // handled specially and will not descend into this routine.\n                 self.ty_infer(None, ast_ty.span)\n             }\n-            hir::TyKind::Err => tcx.ty_error_misc(),\n+            hir::TyKind::Err(guar) => tcx.ty_error(*guar),\n         };\n \n         self.record_ty(ast_ty.hir_id, result_ty, ast_ty.span);"}, {"sha": "c021fca71339038652d8047d74df664f864285c4", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -358,7 +358,7 @@ impl<'a> State<'a> {\n                 self.print_anon_const(e);\n                 self.word(\")\");\n             }\n-            hir::TyKind::Err => {\n+            hir::TyKind::Err(_) => {\n                 self.popen();\n                 self.word(\"/*ERROR*/\");\n                 self.pclose();\n@@ -1559,7 +1559,7 @@ impl<'a> State<'a> {\n                 self.word_space(\"yield\");\n                 self.print_expr_maybe_paren(expr, parser::PREC_JUMP);\n             }\n-            hir::ExprKind::Err => {\n+            hir::ExprKind::Err(_) => {\n                 self.popen();\n                 self.word(\"/*ERROR*/\");\n                 self.pclose();"}, {"sha": "7fc4ccb04ee0bd1b49991451f4aecd164a2ba880", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Field(base, field) => self.check_field(expr, &base, field, expected),\n             ExprKind::Index(base, idx) => self.check_expr_index(base, idx, expr),\n             ExprKind::Yield(value, ref src) => self.check_expr_yield(value, expr, src),\n-            hir::ExprKind::Err => tcx.ty_error_misc(),\n+            hir::ExprKind::Err(guar) => tcx.ty_error(guar),\n         }\n     }\n "}, {"sha": "b9a058d6bba2c8732779a6a214c04f06497c4392", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -301,7 +301,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             hir::ExprKind::Continue(..)\n             | hir::ExprKind::Lit(..)\n             | hir::ExprKind::ConstBlock(..)\n-            | hir::ExprKind::Err => {}\n+            | hir::ExprKind::Err(_) => {}\n \n             hir::ExprKind::Loop(blk, ..) => {\n                 self.walk_block(blk);"}, {"sha": "7c0402b1c7fb86c8c16aca1bfd5931d59f3610a2", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n             | ExprKind::Struct(..)\n             | ExprKind::Repeat(..)\n             | ExprKind::Yield(..)\n-            | ExprKind::Err => (),\n+            | ExprKind::Err(_) => (),\n         }\n     }\n \n@@ -483,7 +483,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n             | ExprKind::Closure { .. }\n             | ExprKind::ConstBlock(..)\n             | ExprKind::DropTemps(..)\n-            | ExprKind::Err\n+            | ExprKind::Err(_)\n             | ExprKind::Field(..)\n             | ExprKind::Index(..)\n             | ExprKind::InlineAsm(..)"}, {"sha": "bcfc61bffb2c66038c2b4964d1fd16b67724e542", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -383,7 +383,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | hir::ExprKind::Repeat(..)\n             | hir::ExprKind::InlineAsm(..)\n             | hir::ExprKind::Box(..)\n-            | hir::ExprKind::Err => Ok(self.cat_rvalue(expr.hir_id, expr.span, expr_ty)),\n+            | hir::ExprKind::Err(_) => Ok(self.cat_rvalue(expr.hir_id, expr.span, expr_ty)),\n         }\n     }\n "}, {"sha": "ae203233bd568e6b7e136b19f7916fdb50f2b15f", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -758,7 +758,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Tup(ref fields) => ExprKind::Tuple { fields: self.mirror_exprs(fields) },\n \n             hir::ExprKind::Yield(ref v, _) => ExprKind::Yield { value: self.mirror_expr(v) },\n-            hir::ExprKind::Err => unreachable!(),\n+            hir::ExprKind::Err(_) => unreachable!(),\n         };\n \n         Expr { temp_lifetime, ty: expr_ty, span: expr.span, kind }"}, {"sha": "df5c8f53ec1c5ae1566d2f90a11a7a9011853346", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -475,7 +475,7 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             | hir::ExprKind::InlineAsm(..)\n             | hir::ExprKind::Box(..)\n             | hir::ExprKind::Type(..)\n-            | hir::ExprKind::Err\n+            | hir::ExprKind::Err(_)\n             | hir::ExprKind::Path(hir::QPath::TypeRelative(..))\n             | hir::ExprKind::Path(hir::QPath::LangItem(..)) => {\n                 intravisit::walk_expr(self, expr);\n@@ -1129,7 +1129,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n             hir::ExprKind::Lit(..)\n             | hir::ExprKind::ConstBlock(..)\n-            | hir::ExprKind::Err\n+            | hir::ExprKind::Err(_)\n             | hir::ExprKind::Path(hir::QPath::TypeRelative(..))\n             | hir::ExprKind::Path(hir::QPath::LangItem(..)) => succ,\n \n@@ -1427,7 +1427,7 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         | hir::ExprKind::Yield(..)\n         | hir::ExprKind::Box(..)\n         | hir::ExprKind::Type(..)\n-        | hir::ExprKind::Err => {}\n+        | hir::ExprKind::Err(_) => {}\n     }\n }\n "}, {"sha": "c5b5cf7f5a963ffa70ede4bd6f5064a1348f98ce", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -219,7 +219,7 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n                 hir::intravisit::walk_expr(self, expr);\n             }\n \n-            ExprKind::Err => {\n+            ExprKind::Err(_) => {\n                 self.items.push((ItemKind::Err, span));\n             }\n         }"}, {"sha": "873cd33f6a4f288698a11158b11b8d83b1474623", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -2149,3 +2149,17 @@ where\n         Hash::hash(&len, hasher);\n     }\n }\n+\n+/// Useful type to use with `Result<>` indicate that an error has already\n+/// been reported to the user, so no need to continue checking.\n+#[derive(Clone, Copy, Debug, Encodable, Decodable, Hash, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(HashStable_Generic)]\n+pub struct ErrorGuaranteed(());\n+\n+impl ErrorGuaranteed {\n+    /// To be used only if you really know what you are doing... ideally, we would find a way to\n+    /// eliminate all calls to this method.\n+    pub fn unchecked_claim_error_was_emitted() -> Self {\n+        ErrorGuaranteed(())\n+    }\n+}"}, {"sha": "0e8f0cfc5185dcaa4491ecc5d7bf5ecac08c0ec0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -1661,7 +1661,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n         }\n         TyKind::BareFn(barefn) => BareFunction(Box::new(clean_bare_fn_ty(barefn, cx))),\n         // Rustdoc handles `TyKind::Err`s by turning them into `Type::Infer`s.\n-        TyKind::Infer | TyKind::Err | TyKind::Typeof(..) => Infer,\n+        TyKind::Infer | TyKind::Err(_) | TyKind::Typeof(..) => Infer,\n     }\n }\n "}, {"sha": "644604a2e3f8475c4f48d4315aab909a53f3c82f", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -1022,7 +1022,7 @@ fn binding_ty_auto_deref_stability<'tcx>(\n                     ))\n                     .is_sized(cx.tcx, cx.param_env.without_caller_bounds()),\n             ),\n-            TyKind::OpaqueDef(..) | TyKind::Infer | TyKind::Typeof(..) | TyKind::TraitObject(..) | TyKind::Err => {\n+            TyKind::OpaqueDef(..) | TyKind::Infer | TyKind::Typeof(..) | TyKind::TraitObject(..) | TyKind::Err(_) => {\n                 Position::ReborrowStable(precedence)\n             },\n         };\n@@ -1038,7 +1038,7 @@ fn ty_contains_infer(ty: &hir::Ty<'_>) -> bool {\n             if self.0\n                 || matches!(\n                     ty.kind,\n-                    TyKind::OpaqueDef(..) | TyKind::Infer | TyKind::Typeof(_) | TyKind::Err\n+                    TyKind::OpaqueDef(..) | TyKind::Infer | TyKind::Typeof(_) | TyKind::Err(_)\n                 )\n             {\n                 self.0 = true;"}, {"sha": "d7e000473124eadb1c74c0c55836687a26b7d0b7", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -224,7 +224,7 @@ fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: H\n         | ExprKind::Path(_)\n         | ExprKind::ConstBlock(_)\n         | ExprKind::Lit(_)\n-        | ExprKind::Err => NeverLoopResult::Otherwise,\n+        | ExprKind::Err(_) => NeverLoopResult::Otherwise,\n     }\n }\n "}, {"sha": "b33a247817292d753689db1fa6a9753582a926c3", "filename": "src/tools/clippy/clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -341,7 +341,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n             ExprKind::ConstBlock(_) |\n             ExprKind::Continue(_) |\n             ExprKind::DropTemps(_) |\n-            ExprKind::Err |\n+            ExprKind::Err(_) |\n             ExprKind::InlineAsm(_) |\n             ExprKind::Let(_) |\n             ExprKind::Lit(_) |"}, {"sha": "c37e5bb6716e984066c57341be81b826eb61a28b", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -588,7 +588,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                     },\n                 }\n             },\n-            ExprKind::Err => kind!(\"Err\"),\n+            ExprKind::Err(_) => kind!(\"Err\"),\n             ExprKind::DropTemps(expr) => {\n                 bind!(self, expr);\n                 kind!(\"DropTemps({expr})\");"}, {"sha": "ee2f816f181ba9c71fd4eb781c24ef08e0014da8", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -193,7 +193,7 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 | ExprKind::Ret(_)\n                 | ExprKind::InlineAsm(_)\n                 | ExprKind::Yield(..)\n-                | ExprKind::Err => {\n+                | ExprKind::Err(_) => {\n                     self.eagerness = ForceNoChange;\n                     return;\n                 },"}, {"sha": "0603755f8a94174bce12b9190e04f2e4ef54fa67", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -714,7 +714,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 }\n                 self.hash_pat(pat);\n             },\n-            ExprKind::Err => {},\n+            ExprKind::Err(_) => {},\n             ExprKind::Lit(ref l) => {\n                 l.node.hash(&mut self.s);\n             },\n@@ -986,7 +986,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n             TyKind::Typeof(anon_const) => {\n                 self.hash_body(anon_const.body);\n             },\n-            TyKind::Err | TyKind::Infer | TyKind::Never => {},\n+            TyKind::Err(_) | TyKind::Infer | TyKind::Never => {},\n         }\n     }\n "}, {"sha": "11ca81cfe6c1899b4392ac9041696071d3195c6d", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -157,7 +157,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Ret(..)\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Tup(..)\n-            | hir::ExprKind::Err => Sugg::NonParen(get_snippet(expr.span)),\n+            | hir::ExprKind::Err(_) => Sugg::NonParen(get_snippet(expr.span)),\n             hir::ExprKind::DropTemps(inner) => Self::hir_from_snippet(inner, get_snippet),\n             hir::ExprKind::Assign(lhs, rhs, _) => {\n                 Sugg::BinOp(AssocOp::Assign, get_snippet(lhs.span), get_snippet(rhs.span))"}, {"sha": "d27a20bd4dfa71cc9f80e092b0f6291ac9e2edaf", "filename": "src/tools/clippy/clippy_utils/src/visitors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8685b061402a0b4b459a01eb224726a9a54ed/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs?ref=19b8685b061402a0b4b459a01eb224726a9a54ed", "patch": "@@ -665,7 +665,7 @@ pub fn for_each_unconsumed_temporary<'tcx, B>(\n             | ExprKind::Path(_)\n             | ExprKind::Continue(_)\n             | ExprKind::InlineAsm(_)\n-            | ExprKind::Err => (),\n+            | ExprKind::Err(_) => (),\n         }\n         ControlFlow::Continue(())\n     }"}]}