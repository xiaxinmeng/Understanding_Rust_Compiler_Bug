{"sha": "f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "node_id": "C_kwDOAAsO6NoAKGYxZjQ0YjllNGQ0MDVmOTM2MWVlNWFkZTNlMDY1NmIzNGQ5YmQxYjE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-11T05:42:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-11T05:42:12Z"}, "message": "Rollup merge of #96868 - nrc:turbo-stable, r=jhpratt,nbdd0121,nagisa\n\nStabilize explicit_generic_args_with_impl_trait\n\nThis is a stabilisation PR for `explicit_generic_args_with_impl_trait`.\n\n* [tracking issue](https://github.com/rust-lang/rust/issues/83701)\n  - [Stabilisation report](https://github.com/rust-lang/rust/issues/83701#issuecomment-1109949897)\n  - [FCP entered](https://github.com/rust-lang/rust/issues/83701#issuecomment-1120285703)\n* [implementation PR](https://github.com/rust-lang/rust/pull/86176)\n* [Reference PR](https://github.com/rust-lang/reference/pull/1212)\n* There is no mention of using the turbofish operator in the book (other than an entry in the operator list in the appendix), so there is no documentation to change/add there, unless we felt like we should add a section on using turbofish, but that seems orthogonal to `explicit_generic_args_with_impl_trait`", "tree": {"sha": "3b0ce417c0f269af39308d2fbe8d52623a9a5a47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b0ce417c0f269af39308d2fbe8d52623a9a5a47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJipCs0CRBK7hj4Ov3rIwAAJkIIAJ59Nj1+lzluwtoYjmG6+j4T\nlRIaQVmo71ZYHC98aktNupEGwO6BywqGH+86QdoNnTNAF0KOd7BVU7f+PDEUcCyK\nz1o2T1/XWW9C2rv4eAu+4UHliKminVs5OWKPOPQTdgckrUF82e6JDonz3zfY7J3N\nBmcM9UAdZTNgvbhm9VqjkvfLE5iniE/fdYzGeMqsgPv79On9HYElQZPOihB0ySU+\nInckUH9k7g9B86p8qfvprf/NA36rPMoUMs+VQWMJyNSfHgx/ZOkwpy0xVGPc1wLz\nkuRUK5tqkMO9f+yCByBtqb1J6RxkBT031MNb3eaFHpSaKpWXuyxDPMFdKKDXW30=\n=RV4r\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b0ce417c0f269af39308d2fbe8d52623a9a5a47\nparent 75307c22f33cb47966466ba1daca08573a3c583e\nparent 640a46138839dbb5d9bf8df0e8b9cbec1d8e5ded\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654926132 +0200\ncommitter GitHub <noreply@github.com> 1654926132 +0200\n\nRollup merge of #96868 - nrc:turbo-stable, r=jhpratt,nbdd0121,nagisa\n\nStabilize explicit_generic_args_with_impl_trait\n\nThis is a stabilisation PR for `explicit_generic_args_with_impl_trait`.\n\n* [tracking issue](https://github.com/rust-lang/rust/issues/83701)\n  - [Stabilisation report](https://github.com/rust-lang/rust/issues/83701#issuecomment-1109949897)\n  - [FCP entered](https://github.com/rust-lang/rust/issues/83701#issuecomment-1120285703)\n* [implementation PR](https://github.com/rust-lang/rust/pull/86176)\n* [Reference PR](https://github.com/rust-lang/reference/pull/1212)\n* There is no mention of using the turbofish operator in the book (other than an entry in the operator list in the appendix), so there is no documentation to change/add there, unless we felt like we should add a section on using turbofish, but that seems orthogonal to `explicit_generic_args_with_impl_trait`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "html_url": "https://github.com/rust-lang/rust/commit/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75307c22f33cb47966466ba1daca08573a3c583e", "url": "https://api.github.com/repos/rust-lang/rust/commits/75307c22f33cb47966466ba1daca08573a3c583e", "html_url": "https://github.com/rust-lang/rust/commit/75307c22f33cb47966466ba1daca08573a3c583e"}, {"sha": "640a46138839dbb5d9bf8df0e8b9cbec1d8e5ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/640a46138839dbb5d9bf8df0e8b9cbec1d8e5ded", "html_url": "https://github.com/rust-lang/rust/commit/640a46138839dbb5d9bf8df0e8b9cbec1d8e5ded"}], "stats": {"total": 254, "additions": 32, "deletions": 222}, "files": [{"sha": "7e0a5c71f5f6f20f8153de361f99c936dc79e715", "filename": "compiler/rustc_error_codes/src/error_codes/E0632.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0632.md", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0632.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0632.md?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -1,9 +1,11 @@\n+#### Note: this error code is no longer emitted by the compiler.\n+\n An explicit generic argument was provided when calling a function that\n uses `impl Trait` in argument position.\n \n Erroneous code example:\n \n-```compile_fail,E0632\n+```ignore (no longer an error)\n fn foo<T: Copy>(a: T, b: impl Clone) {}\n \n foo::<i32>(0i32, \"abc\".to_string());"}, {"sha": "c61735a57e163aaf929049df2823e9a326b52588", "filename": "compiler/rustc_error_messages/locales/en-US/typeck.ftl", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Ftypeck.ftl?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -95,12 +95,6 @@ typeck-expected-return-type = expected `{$expected}` because of return type\n typeck-unconstrained-opaque-type = unconstrained opaque type\n     .note = `{$name}` must be used in combination with a concrete type within the same module\n \n-typeck-explicit-generic-args-with-impl-trait =\n-    cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-    .label = explicit generic argument not allowed\n-    .note = see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-    .help = add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n typeck-missing-type-params =\n     the type {$parameterCount ->\n         [one] parameter"}, {"sha": "099c40b215d9992b576c57a8855df60566abb1b8", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -142,6 +142,8 @@ declare_features! (\n     (accepted, dyn_trait, \"1.27.0\", Some(44662), None),\n     /// Allows integer match exhaustiveness checking (RFC 2591).\n     (accepted, exhaustive_integer_patterns, \"1.33.0\", Some(50907), None),\n+    /// Allows explicit generic arguments specification with `impl Trait` present.\n+    (accepted, explicit_generic_args_with_impl_trait, \"1.63.0\", Some(83701), None),\n     /// Allows arbitrary expressions in key-value attributes at parse time.\n     (accepted, extended_key_value_attributes, \"1.54.0\", Some(78835), None),\n     /// Allows resolving absolute paths as paths from other crates."}, {"sha": "35473b6e97abebd38ad7870e1e5639f7d2501125", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -383,8 +383,6 @@ declare_features! (\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n     /// Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n-    /// Allows explicit generic arguments specification with `impl Trait` present.\n-    (active, explicit_generic_args_with_impl_trait, \"1.56.0\", Some(83701), None),\n     /// Allows defining `extern type`s.\n     (active, extern_types, \"1.23.0\", Some(43467), None),\n     /// Allows the use of `#[ffi_const]` on foreign functions."}, {"sha": "3fe4b5b46e01219147fb9a16240265d25c91085f", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 18, "deletions": 52, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -3,7 +3,7 @@ use crate::astconv::{\n     AstConv, CreateSubstsForGenericArgsCtxt, ExplicitLateBound, GenericArgCountMismatch,\n     GenericArgCountResult, GenericArgPosition,\n };\n-use crate::errors::{AssocTypeBindingNotAllowed, ExplicitGenericArgsWithImplTrait};\n+use crate::errors::AssocTypeBindingNotAllowed;\n use crate::structured_errors::{GenericArgsInfo, StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n use rustc_errors::{struct_span_err, Applicability, Diagnostic, MultiSpan};\n@@ -397,19 +397,24 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         is_method_call: IsMethodCall,\n     ) -> GenericArgCountResult {\n         let empty_args = hir::GenericArgs::none();\n-        let suppress_mismatch = Self::check_impl_trait(tcx, seg, generics);\n-\n         let gen_args = seg.args.unwrap_or(&empty_args);\n         let gen_pos = if is_method_call == IsMethodCall::Yes {\n             GenericArgPosition::MethodCall\n         } else {\n             GenericArgPosition::Value\n         };\n         let has_self = generics.parent.is_none() && generics.has_self;\n-        let infer_args = seg.infer_args || suppress_mismatch;\n \n         Self::check_generic_arg_count(\n-            tcx, span, def_id, seg, generics, gen_args, gen_pos, has_self, infer_args,\n+            tcx,\n+            span,\n+            def_id,\n+            seg,\n+            generics,\n+            gen_args,\n+            gen_pos,\n+            has_self,\n+            seg.infer_args,\n         )\n     }\n \n@@ -431,19 +436,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let param_counts = gen_params.own_counts();\n \n         // Subtracting from param count to ensure type params synthesized from `impl Trait`\n-        // cannot be explicitly specified even with `explicit_generic_args_with_impl_trait`\n-        // feature enabled.\n-        let synth_type_param_count = if tcx.features().explicit_generic_args_with_impl_trait {\n-            gen_params\n-                .params\n-                .iter()\n-                .filter(|param| {\n-                    matches!(param.kind, ty::GenericParamDefKind::Type { synthetic: true, .. })\n-                })\n-                .count()\n-        } else {\n-            0\n-        };\n+        // cannot be explicitly specified.\n+        let synth_type_param_count = gen_params\n+            .params\n+            .iter()\n+            .filter(|param| {\n+                matches!(param.kind, ty::GenericParamDefKind::Type { synthetic: true, .. })\n+            })\n+            .count();\n         let named_type_param_count =\n             param_counts.types - has_self as usize - synth_type_param_count;\n         let infer_lifetimes =\n@@ -611,40 +611,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n     }\n \n-    /// Report error if there is an explicit type parameter when using `impl Trait`.\n-    pub(crate) fn check_impl_trait(\n-        tcx: TyCtxt<'_>,\n-        seg: &hir::PathSegment<'_>,\n-        generics: &ty::Generics,\n-    ) -> bool {\n-        if seg.infer_args || tcx.features().explicit_generic_args_with_impl_trait {\n-            return false;\n-        }\n-\n-        let impl_trait = generics.has_impl_trait();\n-\n-        if impl_trait {\n-            let spans = seg\n-                .args()\n-                .args\n-                .iter()\n-                .filter_map(|arg| match arg {\n-                    GenericArg::Infer(_) | GenericArg::Type(_) | GenericArg::Const(_) => {\n-                        Some(arg.span())\n-                    }\n-                    _ => None,\n-                })\n-                .collect::<Vec<_>>();\n-\n-            tcx.sess.emit_err(ExplicitGenericArgsWithImplTrait {\n-                spans,\n-                is_nightly_build: tcx.sess.is_nightly_build().then_some(()),\n-            });\n-        }\n-\n-        impl_trait\n-    }\n-\n     /// Emits an error regarding forbidden type binding associations\n     pub fn prohibit_assoc_ty_binding(tcx: TyCtxt<'_>, span: Span) {\n         tcx.sess.emit_err(AssocTypeBindingNotAllowed { span });"}, {"sha": "67a3d4a4d020c28a77dc4ee13aa4d847a1e368bc", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -241,17 +241,6 @@ pub struct UnconstrainedOpaqueType {\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[error(code = \"E0632\", slug = \"typeck-explicit-generic-args-with-impl-trait\")]\n-#[note]\n-pub struct ExplicitGenericArgsWithImplTrait {\n-    #[primary_span]\n-    #[label]\n-    pub spans: Vec<Span>,\n-    #[help]\n-    pub is_nightly_build: Option<()>,\n-}\n-\n pub struct MissingTypeParams {\n     pub span: Span,\n     pub def_span: Span,"}, {"sha": "479571d85fe0510f5bf16730230f6bcbfed972cf", "filename": "src/doc/unstable-book/src/language-features/explicit-generic-args-with-impl-trait.md", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/75307c22f33cb47966466ba1daca08573a3c583e/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexplicit-generic-args-with-impl-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/75307c22f33cb47966466ba1daca08573a3c583e/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexplicit-generic-args-with-impl-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexplicit-generic-args-with-impl-trait.md?ref=75307c22f33cb47966466ba1daca08573a3c583e", "patch": "@@ -1,53 +0,0 @@\n-# `explicit_generic_args_with_impl_trait`\n-\n-The tracking issue for this feature is: [#83701]\n-\n-[#83701]: https://github.com/rust-lang/rust/issues/83701\n-\n-------------------------\n-\n-The `explicit_generic_args_with_impl_trait` feature gate lets you specify generic arguments even\n-when `impl Trait` is used in argument position.\n-\n-A simple example is:\n-\n-```rust\n-#![feature(explicit_generic_args_with_impl_trait)]\n-\n-fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n-\n-fn main() {\n-    foo::<str>(\"\".to_string());\n-}\n-```\n-\n-This is currently rejected:\n-\n-```text\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n- --> src/main.rs:6:11\n-  |\n-6 |     foo::<str>(\"\".to_string());\n-  |           ^^^ explicit generic argument not allowed\n-\n-```\n-\n-However it would compile if `explicit_generic_args_with_impl_trait` is enabled.\n-\n-Note that the synthetic type parameters from `impl Trait` are still implicit and you\n-cannot explicitly specify these:\n-\n-```rust,compile_fail\n-#![feature(explicit_generic_args_with_impl_trait)]\n-\n-fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n-fn bar<T: ?Sized, F: AsRef<T>>(_f: F) {}\n-\n-fn main() {\n-    bar::<str, _>(\"\".to_string()); // Okay\n-    bar::<str, String>(\"\".to_string()); // Okay\n-\n-    foo::<str>(\"\".to_string()); // Okay\n-    foo::<str, String>(\"\".to_string()); // Error, you cannot specify `impl Trait` explicitly\n-}\n-```"}, {"sha": "87e4ad500404439b6fa4c585653f292c0fee2d7c", "filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-trait-with-const-arguments.stderr?ref=75307c22f33cb47966466ba1daca08573a3c583e", "patch": "@@ -1,12 +0,0 @@\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/impl-trait-with-const-arguments.rs:18:20\n-   |\n-LL |     assert_eq!(f::<4usize>(Usizable), 20usize);\n-   |                    ^^^^^^ explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0632`."}, {"sha": "1aa23c60823483910b02add5901f6b1197f978b8", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/const-args.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fconst-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fconst-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fconst-args.rs?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n trait Usizer {\n     fn m(self) -> usize;\n }\n@@ -16,5 +18,4 @@ impl Usizer for Usizable {\n \n fn main() {\n     assert_eq!(f::<4usize>(Usizable), 20usize);\n-//~^ ERROR cannot provide explicit generic arguments when `impl Trait` is used in argument position\n }", "previous_filename": "src/test/ui/const-generics/impl-trait-with-const-arguments.rs"}, {"sha": "3b1024d612650024f217569dafb841432f8990a8", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args-for-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.rs?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -1,5 +1,3 @@\n-#![feature(explicit_generic_args_with_impl_trait)]\n-\n fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n \n fn main() {"}, {"sha": "c8b82783ea841800776db6fa7d6676a2a68896c0", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args-for-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args-for-impl.stderr?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -1,13 +1,13 @@\n error[E0107]: this function takes 1 generic argument but 2 generic arguments were supplied\n-  --> $DIR/explicit-generic-args-for-impl.rs:6:5\n+  --> $DIR/explicit-generic-args-for-impl.rs:4:5\n    |\n LL |     foo::<str, String>(\"\".to_string());\n    |     ^^^        ------ help: remove this generic argument\n    |     |\n    |     expected 1 generic argument\n    |\n note: function defined here, with 1 generic parameter: `T`\n-  --> $DIR/explicit-generic-args-for-impl.rs:3:4\n+  --> $DIR/explicit-generic-args-for-impl.rs:1:4\n    |\n LL | fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n    |    ^^^ -"}, {"sha": "99e0931ab950dcc9f08f2bf4cc3816ac45e3bae8", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/explicit-generic-args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fexplicit-generic-args.rs?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(explicit_generic_args_with_impl_trait)]\n-\n fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n \n fn main() {"}, {"sha": "0e4d6986d46ecdce76d7f08ba30c45cf6c83aa03", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/feature-gate.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.rs?ref=75307c22f33cb47966466ba1daca08573a3c583e", "patch": "@@ -1,7 +0,0 @@\n-// gate-test-explicit_generic_args_with_impl_trait\n-\n-fn foo<T: ?Sized>(_f: impl AsRef<T>) {}\n-\n-fn main() {\n-    foo::<str>(\"\".to_string()); //~ ERROR E0632\n-}"}, {"sha": "a25c85faf4e352c86d5ef7584fbbb81899aaa999", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/feature-gate.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Ffeature-gate.stderr?ref=75307c22f33cb47966466ba1daca08573a3c583e", "patch": "@@ -1,12 +0,0 @@\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/feature-gate.rs:6:11\n-   |\n-LL |     foo::<str>(\"\".to_string());\n-   |           ^^^ explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0632`."}, {"sha": "987df4997342fd9249c82767fc02d02e8541863c", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/issue-87718.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fissue-87718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fissue-87718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fissue-87718.rs?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(explicit_generic_args_with_impl_trait)]\n-\n fn f<T: ?Sized>(_: impl AsRef<T>, _: impl AsRef<T>) {}\n \n fn main() {"}, {"sha": "7249a36f5fe7b7b4de607b3d118cc0d52c849469", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/not-enough-args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.rs?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -1,5 +1,3 @@\n-#![feature(explicit_generic_args_with_impl_trait)]\n-\n fn f<T: ?Sized, U: ?Sized>(_: impl AsRef<T>, _: impl AsRef<U>) {}\n \n fn main() {"}, {"sha": "9d6db88d3643348ac51f4f7c76c3081829bb0b90", "filename": "src/test/ui/impl-trait/explicit-generic-args-with-impl-trait/not-enough-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fexplicit-generic-args-with-impl-trait%2Fnot-enough-args.stderr?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -1,13 +1,13 @@\n error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n-  --> $DIR/not-enough-args.rs:6:5\n+  --> $DIR/not-enough-args.rs:4:5\n    |\n LL |     f::<[u8]>(\"a\", b\"a\");\n    |     ^   ---- supplied 1 generic argument\n    |     |\n    |     expected 2 generic arguments\n    |\n note: function defined here, with 2 generic parameters: `T`, `U`\n-  --> $DIR/not-enough-args.rs:3:4\n+  --> $DIR/not-enough-args.rs:1:4\n    |\n LL | fn f<T: ?Sized, U: ?Sized>(_: impl AsRef<T>, _: impl AsRef<U>) {}\n    |    ^ -          -"}, {"sha": "d1e5aa6c6b916878f1cdb70749e102411982e3fb", "filename": "src/test/ui/impl-trait/issues/universal-issue-48703.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.rs?ref=75307c22f33cb47966466ba1daca08573a3c583e", "patch": "@@ -1,7 +0,0 @@\n-use std::fmt::Debug;\n-\n-fn foo<T>(x: impl Debug) { }\n-\n-fn main() {\n-    foo::<String>('a'); //~ ERROR cannot provide explicit generic arguments\n-}"}, {"sha": "02c7fe8ff2c41ec4b82dd9b05c5f5dbdddae065d", "filename": "src/test/ui/impl-trait/issues/universal-issue-48703.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-issue-48703.stderr?ref=75307c22f33cb47966466ba1daca08573a3c583e", "patch": "@@ -1,12 +0,0 @@\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/universal-issue-48703.rs:6:11\n-   |\n-LL |     foo::<String>('a');\n-   |           ^^^^^^ explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0632`."}, {"sha": "4ac0a694cb148f785679ea9021004bfc989eaa82", "filename": "src/test/ui/impl-trait/issues/universal-turbofish-in-method-issue-50950.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.rs?ref=75307c22f33cb47966466ba1daca08573a3c583e", "patch": "@@ -1,17 +0,0 @@\n-use std::any::Any;\n-pub struct EventHandler {\n-}\n-\n-impl EventHandler\n-{\n-    pub fn handle_event<T: Any>(&mut self, _efunc: impl FnMut(T)) {}\n-}\n-\n-struct TestEvent(i32);\n-\n-fn main() {\n-    let mut evt = EventHandler {};\n-    evt.handle_event::<TestEvent, fn(TestEvent)>(|_evt| {\n-        //~^ ERROR cannot provide explicit generic arguments\n-    });\n-}"}, {"sha": "84b98f71f4f0caefea1347220c2dec8ea761d96b", "filename": "src/test/ui/impl-trait/issues/universal-turbofish-in-method-issue-50950.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75307c22f33cb47966466ba1daca08573a3c583e/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Funiversal-turbofish-in-method-issue-50950.stderr?ref=75307c22f33cb47966466ba1daca08573a3c583e", "patch": "@@ -1,14 +0,0 @@\n-error[E0632]: cannot provide explicit generic arguments when `impl Trait` is used in argument position\n-  --> $DIR/universal-turbofish-in-method-issue-50950.rs:14:24\n-   |\n-LL |     evt.handle_event::<TestEvent, fn(TestEvent)>(|_evt| {\n-   |                        ^^^^^^^^^  ^^^^^^^^^^^^^ explicit generic argument not allowed\n-   |                        |\n-   |                        explicit generic argument not allowed\n-   |\n-   = note: see issue #83701 <https://github.com/rust-lang/rust/issues/83701> for more information\n-   = help: add `#![feature(explicit_generic_args_with_impl_trait)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0632`."}, {"sha": "eaaef3463ddc9ee467b24e8c66e08d42db6bec42", "filename": "src/test/ui/inference/issue-83606.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Finference%2Fissue-83606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Finference%2Fissue-83606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-83606.rs?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -5,6 +5,6 @@ fn foo<const N: usize>(_: impl std::fmt::Display) -> [usize; N] {\n }\n \n fn main() {\n-    let _ = foo(\"foo\"); //<- Do not suggest `foo::<N>(\"foo\");`!\n+    let _ = foo(\"foo\");\n     //~^ ERROR: type annotations needed for `[usize; _]`\n }"}, {"sha": "f5c84f960641a077f78d561541315f2c39c7abd1", "filename": "src/test/ui/inference/issue-83606.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Finference%2Fissue-83606.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1/src%2Ftest%2Fui%2Finference%2Fissue-83606.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-83606.stderr?ref=f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "patch": "@@ -1,12 +1,12 @@\n error[E0282]: type annotations needed for `[usize; _]`\n   --> $DIR/issue-83606.rs:8:9\n    |\n-LL |     let _ = foo(\"foo\"); //<- Do not suggest `foo::<N>(\"foo\");`!\n+LL |     let _ = foo(\"foo\");\n    |         ^\n    |\n help: consider giving this pattern a type, where the the value of const parameter `N` is specified\n    |\n-LL |     let _: [usize; _] = foo(\"foo\"); //<- Do not suggest `foo::<N>(\"foo\");`!\n+LL |     let _: [usize; _] = foo(\"foo\");\n    |          ++++++++++++\n \n error: aborting due to previous error"}]}