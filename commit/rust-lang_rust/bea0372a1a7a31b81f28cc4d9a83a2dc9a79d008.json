{"sha": "bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYTAzNzJhMWE3YTMxYjgxZjI4Y2M0ZDlhODNhMmRjOWE3OWQwMDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-20T18:33:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-20T18:33:16Z"}, "message": "Auto merge of #63752 - Centril:rollup-nlxwety, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #62497 (Fix double resolving custom libdir)\n - #63209 (Stabilize `async_await` in Rust 1.39.0)\n - #63746 (Cherry-pick src/test changes with Centril's changes)\n - #63750 (rustc_metadata: replace LazySeq<T> with Lazy<[T]>.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "49f35638545ccd98762e91fc712d09533ad869e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49f35638545ccd98762e91fc712d09533ad869e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "html_url": "https://github.com/rust-lang/rust/commit/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a56e05abd34e1936df74625c1f40cb6fee0cd4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a56e05abd34e1936df74625c1f40cb6fee0cd4a", "html_url": "https://github.com/rust-lang/rust/commit/5a56e05abd34e1936df74625c1f40cb6fee0cd4a"}, {"sha": "e3e8b7f12a5cdf4dbd3fa8a4a39b1bd4bce13d82", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3e8b7f12a5cdf4dbd3fa8a4a39b1bd4bce13d82", "html_url": "https://github.com/rust-lang/rust/commit/e3e8b7f12a5cdf4dbd3fa8a4a39b1bd4bce13d82"}], "stats": {"total": 1940, "additions": 801, "deletions": 1139}, "files": [{"sha": "955809e80747b5a1ff5bd32951ca3d4c3de328e7", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -618,13 +618,7 @@ impl<'a> Builder<'a> {\n             }\n \n             fn run(self, builder: &Builder<'_>) -> Interned<PathBuf> {\n-                let compiler = self.compiler;\n-                let config = &builder.build.config;\n-                let lib = if compiler.stage >= 1 && config.libdir_relative().is_some() {\n-                    builder.build.config.libdir_relative().unwrap()\n-                } else {\n-                    Path::new(\"lib\")\n-                };\n+                let lib = builder.sysroot_libdir_relative(self.compiler);\n                 let sysroot = builder\n                     .sysroot(self.compiler)\n                     .join(lib)\n@@ -678,6 +672,18 @@ impl<'a> Builder<'a> {\n         }\n     }\n \n+    /// Returns the compiler's relative libdir where the standard library and other artifacts are\n+    /// found for a compiler's sysroot.\n+    ///\n+    /// For example this returns `lib` on Unix and Windows.\n+    pub fn sysroot_libdir_relative(&self, compiler: Compiler) -> &Path {\n+        match self.config.libdir_relative() {\n+            Some(relative_libdir) if compiler.stage >= 1\n+                => relative_libdir,\n+            _ => Path::new(\"lib\")\n+        }\n+    }\n+\n     /// Adds the compiler's directory of dynamic libraries to `cmd`'s dynamic\n     /// library lookup path.\n     pub fn add_rustc_lib_path(&self, compiler: Compiler, cmd: &mut Command) {"}, {"sha": "213ceb194a8142f3e2ad6b8c6a6f2158efe2b2c4", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -469,7 +469,6 @@ impl Step for Rustc {\n         fn prepare_image(builder: &Builder<'_>, compiler: Compiler, image: &Path) {\n             let host = compiler.host;\n             let src = builder.sysroot(compiler);\n-            let libdir = builder.rustc_libdir(compiler);\n \n             // Copy rustc/rustdoc binaries\n             t!(fs::create_dir_all(image.join(\"bin\")));\n@@ -481,20 +480,26 @@ impl Step for Rustc {\n \n             // Copy runtime DLLs needed by the compiler\n             if libdir_relative.to_str() != Some(\"bin\") {\n+                let libdir = builder.rustc_libdir(compiler);\n                 for entry in builder.read_dir(&libdir) {\n                     let name = entry.file_name();\n                     if let Some(s) = name.to_str() {\n                         if is_dylib(s) {\n-                            builder.install(&entry.path(), &image.join(&libdir_relative), 0o644);\n+                            // Don't use custom libdir here because ^lib/ will be resolved again\n+                            // with installer\n+                            builder.install(&entry.path(), &image.join(\"lib\"), 0o644);\n                         }\n                     }\n                 }\n             }\n \n             // Copy over the codegen backends\n             let backends_src = builder.sysroot_codegen_backends(compiler);\n-            let backends_rel = backends_src.strip_prefix(&src).unwrap();\n-            let backends_dst = image.join(&backends_rel);\n+            let backends_rel = backends_src.strip_prefix(&src).unwrap()\n+                .strip_prefix(builder.sysroot_libdir_relative(compiler)).unwrap();\n+            // Don't use custom libdir here because ^lib/ will be resolved again with installer\n+            let backends_dst = image.join(\"lib\").join(&backends_rel);\n+\n             t!(fs::create_dir_all(&backends_dst));\n             builder.cp_r(&backends_src, &backends_dst);\n "}, {"sha": "a200a058f4f99bbd7a7e30e06a81c82fba8a4593", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2088,7 +2088,6 @@ generator can be constructed.\n Erroneous code example:\n \n ```edition2018,compile-fail,E0698\n-#![feature(async_await)]\n async fn bar<T>() -> () {}\n \n async fn foo() {\n@@ -2101,7 +2100,6 @@ To fix this you must bind `T` to a concrete type such as `String`\n so that a generator can then be constructed:\n \n ```edition2018\n-#![feature(async_await)]\n async fn bar<T>() -> () {}\n \n async fn foo() {"}, {"sha": "efc77699313e054ba278dd70eaa0f45a8157b2ee", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -68,9 +68,9 @@ pub struct CrateMetadata {\n     pub alloc_decoding_state: AllocDecodingState,\n \n     // NOTE(eddyb) we pass `'static` to a `'tcx` parameter because this\n-    // lifetime is only used behind `Lazy` / `LazySeq`, and therefore\n-    // acts like an universal (`for<'tcx>`), that is paired up with\n-    // whichever `TyCtxt` is being used to decode those values.\n+    // lifetime is only used behind `Lazy`, and therefore acts like an\n+    // universal (`for<'tcx>`), that is paired up with whichever `TyCtxt`\n+    // is being used to decode those values.\n     pub root: schema::CrateRoot<'static>,\n \n     /// For each definition in this crate, we encode a key. When the\n@@ -80,7 +80,7 @@ pub struct CrateMetadata {\n     /// compilation support.\n     pub def_path_table: Lrc<DefPathTable>,\n \n-    pub trait_impls: FxHashMap<(u32, DefIndex), schema::LazySeq<DefIndex>>,\n+    pub trait_impls: FxHashMap<(u32, DefIndex), schema::Lazy<[DefIndex]>>,\n \n     pub dep_kind: Lock<DepKind>,\n     pub source: CrateSource,"}, {"sha": "da96728d2dec9c316a671b76805024dfc8a7d7b2", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -134,14 +134,14 @@ impl<'a, 'tcx, T: Decodable> Lazy<T> {\n     }\n }\n \n-impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable> LazySeq<T> {\n+impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable> Lazy<[T]> {\n     pub fn decode<M: Metadata<'a, 'tcx>>(\n         self,\n         meta: M,\n     ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {\n         let mut dcx = meta.decoder(self.position);\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n-        (0..self.len).map(move |_| T::decode(&mut dcx).unwrap())\n+        (0..self.meta).map(move |_| T::decode(&mut dcx).unwrap())\n     }\n }\n \n@@ -154,18 +154,22 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n         self.cdata.expect(\"missing CrateMetadata in DecodeContext\")\n     }\n \n-    fn read_lazy_distance(&mut self, min_size: usize) -> Result<usize, <Self as Decoder>::Error> {\n+    fn read_lazy_with_meta<T: ?Sized + LazyMeta>(\n+        &mut self,\n+        meta: T::Meta,\n+    ) -> Result<Lazy<T>, <Self as Decoder>::Error> {\n+        let min_size = T::min_size(meta);\n         let distance = self.read_usize()?;\n         let position = match self.lazy_state {\n-            LazyState::NoNode => bug!(\"read_lazy_distance: outside of a metadata node\"),\n+            LazyState::NoNode => bug!(\"read_lazy_with_meta: outside of a metadata node\"),\n             LazyState::NodeStart(start) => {\n                 assert!(distance + min_size <= start);\n                 start - distance - min_size\n             }\n             LazyState::Previous(last_min_end) => last_min_end + distance,\n         };\n         self.lazy_state = LazyState::Previous(position + min_size);\n-        Ok(position)\n+        Ok(Lazy::from_position_and_meta(position, meta))\n     }\n }\n \n@@ -230,19 +234,18 @@ impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {\n \n impl<'a, 'tcx, T> SpecializedDecoder<Lazy<T>> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Lazy<T>, Self::Error> {\n-        Ok(Lazy::with_position(self.read_lazy_distance(Lazy::<T>::min_size())?))\n+        self.read_lazy_with_meta(())\n     }\n }\n \n-impl<'a, 'tcx, T> SpecializedDecoder<LazySeq<T>> for DecodeContext<'a, 'tcx> {\n-    fn specialized_decode(&mut self) -> Result<LazySeq<T>, Self::Error> {\n+impl<'a, 'tcx, T> SpecializedDecoder<Lazy<[T]>> for DecodeContext<'a, 'tcx> {\n+    fn specialized_decode(&mut self) -> Result<Lazy<[T]>, Self::Error> {\n         let len = self.read_usize()?;\n-        let position = if len == 0 {\n-            0\n+        if len == 0 {\n+            Ok(Lazy::empty())\n         } else {\n-            self.read_lazy_distance(LazySeq::<T>::min_size(len))?\n-        };\n-        Ok(LazySeq::with_position_and_length(position, len))\n+            self.read_lazy_with_meta(len)\n+        }\n     }\n }\n \n@@ -378,7 +381,7 @@ impl<'tcx> MetadataBlob {\n     }\n \n     pub fn get_rustc_version(&self) -> String {\n-        Lazy::with_position(METADATA_HEADER.len() + 4).decode(self)\n+        Lazy::<String>::from_position(METADATA_HEADER.len() + 4).decode(self)\n     }\n \n     pub fn get_root(&self) -> CrateRoot<'tcx> {\n@@ -387,7 +390,7 @@ impl<'tcx> MetadataBlob {\n         let pos = (((slice[offset + 0] as u32) << 24) | ((slice[offset + 1] as u32) << 16) |\n                    ((slice[offset + 2] as u32) << 8) |\n                    ((slice[offset + 3] as u32) << 0)) as usize;\n-        Lazy::with_position(pos).decode(self)\n+        Lazy::<CrateRoot<'tcx>>::from_position(pos).decode(self)\n     }\n \n     pub fn list_crate_metadata(&self,\n@@ -1140,7 +1143,7 @@ impl<'a, 'tcx> CrateMetadata {\n             EntryKind::Fn(data) |\n             EntryKind::ForeignFn(data) => data.decode(self).arg_names,\n             EntryKind::Method(data) => data.decode(self).fn_data.arg_names,\n-            _ => LazySeq::empty(),\n+            _ => Lazy::empty(),\n         };\n         arg_names.decode(self).collect()\n     }"}, {"sha": "df3320c64a96085263713355780a129d6775b417", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 195, "deletions": 196, "changes": 391, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -98,17 +98,17 @@ impl<'tcx> Encoder for EncodeContext<'tcx> {\n \n impl<'tcx, T> SpecializedEncoder<Lazy<T>> for EncodeContext<'tcx> {\n     fn specialized_encode(&mut self, lazy: &Lazy<T>) -> Result<(), Self::Error> {\n-        self.emit_lazy_distance(lazy.position, Lazy::<T>::min_size())\n+        self.emit_lazy_distance(*lazy)\n     }\n }\n \n-impl<'tcx, T> SpecializedEncoder<LazySeq<T>> for EncodeContext<'tcx> {\n-    fn specialized_encode(&mut self, seq: &LazySeq<T>) -> Result<(), Self::Error> {\n-        self.emit_usize(seq.len)?;\n-        if seq.len == 0 {\n+impl<'tcx, T> SpecializedEncoder<Lazy<[T]>> for EncodeContext<'tcx> {\n+    fn specialized_encode(&mut self, lazy: &Lazy<[T]>) -> Result<(), Self::Error> {\n+        self.emit_usize(lazy.meta)?;\n+        if lazy.meta == 0 {\n             return Ok(());\n         }\n-        self.emit_lazy_distance(seq.position, LazySeq::<T>::min_size(seq.len))\n+        self.emit_lazy_distance(*lazy)\n     }\n }\n \n@@ -239,21 +239,38 @@ impl<'tcx> TyEncoder for EncodeContext<'tcx> {\n     }\n }\n \n-impl<'tcx> EncodeContext<'tcx> {\n-    fn emit_node<F: FnOnce(&mut Self, usize) -> R, R>(&mut self, f: F) -> R {\n-        assert_eq!(self.lazy_state, LazyState::NoNode);\n-        let pos = self.position();\n-        self.lazy_state = LazyState::NodeStart(pos);\n-        let r = f(self, pos);\n-        self.lazy_state = LazyState::NoNode;\n-        r\n+/// Helper trait to allow overloading `EncodeContext::lazy` for iterators.\n+trait EncodeContentsForLazy<T: ?Sized + LazyMeta> {\n+    fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'tcx>) -> T::Meta;\n+}\n+\n+impl<T: Encodable> EncodeContentsForLazy<T> for &T {\n+    fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'tcx>) {\n+        self.encode(ecx).unwrap()\n+    }\n+}\n+\n+impl<T: Encodable> EncodeContentsForLazy<T> for T {\n+    fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'tcx>) {\n+        self.encode(ecx).unwrap()\n+    }\n+}\n+\n+impl<I, T> EncodeContentsForLazy<[T]> for I\n+    where I: IntoIterator,\n+          I::Item: EncodeContentsForLazy<T>,\n+{\n+    fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'tcx>) -> usize {\n+        self.into_iter().map(|value| value.encode_contents_for_lazy(ecx)).count()\n     }\n+}\n \n-    fn emit_lazy_distance(&mut self,\n-                          position: usize,\n-                          min_size: usize)\n-                          -> Result<(), <Self as Encoder>::Error> {\n-        let min_end = position + min_size;\n+impl<'tcx> EncodeContext<'tcx> {\n+    fn emit_lazy_distance<T: ?Sized + LazyMeta>(\n+        &mut self,\n+        lazy: Lazy<T>,\n+    ) -> Result<(), <Self as Encoder>::Error> {\n+        let min_end = lazy.position + T::min_size(lazy.meta);\n         let distance = match self.lazy_state {\n             LazyState::NoNode => bug!(\"emit_lazy_distance: outside of a metadata node\"),\n             LazyState::NodeStart(start) => {\n@@ -262,48 +279,31 @@ impl<'tcx> EncodeContext<'tcx> {\n             }\n             LazyState::Previous(last_min_end) => {\n                 assert!(\n-                    last_min_end <= position,\n+                    last_min_end <= lazy.position,\n                     \"make sure that the calls to `lazy*` \\\n                     are in the same order as the metadata fields\",\n                 );\n-                position - last_min_end\n+                lazy.position - last_min_end\n             }\n         };\n         self.lazy_state = LazyState::Previous(min_end);\n         self.emit_usize(distance)\n     }\n \n-    pub fn lazy<T: Encodable>(&mut self, value: &T) -> Lazy<T> {\n-        self.emit_node(|ecx, pos| {\n-            value.encode(ecx).unwrap();\n-\n-            assert!(pos + Lazy::<T>::min_size() <= ecx.position());\n-            Lazy::with_position(pos)\n-        })\n-    }\n-\n-    pub fn lazy_seq<I, T>(&mut self, iter: I) -> LazySeq<T>\n-        where I: IntoIterator<Item = T>,\n-              T: Encodable\n-    {\n-        self.emit_node(|ecx, pos| {\n-            let len = iter.into_iter().map(|value| value.encode(ecx).unwrap()).count();\n+    fn lazy<T: ?Sized + LazyMeta>(\n+        &mut self,\n+        value: impl EncodeContentsForLazy<T>,\n+    ) -> Lazy<T> {\n+        let pos = self.position();\n \n-            assert!(pos + LazySeq::<T>::min_size(len) <= ecx.position());\n-            LazySeq::with_position_and_length(pos, len)\n-        })\n-    }\n+        assert_eq!(self.lazy_state, LazyState::NoNode);\n+        self.lazy_state = LazyState::NodeStart(pos);\n+        let meta = value.encode_contents_for_lazy(self);\n+        self.lazy_state = LazyState::NoNode;\n \n-    pub fn lazy_seq_ref<'b, I, T>(&mut self, iter: I) -> LazySeq<T>\n-        where I: IntoIterator<Item = &'b T>,\n-              T: 'b + Encodable\n-    {\n-        self.emit_node(|ecx, pos| {\n-            let len = iter.into_iter().map(|value| value.encode(ecx).unwrap()).count();\n+        assert!(pos + <T>::min_size(meta) <= self.position());\n \n-            assert!(pos + LazySeq::<T>::min_size(len) <= ecx.position());\n-            LazySeq::with_position_and_length(pos, len)\n-        })\n+        Lazy::from_position_and_meta(pos, meta)\n     }\n \n     /// Emit the data for a `DefId` to the metadata. The function to\n@@ -320,7 +320,7 @@ impl<'tcx> EncodeContext<'tcx> {\n         assert!(id.is_local());\n \n         let entry = op(self, data);\n-        let entry = self.lazy(&entry);\n+        let entry = self.lazy(entry);\n         self.entries_index.record(id, entry);\n     }\n \n@@ -341,7 +341,7 @@ impl<'tcx> EncodeContext<'tcx> {\n         self.lazy(definitions.def_path_table())\n     }\n \n-    fn encode_source_map(&mut self) -> LazySeq<syntax_pos::SourceFile> {\n+    fn encode_source_map(&mut self) -> Lazy<[syntax_pos::SourceFile]> {\n         let source_map = self.tcx.sess.source_map();\n         let all_source_files = source_map.files();\n \n@@ -380,7 +380,7 @@ impl<'tcx> EncodeContext<'tcx> {\n             })\n             .collect::<Vec<_>>();\n \n-        self.lazy_seq_ref(adapted.iter().map(|rc| &**rc))\n+        self.lazy(adapted.iter().map(|rc| &**rc))\n     }\n \n     fn encode_crate_root(&mut self) -> Lazy<CrateRoot<'tcx>> {\n@@ -463,7 +463,7 @@ impl<'tcx> EncodeContext<'tcx> {\n                 }\n                 n = new_n;\n             }\n-            self.lazy_seq(interpret_alloc_index)\n+            self.lazy(interpret_alloc_index)\n         };\n \n \n@@ -482,8 +482,7 @@ impl<'tcx> EncodeContext<'tcx> {\n         let has_global_allocator = *tcx.sess.has_global_allocator.get();\n         let has_panic_handler = *tcx.sess.has_panic_handler.try_get().unwrap_or(&false);\n \n-\n-        let root = self.lazy(&CrateRoot {\n+        let root = self.lazy(CrateRoot {\n             name: tcx.crate_name(LOCAL_CRATE),\n             extra_filename: tcx.sess.opts.cg.extra_filename.clone(),\n             triple: tcx.sess.opts.target_triple.clone(),\n@@ -562,17 +561,17 @@ impl<'tcx> EncodeContext<'tcx> {\n }\n \n impl EncodeContext<'tcx> {\n-    fn encode_variances_of(&mut self, def_id: DefId) -> LazySeq<ty::Variance> {\n+    fn encode_variances_of(&mut self, def_id: DefId) -> Lazy<[ty::Variance]> {\n         debug!(\"EncodeContext::encode_variances_of({:?})\", def_id);\n         let tcx = self.tcx;\n-        self.lazy_seq_ref(&tcx.variances_of(def_id)[..])\n+        self.lazy(&tcx.variances_of(def_id)[..])\n     }\n \n     fn encode_item_type(&mut self, def_id: DefId) -> Lazy<Ty<'tcx>> {\n         let tcx = self.tcx;\n         let ty = tcx.type_of(def_id);\n         debug!(\"EncodeContext::encode_item_type({:?}) => {:?}\", def_id, ty);\n-        self.lazy(&ty)\n+        self.lazy(ty)\n     }\n \n     fn encode_enum_variant_info(\n@@ -601,23 +600,23 @@ impl EncodeContext<'tcx> {\n         let enum_vis = &tcx.hir().expect_item(enum_id).vis;\n \n         Entry {\n-            kind: EntryKind::Variant(self.lazy(&data)),\n-            visibility: self.lazy(&ty::Visibility::from_hir(enum_vis, enum_id, tcx)),\n-            span: self.lazy(&tcx.def_span(def_id)),\n+            kind: EntryKind::Variant(self.lazy(data)),\n+            visibility: self.lazy(ty::Visibility::from_hir(enum_vis, enum_id, tcx)),\n+            span: self.lazy(tcx.def_span(def_id)),\n             attributes: self.encode_attributes(&tcx.get_attrs(def_id)),\n-            children: self.lazy_seq(variant.fields.iter().map(|f| {\n+            children: self.lazy(variant.fields.iter().map(|f| {\n                 assert!(f.did.is_local());\n                 f.did.index\n             })),\n             stability: self.encode_stability(def_id),\n             deprecation: self.encode_deprecation(def_id),\n \n             ty: Some(self.encode_item_type(def_id)),\n-            inherent_impls: LazySeq::empty(),\n+            inherent_impls: Lazy::empty(),\n             variances: if variant.ctor_kind == CtorKind::Fn {\n                 self.encode_variances_of(def_id)\n             } else {\n-                LazySeq::empty()\n+                Lazy::empty()\n             },\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n@@ -642,7 +641,7 @@ impl EncodeContext<'tcx> {\n             discr: variant.discr,\n             ctor: Some(def_id.index),\n             ctor_sig: if variant.ctor_kind == CtorKind::Fn {\n-                Some(self.lazy(&tcx.fn_sig(def_id)))\n+                Some(self.lazy(tcx.fn_sig(def_id)))\n             } else {\n                 None\n             }\n@@ -658,20 +657,20 @@ impl EncodeContext<'tcx> {\n         }\n \n         Entry {\n-            kind: EntryKind::Variant(self.lazy(&data)),\n-            visibility: self.lazy(&ctor_vis),\n-            span: self.lazy(&tcx.def_span(def_id)),\n-            attributes: LazySeq::empty(),\n-            children: LazySeq::empty(),\n+            kind: EntryKind::Variant(self.lazy(data)),\n+            visibility: self.lazy(ctor_vis),\n+            span: self.lazy(tcx.def_span(def_id)),\n+            attributes: Lazy::empty(),\n+            children: Lazy::empty(),\n             stability: self.encode_stability(def_id),\n             deprecation: self.encode_deprecation(def_id),\n \n             ty: Some(self.encode_item_type(def_id)),\n-            inherent_impls: LazySeq::empty(),\n+            inherent_impls: Lazy::empty(),\n             variances: if variant.ctor_kind == CtorKind::Fn {\n                 self.encode_variances_of(def_id)\n             } else {\n-                LazySeq::empty()\n+                Lazy::empty()\n             },\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n@@ -691,25 +690,25 @@ impl EncodeContext<'tcx> {\n \n         let data = ModData {\n             reexports: match tcx.module_exports(def_id) {\n-                Some(exports) => self.lazy_seq_ref(exports),\n-                _ => LazySeq::empty(),\n+                Some(exports) => self.lazy(exports),\n+                _ => Lazy::empty(),\n             },\n         };\n \n         Entry {\n-            kind: EntryKind::Mod(self.lazy(&data)),\n-            visibility: self.lazy(&ty::Visibility::from_hir(vis, id, tcx)),\n-            span: self.lazy(&tcx.def_span(def_id)),\n+            kind: EntryKind::Mod(self.lazy(data)),\n+            visibility: self.lazy(ty::Visibility::from_hir(vis, id, tcx)),\n+            span: self.lazy(tcx.def_span(def_id)),\n             attributes: self.encode_attributes(attrs),\n-            children: self.lazy_seq(md.item_ids.iter().map(|item_id| {\n+            children: self.lazy(md.item_ids.iter().map(|item_id| {\n                 tcx.hir().local_def_id(item_id.id).index\n             })),\n             stability: self.encode_stability(def_id),\n             deprecation: self.encode_deprecation(def_id),\n \n             ty: None,\n-            inherent_impls: LazySeq::empty(),\n-            variances: LazySeq::empty(),\n+            inherent_impls: Lazy::empty(),\n+            variances: Lazy::empty(),\n             generics: None,\n             predicates: None,\n             predicates_defined_on: None,\n@@ -734,16 +733,16 @@ impl EncodeContext<'tcx> {\n \n         Entry {\n             kind: EntryKind::Field,\n-            visibility: self.lazy(&field.vis),\n-            span: self.lazy(&tcx.def_span(def_id)),\n+            visibility: self.lazy(field.vis),\n+            span: self.lazy(tcx.def_span(def_id)),\n             attributes: self.encode_attributes(&variant_data.fields()[field_index].attrs),\n-            children: LazySeq::empty(),\n+            children: Lazy::empty(),\n             stability: self.encode_stability(def_id),\n             deprecation: self.encode_deprecation(def_id),\n \n             ty: Some(self.encode_item_type(def_id)),\n-            inherent_impls: LazySeq::empty(),\n-            variances: LazySeq::empty(),\n+            inherent_impls: Lazy::empty(),\n+            variances: Lazy::empty(),\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n             predicates_defined_on: None,\n@@ -763,7 +762,7 @@ impl EncodeContext<'tcx> {\n             discr: variant.discr,\n             ctor: Some(def_id.index),\n             ctor_sig: if variant.ctor_kind == CtorKind::Fn {\n-                Some(self.lazy(&tcx.fn_sig(def_id)))\n+                Some(self.lazy(tcx.fn_sig(def_id)))\n             } else {\n                 None\n             }\n@@ -789,20 +788,20 @@ impl EncodeContext<'tcx> {\n         let repr_options = get_repr_options(tcx, adt_def_id);\n \n         Entry {\n-            kind: EntryKind::Struct(self.lazy(&data), repr_options),\n-            visibility: self.lazy(&ctor_vis),\n-            span: self.lazy(&tcx.def_span(def_id)),\n-            attributes: LazySeq::empty(),\n-            children: LazySeq::empty(),\n+            kind: EntryKind::Struct(self.lazy(data), repr_options),\n+            visibility: self.lazy(ctor_vis),\n+            span: self.lazy(tcx.def_span(def_id)),\n+            attributes: Lazy::empty(),\n+            children: Lazy::empty(),\n             stability: self.encode_stability(def_id),\n             deprecation: self.encode_deprecation(def_id),\n \n             ty: Some(self.encode_item_type(def_id)),\n-            inherent_impls: LazySeq::empty(),\n+            inherent_impls: Lazy::empty(),\n             variances: if variant.ctor_kind == CtorKind::Fn {\n                 self.encode_variances_of(def_id)\n             } else {\n-                LazySeq::empty()\n+                Lazy::empty()\n             },\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n@@ -821,13 +820,13 @@ impl EncodeContext<'tcx> {\n     fn encode_predicates(&mut self, def_id: DefId) -> Lazy<ty::GenericPredicates<'tcx>> {\n         debug!(\"EncodeContext::encode_predicates({:?})\", def_id);\n         let tcx = self.tcx;\n-        self.lazy(&tcx.predicates_of(def_id))\n+        self.lazy(&*tcx.predicates_of(def_id))\n     }\n \n     fn encode_predicates_defined_on(&mut self, def_id: DefId) -> Lazy<ty::GenericPredicates<'tcx>> {\n         debug!(\"EncodeContext::encode_predicates_defined_on({:?})\", def_id);\n         let tcx = self.tcx;\n-        self.lazy(&tcx.predicates_defined_on(def_id))\n+        self.lazy(&*tcx.predicates_defined_on(def_id))\n     }\n \n     fn encode_info_for_trait_item(&mut self, def_id: DefId) -> Entry<'tcx> {\n@@ -858,7 +857,7 @@ impl EncodeContext<'tcx> {\n \n                 let rendered =\n                     hir::print::to_string(self.tcx.hir(), |s| s.print_trait_item(ast_item));\n-                let rendered_const = self.lazy(&RenderedConst(rendered));\n+                let rendered_const = self.lazy(RenderedConst(rendered));\n \n                 EntryKind::AssocConst(container, const_qualif, rendered_const)\n             }\n@@ -875,12 +874,12 @@ impl EncodeContext<'tcx> {\n                     FnData {\n                         constness: hir::Constness::NotConst,\n                         arg_names,\n-                        sig: self.lazy(&tcx.fn_sig(def_id)),\n+                        sig: self.lazy(tcx.fn_sig(def_id)),\n                     }\n                 } else {\n                     bug!()\n                 };\n-                EntryKind::Method(self.lazy(&MethodData {\n+                EntryKind::Method(self.lazy(MethodData {\n                     fn_data,\n                     container,\n                     has_self: trait_item.method_has_self_argument,\n@@ -892,10 +891,10 @@ impl EncodeContext<'tcx> {\n \n         Entry {\n             kind,\n-            visibility: self.lazy(&trait_item.vis),\n-            span: self.lazy(&ast_item.span),\n+            visibility: self.lazy(trait_item.vis),\n+            span: self.lazy(ast_item.span),\n             attributes: self.encode_attributes(&ast_item.attrs),\n-            children: LazySeq::empty(),\n+            children: Lazy::empty(),\n             stability: self.encode_stability(def_id),\n             deprecation: self.encode_deprecation(def_id),\n \n@@ -913,11 +912,11 @@ impl EncodeContext<'tcx> {\n                 }\n                 ty::AssocKind::OpaqueTy => unreachable!(),\n             },\n-            inherent_impls: LazySeq::empty(),\n+            inherent_impls: Lazy::empty(),\n             variances: if trait_item.kind == ty::AssocKind::Method {\n                 self.encode_variances_of(def_id)\n             } else {\n-                LazySeq::empty()\n+                Lazy::empty()\n             },\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n@@ -971,12 +970,12 @@ impl EncodeContext<'tcx> {\n                     FnData {\n                         constness: sig.header.constness,\n                         arg_names: self.encode_fn_arg_names_for_body(body),\n-                        sig: self.lazy(&tcx.fn_sig(def_id)),\n+                        sig: self.lazy(tcx.fn_sig(def_id)),\n                     }\n                 } else {\n                     bug!()\n                 };\n-                EntryKind::Method(self.lazy(&MethodData {\n+                EntryKind::Method(self.lazy(MethodData {\n                     fn_data,\n                     container,\n                     has_self: impl_item.method_has_self_argument,\n@@ -1004,19 +1003,19 @@ impl EncodeContext<'tcx> {\n \n         Entry {\n             kind,\n-            visibility: self.lazy(&impl_item.vis),\n-            span: self.lazy(&ast_item.span),\n+            visibility: self.lazy(impl_item.vis),\n+            span: self.lazy(ast_item.span),\n             attributes: self.encode_attributes(&ast_item.attrs),\n-            children: LazySeq::empty(),\n+            children: Lazy::empty(),\n             stability: self.encode_stability(def_id),\n             deprecation: self.encode_deprecation(def_id),\n \n             ty: Some(self.encode_item_type(def_id)),\n-            inherent_impls: LazySeq::empty(),\n+            inherent_impls: Lazy::empty(),\n             variances: if impl_item.kind == ty::AssocKind::Method {\n                 self.encode_variances_of(def_id)\n             } else {\n-                LazySeq::empty()\n+                Lazy::empty()\n             },\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n@@ -1027,10 +1026,10 @@ impl EncodeContext<'tcx> {\n     }\n \n     fn encode_fn_arg_names_for_body(&mut self, body_id: hir::BodyId)\n-                                    -> LazySeq<ast::Name> {\n+                                    -> Lazy<[ast::Name]> {\n         self.tcx.dep_graph.with_ignore(|| {\n             let body = self.tcx.hir().body(body_id);\n-            self.lazy_seq(body.arguments.iter().map(|arg| {\n+            self.lazy(body.arguments.iter().map(|arg| {\n                 match arg.pat.node {\n                     PatKind::Binding(_, _, ident, _) => ident.name,\n                     _ => kw::Invalid,\n@@ -1039,28 +1038,28 @@ impl EncodeContext<'tcx> {\n         })\n     }\n \n-    fn encode_fn_arg_names(&mut self, param_names: &[ast::Ident]) -> LazySeq<ast::Name> {\n-        self.lazy_seq(param_names.iter().map(|ident| ident.name))\n+    fn encode_fn_arg_names(&mut self, param_names: &[ast::Ident]) -> Lazy<[ast::Name]> {\n+        self.lazy(param_names.iter().map(|ident| ident.name))\n     }\n \n     fn encode_optimized_mir(&mut self, def_id: DefId) -> Option<Lazy<mir::Body<'tcx>>> {\n         debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n         if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n             let mir = self.tcx.optimized_mir(def_id);\n-            Some(self.lazy(&mir))\n+            Some(self.lazy(mir))\n         } else {\n             None\n         }\n     }\n \n     // Encodes the inherent implementations of a structure, enumeration, or trait.\n-    fn encode_inherent_implementations(&mut self, def_id: DefId) -> LazySeq<DefIndex> {\n+    fn encode_inherent_implementations(&mut self, def_id: DefId) -> Lazy<[DefIndex]> {\n         debug!(\"EncodeContext::encode_inherent_implementations({:?})\", def_id);\n         let implementations = self.tcx.inherent_impls(def_id);\n         if implementations.is_empty() {\n-            LazySeq::empty()\n+            Lazy::empty()\n         } else {\n-            self.lazy_seq(implementations.iter().map(|&def_id| {\n+            self.lazy(implementations.iter().map(|&def_id| {\n                 assert!(def_id.is_local());\n                 def_id.index\n             }))\n@@ -1074,7 +1073,7 @@ impl EncodeContext<'tcx> {\n \n     fn encode_deprecation(&mut self, def_id: DefId) -> Option<Lazy<attr::Deprecation>> {\n         debug!(\"EncodeContext::encode_deprecation({:?})\", def_id);\n-        self.tcx.lookup_deprecation(def_id).map(|depr| self.lazy(&depr))\n+        self.tcx.lookup_deprecation(def_id).map(|depr| self.lazy(depr))\n     }\n \n     fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {\n@@ -1103,10 +1102,10 @@ impl EncodeContext<'tcx> {\n                 let data = FnData {\n                     constness: header.constness,\n                     arg_names: self.encode_fn_arg_names_for_body(body),\n-                    sig: self.lazy(&tcx.fn_sig(def_id)),\n+                    sig: self.lazy(tcx.fn_sig(def_id)),\n                 };\n \n-                EntryKind::Fn(self.lazy(&data))\n+                EntryKind::Fn(self.lazy(data))\n             }\n             hir::ItemKind::Mod(ref m) => {\n                 return self.encode_info_for_mod((item.hir_id, m, &item.attrs, &item.vis));\n@@ -1127,7 +1126,7 @@ impl EncodeContext<'tcx> {\n \n                 let repr_options = get_repr_options(tcx, def_id);\n \n-                EntryKind::Struct(self.lazy(&VariantData {\n+                EntryKind::Struct(self.lazy(VariantData {\n                     ctor_kind: variant.ctor_kind,\n                     discr: variant.discr,\n                     ctor,\n@@ -1138,7 +1137,7 @@ impl EncodeContext<'tcx> {\n                 let variant = tcx.adt_def(def_id).non_enum_variant();\n                 let repr_options = get_repr_options(tcx, def_id);\n \n-                EntryKind::Union(self.lazy(&VariantData {\n+                EntryKind::Union(self.lazy(VariantData {\n                     ctor_kind: variant.ctor_kind,\n                     discr: variant.discr,\n                     ctor: None,\n@@ -1175,10 +1174,10 @@ impl EncodeContext<'tcx> {\n                     defaultness,\n                     parent_impl: parent,\n                     coerce_unsized_info,\n-                    trait_ref: trait_ref.map(|trait_ref| self.lazy(&trait_ref)),\n+                    trait_ref: trait_ref.map(|trait_ref| self.lazy(trait_ref)),\n                 };\n \n-                EntryKind::Impl(self.lazy(&data))\n+                EntryKind::Impl(self.lazy(data))\n             }\n             hir::ItemKind::Trait(..) => {\n                 let trait_def = tcx.trait_def(def_id);\n@@ -1187,57 +1186,57 @@ impl EncodeContext<'tcx> {\n                     paren_sugar: trait_def.paren_sugar,\n                     has_auto_impl: tcx.trait_is_auto(def_id),\n                     is_marker: trait_def.is_marker,\n-                    super_predicates: self.lazy(&tcx.super_predicates_of(def_id)),\n+                    super_predicates: self.lazy(&*tcx.super_predicates_of(def_id)),\n                 };\n \n-                EntryKind::Trait(self.lazy(&data))\n+                EntryKind::Trait(self.lazy(data))\n             }\n             hir::ItemKind::TraitAlias(..) => {\n                 let data = TraitAliasData {\n-                    super_predicates: self.lazy(&tcx.super_predicates_of(def_id)),\n+                    super_predicates: self.lazy(&*tcx.super_predicates_of(def_id)),\n                 };\n \n-                EntryKind::TraitAlias(self.lazy(&data))\n+                EntryKind::TraitAlias(self.lazy(data))\n             }\n             hir::ItemKind::ExternCrate(_) |\n             hir::ItemKind::Use(..) => bug!(\"cannot encode info for item {:?}\", item),\n         };\n \n         Entry {\n             kind,\n-            visibility: self.lazy(&ty::Visibility::from_hir(&item.vis, item.hir_id, tcx)),\n-            span: self.lazy(&item.span),\n+            visibility: self.lazy(ty::Visibility::from_hir(&item.vis, item.hir_id, tcx)),\n+            span: self.lazy(item.span),\n             attributes: self.encode_attributes(&item.attrs),\n             children: match item.node {\n                 hir::ItemKind::ForeignMod(ref fm) => {\n-                    self.lazy_seq(fm.items\n+                    self.lazy(fm.items\n                         .iter()\n                         .map(|foreign_item| tcx.hir().local_def_id(\n                             foreign_item.hir_id).index))\n                 }\n                 hir::ItemKind::Enum(..) => {\n                     let def = self.tcx.adt_def(def_id);\n-                    self.lazy_seq(def.variants.iter().map(|v| {\n+                    self.lazy(def.variants.iter().map(|v| {\n                         assert!(v.def_id.is_local());\n                         v.def_id.index\n                     }))\n                 }\n                 hir::ItemKind::Struct(..) |\n                 hir::ItemKind::Union(..) => {\n                     let def = self.tcx.adt_def(def_id);\n-                    self.lazy_seq(def.non_enum_variant().fields.iter().map(|f| {\n+                    self.lazy(def.non_enum_variant().fields.iter().map(|f| {\n                         assert!(f.did.is_local());\n                         f.did.index\n                     }))\n                 }\n                 hir::ItemKind::Impl(..) |\n                 hir::ItemKind::Trait(..) => {\n-                    self.lazy_seq(tcx.associated_item_def_ids(def_id).iter().map(|&def_id| {\n+                    self.lazy(tcx.associated_item_def_ids(def_id).iter().map(|&def_id| {\n                         assert!(def_id.is_local());\n                         def_id.index\n                     }))\n                 }\n-                _ => LazySeq::empty(),\n+                _ => Lazy::empty(),\n             },\n             stability: self.encode_stability(def_id),\n             deprecation: self.encode_deprecation(def_id),\n@@ -1260,7 +1259,7 @@ impl EncodeContext<'tcx> {\n                 hir::ItemKind::Struct(..) |\n                 hir::ItemKind::Union(..) |\n                 hir::ItemKind::Fn(..) => self.encode_variances_of(def_id),\n-                _ => LazySeq::empty(),\n+                _ => Lazy::empty(),\n             },\n             generics: match item.node {\n                 hir::ItemKind::Static(..) |\n@@ -1333,20 +1332,20 @@ impl EncodeContext<'tcx> {\n         use syntax::print::pprust;\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id);\n         Entry {\n-            kind: EntryKind::MacroDef(self.lazy(&MacroDef {\n+            kind: EntryKind::MacroDef(self.lazy(MacroDef {\n                 body: pprust::tokens_to_string(macro_def.body.clone()),\n                 legacy: macro_def.legacy,\n             })),\n-            visibility: self.lazy(&ty::Visibility::Public),\n-            span: self.lazy(&macro_def.span),\n+            visibility: self.lazy(ty::Visibility::Public),\n+            span: self.lazy(macro_def.span),\n             attributes: self.encode_attributes(&macro_def.attrs),\n             stability: self.encode_stability(def_id),\n             deprecation: self.encode_deprecation(def_id),\n \n-            children: LazySeq::empty(),\n+            children: Lazy::empty(),\n             ty: None,\n-            inherent_impls: LazySeq::empty(),\n-            variances: LazySeq::empty(),\n+            inherent_impls: Lazy::empty(),\n+            variances: Lazy::empty(),\n             generics: None,\n             predicates: None,\n             predicates_defined_on: None,\n@@ -1363,15 +1362,15 @@ impl EncodeContext<'tcx> {\n         let tcx = self.tcx;\n         Entry {\n             kind: entry_kind,\n-            visibility: self.lazy(&ty::Visibility::Public),\n-            span: self.lazy(&tcx.def_span(def_id)),\n-            attributes: LazySeq::empty(),\n-            children: LazySeq::empty(),\n+            visibility: self.lazy(ty::Visibility::Public),\n+            span: self.lazy(tcx.def_span(def_id)),\n+            attributes: Lazy::empty(),\n+            children: Lazy::empty(),\n             stability: None,\n             deprecation: None,\n             ty: if encode_type { Some(self.encode_item_type(def_id)) } else { None },\n-            inherent_impls: LazySeq::empty(),\n-            variances: LazySeq::empty(),\n+            inherent_impls: Lazy::empty(),\n+            variances: Lazy::empty(),\n             generics: None,\n             predicates: None,\n             predicates_defined_on: None,\n@@ -1408,30 +1407,30 @@ impl EncodeContext<'tcx> {\n                 let data = GeneratorData {\n                     layout: layout.clone(),\n                 };\n-                EntryKind::Generator(self.lazy(&data))\n+                EntryKind::Generator(self.lazy(data))\n             }\n \n             ty::Closure(def_id, substs) => {\n                 let sig = substs.closure_sig(def_id, self.tcx);\n-                let data = ClosureData { sig: self.lazy(&sig) };\n-                EntryKind::Closure(self.lazy(&data))\n+                let data = ClosureData { sig: self.lazy(sig) };\n+                EntryKind::Closure(self.lazy(data))\n             }\n \n             _ => bug!(\"closure that is neither generator nor closure\")\n         };\n \n         Entry {\n             kind,\n-            visibility: self.lazy(&ty::Visibility::Public),\n-            span: self.lazy(&tcx.def_span(def_id)),\n+            visibility: self.lazy(ty::Visibility::Public),\n+            span: self.lazy(tcx.def_span(def_id)),\n             attributes: self.encode_attributes(&tcx.get_attrs(def_id)),\n-            children: LazySeq::empty(),\n+            children: Lazy::empty(),\n             stability: None,\n             deprecation: None,\n \n             ty: Some(self.encode_item_type(def_id)),\n-            inherent_impls: LazySeq::empty(),\n-            variances: LazySeq::empty(),\n+            inherent_impls: Lazy::empty(),\n+            variances: Lazy::empty(),\n             generics: Some(self.encode_generics(def_id)),\n             predicates: None,\n             predicates_defined_on: None,\n@@ -1450,16 +1449,16 @@ impl EncodeContext<'tcx> {\n \n         Entry {\n             kind: EntryKind::Const(self.const_qualif(mir, body_id), const_data),\n-            visibility: self.lazy(&ty::Visibility::Public),\n-            span: self.lazy(&tcx.def_span(def_id)),\n-            attributes: LazySeq::empty(),\n-            children: LazySeq::empty(),\n+            visibility: self.lazy(ty::Visibility::Public),\n+            span: self.lazy(tcx.def_span(def_id)),\n+            attributes: Lazy::empty(),\n+            children: Lazy::empty(),\n             stability: None,\n             deprecation: None,\n \n             ty: Some(self.encode_item_type(def_id)),\n-            inherent_impls: LazySeq::empty(),\n-            variances: LazySeq::empty(),\n+            inherent_impls: Lazy::empty(),\n+            variances: Lazy::empty(),\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n             predicates_defined_on: None,\n@@ -1468,37 +1467,37 @@ impl EncodeContext<'tcx> {\n         }\n     }\n \n-    fn encode_attributes(&mut self, attrs: &[ast::Attribute]) -> LazySeq<ast::Attribute> {\n-        self.lazy_seq_ref(attrs)\n+    fn encode_attributes(&mut self, attrs: &[ast::Attribute]) -> Lazy<[ast::Attribute]> {\n+        self.lazy(attrs)\n     }\n \n-    fn encode_native_libraries(&mut self) -> LazySeq<NativeLibrary> {\n+    fn encode_native_libraries(&mut self) -> Lazy<[NativeLibrary]> {\n         let used_libraries = self.tcx.native_libraries(LOCAL_CRATE);\n-        self.lazy_seq(used_libraries.iter().cloned())\n+        self.lazy(used_libraries.iter().cloned())\n     }\n \n-    fn encode_foreign_modules(&mut self) -> LazySeq<ForeignModule> {\n+    fn encode_foreign_modules(&mut self) -> Lazy<[ForeignModule]> {\n         let foreign_modules = self.tcx.foreign_modules(LOCAL_CRATE);\n-        self.lazy_seq(foreign_modules.iter().cloned())\n+        self.lazy(foreign_modules.iter().cloned())\n     }\n \n-    fn encode_proc_macros(&mut self) -> Option<LazySeq<DefIndex>> {\n+    fn encode_proc_macros(&mut self) -> Option<Lazy<[DefIndex]>> {\n         let is_proc_macro = self.tcx.sess.crate_types.borrow().contains(&CrateType::ProcMacro);\n         if is_proc_macro {\n-            let proc_macros: Vec<_> = self.tcx.hir().krate().items.values().filter_map(|item| {\n+            let tcx = self.tcx;\n+            Some(self.lazy(tcx.hir().krate().items.values().filter_map(|item| {\n                 if item.attrs.iter().any(|attr| is_proc_macro_attr(attr)) {\n                     Some(item.hir_id.owner)\n                 } else {\n                     None\n                 }\n-            }).collect();\n-            Some(self.lazy_seq(proc_macros))\n+            })))\n         } else {\n             None\n         }\n     }\n \n-    fn encode_crate_deps(&mut self) -> LazySeq<CrateDep> {\n+    fn encode_crate_deps(&mut self) -> Lazy<[CrateDep]> {\n         let crates = self.tcx.crates();\n \n         let mut deps = crates\n@@ -1529,20 +1528,20 @@ impl EncodeContext<'tcx> {\n         // the assumption that they are numbered 1 to n.\n         // FIXME (#2166): This is not nearly enough to support correct versioning\n         // but is enough to get transitive crate dependencies working.\n-        self.lazy_seq_ref(deps.iter().map(|&(_, ref dep)| dep))\n+        self.lazy(deps.iter().map(|&(_, ref dep)| dep))\n     }\n \n-    fn encode_lib_features(&mut self) -> LazySeq<(ast::Name, Option<ast::Name>)> {\n+    fn encode_lib_features(&mut self) -> Lazy<[(ast::Name, Option<ast::Name>)]> {\n         let tcx = self.tcx;\n         let lib_features = tcx.lib_features();\n-        self.lazy_seq(lib_features.to_vec())\n+        self.lazy(lib_features.to_vec())\n     }\n \n-    fn encode_lang_items(&mut self) -> LazySeq<(DefIndex, usize)> {\n+    fn encode_lang_items(&mut self) -> Lazy<[(DefIndex, usize)]> {\n         let tcx = self.tcx;\n         let lang_items = tcx.lang_items();\n         let lang_items = lang_items.items().iter();\n-        self.lazy_seq(lang_items.enumerate().filter_map(|(i, &opt_def_id)| {\n+        self.lazy(lang_items.enumerate().filter_map(|(i, &opt_def_id)| {\n             if let Some(def_id) = opt_def_id {\n                 if def_id.is_local() {\n                     return Some((def_id.index, i));\n@@ -1552,13 +1551,13 @@ impl EncodeContext<'tcx> {\n         }))\n     }\n \n-    fn encode_lang_items_missing(&mut self) -> LazySeq<lang_items::LangItem> {\n+    fn encode_lang_items_missing(&mut self) -> Lazy<[lang_items::LangItem]> {\n         let tcx = self.tcx;\n-        self.lazy_seq_ref(&tcx.lang_items().missing)\n+        self.lazy(&tcx.lang_items().missing)\n     }\n \n     /// Encodes an index, mapping each trait to its (local) implementations.\n-    fn encode_impls(&mut self) -> LazySeq<TraitImpls> {\n+    fn encode_impls(&mut self) -> Lazy<[TraitImpls]> {\n         debug!(\"EncodeContext::encode_impls()\");\n         let tcx = self.tcx;\n         let mut visitor = ImplVisitor {\n@@ -1584,12 +1583,12 @@ impl EncodeContext<'tcx> {\n \n                 TraitImpls {\n                     trait_id: (trait_def_id.krate.as_u32(), trait_def_id.index),\n-                    impls: self.lazy_seq_ref(&impls),\n+                    impls: self.lazy(&impls),\n                 }\n             })\n             .collect();\n \n-        self.lazy_seq_ref(&all_impls)\n+        self.lazy(&all_impls)\n     }\n \n     // Encodes all symbols exported from this crate into the metadata.\n@@ -1600,12 +1599,12 @@ impl EncodeContext<'tcx> {\n     // definition (as that's not defined in this crate).\n     fn encode_exported_symbols(&mut self,\n                                exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportLevel)])\n-                               -> LazySeq<(ExportedSymbol<'tcx>, SymbolExportLevel)> {\n+                               -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]> {\n         // The metadata symbol name is special. It should not show up in\n         // downstream crates.\n         let metadata_symbol_name = SymbolName::new(&metadata_symbol_name(self.tcx));\n \n-        self.lazy_seq(exported_symbols\n+        self.lazy(exported_symbols\n             .iter()\n             .filter(|&&(ref exported_symbol, _)| {\n                 match *exported_symbol {\n@@ -1618,10 +1617,10 @@ impl EncodeContext<'tcx> {\n             .cloned())\n     }\n \n-    fn encode_dylib_dependency_formats(&mut self) -> LazySeq<Option<LinkagePreference>> {\n+    fn encode_dylib_dependency_formats(&mut self) -> Lazy<[Option<LinkagePreference>]> {\n         match self.tcx.sess.dependency_formats.borrow().get(&config::CrateType::Dylib) {\n             Some(arr) => {\n-                self.lazy_seq(arr.iter().map(|slot| {\n+                self.lazy(arr.iter().map(|slot| {\n                     match *slot {\n                         Linkage::NotLinked |\n                         Linkage::IncludedFromDylib => None,\n@@ -1631,7 +1630,7 @@ impl EncodeContext<'tcx> {\n                     }\n                 }))\n             }\n-            None => LazySeq::empty(),\n+            None => Lazy::empty(),\n         }\n     }\n \n@@ -1647,9 +1646,9 @@ impl EncodeContext<'tcx> {\n                 let data = FnData {\n                     constness: hir::Constness::NotConst,\n                     arg_names: self.encode_fn_arg_names(names),\n-                    sig: self.lazy(&tcx.fn_sig(def_id)),\n+                    sig: self.lazy(tcx.fn_sig(def_id)),\n                 };\n-                EntryKind::ForeignFn(self.lazy(&data))\n+                EntryKind::ForeignFn(self.lazy(data))\n             }\n             hir::ForeignItemKind::Static(_, hir::MutMutable) => EntryKind::ForeignMutStatic,\n             hir::ForeignItemKind::Static(_, hir::MutImmutable) => EntryKind::ForeignImmStatic,\n@@ -1658,18 +1657,18 @@ impl EncodeContext<'tcx> {\n \n         Entry {\n             kind,\n-            visibility: self.lazy(&ty::Visibility::from_hir(&nitem.vis, nitem.hir_id, tcx)),\n-            span: self.lazy(&nitem.span),\n+            visibility: self.lazy(ty::Visibility::from_hir(&nitem.vis, nitem.hir_id, tcx)),\n+            span: self.lazy(nitem.span),\n             attributes: self.encode_attributes(&nitem.attrs),\n-            children: LazySeq::empty(),\n+            children: Lazy::empty(),\n             stability: self.encode_stability(def_id),\n             deprecation: self.encode_deprecation(def_id),\n \n             ty: Some(self.encode_item_type(def_id)),\n-            inherent_impls: LazySeq::empty(),\n+            inherent_impls: Lazy::empty(),\n             variances: match nitem.node {\n                 hir::ForeignItemKind::Fn(..) => self.encode_variances_of(def_id),\n-                _ => LazySeq::empty(),\n+                _ => Lazy::empty(),\n             },\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),"}, {"sha": "6f248f22cf2527502e3b60bbd39c9ea38788f810", "filename": "src/librustc_metadata/index.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_metadata%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_metadata%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -108,34 +108,34 @@ impl Index<'tcx> {\n         position.write_to_bytes_at(positions, array_index)\n     }\n \n-    pub fn write_index(&self, buf: &mut Encoder) -> LazySeq<Self> {\n+    pub fn write_index(&self, buf: &mut Encoder) -> Lazy<[Self]> {\n         let pos = buf.position();\n \n         // First we write the length of the lower range ...\n         buf.emit_raw_bytes(&(self.positions.len() as u32 / 4).to_le_bytes());\n         // ... then the values.\n         buf.emit_raw_bytes(&self.positions);\n-        LazySeq::with_position_and_length(pos as usize, self.positions.len() / 4 + 1)\n+        Lazy::from_position_and_meta(pos as usize, self.positions.len() / 4 + 1)\n     }\n }\n \n-impl LazySeq<Index<'tcx>> {\n+impl Lazy<[Index<'tcx>]> {\n     /// Given the metadata, extract out the offset of a particular\n     /// DefIndex (if any).\n     #[inline(never)]\n     pub fn lookup(&self, bytes: &[u8], def_index: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n         let bytes = &bytes[self.position..];\n         debug!(\"Index::lookup: index={:?} len={:?}\",\n                def_index,\n-               self.len);\n+               self.meta);\n \n         let position = u32::read_from_bytes_at(bytes, 1 + def_index.index());\n         if position == u32::MAX {\n             debug!(\"Index::lookup: position=u32::MAX\");\n             None\n         } else {\n             debug!(\"Index::lookup: position={:?}\", position);\n-            Some(Lazy::with_position(position as usize))\n+            Some(Lazy::from_position(position as usize))\n         }\n     }\n }"}, {"sha": "f37877b437e157582b7e5d0938ad91a1844d96e5", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 78, "deletions": 75, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -41,6 +41,33 @@ pub const METADATA_VERSION: u8 = 4;\n pub const METADATA_HEADER: &[u8; 12] =\n     &[0, 0, 0, 0, b'r', b'u', b's', b't', 0, 0, 0, METADATA_VERSION];\n \n+/// Additional metadata for a `Lazy<T>` where `T` may not be `Sized`,\n+/// e.g. for `Lazy<[T]>`, this is the length (count of `T` values).\n+pub trait LazyMeta {\n+    type Meta: Copy + 'static;\n+\n+    /// Returns the minimum encoded size.\n+    // FIXME(eddyb) Give better estimates for certain types.\n+    fn min_size(meta: Self::Meta) -> usize;\n+}\n+\n+impl<T> LazyMeta for T {\n+    type Meta = ();\n+\n+    fn min_size(_: ()) -> usize {\n+        assert_ne!(std::mem::size_of::<T>(), 0);\n+        1\n+    }\n+}\n+\n+impl<T> LazyMeta for [T] {\n+    type Meta = usize;\n+\n+    fn min_size(len: usize) -> usize {\n+        len * T::min_size(())\n+    }\n+}\n+\n /// A value of type T referred to by its absolute position\n /// in the metadata, and which can be decoded lazily.\n ///\n@@ -56,40 +83,8 @@ pub const METADATA_HEADER: &[u8; 12] =\n /// Distances start at 1, as 0-byte nodes are invalid.\n /// Also invalid are nodes being referred in a different\n /// order than they were encoded in.\n-#[must_use]\n-pub struct Lazy<T> {\n-    pub position: usize,\n-    _marker: PhantomData<T>,\n-}\n-\n-impl<T> Lazy<T> {\n-    pub fn with_position(position: usize) -> Lazy<T> {\n-        Lazy {\n-            position,\n-            _marker: PhantomData,\n-        }\n-    }\n-\n-    /// Returns the minimum encoded size of a value of type `T`.\n-    // FIXME(eddyb) Give better estimates for certain types.\n-    pub fn min_size() -> usize {\n-        1\n-    }\n-}\n-\n-impl<T> Copy for Lazy<T> {}\n-impl<T> Clone for Lazy<T> {\n-    fn clone(&self) -> Self {\n-        *self\n-    }\n-}\n-\n-impl<T> rustc_serialize::UseSpecializedEncodable for Lazy<T> {}\n-impl<T> rustc_serialize::UseSpecializedDecodable for Lazy<T> {}\n-\n-/// A sequence of type T referred to by its absolute position\n-/// in the metadata and length, and which can be decoded lazily.\n-/// The sequence is a single node for the purposes of `Lazy`.\n+///\n+/// # Sequences (`Lazy<[T]>`)\n ///\n /// Unlike `Lazy<Vec<T>>`, the length is encoded next to the\n /// position, not at the position, which means that the length\n@@ -100,54 +95,62 @@ impl<T> rustc_serialize::UseSpecializedDecodable for Lazy<T> {}\n /// the minimal distance the length of the sequence, i.e.\n /// it's assumed there's no 0-byte element in the sequence.\n #[must_use]\n-pub struct LazySeq<T> {\n-    pub len: usize,\n+// FIXME(#59875) the `Meta` parameter only exists to dodge\n+// invariance wrt `T` (coming from the `meta: T::Meta` field).\n+pub struct Lazy<T, Meta = <T as LazyMeta>::Meta>\n+    where T: ?Sized + LazyMeta<Meta = Meta>,\n+          Meta: 'static + Copy,\n+{\n     pub position: usize,\n+    pub meta: Meta,\n     _marker: PhantomData<T>,\n }\n \n-impl<T> LazySeq<T> {\n-    pub fn empty() -> LazySeq<T> {\n-        LazySeq::with_position_and_length(0, 0)\n-    }\n-\n-    pub fn with_position_and_length(position: usize, len: usize) -> LazySeq<T> {\n-        LazySeq {\n-            len,\n+impl<T: ?Sized + LazyMeta> Lazy<T> {\n+    pub fn from_position_and_meta(position: usize, meta: T::Meta) -> Lazy<T> {\n+        Lazy {\n             position,\n+            meta,\n             _marker: PhantomData,\n         }\n     }\n+}\n+\n+impl<T> Lazy<T> {\n+    pub fn from_position(position: usize) -> Lazy<T> {\n+        Lazy::from_position_and_meta(position, ())\n+    }\n+}\n \n-    /// Returns the minimum encoded size of `length` values of type `T`.\n-    pub fn min_size(length: usize) -> usize {\n-        length\n+impl<T> Lazy<[T]> {\n+    pub fn empty() -> Lazy<[T]> {\n+        Lazy::from_position_and_meta(0, 0)\n     }\n }\n \n-impl<T> Copy for LazySeq<T> {}\n-impl<T> Clone for LazySeq<T> {\n+impl<T: ?Sized + LazyMeta> Copy for Lazy<T> {}\n+impl<T: ?Sized + LazyMeta> Clone for Lazy<T> {\n     fn clone(&self) -> Self {\n         *self\n     }\n }\n \n-impl<T> rustc_serialize::UseSpecializedEncodable for LazySeq<T> {}\n-impl<T> rustc_serialize::UseSpecializedDecodable for LazySeq<T> {}\n+impl<T: ?Sized + LazyMeta> rustc_serialize::UseSpecializedEncodable for Lazy<T> {}\n+impl<T: ?Sized + LazyMeta> rustc_serialize::UseSpecializedDecodable for Lazy<T> {}\n \n-/// Encoding / decoding state for `Lazy` and `LazySeq`.\n+/// Encoding / decoding state for `Lazy`.\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum LazyState {\n     /// Outside of a metadata node.\n     NoNode,\n \n-    /// Inside a metadata node, and before any `Lazy` or `LazySeq`.\n+    /// Inside a metadata node, and before any `Lazy`.\n     /// The position is that of the node itself.\n     NodeStart(usize),\n \n-    /// Inside a metadata node, with a previous `Lazy` or `LazySeq`.\n+    /// Inside a metadata node, with a previous `Lazy`.\n     /// The position is a conservative estimate of where that\n-    /// previous `Lazy` / `LazySeq` would end (see their comments).\n+    /// previous `Lazy` would end (see their comments).\n     Previous(usize),\n }\n \n@@ -167,24 +170,24 @@ pub struct CrateRoot<'tcx> {\n     pub proc_macro_decls_static: Option<DefIndex>,\n     pub proc_macro_stability: Option<attr::Stability>,\n \n-    pub crate_deps: LazySeq<CrateDep>,\n-    pub dylib_dependency_formats: LazySeq<Option<LinkagePreference>>,\n-    pub lib_features: LazySeq<(Symbol, Option<Symbol>)>,\n-    pub lang_items: LazySeq<(DefIndex, usize)>,\n-    pub lang_items_missing: LazySeq<lang_items::LangItem>,\n-    pub native_libraries: LazySeq<NativeLibrary>,\n-    pub foreign_modules: LazySeq<ForeignModule>,\n-    pub source_map: LazySeq<syntax_pos::SourceFile>,\n+    pub crate_deps: Lazy<[CrateDep]>,\n+    pub dylib_dependency_formats: Lazy<[Option<LinkagePreference>]>,\n+    pub lib_features: Lazy<[(Symbol, Option<Symbol>)]>,\n+    pub lang_items: Lazy<[(DefIndex, usize)]>,\n+    pub lang_items_missing: Lazy<[lang_items::LangItem]>,\n+    pub native_libraries: Lazy<[NativeLibrary]>,\n+    pub foreign_modules: Lazy<[ForeignModule]>,\n+    pub source_map: Lazy<[syntax_pos::SourceFile]>,\n     pub def_path_table: Lazy<hir::map::definitions::DefPathTable>,\n-    pub impls: LazySeq<TraitImpls>,\n-    pub exported_symbols: LazySeq<(ExportedSymbol<'tcx>, SymbolExportLevel)>,\n-    pub interpret_alloc_index: LazySeq<u32>,\n+    pub impls: Lazy<[TraitImpls]>,\n+    pub exported_symbols: Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]>,\n+    pub interpret_alloc_index: Lazy<[u32]>,\n \n-    pub entries_index: LazySeq<index::Index<'tcx>>,\n+    pub entries_index: Lazy<[index::Index<'tcx>]>,\n \n     /// The DefIndex's of any proc macros delcared by\n     /// this crate\n-    pub proc_macro_data: Option<LazySeq<DefIndex>>,\n+    pub proc_macro_data: Option<Lazy<[DefIndex]>>,\n \n     pub compiler_builtins: bool,\n     pub needs_allocator: bool,\n@@ -207,22 +210,22 @@ pub struct CrateDep {\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct TraitImpls {\n     pub trait_id: (u32, DefIndex),\n-    pub impls: LazySeq<DefIndex>,\n+    pub impls: Lazy<[DefIndex]>,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct Entry<'tcx> {\n     pub kind: EntryKind<'tcx>,\n     pub visibility: Lazy<ty::Visibility>,\n     pub span: Lazy<Span>,\n-    pub attributes: LazySeq<ast::Attribute>,\n-    pub children: LazySeq<DefIndex>,\n+    pub attributes: Lazy<[ast::Attribute]>,\n+    pub children: Lazy<[DefIndex]>,\n     pub stability: Option<Lazy<attr::Stability>>,\n     pub deprecation: Option<Lazy<attr::Deprecation>>,\n \n     pub ty: Option<Lazy<Ty<'tcx>>>,\n-    pub inherent_impls: LazySeq<DefIndex>,\n-    pub variances: LazySeq<ty::Variance>,\n+    pub inherent_impls: Lazy<[DefIndex]>,\n+    pub variances: Lazy<[ty::Variance]>,\n     pub generics: Option<Lazy<ty::Generics>>,\n     pub predicates: Option<Lazy<ty::GenericPredicates<'tcx>>>,\n     pub predicates_defined_on: Option<Lazy<ty::GenericPredicates<'tcx>>>,\n@@ -278,7 +281,7 @@ pub struct RenderedConst(pub String);\n \n #[derive(RustcEncodable, RustcDecodable)]\n pub struct ModData {\n-    pub reexports: LazySeq<def::Export<hir::HirId>>,\n+    pub reexports: Lazy<[def::Export<hir::HirId>]>,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n@@ -290,7 +293,7 @@ pub struct MacroDef {\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct FnData<'tcx> {\n     pub constness: hir::Constness,\n-    pub arg_names: LazySeq<ast::Name>,\n+    pub arg_names: Lazy<[ast::Name]>,\n     pub sig: Lazy<ty::PolyFnSig<'tcx>>,\n }\n "}, {"sha": "9c7ac83e82e9712d10de1bc31b0930a5788cebc7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -4197,8 +4197,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// A possible error is to forget to add `.await` when using futures:\n     ///\n     /// ```\n-    /// #![feature(async_await)]\n-    ///\n     /// async fn make_u32() -> u32 {\n     ///     22\n     /// }"}, {"sha": "b52183d4b1b56de2e6aaec4ea4d2ddc93e218560", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -4751,7 +4751,6 @@ E0733: r##\"\n Recursion in an `async fn` requires boxing. For example, this will not compile:\n \n ```edition2018,compile_fail,E0733\n-#![feature(async_await)]\n async fn foo(n: usize) {\n     if n > 0 {\n         foo(n - 1).await;\n@@ -4763,12 +4762,11 @@ To achieve async recursion, the `async fn` needs to be desugared\n such that the `Future` is explicit in the return type:\n \n ```edition2018,compile_fail,E0720\n-# #![feature(async_await)]\n use std::future::Future;\n-fn foo_desugered(n: usize) -> impl Future<Output = ()> {\n+fn foo_desugared(n: usize) -> impl Future<Output = ()> {\n     async move {\n         if n > 0 {\n-            foo_desugered(n - 1).await;\n+            foo_desugared(n - 1).await;\n         }\n     }\n }\n@@ -4777,7 +4775,6 @@ fn foo_desugered(n: usize) -> impl Future<Output = ()> {\n Finally, the future is wrapped in a pinned box:\n \n ```edition2018\n-# #![feature(async_await)]\n use std::future::Future;\n use std::pin::Pin;\n fn foo_recursive(n: usize) -> Pin<Box<dyn Future<Output = ()>>> {"}, {"sha": "85a9dea09ed0d7500433340a5352a1bbc0cd1dcf", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -984,7 +984,6 @@ mod where_keyword { }\n \n // 2018 Edition keywords\n \n-#[unstable(feature = \"async_await\", issue = \"50547\")]\n #[doc(keyword = \"async\")]\n //\n /// Return a [`Future`] instead of blocking the current thread.\n@@ -995,7 +994,6 @@ mod where_keyword { }\n /// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod async_keyword { }\n \n-#[unstable(feature = \"async_await\", issue = \"50547\")]\n #[doc(keyword = \"await\")]\n //\n /// Suspend execution until the result of a [`Future`] is ready."}, {"sha": "bce0b07db1c233b3f84bd207eb78dadf83bbc05c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -461,9 +461,6 @@ declare_features! (\n     // Allows using `#[doc(keyword = \"...\")]`.\n     (active, doc_keyword, \"1.28.0\", Some(51315), None),\n \n-    // Allows async and await syntax.\n-    (active, async_await, \"1.28.0\", Some(50547), None),\n-\n     // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n     (active, const_transmute, \"1.29.0\", Some(53605), None),\n \n@@ -857,6 +854,8 @@ declare_features! (\n     (accepted, repr_align_enum, \"1.37.0\", Some(57996), None),\n     // Allows `const _: TYPE = VALUE`.\n     (accepted, underscore_const_names, \"1.37.0\", Some(54912), None),\n+    // Allows free and inherent `async fn`s, `async` blocks, and `<expr>.await` expressions.\n+    (accepted, async_await, \"1.38.0\", Some(50547), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features\n@@ -2100,12 +2099,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                     \"labels on blocks are unstable\");\n                 }\n             }\n-            ast::ExprKind::Async(..) => {\n-                gate_feature_post!(&self, async_await, e.span, \"async blocks are unstable\");\n-            }\n-            ast::ExprKind::Await(_) => {\n-                gate_feature_post!(&self, async_await, e.span, \"async/await is unstable\");\n-            }\n             _ => {}\n         }\n         visit::walk_expr(self, e)\n@@ -2154,11 +2147,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 span: Span,\n                 _node_id: NodeId) {\n         if let Some(header) = fn_kind.header() {\n-            // Check for const fn and async fn declarations.\n-            if header.asyncness.node.is_async() {\n-                gate_feature_post!(&self, async_await, span, \"async fn is unstable\");\n-            }\n-\n             // Stability of const fn methods are covered in\n             // `visit_trait_item` and `visit_impl_item` below; this is\n             // because default methods don't pass through this point.\n@@ -2198,9 +2186,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 if block.is_none() {\n                     self.check_abi(sig.header.abi, ti.span);\n                 }\n-                if sig.header.asyncness.node.is_async() {\n-                    gate_feature_post!(&self, async_await, ti.span, \"async fn is unstable\");\n-                }\n                 if sig.decl.c_variadic {\n                     gate_feature_post!(&self, c_variadic, ti.span,\n                                        \"C-variadic functions are unstable\");"}, {"sha": "7aadc8a095498a56fbe19d2e1f1b2d07ec5fb9bf", "filename": "src/test/codegen/issue-45222.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-45222.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -5,7 +5,6 @@\n \n // verify that LLVM recognizes a loop involving 0..=n and will const-fold it.\n \n-//------------------------------------------------------------------------------\n // Example from original issue #45222\n \n fn foo2(n: u64) -> u64 {\n@@ -25,7 +24,6 @@ pub fn check_foo2() -> u64 {\n     foo2(100000)\n }\n \n-//------------------------------------------------------------------------------\n // Simplified example of #45222\n \n fn triangle_inc(n: u64) -> u64 {\n@@ -43,7 +41,6 @@ pub fn check_triangle_inc() -> u64 {\n     triangle_inc(100000)\n }\n \n-//------------------------------------------------------------------------------\n // Demo in #48012\n \n fn foo3r(n: u64) -> u64 {"}, {"sha": "50d3657d417f38cc1a9549a429fb95501a72a3d5", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -18,7 +18,7 @@ fn callee1(_x: u32, _y: i64) {}\n fn callee2(_x: u32, _y: i64) {}\n \n \n-// Change Callee (Function) ----------------------------------------------------\n+// Change Callee (Function)\n #[cfg(cfail1)]\n pub fn change_callee_function() {\n     callee1(1, 2)\n@@ -33,7 +33,7 @@ pub fn change_callee_function() {\n \n \n \n-// Change Argument (Function) --------------------------------------------------\n+// Change Argument (Function)\n #[cfg(cfail1)]\n pub fn change_argument_function() {\n     callee1(1, 2)\n@@ -48,7 +48,7 @@ pub fn change_argument_function() {\n \n \n \n-// Change Callee Indirectly (Function) -----------------------------------------\n+// Change Callee Indirectly (Function)\n mod change_callee_indirectly_function {\n     #[cfg(cfail1)]\n     use super::callee1 as callee;\n@@ -73,7 +73,7 @@ impl Struct {\n     fn method2(&self, _x: char, _y: bool) {}\n }\n \n-// Change Callee (Method) ------------------------------------------------------\n+// Change Callee (Method)\n #[cfg(cfail1)]\n pub fn change_callee_method() {\n     let s = Struct;\n@@ -90,7 +90,7 @@ pub fn change_callee_method() {\n \n \n \n-// Change Argument (Method) ----------------------------------------------------\n+// Change Argument (Method)\n #[cfg(cfail1)]\n pub fn change_argument_method() {\n     let s = Struct;\n@@ -107,7 +107,7 @@ pub fn change_argument_method() {\n \n \n \n-// Change Callee (Method, UFCS) ------------------------------------------------\n+// Change Callee (Method, UFCS)\n #[cfg(cfail1)]\n pub fn change_ufcs_callee_method() {\n     let s = Struct;\n@@ -124,7 +124,7 @@ pub fn change_ufcs_callee_method() {\n \n \n \n-// Change Argument (Method, UFCS) ----------------------------------------------\n+// Change Argument (Method, UFCS)\n #[cfg(cfail1)]\n pub fn change_argument_method_ufcs() {\n     let s = Struct;\n@@ -141,7 +141,7 @@ pub fn change_argument_method_ufcs() {\n \n \n \n-// Change To UFCS --------------------------------------------------------------\n+// Change To UFCS\n #[cfg(cfail1)]\n pub fn change_to_ufcs() {\n     let s = Struct;\n@@ -164,7 +164,7 @@ impl Struct2 {\n     fn method1(&self, _x: char, _y: bool) {}\n }\n \n-// Change UFCS Callee Indirectly -----------------------------------------------\n+// Change UFCS Callee Indirectly\n pub mod change_ufcs_callee_indirectly {\n     #[cfg(cfail1)]\n     use super::Struct as Struct;"}, {"sha": "08693560d0b6e7f6d4d2e06b60390785bbe6880a", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -14,7 +14,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Change closure body ---------------------------------------------------------\n+// Change closure body\n #[cfg(cfail1)]\n pub fn change_closure_body() {\n     let _ = || 1u32;\n@@ -29,7 +29,7 @@ pub fn change_closure_body() {\n \n \n \n-// Add parameter ---------------------------------------------------------------\n+// Add parameter\n #[cfg(cfail1)]\n pub fn add_parameter() {\n     let x = 0u32;\n@@ -46,7 +46,7 @@ pub fn add_parameter() {\n \n \n \n-// Change parameter pattern ----------------------------------------------------\n+// Change parameter pattern\n #[cfg(cfail1)]\n pub fn change_parameter_pattern() {\n     let _ = |x: (u32,)| x;\n@@ -61,7 +61,7 @@ pub fn change_parameter_pattern() {\n \n \n \n-// Add `move` to closure -------------------------------------------------------\n+// Add `move` to closure\n #[cfg(cfail1)]\n pub fn add_move() {\n     let _ = || 1;\n@@ -76,7 +76,7 @@ pub fn add_move() {\n \n \n \n-// Add type ascription to parameter --------------------------------------------\n+// Add type ascription to parameter\n #[cfg(cfail1)]\n pub fn add_type_ascription_to_parameter() {\n     let closure = |x| x + 1u32;\n@@ -93,7 +93,7 @@ pub fn add_type_ascription_to_parameter() {\n \n \n \n-// Change parameter type -------------------------------------------------------\n+// Change parameter type\n #[cfg(cfail1)]\n pub fn change_parameter_type() {\n     let closure = |x: u32| (x as u64) + 1;"}, {"sha": "3d2eed89636e856243bc6e2171d8b1a8cf2b2f89", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -14,7 +14,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Change const visibility ---------------------------------------------------\n+// Change const visibility\n #[cfg(cfail1)]\n const CONST_VISIBILITY: u8 = 0;\n \n@@ -24,7 +24,7 @@ const CONST_VISIBILITY: u8 = 0;\n pub const CONST_VISIBILITY: u8 = 0;\n \n \n-// Change type from i32 to u32 ------------------------------------------------\n+// Change type from i32 to u32\n #[cfg(cfail1)]\n const CONST_CHANGE_TYPE_1: i32 = 0;\n \n@@ -34,7 +34,7 @@ const CONST_CHANGE_TYPE_1: i32 = 0;\n const CONST_CHANGE_TYPE_1: u32 = 0;\n \n \n-// Change type from Option<u32> to Option<u64> --------------------------------\n+// Change type from Option<u32> to Option<u64>\n #[cfg(cfail1)]\n const CONST_CHANGE_TYPE_2: Option<u32> = None;\n \n@@ -44,7 +44,7 @@ const CONST_CHANGE_TYPE_2: Option<u32> = None;\n const CONST_CHANGE_TYPE_2: Option<u64> = None;\n \n \n-// Change value between simple literals ---------------------------------------\n+// Change value between simple literals\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_1: i16 = {\n@@ -56,7 +56,7 @@ const CONST_CHANGE_VALUE_1: i16 = {\n };\n \n \n-// Change value between expressions -------------------------------------------\n+// Change value between expressions\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_2: i16 = {\n@@ -88,7 +88,7 @@ const CONST_CHANGE_VALUE_4: i16 = {\n };\n \n \n-// Change type indirectly -----------------------------------------------------\n+// Change type indirectly\n struct ReferencedType1;\n struct ReferencedType2;\n "}, {"sha": "4b73f1371f872607ce706e1666bd1d7444d8d235", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -14,7 +14,7 @@\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n-// Change condition (if) -------------------------------------------------------\n+// Change condition (if)\n #[cfg(cfail1)]\n pub fn change_condition(x: bool) -> u32 {\n     if x {\n@@ -35,7 +35,7 @@ pub fn change_condition(x: bool) -> u32 {\n     return 0\n }\n \n-// Change then branch (if) -----------------------------------------------------\n+// Change then branch (if)\n #[cfg(cfail1)]\n pub fn change_then_branch(x: bool) -> u32 {\n     if x {\n@@ -58,7 +58,7 @@ pub fn change_then_branch(x: bool) -> u32 {\n \n \n \n-// Change else branch (if) -----------------------------------------------------\n+// Change else branch (if)\n #[cfg(cfail1)]\n pub fn change_else_branch(x: bool) -> u32 {\n     if x {\n@@ -81,7 +81,7 @@ pub fn change_else_branch(x: bool) -> u32 {\n \n \n \n-// Add else branch (if) --------------------------------------------------------\n+// Add else branch (if)\n #[cfg(cfail1)]\n pub fn add_else_branch(x: bool) -> u32 {\n     let mut ret = 1;\n@@ -109,7 +109,7 @@ pub fn add_else_branch(x: bool) -> u32 {\n \n \n \n-// Change condition (if let) ---------------------------------------------------\n+// Change condition (if let)\n #[cfg(cfail1)]\n pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n     if let Some(_x) = x {\n@@ -132,7 +132,7 @@ pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n \n \n \n-// Change then branch (if let) -------------------------------------------------\n+// Change then branch (if let)\n #[cfg(cfail1)]\n pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n@@ -155,7 +155,7 @@ pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n \n \n \n-// Change else branch (if let) -------------------------------------------------\n+// Change else branch (if let)\n #[cfg(cfail1)]\n pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n@@ -178,7 +178,7 @@ pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n \n \n \n-// Add else branch (if let) ----------------------------------------------------\n+// Add else branch (if let)\n #[cfg(cfail1)]\n pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n     let mut ret = 1;"}, {"sha": "08cf19d7760282b9739fbd60ff38a9039f66c60f", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -13,7 +13,7 @@\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n-// Change simple index ---------------------------------------------------------\n+// Change simple index\n #[cfg(cfail1)]\n fn change_simple_index(slice: &[u32]) -> u32 {\n     slice[3]\n@@ -30,7 +30,7 @@ fn change_simple_index(slice: &[u32]) -> u32 {\n \n \n \n-// Change lower bound ----------------------------------------------------------\n+// Change lower bound\n #[cfg(cfail1)]\n fn change_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..5]\n@@ -47,7 +47,7 @@ fn change_lower_bound(slice: &[u32]) -> &[u32] {\n \n \n \n-// Change upper bound ----------------------------------------------------------\n+// Change upper bound\n #[cfg(cfail1)]\n fn change_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..5]\n@@ -64,7 +64,7 @@ fn change_upper_bound(slice: &[u32]) -> &[u32] {\n \n \n \n-// Add lower bound -------------------------------------------------------------\n+// Add lower bound\n #[cfg(cfail1)]\n fn add_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[..4]\n@@ -81,7 +81,7 @@ fn add_lower_bound(slice: &[u32]) -> &[u32] {\n \n \n \n-// Add upper bound -------------------------------------------------------------\n+// Add upper bound\n #[cfg(cfail1)]\n fn add_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..]\n@@ -98,7 +98,7 @@ fn add_upper_bound(slice: &[u32]) -> &[u32] {\n \n \n \n-// Change mutability -----------------------------------------------------------\n+// Change mutability\n #[cfg(cfail1)]\n fn change_mutability(slice: &mut [u32]) -> u32 {\n     (&mut slice[3..5])[0]\n@@ -115,7 +115,7 @@ fn change_mutability(slice: &mut [u32]) -> u32 {\n \n \n \n-// Exclusive to inclusive range ------------------------------------------------\n+// Exclusive to inclusive range\n #[cfg(cfail1)]\n fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n     &slice[3..7]"}, {"sha": "c50ee73d71438c4c16b095ff2fbb80b1362d4220", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -16,7 +16,7 @@\n \n \n \n-// Change template -------------------------------------------------------------\n+// Change template\n #[cfg(cfail1)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_template(a: i32) -> i32 {\n@@ -51,7 +51,7 @@ pub fn change_template(a: i32) -> i32 {\n \n \n \n-// Change output -------------------------------------------------------------\n+// Change output\n #[cfg(cfail1)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_output(a: i32) -> i32 {\n@@ -88,7 +88,7 @@ pub fn change_output(a: i32) -> i32 {\n \n \n \n-// Change input -------------------------------------------------------------\n+// Change input\n #[cfg(cfail1)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n@@ -123,7 +123,7 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n \n \n \n-// Change input constraint -----------------------------------------------------\n+// Change input constraint\n #[cfg(cfail1)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n@@ -158,7 +158,7 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n \n \n \n-// Change clobber --------------------------------------------------------------\n+// Change clobber\n #[cfg(cfail1)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_clobber(_a: i32) -> i32 {\n@@ -193,7 +193,7 @@ pub fn change_clobber(_a: i32) -> i32 {\n \n \n \n-// Change options --------------------------------------------------------------\n+// Change options\n #[cfg(cfail1)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_options(_a: i32) -> i32 {"}, {"sha": "a2222db4c59ad37a57c59ba3a4bad2525a67cee5", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -14,7 +14,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Change loop body ------------------------------------------------------------\n+// Change loop body\n #[cfg(cfail1)]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -37,7 +37,7 @@ pub fn change_loop_body() {\n \n \n \n-// Add break -------------------------------------------------------------------\n+// Add break\n #[cfg(cfail1)]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -59,7 +59,7 @@ pub fn add_break() {\n \n \n \n-// Add loop label --------------------------------------------------------------\n+// Add loop label\n #[cfg(cfail1)]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -82,7 +82,7 @@ pub fn add_loop_label() {\n \n \n \n-// Add loop label to break -----------------------------------------------------\n+// Add loop label to break\n #[cfg(cfail1)]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -105,7 +105,7 @@ pub fn add_loop_label_to_break() {\n \n \n \n-// Change break label ----------------------------------------------------------\n+// Change break label\n #[cfg(cfail1)]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -132,7 +132,7 @@ pub fn change_break_label() {\n \n \n \n-// Add loop label to continue --------------------------------------------------\n+// Add loop label to continue\n #[cfg(cfail1)]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -155,7 +155,7 @@ pub fn add_loop_label_to_continue() {\n \n \n \n-// Change continue label ----------------------------------------------------------\n+// Change continue label\n #[cfg(cfail1)]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -182,7 +182,7 @@ pub fn change_continue_label() {\n \n \n \n-// Change continue to break ----------------------------------------------------\n+// Change continue to break\n #[cfg(cfail1)]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "70b0a5ab78cd7dcfa8b52e80013a0555570c5970", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -17,7 +17,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Indexing expression ---------------------------------------------------------\n+// Indexing expression\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn indexing(slice: &[u8]) -> u8 {\n@@ -32,7 +32,7 @@ pub fn indexing(slice: &[u8]) -> u8 {\n }\n \n \n-// Arithmetic overflow plus ----------------------------------------------------\n+// Arithmetic overflow plus\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n@@ -47,7 +47,7 @@ pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n }\n \n \n-// Arithmetic overflow minus ----------------------------------------------------\n+// Arithmetic overflow minus\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n@@ -62,7 +62,7 @@ pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n }\n \n \n-// Arithmetic overflow mult ----------------------------------------------------\n+// Arithmetic overflow mult\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n@@ -77,7 +77,7 @@ pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n }\n \n \n-// Arithmetic overflow negation ------------------------------------------------\n+// Arithmetic overflow negation\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n@@ -92,7 +92,7 @@ pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n }\n \n \n-// Division by zero ------------------------------------------------------------\n+// Division by zero\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn division_by_zero(val: i32) -> i32 {\n@@ -106,7 +106,7 @@ pub fn division_by_zero(val: i32) -> i32 {\n     }\n }\n \n-// Division by zero ------------------------------------------------------------\n+// Division by zero\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn mod_by_zero(val: i32) -> i32 {\n@@ -121,7 +121,7 @@ pub fn mod_by_zero(val: i32) -> i32 {\n }\n \n \n-// shift left ------------------------------------------------------------------\n+// shift left\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_left(val: i32, shift: usize) -> i32 {\n@@ -136,7 +136,7 @@ pub fn shift_left(val: i32, shift: usize) -> i32 {\n }\n \n \n-// shift right ------------------------------------------------------------------\n+// shift right\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_right(val: i32, shift: usize) -> i32 {"}, {"sha": "d70ebb08b715a74e71820476443772c6a1000515", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -16,7 +16,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Change static visibility ---------------------------------------------------\n+// Change static visibility\n #[cfg(cfail1)]\n static STATIC_VISIBILITY: u8 = 0;\n \n@@ -26,7 +26,7 @@ static STATIC_VISIBILITY: u8 = 0;\n pub static STATIC_VISIBILITY: u8 = 0;\n \n \n-// Change static mutability ---------------------------------------------------\n+// Change static mutability\n #[cfg(cfail1)]\n static STATIC_MUTABILITY: u8 = 0;\n \n@@ -36,7 +36,7 @@ static STATIC_MUTABILITY: u8 = 0;\n static mut STATIC_MUTABILITY: u8 = 0;\n \n \n-// Add linkage attribute ------------------------------------------------------\n+// Add linkage attribute\n #[cfg(cfail1)]\n static STATIC_LINKAGE: u8 = 0;\n \n@@ -47,7 +47,7 @@ static STATIC_LINKAGE: u8 = 0;\n static STATIC_LINKAGE: u8 = 0;\n \n \n-// Add no_mangle attribute ----------------------------------------------------\n+// Add no_mangle attribute\n #[cfg(cfail1)]\n static STATIC_NO_MANGLE: u8 = 0;\n \n@@ -58,7 +58,7 @@ static STATIC_NO_MANGLE: u8 = 0;\n static STATIC_NO_MANGLE: u8 = 0;\n \n \n-// Add thread_local attribute -------------------------------------------------\n+// Add thread_local attribute\n #[cfg(cfail1)]\n static STATIC_THREAD_LOCAL: u8 = 0;\n \n@@ -69,7 +69,7 @@ static STATIC_THREAD_LOCAL: u8 = 0;\n static STATIC_THREAD_LOCAL: u8 = 0;\n \n \n-// Change type from i16 to u64 ------------------------------------------------\n+// Change type from i16 to u64\n #[cfg(cfail1)]\n static STATIC_CHANGE_TYPE_1: i16 = 0;\n \n@@ -79,7 +79,7 @@ static STATIC_CHANGE_TYPE_1: i16 = 0;\n static STATIC_CHANGE_TYPE_1: u64 = 0;\n \n \n-// Change type from Option<i8> to Option<u16> ---------------------------------\n+// Change type from Option<i8> to Option<u16>\n #[cfg(cfail1)]\n static STATIC_CHANGE_TYPE_2: Option<i8> = None;\n \n@@ -89,7 +89,7 @@ static STATIC_CHANGE_TYPE_2: Option<i8> = None;\n static STATIC_CHANGE_TYPE_2: Option<u16> = None;\n \n \n-// Change value between simple literals ---------------------------------------\n+// Change value between simple literals\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_1: i16 = {\n@@ -101,7 +101,7 @@ static STATIC_CHANGE_VALUE_1: i16 = {\n };\n \n \n-// Change value between expressions -------------------------------------------\n+// Change value between expressions\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_2: i16 = {\n@@ -133,7 +133,7 @@ static STATIC_CHANGE_VALUE_4: i16 = {\n };\n \n \n-// Change type indirectly -----------------------------------------------------\n+// Change type indirectly\n struct ReferencedType1;\n struct ReferencedType2;\n "}, {"sha": "456d5e74751ae82b6ba1d7482533a5ff6116681a", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -20,7 +20,7 @@ pub struct RegularStruct {\n     z: i16,\n }\n \n-// Change field value (regular struct) -----------------------------------------\n+// Change field value (regular struct)\n #[cfg(cfail1)]\n pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n@@ -43,7 +43,7 @@ pub fn change_field_value_regular_struct() -> RegularStruct {\n \n \n \n-// Change field order (regular struct) -----------------------------------------\n+// Change field order (regular struct)\n #[cfg(cfail1)]\n pub fn change_field_order_regular_struct() -> RegularStruct {\n     RegularStruct {\n@@ -66,7 +66,7 @@ pub fn change_field_order_regular_struct() -> RegularStruct {\n \n \n \n-// Add field (regular struct) --------------------------------------------------\n+// Add field (regular struct)\n #[cfg(cfail1)]\n pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -100,7 +100,7 @@ pub fn add_field_regular_struct() -> RegularStruct {\n \n \n \n-// Change field label (regular struct) -----------------------------------------\n+// Change field label (regular struct)\n #[cfg(cfail1)]\n pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -141,7 +141,7 @@ pub struct RegularStruct2 {\n     z: i8,\n }\n \n-// Change constructor path (regular struct) ------------------------------------\n+// Change constructor path (regular struct)\n #[cfg(cfail1)]\n pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct {\n@@ -164,7 +164,7 @@ pub fn change_constructor_path_regular_struct() {\n \n \n \n-// Change constructor path indirectly (regular struct) -------------------------\n+// Change constructor path indirectly (regular struct)\n pub mod change_constructor_path_indirectly_regular_struct {\n     #[cfg(cfail1)]\n     use super::RegularStruct as Struct;\n@@ -189,7 +189,7 @@ pub mod change_constructor_path_indirectly_regular_struct {\n \n pub struct TupleStruct(i32, i64, i16);\n \n-// Change field value (tuple struct) -------------------------------------------\n+// Change field value (tuple struct)\n #[cfg(cfail1)]\n pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 2)\n@@ -206,7 +206,7 @@ pub fn change_field_value_tuple_struct() -> TupleStruct {\n \n pub struct TupleStruct2(u16, u16, u16);\n \n-// Change constructor path (tuple struct) --------------------------------------\n+// Change constructor path (tuple struct)\n #[cfg(cfail1)]\n pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct(0, 1, 2);\n@@ -221,7 +221,7 @@ pub fn change_constructor_path_tuple_struct() {\n \n \n \n-// Change constructor path indirectly (tuple struct) ---------------------------\n+// Change constructor path indirectly (tuple struct)\n pub mod change_constructor_path_indirectly_tuple_struct {\n     #[cfg(cfail1)]\n     use super::TupleStruct as Struct;"}, {"sha": "81ff99533fc916aca0fd10fc2ce546765d4b13c0", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 60, "deletions": 61, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -21,7 +21,7 @@\n #![feature(intrinsics)]\n \n \n-// Change trait visibility --------------------------------------------------------\n+// Change trait visibility\n #[cfg(cfail1)]\n trait TraitVisibility { }\n \n@@ -32,7 +32,7 @@ pub trait TraitVisibility { }\n \n \n \n-// Change trait unsafety ----------------------------------------------------------\n+// Change trait unsafety\n #[cfg(cfail1)]\n trait TraitUnsafety { }\n \n@@ -43,7 +43,7 @@ unsafe trait TraitUnsafety { }\n \n \n \n-// Add method ---------------------------------------------------------------------\n+// Add method\n #[cfg(cfail1)]\n trait TraitAddMethod {\n }\n@@ -57,7 +57,7 @@ pub trait TraitAddMethod {\n \n \n \n-// Change name of method ----------------------------------------------------------\n+// Change name of method\n #[cfg(cfail1)]\n trait TraitChangeMethodName {\n     fn method();\n@@ -72,7 +72,7 @@ trait TraitChangeMethodName {\n \n \n \n-// Add return type to method ------------------------------------------------------\n+// Add return type to method\n #[cfg(cfail1)]\n trait TraitAddReturnType {\n     fn method();\n@@ -89,7 +89,7 @@ trait TraitAddReturnType {\n \n \n \n-// Change return type of method ---------------------------------------------------\n+// Change return type of method\n #[cfg(cfail1)]\n trait TraitChangeReturnType {\n     fn method() -> u32;\n@@ -106,7 +106,7 @@ trait TraitChangeReturnType {\n \n \n \n-// Add parameter to method --------------------------------------------------------\n+// Add parameter to method\n #[cfg(cfail1)]\n trait TraitAddParameterToMethod {\n     fn method();\n@@ -123,7 +123,7 @@ trait TraitAddParameterToMethod {\n \n \n \n-// Change name of method parameter ------------------------------------------------\n+// Change name of method parameter\n #[cfg(cfail1)]\n trait TraitChangeMethodParameterName {\n     fn method(a: u32);\n@@ -148,7 +148,7 @@ trait TraitChangeMethodParameterName {\n \n \n \n-// Change type of method parameter (i32 => i64) -----------------------------------\n+// Change type of method parameter (i32 => i64)\n #[cfg(cfail1)]\n trait TraitChangeMethodParameterType {\n     fn method(a: i32);\n@@ -165,7 +165,7 @@ trait TraitChangeMethodParameterType {\n \n \n \n-// Change type of method parameter (&i32 => &mut i32) -----------------------------\n+// Change type of method parameter (&i32 => &mut i32)\n #[cfg(cfail1)]\n trait TraitChangeMethodParameterTypeRef {\n     fn method(a: &i32);\n@@ -182,7 +182,7 @@ trait TraitChangeMethodParameterTypeRef {\n \n \n \n-// Change order of method parameters ----------------------------------------------\n+// Change order of method parameters\n #[cfg(cfail1)]\n trait TraitChangeMethodParametersOrder {\n     fn method(a: i32, b: i64);\n@@ -199,7 +199,7 @@ trait TraitChangeMethodParametersOrder {\n \n \n \n-// Add default implementation to method -------------------------------------------\n+// Add default implementation to method\n #[cfg(cfail1)]\n trait TraitAddMethodAutoImplementation {\n     fn method();\n@@ -216,7 +216,7 @@ trait TraitAddMethodAutoImplementation {\n \n \n \n-// Change order of methods --------------------------------------------------------\n+// Change order of methods\n #[cfg(cfail1)]\n trait TraitChangeOrderOfMethods {\n     fn method0();\n@@ -233,7 +233,7 @@ trait TraitChangeOrderOfMethods {\n \n \n \n-// Change mode of self parameter --------------------------------------------------\n+// Change mode of self parameter\n #[cfg(cfail1)]\n trait TraitChangeModeSelfRefToMut {\n     fn method(&self);\n@@ -284,7 +284,7 @@ trait TraitChangeModeSelfOwnToRef {\n \n \n \n-// Add unsafe modifier to method --------------------------------------------------\n+// Add unsafe modifier to method\n #[cfg(cfail1)]\n trait TraitAddUnsafeModifier {\n     fn method();\n@@ -301,7 +301,7 @@ trait TraitAddUnsafeModifier {\n \n \n \n-// Add extern modifier to method --------------------------------------------------\n+// Add extern modifier to method\n #[cfg(cfail1)]\n trait TraitAddExternModifier {\n     fn method();\n@@ -318,7 +318,7 @@ trait TraitAddExternModifier {\n \n \n \n-// Change extern \"C\" to extern \"rust-intrinsic\" -----------------------------------\n+// Change extern \"C\" to extern \"rust-intrinsic\"\n #[cfg(cfail1)]\n trait TraitChangeExternCToRustIntrinsic {\n     extern \"C\" fn method();\n@@ -335,7 +335,7 @@ trait TraitChangeExternCToRustIntrinsic {\n \n \n \n-// Add type parameter to method ---------------------------------------------------\n+// Add type parameter to method\n #[cfg(cfail1)]\n trait TraitAddTypeParameterToMethod {\n     fn method();\n@@ -352,7 +352,7 @@ trait TraitAddTypeParameterToMethod {\n \n \n \n-// Add lifetime parameter to method -----------------------------------------------\n+// Add lifetime parameter to method\n #[cfg(cfail1)]\n trait TraitAddLifetimeParameterToMethod {\n     fn method();\n@@ -373,7 +373,7 @@ trait TraitAddLifetimeParameterToMethod {\n trait ReferencedTrait0 { }\n trait ReferencedTrait1 { }\n \n-// Add trait bound to method type parameter ---------------------------------------\n+// Add trait bound to method type parameter\n #[cfg(cfail1)]\n trait TraitAddTraitBoundToMethodTypeParameter {\n     fn method<T>();\n@@ -390,7 +390,7 @@ trait TraitAddTraitBoundToMethodTypeParameter {\n \n \n \n-// Add builtin bound to method type parameter -------------------------------------\n+// Add builtin bound to method type parameter\n #[cfg(cfail1)]\n trait TraitAddBuiltinBoundToMethodTypeParameter {\n     fn method<T>();\n@@ -407,7 +407,7 @@ trait TraitAddBuiltinBoundToMethodTypeParameter {\n \n \n \n-// Add lifetime bound to method lifetime parameter ------------------------------------\n+// Add lifetime bound to method lifetime parameter\n #[cfg(cfail1)]\n trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n     fn method<'a, 'b>(a: &'a u32, b: &'b u32);\n@@ -424,7 +424,7 @@ trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n \n \n \n-// Add second trait bound to method type parameter --------------------------------\n+// Add second trait bound to method type parameter\n #[cfg(cfail1)]\n trait TraitAddSecondTraitBoundToMethodTypeParameter {\n     fn method<T: ReferencedTrait0>();\n@@ -441,7 +441,7 @@ trait TraitAddSecondTraitBoundToMethodTypeParameter {\n \n \n \n-// Add second builtin bound to method type parameter ------------------------------\n+// Add second builtin bound to method type parameter\n #[cfg(cfail1)]\n trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n     fn method<T: Sized>();\n@@ -458,7 +458,7 @@ trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n \n \n \n-// Add second lifetime bound to method lifetime parameter -----------------------------\n+// Add second lifetime bound to method lifetime parameter\n #[cfg(cfail1)]\n trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n     fn method<'a, 'b, 'c: 'a>(a: &'a u32, b: &'b u32, c: &'c u32);\n@@ -475,7 +475,7 @@ trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n \n \n \n-// Add associated type ------------------------------------------------------------\n+// Add associated type\n #[cfg(cfail1)]\n trait TraitAddAssociatedType {\n \n@@ -495,7 +495,7 @@ trait TraitAddAssociatedType {\n \n \n \n-// Add trait bound to associated type ---------------------------------------------\n+// Add trait bound to associated type\n #[cfg(cfail1)]\n trait TraitAddTraitBoundToAssociatedType {\n     type Associated;\n@@ -519,7 +519,7 @@ trait TraitAddTraitBoundToAssociatedType {\n \n \n \n-// Add lifetime bound to associated type ------------------------------------------\n+// Add lifetime bound to associated type\n #[cfg(cfail1)]\n trait TraitAddLifetimeBoundToAssociatedType<'a> {\n     type Associated;\n@@ -540,7 +540,7 @@ trait TraitAddLifetimeBoundToAssociatedType<'a> {\n \n \n \n-// Add default to associated type -------------------------------------------------\n+// Add default to associated type\n #[cfg(cfail1)]\n trait TraitAddDefaultToAssociatedType {\n     type Associated;\n@@ -561,7 +561,7 @@ trait TraitAddDefaultToAssociatedType {\n \n \n \n-// Add associated constant --------------------------------------------------------\n+// Add associated constant\n #[cfg(cfail1)]\n trait TraitAddAssociatedConstant {\n     fn method();\n@@ -578,7 +578,7 @@ trait TraitAddAssociatedConstant {\n \n \n \n-// Add initializer to associated constant -----------------------------------------\n+// Add initializer to associated constant\n #[cfg(cfail1)]\n trait TraitAddInitializerToAssociatedConstant {\n     const Value: u32;\n@@ -601,7 +601,7 @@ trait TraitAddInitializerToAssociatedConstant {\n \n \n \n-// Change type of associated constant ---------------------------------------------\n+// Change type of associated constant\n #[cfg(cfail1)]\n trait TraitChangeTypeOfAssociatedConstant {\n     const Value: u32;\n@@ -624,7 +624,7 @@ trait TraitChangeTypeOfAssociatedConstant {\n \n \n \n-// Add super trait ----------------------------------------------------------------\n+// Add super trait\n #[cfg(cfail1)]\n trait TraitAddSuperTrait { }\n \n@@ -635,7 +635,7 @@ trait TraitAddSuperTrait : ReferencedTrait0 { }\n \n \n \n-// Add builtin bound (Send or Copy) -----------------------------------------------\n+// Add builtin bound (Send or Copy)\n #[cfg(cfail1)]\n trait TraitAddBuiltiBound { }\n \n@@ -646,7 +646,7 @@ trait TraitAddBuiltiBound : Send { }\n \n \n \n-// Add 'static lifetime bound to trait --------------------------------------------\n+// Add 'static lifetime bound to trait\n #[cfg(cfail1)]\n trait TraitAddStaticLifetimeBound { }\n \n@@ -657,7 +657,7 @@ trait TraitAddStaticLifetimeBound : 'static { }\n \n \n \n-// Add super trait as second bound ------------------------------------------------\n+// Add super trait as second bound\n #[cfg(cfail1)]\n trait TraitAddTraitAsSecondBound : ReferencedTrait0 { }\n \n@@ -676,7 +676,7 @@ trait TraitAddTraitAsSecondBoundFromBuiltin : Send + ReferencedTrait0 { }\n \n \n \n-// Add builtin bound as second bound ----------------------------------------------\n+// Add builtin bound as second bound\n #[cfg(cfail1)]\n trait TraitAddBuiltinBoundAsSecondBound : ReferencedTrait0 { }\n \n@@ -695,7 +695,7 @@ trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin: Send + Copy { }\n \n \n \n-// Add 'static bounds as second bound ---------------------------------------------\n+// Add 'static bounds as second bound\n #[cfg(cfail1)]\n trait TraitAddStaticBoundAsSecondBound : ReferencedTrait0 { }\n \n@@ -714,7 +714,7 @@ trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send + 'static { }\n \n \n \n-// Add type parameter to trait ----------------------------------------------------\n+// Add type parameter to trait\n #[cfg(cfail1)]\n trait TraitAddTypeParameterToTrait { }\n \n@@ -725,7 +725,7 @@ trait TraitAddTypeParameterToTrait<T> { }\n \n \n \n-// Add lifetime parameter to trait ------------------------------------------------\n+// Add lifetime parameter to trait\n #[cfg(cfail1)]\n trait TraitAddLifetimeParameterToTrait { }\n \n@@ -736,7 +736,7 @@ trait TraitAddLifetimeParameterToTrait<'a> { }\n \n \n \n-// Add trait bound to type parameter of trait -------------------------------------\n+// Add trait bound to type parameter of trait\n #[cfg(cfail1)]\n trait TraitAddTraitBoundToTypeParameterOfTrait<T> { }\n \n@@ -747,7 +747,7 @@ trait TraitAddTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n \n \n \n-// Add lifetime bound to type parameter of trait ----------------------------------\n+// Add lifetime bound to type parameter of trait\n #[cfg(cfail1)]\n trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T> { }\n \n@@ -758,7 +758,7 @@ trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T: 'a> { }\n \n \n \n-// Add lifetime bound to lifetime parameter of trait ------------------------------\n+// Add lifetime bound to lifetime parameter of trait\n #[cfg(cfail1)]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a, 'b> { }\n \n@@ -769,7 +769,7 @@ trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b> { }\n \n \n \n-// Add builtin bound to type parameter of trait -----------------------------------\n+// Add builtin bound to type parameter of trait\n #[cfg(cfail1)]\n trait TraitAddBuiltinBoundToTypeParameterOfTrait<T> { }\n \n@@ -780,7 +780,7 @@ trait TraitAddBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n \n \n \n-// Add second type parameter to trait ---------------------------------------------\n+// Add second type parameter to trait\n #[cfg(cfail1)]\n trait TraitAddSecondTypeParameterToTrait<T> { }\n \n@@ -791,7 +791,7 @@ trait TraitAddSecondTypeParameterToTrait<T, S> { }\n \n \n \n-// Add second lifetime parameter to trait -----------------------------------------\n+// Add second lifetime parameter to trait\n #[cfg(cfail1)]\n trait TraitAddSecondLifetimeParameterToTrait<'a> { }\n \n@@ -802,7 +802,7 @@ trait TraitAddSecondLifetimeParameterToTrait<'a, 'b> { }\n \n \n \n-// Add second trait bound to type parameter of trait ------------------------------\n+// Add second trait bound to type parameter of trait\n #[cfg(cfail1)]\n trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n \n@@ -813,7 +813,7 @@ trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0 + Refer\n \n \n \n-// Add second lifetime bound to type parameter of trait ---------------------------\n+// Add second lifetime bound to type parameter of trait\n #[cfg(cfail1)]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a> { }\n \n@@ -824,7 +824,7 @@ trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a + 'b> { }\n \n \n \n-// Add second lifetime bound to lifetime parameter of trait------------------------\n+// Add second lifetime bound to lifetime parameter of trait\n #[cfg(cfail1)]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b, 'c> { }\n \n@@ -835,7 +835,7 @@ trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b + 'c, 'b, 'c>\n \n \n \n-// Add second builtin bound to type parameter of trait ----------------------------\n+// Add second builtin bound to type parameter of trait\n #[cfg(cfail1)]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n \n@@ -846,13 +846,12 @@ trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send + Sync> { }\n \n \n \n-// --------------------------------------------------------------------------------\n struct ReferenceType0 {}\n struct ReferenceType1 {}\n \n \n \n-// Add trait bound to type parameter of trait in where clause----------------------\n+// Add trait bound to type parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> { }\n \n@@ -863,7 +862,7 @@ trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0\n \n \n \n-// Add lifetime bound to type parameter of trait in where clause-------------------\n+// Add lifetime bound to type parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> { }\n \n@@ -874,7 +873,7 @@ trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> where T: 'a { }\n \n \n \n-// Add lifetime bound to lifetime parameter of trait in where clause---------------\n+// Add lifetime bound to lifetime parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> { }\n \n@@ -885,7 +884,7 @@ trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> where 'a: 'b\n \n \n \n-// Add builtin bound to type parameter of trait in where clause--------------------\n+// Add builtin bound to type parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> { }\n \n@@ -896,7 +895,7 @@ trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n \n \n \n-// Add second trait bound to type parameter of trait in where clause---------------\n+// Add second trait bound to type parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0 { }\n \n@@ -908,7 +907,7 @@ trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T>\n \n \n \n-// Add second lifetime bound to type parameter of trait in where clause------------\n+// Add second lifetime bound to type parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T: 'a { }\n \n@@ -919,7 +918,7 @@ trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T:\n \n \n \n-// Add second lifetime bound to lifetime parameter of trait in where clause--------\n+// Add second lifetime bound to lifetime parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> where 'a: 'b { }\n \n@@ -930,7 +929,7 @@ trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> whe\n \n \n \n-// Add second builtin bound to type parameter of trait in where clause-------------\n+// Add second builtin bound to type parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n \n@@ -940,7 +939,7 @@ trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send + Sync { }\n \n \n-// Change return type of method indirectly by modifying a use statement------------\n+// Change return type of method indirectly by modifying a use statement\n mod change_return_type_of_method_indirectly_use {\n     #[cfg(cfail1)]\n     use super::ReferenceType0 as ReturnType;\n@@ -958,7 +957,7 @@ mod change_return_type_of_method_indirectly_use {\n \n \n \n-// Change type of method parameter indirectly by modifying a use statement---------\n+// Change type of method parameter indirectly by modifying a use statement\n mod change_method_parameter_type_indirectly_by_use {\n     #[cfg(cfail1)]\n     use super::ReferenceType0 as ArgType;"}, {"sha": "da3c957741fb22dd0939c0b464c22d6e199cf597", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -14,7 +14,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Change loop body ------------------------------------------------------------\n+// Change loop body\n #[cfg(cfail1)]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -37,7 +37,7 @@ pub fn change_loop_body() {\n \n \n \n-// Change loop body ------------------------------------------------------------\n+// Change loop body\n #[cfg(cfail1)]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -60,7 +60,7 @@ pub fn change_loop_condition() {\n \n \n \n-// Add break -------------------------------------------------------------------\n+// Add break\n #[cfg(cfail1)]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -82,7 +82,7 @@ pub fn add_break() {\n \n \n \n-// Add loop label --------------------------------------------------------------\n+// Add loop label\n #[cfg(cfail1)]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -105,7 +105,7 @@ pub fn add_loop_label() {\n \n \n \n-// Add loop label to break -----------------------------------------------------\n+// Add loop label to break\n #[cfg(cfail1)]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -128,7 +128,7 @@ pub fn add_loop_label_to_break() {\n \n \n \n-// Change break label ----------------------------------------------------------\n+// Change break label\n #[cfg(cfail1)]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -155,7 +155,7 @@ pub fn change_break_label() {\n \n \n \n-// Add loop label to continue --------------------------------------------------\n+// Add loop label to continue\n #[cfg(cfail1)]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -178,7 +178,7 @@ pub fn add_loop_label_to_continue() {\n \n \n \n-// Change continue label ----------------------------------------------------------\n+// Change continue label\n #[cfg(cfail1)]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -205,7 +205,7 @@ pub fn change_continue_label() {\n \n \n \n-// Change continue to break ----------------------------------------------------\n+// Change continue to break\n #[cfg(cfail1)]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "3be42e7a4ee7a793042606b53a21bd2ac5b290cb", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -14,7 +14,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Change loop body ------------------------------------------------------------\n+// Change loop body\n #[cfg(cfail1)]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -37,7 +37,7 @@ pub fn change_loop_body() {\n \n \n \n-// Change loop body ------------------------------------------------------------\n+// Change loop body\n #[cfg(cfail1)]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -60,7 +60,7 @@ pub fn change_loop_condition() {\n \n \n \n-// Add break -------------------------------------------------------------------\n+// Add break\n #[cfg(cfail1)]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -82,7 +82,7 @@ pub fn add_break() {\n \n \n \n-// Add loop label --------------------------------------------------------------\n+// Add loop label\n #[cfg(cfail1)]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -105,7 +105,7 @@ pub fn add_loop_label() {\n \n \n \n-// Add loop label to break -----------------------------------------------------\n+// Add loop label to break\n #[cfg(cfail1)]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -128,7 +128,7 @@ pub fn add_loop_label_to_break() {\n \n \n \n-// Change break label ----------------------------------------------------------\n+// Change break label\n #[cfg(cfail1)]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -155,7 +155,7 @@ pub fn change_break_label() {\n \n \n \n-// Add loop label to continue --------------------------------------------------\n+// Add loop label to continue\n #[cfg(cfail1)]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -178,7 +178,7 @@ pub fn add_loop_label_to_continue() {\n \n \n \n-// Change continue label ----------------------------------------------------------\n+// Change continue label\n #[cfg(cfail1)]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -205,7 +205,7 @@ pub fn change_continue_label() {\n \n \n \n-// Change continue to break ----------------------------------------------------\n+// Change continue to break\n #[cfg(cfail1)]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "5f9708a39722a6532521e8df3cd95d9d29fbcb13", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n // @has async_fn/fn.foo.html '//pre[@class=\"rust fn\"]' 'pub async fn foo() -> Option<Foo>'\n pub async fn foo() -> Option<Foo> {\n     None"}, {"sha": "2ba61388c9e3b046dbcdf01f7c5dd3c86febcd1f", "filename": "src/test/rustdoc/async-move-doctest.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Frustdoc%2Fasync-move-doctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Frustdoc%2Fasync-move-doctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-move-doctest.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,11 @@\n // compile-flags:--test\n // edition:2018\n \n-// prior to setting the default edition for the doctest pre-parser, this doctest would fail due to\n-// a fatal parsing error\n+// Prior to setting the default edition for the doctest pre-parser,\n+// this doctest would fail due to a fatal parsing error.\n // see https://github.com/rust-lang/rust/issues/59313\n \n //! ```\n-//! #![feature(async_await)]\n-//!\n //! fn foo() {\n //!     drop(async move {});\n //! }"}, {"sha": "ddbc2be651d904c23240902fa9591e93222e1831", "filename": "src/test/rustdoc/edition-flag.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Frustdoc%2Fedition-flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Frustdoc%2Fedition-flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fedition-flag.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,10 +1,7 @@\n // compile-flags:--test -Z unstable-options\n // edition:2018\n \n-#![feature(async_await)]\n-\n /// ```rust\n-/// #![feature(async_await)]\n /// fn main() {\n ///     let _ = async { };\n /// }"}, {"sha": "0e42f48b8351e90ff7e081ff3a85abbf22d8f901", "filename": "src/test/ui/async-await/argument-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,7 +3,6 @@\n \n #![allow(unused_variables)]\n #![deny(unused_mut)]\n-#![feature(async_await)]\n \n type A = Vec<u32>;\n "}, {"sha": "bf8bf0bcce0fef4f5ed4a31b2040a46ea0bc8b22", "filename": "src/test/ui/async-await/async-await.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,8 +3,6 @@\n // edition:2018\n // aux-build:arc_wake.rs\n \n-#![feature(async_await)]\n-\n extern crate arc_wake;\n \n use std::pin::Pin;"}, {"sha": "90d75118f8e42ddabc17d9183a73bb32a0259ebd", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -6,8 +6,6 @@\n // edition:2018\n // ignore-tidy-linelength\n \n-#![feature(async_await)]\n-\n fn main() {}\n \n use core::future::Future;"}, {"sha": "bc42a46ae1021bb0163d7975b34f47dde528502c", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,17 +1,17 @@\n error[E0267]: `break` inside of an async block\n-  --> $DIR/async-block-control-flow-static-semantics.rs:35:9\n+  --> $DIR/async-block-control-flow-static-semantics.rs:33:9\n    |\n LL |         break 0u8;\n    |         ^^^^^^^^^ cannot break inside of an async block\n \n error[E0267]: `break` inside of an async block\n-  --> $DIR/async-block-control-flow-static-semantics.rs:42:13\n+  --> $DIR/async-block-control-flow-static-semantics.rs:40:13\n    |\n LL |             break 0u8;\n    |             ^^^^^^^^^ cannot break inside of an async block\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:15:43\n+  --> $DIR/async-block-control-flow-static-semantics.rs:13:43\n    |\n LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    ---------------------------------      ^^ expected u8, found ()\n@@ -22,7 +22,7 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n               found type `()`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:20:39\n+  --> $DIR/async-block-control-flow-static-semantics.rs:18:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected u8, found ()\n@@ -32,7 +32,7 @@ LL |     let _: &dyn Future<Output = ()> = &block;\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == ()`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:29:39\n+  --> $DIR/async-block-control-flow-static-semantics.rs:27:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n    |                                       ^^^^^^ expected u8, found ()\n@@ -42,7 +42,7 @@ LL |     let _: &dyn Future<Output = ()> = &block;\n    = note: required for the cast to the object type `dyn std::future::Future<Output = ()>`\n \n error[E0271]: type mismatch resolving `<impl std::future::Future as std::future::Future>::Output == u8`\n-  --> $DIR/async-block-control-flow-static-semantics.rs:24:55\n+  --> $DIR/async-block-control-flow-static-semantics.rs:22:55\n    |\n LL | async fn return_targets_async_block_not_async_fn() -> u8 {\n    |                                                       ^^ expected (), found u8\n@@ -52,7 +52,7 @@ LL | async fn return_targets_async_block_not_async_fn() -> u8 {\n    = note: the return type of a function must have a statically known size\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:50:44\n+  --> $DIR/async-block-control-flow-static-semantics.rs:48:44\n    |\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n@@ -63,7 +63,7 @@ LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n               found type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:59:50\n+  --> $DIR/async-block-control-flow-static-semantics.rs:57:50\n    |\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()"}, {"sha": "d82fbcdc5505b638fb54cb6a1ab370e959882653", "filename": "src/test/ui/async-await/async-closure-matches-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure-matches-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure-matches-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure-matches-expr.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,7 @@\n // build-pass\n // edition:2018\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n macro_rules! match_expr {\n     ($x:expr) => {}"}, {"sha": "9a24bd8c9543953251f5bf54c02cab1e9bda9fcd", "filename": "src/test/ui/async-await/async-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-closure.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,7 +3,7 @@\n // edition:2018\n // aux-build:arc_wake.rs\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n extern crate arc_wake;\n "}, {"sha": "dec3ac0f685547b5d66877babf9c4d3de1d1fade", "filename": "src/test/ui/async-await/async-error-span.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n-#![feature(async_await)]\n \n-// Regression test for issue #62382\n+// Regression test for issue #62382.\n \n use std::future::Future;\n "}, {"sha": "47441f5e4efcefc2d7c6f352c772dce285777581", "filename": "src/test/ui/async-await/async-error-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-error-span.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,11 +1,11 @@\n error[E0698]: type inside `async` object must be known in this context\n-  --> $DIR/async-error-span.rs:13:9\n+  --> $DIR/async-error-span.rs:12:9\n    |\n LL |     let a;\n    |         ^ cannot infer type\n    |\n note: the type is part of the `async` object because of this `await`\n-  --> $DIR/async-error-span.rs:14:5\n+  --> $DIR/async-error-span.rs:13:5\n    |\n LL |     get_future().await;\n    |     ^^^^^^^^^^^^^^^^^^"}, {"sha": "1c369fd7415db7be6063a69615d62ee8ff96b6c7", "filename": "src/test/ui/async-await/async-fn-elided-impl-lifetime-parameter.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-elided-impl-lifetime-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-elided-impl-lifetime-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-elided-impl-lifetime-parameter.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -6,8 +6,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct Foo<'a>(&'a u8);\n \n impl Foo<'_> {"}, {"sha": "1f1bf4250eadf7547e2149786d2920e1fde58048", "filename": "src/test/ui/async-await/async-fn-nonsend.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n use std::{\n     cell::RefCell,\n     fmt::Debug,"}, {"sha": "6b4fff2dc6844bbe60054690591c0b1a974c0067", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,43 +1,43 @@\n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:52:5\n+  --> $DIR/async-fn-nonsend.rs:50:5\n    |\n LL |     assert_send(local_dropped_before_await());\n    |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `impl std::fmt::Debug`\n    = note: required because it appears within the type `{impl std::fmt::Debug, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:23:39: 28:2 {impl std::fmt::Debug, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:23:39: 28:2 {impl std::fmt::Debug, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:21:39: 26:2 {impl std::fmt::Debug, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:49:1\n+  --> $DIR/async-fn-nonsend.rs:47:1\n    |\n LL | fn assert_send(_: impl Send) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `std::rc::Rc<()>` cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:54:5\n+  --> $DIR/async-fn-nonsend.rs:52:5\n    |\n LL |     assert_send(non_send_temporary_in_match());\n    |     ^^^^^^^^^^^ `std::rc::Rc<()>` cannot be sent between threads safely\n    |\n    = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<()>`\n    = note: required because it appears within the type `impl std::fmt::Debug`\n    = note: required because it appears within the type `{fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:30:40: 39:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:30:40: 39:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:28:40: 37:2 {fn(impl std::fmt::Debug) -> std::option::Option<impl std::fmt::Debug> {std::option::Option::<impl std::fmt::Debug>::Some}, fn() -> impl std::fmt::Debug {non_send}, impl std::fmt::Debug, std::option::Option<impl std::fmt::Debug>, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:49:1\n+  --> $DIR/async-fn-nonsend.rs:47:1\n    |\n LL | fn assert_send(_: impl Send) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `dyn std::fmt::Write` cannot be sent between threads safely\n-  --> $DIR/async-fn-nonsend.rs:56:5\n+  --> $DIR/async-fn-nonsend.rs:54:5\n    |\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ `dyn std::fmt::Write` cannot be sent between threads safely\n@@ -47,18 +47,18 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because it appears within the type `std::fmt::Formatter<'_>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n    = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:49:1\n+  --> $DIR/async-fn-nonsend.rs:47:1\n    |\n LL | fn assert_send(_: impl Send) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n-  --> $DIR/async-fn-nonsend.rs:56:5\n+  --> $DIR/async-fn-nonsend.rs:54:5\n    |\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n@@ -72,12 +72,12 @@ LL |     assert_send(non_sync_with_method_call());\n    = note: required because it appears within the type `std::fmt::Formatter<'_>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&mut std::fmt::Formatter<'_>`\n    = note: required because it appears within the type `for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n-   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:41:38: 47:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n+   = note: required because it appears within the type `[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]`\n+   = note: required because it appears within the type `std::future::GenFuture<[static generator@$DIR/async-fn-nonsend.rs:39:38: 45:2 for<'r, 's> {&'r mut std::fmt::Formatter<'s>, bool, impl std::future::Future, ()}]>`\n    = note: required because it appears within the type `impl std::future::Future`\n    = note: required because it appears within the type `impl std::future::Future`\n note: required by `assert_send`\n-  --> $DIR/async-fn-nonsend.rs:49:1\n+  --> $DIR/async-fn-nonsend.rs:47:1\n    |\n LL | fn assert_send(_: impl Send) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3f1f51c20ca0c3ce20d54462018398c918a2b393", "filename": "src/test/ui/async-await/async-fn-path-elision.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-#![allow(dead_code)]\n-\n struct HasLifetime<'a>(&'a bool);\n \n async fn error(lt: HasLifetime) { //~ ERROR implicit elided lifetime not allowed here"}, {"sha": "9694742200ef07d658e0a5606156f0f04f53a4ba", "filename": "src/test/ui/async-await/async-fn-path-elision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-path-elision.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0726]: implicit elided lifetime not allowed here\n-  --> $DIR/async-fn-path-elision.rs:8:20\n+  --> $DIR/async-fn-path-elision.rs:5:20\n    |\n LL | async fn error(lt: HasLifetime) {\n    |                    ^^^^^^^^^^^- help: indicate the anonymous lifetime: `<'_>`"}, {"sha": "35d9cb15540d1f753d8af69098a7bf641b92cf3c", "filename": "src/test/ui/async-await/async-fn-send-uses-nonsend.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-send-uses-nonsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-send-uses-nonsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-send-uses-nonsend.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n use std::{\n     cell::RefCell,\n     fmt::Debug,"}, {"sha": "3ffcbb58595eb75807f772be549d11f4cdda2726", "filename": "src/test/ui/async-await/async-fn-size-moved-locals.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size-moved-locals.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -12,8 +12,6 @@\n \n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::future::Future;\n use std::pin::Pin;\n use std::task::{Context, Poll};"}, {"sha": "b5c94ecb716902bc14b2bb4efc956ecc0fff5e21", "filename": "src/test/ui/async-await/async-fn-size.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-size.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n // aux-build:arc_wake.rs\n // edition:2018\n \n-#![feature(async_await)]\n-\n extern crate arc_wake;\n \n use std::pin::Pin;"}, {"sha": "299faa0587bd58d8be20d7015ec27dee2c00b110", "filename": "src/test/ui/async-await/async-matches-expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-matches-expr.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n macro_rules! match_expr {\n     ($x:expr) => {}\n }"}, {"sha": "ccc1b8553f07144c9af97dbe32db522130964579", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct S;\n \n impl S {"}, {"sha": "c95fe17348877a2627a5a6ee480d9af99071c515", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,29 +1,29 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:12:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:13:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:17:5\n    |\n LL |     S::f();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n+  --> $DIR/async-unsafe-fn-call-in-safe.rs:18:5\n    |\n LL |     f();\n    |     ^^^ call to unsafe function"}, {"sha": "0b2255266753d01f004cc93ddc60dec188369374", "filename": "src/test/ui/async-await/async-with-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-with-closure.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n trait MyClosure {\n     type Args;\n }"}, {"sha": "a3a20cb97e150d45e03d094342e7a6d70cdb3888", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,4 +1,3 @@\n-#![feature(async_await)]\n #![allow(non_camel_case_types)]\n #![deny(keyword_idents)]\n "}, {"sha": "f1a22cda51b2135af61fa189e5a9d9d2e7e07ec6", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,19 +1,19 @@\n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:6:13\n+  --> $DIR/2015-edition-error-various-positions.rs:5:13\n    |\n LL |     pub mod await {\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n note: lint level defined here\n-  --> $DIR/2015-edition-error-various-positions.rs:3:9\n+  --> $DIR/2015-edition-error-various-positions.rs:2:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:8:20\n+  --> $DIR/2015-edition-error-various-positions.rs:7:20\n    |\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -22,7 +22,7 @@ LL |         pub struct await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:12:16\n+  --> $DIR/2015-edition-error-various-positions.rs:11:16\n    |\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -31,7 +31,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:12:23\n+  --> $DIR/2015-edition-error-various-positions.rs:11:23\n    |\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -40,7 +40,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:17:14\n+  --> $DIR/2015-edition-error-various-positions.rs:16:14\n    |\n LL | struct Foo { await: () }\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -49,7 +49,7 @@ LL | struct Foo { await: () }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:21:15\n+  --> $DIR/2015-edition-error-various-positions.rs:20:15\n    |\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -58,7 +58,7 @@ LL | impl Foo { fn await() {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:25:14\n+  --> $DIR/2015-edition-error-various-positions.rs:24:14\n    |\n LL | macro_rules! await {\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -67,7 +67,7 @@ LL | macro_rules! await {\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:32:5\n+  --> $DIR/2015-edition-error-various-positions.rs:31:5\n    |\n LL |     await!();\n    |     ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -76,7 +76,7 @@ LL |     await!();\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:35:11\n+  --> $DIR/2015-edition-error-various-positions.rs:34:11\n    |\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -85,7 +85,7 @@ LL |     match await { await => {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-various-positions.rs:35:19\n+  --> $DIR/2015-edition-error-various-positions.rs:34:19\n    |\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`"}, {"sha": "5d85b0a243e0358858794fb439cf2f5e911e377e", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n \n #![allow(non_camel_case_types)]\n-#![feature(async_await)]\n \n mod outer_mod {\n     pub mod await { //~ ERROR expected identifier, found reserved keyword `await`"}, {"sha": "05f28d0a5b2267f6b680b1649a613778b73205cf", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error-in-non-macro-position.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error-in-non-macro-position.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:7:13\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:6:13\n    |\n LL |     pub mod await {\n    |             ^^^^^ expected identifier, found reserved keyword\n@@ -9,7 +9,7 @@ LL |     pub mod r#await {\n    |             ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:8:20\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:7:20\n    |\n LL |         pub struct await;\n    |                    ^^^^^ expected identifier, found reserved keyword\n@@ -19,7 +19,7 @@ LL |         pub struct r#await;\n    |                    ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:11:22\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:10:22\n    |\n LL | use self::outer_mod::await::await;\n    |                      ^^^^^ expected identifier, found reserved keyword\n@@ -29,7 +29,7 @@ LL | use self::outer_mod::r#await::await;\n    |                      ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:11:29\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:10:29\n    |\n LL | use self::outer_mod::await::await;\n    |                             ^^^^^ expected identifier, found reserved keyword\n@@ -39,7 +39,7 @@ LL | use self::outer_mod::await::r#await;\n    |                             ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:14:14\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:13:14\n    |\n LL | struct Foo { await: () }\n    |              ^^^^^ expected identifier, found reserved keyword\n@@ -49,7 +49,7 @@ LL | struct Foo { r#await: () }\n    |              ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:17:15\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:16:15\n    |\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ expected identifier, found reserved keyword\n@@ -59,7 +59,7 @@ LL | impl Foo { fn r#await() {} }\n    |               ^^^^^^^\n \n error: expected identifier, found reserved keyword `await`\n-  --> $DIR/2018-edition-error-in-non-macro-position.rs:20:14\n+  --> $DIR/2018-edition-error-in-non-macro-position.rs:19:14\n    |\n LL | macro_rules! await {\n    |              ^^^^^ expected identifier, found reserved keyword"}, {"sha": "22bcbb1064dd744266b16cd3db205f5bac75debc", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n async fn bar() -> Result<(), ()> {\n     Ok(())\n }"}, {"sha": "7caa9f26bc2f848ab341347a45419b24a15d6e7d", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,133 +1,133 @@\n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:10:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:8:13\n    |\n LL |     let _ = await bar();\n    |             ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:14:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:12:13\n    |\n LL |     let _ = await? bar();\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await?`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:18:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:16:13\n    |\n LL |     let _ = await bar()?;\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar()?.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:23:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:21:13\n    |\n LL |     let _ = await { bar() };\n    |             ^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ bar() }.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:27:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:25:13\n    |\n LL |     let _ = await(bar());\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `(bar()).await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:31:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:29:13\n    |\n LL |     let _ = await { bar() }?;\n    |             ^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ bar() }.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:35:14\n+  --> $DIR/incorrect-syntax-suggestions.rs:33:14\n    |\n LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:39:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:37:24\n    |\n LL |     let _ = bar().await();\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:43:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:41:24\n    |\n LL |     let _ = bar().await()?;\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:55:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:53:13\n    |\n LL |     let _ = await bar();\n    |             ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:60:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:58:13\n    |\n LL |     let _ = await? bar();\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await?`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:65:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:63:13\n    |\n LL |     let _ = await bar()?;\n    |             ^^^^^^^^^^^^ help: `await` is a postfix operation: `bar()?.await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:70:14\n+  --> $DIR/incorrect-syntax-suggestions.rs:68:14\n    |\n LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:75:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:73:24\n    |\n LL |     let _ = bar().await();\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:80:24\n+  --> $DIR/incorrect-syntax-suggestions.rs:78:24\n    |\n LL |     let _ = bar().await()?;\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:108:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:106:13\n    |\n LL |     let _ = await!(bar());\n    |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:112:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:110:13\n    |\n LL |     let _ = await!(bar())?;\n    |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:117:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:115:17\n    |\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:125:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:123:17\n    |\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n \n error: expected expression, found `=>`\n-  --> $DIR/incorrect-syntax-suggestions.rs:133:25\n+  --> $DIR/incorrect-syntax-suggestions.rs:131:25\n    |\n LL |     match await { await => () }\n    |                   ----- ^^ expected expression\n    |                   |\n    |                   while parsing this incorrect await expression\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:133:11\n+  --> $DIR/incorrect-syntax-suggestions.rs:131:11\n    |\n LL |     match await { await => () }\n    |           ^^^^^^^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ await => () }.await`\n \n error: expected one of `.`, `?`, `{`, or an operator, found `}`\n-  --> $DIR/incorrect-syntax-suggestions.rs:136:1\n+  --> $DIR/incorrect-syntax-suggestions.rs:134:1\n    |\n LL |     match await { await => () }\n    |     -----                      - expected one of `.`, `?`, `{`, or an operator here\n@@ -138,103 +138,103 @@ LL | }\n    | ^ unexpected token\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:55:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:53:13\n    |\n LL | fn foo9() -> Result<(), ()> {\n    |    ---- this is not `async`\n LL |     let _ = await bar();\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:60:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:58:13\n    |\n LL | fn foo10() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = await? bar();\n    |             ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:65:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:63:13\n    |\n LL | fn foo11() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = await bar()?;\n    |             ^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:70:14\n+  --> $DIR/incorrect-syntax-suggestions.rs:68:14\n    |\n LL | fn foo12() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:75:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:73:13\n    |\n LL | fn foo13() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await();\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:80:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:78:13\n    |\n LL | fn foo14() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await()?;\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:85:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:83:13\n    |\n LL | fn foo15() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await;\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:89:13\n+  --> $DIR/incorrect-syntax-suggestions.rs:87:13\n    |\n LL | fn foo16() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await?;\n    |             ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:94:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:92:17\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = bar().await?;\n    |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:101:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:99:17\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = bar().await?;\n    |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:117:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:115:17\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:125:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:123:17\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = await!(bar())?;\n    |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n-  --> $DIR/incorrect-syntax-suggestions.rs:18:19\n+  --> $DIR/incorrect-syntax-suggestions.rs:16:19\n    |\n LL |     let _ = await bar()?;\n    |                   ^^^^^^ the `?` operator cannot be applied to type `impl std::future::Future`"}, {"sha": "aa09d4bdf088362190f5dbf901b48896def452ab", "filename": "src/test/ui/async-await/await-unsize.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-unsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fawait-unsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-unsize.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,8 +3,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n async fn make_boxed_object() -> Box<dyn Send> {\n     Box::new(()) as _\n }"}, {"sha": "5d260682f1d8163ea34a9030e7ea041fcfc56fed", "filename": "src/test/ui/async-await/bound-normalization.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fbound-normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fbound-normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fbound-normalization.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n // See issue 60414\n \n trait Trait {"}, {"sha": "56f4cbbd190f8b9fbac993191d76251d053b4ff3", "filename": "src/test/ui/async-await/conditional-and-guaranteed-initialization.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fconditional-and-guaranteed-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fconditional-and-guaranteed-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fconditional-and-guaranteed-initialization.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n async fn conditional_and_guaranteed_initialization(x: usize) -> usize {\n     let y;\n     if x > 5 {"}, {"sha": "68341a24c4e5d396e3bc52ffb84c3e4ca733831e", "filename": "src/test/ui/async-await/dont-print-desugared-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,6 @@\n // Test that we don't show variables with from async fn desugaring\n \n // edition:2018\n-#![feature(async_await)]\n \n async fn async_fn(&ref mut s: &[i32]) {}\n //~^ ERROR cannot borrow data in a `&` reference as mutable [E0596]"}, {"sha": "2bf1e77f09b3fb1bf0edcdc46a76906944281533", "filename": "src/test/ui/async-await/dont-print-desugared-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-print-desugared-async.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/dont-print-desugared-async.rs:6:20\n+  --> $DIR/dont-print-desugared-async.rs:5:20\n    |\n LL | async fn async_fn(&ref mut s: &[i32]) {}\n    |                   -^^^^^^^^^"}, {"sha": "a8e5b38ec1dd8f3ce36692a903aed0372f435d00", "filename": "src/test/ui/async-await/dont-suggest-missing-await.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n \n // This test ensures we don't make the suggestion in bodies that aren't `async`.\n \n-#![feature(async_await)]\n-\n fn take_u32(x: u32) {}\n \n async fn make_u32() -> u32 {"}, {"sha": "c87e0bc221de7a8a47dac3ff816f0640d0e8441d", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/dont-suggest-missing-await.rs:16:18\n+  --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n LL |         take_u32(x)\n    |                  ^ expected u32, found opaque type"}, {"sha": "9817d377a7886f76edfc8ed05c247d8c5d724b5e", "filename": "src/test/ui/async-await/drop-order/drop-order-for-async-fn-parameters-by-ref-binding.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters-by-ref-binding.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,7 +3,6 @@\n // run-pass\n \n #![allow(unused_variables)]\n-#![feature(async_await)]\n \n // Test that the drop order for parameters in a fn and async fn matches up. Also test that\n // parameters (used or unused) are not dropped until the async fn completes execution."}, {"sha": "00072786a50a7524997dc8d5cd8f5e16d2e1af8e", "filename": "src/test/ui/async-await/drop-order/drop-order-for-async-fn-parameters.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-async-fn-parameters.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,7 +3,6 @@\n // run-pass\n \n #![allow(unused_variables)]\n-#![feature(async_await)]\n \n // Test that the drop order for parameters in a fn and async fn matches up. Also test that\n // parameters (used or unused) are not dropped until the async fn completes execution."}, {"sha": "5d020c9a52601cf8373fc48a7d9a905e7a7baa07", "filename": "src/test/ui/async-await/drop-order/drop-order-for-locals-when-cancelled.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-locals-when-cancelled.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,9 +2,7 @@\n // edition:2018\n // run-pass\n \n-#![allow(unused_variables)]\n #![deny(dead_code)]\n-#![feature(async_await)]\n \n // Test that the drop order for locals in a fn and async fn matches up.\n extern crate arc_wake;"}, {"sha": "79dedb1ba285e9796d4ca528d2a99629d4d5fc3c", "filename": "src/test/ui/async-await/drop-order/drop-order-locals-are-hidden.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,5 @@\n // edition:2018\n \n-#![allow(unused_variables)]\n-#![feature(async_await)]\n-\n async fn foobar_async(x: u32, (a, _, _c): (u32, u32, u32), _: u32, _y: u32) {\n     assert_eq!(__arg1, (1, 2, 3)); //~ ERROR cannot find value `__arg1` in this scope [E0425]\n     assert_eq!(__arg2, 4); //~ ERROR cannot find value `__arg2` in this scope [E0425]"}, {"sha": "aa04a613f47c1298318fbb9184620c0982fd449e", "filename": "src/test/ui/async-await/drop-order/drop-order-locals-are-hidden.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-locals-are-hidden.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,23 +1,23 @@\n error[E0425]: cannot find value `__arg1` in this scope\n-  --> $DIR/drop-order-locals-are-hidden.rs:7:16\n+  --> $DIR/drop-order-locals-are-hidden.rs:4:16\n    |\n LL |     assert_eq!(__arg1, (1, 2, 3));\n    |                ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `__arg2` in this scope\n-  --> $DIR/drop-order-locals-are-hidden.rs:8:16\n+  --> $DIR/drop-order-locals-are-hidden.rs:5:16\n    |\n LL |     assert_eq!(__arg2, 4);\n    |                ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `__arg0` in this scope\n-  --> $DIR/drop-order-locals-are-hidden.rs:12:16\n+  --> $DIR/drop-order-locals-are-hidden.rs:9:16\n    |\n LL |     assert_eq!(__arg0, 1);\n    |                ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `__arg1` in this scope\n-  --> $DIR/drop-order-locals-are-hidden.rs:13:16\n+  --> $DIR/drop-order-locals-are-hidden.rs:10:16\n    |\n LL |     assert_eq!(__arg1, 2);\n    |                ^^^^^^ not found in this scope"}, {"sha": "84fe79348c601e0654a67c13c98e4293ed5f140c", "filename": "src/test/ui/async-await/drop-order/drop-order-when-cancelled.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-when-cancelled.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,9 +2,6 @@\n // edition:2018\n // run-pass\n \n-#![allow(unused_variables)]\n-#![feature(async_await)]\n-\n // Test that the drop order for parameters in a fn and async fn matches up. Also test that\n // parameters (used or unused) are not dropped until the async fn is cancelled.\n // This file is mostly copy-pasted from drop-order-for-async-fn-parameters.rs"}, {"sha": "c85896150c29f430ef00bdae4b5ab933450bd647", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2015\n \n-#![feature(async_await)]\n-\n async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n \n fn baz() { async fn foo() {} } //~ ERROR `async fn` is not permitted in the 2015 edition"}, {"sha": "d3f88af09d13434ad7ca987432f2ac66f6d1ac6e", "filename": "src/test/ui/async-await/edition-deny-async-fns-2015.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fedition-deny-async-fns-2015.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,59 +1,59 @@\n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:5:1\n+  --> $DIR/edition-deny-async-fns-2015.rs:3:1\n    |\n LL | async fn foo() {}\n    | ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:7:12\n+  --> $DIR/edition-deny-async-fns-2015.rs:5:12\n    |\n LL | fn baz() { async fn foo() {} }\n    |            ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:10:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:8:5\n    |\n LL |     async fn bar() {}\n    |     ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:9:1\n+  --> $DIR/edition-deny-async-fns-2015.rs:7:1\n    |\n LL | async fn async_baz() {\n    | ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:16:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:14:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:38:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:36:9\n    |\n LL |         async fn bar() {}\n    |         ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:28:9\n+  --> $DIR/edition-deny-async-fns-2015.rs:26:9\n    |\n LL |         async fn foo() {}\n    |         ^^^^^\n \n error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/edition-deny-async-fns-2015.rs:33:13\n+  --> $DIR/edition-deny-async-fns-2015.rs:31:13\n    |\n LL |             async fn bar() {}\n    |             ^^^^^\n \n error[E0706]: trait fns cannot be declared `async`\n-  --> $DIR/edition-deny-async-fns-2015.rs:20:5\n+  --> $DIR/edition-deny-async-fns-2015.rs:18:5\n    |\n LL |     async fn foo() {}\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "963b19b34a620b2edd13825211b1c1c6a75f79d9", "filename": "src/test/ui/async-await/generics-and-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerics-and-bounds.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n use std::future::Future;\n \n pub async fn simple_generic<T>() {}"}, {"sha": "9ee419c4a56fb16c0d2058c50cc33d8ef2f7c49c", "filename": "src/test/ui/async-await/issue-60709.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-60709.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -4,9 +4,6 @@\n \n // run-pass\n \n-#![feature(async_await)]\n-#![allow(unused)]\n-\n use std::future::Future;\n use std::task::Poll;\n use std::task::Context;"}, {"sha": "9381251ad69688e1db8019c422b2e85f038736e9", "filename": "src/test/ui/async-await/issue-61452.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,4 @@\n // edition:2018\n-#![feature(async_await)]\n \n pub async fn f(x: Option<usize>) {\n     x.take();"}, {"sha": "5eb4b548717371107b022ab0fb562d3b7bbb698b", "filename": "src/test/ui/async-await/issue-61452.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,13 @@\n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-61452.rs:5:5\n+  --> $DIR/issue-61452.rs:4:5\n    |\n LL | pub async fn f(x: Option<usize>) {\n    |                - help: consider changing this to be mutable: `mut x`\n LL |     x.take();\n    |     ^ cannot borrow as mutable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/issue-61452.rs:10:5\n+  --> $DIR/issue-61452.rs:9:5\n    |\n LL | pub async fn g(x: usize) {\n    |                -"}, {"sha": "f6084be91674519aac6b194f964c1a026332f795", "filename": "src/test/ui/async-await/issue-61793.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-61793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-61793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61793.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -6,9 +6,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-#![allow(unused)]\n-\n async fn foo<F>(_: &(), _: F) {}\n \n fn main() {"}, {"sha": "6a28c69193da0db42b3a3208ddb33f07e3b9c342", "filename": "src/test/ui/async-await/issue-61949-self-return-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,6 +1,5 @@\n // ignore-tidy-linelength\n // edition:2018\n-#![feature(async_await)]\n \n // This test checks that `Self` is prohibited as a return type. See #61949 for context.\n "}, {"sha": "12fb77d8dd637efccac6bfb1cc21701d142ab6c8", "filename": "src/test/ui/async-await/issue-61949-self-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/issue-61949-self-return-type.rs:12:40\n+  --> $DIR/issue-61949-self-return-type.rs:11:40\n    |\n LL |     pub async fn new(_bar: &'a i32) -> Self {\n    |                                        ^^^^"}, {"sha": "d0af01e0c009f97f88f27af9224edbb76a7f0a6f", "filename": "src/test/ui/async-await/issue-62658.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-62658.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissue-62658.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-62658.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -4,8 +4,6 @@\n // build-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n async fn noop() {}\n \n async fn foo() {"}, {"sha": "09241f982aa8a6685e7bf31e4b5acb5d615a87be", "filename": "src/test/ui/async-await/issues/issue-51719.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n //\n // Tests that the .await syntax can't be used to make a generator\n \n-#![feature(async_await)]\n-\n async fn foo() {}\n \n fn make_generator() {"}, {"sha": "6c3c8889da7cee629183bb3bb48a6d60a0cbe811", "filename": "src/test/ui/async-await/issues/issue-51719.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51719.rs:10:19\n+  --> $DIR/issue-51719.rs:8:19\n    |\n LL |     let _gen = || foo().await;\n    |                -- ^^^^^^^^^^^ only allowed inside `async` functions and blocks"}, {"sha": "bc85a96cea99e90bdcdcab74ffd6b2cd2593d8a2", "filename": "src/test/ui/async-await/issues/issue-51751.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n async fn inc(limit: i64) -> i64 {\n     limit + 1\n }"}, {"sha": "e50c78534f852caa846b526cea558a64feac3f30", "filename": "src/test/ui/async-await/issues/issue-51751.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51751.rs:11:20\n+  --> $DIR/issue-51751.rs:9:20\n    |\n LL | fn main() {\n    |    ---- this is not `async`"}, {"sha": "5cae07044446081435ef16b3b69b7dda63265514", "filename": "src/test/ui/async-await/issues/issue-53249.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-53249.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,7 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(arbitrary_self_types, async_await)]\n+#![feature(arbitrary_self_types)]\n \n use std::task::{self, Poll};\n use std::future::Future;"}, {"sha": "64f260cfe01b63fb30860f49dfcca949d79cc41d", "filename": "src/test/ui/async-await/issues/issue-54752-async-block.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,7 +3,4 @@\n // edition:2018\n // pp-exact\n \n-#![feature(async_await)]\n-#![allow(unused_parens)]\n-\n fn main() { let _a = (async  { }); }"}, {"sha": "9adc0a8232388b0d983f25a49a8e8a713792cf7e", "filename": "src/test/ui/async-await/issues/issue-54974.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54974.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::sync::Arc;\n \n trait SomeTrait: Send + Sync + 'static {"}, {"sha": "1d77d420127a88d7e3acfb087be53c507245e255", "filename": "src/test/ui/async-await/issues/issue-55324.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55324.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,11 +1,8 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::future::Future;\n \n-#[allow(unused)]\n async fn foo<F: Future<Output = i32>>(x: &i32, future: F) -> i32 {\n     let y = future.await;\n     *x + y"}, {"sha": "3b271775a385175b544d67877472601f2a2afb18", "filename": "src/test/ui/async-await/issues/issue-55809.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55809.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55809.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-55809.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // run-pass\n \n-#![feature(async_await)]\n-\n trait Foo { }\n \n impl Foo for () { }"}, {"sha": "72a45b5007d7af21488d040c7a99b84990299b7c", "filename": "src/test/ui/async-await/issues/issue-58885.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-58885.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct Xyz {\n     a: u64,\n }"}, {"sha": "ea780d9f62214922d558ee6d054562c07d952d0a", "filename": "src/test/ui/async-await/issues/issue-59001.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59001.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,11 +1,8 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::future::Future;\n \n-#[allow(unused)]\n async fn enter<'a, F, R>(mut callback: F)\n where\n     F: FnMut(&'a mut i32) -> R,"}, {"sha": "154226e8bb88ffbf1639b54c5728208cb86bd345", "filename": "src/test/ui/async-await/issues/issue-59972.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-59972.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -6,8 +6,6 @@\n \n // compile-flags: --edition=2018\n \n-#![feature(async_await)]\n-\n pub enum Uninhabited { }\n \n fn uninhabited_async() -> Uninhabited {\n@@ -16,14 +14,12 @@ fn uninhabited_async() -> Uninhabited {\n \n async fn noop() { }\n \n-#[allow(unused)]\n async fn contains_never() {\n     let error = uninhabited_async();\n     noop().await;\n     let error2 = error;\n }\n \n-#[allow(unused)]\n async fn overlap_never() {\n     let error1 = uninhabited_async();\n     noop().await;\n@@ -35,6 +31,4 @@ async fn overlap_never() {\n \n #[allow(unused_must_use)]\n fn main() {\n-    contains_never();\n-    overlap_never();\n }"}, {"sha": "1ca051607518edd805903dba034cbeef99b81357", "filename": "src/test/ui/async-await/issues/issue-60518.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60518.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n-\n // This is a regression test to ensure that simple bindings (where replacement arguments aren't\n // created during async fn lowering) that have their DefId used during HIR lowering (such as impl\n // trait) are visited during def collection and thus have a DefId."}, {"sha": "0d015e54f8b1c3913477fa2329b627f178f659f8", "filename": "src/test/ui/async-await/issues/issue-60655-latebound-regions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60655-latebound-regions.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,7 +3,6 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n \n-#![feature(async_await)]\n #![feature(type_alias_impl_trait)]\n \n use std::future::Future;"}, {"sha": "c0e34a8df77a4e82ef3798a8200efb90378a75ec", "filename": "src/test/ui/async-await/issues/issue-60674.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,6 @@\n // aux-build:issue-60674.rs\n // build-pass (FIXME(62277): could be check-pass?)\n // edition:2018\n-#![feature(async_await)]\n \n // This is a regression test that ensures that `mut` patterns are not lost when provided as input\n // to a proc macro."}, {"sha": "8585a42511104aa67b15e2c8dada687012e45cb0", "filename": "src/test/ui/async-await/issues/issue-61187.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n-#![feature(async_await)]\n \n-fn main() {\n-}\n+fn main() {}\n \n async fn response(data: Vec<u8>) {\n     data.reverse(); //~ ERROR E0596"}, {"sha": "4d361c824dd6da8de946c3789dc1aa400d66646e", "filename": "src/test/ui/async-await/issues/issue-61187.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `data` as mutable, as it is not declared as mutable\n-  --> $DIR/issue-61187.rs:8:5\n+  --> $DIR/issue-61187.rs:6:5\n    |\n LL | async fn response(data: Vec<u8>) {\n    |                   ---- help: consider changing this to be mutable: `mut data`"}, {"sha": "879bc6912fce94364d890d85a190d41cd947b2eb", "filename": "src/test/ui/async-await/issues/issue-61986.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61986.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -4,8 +4,6 @@\n // Tests that we properly handle StorageDead/StorageLives for temporaries\n // created in async loop bodies.\n \n-#![feature(async_await)]\n-\n async fn bar() -> Option<()> {\n     Some(())\n }"}, {"sha": "3ee7ab2e9d12f5ed37adf1d826bb8f5c0b5674d3", "filename": "src/test/ui/async-await/issues/issue-62009-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n async fn print_dur() {}\n \n fn main() {"}, {"sha": "cd155f0fc32b6c44f2a2557d339a4d3ae449a910", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,13 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:8:5\n+  --> $DIR/issue-62009-1.rs:6:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:10:5\n+  --> $DIR/issue-62009-1.rs:8:5\n    |\n LL |   fn main() {\n    |      ---- this is not `async`\n@@ -19,19 +19,19 @@ LL | |     }.await;\n    | |___________^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:14:5\n+  --> $DIR/issue-62009-1.rs:12:5\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n    |     ^^^^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n-error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]: std::future::Future` is not satisfied\n-  --> $DIR/issue-62009-1.rs:14:5\n+error[E0277]: the trait bound `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]: std::future::Future` is not satisfied\n+  --> $DIR/issue-62009-1.rs:12:5\n    |\n LL |     (|_| 2333).await;\n-   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:14:5: 14:15]`\n+   |     ^^^^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n    |\n    = note: required by `std::future::poll_with_tls_context`\n "}, {"sha": "cb7336e6134225b8c6aa651a47f298880997a86a", "filename": "src/test/ui/async-await/issues/issue-62009-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n async fn print_dur() {}\n "}, {"sha": "4689ce36a78c03721ad9cf34e1a6d1266a75df96", "filename": "src/test/ui/async-await/issues/issue-62517-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-1.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -5,8 +5,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(async_await)]\n-\n trait FirstTrait {}\n trait SecondTrait {\n     type Item: ?Sized;"}, {"sha": "aaf28d6c132e3970193413b02b4f277557dbc4b9", "filename": "src/test/ui/async-await/issues/issue-62517-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -5,8 +5,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(async_await)]\n-\n trait Object {}\n \n trait Alpha<Param: ?Sized> {}"}, {"sha": "22610fe54a4cb1d8ed2f4eedb0fcf166829bb034", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/issue-63388-1.rs:14:10\n+  --> $DIR/issue-63388-1.rs:12:10\n    |\n LL |     ) -> &dyn Foo\n    |          ^^^^^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#22r\n \n error: lifetime may not live long enough\n-  --> $DIR/issue-63388-1.rs:15:5\n+  --> $DIR/issue-63388-1.rs:13:5\n    |\n LL |       async fn do_sth<'a>(\n    |                       -- lifetime `'a` defined here"}, {"sha": "3cde5de2198806617d56e74727a0ca4795f6d38f", "filename": "src/test/ui/async-await/issues/issue-63388-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct Xyz {\n     a: u64,\n }"}, {"sha": "a54cadb0cd2517abb6b15a82daf488f2f4d41cce", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/issue-63388-1.rs:14:10\n+  --> $DIR/issue-63388-1.rs:12:10\n    |\n LL |         &'a self, foo: &dyn Foo\n    |         -------- this parameter and the return type are declared with different lifetimes..."}, {"sha": "7781af89deae2d5b9d80fb171e03cb629e9b1557", "filename": "src/test/ui/async-await/issues/issue-63388-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-63388-2.rs:14:10\n+  --> $DIR/issue-63388-2.rs:12:10\n    |\n LL |     ) -> &dyn Foo\n    |          ^ help: consider using the named lifetime: `&'a`"}, {"sha": "73e7f25f97d0d82140a13bae39c93f3717587ccd", "filename": "src/test/ui/async-await/issues/issue-63388-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct Xyz {\n     a: u64,\n }"}, {"sha": "1edeb3d54938968b34816c88ecf5e2210989e390", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,25 +1,25 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/issue-63388-2.rs:14:10\n+  --> $DIR/issue-63388-2.rs:12:10\n    |\n LL |     ) -> &dyn Foo\n    |          ^ help: consider using the named lifetime: `&'a`\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n \n error: cannot infer an appropriate lifetime\n-  --> $DIR/issue-63388-2.rs:13:9\n+  --> $DIR/issue-63388-2.rs:11:9\n    |\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |         ^^^ ...but this borrow...\n LL |     ) -> &dyn Foo\n    |          -------- this return type evaluates to the `'static` lifetime...\n    |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 13:14\n-  --> $DIR/issue-63388-2.rs:13:14\n+note: ...can't outlive the lifetime '_ as defined on the method body at 11:14\n+  --> $DIR/issue-63388-2.rs:11:14\n    |\n LL |         foo: &dyn Foo, bar: &'a dyn Foo\n    |              ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 13:14\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 11:14\n    |\n LL |     ) -> &dyn Foo + '_\n    |          ^^^^^^^^^^^^^"}, {"sha": "1a9822e02fa0199c12eaec42e7e21a7fbf09e85d", "filename": "src/test/ui/async-await/issues/issue-63388-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-3.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(async_await)]\n-\n struct Xyz {\n     a: u64,\n }"}, {"sha": "58f9dacb3bcfa26611aff7a5905dc876b0e78566", "filename": "src/test/ui/async-await/issues/issue-63388-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-4.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct A;\n \n impl A {"}, {"sha": "d47c2137725d61f6b9780ce57248de31e4be8e80", "filename": "src/test/ui/async-await/issues/non-async-enclosing-span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,4 @@\n // edition:2018\n-#![feature(async_await)]\n \n async fn do_the_thing() -> u8 {\n     8"}, {"sha": "49ebf414c550bb4242f3182b6b35aca02bdf8fa1", "filename": "src/test/ui/async-await/issues/non-async-enclosing-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/non-async-enclosing-span.rs:10:13\n+  --> $DIR/non-async-enclosing-span.rs:9:13\n    |\n LL | fn main() {\n    |    ---- this is not `async`"}, {"sha": "39ea2aae563a4111b845405dad533c8f7dfb799c", "filename": "src/test/ui/async-await/move-part-await-return-rest-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-struct.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n struct Small {\n     x: Vec<usize>,\n     y: Vec<usize>,"}, {"sha": "7b958b98b414f4d2f6b552619c1545fdcc7cf76c", "filename": "src/test/ui/async-await/move-part-await-return-rest-tuple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmove-part-await-return-rest-tuple.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n async fn move_part_await_return_rest_tuple() -> Vec<usize> {\n     let x = (vec![3], vec![4, 4]);\n     drop(x.1);"}, {"sha": "8258e2eff521bb012e65f950c0579caa4f5487f6", "filename": "src/test/ui/async-await/multiple-lifetimes/elided.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Felided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Felided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Felided.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,8 +3,6 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(async_await)]\n-\n async fn multiple_elided_lifetimes(_: &u8, _: &u8) {}\n \n fn main() {"}, {"sha": "3912b854747de903e3fa71f5a52600ea0bcf19c2", "filename": "src/test/ui/async-await/multiple-lifetimes/fn-ptr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Ffn-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Ffn-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Ffn-ptr.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,8 +3,6 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(async_await)]\n-\n async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8, _: fn(&u8)) {}\n \n fn gimme(_: &u8) { }"}, {"sha": "31d0736ba63c845ca4d7a21943164e3964f8de9c", "filename": "src/test/ui/async-await/multiple-lifetimes/hrtb.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fhrtb.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,9 +3,6 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(async_await)]\n-#![allow(dead_code)]\n-\n use std::ops::Add;\n \n async fn multiple_hrtb_and_single_named_lifetime_ok<'c>("}, {"sha": "e8eb98102f478fd58280aba4c13ec73397687bf7", "filename": "src/test/ui/async-await/multiple-lifetimes/named.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,8 +3,6 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(async_await)]\n-\n async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8) {}\n \n fn main() {"}, {"sha": "02b105999f5bb2e55d4b0e98fe60961a48349ee3", "filename": "src/test/ui/async-await/multiple-lifetimes/partial-relation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fpartial-relation.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // run-pass\n \n-#![feature(async_await)]\n-\n async fn lotsa_lifetimes<'a, 'b, 'c>(a: &'a u32, b: &'b u32, c: &'c u32) -> (&'a u32, &'b u32)\n     where 'b: 'a\n {"}, {"sha": "b901b61aa1898315ae38e6a1f7041b11e64d8500", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -4,7 +4,7 @@\n // Test that a feature gate is needed to use `impl Trait` as the\n // return type of an async.\n \n-#![feature(async_await, member_constraints)]\n+#![feature(member_constraints)]\n \n trait Trait<'a, 'b> { }\n impl<T> Trait<'_, '_> for T { }"}, {"sha": "2c7a5cd378fc2d4e4723d32bcbb3d5811b8887e0", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,8 +3,6 @@\n // Test that a feature gate is needed to use `impl Trait` as the\n // return type of an async.\n \n-#![feature(async_await)]\n-\n trait Trait<'a, 'b> { }\n impl<T> Trait<'_, '_> for T { }\n "}, {"sha": "59d7728d41c4cfa2a67d27c3495a8aaa7611f8bf", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/ret-impl-trait-no-fg.rs:11:64\n+  --> $DIR/ret-impl-trait-no-fg.rs:9:64\n    |\n LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n    |                                                                ^^^^^^^^^^^^^^^^^^ neither `'a` nor `'b` outlives the other"}, {"sha": "babc90a5e96ad395e3e14a9c68b2869a3b6e793f", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,7 +3,7 @@\n // Test that a feature gate is needed to use `impl Trait` as the\n // return type of an async.\n \n-#![feature(async_await, member_constraints)]\n+#![feature(member_constraints)]\n \n trait Trait<'a> { }\n impl<T> Trait<'_> for T { }"}, {"sha": "149c020f9cb9c7c24fa93423c8106b2c693c7a96", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-ref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -4,8 +4,6 @@\n // function (which takes multiple lifetimes) only returns data from\n // one of them.\n \n-#![feature(async_await)]\n-\n async fn multiple_named_lifetimes<'a, 'b>(a: &'a u8, _: &'b u8) -> &'a u8 {\n     a\n }"}, {"sha": "d86e84033b8cd688191c48f0926dc1ea2256da36", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-ref.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0506]: cannot assign to `a` because it is borrowed\n-  --> $DIR/ret-ref.rs:18:5\n+  --> $DIR/ret-ref.rs:16:5\n    |\n LL |     let future = multiple_named_lifetimes(&a, &b);\n    |                                           -- borrow of `a` occurs here\n@@ -10,7 +10,7 @@ LL |     let p = future.await;\n    |             ------ borrow later used here\n \n error[E0506]: cannot assign to `b` because it is borrowed\n-  --> $DIR/ret-ref.rs:19:5\n+  --> $DIR/ret-ref.rs:17:5\n    |\n LL |     let future = multiple_named_lifetimes(&a, &b);\n    |                                               -- borrow of `b` occurs here\n@@ -21,7 +21,7 @@ LL |     let p = future.await;\n    |             ------ borrow later used here\n \n error[E0506]: cannot assign to `a` because it is borrowed\n-  --> $DIR/ret-ref.rs:30:5\n+  --> $DIR/ret-ref.rs:28:5\n    |\n LL |     let future = multiple_named_lifetimes(&a, &b);\n    |                                           -- borrow of `a` occurs here"}, {"sha": "6ed8bef956a52f1cae057dd5e70006b901572cb5", "filename": "src/test/ui/async-await/multiple-lifetimes/variance.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fvariance.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -4,9 +4,6 @@\n // Test for async fn where the parameters have distinct lifetime\n // parameters that appear in all possible variances.\n \n-#![feature(async_await)]\n-\n-#[allow(dead_code)]\n async fn lotsa_lifetimes<'a, 'b, 'c>(_: fn(&'a u8), _: fn(&'b u8) -> &'b u8, _: fn() -> &'c u8) { }\n \n fn take_any(_: &u8) { }"}, {"sha": "76ed827d5973e4e9b4427840af9eda54a70c0a90", "filename": "src/test/ui/async-await/nested-in-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fnested-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fnested-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fnested-in-impl.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -4,8 +4,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct Foo<'a>(&'a ());\n \n impl<'a> Foo<'a> {"}, {"sha": "0ca50807f2626b3047bc230c46fc39f0cd747c84", "filename": "src/test/ui/async-await/no-args-non-move-async-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-args-non-move-async-closure.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,6 +1,6 @@\n // edition:2018\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n fn main() {\n     let _ = async |x: u8| {};"}, {"sha": "7a6eb498b2ee0b3c0538a4102990d81da542a54f", "filename": "src/test/ui/async-await/no-async-const.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,7 +2,5 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n pub async const fn x() {}\n //~^ ERROR expected one of `fn` or `unsafe`, found `const`"}, {"sha": "edbdfb5652281a02fd78a93e3e751ba54c7589fe", "filename": "src/test/ui/async-await/no-async-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-async-const.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `fn` or `unsafe`, found `const`\n-  --> $DIR/no-async-const.rs:7:11\n+  --> $DIR/no-async-const.rs:5:11\n    |\n LL | pub async const fn x() {}\n    |           ^^^^^ expected one of `fn` or `unsafe` here"}, {"sha": "bd78a18a40ed9e6ba527bf830693232f641fd769", "filename": "src/test/ui/async-await/no-const-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n pub const async fn x() {}\n //~^ ERROR expected identifier, found reserved keyword `async`\n //~^^ expected `:`, found keyword `fn`"}, {"sha": "6d7df57e7b6afee01eddf591ca8877049caf834d", "filename": "src/test/ui/async-await/no-const-async.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-const-async.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found reserved keyword `async`\n-  --> $DIR/no-const-async.rs:7:11\n+  --> $DIR/no-const-async.rs:5:11\n    |\n LL | pub const async fn x() {}\n    |           ^^^^^ expected identifier, found reserved keyword\n@@ -9,7 +9,7 @@ LL | pub const r#async fn x() {}\n    |           ^^^^^^^\n \n error: expected `:`, found keyword `fn`\n-  --> $DIR/no-const-async.rs:7:17\n+  --> $DIR/no-const-async.rs:5:17\n    |\n LL | pub const async fn x() {}\n    |                 ^^ expected `:`"}, {"sha": "bef477bd256ec3a769c351ac03e8e12514becfe3", "filename": "src/test/ui/async-await/no-move-across-await-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n async fn no_move_across_await_struct() -> Vec<usize> {\n     let s = Small { x: vec![31], y: vec![19, 1441] };\n     needs_vec(s.x).await;"}, {"sha": "88f147b8d9ddd10ec8fa1fea8261d3a6ac62b970", "filename": "src/test/ui/async-await/no-move-across-await-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-struct.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `s.x`\n-  --> $DIR/no-move-across-await-struct.rs:10:5\n+  --> $DIR/no-move-across-await-struct.rs:8:5\n    |\n LL |     needs_vec(s.x).await;\n    |               --- value moved here"}, {"sha": "565cbd7d5f4aeaeb5452e968168fbfed99e5d418", "filename": "src/test/ui/async-await/no-move-across-await-tuple.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n async fn no_move_across_await_tuple() -> Vec<usize> {\n     let x = (vec![3], vec![4, 4]);\n     drop(x.1);"}, {"sha": "fe98ecd599a2348b9c172c3c826e896f58021846", "filename": "src/test/ui/async-await/no-move-across-await-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-move-across-await-tuple.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `x.1`\n-  --> $DIR/no-move-across-await-tuple.rs:11:5\n+  --> $DIR/no-move-across-await-tuple.rs:9:5\n    |\n LL |     drop(x.1);\n    |          --- value moved here"}, {"sha": "0afbf4cee1d3c881ada8d028fb25c71b51dbc0e7", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n // edition:2018\n // compile-flags: --crate-type lib\n \n-#![feature(async_await)]\n-\n async fn no_non_guaranteed_initialization(x: usize) -> usize {\n     let y;\n     if x > 5 {"}, {"sha": "91d7994654f37448f5ed6f4c5e2f9f613f17ceec", "filename": "src/test/ui/async-await/no-non-guaranteed-initialization.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fno-non-guaranteed-initialization.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0381]: use of possibly uninitialized variable: `y`\n-  --> $DIR/no-non-guaranteed-initialization.rs:12:5\n+  --> $DIR/no-non-guaranteed-initialization.rs:10:5\n    |\n LL |     y\n    |     ^ use of possibly uninitialized `y`"}, {"sha": "1785fb7f29947757deddf633df07da57636b42bc", "filename": "src/test/ui/async-await/partial-initialization-across-await.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,8 +3,6 @@\n \n // edition:2018\n \n-#![feature(async_await)]\n-\n struct S { x: i32, y: i32 }\n struct T(i32, i32);\n "}, {"sha": "d9a2db985e54ddc4db7b55fd3b857b686507c604", "filename": "src/test/ui/async-await/partial-initialization-across-await.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-initialization-across-await.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,17 +1,17 @@\n error[E0381]: assign to part of possibly uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-await.rs:15:5\n+  --> $DIR/partial-initialization-across-await.rs:13:5\n    |\n LL |     t.0 = 42;\n    |     ^^^^^^^^ use of possibly uninitialized `t`\n \n error[E0381]: assign to part of possibly uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-await.rs:24:5\n+  --> $DIR/partial-initialization-across-await.rs:22:5\n    |\n LL |     t.0 = 42;\n    |     ^^^^^^^^ use of possibly uninitialized `t`\n \n error[E0381]: assign to part of possibly uninitialized variable: `t`\n-  --> $DIR/partial-initialization-across-await.rs:33:5\n+  --> $DIR/partial-initialization-across-await.rs:31:5\n    |\n LL |     t.x = 42;\n    |     ^^^^^^^^ use of possibly uninitialized `t`"}, {"sha": "aa7733194587da20ba4238a02da39f729f0445a0", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,8 +2,6 @@\n // Test that impl trait does not allow creating recursive types that are\n // otherwise forbidden when using `async` and `await`.\n \n-#![feature(async_await)]\n-\n async fn recursive_async_function() -> () { //~ ERROR\n     recursive_async_function().await;\n }"}, {"sha": "8781a9c444d0a5c50e97277614ffd3f06d0e9555", "filename": "src/test/ui/async-await/recursive-async-impl-trait-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Frecursive-async-impl-trait-type.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0733]: recursion in an `async fn` requires boxing\n-  --> $DIR/recursive-async-impl-trait-type.rs:7:40\n+  --> $DIR/recursive-async-impl-trait-type.rs:5:40\n    |\n LL | async fn recursive_async_function() -> () {\n    |                                        ^^ an `async fn` cannot invoke itself directly"}, {"sha": "37b30ffe6800f7f6c2de77b970b3e6ada1d474f1", "filename": "src/test/ui/async-await/suggest-missing-await-closure.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.fixed?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // run-rustfix\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n fn take_u32(_x: u32) {}\n "}, {"sha": "18076a1516171cfa5346c45e9de63791bca7041e", "filename": "src/test/ui/async-await/suggest-missing-await-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,7 @@\n // edition:2018\n // run-rustfix\n \n-#![feature(async_await, async_closure)]\n+#![feature(async_closure)]\n \n fn take_u32(_x: u32) {}\n "}, {"sha": "7c02a907ce7ad03649175f63ad5ef81411b6f149", "filename": "src/test/ui/async-await/suggest-missing-await.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // run-rustfix\n \n-#![feature(async_await)]\n-\n fn take_u32(_x: u32) {}\n \n async fn make_u32() -> u32 {"}, {"sha": "91abd44e65caf3294d9b70b99043cacf3ebe1a5d", "filename": "src/test/ui/async-await/suggest-missing-await.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // run-rustfix\n \n-#![feature(async_await)]\n-\n fn take_u32(_x: u32) {}\n \n async fn make_u32() -> u32 {"}, {"sha": "ccca97ec204b46c5f241cba5711cfea4ae9e6955", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/suggest-missing-await.rs:15:14\n+  --> $DIR/suggest-missing-await.rs:13:14\n    |\n LL |     take_u32(x)\n    |              ^"}, {"sha": "d8ea87d2775bdf7a624c620310daa9989d607c58", "filename": "src/test/ui/async-await/unresolved_type_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funresolved_type_param.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,7 +2,7 @@\n // Error message should pinpoint the type parameter T as needing to be bound\n // (rather than give a general error message)\n // edition:2018\n-#![feature(async_await)]\n+\n async fn bar<T>() -> () {}\n \n async fn foo() {"}, {"sha": "4281874a0314d700d9de6bf1775f28b53f38a6d1", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -0,0 +1,16 @@\n+const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n+//~^ dereferencing raw pointers in constant functions\n+\n+const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n+//~^ dereferencing raw pointers in constant functions\n+\n+const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }\n+//~^ dereferencing raw pointers in constant functions\n+\n+fn main() {}\n+\n+const unsafe fn no_union() {\n+    union Foo { x: (), y: () }\n+    Foo { x: () }.y\n+    //~^ unions in const fn\n+}"}, {"sha": "9de0e732f33d242f9fe91791dfd6d02d629046c6", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: dereferencing raw pointers in constant functions is unstable\n-  --> $DIR/min_const_fn_unsafe.rs:50:77\n+  --> $DIR/min_const_fn_unsafe_bad.rs:1:77\n    |\n LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } }\n    |                                                                             ^^^\n@@ -8,7 +8,7 @@ LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe {\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error[E0658]: dereferencing raw pointers in constant functions is unstable\n-  --> $DIR/min_const_fn_unsafe.rs:53:70\n+  --> $DIR/min_const_fn_unsafe_bad.rs:4:70\n    |\n LL | const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n    |                                                                      ^^\n@@ -17,7 +17,7 @@ LL | const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error[E0658]: dereferencing raw pointers in constant functions is unstable\n-  --> $DIR/min_const_fn_unsafe.rs:56:83\n+  --> $DIR/min_const_fn_unsafe_bad.rs:7:83\n    |\n LL | const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }\n    |                                                                                   ^^^\n@@ -26,7 +26,7 @@ LL | const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static u\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error[E0658]: unions in const fn are unstable\n-  --> $DIR/min_const_fn_unsafe.rs:63:5\n+  --> $DIR/min_const_fn_unsafe_bad.rs:14:5\n    |\n LL |     Foo { x: () }.y\n    |     ^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     Foo { x: () }.y\n    = help: add `#![feature(const_fn_union)]` to the crate attributes to enable\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/min_const_fn_unsafe.rs:50:77\n+  --> $DIR/min_const_fn_unsafe_bad.rs:1:77\n    |\n LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } }\n    |                                                                             ^^^ dereference of raw pointer", "previous_filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.stderr"}, {"sha": "02c7970deca641d5b512c4f9e11aab7dac58e638", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs", "status": "renamed", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_ok.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,6 +1,4 @@\n-//------------------------------------------------------------------------------\n-// OK\n-//------------------------------------------------------------------------------\n+// check-pass\n \n const unsafe fn ret_i32_no_unsafe() -> i32 { 42 }\n const unsafe fn ret_null_ptr_no_unsafe<T>() -> *const T { std::ptr::null() }\n@@ -43,23 +41,4 @@ const unsafe fn call_unsafe_generic_cell_const_unsafe_fn_immediate()\n     ret_null_mut_ptr_no_unsafe::<Vec<std::cell::Cell<u32>>>()\n }\n \n-//------------------------------------------------------------------------------\n-// NOT OK\n-//------------------------------------------------------------------------------\n-\n-const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n-//~^ dereferencing raw pointers in constant functions\n-\n-const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n-//~^ dereferencing raw pointers in constant functions\n-\n-const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }\n-//~^ dereferencing raw pointers in constant functions\n-\n fn main() {}\n-\n-const unsafe fn no_union() {\n-    union Foo { x: (), y: () }\n-    Foo { x: () }.y\n-    //~^ unions in const fn\n-}", "previous_filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.rs"}, {"sha": "79d09d1817601ea601ae6a484cc6827e4d000630", "filename": "src/test/ui/drop/dynamic-drop-async.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -7,10 +7,7 @@\n // edition:2018\n // ignore-wasm32-bare compiled with panic=abort by default\n \n-#![allow(unused_assignments)]\n-#![allow(unused_variables)]\n #![feature(slice_patterns)]\n-#![feature(async_await)]\n \n use std::{\n     cell::{Cell, RefCell},"}, {"sha": "801aeb82aa266dfed97da4d9d23b22532988b8cf", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a56e05abd34e1936df74625c1f40cb6fee0cd4a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a56e05abd34e1936df74625c1f40cb6fee0cd4a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.rs?ref=5a56e05abd34e1936df74625c1f40cb6fee0cd4a", "patch": "@@ -1,9 +0,0 @@\n-// edition:2015\n-\n-async fn foo() {} //~ ERROR `async fn` is not permitted in the 2015 edition\n-                  //~^ ERROR async fn is unstable\n-\n-fn main() {\n-    let _ = async {}; //~ ERROR cannot find struct, variant or union type `async`\n-    let _ = async || { true }; //~ ERROR cannot find value `async` in this scope\n-}"}, {"sha": "0157ed5534423199adfe93650e20dfe4c82661fe", "filename": "src/test/ui/feature-gates/feature-gate-async-await-2015-edition.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5a56e05abd34e1936df74625c1f40cb6fee0cd4a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a56e05abd34e1936df74625c1f40cb6fee0cd4a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await-2015-edition.stderr?ref=5a56e05abd34e1936df74625c1f40cb6fee0cd4a", "patch": "@@ -1,31 +0,0 @@\n-error[E0670]: `async fn` is not permitted in the 2015 edition\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:3:1\n-   |\n-LL | async fn foo() {}\n-   | ^^^^^\n-\n-error[E0422]: cannot find struct, variant or union type `async` in this scope\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:7:13\n-   |\n-LL |     let _ = async {};\n-   |             ^^^^^ not found in this scope\n-\n-error[E0425]: cannot find value `async` in this scope\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:8:13\n-   |\n-LL |     let _ = async || { true };\n-   |             ^^^^^ not found in this scope\n-\n-error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await-2015-edition.rs:3:1\n-   |\n-LL | async fn foo() {}\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(async_await)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0422, E0425, E0658, E0670.\n-For more information about an error, try `rustc --explain E0422`."}, {"sha": "78391c0e104cc3e26a441fb48491320524f2c2d3", "filename": "src/test/ui/feature-gates/feature-gate-async-await.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5a56e05abd34e1936df74625c1f40cb6fee0cd4a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a56e05abd34e1936df74625c1f40cb6fee0cd4a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs?ref=5a56e05abd34e1936df74625c1f40cb6fee0cd4a", "patch": "@@ -1,18 +0,0 @@\n-// edition:2018\n-\n-struct S;\n-\n-impl S {\n-    async fn foo() {} //~ ERROR async fn is unstable\n-}\n-\n-trait T {\n-    async fn foo(); //~ ERROR trait fns cannot be declared `async`\n-    //~^ ERROR async fn is unstable\n-}\n-\n-async fn foo() {} //~ ERROR async fn is unstable\n-\n-fn main() {\n-    let _ = async {}; //~ ERROR async blocks are unstable\n-}"}, {"sha": "9f4a90157a49548006fa2342bdb912c7d6dd7490", "filename": "src/test/ui/feature-gates/feature-gate-async-await.stderr", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5a56e05abd34e1936df74625c1f40cb6fee0cd4a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a56e05abd34e1936df74625c1f40cb6fee0cd4a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr?ref=5a56e05abd34e1936df74625c1f40cb6fee0cd4a", "patch": "@@ -1,45 +0,0 @@\n-error[E0706]: trait fns cannot be declared `async`\n-  --> $DIR/feature-gate-async-await.rs:10:5\n-   |\n-LL |     async fn foo();\n-   |     ^^^^^^^^^^^^^^^\n-\n-error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await.rs:6:5\n-   |\n-LL |     async fn foo() {}\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(async_await)]` to the crate attributes to enable\n-\n-error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await.rs:10:5\n-   |\n-LL |     async fn foo();\n-   |     ^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(async_await)]` to the crate attributes to enable\n-\n-error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await.rs:14:1\n-   |\n-LL | async fn foo() {}\n-   | ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(async_await)]` to the crate attributes to enable\n-\n-error[E0658]: async blocks are unstable\n-  --> $DIR/feature-gate-async-await.rs:17:13\n-   |\n-LL |     let _ = async {};\n-   |             ^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(async_await)]` to the crate attributes to enable\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "e3d19029348a5619b08064253f272d18c040178c", "filename": "src/test/ui/generator/issue-61442-stmt-expr-with-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-61442-stmt-expr-with-drop.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -4,7 +4,7 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await, generators, generator_trait)]\n+#![feature(generators, generator_trait)]\n \n use std::ops::Generator;\n "}, {"sha": "672e16b780d03729278f7e13a288f2c5f5e064fc", "filename": "src/test/ui/generator/issue-62506-two_awaits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fgenerator%2Fissue-62506-two_awaits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fgenerator%2Fissue-62506-two_awaits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-62506-two_awaits.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -4,7 +4,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n use std::future::Future;\n \n pub trait T {"}, {"sha": "235c1f80ef6373da95bc638456f382be23312f04", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -2,7 +2,6 @@\n // ignore-tidy-linelength\n // edition:2018\n \n-#![feature(async_await)]\n #![feature(impl_trait_in_bindings)]\n //~^ WARNING the feature `impl_trait_in_bindings` is incomplete\n "}, {"sha": "2c4c61a0957f96525215fcc08a700fc957517a0f", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/bound-normalization-fail.rs:6:12\n+  --> $DIR/bound-normalization-fail.rs:5:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:29:32\n+  --> $DIR/bound-normalization-fail.rs:28:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n@@ -17,13 +17,13 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    = note: the return type of a function must have a statically known size\n \n error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/bound-normalization-fail.rs:45:41\n+  --> $DIR/bound-normalization-fail.rs:44:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:45:41\n+  --> $DIR/bound-normalization-fail.rs:44:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type"}, {"sha": "fff17667fdae16de7591398adacdf3adfb73bf21", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n #![feature(type_alias_impl_trait)]\n #![feature(impl_trait_in_bindings)]\n //~^ WARNING the feature `impl_trait_in_bindings` is incomplete"}, {"sha": "d048da7f60bebd3845983de2fa86e58bc26a2bee", "filename": "src/test/ui/impl-trait/bound-normalization-pass.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/bound-normalization-pass.rs:6:12\n+  --> $DIR/bound-normalization-pass.rs:5:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1ca2e3d9065106b3d0e67bbb980be9043fd0df3a", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,6 +1,7 @@\n // edition:2018\n // ignore-tidy-linelength\n-#![feature(async_await, type_alias_impl_trait)]\n+\n+#![feature(type_alias_impl_trait)]\n \n pub trait Bar {\n     type E: Copy;"}, {"sha": "01371b4d5c61f96bfaa9a74db18d8f6487b7ad59", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the trait bound `impl std::future::Future: std::marker::Copy` is not satisfied\n-  --> $DIR/issue-55872-2.rs:12:5\n+  --> $DIR/issue-55872-2.rs:13:5\n    |\n LL |     type E = impl Copy;\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `impl std::future::Future`\n    |\n    = note: the return type of a function must have a statically known size\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-  --> $DIR/issue-55872-2.rs:14:28\n+  --> $DIR/issue-55872-2.rs:15:28\n    |\n LL |       fn foo<T>() -> Self::E {\n    |  ____________________________^"}, {"sha": "7d75f254bfe75d44da3b6071ffcf7d62664dee66", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,4 @@\n // edition:2018\n-#![feature(async_await)]\n #![feature(impl_trait_in_bindings)]\n //~^ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n "}, {"sha": "f67e45b01d27e606d63438ad39ef2ba726ec3638", "filename": "src/test/ui/inference/cannot-infer-async-enabled-impl-trait-bindings.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async-enabled-impl-trait-bindings.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:3:12\n+  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:2:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0282]: type annotations needed for `impl std::future::Future`\n-  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:14:9\n+  --> $DIR/cannot-infer-async-enabled-impl-trait-bindings.rs:13:9\n    |\n LL |     let fut = async {\n    |         --- consider giving `fut` the explicit type `impl std::future::Future`, with the type parameters specified"}, {"sha": "05f62f3d8cbc0aa4a4bda6647dff130335a26ed8", "filename": "src/test/ui/inference/cannot-infer-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,4 @@\n // edition:2018\n-#![feature(async_await)]\n \n use std::io::Error;\n "}, {"sha": "bf31fb85cf6db5c5eab50fd634a36a740621e01e", "filename": "src/test/ui/inference/cannot-infer-async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-async.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed\n-  --> $DIR/cannot-infer-async.rs:12:9\n+  --> $DIR/cannot-infer-async.rs:11:9\n    |\n LL |     let fut = async {\n    |         --- consider giving `fut` a type"}, {"sha": "c86623ce2898c71cd6afe1d290a3df7ad394cfef", "filename": "src/test/ui/issues/issue-31776.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fissues%2Fissue-31776.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fissues%2Fissue-31776.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31776.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -13,7 +13,7 @@ mod m {\n     }\n }\n \n-// ------------------------------------------------------\n+// Scenario 1\n \n pub trait Tr {\n     type A;\n@@ -28,7 +28,7 @@ fn f() {\n     }\n }\n \n-// ------------------------------------------------------\n+// Scenario 2\n \n trait Tr1 {\n     type A;\n@@ -49,8 +49,6 @@ mod m1 {\n     }\n }\n \n-// ------------------------------------------------------\n-\n fn main() {\n     S.s(); // Privacy error, unless `fn s` is pub\n     let a = S2.pull().field; // Privacy error unless `field: u8` is pub"}, {"sha": "151b9fe442c033a394a8046ece2697f6f57313a6", "filename": "src/test/ui/issues/issue-50415.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fissues%2Fissue-50415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fissues%2Fissue-50415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50415.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,11 +1,9 @@\n // run-pass\n fn main() {\n-    // -------- Simplified test case --------\n-\n+    // Simplified test case\n     let _ = || 0..=1;\n \n-    // -------- Original test case --------\n-\n+    // Original test case\n     let full_length = 1024;\n     let range = {\n         // do some stuff, omit here"}, {"sha": "5857a081596cb67f41cfe4fc02b759343e478713", "filename": "src/test/ui/issues/issue-5067.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fissues%2Fissue-5067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fissues%2Fissue-5067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5067.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -54,7 +54,7 @@ macro_rules! foo {\n     //~^ ERROR repetition matches empty token tree\n }\n \n-// --- Original Issue --- //\n+// Original Issue\n \n macro_rules! make_vec {\n     (a $e1:expr $($(, a $e2:expr)*)*) => ([$e1 $($(, $e2)*)*]);\n@@ -65,7 +65,7 @@ fn main() {\n     let _ = make_vec![a 1, a 2, a 3];\n }\n \n-// --- Minified Issue --- //\n+// Minified Issue\n \n macro_rules! m {\n     ( $()* ) => {};"}, {"sha": "f140546b048191a4ac76bc8e1cd0c76c71f56898", "filename": "src/test/ui/lint/lint-unused-mut-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -3,7 +3,7 @@\n // Exercise the unused_mut attribute in some positive and negative cases\n \n #![deny(unused_mut)]\n-#![feature(async_await, async_closure, param_attrs)]\n+#![feature(async_closure, param_attrs)]\n \n async fn baz_async(\n     mut a: i32,"}, {"sha": "06b818636f956b548e32f5eebb5770ef13b3272f", "filename": "src/test/ui/lint/lint-unused-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --cfg something\n // edition:2018\n \n-#![feature(async_await, async_closure, param_attrs)]\n+#![feature(async_closure, param_attrs)]\n #![deny(unused_variables)]\n \n async fn foo_async("}, {"sha": "1151a829eba16556b8aa2dc2b97837357f1f115f", "filename": "src/test/ui/macros/restricted-shadowing-modern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -95,8 +95,6 @@ macro include() {\n         m!()\n     }\n \n-    // -----------------------------------------------------------\n-\n     fn check1() {\n         macro m() {}\n         {"}, {"sha": "12075d42b9a7cecb069afac97587bca070fb0b40", "filename": "src/test/ui/macros/restricted-shadowing-modern.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/restricted-shadowing-modern.rs:106:17\n+  --> $DIR/restricted-shadowing-modern.rs:104:17\n    |\n LL |                 m!();\n    |                 ^ ambiguous name\n@@ -16,7 +16,7 @@ LL |         macro m() { Right }\n LL | include!();\n    | ----------- in this macro invocation\n note: `m` could also refer to the macro defined here\n-  --> $DIR/restricted-shadowing-modern.rs:101:9\n+  --> $DIR/restricted-shadowing-modern.rs:99:9\n    |\n LL |         macro m() {}\n    |         ^^^^^^^^^^^^\n@@ -25,7 +25,7 @@ LL | include!();\n    | ----------- in this macro invocation\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/restricted-shadowing-modern.rs:149:33\n+  --> $DIR/restricted-shadowing-modern.rs:147:33\n    |\n LL |             macro gen_invoc() { m!() }\n    |                                 ^ ambiguous name\n@@ -42,7 +42,7 @@ LL |         macro m() { Right }\n LL | include!();\n    | ----------- in this macro invocation\n note: `m` could also refer to the macro defined here\n-  --> $DIR/restricted-shadowing-modern.rs:145:9\n+  --> $DIR/restricted-shadowing-modern.rs:143:9\n    |\n LL |         macro m() {}\n    |         ^^^^^^^^^^^^\n@@ -51,7 +51,7 @@ LL | include!();\n    | ----------- in this macro invocation\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/restricted-shadowing-modern.rs:158:13\n+  --> $DIR/restricted-shadowing-modern.rs:156:13\n    |\n LL |             m!();\n    |             ^ ambiguous name\n@@ -68,7 +68,7 @@ LL |         macro m() { Right }\n LL | include!();\n    | ----------- in this macro invocation\n note: `m` could also refer to the macro defined here\n-  --> $DIR/restricted-shadowing-modern.rs:155:9\n+  --> $DIR/restricted-shadowing-modern.rs:153:9\n    |\n LL |         macro m() {}\n    |         ^^^^^^^^^^^^\n@@ -77,7 +77,7 @@ LL | include!();\n    | ----------- in this macro invocation\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/restricted-shadowing-modern.rs:174:13\n+  --> $DIR/restricted-shadowing-modern.rs:172:13\n    |\n LL |             m!();\n    |             ^ ambiguous name\n@@ -103,7 +103,7 @@ LL | include!();\n    | ----------- in this macro invocation\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/restricted-shadowing-modern.rs:192:17\n+  --> $DIR/restricted-shadowing-modern.rs:190:17\n    |\n LL |                 m!();\n    |                 ^ ambiguous name\n@@ -129,7 +129,7 @@ LL | include!();\n    | ----------- in this macro invocation\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/restricted-shadowing-modern.rs:235:33\n+  --> $DIR/restricted-shadowing-modern.rs:233:33\n    |\n LL |             macro gen_invoc() { m!() }\n    |                                 ^ ambiguous name"}, {"sha": "4944f2649b738690ffeeeae6614fd6a1a24ef1c3", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:43:12\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:39:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here"}, {"sha": "61be0778c99c52d9f5de557343a08321b48a1813", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,16 +1,16 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:43:12\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:39:12\n    |\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 37:15\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:37:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 33:15\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:33:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 37:18\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:37:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 33:18\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:33:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^"}, {"sha": "4944f2649b738690ffeeeae6614fd6a1a24ef1c3", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:43:12\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:39:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here"}, {"sha": "046d010002e6e7a9ad26f0fbb04e8ee53ab67fd8", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -8,8 +8,6 @@\n \n #![allow(dead_code)]\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub trait TheTrait {\n     type TheAssocType;\n }\n@@ -28,8 +26,6 @@ impl<'b> TheTrait for TheType<'b> {\n impl<'b> TheSubTrait for TheType<'b> {\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub struct WithAssoc<T:TheSubTrait> {\n     m: [T; 0]\n }"}, {"sha": "5ad6e23cf2a63ae8c50a97ccd75bdc816a03d1a1", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --cfg something\n // edition:2018\n \n-#![feature(async_await, async_closure, param_attrs)]\n+#![feature(async_closure, param_attrs)]\n #![deny(unused_variables)]\n \n extern \"C\" {"}, {"sha": "f3474bc1f9f8119a97d3dd8e36b1a1dcdf4d96a5", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::pin::Pin;\n use std::task::{Context, Poll};\n "}, {"sha": "a585b4fdbe608f974c673070d1eecd71e7ec2db9", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:48\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:48\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          -                     ^^^^^^^^ returning this value requires that `'_` must outlive `'static`"}, {"sha": "0afe631f1e3fc03921e8539f2eee46ca69cc546f", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::pin::Pin;\n \n struct Foo;"}, {"sha": "2fb152475a1effdf8332d70448c18a5c13e4ecd8", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,17 +1,17 @@\n error: cannot infer an appropriate lifetime\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:16\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                ^^^^                 ---------- this return type evaluates to the `'static` lifetime...\n    |                |\n    |                ...but this borrow...\n    |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 10:26\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:26\n+note: ...can't outlive the lifetime '_ as defined on the method body at 8:26\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:26\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 10:26\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 8:26\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                     ^^^^^^^^^^^^^^^"}, {"sha": "e53d91c360489c1f5e6ac7e627f70d23e1faae80", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:45\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:50\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:50\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          -                       ^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n@@ -16,7 +16,7 @@ LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          lifetime `'_` defined here\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:13:73\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:73\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                          -                                              ^^^^^^^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n@@ -25,15 +25,15 @@ LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (\n    |                          lifetime `'_` defined here\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:58\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                                          ^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:62\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:62\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                  --              -                           ^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'a`"}, {"sha": "f42337d53406216a492778bf9691a8c4306b8b17", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n use std::pin::Pin;\n \n struct Foo;"}, {"sha": "57ad026bdcf975d2cc7111d2d894d1bced6c0276", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:45\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          ----               ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n    |                          this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:13:55\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:55\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n    |                          -----                        ^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (\n    |                          this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:17:58\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                  -----                   ^^^"}, {"sha": "9743c13909658b7fa8b4cc2645d1737b257423ba", "filename": "src/test/ui/self/elision/alias-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "fa5968de5acc22db778ab62e4570bc9ee25e9dd3", "filename": "src/test/ui/self/elision/assoc-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "cc5badaaa6ef6836852eeb1736d38004f12b7d84", "filename": "src/test/ui/self/elision/lt-alias-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "f060800e4da5214a0db9cfe3d7c018199a749a0f", "filename": "src/test/ui/self/elision/lt-assoc-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "998178dde1df18d8b05351da863c645a0ca8a830", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:15:42\n+  --> $DIR/lt-ref-self-async.rs:13:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:15:47\n+  --> $DIR/lt-ref-self-async.rs:13:47\n    |\n LL |       async fn ref_self(&self, f: &u32) -> &u32 {\n    |  _______________________-_______________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:21:48\n+  --> $DIR/lt-ref-self-async.rs:19:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:21:53\n+  --> $DIR/lt-ref-self-async.rs:19:53\n    |\n LL |       async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |  _____________________________-_______________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:25:57\n+  --> $DIR/lt-ref-self-async.rs:23:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:25:62\n+  --> $DIR/lt-ref-self-async.rs:23:62\n    |\n LL |       async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |  _____________________________________-________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:29:57\n+  --> $DIR/lt-ref-self-async.rs:27:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:29:62\n+  --> $DIR/lt-ref-self-async.rs:27:62\n    |\n LL |       async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |  _____________________________________-________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:33:66\n+  --> $DIR/lt-ref-self-async.rs:31:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:33:71\n+  --> $DIR/lt-ref-self-async.rs:31:71\n    |\n LL |       async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_________________________^\n@@ -99,15 +99,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/lt-ref-self-async.rs:37:62\n+  --> $DIR/lt-ref-self-async.rs:35:62\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                              ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#23r\n \n error: lifetime may not live long enough\n-  --> $DIR/lt-ref-self-async.rs:37:67\n+  --> $DIR/lt-ref-self-async.rs:35:67\n    |\n LL |       async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |  _________________________________________-_________________________^"}, {"sha": "e3ca0c2e2dd9d6a33e4d84c7072c9cc575ff41d7", "filename": "src/test/ui/self/elision/lt-ref-self-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "2bc64bdf1f7a2cee037e3ef27a17ee304ca5cf53", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:15:42\n+  --> $DIR/lt-ref-self-async.rs:13:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:21:48\n+  --> $DIR/lt-ref-self-async.rs:19:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:25:57\n+  --> $DIR/lt-ref-self-async.rs:23:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:29:57\n+  --> $DIR/lt-ref-self-async.rs:27:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:33:66\n+  --> $DIR/lt-ref-self-async.rs:31:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ^^^^\n@@ -44,7 +44,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/lt-ref-self-async.rs:37:62\n+  --> $DIR/lt-ref-self-async.rs:35:62\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                         -----                ^^^^"}, {"sha": "42647b82ef8e73c7c8fac93128c14834ae276c5f", "filename": "src/test/ui/self/elision/lt-self-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "dc5a53b89d78622bd0e69f17e12484176f526237", "filename": "src/test/ui/self/elision/lt-struct-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "be073c6edbad55bd5ed25b97e7a2208827b4db37", "filename": "src/test/ui/self/elision/multiple-ref-self-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "4b02c2fd00c86fad81d11aad9dff88cb98f11be7", "filename": "src/test/ui/self/elision/ref-alias-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "258e27b7cb3bc0fb3c27f81b984e7cfb60d75ed1", "filename": "src/test/ui/self/elision/ref-assoc-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "5f9ccf3bc7f2bbcaa543d4bc9e97c8fb3a9ed0c5", "filename": "src/test/ui/self/elision/ref-mut-alias-async.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,6 @@\n // edition:2018\n // check-pass\n \n-#![feature(async_await)]\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "97bc80509dfea51634176f5865e3f8edd5075ef6", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:15:46\n+  --> $DIR/ref-mut-self-async.rs:13:46\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                                              ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:15:51\n+  --> $DIR/ref-mut-self-async.rs:13:51\n    |\n LL |       async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |  _______________________-___________________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:21:52\n+  --> $DIR/ref-mut-self-async.rs:19:52\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:21:57\n+  --> $DIR/ref-mut-self-async.rs:19:57\n    |\n LL |       async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |  _____________________________-___________________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:25:61\n+  --> $DIR/ref-mut-self-async.rs:23:61\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:25:66\n+  --> $DIR/ref-mut-self-async.rs:23:66\n    |\n LL |       async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |  _____________________________________-____________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:29:61\n+  --> $DIR/ref-mut-self-async.rs:27:61\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:29:66\n+  --> $DIR/ref-mut-self-async.rs:27:66\n    |\n LL |       async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |  _____________________________________-____________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:33:70\n+  --> $DIR/ref-mut-self-async.rs:31:70\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:33:75\n+  --> $DIR/ref-mut-self-async.rs:31:75\n    |\n LL |       async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_____________________________^\n@@ -99,15 +99,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-self-async.rs:37:70\n+  --> $DIR/ref-mut-self-async.rs:35:70\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-self-async.rs:37:75\n+  --> $DIR/ref-mut-self-async.rs:35:75\n    |\n LL |       async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_____________________________^"}, {"sha": "2ca14800a7556ce689d97e95c924a3753fbf07e9", "filename": "src/test/ui/self/elision/ref-mut-self-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "39a1b30ca53296151b465d4c0e164e56dc0a4aa9", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:15:46\n+  --> $DIR/ref-mut-self-async.rs:13:46\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       ---------              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:21:52\n+  --> $DIR/ref-mut-self-async.rs:19:52\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             ---------              ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:25:61\n+  --> $DIR/ref-mut-self-async.rs:23:61\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:29:61\n+  --> $DIR/ref-mut-self-async.rs:27:61\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:33:70\n+  --> $DIR/ref-mut-self-async.rs:31:70\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ^^^^\n@@ -44,7 +44,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:37:70\n+  --> $DIR/ref-mut-self-async.rs:35:70\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ^^^^"}, {"sha": "2905a022e5d6ee0352f10ceeeefb1728110ba6f9", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:15:56\n+  --> $DIR/ref-mut-struct-async.rs:13:56\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                                                        ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:15:61\n+  --> $DIR/ref-mut-struct-async.rs:13:61\n    |\n LL |       async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |  _______________________________-_____________________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:19:65\n+  --> $DIR/ref-mut-struct-async.rs:17:65\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:19:70\n+  --> $DIR/ref-mut-struct-async.rs:17:70\n    |\n LL |       async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |  _______________________________________-______________________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:23:65\n+  --> $DIR/ref-mut-struct-async.rs:21:65\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                                                 ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:23:70\n+  --> $DIR/ref-mut-struct-async.rs:21:70\n    |\n LL |       async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |  _______________________________________-______________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:27:74\n+  --> $DIR/ref-mut-struct-async.rs:25:74\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:27:79\n+  --> $DIR/ref-mut-struct-async.rs:25:79\n    |\n LL |       async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |  _______________________________________________-_______________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-mut-struct-async.rs:31:74\n+  --> $DIR/ref-mut-struct-async.rs:29:74\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-mut-struct-async.rs:31:79\n+  --> $DIR/ref-mut-struct-async.rs:29:79\n    |\n LL |       async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |  _______________________________________________-_______________________________^"}, {"sha": "a671116de25431241a3ff729a36e08a06af0323a", "filename": "src/test/ui/self/elision/ref-mut-struct-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "fe4a636ada66898a2d045305534e6099ea5e3d8b", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:15:56\n+  --> $DIR/ref-mut-struct-async.rs:13:56\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               -----------              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n    |                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:19:65\n+  --> $DIR/ref-mut-struct-async.rs:17:65\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:23:65\n+  --> $DIR/ref-mut-struct-async.rs:21:65\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       -----------               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:27:74\n+  --> $DIR/ref-mut-struct-async.rs:25:74\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u\n    |                                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-struct-async.rs:31:74\n+  --> $DIR/ref-mut-struct-async.rs:29:74\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n    |                                               -----------                ^^^^"}, {"sha": "0eee56654f7d19692e89ba40bdfd234ed26479b6", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:24:42\n+  --> $DIR/ref-self-async.rs:22:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                                          ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:24:47\n+  --> $DIR/ref-self-async.rs:22:47\n    |\n LL |       async fn ref_self(&self, f: &u32) -> &u32 {\n    |  _______________________-_______________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:30:48\n+  --> $DIR/ref-self-async.rs:28:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                                                ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:30:53\n+  --> $DIR/ref-self-async.rs:28:53\n    |\n LL |       async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |  _____________________________-_______________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:34:57\n+  --> $DIR/ref-self-async.rs:32:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:34:62\n+  --> $DIR/ref-self-async.rs:32:62\n    |\n LL |       async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |  _____________________________________-________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:38:57\n+  --> $DIR/ref-self-async.rs:36:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                                         ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:38:62\n+  --> $DIR/ref-self-async.rs:36:62\n    |\n LL |       async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |  _____________________________________-________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:42:66\n+  --> $DIR/ref-self-async.rs:40:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:42:71\n+  --> $DIR/ref-self-async.rs:40:71\n    |\n LL |       async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_________________________^\n@@ -99,15 +99,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:46:66\n+  --> $DIR/ref-self-async.rs:44:66\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:46:71\n+  --> $DIR/ref-self-async.rs:44:71\n    |\n LL |       async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |  _____________________________________________-_________________________^\n@@ -119,15 +119,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-self-async.rs:50:69\n+  --> $DIR/ref-self-async.rs:48:69\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                                                     ^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-self-async.rs:50:73\n+  --> $DIR/ref-self-async.rs:48:73\n    |\n LL |       async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |  ____________________________________________-____________________________^"}, {"sha": "06f3b127b216a90ee0bc85188e2e1a5d945a6033", "filename": "src/test/ui/self/elision/ref-self-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "2f9e2a01e347cee1030cfb1bbe2f15167041a684", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:24:42\n+  --> $DIR/ref-self-async.rs:22:42\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       -----              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:30:48\n+  --> $DIR/ref-self-async.rs:28:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:34:57\n+  --> $DIR/ref-self-async.rs:32:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:38:57\n+  --> $DIR/ref-self-async.rs:36:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:42:66\n+  --> $DIR/ref-self-async.rs:40:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ^^^^\n@@ -44,7 +44,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:46:66\n+  --> $DIR/ref-self-async.rs:44:66\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ^^^^\n@@ -53,7 +53,7 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:50:69\n+  --> $DIR/ref-self-async.rs:48:69\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                            -----                    ^^^"}, {"sha": "8508e42264b4a797514505ad824bd76311e37080", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,13 +1,13 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:15:52\n+  --> $DIR/ref-struct-async.rs:13:52\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                                                    ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:15:57\n+  --> $DIR/ref-struct-async.rs:13:57\n    |\n LL |       async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |  _______________________________-_________________________^\n@@ -19,15 +19,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:19:61\n+  --> $DIR/ref-struct-async.rs:17:61\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:19:66\n+  --> $DIR/ref-struct-async.rs:17:66\n    |\n LL |       async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |  _______________________________________-__________________________^\n@@ -39,15 +39,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:23:61\n+  --> $DIR/ref-struct-async.rs:21:61\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                                             ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:23:66\n+  --> $DIR/ref-struct-async.rs:21:66\n    |\n LL |       async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |  _______________________________________-__________________________^\n@@ -59,15 +59,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:27:70\n+  --> $DIR/ref-struct-async.rs:25:70\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                                                      ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:27:75\n+  --> $DIR/ref-struct-async.rs:25:75\n    |\n LL |       async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |  _______________________________________________-___________________________^\n@@ -79,15 +79,15 @@ LL | |     }\n    | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ref-struct-async.rs:31:66\n+  --> $DIR/ref-struct-async.rs:29:66\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                                                  ^^^^\n    |\n    = note: hidden type `impl std::future::Future` captures lifetime '_#15r\n \n error: lifetime may not live long enough\n-  --> $DIR/ref-struct-async.rs:31:71\n+  --> $DIR/ref-struct-async.rs:29:71\n    |\n LL |       async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |  ___________________________________________-___________________________^"}, {"sha": "94eaeedc734ff403b4e70d5041e8b0b325d97cc5", "filename": "src/test/ui/self/elision/ref-struct-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "222e27ebf0d97bd352d7a9814c5d87868516aaa2", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:15:52\n+  --> $DIR/ref-struct-async.rs:13:52\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               -------              ^^^^\n@@ -8,7 +8,7 @@ LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n    |                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:19:61\n+  --> $DIR/ref-struct-async.rs:17:61\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:23:61\n+  --> $DIR/ref-struct-async.rs:21:61\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       -------               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n    |                                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:27:70\n+  --> $DIR/ref-struct-async.rs:25:70\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               -------                ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n    |                                               this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-struct-async.rs:31:66\n+  --> $DIR/ref-struct-async.rs:29:66\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n    |                                           -------                ^^^^"}, {"sha": "e1379bfaf2e491faad3b29b14a2035e49c2fc755", "filename": "src/test/ui/self/elision/self-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "4a38a2164c82a6181fe23fb375aae60b9328b88f", "filename": "src/test/ui/self/elision/struct-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n #![feature(arbitrary_self_types)]\n #![allow(non_snake_case)]\n "}, {"sha": "c3c6e56582d9f25af18404520bdb2dc113afc35e", "filename": "src/test/ui/self/self_lifetime-async.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -1,8 +1,6 @@\n // check-pass\n // edition:2018\n \n-#![feature(async_await)]\n-\n struct Foo<'a>(&'a ());\n impl<'a> Foo<'a> {\n     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }"}, {"sha": "bf0c1dc27ce43e9a0fbea89f23ffceab736a3f77", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     let vs = &vx;\n     let vsm = &mut vec![X(Y)];\n \n-    // -------- test for duplicate suggestions --------\n+    // test for duplicate suggestions\n \n     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n     //~^ ERROR cannot move"}, {"sha": "f1e043c30f213e99e4fddaede6937b5ec9644a17", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -22,7 +22,7 @@ fn move_into_fn() {\n \n     let x = X(Y);\n \n-    // -------- move into Fn --------\n+    // move into Fn\n \n     consume_fn(|| {\n         let X(_t) = x;\n@@ -89,7 +89,7 @@ fn move_into_fnmut() {\n \n     let x = X(Y);\n \n-    // -------- move into FnMut --------\n+    // move into FnMut\n \n     consume_fnmut(|| {\n         let X(_t) = x;"}, {"sha": "c53ac3d2cd684fcecf5de1061354ee5254a94ec5", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -33,7 +33,7 @@ pub fn main() {\n     let vs = &vx;\n     let vsm = &mut vec![X(Y)];\n \n-    // -------- move from Either/X place --------\n+    // move from Either/X place\n \n     let X(_t) = *s;\n     //~^ ERROR cannot move\n@@ -163,7 +163,7 @@ pub fn main() {\n         // FIXME: should suggest removing `ref` too\n     }\n \n-    // -------- move from &Either/&X place --------\n+    // move from &Either/&X place\n \n     let &X(_t) = s;\n     //~^ ERROR cannot move\n@@ -251,7 +251,7 @@ pub fn main() {\n     //~| HELP consider removing the `&mut`\n     //~| SUGGESTION X(_t)\n \n-    // -------- move from tuple of &Either/&X --------\n+    // move from tuple of &Either/&X\n \n     // FIXME: These should have suggestions.\n \n@@ -283,7 +283,7 @@ pub fn main() {\n     fn f4((&mut X(_t),): (&mut X,)) { }\n     //~^ ERROR cannot move\n \n-    // -------- move from &Either/&X value --------\n+    // move from &Either/&X value\n \n     let &X(_t) = &x;\n     //~^ ERROR cannot move"}, {"sha": "ba88670032c95049ecbb32ca1346608d0e699197", "filename": "src/test/ui/traits/traits-conditional-model-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Ftraits%2Ftraits-conditional-model-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008/src%2Ftest%2Fui%2Ftraits%2Ftraits-conditional-model-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-conditional-model-fn.rs?ref=bea0372a1a7a31b81f28cc4d9a83a2dc9a79d008", "patch": "@@ -6,7 +6,6 @@\n \n // aux-build:go_trait.rs\n \n-\n extern crate go_trait;\n \n use go_trait::{Go, GoMut, GoOnce, go, go_mut, go_once};"}]}