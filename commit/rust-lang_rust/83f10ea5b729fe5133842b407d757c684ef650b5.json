{"sha": "83f10ea5b729fe5133842b407d757c684ef650b5", "node_id": "C_kwDOAAsO6NoAKDgzZjEwZWE1YjcyOWZlNTEzMzg0MmI0MDdkNzU3YzY4NGVmNjUwYjU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-15T06:54:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-15T06:54:53Z"}, "message": "Rollup merge of #105300 - aliemjay:member-lower, r=oli-obk\n\nrework min_choice algorithm of member constraints\n\nSee [this comment](https://github.com/rust-lang/rust/pull/105300#issuecomment-1384312743) for the description of the new algorithm.\n\nFixes #63033\nFixes #104639\n\nThis uses a more general algorithm than #89056 that doesn't treat `'static` as a special case. It thus accepts more code. For example:\n```rust\nasync fn test2<'s>(_: &'s u8, _: &'_ &'s u8, _: &'_ &'s u8) {}\n```\nI claim it's more correct as well because it fixes #104639.\n\ncc ``@nikomatsakis`` ``@lqd`` ``@tmandry`` ``@eholk`` ``@chenyukang`` ``@oli-obk``\n\nr? types", "tree": {"sha": "3bdfc0ab3b8eb6e6d3bbeb1185d69682c2dbd11f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bdfc0ab3b8eb6e6d3bbeb1185d69682c2dbd11f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f10ea5b729fe5133842b407d757c684ef650b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7IG9CRBK7hj4Ov3rIwAApMcIAKWL/BwVlEsOgOfeY0Jvx07j\nXNb0G0GuTBEKYuy0umdbEpK5whQLT0GF+pO1A2i3RmfxdxSdoc1KJcgQ7UAzHlV6\nMXunmS3dJojfGJBkEFeLKQ0uQgdh8hue3sNKUj2e+aGarTUwpUoWWeArbswle+3D\n/1s1Ln039qJIpY24Y6f4HFd+Dc/6sC17W3tEgils7DFfLBpVK7ck0zMnDVMfuXq8\nolcps3SxxtAwq0kb7lZuT/g0Gn2xW0Qxqxp0j1mFXhZTgf4hfE9gBbq1SP7/+Yr2\n0NXouLf4MDJcK150djflGeBAlQnIxm3DEaHqm6TLYiNwo6P/g/HN0P7U1/V4pqU=\n=x/6D\n-----END PGP SIGNATURE-----\n", "payload": "tree 3bdfc0ab3b8eb6e6d3bbeb1185d69682c2dbd11f\nparent 0416b1a6f6d5c42696494e1a3a33580fd3f669d8\nparent 837c1aff0546edca18b43fbfc65b8dacf0b0b699\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1676444093 +0530\ncommitter GitHub <noreply@github.com> 1676444093 +0530\n\nRollup merge of #105300 - aliemjay:member-lower, r=oli-obk\n\nrework min_choice algorithm of member constraints\n\nSee [this comment](https://github.com/rust-lang/rust/pull/105300#issuecomment-1384312743) for the description of the new algorithm.\n\nFixes #63033\nFixes #104639\n\nThis uses a more general algorithm than #89056 that doesn't treat `'static` as a special case. It thus accepts more code. For example:\n```rust\nasync fn test2<'s>(_: &'s u8, _: &'_ &'s u8, _: &'_ &'s u8) {}\n```\nI claim it's more correct as well because it fixes #104639.\n\ncc ``@nikomatsakis`` ``@lqd`` ``@tmandry`` ``@eholk`` ``@chenyukang`` ``@oli-obk``\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f10ea5b729fe5133842b407d757c684ef650b5", "html_url": "https://github.com/rust-lang/rust/commit/83f10ea5b729fe5133842b407d757c684ef650b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f10ea5b729fe5133842b407d757c684ef650b5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0416b1a6f6d5c42696494e1a3a33580fd3f669d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0416b1a6f6d5c42696494e1a3a33580fd3f669d8", "html_url": "https://github.com/rust-lang/rust/commit/0416b1a6f6d5c42696494e1a3a33580fd3f669d8"}, {"sha": "837c1aff0546edca18b43fbfc65b8dacf0b0b699", "url": "https://api.github.com/repos/rust-lang/rust/commits/837c1aff0546edca18b43fbfc65b8dacf0b0b699", "html_url": "https://github.com/rust-lang/rust/commit/837c1aff0546edca18b43fbfc65b8dacf0b0b699"}], "stats": {"total": 299, "additions": 288, "deletions": 11}, "files": [{"sha": "f2693bded590bb73505e9eb4ccc7a45e5860109c", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/83f10ea5b729fe5133842b407d757c684ef650b5/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f10ea5b729fe5133842b407d757c684ef650b5/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=83f10ea5b729fe5133842b407d757c684ef650b5", "patch": "@@ -746,20 +746,33 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n         debug!(?choice_regions, \"after ub\");\n \n-        // If we ruled everything out, we're done.\n-        if choice_regions.is_empty() {\n-            return false;\n-        }\n-\n-        // Otherwise, we need to find the minimum remaining choice, if\n-        // any, and take that.\n-        debug!(\"choice_regions remaining are {:#?}\", choice_regions);\n-        let Some(&min_choice) = choice_regions.iter().find(|&r1| {\n+        // At this point we can pick any member of `choice_regions`, but to avoid potential\n+        // non-determinism we will pick the *unique minimum* choice.\n+        //\n+        // Because universal regions are only partially ordered (i.e, not every two regions are\n+        // comparable), we will ignore any region that doesn't compare to all others when picking\n+        // the minimum choice.\n+        // For example, consider `choice_regions = ['static, 'a, 'b, 'c, 'd, 'e]`, where\n+        // `'static: 'a, 'static: 'b, 'a: 'c, 'b: 'c, 'c: 'd, 'c: 'e`.\n+        // `['d, 'e]` are ignored because they do not compare - the same goes for `['a, 'b]`.\n+        let totally_ordered_subset = choice_regions.iter().copied().filter(|&r1| {\n             choice_regions.iter().all(|&r2| {\n-                self.universal_region_relations.outlives(r2, *r1)\n+                self.universal_region_relations.outlives(r1, r2)\n+                    || self.universal_region_relations.outlives(r2, r1)\n             })\n+        });\n+        // Now we're left with `['static, 'c]`. Pick `'c` as the minimum!\n+        let Some(min_choice) = totally_ordered_subset.reduce(|r1, r2| {\n+            let r1_outlives_r2 = self.universal_region_relations.outlives(r1, r2);\n+            let r2_outlives_r1 = self.universal_region_relations.outlives(r2, r1);\n+            match (r1_outlives_r2, r2_outlives_r1) {\n+                (true, true) => r1.min(r2),\n+                (true, false) => r2,\n+                (false, true) => r1,\n+                (false, false) => bug!(\"incomparable regions in total order\"),\n+            }\n         }) else {\n-            debug!(\"no choice region outlived by all others\");\n+            debug!(\"no unique minimum choice\");\n             return false;\n         };\n "}, {"sha": "614f189729126535ab324194f7c85e41647381ce", "filename": "tests/ui/async-await/multiple-lifetimes/member-constraints-min-choice-issue-63033.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fmember-constraints-min-choice-issue-63033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fmember-constraints-min-choice-issue-63033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fmember-constraints-min-choice-issue-63033.rs?ref=83f10ea5b729fe5133842b407d757c684ef650b5", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for #63033.\n+\n+// check-pass\n+// edition: 2018\n+\n+async fn test1(_: &'static u8, _: &'_ u8, _: &'_ u8) {}\n+\n+async fn test2<'s>(_: &'s u8, _: &'_ &'s u8, _: &'_ &'s u8) {}\n+\n+fn main() {}"}, {"sha": "52ea0f28d69f30cf58c8da8a743c160220368441", "filename": "tests/ui/nll/member-constraints/min-choice-reject-ambiguous.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice-reject-ambiguous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice-reject-ambiguous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice-reject-ambiguous.rs?ref=83f10ea5b729fe5133842b407d757c684ef650b5", "patch": "@@ -0,0 +1,43 @@\n+// ... continued from ./min-choice.rs\n+\n+// check-fail\n+\n+trait Cap<'a> {}\n+impl<T> Cap<'_> for T {}\n+\n+fn type_test<'a, T: 'a>() -> &'a u8 { &0 }\n+\n+// Make sure we don't pick `'b`.\n+fn test_b<'a, 'b, 'c, T>() -> impl Cap<'a> + Cap<'b> + Cap<'c>\n+where\n+    'a: 'b,\n+    'a: 'c,\n+    T: 'b,\n+{\n+    type_test::<'_, T>() // This should pass if we pick 'b.\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+// Make sure we don't pick `'c`.\n+fn test_c<'a, 'b, 'c, T>() -> impl Cap<'a> + Cap<'b> + Cap<'c>\n+where\n+    'a: 'b,\n+    'a: 'c,\n+    T: 'c,\n+{\n+    type_test::<'_, T>() // This should pass if we pick 'c.\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+// We need to pick min_choice from `['b, 'c]`, but it's ambiguous which one to pick because\n+// they're incomparable.\n+fn test_ambiguous<'a, 'b, 'c>(s: &'a u8) -> impl Cap<'b> + Cap<'c>\n+where\n+    'a: 'b,\n+    'a: 'c,\n+{\n+    s\n+    //~^ ERROR captures lifetime that does not appear in bounds\n+}\n+\n+fn main() {}"}, {"sha": "1e6ef614dee247b2bf2c7f4704155ab10d735104", "filename": "tests/ui/nll/member-constraints/min-choice-reject-ambiguous.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice-reject-ambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice-reject-ambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice-reject-ambiguous.stderr?ref=83f10ea5b729fe5133842b407d757c684ef650b5", "patch": "@@ -0,0 +1,40 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/min-choice-reject-ambiguous.rs:17:5\n+   |\n+LL |     type_test::<'_, T>() // This should pass if we pick 'b.\n+   |     ^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: 'b + 'a,\n+   |           ++++\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/min-choice-reject-ambiguous.rs:28:5\n+   |\n+LL |     type_test::<'_, T>() // This should pass if we pick 'c.\n+   |     ^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: 'c + 'a,\n+   |           ++++\n+\n+error[E0700]: hidden type for `impl Cap<'b> + Cap<'c>` captures lifetime that does not appear in bounds\n+  --> $DIR/min-choice-reject-ambiguous.rs:39:5\n+   |\n+LL | fn test_ambiguous<'a, 'b, 'c>(s: &'a u8) -> impl Cap<'b> + Cap<'c>\n+   |                   -- hidden type `&'a u8` captures the lifetime `'a` as defined here\n+...\n+LL |     s\n+   |     ^\n+   |\n+help: to declare that `impl Cap<'b> + Cap<'c>` captures `'a`, you can add an explicit `'a` lifetime bound\n+   |\n+LL | fn test_ambiguous<'a, 'b, 'c>(s: &'a u8) -> impl Cap<'b> + Cap<'c> + 'a\n+   |                                                                    ++++\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0309, E0700.\n+For more information about an error, try `rustc --explain E0309`."}, {"sha": "14b4dae7abfde2cfafda40e5b3bd57fd11d75476", "filename": "tests/ui/nll/member-constraints/min-choice.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice.rs?ref=83f10ea5b729fe5133842b407d757c684ef650b5", "patch": "@@ -0,0 +1,34 @@\n+// Assuming that the hidden type in these tests is `&'_#15r u8`,\n+// we have a member constraint: `'_#15r member ['static, 'a, 'b, 'c]`.\n+//\n+// Make sure we pick up the minimum non-ambiguous region among them.\n+// We will have to exclude `['b, 'c]` because they're incomparable,\n+// and then we should pick `'a` because we know `'static: 'a`.\n+\n+// check-pass\n+\n+trait Cap<'a> {}\n+impl<T> Cap<'_> for T {}\n+\n+fn type_test<'a, T: 'a>() -> &'a u8 { &0 }\n+\n+// Basic test: make sure we don't bail out because 'b and 'c are incomparable.\n+fn basic<'a, 'b, 'c>() -> impl Cap<'a> + Cap<'b> + Cap<'c>\n+where\n+    'a: 'b,\n+    'a: 'c,\n+{\n+    &0\n+}\n+\n+// Make sure we don't pick `'static`.\n+fn test_static<'a, 'b, 'c, T>() -> impl Cap<'a> + Cap<'b> + Cap<'c>\n+where\n+    'a: 'b,\n+    'a: 'c,\n+    T: 'a,\n+{\n+    type_test::<'_, T>() // This will fail if we pick 'static\n+}\n+\n+fn main() {}"}, {"sha": "66ff828a84f7ce2459ac35d783f32cd1b6f87501", "filename": "tests/ui/nll/member-constraints/nested-impl-trait-fail.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.rs?ref=83f10ea5b729fe5133842b407d757c684ef650b5", "patch": "@@ -0,0 +1,33 @@\n+// Nested impl-traits can impose different member constraints on the same region variable.\n+\n+// check-fail\n+\n+trait Cap<'a> {}\n+impl<T> Cap<'_> for T {}\n+\n+// Assuming the hidden type is `[&'_#15r u8; 1]`, we have two distinct member constraints:\n+// - '_#15r member ['static, 'a, 'b] // from outer impl-trait\n+// - '_#15r member ['static, 'a, 'b] // from inner impl-trait\n+// To satisfy both we can choose 'a or 'b, so it's a failure due to ambiguity.\n+fn fail_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>\n+where\n+    's: 'a,\n+    's: 'b,\n+{\n+    [a]\n+    //~^ E0700\n+    //~| E0700\n+}\n+\n+// Same as the above but with late-bound regions.\n+fn fail_late_bound<'s, 'a, 'b>(\n+    a: &'s u8,\n+    _: &'a &'s u8,\n+    _: &'b &'s u8,\n+) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>> {\n+    [a]\n+    //~^ E0700\n+    //~| E0700\n+}\n+\n+fn main() {}"}, {"sha": "6824e27ead02876ce842fa9b98f8ac4a361d3714", "filename": "tests/ui/nll/member-constraints/nested-impl-trait-fail.stderr", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.stderr?ref=83f10ea5b729fe5133842b407d757c684ef650b5", "patch": "@@ -0,0 +1,75 @@\n+error[E0700]: hidden type for `impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>` captures lifetime that does not appear in bounds\n+  --> $DIR/nested-impl-trait-fail.rs:17:5\n+   |\n+LL | fn fail_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>\n+   |                     -- hidden type `[&'s u8; 1]` captures the lifetime `'s` as defined here\n+...\n+LL |     [a]\n+   |     ^^^\n+   |\n+help: to declare that `impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>` captures `'s`, you can add an explicit `'s` lifetime bound\n+   |\n+LL | fn fail_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>> + 's\n+   |                                                                                                ++++\n+help: to declare that `impl Cap<'a> + Cap<'b>` captures `'s`, you can add an explicit `'s` lifetime bound\n+   |\n+LL | fn fail_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b> + 's>\n+   |                                                                                               ++++\n+\n+error[E0700]: hidden type for `impl Cap<'a> + Cap<'b>` captures lifetime that does not appear in bounds\n+  --> $DIR/nested-impl-trait-fail.rs:17:5\n+   |\n+LL | fn fail_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>\n+   |                     -- hidden type `&'s u8` captures the lifetime `'s` as defined here\n+...\n+LL |     [a]\n+   |     ^^^\n+   |\n+help: to declare that `impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>` captures `'s`, you can add an explicit `'s` lifetime bound\n+   |\n+LL | fn fail_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>> + 's\n+   |                                                                                                ++++\n+help: to declare that `impl Cap<'a> + Cap<'b>` captures `'s`, you can add an explicit `'s` lifetime bound\n+   |\n+LL | fn fail_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b> + 's>\n+   |                                                                                               ++++\n+\n+error[E0700]: hidden type for `impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>` captures lifetime that does not appear in bounds\n+  --> $DIR/nested-impl-trait-fail.rs:28:5\n+   |\n+LL | fn fail_late_bound<'s, 'a, 'b>(\n+   |                    -- hidden type `[&'s u8; 1]` captures the lifetime `'s` as defined here\n+...\n+LL |     [a]\n+   |     ^^^\n+   |\n+help: to declare that `impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>` captures `'s`, you can add an explicit `'s` lifetime bound\n+   |\n+LL | ) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>> + 's {\n+   |                                                       ++++\n+help: to declare that `impl Cap<'a> + Cap<'b>` captures `'s`, you can add an explicit `'s` lifetime bound\n+   |\n+LL | ) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b> + 's> {\n+   |                                                      ++++\n+\n+error[E0700]: hidden type for `impl Cap<'a> + Cap<'b>` captures lifetime that does not appear in bounds\n+  --> $DIR/nested-impl-trait-fail.rs:28:5\n+   |\n+LL | fn fail_late_bound<'s, 'a, 'b>(\n+   |                    -- hidden type `&'s u8` captures the lifetime `'s` as defined here\n+...\n+LL |     [a]\n+   |     ^^^\n+   |\n+help: to declare that `impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>` captures `'s`, you can add an explicit `'s` lifetime bound\n+   |\n+LL | ) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>> + 's {\n+   |                                                       ++++\n+help: to declare that `impl Cap<'a> + Cap<'b>` captures `'s`, you can add an explicit `'s` lifetime bound\n+   |\n+LL | ) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b> + 's> {\n+   |                                                      ++++\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "15540cb460e7a6a29994e374eaabbf1a4d44712b", "filename": "tests/ui/nll/member-constraints/nested-impl-trait-pass.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f10ea5b729fe5133842b407d757c684ef650b5/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-pass.rs?ref=83f10ea5b729fe5133842b407d757c684ef650b5", "patch": "@@ -0,0 +1,29 @@\n+// Nested impl-traits can impose different member constraints on the same region variable.\n+\n+// check-pass\n+\n+trait Cap<'a> {}\n+impl<T> Cap<'_> for T {}\n+\n+// Assuming the hidden type is `[&'_#15r u8; 1]`, we have two distinct member constraints:\n+// - '_#15r member ['static, 'a, 'b] // from outer impl-trait\n+// - '_#15r member ['static, 'a]     // from inner impl-trait\n+// To satisfy both we can only choose 'a.\n+fn pass_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a>> + Cap<'b>\n+where\n+    's: 'a,\n+    's: 'b,\n+{\n+    [a]\n+}\n+\n+// Same as the above but with late-bound regions.\n+fn pass_late_bound<'s, 'a, 'b>(\n+    a: &'s u8,\n+    _: &'a &'s u8,\n+    _: &'b &'s u8,\n+) -> impl IntoIterator<Item = impl Cap<'a>> + Cap<'b> {\n+    [a]\n+}\n+\n+fn main() {}"}]}