{"sha": "c678bd722ea6fe8d1827787d5ecd411a77f411ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NzhiZDcyMmVhNmZlOGQxODI3Nzg3ZDVlY2Q0MTFhNzdmNDExY2E=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-01-24T21:45:45Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-01-26T08:13:54Z"}, "message": "Add random failures to compare_exchange_weak", "tree": {"sha": "4ea6c75c4cce9eefd739364ea8f9549c360084a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ea6c75c4cce9eefd739364ea8f9549c360084a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c678bd722ea6fe8d1827787d5ecd411a77f411ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c678bd722ea6fe8d1827787d5ecd411a77f411ca", "html_url": "https://github.com/rust-lang/rust/commit/c678bd722ea6fe8d1827787d5ecd411a77f411ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c678bd722ea6fe8d1827787d5ecd411a77f411ca/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de0800e83b4e15cf3c6aa8f15f8328e86a95d955", "url": "https://api.github.com/repos/rust-lang/rust/commits/de0800e83b4e15cf3c6aa8f15f8328e86a95d955", "html_url": "https://github.com/rust-lang/rust/commit/de0800e83b4e15cf3c6aa8f15f8328e86a95d955"}], "stats": {"total": 65, "additions": 45, "deletions": 20}, "files": [{"sha": "31a167af8899af93413a963bd9f4191ce81c4bd4", "filename": "src/data_race.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c678bd722ea6fe8d1827787d5ecd411a77f411ca/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c678bd722ea6fe8d1827787d5ecd411a77f411ca/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=c678bd722ea6fe8d1827787d5ecd411a77f411ca", "patch": "@@ -75,7 +75,7 @@ use rustc_target::abi::Size;\n \n use crate::{\n     ImmTy, Immediate, InterpResult, MPlaceTy, MemPlaceMeta, MiriEvalContext, MiriEvalContextExt,\n-    OpTy, Pointer, RangeMap, ScalarMaybeUninit, Tag, ThreadId, VClock, VTimestamp,\n+    OpTy, Pointer, RangeMap, Scalar, ScalarMaybeUninit, Tag, ThreadId, VClock, VTimestamp,\n     VectorIdx, MemoryKind, MiriMemoryKind\n };\n \n@@ -544,31 +544,42 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n \n     /// Perform an atomic compare and exchange at a given memory location.\n     /// On success an atomic RMW operation is performed and on failure\n-    /// only an atomic read occurs.\n+    /// only an atomic read occurs. If `can_fail_spuriously` is true,\n+    /// then we treat it as a \"compare_exchange_weak\" operation, and\n+    /// some portion of the time fail even when the values are actually\n+    /// identical.\n     fn atomic_compare_exchange_scalar(\n         &mut self,\n         place: MPlaceTy<'tcx, Tag>,\n         expect_old: ImmTy<'tcx, Tag>,\n         new: ScalarMaybeUninit<Tag>,\n         success: AtomicRwOp,\n         fail: AtomicReadOp,\n+        can_fail_spuriously: bool,\n     ) -> InterpResult<'tcx, Immediate<Tag>> {\n+        use rand::Rng as _;\n         let this = self.eval_context_mut();\n \n         // Failure ordering cannot be stronger than success ordering, therefore first attempt\n         // to read with the failure ordering and if successful then try again with the success\n         // read ordering and write in the success case.\n         // Read as immediate for the sake of `binary_op()`\n         let old = this.allow_data_races_mut(|this| this.read_immediate(place.into()))?;\n-\n         // `binary_op` will bail if either of them is not a scalar.\n         let eq = this.overflowing_binary_op(mir::BinOp::Eq, old, expect_old)?.0;\n-        let res = Immediate::ScalarPair(old.to_scalar_or_uninit(), eq.into());\n+        // If the operation would succeed, but is \"weak\", fail 50% of the time.\n+        // FIXME: this is quite arbitrary.\n+        let cmpxchg_success = eq.to_bool()?\n+            && (!can_fail_spuriously || this.memory.extra.rng.borrow_mut().gen_range(0, 2) == 0);\n+        let res = Immediate::ScalarPair(\n+            old.to_scalar_or_uninit(),\n+            Scalar::from_bool(cmpxchg_success).into(),\n+        );\n \n         // Update ptr depending on comparison.\n         // if successful, perform a full rw-atomic validation\n         // otherwise treat this as an atomic load with the fail ordering.\n-        if eq.to_bool()? {\n+        if cmpxchg_success {\n             this.allow_data_races_mut(|this| this.write_scalar(new, place.into()))?;\n             this.validate_atomic_rmw(place, success)?;\n         } else {"}, {"sha": "73419a9f97647251e9483bbb9077020b633b15a1", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c678bd722ea6fe8d1827787d5ecd411a77f411ca/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c678bd722ea6fe8d1827787d5ecd411a77f411ca/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=c678bd722ea6fe8d1827787d5ecd411a77f411ca", "patch": "@@ -518,9 +518,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(())\n     }\n \n-    fn atomic_compare_exchange(\n+    fn atomic_compare_exchange_impl(\n         &mut self, args: &[OpTy<'tcx, Tag>], dest: PlaceTy<'tcx, Tag>,\n-        success: AtomicRwOp, fail: AtomicReadOp\n+        success: AtomicRwOp, fail: AtomicReadOp, can_fail_spuriously: bool\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n@@ -538,22 +538,26 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         \n         let old = this.atomic_compare_exchange_scalar(\n-            place, expect_old, new, success, fail\n+            place, expect_old, new, success, fail, can_fail_spuriously\n         )?;\n \n         // Return old value.\n         this.write_immediate(old, dest)?;\n         Ok(())\n     }\n \n-    fn atomic_compare_exchange_weak(\n+    fn atomic_compare_exchange(\n         &mut self, args: &[OpTy<'tcx, Tag>], dest: PlaceTy<'tcx, Tag>,\n         success: AtomicRwOp, fail: AtomicReadOp\n     ) -> InterpResult<'tcx> {\n+        self.atomic_compare_exchange_impl(args, dest, success, fail, false)\n+    }\n \n-        // FIXME: the weak part of this is currently not modelled,\n-        //  it is assumed to always succeed unconditionally.\n-        self.atomic_compare_exchange(args, dest, success, fail)\n+    fn atomic_compare_exchange_weak(\n+        &mut self, args: &[OpTy<'tcx, Tag>], dest: PlaceTy<'tcx, Tag>,\n+        success: AtomicRwOp, fail: AtomicReadOp\n+    ) -> InterpResult<'tcx> {\n+        self.atomic_compare_exchange_impl(args, dest, success, fail, true)\n     }\n \n     fn float_to_int_unchecked<F>("}, {"sha": "4ebca71c7cf381d5c76a4f6fba2673cdd7a64a2a", "filename": "tests/run-pass/atomic.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c678bd722ea6fe8d1827787d5ecd411a77f411ca/tests%2Frun-pass%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c678bd722ea6fe8d1827787d5ecd411a77f411ca/tests%2Frun-pass%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fatomic.rs?ref=c678bd722ea6fe8d1827787d5ecd411a77f411ca", "patch": "@@ -24,7 +24,20 @@ fn atomic_bool() {\n         assert_eq!(*ATOMIC.get_mut(), false);\n     }\n }\n-\n+// There isn't a trait to use to make this generic, so just use a macro\n+macro_rules! compare_exchange_weak_loop {\n+    ($atom:expr, $from:expr, $to:expr, $succ_order:expr, $fail_order:expr) => {\n+        loop {\n+            match $atom.compare_exchange_weak($from, $to, $succ_order, $fail_order) {\n+                Ok(n) => {\n+                    assert_eq!(n, $from);\n+                    break;\n+                }\n+                Err(n) => assert_eq!(n, $from),\n+            }\n+        }\n+    };\n+}\n fn atomic_isize() {\n     static ATOMIC: AtomicIsize = AtomicIsize::new(0);\n \n@@ -40,11 +53,11 @@ fn atomic_isize() {\n     ATOMIC.compare_exchange(0, 1, SeqCst, SeqCst).ok();\n \n     ATOMIC.store(0, SeqCst);\n-\n-    assert_eq!(ATOMIC.compare_exchange_weak(0, 1, Relaxed, Relaxed), Ok(0));\n+    compare_exchange_weak_loop!(ATOMIC, 0, 1, Relaxed, Relaxed);\n     assert_eq!(ATOMIC.compare_exchange_weak(0, 2, Acquire, Relaxed), Err(1));\n     assert_eq!(ATOMIC.compare_exchange_weak(0, 1, Release, Relaxed), Err(1));\n-    assert_eq!(ATOMIC.compare_exchange_weak(1, 0, AcqRel, Relaxed), Ok(1));\n+    compare_exchange_weak_loop!(ATOMIC, 1, 0, AcqRel, Relaxed);\n+    assert_eq!(ATOMIC.load(Relaxed), 0);\n     ATOMIC.compare_exchange_weak(0, 1, AcqRel, Relaxed).ok();\n     ATOMIC.compare_exchange_weak(0, 1, SeqCst, Relaxed).ok();\n     ATOMIC.compare_exchange_weak(0, 1, Acquire, Acquire).ok();\n@@ -58,10 +71,7 @@ fn atomic_u64() {\n \n     ATOMIC.store(1, SeqCst);\n     assert_eq!(ATOMIC.compare_exchange(0, 0x100, AcqRel, Acquire), Err(1));\n-    assert_eq!(\n-        ATOMIC.compare_exchange_weak(1, 0x100, AcqRel, Acquire),\n-        Ok(1)\n-    );\n+    compare_exchange_weak_loop!(ATOMIC, 1, 0x100, AcqRel, Acquire);\n     assert_eq!(ATOMIC.load(Relaxed), 0x100);\n }\n "}]}