{"sha": "c158a0f59270297a66058b9abac36d3e6e21ac37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNThhMGY1OTI3MDI5N2E2NjA1OGI5YWJhYzM2ZDNlNmUyMWFjMzc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-10T23:57:03Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-11T00:57:42Z"}, "message": "Remove unnecessary unwraps", "tree": {"sha": "397d3e30c1d043d22dfb6dfb3368b9fa9cf960ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/397d3e30c1d043d22dfb6dfb3368b9fa9cf960ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c158a0f59270297a66058b9abac36d3e6e21ac37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c158a0f59270297a66058b9abac36d3e6e21ac37", "html_url": "https://github.com/rust-lang/rust/commit/c158a0f59270297a66058b9abac36d3e6e21ac37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c158a0f59270297a66058b9abac36d3e6e21ac37/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33cde4aac2ec1b0a493d0acaa4c4fb45de0c6e94", "url": "https://api.github.com/repos/rust-lang/rust/commits/33cde4aac2ec1b0a493d0acaa4c4fb45de0c6e94", "html_url": "https://github.com/rust-lang/rust/commit/33cde4aac2ec1b0a493d0acaa4c4fb45de0c6e94"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "77d2ffab8efb4e1bb32c8b9a64f52afe2c9b10f8", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c158a0f59270297a66058b9abac36d3e6e21ac37/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c158a0f59270297a66058b9abac36d3e6e21ac37/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c158a0f59270297a66058b9abac36d3e6e21ac37", "patch": "@@ -91,14 +91,21 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     CandidateSource::ImplSource(impl_did) => {\n                         // Provide the best span we can. Use the item, if local to crate, else\n                         // the impl, if local to crate (item may be defaulted), else nothing.\n-                        let item = self.associated_item(impl_did, item_name, Namespace::Value)\n-                            .or_else(|| {\n-                                self.associated_item(\n-                                    self.tcx.impl_trait_ref(impl_did).unwrap().def_id,\n-                                    item_name,\n-                                    Namespace::Value,\n-                                )\n-                            }).unwrap();\n+                        let item = match self.associated_item(\n+                            impl_did,\n+                            item_name,\n+                            Namespace::Value,\n+                        ).or_else(|| {\n+                            let impl_trait_ref = self.tcx.impl_trait_ref(impl_did)?;\n+                            self.associated_item(\n+                                impl_trait_ref.def_id,\n+                                item_name,\n+                                Namespace::Value,\n+                            )\n+                        }) {\n+                            Some(item) => item,\n+                            None => continue,\n+                        };\n                         let note_span = self.tcx.hir().span_if_local(item.def_id).or_else(|| {\n                             self.tcx.hir().span_if_local(impl_did)\n                         });\n@@ -132,9 +139,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                     CandidateSource::TraitSource(trait_did) => {\n-                        let item = self\n-                            .associated_item(trait_did, item_name, Namespace::Value)\n-                            .unwrap();\n+                        let item = match self.associated_item(\n+                            trait_did,\n+                            item_name,\n+                            Namespace::Value)\n+                        {\n+                            Some(item) => item,\n+                            None => continue,\n+                        };\n                         let item_span = self.tcx.sess.source_map()\n                             .def_span(self.tcx.def_span(item.def_id));\n                         if sources.len() > 1 {\n@@ -251,8 +263,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 if let &QPath::Resolved(_, ref path) = &qpath {\n                                     if let hir::def::Res::Local(hir_id) = path.res {\n                                         let span = tcx.hir().span_by_hir_id(hir_id);\n-                                        let snippet = tcx.sess.source_map().span_to_snippet(span)\n-                                            .unwrap();\n+                                        let snippet = tcx.sess.source_map().span_to_snippet(span);\n                                         let filename = tcx.sess.source_map().span_to_filename(span);\n \n                                         let parent_node = self.tcx.hir().get_by_hir_id(\n@@ -263,12 +274,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                             concrete_type,\n                                         );\n \n-                                        match (filename, parent_node) {\n+                                        match (filename, parent_node, snippet) {\n                                             (FileName::Real(_), Node::Local(hir::Local {\n                                                 source: hir::LocalSource::Normal,\n                                                 ty,\n                                                 ..\n-                                            })) => {\n+                                            }), Ok(ref snippet)) => {\n                                                 err.span_suggestion(\n                                                     // account for `let x: _ = 42;`\n                                                     //                  ^^^^\n@@ -375,14 +386,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id),\n                                 );\n \n-                                let span = call_expr.span.trim_start(item_name.span).unwrap();\n-\n-                                err.span_suggestion(\n-                                    span,\n-                                    \"remove the arguments\",\n-                                    String::new(),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n+                                if let Some(span) = call_expr.span.trim_start(item_name.span) {\n+                                    err.span_suggestion(\n+                                        span,\n+                                        \"remove the arguments\",\n+                                        String::new(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n                             }\n                         }\n "}]}