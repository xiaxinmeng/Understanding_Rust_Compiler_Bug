{"sha": "f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YTk5YWU3ZmI0M2ZkNDQ1MTJlMmY5Mjk0YzJjMTg2ZTc3NmVkMzY=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-09-16T17:01:15Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-09-17T07:02:59Z"}, "message": "Remove Visibility field from enum variants\n\nFollowup on #28440", "tree": {"sha": "ba1c3c3b65fc71fdcd6d6a1f4907eee35cd0cdc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba1c3c3b65fc71fdcd6d6a1f4907eee35cd0cdc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "html_url": "https://github.com/rust-lang/rust/commit/f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3be84c6c81c63e11f62105a9befcc39b9a17081", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3be84c6c81c63e11f62105a9befcc39b9a17081", "html_url": "https://github.com/rust-lang/rust/commit/e3be84c6c81c63e11f62105a9befcc39b9a17081"}], "stats": {"total": 44, "additions": 7, "deletions": 37}, "files": [{"sha": "8ee13a408465d8f20aa8499322519b1bbb5d6402", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -415,7 +415,7 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,\n }\n \n pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n-    v.map(|Spanned {node: Variant_ {id, name, attrs, kind, disr_expr, vis}, span}| Spanned {\n+    v.map(|Spanned {node: Variant_ {id, name, attrs, kind, disr_expr}, span}| Spanned {\n         node: Variant_ {\n             id: fld.new_id(id),\n             name: name,\n@@ -430,7 +430,6 @@ pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n                 }\n             },\n             disr_expr: disr_expr.map(|e| fld.fold_expr(e)),\n-            vis: vis,\n         },\n         span: fld.new_span(span),\n     })"}, {"sha": "8a4cfa28c1d4d1e5df1172f45f339bc3b303e9c6", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -1055,7 +1055,6 @@ pub struct Variant_ {\n     pub id: NodeId,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,\n-    pub vis: Visibility,\n }\n \n pub type Variant = Spanned<Variant_>;"}, {"sha": "aeaf20cd9d0814799a604c18aa004a1b904819ae", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -147,7 +147,6 @@ pub fn lower_variant(v: &Variant) -> P<hir::Variant> {\n                 }\n             },\n             disr_expr: v.node.disr_expr.as_ref().map(|e| lower_expr(e)),\n-            vis: lower_visibility(v.node.vis),\n         },\n         span: v.span,\n     })"}, {"sha": "4231a7c69b18ac6f64f36542c34d208232acba22", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -944,7 +944,6 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_variant(&mut self, v: &hir::Variant) -> io::Result<()> {\n-        try!(self.print_visibility(v.node.vis));\n         match v.node.kind {\n             hir::TupleVariantKind(ref args) => {\n                 try!(self.print_ident(v.node.name));"}, {"sha": "0384e7b693245e3025a6f4b2b6c412f0b518f265", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -1075,20 +1075,7 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                                  instead\");\n             }\n \n-            hir::ItemEnum(ref def, _) => {\n-                for v in &def.variants {\n-                    match v.node.vis {\n-                        hir::Public => {\n-                            if item.vis == hir::Public {\n-                                span_err!(tcx.sess, v.span, E0448,\n-                                          \"unnecessary `pub` visibility\");\n-                            }\n-                        }\n-                        hir::Inherited => {}\n-                    }\n-                }\n-            }\n-\n+            hir::ItemEnum(..) |\n             hir::ItemTrait(..) | hir::ItemDefaultImpl(..) |\n             hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemStruct(..) |\n             hir::ItemFn(..) | hir::ItemMod(..) | hir::ItemTy(..) |\n@@ -1131,14 +1118,10 @@ impl<'a, 'tcx> SanePrivacyVisitor<'a, 'tcx> {\n                     check_inherited(tcx, i.span, i.vis);\n                 }\n             }\n-            hir::ItemEnum(ref def, _) => {\n-                for v in &def.variants {\n-                    check_inherited(tcx, v.span, v.node.vis);\n-                }\n-            }\n \n             hir::ItemStruct(ref def, _) => check_struct(&**def),\n \n+            hir::ItemEnum(..) |\n             hir::ItemExternCrate(_) | hir::ItemUse(_) |\n             hir::ItemTrait(..) | hir::ItemDefaultImpl(..) |\n             hir::ItemStatic(..) | hir::ItemConst(..) |"}, {"sha": "7ed572d7caa7df73e1fc475e4110261aec0fd9f4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -1850,7 +1850,7 @@ impl Clean<Item> for doctree::Variant {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            visibility: self.vis.clean(cx),\n+            visibility: None,\n             stability: self.stab.clean(cx),\n             def_id: DefId::local(self.id),\n             inner: VariantItem(Variant {"}, {"sha": "e2286ca819a00ed16e07f376d1cfff935d8853d8", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -121,7 +121,6 @@ pub struct Variant {\n     pub attrs: Vec<ast::Attribute>,\n     pub kind: hir::VariantKind,\n     pub id: ast::NodeId,\n-    pub vis: hir::Visibility,\n     pub stab: Option<attr::Stability>,\n     pub whence: Span,\n }"}, {"sha": "1a20a31560bd749b29d7b11bce65a55e1c7c06c0", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -109,7 +109,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             variants: def.variants.iter().map(|v| Variant {\n                 name: v.node.name,\n                 attrs: v.node.attrs.clone(),\n-                vis: v.node.vis,\n                 stab: self.stability(v.node.id),\n                 id: v.node.id,\n                 kind: v.node.kind.clone(),"}, {"sha": "58d92f5001aaeffbc9d2c6c5df4382a384529864", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -1614,7 +1614,6 @@ pub struct Variant_ {\n     pub id: NodeId,\n     /// Explicit discriminant, eg `Foo = 1`\n     pub disr_expr: Option<P<Expr>>,\n-    pub vis: Visibility,\n }\n \n pub type Variant = Spanned<Variant_>;"}, {"sha": "889a0d7e440e1e3d0e887aa2581aadbe6fec82bf", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -141,7 +141,7 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n                     None\n                 } else {\n                     Some(v.map(|Spanned {node: ast::Variant_ {id, name, attrs, kind,\n-                                                              disr_expr, vis}, span}| {\n+                                                              disr_expr}, span}| {\n                         Spanned {\n                             node: ast::Variant_ {\n                                 id: id,\n@@ -154,7 +154,6 @@ fn fold_item_underscore<F>(cx: &mut Context<F>, item: ast::Item_) -> ast::Item_\n                                     }\n                                 },\n                                 disr_expr: disr_expr,\n-                                vis: vis\n                             },\n                             span: span\n                         }"}, {"sha": "f8beb0e36e2c34ee869ffd40694260b458bc0090", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -1013,7 +1013,6 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                    kind: ast::TupleVariantKind(args),\n                    id: ast::DUMMY_NODE_ID,\n                    disr_expr: None,\n-                   vis: ast::Public\n                })\n     }\n "}, {"sha": "a73cc420eeb04af11d89c517d0f4fb7911a0727c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -450,7 +450,7 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod {abi, items}: ForeignMod,\n }\n \n pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n-    v.map(|Spanned {node: Variant_ {id, name, attrs, kind, disr_expr, vis}, span}| Spanned {\n+    v.map(|Spanned {node: Variant_ {id, name, attrs, kind, disr_expr}, span}| Spanned {\n         node: Variant_ {\n             id: fld.new_id(id),\n             name: name,\n@@ -465,7 +465,6 @@ pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n                 }\n             },\n             disr_expr: disr_expr.map(|e| fld.fold_expr(e)),\n-            vis: vis,\n         },\n         span: fld.new_span(span),\n     })"}, {"sha": "d4f7509e0c337891fbaf968bdf2dbb886b6971f5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -5245,7 +5245,6 @@ impl<'a> Parser<'a> {\n                 kind: kind,\n                 id: ast::DUMMY_NODE_ID,\n                 disr_expr: disr_expr,\n-                vis: Inherited,\n             };\n             variants.push(P(spanned(vlo, self.last_span.hi, vr)));\n "}, {"sha": "8d92eaffb9eb6c55d92e42c01c5bc05ba3adda27", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5a99ae7fb43fd44512e2f9294c2c186e776ed36/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f5a99ae7fb43fd44512e2f9294c2c186e776ed36", "patch": "@@ -1507,7 +1507,6 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_variant(&mut self, v: &ast::Variant) -> io::Result<()> {\n-        try!(self.print_visibility(v.node.vis));\n         match v.node.kind {\n             ast::TupleVariantKind(ref args) => {\n                 try!(self.print_ident(v.node.name));\n@@ -3139,11 +3138,10 @@ mod tests {\n             kind: ast::TupleVariantKind(Vec::new()),\n             id: 0,\n             disr_expr: None,\n-            vis: ast::Public,\n         });\n \n         let varstr = variant_to_string(&var);\n-        assert_eq!(varstr, \"pub principal_skinner\");\n+        assert_eq!(varstr, \"principal_skinner\");\n     }\n \n     #[test]"}]}