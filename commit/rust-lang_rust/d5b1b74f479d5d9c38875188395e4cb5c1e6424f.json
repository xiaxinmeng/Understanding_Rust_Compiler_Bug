{"sha": "d5b1b74f479d5d9c38875188395e4cb5c1e6424f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YjFiNzRmNDc5ZDVkOWMzODg3NTE4ODM5NWU0Y2I1YzFlNjQyNGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-15T07:11:38Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-17T05:22:40Z"}, "message": "Record visibility of reexports for all items, not just type items", "tree": {"sha": "0cc57eda118065c8fcc91b235c68e32b16daa306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cc57eda118065c8fcc91b235c68e32b16daa306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5b1b74f479d5d9c38875188395e4cb5c1e6424f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5b1b74f479d5d9c38875188395e4cb5c1e6424f", "html_url": "https://github.com/rust-lang/rust/commit/d5b1b74f479d5d9c38875188395e4cb5c1e6424f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5b1b74f479d5d9c38875188395e4cb5c1e6424f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8534be72fc3b9c5f2f2dc4e4ee7b651a008e9a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8534be72fc3b9c5f2f2dc4e4ee7b651a008e9a3e", "html_url": "https://github.com/rust-lang/rust/commit/8534be72fc3b9c5f2f2dc4e4ee7b651a008e9a3e"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "735446d235c2e65154489af5826d637edf611ab9", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d5b1b74f479d5d9c38875188395e4cb5c1e6424f/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5b1b74f479d5d9c38875188395e4cb5c1e6424f/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=d5b1b74f479d5d9c38875188395e4cb5c1e6424f", "patch": "@@ -303,26 +303,22 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         if !res_did.is_local() && !is_no_inline {\n             let attrs = clean::inline::load_attrs(self.cx, res_did);\n             let self_is_hidden = attrs.lists(sym::doc).has_word(sym::hidden);\n-            match res {\n-                Res::Def(\n-                    DefKind::Trait\n-                    | DefKind::Struct\n-                    | DefKind::Union\n-                    | DefKind::Enum\n-                    | DefKind::ForeignTy\n-                    | DefKind::TyAlias,\n-                    did,\n-                ) if !self_is_hidden => {\n-                    self.cx.renderinfo.get_mut().access_levels.map.insert(did, AccessLevel::Public);\n-                }\n-                Res::Def(DefKind::Mod, did) => {\n-                    if !self_is_hidden {\n-                        crate::visit_lib::LibEmbargoVisitor::new(self.cx).visit_mod(did);\n+            if !self_is_hidden {\n+                if let Res::Def(kind, did) = res {\n+                    if kind == DefKind::Mod {\n+                        crate::visit_lib::LibEmbargoVisitor::new(self.cx).visit_mod(did)\n+                    } else {\n+                        // All items need to be handled here in case someone wishes to link\n+                        // to them with intra-doc links\n+                        self.cx\n+                            .renderinfo\n+                            .get_mut()\n+                            .access_levels\n+                            .map\n+                            .insert(did, AccessLevel::Public);\n                     }\n                 }\n-                _ => {}\n             }\n-\n             return false;\n         }\n "}]}