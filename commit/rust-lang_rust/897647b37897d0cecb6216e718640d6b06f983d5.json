{"sha": "897647b37897d0cecb6216e718640d6b06f983d5", "node_id": "C_kwDOAAsO6NoAKDg5NzY0N2IzNzg5N2QwY2VjYjYyMTZlNzE4NjQwZDZiMDZmOTgzZDU", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-10T23:00:03Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-10T23:00:03Z"}, "message": "rustdoc: remove redundant `if s.is_empty()` from `find_testable_code`", "tree": {"sha": "82f343a1c1c20c47c9cc7e588b1a75f51cb1f389", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82f343a1c1c20c47c9cc7e588b1a75f51cb1f389"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/897647b37897d0cecb6216e718640d6b06f983d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/897647b37897d0cecb6216e718640d6b06f983d5", "html_url": "https://github.com/rust-lang/rust/commit/897647b37897d0cecb6216e718640d6b06f983d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/897647b37897d0cecb6216e718640d6b06f983d5/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cca42a47f5d574c8f7302c98c3f918cdc772fbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cca42a47f5d574c8f7302c98c3f918cdc772fbb", "html_url": "https://github.com/rust-lang/rust/commit/8cca42a47f5d574c8f7302c98c3f918cdc772fbb"}], "stats": {"total": 6, "additions": 1, "deletions": 5}, "files": [{"sha": "d547730a7425cd8b49fb98d49ae3c53bd0c822a5", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/897647b37897d0cecb6216e718640d6b06f983d5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/897647b37897d0cecb6216e718640d6b06f983d5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=897647b37897d0cecb6216e718640d6b06f983d5", "patch": "@@ -787,11 +787,7 @@ pub(crate) fn find_testable_code<T: doctest::Tester>(\n             }\n             Event::Text(ref s) if register_header.is_some() => {\n                 let level = register_header.unwrap();\n-                if s.is_empty() {\n-                    tests.register_header(\"\", level);\n-                } else {\n-                    tests.register_header(s, level);\n-                }\n+                tests.register_header(s, level);\n                 register_header = None;\n             }\n             _ => {}"}]}