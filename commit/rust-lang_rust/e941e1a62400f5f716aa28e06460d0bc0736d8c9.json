{"sha": "e941e1a62400f5f716aa28e06460d0bc0736d8c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NDFlMWE2MjQwMGY1ZjcxNmFhMjhlMDY0NjBkMGJjMDczNmQ4Yzk=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-12-06T06:48:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-06T06:48:57Z"}, "message": "Rollup merge of #56500 - ljedrz:cleanup_rest_of_const_lifetimes, r=zackmdavis\n\ncleanup: remove static lifetimes from consts\n\nA follow-up to https://github.com/rust-lang/rust/pull/56497.", "tree": {"sha": "4af0a2634efe1298e72e91c96a18a9c5da9e9160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4af0a2634efe1298e72e91c96a18a9c5da9e9160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e941e1a62400f5f716aa28e06460d0bc0736d8c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCMZZCRBK7hj4Ov3rIwAAdHIIAI07sy64ZuS7JQzf+Ej3l6FI\na7Ee/f2KLEl6PH+DWJngCTFZCIc33QAMJlRqXxNr1dL5z5WqjK2aWcs/f6/1Pxxj\n3MbkbHONUxuejTWLQ+44pSJN0SN7BNbLM5uhT4Xf99fkGk+0MUdoLSLTCDYcrjsD\nXXcxu+4kGjeDhjcFORHPD1Fe3rBocUMZ5342+0lh9+L6GmlGXsaIN1T8vNYFPUrY\n/yApOlPc7UIP9bNDPUPNAbCZn9EyQ09K33a8nY8IQNcOok9BLYvHsWt7G6keVRSm\npa/jdY7WsXo2XwaoHg645fYIgwmy+uRdh+etqV0xRzSkHHC/44wUm/JgMJabFhg=\n=dSXg\n-----END PGP SIGNATURE-----\n", "payload": "tree 4af0a2634efe1298e72e91c96a18a9c5da9e9160\nparent 50148a95668c3587a544ab08dda8abb270a59f54\nparent d0c64bb29631fc5e5fafbe88374e7e1325b70ba5\nauthor Pietro Albini <pietro@pietroalbini.org> 1544078937 +0100\ncommitter GitHub <noreply@github.com> 1544078937 +0100\n\nRollup merge of #56500 - ljedrz:cleanup_rest_of_const_lifetimes, r=zackmdavis\n\ncleanup: remove static lifetimes from consts\n\nA follow-up to https://github.com/rust-lang/rust/pull/56497.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e941e1a62400f5f716aa28e06460d0bc0736d8c9", "html_url": "https://github.com/rust-lang/rust/commit/e941e1a62400f5f716aa28e06460d0bc0736d8c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e941e1a62400f5f716aa28e06460d0bc0736d8c9/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50148a95668c3587a544ab08dda8abb270a59f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/50148a95668c3587a544ab08dda8abb270a59f54", "html_url": "https://github.com/rust-lang/rust/commit/50148a95668c3587a544ab08dda8abb270a59f54"}, {"sha": "d0c64bb29631fc5e5fafbe88374e7e1325b70ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c64bb29631fc5e5fafbe88374e7e1325b70ba5", "html_url": "https://github.com/rust-lang/rust/commit/d0c64bb29631fc5e5fafbe88374e7e1325b70ba5"}], "stats": {"total": 179, "additions": 88, "deletions": 91}, "files": [{"sha": "acc1f9b306e7d7968835d6287fd23dba90efc906", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -577,7 +577,7 @@ impl String {\n             return Cow::Borrowed(\"\");\n         };\n \n-        const REPLACEMENT: &'static str = \"\\u{FFFD}\";\n+        const REPLACEMENT: &str = \"\\u{FFFD}\";\n \n         let mut res = String::with_capacity(v.len());\n         res.push_str(first_valid);"}, {"sha": "0c5256b981e5cc63d1cb9abc9d348b5b9f1c0162", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -1381,7 +1381,7 @@ impl<'a> Formatter<'a> {\n         for part in formatted.parts {\n             match *part {\n                 flt2dec::Part::Zero(mut nzeroes) => {\n-                    const ZEROES: &'static str = // 64 zeroes\n+                    const ZEROES: &str = // 64 zeroes\n                         \"0000000000000000000000000000000000000000000000000000000000000000\";\n                     while nzeroes > ZEROES.len() {\n                         self.buf.write_str(ZEROES)?;"}, {"sha": "32e4b6b0fa512e7eb3618c56eeb52ebf06078df8", "filename": "src/libcore/unicode/printable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibcore%2Funicode%2Fprintable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibcore%2Funicode%2Fprintable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fprintable.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -80,7 +80,7 @@ pub(crate) fn is_printable(x: char) -> bool {\n     }\n }\n \n-const SINGLETONS0U: &'static [(u8, u8)] = &[\n+const SINGLETONS0U: &[(u8, u8)] = &[\n     (0x00, 1),\n     (0x03, 5),\n     (0x05, 6),\n@@ -122,7 +122,7 @@ const SINGLETONS0U: &'static [(u8, u8)] = &[\n     (0xfe, 3),\n     (0xff, 9),\n ];\n-const SINGLETONS0L: &'static [u8] = &[\n+const SINGLETONS0L: &[u8] = &[\n     0xad, 0x78, 0x79, 0x8b, 0x8d, 0xa2, 0x30, 0x57,\n     0x58, 0x8b, 0x8c, 0x90, 0x1c, 0x1d, 0xdd, 0x0e,\n     0x0f, 0x4b, 0x4c, 0xfb, 0xfc, 0x2e, 0x2f, 0x3f,\n@@ -162,7 +162,7 @@ const SINGLETONS0L: &'static [u8] = &[\n     0x91, 0xfe, 0xff, 0x53, 0x67, 0x75, 0xc8, 0xc9,\n     0xd0, 0xd1, 0xd8, 0xd9, 0xe7, 0xfe, 0xff,\n ];\n-const SINGLETONS1U: &'static [(u8, u8)] = &[\n+const SINGLETONS1U: &[(u8, u8)] = &[\n     (0x00, 6),\n     (0x01, 1),\n     (0x03, 1),\n@@ -197,7 +197,7 @@ const SINGLETONS1U: &'static [(u8, u8)] = &[\n     (0xf0, 4),\n     (0xf9, 4),\n ];\n-const SINGLETONS1L: &'static [u8] = &[\n+const SINGLETONS1L: &[u8] = &[\n     0x0c, 0x27, 0x3b, 0x3e, 0x4e, 0x4f, 0x8f, 0x9e,\n     0x9e, 0x9f, 0x06, 0x07, 0x09, 0x36, 0x3d, 0x3e,\n     0x56, 0xf3, 0xd0, 0xd1, 0x04, 0x14, 0x18, 0x36,\n@@ -219,7 +219,7 @@ const SINGLETONS1L: &'static [u8] = &[\n     0x78, 0x7d, 0x7f, 0x8a, 0xa4, 0xaa, 0xaf, 0xb0,\n     0xc0, 0xd0, 0x3f, 0x71, 0x72, 0x7b,\n ];\n-const NORMAL0: &'static [u8] = &[\n+const NORMAL0: &[u8] = &[\n     0x00, 0x20,\n     0x5f, 0x22,\n     0x82, 0xdf, 0x04,\n@@ -363,7 +363,7 @@ const NORMAL0: &'static [u8] = &[\n     0x1b, 0x03,\n     0x0f, 0x0d,\n ];\n-const NORMAL1: &'static [u8] = &[\n+const NORMAL1: &[u8] = &[\n     0x5e, 0x22,\n     0x7b, 0x05,\n     0x03, 0x04,"}, {"sha": "a20d04972fd75e3b6d6ded58ceda05a265ccbedb", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -381,7 +381,7 @@ macro_rules! define_dep_nodes {\n         #[allow(dead_code, non_upper_case_globals)]\n         pub mod label_strs {\n            $(\n-                pub const $variant: &'static str = stringify!($variant);\n+                pub const $variant: &str = stringify!($variant);\n             )*\n         }\n     );"}, {"sha": "484722f8c131bb04834367253caffa801b11a964", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -65,7 +65,7 @@ pub trait PpAnn {\n \n pub struct NoAnn;\n impl PpAnn for NoAnn {}\n-pub const NO_ANN: &'static dyn PpAnn = &NoAnn;\n+pub const NO_ANN: &dyn PpAnn = &NoAnn;\n \n impl PpAnn for hir::Crate {\n     fn try_fetch_item(&self, item: ast::NodeId) -> Option<&hir::Item> {"}, {"sha": "fc2f1ee6ff892d4f241616e1afd05bf29c6fe083", "filename": "src/librustc/ich/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -24,15 +24,15 @@ mod impls_misc;\n mod impls_ty;\n mod impls_syntax;\n \n-pub const ATTR_DIRTY: &'static str = \"rustc_dirty\";\n-pub const ATTR_CLEAN: &'static str = \"rustc_clean\";\n-pub const ATTR_IF_THIS_CHANGED: &'static str = \"rustc_if_this_changed\";\n-pub const ATTR_THEN_THIS_WOULD_NEED: &'static str = \"rustc_then_this_would_need\";\n-pub const ATTR_PARTITION_REUSED: &'static str = \"rustc_partition_reused\";\n-pub const ATTR_PARTITION_CODEGENED: &'static str = \"rustc_partition_codegened\";\n-pub const ATTR_EXPECTED_CGU_REUSE: &'static str = \"rustc_expected_cgu_reuse\";\n+pub const ATTR_DIRTY: &str = \"rustc_dirty\";\n+pub const ATTR_CLEAN: &str = \"rustc_clean\";\n+pub const ATTR_IF_THIS_CHANGED: &str = \"rustc_if_this_changed\";\n+pub const ATTR_THEN_THIS_WOULD_NEED: &str = \"rustc_then_this_would_need\";\n+pub const ATTR_PARTITION_REUSED: &str = \"rustc_partition_reused\";\n+pub const ATTR_PARTITION_CODEGENED: &str = \"rustc_partition_codegened\";\n+pub const ATTR_EXPECTED_CGU_REUSE: &str = \"rustc_expected_cgu_reuse\";\n \n-pub const IGNORED_ATTRIBUTES: &'static [&'static str] = &[\n+pub const IGNORED_ATTRIBUTES: &[&str] = &[\n     \"cfg\",\n     ATTR_IF_THIS_CHANGED,\n     ATTR_THEN_THIS_WOULD_NEED,"}, {"sha": "f1ddcda823ee799927825dccf0834ed610732af6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -780,43 +780,42 @@ macro_rules! options {\n     }\n \n     pub type $setter_name = fn(&mut $struct_name, v: Option<&str>) -> bool;\n-    pub const $stat: &'static [(&'static str, $setter_name,\n-                                Option<&'static str>, &'static str)] =\n+    pub const $stat: &[(&str, $setter_name, Option<&str>, &str)] =\n         &[ $( (stringify!($opt), $mod_set::$opt, $mod_desc::$parse, $desc) ),* ];\n \n     #[allow(non_upper_case_globals, dead_code)]\n     mod $mod_desc {\n-        pub const parse_bool: Option<&'static str> = None;\n-        pub const parse_opt_bool: Option<&'static str> =\n+        pub const parse_bool: Option<&str> = None;\n+        pub const parse_opt_bool: Option<&str> =\n             Some(\"one of: `y`, `yes`, `on`, `n`, `no`, or `off`\");\n-        pub const parse_string: Option<&'static str> = Some(\"a string\");\n-        pub const parse_string_push: Option<&'static str> = Some(\"a string\");\n-        pub const parse_pathbuf_push: Option<&'static str> = Some(\"a path\");\n-        pub const parse_opt_string: Option<&'static str> = Some(\"a string\");\n-        pub const parse_opt_pathbuf: Option<&'static str> = Some(\"a path\");\n-        pub const parse_list: Option<&'static str> = Some(\"a space-separated list of strings\");\n-        pub const parse_opt_list: Option<&'static str> = Some(\"a space-separated list of strings\");\n-        pub const parse_uint: Option<&'static str> = Some(\"a number\");\n-        pub const parse_passes: Option<&'static str> =\n+        pub const parse_string: Option<&str> = Some(\"a string\");\n+        pub const parse_string_push: Option<&str> = Some(\"a string\");\n+        pub const parse_pathbuf_push: Option<&str> = Some(\"a path\");\n+        pub const parse_opt_string: Option<&str> = Some(\"a string\");\n+        pub const parse_opt_pathbuf: Option<&str> = Some(\"a path\");\n+        pub const parse_list: Option<&str> = Some(\"a space-separated list of strings\");\n+        pub const parse_opt_list: Option<&str> = Some(\"a space-separated list of strings\");\n+        pub const parse_uint: Option<&str> = Some(\"a number\");\n+        pub const parse_passes: Option<&str> =\n             Some(\"a space-separated list of passes, or `all`\");\n-        pub const parse_opt_uint: Option<&'static str> =\n+        pub const parse_opt_uint: Option<&str> =\n             Some(\"a number\");\n-        pub const parse_panic_strategy: Option<&'static str> =\n+        pub const parse_panic_strategy: Option<&str> =\n             Some(\"either `unwind` or `abort`\");\n-        pub const parse_relro_level: Option<&'static str> =\n+        pub const parse_relro_level: Option<&str> =\n             Some(\"one of: `full`, `partial`, or `off`\");\n-        pub const parse_sanitizer: Option<&'static str> =\n+        pub const parse_sanitizer: Option<&str> =\n             Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n-        pub const parse_linker_flavor: Option<&'static str> =\n+        pub const parse_linker_flavor: Option<&str> =\n             Some(::rustc_target::spec::LinkerFlavor::one_of());\n-        pub const parse_optimization_fuel: Option<&'static str> =\n+        pub const parse_optimization_fuel: Option<&str> =\n             Some(\"crate=integer\");\n-        pub const parse_unpretty: Option<&'static str> =\n+        pub const parse_unpretty: Option<&str> =\n             Some(\"`string` or `string=string`\");\n-        pub const parse_lto: Option<&'static str> =\n+        pub const parse_lto: Option<&str> =\n             Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, \\\n                   `fat`, or omitted\");\n-        pub const parse_cross_lang_lto: Option<&'static str> =\n+        pub const parse_cross_lang_lto: Option<&str> =\n             Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), \\\n                   or the path to the linker plugin\");\n     }"}, {"sha": "e686a1d1275b61a079508a60fe73826b1b3adaf4", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -179,12 +179,12 @@ fn find_libdir(sysroot: &Path) -> Cow<'static, str> {\n     // \"lib\" (i.e. non-default), this value is used (see issue #16552).\n \n     #[cfg(target_pointer_width = \"64\")]\n-    const PRIMARY_LIB_DIR: &'static str = \"lib64\";\n+    const PRIMARY_LIB_DIR: &str = \"lib64\";\n \n     #[cfg(target_pointer_width = \"32\")]\n-    const PRIMARY_LIB_DIR: &'static str = \"lib32\";\n+    const PRIMARY_LIB_DIR: &str = \"lib32\";\n \n-    const SECONDARY_LIB_DIR: &'static str = \"lib\";\n+    const SECONDARY_LIB_DIR: &str = \"lib\";\n \n     match option_env!(\"CFG_LIBDIR_RELATIVE\") {\n         Some(libdir) if libdir != \"lib\" => libdir.into(),\n@@ -198,4 +198,4 @@ fn find_libdir(sysroot: &Path) -> Cow<'static, str> {\n \n // The name of rustc's own place to organize libraries.\n // Used to be \"rustc\", now the default is \"rustlib\"\n-const RUST_LIB_DIR: &'static str = \"rustlib\";\n+const RUST_LIB_DIR: &str = \"rustlib\";"}, {"sha": "c6ba20de0d3b900377fbd1fb87e1ba77770c5847", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -28,7 +28,7 @@ use lazy_static;\n use session::Session;\n \n // The name of the associated type for `Fn` return types\n-pub const FN_OUTPUT_NAME: &'static str = \"Output\";\n+pub const FN_OUTPUT_NAME: &str = \"Output\";\n \n // Useful type to use with `Result<>` indicate that an error has already\n // been reported to the user, so no need to continue checking."}, {"sha": "ecae6197dc7ca398da545b52342fe75ac03cc55f", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -225,7 +225,7 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // These are weak symbols that point to the profile version and the\n         // profile name, which need to be treated as exported so LTO doesn't nix\n         // them.\n-        const PROFILER_WEAK_SYMBOLS: [&'static str; 2] = [\n+        const PROFILER_WEAK_SYMBOLS: [&str; 2] = [\n             \"__llvm_profile_raw_version\",\n             \"__llvm_profile_filename\",\n         ];"}, {"sha": "611d7b137c6f277915f4c7cb107b390f71b2ebc9", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -389,7 +389,7 @@ impl SymbolPathBuffer {\n \n impl ItemPathBuffer for SymbolPathBuffer {\n     fn root_mode(&self) -> &RootMode {\n-        const ABSOLUTE: &'static RootMode = &RootMode::Absolute;\n+        const ABSOLUTE: &RootMode = &RootMode::Absolute;\n         ABSOLUTE\n     }\n "}, {"sha": "17ac9a6b5397346d8fb8ce57d316e4c7f8799205", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -40,9 +40,9 @@ use syntax::ast;\n use rustc::ich::{ATTR_PARTITION_REUSED, ATTR_PARTITION_CODEGENED,\n                  ATTR_EXPECTED_CGU_REUSE};\n \n-const MODULE: &'static str = \"module\";\n-const CFG: &'static str = \"cfg\";\n-const KIND: &'static str = \"kind\";\n+const MODULE: &str = \"module\";\n+const CFG: &str = \"cfg\";\n+const KIND: &str = \"kind\";\n \n pub fn assert_module_sources<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.dep_graph.with_ignore(|| {"}, {"sha": "e5faba61782335f3ba61e084cb58032e91ba8358", "filename": "src/librustc_incremental/persist/file_format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -28,15 +28,15 @@ use rustc::session::config::nightly_options;\n use rustc_serialize::opaque::Encoder;\n \n /// The first few bytes of files generated by incremental compilation\n-const FILE_MAGIC: &'static [u8] = b\"RSIC\";\n+const FILE_MAGIC: &[u8] = b\"RSIC\";\n \n /// Change this if the header format changes\n const HEADER_FORMAT_VERSION: u16 = 0;\n \n /// A version string that hopefully is always different for compiler versions\n /// with different encodings of incremental compilation artifacts. Contains\n /// the git commit hash.\n-const RUSTC_VERSION: Option<&'static str> = option_env!(\"CFG_VERSION\");\n+const RUSTC_VERSION: Option<&str> = option_env!(\"CFG_VERSION\");\n \n pub fn write_file_header(stream: &mut Encoder) {\n     stream.emit_raw_bytes(FILE_MAGIC);"}, {"sha": "bc98798f77253e7ba37aa9a0694860d15d7b66b4", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -128,10 +128,10 @@ use std::time::{UNIX_EPOCH, SystemTime, Duration};\n \n use rand::{RngCore, thread_rng};\n \n-const LOCK_FILE_EXT: &'static str = \".lock\";\n-const DEP_GRAPH_FILENAME: &'static str = \"dep-graph.bin\";\n-const WORK_PRODUCTS_FILENAME: &'static str = \"work-products.bin\";\n-const QUERY_CACHE_FILENAME: &'static str = \"query-cache.bin\";\n+const LOCK_FILE_EXT: &str = \".lock\";\n+const DEP_GRAPH_FILENAME: &str = \"dep-graph.bin\";\n+const WORK_PRODUCTS_FILENAME: &str = \"work-products.bin\";\n+const QUERY_CACHE_FILENAME: &str = \"query-cache.bin\";\n \n // We encode integers using the following base, so they are shorter than decimal\n // or hexadecimal numbers (we want short file and directory names). Since these"}, {"sha": "fc3af6cf2e7320a248b9cb15211142bddf5f797f", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -52,7 +52,7 @@ pub const METADATA_VERSION: u8 = 4;\n /// This header is followed by the position of the `CrateRoot`,\n /// which is encoded as a 32-bit big-endian unsigned integer,\n /// and further followed by the rustc version string.\n-pub const METADATA_HEADER: &'static [u8; 12] =\n+pub const METADATA_HEADER: &[u8; 12] =\n     &[0, 0, 0, 0, b'r', b'u', b's', b't', 0, 0, 0, METADATA_VERSION];\n \n /// A value of type T referred to by its absolute position"}, {"sha": "f6a9d46b5e2cbe2ace966bc2debde39f5f19a8d2", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -137,8 +137,8 @@ where MWF: MirWithFlowState<'tcx>,\n                                          block: BasicBlock,\n                                          mir: &Mir) -> io::Result<()> {\n         // Header rows\n-        const HDRS: [&'static str; 4] = [\"ENTRY\", \"MIR\", \"BLOCK GENS\", \"BLOCK KILLS\"];\n-        const HDR_FMT: &'static str = \"bgcolor=\\\"grey\\\"\";\n+        const HDRS: [&str; 4] = [\"ENTRY\", \"MIR\", \"BLOCK GENS\", \"BLOCK KILLS\"];\n+        const HDR_FMT: &str = \"bgcolor=\\\"grey\\\"\";\n         write!(w, \"<table><tr><td rowspan=\\\"{}\\\">\", HDRS.len())?;\n         write!(w, \"{:?}\", block.index())?;\n         write!(w, \"</td></tr><tr>\")?;"}, {"sha": "ec5617d705248cb8894ff54b1e3db328eddafe93", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -606,7 +606,7 @@ static X: i32 = 1;\n const C: i32 = 2;\n \n // these three are not allowed:\n-const CR: &'static mut i32 = &mut C;\n+const CR: &mut i32 = &mut C;\n static STATIC_REF: &'static mut i32 = &mut X;\n static CONST_REF: &'static mut i32 = &mut C;\n ```\n@@ -1163,18 +1163,18 @@ You can also have this error while using a cell type:\n use std::cell::Cell;\n \n const A: Cell<usize> = Cell::new(1);\n-const B: &'static Cell<usize> = &A;\n+const B: &Cell<usize> = &A;\n // error: cannot borrow a constant which may contain interior mutability,\n //        create a static instead\n \n // or:\n struct C { a: Cell<usize> }\n \n const D: C = C { a: Cell::new(1) };\n-const E: &'static Cell<usize> = &D.a; // error\n+const E: &Cell<usize> = &D.a; // error\n \n // or:\n-const F: &'static C = &D; // error\n+const F: &C = &D; // error\n ```\n \n This is because cell types do operations that are not thread-safe. Due to this,"}, {"sha": "2d7e7d01274f6ca4d034ef488e1fe164df702193", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -24,7 +24,7 @@ use std::path::{Path, PathBuf};\n use super::graphviz::write_mir_fn_graphviz;\n use transform::MirSource;\n \n-const INDENT: &'static str = \"    \";\n+const INDENT: &str = \"    \";\n /// Alignment for lining up comments following MIR statements\n pub(crate) const ALIGN: usize = 40;\n "}, {"sha": "5830fa00be8cb2d8f0cd3b73572d541eca895a2b", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -234,7 +234,7 @@ macro_rules! supported_targets {\n         $(mod $module;)*\n \n         /// List of supported targets\n-        const TARGETS: &'static [&'static str] = &[$($triple),*];\n+        const TARGETS: &[&str] = &[$($triple),*];\n \n         fn load_specific(target: &str) -> TargetResult {\n             match target {"}, {"sha": "d239e66691eb86c119e3033af4b28d81e9e1dcf3", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -53,8 +53,7 @@ macro_rules! declare_features {\n         /// Represents active features that are currently being implemented or\n         /// currently being considered for addition/removal.\n         const ACTIVE_FEATURES:\n-                &'static [(&'static str, &'static str, Option<u32>,\n-                           Option<Edition>, fn(&mut Features, Span))] =\n+            &[(&str, &str, Option<u32>, Option<Edition>, fn(&mut Features, Span))] =\n             &[$((stringify!($feature), $ver, $issue, $edition, set!($feature))),+];\n \n         /// A set of features to be used by later passes.\n@@ -771,7 +770,7 @@ pub fn is_builtin_attr(attr: &ast::Attribute) -> bool {\n }\n \n // Attributes that have a special meaning to rustc or rustdoc\n-pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGate)] = &[\n+pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeGate)] = &[\n     // Normal attributes\n \n     (\"warn\", Normal, Ungated),\n@@ -1385,48 +1384,48 @@ fn leveled_feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue\n \n }\n \n-const EXPLAIN_BOX_SYNTAX: &'static str =\n+const EXPLAIN_BOX_SYNTAX: &str =\n     \"box expression syntax is experimental; you can call `Box::new` instead.\";\n \n-pub const EXPLAIN_STMT_ATTR_SYNTAX: &'static str =\n+pub const EXPLAIN_STMT_ATTR_SYNTAX: &str =\n     \"attributes on expressions are experimental.\";\n \n-pub const EXPLAIN_ASM: &'static str =\n+pub const EXPLAIN_ASM: &str =\n     \"inline assembly is not stable enough for use and is subject to change\";\n \n-pub const EXPLAIN_GLOBAL_ASM: &'static str =\n+pub const EXPLAIN_GLOBAL_ASM: &str =\n     \"`global_asm!` is not stable enough for use and is subject to change\";\n \n-pub const EXPLAIN_CUSTOM_TEST_FRAMEWORKS: &'static str =\n+pub const EXPLAIN_CUSTOM_TEST_FRAMEWORKS: &str =\n     \"custom test frameworks are an unstable feature\";\n \n-pub const EXPLAIN_LOG_SYNTAX: &'static str =\n+pub const EXPLAIN_LOG_SYNTAX: &str =\n     \"`log_syntax!` is not stable enough for use and is subject to change\";\n \n-pub const EXPLAIN_CONCAT_IDENTS: &'static str =\n+pub const EXPLAIN_CONCAT_IDENTS: &str =\n     \"`concat_idents` is not stable enough for use and is subject to change\";\n \n-pub const EXPLAIN_FORMAT_ARGS_NL: &'static str =\n+pub const EXPLAIN_FORMAT_ARGS_NL: &str =\n     \"`format_args_nl` is only for internal language use and is subject to change\";\n \n-pub const EXPLAIN_TRACE_MACROS: &'static str =\n+pub const EXPLAIN_TRACE_MACROS: &str =\n     \"`trace_macros` is not stable enough for use and is subject to change\";\n-pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &'static str =\n+pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &str =\n     \"allow_internal_unstable side-steps feature gating and stability checks\";\n-pub const EXPLAIN_ALLOW_INTERNAL_UNSAFE: &'static str =\n+pub const EXPLAIN_ALLOW_INTERNAL_UNSAFE: &str =\n     \"allow_internal_unsafe side-steps the unsafe_code lint\";\n \n-pub const EXPLAIN_CUSTOM_DERIVE: &'static str =\n+pub const EXPLAIN_CUSTOM_DERIVE: &str =\n     \"`#[derive]` for custom traits is deprecated and will be removed in the future.\";\n \n-pub const EXPLAIN_DEPR_CUSTOM_DERIVE: &'static str =\n+pub const EXPLAIN_DEPR_CUSTOM_DERIVE: &str =\n     \"`#[derive]` for custom traits is deprecated and will be removed in the future. \\\n     Prefer using procedural macro custom derive.\";\n \n-pub const EXPLAIN_DERIVE_UNDERSCORE: &'static str =\n+pub const EXPLAIN_DERIVE_UNDERSCORE: &str =\n     \"attributes of the form `#[derive_*]` are reserved for the compiler\";\n \n-pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &'static str =\n+pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &str =\n     \"unsized tuple coercion is not stable enough for use and is subject to change\";\n \n struct PostExpansionVisitor<'a> {"}, {"sha": "4ff6048e821787693269ef053f496fe4ad50ef44", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -22,8 +22,8 @@ enum InnerAttributeParsePolicy<'a> {\n     NotPermitted { reason: &'a str },\n }\n \n-const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &'static str = \"an inner attribute is not \\\n-                                                             permitted in this context\";\n+const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n+                                                     permitted in this context\";\n \n impl<'a> Parser<'a> {\n     /// Parse attributes that appear before an item"}, {"sha": "8a620c8067d3c2900f8bf311e1c2e1fb8071ec8e", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -306,7 +306,7 @@ const UNICODE_ARRAY: &[(char, &str, char)] = &[\n     ('\uff1e', \"Fullwidth Greater-Than Sign\", '>'), ];\n \n \n-const ASCII_ARRAY: &'static [(char, &'static str)] = &[\n+const ASCII_ARRAY: &[(char, &str)] = &[\n     (' ', \"Space\"),\n     ('_', \"Underscore\"),\n     ('-', \"Minus/Hyphen\"),"}, {"sha": "2ff9fb487c4f225f228157844fc6b629a1909a32", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -47,7 +47,7 @@ impl State {\n     }\n }\n \n-const OPTIONS: &'static [&'static str] = &[\"volatile\", \"alignstack\", \"intel\"];\n+const OPTIONS: &[&str] = &[\"volatile\", \"alignstack\", \"intel\"];\n \n pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                        sp: Span,"}, {"sha": "000bede7348a51d31a97a6a45fd000983dac45a7", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -28,7 +28,7 @@ use syntax::symbol::Symbol;\n use syntax_pos::Span;\n use syntax::tokenstream;\n \n-pub const MACRO: &'static str = \"global_asm\";\n+pub const MACRO: &str = \"global_asm\";\n \n pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt,\n                               sp: Span,"}, {"sha": "f4ff0989b5d863b5318f75b36159c450111c32cb", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -30,8 +30,7 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use deriving;\n \n-const PROC_MACRO_KINDS: [&'static str; 3] =\n-    [\"proc_macro_derive\", \"proc_macro_attribute\", \"proc_macro\"];\n+const PROC_MACRO_KINDS: [&str; 3] = [\"proc_macro_derive\", \"proc_macro_attribute\", \"proc_macro\"];\n \n struct ProcMacroDerive {\n     trait_name: ast::Name,"}, {"sha": "127dc43fdabe7ee372608f4d703174cebaa7da01", "filename": "src/libsyntax_pos/edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax_pos%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e941e1a62400f5f716aa28e06460d0bc0736d8c9/src%2Flibsyntax_pos%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fedition.rs?ref=e941e1a62400f5f716aa28e06460d0bc0736d8c9", "patch": "@@ -32,7 +32,7 @@ pub enum Edition {\n // must be in order from oldest to newest\n pub const ALL_EDITIONS: &[Edition] = &[Edition::Edition2015, Edition::Edition2018];\n \n-pub const EDITION_NAME_LIST: &'static str = \"2015|2018\";\n+pub const EDITION_NAME_LIST: &str = \"2015|2018\";\n \n pub const DEFAULT_EDITION: Edition = Edition::Edition2015;\n "}]}