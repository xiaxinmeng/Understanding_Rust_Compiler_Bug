{"sha": "34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ODIzYTdlNGM5ZDEzYWJlN2I5MjA1NmIzYzc2YWY3ZWY5MzM2ZWM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-17T17:15:33Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-17T17:15:33Z"}, "message": "Rustup to rustc 1.46.0-nightly (5c9e5df3a 2020-07-16)", "tree": {"sha": "711c686cb208d687406bbe01033bccf1c7d7b43b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/711c686cb208d687406bbe01033bccf1c7d7b43b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "html_url": "https://github.com/rust-lang/rust/commit/34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e76c3e88632b040fb5b0e1040f84f7b18753721", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e76c3e88632b040fb5b0e1040f84f7b18753721", "html_url": "https://github.com/rust-lang/rust/commit/9e76c3e88632b040fb5b0e1040f84f7b18753721"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "0a25e6b3302d5ee37fa698d1b19abdc6a08c9353", "filename": "patches/0025-Remove-usage-of-extern_weak-in-thread_local_dtor.patch", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/patches%2F0025-Remove-usage-of-extern_weak-in-thread_local_dtor.patch", "raw_url": "https://github.com/rust-lang/rust/raw/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/patches%2F0025-Remove-usage-of-extern_weak-in-thread_local_dtor.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0025-Remove-usage-of-extern_weak-in-thread_local_dtor.patch?ref=34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "patch": "@@ -1,22 +1,22 @@\n From 7496bb94a2fb2bc34629c9781c3bc3a470becaee Mon Sep 17 00:00:00 2001\n From: bjorn3 <bjorn3@users.noreply.github.com>\n Date: Fri, 10 Apr 2020 13:47:42 +0200\n-Subject: [PATCH] Remove usage of extern_weak in fast_thread_local \n+Subject: [PATCH] Remove usage of extern_weak in thread_local_dtor\n \n ---\n- src/libstd/sys/unix/fast_thread_local.rs | 20 --------------------\n+ src/libstd/sys/unix/thread_local_dtor.rs | 20 --------------------\n  1 files changed, 0 insertions(+), 20 deletions(-)\n \n-diff --git a/src/libstd/sys/unix/fast_thread_local.rs b/src/libstd/sys/unix/fast_thread_local.rs\n+diff --git a/src/libstd/sys/unix/thread_local_dtor.rs b/src/libstd/sys/unix/thread_local_dtor.rs\n index 8730b4d..8d6e3d5 100644\n---- a/src/libstd/sys/unix/fast_thread_local.rs\n-+++ b/src/libstd/sys/unix/fast_thread_local.rs\n+--- a/src/libstd/sys/unix/thread_local_dtor.rs\n++++ b/src/libstd/sys/unix/thread_local_dtor.rs\n @@ -15,28 +15,8 @@\n      target_os = \"emscripten\"\n  ))]\n  pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n -    use crate::mem;\n-     use crate::sys_common::thread_local::register_dtor_fallback;\n+     use crate::sys_common::thread_local_dtor::register_dtor_fallback;\n  \n -    extern \"C\" {\n -        #[linkage = \"extern_weak\"]", "previous_filename": "patches/0025-Remove-usage-of-extern_weak-in-fast_thread_local.patch"}, {"sha": "1903f2c25cde358be32dd06b7f3d6cebb2296862", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "patch": "@@ -1 +1 @@\n-nightly-2020-07-13\n+nightly-2020-07-17"}, {"sha": "1b67f3d6f15f2d6c5d976ed4ef494e15042c8285", "filename": "src/abi/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "patch": "@@ -195,7 +195,7 @@ pub(crate) fn get_function_name_and_sig<'tcx>(\n         tcx.sess.span_fatal(tcx.def_span(inst.def_id()), \"Variadic function definitions are not yet supported\");\n     }\n     let sig = clif_sig_from_fn_sig(tcx, triple, fn_sig, tcx.def_span(inst.def_id()), false, inst.def.requires_caller_location(tcx));\n-    (tcx.symbol_name(inst).name.as_str().to_string(), sig)\n+    (tcx.symbol_name(inst).name.to_string(), sig)\n }\n \n /// Instance must be monomorphized\n@@ -465,10 +465,10 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n             .unwrap()\n             .unwrap();\n \n-        if fx.tcx.symbol_name(instance).name.as_str().starts_with(\"llvm.\") {\n+        if fx.tcx.symbol_name(instance).name.starts_with(\"llvm.\") {\n             crate::intrinsics::codegen_llvm_intrinsic_call(\n                 fx,\n-                &fx.tcx.symbol_name(instance).name.as_str(),\n+                &fx.tcx.symbol_name(instance).name,\n                 substs,\n                 args,\n                 destination,"}, {"sha": "f7fdea65140204bf276a1df2d88f866059c1d51f", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "patch": "@@ -266,7 +266,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n                 });\n \n                 let instance = Instance::mono(fx.tcx, def_id);\n-                let symbol_name = fx.tcx.symbol_name(instance).name.as_str();\n+                let symbol_name = fx.tcx.symbol_name(instance).name;\n \n                 fx.lib_call(&*symbol_name, vec![fx.pointer_type, fx.pointer_type, fx.pointer_type], vec![], &args);\n \n@@ -719,10 +719,10 @@ fn trans_stmt<'tcx>(\n                     crate::trap::trap_unimplemented(fx, \"_xgetbv arch intrinsic is not supported\");\n                 }\n                 // ___chkstk, ___chkstk_ms and __alloca are only used on Windows\n-                _ if fx.tcx.symbol_name(fx.instance).name.as_str().starts_with(\"___chkstk\") => {\n+                _ if fx.tcx.symbol_name(fx.instance).name.starts_with(\"___chkstk\") => {\n                     crate::trap::trap_unimplemented(fx, \"Stack probes are not supported\");\n                 }\n-                _ if fx.tcx.symbol_name(fx.instance).name.as_str() == \"__alloca\" => {\n+                _ if fx.tcx.symbol_name(fx.instance).name == \"__alloca\" => {\n                     crate::trap::trap_unimplemented(fx, \"Alloca is not supported\");\n                 }\n                 // Used in sys::windows::abort_internal"}, {"sha": "139dcb5988f30809f153f04e7f196284e3c89b69", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "patch": "@@ -75,18 +75,18 @@ pub(crate) fn trans_constant<'tcx>(\n     let const_ = fx.monomorphize(&constant.literal);\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(def_id, ref substs, promoted) if fx.tcx.is_static(def_id) => {\n+        ConstKind::Unevaluated(def, ref substs, promoted) if fx.tcx.is_static(def.did) => {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n             return codegen_static_ref(\n                 fx,\n-                def_id,\n+                def.did,\n                 fx.layout_of(fx.monomorphize(&constant.literal.ty)),\n             ).to_cvalue(fx);\n         }\n-        ConstKind::Unevaluated(def_id, ref substs, promoted) => {\n-            match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def_id, substs, promoted, None) {\n+        ConstKind::Unevaluated(def, ref substs, promoted) => {\n+            match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def, substs, promoted, None) {\n                 Ok(const_val) => const_val,\n                 Err(_) => {\n                     if promoted.is_none() {\n@@ -229,7 +229,7 @@ fn data_id_for_static(\n     linkage: Linkage,\n ) -> DataId {\n     let instance = Instance::mono(tcx, def_id);\n-    let symbol_name = tcx.symbol_name(instance).name.as_str();\n+    let symbol_name = tcx.symbol_name(instance).name;\n     let ty = instance.monomorphic_ty(tcx);\n     let is_mutable = if tcx.is_mutable_static(def_id) {\n         true"}, {"sha": "d6d62598efb03fd1875efe1a6bdd0d1bf23a2826", "filename": "src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "patch": "@@ -122,7 +122,7 @@ fn module_codegen(tcx: TyCtxt<'_>, cgu_name: rustc_span::Symbol) -> ModuleCodege\n         if mono_items.iter().any(|(mono_item, _)| {\n             match mono_item {\n                 rustc_middle::mir::mono::MonoItem::Static(def_id) => {\n-                    tcx.symbol_name(Instance::mono(tcx, *def_id)).name.as_str().contains(\"__rustc_proc_macro_decls_\")\n+                    tcx.symbol_name(Instance::mono(tcx, *def_id)).name.contains(\"__rustc_proc_macro_decls_\")\n                 }\n                 _ => false,\n             }"}, {"sha": "1d81efb880df772dd8f68cda7cd3dd719f8105a9", "filename": "src/driver/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "patch": "@@ -62,7 +62,7 @@ fn trans_mono_item<'tcx, B: Backend + 'static>(\n     match mono_item {\n         MonoItem::Fn(inst) => {\n             let _inst_guard =\n-                crate::PrintOnPanic(|| format!(\"{:?} {}\", inst, tcx.symbol_name(inst).name.as_str()));\n+                crate::PrintOnPanic(|| format!(\"{:?} {}\", inst, tcx.symbol_name(inst).name));\n             debug_assert!(!inst.substs.needs_infer());\n             let _mir_guard = crate::PrintOnPanic(|| {\n                 match inst.def {"}, {"sha": "98148355b271b9cb488573f23468cc8aab57fb3d", "filename": "src/main_shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n     };\n \n     let instance = Instance::mono(tcx, main_def_id);\n-    if module.get_name(&*tcx.symbol_name(instance).name.as_str()).is_none() {\n+    if module.get_name(&*tcx.symbol_name(instance).name).is_none() {\n         return;\n     }\n "}, {"sha": "0dcd2c269e83ef8b7ec0531be4c79f721e49cea0", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34823a7e4c9d13abe7b92056b3c76af7ef9336ec/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=34823a7e4c9d13abe7b92056b3c76af7ef9336ec", "patch": "@@ -74,7 +74,7 @@ impl CommentWriter {\n     pub(crate) fn new<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Self {\n         let global_comments = if cfg!(debug_assertions) {\n             vec![\n-                format!(\"symbol {}\", tcx.symbol_name(instance).name.as_str()),\n+                format!(\"symbol {}\", tcx.symbol_name(instance).name),\n                 format!(\"instance {:?}\", instance),\n                 format!(\n                     \"sig {:?}\",\n@@ -220,7 +220,7 @@ pub(crate) fn write_clif_file<'tcx>(\n             .expect(\"value location ranges\")\n     });\n \n-    let symbol_name = tcx.symbol_name(instance).name.as_str();\n+    let symbol_name = tcx.symbol_name(instance).name;\n     let clif_file_name = format!(\n         \"{}/{}__{}.{}.clif\",\n         concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/clif\"),"}]}