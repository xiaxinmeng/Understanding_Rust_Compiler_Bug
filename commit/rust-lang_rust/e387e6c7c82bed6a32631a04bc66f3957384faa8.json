{"sha": "e387e6c7c82bed6a32631a04bc66f3957384faa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzODdlNmM3YzgyYmVkNmEzMjYzMWEwNGJjNjZmMzk1NzM4NGZhYTg=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-11T14:29:12Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-11T01:14:58Z"}, "message": "typeck: merge CollectCtxt and collect::CollectCtxt.", "tree": {"sha": "a20592911979a220d6863264f6dc5d5a3185044b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a20592911979a220d6863264f6dc5d5a3185044b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e387e6c7c82bed6a32631a04bc66f3957384faa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e387e6c7c82bed6a32631a04bc66f3957384faa8", "html_url": "https://github.com/rust-lang/rust/commit/e387e6c7c82bed6a32631a04bc66f3957384faa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e387e6c7c82bed6a32631a04bc66f3957384faa8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8600a67782ec3ee26dafa6a059f22a30ed285f15", "url": "https://api.github.com/repos/rust-lang/rust/commits/8600a67782ec3ee26dafa6a059f22a30ed285f15", "html_url": "https://github.com/rust-lang/rust/commit/8600a67782ec3ee26dafa6a059f22a30ed285f15"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "787324897a319c8690d6a1db961667ba80c3a340", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e387e6c7c82bed6a32631a04bc66f3957384faa8/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e387e6c7c82bed6a32631a04bc66f3957384faa8/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e387e6c7c82bed6a32631a04bc66f3957384faa8", "patch": "@@ -79,11 +79,10 @@ use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n use util::common::{ErrorReported, MemoizationMap};\n use util::nodemap::FnvHashMap;\n-use write_ty_to_tcx;\n+use {CrateCtxt, write_ty_to_tcx};\n \n use rustc_const_math::ConstInt;\n \n-use std::cell::RefCell;\n use std::collections::HashSet;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::rc::Rc;\n@@ -101,22 +100,13 @@ use rustc::hir::print as pprust;\n ///////////////////////////////////////////////////////////////////////////\n // Main entry point\n \n-pub fn collect_item_types(tcx: &TyCtxt) {\n-    let ccx = &CrateCtxt { tcx: tcx, stack: RefCell::new(Vec::new()) };\n-    let mut visitor = CollectItemTypesVisitor{ ccx: ccx };\n+pub fn collect_item_types(ccx: &CrateCtxt) {\n+    let mut visitor = CollectItemTypesVisitor { ccx: ccx };\n     ccx.tcx.visit_all_items_in_krate(DepNode::CollectItem, &mut visitor);\n }\n \n ///////////////////////////////////////////////////////////////////////////\n \n-struct CrateCtxt<'a,'tcx:'a> {\n-    tcx: &'a TyCtxt<'tcx>,\n-\n-    // This stack is used to identify cycles in the user's source.\n-    // Note that these cycles can cross multiple items.\n-    stack: RefCell<Vec<AstConvRequest>>,\n-}\n-\n /// Context specific to some particular item. This is what implements\n /// AstConv. It has information about the predicates that are defined\n /// on the trait. Unfortunately, this predicate information is\n@@ -134,7 +124,7 @@ struct ItemCtxt<'a,'tcx:'a> {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq)]\n-enum AstConvRequest {\n+pub enum AstConvRequest {\n     GetItemTypeScheme(DefId),\n     GetTraitDef(DefId),\n     EnsureSuperPredicates(DefId),"}, {"sha": "c65b12b1829ba09997f9ba60272f4a23d8ea19c9", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e387e6c7c82bed6a32631a04bc66f3957384faa8/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e387e6c7c82bed6a32631a04bc66f3957384faa8/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=e387e6c7c82bed6a32631a04bc66f3957384faa8", "patch": "@@ -138,11 +138,17 @@ pub struct TypeAndSubsts<'tcx> {\n pub struct CrateCtxt<'a, 'tcx: 'a> {\n     // A mapping from method call sites to traits that have that method.\n     pub trait_map: hir::TraitMap,\n+\n     /// A vector of every trait accessible in the whole crate\n     /// (i.e. including those from subcrates). This is used only for\n     /// error reporting, and so is lazily initialised and generally\n     /// shouldn't taint the common path (hence the RefCell).\n     pub all_traits: RefCell<Option<check::method::AllTraitsVec>>,\n+\n+    /// This stack is used to identify cycles in the user's source.\n+    /// Note that these cycles can cross multiple items.\n+    pub stack: RefCell<Vec<collect::AstConvRequest>>,\n+\n     pub tcx: &'a TyCtxt<'tcx>,\n }\n \n@@ -337,14 +343,15 @@ pub fn check_crate(tcx: &TyCtxt, trait_map: hir::TraitMap) -> CompileResult {\n     let ccx = CrateCtxt {\n         trait_map: trait_map,\n         all_traits: RefCell::new(None),\n+        stack: RefCell::new(Vec::new()),\n         tcx: tcx\n     };\n \n     // this ensures that later parts of type checking can assume that items\n     // have valid types and not error\n     tcx.sess.track_errors(|| {\n         time(time_passes, \"type collecting\", ||\n-             collect::collect_item_types(tcx));\n+             collect::collect_item_types(&ccx));\n \n     })?;\n "}]}