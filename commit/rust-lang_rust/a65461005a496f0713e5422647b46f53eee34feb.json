{"sha": "a65461005a496f0713e5422647b46f53eee34feb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NTQ2MTAwNWE0OTZmMDcxM2U1NDIyNjQ3YjQ2ZjUzZWVlMzRmZWI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-04-19T22:31:34Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-04-20T18:20:40Z"}, "message": "Fix line display for hoedown", "tree": {"sha": "78f60439fb4e5a0298ea72b46f3894409231bdaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f60439fb4e5a0298ea72b46f3894409231bdaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a65461005a496f0713e5422647b46f53eee34feb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a65461005a496f0713e5422647b46f53eee34feb", "html_url": "https://github.com/rust-lang/rust/commit/a65461005a496f0713e5422647b46f53eee34feb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a65461005a496f0713e5422647b46f53eee34feb/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e621e1c73f1487b4450446eafe6ccad3a99e3cd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e621e1c73f1487b4450446eafe6ccad3a99e3cd8", "html_url": "https://github.com/rust-lang/rust/commit/e621e1c73f1487b4450446eafe6ccad3a99e3cd8"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "4bf856240f66a8cabd5928e4cd2eb40c6cfbb00d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a65461005a496f0713e5422647b46f53eee34feb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65461005a496f0713e5422647b46f53eee34feb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=a65461005a496f0713e5422647b46f53eee34feb", "patch": "@@ -492,7 +492,7 @@ pub fn old_find_testable_code(doc: &str, tests: &mut ::test::Collector, position\n                     text: *const hoedown_buffer,\n                     lang: *const hoedown_buffer,\n                     data: *const hoedown_renderer_data,\n-                    line: libc::size_t) {\n+                    _line: libc::size_t) {\n         unsafe {\n             if text.is_null() { return }\n             let block_info = if lang.is_null() {\n@@ -503,11 +503,15 @@ pub fn old_find_testable_code(doc: &str, tests: &mut ::test::Collector, position\n                 LangString::parse(s)\n             };\n             if !block_info.rust { return }\n+            let text = (*text).as_bytes();\n             let opaque = (*data).opaque as *mut hoedown_html_renderer_state;\n             let tests = &mut *((*opaque).opaque as *mut ::test::Collector);\n-            let line = tests.get_line() + line;\n+            let text = str::from_utf8(text).unwrap();\n+            let lines = text.lines().map(|l| {\n+                stripped_filtered_line(l).unwrap_or(l)\n+            });\n             let filename = tests.get_filename();\n-            tests.add_old_test(line, filename);\n+            tests.add_old_test(lines.collect::<Vec<&str>>().join(\"\\n\"), filename);\n         }\n     }\n "}, {"sha": "0ca267bb82d2eb1c7a95f1f73b851e024c89d8d9", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a65461005a496f0713e5422647b46f53eee34feb/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65461005a496f0713e5422647b46f53eee34feb/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a65461005a496f0713e5422647b46f53eee34feb", "patch": "@@ -27,6 +27,7 @@\n #![feature(staged_api)]\n #![feature(test)]\n #![feature(unicode)]\n+#![feature(vec_remove_item)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "3206b5021075d5f5a5346abd759e5fc39b10296d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a65461005a496f0713e5422647b46f53eee34feb/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a65461005a496f0713e5422647b46f53eee34feb/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=a65461005a496f0713e5422647b46f53eee34feb", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::collections::HashMap;\n use std::env;\n use std::ffi::OsString;\n use std::io::prelude::*;\n@@ -381,7 +382,7 @@ fn partition_source(s: &str) -> (String, String) {\n pub struct Collector {\n     pub tests: Vec<testing::TestDescAndFn>,\n     // to be removed when hoedown will be definitely gone\n-    pub old_tests: Vec<String>,\n+    pub old_tests: HashMap<String, Vec<String>>,\n     names: Vec<String>,\n     cfgs: Vec<String>,\n     libs: SearchPaths,\n@@ -403,7 +404,7 @@ impl Collector {\n                codemap: Option<Rc<CodeMap>>, filename: Option<String>) -> Collector {\n         Collector {\n             tests: Vec::new(),\n-            old_tests: Vec::new(),\n+            old_tests: HashMap::new(),\n             names: Vec::new(),\n             cfgs: cfgs,\n             libs: libs,\n@@ -432,17 +433,39 @@ impl Collector {\n         }\n     }\n \n-    pub fn add_old_test(&mut self, line: usize, filename: String) {\n-        let name = self.generate_name(line, &filename);\n-        self.old_tests.push(name);\n+    // to be removed once hoedown is gone\n+    fn generate_name_beginning(&self, filename: &str) -> String {\n+        if self.use_headers {\n+            if let Some(ref header) = self.current_header {\n+                format!(\"{} - {} (line\", filename, header)\n+            } else {\n+                format!(\"{} - (line\", filename)\n+            }\n+        } else {\n+            format!(\"{} - {} (line\", filename, self.names.join(\"::\"))\n+        }\n+    }\n+\n+    pub fn add_old_test(&mut self, test: String, filename: String) {\n+        let name_beg = self.generate_name_beginning(&filename);\n+        let entry = self.old_tests.entry(name_beg)\n+                                  .or_insert(Vec::new());\n+        entry.push(test.trim().to_owned());\n     }\n \n     pub fn add_test(&mut self, test: String,\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n                     as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n                     line: usize, filename: String) {\n         let name = self.generate_name(line, &filename);\n-        if self.old_tests.iter().find(|&x| x == &name).is_none() {\n+        let name_beg = self.generate_name_beginning(&filename);\n+        let mut found = false;\n+        // to be removed when hoedown is removed\n+        let test = test.trim().to_owned();\n+        if let Some(entry) = self.old_tests.get_mut(&name_beg) {\n+            found = entry.remove_item(&test).is_some();\n+        }\n+        if !found {\n             let _ = writeln!(&mut io::stderr(),\n                              \"WARNING: {} Code block is not currently run as a test, but will in \\\n                               future versions of rustdoc. Please ensure this code block is a \\"}]}