{"sha": "4f05ec7d2c487c2e48f8753a4426ac6940d6be9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMDVlYzdkMmM0ODdjMmU0OGY4NzUzYTQ0MjZhYzY5NDBkNmJlOWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-30T14:55:11Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-31T16:15:42Z"}, "message": "Patch projection to not be so eager to unify type variables. This code\nis still probably wrong since it fails to incorporate the ambiguity\nresolution measures that `select` uses. Also, made more complicated by\nthe fact that trait object types do not impl their own traits yet.", "tree": {"sha": "f3aa7041a58db50ba4ca98e11b72928805ae9267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3aa7041a58db50ba4ca98e11b72928805ae9267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f05ec7d2c487c2e48f8753a4426ac6940d6be9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f05ec7d2c487c2e48f8753a4426ac6940d6be9a", "html_url": "https://github.com/rust-lang/rust/commit/4f05ec7d2c487c2e48f8753a4426ac6940d6be9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f05ec7d2c487c2e48f8753a4426ac6940d6be9a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84f5ad8679c7fc454473ffbf389030f3e5fee379", "url": "https://api.github.com/repos/rust-lang/rust/commits/84f5ad8679c7fc454473ffbf389030f3e5fee379", "html_url": "https://github.com/rust-lang/rust/commit/84f5ad8679c7fc454473ffbf389030f3e5fee379"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "ab90f567ea2ac190a1b36e911d6602960dbfe16b", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f05ec7d2c487c2e48f8753a4426ac6940d6be9a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f05ec7d2c487c2e48f8753a4426ac6940d6be9a/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=4f05ec7d2c487c2e48f8753a4426ac6940d6be9a", "patch": "@@ -125,21 +125,14 @@ pub fn project_type<'cx,'tcx>(\n         ambiguous: false,\n     };\n \n-    let () = assemble_candidates_from_param_env(selcx,\n-                                                obligation,\n-                                                &mut candidates);\n-\n     let () = assemble_candidates_from_object_type(selcx,\n                                                   obligation,\n                                                   &mut candidates);\n \n     if candidates.vec.is_empty() {\n-        // FIXME(#20297) -- In `select.rs` there is similar logic that\n-        // gives precedence to where-clauses, but it's a bit more\n-        // fine-grained. I was lazy here and just always give\n-        // precedence to where-clauses or other such sources over\n-        // actually dredging through impls. This logic probably should\n-        // be tightened up.\n+        let () = assemble_candidates_from_param_env(selcx,\n+                                                    obligation,\n+                                                    &mut candidates);\n \n         let () = try!(assemble_candidates_from_impls(selcx,\n                                                      obligation,"}, {"sha": "12018b194ba6d1350349334adcf3acb3b2abf94d", "filename": "src/test/run-pass/associated-types-where-clause-impl-ambiguity.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4f05ec7d2c487c2e48f8753a4426ac6940d6be9a/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f05ec7d2c487c2e48f8753a4426ac6940d6be9a/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs?ref=4f05ec7d2c487c2e48f8753a4426ac6940d6be9a", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test how resolving a projection interacts with inference.  In this\n+// case, we were eagerly unifying the type variable for the iterator\n+// type with `I` from the where clause, ignoring the in-scope `impl`\n+// for `ByRef`. The right answer was to consider the result ambiguous\n+// until more type information was available.\n+\n+#![feature(associated_types, lang_items, unboxed_closures)]\n+#![no_implicit_prelude]\n+\n+use std::option::Option::{None, Some, mod};\n+\n+trait Iterator {\n+    type Item;\n+\n+    fn next(&mut self) -> Option<Self::Item>;\n+}\n+\n+trait IteratorExt: Iterator {\n+    fn by_ref(&mut self) -> ByRef<Self> {\n+        ByRef(self)\n+    }\n+}\n+\n+impl<I> IteratorExt for I where I: Iterator {}\n+\n+struct ByRef<'a, I: 'a + Iterator>(&'a mut I);\n+\n+impl<'a, A, I> Iterator for ByRef<'a, I> where I: Iterator<Item=A> {\n+    type Item = A;\n+\n+    fn next(&mut self) -> Option< <I as Iterator>::Item > {\n+        self.0.next()\n+    }\n+}\n+\n+fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n+\n+fn test<A, I: Iterator<Item=A>>(mut it: I) {\n+    is_iterator_of::<A, _>(&it.by_ref());\n+}\n+\n+fn main() { }"}]}