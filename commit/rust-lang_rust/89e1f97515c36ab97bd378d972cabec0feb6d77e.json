{"sha": "89e1f97515c36ab97bd378d972cabec0feb6d77e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZTFmOTc1MTVjMzZhYjk3YmQzNzhkOTcyY2FiZWMwZmViNmQ3N2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-02T12:44:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-02T12:44:55Z"}, "message": "Merge #4207 #4253\n\n4207: Add unwrap block assist #4156 r=matklad a=bnjjj\n\nclose issue #4156 \n\n4253: Remove `workspaceLoaded` setting r=matklad a=eminence\n\nThe `workspaceLoaded` notification setting was originally designed to\r\ncontrol the display of a popup message that said:\r\n\r\n    \"workspace loaded, {} rust packages\"\r\n\r\nThis popup was removed and replaced by a much sleeker message in the\r\nVSCode status bar that provides a real-time status while loading:\r\n\r\n    rust-analyzer: {}/{} packages\r\n\r\nThis was done as part of #3587\r\n\r\nThe change in this PR simply renames this setting from `workspaceLoaded` to\r\n`progress` to better describe what it actually controls.  At the moment,\r\nthe only type of progress message that is controlled by this setting is\r\nthe initial load messages, but in theory other messages could also be\r\ncontrolled by this setting.\r\n\r\n\r\nReviewer notes:\r\n\r\n* If we didn't like the idea of causing minor breaking to user's config, we could keep the setting name as `workspaceLoaded`\r\n* I think we can now close both #2719 and #3176 since the notification dialog in question no longer exists (actually I think you can close those issues even if you reject this PR \ud83d\ude04 )\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\nCo-authored-by: Andrew Chin <achin@eminence32.net>", "tree": {"sha": "b1c66214d527a8d5d58c95cfa10d37538a787cd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1c66214d527a8d5d58c95cfa10d37538a787cd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89e1f97515c36ab97bd378d972cabec0feb6d77e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJerWtHCRBK7hj4Ov3rIwAAdHIIAIYZQEp+ztV5Ub/wRE0I1xRt\nt0BFXuKmJ/N3aYGf5Ne98ODESDc2tx7QTMsv7eEj1umQFVFYT/wtK2MIHj+EQxqI\nwJJwio6lqN7stIjqgWbRasG/40V9Q0JnDegRTQbhCWHJqHtYy7BbqenXdEHMfDy+\nw2Eq1XkyUQDY28rkRKHCpSh+xhZU/WZn8CTrfB+zpYHVas6uyBVKZMxugPwehAhH\nJ3q4p7HJm6R1CC5Bi0pxfWjsUdrZtjsgJgbGg8FqFDYfTBpOQo5M/5N7CwDy3Zw5\nf8syIgLMHmE66+kr/R0Ms98GuPrERpRnyEKe8cDkqvH2fRodSPIfE1KfqnC3vhE=\n=a8k6\n-----END PGP SIGNATURE-----\n", "payload": "tree b1c66214d527a8d5d58c95cfa10d37538a787cd5\nparent a2ae2bbb833be6874a420eaa33dcb28c89f7590d\nparent fdf86637bf8338ad19923442a547c6c7b495100c\nparent 65234e8828defc0a56cb1d5e20793b5163b5330d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1588423495 +0000\ncommitter GitHub <noreply@github.com> 1588423495 +0000\n\nMerge #4207 #4253\n\n4207: Add unwrap block assist #4156 r=matklad a=bnjjj\n\nclose issue #4156 \n\n4253: Remove `workspaceLoaded` setting r=matklad a=eminence\n\nThe `workspaceLoaded` notification setting was originally designed to\r\ncontrol the display of a popup message that said:\r\n\r\n    \"workspace loaded, {} rust packages\"\r\n\r\nThis popup was removed and replaced by a much sleeker message in the\r\nVSCode status bar that provides a real-time status while loading:\r\n\r\n    rust-analyzer: {}/{} packages\r\n\r\nThis was done as part of #3587\r\n\r\nThe change in this PR simply renames this setting from `workspaceLoaded` to\r\n`progress` to better describe what it actually controls.  At the moment,\r\nthe only type of progress message that is controlled by this setting is\r\nthe initial load messages, but in theory other messages could also be\r\ncontrolled by this setting.\r\n\r\n\r\nReviewer notes:\r\n\r\n* If we didn't like the idea of causing minor breaking to user's config, we could keep the setting name as `workspaceLoaded`\r\n* I think we can now close both #2719 and #3176 since the notification dialog in question no longer exists (actually I think you can close those issues even if you reject this PR \ud83d\ude04 )\n\nCo-authored-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>\nCo-authored-by: Andrew Chin <achin@eminence32.net>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89e1f97515c36ab97bd378d972cabec0feb6d77e", "html_url": "https://github.com/rust-lang/rust/commit/89e1f97515c36ab97bd378d972cabec0feb6d77e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89e1f97515c36ab97bd378d972cabec0feb6d77e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2ae2bbb833be6874a420eaa33dcb28c89f7590d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ae2bbb833be6874a420eaa33dcb28c89f7590d", "html_url": "https://github.com/rust-lang/rust/commit/a2ae2bbb833be6874a420eaa33dcb28c89f7590d"}, {"sha": "fdf86637bf8338ad19923442a547c6c7b495100c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdf86637bf8338ad19923442a547c6c7b495100c", "html_url": "https://github.com/rust-lang/rust/commit/fdf86637bf8338ad19923442a547c6c7b495100c"}, {"sha": "65234e8828defc0a56cb1d5e20793b5163b5330d", "url": "https://api.github.com/repos/rust-lang/rust/commits/65234e8828defc0a56cb1d5e20793b5163b5330d", "html_url": "https://github.com/rust-lang/rust/commit/65234e8828defc0a56cb1d5e20793b5163b5330d"}], "stats": {"total": 404, "additions": 390, "deletions": 14}, "files": [{"sha": "6696cc832300b8bf289d731f69756b5bbb1db8c5", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/89e1f97515c36ab97bd378d972cabec0feb6d77e/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e1f97515c36ab97bd378d972cabec0feb6d77e/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=89e1f97515c36ab97bd378d972cabec0feb6d77e", "patch": "@@ -728,3 +728,22 @@ use std::{collections::HashMap};\n \"#####,\n     )\n }\n+\n+#[test]\n+fn doctest_unwrap_block() {\n+    check(\n+        \"unwrap_block\",\n+        r#####\"\n+fn foo() {\n+    if true {<|>\n+        println!(\"foo\");\n+    }\n+}\n+\"#####,\n+        r#####\"\n+fn foo() {\n+    println!(\"foo\");\n+}\n+\"#####,\n+    )\n+}"}, {"sha": "58649c47eb6dac68a83f6489be3984ecb84a2db7", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "added", "additions": 348, "deletions": 0, "changes": 348, "blob_url": "https://github.com/rust-lang/rust/blob/89e1f97515c36ab97bd378d972cabec0feb6d77e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e1f97515c36ab97bd378d972cabec0feb6d77e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=89e1f97515c36ab97bd378d972cabec0feb6d77e", "patch": "@@ -0,0 +1,348 @@\n+use crate::{Assist, AssistCtx, AssistId};\n+\n+use ast::{BlockExpr, Expr, ForExpr, IfExpr, LoopBodyOwner, LoopExpr, WhileExpr};\n+use ra_fmt::unwrap_trivial_block;\n+use ra_syntax::{ast, AstNode, TextRange, T};\n+\n+// Assist: unwrap_block\n+//\n+// This assist removes if...else, for, while and loop control statements to just keep the body.\n+//\n+// ```\n+// fn foo() {\n+//     if true {<|>\n+//         println!(\"foo\");\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// fn foo() {\n+//     println!(\"foo\");\n+// }\n+// ```\n+pub(crate) fn unwrap_block(ctx: AssistCtx) -> Option<Assist> {\n+    let l_curly_token = ctx.find_token_at_offset(T!['{'])?;\n+\n+    let res = if let Some(if_expr) = l_curly_token.ancestors().find_map(IfExpr::cast) {\n+        // if expression\n+        let expr_to_unwrap = if_expr.blocks().find_map(|expr| extract_expr(ctx.frange.range, expr));\n+        let expr_to_unwrap = expr_to_unwrap?;\n+        // Find if we are in a else if block\n+        let ancestor = if_expr.syntax().ancestors().skip(1).find_map(ast::IfExpr::cast);\n+\n+        if let Some(ancestor) = ancestor {\n+            Some((ast::Expr::IfExpr(ancestor), expr_to_unwrap))\n+        } else {\n+            Some((ast::Expr::IfExpr(if_expr), expr_to_unwrap))\n+        }\n+    } else if let Some(for_expr) = l_curly_token.ancestors().find_map(ForExpr::cast) {\n+        // for expression\n+        let block_expr = for_expr.loop_body()?;\n+        extract_expr(ctx.frange.range, block_expr)\n+            .map(|expr_to_unwrap| (ast::Expr::ForExpr(for_expr), expr_to_unwrap))\n+    } else if let Some(while_expr) = l_curly_token.ancestors().find_map(WhileExpr::cast) {\n+        // while expression\n+        let block_expr = while_expr.loop_body()?;\n+        extract_expr(ctx.frange.range, block_expr)\n+            .map(|expr_to_unwrap| (ast::Expr::WhileExpr(while_expr), expr_to_unwrap))\n+    } else if let Some(loop_expr) = l_curly_token.ancestors().find_map(LoopExpr::cast) {\n+        // loop expression\n+        let block_expr = loop_expr.loop_body()?;\n+        extract_expr(ctx.frange.range, block_expr)\n+            .map(|expr_to_unwrap| (ast::Expr::LoopExpr(loop_expr), expr_to_unwrap))\n+    } else {\n+        None\n+    };\n+\n+    let (expr, expr_to_unwrap) = res?;\n+    ctx.add_assist(AssistId(\"unwrap_block\"), \"Unwrap block\", |edit| {\n+        edit.set_cursor(expr.syntax().text_range().start());\n+        edit.target(expr_to_unwrap.syntax().text_range());\n+\n+        let pat_start: &[_] = &[' ', '{', '\\n'];\n+        let expr_to_unwrap = expr_to_unwrap.to_string();\n+        let expr_string = expr_to_unwrap.trim_start_matches(pat_start);\n+        let mut expr_string_lines: Vec<&str> = expr_string.lines().collect();\n+        expr_string_lines.pop(); // Delete last line\n+\n+        let expr_string = expr_string_lines\n+            .into_iter()\n+            .map(|line| line.replacen(\"    \", \"\", 1)) // Delete indentation\n+            .collect::<Vec<String>>()\n+            .join(\"\\n\");\n+\n+        edit.replace(expr.syntax().text_range(), expr_string);\n+    })\n+}\n+\n+fn extract_expr(cursor_range: TextRange, block: BlockExpr) -> Option<Expr> {\n+    let cursor_in_range = block.l_curly_token()?.text_range().contains_range(cursor_range);\n+\n+    if cursor_in_range {\n+        Some(unwrap_trivial_block(block))\n+    } else {\n+        None\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn simple_if() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                bar();\n+                if true {<|>\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                } else {\n+                    println!(\"bar\");\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                bar();\n+                <|>foo();\n+\n+                //comment\n+                bar();\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_else() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                bar();\n+                if true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                } else {<|>\n+                    println!(\"bar\");\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                bar();\n+                <|>println!(\"bar\");\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_else_if() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                if true {\n+                    println!(\"true\");\n+\n+                    //comment\n+                    //bar();\n+                } else if false {<|>\n+                    println!(\"bar\");\n+                } else {\n+                    println!(\"foo\");\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                //bar();\n+                <|>println!(\"bar\");\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_bad_cursor_position() {\n+        check_assist_not_applicable(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                bar();<|>\n+                if true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                } else {\n+                    println!(\"bar\");\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_for() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                for i in 0..5 {<|>\n+                    if true {\n+                        foo();\n+\n+                        //comment\n+                        bar();\n+                    } else {\n+                        println!(\"bar\");\n+                    }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                <|>if true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                } else {\n+                    println!(\"bar\");\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_in_for() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                for i in 0..5 {\n+                    if true {<|>\n+                        foo();\n+\n+                        //comment\n+                        bar();\n+                    } else {\n+                        println!(\"bar\");\n+                    }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                for i in 0..5 {\n+                    <|>foo();\n+\n+                    //comment\n+                    bar();\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_loop() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                loop {<|>\n+                    if true {\n+                        foo();\n+\n+                        //comment\n+                        bar();\n+                    } else {\n+                        println!(\"bar\");\n+                    }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                <|>if true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                } else {\n+                    println!(\"bar\");\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_while() {\n+        check_assist(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                while true {<|>\n+                    if true {\n+                        foo();\n+\n+                        //comment\n+                        bar();\n+                    } else {\n+                        println!(\"bar\");\n+                    }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main() {\n+                <|>if true {\n+                    foo();\n+\n+                    //comment\n+                    bar();\n+                } else {\n+                    println!(\"bar\");\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn simple_if_in_while_bad_cursor_position() {\n+        check_assist_not_applicable(\n+            unwrap_block,\n+            r#\"\n+            fn main() {\n+                while true {\n+                    if true {\n+                        foo();<|>\n+\n+                        //comment\n+                        bar();\n+                    } else {\n+                        println!(\"bar\");\n+                    }\n+                }\n+            }\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "c5df86600f51d24cc45a7525a5bb61b19c00dba3", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e1f97515c36ab97bd378d972cabec0feb6d77e/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e1f97515c36ab97bd378d972cabec0feb6d77e/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=89e1f97515c36ab97bd378d972cabec0feb6d77e", "patch": "@@ -143,6 +143,7 @@ mod handlers {\n     mod split_import;\n     mod add_from_impl_for_enum;\n     mod reorder_fields;\n+    mod unwrap_block;\n \n     pub(crate) fn all() -> &'static [AssistHandler] {\n         &[\n@@ -181,6 +182,7 @@ mod handlers {\n             replace_unwrap_with_match::replace_unwrap_with_match,\n             split_import::split_import,\n             add_from_impl_for_enum::add_from_impl_for_enum,\n+            unwrap_block::unwrap_block,\n             // These are manually sorted for better priorities\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,"}, {"sha": "7771d6759553973228f61ff658d99d8ca3f9b1ab", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89e1f97515c36ab97bd378d972cabec0feb6d77e/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e1f97515c36ab97bd378d972cabec0feb6d77e/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=89e1f97515c36ab97bd378d972cabec0feb6d77e", "patch": "@@ -43,7 +43,7 @@ impl ast::IfExpr {\n         Some(res)\n     }\n \n-    fn blocks(&self) -> AstChildren<ast::BlockExpr> {\n+    pub fn blocks(&self) -> AstChildren<ast::BlockExpr> {\n         support::children(self.syntax())\n     }\n }"}, {"sha": "15b7c691219bbbdf2c6aff483f6332b73d0462df", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/89e1f97515c36ab97bd378d972cabec0feb6d77e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e1f97515c36ab97bd378d972cabec0feb6d77e/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=89e1f97515c36ab97bd378d972cabec0feb6d77e", "patch": "@@ -49,7 +49,6 @@ pub enum FilesWatcher {\n \n #[derive(Debug, Clone)]\n pub struct NotificationsConfig {\n-    pub workspace_loaded: bool,\n     pub cargo_toml_not_found: bool,\n }\n \n@@ -83,10 +82,7 @@ impl Default for Config {\n             lru_capacity: None,\n             proc_macro_srv: None,\n             files: FilesConfig { watcher: FilesWatcher::Notify, exclude: Vec::new() },\n-            notifications: NotificationsConfig {\n-                workspace_loaded: true,\n-                cargo_toml_not_found: true,\n-            },\n+            notifications: NotificationsConfig { cargo_toml_not_found: true },\n \n             cargo: CargoConfig::default(),\n             rustfmt: RustfmtConfig::Rustfmt { extra_args: Vec::new() },\n@@ -129,7 +125,6 @@ impl Config {\n             Some(\"client\") => FilesWatcher::Client,\n             Some(\"notify\") | _ => FilesWatcher::Notify\n         };\n-        set(value, \"/notifications/workspaceLoaded\", &mut self.notifications.workspace_loaded);\n         set(value, \"/notifications/cargoTomlNotFound\", &mut self.notifications.cargo_toml_not_found);\n \n         set(value, \"/cargo/noDefaultFeatures\", &mut self.cargo.no_default_features);"}, {"sha": "3bc2e0a4624e85db00e446e443067a11e9597e34", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89e1f97515c36ab97bd378d972cabec0feb6d77e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89e1f97515c36ab97bd378d972cabec0feb6d77e/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=89e1f97515c36ab97bd378d972cabec0feb6d77e", "patch": "@@ -415,8 +415,7 @@ fn loop_turn(\n         });\n     }\n \n-    let show_progress =\n-        !loop_state.workspace_loaded && world_state.config.notifications.workspace_loaded;\n+    let show_progress = !loop_state.workspace_loaded;\n \n     if !loop_state.workspace_loaded\n         && loop_state.roots_scanned == loop_state.roots_total"}, {"sha": "ee515949e9d56f52180e6e7cdd9dacdcfef58d53", "filename": "docs/user/assists.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/89e1f97515c36ab97bd378d972cabec0feb6d77e/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/89e1f97515c36ab97bd378d972cabec0feb6d77e/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=89e1f97515c36ab97bd378d972cabec0feb6d77e", "patch": "@@ -697,3 +697,21 @@ use std::\u2503collections::HashMap;\n // AFTER\n use std::{collections::HashMap};\n ```\n+\n+## `unwrap_block`\n+\n+This assist removes if...else, for, while and loop control statements to just keep the body.\n+\n+```rust\n+// BEFORE\n+fn foo() {\n+    if true {\u2503\n+        println!(\"foo\");\n+    }\n+}\n+\n+// AFTER\n+fn foo() {\n+    println!(\"foo\");\n+}\n+```"}, {"sha": "7ef727b9d09160fc444a287ef3b8b93c5d8bf431", "filename": "editors/code/package.json", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89e1f97515c36ab97bd378d972cabec0feb6d77e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/89e1f97515c36ab97bd378d972cabec0feb6d77e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=89e1f97515c36ab97bd378d972cabec0feb6d77e", "patch": "@@ -205,11 +205,6 @@\n                     \"default\": [],\n                     \"description\": \"Paths to exclude from analysis.\"\n                 },\n-                \"rust-analyzer.notifications.workspaceLoaded\": {\n-                    \"type\": \"boolean\",\n-                    \"default\": true,\n-                    \"markdownDescription\": \"Whether to show `workspace loaded` message.\"\n-                },\n                 \"rust-analyzer.notifications.cargoTomlNotFound\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,"}]}