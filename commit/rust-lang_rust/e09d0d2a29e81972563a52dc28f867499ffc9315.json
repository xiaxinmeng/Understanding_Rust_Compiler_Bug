{"sha": "e09d0d2a29e81972563a52dc28f867499ffc9315", "node_id": "C_kwDOAAsO6NoAKGUwOWQwZDJhMjllODE5NzI1NjNhNTJkYzI4Zjg2NzQ5OWZmYzkzMTU", "commit": {"author": {"name": "Josh Soref", "email": "2119212+jsoref@users.noreply.github.com", "date": "2023-04-09T21:35:02Z"}, "committer": {"name": "Josh Soref", "email": "2119212+jsoref@users.noreply.github.com", "date": "2023-04-17T20:09:18Z"}, "message": "Spelling - compiler\n\n* account\n* achieved\n* advising\n* always\n* ambiguous\n* analysis\n* annotations\n* appropriate\n* build\n* candidates\n* cascading\n* category\n* character\n* clarification\n* compound\n* conceptually\n* constituent\n* consts\n* convenience\n* corresponds\n* debruijn\n* debug\n* debugable\n* debuggable\n* deterministic\n* discriminant\n* display\n* documentation\n* doesn't\n* ellipsis\n* erroneous\n* evaluability\n* evaluate\n* evaluation\n* explicitly\n* fallible\n* fulfill\n* getting\n* has\n* highlighting\n* illustrative\n* imported\n* incompatible\n* infringing\n* initialized\n* into\n* intrinsic\n* introduced\n* javascript\n* liveness\n* metadata\n* monomorphization\n* nonexistent\n* nontrivial\n* obligation\n* obligations\n* offset\n* opaque\n* opportunities\n* opt-in\n* outlive\n* overlapping\n* paragraph\n* parentheses\n* poisson\n* precisely\n* predecessors\n* predicates\n* preexisting\n* propagated\n* really\n* reentrant\n* referent\n* responsibility\n* rustonomicon\n* shortcircuit\n* simplifiable\n* simplifications\n* specify\n* stabilized\n* structurally\n* suggestibility\n* translatable\n* transmuting\n* two\n* unclosed\n* uninhabited\n* visibility\n* volatile\n* workaround\n\nSigned-off-by: Josh Soref <2119212+jsoref@users.noreply.github.com>", "tree": {"sha": "440f526e1485152fb2f51718531e22ab3078fcfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/440f526e1485152fb2f51718531e22ab3078fcfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e09d0d2a29e81972563a52dc28f867499ffc9315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e09d0d2a29e81972563a52dc28f867499ffc9315", "html_url": "https://github.com/rust-lang/rust/commit/e09d0d2a29e81972563a52dc28f867499ffc9315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e09d0d2a29e81972563a52dc28f867499ffc9315/comments", "author": {"login": "jsoref", "id": 2119212, "node_id": "MDQ6VXNlcjIxMTkyMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2119212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsoref", "html_url": "https://github.com/jsoref", "followers_url": "https://api.github.com/users/jsoref/followers", "following_url": "https://api.github.com/users/jsoref/following{/other_user}", "gists_url": "https://api.github.com/users/jsoref/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsoref/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsoref/subscriptions", "organizations_url": "https://api.github.com/users/jsoref/orgs", "repos_url": "https://api.github.com/users/jsoref/repos", "events_url": "https://api.github.com/users/jsoref/events{/privacy}", "received_events_url": "https://api.github.com/users/jsoref/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsoref", "id": 2119212, "node_id": "MDQ6VXNlcjIxMTkyMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/2119212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsoref", "html_url": "https://github.com/jsoref", "followers_url": "https://api.github.com/users/jsoref/followers", "following_url": "https://api.github.com/users/jsoref/following{/other_user}", "gists_url": "https://api.github.com/users/jsoref/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsoref/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsoref/subscriptions", "organizations_url": "https://api.github.com/users/jsoref/orgs", "repos_url": "https://api.github.com/users/jsoref/repos", "events_url": "https://api.github.com/users/jsoref/events{/privacy}", "received_events_url": "https://api.github.com/users/jsoref/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31656e7295ebd5f2f6597f10c011e2ac4ba3ef39", "url": "https://api.github.com/repos/rust-lang/rust/commits/31656e7295ebd5f2f6597f10c011e2ac4ba3ef39", "html_url": "https://github.com/rust-lang/rust/commit/31656e7295ebd5f2f6597f10c011e2ac4ba3ef39"}], "stats": {"total": 318, "additions": 159, "deletions": 159}, "files": [{"sha": "ffca37ae9d5f673f9470c39ee5bd7f7a29ef09c8", "filename": "compiler/rustc_ast_passes/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_ast_passes%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_ast_passes%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fmessages.ftl?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -231,7 +231,7 @@ ast_passes_feature_on_non_nightly = `#![feature]` may not be used on the {$chann\n     .suggestion = remove the attribute\n     .stable_since = the feature `{$name}` has been stable since `{$since}` and no longer requires an attribute to enable\n \n-ast_passes_incompatbile_features = `{$f1}` and `{$f2}` are incompatible, using them at the same time is not allowed\n+ast_passes_incompatible_features = `{$f1}` and `{$f2}` are incompatible, using them at the same time is not allowed\n     .help = remove one of these features\n \n ast_passes_show_span = {$msg}"}, {"sha": "1732865f0bb6489657735f10cc654f3aac9f2863", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -677,7 +677,7 @@ impl AddToDiagnostic for StableFeature {\n }\n \n #[derive(Diagnostic)]\n-#[diag(ast_passes_incompatbile_features)]\n+#[diag(ast_passes_incompatible_features)]\n #[help]\n pub struct IncompatibleFeatures {\n     #[primary_span]"}, {"sha": "e3d81194ac817de2595eb5d37fea21498e122a14", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1147,7 +1147,7 @@ pub fn mut_borrow_of_mutable_ref(local_decl: &LocalDecl<'_>, local_name: Option<\n             // suggest removing the `&mut`.\n             //\n             // Deliberately fall into this case for all implicit self types,\n-            // so that we don't fall in to the next case with them.\n+            // so that we don't fall into the next case with them.\n             kind == hir::ImplicitSelfKind::MutRef\n         }\n         _ if Some(kw::SelfLower) == local_name => {\n@@ -1235,7 +1235,7 @@ fn suggest_ampmut<'tcx>(\n         }\n     }\n \n-    let (suggestability, highlight_span) = match opt_ty_info {\n+    let (suggestibility, highlight_span) = match opt_ty_info {\n         // if this is a variable binding with an explicit type,\n         // try to highlight that for the suggestion.\n         Some(ty_span) => (true, ty_span),\n@@ -1256,7 +1256,7 @@ fn suggest_ampmut<'tcx>(\n     let ty_mut = local_decl.ty.builtin_deref(true).unwrap();\n     assert_eq!(ty_mut.mutbl, hir::Mutability::Not);\n     (\n-        suggestability,\n+        suggestibility,\n         highlight_span,\n         if local_decl.ty.is_ref() {\n             format!(\"&mut {}\", ty_mut.ty)"}, {"sha": "aaf5dbd9930c78f003b4a136acbc5df9c9b8d3d4", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/gdb.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -22,9 +22,9 @@ pub fn insert_reference_to_gdb_debug_scripts_section_global(bx: &mut Builder<'_,\n             bx.const_bitcast(get_or_insert_gdb_debug_scripts_section_global(bx), bx.type_i8p());\n         // Load just the first byte as that's all that's necessary to force\n         // LLVM to keep around the reference to the global.\n-        let volative_load_instruction = bx.volatile_load(bx.type_i8(), gdb_debug_scripts_section);\n+        let volatile_load_instruction = bx.volatile_load(bx.type_i8(), gdb_debug_scripts_section);\n         unsafe {\n-            llvm::LLVMSetAlignment(volative_load_instruction, 1);\n+            llvm::LLVMSetAlignment(volatile_load_instruction, 1);\n         }\n     }\n }"}, {"sha": "38ad42370d3fef44d89b9e35b597b7f18526acfd", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/cpp_like.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fcpp_like.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -62,7 +62,7 @@ const SINGLE_VARIANT_VIRTUAL_DISR: u64 = 0;\n \n /// In CPP-like mode, we generate a union with a field for each variant and an\n /// explicit tag field. The field of each variant has a struct type\n-/// that encodes the discrimiant of the variant and it's data layout.\n+/// that encodes the discriminant of the variant and it's data layout.\n /// The union also has a nested enumeration type that is only used for encoding\n /// variant names in an efficient way. Its enumerator values do _not_ correspond\n /// to the enum's discriminant values."}, {"sha": "4926f4e50c41744423b5d7912afecd9b2ba4d804", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -69,7 +69,7 @@ mod declare;\n mod errors;\n mod intrinsic;\n \n-// The following is a work around that replaces `pub mod llvm;` and that fixes issue 53912.\n+// The following is a workaround that replaces `pub mod llvm;` and that fixes issue 53912.\n #[path = \"llvm/mod.rs\"]\n mod llvm_;\n pub mod llvm {"}, {"sha": "85a96e3e89c058c5f215c632e03d4983653cb6fd", "filename": "compiler/rustc_codegen_ssa/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_ssa%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_ssa%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fmessages.ftl?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -148,7 +148,7 @@ codegen_ssa_processing_dymutil_failed = processing debug info with `dsymutil` fa\n \n codegen_ssa_unable_to_run_dsymutil = unable to run `dsymutil`: {$error}\n \n-codegen_ssa_stripping_debu_info_failed = stripping debug info with `{$util}` failed: {$status}\n+codegen_ssa_stripping_debug_info_failed = stripping debug info with `{$util}` failed: {$status}\n     .note = {$output}\n \n codegen_ssa_unable_to_run = unable to run `{$util}`: {$error}"}, {"sha": "c80347448cbb28192e0f75e4d21f7afc03fe14aa", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -872,7 +872,7 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n     let load_from_incr_comp_dir = |output_path: PathBuf, saved_path: &str| {\n         let source_file = in_incr_comp_dir(&incr_comp_session_dir, saved_path);\n         debug!(\n-            \"copying pre-existing module `{}` from {:?} to {}\",\n+            \"copying preexisting module `{}` from {:?} to {}\",\n             module.name,\n             source_file,\n             output_path.display()"}, {"sha": "9bfe426c0076632d7cbd9657d1f4a1dc14119094", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -156,7 +156,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: LocalDefId) -> CodegenFnAttrs {\n                     None => {\n                         // Unfortunately, unconditionally using `llvm.used` causes\n                         // issues in handling `.init_array` with the gold linker,\n-                        // but using `llvm.compiler.used` caused a nontrival amount\n+                        // but using `llvm.compiler.used` caused a nontrivial amount\n                         // of unintentional ecosystem breakage -- particularly on\n                         // Mach-O targets.\n                         //"}, {"sha": "4493176667867cf80da3ffc1c45355a4200e7cd8", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -424,7 +424,7 @@ pub struct UnableToRunDsymutil {\n }\n \n #[derive(Diagnostic)]\n-#[diag(codegen_ssa_stripping_debu_info_failed)]\n+#[diag(codegen_ssa_stripping_debug_info_failed)]\n #[note]\n pub struct StrippingDebugInfoFailed<'a> {\n     pub util: &'a str,"}, {"sha": "e06b634cdc3309f2ff7b0ef9656d7b4c643a88b4", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -784,7 +784,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n             Abi::Scalar(scalar_layout) => {\n                 if !scalar_layout.is_uninit_valid() {\n                     // There is something to check here.\n-                    let scalar = self.read_scalar(op, \"initiailized scalar value\")?;\n+                    let scalar = self.read_scalar(op, \"initialized scalar value\")?;\n                     self.visit_scalar(scalar, scalar_layout)?;\n                 }\n             }\n@@ -794,7 +794,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 // the other must be init.\n                 if !a_layout.is_uninit_valid() && !b_layout.is_uninit_valid() {\n                     let (a, b) =\n-                        self.read_immediate(op, \"initiailized scalar value\")?.to_scalar_pair();\n+                        self.read_immediate(op, \"initialized scalar value\")?.to_scalar_pair();\n                     self.visit_scalar(a, a_layout)?;\n                     self.visit_scalar(b, b_layout)?;\n                 }"}, {"sha": "8aee019e9949434d2dcf6c6367d2aa52a0b1e45f", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -262,7 +262,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // We sometimes have to use `defining_opaque_types` for subtyping\n         // to succeed here and figuring out how exactly that should work\n         // is annoying. It is harmless enough to just not validate anything\n-        // in that case. We still check this after analysis as all opque\n+        // in that case. We still check this after analysis as all opaque\n         // types have been revealed at this point.\n         if (src, dest).has_opaque_types() {\n             return true;"}, {"sha": "2ab7757638aef94d3b7b7f40f15beb6394191401", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -557,7 +557,7 @@ impl SelfProfiler {\n         let crate_name = crate_name.unwrap_or(\"unknown-crate\");\n         // HACK(eddyb) we need to pad the PID, strange as it may seem, as its\n         // length can behave as a source of entropy for heap addresses, when\n-        // ASLR is disabled and the heap is otherwise determinic.\n+        // ASLR is disabled and the heap is otherwise deterministic.\n         let pid: u32 = process::id();\n         let filename = format!(\"{crate_name}-{pid:07}.rustc_profile\");\n         let path = output_directory.join(&filename);"}, {"sha": "f485112cca29fe156e1d8aff8aba2f8600706279", "filename": "compiler/rustc_error_codes/src/error_codes/E0026.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0026.md", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0026.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0026.md?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1,4 +1,4 @@\n-A struct pattern attempted to extract a non-existent field from a struct.\n+A struct pattern attempted to extract a nonexistent field from a struct.\n \n Erroneous code example:\n "}, {"sha": "c6db9b5d61bea64055151c0bcbf8a81a826d67e1", "filename": "compiler/rustc_error_codes/src/error_codes/E0208.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0208.md", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0208.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0208.md?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -32,7 +32,7 @@ error: [-, o]\n This error is deliberately triggered with the `#[rustc_variance]` attribute\n (`#![feature(rustc_attrs)]` must be enabled) and helps to show you the variance\n of the type's generic parameters. You can read more about variance and\n-subtyping in [this section of the Rustnomicon]. For a more in depth look at\n+subtyping in [this section of the Rustonomicon]. For a more in depth look at\n variance (including a more complete list of common variances) see\n [this section of the Reference]. For information on how variance is implemented\n in the compiler, see [this section of `rustc-dev-guide`].\n@@ -41,6 +41,6 @@ This error can be easily fixed by removing the `#[rustc_variance]` attribute,\n the compiler's suggestion to comment it out can be applied automatically with\n `rustfix`.\n \n-[this section of the Rustnomicon]: https://doc.rust-lang.org/nomicon/subtyping.html\n+[this section of the Rustonomicon]: https://doc.rust-lang.org/nomicon/subtyping.html\n [this section of the Reference]: https://doc.rust-lang.org/reference/subtyping.html#variance\n [this section of `rustc-dev-guide`]: https://rustc-dev-guide.rust-lang.org/variance.html"}, {"sha": "c1104a88a7676a4738593cae2594c7e6a5b3b4a4", "filename": "compiler/rustc_error_codes/src/error_codes/E0311.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0311.md?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -29,7 +29,7 @@ If `no_restriction()` were to use `&T` instead of `&()` as an argument, the\n compiler would have added an implied bound, causing this to compile.\n \n This error can be resolved by explicitly naming the elided lifetime for `x` and\n-then explicily requiring that the generic parameter `T` outlives that lifetime:\n+then explicitly requiring that the generic parameter `T` outlives that lifetime:\n \n ```\n fn no_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {"}, {"sha": "2c33d1e6a24191462c83e2e9df5e82d50f7b6b38", "filename": "compiler/rustc_error_codes/src/error_codes/E0457.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0457.md", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0457.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0457.md?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1,6 +1,6 @@\n Plugin `..` only found in rlib format, but must be available in dylib format.\n \n-Erroronous code example:\n+Erroneous code example:\n \n `rlib-plugin.rs`\n ```ignore (needs-linkage-with-other-tests)"}, {"sha": "300a57a1985f5d961c4f2976d01d86a67aa5987b", "filename": "compiler/rustc_error_codes/src/error_codes/E0576.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0576.md", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0576.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0576.md?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -10,7 +10,7 @@ trait Hello {\n }\n ```\n \n-In this example, we tried to use the non-existent associated type `You` of the\n+In this example, we tried to use the nonexistent associated type `You` of the\n `Hello` trait. To fix this error, use an existing associated type:\n \n ```"}, {"sha": "0f5ac94e6d589eb9190e7e4a7181fc4177bf7f0f", "filename": "compiler/rustc_error_codes/src/error_codes/E0609.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0609.md", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0609.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0609.md?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1,4 +1,4 @@\n-Attempted to access a non-existent field in a struct.\n+Attempted to access a nonexistent field in a struct.\n \n Erroneous code example:\n "}, {"sha": "8c76d5e010ff96348cba98b7b24d99630bc3f253", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1980,7 +1980,7 @@ impl EmitterWriter {\n             }\n             if let DisplaySuggestion::Add = show_code_change && is_item_attribute {\n                 // The suggestion adds an entire line of code, ending on a newline, so we'll also\n-                // print the *following* line, to provide context of what we're advicing people to\n+                // print the *following* line, to provide context of what we're advising people to\n                 // do. Otherwise you would only see contextless code that can be confused for\n                 // already existing code, despite the colors and UI elements.\n                 // We special case `#[derive(_)]\\n` and other attribute suggestions, because those"}, {"sha": "3aeb2edb54ca0ac34046dd2d847cb0b8c16212d7", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -341,7 +341,7 @@ pub(super) fn try_match_macro<'matcher, T: Tracker<'matcher>>(\n             Success(named_matches) => {\n                 debug!(\"Parsed arm successfully\");\n                 // The matcher was `Success(..)`ful.\n-                // Merge the gated spans from parsing the matcher with the pre-existing ones.\n+                // Merge the gated spans from parsing the matcher with the preexisting ones.\n                 sess.gated_spans.merge(gated_spans_snapshot);\n \n                 return Ok((i, named_matches));\n@@ -873,7 +873,7 @@ impl<'tt> FirstSets<'tt> {\n     }\n }\n \n-// Most `mbe::TokenTree`s are pre-existing in the matcher, but some are defined\n+// Most `mbe::TokenTree`s are preexisting in the matcher, but some are defined\n // implicitly, such as opening/closing delimiters and sequence repetition ops.\n // This type encapsulates both kinds. It implements `Clone` while avoiding the\n // need for `mbe::TokenTree` to implement `Clone`."}, {"sha": "8a5e09475ff13e3c6be7e660dbafd600aeb71c23", "filename": "compiler/rustc_expand/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_expand%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Ftests.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -513,7 +513,7 @@ error: foo\n }\n \n #[test]\n-fn non_overlaping() {\n+fn non_overlapping() {\n     test_harness(\n         r#\"\n fn foo() {\n@@ -552,7 +552,7 @@ error: foo\n }\n \n #[test]\n-fn overlaping_start_and_end() {\n+fn overlapping_start_and_end() {\n     test_harness(\n         r#\"\n fn foo() {"}, {"sha": "876a31abdf882b29f0ce4fd898127026379c61f4", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -139,7 +139,7 @@ declare_features! (\n     /// Allows using `#[on_unimplemented(..)]` on traits.\n     /// (Moved to `rustc_attrs`.)\n     (removed, on_unimplemented, \"1.40.0\", None, None, None),\n-    /// A way to temporarily opt out of opt in copy. This will *never* be accepted.\n+    /// A way to temporarily opt out of opt-in copy. This will *never* be accepted.\n     (removed, opt_out_copy, \"1.0.0\", None, None, None),\n     /// Allows features specific to OIBIT (now called auto traits).\n     /// Renamed to `auto_traits`."}, {"sha": "7eb12d380a769e05a7e1fde6aee0771373a007cd", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -2061,7 +2061,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             err.note(\"enum variants can't have type parameters\");\n                             let type_name = tcx.item_name(adt_def.did());\n                             let msg = format!(\n-                                \"you might have meant to specity type parameters on enum \\\n+                                \"you might have meant to specify type parameters on enum \\\n                                  `{type_name}`\"\n                             );\n                             let Some(args) = assoc_segment.args else { return; };"}, {"sha": "d7443ea6998e2959119d150db10c7c729a49a423", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -83,7 +83,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     let cause = traits::ObligationCause::misc(span, impl_did);\n     match type_allowed_to_implement_copy(tcx, param_env, self_type, cause) {\n         Ok(()) => {}\n-        Err(CopyImplementationError::InfrigingFields(fields)) => {\n+        Err(CopyImplementationError::InfringingFields(fields)) => {\n             let mut err = struct_span_err!(\n                 tcx.sess,\n                 span,"}, {"sha": "3cb217335bda0017497026c6cde39576180052be", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1333,7 +1333,7 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n \n         // We may fail to resolve higher-ranked lifetimes that are mentioned by APIT.\n         // AST-based resolution does not care for impl-trait desugaring, which are the\n-        // responibility of lowering. This may create a mismatch between the resolution\n+        // responsibility of lowering. This may create a mismatch between the resolution\n         // AST found (`region_def_id`) which points to HRTB, and what HIR allows.\n         // ```\n         // fn foo(x: impl for<'a> Trait<'a, Assoc = impl Copy + 'a>) {}"}, {"sha": "507c24d540cc5412913a653e23f39bb6682bd68c", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -976,7 +976,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Attempt to coerce an expression to a type, and return the\n     /// adjusted type of the expression, if successful.\n     /// Adjustments are only recorded if the coercion succeeded.\n-    /// The expressions *must not* have any pre-existing adjustments.\n+    /// The expressions *must not* have any preexisting adjustments.\n     pub fn try_coerce(\n         &self,\n         expr: &hir::Expr<'_>,\n@@ -1340,7 +1340,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n     }\n \n     /// As an optimization, you can create a `CoerceMany` with a\n-    /// pre-existing slice of expressions. In this case, you are\n+    /// preexisting slice of expressions. In this case, you are\n     /// expected to pass each element in the slice to `coerce(...)` in\n     /// order. This is used with arrays in particular to avoid\n     /// needlessly cloning the slice."}, {"sha": "5be78416e6128fc53288349a8adf6d47bee45f06", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -108,7 +108,7 @@ pub enum ExpectedReturnTypeLabel<'tcx> {\n \n #[derive(Diagnostic)]\n #[diag(hir_typeck_missing_parentheses_in_range, code = \"E0689\")]\n-pub struct MissingParentheseInRange {\n+pub struct MissingParenthesesInRange {\n     #[primary_span]\n     #[label(hir_typeck_missing_parentheses_in_range)]\n     pub span: Span,"}, {"sha": "13a869caa8fa65cb27a0990f1cc287a4236d4bb6", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -827,7 +827,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             QPath::TypeRelative(ref qself, ref segment) => {\n                 // Don't use `self.to_ty`, since this will register a WF obligation.\n-                // If we're trying to call a non-existent method on a trait\n+                // If we're trying to call a nonexistent method on a trait\n                 // (e.g. `MyTrait::missing_method`), then resolution will\n                 // give us a `QPath::TypeRelative` with a trait object as\n                 // `qself`. In that case, we want to avoid registering a WF obligation"}, {"sha": "56c94505727e8a40da64c215b6b56d60d4f4e6bb", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -330,7 +330,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// expression mentioned.\n     ///\n     /// `blame_specific_arg_if_possible` will find the most-specific expression anywhere inside\n-    /// the provided function call expression, and mark it as responsible for the fullfillment\n+    /// the provided function call expression, and mark it as responsible for the fulfillment\n     /// error.\n     fn blame_specific_arg_if_possible(\n         &self,"}, {"sha": "eef2b5009c82df8b51bceecead61ce292eee5be8", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -794,7 +794,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         };\n \n-        // get all where BoundPredicates here, because they are used in to cases below\n+        // get all where BoundPredicates here, because they are used in two cases below\n         let where_predicates = predicates\n             .iter()\n             .filter_map(|p| match p {"}, {"sha": "8feef332de8a70287439902ebb82430826e89004", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -650,7 +650,7 @@ fn check_must_not_suspend_ty<'tcx>(\n                 },\n             )\n         }\n-        // If drop tracking is enabled, we want to look through references, since the referrent\n+        // If drop tracking is enabled, we want to look through references, since the referent\n         // may not be considered live across the await point.\n         ty::Ref(_region, ty, _mutability) if fcx.sess().opts.unstable_opts.drop_tracking => {\n             let descr_pre = &format!(\"{}reference{} to \", data.descr_pre, plural_suffix);"}, {"sha": "db1f10f645fd40b61385ff547e1263a71a575e0f", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1530,7 +1530,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     );\n                     if pick.is_ok() {\n                         let range_span = parent_expr.span.with_hi(expr.span.hi());\n-                        tcx.sess.emit_err(errors::MissingParentheseInRange {\n+                        tcx.sess.emit_err(errors::MissingParenthesesInRange {\n                             span,\n                             ty_str: ty_str.to_string(),\n                             method_name: item_name.as_str().to_string(),"}, {"sha": "7160d1c67b251e131ff9aa5ca750e365198e31d4", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1659,7 +1659,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if tcx.sess.teach(&err.get_code().unwrap()) {\n             err.note(\n                 \"This error indicates that a struct pattern attempted to \\\n-                 extract a non-existent field from a struct. Struct fields \\\n+                 extract a nonexistent field from a struct. Struct fields \\\n                  are identified by the name used before the colon : so struct \\\n                  patterns should resemble the declaration of the struct type \\\n                  being matched.\\n\\n\\"}, {"sha": "147b3e74d0f8a29d67fd77cf3af1fd719e5ac1d2", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -223,7 +223,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let closure_hir_id = self.tcx.hir().local_def_id_to_hir_id(closure_def_id);\n \n         if should_do_rust_2021_incompatible_closure_captures_analysis(self.tcx, closure_hir_id) {\n-            self.perform_2229_migration_anaysis(closure_def_id, body_id, capture_clause, span);\n+            self.perform_2229_migration_analysis(closure_def_id, body_id, capture_clause, span);\n         }\n \n         let after_feature_tys = self.final_upvar_tys(closure_def_id);\n@@ -731,7 +731,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Perform the migration analysis for RFC 2229, and emit lint\n     /// `disjoint_capture_drop_reorder` if needed.\n-    fn perform_2229_migration_anaysis(\n+    fn perform_2229_migration_analysis(\n         &self,\n         closure_def_id: LocalDefId,\n         body_id: hir::BodyId,"}, {"sha": "43274091cb8733d5c63a434db93e5b8a14a25ef1", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -139,7 +139,7 @@ pub fn check_dirty_clean_annotations(tcx: TyCtxt<'_>) {\n         return;\n     }\n \n-    // can't add `#[rustc_clean]` etc without opting in to this feature\n+    // can't add `#[rustc_clean]` etc without opting into this feature\n     if !tcx.features().rustc_attrs {\n         return;\n     }"}, {"sha": "fdc4ff0896f5babadec5f3cd9fea360c1da05b20", "filename": "compiler/rustc_infer/messages.ftl", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fmessages.ftl?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -80,7 +80,7 @@ infer_subtype = ...so that the {$requirement ->\n     [no_else] `if` missing an `else` returns `()`\n     [fn_main_correct_type] `main` function has the correct type\n     [fn_start_correct_type] `#[start]` function has the correct type\n-    [intristic_correct_type] intrinsic has the correct type\n+    [intrinsic_correct_type] intrinsic has the correct type\n     [method_correct_type] method receiver has the correct type\n     *[other] types are compatible\n }\n@@ -93,7 +93,7 @@ infer_subtype_2 = ...so that {$requirement ->\n     [no_else] `if` missing an `else` returns `()`\n     [fn_main_correct_type] `main` function has the correct type\n     [fn_start_correct_type] `#[start]` function has the correct type\n-    [intristic_correct_type] intrinsic has the correct type\n+    [intrinsic_correct_type] intrinsic has the correct type\n     [method_correct_type] method receiver has the correct type\n     *[other] types are compatible\n }\n@@ -341,8 +341,8 @@ infer_await_note = calling an async function returns a future\n \n infer_prlf_defined_with_sub = the lifetime `{$sub_symbol}` defined here...\n infer_prlf_defined_without_sub = the lifetime defined here...\n-infer_prlf_must_oultive_with_sup = ...must outlive the lifetime `{$sup_symbol}` defined here\n-infer_prlf_must_oultive_without_sup = ...must outlive the lifetime defined here\n+infer_prlf_must_outlive_with_sup = ...must outlive the lifetime `{$sup_symbol}` defined here\n+infer_prlf_must_outlive_without_sup = ...must outlive the lifetime defined here\n infer_prlf_known_limitation = this is a known limitation that will be removed in the future (see issue #100013 <https://github.com/rust-lang/rust/issues/100013> for more information)\n \n infer_opaque_captures_lifetime = hidden type for `{$opaque_ty}` captures lifetime that does not appear in bounds\n@@ -380,7 +380,7 @@ infer_oc_no_else = `if` may be missing an `else` clause\n infer_oc_no_diverge = `else` clause of `let...else` does not diverge\n infer_oc_fn_main_correct_type = `main` function has wrong type\n infer_oc_fn_start_correct_type = `#[start]` function has wrong type\n-infer_oc_intristic_correct_type = intrinsic has wrong type\n+infer_oc_intrinsic_correct_type = intrinsic has wrong type\n infer_oc_method_correct_type = mismatched `self` parameter type\n infer_oc_closure_selfref = closure/generator type that references itself\n infer_oc_cant_coerce = cannot coerce intrinsics to function pointers"}, {"sha": "b1e819e83f19b201b268f31ec47a629b1f8ed97b", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -71,7 +71,7 @@ pub struct AmbiguousImpl<'a> {\n // Copy of `AnnotationRequired` for E0284\n #[derive(Diagnostic)]\n #[diag(infer_type_annotations_needed, code = \"E0284\")]\n-pub struct AmbigousReturn<'a> {\n+pub struct AmbiguousReturn<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub source_kind: &'static str,\n@@ -1085,7 +1085,7 @@ pub enum PlaceholderRelationLfNotSatisfied {\n         span: Span,\n         #[note(infer_prlf_defined_with_sub)]\n         sub_span: Span,\n-        #[note(infer_prlf_must_oultive_with_sup)]\n+        #[note(infer_prlf_must_outlive_with_sup)]\n         sup_span: Span,\n         sub_symbol: Symbol,\n         sup_symbol: Symbol,\n@@ -1098,7 +1098,7 @@ pub enum PlaceholderRelationLfNotSatisfied {\n         span: Span,\n         #[note(infer_prlf_defined_with_sub)]\n         sub_span: Span,\n-        #[note(infer_prlf_must_oultive_without_sup)]\n+        #[note(infer_prlf_must_outlive_without_sup)]\n         sup_span: Span,\n         sub_symbol: Symbol,\n         #[note(infer_prlf_known_limitation)]\n@@ -1110,7 +1110,7 @@ pub enum PlaceholderRelationLfNotSatisfied {\n         span: Span,\n         #[note(infer_prlf_defined_without_sub)]\n         sub_span: Span,\n-        #[note(infer_prlf_must_oultive_with_sup)]\n+        #[note(infer_prlf_must_outlive_with_sup)]\n         sup_span: Span,\n         sup_symbol: Symbol,\n         #[note(infer_prlf_known_limitation)]\n@@ -1122,7 +1122,7 @@ pub enum PlaceholderRelationLfNotSatisfied {\n         span: Span,\n         #[note(infer_prlf_defined_without_sub)]\n         sub_span: Span,\n-        #[note(infer_prlf_must_oultive_without_sup)]\n+        #[note(infer_prlf_must_outlive_without_sup)]\n         sup_span: Span,\n         #[note(infer_prlf_known_limitation)]\n         note: (),\n@@ -1488,8 +1488,8 @@ pub enum ObligationCauseFailureCode {\n         #[subdiagnostic]\n         subdiags: Vec<TypeErrorAdditionalDiags>,\n     },\n-    #[diag(infer_oc_intristic_correct_type, code = \"E0308\")]\n-    IntristicCorrectType {\n+    #[diag(infer_oc_intrinsic_correct_type, code = \"E0308\")]\n+    IntrinsicCorrectType {\n         #[primary_span]\n         span: Span,\n         #[subdiagnostic]"}, {"sha": "257d36259291e9c990a0711d25c13930891a5de2", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -467,11 +467,11 @@ impl<'tcx> InferCtxt<'tcx> {\n                     }\n                 }\n                 GenericArgKind::Const(result_value) => {\n-                    if let ty::ConstKind::Bound(debrujin, b) = result_value.kind() {\n+                    if let ty::ConstKind::Bound(debruijn, b) = result_value.kind() {\n                         // ...in which case we would set `canonical_vars[0]` to `Some(const X)`.\n \n                         // We only allow a `ty::INNERMOST` index in substitutions.\n-                        assert_eq!(debrujin, ty::INNERMOST);\n+                        assert_eq!(debruijn, ty::INNERMOST);\n                         opt_values[b] = Some(*original_value);\n                     }\n                 }"}, {"sha": "9b670c76a1822ba76ab1c0b7ab6f4c75f9d2e667", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -832,7 +832,7 @@ pub trait ObligationEmittingRelation<'tcx>: TypeRelation<'tcx> {\n \n     /// Register predicates that must hold in order for this relation to hold. Uses\n     /// a default obligation cause, [`ObligationEmittingRelation::register_obligations`] should\n-    /// be used if control over the obligaton causes is required.\n+    /// be used if control over the obligation causes is required.\n     fn register_predicates(&mut self, obligations: impl IntoIterator<Item: ToPredicate<'tcx>>);\n \n     /// Register an obligation that both constants must be equal to each other."}, {"sha": "f90f7674b55b19f1b57584ed0a30964e16af82d5", "filename": "compiler/rustc_infer/src/infer/equate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fequate.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -178,7 +178,7 @@ impl<'tcx> TypeRelation<'tcx> for Equate<'_, '_, 'tcx> {\n     where\n         T: Relate<'tcx>,\n     {\n-        // A binder is equal to itself if it's structually equal to itself\n+        // A binder is equal to itself if it's structurally equal to itself\n         if a == b {\n             return Ok(a);\n         }"}, {"sha": "f6a4ddd7855cadd04cdda9346795428af0f0b175", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -2886,7 +2886,7 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n             LetElse => ObligationCauseFailureCode::NoDiverge { span, subdiags },\n             MainFunctionType => ObligationCauseFailureCode::FnMainCorrectType { span },\n             StartFunctionType => ObligationCauseFailureCode::FnStartCorrectType { span, subdiags },\n-            IntrinsicType => ObligationCauseFailureCode::IntristicCorrectType { span, subdiags },\n+            IntrinsicType => ObligationCauseFailureCode::IntrinsicCorrectType { span, subdiags },\n             MethodReceiver => ObligationCauseFailureCode::MethodCorrectType { span, subdiags },\n \n             // In the case where we have no more specific thing to\n@@ -2943,7 +2943,7 @@ impl IntoDiagnosticArg for ObligationCauseAsDiagArg<'_> {\n             IfExpressionWithNoElse => \"no_else\",\n             MainFunctionType => \"fn_main_correct_type\",\n             StartFunctionType => \"fn_start_correct_type\",\n-            IntrinsicType => \"intristic_correct_type\",\n+            IntrinsicType => \"intrinsic_correct_type\",\n             MethodReceiver => \"method_correct_type\",\n             _ => \"other\",\n         }"}, {"sha": "58e3159a4e217885eb205d74b77b0c6c87e8f047", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1,5 +1,5 @@\n use crate::errors::{\n-    AmbigousReturn, AmbiguousImpl, AnnotationRequired, InferenceBadError, NeedTypeInfoInGenerator,\n+    AmbiguousImpl, AmbiguousReturn, AnnotationRequired, InferenceBadError, NeedTypeInfoInGenerator,\n     SourceKindMultiSuggestion, SourceKindSubdiag,\n };\n use crate::infer::error_reporting::TypeErrCtxt;\n@@ -368,7 +368,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 bad_label,\n             }\n             .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic),\n-            TypeAnnotationNeeded::E0284 => AmbigousReturn {\n+            TypeAnnotationNeeded::E0284 => AmbiguousReturn {\n                 span,\n                 source_kind,\n                 source_name,\n@@ -573,7 +573,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 bad_label: None,\n             }\n             .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic),\n-            TypeAnnotationNeeded::E0284 => AmbigousReturn {\n+            TypeAnnotationNeeded::E0284 => AmbiguousReturn {\n                 span,\n                 source_kind,\n                 source_name: &name,"}, {"sha": "c304cd25c9c410d534215ca78b4d5cb47af42add", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -42,7 +42,7 @@ impl<'a, 'tcx> CombineFields<'a, 'tcx> {\n \n         // Next, we instantiate each bound region in the subtype\n         // with a fresh region variable. These region variables --\n-        // but no other pre-existing region variables -- can name\n+        // but no other preexisting region variables -- can name\n         // the placeholders.\n         let sub_prime = self.infcx.instantiate_binder_with_fresh_vars(span, HigherRankedType, sub);\n "}, {"sha": "3766c250a9c702bbff7c12232a9190787e033ab7", "filename": "compiler/rustc_infer/src/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fsub.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -210,7 +210,7 @@ impl<'tcx> TypeRelation<'tcx> for Sub<'_, '_, 'tcx> {\n     where\n         T: Relate<'tcx>,\n     {\n-        // A binder is always a subtype of itself if it's structually equal to itself\n+        // A binder is always a subtype of itself if it's structurally equal to itself\n         if a == b {\n             return Ok(a);\n         }"}, {"sha": "8d0af738dd1153dfd89fbd564ca3f0ec22392f38", "filename": "compiler/rustc_infer/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -103,7 +103,7 @@ pub enum ProjectionCacheEntry<'tcx> {\n         /// if this field is set. Evaluation only\n         /// cares about the final result, so we don't\n         /// care about any region constraint side-effects\n-        /// produced by evaluating the sub-boligations.\n+        /// produced by evaluating the sub-obligations.\n         ///\n         /// Additionally, we will clear out the sub-obligations\n         /// entirely if we ever evaluate the cache entry (along"}, {"sha": "b986dde5a02b2f3a5394e20fc7a0ef97af9681be", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -22,7 +22,7 @@\n \n use crate::fluent_generated as fluent;\n use crate::{\n-    errors::BuiltinEllpisisInclusiveRangePatterns,\n+    errors::BuiltinEllipsisInclusiveRangePatterns,\n     lints::{\n         BuiltinAnonymousParams, BuiltinBoxPointers, BuiltinClashingExtern,\n         BuiltinClashingExternSub, BuiltinConstNoMangle, BuiltinDeprecatedAttrLink,\n@@ -1711,21 +1711,21 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n             }\n         }\n \n-        let (parenthesise, endpoints) = match &pat.kind {\n+        let (parentheses, endpoints) = match &pat.kind {\n             PatKind::Ref(subpat, _) => (true, matches_ellipsis_pat(&subpat)),\n             _ => (false, matches_ellipsis_pat(pat)),\n         };\n \n         if let Some((start, end, join)) = endpoints {\n-            if parenthesise {\n+            if parentheses {\n                 self.node_id = Some(pat.id);\n                 let end = expr_to_string(&end);\n                 let replace = match start {\n                     Some(start) => format!(\"&({}..={})\", expr_to_string(&start), end),\n                     None => format!(\"&(..={})\", end),\n                 };\n                 if join.edition() >= Edition::Edition2021 {\n-                    cx.sess().emit_err(BuiltinEllpisisInclusiveRangePatterns {\n+                    cx.sess().emit_err(BuiltinEllipsisInclusiveRangePatterns {\n                         span: pat.span,\n                         suggestion: pat.span,\n                         replace,\n@@ -1743,7 +1743,7 @@ impl EarlyLintPass for EllipsisInclusiveRangePatterns {\n             } else {\n                 let replace = \"..=\";\n                 if join.edition() >= Edition::Edition2021 {\n-                    cx.sess().emit_err(BuiltinEllpisisInclusiveRangePatterns {\n+                    cx.sess().emit_err(BuiltinEllipsisInclusiveRangePatterns {\n                         span: pat.span,\n                         suggestion: join,\n                         replace: replace.to_string(),\n@@ -2560,7 +2560,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n                             .subst(cx.tcx, substs)\n                             .apply_any_module(cx.tcx, cx.param_env)\n                         {\n-                            // Entirely skip uninhbaited variants.\n+                            // Entirely skip uninhabited variants.\n                             Some(false) => return None,\n                             // Forward the others, but remember which ones are definitely inhabited.\n                             Some(true) => true,"}, {"sha": "bbae3d368f43cb01a0254cbacf7264bed18692c2", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -81,7 +81,7 @@ pub struct UnknownToolInScopedLint {\n \n #[derive(Diagnostic)]\n #[diag(lint_builtin_ellipsis_inclusive_range_patterns, code = \"E0783\")]\n-pub struct BuiltinEllpisisInclusiveRangePatterns {\n+pub struct BuiltinEllipsisInclusiveRangePatterns {\n     #[primary_span]\n     pub span: Span,\n     #[suggestion(style = \"short\", code = \"{replace}\", applicability = \"machine-applicable\")]"}, {"sha": "b223b8c137a1a513c01530293017646193bc2097", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1021,7 +1021,7 @@ declare_lint! {\n \n declare_lint! {\n     /// The `invalid_alignment` lint detects dereferences of misaligned pointers during\n-    /// constant evluation.\n+    /// constant evaluation.\n     ///\n     /// ### Example\n     ///\n@@ -1854,7 +1854,7 @@ declare_lint! {\n     /// When new methods are added to traits in the standard library, they are\n     /// usually added in an \"unstable\" form which is only available on the\n     /// [nightly channel] with a [`feature` attribute]. If there is any\n-    /// pre-existing code which extends a trait to have a method with the same\n+    /// preexisting code which extends a trait to have a method with the same\n     /// name, then the names will collide. In the future, when the method is\n     /// stabilized, this will cause an error due to the ambiguity. This lint\n     /// is an early-warning to let you know that there may be a collision in"}, {"sha": "c9acbab253e10bf1d7f03866f469a2cda6e9fb8f", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -811,7 +811,7 @@ LLVMRustOptimize(\n   ModulePassManager MPM;\n   bool NeedThinLTOBufferPasses = UseThinLTOBuffers;\n   if (!NoPrepopulatePasses) {\n-    // The pre-link pipelines don't support O0 and require using budilO0DefaultPipeline() instead.\n+    // The pre-link pipelines don't support O0 and require using buildO0DefaultPipeline() instead.\n     // At the same time, the LTO pipelines do support O0 and using them is required.\n     bool IsLTO = OptStage == LLVMRustOptStage::ThinLTO || OptStage == LLVMRustOptStage::FatLTO;\n     if (OptLevel == OptimizationLevel::O0 && !IsLTO) {"}, {"sha": "e7154167ddb7f40fcabd8385e6b393d02ed57c5f", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -117,7 +117,7 @@ pub(crate) struct CrateMetadata {\n \n     /// Additional data used for decoding `HygieneData` (e.g. `SyntaxContext`\n     /// and `ExpnId`).\n-    /// Note that we store a `HygieneDecodeContext` for each `CrateMetadat`. This is\n+    /// Note that we store a `HygieneDecodeContext` for each `CrateMetadata`. This is\n     /// because `SyntaxContext` ids are not globally unique, so we need\n     /// to track which ids we've decoded on a per-crate basis.\n     hygiene_context: HygieneDecodeContext,\n@@ -627,7 +627,7 @@ impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Symbol {\n                 let pos = d.read_usize();\n                 let old_pos = d.opaque.position();\n \n-                // move to str ofset and read\n+                // move to str offset and read\n                 d.opaque.set_position(pos);\n                 let s = d.read_str();\n                 let sym = Symbol::intern(s);"}, {"sha": "65d04919357f3ee957dccc02c2cfc04c0c1c7196", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -102,7 +102,7 @@ impl<T: HasDataLayout> PointerArithmetic for T {}\n /// This trait abstracts over the kind of provenance that is associated with a `Pointer`. It is\n /// mostly opaque; the `Machine` trait extends it with some more operations that also have access to\n /// some global state.\n-/// The `Debug` rendering is used to distplay bare provenance, and for the default impl of `fmt`.\n+/// The `Debug` rendering is used to display bare provenance, and for the default impl of `fmt`.\n pub trait Provenance: Copy + fmt::Debug {\n     /// Says whether the `offset` field of `Pointer`s with this provenance is the actual physical address.\n     /// - If `false`, the offset *must* be relative. This means the bytes representing a pointer are"}, {"sha": "c38a347809f4f574869ce9a6b2962122fe6e18ad", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -251,7 +251,7 @@ pub enum StatementKind<'tcx> {\n     /// **Needs clarification**: The implication of the above idea would be that assignment implies\n     /// that the resulting value is initialized. I believe we could commit to this separately from\n     /// committing to whatever part of the memory model we would need to decide on to make the above\n-    /// paragragh precise. Do we want to?\n+    /// paragraph precise. Do we want to?\n     ///\n     /// Assignments in which the types of the place and rvalue differ are not well-formed.\n     ///\n@@ -997,7 +997,7 @@ pub type PlaceElem<'tcx> = ProjectionElem<Local, Ty<'tcx>>;\n /// This is what is implemented in miri today. Are these the semantics we want for MIR? Is this\n /// something we can even decide without knowing more about Rust's memory model?\n ///\n-/// **Needs clarifiation:** Is loading a place that has its variant index set well-formed? Miri\n+/// **Needs clarification:** Is loading a place that has its variant index set well-formed? Miri\n /// currently implements it, but it seems like this may be something to check against in the\n /// validator.\n #[derive(Clone, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable, TypeVisitable)]"}, {"sha": "223b763e34bfa837b4cedfa9ed1c959ecc92f2e8", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1,4 +1,4 @@\n-//! A subset of a mir body used for const evaluatability checking.\n+//! A subset of a mir body used for const evaluability checking.\n use crate::ty::{\n     self, Const, EarlyBinder, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable,\n     TypeVisitableExt,"}, {"sha": "76f61d9ac9c2d8ea151b91d3dc0be1be4bbe9d58", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -68,7 +68,7 @@ pub enum TreatParams {\n }\n \n /// During fast-rejection, we have the choice of treating projection types\n-/// as either simplifyable or not, depending on whether we expect the projection\n+/// as either simplifiable or not, depending on whether we expect the projection\n /// to be normalized/rigid.\n #[derive(PartialEq, Eq, Debug, Clone, Copy)]\n pub enum TreatProjections {"}, {"sha": "1e2fd86e13dc8b626b67cc6707d549a12fe685f2", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -235,7 +235,7 @@ impl IntoDiagnostic<'_, !> for LayoutError<'_> {\n     }\n }\n \n-// FIXME: Once the other errors that embed this error have been converted to translateable\n+// FIXME: Once the other errors that embed this error have been converted to translatable\n // diagnostics, this Display impl should be removed.\n impl<'tcx> fmt::Display for LayoutError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -458,10 +458,10 @@ impl<'tcx> SizeSkeleton<'tcx> {\n     }\n }\n \n-/// When creating the layout for types with abstract conts in their size (i.e. [usize; 4 * N]),\n+/// When creating the layout for types with abstract consts in their size (i.e. [usize; 4 * N]),\n /// to ensure that they have a canonical order and can be compared directly we combine all\n /// constants, and sort the other terms. This allows comparison of expressions of sizes,\n-/// allowing for things like transmutating between types that depend on generic consts.\n+/// allowing for things like transmuting between types that depend on generic consts.\n /// This returns `None` if multiplication of constants overflows.\n fn mul_sorted_consts<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "8a2258375ab4d5cb21be3d4bdcfbee25e461b6c4", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -197,7 +197,7 @@ impl<'tcx> fmt::Debug for AliasTy<'tcx> {\n // Atomic structs\n //\n // For things that don't carry any arena-allocated data (and are\n-// copy...), just add them to one of these lists as appropriat.\n+// copy...), just add them to one of these lists as appropriate.\n \n // For things for which the type library provides traversal implementations\n // for all Interners, we only need to provide a Lift implementation:"}, {"sha": "b58bd24ec52865894bab5fc504dcb3c381adb9cf", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -642,7 +642,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    /// Return the set of types that should be taken into accound when checking\n+    /// Return the set of types that should be taken into account when checking\n     /// trait bounds on a generator's internal state.\n     pub fn generator_hidden_types(\n         self,\n@@ -1402,7 +1402,7 @@ pub fn is_trivially_const_drop(ty: Ty<'_>) -> bool {\n }\n \n /// Does the equivalent of\n-/// ```ignore (ilustrative)\n+/// ```ignore (illustrative)\n /// let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();\n /// folder.tcx().intern_*(&v)\n /// ```"}, {"sha": "9b38ac1cc4ce753aa5c6922770c899a5a4e26984", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -163,13 +163,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 //\n                 // [block: If(lhs)] -true-> [else_block: dest = (rhs)]\n                 //        | (false)\n-                //  [shortcurcuit_block: dest = false]\n+                //  [shortcircuit_block: dest = false]\n                 //\n                 // Or:\n                 //\n                 // [block: If(lhs)] -false-> [else_block: dest = (rhs)]\n                 //        | (true)\n-                //  [shortcurcuit_block: dest = true]\n+                //  [shortcircuit_block: dest = true]\n \n                 let (shortcircuit_block, mut else_block, join_block) = (\n                     this.cfg.start_new_block(),"}, {"sha": "4536ecf17b813ae6ad53a9fea466b5c06733987c", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | PatKind::Wild\n             | PatKind::Binding { .. }\n             | PatKind::Leaf { .. }\n-            | PatKind::Deref { .. } => self.error_simplifyable(match_pair),\n+            | PatKind::Deref { .. } => self.error_simplifiable(match_pair),\n         }\n     }\n \n@@ -173,15 +173,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             debug_assert_ne!(\n                                 target_blocks[idx.index()],\n                                 otherwise_block,\n-                                \"no canididates for tested discriminant: {:?}\",\n+                                \"no candidates for tested discriminant: {:?}\",\n                                 discr,\n                             );\n                             Some((discr.val, target_blocks[idx.index()]))\n                         } else {\n                             debug_assert_eq!(\n                                 target_blocks[idx.index()],\n                                 otherwise_block,\n-                                \"found canididates for untested discriminant: {:?}\",\n+                                \"found candidates for untested discriminant: {:?}\",\n                                 discr,\n                             );\n                             None\n@@ -499,7 +499,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// However, in some cases, the test may just not be relevant to candidate.\n     /// For example, suppose we are testing whether `foo.x == 22`, but in one\n     /// match arm we have `Foo { x: _, ... }`... in that case, the test for\n-    /// what value `x` has has no particular relevance to this candidate. In\n+    /// the value of `x` has no particular relevance to this candidate. In\n     /// such cases, this function just returns None without doing anything.\n     /// This is used by the overall `match_candidates` algorithm to structure\n     /// the match as a whole. See `match_candidates` for more details.\n@@ -763,8 +763,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         candidate.match_pairs.extend(consequent_match_pairs);\n     }\n \n-    fn error_simplifyable<'pat>(&mut self, match_pair: &MatchPair<'pat, 'tcx>) -> ! {\n-        span_bug!(match_pair.pattern.span, \"simplifyable pattern found: {:?}\", match_pair.pattern)\n+    fn error_simplifiable<'pat>(&mut self, match_pair: &MatchPair<'pat, 'tcx>) -> ! {\n+        span_bug!(match_pair.pattern.span, \"simplifiable pattern found: {:?}\", match_pair.pattern)\n     }\n \n     fn const_range_contains("}, {"sha": "c99fc73fe8a3460d8848bf0d8591e4ebf2fbc480", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -156,7 +156,7 @@ impl<'tcx> ConstToPat<'tcx> {\n \n             if let Some(non_sm_ty) = structural {\n                 if !self.type_may_have_partial_eq_impl(cv.ty()) {\n-                    // fatal avoids ICE from resolution of non-existent method (rare case).\n+                    // fatal avoids ICE from resolution of nonexistent method (rare case).\n                     self.tcx()\n                         .sess\n                         .emit_fatal(TypeNotStructural { span: self.span, non_sm_ty: non_sm_ty });"}, {"sha": "d8fd06eab86d19f3c811d7eb2d01148cc75bf7e3", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -366,7 +366,7 @@ where\n rustc_index::newtype_index!(\n     /// This index uniquely identifies a place.\n     ///\n-    /// Not every place has a `PlaceIndex`, and not every `PlaceIndex` correspondends to a tracked\n+    /// Not every place has a `PlaceIndex`, and not every `PlaceIndex` corresponds to a tracked\n     /// place. However, every tracked place and all places along its projection have a `PlaceIndex`.\n     pub struct PlaceIndex {}\n );"}, {"sha": "b29ffcc70f93f77f7fd636c57d4b24d4bdd6b032", "filename": "compiler/rustc_mir_transform/src/add_moves_for_packed_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::patch::MirPatch;\n /// they are dropped from an aligned address.\n ///\n /// For example, if we have something like\n-/// ```ignore (ilustrative)\n+/// ```ignore (illustrative)\n /// #[repr(packed)]\n /// struct Foo {\n ///     dealign: u8,\n@@ -25,7 +25,7 @@ use rustc_middle::mir::patch::MirPatch;\n /// its address is not aligned.\n ///\n /// Instead, we move `foo.data` to a local and drop that:\n-/// ```ignore (ilustrative)\n+/// ```ignore (illustrative)\n ///     storage.live(drop_temp)\n ///     drop_temp = foo.data;\n ///     drop(drop_temp) -> next"}, {"sha": "187d38b385be3e678a1decb7d530eac35172ded0", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n         let basic_blocks = body.basic_blocks.as_mut();\n         let local_decls = &body.local_decls;\n         let needs_retag = |place: &Place<'tcx>| {\n-            !place.has_deref() // we're not eally interested in stores to \"outside\" locations, they are hard to keep track of anyway\n+            !place.has_deref() // we're not really interested in stores to \"outside\" locations, they are hard to keep track of anyway\n                 && may_contain_reference(place.ty(&*local_decls, tcx).ty, /*depth*/ 3, tcx)\n                 && !local_decls[place.local].is_deref_temp()\n         };"}, {"sha": "692b3182f7d2396c5d16850224fe1d065dc2b65b", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -22,7 +22,7 @@ impl<'tcx> MirPass<'tcx> for ConstDebugInfo {\n     fn run_pass(&self, _tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         trace!(\"running ConstDebugInfo on {:?}\", body.source);\n \n-        for (local, constant) in find_optimization_oportunities(body) {\n+        for (local, constant) in find_optimization_opportunities(body) {\n             for debuginfo in &mut body.var_debug_info {\n                 if let VarDebugInfoContents::Place(p) = debuginfo.value {\n                     if p.local == local && p.projection.is_empty() {\n@@ -45,7 +45,7 @@ struct LocalUseVisitor {\n     local_assignment_locations: IndexVec<Local, Option<Location>>,\n }\n \n-fn find_optimization_oportunities<'tcx>(body: &Body<'tcx>) -> Vec<(Local, Constant<'tcx>)> {\n+fn find_optimization_opportunities<'tcx>(body: &Body<'tcx>) -> Vec<(Local, Constant<'tcx>)> {\n     let mut visitor = LocalUseVisitor {\n         local_mutating_uses: IndexVec::from_elem(0, &body.local_decls),\n         local_assignment_locations: IndexVec::from_elem(None, &body.local_decls),"}, {"sha": "c9537f9a61c09245ba596e6ec48fd58521dfe161", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -826,7 +826,7 @@ impl Visitor<'_> for CanConstProp {\n             | NonMutatingUse(NonMutatingUseContext::AddressOf)\n             | MutatingUse(MutatingUseContext::Borrow)\n             | MutatingUse(MutatingUseContext::AddressOf) => {\n-                trace!(\"local {:?} can't be propagaged because it's used: {:?}\", local, context);\n+                trace!(\"local {:?} can't be propagated because it's used: {:?}\", local, context);\n                 self.can_const_prop[local] = ConstPropMode::NoPropagation;\n             }\n         }"}, {"sha": "8ff67b5f8d3ffaa8b21ccf2417e86643f39092b8", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -111,7 +111,7 @@ impl CoverageGraph {\n                         if predecessors.len() > 1 {\n                             \"predecessors.len() > 1\".to_owned()\n                         } else {\n-                            format!(\"bb {} is not in precessors: {:?}\", bb.index(), predecessors)\n+                            format!(\"bb {} is not in predecessors: {:?}\", bb.index(), predecessors)\n                         }\n                     );\n                 }"}, {"sha": "a56c5cc5c12f960970d56ccac341c7cf621fd506", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -351,7 +351,7 @@ impl<'a, 'tcx> ConstAnalysis<'a, 'tcx> {\n             }\n             (FlatSet::Bottom, _) | (_, FlatSet::Bottom) => (FlatSet::Bottom, FlatSet::Bottom),\n             (_, _) => {\n-                // Could attempt some algebraic simplifcations here.\n+                // Could attempt some algebraic simplifications here.\n                 (FlatSet::Top, FlatSet::Top)\n             }\n         }"}, {"sha": "5a842714e5dadc50feb9f266e24b1d1507951b50", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -69,7 +69,7 @@\n //!   of this is that such liveness analysis can report more accurate results about whole locals at\n //!   a time. For example, consider:\n //!\n-//!   ```ignore (syntax-highliting-only)\n+//!   ```ignore (syntax-highlighting-only)\n //!   _1 = u;\n //!   // unrelated code\n //!   _1.f1 = v;\n@@ -360,7 +360,7 @@ struct FilterInformation<'a, 'body, 'alloc, 'tcx> {\n }\n \n // We first implement some utility functions which we will expose removing candidates according to\n-// different needs. Throughout the livenss filtering, the `candidates` are only ever accessed\n+// different needs. Throughout the liveness filtering, the `candidates` are only ever accessed\n // through these methods, and not directly.\n impl<'alloc> Candidates<'alloc> {\n     /// Just `Vec::retain`, but the condition is inverted and we add debugging output"}, {"sha": "1e115be2c2ab90728408d7b911cd8eb28c878158", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -24,7 +24,7 @@ use std::fmt;\n /// In general, the compiler cannot determine at compile time whether a destructor will run or not.\n ///\n /// At a high level, this pass refines Drop to only run the destructor if the\n-/// target is initialized. The way this is achievied is by inserting drop flags for every variable\n+/// target is initialized. The way this is achieved is by inserting drop flags for every variable\n /// that may be dropped, and then using those flags to determine whether a destructor should run.\n /// Once this is complete, Drop terminators in the MIR correspond to a call to the \"drop glue\" or\n /// \"drop shim\" for the type of the dropped place."}, {"sha": "507e12d72389465858a559f10b21753c170a91e0", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1869,7 +1869,7 @@ fn check_must_not_suspend_ty<'tcx>(\n                 },\n             )\n         }\n-        // If drop tracking is enabled, we want to look through references, since the referrent\n+        // If drop tracking is enabled, we want to look through references, since the referent\n         // may not be considered live across the await point.\n         ty::Ref(_region, ty, _mutability) => {\n             let descr_pre = &format!(\"{}reference{} to \", data.descr_pre, plural_suffix);"}, {"sha": "9d9c5d540381a1c4c0a934d93169e590030ce3e3", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -21,7 +21,7 @@ pub struct SsaLocals {\n \n /// We often encounter MIR bodies with 1 or 2 basic blocks. In those cases, it's unnecessary to\n /// actually compute dominators, we can just compare block indices because bb0 is always the first\n-/// block, and in any body all other blocks are always always dominated by bb0.\n+/// block, and in any body all other blocks are always dominated by bb0.\n struct SmallDominators {\n     inner: Option<Dominators<BasicBlock>>,\n }"}, {"sha": "2ed628871d2d7c14cb2e0005e3ab8e78a0ddba4c", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -402,7 +402,7 @@ fn collect_roots(tcx: TyCtxt<'_>, mode: MonoItemCollectionMode) -> Vec<MonoItem<\n }\n \n /// Collect all monomorphized items reachable from `starting_point`, and emit a note diagnostic if a\n-/// post-monorphization error is encountered during a collection step.\n+/// post-monomorphization error is encountered during a collection step.\n #[instrument(skip(tcx, visited, recursion_depths, recursion_limit, inlining_map), level = \"debug\")]\n fn collect_items_rec<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "49126045d0cfe8f9e1d0e85745d9ccc5914f5052", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -424,7 +424,7 @@ fn mono_item_visibility<'tcx>(\n         InstanceDef::Item(def) => def.did,\n         InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n \n-        // We match the visiblity of statics here\n+        // We match the visibility of statics here\n         InstanceDef::ThreadLocalShim(def_id) => {\n             return static_visibility(tcx, can_be_internalized, def_id);\n         }"}, {"sha": "ad9b20f9c767a31894fb9b81d8162104ab230bd9", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -67,7 +67,7 @@ pub(crate) fn parse_token_trees<'a>(\n     match token_trees {\n         Ok(stream) if unmatched_delims.is_empty() => Ok(stream),\n         _ => {\n-            // Return error if there are unmatched delimiters or unclosng delimiters.\n+            // Return error if there are unmatched delimiters or unclosed delimiters.\n             // We emit delimiter mismatch errors first, then emit the unclosing delimiter mismatch\n             // because the delimiter mismatch is more likely to be the root cause of error\n "}, {"sha": "2f397e303e508101e9f14cb3e8bf2b036ec43a79", "filename": "compiler/rustc_parse/src/validate_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fvalidate_attr.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -68,7 +68,7 @@ pub fn parse_meta<'a>(sess: &'a ParseSess, attr: &Attribute) -> PResult<'a, Meta\n                     }\n                 } else {\n                     // The non-error case can happen with e.g. `#[foo = 1+1]`. The error case can\n-                    // happen with e.g. `#[foo = include_str!(\"non-existent-file.rs\")]`; in that\n+                    // happen with e.g. `#[foo = include_str!(\"nonexistent-file.rs\")]`; in that\n                     // case we delay the error because an earlier error will have already been\n                     // reported.\n                     let msg = format!(\"unexpected expression: `{}`\", pprust::expr_to_string(expr));"}, {"sha": "dc3cb64b3c27941251351855cb086dda5c3a3ba2", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -744,7 +744,7 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Symbol {\n                 let pos = d.read_usize();\n                 let old_pos = d.opaque.position();\n \n-                // move to str ofset and read\n+                // move to str offset and read\n                 d.opaque.set_position(pos);\n                 let s = d.read_str();\n                 let sym = Symbol::intern(s);"}, {"sha": "0d01123ad88ba0d9808df62f609cd3b6b06f836a", "filename": "compiler/rustc_query_system/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_query_system%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_query_system%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fmessages.ftl?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1,4 +1,4 @@\n-query_system_reentrant = internal compiler error: re-entrant incremental verify failure, suppressing message\n+query_system_reentrant = internal compiler error: reentrant incremental verify failure, suppressing message\n \n query_system_increment_compilation = internal compiler error: encountered incremental compilation error with {$dep_node}\n     .help = This is a known issue with the compiler. Run {$run_cmd} to allow your project to compile"}, {"sha": "fd9e685ab80852c6cc8c26dd3fbf24b97583d58d", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -249,7 +249,7 @@ impl<K: DepKind> DepGraph<K> {\n     /// get an ICE. Normally, we would have tried (and failed) to mark\n     /// some other query green (e.g. `item_children`) which was used\n     /// to obtain `C`, which would prevent us from ever trying to force\n-    /// a non-existent `D`.\n+    /// a nonexistent `D`.\n     ///\n     /// It might be possible to enforce that all `DepNode`s read during\n     /// deserialization already exist in the previous `DepGraph`. In"}, {"sha": "bb9ea50a1ea56e6b62a1d0409d60b5be524cc0bc", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -63,7 +63,7 @@ pub trait QueryConfig<Qcx: QueryContext>: Copy {\n     fn handle_cycle_error(self) -> HandleCycleError;\n     fn hash_result(self) -> HashResult<Self::Value>;\n \n-    // Just here for convernience and checking that the key matches the kind, don't override this.\n+    // Just here for convenience and checking that the key matches the kind, don't override this.\n     fn construct_dep_node(self, tcx: Qcx::DepContext, key: &Self::Key) -> DepNode<Qcx::DepKind> {\n         DepNode::construct(tcx, self.dep_kind(), key)\n     }"}, {"sha": "132f3512ff2a6021fcf0385ec3177f3e1bf0aca2", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -691,7 +691,7 @@ fn incremental_verify_ich_failed<Tcx>(\n     // which may result in another fingerprint mismatch while we're in the middle\n     // of processing this one. To avoid a double-panic (which kills the process\n     // before we can print out the query static), we print out a terse\n-    // but 'safe' message if we detect a re-entrant call to this method.\n+    // but 'safe' message if we detect a reentrant call to this method.\n     thread_local! {\n         static INSIDE_VERIFY_PANIC: Cell<bool> = const { Cell::new(false) };\n     };"}, {"sha": "87067189a77580edd1948c21fc285203d115408e", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -175,7 +175,7 @@ impl<'r, 'a, 'tcx> EffectiveVisibilitiesVisitor<'r, 'a, 'tcx> {\n     /// to not update anything and we can skip it.\n     ///\n     /// We are checking this condition only if the correct value of private visibility is\n-    /// cheaply available, otherwise it does't make sense performance-wise.\n+    /// cheaply available, otherwise it doesn't make sense performance-wise.\n     ///\n     /// `None` is returned if the update can be skipped,\n     /// and cheap private visibility is returned otherwise."}, {"sha": "af0ec236df06385f4397e48c84e3988b13c02b96", "filename": "compiler/rustc_resolve/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -22,7 +22,7 @@ pub(crate) struct UnderscoreLifetimeNameCannotBeUsedHere(#[primary_span] pub(cra\n \n #[derive(Diagnostic)]\n #[diag(resolve_crate_may_not_be_imported)]\n-pub(crate) struct CrateMayNotBeImprted(#[primary_span] pub(crate) Span);\n+pub(crate) struct CrateMayNotBeImported(#[primary_span] pub(crate) Span);\n \n #[derive(Diagnostic)]\n #[diag(resolve_crate_root_imports_must_be_named_explicitly)]"}, {"sha": "a97857e05e2e9df818c684cdb535e6c112af7b79", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1079,7 +1079,7 @@ impl<'a: 'ast, 'ast, 'tcx> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast,\n                     for rib in self.lifetime_ribs.iter().rev() {\n                         match rib.kind {\n                             // We are inside a `PolyTraitRef`. The lifetimes are\n-                            // to be intoduced in that (maybe implicit) `for<>` binder.\n+                            // to be introduced in that (maybe implicit) `for<>` binder.\n                             LifetimeRibKind::Generics {\n                                 binder,\n                                 kind: LifetimeBinderKind::PolyTrait,\n@@ -3803,7 +3803,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n             // use std::u8; // bring module u8 in scope\n             // fn f() -> u8 { // OK, resolves to primitive u8, not to std::u8\n             //     u8::max_value() // OK, resolves to associated function <u8>::max_value,\n-            //                     // not to non-existent std::u8::max_value\n+            //                     // not to nonexistent std::u8::max_value\n             // }\n             //\n             // Such behavior is required for backward compatibility."}, {"sha": "e824a6ddc072fcbc1290eea5187df07ab5a687a6", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -91,7 +91,7 @@ fn import_candidate_to_enum_paths(suggestion: &ImportSuggestion) -> (String, Str\n /// Description of an elided lifetime.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug)]\n pub(super) struct MissingLifetime {\n-    /// Used to overwrite the resolution with the suggestion, to avoid cascasing errors.\n+    /// Used to overwrite the resolution with the suggestion, to avoid cascading errors.\n     pub id: NodeId,\n     /// Where to suggest adding the lifetime.\n     pub span: Span,\n@@ -408,7 +408,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n         }\n         let Some(path_last_segment) = path.last() else { return };\n         let item_str = path_last_segment.ident;\n-        // Emit help message for fake-self from other languages (e.g., `this` in Javascript).\n+        // Emit help message for fake-self from other languages (e.g., `this` in JavaScript).\n         if [\"this\", \"my\"].contains(&item_str.as_str()) {\n             err.span_suggestion_short(\n                 span,"}, {"sha": "7f29922f6965c90c03ff95ef322045e82ec83039", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -483,7 +483,7 @@ impl SourceMap {\n         self.span_to_string(sp, FileNameDisplayPreference::Remapped)\n     }\n \n-    /// Format the span location suitable for pretty printing anotations with relative line numbers\n+    /// Format the span location suitable for pretty printing annotations with relative line numbers\n     pub fn span_to_relative_line_string(&self, sp: Span, relative_to: Span) -> String {\n         if self.files.borrow().source_files.is_empty() || sp.is_dummy() || relative_to.is_dummy() {\n             return \"no-location\".to_string();\n@@ -777,7 +777,7 @@ impl SourceMap {\n \n     /// Given a 'Span', tries to tell if it's wrapped by \"<>\" or \"()\"\n     /// the algorithm searches if the next character is '>' or ')' after skipping white space\n-    /// then searches the previous charactoer to match '<' or '(' after skipping white space\n+    /// then searches the previous character to match '<' or '(' after skipping white space\n     /// return true if wrapped by '<>' or '()'\n     pub fn span_wrapped_by_angle_or_parentheses(&self, span: Span) -> bool {\n         self.span_to_source(span, |src, start_index, end_index| {"}, {"sha": "b01dac8c70d7e0df8313dedfc17905657bb81dd4", "filename": "compiler/rustc_target/src/abi/call/avr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Favr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Favr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Favr.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -10,7 +10,7 @@\n //! > self-consistent and sensible LLVM IR generation, but does not\n //! > conform to any particular ABI.\n //! >\n-//! > - Doxygen Doxumentation of `clang::DefaultABIInfo`\n+//! > - Doxygen Documentation of `clang::DefaultABIInfo`\n //!\n //! This calling convention may not match AVR-GCC in all cases.\n //!"}, {"sha": "3ee3a8ea227ec69a5dc2b377f3f2ed71f72009e4", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -2285,13 +2285,13 @@ impl Target {\n                     }\n                 }\n             } );\n-            ($key_name:ident, falliable_list) => ( {\n+            ($key_name:ident, fallible_list) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.remove(&name).and_then(|j| {\n                     if let Some(v) = j.as_array() {\n                         match v.iter().map(|a| FromStr::from_str(a.as_str().unwrap())).collect() {\n                             Ok(l) => { base.$key_name = l },\n-                            // FIXME: `falliable_list` can't re-use the `key!` macro for list\n+                            // FIXME: `fallible_list` can't re-use the `key!` macro for list\n                             // elements and the error messages from that macro, so it has a bad\n                             // generic message instead\n                             Err(_) => return Some(Err(\n@@ -2610,7 +2610,7 @@ impl Target {\n         key!(has_thumb_interworking, bool);\n         key!(debuginfo_kind, DebuginfoKind)?;\n         key!(split_debuginfo, SplitDebuginfo)?;\n-        key!(supported_split_debuginfo, falliable_list)?;\n+        key!(supported_split_debuginfo, fallible_list)?;\n         key!(supported_sanitizers, SanitizerSet)?;\n         key!(default_adjusted_cabi, Option<Abi>)?;\n         key!(generate_arange_section, bool);"}, {"sha": "2220b9326c977c0943454acb65cf8e5a47fe31b0", "filename": "compiler/rustc_target/src/spec/thumb_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumb_base.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -12,7 +12,7 @@\n //\n // We have opted for these instead of one target per processor (e.g., `cortex-m0`, `cortex-m3`,\n // etc) because the differences between some processors like the cortex-m0 and cortex-m1 are almost\n-// non-existent from the POV of codegen so it doesn't make sense to have separate targets for them.\n+// nonexistent from the POV of codegen so it doesn't make sense to have separate targets for them.\n // And if differences exist between two processors under the same target, rustc flags can be used to\n // optimize for one processor or the other.\n //"}, {"sha": "bacb0e32efc1a92373e2fa403fefb97c82c238dc", "filename": "compiler/rustc_trait_selection/src/solve/assembly/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fmod.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -51,7 +51,7 @@ pub(super) enum CandidateSource {\n     BuiltinImpl,\n     /// An assumption from the environment.\n     ///\n-    /// More precicely we've used the `n-th` assumption in the `param_env`.\n+    /// More precisely we've used the `n-th` assumption in the `param_env`.\n     ///\n     /// ## Examples\n     ///\n@@ -241,7 +241,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n \n         // HACK: `_: Trait` is ambiguous, because it may be satisfied via a builtin rule,\n         // object bound, alias bound, etc. We are unable to determine this until we can at\n-        // least structually resolve the type one layer.\n+        // least structurally resolve the type one layer.\n         if goal.predicate.self_ty().is_ty_var() {\n             return vec![Candidate {\n                 source: CandidateSource::BuiltinImpl,"}, {"sha": "23cf0f0c724baf419f2a3aa4f87ae50cc16f8a2a", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -156,8 +156,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                     }\n                 }\n                 GenericArgKind::Const(c) => {\n-                    if let ty::ConstKind::Bound(debrujin, b) = c.kind() {\n-                        assert_eq!(debrujin, ty::INNERMOST);\n+                    if let ty::ConstKind::Bound(debruijn, b) = c.kind() {\n+                        assert_eq!(debruijn, ty::INNERMOST);\n                         opt_values[b] = Some(*original_value);\n                     }\n                 }\n@@ -177,7 +177,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                     // As an optimization we sometimes avoid creating a new inference variable here.\n                     //\n                     // All new inference variables we create start out in the current universe of the caller.\n-                    // This is conceptionally wrong as these inference variables would be able to name\n+                    // This is conceptually wrong as these inference variables would be able to name\n                     // more placeholders then they should be able to. However the inference variables have\n                     // to \"come from somewhere\", so by equating them with the original values of the caller\n                     // later on, we pull them down into their correct universe again."}, {"sha": "1abcc80d01a3279da24c5ab8c64decbc471eb842", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -591,7 +591,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n                 Some(self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS))\n             }\n \n-            // These types cannot be structurally decomposed into constitutent\n+            // These types cannot be structurally decomposed into constituent\n             // types, and therefore have no built-in auto impl.\n             ty::Dynamic(..)\n             | ty::Param(..)"}, {"sha": "726b08dc7d75d2db3402e83f4a7a39d789c4602a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -467,7 +467,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n         }\n \n-        self.tcx.sess.delay_span_bug(DUMMY_SP, \"expected fullfillment errors\")\n+        self.tcx.sess.delay_span_bug(DUMMY_SP, \"expected fulfillment errors\")\n     }\n \n     /// Reports that an overflow has occurred and halts compilation. We\n@@ -2056,7 +2056,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         if candidates.iter().any(|c| matches!(c.similarity, CandidateSimilarity::Exact { .. })) {\n             // If any of the candidates is a perfect match, we don't want to show all of them.\n             // This is particularly relevant for the case of numeric types (as they all have the\n-            // same cathegory).\n+            // same category).\n             candidates.retain(|c| matches!(c.similarity, CandidateSimilarity::Exact { .. }));\n         }\n         candidates"}, {"sha": "73207f183a1d8ac2084643e54206adacbf6aecab", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -1381,7 +1381,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             }\n                         }\n \n-                        // Issue #104961, we need to add parentheses properly for compond expressions\n+                        // Issue #104961, we need to add parentheses properly for compound expressions\n                         // for example, `x.starts_with(\"hi\".to_string() + \"you\")`\n                         // should be `x.starts_with(&(\"hi\".to_string() + \"you\"))`\n                         let Some(body_id) = self.tcx.hir().maybe_body_owned_by(obligation.cause.body_id) else { return false; };"}, {"sha": "63949843aedcdc0f19cab3fb8eac1cad0c2bbe4f", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -14,7 +14,7 @@ use rustc_span::DUMMY_SP;\n use super::outlives_bounds::InferCtxtExt;\n \n pub enum CopyImplementationError<'tcx> {\n-    InfrigingFields(Vec<(&'tcx ty::FieldDef, Ty<'tcx>, InfringingFieldsReason<'tcx>)>),\n+    InfringingFields(Vec<(&'tcx ty::FieldDef, Ty<'tcx>, InfringingFieldsReason<'tcx>)>),\n     NotAnAdt,\n     HasDestructor,\n }\n@@ -125,7 +125,7 @@ pub fn type_allowed_to_implement_copy<'tcx>(\n     }\n \n     if !infringing.is_empty() {\n-        return Err(CopyImplementationError::InfrigingFields(infringing));\n+        return Err(CopyImplementationError::InfringingFields(infringing));\n     }\n \n     if adt.has_dtor(tcx) {"}, {"sha": "4c9df5d9d0a268a92a69027c29c5d767b7bf7269", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -203,7 +203,7 @@ fn do_normalize_predicates<'tcx>(\n         }\n     };\n \n-    debug!(\"do_normalize_predictes: normalized predicates = {:?}\", predicates);\n+    debug!(\"do_normalize_predicates: normalized predicates = {:?}\", predicates);\n \n     // We can use the `elaborated_env` here; the region code only\n     // cares about declarations like `'a: 'b`."}, {"sha": "0fdba524e2569c1d5ad1475502447eb82cfe65b2", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -888,7 +888,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         let c1 = tcx.expand_abstract_consts(c1);\n                         let c2 = tcx.expand_abstract_consts(c2);\n                         debug!(\n-                            \"evalaute_predicate_recursively: equating consts:\\nc1= {:?}\\nc2= {:?}\",\n+                            \"evaluate_predicate_recursively: equating consts:\\nc1= {:?}\\nc2= {:?}\",\n                             c1, c2\n                         );\n "}, {"sha": "ed513cb3c7fc81784fd8f722bc20b87582139b8a", "filename": "compiler/rustc_ty_utils/src/layout_sanity_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_ty_utils%2Fsrc%2Flayout_sanity_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_ty_utils%2Fsrc%2Flayout_sanity_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout_sanity_check.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -285,7 +285,7 @@ pub(super) fn sanity_check_layout<'tcx>(\n             {\n                 // These are never actually accessed anyway, so we can skip the coherence check\n                 // for them. They also fail that check, since they have\n-                // `Aggregate`/`Uninhbaited` ABI even when the main type is\n+                // `Aggregate`/`Uninhabited` ABI even when the main type is\n                 // `Scalar`/`ScalarPair`. (Note that sometimes, variants with fields have size\n                 // 0, and sometimes, variants without fields have non-0 size.)\n                 continue;"}, {"sha": "5f436f7c9fdf96919c2ba8ce2341f9c3f233758f", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -243,7 +243,7 @@ fn drop_tys_helper<'tcx>(\n         } else {\n             let field_tys = adt_def.all_fields().map(|field| {\n                 let r = tcx.type_of(field.did).subst(tcx, substs);\n-                debug!(\"drop_tys_helper: Subst into {:?} with {:?} gettng {:?}\", field, substs, r);\n+                debug!(\"drop_tys_helper: Subst into {:?} with {:?} getting {:?}\", field, substs, r);\n                 r\n             });\n             if only_significant {"}, {"sha": "3d460490eb3f5c7f3ab12b03be46e2d50ef3788d", "filename": "tests/ui/error-codes/E0026-teach.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/tests%2Fui%2Ferror-codes%2FE0026-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/tests%2Fui%2Ferror-codes%2FE0026-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0026-teach.stderr?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -4,7 +4,7 @@ error[E0026]: struct `Thing` does not have a field named `z`\n LL |         Thing { x, y, z } => {}\n    |                       ^ struct `Thing` does not have this field\n    |\n-   = note: This error indicates that a struct pattern attempted to extract a non-existent field from a struct. Struct fields are identified by the name used before the colon : so struct patterns should resemble the declaration of the struct type being matched.\n+   = note: This error indicates that a struct pattern attempted to extract a nonexistent field from a struct. Struct fields are identified by the name used before the colon : so struct patterns should resemble the declaration of the struct type being matched.\n            \n            If you are using shorthand field patterns but want to refer to the struct field by a different name, you should rename it explicitly.\n "}, {"sha": "e24cb11288e2982bc3da5b9ab11b920c62e7aae5", "filename": "tests/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e09d0d2a29e81972563a52dc28f867499ffc9315/tests%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e09d0d2a29e81972563a52dc28f867499ffc9315/tests%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=e09d0d2a29e81972563a52dc28f867499ffc9315", "patch": "@@ -115,7 +115,7 @@ LL |         Self::SVariant::<()> { v: () };\n    |               not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n-help: you might have meant to specity type parameters on enum `Enum`\n+help: you might have meant to specify type parameters on enum `Enum`\n    |\n LL -         Self::SVariant::<()> { v: () };\n LL +         Enum::<()>::SVariant { v: () };\n@@ -196,7 +196,7 @@ LL |         Self::<()>::SVariant::<()> { v: () };\n    |                     not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n-help: you might have meant to specity type parameters on enum `Enum`\n+help: you might have meant to specify type parameters on enum `Enum`\n    |\n LL -         Self::<()>::SVariant::<()> { v: () };\n LL +         Enum::<()>::SVariant { v: () };\n@@ -359,7 +359,7 @@ LL |     Alias::SVariant::<()> { v: () };\n    |            not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n-help: you might have meant to specity type parameters on enum `Enum`\n+help: you might have meant to specify type parameters on enum `Enum`\n    |\n LL -     Alias::SVariant::<()> { v: () };\n LL +     Alias::<()>::SVariant { v: () };\n@@ -374,7 +374,7 @@ LL |     Alias::<()>::SVariant::<()> { v: () };\n    |                  not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n-help: you might have meant to specity type parameters on enum `Enum`\n+help: you might have meant to specify type parameters on enum `Enum`\n    |\n LL -     Alias::<()>::SVariant::<()> { v: () };\n LL +     Alias::<()>::SVariant { v: () };\n@@ -389,7 +389,7 @@ LL |     AliasFixed::SVariant::<()> { v: () };\n    |                 not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n-help: you might have meant to specity type parameters on enum `Enum`\n+help: you might have meant to specify type parameters on enum `Enum`\n    |\n LL -     AliasFixed::SVariant::<()> { v: () };\n LL +     AliasFixed::<()>::SVariant { v: () };\n@@ -432,7 +432,7 @@ LL |     AliasFixed::<()>::SVariant::<()> { v: () };\n    |                       not allowed on this type\n    |\n    = note: enum variants can't have type parameters\n-help: you might have meant to specity type parameters on enum `Enum`\n+help: you might have meant to specify type parameters on enum `Enum`\n    |\n LL -     AliasFixed::<()>::SVariant::<()> { v: () };\n LL +     AliasFixed::<()>::SVariant { v: () };"}]}