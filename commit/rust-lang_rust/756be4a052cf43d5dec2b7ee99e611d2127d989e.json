{"sha": "756be4a052cf43d5dec2b7ee99e611d2127d989e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NmJlNGEwNTJjZjQzZDVkZWMyYjdlZTk5ZTYxMWQyMTI3ZDk4OWU=", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-04-16T00:14:05Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2021-04-16T00:14:05Z"}, "message": "refactored StyledBuffer parts into StyledChar", "tree": {"sha": "013ee7d954a1b989fd4cea0ec37097db7f168a69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/013ee7d954a1b989fd4cea0ec37097db7f168a69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/756be4a052cf43d5dec2b7ee99e611d2127d989e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/756be4a052cf43d5dec2b7ee99e611d2127d989e", "html_url": "https://github.com/rust-lang/rust/commit/756be4a052cf43d5dec2b7ee99e611d2127d989e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/756be4a052cf43d5dec2b7ee99e611d2127d989e/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60158f4a7cf3e3063df6127d3f0d206921d285b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/60158f4a7cf3e3063df6127d3f0d206921d285b0", "html_url": "https://github.com/rust-lang/rust/commit/60158f4a7cf3e3063df6127d3f0d206921d285b0"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "89b8afdc7ab55defc1b6fda1b74466e14c3efbac", "filename": "compiler/rustc_errors/src/styled_buffer.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/756be4a052cf43d5dec2b7ee99e611d2127d989e/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/756be4a052cf43d5dec2b7ee99e611d2127d989e/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs?ref=756be4a052cf43d5dec2b7ee99e611d2127d989e", "patch": "@@ -1,39 +1,49 @@\n // Code for creating styled buffers\n \n use crate::snippet::{Style, StyledString};\n-use std::iter;\n \n #[derive(Debug)]\n pub struct StyledBuffer {\n-    text: Vec<Vec<char>>,\n-    styles: Vec<Vec<Style>>,\n+    text: Vec<Vec<StyledChar>>,\n+}\n+\n+#[derive(Debug)]\n+struct StyledChar {\n+    chr: char,\n+    style: Style,\n+}\n+\n+impl StyledChar {\n+    fn new(chr: char, style: Style) -> Self {\n+        StyledChar { chr, style }\n+    }\n }\n \n impl StyledBuffer {\n     pub fn new() -> StyledBuffer {\n-        StyledBuffer { text: vec![], styles: vec![] }\n+        StyledBuffer { text: vec![] }\n     }\n \n     pub fn render(&self) -> Vec<Vec<StyledString>> {\n         // Tabs are assumed to have been replaced by spaces in calling code.\n-        debug_assert!(self.text.iter().all(|r| !r.contains(&'\\t')));\n+        debug_assert!(self.text.iter().all(|r| !r.iter().any(|sc| sc.chr == '\\t')));\n \n         let mut output: Vec<Vec<StyledString>> = vec![];\n         let mut styled_vec: Vec<StyledString> = vec![];\n \n-        for (row, row_style) in iter::zip(&self.text, &self.styles) {\n+        for styled_row in &self.text {\n             let mut current_style = Style::NoStyle;\n             let mut current_text = String::new();\n \n-            for (&c, &s) in iter::zip(row, row_style) {\n-                if s != current_style {\n+            for sc in styled_row {\n+                if sc.style != current_style {\n                     if !current_text.is_empty() {\n                         styled_vec.push(StyledString { text: current_text, style: current_style });\n                     }\n-                    current_style = s;\n+                    current_style = sc.style;\n                     current_text = String::new();\n                 }\n-                current_text.push(c);\n+                current_text.push(sc.chr);\n             }\n             if !current_text.is_empty() {\n                 styled_vec.push(StyledString { text: current_text, style: current_style });\n@@ -51,24 +61,20 @@ impl StyledBuffer {\n     fn ensure_lines(&mut self, line: usize) {\n         while line >= self.text.len() {\n             self.text.push(vec![]);\n-            self.styles.push(vec![]);\n         }\n     }\n \n     pub fn putc(&mut self, line: usize, col: usize, chr: char, style: Style) {\n         self.ensure_lines(line);\n         if col < self.text[line].len() {\n-            self.text[line][col] = chr;\n-            self.styles[line][col] = style;\n+            self.text[line][col] = StyledChar::new(chr, style);\n         } else {\n             let mut i = self.text[line].len();\n             while i < col {\n-                self.text[line].push(' ');\n-                self.styles[line].push(Style::NoStyle);\n+                self.text[line].push(StyledChar::new(' ', Style::NoStyle));\n                 i += 1;\n             }\n-            self.text[line].push(chr);\n-            self.styles[line].push(style);\n+            self.text[line].push(StyledChar::new(chr, style));\n         }\n     }\n \n@@ -86,8 +92,7 @@ impl StyledBuffer {\n \n         // Push the old content over to make room for new content\n         for _ in 0..string_len {\n-            self.styles[line].insert(0, Style::NoStyle);\n-            self.text[line].insert(0, ' ');\n+            self.text[line].insert(0, StyledChar::new(' ', Style::NoStyle));\n         }\n \n         self.puts(line, 0, string, style);\n@@ -120,8 +125,8 @@ impl StyledBuffer {\n     }\n \n     pub fn set_style(&mut self, line: usize, col: usize, style: Style, overwrite: bool) {\n-        if let Some(ref mut line) = self.styles.get_mut(line) {\n-            if let Some(s) = line.get_mut(col) {\n+        if let Some(ref mut line) = self.text.get_mut(line) {\n+            if let Some(StyledChar { style: s, .. }) = line.get_mut(col) {\n                 if *s == Style::NoStyle || *s == Style::Quotation || overwrite {\n                     *s = style;\n                 }"}]}