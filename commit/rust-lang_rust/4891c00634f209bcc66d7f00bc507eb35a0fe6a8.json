{"sha": "4891c00634f209bcc66d7f00bc507eb35a0fe6a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OTFjMDA2MzRmMjA5YmNjNjZkN2YwMGJjNTA3ZWIzNWEwZmU2YTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-23T06:27:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-23T06:27:49Z"}, "message": "Auto merge of #29984 - Manishearth:slice-assert, r=alexcrichton\n\nI'd like to have the message print out the index and length values like it does elsewhere, but I'm not sure how to do that without affecting perf here. Will `assert!(cond, \"index out of bounds got {} but len is \", idx, len)` make things slower? It calls `panic_fmt` which is marked as cold but also calls `format_args!`, and I don't know if that allocates or does any heavy lifting.\n\ncc @alexcrichton @Gankro", "tree": {"sha": "d6ff03ef233fcb1015438ce74358b2a5a0500d90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6ff03ef233fcb1015438ce74358b2a5a0500d90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4891c00634f209bcc66d7f00bc507eb35a0fe6a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4891c00634f209bcc66d7f00bc507eb35a0fe6a8", "html_url": "https://github.com/rust-lang/rust/commit/4891c00634f209bcc66d7f00bc507eb35a0fe6a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4891c00634f209bcc66d7f00bc507eb35a0fe6a8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba44607fe09c4fb98a52ca2149b0c9869a87b4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba44607fe09c4fb98a52ca2149b0c9869a87b4c", "html_url": "https://github.com/rust-lang/rust/commit/2ba44607fe09c4fb98a52ca2149b0c9869a87b4c"}, {"sha": "5c873be9c323f15f102720fe9085e2c4e982bb6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c873be9c323f15f102720fe9085e2c4e982bb6d", "html_url": "https://github.com/rust-lang/rust/commit/5c873be9c323f15f102720fe9085e2c4e982bb6d"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "890ca43580bfa4a36215cf688304d4d4e1af5e40", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4891c00634f209bcc66d7f00bc507eb35a0fe6a8/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4891c00634f209bcc66d7f00bc507eb35a0fe6a8/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=4891c00634f209bcc66d7f00bc507eb35a0fe6a8", "patch": "@@ -566,14 +566,29 @@ impl<T> ops::IndexMut<usize> for [T] {\n     }\n }\n \n+#[inline(never)]\n+#[cold]\n+fn slice_index_len_fail(index: usize, len: usize) -> ! {\n+    panic!(\"index {} out of range for slice of length {}\", index, len);\n+}\n+\n+#[inline(never)]\n+#[cold]\n+fn slice_index_order_fail(index: usize, end: usize) -> ! {\n+    panic!(\"slice index starts at {} but ends at {}\", index, end);\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> ops::Index<ops::Range<usize>> for [T] {\n     type Output = [T];\n \n     #[inline]\n     fn index(&self, index: ops::Range<usize>) -> &[T] {\n-        assert!(index.start <= index.end);\n-        assert!(index.end <= self.len());\n+        if index.start > index.end {\n+            slice_index_order_fail(index.start, index.end);\n+        } else if index.end > self.len() {\n+            slice_index_len_fail(index.end, self.len());\n+        }\n         unsafe {\n             from_raw_parts (\n                 self.as_ptr().offset(index.start as isize),\n@@ -614,8 +629,11 @@ impl<T> ops::Index<RangeFull> for [T] {\n impl<T> ops::IndexMut<ops::Range<usize>> for [T] {\n     #[inline]\n     fn index_mut(&mut self, index: ops::Range<usize>) -> &mut [T] {\n-        assert!(index.start <= index.end);\n-        assert!(index.end <= self.len());\n+        if index.start > index.end {\n+            slice_index_order_fail(index.start, index.end);\n+        } else if index.end > self.len() {\n+            slice_index_len_fail(index.end, self.len());\n+        }\n         unsafe {\n             from_raw_parts_mut(\n                 self.as_mut_ptr().offset(index.start as isize),"}, {"sha": "c620bec54a222a19160ae8e8822f1217c8b67c27", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4891c00634f209bcc66d7f00bc507eb35a0fe6a8/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4891c00634f209bcc66d7f00bc507eb35a0fe6a8/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=4891c00634f209bcc66d7f00bc507eb35a0fe6a8", "patch": "@@ -1441,6 +1441,7 @@ pub trait StrExt {\n }\n \n #[inline(never)]\n+#[cold]\n fn slice_error_fail(s: &str, begin: usize, end: usize) -> ! {\n     assert!(begin <= end);\n     panic!(\"index {} and/or {} in `{}` do not lie on character boundary\","}]}