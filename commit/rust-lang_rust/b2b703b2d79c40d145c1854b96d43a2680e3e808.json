{"sha": "b2b703b2d79c40d145c1854b96d43a2680e3e808", "node_id": "C_kwDOAAsO6NoAKGIyYjcwM2IyZDc5YzQwZDE0NWMxODU0Yjk2ZDQzYTI2ODBlM2U4MDg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-09T15:19:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-09T15:19:39Z"}, "message": "Merge #10496\n\n10496: internal: move some macro tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a46884617e76540963cd513bbab18d16b5c2bd9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a46884617e76540963cd513bbab18d16b5c2bd9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2b703b2d79c40d145c1854b96d43a2680e3e808", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYbMLCRBK7hj4Ov3rIwAAxJQIAAOtVOY1EJSZDXZ6mtgGnGw6\nTbXhJylYxA76/W64ynr1sXXMxWwLmjku+gjTjG5WCWeYun0WI+SNkwE65rEccU5k\n3My7Ow2WWLOPnRNINJgxtdoiKyEapYgRYUasEyyPGWuHnDctH+k3tTTsKB6Ka1Df\nAzbojwCXxyg6DAPoVt9e12MNBa3/IIEeP1ox3IsJ18/Ez0J7YTall6+BY+x+aFYS\nxErF1wdx44KtsHl3G8p8Rp+JVcJOmenglxDxRKwXn40WyKhCSVTVdmtSkM4N7E6G\nQ7nmi+bpdM8dzDJ+GRdDOoJwW16aTapo8Fh5wdMt2YNS8G7jhxnU1OACCTwdyeE=\n=mo/O\n-----END PGP SIGNATURE-----\n", "payload": "tree a46884617e76540963cd513bbab18d16b5c2bd9c\nparent 9f7bf0aebebd452481b8727d61c663527172a82f\nparent 3e8ef943c64ad4dd7d0550065cc0ef01d02bc40b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633792779 +0000\ncommitter GitHub <noreply@github.com> 1633792779 +0000\n\nMerge #10496\n\n10496: internal: move some macro tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b703b2d79c40d145c1854b96d43a2680e3e808", "html_url": "https://github.com/rust-lang/rust/commit/b2b703b2d79c40d145c1854b96d43a2680e3e808", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2b703b2d79c40d145c1854b96d43a2680e3e808/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f7bf0aebebd452481b8727d61c663527172a82f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7bf0aebebd452481b8727d61c663527172a82f", "html_url": "https://github.com/rust-lang/rust/commit/9f7bf0aebebd452481b8727d61c663527172a82f"}, {"sha": "3e8ef943c64ad4dd7d0550065cc0ef01d02bc40b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8ef943c64ad4dd7d0550065cc0ef01d02bc40b", "html_url": "https://github.com/rust-lang/rust/commit/3e8ef943c64ad4dd7d0550065cc0ef01d02bc40b"}], "stats": {"total": 594, "additions": 309, "deletions": 285}, "files": [{"sha": "68c8536b2f8ae20d7db0cb0e265eaf52432117ee", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -345,9 +345,9 @@ dependencies = [\n \n [[package]]\n name = \"expect-test\"\n-version = \"1.1.0\"\n+version = \"1.2.0-pre.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2300477aab3a378f2ca00a4fbd4dc713654ab7ed790e4017493cb33656280633\"\n+checksum = \"3a2f1664bc69648747878bfe3430ad9b58bc8d9b50b3b1df9f3c081345e33197\"\n dependencies = [\n  \"dissimilar\",\n  \"once_cell\","}, {"sha": "f86199c8c380efc9b3247c65bf85bba5a456a139", "filename": "crates/cfg/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fcfg%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fcfg%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -16,7 +16,7 @@ tt = { path = \"../tt\", version = \"0.0.0\" }\n [dev-dependencies]\n mbe = { path = \"../mbe\" }\n syntax = { path = \"../syntax\" }\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\"\n oorandom = \"11\"\n # We depend on both individually instead of using `features = [\"derive\"]` to microoptimize the\n # build graph: if the feature was enabled, syn would be built early on in the graph if `smolstr`"}, {"sha": "9573d5ac352038a7136709693367b0c72ec3a23b", "filename": "crates/hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -35,4 +35,4 @@ limit = { path = \"../limit\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\""}, {"sha": "c66c75c1436bbf6b77f83f74425c289b46a52ca6", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -28,7 +28,7 @@ use crate::{\n     db::DefDatabase, nameres::ModuleSource, resolver::HasResolver, test_db::TestDB, AsMacroCall,\n };\n \n-fn check(ra_fixture: &str, expect: Expect) {\n+fn check(ra_fixture: &str, mut expect: Expect) {\n     let db = TestDB::with_files(ra_fixture);\n     let krate = db.crate_graph().iter().next().unwrap();\n     let def_map = db.crate_def_map(krate);\n@@ -65,16 +65,29 @@ fn check(ra_fixture: &str, expect: Expect) {\n             format_to!(expn_text, \"/* error: {} */\", err);\n         }\n         if let Some((parse, _token_map)) = exp.value {\n+            assert!(\n+                parse.errors().is_empty(),\n+                \"parse errors in expansion: \\n{:#?}\",\n+                parse.errors()\n+            );\n             let pp = pretty_print_macro_expansion(parse.syntax_node());\n             let indent = IndentLevel::from_node(call.syntax());\n             let pp = reindent(indent, pp);\n             format_to!(expn_text, \"{}\", pp);\n+            if call.to_string().contains(\"// +tree\") {\n+                let tree = format!(\"{:#?}\", parse.syntax_node())\n+                    .split_inclusive(\"\\n\")\n+                    .map(|line| format!(\"// {}\", line))\n+                    .collect::<String>();\n+                format_to!(expn_text, \"\\n{}\", tree)\n+            }\n         }\n         let range = call.syntax().text_range();\n         let range: Range<usize> = range.into();\n         expanded_text.replace_range(range, &expn_text)\n     }\n \n+    expect.indent(false);\n     expect.assert_eq(&expanded_text);\n }\n \n@@ -97,20 +110,37 @@ fn reindent(indent: IndentLevel, pp: String) -> String {\n fn pretty_print_macro_expansion(expn: SyntaxNode) -> String {\n     let mut res = String::new();\n     let mut prev_kind = SyntaxKind::EOF;\n+    let mut indent_level = 0;\n     for token in iter::successors(expn.first_token(), |t| t.next_token()) {\n         let curr_kind = token.kind();\n         let space = match (prev_kind, curr_kind) {\n             _ if prev_kind.is_trivia() || curr_kind.is_trivia() => \"\",\n+            (T!['{'], T!['}']) => \"\",\n             (T![=], _) | (_, T![=]) => \" \",\n             (_, T!['{']) => \" \",\n-            (T![;] | T!['}'], _) => \"\\n\",\n+            (T![;] | T!['{'] | T!['}'], _) => \"\\n\",\n+            (_, T!['}']) => \"\\n\",\n             (IDENT | LIFETIME_IDENT, IDENT | LIFETIME_IDENT) => \" \",\n             (IDENT, _) if curr_kind.is_keyword() => \" \",\n             (_, IDENT) if prev_kind.is_keyword() => \" \",\n+            (T![>], IDENT) => \" \",\n+            (T![>], _) if curr_kind.is_keyword() => \" \",\n+            (T![->], _) | (_, T![->]) => \" \",\n+            (T![&&], _) | (_, T![&&]) => \" \",\n             _ => \"\",\n         };\n \n+        match prev_kind {\n+            T!['{'] => indent_level += 1,\n+            T!['}'] => indent_level -= 1,\n+            _ => (),\n+        }\n+\n         res.push_str(space);\n+        if space == \"\\n\" {\n+            let level = if curr_kind == T!['}'] { indent_level - 1 } else { indent_level };\n+            res.push_str(&\"    \".repeat(level));\n+        }\n         prev_kind = curr_kind;\n         format_to!(res, \"{}\", token)\n     }"}, {"sha": "384c70028df08ccfdafb62f96d5b834f3cb802d4", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 248, "deletions": 24, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -9,6 +9,45 @@ use expect_test::expect;\n \n use crate::macro_expansion_tests::check;\n \n+#[test]\n+fn mbe_smoke_test() {\n+    check(\n+        r#\"\n+macro_rules! impl_froms {\n+    ($e:ident: $($v:ident),*) => {\n+        $(\n+            impl From<$v> for $e {\n+                fn from(it: $v) -> $e { $e::$v(it) }\n+            }\n+        )*\n+    }\n+}\n+impl_froms!(TokenTree: Leaf, Subtree);\n+\"#,\n+        expect![[r#\"\n+macro_rules! impl_froms {\n+    ($e:ident: $($v:ident),*) => {\n+        $(\n+            impl From<$v> for $e {\n+                fn from(it: $v) -> $e { $e::$v(it) }\n+            }\n+        )*\n+    }\n+}\n+impl From<Leaf> for TokenTree {\n+    fn from(it:Leaf) -> TokenTree {\n+        TokenTree::Leaf(it)\n+    }\n+}\n+impl From<Subtree> for TokenTree {\n+    fn from(it:Subtree) -> TokenTree {\n+        TokenTree::Subtree(it)\n+    }\n+}\n+\"#]],\n+    );\n+}\n+\n #[test]\n fn expansion_does_not_parse_as_expression() {\n     check(\n@@ -52,19 +91,19 @@ fn match_by_first_token_literally() {\n     check(\n         r#\"\n macro_rules! m {\n-    ($ i:ident) => ( mod $ i {} );\n-    (= $ i:ident) => ( fn $ i() {} );\n-    (+ $ i:ident) => ( struct $ i; )\n+    ($i:ident) => ( mod $i {} );\n+    (= $i:ident) => ( fn $i() {} );\n+    (+ $i:ident) => ( struct $i; )\n }\n m! { foo }\n m! { = bar }\n m! { + Baz }\n \"#,\n         expect![[r#\"\n macro_rules! m {\n-    ($ i:ident) => ( mod $ i {} );\n-    (= $ i:ident) => ( fn $ i() {} );\n-    (+ $ i:ident) => ( struct $ i; )\n+    ($i:ident) => ( mod $i {} );\n+    (= $i:ident) => ( fn $i() {} );\n+    (+ $i:ident) => ( struct $i; )\n }\n mod foo {}\n fn bar() {}\n@@ -78,19 +117,19 @@ fn match_by_last_token_literally() {\n     check(\n         r#\"\n macro_rules! m {\n-    ($ i:ident) => ( mod $ i {} );\n-    ($ i:ident =) => ( fn $ i() {} );\n-    ($ i:ident +) => ( struct $ i; )\n+    ($i:ident) => ( mod $i {} );\n+    ($i:ident =) => ( fn $i() {} );\n+    ($i:ident +) => ( struct $i; )\n }\n m! { foo }\n m! { bar = }\n m! { Baz + }\n \"#,\n         expect![[r#\"\n macro_rules! m {\n-    ($ i:ident) => ( mod $ i {} );\n-    ($ i:ident =) => ( fn $ i() {} );\n-    ($ i:ident +) => ( struct $ i; )\n+    ($i:ident) => ( mod $i {} );\n+    ($i:ident =) => ( fn $i() {} );\n+    ($i:ident +) => ( struct $i; )\n }\n mod foo {}\n fn bar() {}\n@@ -104,19 +143,19 @@ fn match_by_ident() {\n     check(\n         r#\"\n macro_rules! m {\n-    ($ i:ident) => ( mod $ i {} );\n-    (spam $ i:ident) => ( fn $ i() {} );\n-    (eggs $ i:ident) => ( struct $ i; )\n+    ($i:ident) => ( mod $i {} );\n+    (spam $i:ident) => ( fn $i() {} );\n+    (eggs $i:ident) => ( struct $i; )\n }\n m! { foo }\n m! { spam bar }\n m! { eggs Baz }\n \"#,\n         expect![[r#\"\n macro_rules! m {\n-    ($ i:ident) => ( mod $ i {} );\n-    (spam $ i:ident) => ( fn $ i() {} );\n-    (eggs $ i:ident) => ( struct $ i; )\n+    ($i:ident) => ( mod $i {} );\n+    (spam $i:ident) => ( fn $i() {} );\n+    (eggs $i:ident) => ( struct $i; )\n }\n mod foo {}\n fn bar() {}\n@@ -130,9 +169,9 @@ fn match_by_separator_token() {\n     check(\n         r#\"\n macro_rules! m {\n-    ($ ($ i:ident),*) => ($ ( mod $ i {} )*);\n-    ($ ($ i:ident)#*) => ($ ( fn $ i() {} )*);\n-    ($ i:ident ,# $ j:ident) => ( struct $ i; struct $ j; )\n+    ($($i:ident),*) => ($(mod $i {} )*);\n+    ($($i:ident)#*) => ($(fn $i() {} )*);\n+    ($i:ident ,# $ j:ident) => ( struct $i; struct $ j; )\n }\n \n m! { foo, bar }\n@@ -143,9 +182,9 @@ m! { Foo,# Bar }\n \"#,\n         expect![[r##\"\n macro_rules! m {\n-    ($ ($ i:ident),*) => ($ ( mod $ i {} )*);\n-    ($ ($ i:ident)#*) => ($ ( fn $ i() {} )*);\n-    ($ i:ident ,# $ j:ident) => ( struct $ i; struct $ j; )\n+    ($($i:ident),*) => ($(mod $i {} )*);\n+    ($($i:ident)#*) => ($(fn $i() {} )*);\n+    ($i:ident ,# $ j:ident) => ( struct $i; struct $ j; )\n }\n \n mod foo {}\n@@ -159,3 +198,188 @@ struct Bar;\n \"##]],\n     );\n }\n+\n+#[test]\n+fn test_match_group_pattern_with_multiple_defs() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($($i:ident),*) => ( impl Bar { $(fn $i() {})* } );\n+}\n+m! { foo, bar }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($($i:ident),*) => ( impl Bar { $(fn $i() {})* } );\n+}\n+impl Bar {\n+    fn foo() {}\n+    fn bar() {}\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_match_group_pattern_with_multiple_statement() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($($i:ident),*) => ( fn baz() { $($i ();)* } );\n+}\n+m! { foo, bar }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($($i:ident),*) => ( fn baz() { $($i ();)* } );\n+}\n+fn baz() {\n+    foo();\n+    bar();\n+}\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn test_match_group_pattern_with_multiple_statement_without_semi() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($($i:ident),*) => ( fn baz() { $($i() );* } );\n+}\n+m! { foo, bar }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($($i:ident),*) => ( fn baz() { $($i() );* } );\n+}\n+fn baz() {\n+    foo();\n+    bar()\n+}\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn test_match_group_empty_fixed_token() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($($i:ident)* #abc) => ( fn baz() { $($i ();)* } );\n+}\n+m!{#abc}\n+\"#,\n+        expect![[r##\"\n+macro_rules! m {\n+    ($($i:ident)* #abc) => ( fn baz() { $($i ();)* } );\n+}\n+fn baz() {}\n+\"##]],\n+    )\n+}\n+\n+#[test]\n+fn test_match_group_in_subtree() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    (fn $name:ident { $($i:ident)* } ) => ( fn $name() { $($i ();)* } );\n+}\n+m! { fn baz { a b } }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    (fn $name:ident { $($i:ident)* } ) => ( fn $name() { $($i ();)* } );\n+}\n+fn baz() {\n+    a();\n+    b();\n+}\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn test_expr_order() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($ i:expr) => { fn bar() { $ i * 3; } }\n+}\n+// +tree\n+m! { 1 + 2 }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($ i:expr) => { fn bar() { $ i * 3; } }\n+}\n+fn bar() {\n+    1+2*3;\n+}\n+// MACRO_ITEMS@0..15\n+//   FN@0..15\n+//     FN_KW@0..2 \"fn\"\n+//     NAME@2..5\n+//       IDENT@2..5 \"bar\"\n+//     PARAM_LIST@5..7\n+//       L_PAREN@5..6 \"(\"\n+//       R_PAREN@6..7 \")\"\n+//     BLOCK_EXPR@7..15\n+//       STMT_LIST@7..15\n+//         L_CURLY@7..8 \"{\"\n+//         EXPR_STMT@8..14\n+//           BIN_EXPR@8..13\n+//             BIN_EXPR@8..11\n+//               LITERAL@8..9\n+//                 INT_NUMBER@8..9 \"1\"\n+//               PLUS@9..10 \"+\"\n+//               LITERAL@10..11\n+//                 INT_NUMBER@10..11 \"2\"\n+//             STAR@11..12 \"*\"\n+//             LITERAL@12..13\n+//               INT_NUMBER@12..13 \"3\"\n+//           SEMICOLON@13..14 \";\"\n+//         R_CURLY@14..15 \"}\"\n+\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn test_match_group_with_multichar_sep() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    (fn $name:ident { $($i:literal)* }) => ( fn $name() -> bool { $($i)&&* } );\n+}\n+m! (fn baz { true false } );\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    (fn $name:ident { $($i:literal)* }) => ( fn $name() -> bool { $($i)&&* } );\n+}\n+fn baz() -> bool {\n+    true && false\n+}\n+\"#]],\n+    );\n+\n+    check(\n+        r#\"\n+macro_rules! m {\n+    (fn $name:ident { $($i:literal)&&* }) => ( fn $name() -> bool { $($i)&&* } );\n+}\n+m! (fn baz { true && false } );\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    (fn $name:ident { $($i:literal)&&* }) => ( fn $name() -> bool { $($i)&&* } );\n+}\n+fn baz() -> bool {\n+    true && false\n+}\n+\"#]],\n+    );\n+}"}, {"sha": "5bdabfc598baf4405dc28c269764a60a3cfdb289", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/matching.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmatching.rs?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -8,18 +8,18 @@ use crate::macro_expansion_tests::check;\n fn unary_minus_is_a_literal() {\n     check(\n         r#\"\n-macro_rules! m { ($x:literal) => (literal!()); ($x:tt) => (not_a_literal!()); }\n+macro_rules! m { ($x:literal) => (literal!();); ($x:tt) => (not_a_literal!();); }\n m!(92);\n m!(-92);\n m!(-9.2);\n m!(--92);\n \"#,\n         expect![[r#\"\n-macro_rules! m { ($x:literal) => (literal!()); ($x:tt) => (not_a_literal!()); }\n-literal!()\n-literal!()\n-literal!()\n-/* error: leftover tokens */not_a_literal!()\n+macro_rules! m { ($x:literal) => (literal!();); ($x:tt) => (not_a_literal!();); }\n+literal!();\n+literal!();\n+literal!();\n+/* error: leftover tokens */not_a_literal!();\n \"#]],\n     )\n }"}, {"sha": "d434c8824492f906c0ded3bf14fe396366b00737", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/meta_syntax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -16,7 +16,7 @@ macro_rules! m {\n     ($($i:ident)*) => ($_);\n     ($($true:ident)*) => ($true);\n     ($($false:ident)*) => ($false);\n-    ($) => ($);\n+    ($) => (m!($););\n }\n m!($);\n \"#,\n@@ -29,9 +29,9 @@ macro_rules! m {\n     ($($i:ident)*) => ($_);\n     ($($true:ident)*) => ($true);\n     ($($false:ident)*) => ($false);\n-    ($) => ($);\n+    ($) => (m!($););\n }\n-$\n+m!($);\n \"#]],\n     )\n }"}, {"sha": "240193f9cf1827e0bc9501d4e0b287c30088606c", "filename": "crates/hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -25,4 +25,4 @@ mbe = { path = \"../mbe\", version = \"0.0.0\" }\n limit = { path = \"../limit\", version = \"0.0.0\" }\n \n [dev-dependencies]\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\""}, {"sha": "0f1e75958a8419256dbf166fd7c5ce15ddb0c49e", "filename": "crates/hir_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fhir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -33,7 +33,7 @@ limit = { path = \"../limit\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\"\n tracing = \"0.1\"\n tracing-subscriber = { version = \"0.2\", default-features = false, features = [\n     \"env-filter\","}, {"sha": "bccadacdb2a0d6307450330a21e240f752f8e031", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -38,4 +38,4 @@ hir = { path = \"../hir\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\""}, {"sha": "629aadb5b12e8f3703c4acaba8a051f97c51ec05", "filename": "crates/ide_assists/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fide_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fide_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -25,4 +25,4 @@ hir = { path = \"../hir\", version = \"0.0.0\" }\n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n sourcegen = { path = \"../sourcegen\" }\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\""}, {"sha": "5b2f0b35f98fdb684ca36e8b45c3bb7a7e952684", "filename": "crates/ide_completion/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fide_completion%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fide_completion%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -28,7 +28,7 @@ profile = { path = \"../profile\", version = \"0.0.0\" }\n hir = { path = \"../hir\", version = \"0.0.0\" }\n \n [dev-dependencies]\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\"\n xshell = \"0.1\"\n \n test_utils = { path = \"../test_utils\" }"}, {"sha": "e3c60edda13b46b7cb254d2371bba4ef853f4253", "filename": "crates/ide_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -31,4 +31,4 @@ limit = { path = \"../limit\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\""}, {"sha": "7e36b1a3bdd47d6ec1e19197b4353da8e030a846", "filename": "crates/ide_diagnostics/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fide_diagnostics%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fide_diagnostics%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -23,7 +23,7 @@ hir = { path = \"../hir\", version = \"0.0.0\" }\n ide_db = { path = \"../ide_db\", version = \"0.0.0\" }\n \n [dev-dependencies]\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\"\n \n test_utils = { path = \"../test_utils\" }\n sourcegen = { path = \"../sourcegen\" }"}, {"sha": "275f923f2bcc20aa8af156ba46f9fed1685315c4", "filename": "crates/ide_ssr/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fide_ssr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fide_ssr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -21,4 +21,4 @@ hir = { path = \"../hir\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\""}, {"sha": "5378516e70650b1925678f4fd04e0f46764abd2e", "filename": "crates/mbe/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fmbe%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fmbe%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -12,7 +12,7 @@ doctest = false\n cov-mark = \"2.0.0-pre.1\"\n rustc-hash = \"1.1.0\"\n smallvec = \"1.2.0\"\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\"\n tracing = \"0.1\"\n \n syntax = { path = \"../syntax\", version = \"0.0.0\" }"}, {"sha": "c08788cda1ee9e337daa54ed476f252eb23ccef5", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 0, "deletions": 229, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -71,235 +71,6 @@ macro_rules! foobar {\n     assert_eq!(get_text(tt::TokenId(13), T!['{']), \"{\");\n }\n \n-#[test]\n-fn test_convert_tt() {\n-    parse_macro(r#\"\n-macro_rules! impl_froms {\n-    ($e:ident: $($v:ident),*) => {\n-        $(\n-            impl From<$v> for $e {\n-                fn from(it: $v) -> $e {\n-                    $e::$v(it)\n-                }\n-            }\n-        )*\n-    }\n-}\n-\"#)\n-        .assert_expand_tt(\n-            \"impl_froms!(TokenTree: Leaf, Subtree);\",\n-            \"impl From <Leaf > for TokenTree {fn from (it : Leaf) -> TokenTree {TokenTree ::Leaf (it)}} \\\n-             impl From <Subtree > for TokenTree {fn from (it : Subtree) -> TokenTree {TokenTree ::Subtree (it)}}\"\n-        );\n-}\n-\n-#[test]\n-fn test_convert_tt2() {\n-    parse_macro(\n-        r#\"\n-macro_rules! impl_froms {\n-    ($e:ident: $($v:ident),*) => {\n-        $(\n-            impl From<$v> for $e {\n-                fn from(it: $v) -> $e {\n-                    $e::$v(it)\n-                }\n-            }\n-        )*\n-    }\n-}\n-\"#,\n-    )\n-    .assert_expand(\n-        \"impl_froms!(TokenTree: Leaf, Subtree);\",\n-        r#\"\n-SUBTREE $\n-  IDENT   impl 20\n-  IDENT   From 21\n-  PUNCH   < [joint] 22\n-  IDENT   Leaf 53\n-  PUNCH   > [alone] 25\n-  IDENT   for 26\n-  IDENT   TokenTree 51\n-  SUBTREE {} 29\n-    IDENT   fn 30\n-    IDENT   from 31\n-    SUBTREE () 32\n-      IDENT   it 33\n-      PUNCH   : [alone] 34\n-      IDENT   Leaf 53\n-    PUNCH   - [joint] 37\n-    PUNCH   > [alone] 38\n-    IDENT   TokenTree 51\n-    SUBTREE {} 41\n-      IDENT   TokenTree 51\n-      PUNCH   : [joint] 44\n-      PUNCH   : [joint] 45\n-      IDENT   Leaf 53\n-      SUBTREE () 48\n-        IDENT   it 49\n-  IDENT   impl 20\n-  IDENT   From 21\n-  PUNCH   < [joint] 22\n-  IDENT   Subtree 55\n-  PUNCH   > [alone] 25\n-  IDENT   for 26\n-  IDENT   TokenTree 51\n-  SUBTREE {} 29\n-    IDENT   fn 30\n-    IDENT   from 31\n-    SUBTREE () 32\n-      IDENT   it 33\n-      PUNCH   : [alone] 34\n-      IDENT   Subtree 55\n-    PUNCH   - [joint] 37\n-    PUNCH   > [alone] 38\n-    IDENT   TokenTree 51\n-    SUBTREE {} 41\n-      IDENT   TokenTree 51\n-      PUNCH   : [joint] 44\n-      PUNCH   : [joint] 45\n-      IDENT   Subtree 55\n-      SUBTREE () 48\n-        IDENT   it 49\n-\"#,\n-    );\n-}\n-\n-#[test]\n-fn test_expr_order() {\n-    let expanded = parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:expr) => {\n-                 fn bar() { $ i * 2; }\n-            }\n-        }\n-\"#,\n-    )\n-    .expand_items(\"foo! { 1 + 1}\");\n-\n-    let dump = format!(\"{:#?}\", expanded);\n-    assert_eq_text!(\n-        r#\"MACRO_ITEMS@0..15\n-  FN@0..15\n-    FN_KW@0..2 \"fn\"\n-    NAME@2..5\n-      IDENT@2..5 \"bar\"\n-    PARAM_LIST@5..7\n-      L_PAREN@5..6 \"(\"\n-      R_PAREN@6..7 \")\"\n-    BLOCK_EXPR@7..15\n-      STMT_LIST@7..15\n-        L_CURLY@7..8 \"{\"\n-        EXPR_STMT@8..14\n-          BIN_EXPR@8..13\n-            BIN_EXPR@8..11\n-              LITERAL@8..9\n-                INT_NUMBER@8..9 \"1\"\n-              PLUS@9..10 \"+\"\n-              LITERAL@10..11\n-                INT_NUMBER@10..11 \"1\"\n-            STAR@11..12 \"*\"\n-            LITERAL@12..13\n-              INT_NUMBER@12..13 \"2\"\n-          SEMICOLON@13..14 \";\"\n-        R_CURLY@14..15 \"}\"\"#,\n-        dump.trim()\n-    );\n-}\n-\n-#[test]\n-fn test_match_group_pattern_with_multiple_defs() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ ($ i:ident),*) => ( struct Bar { $ (\n-                fn $ i {}\n-            )*} );\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo, bar }\", \"struct Bar {fn foo {} fn bar {}}\");\n-}\n-\n-#[test]\n-fn test_match_group_pattern_with_multiple_statement() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ ($ i:ident),*) => ( fn baz { $ (\n-                $ i ();\n-            )*} );\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo, bar }\", \"fn baz {foo () ; bar () ;}\");\n-}\n-\n-#[test]\n-fn test_match_group_pattern_with_multiple_statement_without_semi() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ ($ i:ident),*) => ( fn baz { $ (\n-                $i()\n-            );*} );\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo, bar }\", \"fn baz {foo () ;bar ()}\");\n-}\n-\n-#[test]\n-fn test_match_group_empty_fixed_token() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ ($ i:ident)* #abc) => ( fn baz { $ (\n-                $ i ();\n-            )*} );\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! {#abc}\", \"fn baz {}\");\n-}\n-\n-#[test]\n-fn test_match_group_in_subtree() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            (fn $name:ident {$($i:ident)*} ) => ( fn $name() { $ (\n-                $ i ();\n-            )*} );\n-        }\"#,\n-    )\n-    .assert_expand_items(\"foo! {fn baz {a b} }\", \"fn baz () {a () ; b () ;}\");\n-}\n-\n-#[test]\n-fn test_match_group_with_multichar_sep() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            (fn $name:ident {$($i:literal)*} ) => ( fn $name() -> bool { $($i)&&*} );\n-        }\"#,\n-    )\n-    .assert_expand_items(\"foo! (fn baz {true true} );\", \"fn baz () -> bool {true &&true}\");\n-}\n-\n-#[test]\n-fn test_match_group_with_multichar_sep2() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            (fn $name:ident {$($i:literal)&&*} ) => ( fn $name() -> bool { $($i)&&*} );\n-        }\"#,\n-    )\n-    .assert_expand_items(\"foo! (fn baz {true && true} );\", \"fn baz () -> bool {true &&true}\");\n-}\n-\n #[test]\n fn test_match_group_zero_match() {\n     parse_macro("}, {"sha": "6048c5e6cc354366747761a52bcc25a06178bffb", "filename": "crates/proc_macro_srv/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fproc_macro_srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fproc_macro_srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -25,7 +25,7 @@ paths = { path = \"../paths\", version = \"0.0.0\" }\n proc_macro_api = { path = \"../proc_macro_api\", version = \"0.0.0\" }\n \n [dev-dependencies]\n-expect-test = \"1.1.0\"\n+expect-test = \"1.2.0-pre.1\"\n \n # used as proc macro test targets\n proc_macro_test = { path = \"../proc_macro_test\" }"}, {"sha": "949325fc823613d6b0af86b241b09ba0e5d2f78f", "filename": "crates/project_model/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fproject_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fproject_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -16,7 +16,7 @@ semver = \"1\"\n serde = { version = \"1.0.106\", features = [\"derive\"] }\n serde_json = \"1.0.48\"\n anyhow = \"1.0.26\"\n-expect-test = \"1\"\n+expect-test = \"1.2.0-pre.1\"\n la-arena = { version = \"0.2.0\", path = \"../../lib/arena\" }\n \n cfg = { path = \"../cfg\", version = \"0.0.0\" }"}, {"sha": "8275f6e3d53511cc6991d5e4c15ab0aa65d86c79", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -67,7 +67,7 @@ winapi = \"0.3.8\"\n jemallocator = { version = \"0.4.1\", package = \"tikv-jemallocator\", optional = true }\n \n [dev-dependencies]\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\"\n xshell = \"0.1\"\n \n test_utils = { path = \"../test_utils\" }"}, {"sha": "a34522435a22cb617b24e2e1b46dd78f3d7fae66", "filename": "crates/syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2FCargo.toml?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -26,7 +26,7 @@ profile = { path = \"../profile\", version = \"0.0.0\" }\n \n [dev-dependencies]\n rayon = \"1\"\n-expect-test = \"1.1\"\n+expect-test = \"1.2.0-pre.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n ungrammar = \"=1.14.8\""}, {"sha": "24a099cb3cc764366e0e6f11dae54979e840b680", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b703b2d79c40d145c1854b96d43a2680e3e808/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=b2b703b2d79c40d145c1854b96d43a2680e3e808", "patch": "@@ -89,6 +89,9 @@ impl<T> Parse<T> {\n     pub fn syntax_node(&self) -> SyntaxNode {\n         SyntaxNode::new_root(self.green.clone())\n     }\n+    pub fn errors(&self) -> &[SyntaxError] {\n+        &*self.errors\n+    }\n }\n \n impl<T: AstNode> Parse<T> {\n@@ -100,10 +103,6 @@ impl<T: AstNode> Parse<T> {\n         T::cast(self.syntax_node()).unwrap()\n     }\n \n-    pub fn errors(&self) -> &[SyntaxError] {\n-        &*self.errors\n-    }\n-\n     pub fn ok(self) -> Result<T, Arc<Vec<SyntaxError>>> {\n         if self.errors.is_empty() {\n             Ok(self.tree())"}]}