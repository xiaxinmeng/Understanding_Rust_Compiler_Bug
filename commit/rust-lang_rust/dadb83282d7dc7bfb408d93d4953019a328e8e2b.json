{"sha": "dadb83282d7dc7bfb408d93d4953019a328e8e2b", "node_id": "C_kwDOAAsO6NoAKGRhZGI4MzI4MmQ3ZGM3YmZiNDA4ZDkzZDQ5NTMwMTlhMzI4ZThlMmI", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-25T14:07:41Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-25T14:07:41Z"}, "message": "Remember the difference between 'sysroot root' and 'sysroot src root', start looking in there for a rust-analyzer-proc-macro-srv binary", "tree": {"sha": "1fa999330cf7221feb3485121e158b16a3a5cf74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fa999330cf7221feb3485121e158b16a3a5cf74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dadb83282d7dc7bfb408d93d4953019a328e8e2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dadb83282d7dc7bfb408d93d4953019a328e8e2b", "html_url": "https://github.com/rust-lang/rust/commit/dadb83282d7dc7bfb408d93d4953019a328e8e2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dadb83282d7dc7bfb408d93d4953019a328e8e2b/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4364531c2f3db41d9ba3a72f3e77ab26d16db8b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4364531c2f3db41d9ba3a72f3e77ab26d16db8b0", "html_url": "https://github.com/rust-lang/rust/commit/4364531c2f3db41d9ba3a72f3e77ab26d16db8b0"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "63d1d0ace96b973bd84f22e61f83348c120f34c6", "filename": "crates/project-model/src/project_json.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dadb83282d7dc7bfb408d93d4953019a328e8e2b/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadb83282d7dc7bfb408d93d4953019a328e8e2b/crates%2Fproject-model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fproject_json.rs?ref=dadb83282d7dc7bfb408d93d4953019a328e8e2b", "patch": "@@ -17,6 +17,9 @@ use crate::cfg_flag::CfgFlag;\n /// Roots and crates that compose this Rust project.\n #[derive(Clone, Debug, Eq, PartialEq)]\n pub struct ProjectJson {\n+    /// e.g. `path/to/sysroot`\n+    pub(crate) sysroot: Option<AbsPathBuf>,\n+    /// e.g. `path/to/sysroot/lib/rustlib/src/rust`\n     pub(crate) sysroot_src: Option<AbsPathBuf>,\n     project_root: AbsPathBuf,\n     crates: Vec<Crate>,\n@@ -52,6 +55,7 @@ impl ProjectJson {\n     ///            configuration.\n     pub fn new(base: &AbsPath, data: ProjectJsonData) -> ProjectJson {\n         ProjectJson {\n+            sysroot: data.sysroot.map(|it| base.join(it)),\n             sysroot_src: data.sysroot_src.map(|it| base.join(it)),\n             project_root: base.to_path_buf(),\n             crates: data\n@@ -122,6 +126,7 @@ impl ProjectJson {\n \n #[derive(Deserialize, Debug, Clone)]\n pub struct ProjectJsonData {\n+    sysroot: Option<PathBuf>,\n     sysroot_src: Option<PathBuf>,\n     crates: Vec<CrateData>,\n }"}, {"sha": "b17a59b10bb57c84fff1e32775e112e7bd578b7d", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dadb83282d7dc7bfb408d93d4953019a328e8e2b/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadb83282d7dc7bfb408d93d4953019a328e8e2b/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=dadb83282d7dc7bfb408d93d4953019a328e8e2b", "patch": "@@ -15,6 +15,7 @@ use crate::{utf8_stdout, ManifestPath};\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Sysroot {\n     root: AbsPathBuf,\n+    src_root: AbsPathBuf,\n     crates: Arena<SysrootCrateData>,\n }\n \n@@ -35,6 +36,15 @@ impl ops::Index<SysrootCrate> for Sysroot {\n }\n \n impl Sysroot {\n+    /// Returns sysroot directory, where `bin/`, `etc/`, `lib/`, `libexec/`\n+    /// subfolder live, like:\n+    /// `$HOME/.rustup/toolchains/nightly-2022-07-23-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library`\n+    pub fn src_root(&self) -> &AbsPath {\n+        &self.src_root\n+    }\n+\n+    /// Returns sysroot \"src\" directory, where stdlib sources are located, like:\n+    /// `$HOME/.rustup/toolchains/nightly-2022-07-23-x86_64-unknown-linux-gnu`\n     pub fn root(&self) -> &AbsPath {\n         &self.root\n     }\n@@ -61,7 +71,7 @@ impl Sysroot {\n         tracing::debug!(\"Discovering sysroot for {}\", dir.display());\n         let sysroot_dir = discover_sysroot_dir(dir)?;\n         let sysroot_src_dir = discover_sysroot_src_dir(&sysroot_dir, dir)?;\n-        let res = Sysroot::load(sysroot_src_dir)?;\n+        let res = Sysroot::load(sysroot_dir, sysroot_src_dir)?;\n         Ok(res)\n     }\n \n@@ -71,14 +81,15 @@ impl Sysroot {\n         discover_sysroot_dir(current_dir).ok().and_then(|sysroot_dir| get_rustc_src(&sysroot_dir))\n     }\n \n-    pub fn load(sysroot_src_dir: AbsPathBuf) -> Result<Sysroot> {\n-        let mut sysroot = Sysroot { root: sysroot_src_dir, crates: Arena::default() };\n+    pub fn load(sysroot_dir: AbsPathBuf, sysroot_src_dir: AbsPathBuf) -> Result<Sysroot> {\n+        let mut sysroot =\n+            Sysroot { root: sysroot_dir, src_root: sysroot_src_dir, crates: Arena::default() };\n \n         for path in SYSROOT_CRATES.trim().lines() {\n             let name = path.split('/').last().unwrap();\n             let root = [format!(\"{}/src/lib.rs\", path), format!(\"lib{}/lib.rs\", path)]\n                 .into_iter()\n-                .map(|it| sysroot.root.join(it))\n+                .map(|it| sysroot.src_root.join(it))\n                 .filter_map(|it| ManifestPath::try_from(it).ok())\n                 .find(|it| fs::metadata(it).is_ok());\n \n@@ -119,7 +130,7 @@ impl Sysroot {\n             };\n             anyhow::bail!(\n                 \"could not find libcore in sysroot path `{}`{}\",\n-                sysroot.root.as_path().display(),\n+                sysroot.src_root.as_path().display(),\n                 var_note,\n             );\n         }"}, {"sha": "e304a59c0180bf7ef9c38e8f6269c35f4c167973", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dadb83282d7dc7bfb408d93d4953019a328e8e2b/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadb83282d7dc7bfb408d93d4953019a328e8e2b/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=dadb83282d7dc7bfb408d93d4953019a328e8e2b", "patch": "@@ -75,8 +75,11 @@ fn get_test_path(file: &str) -> PathBuf {\n \n fn get_fake_sysroot() -> Sysroot {\n     let sysroot_path = get_test_path(\"fake-sysroot\");\n-    let sysroot_src_dir = AbsPathBuf::assert(sysroot_path);\n-    Sysroot::load(sysroot_src_dir).unwrap()\n+    // there's no `libexec/` directory with a `proc-macro-srv` binary in that\n+    // fake sysroot, so we give them both the same path:\n+    let sysroot_dir = AbsPathBuf::assert(sysroot_path);\n+    let sysroot_src_dir = sysroot_dir.clone();\n+    Sysroot::load(sysroot_dir, sysroot_src_dir).unwrap()\n }\n \n fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {"}, {"sha": "63882466fa4162db8645b79e9576c76eaee0bff4", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dadb83282d7dc7bfb408d93d4953019a328e8e2b/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadb83282d7dc7bfb408d93d4953019a328e8e2b/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=dadb83282d7dc7bfb408d93d4953019a328e8e2b", "patch": "@@ -230,8 +230,14 @@ impl ProjectWorkspace {\n         project_json: ProjectJson,\n         target: Option<&str>,\n     ) -> Result<ProjectWorkspace> {\n-        let sysroot = match &project_json.sysroot_src {\n-            Some(path) => Some(Sysroot::load(path.clone())?),\n+        let sysroot = match project_json.sysroot_src.clone() {\n+            Some(sysroot_src) => {\n+                // if `sysroot` isn't specified (only `sysroot_src`), we won't have\n+                // a real sysroot path, that's fine. it's just used to discover\n+                // the standalone `proc-macro-srv` binary.\n+                let sysroot = project_json.sysroot.clone().unwrap_or_else(|| sysroot_src.clone());\n+                Some(Sysroot::load(sysroot, sysroot_src)?)\n+            }\n             None => None,\n         };\n         let rustc_cfg = rustc_cfg::get(None, target);\n@@ -345,7 +351,7 @@ impl ProjectWorkspace {\n                     })\n                     .chain(sysroot.iter().map(|sysroot| PackageRoot {\n                         is_local: false,\n-                        include: vec![sysroot.root().to_path_buf()],\n+                        include: vec![sysroot.src_root().to_path_buf()],\n                         exclude: Vec::new(),\n                     }))\n                     .chain(rustc.iter().flat_map(|rustc| {"}, {"sha": "4256c2a764a33227ff54ecdb9811279a0ba0ae49", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dadb83282d7dc7bfb408d93d4953019a328e8e2b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadb83282d7dc7bfb408d93d4953019a328e8e2b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=dadb83282d7dc7bfb408d93d4953019a328e8e2b", "patch": "@@ -305,8 +305,34 @@ impl GlobalState {\n \n         if self.proc_macro_clients.is_empty() {\n             if let Some((path, args)) = self.config.proc_macro_srv() {\n-                self.proc_macro_clients = (0..self.workspaces.len())\n-                    .map(|_| {\n+                self.proc_macro_clients = self\n+                    .workspaces\n+                    .iter()\n+                    .map(|ws| {\n+                        let mut path = path.clone();\n+                        if let ProjectWorkspace::Cargo { sysroot, .. } = ws {\n+                            tracing::info!(\"Found a cargo workspace...\");\n+                            if let Some(sysroot) = sysroot.as_ref() {\n+                                tracing::info!(\"Found a cargo workspace with a sysroot...\");\n+                                let server_path = sysroot\n+                                    .root()\n+                                    .join(\"libexec\")\n+                                    .join(\"rust-analyzer-proc-macro-srv\");\n+                                if std::fs::metadata(&server_path).is_ok() {\n+                                    tracing::info!(\n+                                        \"And the server exists at {}\",\n+                                        server_path.display()\n+                                    );\n+                                    path = server_path;\n+                                } else {\n+                                    tracing::info!(\n+                                        \"And the server does not exist at {}\",\n+                                        server_path.display()\n+                                    );\n+                                }\n+                            }\n+                        }\n+\n                         ProcMacroServer::spawn(path.clone(), args.clone()).map_err(|err| {\n                             let error = format!(\n                                 \"Failed to run proc_macro_srv from path {}, error: {:?}\","}]}