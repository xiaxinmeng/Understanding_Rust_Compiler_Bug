{"sha": "af4d244462c17540ce91af6d42ccbd1b50ad756d", "node_id": "C_kwDOAAsO6NoAKGFmNGQyNDQ0NjJjMTc1NDBjZTkxYWY2ZDQyY2NiZDFiNTBhZDc1NmQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-05T13:25:47Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-05T13:25:47Z"}, "message": "Cache ast::MacroCalls to their expansions in Semantics::descend_into_macros_impl", "tree": {"sha": "021ec1270e4e9e8ca543b1eba6dd432dc40317c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/021ec1270e4e9e8ca543b1eba6dd432dc40317c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af4d244462c17540ce91af6d42ccbd1b50ad756d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af4d244462c17540ce91af6d42ccbd1b50ad756d", "html_url": "https://github.com/rust-lang/rust/commit/af4d244462c17540ce91af6d42ccbd1b50ad756d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af4d244462c17540ce91af6d42ccbd1b50ad756d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "962be380042c04d195d9c120d8445e8039d340ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/962be380042c04d195d9c120d8445e8039d340ee", "html_url": "https://github.com/rust-lang/rust/commit/962be380042c04d195d9c120d8445e8039d340ee"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "1acad1ae39677e5f5b1a7bffe18b05796b495f0c", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/af4d244462c17540ce91af6d42ccbd1b50ad756d/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4d244462c17540ce91af6d42ccbd1b50ad756d/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=af4d244462c17540ce91af6d42ccbd1b50ad756d", "patch": "@@ -121,7 +121,10 @@ pub struct SemanticsImpl<'db> {\n     pub db: &'db dyn HirDatabase,\n     s2d_cache: RefCell<SourceToDefCache>,\n     expansion_info_cache: RefCell<FxHashMap<HirFileId, Option<ExpansionInfo>>>,\n+    // Rootnode to HirFileId cache\n     cache: RefCell<FxHashMap<SyntaxNode, HirFileId>>,\n+    // MacroCall to its expansion's HirFileId cache\n+    macro_call_cache: RefCell<FxHashMap<InFile<ast::MacroCall>, HirFileId>>,\n }\n \n impl<DB> fmt::Debug for Semantics<'_, DB> {\n@@ -396,6 +399,7 @@ impl<'db> SemanticsImpl<'db> {\n             s2d_cache: Default::default(),\n             cache: Default::default(),\n             expansion_info_cache: Default::default(),\n+            macro_call_cache: Default::default(),\n         }\n     }\n \n@@ -554,6 +558,7 @@ impl<'db> SemanticsImpl<'db> {\n         let sa = self.analyze(&parent);\n         let mut stack: SmallVec<[_; 1]> = smallvec![InFile::new(sa.file_id, token)];\n         let mut cache = self.expansion_info_cache.borrow_mut();\n+        let mut mcache = self.macro_call_cache.borrow_mut();\n \n         let mut process_expansion_for_token =\n             |stack: &mut SmallVec<_>, file_id, item, token: InFile<&_>| {\n@@ -582,14 +587,10 @@ impl<'db> SemanticsImpl<'db> {\n             let was_not_remapped = (|| {\n                 // are we inside an attribute macro call\n                 let containing_attribute_macro_call = self.with_ctx(|ctx| {\n-                    token\n-                        .value\n-                        .ancestors()\n-                        .filter_map(ast::Item::cast)\n-                        .filter_map(|item| {\n-                            Some((ctx.item_to_macro_call(token.with_value(item.clone()))?, item))\n-                        })\n-                        .last()\n+                    token.value.ancestors().filter_map(ast::Item::cast).find_map(|item| {\n+                        // investigate this, seems to be VERY(250ms) expensive in rust-analyzer/src/config.rs?\n+                        Some((ctx.item_to_macro_call(token.with_value(item.clone()))?, item))\n+                    })\n                 });\n                 if let Some((call_id, item)) = containing_attribute_macro_call {\n                     let file_id = call_id.as_file();\n@@ -616,7 +617,15 @@ impl<'db> SemanticsImpl<'db> {\n                         return None;\n                     }\n \n-                    let file_id = sa.expand(self.db, token.with_value(&macro_call))?;\n+                    let mcall = token.with_value(macro_call);\n+                    let file_id = match mcache.get(&mcall) {\n+                        Some(&it) => it,\n+                        None => {\n+                            let it = sa.expand(self.db, mcall.as_ref())?;\n+                            mcache.insert(mcall, it);\n+                            it\n+                        }\n+                    };\n                     return process_expansion_for_token(&mut stack, file_id, None, token.as_ref());\n                 }\n "}]}