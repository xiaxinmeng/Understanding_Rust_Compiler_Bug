{"sha": "6e46a827b63e8acade0fcb667dba29a9a46793f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNDZhODI3YjYzZThhY2FkZTBmY2I2NjdkYmEyOWE5YTQ2NzkzZjA=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-03T15:11:34Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-05-03T15:11:34Z"}, "message": "Simplifications", "tree": {"sha": "8d478fb5567603a6a7fbdb4268c0848577046e27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d478fb5567603a6a7fbdb4268c0848577046e27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e46a827b63e8acade0fcb667dba29a9a46793f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e46a827b63e8acade0fcb667dba29a9a46793f0", "html_url": "https://github.com/rust-lang/rust/commit/6e46a827b63e8acade0fcb667dba29a9a46793f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e46a827b63e8acade0fcb667dba29a9a46793f0/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78d4ef19921a9358a2888f00c4fd4c6053c7301d", "url": "https://api.github.com/repos/rust-lang/rust/commits/78d4ef19921a9358a2888f00c4fd4c6053c7301d", "html_url": "https://github.com/rust-lang/rust/commit/78d4ef19921a9358a2888f00c4fd4c6053c7301d"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "d177e01b42b41502b92593a15d12b5d199194a96", "filename": "src/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6e46a827b63e8acade0fcb667dba29a9a46793f0/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e46a827b63e8acade0fcb667dba29a9a46793f0/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=6e46a827b63e8acade0fcb667dba29a9a46793f0", "patch": "@@ -195,15 +195,14 @@ macro_rules! impl_enum_decodable {\n     ( $e:ident, $( $x:ident ),* ) => {\n         impl<'de> ::serde::de::Deserialize<'de> for $e {\n             fn deserialize<D>(d: D) -> Result<Self, D::Error>\n-                    where D: ::serde::de::Deserializer<'de> {\n+                    where D: ::serde::Deserializer<'de> {\n                 use std::ascii::AsciiExt;\n-                use serde::{Deserializer};\n                 use serde::de::{Error, Visitor};\n                 use std::marker::PhantomData;\n                 use std::fmt;\n                 struct StringOnly<T>(PhantomData<T>);\n                 impl<'de, T> Visitor<'de> for StringOnly<T>\n-                        where T: Deserializer<'de> {\n+                        where T: ::serde::Deserializer<'de> {\n                     type Value = String;\n                     fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n                         formatter.write_str(\"string\")\n@@ -218,7 +217,8 @@ macro_rules! impl_enum_decodable {\n                       return Ok($e::$x);\n                     }\n                 )*\n-                Err(<D as Deserializer<'de>>::Error::custom(\"Bad variant\"))\n+                static ALLOWED: &'static[&str] = &[$(stringify!($x),)*];\n+                Err(D::Error::unknown_variant(&s, ALLOWED))\n             }\n         }\n "}]}