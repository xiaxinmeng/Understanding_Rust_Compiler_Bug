{"sha": "6f35475ba5e39f5e81227be26729ae7479a232c1", "node_id": "C_kwDOAAsO6NoAKDZmMzU0NzViYTVlMzlmNWU4MTIyN2JlMjY3MjlhZTc0NzlhMjMyYzE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-16T14:33:42Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T18:59:09Z"}, "message": "Parse idents the same way in both quote string elements and \"normal\" elements", "tree": {"sha": "53838fa2e6b8e47f7989e65bf2d5bfcb6104b089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53838fa2e6b8e47f7989e65bf2d5bfcb6104b089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f35475ba5e39f5e81227be26729ae7479a232c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f35475ba5e39f5e81227be26729ae7479a232c1", "html_url": "https://github.com/rust-lang/rust/commit/6f35475ba5e39f5e81227be26729ae7479a232c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f35475ba5e39f5e81227be26729ae7479a232c1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6051c76dbe5e2d9935fa25c7232fe7b239272b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6051c76dbe5e2d9935fa25c7232fe7b239272b8", "html_url": "https://github.com/rust-lang/rust/commit/a6051c76dbe5e2d9935fa25c7232fe7b239272b8"}], "stats": {"total": 78, "additions": 45, "deletions": 33}, "files": [{"sha": "5996fa7c8ad02b447772f6ae15fa5acbf635bd47", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/6f35475ba5e39f5e81227be26729ae7479a232c1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/6f35475ba5e39f5e81227be26729ae7479a232c1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=6f35475ba5e39f5e81227be26729ae7479a232c1", "patch": "@@ -176,13 +176,11 @@ window.initSearch = function(rawSearchIndex) {\n             throw new Error(\"Cannot use literal search when there is more than one element\");\n         }\n         parserState.pos += 1;\n-        while (parserState.pos < parserState.length &&\n-            parserState.userQuery[parserState.pos] !== \"\\\"\")\n-        {\n-            parserState.pos += 1;\n-        }\n+        var end = getIdentEndPosition(parserState);\n         if (parserState.pos >= parserState.length) {\n             throw new Error(\"Unclosed `\\\"`\");\n+        } else if (parserState.userQuery[end] !== \"\\\"\") {\n+            throw new Error(`Unexpected \\`${parserState.userQuery[end]}\\` in a string element`);\n         }\n         // To skip the quote at the end.\n         parserState.pos += 1;\n@@ -284,6 +282,45 @@ window.initSearch = function(rawSearchIndex) {\n         };\n     }\n \n+    /**\n+     * This function goes through all characters until it reaches an invalid ident character or the\n+     * end of the query. It returns the position of the last character of the ident.\n+     *\n+     * @param {ParserState} parserState\n+     *\n+     * @return {integer}\n+     */\n+    function getIdentEndPosition(parserState) {\n+        var end = parserState.pos;\n+        while (parserState.pos < parserState.length) {\n+            var c = parserState.userQuery[parserState.pos];\n+            if (!isIdentCharacter(c)) {\n+                if (isErrorCharacter(c)) {\n+                    throw new Error(`Unexpected \\`${c}\\``);\n+                } else if (\n+                    isStopCharacter(c) ||\n+                    isSpecialStartCharacter(c) ||\n+                    isSeparatorCharacter(c))\n+                {\n+                    break;\n+                }\n+                // If we allow paths (\"str::string\" for example).\n+                else if (c === \":\") {\n+                    if (!isPathStart(parserState)) {\n+                        break;\n+                    }\n+                    // Skip current \":\".\n+                    parserState.pos += 1;\n+                } else {\n+                    throw new Error(`Unexpected \\`${c}\\``);\n+                }\n+            }\n+            parserState.pos += 1;\n+            end = parserState.pos;\n+        }\n+        return end;\n+    }\n+\n     /**\n      * @param {ParsedQuery} query\n      * @param {ParserState} parserState\n@@ -294,39 +331,14 @@ window.initSearch = function(rawSearchIndex) {\n         var generics = [];\n \n         var start = parserState.pos;\n-        var end = start;\n+        var end;\n         // We handle the strings on their own mostly to make code easier to follow.\n         if (parserState.userQuery[parserState.pos] === \"\\\"\") {\n             start += 1;\n             getStringElem(query, parserState, isInGenerics);\n             end = parserState.pos - 1;\n         } else {\n-            while (parserState.pos < parserState.length) {\n-                var c = parserState.userQuery[parserState.pos];\n-                if (!isIdentCharacter(c)) {\n-                    if (isErrorCharacter(c)) {\n-                        throw new Error(`Unexpected \\`${c}\\``);\n-                    } else if (\n-                        isStopCharacter(c) ||\n-                        isSpecialStartCharacter(c) ||\n-                        isSeparatorCharacter(c))\n-                    {\n-                        break;\n-                    }\n-                    // If we allow paths (\"str::string\" for example).\n-                    else if (c === \":\") {\n-                        if (!isPathStart(parserState)) {\n-                            break;\n-                        }\n-                        // Skip current \":\".\n-                        parserState.pos += 1;\n-                    } else {\n-                        throw new Error(`Unexpected \\`${c}\\``);\n-                    }\n-                }\n-                parserState.pos += 1;\n-                end = parserState.pos;\n-            }\n+            end = getIdentEndPosition(parserState);\n         }\n         if (parserState.pos < parserState.length &&\n             parserState.userQuery[parserState.pos] === \"<\")"}, {"sha": "3aeeee0d8f0c1630361717f9e380e70583204c77", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f35475ba5e39f5e81227be26729ae7479a232c1/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/6f35475ba5e39f5e81227be26729ae7479a232c1/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=6f35475ba5e39f5e81227be26729ae7479a232c1", "patch": "@@ -275,7 +275,7 @@ function loadSearchJsAndIndex(searchJs, searchIndex, storageJs, crate) {\n                            \"parseInput\", \"getItemsBefore\", \"getNextElem\", \"createQueryElement\",\n                            \"isReturnArrow\", \"isPathStart\", \"getStringElem\", \"newParsedQuery\",\n                            \"itemTypeFromName\", \"isEndCharacter\", \"isErrorCharacter\",\n-                           \"isIdentCharacter\", \"isSeparatorCharacter\"];\n+                           \"isIdentCharacter\", \"isSeparatorCharacter\", \"getIdentEndPosition\"];\n \n     const functions = [\"hasOwnPropertyRustdoc\", \"onEach\"];\n     ALIASES = {};"}]}