{"sha": "72fe79244d39c356e6fa1da4dfa58354983f98f7", "node_id": "C_kwDOAAsO6NoAKDcyZmU3OTI0NGQzOWMzNTZlNmZhMWRhNGRmYTU4MzU0OTgzZjk4Zjc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-29T04:19:14Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-29T04:19:14Z"}, "message": "Simplify get_trait_ref a bit", "tree": {"sha": "a336e9b48d1cd6abb4ecceab14b915b8bd2dd3fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a336e9b48d1cd6abb4ecceab14b915b8bd2dd3fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72fe79244d39c356e6fa1da4dfa58354983f98f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72fe79244d39c356e6fa1da4dfa58354983f98f7", "html_url": "https://github.com/rust-lang/rust/commit/72fe79244d39c356e6fa1da4dfa58354983f98f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72fe79244d39c356e6fa1da4dfa58354983f98f7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ea4efd0656599f824e2567a5b7a95454f701c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea4efd0656599f824e2567a5b7a95454f701c03", "html_url": "https://github.com/rust-lang/rust/commit/1ea4efd0656599f824e2567a5b7a95454f701c03"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "f8e982b775189f7ed45ae19b5f0e572bb657f3af", "filename": "compiler/rustc_codegen_ssa/src/meth.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72fe79244d39c356e6fa1da4dfa58354983f98f7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72fe79244d39c356e6fa1da4dfa58354983f98f7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmeth.rs?ref=72fe79244d39c356e6fa1da4dfa58354983f98f7", "patch": "@@ -1,6 +1,6 @@\n use crate::traits::*;\n \n-use rustc_middle::ty::{self, subst::GenericArgKind, ExistentialPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, subst::GenericArgKind, Ty};\n use rustc_session::config::Lto;\n use rustc_symbol_mangling::typeid_for_trait_ref;\n use rustc_target::abi::call::FnAbi;\n@@ -29,7 +29,7 @@ impl<'a, 'tcx> VirtualIndex {\n             && bx.cx().sess().lto() == Lto::Fat\n         {\n             let typeid =\n-                bx.typeid_metadata(typeid_for_trait_ref(bx.tcx(), get_trait_ref(bx.tcx(), ty)));\n+                bx.typeid_metadata(typeid_for_trait_ref(bx.tcx(), expect_dyn_trait_in_self(ty)));\n             let vtable_byte_offset = self.0 * bx.data_layout().pointer_size.bytes();\n             let type_checked_load = bx.type_checked_load(llvtable, vtable_byte_offset, typeid);\n             let func = bx.extract_value(type_checked_load, 0);\n@@ -64,17 +64,13 @@ impl<'a, 'tcx> VirtualIndex {\n     }\n }\n \n-fn get_trait_ref<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ty::PolyExistentialTraitRef<'tcx> {\n+/// This takes a valid `self` receiver type and extracts the principal trait\n+/// ref of the type.\n+fn expect_dyn_trait_in_self<'tcx>(ty: Ty<'tcx>) -> ty::PolyExistentialTraitRef<'tcx> {\n     for arg in ty.peel_refs().walk() {\n         if let GenericArgKind::Type(ty) = arg.unpack() {\n-            if let ty::Dynamic(trait_refs, _) = ty.kind() {\n-                return trait_refs[0].map_bound(|trait_ref| match trait_ref {\n-                    ExistentialPredicate::Trait(tr) => tr,\n-                    ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),\n-                    ExistentialPredicate::AutoTrait(_) => {\n-                        bug!(\"auto traits don't have functions\")\n-                    }\n-                });\n+            if let ty::Dynamic(data, _) = ty.kind() {\n+                return data.principal().expect(\"expected principal trait object\");\n             }\n         }\n     }"}]}