{"sha": "a791919a62dd8294fac990c75c40b5557b423a79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3OTE5MTlhNjJkZDgyOTRmYWM5OTBjNzVjNDBiNTU1N2I0MjNhNzk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-20T13:36:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-20T13:36:16Z"}, "message": "Rollup merge of #52813 - newpavlov:duration_mul_div_extras, r=alexcrichton\n\nDuration div mul extras\n\nSuccessor of #52556.\n\nThis PR adds the following `impl`s:\n- `impl Mul<Duration> for u32` (to allow `10*SECOND` in addition to `SECOND*10`)\n- `impl Mul<f64> for Duration` (to allow `2.5*SECOND` vs `2*SECOND + 500*MILLISECOND`)\n- `impl Mul<Duration> for f64`\n- `impl MulAssign<f64> for Duration`\n- `impl Div<f64> for Duration`\n- `impl DivAssign<f64> for Duration`\n- `impl Div<Duration> for Duration` (`Output = f64`, can be useful e.g. for `duration/MINUTE`)\n\n`f64` is chosen over `f32` to minimize rounding errors. (52 bits fraction precision vs `Duration`'s ~94 bit)", "tree": {"sha": "c0b56d1cb1f3153d11346aeabd077119367c064c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b56d1cb1f3153d11346aeabd077119367c064c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a791919a62dd8294fac990c75c40b5557b423a79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbo6JQCRBK7hj4Ov3rIwAAdHIIAHeXwE2EfS507uO/KwBLAQ82\n3taGhDD3GbEZbr1Yt/XUK/d2dMurnWGNy5nVEH9sNHHETtxDDLHYAoidL3dPpoEg\nhdnyH7AgM3Huf+VEfXL/Q7OqacUB/bvhl5morWTiyIsE12yQFDQjrluSd1AMGNkF\np4FyZJ/LUKPnfI4NLt+PUrthXC3o1Z2/c7Vmmvxt2/tIWQjhg9MsL/z1UWYuCfQZ\nktKbJI+Fz+FKBIsCFdU8KpN41BhHlGVRpjxpmXquvRmfb5DDVklDk9YlrqoRAqVP\nd7Ii/gAs3aTAatX8NY9u60SOkYR8+5kfXT+1QQNgdgYBojuVl7uCvS1o6Zjp1WA=\n=RRkF\n-----END PGP SIGNATURE-----\n", "payload": "tree c0b56d1cb1f3153d11346aeabd077119367c064c\nparent f7f4c500b46603386e940f116b469c7adc043a6d\nparent fd7565b076440829b86cc7bc5f2457bf42d43936\nauthor kennytm <kennytm@gmail.com> 1537450576 +0800\ncommitter GitHub <noreply@github.com> 1537450576 +0800\n\nRollup merge of #52813 - newpavlov:duration_mul_div_extras, r=alexcrichton\n\nDuration div mul extras\n\nSuccessor of #52556.\n\nThis PR adds the following `impl`s:\n- `impl Mul<Duration> for u32` (to allow `10*SECOND` in addition to `SECOND*10`)\n- `impl Mul<f64> for Duration` (to allow `2.5*SECOND` vs `2*SECOND + 500*MILLISECOND`)\n- `impl Mul<Duration> for f64`\n- `impl MulAssign<f64> for Duration`\n- `impl Div<f64> for Duration`\n- `impl DivAssign<f64> for Duration`\n- `impl Div<Duration> for Duration` (`Output = f64`, can be useful e.g. for `duration/MINUTE`)\n\n`f64` is chosen over `f32` to minimize rounding errors. (52 bits fraction precision vs `Duration`'s ~94 bit)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a791919a62dd8294fac990c75c40b5557b423a79", "html_url": "https://github.com/rust-lang/rust/commit/a791919a62dd8294fac990c75c40b5557b423a79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a791919a62dd8294fac990c75c40b5557b423a79/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7f4c500b46603386e940f116b469c7adc043a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f4c500b46603386e940f116b469c7adc043a6d", "html_url": "https://github.com/rust-lang/rust/commit/f7f4c500b46603386e940f116b469c7adc043a6d"}, {"sha": "fd7565b076440829b86cc7bc5f2457bf42d43936", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7565b076440829b86cc7bc5f2457bf42d43936", "html_url": "https://github.com/rust-lang/rust/commit/fd7565b076440829b86cc7bc5f2457bf42d43936"}], "stats": {"total": 121, "additions": 120, "deletions": 1}, "files": [{"sha": "1aed5a7b426fdd977f29f793ccc97e55a89fabd0", "filename": "src/libcore/time.rs", "status": "modified", "additions": 120, "deletions": 1, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/a791919a62dd8294fac990c75c40b5557b423a79/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a791919a62dd8294fac990c75c40b5557b423a79/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=a791919a62dd8294fac990c75c40b5557b423a79", "patch": "@@ -21,7 +21,7 @@\n //! assert_eq!(Duration::new(5, 0), Duration::from_secs(5));\n //! ```\n \n-use fmt;\n+use {fmt, u64};\n use iter::Sum;\n use ops::{Add, Sub, Mul, Div, AddAssign, SubAssign, MulAssign, DivAssign};\n \n@@ -30,6 +30,7 @@ const NANOS_PER_MILLI: u32 = 1_000_000;\n const NANOS_PER_MICRO: u32 = 1_000;\n const MILLIS_PER_SEC: u64 = 1_000;\n const MICROS_PER_SEC: u64 = 1_000_000;\n+const MAX_NANOS_F64: f64 = ((u64::MAX as u128 + 1)*(NANOS_PER_SEC as u128)) as f64;\n \n /// A `Duration` type to represent a span of time, typically used for system\n /// timeouts.\n@@ -458,6 +459,115 @@ impl Duration {\n             None\n         }\n     }\n+\n+    /// Returns the number of seconds contained by this `Duration` as `f64`.\n+    ///\n+    /// The returned value does include the fractional (nanosecond) part of the duration.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::new(2, 700_000_000);\n+    /// assert_eq!(dur.as_float_secs(), 2.7);\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn as_float_secs(&self) -> f64 {\n+        (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n+    }\n+\n+    /// Creates a new `Duration` from the specified number of seconds.\n+    ///\n+    /// # Panics\n+    /// This constructor will panic if `secs` is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::from_float_secs(2.7);\n+    /// assert_eq!(dur, Duration::new(2, 700_000_000));\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn from_float_secs(secs: f64) -> Duration {\n+        let nanos =  secs * (NANOS_PER_SEC as f64);\n+        if !nanos.is_finite() {\n+            panic!(\"got non-finite value when converting float to duration\");\n+        }\n+        if nanos >= MAX_NANOS_F64 {\n+            panic!(\"overflow when converting float to duration\");\n+        }\n+        if nanos < 0.0 {\n+            panic!(\"underflow when converting float to duration\");\n+        }\n+        let nanos =  nanos as u128;\n+        Duration {\n+            secs: (nanos / (NANOS_PER_SEC as u128)) as u64,\n+            nanos: (nanos % (NANOS_PER_SEC as u128)) as u32,\n+        }\n+    }\n+\n+    /// Multiply `Duration` by `f64`.\n+    ///\n+    /// # Panics\n+    /// This method will panic if result is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::new(2, 700_000_000);\n+    /// assert_eq!(dur.mul_f64(3.14), Duration::new(8, 478_000_000));\n+    /// assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn mul_f64(self, rhs: f64) -> Duration {\n+        Duration::from_float_secs(rhs * self.as_float_secs())\n+    }\n+\n+    /// Divide `Duration` by `f64`.\n+    ///\n+    /// # Panics\n+    /// This method will panic if result is not finite, negative or overflows `Duration`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur = Duration::new(2, 700_000_000);\n+    /// assert_eq!(dur.div_f64(3.14), Duration::new(0, 859_872_611));\n+    /// // note that truncation is used, not rounding\n+    /// assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_598));\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn div_f64(self, rhs: f64) -> Duration {\n+        Duration::from_float_secs(self.as_float_secs() / rhs)\n+    }\n+\n+    /// Divide `Duration` by `Duration` and return `f64`.\n+    ///\n+    /// # Examples\n+    /// ```\n+    /// #![feature(duration_float)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let dur1 = Duration::new(2, 700_000_000);\n+    /// let dur2 = Duration::new(5, 400_000_000);\n+    /// assert_eq!(dur1.div_duration(dur2), 0.5);\n+    /// ```\n+    #[unstable(feature = \"duration_float\", issue = \"54361\")]\n+    #[inline]\n+    pub fn div_duration(self, rhs: Duration) -> f64 {\n+        self.as_float_secs() / rhs.as_float_secs()\n+    }\n }\n \n #[stable(feature = \"duration\", since = \"1.3.0\")]\n@@ -501,6 +611,15 @@ impl Mul<u32> for Duration {\n     }\n }\n \n+#[stable(feature = \"symmetric_u32_duration_mul\", since = \"1.31.0\")]\n+impl Mul<Duration> for u32 {\n+    type Output = Duration;\n+\n+    fn mul(self, rhs: Duration) -> Duration {\n+        rhs * self\n+    }\n+}\n+\n #[stable(feature = \"time_augmented_assignment\", since = \"1.9.0\")]\n impl MulAssign<u32> for Duration {\n     fn mul_assign(&mut self, rhs: u32) {"}]}