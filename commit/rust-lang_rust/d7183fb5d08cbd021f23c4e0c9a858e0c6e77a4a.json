{"sha": "d7183fb5d08cbd021f23c4e0c9a858e0c6e77a4a", "node_id": "C_kwDOAAsO6NoAKGQ3MTgzZmI1ZDA4Y2JkMDIxZjIzYzRlMGM5YTg1OGUwYzZlNzdhNGE", "commit": {"author": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-12-09T13:00:30Z"}, "committer": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-12-09T13:00:30Z"}, "message": "fix: make make_body respect comments in extract_function", "tree": {"sha": "65ee41397cf3fbdad8703da9ad02bf3186ba0a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65ee41397cf3fbdad8703da9ad02bf3186ba0a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7183fb5d08cbd021f23c4e0c9a858e0c6e77a4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7183fb5d08cbd021f23c4e0c9a858e0c6e77a4a", "html_url": "https://github.com/rust-lang/rust/commit/d7183fb5d08cbd021f23c4e0c9a858e0c6e77a4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7183fb5d08cbd021f23c4e0c9a858e0c6e77a4a/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e8a54d0f68702cf7981c8299357838eb0f4d5b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e8a54d0f68702cf7981c8299357838eb0f4d5b2", "html_url": "https://github.com/rust-lang/rust/commit/6e8a54d0f68702cf7981c8299357838eb0f4d5b2"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "4ee9d4638bbd57deca9d5b6c766b4351dfd1281d", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 63, "deletions": 4, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d7183fb5d08cbd021f23c4e0c9a858e0c6e77a4a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7183fb5d08cbd021f23c4e0c9a858e0c6e77a4a/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=d7183fb5d08cbd021f23c4e0c9a858e0c6e77a4a", "patch": "@@ -1799,7 +1799,6 @@ fn make_body(\n                 })\n                 .collect::<Vec<SyntaxElement>>();\n             let tail_expr = tail_expr.map(|expr| expr.dedent(old_indent).indent(body_indent));\n-\n             make::hacky_block_expr_with_comments(elements, tail_expr)\n         }\n     };\n@@ -1860,9 +1859,29 @@ fn with_default_tail_expr(block: ast::BlockExpr, tail_expr: ast::Expr) -> ast::B\n }\n \n fn with_tail_expr(block: ast::BlockExpr, tail_expr: ast::Expr) -> ast::BlockExpr {\n-    let stmt_tail = block.tail_expr().map(|expr| make::expr_stmt(expr).into());\n-    let stmts = block.statements().chain(stmt_tail);\n-    make::block_expr(stmts, Some(tail_expr))\n+    let stmt_tail_opt: Option<ast::Stmt> =\n+        block.tail_expr().map(|expr| make::expr_stmt(expr).into());\n+\n+    let mut elements: Vec<SyntaxElement> = vec![];\n+\n+    block.statements().for_each(|stmt| {\n+        elements.push(syntax::NodeOrToken::Node(stmt.syntax().clone()));\n+    });\n+\n+    if let Some(stmt_list) = block.stmt_list() {\n+        stmt_list.syntax().children_with_tokens().for_each(|node_or_token| {\n+            match &node_or_token {\n+                syntax::NodeOrToken::Token(_) => elements.push(node_or_token),\n+                _ => (),\n+            };\n+        });\n+    }\n+\n+    if let Some(stmt_tail) = stmt_tail_opt {\n+        elements.push(syntax::NodeOrToken::Node(stmt_tail.syntax().clone()));\n+    }\n+\n+    make::hacky_block_expr_with_comments(elements, Some(tail_expr))\n }\n \n fn format_type(ty: &hir::Type, ctx: &AssistContext<'_>, module: hir::Module) -> String {\n@@ -5744,6 +5763,46 @@ fn $0fun_name() -> Option<()> {\n     };\n     Some(a)\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn non_tail_expr_with_comment_of_tail_expr_loop() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+pub fn f() {\n+    loop {\n+        $0// A comment\n+        if true {\n+            continue;\n+        }$0\n+        if false {\n+            break;\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+pub fn f() {\n+    loop {\n+        if let ControlFlow::Break(_) = fun_name() {\n+            continue;\n+        }\n+        if false {\n+            break;\n+        }\n+    }\n+}\n+\n+fn $0fun_name() -> ControlFlow<()> {\n+    // A comment\n+    if true {\n+        return ControlFlow::Break(());\n+    }\n+    ControlFlow::Continue(())\n+}\n \"#,\n         );\n     }"}]}