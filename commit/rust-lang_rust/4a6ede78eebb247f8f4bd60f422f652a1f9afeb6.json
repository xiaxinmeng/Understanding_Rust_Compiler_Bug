{"sha": "4a6ede78eebb247f8f4bd60f422f652a1f9afeb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNmVkZTc4ZWViYjI0N2Y4ZjRiZDYwZjQyMmY2NTJhMWY5YWZlYjY=", "commit": {"author": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2017-10-04T11:45:14Z"}, "committer": {"name": "Aidan Hobson Sayers", "email": "aidanhs@cantab.net", "date": "2017-10-04T11:46:43Z"}, "message": "Don't unwrap work item results as the panic trace is useless\n\nFixes #43402 now there's no multithreaded panic printouts\n\nAlso update a comment", "tree": {"sha": "8e26883758273eec6ef065d0d6adc5819321c602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e26883758273eec6ef065d0d6adc5819321c602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a6ede78eebb247f8f4bd60f422f652a1f9afeb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a6ede78eebb247f8f4bd60f422f652a1f9afeb6", "html_url": "https://github.com/rust-lang/rust/commit/4a6ede78eebb247f8f4bd60f422f652a1f9afeb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a6ede78eebb247f8f4bd60f422f652a1f9afeb6/comments", "author": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aidanhs", "id": 1050652, "node_id": "MDQ6VXNlcjEwNTA2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1050652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aidanhs", "html_url": "https://github.com/aidanhs", "followers_url": "https://api.github.com/users/aidanhs/followers", "following_url": "https://api.github.com/users/aidanhs/following{/other_user}", "gists_url": "https://api.github.com/users/aidanhs/gists{/gist_id}", "starred_url": "https://api.github.com/users/aidanhs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aidanhs/subscriptions", "organizations_url": "https://api.github.com/users/aidanhs/orgs", "repos_url": "https://api.github.com/users/aidanhs/repos", "events_url": "https://api.github.com/users/aidanhs/events{/privacy}", "received_events_url": "https://api.github.com/users/aidanhs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae6ed78acf9dc865e2300a7db556389eed9692d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae6ed78acf9dc865e2300a7db556389eed9692d", "html_url": "https://github.com/rust-lang/rust/commit/9ae6ed78acf9dc865e2300a7db556389eed9692d"}], "stats": {"total": 19, "additions": 6, "deletions": 13}, "files": [{"sha": "7ddcf23a85ae09cef34e2c0efe536b5bfa9f4526", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4a6ede78eebb247f8f4bd60f422f652a1f9afeb6/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a6ede78eebb247f8f4bd60f422f652a1f9afeb6/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=4a6ede78eebb247f8f4bd60f422f652a1f9afeb6", "patch": "@@ -1638,9 +1638,9 @@ fn start_executing_work(tcx: TyCtxt,\n                     needs_lto.push(result);\n                 }\n                 Message::Done { result: Err(()), worker_id: _ } => {\n-                    shared_emitter.fatal(\"aborting due to worker thread panic\");\n+                    shared_emitter.fatal(\"aborting due to worker thread failure\");\n                     // Exit the coordinator thread\n-                    panic!(\"aborting due to worker thread panic\")\n+                    panic!(\"aborting due to worker thread failure\")\n                 }\n                 Message::TranslateItem => {\n                     bug!(\"the coordinator should not receive translation requests\")\n@@ -1741,23 +1741,16 @@ fn spawn_work(cgcx: CodegenContext, work: WorkItem) {\n         // Execute the work itself, and if it finishes successfully then flag\n         // ourselves as a success as well.\n         //\n-        // Note that we ignore the result coming out of `execute_work_item`\n-        // which will tell us if the worker failed with a `FatalError`. If that\n-        // has happened, however, then a diagnostic was sent off to the main\n-        // thread, along with an `AbortIfErrors` message. In that case the main\n-        // thread is already exiting anyway most likely.\n-        //\n-        // In any case, there's no need for us to take further action here, so\n-        // we just ignore the result and then send off our message saying that\n-        // we're done, which if `execute_work_item` failed is unlikely to be\n-        // seen by the main thread, but hey we might as well try anyway.\n+        // Note that we ignore any `FatalError` coming out of `execute_work_item`,\n+        // as a diagnostic was already sent off to the main thread - just\n+        // surface that there was an error in this worker.\n         bomb.result = {\n             let _timing_guard = cgcx.time_graph.as_ref().map(|tg| {\n                 tg.start(time_graph::TimelineId(cgcx.worker),\n                          LLVM_WORK_PACKAGE_KIND,\n                          &work.name())\n             });\n-            Some(execute_work_item(&cgcx, work).unwrap())\n+            execute_work_item(&cgcx, work).ok()\n         };\n     });\n }"}]}