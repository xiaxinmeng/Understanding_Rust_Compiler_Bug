{"sha": "8f50a17c37a214632c2f5cf5b8f2833a7286883b", "node_id": "C_kwDOAAsO6NoAKDhmNTBhMTdjMzdhMjE0NjMyYzJmNWNmNWI4ZjI4MzNhNzI4Njg4M2I", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2023-04-23T02:27:22Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2023-05-10T13:49:00Z"}, "message": "Fixups for sync\n\n- Fix LANES over-replace\n- Bring in traits\n- Use less inference-heavy types", "tree": {"sha": "288fc935e6fde07786944cee92408bc146793f7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/288fc935e6fde07786944cee92408bc146793f7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f50a17c37a214632c2f5cf5b8f2833a7286883b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f50a17c37a214632c2f5cf5b8f2833a7286883b", "html_url": "https://github.com/rust-lang/rust/commit/8f50a17c37a214632c2f5cf5b8f2833a7286883b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f50a17c37a214632c2f5cf5b8f2833a7286883b/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50416fcc2c8b1b5ea8c486cc3a624abefdee4f3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/50416fcc2c8b1b5ea8c486cc3a624abefdee4f3f", "html_url": "https://github.com/rust-lang/rust/commit/50416fcc2c8b1b5ea8c486cc3a624abefdee4f3f"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "3323b92e37bd0c6fc9f0e92ef182638b5e85bee6", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8f50a17c37a214632c2f5cf5b8f2833a7286883b/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f50a17c37a214632c2f5cf5b8f2833a7286883b/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=8f50a17c37a214632c2f5cf5b8f2833a7286883b", "patch": "@@ -2,6 +2,7 @@ use crate::simd::{\n     intrinsics, LaneCount, Mask, MaskElement, SimdCast, SimdCastPtr, SimdConstPtr, SimdMutPtr,\n     SimdPartialOrd, SupportedLaneCount, Swizzle,\n };\n+use core::convert::{TryFrom, TryInto};\n \n /// A SIMD vector with the shape of `[T; N]` but the operations of `T`.\n ///\n@@ -109,7 +110,7 @@ where\n     T: SimdElement,\n {\n     /// Number of elements in this vector.\n-    pub const N: usize = N;\n+    pub const LANES: usize = N;\n \n     /// Returns the number of elements in this SIMD vector.\n     ///\n@@ -122,7 +123,7 @@ where\n     /// assert_eq!(v.lanes(), 4);\n     /// ```\n     pub const fn lanes(&self) -> usize {\n-        Self::N\n+        Self::LANES\n     }\n \n     /// Constructs a new SIMD vector with all elements set to the given value.\n@@ -260,7 +261,7 @@ where\n     #[must_use]\n     pub const fn from_slice(slice: &[T]) -> Self {\n         assert!(\n-            slice.len() >= Self::N,\n+            slice.len() >= Self::LANES,\n             \"slice length must be at least the number of elements\"\n         );\n         // SAFETY: We just checked that the slice contains\n@@ -288,7 +289,7 @@ where\n     /// ```\n     pub fn copy_to_slice(self, slice: &mut [T]) {\n         assert!(\n-            slice.len() >= Self::N,\n+            slice.len() >= Self::LANES,\n             \"slice length must be at least the number of elements\"\n         );\n         // SAFETY: We just checked that the slice contains\n@@ -883,7 +884,7 @@ where\n {\n     type Error = core::array::TryFromSliceError;\n \n-    fn try_from(slice: &[T]) -> Result<Self, Self::Error> {\n+    fn try_from(slice: &[T]) -> Result<Self, core::array::TryFromSliceError> {\n         Ok(Self::from_array(slice.try_into()?))\n     }\n }\n@@ -895,7 +896,7 @@ where\n {\n     type Error = core::array::TryFromSliceError;\n \n-    fn try_from(slice: &mut [T]) -> Result<Self, Self::Error> {\n+    fn try_from(slice: &mut [T]) -> Result<Self, core::array::TryFromSliceError> {\n         Ok(Self::from_array(slice.try_into()?))\n     }\n }"}]}