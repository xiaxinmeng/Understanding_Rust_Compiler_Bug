{"sha": "573a31dfa769887f4be77a621ef4cab2d92a74e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3M2EzMWRmYTc2OTg4N2Y0YmU3N2E2MjFlZjRjYWIyZDkyYTc0ZTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-26T22:50:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-27T17:40:16Z"}, "message": "libsyntax: Forbid mutable vectors. rs=demuting", "tree": {"sha": "bfbed5ea785d70a71467cd8a66d53c719ab43d12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfbed5ea785d70a71467cd8a66d53c719ab43d12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/573a31dfa769887f4be77a621ef4cab2d92a74e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/573a31dfa769887f4be77a621ef4cab2d92a74e5", "html_url": "https://github.com/rust-lang/rust/commit/573a31dfa769887f4be77a621ef4cab2d92a74e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/573a31dfa769887f4be77a621ef4cab2d92a74e5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d7e6ef7725f8a11de940892a74398fc1911dfc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7e6ef7725f8a11de940892a74398fc1911dfc7", "html_url": "https://github.com/rust-lang/rust/commit/8d7e6ef7725f8a11de940892a74398fc1911dfc7"}], "stats": {"total": 92, "additions": 31, "deletions": 61}, "files": [{"sha": "9f2036c5f41a6b4b949c538c7b26966d1cff812c", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=573a31dfa769887f4be77a621ef4cab2d92a74e5", "patch": "@@ -133,18 +133,6 @@ impl<A> DVec<A> {\n         self.check_out(|v| self.give_back(f(v)))\n     }\n \n-    /**\n-     * Swaps out the current vector and hands it off to a user-provided\n-     * function `f`.  The function should transform it however is desired\n-     * and return a new vector to replace it with.\n-     */\n-    #[inline(always)]\n-    fn swap_mut(f: &fn(v: ~[mut A]) -> ~[mut A]) {\n-        do self.swap |v| {\n-            vec::cast_from_mut(f(vec::cast_to_mut(v)))\n-        }\n-    }\n-\n     /// Returns the number of elements currently in the dvec\n     #[inline(always)]\n     pure fn len() -> uint {\n@@ -217,7 +205,7 @@ impl<A> DVec<A> {\n     }\n \n     /// Gives access to the vector as a slice with mutable contents\n-    fn borrow_mut<R>(op: fn(x: &[mut A]) -> R) -> R {\n+    fn borrow_mut<R>(op: &fn(x: &mut [A]) -> R) -> R {\n         do self.check_out |v| {\n             let mut v = v;\n             let result = op(v);"}, {"sha": "2522e9c2cda5ab4846fa77ac5093ed80fa705765", "filename": "src/libcore/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=573a31dfa769887f4be77a621ef4cab2d92a74e5", "patch": "@@ -109,7 +109,7 @@ pub mod win32 {\n             let mut done = false;\n             while !done {\n                 let mut k: DWORD = 0;\n-                let buf = vec::cast_to_mut(vec::from_elem(n as uint, 0u16));\n+                let mut buf = vec::from_elem(n as uint, 0u16);\n                 do vec::as_mut_buf(buf) |b, _sz| {\n                     k = f(b, TMPBUF_SZ as DWORD);\n                     if k == (0 as DWORD) {"}, {"sha": "687ad2f79387d67356ac9eeb6924da583dc3d098", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 8, "deletions": 37, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=573a31dfa769887f4be77a621ef4cab2d92a74e5", "patch": "@@ -209,16 +209,6 @@ pub pure fn build_sized_opt<A>(size: Option<uint>,\n     build_sized(size.get_or_default(4), builder)\n }\n \n-/// Produces a mut vector from an immutable vector.\n-pub pure fn cast_to_mut<T>(v: ~[T]) -> ~[mut T] {\n-    unsafe { ::cast::transmute(v) }\n-}\n-\n-/// Produces an immutable vector from a mut vector.\n-pub pure fn cast_from_mut<T>(v: ~[mut T]) -> ~[T] {\n-    unsafe { ::cast::transmute(v) }\n-}\n-\n // Accessors\n \n /// Returns the first element of a vector\n@@ -274,9 +264,10 @@ pub pure fn slice<T>(v: &r/[T], start: uint, end: uint) -> &r/[T] {\n \n /// Return a slice that points into another slice.\n #[inline(always)]\n-pub pure fn mut_slice<T>(v: &r/[mut T], start: uint,\n-                         end: uint) -> &r/[mut T] {\n-\n+pub pure fn mut_slice<T>(v: &r/mut [T],\n+                         start: uint,\n+                         end: uint)\n+                      -> &r/mut [T] {\n     assert (start <= end);\n     assert (end <= len(v));\n     do as_mut_buf(v) |p, _len| {\n@@ -290,8 +281,10 @@ pub pure fn mut_slice<T>(v: &r/[mut T], start: uint,\n \n /// Return a slice that points into another slice.\n #[inline(always)]\n-pub pure fn const_slice<T>(v: &r/[const T], start: uint,\n-                      end: uint) -> &r/[const T] {\n+pub pure fn const_slice<T>(v: &r/[const T],\n+                           start: uint,\n+                           end: uint)\n+                        -> &r/[const T] {\n     assert (start <= end);\n     assert (end <= len(v));\n     do as_const_buf(v) |p, _len| {\n@@ -3337,28 +3330,6 @@ mod tests {\n         let _x = windowed (0u, ~[1u,2u,3u,4u,5u,6u]);\n     }\n \n-    #[test]\n-    fn cast_to_mut_no_copy() {\n-        unsafe {\n-            let x = ~[1, 2, 3];\n-            let addr = raw::to_ptr(x);\n-            let x_mut = cast_to_mut(x);\n-            let addr_mut = raw::to_ptr(x_mut);\n-            assert addr == addr_mut;\n-        }\n-    }\n-\n-    #[test]\n-    fn cast_from_mut_no_copy() {\n-        unsafe {\n-            let x = ~[mut 1, 2, 3];\n-            let addr = raw::to_ptr(x);\n-            let x_imm = cast_from_mut(x);\n-            let addr_imm = raw::to_ptr(x_imm);\n-            assert addr == addr_imm;\n-        }\n-    }\n-\n     #[test]\n     fn test_unshift() {\n         let mut x = ~[1, 2, 3];"}, {"sha": "75f38da5a19a1730f45e050eafa0afc05d7f6221", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=573a31dfa769887f4be77a621ef4cab2d92a74e5", "patch": "@@ -455,8 +455,7 @@ impl<T:Copy + Ord> MergeState<T> {\n                 base2: uint, len2: uint) {\n         assert len1 != 0 && len2 != 0 && base1+len1 == base2;\n \n-        let tmp = vec::cast_to_mut(\n-            vec::slice(array, base1, base1+len1).to_vec());\n+        let mut tmp = vec::slice(array, base1, base1+len1).to_vec();\n \n         let mut c1 = 0;\n         let mut c2 = base2;\n@@ -559,8 +558,7 @@ impl<T:Copy + Ord> MergeState<T> {\n                 base2: uint, len2: uint) {\n         assert len1 != 1 && len2 != 0 && base1 + len1 == base2;\n \n-        let tmp = vec::cast_to_mut(\n-            vec::slice(array, base2, base2+len2).to_vec());\n+        let mut tmp = vec::slice(array, base2, base2+len2).to_vec();\n \n         let mut c1 = base1 + len1 - 1;\n         let mut c2 = len2 - 1;"}, {"sha": "7dafdec95e07267fea0fa2d55f4dd22e1942867c", "filename": "src/libstd/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibstd%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibstd%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstats.rs?ref=573a31dfa769887f4be77a621ef4cab2d92a74e5", "patch": "@@ -52,7 +52,7 @@ impl Stats for &[f64] {\n \n     fn median(self) -> f64 {\n         assert self.len() != 0;\n-        let tmp = vec::cast_to_mut(vec::from_slice(self));\n+        let mut tmp = vec::from_slice(self);\n         sort::tim_sort(tmp);\n         if tmp.len() & 1 == 0 {\n             let m = tmp.len() / 2;"}, {"sha": "bfeaf8400bc4487908b8190916bc0b9c57ea491a", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=573a31dfa769887f4be77a621ef4cab2d92a74e5", "patch": "@@ -377,7 +377,7 @@ pub fn run_tests_console(opts: &TestOpts,\n \n fn print_failures(st: @ConsoleTestState) {\n     st.out.write_line(~\"\\nfailures:\");\n-    let failures = vec::cast_to_mut(st.failures.map(|t| t.name.to_str()));\n+    let mut failures = st.failures.map(|t| t.name.to_str());\n     sort::tim_sort(failures);\n     for vec::each(failures) |name| {\n         st.out.write_line(fmt!(\"    %s\", name.to_str()));"}, {"sha": "33d959a7753cfb1e7c0b68afc7ef989654c5ba76", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=573a31dfa769887f4be77a621ef4cab2d92a74e5", "patch": "@@ -49,6 +49,7 @@ pub enum ObsoleteSyntax {\n     ObsoleteImplSyntax,\n     ObsoleteTraitBoundSeparator,\n     ObsoleteMutOwnedPointer,\n+    ObsoleteMutVector,\n }\n \n pub impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -133,6 +134,12 @@ pub impl Parser {\n                  in a mutable location, like a mutable local variable or an \\\n                  `@mut` box\"\n             ),\n+            ObsoleteMutVector => (\n+                \"const or mutable vector\",\n+                \"mutability inherits through `~` pointers; place the vector \\\n+                 in a mutable location, like a mutable local variable or an \\\n+                 `@mut` box\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "b4bd28cbfe215b9d6abf2213662c5820cae7b0b8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=573a31dfa769887f4be77a621ef4cab2d92a74e5", "patch": "@@ -76,6 +76,7 @@ use parse::obsolete::{ObsoleteStructCtor, ObsoleteWith};\n use parse::obsolete::{ObsoleteSyntax, ObsoleteLowerCaseKindBounds};\n use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n use parse::obsolete::{ObsoleteTraitBoundSeparator, ObsoleteMutOwnedPointer};\n+use parse::obsolete::{ObsoleteMutVector};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -624,6 +625,9 @@ pub impl Parser {\n         } else if *self.token == token::LBRACKET {\n             self.expect(token::LBRACKET);\n             let mt = self.parse_mt();\n+            if mt.mutbl == m_mutbl {    // `m_const` too after snapshot\n+                self.obsolete(*self.last_span, ObsoleteMutVector);\n+            }\n \n             // Parse the `* 3` in `[ int * 3 ]`\n             let t = match self.maybe_parse_fixed_vstore_with_star() {\n@@ -1134,6 +1138,10 @@ pub impl Parser {\n         } else if *self.token == token::LBRACKET {\n             self.bump();\n             let mutbl = self.parse_mutability();\n+            if mutbl == m_mutbl {   // `m_const` too after snapshot\n+                self.obsolete(*self.last_span, ObsoleteMutVector);\n+            }\n+\n             if *self.token == token::RBRACKET {\n                 // Empty vector.\n                 self.bump();"}, {"sha": "72f6d23cacce133e2e6f9ab0bf77a85c899e0adb", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573a31dfa769887f4be77a621ef4cab2d92a74e5/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=573a31dfa769887f4be77a621ef4cab2d92a74e5", "patch": "@@ -9,10 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    // Once cast_to_mut is removed, pick a better function to import\n-    // for this test!\n-    use vec::cast_to_mut;\n-    log(debug, vec::len(cast_to_mut(~[1, 2])));\n+    use vec::from_fn;\n+    log(debug, vec::len(from_fn(2, |i| i)));\n     {\n         use vec::*;\n         log(debug, len(~[2]));"}]}