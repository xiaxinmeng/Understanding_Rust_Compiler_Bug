{"sha": "c55a698943c515c8028522360e42b12bbf4fb274", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NWE2OTg5NDNjNTE1YzgwMjg1MjIzNjBlNDJiMTJiYmY0ZmIyNzQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-07-23T22:33:36Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-07-23T22:41:32Z"}, "message": "Only point at inside of string literals if they're actually string literals", "tree": {"sha": "7ee6fef4def6f6ef7d1976cceb4c3afa62db400e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ee6fef4def6f6ef7d1976cceb4c3afa62db400e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c55a698943c515c8028522360e42b12bbf4fb274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c55a698943c515c8028522360e42b12bbf4fb274", "html_url": "https://github.com/rust-lang/rust/commit/c55a698943c515c8028522360e42b12bbf4fb274", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c55a698943c515c8028522360e42b12bbf4fb274/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bcf8777fe632fb2c506e31d12fbfe20712ecfe6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bcf8777fe632fb2c506e31d12fbfe20712ecfe6", "html_url": "https://github.com/rust-lang/rust/commit/6bcf8777fe632fb2c506e31d12fbfe20712ecfe6"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "3d22178eab05b2f00a85bee7f8c2c5eff5cecea7", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c55a698943c515c8028522360e42b12bbf4fb274/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c55a698943c515c8028522360e42b12bbf4fb274/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=c55a698943c515c8028522360e42b12bbf4fb274", "patch": "@@ -117,6 +117,8 @@ struct Context<'a, 'b: 'a> {\n     invalid_refs: Vec<(usize, usize)>,\n     /// Spans of all the formatting arguments, in order.\n     arg_spans: Vec<Span>,\n+    /// Wether this formatting string is a literal or it comes from a macro.\n+    is_literal: bool,\n }\n \n /// Parses the arguments from the given list of tokens, returning None\n@@ -276,7 +278,11 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// format string.\n     fn report_invalid_references(&self, numbered_position_args: bool) {\n         let mut e;\n-        let sp = MultiSpan::from_spans(self.arg_spans.clone());\n+        let sp = if self.is_literal {\n+            MultiSpan::from_spans(self.arg_spans.clone())\n+        } else {\n+            MultiSpan::from_span(self.fmtsp)\n+        };\n         let mut refs: Vec<_> = self\n             .invalid_refs\n             .iter()\n@@ -294,7 +300,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 ),\n             );\n         } else {\n-            let (arg_list, sp) = match refs.len() {\n+            let (arg_list, mut sp) = match refs.len() {\n                 1 => {\n                     let (reg, pos) = refs.pop().unwrap();\n                     (\n@@ -317,11 +323,14 @@ impl<'a, 'b> Context<'a, 'b> {\n                     )\n                 }\n             };\n+            if !self.is_literal {\n+                sp = MultiSpan::from_span(self.fmtsp);\n+            }\n \n             e = self.ecx.mut_span_err(sp,\n                 &format!(\"invalid reference to positional {} ({})\",\n-                        arg_list,\n-                        self.describe_num_args()));\n+                         arg_list,\n+                         self.describe_num_args()));\n             e.note(\"positional arguments are zero-based\");\n         };\n \n@@ -370,7 +379,11 @@ impl<'a, 'b> Context<'a, 'b> {\n                     Some(e) => *e,\n                     None => {\n                         let msg = format!(\"there is no argument named `{}`\", name);\n-                        let sp = *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp);\n+                        let sp = if self.is_literal {\n+                            *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp)\n+                        } else {\n+                            self.fmtsp\n+                        };\n                         let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n                         err.emit();\n                         return;\n@@ -721,7 +734,7 @@ pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt,\n \n pub fn expand_format_args_nl<'cx>(\n     ecx: &'cx mut ExtCtxt,\n-                                  mut sp: Span,\n+    mut sp: Span,\n     tts: &[tokenstream::TokenTree],\n ) -> Box<dyn base::MacResult + 'cx> {\n     //if !ecx.ecfg.enable_allow_internal_unstable() {\n@@ -784,6 +797,10 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n             return DummyResult::raw_expr(sp);\n         }\n     };\n+    let is_literal = match ecx.codemap().span_to_snippet(fmt_sp) {\n+        Ok(ref s) if s.starts_with(\"\\\"\") || s.starts_with(\"r#\") => true,\n+        _ => false,\n+    };\n \n     let mut cx = Context {\n         ecx,\n@@ -806,6 +823,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt,\n         fmtsp: fmt.span,\n         invalid_refs: Vec::new(),\n         arg_spans: Vec::new(),\n+        is_literal,\n     };\n \n     let fmt_str = &*fmt.node.0.as_str();"}, {"sha": "8f2eb0173a499459abdbbfc44787b41b123eff07", "filename": "src/test/ui/macros/macro-backtrace-println.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c55a698943c515c8028522360e42b12bbf4fb274/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c55a698943c515c8028522360e42b12bbf4fb274/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr?ref=c55a698943c515c8028522360e42b12bbf4fb274", "patch": "@@ -1,8 +1,8 @@\n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-backtrace-println.rs:24:31\n+  --> $DIR/macro-backtrace-println.rs:24:30\n    |\n LL |     ($fmt:expr) => (myprint!(concat!($fmt, \"/n\"))); //~ ERROR no arguments were given\n-   |                               ^^\n+   |                              ^^^^^^^^^^^^^^^^^^^\n ...\n LL |     myprintln!(\"{}\");\n    |     ----------------- in this macro invocation"}]}