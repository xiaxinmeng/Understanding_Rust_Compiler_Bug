{"sha": "64fcf3b1a6a75e6cc1438589dbd8594c5c799b74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZmNmM2IxYTZhNzVlNmNjMTQzODU4OWRiZDg1OTRjNWM3OTliNzQ=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-23T12:38:42Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-08-23T12:38:42Z"}, "message": "Omit lifetime intrinsics for zero-sized types\n\nThese aren't super common, but happen for e.g. closures that have an\nempty environment, and for for-loops that return ().", "tree": {"sha": "daa768e46c21e3a638583690f89cfa9caa9ec7ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa768e46c21e3a638583690f89cfa9caa9ec7ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64fcf3b1a6a75e6cc1438589dbd8594c5c799b74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64fcf3b1a6a75e6cc1438589dbd8594c5c799b74", "html_url": "https://github.com/rust-lang/rust/commit/64fcf3b1a6a75e6cc1438589dbd8594c5c799b74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64fcf3b1a6a75e6cc1438589dbd8594c5c799b74/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2375743037fdfcb624917ebf87d8d9a142c3e395", "url": "https://api.github.com/repos/rust-lang/rust/commits/2375743037fdfcb624917ebf87d8d9a142c3e395", "html_url": "https://github.com/rust-lang/rust/commit/2375743037fdfcb624917ebf87d8d9a142c3e395"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "3c49b638007375fd7de163cbbdfca249647fbacb", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/64fcf3b1a6a75e6cc1438589dbd8594c5c799b74/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fcf3b1a6a75e6cc1438589dbd8594c5c799b74/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=64fcf3b1a6a75e6cc1438589dbd8594c5c799b74", "patch": "@@ -917,10 +917,14 @@ pub fn call_lifetime_start(cx: Block, ptr: ValueRef) {\n     let _icx = push_ctxt(\"lifetime_start\");\n     let ccx = cx.ccx();\n \n-    let llsize = C_u64(ccx, machine::llsize_of_alloc(ccx, val_ty(ptr).element_type()));\n+    let size = machine::llsize_of_alloc(ccx, val_ty(ptr).element_type());\n+    if size == 0 {\n+        return;\n+    }\n+\n     let ptr = PointerCast(cx, ptr, Type::i8p(ccx));\n     let lifetime_start = ccx.get_intrinsic(&\"llvm.lifetime.start\");\n-    Call(cx, lifetime_start, &[llsize, ptr], None, DebugLoc::None);\n+    Call(cx, lifetime_start, &[C_u64(ccx, size), ptr], None, DebugLoc::None);\n }\n \n pub fn call_lifetime_end(cx: Block, ptr: ValueRef) {\n@@ -931,10 +935,14 @@ pub fn call_lifetime_end(cx: Block, ptr: ValueRef) {\n     let _icx = push_ctxt(\"lifetime_end\");\n     let ccx = cx.ccx();\n \n-    let llsize = C_u64(ccx, machine::llsize_of_alloc(ccx, val_ty(ptr).element_type()));\n+    let size = machine::llsize_of_alloc(ccx, val_ty(ptr).element_type());\n+    if size == 0 {\n+        return;\n+    }\n+\n     let ptr = PointerCast(cx, ptr, Type::i8p(ccx));\n     let lifetime_end = ccx.get_intrinsic(&\"llvm.lifetime.end\");\n-    Call(cx, lifetime_end, &[llsize, ptr], None, DebugLoc::None);\n+    Call(cx, lifetime_end, &[C_u64(ccx, size), ptr], None, DebugLoc::None);\n }\n \n pub fn call_memcpy(cx: Block, dst: ValueRef, src: ValueRef, n_bytes: ValueRef, align: u32) {"}]}