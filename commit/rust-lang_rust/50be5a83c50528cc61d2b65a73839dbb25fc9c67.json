{"sha": "50be5a83c50528cc61d2b65a73839dbb25fc9c67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYmU1YTgzYzUwNTI4Y2M2MWQyYjY1YTczODM5ZGJiMjVmYzljNjc=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-01T14:18:55Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-01T14:28:48Z"}, "message": "Remove return argument when fd is not found", "tree": {"sha": "2c182f26c4ea86ab13e2867f038965d100ecb230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c182f26c4ea86ab13e2867f038965d100ecb230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50be5a83c50528cc61d2b65a73839dbb25fc9c67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50be5a83c50528cc61d2b65a73839dbb25fc9c67", "html_url": "https://github.com/rust-lang/rust/commit/50be5a83c50528cc61d2b65a73839dbb25fc9c67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50be5a83c50528cc61d2b65a73839dbb25fc9c67/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "644467c570314097f626868320bb4a9b2f769fc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/644467c570314097f626868320bb4a9b2f769fc7", "html_url": "https://github.com/rust-lang/rust/commit/644467c570314097f626868320bb4a9b2f769fc7"}], "stats": {"total": 27, "additions": 12, "deletions": 15}, "files": [{"sha": "c91d3a07726ede7f09d27c34f59b6c43640fc38d", "filename": "src/shims/io.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/50be5a83c50528cc61d2b65a73839dbb25fc9c67/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50be5a83c50528cc61d2b65a73839dbb25fc9c67/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=50be5a83c50528cc61d2b65a73839dbb25fc9c67", "patch": "@@ -50,16 +50,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             .memory()\n             .read_c_str(this.read_scalar(path_op)?.not_undef()?)?;\n         let path = std::str::from_utf8(path_bytes)\n-            .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", path_bytes))?\n-            .to_owned();\n-        let fd = File::open(&path).map(|file| {\n+            .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", path_bytes))?;\n+        let fd = File::open(path).map(|file| {\n             let mut fh = &mut this.machine.file_handler;\n             fh.low += 1;\n             fh.handles.insert(fh.low, FileHandle { file, flag });\n             fh.low\n         });\n \n-        this.consume_result::<i32>(fd, -1)\n+        this.consume_result(fd)\n     }\n \n     fn fcntl(\n@@ -94,7 +93,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             Ok(0)\n         } else if cmd == this.eval_libc_i32(\"F_GETFD\")? {\n-            this.get_handle_and(fd, |handle| Ok(handle.flag), -1)\n+            this.get_handle_and(fd, |handle| Ok(handle.flag))\n         } else {\n             throw_unsup_format!(\"Unsupported command {:#x}\", cmd);\n         }\n@@ -111,8 +110,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         this.remove_handle_and(\n             fd,\n-            |handle, this| this.consume_result::<i32>(handle.file.sync_all().map(|_| 0), -1),\n-            -1,\n+            |handle, this| this.consume_result(handle.file.sync_all().map(|_| 0i32)),\n         )\n     }\n \n@@ -148,13 +146,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .map(|bytes| bytes as i64);\n                 // Reinsert the file handle\n                 this.machine.file_handler.handles.insert(fd, handle);\n-                this.consume_result::<i64>(bytes, -1)\n+                this.consume_result(bytes)\n             },\n-            -1,\n         )\n     }\n \n-    fn get_handle_and<F, T>(&mut self, fd: i32, f: F, t: T) -> InterpResult<'tcx, T>\n+    fn get_handle_and<F, T: From<i32>>(&mut self, fd: i32, f: F) -> InterpResult<'tcx, T>\n     where\n         F: Fn(&FileHandle) -> InterpResult<'tcx, T>,\n     {\n@@ -163,11 +160,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             f(handle)\n         } else {\n             this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n-            Ok(t)\n+            Ok((-1).into())\n         }\n     }\n \n-    fn remove_handle_and<F, T>(&mut self, fd: i32, mut f: F, t: T) -> InterpResult<'tcx, T>\n+    fn remove_handle_and<F, T: From<i32>>(&mut self, fd: i32, mut f: F) -> InterpResult<'tcx, T>\n     where\n         F: FnMut(FileHandle, &mut MiriEvalContext<'mir, 'tcx>) -> InterpResult<'tcx, T>,\n     {\n@@ -176,16 +173,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             f(handle, this)\n         } else {\n             this.machine.last_error = this.eval_libc_i32(\"EBADF\")? as u32;\n-            Ok(t)\n+            Ok((-1).into())\n         }\n     }\n \n-    fn consume_result<T>(&mut self, result: std::io::Result<T>, t: T) -> InterpResult<'tcx, T> {\n+    fn consume_result<T: From<i32>>(&mut self, result: std::io::Result<T>) -> InterpResult<'tcx, T> {\n         match result {\n             Ok(ok) => Ok(ok),\n             Err(e) => {\n                 self.eval_context_mut().machine.last_error = e.raw_os_error().unwrap() as u32;\n-                Ok(t)\n+                Ok((-1).into())\n             }\n         }\n     }"}]}