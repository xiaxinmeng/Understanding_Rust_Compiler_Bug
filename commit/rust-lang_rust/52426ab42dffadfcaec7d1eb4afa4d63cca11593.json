{"sha": "52426ab42dffadfcaec7d1eb4afa4d63cca11593", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNDI2YWI0MmRmZmFkZmNhZWM3ZDFlYjRhZmE0ZDYzY2NhMTE1OTM=", "commit": {"author": {"name": "cad97", "email": "cad97@cad97.com", "date": "2019-11-25T02:09:37Z"}, "committer": {"name": "cad97", "email": "cad97@cad97.com", "date": "2019-11-30T03:49:39Z"}, "message": "Use recursion_limit for const eval stack limit", "tree": {"sha": "5ab3ff3af2ad6017c1fbfa2cc40ee8a0494e6191", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ab3ff3af2ad6017c1fbfa2cc40ee8a0494e6191"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52426ab42dffadfcaec7d1eb4afa4d63cca11593", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEmUwn3EfMuUCMTZdmXaDxJC0iucgFAl3h5tMACgkQXaDxJC0i\nucjH8wf/RQrrbXLaNtWoV97xzkx8x14kaRIN/mykETsfIwxoWQ4WD88yElG7C1AD\nEOU4K8dIVc2aScHI3RJ0ucdDqjzoi6u7lfBP6vgmIvgI0+tkIS0Tr+wtuCKKy5oZ\nK2PJdvJOFnxlQC9hSt14MuRo22GQcMFNuJ9Qbbp14WYUOEehLxRC/5iaLsE/wNqP\np1hMpHF77YZQjUKkD4XtX7ttX/fPitKrid5kgN9qXFtZu0rsWGCp490jfx4UOB63\nKwy3OL+fSUmTgaOkjz7P2z9+kHu5woJNvjGr0LZBw8QUOoDrMR8lrVeFY5GchKJr\n4YUTxRAn0SZbZlZYVBp7OTWf9P9aCw==\n=RCjm\n-----END PGP SIGNATURE-----", "payload": "tree 5ab3ff3af2ad6017c1fbfa2cc40ee8a0494e6191\nparent 9081929d45f12d3f56d43b1d6db7519981580fc9\nauthor cad97 <cad97@cad97.com> 1574647777 -0500\ncommitter cad97 <cad97@cad97.com> 1575085779 -0500\n\nUse recursion_limit for const eval stack limit\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52426ab42dffadfcaec7d1eb4afa4d63cca11593", "html_url": "https://github.com/rust-lang/rust/commit/52426ab42dffadfcaec7d1eb4afa4d63cca11593", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52426ab42dffadfcaec7d1eb4afa4d63cca11593/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9081929d45f12d3f56d43b1d6db7519981580fc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9081929d45f12d3f56d43b1d6db7519981580fc9", "html_url": "https://github.com/rust-lang/rust/commit/9081929d45f12d3f56d43b1d6db7519981580fc9"}], "stats": {"total": 6, "additions": 1, "deletions": 5}, "files": [{"sha": "c6c5f3b68df6df513c37f6ae3d15a6fdf8cefc18", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52426ab42dffadfcaec7d1eb4afa4d63cca11593/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52426ab42dffadfcaec7d1eb4afa4d63cca11593/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=52426ab42dffadfcaec7d1eb4afa4d63cca11593", "patch": "@@ -95,9 +95,6 @@ pub struct Session {\n     /// The maximum length of types during monomorphization.\n     pub type_length_limit: Once<usize>,\n \n-    /// The maximum number of stackframes allowed in const eval.\n-    pub const_eval_stack_frame_limit: usize,\n-\n     /// Map from imported macro spans (which consist of\n     /// the localized span for the macro body) to the\n     /// macro name and definition span in the source crate.\n@@ -1159,7 +1156,6 @@ fn build_session_(\n         features: Once::new(),\n         recursion_limit: Once::new(),\n         type_length_limit: Once::new(),\n-        const_eval_stack_frame_limit: 100,\n         imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n         cgu_reuse_tracker,"}, {"sha": "228e5cad4e367091f1ec8f6026762fbfb36bf158", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52426ab42dffadfcaec7d1eb4afa4d63cca11593/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52426ab42dffadfcaec7d1eb4afa4d63cca11593/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=52426ab42dffadfcaec7d1eb4afa4d63cca11593", "patch": "@@ -548,7 +548,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         info!(\"ENTERING({}) {}\", self.cur_frame(), self.frame().instance);\n \n-        if self.stack.len() > self.tcx.sess.const_eval_stack_frame_limit {\n+        if self.stack.len() > *self.tcx.sess.recursion_limit.get() {\n             throw_exhaust!(StackFrameLimitReached)\n         } else {\n             Ok(())"}]}