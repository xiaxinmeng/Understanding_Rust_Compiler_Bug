{"sha": "774e814b9523ee4b7cc96bac0735f185358449e5", "node_id": "C_kwDOAAsO6NoAKDc3NGU4MTRiOTUyM2VlNGI3Y2M5NmJhYzA3MzVmMTg1MzU4NDQ5ZTU", "commit": {"author": {"name": "tnballo", "email": "tnballo@users.noreply.github.com", "date": "2022-06-23T23:12:24Z"}, "committer": {"name": "tnballo", "email": "tnballo@users.noreply.github.com", "date": "2022-06-23T23:12:24Z"}, "message": "Fix BTreeSet's range API panic message, document", "tree": {"sha": "e200b1d1cb0608dcf3fc7cba3a11e15a042661fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e200b1d1cb0608dcf3fc7cba3a11e15a042661fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/774e814b9523ee4b7cc96bac0735f185358449e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEXmS2QrprGTS+f5a9UOxjdVlAu6QFAmK082gACgkQUOxjdVlA\nu6RM4hAAmo5evQVZcG1YrCS4GG69LiVsOkCEwmsCaPSY/G4lwrFT5769nKxVsFyy\nTqpd8TQtFSTtNdK/7sUV2gk4ud0cHtRC/kb2XtrLxgtu6FKsZ5blPCOUUD+fNPkU\nv+0rquKwUKdYaf3Eo63PBs5QCDmnK/rxGRv0WZupHd/J0svYVYlflmQFxY5Sy0eC\nHl5Ms0w3NjZfG1ivswiGx+oh3FGOq9kymRam6Sd+jNriLyKJhlYfgLKC93PkJjvZ\nnjf0ShdGMk6SEzt12y84XnQLDYwPDOQ9NgUg0tK4JnaD7qZQtmZufkyLODrZ8I/G\nNPnNUU42rroOh18sebnUDOPwB1tpZPSyJfUXg6hmYNslmx9RWVXxk7x4YMd0Tflm\nqIOrtdXjLjnrLNCLi004SHkaf+y231AuI2cWne6Al8H9qb8LZWtxJ0XBKpg+lF+y\nSE/iCEGXzjxdaLLEixt7Uh1nB8XxF19vHoj2zyRGNvm/qaXjuvr3YayhWEhtHocY\neznw6UDTQvquegGOv5XE4kBcjK6PeYGde05Dm5slUcOuoFWyfWvGyAYXav1I4Ma6\nQz61k4H8oVp6vUweExsU8BEIW6I849AWcOyaQSO3fuFkQnSZPTXyQcnCSfqpwBNt\n622QytMjTZ1jpHMGUMJSEoJTBv06tp+47sgjc6eU3Q+YRmEZzjU=\n=3jT1\n-----END PGP SIGNATURE-----", "payload": "tree e200b1d1cb0608dcf3fc7cba3a11e15a042661fb\nparent 43347397f7c5ca9a670a3bb3890c7187e24a52ab\nauthor tnballo <tnballo@users.noreply.github.com> 1656025944 -0400\ncommitter tnballo <tnballo@users.noreply.github.com> 1656025944 -0400\n\nFix BTreeSet's range API panic message, document\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/774e814b9523ee4b7cc96bac0735f185358449e5", "html_url": "https://github.com/rust-lang/rust/commit/774e814b9523ee4b7cc96bac0735f185358449e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/774e814b9523ee4b7cc96bac0735f185358449e5/comments", "author": {"login": "tnballo", "id": 24994892, "node_id": "MDQ6VXNlcjI0OTk0ODky", "avatar_url": "https://avatars.githubusercontent.com/u/24994892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnballo", "html_url": "https://github.com/tnballo", "followers_url": "https://api.github.com/users/tnballo/followers", "following_url": "https://api.github.com/users/tnballo/following{/other_user}", "gists_url": "https://api.github.com/users/tnballo/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnballo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnballo/subscriptions", "organizations_url": "https://api.github.com/users/tnballo/orgs", "repos_url": "https://api.github.com/users/tnballo/repos", "events_url": "https://api.github.com/users/tnballo/events{/privacy}", "received_events_url": "https://api.github.com/users/tnballo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnballo", "id": 24994892, "node_id": "MDQ6VXNlcjI0OTk0ODky", "avatar_url": "https://avatars.githubusercontent.com/u/24994892?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnballo", "html_url": "https://github.com/tnballo", "followers_url": "https://api.github.com/users/tnballo/followers", "following_url": "https://api.github.com/users/tnballo/following{/other_user}", "gists_url": "https://api.github.com/users/tnballo/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnballo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnballo/subscriptions", "organizations_url": "https://api.github.com/users/tnballo/orgs", "repos_url": "https://api.github.com/users/tnballo/repos", "events_url": "https://api.github.com/users/tnballo/events{/privacy}", "received_events_url": "https://api.github.com/users/tnballo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43347397f7c5ca9a670a3bb3890c7187e24a52ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/43347397f7c5ca9a670a3bb3890c7187e24a52ab", "html_url": "https://github.com/rust-lang/rust/commit/43347397f7c5ca9a670a3bb3890c7187e24a52ab"}], "stats": {"total": 130, "additions": 117, "deletions": 13}, "files": [{"sha": "0bddd7a9906994e2f1316281b6df92137782a36e", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=774e814b9523ee4b7cc96bac0735f185358449e5", "patch": "@@ -16,6 +16,7 @@ use super::dedup_sorted_iter::DedupSortedIter;\n use super::navigate::{LazyLeafRange, LeafRange};\n use super::node::{self, marker, ForceResult::*, Handle, NodeRef, Root};\n use super::search::SearchResult::*;\n+use super::set_val::SetValZST;\n \n mod entry;\n \n@@ -271,7 +272,7 @@ impl<K: Clone, V: Clone, A: Allocator + Clone> Clone for BTreeMap<K, V, A> {\n     }\n }\n \n-impl<K, Q: ?Sized, A: Allocator + Clone> super::Recover<Q> for BTreeMap<K, (), A>\n+impl<K, Q: ?Sized, A: Allocator + Clone> super::Recover<Q> for BTreeMap<K, SetValZST, A>\n where\n     K: Borrow<Q> + Ord,\n     Q: Ord,\n@@ -318,7 +319,7 @@ where\n                     alloc: (*map.alloc).clone(),\n                     _marker: PhantomData,\n                 }\n-                .insert(());\n+                .insert(SetValZST::default());\n                 None\n             }\n         }"}, {"sha": "4c372b1d60ac4f8fa7b693b6097bef19ef706985", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=774e814b9523ee4b7cc96bac0735f185358449e5", "patch": "@@ -897,6 +897,39 @@ fn test_range_mut() {\n     map.check();\n }\n \n+#[should_panic(expected = \"range start is greater than range end in BTreeMap\")]\n+#[test]\n+fn test_range_panic_1() {\n+    let mut map = BTreeMap::new();\n+    map.insert(3, \"a\");\n+    map.insert(5, \"b\");\n+    map.insert(8, \"c\");\n+\n+    let _invalid_range = map.range((Included(&8), Included(&3)));\n+}\n+\n+#[should_panic(expected = \"range start and end are equal and excluded in BTreeMap\")]\n+#[test]\n+fn test_range_panic_2() {\n+    let mut map = BTreeMap::new();\n+    map.insert(3, \"a\");\n+    map.insert(5, \"b\");\n+    map.insert(8, \"c\");\n+\n+    let _invalid_range = map.range((Excluded(&5), Excluded(&5)));\n+}\n+\n+#[should_panic(expected = \"range start and end are equal and excluded in BTreeMap\")]\n+#[test]\n+fn test_range_panic_3() {\n+    let mut map: BTreeMap<i32, ()> = BTreeMap::new();\n+    map.insert(3, ());\n+    map.insert(5, ());\n+    map.insert(8, ());\n+\n+    let _invalid_range = map.range((Excluded(&5), Excluded(&5)));\n+}\n+\n #[test]\n fn test_retain() {\n     let mut map = BTreeMap::from_iter((0..100).map(|x| (x, x * 10)));"}, {"sha": "9d43ac5c5be5992599fa815d4c9cf6d98c78f9c0", "filename": "library/alloc/src/collections/btree/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmod.rs?ref=774e814b9523ee4b7cc96bac0735f185358449e5", "patch": "@@ -10,6 +10,7 @@ mod node;\n mod remove;\n mod search;\n pub mod set;\n+mod set_val;\n mod split;\n \n #[doc(hidden)]"}, {"sha": "ad3522b4e0418bf69e3dfaf24af7fe6d49d99dcb", "filename": "library/alloc/src/collections/btree/search.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsearch.rs?ref=774e814b9523ee4b7cc96bac0735f185358449e5", "patch": "@@ -97,17 +97,28 @@ impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Lea\n         K: Borrow<Q>,\n         R: RangeBounds<Q>,\n     {\n+        // Determine if map or set is being searched\n+        let is_set = <V as super::set_val::IsSetVal>::is_set_val();\n+\n         // Inlining these variables should be avoided. We assume the bounds reported by `range`\n         // remain the same, but an adversarial implementation could change between calls (#81138).\n         let (start, end) = (range.start_bound(), range.end_bound());\n         match (start, end) {\n             (Bound::Excluded(s), Bound::Excluded(e)) if s == e => {\n-                panic!(\"range start and end are equal and excluded in BTreeMap\")\n+                if is_set {\n+                    panic!(\"range start and end are equal and excluded in BTreeSet\")\n+                } else {\n+                    panic!(\"range start and end are equal and excluded in BTreeMap\")\n+                }\n             }\n             (Bound::Included(s) | Bound::Excluded(s), Bound::Included(e) | Bound::Excluded(e))\n                 if s > e =>\n             {\n-                panic!(\"range start is greater than range end in BTreeMap\")\n+                if is_set {\n+                    panic!(\"range start is greater than range end in BTreeSet\")\n+                } else {\n+                    panic!(\"range start is greater than range end in BTreeMap\")\n+                }\n             }\n             _ => {}\n         }"}, {"sha": "2cfc0807409211e4ad56371bf30568a22085e256", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=774e814b9523ee4b7cc96bac0735f185358449e5", "patch": "@@ -13,6 +13,7 @@ use core::ops::{BitAnd, BitOr, BitXor, RangeBounds, Sub};\n \n use super::map::{BTreeMap, Keys};\n use super::merge_iter::MergeIterInner;\n+use super::set_val::SetValZST;\n use super::Recover;\n \n use crate::alloc::{Allocator, Global};\n@@ -81,7 +82,7 @@ pub struct BTreeSet<\n     T,\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator + Clone = Global,\n > {\n-    map: BTreeMap<T, (), A>,\n+    map: BTreeMap<T, SetValZST, A>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -135,7 +136,7 @@ impl<T: Clone, A: Allocator + Clone> Clone for BTreeSet<T, A> {\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n-    iter: Keys<'a, T, ()>,\n+    iter: Keys<'a, T, SetValZST>,\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n@@ -158,7 +159,7 @@ pub struct IntoIter<\n     T,\n     #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator + Clone = Global,\n > {\n-    iter: super::map::IntoIter<T, (), A>,\n+    iter: super::map::IntoIter<T, SetValZST, A>,\n }\n \n /// An iterator over a sub-range of items in a `BTreeSet`.\n@@ -171,7 +172,7 @@ pub struct IntoIter<\n #[derive(Debug)]\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, T: 'a> {\n-    iter: super::map::Range<'a, T, ()>,\n+    iter: super::map::Range<'a, T, SetValZST>,\n }\n \n /// A lazy iterator producing elements in the difference of `BTreeSet`s.\n@@ -375,6 +376,11 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\n     /// range from 4 to 10.\n     ///\n+    /// # Panics\n+    ///\n+    /// Panics if range `start > end`.\n+    /// Panics if range `start == end` and both bounds are `Excluded`.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -905,7 +911,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     where\n         T: Ord,\n     {\n-        self.map.insert(value, ()).is_none()\n+        self.map.insert(value, SetValZST::default()).is_none()\n     }\n \n     /// Adds a value to the set, replacing the existing element, if any, that is\n@@ -1210,7 +1216,7 @@ impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n \n impl<T: Ord, A: Allocator + Clone> BTreeSet<T, A> {\n     fn from_sorted_iter<I: Iterator<Item = T>>(iter: I, alloc: A) -> BTreeSet<T, A> {\n-        let iter = iter.map(|k| (k, ()));\n+        let iter = iter.map(|k| (k, SetValZST::default()));\n         let map = BTreeMap::bulk_build_from_sorted_iter(iter, alloc);\n         BTreeSet { map }\n     }\n@@ -1234,7 +1240,7 @@ impl<T: Ord, const N: usize> From<[T; N]> for BTreeSet<T> {\n \n         // use stable sort to preserve the insertion order.\n         arr.sort();\n-        let iter = IntoIterator::into_iter(arr).map(|k| (k, ()));\n+        let iter = IntoIterator::into_iter(arr).map(|k| (k, SetValZST::default()));\n         let map = BTreeMap::bulk_build_from_sorted_iter(iter, Global);\n         BTreeSet { map }\n     }\n@@ -1284,7 +1290,7 @@ pub struct DrainFilter<\n     F: 'a + FnMut(&T) -> bool,\n {\n     pred: F,\n-    inner: super::map::DrainFilterInner<'a, T, ()>,\n+    inner: super::map::DrainFilterInner<'a, T, SetValZST>,\n     /// The BTreeMap will outlive this IntoIter so we don't care about drop order for `alloc`.\n     alloc: A,\n }\n@@ -1319,7 +1325,7 @@ where\n \n     fn next(&mut self) -> Option<T> {\n         let pred = &mut self.pred;\n-        let mut mapped_pred = |k: &T, _v: &mut ()| pred(k);\n+        let mut mapped_pred = |k: &T, _v: &mut SetValZST| pred(k);\n         self.inner.next(&mut mapped_pred, self.alloc.clone()).map(|(k, _)| k)\n     }\n "}, {"sha": "502d3e1d1266754a093d26b9c0852a5c5927c20d", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=774e814b9523ee4b7cc96bac0735f185358449e5", "patch": "@@ -5,6 +5,7 @@ use crate::vec::Vec;\n use std::cmp::Ordering;\n use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n+use std::ops::Bound::{Excluded, Included};\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n #[test]\n@@ -831,3 +832,25 @@ fn from_array() {\n     let unordered_duplicates = BTreeSet::from([4, 1, 4, 3, 2]);\n     assert_eq!(set, unordered_duplicates);\n }\n+\n+#[should_panic(expected = \"range start is greater than range end in BTreeSet\")]\n+#[test]\n+fn test_range_panic_1() {\n+    let mut set = BTreeSet::new();\n+    set.insert(3);\n+    set.insert(5);\n+    set.insert(8);\n+\n+    let _invalid_range = set.range((Included(&8), Included(&3)));\n+}\n+\n+#[should_panic(expected = \"range start and end are equal and excluded in BTreeSet\")]\n+#[test]\n+fn test_range_panic_2() {\n+    let mut set = BTreeSet::new();\n+    set.insert(3);\n+    set.insert(5);\n+    set.insert(8);\n+\n+    let _invalid_range = set.range((Excluded(&5), Excluded(&5)));\n+}"}, {"sha": "80c459bcf81db41471ebf7a6c93279fbffc4c237", "filename": "library/alloc/src/collections/btree/set_val.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/774e814b9523ee4b7cc96bac0735f185358449e5/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset_val.rs?ref=774e814b9523ee4b7cc96bac0735f185358449e5", "patch": "@@ -0,0 +1,29 @@\n+/// Zero-Sized Type (ZST) for internal `BTreeSet` values.\n+/// Used instead of `()` to differentiate between:\n+/// * `BTreeMap<T, ()>` (possible user-defined map)\n+/// * `BTreeMap<T, SetValZST>` (internal set representation)\n+#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Default)]\n+pub struct SetValZST;\n+\n+/// A trait to differentiate between `BTreeMap` and `BTreeSet` values.\n+/// Returns `true` only for type `SetValZST`, `false` for all other types (blanket implementation).\n+/// `TypeId` requires a `'static` lifetime, use of this trait avoids that restriction.\n+///\n+/// [`TypeId`]: std::any::TypeId\n+pub trait IsSetVal {\n+    fn is_set_val() -> bool;\n+}\n+\n+// Blanket implementation\n+impl<V> IsSetVal for V {\n+    default fn is_set_val() -> bool {\n+        false\n+    }\n+}\n+\n+// Specialization\n+impl IsSetVal for SetValZST {\n+    fn is_set_val() -> bool {\n+        true\n+    }\n+}"}]}