{"sha": "ebf4cc361e0d0f11a25b42372bd629953365d17e", "node_id": "C_kwDOAAsO6NoAKGViZjRjYzM2MWUwZDBmMTFhMjViNDIzNzJiZDYyOTk1MzM2NWQxN2U", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-07-20T15:31:15Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-07-20T16:28:30Z"}, "message": "Remove implicit names and values from --cfg in --check-cfg", "tree": {"sha": "afb1d71223a6ff51a48bfcd18f4b11675ef9eb94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afb1d71223a6ff51a48bfcd18f4b11675ef9eb94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebf4cc361e0d0f11a25b42372bd629953365d17e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf4cc361e0d0f11a25b42372bd629953365d17e", "html_url": "https://github.com/rust-lang/rust/commit/ebf4cc361e0d0f11a25b42372bd629953365d17e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebf4cc361e0d0f11a25b42372bd629953365d17e/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d488b48af9f66b91e9400387f781b82411fa82", "url": "https://api.github.com/repos/rust-lang/rust/commits/03d488b48af9f66b91e9400387f781b82411fa82", "html_url": "https://github.com/rust-lang/rust/commit/03d488b48af9f66b91e9400387f781b82411fa82"}], "stats": {"total": 151, "additions": 72, "deletions": 79}, "files": [{"sha": "7a8ca476d79c8f7aa7e3f8136e6dc726ecb2c158", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebf4cc361e0d0f11a25b42372bd629953365d17e/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf4cc361e0d0f11a25b42372bd629953365d17e/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=ebf4cc361e0d0f11a25b42372bd629953365d17e", "patch": "@@ -117,7 +117,6 @@ pub fn create_session(\n \n     let mut check_cfg = config::to_crate_check_config(check_cfg);\n     check_cfg.fill_well_known();\n-    check_cfg.fill_actual(&cfg);\n \n     sess.parse_sess.config = cfg;\n     sess.parse_sess.check_config = check_cfg;"}, {"sha": "4d723273451ea3d362245923e9aba593da8ead33", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ebf4cc361e0d0f11a25b42372bd629953365d17e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf4cc361e0d0f11a25b42372bd629953365d17e/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ebf4cc361e0d0f11a25b42372bd629953365d17e", "patch": "@@ -1157,20 +1157,6 @@ impl CrateCheckConfig {\n         self.fill_well_known_names();\n         self.fill_well_known_values();\n     }\n-\n-    /// Fills a `CrateCheckConfig` with configuration names and values that are actually active.\n-    pub fn fill_actual(&mut self, cfg: &CrateConfig) {\n-        for &(k, v) in cfg {\n-            if let Some(names_valid) = &mut self.names_valid {\n-                names_valid.insert(k);\n-            }\n-            if let Some(v) = v {\n-                self.values_valid.entry(k).and_modify(|values| {\n-                    values.insert(v);\n-                });\n-            }\n-        }\n-    }\n }\n \n pub fn build_configuration(sess: &Session, mut user_cfg: CrateConfig) -> CrateConfig {"}, {"sha": "bfa92e7d32a8eaf1851275a680043049cdc71fff", "filename": "src/doc/unstable-book/src/compiler-flags/check-cfg.md", "status": "modified", "additions": 9, "deletions": 26, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ebf4cc361e0d0f11a25b42372bd629953365d17e/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/ebf4cc361e0d0f11a25b42372bd629953365d17e/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md?ref=ebf4cc361e0d0f11a25b42372bd629953365d17e", "patch": "@@ -18,6 +18,9 @@ check cfg specification is parsed using the Rust metadata syntax, just as the `-\n These two options are independent. `names` checks only the namespace of condition names\n while `values` checks only the namespace of the values of list-valued conditions.\n \n+NOTE: No implicit expectation is added when using `--cfg` for both forms. Users are expected to\n+pass all expected names and values using `names(...)` and `values(...)`.\n+\n ## The `names(...)` form\n \n The `names(...)` form enables checking the names. This form uses a named list:\n@@ -53,27 +56,6 @@ The first form enables checking condition names, while specifying that there are\n condition names (outside of the set of well-known names defined by `rustc`). Omitting the\n `--check-cfg 'names(...)'` option does not enable checking condition names.\n \n-Conditions that are enabled are implicitly valid; it is unnecessary (but legal) to specify a\n-condition name as both enabled and valid. For example, the following invocations are equivalent:\n-\n-```bash\n-# condition names will be checked, and 'has_time_travel' is valid\n-rustc --cfg 'has_time_travel' --check-cfg 'names()'\n-\n-# condition names will be checked, and 'has_time_travel' is valid\n-rustc --cfg 'has_time_travel' --check-cfg 'names(has_time_travel)'\n-```\n-\n-In contrast, the following two invocations are _not_ equivalent:\n-\n-```bash\n-# condition names will not be checked (because there is no --check-cfg names(...))\n-rustc --cfg 'has_time_travel'\n-\n-# condition names will be checked, and 'has_time_travel' is both valid and enabled.\n-rustc --cfg 'has_time_travel' --check-cfg 'names(has_time_travel)'\n-```\n-\n ## The `values(...)` form\n \n The `values(...)` form enables checking the values within list-valued conditions. It has this\n@@ -149,7 +131,7 @@ fn tame_lion() {}\n ```bash\n # This turns on checking for condition names, but not values, such as 'feature' values.\n rustc --check-cfg 'names(is_embedded, has_feathers)' \\\n-      --cfg has_feathers --cfg 'feature = \"zapping\"' -Z unstable-options\n+      --cfg has_feathers -Z unstable-options\n ```\n \n ```rust\n@@ -159,13 +141,14 @@ fn do_embedded() {}\n #[cfg(has_feathers)]        // This is expected as \"has_feathers\" was provided in names()\n fn do_features() {}\n \n+#[cfg(has_feathers = \"zapping\")] // This is expected as \"has_feathers\" was provided in names()\n+                                 // and because no value checking was enable for \"has_feathers\"\n+                                 // no warning is emited for the value \"zapping\"\n+fn do_zapping() {}\n+\n #[cfg(has_mumble_frotz)]    // This is UNEXPECTED because names checking is enable and\n                             // \"has_mumble_frotz\" was not provided in names()\n fn do_mumble_frotz() {}\n-\n-#[cfg(feature = \"lasers\")]  // This doesn't raise a warning, because values checking for \"feature\"\n-                            // was never used\n-fn shoot_lasers() {}\n ```\n \n ### Example: Checking feature values, but not condition names"}, {"sha": "9e428d367fdf431cf5f91abea7f75f00bc033b67", "filename": "src/test/ui/check-cfg/invalid-cfg-value.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebf4cc361e0d0f11a25b42372bd629953365d17e/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf4cc361e0d0f11a25b42372bd629953365d17e/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.rs?ref=ebf4cc361e0d0f11a25b42372bd629953365d17e", "patch": "@@ -12,6 +12,7 @@ pub fn f() {}\n pub fn g() {}\n \n #[cfg(feature = \"rand\")]\n+//~^ WARNING unexpected `cfg` condition value\n pub fn h() {}\n \n pub fn main() {}"}, {"sha": "6cce31d339286babadec43ef7dddd93094fb31cb", "filename": "src/test/ui/check-cfg/invalid-cfg-value.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebf4cc361e0d0f11a25b42372bd629953365d17e/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebf4cc361e0d0f11a25b42372bd629953365d17e/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr?ref=ebf4cc361e0d0f11a25b42372bd629953365d17e", "patch": "@@ -5,7 +5,15 @@ LL | #[cfg(feature = \"sedre\")]\n    |       ^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n-   = note: expected values for `feature` are: full, rand, serde\n+   = note: expected values for `feature` are: full, serde\n \n-warning: 1 warning emitted\n+warning: unexpected `cfg` condition value\n+  --> $DIR/invalid-cfg-value.rs:14:7\n+   |\n+LL | #[cfg(feature = \"rand\")]\n+   |       ^^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: full, serde\n+\n+warning: 2 warnings emitted\n "}, {"sha": "8e3d20d50458fb4a39ed6b305b190d0d65ba12ca", "filename": "src/test/ui/check-cfg/mix.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebf4cc361e0d0f11a25b42372bd629953365d17e/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf4cc361e0d0f11a25b42372bd629953365d17e/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs?ref=ebf4cc361e0d0f11a25b42372bd629953365d17e", "patch": "@@ -1,6 +1,6 @@\n-// This test checks the combination of well known names, their activation via names(), the usage of\n-// partial values() with a --cfg and test that we also correctly lint on the `cfg!` macro and\n-// `cfg_attr` attribute.\n+// This test checks the combination of well known names, their activation via names(),\n+// the usage of values(), and that no implicit is done with --cfg while also testing that\n+// we correctly lint on the `cfg!` macro and `cfg_attr` attribute.\n //\n // check-pass\n // compile-flags: --check-cfg=names() --check-cfg=values(feature,\"foo\") --cfg feature=\"bar\" -Z unstable-options\n@@ -16,6 +16,7 @@ fn do_windows_stuff() {}\n fn use_foo() {}\n \n #[cfg(feature = \"bar\")]\n+//~^ WARNING unexpected `cfg` condition value\n fn use_bar() {}\n \n #[cfg(feature = \"zebra\")]\n@@ -35,6 +36,7 @@ fn test_cfg_macro() {\n     //~^ WARNING unexpected `cfg` condition name\n     cfg!(feature = \"foo\");\n     cfg!(feature = \"bar\");\n+    //~^ WARNING unexpected `cfg` condition value\n     cfg!(feature = \"zebra\");\n     //~^ WARNING unexpected `cfg` condition value\n     cfg!(xxx = \"foo\");"}, {"sha": "e51b75b3d4358a1f8c0059d2885a15c27e8cc5fb", "filename": "src/test/ui/check-cfg/mix.stderr", "status": "modified", "additions": 47, "deletions": 33, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ebf4cc361e0d0f11a25b42372bd629953365d17e/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebf4cc361e0d0f11a25b42372bd629953365d17e/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr?ref=ebf4cc361e0d0f11a25b42372bd629953365d17e", "patch": "@@ -7,154 +7,168 @@ LL | #[cfg(widnows)]\n    = note: `#[warn(unexpected_cfgs)]` on by default\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:21:7\n+  --> $DIR/mix.rs:18:7\n+   |\n+LL | #[cfg(feature = \"bar\")]\n+   |       ^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: foo\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:22:7\n    |\n LL | #[cfg(feature = \"zebra\")]\n    |       ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: bar, foo\n+   = note: expected values for `feature` are: foo\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:25:12\n+  --> $DIR/mix.rs:26:12\n    |\n LL | #[cfg_attr(uu, test)]\n    |            ^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:34:10\n+  --> $DIR/mix.rs:35:10\n    |\n LL |     cfg!(widnows);\n    |          ^^^^^^^ help: did you mean: `windows`\n \n warning: unexpected `cfg` condition value\n   --> $DIR/mix.rs:38:10\n    |\n+LL |     cfg!(feature = \"bar\");\n+   |          ^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: foo\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:40:10\n+   |\n LL |     cfg!(feature = \"zebra\");\n    |          ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: bar, foo\n+   = note: expected values for `feature` are: foo\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:40:10\n+  --> $DIR/mix.rs:42:10\n    |\n LL |     cfg!(xxx = \"foo\");\n    |          ^^^^^^^^^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:42:10\n+  --> $DIR/mix.rs:44:10\n    |\n LL |     cfg!(xxx);\n    |          ^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:44:14\n+  --> $DIR/mix.rs:46:14\n    |\n LL |     cfg!(any(xxx, windows));\n    |              ^^^\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:46:14\n+  --> $DIR/mix.rs:48:14\n    |\n LL |     cfg!(any(feature = \"bad\", windows));\n-   |              ^^^^^^^^^^-----\n-   |                        |\n-   |                        help: did you mean: `\"bar\"`\n+   |              ^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: bar, foo\n+   = note: expected values for `feature` are: foo\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:48:23\n+  --> $DIR/mix.rs:50:23\n    |\n LL |     cfg!(any(windows, xxx));\n    |                       ^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:50:20\n+  --> $DIR/mix.rs:52:20\n    |\n LL |     cfg!(all(unix, xxx));\n    |                    ^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:52:14\n+  --> $DIR/mix.rs:54:14\n    |\n LL |     cfg!(all(aa, bb));\n    |              ^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:52:18\n+  --> $DIR/mix.rs:54:18\n    |\n LL |     cfg!(all(aa, bb));\n    |                  ^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:55:14\n+  --> $DIR/mix.rs:57:14\n    |\n LL |     cfg!(any(aa, bb));\n    |              ^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:55:18\n+  --> $DIR/mix.rs:57:18\n    |\n LL |     cfg!(any(aa, bb));\n    |                  ^^\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:58:20\n+  --> $DIR/mix.rs:60:20\n    |\n LL |     cfg!(any(unix, feature = \"zebra\"));\n    |                    ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: bar, foo\n+   = note: expected values for `feature` are: foo\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:60:14\n+  --> $DIR/mix.rs:62:14\n    |\n LL |     cfg!(any(xxx, feature = \"zebra\"));\n    |              ^^^\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:60:19\n+  --> $DIR/mix.rs:62:19\n    |\n LL |     cfg!(any(xxx, feature = \"zebra\"));\n    |                   ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: bar, foo\n+   = note: expected values for `feature` are: foo\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:63:14\n+  --> $DIR/mix.rs:65:14\n    |\n LL |     cfg!(any(xxx, unix, xxx));\n    |              ^^^\n \n warning: unexpected `cfg` condition name\n-  --> $DIR/mix.rs:63:25\n+  --> $DIR/mix.rs:65:25\n    |\n LL |     cfg!(any(xxx, unix, xxx));\n    |                         ^^^\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:66:14\n+  --> $DIR/mix.rs:68:14\n    |\n LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n    |              ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: bar, foo\n+   = note: expected values for `feature` are: foo\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:66:33\n+  --> $DIR/mix.rs:68:33\n    |\n LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n    |                                 ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: bar, foo\n+   = note: expected values for `feature` are: foo\n \n warning: unexpected `cfg` condition value\n-  --> $DIR/mix.rs:66:52\n+  --> $DIR/mix.rs:68:52\n    |\n LL |     cfg!(all(feature = \"zebra\", feature = \"zebra\", feature = \"zebra\"));\n    |                                                    ^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected values for `feature` are: bar, foo\n+   = note: expected values for `feature` are: foo\n \n-warning: 23 warnings emitted\n+warning: 25 warnings emitted\n "}]}