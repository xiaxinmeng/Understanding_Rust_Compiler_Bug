{"sha": "cdd5893347bdec20f7da479d1ce469ed69e3922f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZDU4OTMzNDdiZGVjMjBmN2RhNDc5ZDFjZTQ2OWVkNjllMzkyMmY=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2014-05-11T22:58:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-13T02:52:29Z"}, "message": "Cleanup some ugly variable names, now that we have `let`-hygiene.", "tree": {"sha": "c63874f70c035b97833610a73a9939fbb53622f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c63874f70c035b97833610a73a9939fbb53622f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdd5893347bdec20f7da479d1ce469ed69e3922f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd5893347bdec20f7da479d1ce469ed69e3922f", "html_url": "https://github.com/rust-lang/rust/commit/cdd5893347bdec20f7da479d1ce469ed69e3922f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdd5893347bdec20f7da479d1ce469ed69e3922f/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aae5574ea74e672029c17a5598bb2045ec022bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aae5574ea74e672029c17a5598bb2045ec022bd", "html_url": "https://github.com/rust-lang/rust/commit/0aae5574ea74e672029c17a5598bb2045ec022bd"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "2201b08f2ca48fb6e0e2a276d25a69f8a2be4b0c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cdd5893347bdec20f7da479d1ce469ed69e3922f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd5893347bdec20f7da479d1ce469ed69e3922f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cdd5893347bdec20f7da479d1ce469ed69e3922f", "patch": "@@ -139,7 +139,7 @@ macro_rules! maybe_whole_expr (\n                 INTERPOLATED(token::NtPath(ref pt)) => Some((**pt).clone()),\n                 _ => None,\n             };\n-            let ret = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::NtExpr(e)) => {\n                     Some(e)\n                 }\n@@ -149,7 +149,7 @@ macro_rules! maybe_whole_expr (\n                 }\n                 _ => None\n             };\n-            match ret {\n+            match found {\n                 Some(e) => {\n                     $p.bump();\n                     return e;\n@@ -164,13 +164,13 @@ macro_rules! maybe_whole_expr (\n macro_rules! maybe_whole (\n     ($p:expr, $constructor:ident) => (\n         {\n-            let __found__ = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::$constructor(_)) => {\n                     Some(($p).bump_and_get())\n                 }\n                 _ => None\n             };\n-            match __found__ {\n+            match found {\n                 Some(INTERPOLATED(token::$constructor(x))) => {\n                     return x.clone()\n                 }\n@@ -180,13 +180,13 @@ macro_rules! maybe_whole (\n     );\n     (no_clone $p:expr, $constructor:ident) => (\n         {\n-            let __found__ = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::$constructor(_)) => {\n                     Some(($p).bump_and_get())\n                 }\n                 _ => None\n             };\n-            match __found__ {\n+            match found {\n                 Some(INTERPOLATED(token::$constructor(x))) => {\n                     return x\n                 }\n@@ -196,13 +196,13 @@ macro_rules! maybe_whole (\n     );\n     (deref $p:expr, $constructor:ident) => (\n         {\n-            let __found__ = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::$constructor(_)) => {\n                     Some(($p).bump_and_get())\n                 }\n                 _ => None\n             };\n-            match __found__ {\n+            match found {\n                 Some(INTERPOLATED(token::$constructor(x))) => {\n                     return (*x).clone()\n                 }\n@@ -212,13 +212,13 @@ macro_rules! maybe_whole (\n     );\n     (Some $p:expr, $constructor:ident) => (\n         {\n-            let __found__ = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::$constructor(_)) => {\n                     Some(($p).bump_and_get())\n                 }\n                 _ => None\n             };\n-            match __found__ {\n+            match found {\n                 Some(INTERPOLATED(token::$constructor(x))) => {\n                     return Some(x.clone()),\n                 }\n@@ -228,13 +228,13 @@ macro_rules! maybe_whole (\n     );\n     (iovi $p:expr, $constructor:ident) => (\n         {\n-            let __found__ = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::$constructor(_)) => {\n                     Some(($p).bump_and_get())\n                 }\n                 _ => None\n             };\n-            match __found__ {\n+            match found {\n                 Some(INTERPOLATED(token::$constructor(x))) => {\n                     return IoviItem(x.clone())\n                 }\n@@ -244,13 +244,13 @@ macro_rules! maybe_whole (\n     );\n     (pair_empty $p:expr, $constructor:ident) => (\n         {\n-            let __found__ = match ($p).token {\n+            let found = match ($p).token {\n                 INTERPOLATED(token::$constructor(_)) => {\n                     Some(($p).bump_and_get())\n                 }\n                 _ => None\n             };\n-            match __found__ {\n+            match found {\n                 Some(INTERPOLATED(token::$constructor(x))) => {\n                     return (Vec::new(), x)\n                 }"}]}