{"sha": "a0d0060bd72303256e5f3c419a564a4b4eaf957e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZDAwNjBiZDcyMzAzMjU2ZTVmM2M0MTlhNTY0YTRiNGVhZjk1N2U=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-09-01T13:14:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-01T13:14:16Z"}, "message": "Rollup merge of #53850 - csmoe:const_to_alloc, r=RalfJung\n\nNuke the `const_to_allocation` query\n\nCloses https://github.com/rust-lang/rust/issues/53847\nr? @RalfJung\n`./x.py check` works anyway, let's checkout tests from ci.", "tree": {"sha": "2cb05373078fb0b2cdc137d5296412aabd602488", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb05373078fb0b2cdc137d5296412aabd602488"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0d0060bd72303256e5f3c419a564a4b4eaf957e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbipCpCRBK7hj4Ov3rIwAAdHIIAK53kLJ6Nhd7oDtqHVNkDZDA\nGo+V9VbZQbZl+FEr6u8kf7nDOX6DjTX3TExdsTouubL2YKu3nlLIJN9yb8ikzDk9\nOYSLftxPXCFzzTcq0DSPLitXNtg0/aNr+yJtpwnNvJrgXFfG3leH4gvvy9gO4oLU\n9iT2/CQ6TVP5ew7zRnuKEhT+HFdBBShP6bYM9CYPnmWyJ5efJRuMQq2KYAAOKSOU\n0fthoi1Hxbo8ptDjLyidPoe1NQ5dOkb3F48ghKq/qFnjIp0bo8bjXGh45XUnbsfk\nQ9q0UcfnVlZmsVpmOjciuguNHURPmg9Y3aXWBRfiK4DbJqPIdXEHAZ87NY0BXb4=\n=wJvB\n-----END PGP SIGNATURE-----\n", "payload": "tree 2cb05373078fb0b2cdc137d5296412aabd602488\nparent f37081499b22593e7dd238b48e6e6f8c11dd6e44\nparent db7da0e476b943cf9248e2f49329a300ffbb132e\nauthor kennytm <kennytm@gmail.com> 1535807656 +0800\ncommitter GitHub <noreply@github.com> 1535807656 +0800\n\nRollup merge of #53850 - csmoe:const_to_alloc, r=RalfJung\n\nNuke the `const_to_allocation` query\n\nCloses https://github.com/rust-lang/rust/issues/53847\nr? @RalfJung\n`./x.py check` works anyway, let's checkout tests from ci.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d0060bd72303256e5f3c419a564a4b4eaf957e", "html_url": "https://github.com/rust-lang/rust/commit/a0d0060bd72303256e5f3c419a564a4b4eaf957e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0d0060bd72303256e5f3c419a564a4b4eaf957e/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f37081499b22593e7dd238b48e6e6f8c11dd6e44", "url": "https://api.github.com/repos/rust-lang/rust/commits/f37081499b22593e7dd238b48e6e6f8c11dd6e44", "html_url": "https://github.com/rust-lang/rust/commit/f37081499b22593e7dd238b48e6e6f8c11dd6e44"}, {"sha": "db7da0e476b943cf9248e2f49329a300ffbb132e", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7da0e476b943cf9248e2f49329a300ffbb132e", "html_url": "https://github.com/rust-lang/rust/commit/db7da0e476b943cf9248e2f49329a300ffbb132e"}], "stats": {"total": 43, "additions": 15, "deletions": 28}, "files": [{"sha": "dfe0a395ca140678fac359aa24fc6236e0ca3d1e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=a0d0060bd72303256e5f3c419a564a4b4eaf957e", "patch": "@@ -75,7 +75,7 @@ use traits::query::{\n     CanonicalPredicateGoal, CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal,\n };\n use ty::{TyCtxt, FnSig, Instance, InstanceDef,\n-         ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty, self};\n+         ParamEnv, ParamEnvAnd, Predicate, PolyFnSig, PolyTraitRef, Ty};\n use ty::subst::Substs;\n \n // erase!() just makes tokens go away. It's used to specify which macro argument\n@@ -632,7 +632,6 @@ define_dep_nodes!( <'tcx>\n     // queries). Making them anonymous avoids hashing the result, which\n     // may save a bit of time.\n     [anon] EraseRegionsTy { ty: Ty<'tcx> },\n-    [anon] ConstToAllocation { val: &'tcx ty::Const<'tcx> },\n \n     [input] Freevars(DefId),\n     [input] MaybeUnusedTraitImport(DefId),"}, {"sha": "d32580181f8dc65cb25376dd46eef0f622f4acb8", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=a0d0060bd72303256e5f3c419a564a4b4eaf957e", "patch": "@@ -198,12 +198,6 @@ impl<'tcx> QueryDescription<'tcx> for queries::super_predicates_of<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::const_to_allocation<'tcx> {\n-    fn describe(_tcx: TyCtxt, val: &'tcx ty::Const<'tcx>) -> String {\n-        format!(\"converting constant `{:?}` to an allocation\", val)\n-    }\n-}\n-\n impl<'tcx> QueryDescription<'tcx> for queries::erase_regions_ty<'tcx> {\n     fn describe(_tcx: TyCtxt, ty: Ty<'tcx>) -> String {\n         format!(\"erasing regions from `{:?}`\", ty)"}, {"sha": "88f599971c7daeab9a4d5c793c2142e6d87b9554", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=a0d0060bd72303256e5f3c419a564a4b4eaf957e", "patch": "@@ -30,7 +30,7 @@ use middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n use mir::interpret::ConstEvalResult;\n use mir::mono::{CodegenUnit, Stats};\n use mir;\n-use mir::interpret::{GlobalId, Allocation};\n+use mir::interpret::GlobalId;\n use session::{CompileResult, CrateDisambiguator};\n use session::config::OutputFilenames;\n use traits::{self, Vtable};\n@@ -286,11 +286,6 @@ define_queries! { <'tcx>\n         /// other items (such as enum variant explicit discriminants).\n         [] fn const_eval: const_eval_dep_node(ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n             -> ConstEvalResult<'tcx>,\n-\n-        /// Converts a constant value to a constant allocation\n-        [] fn const_to_allocation: const_to_allocation(\n-            &'tcx ty::Const<'tcx>\n-        ) -> &'tcx Allocation,\n     },\n \n     TypeChecking {\n@@ -706,12 +701,6 @@ fn erase_regions_ty<'tcx>(ty: Ty<'tcx>) -> DepConstructor<'tcx> {\n     DepConstructor::EraseRegionsTy { ty }\n }\n \n-fn const_to_allocation<'tcx>(\n-    val: &'tcx ty::Const<'tcx>,\n-) -> DepConstructor<'tcx> {\n-    DepConstructor::ConstToAllocation { val }\n-}\n-\n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n     DepConstructor::TypeParamPredicates {\n         item_id,"}, {"sha": "215fba54499b7e0065f53c78066d565d55191e97", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=a0d0060bd72303256e5f3c419a564a4b4eaf957e", "patch": "@@ -1062,7 +1062,6 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::FulfillObligation |\n         DepKind::VtableMethods |\n         DepKind::EraseRegionsTy |\n-        DepKind::ConstToAllocation |\n         DepKind::NormalizeProjectionTy |\n         DepKind::NormalizeTyAfterErasingRegions |\n         DepKind::ImpliedOutlivesBounds |"}, {"sha": "59bebbb87a7755289ffd46041ffdce433251a61d", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=a0d0060bd72303256e5f3c419a564a4b4eaf957e", "patch": "@@ -22,7 +22,7 @@ use std::ptr;\n \n use rustc::ty::{self, Instance, query::TyCtxtAt};\n use rustc::ty::layout::{self, Align, TargetDataLayout, Size, HasDataLayout};\n-use rustc::mir::interpret::{Pointer, AllocId, Allocation, ScalarMaybeUndef, GlobalId,\n+use rustc::mir::interpret::{Pointer, AllocId, Allocation, ConstValue, ScalarMaybeUndef, GlobalId,\n                             EvalResult, Scalar, EvalErrorKind, AllocType, PointerArithmetic,\n                             truncate};\n pub use rustc::mir::interpret::{write_target_uint, read_target_uint};\n@@ -340,9 +340,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             // no need to report anything, the const_eval call takes care of that for statics\n             assert!(tcx.is_static(def_id).is_some());\n             EvalErrorKind::ReferencedConstant(err).into()\n-        }).map(|val| {\n-            // FIXME We got our static (will be a ByRef), now we make a *copy*?!?\n-            tcx.const_to_allocation(val)\n+        }).map(|const_val| {\n+            if let ConstValue::ByRef(_, allocation, _) = const_val.val {\n+                allocation\n+            } else {\n+                bug!(\"Matching on non-ByRef static\")\n+            }\n         })\n     }\n "}, {"sha": "d5148b09c4ff5a71269b21af961c9933f9c086fe", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=a0d0060bd72303256e5f3c419a564a4b4eaf957e", "patch": "@@ -93,7 +93,6 @@ pub fn provide(providers: &mut Providers) {\n     shim::provide(providers);\n     transform::provide(providers);\n     providers.const_eval = interpret::const_eval_provider;\n-    providers.const_to_allocation = interpret::const_to_allocation_provider;\n     providers.check_match = hair::pattern::check_match;\n }\n "}, {"sha": "7a13d8bdd4bac2508bb79d46b050b383d9165873", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d0060bd72303256e5f3c419a564a4b4eaf957e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a0d0060bd72303256e5f3c419a564a4b4eaf957e", "patch": "@@ -94,7 +94,7 @@ use rustc::infer::{self, InferCtxt, InferOk, RegionVariableOrigin};\n use rustc::infer::anon_types::AnonTypeDecl;\n use rustc::infer::type_variable::{TypeVariableOrigin};\n use rustc::middle::region;\n-use rustc::mir::interpret::{GlobalId};\n+use rustc::mir::interpret::{ConstValue, GlobalId};\n use rustc::ty::subst::{CanonicalSubsts, UnpackedKind, Subst, Substs};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, TraitEngine};\n use rustc::ty::{self, Ty, TyCtxt, GenericParamDefKind, Visibility, ToPredicate, RegionKind};\n@@ -1375,7 +1375,11 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt, id: DefId, span: Span) {\n     };\n     let param_env = ty::ParamEnv::reveal_all();\n     if let Ok(static_) = tcx.const_eval(param_env.and(cid)) {\n-        let alloc = tcx.const_to_allocation(static_);\n+        let alloc = if let ConstValue::ByRef(_, allocation, _) = static_.val {\n+            allocation\n+        } else {\n+            bug!(\"Matching on non-ByRef static\")\n+        };\n         if alloc.relocations.len() != 0 {\n             let msg = \"statics with a custom `#[link_section]` must be a \\\n                        simple list of bytes on the wasm target with no \\"}]}