{"sha": "407ebbc552fd9a8e73a9e46873ab834c54cea967", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwN2ViYmM1NTJmZDlhOGU3M2E5ZTQ2ODczYWI4MzRjNTRjZWE5Njc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T10:49:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T10:49:03Z"}, "message": "More fool-proof API", "tree": {"sha": "b68be1e094307d54ac060181a8c752d9d7fb1db8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b68be1e094307d54ac060181a8c752d9d7fb1db8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/407ebbc552fd9a8e73a9e46873ab834c54cea967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/407ebbc552fd9a8e73a9e46873ab834c54cea967", "html_url": "https://github.com/rust-lang/rust/commit/407ebbc552fd9a8e73a9e46873ab834c54cea967", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/407ebbc552fd9a8e73a9e46873ab834c54cea967/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87b5e14c75dbc02b5bc610dfa33d5789570df5db", "url": "https://api.github.com/repos/rust-lang/rust/commits/87b5e14c75dbc02b5bc610dfa33d5789570df5db", "html_url": "https://github.com/rust-lang/rust/commit/87b5e14c75dbc02b5bc610dfa33d5789570df5db"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "a30318c6e8e2578980ccd5033c64acd8a40f79c3", "filename": "src/yellow/red.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/407ebbc552fd9a8e73a9e46873ab834c54cea967/src%2Fyellow%2Fred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/407ebbc552fd9a8e73a9e46873ab834c54cea967/src%2Fyellow%2Fred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fred.rs?ref=407ebbc552fd9a8e73a9e46873ab834c54cea967", "patch": "@@ -61,9 +61,12 @@ impl RedNode {\n         self.green.children().len()\n     }\n \n-    pub(crate) fn nth_child(&self, idx: usize) -> ptr::NonNull<RedNode> {\n+    pub(crate) fn get_child(&self, idx: usize) -> Option<ptr::NonNull<RedNode>> {\n+        if idx >= self.n_children() {\n+            return None\n+        }\n         match &self.children.read().unwrap()[idx] {\n-            Some(child) => return child.into(),\n+            Some(child) => return Some(child.into()),\n             None => (),\n         }\n         let mut children = self.children.write().unwrap();\n@@ -78,7 +81,7 @@ impl RedNode {\n                 RedNode::new_child(green_children[idx].clone(), self.into(), start_offset, idx);\n             children[idx] = Some(child)\n         }\n-        children[idx].as_ref().unwrap().into()\n+        Some(children[idx].as_ref().unwrap().into())\n     }\n \n     pub(crate) fn parent(&self) -> Option<ptr::NonNull<RedNode>> {"}, {"sha": "41dcf3761288c21d155a1a0cb83a49f02bb5a142", "filename": "src/yellow/syntax.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/407ebbc552fd9a8e73a9e46873ab834c54cea967/src%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/407ebbc552fd9a8e73a9e46873ab834c54cea967/src%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fsyntax.rs?ref=407ebbc552fd9a8e73a9e46873ab834c54cea967", "patch": "@@ -6,8 +6,10 @@ use {\n     TextRange, TextUnit,\n };\n \n-pub trait TreeRoot: Deref<Target = SyntaxRoot> + Clone {}\n+pub trait TreeRoot: Deref<Target=SyntaxRoot> + Clone {}\n+\n impl TreeRoot for Arc<SyntaxRoot> {}\n+\n impl<'a> TreeRoot for &'a SyntaxRoot {}\n \n #[derive(Clone, Copy)]\n@@ -18,14 +20,13 @@ pub struct SyntaxNode<R: TreeRoot = Arc<SyntaxRoot>> {\n     red: ptr::NonNull<RedNode>,\n }\n \n-impl <R1: TreeRoot, R2: TreeRoot> PartialEq<SyntaxNode<R1>> for SyntaxNode<R2> {\n+impl<R1: TreeRoot, R2: TreeRoot> PartialEq<SyntaxNode<R1>> for SyntaxNode<R2> {\n     fn eq(&self, other: &SyntaxNode<R1>) -> bool {\n         self.red == other.red\n     }\n }\n \n-impl <R: TreeRoot> Eq for SyntaxNode<R> {\n-}\n+impl<R: TreeRoot> Eq for SyntaxNode<R> {}\n \n pub type SyntaxNodeRef<'a> = SyntaxNode<&'a SyntaxRoot>;\n \n@@ -88,7 +89,7 @@ impl<R: TreeRoot> SyntaxNode<R> {\n         (0..n_children).map(move |i| {\n             SyntaxNode {\n                 root: self.root.clone(),\n-                red: red.nth_child(i),\n+                red: red.get_child(i).unwrap(),\n             }\n         })\n     }\n@@ -109,12 +110,10 @@ impl<R: TreeRoot> SyntaxNode<R> {\n         let red = self.red();\n         let parent = self.parent()?;\n         let next_sibling_idx = red.index_in_parent()? + 1;\n-        if next_sibling_idx == parent.red().n_children() {\n-            return None;\n-        }\n+        let sibling_red = parent.red().get_child(next_sibling_idx)?;\n         Some(SyntaxNode {\n             root: self.root.clone(),\n-            red: parent.red().nth_child(next_sibling_idx),\n+            red: sibling_red,\n         })\n     }\n "}]}