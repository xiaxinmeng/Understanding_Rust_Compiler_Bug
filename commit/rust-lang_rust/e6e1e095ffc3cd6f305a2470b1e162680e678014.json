{"sha": "e6e1e095ffc3cd6f305a2470b1e162680e678014", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZTFlMDk1ZmZjM2NkNmYzMDVhMjQ3MGIxZTE2MjY4MGU2NzgwMTQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-07-14T13:50:42Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-07-15T08:40:25Z"}, "message": "[debuginfo] Emit associated type bindings in trait object type names.", "tree": {"sha": "1833f0f5ce5c2407587b768b59532e4a4d7570d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1833f0f5ce5c2407587b768b59532e4a4d7570d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6e1e095ffc3cd6f305a2470b1e162680e678014", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e1e095ffc3cd6f305a2470b1e162680e678014", "html_url": "https://github.com/rust-lang/rust/commit/e6e1e095ffc3cd6f305a2470b1e162680e678014", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6e1e095ffc3cd6f305a2470b1e162680e678014/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9197978a90be6f7570741eabe2da175fec75375", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9197978a90be6f7570741eabe2da175fec75375", "html_url": "https://github.com/rust-lang/rust/commit/b9197978a90be6f7570741eabe2da175fec75375"}], "stats": {"total": 140, "additions": 96, "deletions": 44}, "files": [{"sha": "ff0cdb33cbc74cee73245937ef2f489e38f6d9d6", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6e1e095ffc3cd6f305a2470b1e162680e678014/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e6e1e095ffc3cd6f305a2470b1e162680e678014/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e6e1e095ffc3cd6f305a2470b1e162680e678014", "patch": "@@ -3734,6 +3734,7 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_symbol_mangling\",\n  \"rustc_target\",\n+ \"smallvec\",\n  \"tempfile\",\n  \"tracing\",\n ]"}, {"sha": "a11098b11c6ebea80839eebf9f6fe13041ceb964", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6e1e095ffc3cd6f305a2470b1e162680e678014/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e6e1e095ffc3cd6f305a2470b1e162680e678014/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=e6e1e095ffc3cd6f305a2470b1e162680e678014", "patch": "@@ -16,6 +16,7 @@ libc = \"0.2.50\"\n jobserver = \"0.1.22\"\n tempfile = \"3.2\"\n pathdiff = \"0.2.0\"\n+smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n \n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "41cbd29ffb35480f78da60e37f37281a55a7d6f7", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 83, "deletions": 37, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/e6e1e095ffc3cd6f305a2470b1e162680e678014/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e1e095ffc3cd6f305a2470b1e162680e678014/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=e6e1e095ffc3cd6f305a2470b1e162680e678014", "patch": "@@ -19,8 +19,9 @@ use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathD\n use rustc_middle::ich::NodeIdHashingMode;\n use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtDef, ExistentialProjection, Ty, TyCtxt};\n use rustc_target::abi::{Integer, TagEncoding, Variants};\n+use smallvec::SmallVec;\n \n use std::fmt::Write;\n \n@@ -188,63 +189,86 @@ pub fn push_debuginfo_type_name<'tcx>(\n             }\n         }\n         ty::Dynamic(ref trait_data, ..) => {\n-            if cpp_like_names {\n+            let auto_traits: SmallVec<[DefId; 4]> = trait_data.auto_traits().collect();\n+\n+            let has_enclosing_parens = if cpp_like_names {\n                 output.push_str(\"dyn$<\");\n+                false\n             } else {\n-                output.push_str(\"dyn \");\n-            }\n+                if trait_data.len() > 1 && auto_traits.len() != 0 {\n+                    // We need enclosing parens\n+                    output.push_str(\"(dyn \");\n+                    true\n+                } else {\n+                    output.push_str(\"dyn \");\n+                    false\n+                }\n+            };\n \n             if let Some(principal) = trait_data.principal() {\n                 let principal =\n                     tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), principal);\n                 push_item_name(tcx, principal.def_id, qualified, output);\n                 push_generic_params_internal(tcx, principal.substs, output, visited);\n-            } else {\n-                // The auto traits come ordered by `DefPathHash`, which guarantees stability if the\n-                // environment is stable (e.g., incremental builds) but not otherwise (e.g.,\n-                // updated compiler version, different target).\n-                //\n-                // To avoid that causing instabilities in test output, sort the auto-traits\n-                // alphabetically.\n-                let mut auto_traits: Vec<_> = trait_data\n-                    .iter()\n-                    .filter_map(|predicate| {\n-                        match tcx.normalize_erasing_late_bound_regions(\n-                            ty::ParamEnv::reveal_all(),\n-                            predicate,\n-                        ) {\n-                            ty::ExistentialPredicate::AutoTrait(def_id) => {\n-                                let mut name = String::new();\n-                                push_item_name(tcx, def_id, true, &mut name);\n-                                Some(name)\n-                            }\n-                            _ => None,\n-                        }\n+\n+                let projection_bounds: SmallVec<[_; 4]> = trait_data\n+                    .projection_bounds()\n+                    .map(|bound| {\n+                        let ExistentialProjection { item_def_id, ty, .. } = bound.skip_binder();\n+                        (item_def_id, ty)\n                     })\n                     .collect();\n-                auto_traits.sort();\n \n-                for name in auto_traits {\n-                    output.push_str(&name);\n+                if projection_bounds.len() != 0 {\n+                    pop_close_angle_bracket(output);\n \n-                    if cpp_like_names {\n+                    for (item_def_id, ty) in projection_bounds {\n                         output.push_str(\", \");\n-                    } else {\n-                        output.push_str(\" + \");\n+\n+                        if cpp_like_names {\n+                            output.push_str(\"assoc$<\");\n+                            push_item_name(tcx, item_def_id, false, output);\n+                            output.push_str(\", \");\n+                            push_debuginfo_type_name(tcx, ty, true, output, visited);\n+                            push_close_angle_bracket(tcx, output);\n+                        } else {\n+                            push_item_name(tcx, item_def_id, false, output);\n+                            output.push('=');\n+                            push_debuginfo_type_name(tcx, ty, true, output, visited);\n+                        }\n                     }\n+\n+                    push_close_angle_bracket(tcx, output);\n                 }\n \n-                // Remove the trailing joining characters. For cpp_like_names\n-                // this is `, ` otherwise ` + `.\n-                output.pop();\n-                output.pop();\n-                if !cpp_like_names {\n-                    output.pop();\n+                if auto_traits.len() != 0 {\n+                    push_auto_trait_separator(cpp_like_names, output);\n+                }\n+            }\n+\n+            if auto_traits.len() != 0 {\n+                let mut auto_traits: SmallVec<[String; 4]> = auto_traits\n+                    .into_iter()\n+                    .map(|def_id| {\n+                        let mut name = String::with_capacity(20);\n+                        push_item_name(tcx, def_id, true, &mut name);\n+                        name\n+                    })\n+                    .collect();\n+                auto_traits.sort_unstable();\n+\n+                for auto_trait in auto_traits {\n+                    output.push_str(&auto_trait);\n+                    push_auto_trait_separator(cpp_like_names, output);\n                 }\n+\n+                pop_auto_trait_separator(cpp_like_names, output);\n             }\n \n             if cpp_like_names {\n                 push_close_angle_bracket(tcx, output);\n+            } else if has_enclosing_parens {\n+                output.push(')');\n             }\n         }\n         ty::FnDef(..) | ty::FnPtr(_) => {\n@@ -407,6 +431,20 @@ pub fn push_debuginfo_type_name<'tcx>(\n         }\n         push_close_angle_bracket(tcx, output);\n     }\n+\n+    fn auto_trait_separator(cpp_like_names: bool) -> &'static str {\n+        if cpp_like_names { \", \" } else { \" + \" }\n+    }\n+\n+    fn push_auto_trait_separator(cpp_like_names: bool, output: &mut String) {\n+        output.push_str(auto_trait_separator(cpp_like_names));\n+    }\n+\n+    fn pop_auto_trait_separator(cpp_like_names: bool, output: &mut String) {\n+        let sep = auto_trait_separator(cpp_like_names);\n+        assert!(output.ends_with(sep));\n+        output.truncate(output.len() - sep.len());\n+    }\n }\n \n pub fn push_item_name(tcx: TyCtxt<'tcx>, def_id: DefId, qualified: bool, output: &mut String) {\n@@ -555,6 +593,14 @@ fn push_close_angle_bracket<'tcx>(tcx: TyCtxt<'tcx>, output: &mut String) {\n     output.push('>');\n }\n \n+fn pop_close_angle_bracket(output: &mut String) {\n+    assert!(output.ends_with('>'));\n+    output.pop();\n+    if output.ends_with(' ') {\n+        output.pop();\n+    }\n+}\n+\n fn cpp_like_names(tcx: TyCtxt<'_>) -> bool {\n     tcx.sess.target.is_like_msvc\n }"}, {"sha": "ebd68b46a28256417a9b66b20f00502ccf06870c", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e6e1e095ffc3cd6f305a2470b1e162680e678014/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6e1e095ffc3cd6f305a2470b1e162680e678014/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=e6e1e095ffc3cd6f305a2470b1e162680e678014", "patch": "@@ -117,7 +117,11 @@\n // gdb-check:type = &mut dyn type_names::Trait2<type_names::mod1::mod2::Struct3, type_names::GenericStruct<usize, isize>>\n \n // gdb-command:whatis no_principal_trait\n-// gdb-check:type = alloc::boxed::Box<dyn core::marker::Send + core::marker::Sync, alloc::alloc::Global>\n+// gdb-check:type = alloc::boxed::Box<(dyn core::marker::Send + core::marker::Sync), alloc::alloc::Global>\n+\n+// gdb-command:whatis has_associated_type_trait\n+// gdb-check:type = &(dyn type_names::Trait3<u32, AssocType=isize> + core::marker::Send)\n+\n \n // BARE FUNCTIONS\n // gdb-command:whatis rust_fn\n@@ -224,7 +228,7 @@\n // cdb-check:struct ref$<dyn$<type_names::Trait1> > ref_trait = [...]\n // cdb-check:struct ref_mut$<dyn$<type_names::Trait1> > mut_ref_trait = [...]\n // cdb-check:struct alloc::boxed::Box<dyn$<core::marker::Send, core::marker::Sync>, alloc::alloc::Global> no_principal_trait = [...]\n-// cdb-check:struct ref$<dyn$<type_names::Trait3> > has_associated_type_trait = struct ref$<dyn$<type_names::Trait3> >\n+// cdb-check:struct ref$<dyn$<type_names::Trait3<u32, assoc$<AssocType, isize> >, core::marker::Send> > has_associated_type_trait = struct ref$<dyn$<type_names::Trait3<u32, assoc$<AssocType, isize> >, core::marker::Send> >\n \n // BARE FUNCTIONS\n // cdb-command:dv /t *_fn*\n@@ -306,14 +310,14 @@ trait Trait1 {\n trait Trait2<T1, T2> {\n     fn dummy(&self, _: T1, _: T2) {}\n }\n-trait Trait3 {\n+trait Trait3<T> {\n     type AssocType;\n-    fn dummy(&self) {}\n+    fn dummy(&self) -> T { panic!() }\n }\n \n impl Trait1 for isize {}\n impl<T1, T2> Trait2<T1, T2> for isize {}\n-impl Trait3 for isize {\n+impl<T> Trait3<T> for isize {\n     type AssocType = isize;\n }\n \n@@ -404,8 +408,8 @@ fn main() {\n     let ref_trait = &0_isize as &dyn Trait1;\n     let mut mut_int1 = 0_isize;\n     let mut_ref_trait = (&mut mut_int1) as &mut dyn Trait1;\n-    let no_principal_trait = (box 0_isize) as Box<dyn Send + Sync>;\n-    let has_associated_type_trait = &0_isize as &dyn Trait3<AssocType = isize>;\n+    let no_principal_trait = (box 0_isize) as Box<(dyn Send + Sync)>;\n+    let has_associated_type_trait = &0_isize as &(dyn Trait3<u32, AssocType = isize> + Send);\n \n     let generic_box_trait = (box 0_isize) as Box<dyn Trait2<i32, mod1::Struct2>>;\n     let generic_ref_trait = (&0_isize) as &dyn Trait2<Struct1, Struct1>;"}]}