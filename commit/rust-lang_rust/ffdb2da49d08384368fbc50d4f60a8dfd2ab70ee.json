{"sha": "ffdb2da49d08384368fbc50d4f60a8dfd2ab70ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZGIyZGE0OWQwODM4NDM2OGZiYzUwZDRmNjBhOGRmZDJhYjcwZWU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-06T12:16:07Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-06T12:21:35Z"}, "message": "Don't use HirDisplayWrapper when displaying SourceCode", "tree": {"sha": "e05b2c54ee5adb207fa7c364953b8d5160c014fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e05b2c54ee5adb207fa7c364953b8d5160c014fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffdb2da49d08384368fbc50d4f60a8dfd2ab70ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffdb2da49d08384368fbc50d4f60a8dfd2ab70ee", "html_url": "https://github.com/rust-lang/rust/commit/ffdb2da49d08384368fbc50d4f60a8dfd2ab70ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffdb2da49d08384368fbc50d4f60a8dfd2ab70ee/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "002e72a28de3df818992442ad49bb60d3d0b1d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/002e72a28de3df818992442ad49bb60d3d0b1d0b", "html_url": "https://github.com/rust-lang/rust/commit/002e72a28de3df818992442ad49bb60d3d0b1d0b"}], "stats": {"total": 43, "additions": 12, "deletions": 31}, "files": [{"sha": "4af2bcf7aeaa5749be9de6bc5b391985138d9f5a", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 12, "deletions": 31, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ffdb2da49d08384368fbc50d4f60a8dfd2ab70ee/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffdb2da49d08384368fbc50d4f60a8dfd2ab70ee/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=ffdb2da49d08384368fbc50d4f60a8dfd2ab70ee", "patch": "@@ -256,13 +256,9 @@ impl HirDisplay for ProjectionTy {\n         }\n \n         let trait_ = f.db.trait_data(self.trait_(f.db));\n-        let first_parameter = self.self_type_parameter(&Interner).into_displayable(\n-            f.db,\n-            f.max_size,\n-            f.omit_verbose_types,\n-            f.display_target,\n-        );\n-        write!(f, \"<{} as {}\", first_parameter, trait_.name)?;\n+        write!(f, \"<\")?;\n+        self.self_type_parameter(&Interner).hir_fmt(f)?;\n+        write!(f, \" as {}\", trait_.name)?;\n         if self.substitution.len(&Interner) > 1 {\n             write!(f, \"<\")?;\n             f.write_joined(&self.substitution.interned()[1..], \", \")?;\n@@ -341,9 +337,6 @@ impl HirDisplay for Ty {\n                 write!(f, \"]\")?;\n             }\n             TyKind::Raw(m, t) | TyKind::Ref(m, _, t) => {\n-                let ty_display =\n-                    t.into_displayable(f.db, f.max_size, f.omit_verbose_types, f.display_target);\n-\n                 if matches!(self.kind(&Interner), TyKind::Raw(..)) {\n                     write!(\n                         f,\n@@ -398,16 +391,16 @@ impl HirDisplay for Ty {\n                     if fn_traits(f.db.upcast(), trait_).any(|it| it == trait_)\n                         && predicates.len() <= 2\n                     {\n-                        return write!(f, \"{}\", ty_display);\n+                        return t.hir_fmt(f);\n                     }\n                 }\n \n                 if predicates.len() > 1 {\n                     write!(f, \"(\")?;\n-                    write!(f, \"{}\", ty_display)?;\n+                    t.hir_fmt(f)?;\n                     write!(f, \")\")?;\n                 } else {\n-                    write!(f, \"{}\", ty_display)?;\n+                    t.hir_fmt(f)?;\n                 }\n             }\n             TyKind::Tuple(_, substs) => {\n@@ -454,14 +447,8 @@ impl HirDisplay for Ty {\n                 write!(f, \")\")?;\n                 let ret = sig.ret();\n                 if !ret.is_unit() {\n-                    let ret_display = ret.into_displayable(\n-                        f.db,\n-                        f.max_size,\n-                        f.omit_verbose_types,\n-                        f.display_target,\n-                    );\n-\n-                    write!(f, \" -> {}\", ret_display)?;\n+                    write!(f, \" -> \")?;\n+                    ret.hir_fmt(f)?;\n                 }\n             }\n             TyKind::Adt(AdtId(def_id), parameters) => {\n@@ -603,13 +590,8 @@ impl HirDisplay for Ty {\n                         write!(f, \"|\")?;\n                     };\n \n-                    let ret_display = sig.ret().into_displayable(\n-                        f.db,\n-                        f.max_size,\n-                        f.omit_verbose_types,\n-                        f.display_target,\n-                    );\n-                    write!(f, \" -> {}\", ret_display)?;\n+                    write!(f, \" -> \")?;\n+                    sig.ret().hir_fmt(f)?;\n                 } else {\n                     write!(f, \"{{closure}}\")?;\n                 }\n@@ -697,9 +679,8 @@ impl HirDisplay for CallableSig {\n         write!(f, \")\")?;\n         let ret = self.ret();\n         if !ret.is_unit() {\n-            let ret_display =\n-                ret.into_displayable(f.db, f.max_size, f.omit_verbose_types, f.display_target);\n-            write!(f, \" -> {}\", ret_display)?;\n+            write!(f, \" -> \")?;\n+            ret.hir_fmt(f)?;\n         }\n         Ok(())\n     }"}]}