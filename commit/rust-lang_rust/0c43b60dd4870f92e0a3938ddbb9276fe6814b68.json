{"sha": "0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNDNiNjBkZDQ4NzBmOTJlMGEzOTM4ZGRiYjkyNzZmZTY4MTRiNjg=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-11-03T09:41:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-03T09:41:02Z"}, "message": "Merge pull request #2199 from sinkuu/needless_pass_by_value_method\n\n Extend needless_pass_by_value to methods", "tree": {"sha": "69e0d960766be33d28f0fcdd80aac5828762e942", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e0d960766be33d28f0fcdd80aac5828762e942"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJZ/DmuCRBK7hj4Ov3rIwAAdHIIAH1Eo4lZzPgYYu2+h7ldXWt/\nYRvdztt20ECdVzOyT/s+aTrKec58kNgMg010XCSr4cmbs+5xgiit5diPMjc4nvaU\n/zAIJaMQIklYXHIacqtQtYNWyXwZy6kVc9U3WvHKEq7xqHXn6Vt5YQqyYZ4QwjsR\nFa/n+YARmOk9XVaECOv4dLcVY+JZwvOnwzHDj+kxdvPuZ1i28FM/FMJrWn4YUpCT\njOXsGKfidVymnIMJlGGcnoZzOqX1W8ts2A5p6JsTh8+sR9gTytUGHV2V7kZ54wic\nvajEXeuPl4d5SI8y4LJ9TXQ/KkEv0K6S7K/JrS7Z2kJlsXhJseTq8IkjvvluMok=\n=Xier\n-----END PGP SIGNATURE-----\n", "payload": "tree 69e0d960766be33d28f0fcdd80aac5828762e942\nparent 4127c230f086e48cb3214279ef02d3bb15d16cdc\nparent d88cc5376e0cba84273161c8bc0d67127c6f9064\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1509702062 +0100\ncommitter GitHub <noreply@github.com> 1509702062 +0100\n\nMerge pull request #2199 from sinkuu/needless_pass_by_value_method\n\n Extend needless_pass_by_value to methods "}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "html_url": "https://github.com/rust-lang/rust/commit/0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4127c230f086e48cb3214279ef02d3bb15d16cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4127c230f086e48cb3214279ef02d3bb15d16cdc", "html_url": "https://github.com/rust-lang/rust/commit/4127c230f086e48cb3214279ef02d3bb15d16cdc"}, {"sha": "d88cc5376e0cba84273161c8bc0d67127c6f9064", "url": "https://api.github.com/repos/rust-lang/rust/commits/d88cc5376e0cba84273161c8bc0d67127c6f9064", "html_url": "https://github.com/rust-lang/rust/commit/d88cc5376e0cba84273161c8bc0d67127c6f9064"}], "stats": {"total": 115, "additions": 95, "deletions": 20}, "files": [{"sha": "fa0d7de6676eca5a28f62a4ec8acb44c6e0fba28", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "patch": "@@ -134,7 +134,7 @@ fn check_collapsible_no_if_let(cx: &EarlyContext, expr: &ast::Expr, check: &ast:\n                 db.span_suggestion(expr.span,\n                                    \"try\",\n                                    format!(\"if {} {}\",\n-                                           lhs.and(rhs),\n+                                           lhs.and(&rhs),\n                                            snippet_block(cx, content.span, \"..\")));\n             });\n         }"}, {"sha": "396b06524d0bd305dea8afd848ee8237b2b84945", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "patch": "@@ -45,6 +45,7 @@ impl LintPass for IntPlusOne {\n // x + 1 <= y\n // x <= y - 1\n \n+#[derive(Copy, Clone)]\n enum Side {\n     LHS,\n     RHS,"}, {"sha": "ac965a59bd51055971f20fac15e01ec8789ce175", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "patch": "@@ -1,4 +1,5 @@\n use rustc::hir::*;\n+use rustc::hir::map::*;\n use rustc::hir::intravisit::FnKind;\n use rustc::lint::*;\n use rustc::ty::{self, RegionKind, TypeFoldable};\n@@ -22,13 +23,20 @@ use std::borrow::Cow;\n /// sometimes avoid\n /// unnecessary allocations.\n ///\n-/// **Known problems:** Hopefully none.\n+/// **Known problems:**\n+/// * This lint suggests taking an argument by reference,\n+/// however sometimes it is better to let users decide the argument type\n+/// (by using `Borrow` trait, for example), depending on how the function is used.\n ///\n /// **Example:**\n /// ```rust\n /// fn foo(v: Vec<i32>) {\n ///     assert_eq!(v.len(), 42);\n /// }\n+/// // should be\n+/// fn foo(v: &[i32]) {\n+///     assert_eq!(v.len(), 42);\n+/// }\n /// ```\n declare_lint! {\n     pub NEEDLESS_PASS_BY_VALUE,\n@@ -73,9 +81,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                     }\n                 }\n             },\n+            FnKind::Method(..) => (),\n             _ => return,\n         }\n \n+        // Exclude non-inherent impls\n+        if let Some(NodeItem(item)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(node_id)) {\n+            if matches!(item.node, ItemImpl(_, _, _, _, Some(_), _, _) | ItemDefaultImpl(..)) {\n+                return;\n+            }\n+        }\n+\n         // Allow `Borrow` or functions to be taken by value\n         let borrow_trait = need!(get_trait_def_id(cx, &paths::BORROW_TRAIT));\n         let fn_traits = [\n@@ -109,7 +125,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         } = {\n             let mut ctx = MovedVariablesCtxt::new(cx);\n             let region_scope_tree = &cx.tcx.region_scope_tree(fn_def_id);\n-            euv::ExprUseVisitor::new(&mut ctx, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None).consume_body(body);\n+            euv::ExprUseVisitor::new(&mut ctx, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None)\n+                .consume_body(body);\n             ctx\n         };\n \n@@ -127,6 +144,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                 return;\n             }\n \n+            // Ignore `self`s.\n+            if idx == 0 {\n+                if let PatKind::Binding(_, _, name, ..) = arg.pat.node {\n+                    if name.node.as_str() == \"self\" {\n+                        continue;\n+                    }\n+                }\n+            }\n+\n             // * Exclude a type that is specifically bounded by `Borrow`.\n             // * Exclude a type whose reference also fulfills its bound.\n             //   (e.g. `std::convert::AsRef`, `serde::Serialize`)\n@@ -163,7 +189,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                     if mode == BindingAnnotation::Mutable || mode == BindingAnnotation::RefMut {\n                         continue;\n                     }\n-    \n+\n                     // Dereference suggestion\n                     let sugg = |db: &mut DiagnosticBuilder| {\n                         let deref_span = spans_need_deref.get(&canonical_id);\n@@ -181,7 +207,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                 db.span_suggestion(input.span,\n                                                 \"consider changing the type to\",\n                                                 slice_ty);\n-        \n+\n                                 for (span, suggestion) in clone_spans {\n                                     db.span_suggestion(\n                                         span,\n@@ -193,18 +219,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                         suggestion.into()\n                                     );\n                                 }\n-        \n+\n                                 // cannot be destructured, no need for `*` suggestion\n                                 assert!(deref_span.is_none());\n                                 return;\n                             }\n                         }\n-    \n+\n                         if match_type(cx, ty, &paths::STRING) {\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_string()\"), (\"as_str\", \"\")]) {\n                                 db.span_suggestion(input.span, \"consider changing the type to\", \"&str\".to_string());\n-    \n+\n                                 for (span, suggestion) in clone_spans {\n                                     db.span_suggestion(\n                                         span,\n@@ -216,14 +242,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                         suggestion.into(),\n                                     );\n                                 }\n-    \n+\n                                 assert!(deref_span.is_none());\n                                 return;\n                             }\n                         }\n-    \n+\n                         let mut spans = vec![(input.span, format!(\"&{}\", snippet(cx, input.span, \"_\")))];\n-    \n+\n                         // Suggests adding `*` to dereference the added reference.\n                         if let Some(deref_span) = deref_span {\n                             spans.extend(\n@@ -236,7 +262,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         }\n                         multispan_sugg(db, \"consider taking a reference instead\".to_string(), spans);\n                     };\n-    \n+\n                     span_lint_and_then(\n                         cx,\n                         NEEDLESS_PASS_BY_VALUE,"}, {"sha": "3fd372052f66245e50663db854edf4afa337ce79", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "patch": "@@ -136,8 +136,8 @@ impl<'a> Sugg<'a> {\n     }\n \n     /// Convenience method to create the `<lhs> && <rhs>` suggestion.\n-    pub fn and(self, rhs: Self) -> Sugg<'static> {\n-        make_binop(ast::BinOpKind::And, &self, &rhs)\n+    pub fn and(self, rhs: &Self) -> Sugg<'static> {\n+        make_binop(ast::BinOpKind::And, &self, rhs)\n     }\n \n     /// Convenience method to create the `<lhs> as <rhs>` suggestion.\n@@ -162,10 +162,10 @@ impl<'a> Sugg<'a> {\n \n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>`\n     /// suggestion.\n-    pub fn range(self, end: Self, limit: ast::RangeLimits) -> Sugg<'static> {\n+    pub fn range(self, end: &Self, limit: ast::RangeLimits) -> Sugg<'static> {\n         match limit {\n-            ast::RangeLimits::HalfOpen => make_assoc(AssocOp::DotDot, &self, &end),\n-            ast::RangeLimits::Closed => make_assoc(AssocOp::DotDotEq, &self, &end),\n+            ast::RangeLimits::HalfOpen => make_assoc(AssocOp::DotDot, &self, end),\n+            ast::RangeLimits::Closed => make_assoc(AssocOp::DotDotEq, &self, end),\n         }\n     }\n "}, {"sha": "c80f6acd06b9cedd6440bf4a7380068b1045e827", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "patch": "@@ -1,9 +1,9 @@\n \n #![feature(const_fn)]\n \n-\n #![warn(clippy, clippy_pedantic)]\n-#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default, new_without_default_derive, missing_docs_in_private_items)]\n+#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default,\n+    new_without_default_derive, missing_docs_in_private_items, needless_pass_by_value)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "f4d490b214ffbd6a23d82e7c1b02276daec93acc", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "patch": "@@ -65,7 +65,7 @@ fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n \n trait Foo {}\n \n-// `S: Serialize` can be passed by value\n+// `S: Serialize` is allowed to be passed by value, since a caller can pass `&S` instead\n trait Serialize {}\n impl<'a, T> Serialize for &'a T where T: Serialize {}\n impl Serialize for i32 {}\n@@ -79,4 +79,28 @@ fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n     let _ = v.clone();\n }\n \n+struct S<T, U>(T, U);\n+\n+impl<T: Serialize, U> S<T, U> {\n+    fn foo(\n+        self, // taking `self` by value is always allowed\n+        s: String,\n+        t: String,\n+    ) -> usize {\n+        s.len() + t.capacity()\n+    }\n+\n+    fn bar(\n+        _t: T, // Ok, since `&T: Serialize` too\n+    ) {\n+    }\n+\n+    fn baz(\n+        &self,\n+        _u: U,\n+        _s: Self,\n+    ) {\n+    }\n+}\n+\n fn main() {}"}, {"sha": "a6c0c0454cbf27fd92198b3edebdf7151baa82d7", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c43b60dd4870f92e0a3938ddbb9276fe6814b68/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=0c43b60dd4870f92e0a3938ddbb9276fe6814b68", "patch": "@@ -104,3 +104,27 @@ help: change `v.clone()` to\n 79 |     let _ = v.to_owned();\n    |             ^^^^^^^^^^^^\n \n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:87:12\n+   |\n+87 |         s: String,\n+   |            ^^^^^^ help: consider changing the type to: `&str`\n+\n+error: this argument is passed by value, but not consumed in the function body\n+  --> $DIR/needless_pass_by_value.rs:88:12\n+   |\n+88 |         t: String,\n+   |            ^^^^^^ help: consider taking a reference instead: `&String`\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:100:13\n+    |\n+100 |         _u: U,\n+    |             ^ help: consider taking a reference instead: `&U`\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:101:13\n+    |\n+101 |         _s: Self,\n+    |             ^^^^ help: consider taking a reference instead: `&Self`\n+"}]}