{"sha": "8a2c4820821a9b266ed979ed9321431362cdb1b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMmM0ODIwODIxYTliMjY2ZWQ5NzllZDkzMjE0MzEzNjJjZGIxYjM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-09T12:33:03Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-09T12:33:31Z"}, "message": "More cleanups", "tree": {"sha": "2cdda87caaacd9ad6df034a25192ece0b0faaf34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cdda87caaacd9ad6df034a25192ece0b0faaf34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a2c4820821a9b266ed979ed9321431362cdb1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2c4820821a9b266ed979ed9321431362cdb1b3", "html_url": "https://github.com/rust-lang/rust/commit/8a2c4820821a9b266ed979ed9321431362cdb1b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a2c4820821a9b266ed979ed9321431362cdb1b3/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f02977e56a44a5f78576a25547672cd8f910f13", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f02977e56a44a5f78576a25547672cd8f910f13", "html_url": "https://github.com/rust-lang/rust/commit/2f02977e56a44a5f78576a25547672cd8f910f13"}], "stats": {"total": 67, "additions": 29, "deletions": 38}, "files": [{"sha": "f27dee3fdedf42c343b4228b3caf294008fcf88c", "filename": "crates/hir_ty/src/chalk_cast.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f02977e56a44a5f78576a25547672cd8f910f13/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f02977e56a44a5f78576a25547672cd8f910f13/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_cast.rs?ref=2f02977e56a44a5f78576a25547672cd8f910f13", "patch": "@@ -1,16 +0,0 @@\n-//! Implementations of the Chalk `Cast` trait for our types.\n-\n-use chalk_ir::interner::HasInterner;\n-\n-use crate::{CallableSig, ReturnTypeImplTraits};\n-\n-macro_rules! has_interner {\n-    ($t:ty) => {\n-        impl HasInterner for $t {\n-            type Interner = crate::Interner;\n-        }\n-    };\n-}\n-\n-has_interner!(CallableSig);\n-has_interner!(ReturnTypeImplTraits);"}, {"sha": "a1656115d65dd424eba927b32766db96190b1af4", "filename": "crates/hir_ty/src/interner.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a2c4820821a9b266ed979ed9321431362cdb1b3/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2c4820821a9b266ed979ed9321431362cdb1b3/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finterner.rs?ref=8a2c4820821a9b266ed979ed9321431362cdb1b3", "patch": "@@ -412,3 +412,12 @@ impl chalk_ir::interner::Interner for Interner {\n impl chalk_ir::interner::HasInterner for Interner {\n     type Interner = Self;\n }\n+\n+#[macro_export]\n+macro_rules! has_interner {\n+    ($t:ty) => {\n+        impl HasInterner for $t {\n+            type Interner = crate::Interner;\n+        }\n+    };\n+}"}, {"sha": "ef1bdefacb499830861cde5bb4caf291ee6e022a", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8a2c4820821a9b266ed979ed9321431362cdb1b3/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2c4820821a9b266ed979ed9321431362cdb1b3/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=8a2c4820821a9b266ed979ed9321431362cdb1b3", "patch": "@@ -7,25 +7,23 @@ macro_rules! eprintln {\n }\n \n mod autoderef;\n-pub mod primitive;\n-pub mod traits;\n-pub mod method_resolution;\n-mod op;\n-mod lower;\n-pub(crate) mod infer;\n-pub(crate) mod utils;\n-mod chalk_cast;\n-mod chalk_ext;\n mod builder;\n-mod walk;\n-mod tls;\n+mod chalk_db;\n+mod chalk_ext;\n+mod infer;\n mod interner;\n+mod lower;\n mod mapping;\n-mod chalk_db;\n-\n-pub mod display;\n+mod op;\n+mod tls;\n+mod utils;\n+mod walk;\n pub mod db;\n pub mod diagnostics;\n+pub mod display;\n+pub mod method_resolution;\n+pub mod primitive;\n+pub mod traits;\n \n #[cfg(test)]\n mod tests;\n@@ -100,6 +98,10 @@ pub type ConstValue = chalk_ir::ConstValue<Interner>;\n pub type ConcreteConst = chalk_ir::ConcreteConst<Interner>;\n \n pub type ChalkTraitId = chalk_ir::TraitId<Interner>;\n+pub type TraitRef = chalk_ir::TraitRef<Interner>;\n+pub type QuantifiedWhereClause = Binders<WhereClause>;\n+pub type QuantifiedWhereClauses = chalk_ir::QuantifiedWhereClauses<Interner>;\n+pub type Canonical<T> = chalk_ir::Canonical<T>;\n \n pub type FnSig = chalk_ir::FnSig<Interner>;\n \n@@ -159,14 +161,6 @@ pub fn make_canonical<T: HasInterner<Interner = Interner>>(\n     Canonical { value, binders: chalk_ir::CanonicalVarKinds::from_iter(&Interner, kinds) }\n }\n \n-pub type TraitRef = chalk_ir::TraitRef<Interner>;\n-\n-pub type QuantifiedWhereClause = Binders<WhereClause>;\n-\n-pub type QuantifiedWhereClauses = chalk_ir::QuantifiedWhereClauses<Interner>;\n-\n-pub type Canonical<T> = chalk_ir::Canonical<T>;\n-\n /// A function signature as seen by type inference: Several parameter types and\n /// one return type.\n #[derive(Clone, PartialEq, Eq, Debug)]\n@@ -175,6 +169,8 @@ pub struct CallableSig {\n     is_varargs: bool,\n }\n \n+has_interner!(CallableSig);\n+\n /// A polymorphic function signature.\n pub type PolyFnSig = Binders<CallableSig>;\n \n@@ -238,6 +234,8 @@ pub struct ReturnTypeImplTraits {\n     pub(crate) impl_traits: Vec<ReturnTypeImplTrait>,\n }\n \n+has_interner!(ReturnTypeImplTraits);\n+\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub(crate) struct ReturnTypeImplTrait {\n     pub(crate) bounds: Binders<Vec<QuantifiedWhereClause>>,"}]}