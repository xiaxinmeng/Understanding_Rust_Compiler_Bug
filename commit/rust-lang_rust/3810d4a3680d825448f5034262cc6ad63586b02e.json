{"sha": "3810d4a3680d825448f5034262cc6ad63586b02e", "node_id": "C_kwDOAAsO6NoAKDM4MTBkNGEzNjgwZDgyNTQ0OGY1MDM0MjYyY2M2YWQ2MzU4NmIwMmU", "commit": {"author": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-09-01T04:43:03Z"}, "committer": {"name": "Martin Nordholts", "email": "enselic@gmail.com", "date": "2022-09-01T04:45:04Z"}, "message": "unix_sigpipe: Make `sigpipe` param docs long-form", "tree": {"sha": "e0a48858cc2b6164b952177fef1c481297034a17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0a48858cc2b6164b952177fef1c481297034a17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3810d4a3680d825448f5034262cc6ad63586b02e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3810d4a3680d825448f5034262cc6ad63586b02e", "html_url": "https://github.com/rust-lang/rust/commit/3810d4a3680d825448f5034262cc6ad63586b02e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3810d4a3680d825448f5034262cc6ad63586b02e/comments", "author": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Enselic", "id": 115040, "node_id": "MDQ6VXNlcjExNTA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/115040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Enselic", "html_url": "https://github.com/Enselic", "followers_url": "https://api.github.com/users/Enselic/followers", "following_url": "https://api.github.com/users/Enselic/following{/other_user}", "gists_url": "https://api.github.com/users/Enselic/gists{/gist_id}", "starred_url": "https://api.github.com/users/Enselic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Enselic/subscriptions", "organizations_url": "https://api.github.com/users/Enselic/orgs", "repos_url": "https://api.github.com/users/Enselic/repos", "events_url": "https://api.github.com/users/Enselic/events{/privacy}", "received_events_url": "https://api.github.com/users/Enselic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d1a4e4f2792948d78b3fed030e93c9c156fe35a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d1a4e4f2792948d78b3fed030e93c9c156fe35a", "html_url": "https://github.com/rust-lang/rust/commit/3d1a4e4f2792948d78b3fed030e93c9c156fe35a"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "98f6cc7aa3ea152aa424a58f95e15046bf6dbfde", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3810d4a3680d825448f5034262cc6ad63586b02e/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3810d4a3680d825448f5034262cc6ad63586b02e/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=3810d4a3680d825448f5034262cc6ad63586b02e", "patch": "@@ -72,8 +72,25 @@ macro_rules! rtunwrap {\n // Runs before `main`.\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n-// The extra parameter `sigpipe` allows rustc to generate code that instructs std whether\n-// or not to ignore `SIGPIPE`.\n+//\n+// # The `sigpipe` parameter\n+//\n+// Since 2014, the Rust runtime on Unix has set the `SIGPIPE` handler to\n+// `SIG_IGN`. Applications have good reasons to want a different behavior\n+// though, so there is a `#[unix_sigpipe = \"...\"]` attribute on `fn main()` that\n+// can be used to select how `SIGPIPE` shall be setup (if changed at all) before\n+// `fn main()` is called. See <https://github.com/rust-lang/rust/issues/97889>\n+// for more info.\n+//\n+// The `sigpipe` parameter to this function gets its value via the code that\n+// rustc generates to invoke `fn lang_start()`. The reason we have `sigpipe` for\n+// all platforms and not only Unix, is because std is not allowed to have `cfg`\n+// directives as this high level. See the module docs in\n+// `src/tools/tidy/src/pal.rs` for more info. On all other platforms, `sigpipe`\n+// has a value, but its value is ignored.\n+//\n+// Even though it is an `u8`, it only ever has 3 values. These are documented in\n+// `compiler/rustc_session/src/config/sigpipe.rs`.\n #[cfg_attr(test, allow(dead_code))]\n unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n     unsafe {"}, {"sha": "c84e292eac152b0dd45d65922fedd7aabc39868f", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3810d4a3680d825448f5034262cc6ad63586b02e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3810d4a3680d825448f5034262cc6ad63586b02e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=3810d4a3680d825448f5034262cc6ad63586b02e", "patch": "@@ -49,8 +49,7 @@ pub fn init(argc: isize, argv: *const *const u8, _sigpipe: u8) {}\n #[cfg(not(target_os = \"espidf\"))]\n // SAFETY: must be called only once during runtime initialization.\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n-// The extra parameter `sigpipe` allows rustc to generate code that instructs std whether\n-// or not to ignore `SIGPIPE`.\n+// See `fn init()` in `library/std/src/rt.rs` for docs on `sigpipe`.\n pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n     // The standard streams might be closed on application startup. To prevent\n     // std::io::{stdin, stdout,stderr} objects from using other unrelated file"}]}