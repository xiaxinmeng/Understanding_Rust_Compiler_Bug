{"sha": "aefcbf275804f558ab18e83bfc8869187713b4ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlZmNiZjI3NTgwNGY1NThhYjE4ZTgzYmZjODg2OTE4NzcxM2I0YWQ=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-04-05T14:37:24Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-04-05T14:37:24Z"}, "message": "Pass interner to ProjectionTy::self_type_parameter", "tree": {"sha": "acce29c3d04b16434a3d031c8b0d698c7707dc97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acce29c3d04b16434a3d031c8b0d698c7707dc97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aefcbf275804f558ab18e83bfc8869187713b4ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aefcbf275804f558ab18e83bfc8869187713b4ad", "html_url": "https://github.com/rust-lang/rust/commit/aefcbf275804f558ab18e83bfc8869187713b4ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aefcbf275804f558ab18e83bfc8869187713b4ad/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fab1c066464022613729a6d714dc83b7d698ece5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab1c066464022613729a6d714dc83b7d698ece5", "html_url": "https://github.com/rust-lang/rust/commit/fab1c066464022613729a6d714dc83b7d698ece5"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "965476a050a2a12be275d6f3ee06445457f4d2bb", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aefcbf275804f558ab18e83bfc8869187713b4ad/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefcbf275804f558ab18e83bfc8869187713b4ad/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=aefcbf275804f558ab18e83bfc8869187713b4ad", "patch": "@@ -251,7 +251,7 @@ impl HirDisplay for ProjectionTy {\n         }\n \n         let trait_ = f.db.trait_data(self.trait_(f.db));\n-        let first_parameter = self.self_type_parameter().into_displayable(\n+        let first_parameter = self.self_type_parameter(&Interner).into_displayable(\n             f.db,\n             f.max_size,\n             f.omit_verbose_types,\n@@ -602,7 +602,7 @@ impl HirDisplay for Ty {\n                                 WhereClause::AliasEq(AliasEq {\n                                     alias: AliasTy::Projection(proj),\n                                     ty: _,\n-                                }) => proj.self_type_parameter() == self,\n+                                }) => proj.self_type_parameter(&Interner) == self,\n                                 _ => false,\n                             })\n                             .collect::<Vec<_>>();"}, {"sha": "80dd7aaca0e443b8e4154c99fd6bc2900b040da0", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aefcbf275804f558ab18e83bfc8869187713b4ad/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefcbf275804f558ab18e83bfc8869187713b4ad/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=aefcbf275804f558ab18e83bfc8869187713b4ad", "patch": "@@ -78,8 +78,8 @@ impl ProjectionTy {\n         }\n     }\n \n-    pub fn self_type_parameter(&self) -> &Ty {\n-        &self.substitution.interned()[0].assert_ty_ref(&Interner)\n+    pub fn self_type_parameter(&self, interner: &Interner) -> &Ty {\n+        &self.substitution.interned()[0].assert_ty_ref(interner)\n     }\n \n     fn trait_(&self, db: &dyn HirDatabase) -> TraitId {\n@@ -477,7 +477,7 @@ impl Ty {\n                                 WhereClause::AliasEq(AliasEq {\n                                     alias: AliasTy::Projection(proj),\n                                     ty: _,\n-                                }) => proj.self_type_parameter() == self,\n+                                }) => proj.self_type_parameter(&Interner) == self,\n                                 _ => false,\n                             })\n                             .collect_vec();"}, {"sha": "c8883485c062f6e9bf125d50a20440a0e807959e", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aefcbf275804f558ab18e83bfc8869187713b4ad/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefcbf275804f558ab18e83bfc8869187713b4ad/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=aefcbf275804f558ab18e83bfc8869187713b4ad", "patch": "@@ -89,7 +89,7 @@ pub(crate) fn trait_solve_query(\n         ..\n     })) = &goal.value.goal\n     {\n-        if let TyKind::BoundVar(_) = projection_ty.self_type_parameter().kind(&Interner) {\n+        if let TyKind::BoundVar(_) = projection_ty.self_type_parameter(&Interner).kind(&Interner) {\n             // Hack: don't ask Chalk to normalize with an unknown self type, it'll say that's impossible\n             return Some(Solution::Ambig(Guidance::Unknown));\n         }"}, {"sha": "240f9d45674ce0405990f58bc3425b4f9d3cfd3d", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aefcbf275804f558ab18e83bfc8869187713b4ad/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefcbf275804f558ab18e83bfc8869187713b4ad/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=aefcbf275804f558ab18e83bfc8869187713b4ad", "patch": "@@ -552,7 +552,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n             Some(make_binders(rust_ir::InlineBound::TraitBound(trait_bound), pred.num_binders))\n         }\n         WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(projection_ty), ty }) => {\n-            if projection_ty.self_type_parameter() != &self_ty_shifted_in {\n+            if projection_ty.self_type_parameter(&Interner) != &self_ty_shifted_in {\n                 return None;\n             }\n             let trait_ = projection_ty.trait_(db);"}]}