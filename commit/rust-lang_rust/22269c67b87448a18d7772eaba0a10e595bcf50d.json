{"sha": "22269c67b87448a18d7772eaba0a10e595bcf50d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjY5YzY3Yjg3NDQ4YTE4ZDc3NzJlYWJhMGExMGU1OTViY2Y1MGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T07:56:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T07:56:15Z"}, "message": "Cleanup", "tree": {"sha": "7961ec887fdc2ff25ee5a046ff9159e2addf1d6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7961ec887fdc2ff25ee5a046ff9159e2addf1d6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22269c67b87448a18d7772eaba0a10e595bcf50d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22269c67b87448a18d7772eaba0a10e595bcf50d", "html_url": "https://github.com/rust-lang/rust/commit/22269c67b87448a18d7772eaba0a10e595bcf50d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22269c67b87448a18d7772eaba0a10e595bcf50d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ef9ef34c6489e9a63790d2355e8ce279a511612", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef9ef34c6489e9a63790d2355e8ce279a511612", "html_url": "https://github.com/rust-lang/rust/commit/3ef9ef34c6489e9a63790d2355e8ce279a511612"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "79ed303882549c02f3f9a2f0bd019a09878714da", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/22269c67b87448a18d7772eaba0a10e595bcf50d/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22269c67b87448a18d7772eaba0a10e595bcf50d/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=22269c67b87448a18d7772eaba0a10e595bcf50d", "patch": "@@ -1,5 +1,3 @@\n-use std::iter::once;\n-\n use hir::{\n     Adt, AsAssocItem, AssocItemContainer, Documentation, FieldSource, HasSource, HirDisplay,\n     Module, ModuleDef, ModuleSource, Semantics,\n@@ -211,7 +209,11 @@ fn goto_type_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n                 .into_iter()\n                 .filter_map(|it| {\n                     Some(HoverGotoTypeData {\n-                        mod_path: mod_path(db, &it)?,\n+                        mod_path: render_path(\n+                            db,\n+                            it.module(db)?,\n+                            it.name(db).map(|name| name.to_string()),\n+                        ),\n                         nav: it.try_to_nav(db)?,\n                     })\n                 })\n@@ -253,27 +255,19 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n     .map(|name| name.to_string())\n }\n \n-fn determine_mod_path(db: &RootDatabase, module: Module, name: Option<String>) -> String {\n-    once(db.crate_graph()[module.krate().into()].display_name.as_ref().map(ToString::to_string))\n-        .chain(\n-            module\n-                .path_to_root(db)\n-                .into_iter()\n-                .rev()\n-                .map(|it| it.name(db).map(|name| name.to_string())),\n-        )\n-        .chain(once(name))\n-        .flatten()\n-        .join(\"::\")\n-}\n-\n-// returns None only for ModuleDef::BuiltinType\n-fn mod_path(db: &RootDatabase, item: &ModuleDef) -> Option<String> {\n-    Some(determine_mod_path(db, item.module(db)?, item.name(db).map(|name| name.to_string())))\n+fn render_path(db: &RootDatabase, module: Module, item_name: Option<String>) -> String {\n+    let crate_name =\n+        db.crate_graph()[module.krate().into()].display_name.as_ref().map(ToString::to_string);\n+    let module_path = module\n+        .path_to_root(db)\n+        .into_iter()\n+        .rev()\n+        .flat_map(|it| it.name(db).map(|name| name.to_string()));\n+    crate_name.into_iter().chain(module_path).chain(item_name).join(\"::\")\n }\n \n fn definition_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n-    def.module(db).map(|module| determine_mod_path(db, module, definition_owner_name(db, def)))\n+    def.module(db).map(|module| render_path(db, module, definition_owner_name(db, def)))\n }\n \n fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<String> {"}]}