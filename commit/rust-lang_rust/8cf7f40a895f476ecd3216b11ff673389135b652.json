{"sha": "8cf7f40a895f476ecd3216b11ff673389135b652", "node_id": "C_kwDOAAsO6NoAKDhjZjdmNDBhODk1ZjQ3NmVjZDMyMTZiMTFmZjY3MzM4OTEzNWI2NTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-30T20:41:02Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-13T23:06:29Z"}, "message": "Check ADT fields for copy implementations considering regions", "tree": {"sha": "5d563f3db175e808bc4ca5679e22ee11d4086743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d563f3db175e808bc4ca5679e22ee11d4086743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cf7f40a895f476ecd3216b11ff673389135b652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf7f40a895f476ecd3216b11ff673389135b652", "html_url": "https://github.com/rust-lang/rust/commit/8cf7f40a895f476ecd3216b11ff673389135b652", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cf7f40a895f476ecd3216b11ff673389135b652/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "html_url": "https://github.com/rust-lang/rust/commit/0b90256ada21c6a81b4c18f2c7a23151ab5fc232"}], "stats": {"total": 109, "additions": 83, "deletions": 26}, "files": [{"sha": "0926d5ccf2d57016f5e83923a8cdd731a9a55d9b", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7f40a895f476ecd3216b11ff673389135b652/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7f40a895f476ecd3216b11ff673389135b652/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=8cf7f40a895f476ecd3216b11ff673389135b652", "patch": "@@ -13,7 +13,9 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::adjustment::CoerceUnsizedInfo;\n use rustc_middle::ty::{self, suggest_constraining_type_params, Ty, TyCtxt, TypeVisitable};\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n-use rustc_trait_selection::traits::misc::{can_type_implement_copy, CopyImplementationError};\n+use rustc_trait_selection::traits::misc::{\n+    type_allowed_to_implement_copy, CopyImplementationError,\n+};\n use rustc_trait_selection::traits::predicate_for_trait_def;\n use rustc_trait_selection::traits::{self, ObligationCause};\n use std::collections::BTreeMap;\n@@ -82,7 +84,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     };\n \n     let cause = traits::ObligationCause::misc(span, impl_hir_id);\n-    match can_type_implement_copy(tcx, param_env, self_type, cause) {\n+    match type_allowed_to_implement_copy(tcx, param_env, self_type, cause) {\n         Ok(()) => {}\n         Err(CopyImplementationError::InfrigingFields(fields)) => {\n             let mut err = struct_span_err!("}, {"sha": "fe188162cf85bee0c694155f9abcc97057981e88", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7f40a895f476ecd3216b11ff673389135b652/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7f40a895f476ecd3216b11ff673389135b652/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=8cf7f40a895f476ecd3216b11ff673389135b652", "patch": "@@ -72,7 +72,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, InnerSpan, Span};\n use rustc_target::abi::{Abi, VariantIdx};\n use rustc_trait_selection::infer::{InferCtxtExt, TyCtxtInferExt};\n-use rustc_trait_selection::traits::{self, misc::can_type_implement_copy, EvaluationResult};\n+use rustc_trait_selection::traits::{self, misc::type_allowed_to_implement_copy};\n \n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n@@ -709,12 +709,14 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n \n         // We shouldn't recommend implementing `Copy` on stateful things,\n         // such as iterators.\n-        if let Some(iter_trait) = cx.tcx.get_diagnostic_item(sym::Iterator) {\n-            if cx.tcx.infer_ctxt().build().type_implements_trait(iter_trait, [ty], param_env)\n-                == EvaluationResult::EvaluatedToOk\n-            {\n-                return;\n-            }\n+        if let Some(iter_trait) = cx.tcx.get_diagnostic_item(sym::Iterator)\n+            && cx.tcx\n+                .infer_ctxt()\n+                .build()\n+                .type_implements_trait(iter_trait, [ty], param_env)\n+                .must_apply_modulo_regions()\n+        {\n+            return;\n         }\n \n         // Default value of clippy::trivially_copy_pass_by_ref\n@@ -726,7 +728,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n             }\n         }\n \n-        if can_type_implement_copy(\n+        if type_allowed_to_implement_copy(\n             cx.tcx,\n             param_env,\n             ty,"}, {"sha": "b87412f7de16033a3a14972f2df6287225550a5a", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7f40a895f476ecd3216b11ff673389135b652/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7f40a895f476ecd3216b11ff673389135b652/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=8cf7f40a895f476ecd3216b11ff673389135b652", "patch": "@@ -1,9 +1,9 @@\n //! Miscellaneous type-system utilities that are too small to deserve their own modules.\n \n-use crate::infer::InferCtxtExt as _;\n use crate::traits::{self, ObligationCause};\n \n use rustc_hir as hir;\n+use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n \n@@ -16,14 +16,16 @@ pub enum CopyImplementationError<'tcx> {\n     HasDestructor,\n }\n \n-pub fn can_type_implement_copy<'tcx>(\n+/// Checks that the fields of the type (an ADT) all implement copy.\n+///\n+/// If fields don't implement copy, return an error containing a list of\n+/// those violating fields. If it's not an ADT, returns `Err(NotAnAdt)`.\n+pub fn type_allowed_to_implement_copy<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     self_type: Ty<'tcx>,\n     parent_cause: ObligationCause<'tcx>,\n ) -> Result<(), CopyImplementationError<'tcx>> {\n-    // FIXME: (@jroesch) float this code up\n-    let infcx = tcx.infer_ctxt().build();\n     let (adt, substs) = match self_type.kind() {\n         // These types used to have a builtin impl.\n         // Now libcore provides that impl.\n@@ -42,9 +44,14 @@ pub fn can_type_implement_copy<'tcx>(\n         _ => return Err(CopyImplementationError::NotAnAdt),\n     };\n \n+    let copy_def_id = tcx.require_lang_item(hir::LangItem::Copy, Some(parent_cause.span));\n     let mut infringing = Vec::new();\n     for variant in adt.variants() {\n         for field in &variant.fields {\n+            // Do this per-field to get better error messages.\n+            let infcx = tcx.infer_ctxt().build();\n+            let ocx = traits::ObligationCtxt::new(&infcx);\n+\n             let ty = field.ty(tcx, substs);\n             if ty.references_error() {\n                 continue;\n@@ -63,21 +70,36 @@ pub fn can_type_implement_copy<'tcx>(\n             } else {\n                 ObligationCause::dummy_with_span(span)\n             };\n-            match traits::fully_normalize(&infcx, cause, param_env, ty) {\n-                Ok(ty) => {\n-                    if !infcx.type_is_copy_modulo_regions(param_env, ty, span) {\n-                        infringing.push((field, ty));\n-                    }\n-                }\n-                Err(errors) => {\n-                    infcx.err_ctxt().report_fulfillment_errors(&errors, None);\n-                }\n-            };\n+\n+            let ty = ocx.normalize(&cause, param_env, ty);\n+            let normalization_errors = ocx.select_where_possible();\n+            if !normalization_errors.is_empty() {\n+                // Don't report this as a field that doesn't implement Copy,\n+                // but instead just implement this as a field that isn't WF.\n+                infcx.err_ctxt().report_fulfillment_errors(&normalization_errors, None);\n+                continue;\n+            }\n+\n+            ocx.register_bound(cause, param_env, ty, copy_def_id);\n+            if !ocx.select_all_or_error().is_empty() {\n+                infringing.push((field, ty));\n+            }\n+\n+            let outlives_env = OutlivesEnvironment::new(param_env);\n+            infcx.process_registered_region_obligations(\n+                outlives_env.region_bound_pairs(),\n+                param_env,\n+            );\n+            if !infcx.resolve_regions(&outlives_env).is_empty() {\n+                infringing.push((field, ty));\n+            }\n         }\n     }\n+\n     if !infringing.is_empty() {\n         return Err(CopyImplementationError::InfrigingFields(infringing));\n     }\n+\n     if adt.has_dtor(tcx) {\n         return Err(CopyImplementationError::HasDestructor);\n     }"}, {"sha": "1c4d2136677d0b2ad17d9f5a44a35802af5772c8", "filename": "src/test/ui/traits/copy-is-not-modulo-regions.not_static.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7f40a895f476ecd3216b11ff673389135b652/src%2Ftest%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.not_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7f40a895f476ecd3216b11ff673389135b652/src%2Ftest%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.not_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.not_static.stderr?ref=8cf7f40a895f476ecd3216b11ff673389135b652", "patch": "@@ -0,0 +1,12 @@\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/copy-is-not-modulo-regions.rs:13:21\n+   |\n+LL | struct Bar<'lt>(Foo<'lt>);\n+   |                 -------- this field does not implement `Copy`\n+...\n+LL | impl<'any> Copy for Bar<'any> {}\n+   |                     ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0204`."}, {"sha": "adb8702376977697ec6fded585c425e43838330a", "filename": "src/test/ui/traits/copy-is-not-modulo-regions.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7f40a895f476ecd3216b11ff673389135b652/src%2Ftest%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7f40a895f476ecd3216b11ff673389135b652/src%2Ftest%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcopy-is-not-modulo-regions.rs?ref=8cf7f40a895f476ecd3216b11ff673389135b652", "patch": "@@ -0,0 +1,19 @@\n+// revisions: not_static yes_static\n+//[yes_static] check-pass\n+\n+#[derive(Clone)]\n+struct Foo<'lt>(&'lt ());\n+\n+impl Copy for Foo<'static> {}\n+\n+#[derive(Clone)]\n+struct Bar<'lt>(Foo<'lt>);\n+\n+#[cfg(not_static)]\n+impl<'any> Copy for Bar<'any> {}\n+//[not_static]~^ the trait `Copy` may not be implemented for this type\n+\n+#[cfg(yes_static)]\n+impl<'any> Copy for Bar<'static> {}\n+\n+fn main() {}"}, {"sha": "8c9d4c5cfe66fae84961b8ab9020b7313adc2bd3", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cf7f40a895f476ecd3216b11ff673389135b652/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf7f40a895f476ecd3216b11ff673389135b652/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=8cf7f40a895f476ecd3216b11ff673389135b652", "patch": "@@ -24,7 +24,7 @@ use rustc_span::symbol::kw;\n use rustc_span::{sym, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits;\n-use rustc_trait_selection::traits::misc::can_type_implement_copy;\n+use rustc_trait_selection::traits::misc::type_allowed_to_implement_copy;\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n@@ -200,7 +200,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                     let sugg = |diag: &mut Diagnostic| {\n                         if let ty::Adt(def, ..) = ty.kind() {\n                             if let Some(span) = cx.tcx.hir().span_if_local(def.did()) {\n-                                if can_type_implement_copy(\n+                                if type_allowed_to_implement_copy(\n                                     cx.tcx,\n                                     cx.param_env,\n                                     ty,"}]}