{"sha": "6f6fe38b19339265397fc199c61df37772bef54c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmNmZlMzhiMTkzMzkyNjUzOTdmYzE5OWM2MWRmMzc3NzJiZWY1NGM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-20T06:00:06Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-20T06:00:06Z"}, "message": "parse/lexer: support `StringReader::retokenize` called on external files.", "tree": {"sha": "cbf10faa921fb4038b248222d120ee18118fd93e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbf10faa921fb4038b248222d120ee18118fd93e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f6fe38b19339265397fc199c61df37772bef54c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6fe38b19339265397fc199c61df37772bef54c", "html_url": "https://github.com/rust-lang/rust/commit/6f6fe38b19339265397fc199c61df37772bef54c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f6fe38b19339265397fc199c61df37772bef54c/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4c675c476c18b1a11041193f2f59d695b126bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4c675c476c18b1a11041193f2f59d695b126bc8", "html_url": "https://github.com/rust-lang/rust/commit/f4c675c476c18b1a11041193f2f59d695b126bc8"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "6c0b2c40c76221db44b5ff2925d6e9b77069bd6b", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fe38b19339265397fc199c61df37772bef54c/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fe38b19339265397fc199c61df37772bef54c/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=6f6fe38b19339265397fc199c61df37772bef54c", "patch": "@@ -46,12 +46,20 @@ impl<'a> StringReader<'a> {\n         source_file: Lrc<rustc_span::SourceFile>,\n         override_span: Option<Span>,\n     ) -> Self {\n-        if source_file.src.is_none() {\n+        // Make sure external source is loaded first, before accessing it.\n+        // While this can't show up during normal parsing, `retokenize` may\n+        // be called with a source file from an external crate.\n+        sess.source_map().ensure_source_file_source_present(source_file.clone());\n+\n+        // FIXME(eddyb) use `Lrc<str>` or similar to avoid cloning the `String`.\n+        let src = if let Some(src) = &source_file.src {\n+            src.clone()\n+        } else if let Some(src) = source_file.external_src.borrow().get_source() {\n+            src.clone()\n+        } else {\n             sess.span_diagnostic\n                 .bug(&format!(\"cannot lex `source_file` without source: {}\", source_file.name));\n-        }\n-\n-        let src = (*source_file.src.as_ref().unwrap()).clone();\n+        };\n \n         StringReader {\n             sess,"}, {"sha": "28864737072b291051012d2349b06587c0cd21bf", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f6fe38b19339265397fc199c61df37772bef54c/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f6fe38b19339265397fc199c61df37772bef54c/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=6f6fe38b19339265397fc199c61df37772bef54c", "patch": "@@ -856,7 +856,7 @@ pub enum ExternalSource {\n #[derive(PartialEq, Eq, Clone, Debug)]\n pub enum ExternalSourceKind {\n     /// The external source has been loaded already.\n-    Present(String),\n+    Present(Lrc<String>),\n     /// No attempt has been made to load the external source.\n     AbsentOk,\n     /// A failed attempt has been made to load the external source.\n@@ -872,7 +872,7 @@ impl ExternalSource {\n         }\n     }\n \n-    pub fn get_source(&self) -> Option<&str> {\n+    pub fn get_source(&self) -> Option<&Lrc<String>> {\n         match self {\n             ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),\n             _ => None,\n@@ -1138,7 +1138,7 @@ impl SourceFile {\n                     hasher.write(src.as_bytes());\n \n                     if hasher.finish::<u128>() == self.src_hash {\n-                        *src_kind = ExternalSourceKind::Present(src);\n+                        *src_kind = ExternalSourceKind::Present(Lrc::new(src));\n                         return true;\n                     }\n                 } else {"}]}