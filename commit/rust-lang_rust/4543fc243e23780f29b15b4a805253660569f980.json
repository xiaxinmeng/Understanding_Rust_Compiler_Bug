{"sha": "4543fc243e23780f29b15b4a805253660569f980", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NDNmYzI0M2UyMzc4MGYyOWIxNWI0YTgwNTI1MzY2MDU2OWY5ODA=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-26T09:24:50Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-01T10:18:48Z"}, "message": "hir: remove NodeId from AnonConst", "tree": {"sha": "77f1beba0452491bfd7d42fa633e306d5933faf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77f1beba0452491bfd7d42fa633e306d5933faf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4543fc243e23780f29b15b4a805253660569f980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4543fc243e23780f29b15b4a805253660569f980", "html_url": "https://github.com/rust-lang/rust/commit/4543fc243e23780f29b15b4a805253660569f980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4543fc243e23780f29b15b4a805253660569f980/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d959f443fb5d191bb06343350a65fd0953eb311c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d959f443fb5d191bb06343350a65fd0953eb311c", "html_url": "https://github.com/rust-lang/rust/commit/d959f443fb5d191bb06343350a65fd0953eb311c"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "bca8d4e7fb004f31cdd7ccdfe8ec09913ce61bee", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4543fc243e23780f29b15b4a805253660569f980", "patch": "@@ -3811,9 +3811,8 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_anon_const(&mut self, c: &AnonConst) -> hir::AnonConst {\n         self.with_new_scopes(|this| {\n-            let LoweredNodeId { node_id, hir_id } = this.lower_node_id(c.id);\n+            let LoweredNodeId { node_id: _, hir_id } = this.lower_node_id(c.id);\n             hir::AnonConst {\n-                id: node_id,\n                 hir_id,\n                 body: this.lower_body(None, |this| this.lower_expr(&c.value)),\n             }"}, {"sha": "33abc918d7320b08bf71f65033073bde434f7bf5", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=4543fc243e23780f29b15b4a805253660569f980", "patch": "@@ -1322,7 +1322,6 @@ impl BodyOwnerKind {\n /// explicit discriminant values for enum variants.\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n pub struct AnonConst {\n-    pub id: NodeId,\n     pub hir_id: HirId,\n     pub body: BodyId,\n }"}, {"sha": "f7066a0eb17b8af0aa5c462df220ba0b004f3b2d", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=4543fc243e23780f29b15b4a805253660569f980", "patch": "@@ -546,7 +546,6 @@ impl_stable_hash_for!(enum hir::UnsafeSource {\n });\n \n impl_stable_hash_for!(struct hir::AnonConst {\n-    id,\n     hir_id,\n     body\n });"}, {"sha": "b4a71b887dc37a629fd73d5aa89218d160914c3e", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=4543fc243e23780f29b15b4a805253660569f980", "patch": "@@ -1667,7 +1667,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'tcx> {\n         intravisit::walk_variant(self, v, g, id);\n \n         if let Some(ref discr) = v.node.disr_expr {\n-            let def_id = self.index.tcx.hir().local_def_id(discr.id);\n+            let def_id = self.index.tcx.hir().local_def_id_from_hir_id(discr.hir_id);\n             self.index.record(def_id, IsolatedEncoder::encode_info_for_anon_const, def_id);\n         }\n     }\n@@ -1719,7 +1719,7 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n     fn encode_info_for_ty(&mut self, ty: &hir::Ty) {\n         match ty.node {\n             hir::TyKind::Array(_, ref length) => {\n-                let def_id = self.tcx.hir().local_def_id(length.id);\n+                let def_id = self.tcx.hir().local_def_id_from_hir_id(length.hir_id);\n                 self.record(def_id, IsolatedEncoder::encode_info_for_anon_const, def_id);\n             }\n             _ => {}"}, {"sha": "0751af9b12affe41a2868170cbeb9e566bc153a8", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=4543fc243e23780f29b15b4a805253660569f980", "patch": "@@ -560,7 +560,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n         // Now comes the rote stuff:\n         hir::ExprKind::Repeat(ref v, ref count) => {\n-            let def_id = cx.tcx.hir().local_def_id(count.id);\n+            let def_id = cx.tcx.hir().local_def_id_from_hir_id(count.hir_id);\n             let substs = InternalSubsts::identity_for_item(cx.tcx.global_tcx(), def_id);\n             let instance = ty::Instance::resolve(\n                 cx.tcx.global_tcx(),"}, {"sha": "37dcaa014596b9e2ffdad3480d8599089c2698cc", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4543fc243e23780f29b15b4a805253660569f980", "patch": "@@ -1798,7 +1798,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n                 self.associated_path_to_ty(ast_ty.hir_id, ast_ty.span, ty, def, segment, false).0\n             }\n             hir::TyKind::Array(ref ty, ref length) => {\n-                let length_def_id = tcx.hir().local_def_id(length.id);\n+                let length_def_id = tcx.hir().local_def_id_from_hir_id(length.hir_id);\n                 let substs = InternalSubsts::identity_for_item(tcx, length_def_id);\n                 let length = ty::LazyConst::Unevaluated(length_def_id, substs);\n                 let length = tcx.mk_lazy_const(length);"}, {"sha": "89ad6d402b68b118f3dec451e6a4f6085d00d349", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4543fc243e23780f29b15b4a805253660569f980", "patch": "@@ -1870,7 +1870,7 @@ pub fn check_enum<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     for v in vs {\n         if let Some(ref e) = v.node.disr_expr {\n-            tcx.typeck_tables_of(tcx.hir().local_def_id(e.id));\n+            tcx.typeck_tables_of(tcx.hir().local_def_id_from_hir_id(e.hir_id));\n         }\n     }\n \n@@ -4552,7 +4552,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 tcx.mk_array(element_ty, args.len() as u64)\n             }\n             ExprKind::Repeat(ref element, ref count) => {\n-                let count_def_id = tcx.hir().local_def_id(count.id);\n+                let count_def_id = tcx.hir().local_def_id_from_hir_id(count.hir_id);\n                 let param_env = ty::ParamEnv::empty();\n                 let substs = InternalSubsts::identity_for_item(tcx.global_tcx(), count_def_id);\n                 let instance = ty::Instance::resolve("}, {"sha": "a777ac3e0a68a3cd0cd59c8ce5e93710a8841d00", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4543fc243e23780f29b15b4a805253660569f980", "patch": "@@ -532,7 +532,7 @@ fn convert_enum_variant_types<'a, 'tcx>(\n         let wrapped_discr = prev_discr.map_or(initial, |d| d.wrap_incr(tcx));\n         prev_discr = Some(\n             if let Some(ref e) = variant.node.disr_expr {\n-                let expr_did = tcx.hir().local_def_id(e.id);\n+                let expr_did = tcx.hir().local_def_id_from_hir_id(e.hir_id);\n                 def.eval_explicit_discr(tcx, expr_did)\n             } else if let Some(discr) = repr_type.disr_incr(tcx, prev_discr) {\n                 Some(discr)\n@@ -637,7 +637,7 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Ad\n                         let did = tcx.hir().local_def_id(v.node.data.id());\n                         let discr = if let Some(ref e) = v.node.disr_expr {\n                             distance_from_explicit = 0;\n-                            ty::VariantDiscr::Explicit(tcx.hir().local_def_id(e.id))\n+                            ty::VariantDiscr::Explicit(tcx.hir().local_def_id_from_hir_id(e.hir_id))\n                         } else {\n                             ty::VariantDiscr::Relative(distance_from_explicit)\n                         };\n@@ -1142,11 +1142,11 @@ fn report_assoc_ty_on_inherent_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, span:\n fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     use rustc::hir::*;\n \n-    let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n+    let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n     let icx = ItemCtxt::new(tcx, def_id);\n \n-    match tcx.hir().get(node_id) {\n+    match tcx.hir().get_by_hir_id(hir_id) {\n         Node::TraitItem(item) => match item.node {\n             TraitItemKind::Method(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n@@ -1166,7 +1166,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n             ImplItemKind::Const(ref ty, _) => icx.to_ty(ty),\n             ImplItemKind::Existential(_) => {\n                 if tcx\n-                    .impl_trait_ref(tcx.hir().get_parent_did(node_id))\n+                    .impl_trait_ref(tcx.hir().get_parent_did_by_hir_id(hir_id))\n                     .is_none()\n                 {\n                     report_assoc_ty_on_inherent_impl(tcx, item.span);\n@@ -1176,7 +1176,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n             }\n             ImplItemKind::Type(ref ty) => {\n                 if tcx\n-                    .impl_trait_ref(tcx.hir().get_parent_did(node_id))\n+                    .impl_trait_ref(tcx.hir().get_parent_did_by_hir_id(hir_id))\n                     .is_none()\n                 {\n                     report_assoc_ty_on_inherent_impl(tcx, item.span);\n@@ -1259,7 +1259,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n             ..\n         }) => match *def {\n             VariantData::Unit(..) | VariantData::Struct(..) => {\n-                tcx.type_of(tcx.hir().get_parent_did(node_id))\n+                tcx.type_of(tcx.hir().get_parent_did_by_hir_id(hir_id))\n             }\n             VariantData::Tuple(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n@@ -1274,7 +1274,6 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n             ..\n         }) => {\n             if gen.is_some() {\n-                let hir_id = tcx.hir().node_to_hir_id(node_id);\n                 return tcx.typeck_tables_of(def_id).node_type(hir_id);\n             }\n \n@@ -1285,7 +1284,9 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n             tcx.mk_closure(def_id, substs)\n         }\n \n-        Node::AnonConst(_) => match tcx.hir().get(tcx.hir().get_parent_node(node_id)) {\n+        Node::AnonConst(_) => match tcx.hir().get_by_hir_id(\n+            tcx.hir().get_parent_node_by_hir_id(hir_id))\n+        {\n             Node::Ty(&hir::Ty {\n                 node: hir::TyKind::Array(_, ref constant),\n                 ..\n@@ -1297,7 +1298,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n             | Node::Expr(&hir::Expr {\n                 node: ExprKind::Repeat(_, ref constant),\n                 ..\n-            }) if constant.id == node_id =>\n+            }) if constant.hir_id == hir_id =>\n             {\n                 tcx.types.usize\n             }\n@@ -1309,9 +1310,9 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n                         ..\n                     },\n                 ..\n-            }) if e.id == node_id =>\n+            }) if e.hir_id == hir_id =>\n             {\n-                tcx.adt_def(tcx.hir().get_parent_did(node_id))\n+                tcx.adt_def(tcx.hir().get_parent_did_by_hir_id(hir_id))\n                     .repr\n                     .discr_type()\n                     .to_ty(tcx)"}, {"sha": "032452115d6f34463483544c74e8fc7a92095cf4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4543fc243e23780f29b15b4a805253660569f980/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4543fc243e23780f29b15b4a805253660569f980", "patch": "@@ -2531,7 +2531,7 @@ impl Clean<Type> for hir::Ty {\n             }\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n             TyKind::Array(ref ty, ref length) => {\n-                let def_id = cx.tcx.hir().local_def_id(length.id);\n+                let def_id = cx.tcx.hir().local_def_id_from_hir_id(length.hir_id);\n                 let param_env = cx.tcx.param_env(def_id);\n                 let substs = InternalSubsts::identity_for_item(cx.tcx, def_id);\n                 let cid = GlobalId {"}]}