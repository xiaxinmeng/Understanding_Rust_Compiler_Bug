{"sha": "68db5869e3b64ed13390454484bb977d2e202afa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZGI1ODY5ZTNiNjRlZDEzMzkwNDU0NDg0YmI5NzdkMmUyMDJhZmE=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-22T23:32:24Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-22T23:32:24Z"}, "message": "Remove unnecessary `diag` parameter to `after_krate`", "tree": {"sha": "31212007d4ff52445ecd1d565780ee772a9d4b1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31212007d4ff52445ecd1d565780ee772a9d4b1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68db5869e3b64ed13390454484bb977d2e202afa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68db5869e3b64ed13390454484bb977d2e202afa", "html_url": "https://github.com/rust-lang/rust/commit/68db5869e3b64ed13390454484bb977d2e202afa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68db5869e3b64ed13390454484bb977d2e202afa/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f435f7185b634733834a61418dc4cba6a58aa1ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/f435f7185b634733834a61418dc4cba6a58aa1ec", "html_url": "https://github.com/rust-lang/rust/commit/f435f7185b634733834a61418dc4cba6a58aa1ec"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "e6d97499b2c40945bb1ea177ec56c73b50300863", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68db5869e3b64ed13390454484bb977d2e202afa/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68db5869e3b64ed13390454484bb977d2e202afa/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=68db5869e3b64ed13390454484bb977d2e202afa", "patch": "@@ -41,9 +41,7 @@ crate trait FormatRenderer<'tcx>: Sized {\n     fn mod_item_out(&mut self, item_name: &str) -> Result<(), Error>;\n \n     /// Post processing hook for cleanup and dumping output to files.\n-    ///\n-    /// A handler is available if the renderer wants to report errors.\n-    fn after_krate(&mut self, diag: &rustc_errors::Handler) -> Result<(), Error>;\n+    fn after_krate(&mut self) -> Result<(), Error>;\n \n     fn cache(&self) -> &Cache;\n }\n@@ -53,7 +51,6 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     krate: clean::Crate,\n     options: RenderOptions,\n     cache: Cache,\n-    diag: &rustc_errors::Handler,\n     edition: Edition,\n     tcx: TyCtxt<'tcx>,\n ) -> Result<(), Error> {\n@@ -101,5 +98,5 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n         }\n     }\n     prof.extra_verbose_generic_activity(\"renderer_after_krate\", T::descr())\n-        .run(|| format_renderer.after_krate(diag))\n+        .run(|| format_renderer.after_krate())\n }"}, {"sha": "afdba5f0579f529790f7bc4ab96f9a03142905eb", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/68db5869e3b64ed13390454484bb977d2e202afa/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68db5869e3b64ed13390454484bb977d2e202afa/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=68db5869e3b64ed13390454484bb977d2e202afa", "patch": "@@ -494,7 +494,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         }\n     }\n \n-    fn after_krate(&mut self, diag: &rustc_errors::Handler) -> Result<(), Error> {\n+    fn after_krate(&mut self) -> Result<(), Error> {\n         let crate_name = self.tcx().crate_name(LOCAL_CRATE);\n         let final_file = self.dst.join(&*crate_name.as_str()).join(\"all.html\");\n         let settings_file = self.dst.join(\"settings.html\");\n@@ -569,7 +569,8 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n \n         // Flush pending errors.\n         Rc::get_mut(&mut self.shared).unwrap().fs.close();\n-        let nb_errors = self.shared.errors.iter().map(|err| diag.struct_err(&err).emit()).count();\n+        let nb_errors =\n+            self.shared.errors.iter().map(|err| self.tcx().sess.struct_err(&err).emit()).count();\n         if nb_errors > 0 {\n             Err(Error::new(io::Error::new(io::ErrorKind::Other, \"I/O error\"), \"\"))\n         } else {"}, {"sha": "58b43c83a9d596860123bed93c2cc4051c02d192", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68db5869e3b64ed13390454484bb977d2e202afa/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68db5869e3b64ed13390454484bb977d2e202afa/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=68db5869e3b64ed13390454484bb977d2e202afa", "patch": "@@ -204,7 +204,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         Ok(())\n     }\n \n-    fn after_krate(&mut self, _diag: &rustc_errors::Handler) -> Result<(), Error> {\n+    fn after_krate(&mut self) -> Result<(), Error> {\n         debug!(\"Done with crate\");\n         let mut index = (*self.index).clone().into_inner();\n         index.extend(self.get_trait_items());"}, {"sha": "eefb8ced7af475ff0ad0229b001cf8a8c7e85a9a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/68db5869e3b64ed13390454484bb977d2e202afa/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68db5869e3b64ed13390454484bb977d2e202afa/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=68db5869e3b64ed13390454484bb977d2e202afa", "patch": "@@ -656,14 +656,14 @@ fn run_renderer<'tcx, T: formats::FormatRenderer<'tcx>>(\n     krate: clean::Crate,\n     renderopts: config::RenderOptions,\n     cache: formats::cache::Cache,\n-    diag: &rustc_errors::Handler,\n     edition: rustc_span::edition::Edition,\n     tcx: TyCtxt<'tcx>,\n ) -> MainResult {\n-    match formats::run_format::<T>(krate, renderopts, cache, &diag, edition, tcx) {\n+    match formats::run_format::<T>(krate, renderopts, cache, edition, tcx) {\n         Ok(_) => Ok(()),\n         Err(e) => {\n-            let mut msg = diag.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n+            let mut msg =\n+                tcx.sess.struct_err(&format!(\"couldn't generate documentation: {}\", e.error));\n             let file = e.file.display().to_string();\n             if file.is_empty() {\n                 msg.emit()\n@@ -692,7 +692,7 @@ fn main_options(options: config::Options) -> MainResult {\n \n     // need to move these items separately because we lose them by the time the closure is called,\n     // but we can't create the Handler ahead of time because it's not Send\n-    let diag_opts = (options.error_format, options.edition, options.debugging_opts.clone());\n+    let edition = options.edition;\n     let show_coverage = options.show_coverage;\n     let run_check = options.run_check;\n \n@@ -758,15 +758,12 @@ fn main_options(options: config::Options) -> MainResult {\n                 }\n \n                 info!(\"going to format\");\n-                let (error_format, edition, debugging_options) = diag_opts;\n-                let diag = core::new_handler(error_format, None, &debugging_options);\n                 match output_format {\n                     config::OutputFormat::Html => sess.time(\"render_html\", || {\n                         run_renderer::<html::render::Context<'_>>(\n                             krate,\n                             render_opts,\n                             cache,\n-                            &diag,\n                             edition,\n                             tcx,\n                         )\n@@ -776,7 +773,6 @@ fn main_options(options: config::Options) -> MainResult {\n                             krate,\n                             render_opts,\n                             cache,\n-                            &diag,\n                             edition,\n                             tcx,\n                         )"}]}