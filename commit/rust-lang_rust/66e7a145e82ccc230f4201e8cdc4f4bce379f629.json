{"sha": "66e7a145e82ccc230f4201e8cdc4f4bce379f629", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZTdhMTQ1ZTgyY2NjMjMwZjQyMDFlOGNkYzRmNGJjZTM3OWY2Mjk=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-06-08T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-06-20T07:48:14Z"}, "message": "bootstrap: Factor out common code in supported_sanitizers", "tree": {"sha": "341bcc08a9bb64816b85e11d8254647143f20d5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/341bcc08a9bb64816b85e11d8254647143f20d5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66e7a145e82ccc230f4201e8cdc4f4bce379f629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66e7a145e82ccc230f4201e8cdc4f4bce379f629", "html_url": "https://github.com/rust-lang/rust/commit/66e7a145e82ccc230f4201e8cdc4f4bce379f629", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66e7a145e82ccc230f4201e8cdc4f4bce379f629/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2e6e9373ba8e307a88bfe73c408f218587fdad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e6e9373ba8e307a88bfe73c408f218587fdad9", "html_url": "https://github.com/rust-lang/rust/commit/d2e6e9373ba8e307a88bfe73c408f218587fdad9"}], "stats": {"total": 74, "additions": 29, "deletions": 45}, "files": [{"sha": "0a14957384d28a012b55d4aa70f34c8fe8d86ec6", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 29, "deletions": 45, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/66e7a145e82ccc230f4201e8cdc4f4bce379f629/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66e7a145e82ccc230f4201e8cdc4f4bce379f629/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=66e7a145e82ccc230f4201e8cdc4f4bce379f629", "patch": "@@ -689,57 +689,41 @@ fn supported_sanitizers(\n     target: Interned<String>,\n     channel: &str,\n ) -> Vec<SanitizerRuntime> {\n-    let mut result = Vec::new();\n+    let darwin_libs = |os: &str, components: &[&str]| -> Vec<SanitizerRuntime> {\n+        components\n+            .into_iter()\n+            .map(move |c| SanitizerRuntime {\n+                cmake_target: format!(\"clang_rt.{}_{}_dynamic\", c, os),\n+                path: out_dir\n+                    .join(&format!(\"build/lib/darwin/libclang_rt.{}_{}_dynamic.dylib\", c, os)),\n+                name: format!(\"librustc-{}_rt.{}.dylib\", channel, c),\n+            })\n+            .collect()\n+    };\n+\n+    let common_libs = |os: &str, arch: &str, components: &[&str]| -> Vec<SanitizerRuntime> {\n+        components\n+            .into_iter()\n+            .map(move |c| SanitizerRuntime {\n+                cmake_target: format!(\"clang_rt.{}-{}\", c, arch),\n+                path: out_dir.join(&format!(\"build/lib/{}/libclang_rt.{}-{}.a\", os, c, arch)),\n+                name: format!(\"librustc-{}_rt.{}.a\", channel, c),\n+            })\n+            .collect()\n+    };\n+\n     match &*target {\n-        \"x86_64-apple-darwin\" => {\n-            for s in &[\"asan\", \"lsan\", \"tsan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}_osx_dynamic\", s),\n-                    path: out_dir\n-                        .join(&format!(\"build/lib/darwin/libclang_rt.{}_osx_dynamic.dylib\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.dylib\", channel, s),\n-                });\n-            }\n-        }\n+        \"aarch64-fuchsia\" => common_libs(\"fuchsia\", \"aarch64\", &[\"asan\"]),\n         \"aarch64-unknown-linux-gnu\" => {\n-            for s in &[\"asan\", \"lsan\", \"msan\", \"tsan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}-aarch64\", s),\n-                    path: out_dir.join(&format!(\"build/lib/linux/libclang_rt.{}-aarch64.a\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n-                });\n-            }\n+            common_libs(\"linux\", \"aarch64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n         }\n+        \"x86_64-apple-darwin\" => darwin_libs(\"osx\", &[\"asan\", \"lsan\", \"tsan\"]),\n+        \"x86_64-fuchsia\" => common_libs(\"fuchsia\", \"x86_64\", &[\"asan\"]),\n         \"x86_64-unknown-linux-gnu\" => {\n-            for s in &[\"asan\", \"lsan\", \"msan\", \"tsan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}-x86_64\", s),\n-                    path: out_dir.join(&format!(\"build/lib/linux/libclang_rt.{}-x86_64.a\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n-                });\n-            }\n-        }\n-        \"x86_64-fuchsia\" => {\n-            for s in &[\"asan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}-x86_64\", s),\n-                    path: out_dir.join(&format!(\"build/lib/fuchsia/libclang_rt.{}-x86_64.a\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n-                });\n-            }\n-        }\n-        \"aarch64-fuchsia\" => {\n-            for s in &[\"asan\"] {\n-                result.push(SanitizerRuntime {\n-                    cmake_target: format!(\"clang_rt.{}-aarch64\", s),\n-                    path: out_dir.join(&format!(\"build/lib/fuchsia/libclang_rt.{}-aarch64.a\", s)),\n-                    name: format!(\"librustc-{}_rt.{}.a\", channel, s),\n-                });\n-            }\n+            common_libs(\"linux\", \"x86_64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n         }\n-        _ => {}\n+        _ => Vec::new(),\n     }\n-    result\n }\n \n struct HashStamp {"}]}