{"sha": "f15b346f3adf03a976e9468401e443a3ecb61a71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNWIzNDZmM2FkZjAzYTk3NmU5NDY4NDAxZTQ0M2EzZWNiNjFhNzE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-18T22:21:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-18T22:21:03Z"}, "message": "Rollup merge of #73447 - lzutao:stabilize-result_as_deref, r=dtolnay\n\nImprove document for `Result::as_deref(_mut)` methods\n\ncc #50264", "tree": {"sha": "3826d1ffd99a279f458b2e524a39982c8bd9aead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3826d1ffd99a279f458b2e524a39982c8bd9aead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f15b346f3adf03a976e9468401e443a3ecb61a71", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe6+jPCRBK7hj4Ov3rIwAAdHIIAHti8IA/uSsaXt5/QvDZKb/F\nTTxoC5G0HE9GeCob57BPLrwgE2iG7b/WUrrq4ZsZ8wK2DYu7/65OcBT5lANak+6f\nkqfq5RxqdwHnfkmo6btXvvq4xvdFjqydvlFAQN3Ai1SYN7aMtaDOLzck0woWDW2s\nkm0M5DTviiy6U1icbAwSkdXnzZ/N0WO7Z1UMG/iqAaj++ndZ/CCPcNe6mkjnDnVu\ngP6kel6ej3eX70dSquTBQmwAodeQluo5yVwRri9Uh/pjebpILZR5X0h1P1m3Q9Hq\nx/vSEwo305ERLZbSvF7o9ep0DxiOjHU6NS1p6iO490r/AxrSuqxA991dIvi+3YQ=\n=bpNi\n-----END PGP SIGNATURE-----\n", "payload": "tree 3826d1ffd99a279f458b2e524a39982c8bd9aead\nparent 1db7dc4794f0a8cf2fafb26ed97f2067321b198c\nparent 4e77214583fcf3067ebe3c2f8aea884bb5ff18eb\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592518863 -0700\ncommitter GitHub <noreply@github.com> 1592518863 -0700\n\nRollup merge of #73447 - lzutao:stabilize-result_as_deref, r=dtolnay\n\nImprove document for `Result::as_deref(_mut)` methods\n\ncc #50264\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f15b346f3adf03a976e9468401e443a3ecb61a71", "html_url": "https://github.com/rust-lang/rust/commit/f15b346f3adf03a976e9468401e443a3ecb61a71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f15b346f3adf03a976e9468401e443a3ecb61a71/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db7dc4794f0a8cf2fafb26ed97f2067321b198c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db7dc4794f0a8cf2fafb26ed97f2067321b198c", "html_url": "https://github.com/rust-lang/rust/commit/1db7dc4794f0a8cf2fafb26ed97f2067321b198c"}, {"sha": "4e77214583fcf3067ebe3c2f8aea884bb5ff18eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e77214583fcf3067ebe3c2f8aea884bb5ff18eb", "html_url": "https://github.com/rust-lang/rust/commit/4e77214583fcf3067ebe3c2f8aea884bb5ff18eb"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "2080ae193667e8c6945161df6102dd049c64bab5", "filename": "src/libcore/result.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f15b346f3adf03a976e9468401e443a3ecb61a71/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15b346f3adf03a976e9468401e443a3ecb61a71/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=f15b346f3adf03a976e9468401e443a3ecb61a71", "patch": "@@ -1145,45 +1145,69 @@ impl<T, E: Into<!>> Result<T, E> {\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+#[unstable(feature = \"inner_deref\", issue = \"50264\")]\n impl<T: Deref, E> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T::Target, &E>`.\n+    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&<T as Deref>::Target, &E>`.\n     ///\n-    /// Leaves the original `Result` in-place, creating a new one containing a reference to the\n-    /// `Ok` type's `Deref::Target` type.\n+    /// Coerces the [`Ok`] variant of the original [`Result`] via [`Deref`](crate::ops::Deref)\n+    /// and returns the new [`Result`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let x: Result<String, u32> = Ok(\"hello\".to_string());\n+    /// let y: Result<&str, &u32> = Ok(\"hello\");\n+    /// assert_eq!(x.as_deref(), y);\n+    ///\n+    /// let x: Result<String, u32> = Err(42);\n+    /// let y: Result<&str, &u32> = Err(&42);\n+    /// assert_eq!(x.as_deref(), y);\n+    /// ```\n     pub fn as_deref(&self) -> Result<&T::Target, &E> {\n         self.as_ref().map(|t| t.deref())\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+#[unstable(feature = \"inner_deref\", issue = \"50264\")]\n impl<T, E: Deref> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T, &E::Target>`.\n+    /// Converts from `Result<T, E>` (or `&Result<T, E>`) to `Result<&T, &<E as Deref>::Target>`.\n     ///\n-    /// Leaves the original `Result` in-place, creating a new one containing a reference to the\n-    /// `Err` type's `Deref::Target` type.\n+    /// Coerces the [`Err`] variant of the original [`Result`] via [`Deref`](crate::ops::Deref)\n+    /// and returns the new [`Result`].\n     pub fn as_deref_err(&self) -> Result<&T, &E::Target> {\n         self.as_ref().map_err(|e| e.deref())\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+#[unstable(feature = \"inner_deref\", issue = \"50264\")]\n impl<T: DerefMut, E> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut T::Target, &mut E>`.\n+    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut <T as DerefMut>::Target, &mut E>`.\n     ///\n-    /// Leaves the original `Result` in-place, creating a new one containing a mutable reference to\n-    /// the `Ok` type's `Deref::Target` type.\n+    /// Coerces the [`Ok`] variant of the original [`Result`] via [`DerefMut`](crate::ops::DerefMut)\n+    /// and returns the new [`Result`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x: Result<String, u32> = Ok(\"hello\".to_string());\n+    /// let y: Result<&mut str, &mut u32> = Ok(\"HELLO\");\n+    /// assert_eq!(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y);\n+    ///\n+    /// let mut x: Result<String, u32> = Err(42);\n+    /// let y: Result<&mut str, &mut u32> = Err(&42);\n+    /// assert_eq!(x.as_deref_mut().map(|x| { x.make_ascii_uppercase(); x }), y);\n+    /// ```\n     pub fn as_deref_mut(&mut self) -> Result<&mut T::Target, &mut E> {\n         self.as_mut().map(|t| t.deref_mut())\n     }\n }\n \n-#[unstable(feature = \"inner_deref\", reason = \"newly added\", issue = \"50264\")]\n+#[unstable(feature = \"inner_deref\", issue = \"50264\")]\n impl<T, E: DerefMut> Result<T, E> {\n-    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut T, &mut E::Target>`.\n+    /// Converts from `Result<T, E>` (or `&mut Result<T, E>`) to `Result<&mut T, &mut <E as DerefMut>::Target>`.\n     ///\n-    /// Leaves the original `Result` in-place, creating a new one containing a mutable reference to\n-    /// the `Err` type's `Deref::Target` type.\n+    /// Coerces the [`Err`] variant of the original [`Result`] via [`DerefMut`](crate::ops::DerefMut)\n+    /// and returns the new [`Result`].\n     pub fn as_deref_mut_err(&mut self) -> Result<&mut T, &mut E::Target> {\n         self.as_mut().map_err(|e| e.deref_mut())\n     }"}]}