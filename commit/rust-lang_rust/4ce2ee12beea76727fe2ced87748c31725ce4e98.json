{"sha": "4ce2ee12beea76727fe2ced87748c31725ce4e98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZTJlZTEyYmVlYTc2NzI3ZmUyY2VkODc3NDhjMzE3MjVjZTRlOTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-11T22:57:32Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-12T21:48:18Z"}, "message": "Add a bunch of inline hints.", "tree": {"sha": "a837e441e337093f546d659507f8252f44cb7be6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a837e441e337093f546d659507f8252f44cb7be6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ce2ee12beea76727fe2ced87748c31725ce4e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce2ee12beea76727fe2ced87748c31725ce4e98", "html_url": "https://github.com/rust-lang/rust/commit/4ce2ee12beea76727fe2ced87748c31725ce4e98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ce2ee12beea76727fe2ced87748c31725ce4e98/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c14dae4a64b791eec86a11f04fcbeab5df23911", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c14dae4a64b791eec86a11f04fcbeab5df23911", "html_url": "https://github.com/rust-lang/rust/commit/3c14dae4a64b791eec86a11f04fcbeab5df23911"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "cff945ad069617d9bbac8dbff4eaedf71a3d3e12", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ce2ee12beea76727fe2ced87748c31725ce4e98/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce2ee12beea76727fe2ced87748c31725ce4e98/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=4ce2ee12beea76727fe2ced87748c31725ce4e98", "patch": "@@ -65,6 +65,7 @@ pure fn shape_le<T:Ord>(x1: &T, x2: &T) -> bool {\n  * Useful for calling certain function in the Rust runtime or otherwise\n  * performing dark magick.\n  */\n+#[inline(always)]\n pure fn get_type_desc<T>() -> *TypeDesc {\n     unchecked { rusti::get_tydesc::<T>() as *TypeDesc }\n }\n@@ -93,6 +94,7 @@ pure fn pref_align_of<T>() -> uint {\n }\n \n /// Returns the refcount of a shared box (as just before calling this)\n+#[inline(always)]\n pure fn refcount<T>(+t: @T) -> uint {\n     unsafe {\n         let ref_ptr: *uint = unsafe::reinterpret_cast(&t);"}, {"sha": "2c7ebe642cb47c75547076dad710e584b8e3c3d4", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ce2ee12beea76727fe2ced87748c31725ce4e98/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce2ee12beea76727fe2ced87748c31725ce4e98/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=4ce2ee12beea76727fe2ced87748c31725ce4e98", "patch": "@@ -51,6 +51,7 @@ unsafe fn bump_box_refcount<T>(+t: @T) { forget(move t); }\n  *\n  *     assert transmute(\"L\") == ~[76u8, 0u8];\n  */\n+#[inline(always)]\n unsafe fn transmute<L, G>(-thing: L) -> G {\n     debug!(\">>> in transmute! <<<\");\n     debug!(\"transmute 1: %?\", &thing);\n@@ -61,26 +62,33 @@ unsafe fn transmute<L, G>(-thing: L) -> G {\n }\n \n /// Coerce an immutable reference to be mutable.\n+#[inline(always)]\n unsafe fn transmute_mut<T>(+ptr: &a/T) -> &a/mut T { transmute(move ptr) }\n \n /// Coerce a mutable reference to be immutable.\n+#[inline(always)]\n unsafe fn transmute_immut<T>(+ptr: &a/mut T) -> &a/T { transmute(move ptr) }\n \n /// Coerce a borrowed pointer to have an arbitrary associated region.\n+#[inline(always)]\n unsafe fn transmute_region<T>(+ptr: &a/T) -> &b/T { transmute(move ptr) }\n \n /// Coerce an immutable reference to be mutable.\n+#[inline(always)]\n unsafe fn transmute_mut_unsafe<T>(+ptr: *const T) -> *mut T { transmute(ptr) }\n \n /// Coerce an immutable reference to be mutable.\n+#[inline(always)]\n unsafe fn transmute_immut_unsafe<T>(+ptr: *const T) -> *T { transmute(ptr) }\n \n /// Coerce a borrowed mutable pointer to have an arbitrary associated region.\n+#[inline(always)]\n unsafe fn transmute_mut_region<T>(+ptr: &a/mut T) -> &b/mut T {\n     transmute(move ptr)\n }\n \n /// Transforms lifetime of the second pointer to match the first.\n+#[inline(always)]\n unsafe fn copy_lifetime<S,T>(_ptr: &a/S, ptr: &T) -> &a/T {\n     transmute_region(ptr)\n }"}, {"sha": "39589419beb6f69012953ff9d041d8c15ae06631", "filename": "src/libcore/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ce2ee12beea76727fe2ced87748c31725ce4e98/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce2ee12beea76727fe2ced87748c31725ce4e98/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=4ce2ee12beea76727fe2ced87748c31725ce4e98", "patch": "@@ -9,9 +9,11 @@ use cmp::Eq;\n  */\n \n /// The identity function.\n+#[inline(always)]\n pure fn id<T>(+x: T) -> T { move x }\n \n /// Ignores a value.\n+#[inline(always)]\n pure fn ignore<T>(+_x: T) { }\n \n /// Sets `*ptr` to `new_value`, invokes `op()`, and then restores the"}]}