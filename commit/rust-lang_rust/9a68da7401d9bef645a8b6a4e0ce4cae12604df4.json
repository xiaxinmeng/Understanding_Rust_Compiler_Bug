{"sha": "9a68da7401d9bef645a8b6a4e0ce4cae12604df4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNjhkYTc0MDFkOWJlZjY0NWE4YjZhNGUwY2U0Y2FlMTI2MDRkZjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-27T18:57:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-27T18:57:46Z"}, "message": "auto merge of #17517 : pczarn/rust/hashmap-lifetimes, r=alexcrichton\n\nFixes #17500", "tree": {"sha": "36b5a7f7527be732f2eabe813f4114ec162c8f5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36b5a7f7527be732f2eabe813f4114ec162c8f5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a68da7401d9bef645a8b6a4e0ce4cae12604df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a68da7401d9bef645a8b6a4e0ce4cae12604df4", "html_url": "https://github.com/rust-lang/rust/commit/9a68da7401d9bef645a8b6a4e0ce4cae12604df4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a68da7401d9bef645a8b6a4e0ce4cae12604df4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef112fe185a49ad9c49722702a695d8bd6b9df47", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef112fe185a49ad9c49722702a695d8bd6b9df47", "html_url": "https://github.com/rust-lang/rust/commit/ef112fe185a49ad9c49722702a695d8bd6b9df47"}, {"sha": "0a10b9dc9c9d35379a8d35d060fd351ab9c567a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a10b9dc9c9d35379a8d35d060fd351ab9c567a8", "html_url": "https://github.com/rust-lang/rust/commit/0a10b9dc9c9d35379a8d35d060fd351ab9c567a8"}], "stats": {"total": 57, "additions": 52, "deletions": 5}, "files": [{"sha": "bad5ce3e4752597d11dfe38ce9a3a68520996c76", "filename": "src/libstd/collections/hashmap/table.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a68da7401d9bef645a8b6a4e0ce4cae12604df4/src%2Flibstd%2Fcollections%2Fhashmap%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a68da7401d9bef645a8b6a4e0ce4cae12604df4/src%2Flibstd%2Fcollections%2Fhashmap%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap%2Ftable.rs?ref=9a68da7401d9bef645a8b6a4e0ce4cae12604df4", "patch": "@@ -663,7 +663,8 @@ impl<K, V> RawTable<K, V> {\n             raw: self.first_bucket_raw(),\n             hashes_end: unsafe {\n                 self.hashes.offset(self.capacity as int)\n-            }\n+            },\n+            marker: marker::ContravariantLifetime,\n         }\n     }\n \n@@ -682,8 +683,14 @@ impl<K, V> RawTable<K, V> {\n     }\n \n     pub fn into_iter(self) -> MoveEntries<K, V> {\n+        let RawBuckets { raw, hashes_end, .. } = self.raw_buckets();\n+        // Replace the marker regardless of lifetime bounds on parameters.\n         MoveEntries {\n-            iter: self.raw_buckets(),\n+            iter: RawBuckets {\n+                raw: raw,\n+                hashes_end: hashes_end,\n+                marker: marker::ContravariantLifetime,\n+            },\n             table: self,\n         }\n     }\n@@ -695,7 +702,8 @@ impl<K, V> RawTable<K, V> {\n         RevMoveBuckets {\n             raw: raw_bucket.offset(self.capacity as int),\n             hashes_end: raw_bucket.hash,\n-            elems_left: self.size\n+            elems_left: self.size,\n+            marker:     marker::ContravariantLifetime,\n         }\n     }\n }\n@@ -704,7 +712,8 @@ impl<K, V> RawTable<K, V> {\n /// this interface is safe, it's not used outside this module.\n struct RawBuckets<'a, K, V> {\n     raw: RawBucket<K, V>,\n-    hashes_end: *mut u64\n+    hashes_end: *mut u64,\n+    marker: marker::ContravariantLifetime<'a>,\n }\n \n impl<'a, K, V> Iterator<RawBucket<K, V>> for RawBuckets<'a, K, V> {\n@@ -730,7 +739,8 @@ impl<'a, K, V> Iterator<RawBucket<K, V>> for RawBuckets<'a, K, V> {\n struct RevMoveBuckets<'a, K, V> {\n     raw: RawBucket<K, V>,\n     hashes_end: *mut u64,\n-    elems_left: uint\n+    elems_left: uint,\n+    marker: marker::ContravariantLifetime<'a>,\n }\n \n impl<'a, K, V> Iterator<(K, V)> for RevMoveBuckets<'a, K, V> {"}, {"sha": "d9d7705fef6fba2a9e6729f07a28838f616c206f", "filename": "src/test/compile-fail/hashmap-iter-value-lifetime.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a68da7401d9bef645a8b6a4e0ce4cae12604df4/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a68da7401d9bef645a8b6a4e0ce4cae12604df4/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs?ref=9a68da7401d9bef645a8b6a4e0ce4cae12604df4", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut my_stuff = std::collections::HashMap::new();\n+    my_stuff.insert(0i, 42i);\n+\n+    let (_, thing) = my_stuff.iter().next().unwrap();\n+\n+    my_stuff.clear(); //~ ERROR cannot borrow\n+\n+    println!(\"{}\", *thing);\n+}"}, {"sha": "5bd6c73df1ab200fcc2f5ef7f483595520d85501", "filename": "src/test/compile-fail/hashmap-lifetimes.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a68da7401d9bef645a8b6a4e0ce4cae12604df4/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a68da7401d9bef645a8b6a4e0ce4cae12604df4/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs?ref=9a68da7401d9bef645a8b6a4e0ce4cae12604df4", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut my_stuff = std::collections::HashMap::new();\n+    my_stuff.insert(0i, 42i);\n+\n+    let mut it = my_stuff.iter();\n+    my_stuff.swap(1, 43); //~ ERROR cannot borrow\n+}"}]}