{"sha": "38444f61bb89cd8217477e2864e19966ba72acd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NDQ0ZjYxYmI4OWNkODIxNzQ3N2UyODY0ZTE5OTY2YmE3MmFjZDQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-04-22T13:14:49Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-08-05T21:08:28Z"}, "message": "* Rename Span::from_rustc_span to Span::new\n* Rename Span::wrap to Span::wrap_raw\n* Improve documentation for Span::wrap_raw", "tree": {"sha": "54383ea83055ef24c7bb2b6e7af051892bb1622d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54383ea83055ef24c7bb2b6e7af051892bb1622d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38444f61bb89cd8217477e2864e19966ba72acd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38444f61bb89cd8217477e2864e19966ba72acd4", "html_url": "https://github.com/rust-lang/rust/commit/38444f61bb89cd8217477e2864e19966ba72acd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38444f61bb89cd8217477e2864e19966ba72acd4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a3b71ae33e1b5c4f8cecf32492f69a05faa7d93", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a3b71ae33e1b5c4f8cecf32492f69a05faa7d93", "html_url": "https://github.com/rust-lang/rust/commit/2a3b71ae33e1b5c4f8cecf32492f69a05faa7d93"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "43979423ae615822a01763363820ba07c98153aa", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38444f61bb89cd8217477e2864e19966ba72acd4/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38444f61bb89cd8217477e2864e19966ba72acd4/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=38444f61bb89cd8217477e2864e19966ba72acd4", "patch": "@@ -517,7 +517,7 @@ fn build_module(\n         }\n     }\n \n-    let span = clean::Span::from_rustc_span(cx.tcx.def_span(did));\n+    let span = clean::Span::new(cx.tcx.def_span(did));\n     clean::Module { items, span }\n }\n "}, {"sha": "3d65fcedaf4e53470d7c6b502195b8be01e2756f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38444f61bb89cd8217477e2864e19966ba72acd4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38444f61bb89cd8217477e2864e19966ba72acd4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=38444f61bb89cd8217477e2864e19966ba72acd4", "patch": "@@ -95,7 +95,8 @@ impl Clean<Item> for doctree::Module<'_> {\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n-        let span = Span::from_rustc_span({\n+\n+        let span = Span::new({\n             let where_outer = self.where_outer(cx.tcx);\n             let sm = cx.sess().source_map();\n             let outer = sm.lookup_char_pos(where_outer.lo());"}, {"sha": "fd4748f1f50b77c2b49c6955c7c7ddef99c7e486", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38444f61bb89cd8217477e2864e19966ba72acd4/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38444f61bb89cd8217477e2864e19966ba72acd4/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=38444f61bb89cd8217477e2864e19966ba72acd4", "patch": "@@ -343,7 +343,7 @@ crate struct Item {\n rustc_data_structures::static_assert_size!(Item, 56);\n \n crate fn rustc_span(def_id: DefId, tcx: TyCtxt<'_>) -> Span {\n-    Span::from_rustc_span(def_id.as_local().map_or_else(\n+    Span::new(def_id.as_local().map_or_else(\n         || tcx.def_span(def_id),\n         |local| {\n             let hir = tcx.hir();\n@@ -1947,15 +1947,15 @@ impl Span {\n     /// span will be updated to point to the macro invocation instead of the macro definition.\n     ///\n     /// (See rust-lang/rust#39726)\n-    crate fn from_rustc_span(sp: rustc_span::Span) -> Self {\n+    crate fn new(sp: rustc_span::Span) -> Self {\n         Self(sp.source_callsite())\n     }\n \n-    /// Unless you know what you're doing, use [`Self::from_rustc_span`] instead!\n+    /// Unless you know what you're doing, use [`Self::new`] instead!\n     ///\n-    /// Contrary to [`Self::from_rustc_span`], this constructor wraps the span as is and don't\n-    /// perform any operation on it, even if it's from a macro expansion.\n-    crate fn wrap(sp: rustc_span::Span) -> Span {\n+    /// This function doesn't clean the span at all. Compare with [`Self::new`]'s body to see the\n+    /// difference.\n+    crate fn wrap_raw(sp: rustc_span::Span) -> Span {\n         Self(sp)\n     }\n "}, {"sha": "253343b560d07237723bbba1c148b3cb48d55397", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38444f61bb89cd8217477e2864e19966ba72acd4/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38444f61bb89cd8217477e2864e19966ba72acd4/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=38444f61bb89cd8217477e2864e19966ba72acd4", "patch": "@@ -597,7 +597,7 @@ fn string<T: Display>(\n                                 LinkFromSrc::Local(span) => {\n                                     eprintln!(\"==> {:?}:{:?}\", span.lo(), span.hi());\n                                     context\n-                                        .href_from_span(clean::Span::wrap(*span))\n+                                        .href_from_span(clean::Span::wrap_raw(*span))\n                                         .map(|s| format!(\"{}{}\", root_path, s))\n                                 }\n                                 LinkFromSrc::External(def_id) => {"}]}