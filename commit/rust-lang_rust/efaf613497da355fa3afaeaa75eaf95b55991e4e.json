{"sha": "efaf613497da355fa3afaeaa75eaf95b55991e4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYWY2MTM0OTdkYTM1NWZhM2FmYWVhYTc1ZWFmOTViNTU5OTFlNGU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2014-12-09T16:03:05Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-08T08:09:27Z"}, "message": "librustc::metadata : Allow passing a string to read_plugin_metadata", "tree": {"sha": "5e33ffdf37f4603a27eb550899034e799321e330", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e33ffdf37f4603a27eb550899034e799321e330"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efaf613497da355fa3afaeaa75eaf95b55991e4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efaf613497da355fa3afaeaa75eaf95b55991e4e", "html_url": "https://github.com/rust-lang/rust/commit/efaf613497da355fa3afaeaa75eaf95b55991e4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efaf613497da355fa3afaeaa75eaf95b55991e4e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4", "html_url": "https://github.com/rust-lang/rust/commit/7e87ea9fc5c3ab5d6c853e6d3ae0603f19526eb4"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "7615ff82bd257a95db797be36f3cff2c5c12c6de", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/efaf613497da355fa3afaeaa75eaf95b55991e4e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efaf613497da355fa3afaeaa75eaf95b55991e4e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=efaf613497da355fa3afaeaa75eaf95b55991e4e", "patch": "@@ -26,7 +26,7 @@ use syntax::ast;\n use syntax::abi;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n-use syntax::codemap::{Span, mk_sp};\n+use syntax::codemap::{DUMMY_SP, Span, mk_sp};\n use syntax::parse;\n use syntax::parse::token::InternedString;\n use syntax::parse::token;\n@@ -445,8 +445,20 @@ impl<'a> CrateReader<'a> {\n     }\n \n     pub fn read_plugin_metadata<'b>(&'b mut self,\n-                                    vi: &'b ast::ViewItem) -> PluginMetadata<'b> {\n-        let info = self.extract_crate_info(vi).unwrap();\n+                                    krate: CrateOrString<'b>) -> PluginMetadata<'b> {\n+        let (info, span) = match krate {\n+            CrateOrString::Krate(c) => {\n+                (self.extract_crate_info(c).unwrap(), c.span)\n+            }\n+            CrateOrString::Str(s) => {\n+                (CrateInfo {\n+                     name: s.to_string(),\n+                     ident: s.to_string(),\n+                     id: ast::DUMMY_NODE_ID,\n+                     should_link: true,\n+                 }, DUMMY_SP)\n+            }\n+        };\n         let target_triple = &self.sess.opts.target_triple[];\n         let is_cross = target_triple != config::host_triple();\n         let mut should_link = info.should_link && !is_cross;\n@@ -455,7 +467,7 @@ impl<'a> CrateReader<'a> {\n         let name = info.name.clone();\n         let mut load_ctxt = loader::Context {\n             sess: self.sess,\n-            span: vi.span,\n+            span: span,\n             ident: &ident[],\n             crate_name: &name[],\n             hash: None,\n@@ -485,8 +497,8 @@ impl<'a> CrateReader<'a> {\n         let register = should_link && self.existing_match(info.name.as_slice(), None).is_none();\n         let metadata = if register {\n             // Register crate now to avoid double-reading metadata\n-            let (_, cmd, _) = self.register_crate(&None, &info.ident[],\n-                                &info.name[], vi.span, library);\n+            let (_, cmd, _) = self.register_crate(&None, info.ident[],\n+                                info.name[], span, library);\n             PMDSource::Registered(cmd)\n         } else {\n             // Not registering the crate; just hold on to the metadata\n@@ -498,12 +510,17 @@ impl<'a> CrateReader<'a> {\n             metadata: metadata,\n             dylib: dylib,\n             info: info,\n-            vi_span: vi.span,\n+            vi_span: span,\n             target_only: target_only,\n         }\n     }\n }\n \n+pub enum CrateOrString<'a> {\n+    Krate(&'a ast::ViewItem),\n+    Str(&'a str)\n+}\n+\n impl<'a> PluginMetadata<'a> {\n     /// Read exported macros\n     pub fn exported_macros(&self) -> Vec<ast::MacroDef> {"}, {"sha": "e1f5c10a1a4e05a11531ca33bb140ca0da7f7cc8", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efaf613497da355fa3afaeaa75eaf95b55991e4e/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efaf613497da355fa3afaeaa75eaf95b55991e4e/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=efaf613497da355fa3afaeaa75eaf95b55991e4e", "patch": "@@ -11,7 +11,7 @@\n //! Used by `rustc` when loading a plugin, or a crate with exported macros.\n \n use session::Session;\n-use metadata::creader::CrateReader;\n+use metadata::creader::{CrateOrString, CrateReader};\n use plugin::registry::Registry;\n \n use std::mem;\n@@ -175,7 +175,7 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n         }\n \n         if load_macros || load_registrar {\n-            let pmd = self.reader.read_plugin_metadata(vi);\n+            let pmd = self.reader.read_plugin_metadata(CrateOrString::Krate(vi));\n             if load_macros {\n                 macros = pmd.exported_macros();\n             }"}]}