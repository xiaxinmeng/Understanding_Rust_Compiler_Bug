{"sha": "62690b3c3fa6e157daa7f7c5a3af005f37eb4199", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNjkwYjNjM2ZhNmUxNTdkYWE3ZjdjNWEzYWYwMDVmMzdlYjQxOTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-21T23:19:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-21T23:19:54Z"}, "message": "Auto merge of #34544 - 3Hren:issue/xx/reinterpret-format-precision-for-strings, r=alexcrichton\n\nfeat: reinterpret `precision` field for strings\n\nThis commit changes the behavior of formatting string arguments with both width and precision fields set.\n\nDocumentation says that the `width` field is the \"minimum width\" that the format should take up. If the value's string does not fill up this many characters, then the padding specified by fill/alignment will be used to take up the required space.\n\nThis is true for all formatted types except string, which is truncated down to `precision` number of chars and then all of `fill`, `align` and `width` fields are completely ignored.\n\nFor example: `format!(\"{:/^10.8}\", \"1234567890);` emits \"12345678\". In the contrast Python version works as the expected:\n```python\n>>> '{:/^10.8}'.format('1234567890')\n'/12345678/'\n```\n\nThis commit gives back the `Python` behavior by changing the `precision` field meaning to the truncation and nothing more. The result string *will* be prepended/appended up to the `width` field with the proper `fill` char.\n\n__However, this is the breaking change, I admit.__ Feel free to close it, but otherwise it should be mentioned in the `std::fmt` documentation somewhere near of `fill/align/width` fields description.", "tree": {"sha": "3781e11e755200990ea0a30f08df95f5f7c88d3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3781e11e755200990ea0a30f08df95f5f7c88d3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62690b3c3fa6e157daa7f7c5a3af005f37eb4199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62690b3c3fa6e157daa7f7c5a3af005f37eb4199", "html_url": "https://github.com/rust-lang/rust/commit/62690b3c3fa6e157daa7f7c5a3af005f37eb4199", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62690b3c3fa6e157daa7f7c5a3af005f37eb4199/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75886537858530447051b9c1ef595c4ba59017c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/75886537858530447051b9c1ef595c4ba59017c5", "html_url": "https://github.com/rust-lang/rust/commit/75886537858530447051b9c1ef595c4ba59017c5"}, {"sha": "ede39aeb331bf6efb3739d22a60c1844e9c2c3d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ede39aeb331bf6efb3739d22a60c1844e9c2c3d6", "html_url": "https://github.com/rust-lang/rust/commit/ede39aeb331bf6efb3739d22a60c1844e9c2c3d6"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "c5312d0d9bbd9ad27ee68432f46e40f8ff146842", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62690b3c3fa6e157daa7f7c5a3af005f37eb4199/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62690b3c3fa6e157daa7f7c5a3af005f37eb4199/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=62690b3c3fa6e157daa7f7c5a3af005f37eb4199", "patch": "@@ -409,8 +409,8 @@\n //! ## Precision\n //!\n //! For non-numeric types, this can be considered a \"maximum width\". If the resulting string is\n-//! longer than this width, then it is truncated down to this many characters and only those are\n-//! emitted.\n+//! longer than this width, then it is truncated down to this many characters and that truncated\n+//! value is emitted with proper `fill`, `alignment` and `width` if those parameters are set.\n //!\n //! For integral types, this is ignored.\n //!\n@@ -470,13 +470,15 @@\n //! ```\n //! println!(\"{}, `{name:.*}` has 3 fractional digits\", \"Hello\", 3, name=1234.56);\n //! println!(\"{}, `{name:.*}` has 3 characters\", \"Hello\", 3, name=\"1234.56\");\n+//! println!(\"{}, `{name:>8.*}` has 3 right-aligned characters\", \"Hello\", 3, name=\"1234.56\");\n //! ```\n //!\n //! print two significantly different things:\n //!\n //! ```text\n //! Hello, `1234.560` has 3 fractional digits\n //! Hello, `123` has 3 characters\n+//! Hello, `     123` has 3 right-aligned characters\n //! ```\n //!\n //! # Escaping"}, {"sha": "e5eb8f21382bebd55d1779d3be20fb0b8b868695", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/62690b3c3fa6e157daa7f7c5a3af005f37eb4199/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62690b3c3fa6e157daa7f7c5a3af005f37eb4199/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=62690b3c3fa6e157daa7f7c5a3af005f37eb4199", "patch": "@@ -980,15 +980,19 @@ impl<'a> Formatter<'a> {\n             return self.buf.write_str(s);\n         }\n         // The `precision` field can be interpreted as a `max-width` for the\n-        // string being formatted\n-        if let Some(max) = self.precision {\n-            // If there's a maximum width and our string is longer than\n-            // that, then we must always have truncation. This is the only\n-            // case where the maximum length will matter.\n+        // string being formatted.\n+        let s = if let Some(max) = self.precision {\n+            // If our string is longer that the precision, then we must have\n+            // truncation. However other flags like `fill`, `width` and `align`\n+            // must act as always.\n             if let Some((i, _)) = s.char_indices().skip(max).next() {\n-                return self.buf.write_str(&s[..i])\n+                &s[..i]\n+            } else {\n+                &s\n             }\n-        }\n+        } else {\n+            &s\n+        };\n         // The `width` field is more of a `min-width` parameter at this point.\n         match self.width {\n             // If we're under the maximum length, and there's no minimum length"}, {"sha": "ed56519d23628c26ae4092151b490c923276ffce", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62690b3c3fa6e157daa7f7c5a3af005f37eb4199/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62690b3c3fa6e157daa7f7c5a3af005f37eb4199/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=62690b3c3fa6e157daa7f7c5a3af005f37eb4199", "patch": "@@ -125,7 +125,7 @@ pub fn main() {\n     t!(format!(\"{:<4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n     t!(format!(\"{:>4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n     t!(format!(\"{:^4.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n-    t!(format!(\"{:>10.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"aaaa\");\n+    t!(format!(\"{:>10.4}\", \"aaaaaaaaaaaaaaaaaa\"), \"      aaaa\");\n     t!(format!(\"{:2.4}\", \"aaaaa\"), \"aaaa\");\n     t!(format!(\"{:2.4}\", \"aaaa\"), \"aaaa\");\n     t!(format!(\"{:2.4}\", \"aaa\"), \"aaa\");\n@@ -140,6 +140,7 @@ pub fn main() {\n     t!(format!(\"{:a$}\", \"a\", a=4), \"a   \");\n     t!(format!(\"{:-#}\", \"a\"), \"a\");\n     t!(format!(\"{:+#}\", \"a\"), \"a\");\n+    t!(format!(\"{:/^10.8}\", \"1234567890\"), \"/12345678/\");\n \n     // Some float stuff\n     t!(format!(\"{:}\", 1.0f32), \"1\");"}]}