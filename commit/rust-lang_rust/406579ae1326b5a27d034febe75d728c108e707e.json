{"sha": "406579ae1326b5a27d034febe75d728c108e707e", "node_id": "C_kwDOAAsO6NoAKDQwNjU3OWFlMTMyNmI1YTI3ZDAzNGZlYmU3NWQ3MjhjMTA4ZTcwN2U", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-29T15:13:01Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-05T15:00:21Z"}, "message": "macros: introduce `build_field_mapping`\n\nMove the logic for building a field mapping (which is used by the\nbuilding of format strings in `suggestion` annotations) into a helper\nfunction.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "498070bb3f09241c4307171142e810f788f0fb4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/498070bb3f09241c4307171142e810f788f0fb4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406579ae1326b5a27d034febe75d728c108e707e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406579ae1326b5a27d034febe75d728c108e707e", "html_url": "https://github.com/rust-lang/rust/commit/406579ae1326b5a27d034febe75d728c108e707e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406579ae1326b5a27d034febe75d728c108e707e/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "540eaf985d08b140bf792b7c68731a641ecb026a", "url": "https://api.github.com/repos/rust-lang/rust/commits/540eaf985d08b140bf792b7c68731a641ecb026a", "html_url": "https://github.com/rust-lang/rust/commit/540eaf985d08b140bf792b7c68731a641ecb026a"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "00f3951d9a024fee3add99de62ecb9bd54b97c8b", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/406579ae1326b5a27d034febe75d728c108e707e/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406579ae1326b5a27d034febe75d728c108e707e/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic.rs?ref=406579ae1326b5a27d034febe75d728c108e707e", "patch": "@@ -5,8 +5,8 @@ use crate::diagnostics::error::{\n     SessionDiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    report_error_if_not_applied_to_span, report_type_error, type_is_unit, type_matches_path,\n-    Applicability, FieldInfo, FieldInnerTy, HasFieldMap, SetOnce,\n+    build_field_mapping, report_error_if_not_applied_to_span, report_type_error, type_is_unit,\n+    type_matches_path, Applicability, FieldInfo, FieldInnerTy, HasFieldMap, SetOnce,\n };\n use proc_macro2::{Ident, TokenStream};\n use quote::{format_ident, quote};\n@@ -25,26 +25,11 @@ pub(crate) struct SessionDiagnosticDerive<'a> {\n \n impl<'a> SessionDiagnosticDerive<'a> {\n     pub(crate) fn new(diag: syn::Ident, sess: syn::Ident, structure: Structure<'a>) -> Self {\n-        // Build the mapping of field names to fields. This allows attributes to peek values from\n-        // other fields.\n-        let mut fields_map = HashMap::new();\n-\n-        // Convenience bindings.\n-        let ast = structure.ast();\n-\n-        if let syn::Data::Struct(syn::DataStruct { fields, .. }) = &ast.data {\n-            for field in fields.iter() {\n-                if let Some(ident) = &field.ident {\n-                    fields_map.insert(ident.to_string(), quote! { &self.#ident });\n-                }\n-            }\n-        }\n-\n         Self {\n             builder: SessionDiagnosticDeriveBuilder {\n                 diag,\n                 sess,\n-                fields: fields_map,\n+                fields: build_field_mapping(&structure),\n                 kind: None,\n                 code: None,\n                 slug: None,"}, {"sha": "24204556c984cabcf7b8ecc57baa874bc20afa7e", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/406579ae1326b5a27d034febe75d728c108e707e/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406579ae1326b5a27d034febe75d728c108e707e/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=406579ae1326b5a27d034febe75d728c108e707e", "patch": "@@ -2,10 +2,10 @@ use crate::diagnostics::error::{span_err, throw_span_err, SessionDiagnosticDeriv\n use proc_macro::Span;\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote, ToTokens};\n-use std::collections::BTreeSet;\n+use std::collections::{BTreeSet, HashMap};\n use std::str::FromStr;\n use syn::{spanned::Spanned, Attribute, Meta, Type, TypeTuple};\n-use synstructure::BindingInfo;\n+use synstructure::{BindingInfo, Structure};\n \n /// Checks whether the type name of `ty` matches `name`.\n ///\n@@ -325,3 +325,20 @@ impl quote::ToTokens for Applicability {\n         });\n     }\n }\n+\n+/// Build the mapping of field names to fields. This allows attributes to peek values from\n+/// other fields.\n+pub(crate) fn build_field_mapping<'a>(structure: &Structure<'a>) -> HashMap<String, TokenStream> {\n+    let mut fields_map = HashMap::new();\n+\n+    let ast = structure.ast();\n+    if let syn::Data::Struct(syn::DataStruct { fields, .. }) = &ast.data {\n+        for field in fields.iter() {\n+            if let Some(ident) = &field.ident {\n+                fields_map.insert(ident.to_string(), quote! { &self.#ident });\n+            }\n+        }\n+    }\n+\n+    fields_map\n+}"}]}