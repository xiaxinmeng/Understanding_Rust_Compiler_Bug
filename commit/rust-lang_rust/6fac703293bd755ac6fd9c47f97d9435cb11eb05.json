{"sha": "6fac703293bd755ac6fd9c47f97d9435cb11eb05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYWM3MDMyOTNiZDc1NWFjNmZkOWM0N2Y5N2Q5NDM1Y2IxMWViMDU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-19T22:51:27Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-12-21T22:16:28Z"}, "message": "ICH: Fix some omissions around foreign mods in hasher.", "tree": {"sha": "f70d469b05e108a1d3ab5190b226d2efeeb899a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f70d469b05e108a1d3ab5190b226d2efeeb899a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fac703293bd755ac6fd9c47f97d9435cb11eb05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fac703293bd755ac6fd9c47f97d9435cb11eb05", "html_url": "https://github.com/rust-lang/rust/commit/6fac703293bd755ac6fd9c47f97d9435cb11eb05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fac703293bd755ac6fd9c47f97d9435cb11eb05/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0c61ebc12cd22c5448a62261f45f574ea1a57c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c61ebc12cd22c5448a62261f45f574ea1a57c3", "html_url": "https://github.com/rust-lang/rust/commit/d0c61ebc12cd22c5448a62261f45f574ea1a57c3"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "e339b6c02d41d3d4968642998cb2cc21d61f85a4", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fac703293bd755ac6fd9c47f97d9435cb11eb05/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fac703293bd755ac6fd9c47f97d9435cb11eb05/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=6fac703293bd755ac6fd9c47f97d9435cb11eb05", "patch": "@@ -264,6 +264,9 @@ pub trait Visitor<'v> : Sized {\n     fn visit_where_predicate(&mut self, predicate: &'v WherePredicate) {\n         walk_where_predicate(self, predicate)\n     }\n+    fn visit_fn_decl(&mut self, fd: &'v FnDecl) {\n+        walk_fn_decl(self, fd)\n+    }\n     fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: ExprId, s: Span, id: NodeId) {\n         walk_fn(self, fk, fd, b, s, id)\n     }\n@@ -532,7 +535,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             walk_list!(visitor, visit_ty, tuple_element_types);\n         }\n         TyBareFn(ref function_declaration) => {\n-            walk_fn_decl(visitor, &function_declaration.decl);\n+            visitor.visit_fn_decl(&function_declaration.decl);\n             walk_list!(visitor, visit_lifetime_def, &function_declaration.lifetimes);\n         }\n         TyPath(ref qpath) => {\n@@ -661,7 +664,7 @@ pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v\n \n     match foreign_item.node {\n         ForeignItemFn(ref function_declaration, ref generics) => {\n-            walk_fn_decl(visitor, function_declaration);\n+            visitor.visit_fn_decl(function_declaration);\n             visitor.visit_generics(generics)\n         }\n         ForeignItemStatic(ref typ, _) => visitor.visit_ty(typ),\n@@ -765,7 +768,7 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n                                    _span: Span,\n                                    id: NodeId) {\n     visitor.visit_id(id);\n-    walk_fn_decl(visitor, function_declaration);\n+    visitor.visit_fn_decl(function_declaration);\n     walk_fn_kind(visitor, function_kind);\n     visitor.visit_body(body_id)\n }\n@@ -777,7 +780,7 @@ pub fn walk_fn_with_body<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              _span: Span,\n                                              id: NodeId) {\n     visitor.visit_id(id);\n-    walk_fn_decl(visitor, function_declaration);\n+    visitor.visit_fn_decl(function_declaration);\n     walk_fn_kind(visitor, function_kind);\n     visitor.visit_expr(body)\n }\n@@ -794,7 +797,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n         MethodTraitItem(ref sig, None) => {\n             visitor.visit_id(trait_item.id);\n             visitor.visit_generics(&sig.generics);\n-            walk_fn_decl(visitor, &sig.decl);\n+            visitor.visit_fn_decl(&sig.decl);\n         }\n         MethodTraitItem(ref sig, Some(body_id)) => {\n             visitor.visit_fn(FnKind::Method(trait_item.name,"}, {"sha": "b689aa451d8ae542f334a5bffea0bcdbb990d762", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6fac703293bd755ac6fd9c47f97d9435cb11eb05/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fac703293bd755ac6fd9c47f97d9435cb11eb05/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=6fac703293bd755ac6fd9c47f97d9435cb11eb05", "patch": "@@ -180,9 +180,10 @@ enum SawAbiComponent<'a> {\n     SawLifetimeDef(usize),\n \n     SawMod,\n-    SawForeignItem,\n+    SawForeignItem(SawForeignItemComponent),\n     SawItem(SawItemComponent),\n     SawTy(SawTyComponent),\n+    SawFnDecl(bool),\n     SawGenerics,\n     SawTraitItem(SawTraitOrImplItemComponent),\n     SawImplItem(SawTraitOrImplItemComponent),\n@@ -364,7 +365,7 @@ enum SawItemComponent {\n     SawItemConst,\n     SawItemFn(Unsafety, Constness, Abi),\n     SawItemMod,\n-    SawItemForeignMod,\n+    SawItemForeignMod(Abi),\n     SawItemTy,\n     SawItemEnum,\n     SawItemStruct,\n@@ -382,7 +383,7 @@ fn saw_item(node: &Item_) -> SawItemComponent {\n         ItemConst(..) =>SawItemConst,\n         ItemFn(_, unsafety, constness, abi, _, _) => SawItemFn(unsafety, constness, abi),\n         ItemMod(..) => SawItemMod,\n-        ItemForeignMod(..) => SawItemForeignMod,\n+        ItemForeignMod(ref fm) => SawItemForeignMod(fm.abi),\n         ItemTy(..) => SawItemTy,\n         ItemEnum(..) => SawItemEnum,\n         ItemStruct(..) => SawItemStruct,\n@@ -393,6 +394,12 @@ fn saw_item(node: &Item_) -> SawItemComponent {\n     }\n }\n \n+#[derive(Hash)]\n+enum SawForeignItemComponent {\n+    Static { mutable: bool },\n+    Fn,\n+}\n+\n #[derive(Hash)]\n enum SawPatComponent {\n     SawPatWild,\n@@ -602,7 +609,17 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n     fn visit_foreign_item(&mut self, i: &'tcx ForeignItem) {\n         debug!(\"visit_foreign_item: st={:?}\", self.st);\n \n-        SawForeignItem.hash(self.st);\n+        match i.node {\n+            ForeignItemFn(..) => {\n+                SawForeignItem(SawForeignItemComponent::Fn)\n+            }\n+            ForeignItemStatic(_, mutable) => {\n+                SawForeignItem(SawForeignItemComponent::Static {\n+                    mutable: mutable\n+                })\n+            }\n+        }.hash(self.st);\n+\n         hash_span!(self, i.span);\n         hash_attrs!(self, &i.attrs);\n         visit::walk_foreign_item(self, i)\n@@ -639,6 +656,12 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n         visit::walk_generics(self, g)\n     }\n \n+    fn visit_fn_decl(&mut self, fd: &'tcx FnDecl) {\n+        debug!(\"visit_fn_decl: st={:?}\", self.st);\n+        SawFnDecl(fd.variadic).hash(self.st);\n+        visit::walk_fn_decl(self, fd)\n+    }\n+\n     fn visit_trait_item(&mut self, ti: &'tcx TraitItem) {\n         debug!(\"visit_trait_item: st={:?}\", self.st);\n "}]}