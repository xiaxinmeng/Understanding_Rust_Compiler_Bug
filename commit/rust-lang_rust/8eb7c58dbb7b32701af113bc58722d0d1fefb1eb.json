{"sha": "8eb7c58dbb7b32701af113bc58722d0d1fefb1eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYjdjNThkYmI3YjMyNzAxYWYxMTNiYzU4NzIyZDBkMWZlZmIxZWI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-22T21:43:54Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-22T22:41:02Z"}, "message": "Remove most files from format ignore list\n\nAlso moves formatting to use edition 2018, and to be done in parallel.\nThis brings near-linear speed ups (at least with a small amount of\ncores).", "tree": {"sha": "9255894256534eff88ec39fb710dbfdc1b324d6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9255894256534eff88ec39fb710dbfdc1b324d6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eb7c58dbb7b32701af113bc58722d0d1fefb1eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb7c58dbb7b32701af113bc58722d0d1fefb1eb", "html_url": "https://github.com/rust-lang/rust/commit/8eb7c58dbb7b32701af113bc58722d0d1fefb1eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eb7c58dbb7b32701af113bc58722d0d1fefb1eb/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b98af84c4aa66392236fff59c86da2130d46d46", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b98af84c4aa66392236fff59c86da2130d46d46", "html_url": "https://github.com/rust-lang/rust/commit/9b98af84c4aa66392236fff59c86da2130d46d46"}], "stats": {"total": 158, "additions": 73, "deletions": 85}, "files": [{"sha": "0a90c89bffe8d5cdf7cda55435763c2c2408a114", "filename": "rustfmt.toml", "status": "modified", "additions": 50, "deletions": 65, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/8eb7c58dbb7b32701af113bc58722d0d1fefb1eb/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8eb7c58dbb7b32701af113bc58722d0d1fefb1eb/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=8eb7c58dbb7b32701af113bc58722d0d1fefb1eb", "patch": "@@ -1,74 +1,59 @@\n-# Currently, most of the code in the compiler uses historical style.\n-#\n-# For new code, consider running rustfmt with this config (it should\n-# be picked up automatically).\n+# Run rustfmt with this config (it should be picked up automatically).\n version = \"Two\"\n use_small_heuristics = \"Max\"\n+merge_derives = false\n \n # by default we ignore everything in the repository\n # tidy only checks files which are not ignored, each entry follows gitignore style\n ignore = [\n-    # remove directories below, or opt out their subdirectories, as they are formatted\n-    \"src/bootstrap/\",\n-    \"src/build_helper/\",\n-    \"src/liballoc/\",\n-    \"src/libarena/\",\n-    \"src/libcore/\",\n-    \"src/libfmt_macros/\",\n-    \"src/libgraphviz/\",\n-    \"src/libpanic_abort/\",\n-    \"src/libpanic_unwind/\",\n-    \"src/libproc_macro/\",\n-    \"src/libprofiler_builtins/\",\n-    \"src/librustc/\",\n-    \"src/librustc_apfloat/\",\n-    \"src/librustc_asan/\",\n-    \"src/librustc_codegen_llvm/\",\n-    \"src/librustc_codegen_ssa/\",\n-    \"src/librustc_codegen_utils/\",\n-    \"src/librustc_data_structures/\",\n-    \"src/librustc_driver/\",\n-    \"src/librustc_errors/\",\n-    \"src/librustc_feature/\",\n-    \"src/librustc_incremental/\",\n-    \"src/librustc_index/\",\n-    \"src/librustc_interface/\",\n-    \"src/librustc_lexer/\",\n-    \"src/librustc_lint/\",\n-    \"src/librustc_llvm/\",\n-    \"src/librustc_lsan/\",\n-    \"src/librustc_macros/\",\n-    \"src/librustc_metadata/\",\n-    \"src/librustc_mir/\",\n-    \"src/librustc_msan/\",\n-    \"src/librustc_parse/\",\n-    \"src/librustc_passes/\",\n-    \"src/librustc_plugin/\",\n-    \"src/librustc_plugin_impl/\",\n-    \"src/librustc_privacy/\",\n-    \"src/librustc_resolve/\",\n-    \"src/librustc_save_analysis/\",\n-    \"src/librustc_session/\",\n-    \"src/librustc_target/\",\n-    \"src/librustc_traits/\",\n-    \"src/librustc_tsan/\",\n-    \"src/librustc_typeck/\",\n-    \"src/librustdoc/\",\n-    \"src/libserialize/\",\n-    \"src/libstd/\",\n-    \"src/libsyntax/\",\n-    \"src/libsyntax_expand/\",\n-    \"src/libsyntax_ext/\",\n-    \"src/libsyntax_pos/\",\n-    \"src/libterm/\",\n-    \"src/libtest/\",\n-    \"src/libunwind/\",\n-    \"src/rtstartup/\",\n-    \"src/rustc/\",\n-    \"src/rustllvm/\",\n-    \"src/test/\",\n-    \"src/tools/\",\n-    \"src/etc\",\n+    # tests for now are not formatted, as they are sometimes pretty-printing constrained\n+    # (and generally rustfmt can move around comments in UI-testing incompatible ways)\n+    \"src/test\",\n+\n+    # tidy issues (line length, etc.)\n+    # to be fixed shortly\n+    \"src/libcore/iter/adapters/mod.rs\",\n+    \"src/libcore/iter/traits/iterator.rs\",\n+    \"src/librustc/hir/lowering.rs\",\n+    \"src/librustc/infer/error_reporting/nice_region_error/outlives_closure.rs\",\n+    \"src/librustc/lint/mod.rs\",\n+    \"src/librustc/middle/resolve_lifetime.rs\",\n+    \"src/librustc/traits/mod.rs\",\n+    \"src/librustc/ty/constness.rs\",\n+    \"src/librustc/ty/context.rs\",\n+    \"src/librustc/ty/wf.rs\",\n+    \"src/librustc_codegen_llvm/back/write.rs\",\n+    \"src/librustc_codegen_llvm/consts.rs\",\n+    \"src/librustc_codegen_llvm/debuginfo/metadata.rs\",\n+    \"src/librustc_codegen_ssa/base.rs\",\n+    \"src/librustc_codegen_ssa/mir/place.rs\",\n+    \"src/librustc_codegen_utils/symbol_names/v0.rs\",\n+    \"src/librustc_errors/emitter.rs\",\n+    \"src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs\",\n+    \"src/librustc_mir/borrow_check/type_check/mod.rs\",\n+    \"src/librustc_mir/build/expr/as_rvalue.rs\",\n+    \"src/librustc_mir/build/matches/mod.rs\",\n+    \"src/librustc_mir/build/mod.rs\",\n+    \"src/librustc_mir/const_eval.rs\",\n+    \"src/librustc_mir/interpret/place.rs\",\n+    \"src/librustc_mir/monomorphize/collector.rs\",\n+    \"src/librustc_passes/ast_validation.rs\",\n+    \"src/librustc_resolve/lib.rs\",\n+    \"src/librustc_resolve/resolve_imports.rs\",\n+    \"src/librustc_typeck/astconv.rs\",\n+    \"src/librustc_typeck/check/_match.rs\",\n+    \"src/librustc_typeck/check/coercion.rs\",\n+    \"src/librustc_typeck/check/method/confirm.rs\",\n+    \"src/librustc_typeck/check/mod.rs\",\n+    \"src/librustc_typeck/check/wfcheck.rs\",\n+    \"src/librustdoc/html/markdown/tests.rs\",\n+    \"src/libstd/sys/sgx/abi/mem.rs\",\n+    \"src/libstd/sys/unix/os.rs\",\n+    \"src/libsyntax_expand/parse/lexer/tests.rs\",\n+    \"src/libsyntax_expand/parse/tests.rs\",\n+    \"src/libsyntax_ext/test.rs\",\n+    \"src/tools/build-manifest/src/main.rs\",\n+    \"src/librustc_feature\",\n \n     # do not format submodules\n     \"src/doc/book\","}, {"sha": "65b654fb51929ad8bd429821c3d10efe5c38273d", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8eb7c58dbb7b32701af113bc58722d0d1fefb1eb/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eb7c58dbb7b32701af113bc58722d0d1fefb1eb/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=8eb7c58dbb7b32701af113bc58722d0d1fefb1eb", "patch": "@@ -1,21 +1,17 @@\n //! Runs rustfmt on the repository.\n \n use crate::Build;\n-use std::process::Command;\n+use build_helper::t;\n use ignore::WalkBuilder;\n use std::path::Path;\n-use build_helper::t;\n-\n-fn rustfmt(build: &Build, path: &Path, check: bool) {\n-    let rustfmt_path = build.config.initial_rustfmt.as_ref().unwrap_or_else(|| {\n-        eprintln!(\"./x.py fmt is not supported on this channel\");\n-        std::process::exit(1);\n-    });\n+use std::process::Command;\n \n-    let mut cmd = Command::new(&rustfmt_path);\n+fn rustfmt(src: &Path, rustfmt: &Path, path: &Path, check: bool) {\n+    let mut cmd = Command::new(&rustfmt);\n     // avoid the submodule config paths from coming into play,\n     // we only allow a single global config for the workspace for now\n-    cmd.arg(\"--config-path\").arg(&build.src.canonicalize().unwrap());\n+    cmd.arg(\"--config-path\").arg(&src.canonicalize().unwrap());\n+    cmd.arg(\"--edition\").arg(\"2018\");\n     cmd.arg(\"--unstable-features\");\n     cmd.arg(\"--skip-children\");\n     if check {\n@@ -51,14 +47,21 @@ pub fn format(build: &Build, check: bool) {\n     }\n     let ignore_fmt = ignore_fmt.build().unwrap();\n \n-    let walker = WalkBuilder::new(&build.src)\n-        .types(matcher)\n-        .overrides(ignore_fmt)\n-        .build();\n-    for entry in walker {\n-        let entry = t!(entry);\n-        if entry.file_type().map_or(false, |t| t.is_file()) {\n-            rustfmt(build, &entry.path(), check);\n-        }\n-    }\n+    let rustfmt_path = build.config.initial_rustfmt.as_ref().unwrap_or_else(|| {\n+        eprintln!(\"./x.py fmt is not supported on this channel\");\n+        std::process::exit(1);\n+    });\n+    let src = build.src.clone();\n+    let walker = WalkBuilder::new(&build.src).types(matcher).overrides(ignore_fmt).build_parallel();\n+    walker.run(|| {\n+        let src = src.clone();\n+        let rustfmt_path = rustfmt_path.clone();\n+        Box::new(move |entry| {\n+            let entry = t!(entry);\n+            if entry.file_type().map_or(false, |t| t.is_file()) {\n+                rustfmt(&src, &rustfmt_path, &entry.path(), check);\n+            }\n+            ignore::WalkState::Continue\n+        })\n+    });\n }"}]}