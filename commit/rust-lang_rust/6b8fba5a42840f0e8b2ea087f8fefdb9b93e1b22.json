{"sha": "6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiOGZiYTVhNDI4NDBmMGU4YjJlYTA4N2Y4ZmVmZGI5YjkzZTFiMjI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-08-25T21:28:23Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-08-31T06:02:35Z"}, "message": "rustc_typeck: turn `where Type:,` into a WF(Type) predicate, instead of ignoring it.", "tree": {"sha": "ae23f099d3ce9c13c73b449b356e64fc8be99ff6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae23f099d3ce9c13c73b449b356e64fc8be99ff6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22", "html_url": "https://github.com/rust-lang/rust/commit/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1114ab684fbad001c4e580326d8eb4d8c4e917d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1114ab684fbad001c4e580326d8eb4d8c4e917d3", "html_url": "https://github.com/rust-lang/rust/commit/1114ab684fbad001c4e580326d8eb4d8c4e917d3"}], "stats": {"total": 68, "additions": 60, "deletions": 8}, "files": [{"sha": "43e44823b90ffcef11b8b63aa261233a516bb653", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22", "patch": "@@ -1796,6 +1796,21 @@ fn explicit_predicates_of<'a, 'tcx>(\n             &hir::WherePredicate::BoundPredicate(ref bound_pred) => {\n                 let ty = icx.to_ty(&bound_pred.bounded_ty);\n \n+                // Keep the type around in a WF predicate, in case of no bounds.\n+                // That way, `where Ty:` is not a complete noop (see #53696).\n+                if bound_pred.bounds.is_empty() {\n+                    if let ty::Param(_) = ty.sty {\n+                        // This is a `where T:`, which can be in the HIR from the\n+                        // transformation that moves `?Sized` to `T`'s declaration.\n+                        // We can skip the predicate because type parameters are\n+                        // trivially WF, but also we *should*, to avoid exposing\n+                        // users who never wrote `where Type:,` themselves, to\n+                        // compiler/tooling bugs from not handling WF predicates.\n+                    } else {\n+                        predicates.push(ty::Predicate::WellFormed(ty));\n+                    }\n+                }\n+\n                 for bound in bound_pred.bounds.iter() {\n                     match bound {\n                         &hir::GenericBound::Trait(ref poly_trait_ref, _) => {"}, {"sha": "da18e3e6b91b39d52c18cafb7fa3991f06ed8dc7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22", "patch": "@@ -1312,7 +1312,13 @@ impl<'a> Clean<WherePredicate> for ty::Predicate<'a> {\n             Predicate::RegionOutlives(ref pred) => pred.clean(cx),\n             Predicate::TypeOutlives(ref pred) => pred.clean(cx),\n             Predicate::Projection(ref pred) => pred.clean(cx),\n-            Predicate::WellFormed(_) => panic!(\"not user writable\"),\n+            Predicate::WellFormed(ty) => {\n+                // This comes from `where Ty:` (i.e. no bounds) (see #53696).\n+                WherePredicate::BoundPredicate {\n+                    ty: ty.clean(cx),\n+                    bounds: vec![],\n+                }\n+            }\n             Predicate::ObjectSafe(_) => panic!(\"not user writable\"),\n             Predicate::ClosureKind(..) => panic!(\"not user writable\"),\n             Predicate::ConstEvaluatable(..) => panic!(\"not user writable\"),"}, {"sha": "5305591b8434547402ee4ca0e918403cf9b08e01", "filename": "src/test/ui/chalkify/lower_trait_where_clause.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs?ref=6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22", "patch": "@@ -14,7 +14,15 @@ use std::fmt::{Debug, Display};\n use std::borrow::Borrow;\n \n #[rustc_dump_program_clauses] //~ ERROR program clause dump\n-trait Foo<'a, 'b, S, T, U> where S: Debug, T: Borrow<U>, U: ?Sized, 'a: 'b, U: 'b {\n+trait Foo<'a, 'b, S, T, U>\n+where\n+    S: Debug,\n+    T: Borrow<U>,\n+    U: ?Sized,\n+    'a: 'b,\n+    U: 'b,\n+    Vec<T>:, // NOTE(#53696) this checks an empty list of bounds.\n+{\n     fn s(_: S) -> S;\n     fn t(_: T) -> T;\n     fn u(_: U) -> U;"}, {"sha": "ad3546da1a25b4e93432af8be214dcce119757c7", "filename": "src/test/ui/chalkify/lower_trait_where_clause.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr?ref=6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22", "patch": "@@ -11,7 +11,8 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    = note: Implemented(Self: Foo<'a, 'b, S, T, U>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n    = note: RegionOutlives('a : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n    = note: TypeOutlives(U : 'b) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n-   = note: WellFormed(Self: Foo<'a, 'b, S, T, U>) :- Implemented(Self: Foo<'a, 'b, S, T, U>), WellFormed(S: std::marker::Sized), WellFormed(T: std::marker::Sized), WellFormed(S: std::fmt::Debug), WellFormed(T: std::borrow::Borrow<U>), RegionOutlives('a : 'b), TypeOutlives(U : 'b).\n+   = note: WellFormed(Self: Foo<'a, 'b, S, T, U>) :- Implemented(Self: Foo<'a, 'b, S, T, U>), WellFormed(S: std::marker::Sized), WellFormed(T: std::marker::Sized), WellFormed(S: std::fmt::Debug), WellFormed(T: std::borrow::Borrow<U>), RegionOutlives('a : 'b), TypeOutlives(U : 'b), WellFormed(std::vec::Vec<T>).\n+   = note: WellFormed(std::vec::Vec<T>) :- FromEnv(Self: Foo<'a, 'b, S, T, U>).\n \n error: aborting due to previous error\n "}, {"sha": "59bb8326ddbf5ba07fe69d3785d38fff5f95e5e1", "filename": "src/test/ui/wf/wf-fn-where-clause.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.rs?ref=6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22", "patch": "@@ -10,7 +10,6 @@\n \n // Test that we check where-clauses on fn items.\n \n-#![feature(associated_type_defaults)]\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n@@ -20,5 +19,9 @@ fn foo<T,U>() where T: ExtraCopy<U> //~ ERROR E0277\n {\n }\n \n+fn bar() where Vec<dyn Copy>:, {}\n+//~^ ERROR E0277\n+//~| ERROR E0038\n+\n #[rustc_error]\n fn main() { }"}, {"sha": "21591419ec856becec482c916c136eecbfceebb3", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=6b8fba5a42840f0e8b2ea087f8fefdb9b93e1b22", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `U: std::marker::Copy` is not satisfied\n-  --> $DIR/wf-fn-where-clause.rs:19:1\n+  --> $DIR/wf-fn-where-clause.rs:18:1\n    |\n LL | / fn foo<T,U>() where T: ExtraCopy<U> //~ ERROR E0277\n LL | | {\n@@ -8,11 +8,30 @@ LL | | }\n    |\n    = help: consider adding a `where U: std::marker::Copy` bound\n note: required by `ExtraCopy`\n-  --> $DIR/wf-fn-where-clause.rs:17:1\n+  --> $DIR/wf-fn-where-clause.rs:16:1\n    |\n LL | trait ExtraCopy<T:Copy> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0277]: the size for values of type `(dyn std::marker::Copy + 'static)` cannot be known at compilation time\n+  --> $DIR/wf-fn-where-clause.rs:22:1\n+   |\n+LL | fn bar() where Vec<dyn Copy>:, {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn std::marker::Copy + 'static)`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required by `std::vec::Vec`\n+\n+error[E0038]: the trait `std::marker::Copy` cannot be made into an object\n+  --> $DIR/wf-fn-where-clause.rs:22:1\n+   |\n+LL | fn bar() where Vec<dyn Copy>:, {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` cannot be made into an object\n+   |\n+   = note: the trait cannot require that `Self : Sized`\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors occurred: E0038, E0277.\n+For more information about an error, try `rustc --explain E0038`."}]}