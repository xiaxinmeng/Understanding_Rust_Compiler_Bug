{"sha": "c211cea3e99e04c2980a853b6637de22881b72eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMTFjZWEzZTk5ZTA0YzI5ODBhODUzYjY2MzdkZTIyODgxYjcyZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-31T15:36:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-31T15:36:54Z"}, "message": "Auto merge of #5398 - flip1995:deescalate, r=Manishearth\n\nStop updating the lint counter with every new lint\n\nr? @Manishearth\n\nThis PR does two things:\n\n1. Clean up the clippy_dev module a bit (first 3 commits; cc #5394 )\n2. Make the counter in the README count in steps of 50 lints. Also use a `lazy_static` `Vec` for the lint list, so no counter is required there anymore.\n\nchangelog: none", "tree": {"sha": "637aa1e2442abd544b94c431243b451f5d7faae5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/637aa1e2442abd544b94c431243b451f5d7faae5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c211cea3e99e04c2980a853b6637de22881b72eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c211cea3e99e04c2980a853b6637de22881b72eb", "html_url": "https://github.com/rust-lang/rust/commit/c211cea3e99e04c2980a853b6637de22881b72eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c211cea3e99e04c2980a853b6637de22881b72eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09fe163c9290b8aa573decb25d5b4b02f33e481e", "url": "https://api.github.com/repos/rust-lang/rust/commits/09fe163c9290b8aa573decb25d5b4b02f33e481e", "html_url": "https://github.com/rust-lang/rust/commit/09fe163c9290b8aa573decb25d5b4b02f33e481e"}, {"sha": "cbdf4cc71e36baa780bd4bc7aca66bc344ab70ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbdf4cc71e36baa780bd4bc7aca66bc344ab70ec", "html_url": "https://github.com/rust-lang/rust/commit/cbdf4cc71e36baa780bd4bc7aca66bc344ab70ec"}], "stats": {"total": 392, "additions": 198, "deletions": 194}, "files": [{"sha": "ffb88cdb4d9fc03dd7b8c19357da01d274a6373a", "filename": ".github/workflows/clippy_dev.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c211cea3e99e04c2980a853b6637de22881b72eb/.github%2Fworkflows%2Fclippy_dev.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c211cea3e99e04c2980a853b6637de22881b72eb/.github%2Fworkflows%2Fclippy_dev.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fclippy_dev.yml?ref=c211cea3e99e04c2980a853b6637de22881b72eb", "patch": "@@ -38,8 +38,8 @@ jobs:\n       run: cargo build --features deny-warnings\n       working-directory: clippy_dev\n \n-    - name: Test limit-stderr-length\n-      run: cargo dev --limit-stderr-length\n+    - name: Test limit_stderr_length\n+      run: cargo dev limit_stderr_length\n \n     - name: Test update_lints\n       run: cargo dev update_lints --check"}, {"sha": "2a30f5e8e530da555be5e391d62fff7d3665b96b", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c211cea3e99e04c2980a853b6637de22881b72eb/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c211cea3e99e04c2980a853b6637de22881b72eb/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c211cea3e99e04c2980a853b6637de22881b72eb", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 363 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are over 350 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "6ae3f58c1f2ada5a24893ee825872c9cfa1d8c2d", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c211cea3e99e04c2980a853b6637de22881b72eb/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c211cea3e99e04c2980a853b6637de22881b72eb/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=c211cea3e99e04c2980a853b6637de22881b72eb", "patch": "@@ -1,4 +1,4 @@\n-use clippy_dev::clippy_project_root;\n+use crate::clippy_project_root;\n use shell_escape::escape;\n use std::ffi::OsStr;\n use std::io;"}, {"sha": "83f60f15906f75ab69fefe77adba4e8e28bc82d4", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c211cea3e99e04c2980a853b6637de22881b72eb/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c211cea3e99e04c2980a853b6637de22881b72eb/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=c211cea3e99e04c2980a853b6637de22881b72eb", "patch": "@@ -9,6 +9,11 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use walkdir::WalkDir;\n \n+pub mod fmt;\n+pub mod new_lint;\n+pub mod stderr_length_check;\n+pub mod update_lints;\n+\n lazy_static! {\n     static ref DEC_CLIPPY_LINT_RE: Regex = Regex::new(\n         r#\"(?x)"}, {"sha": "d99235f7c07a7cf649498f5266468fdd89b49cfb", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 11, "deletions": 185, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/c211cea3e99e04c2980a853b6637de22881b72eb/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c211cea3e99e04c2980a853b6637de22881b72eb/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=c211cea3e99e04c2980a853b6637de22881b72eb", "patch": "@@ -1,21 +1,7 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n \n use clap::{App, Arg, SubCommand};\n-use clippy_dev::{\n-    gather_all, gen_changelog_lint_list, gen_deprecated, gen_lint_group_list, gen_modules_list, gen_register_lint_list,\n-    replace_region_in_file, Lint, DOCS_LINK,\n-};\n-use std::path::Path;\n-\n-mod fmt;\n-mod new_lint;\n-mod stderr_length_check;\n-\n-#[derive(Clone, Copy, PartialEq)]\n-enum UpdateMode {\n-    Check,\n-    Change,\n-}\n+use clippy_dev::{fmt, new_lint, stderr_length_check, update_lints};\n \n fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n@@ -97,28 +83,23 @@ fn main() {\n                         .takes_value(true),\n                 ),\n         )\n-        .arg(\n-            Arg::with_name(\"limit-stderr-length\")\n-                .long(\"limit-stderr-length\")\n-                .help(\"Ensures that stderr files do not grow longer than a certain amount of lines.\"),\n+        .subcommand(\n+            SubCommand::with_name(\"limit_stderr_length\")\n+                .about(\"Ensures that stderr files do not grow longer than a certain amount of lines.\"),\n         )\n         .get_matches();\n \n-    if matches.is_present(\"limit-stderr-length\") {\n-        stderr_length_check::check();\n-    }\n-\n     match matches.subcommand() {\n         (\"fmt\", Some(matches)) => {\n             fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n         },\n         (\"update_lints\", Some(matches)) => {\n             if matches.is_present(\"print-only\") {\n-                print_lints();\n+                update_lints::print_lints();\n             } else if matches.is_present(\"check\") {\n-                update_lints(UpdateMode::Check);\n+                update_lints::run(update_lints::UpdateMode::Check);\n             } else {\n-                update_lints(UpdateMode::Change);\n+                update_lints::run(update_lints::UpdateMode::Change);\n             }\n         },\n         (\"new_lint\", Some(matches)) => {\n@@ -127,168 +108,13 @@ fn main() {\n                 matches.value_of(\"name\"),\n                 matches.value_of(\"category\"),\n             ) {\n-                Ok(_) => update_lints(UpdateMode::Change),\n+                Ok(_) => update_lints::run(update_lints::UpdateMode::Change),\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n             }\n         },\n-        _ => {},\n-    }\n-}\n-\n-fn print_lints() {\n-    let lint_list = gather_all();\n-    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list).collect();\n-    let usable_lint_count = usable_lints.len();\n-    let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n-\n-    for (lint_group, mut lints) in grouped_by_lint_group {\n-        if lint_group == \"Deprecated\" {\n-            continue;\n-        }\n-        println!(\"\\n## {}\", lint_group);\n-\n-        lints.sort_by_key(|l| l.name.clone());\n-\n-        for lint in lints {\n-            println!(\n-                \"* [{}]({}#{}) ({})\",\n-                lint.name,\n-                clippy_dev::DOCS_LINK,\n-                lint.name,\n-                lint.desc\n-            );\n-        }\n-    }\n-\n-    println!(\"there are {} lints\", usable_lint_count);\n-}\n-\n-#[allow(clippy::too_many_lines)]\n-fn update_lints(update_mode: UpdateMode) {\n-    let lint_list: Vec<Lint> = gather_all().collect();\n-\n-    let internal_lints = Lint::internal_lints(lint_list.clone().into_iter());\n-\n-    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n-    let usable_lint_count = usable_lints.len();\n-\n-    let mut sorted_usable_lints = usable_lints.clone();\n-    sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n-\n-    let mut file_change = replace_region_in_file(\n-        Path::new(\"src/lintlist/mod.rs\"),\n-        \"begin lint list\",\n-        \"end lint list\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || {\n-            format!(\n-                \"pub const ALL_LINTS: [Lint; {}] = {:#?};\",\n-                sorted_usable_lints.len(),\n-                sorted_usable_lints\n-            )\n-            .lines()\n-            .map(ToString::to_string)\n-            .collect::<Vec<_>>()\n-        },\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"README.md\"),\n-        &format!(r#\"\\[There are \\d+ lints included in this crate!\\]\\({}\\)\"#, DOCS_LINK),\n-        \"\",\n-        true,\n-        update_mode == UpdateMode::Change,\n-        || {\n-            vec![format!(\n-                \"[There are {} lints included in this crate!]({})\",\n-                usable_lint_count, DOCS_LINK\n-            )]\n+        (\"limit_stderr_length\", _) => {\n+            stderr_length_check::check();\n         },\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"CHANGELOG.md\"),\n-        \"<!-- begin autogenerated links to lint list -->\",\n-        \"<!-- end autogenerated links to lint list -->\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_changelog_lint_list(lint_list.clone()),\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin deprecated lints\",\n-        \"end deprecated lints\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_deprecated(&lint_list),\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin register lints\",\n-        \"end register lints\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_register_lint_list(&lint_list),\n-    )\n-    .changed;\n-\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        \"begin lints modules\",\n-        \"end lints modules\",\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || gen_modules_list(lint_list.clone()),\n-    )\n-    .changed;\n-\n-    // Generate lists of lints in the clippy::all lint group\n-    file_change |= replace_region_in_file(\n-        Path::new(\"clippy_lints/src/lib.rs\"),\n-        r#\"store.register_group\\(true, \"clippy::all\"\"#,\n-        r#\"\\]\\);\"#,\n-        false,\n-        update_mode == UpdateMode::Change,\n-        || {\n-            // clippy::all should only include the following lint groups:\n-            let all_group_lints = usable_lints\n-                .clone()\n-                .into_iter()\n-                .filter(|l| {\n-                    l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n-                })\n-                .collect();\n-\n-            gen_lint_group_list(all_group_lints)\n-        },\n-    )\n-    .changed;\n-\n-    // Generate the list of lints for all other lint groups\n-    for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n-        file_change |= replace_region_in_file(\n-            Path::new(\"clippy_lints/src/lib.rs\"),\n-            &format!(\"store.register_group\\\\(true, \\\"clippy::{}\\\"\", lint_group),\n-            r#\"\\]\\);\"#,\n-            false,\n-            update_mode == UpdateMode::Change,\n-            || gen_lint_group_list(lints.clone()),\n-        )\n-        .changed;\n-    }\n-\n-    if update_mode == UpdateMode::Check && file_change {\n-        println!(\n-            \"Not all lints defined properly. \\\n-             Please run `cargo dev update_lints` to make sure all lints are defined properly.\"\n-        );\n-        std::process::exit(1);\n+        _ => {},\n     }\n }"}, {"sha": "44b2a5383d2113f367c1a6262e351b236ea33e16", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c211cea3e99e04c2980a853b6637de22881b72eb/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c211cea3e99e04c2980a853b6637de22881b72eb/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=c211cea3e99e04c2980a853b6637de22881b72eb", "patch": "@@ -1,10 +1,15 @@\n-use clippy_dev::clippy_project_root;\n+use crate::clippy_project_root;\n use std::fs::{File, OpenOptions};\n use std::io;\n use std::io::prelude::*;\n use std::io::ErrorKind;\n use std::path::Path;\n \n+/// Creates files required to implement and test a new lint and runs `update_lints`.\n+///\n+/// # Errors\n+///\n+/// This function errors, if the files couldn't be created\n pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>) -> Result<(), io::Error> {\n     let pass = pass.expect(\"`pass` argument is validated by clap\");\n     let lint_name = lint_name.expect(\"`name` argument is validated by clap\");"}, {"sha": "e02b6f7da5f7b66e7653403d2f823984eb000ce4", "filename": "clippy_dev/src/stderr_length_check.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c211cea3e99e04c2980a853b6637de22881b72eb/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c211cea3e99e04c2980a853b6637de22881b72eb/clippy_dev%2Fsrc%2Fstderr_length_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fstderr_length_check.rs?ref=c211cea3e99e04c2980a853b6637de22881b72eb", "patch": "@@ -1,11 +1,9 @@\n+use crate::clippy_project_root;\n use std::ffi::OsStr;\n use std::fs;\n use std::path::{Path, PathBuf};\n-\n use walkdir::WalkDir;\n \n-use clippy_dev::clippy_project_root;\n-\n // The maximum length allowed for stderr files.\n //\n // We limit this because small files are easier to deal with than bigger files."}, {"sha": "d30d6f97a2f75b88c7a14427d19a98e588bbd64d", "filename": "clippy_dev/src/update_lints.rs", "status": "added", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/c211cea3e99e04c2980a853b6637de22881b72eb/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c211cea3e99e04c2980a853b6637de22881b72eb/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=c211cea3e99e04c2980a853b6637de22881b72eb", "patch": "@@ -0,0 +1,166 @@\n+use crate::{\n+    gather_all, gen_changelog_lint_list, gen_deprecated, gen_lint_group_list, gen_modules_list, gen_register_lint_list,\n+    replace_region_in_file, Lint, DOCS_LINK,\n+};\n+use std::path::Path;\n+\n+#[derive(Clone, Copy, PartialEq)]\n+pub enum UpdateMode {\n+    Check,\n+    Change,\n+}\n+\n+#[allow(clippy::too_many_lines)]\n+pub fn run(update_mode: UpdateMode) {\n+    let lint_list: Vec<Lint> = gather_all().collect();\n+\n+    let internal_lints = Lint::internal_lints(lint_list.clone().into_iter());\n+\n+    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n+    let usable_lint_count = round_to_fifty(usable_lints.len());\n+\n+    let mut sorted_usable_lints = usable_lints.clone();\n+    sorted_usable_lints.sort_by_key(|lint| lint.name.clone());\n+\n+    let mut file_change = replace_region_in_file(\n+        Path::new(\"src/lintlist/mod.rs\"),\n+        \"begin lint list\",\n+        \"end lint list\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || {\n+            format!(\"pub static ref ALL_LINTS: Vec<Lint> = vec!{:#?};\", sorted_usable_lints)\n+                .lines()\n+                .map(ToString::to_string)\n+                .collect::<Vec<_>>()\n+        },\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"README.md\"),\n+        &format!(\n+            r#\"\\[There are over \\d+ lints included in this crate!\\]\\({}\\)\"#,\n+            DOCS_LINK\n+        ),\n+        \"\",\n+        true,\n+        update_mode == UpdateMode::Change,\n+        || {\n+            vec![format!(\n+                \"[There are over {} lints included in this crate!]({})\",\n+                usable_lint_count, DOCS_LINK\n+            )]\n+        },\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"CHANGELOG.md\"),\n+        \"<!-- begin autogenerated links to lint list -->\",\n+        \"<!-- end autogenerated links to lint list -->\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || gen_changelog_lint_list(lint_list.clone()),\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n+        \"begin deprecated lints\",\n+        \"end deprecated lints\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || gen_deprecated(&lint_list),\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n+        \"begin register lints\",\n+        \"end register lints\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || gen_register_lint_list(&lint_list),\n+    )\n+    .changed;\n+\n+    file_change |= replace_region_in_file(\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n+        \"begin lints modules\",\n+        \"end lints modules\",\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || gen_modules_list(lint_list.clone()),\n+    )\n+    .changed;\n+\n+    // Generate lists of lints in the clippy::all lint group\n+    file_change |= replace_region_in_file(\n+        Path::new(\"clippy_lints/src/lib.rs\"),\n+        r#\"store.register_group\\(true, \"clippy::all\"\"#,\n+        r#\"\\]\\);\"#,\n+        false,\n+        update_mode == UpdateMode::Change,\n+        || {\n+            // clippy::all should only include the following lint groups:\n+            let all_group_lints = usable_lints\n+                .clone()\n+                .into_iter()\n+                .filter(|l| {\n+                    l.group == \"correctness\" || l.group == \"style\" || l.group == \"complexity\" || l.group == \"perf\"\n+                })\n+                .collect();\n+\n+            gen_lint_group_list(all_group_lints)\n+        },\n+    )\n+    .changed;\n+\n+    // Generate the list of lints for all other lint groups\n+    for (lint_group, lints) in Lint::by_lint_group(usable_lints.into_iter().chain(internal_lints)) {\n+        file_change |= replace_region_in_file(\n+            Path::new(\"clippy_lints/src/lib.rs\"),\n+            &format!(\"store.register_group\\\\(true, \\\"clippy::{}\\\"\", lint_group),\n+            r#\"\\]\\);\"#,\n+            false,\n+            update_mode == UpdateMode::Change,\n+            || gen_lint_group_list(lints.clone()),\n+        )\n+        .changed;\n+    }\n+\n+    if update_mode == UpdateMode::Check && file_change {\n+        println!(\n+            \"Not all lints defined properly. \\\n+             Please run `cargo dev update_lints` to make sure all lints are defined properly.\"\n+        );\n+        std::process::exit(1);\n+    }\n+}\n+\n+pub fn print_lints() {\n+    let lint_list = gather_all();\n+    let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list).collect();\n+    let usable_lint_count = usable_lints.len();\n+    let grouped_by_lint_group = Lint::by_lint_group(usable_lints.into_iter());\n+\n+    for (lint_group, mut lints) in grouped_by_lint_group {\n+        if lint_group == \"Deprecated\" {\n+            continue;\n+        }\n+        println!(\"\\n## {}\", lint_group);\n+\n+        lints.sort_by_key(|l| l.name.clone());\n+\n+        for lint in lints {\n+            println!(\"* [{}]({}#{}) ({})\", lint.name, DOCS_LINK, lint.name, lint.desc);\n+        }\n+    }\n+\n+    println!(\"there are {} lints\", usable_lint_count);\n+}\n+\n+fn round_to_fifty(count: usize) -> usize {\n+    count / 50 * 50\n+}"}, {"sha": "3b89f5d1947771e95ca5d0ccef2e5175b5b02cb6", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c211cea3e99e04c2980a853b6637de22881b72eb/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c211cea3e99e04c2980a853b6637de22881b72eb/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=c211cea3e99e04c2980a853b6637de22881b72eb", "patch": "@@ -1,12 +1,15 @@\n //! This file is managed by `cargo dev update_lints`. Do not edit.\n \n+use lazy_static::lazy_static;\n+\n pub mod lint;\n pub use lint::Level;\n pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n+lazy_static! {\n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 363] = [\n+pub static ref ALL_LINTS: Vec<Lint> = vec![\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -2550,3 +2553,4 @@ pub const ALL_LINTS: [Lint; 363] = [\n     },\n ];\n // end lint list, do not remove this comment, it\u2019s used in `update_lints`\n+}"}]}