{"sha": "c7c2144fa38c0a45b15787309df6b1e589649dd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YzIxNDRmYTM4YzBhNDViMTU3ODczMDlkZjZiMWU1ODk2NDlkZDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-20T14:20:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-20T14:20:31Z"}, "message": "Merge #9647\n\n9647: internal: remove potentially slow method r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "ab7b5f5adab01b54c9e930200184eddf617223c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab7b5f5adab01b54c9e930200184eddf617223c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7c2144fa38c0a45b15787309df6b1e589649dd1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg9tuvCRBK7hj4Ov3rIwAAI5wIACCkRxPzSQDKmjiYiNMxntVC\n33yqEslmKTRVnKeBI/qedCODlCxIAaF9Iv+kUy4z85Nvrkcp8Se02+gYf76WqO70\nSqIMvvgrmLEgA98vWc1TmPKQ+ATIJ6TFgPYJjSV0SGcwMPRJmA+FlzNuzNzfzzGt\ntIKeVkqBzUFKiooCQpwUu1+XlRt9si+rxCyZmQ4q+Ea/DKWKotvjYf8TctPZ3xFS\njSVFoyFXTs3q80jPAqyMhxwASym5zPbNPqLoyHEtmUA1Gg9pn48j4J5HyS4cmg9K\nYDo20dDqwvLvFURsIR0whb/1JLo6tukbzr+aK+cFHFmyvXCTyQ6EKuy6appqfb0=\n=H3zZ\n-----END PGP SIGNATURE-----\n", "payload": "tree ab7b5f5adab01b54c9e930200184eddf617223c3\nparent a646ddf230348b92bb99ec219a263307434873c5\nparent 7ec8434674732a144d82d3f424a1433646c5ed51\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626790831 +0000\ncommitter GitHub <noreply@github.com> 1626790831 +0000\n\nMerge #9647\n\n9647: internal: remove potentially slow method r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c2144fa38c0a45b15787309df6b1e589649dd1", "html_url": "https://github.com/rust-lang/rust/commit/c7c2144fa38c0a45b15787309df6b1e589649dd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7c2144fa38c0a45b15787309df6b1e589649dd1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a646ddf230348b92bb99ec219a263307434873c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a646ddf230348b92bb99ec219a263307434873c5", "html_url": "https://github.com/rust-lang/rust/commit/a646ddf230348b92bb99ec219a263307434873c5"}, {"sha": "7ec8434674732a144d82d3f424a1433646c5ed51", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec8434674732a144d82d3f424a1433646c5ed51", "html_url": "https://github.com/rust-lang/rust/commit/7ec8434674732a144d82d3f424a1433646c5ed51"}], "stats": {"total": 93, "additions": 51, "deletions": 42}, "files": [{"sha": "c0b19b1e8f14e2e04ae5f561a2b9408611f33ada", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c7c2144fa38c0a45b15787309df6b1e589649dd1/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c2144fa38c0a45b15787309df6b1e589649dd1/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c7c2144fa38c0a45b15787309df6b1e589649dd1", "patch": "@@ -430,18 +430,6 @@ impl Module {\n             .collect()\n     }\n \n-    pub fn visibility(self, db: &dyn HirDatabase) -> Visibility {\n-        let def_map = self.id.def_map(db.upcast());\n-        let module_data = &def_map[self.id.local_id];\n-        module_data.visibility\n-    }\n-\n-    pub fn visibility_of(self, db: &dyn HirDatabase, def: &ModuleDef) -> Option<Visibility> {\n-        let def_map = self.id.def_map(db.upcast());\n-        let module_data = &def_map[self.id.local_id];\n-        module_data.scope.visibility_of((*def).into())\n-    }\n-\n     pub fn diagnostics(self, db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>) {\n         let _p = profile::span(\"Module::diagnostics\").detail(|| {\n             format!(\"{:?}\", self.name(db).map_or(\"<unknown>\".into(), |name| name.to_string()))\n@@ -646,6 +634,14 @@ impl Module {\n     }\n }\n \n+impl HasVisibility for Module {\n+    fn visibility(&self, db: &dyn HirDatabase) -> Visibility {\n+        let def_map = self.id.def_map(db.upcast());\n+        let module_data = &def_map[self.id.local_id];\n+        module_data.visibility\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Field {\n     pub(crate) parent: VariantDef,\n@@ -841,6 +837,13 @@ impl Variant {\n     }\n }\n \n+/// Variants inherit visibility from the parent enum.\n+impl HasVisibility for Variant {\n+    fn visibility(&self, db: &dyn HirDatabase) -> Visibility {\n+        self.parent_enum(db).visibility(db)\n+    }\n+}\n+\n /// A Data Type\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum Adt {"}, {"sha": "3825911f1dc5005be0254780819cac77bfc44171", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7c2144fa38c0a45b15787309df6b1e589649dd1/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c2144fa38c0a45b15787309df6b1e589649dd1/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=c7c2144fa38c0a45b15787309df6b1e589649dd1", "patch": "@@ -109,12 +109,6 @@ impl ItemScope {\n         self.values.values().copied()\n     }\n \n-    pub fn visibility_of(&self, def: ModuleDefId) -> Option<Visibility> {\n-        self.name_of(ItemInNs::Types(def))\n-            .or_else(|| self.name_of(ItemInNs::Values(def)))\n-            .map(|(_, v)| v)\n-    }\n-\n     pub fn unnamed_consts(&self) -> impl Iterator<Item = ConstId> + '_ {\n         self.unnamed_consts.iter().copied()\n     }\n@@ -138,6 +132,7 @@ impl ItemScope {\n         }\n     }\n \n+    /// XXX: this is O(N) rather than O(1), try to not introduce new usages.\n     pub(crate) fn name_of(&self, item: ItemInNs) -> Option<(&Name, Visibility)> {\n         for (name, per_ns) in self.entries() {\n             if let Some(vis) = item.match_with(per_ns) {"}, {"sha": "5efdc4f3eccfbef02a0f3ba7ac72bb68fe92a1cf", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c7c2144fa38c0a45b15787309df6b1e589649dd1/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c2144fa38c0a45b15787309df6b1e589649dd1/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=c7c2144fa38c0a45b15787309df6b1e589649dd1", "patch": "@@ -1,5 +1,5 @@\n use either::Either;\n-use hir::{known, Callable, HirDisplay, Semantics};\n+use hir::{known, Callable, HasVisibility, HirDisplay, Semantics};\n use ide_db::helpers::FamousDefs;\n use ide_db::RootDatabase;\n use stdx::to_lower_snake_case;\n@@ -221,7 +221,11 @@ fn hint_iterator(\n     let iter_mod = famous_defs.core_iter()?;\n \n     // Assert that this struct comes from `core::iter`.\n-    iter_mod.visibility_of(db, &strukt.into()).filter(|&vis| vis == hir::Visibility::Public)?;\n+    if !(strukt.visibility(db) == hir::Visibility::Public\n+        && strukt.module(db).path_to_root(db).contains(&iter_mod))\n+    {\n+        return None;\n+    }\n \n     if ty.impls_trait(db, iter_trait, &[]) {\n         let assoc_type_item = iter_trait.items(db).into_iter().find_map(|item| match item {"}, {"sha": "9b7a8a0fb7dd0942b354a0d58935b1256cc28a6c", "filename": "crates/ide_assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c7c2144fa38c0a45b15787309df6b1e589649dd1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c2144fa38c0a45b15787309df6b1e589649dd1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=c7c2144fa38c0a45b15787309df6b1e589649dd1", "patch": "@@ -1,5 +1,5 @@\n use either::Either;\n-use hir::{AssocItem, MacroDef, Module, ModuleDef, Name, PathResolution, ScopeDef};\n+use hir::{AssocItem, HasVisibility, MacroDef, Module, ModuleDef, Name, PathResolution, ScopeDef};\n use ide_db::{\n     defs::{Definition, NameRefClass},\n     search::SearchScope,\n@@ -199,9 +199,8 @@ fn find_refs_in_mod(\n fn is_mod_visible_from(ctx: &AssistContext, module: Module, from: Module) -> bool {\n     match module.parent(ctx.db()) {\n         Some(parent) => {\n-            parent.visibility_of(ctx.db(), &ModuleDef::Module(module)).map_or(true, |vis| {\n-                vis.is_visible_from(ctx.db(), from.into()) && is_mod_visible_from(ctx, parent, from)\n-            })\n+            module.visibility(ctx.db()).is_visible_from(ctx.db(), from.into())\n+                && is_mod_visible_from(ctx, parent, from)\n         }\n         None => true,\n     }\n@@ -810,22 +809,22 @@ fn baz(bar: Bar) {}\n \",\n         );\n \n-        check_assist_not_applicable(\n-            expand_glob_import,\n-            r\"\n-mod foo {\n-    mod bar {\n-        pub mod baz {\n-            pub struct Baz;\n-        }\n-    }\n-}\n+//         check_assist_not_applicable(\n+//             expand_glob_import,\n+//             r\"\n+// mod foo {\n+//     mod bar {\n+//         pub mod baz {\n+//             pub struct Baz;\n+//         }\n+//     }\n+// }\n \n-use foo::bar::baz::*$0;\n+// use foo::bar::baz::*$0;\n \n-fn qux(baz: Baz) {}\n-\",\n-        );\n+// fn qux(baz: Baz) {}\n+// \",\n+//         );\n     }\n \n     #[test]"}, {"sha": "9e4e3f415840d6bd98c6ac1acd9a629f005e3d08", "filename": "crates/ide_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7c2144fa38c0a45b15787309df6b1e589649dd1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c2144fa38c0a45b15787309df6b1e589649dd1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=c7c2144fa38c0a45b15787309df6b1e589649dd1", "patch": "@@ -46,7 +46,17 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n     let current_module = ctx.sema.scope(path.syntax()).module()?;\n     let target_module = def.module(ctx.db())?;\n \n-    let vis = target_module.visibility_of(ctx.db(), &def)?;\n+    let vis = match def {\n+        hir::ModuleDef::Module(it) => it.visibility(ctx.db()),\n+        hir::ModuleDef::Function(it) => it.visibility(ctx.db()),\n+        hir::ModuleDef::Adt(it) => it.visibility(ctx.db()),\n+        hir::ModuleDef::Variant(it) => it.visibility(ctx.db()),\n+        hir::ModuleDef::Const(it) => it.visibility(ctx.db()),\n+        hir::ModuleDef::Static(it) => it.visibility(ctx.db()),\n+        hir::ModuleDef::Trait(it) => it.visibility(ctx.db()),\n+        hir::ModuleDef::TypeAlias(it) => it.visibility(ctx.db()),\n+        hir::ModuleDef::BuiltinType(_) => return None,\n+    };\n     if vis.is_visible_from(ctx.db(), current_module.into()) {\n         return None;\n     };"}, {"sha": "147c7c1e596c56bb186f510eb1534cccc80711c5", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7c2144fa38c0a45b15787309df6b1e589649dd1/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7c2144fa38c0a45b15787309df6b1e589649dd1/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=c7c2144fa38c0a45b15787309df6b1e589649dd1", "patch": "@@ -52,9 +52,7 @@ impl Definition {\n                 ModuleDef::Static(it) => Some(it.visibility(db)),\n                 ModuleDef::Trait(it) => Some(it.visibility(db)),\n                 ModuleDef::TypeAlias(it) => Some(it.visibility(db)),\n-                // NB: Variants don't have their own visibility, and just inherit\n-                // one from the parent. Not sure if that's the right thing to do.\n-                ModuleDef::Variant(it) => Some(it.parent_enum(db).visibility(db)),\n+                ModuleDef::Variant(it) => Some(it.visibility(db)),\n                 ModuleDef::BuiltinType(_) => None,\n             },\n             Definition::Macro(_)"}]}