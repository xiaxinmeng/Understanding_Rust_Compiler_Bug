{"sha": "3356ad7c26d11deef6b6da50ac21905e422bf4fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNTZhZDdjMjZkMTFkZWVmNmI2ZGE1MGFjMjE5MDVlNDIyYmY0ZmI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-16T20:36:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-16T20:36:38Z"}, "message": "Rollup merge of #77547 - RalfJung:stable-union-drop, r=matthewjasper\n\nstabilize union with 'ManuallyDrop' fields and 'impl Drop for Union'\n\nAs [discussed by @SimonSapin and @withoutboats](https://github.com/rust-lang/rust/issues/55149#issuecomment-634692020), this PR proposes to stabilize parts of the `untagged_union` feature gate:\n\n* It will be possible to have a union with field type `ManuallyDrop<T>` for any `T`.\n* While at it I propose we also stabilize `impl Drop for Union`; to my knowledge, there are no open concerns around this feature.\n\nIn the RFC discussion, we also talked about allowing `&mut T` as another non-`Copy` non-dropping type, but that felt to me like an overly specific exception so I figured we'd wait if there is actually any use for such a special case.\n\nSome things remain unstable and still require the `untagged_union` feature gate:\n* Union with fields that do not drop, are not `Copy`, and are not `ManuallyDrop<_>`. The reason to not stabilize this is to avoid semver concerns around libraries adding `Drop` implementations later. (This is already not fully semver compatible as, to my knowledge, the borrow checker will exploit the non-dropping nature of any type, but it seems prudent to avoid further increasing the amount of trouble adding an `impl Drop` can cause.)\n\nDue to this, quite a few tests still need the `untagged_union` feature, but I think the ones where I could remove the feature flag provide good test coverage for the stable part.\n\nCc @rust-lang/lang", "tree": {"sha": "acab88868a1a11ef67f910bc8e2dd276bf3f1399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acab88868a1a11ef67f910bc8e2dd276bf3f1399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3356ad7c26d11deef6b6da50ac21905e422bf4fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfigRXCRBK7hj4Ov3rIwAAdHIIAAOc4tCukySRXxHP3X1/xmcn\nHNuHsIT/jKxzNUqXzs28u8JnJsc3pqYc5H9vURcqY9UfphLg2Hi3HVZoTjW7Z3Qk\nR5LrxH3SSsPjk1y6EIeVf5X+33SJXUsJM5IM1ROZlpkxVIjr6/l1ivR/9qlsjXRT\n71B9s2NVjhFWTtj+wQ8uU5elWgL1lUIFCcMP5SSewDV45rlwgYmMRSygi0ZrTNin\n3mHVHj3FmRv6RSqrcntaSM6PwnF6t83p6VbOUHuWNi0COLgg2jOS7cGt9t7oGEA7\n7AHLU6NaTFzgYh+xWh1tpVPuD5s8Sfk3XmEMLXwTJfn53yMqgiCvJUZCbE3Hq7M=\n=wstI\n-----END PGP SIGNATURE-----\n", "payload": "tree acab88868a1a11ef67f910bc8e2dd276bf3f1399\nparent 7581bb7c02f9960fba66add3e4c7c62874c60c7f\nparent defcd7ff47d81f184eb3ba5c1d44bbb9e3658de0\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1602880598 +0900\ncommitter GitHub <noreply@github.com> 1602880598 +0900\n\nRollup merge of #77547 - RalfJung:stable-union-drop, r=matthewjasper\n\nstabilize union with 'ManuallyDrop' fields and 'impl Drop for Union'\n\nAs [discussed by @SimonSapin and @withoutboats](https://github.com/rust-lang/rust/issues/55149#issuecomment-634692020), this PR proposes to stabilize parts of the `untagged_union` feature gate:\n\n* It will be possible to have a union with field type `ManuallyDrop<T>` for any `T`.\n* While at it I propose we also stabilize `impl Drop for Union`; to my knowledge, there are no open concerns around this feature.\n\nIn the RFC discussion, we also talked about allowing `&mut T` as another non-`Copy` non-dropping type, but that felt to me like an overly specific exception so I figured we'd wait if there is actually any use for such a special case.\n\nSome things remain unstable and still require the `untagged_union` feature gate:\n* Union with fields that do not drop, are not `Copy`, and are not `ManuallyDrop<_>`. The reason to not stabilize this is to avoid semver concerns around libraries adding `Drop` implementations later. (This is already not fully semver compatible as, to my knowledge, the borrow checker will exploit the non-dropping nature of any type, but it seems prudent to avoid further increasing the amount of trouble adding an `impl Drop` can cause.)\n\nDue to this, quite a few tests still need the `untagged_union` feature, but I think the ones where I could remove the feature flag provide good test coverage for the stable part.\n\nCc @rust-lang/lang\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3356ad7c26d11deef6b6da50ac21905e422bf4fb", "html_url": "https://github.com/rust-lang/rust/commit/3356ad7c26d11deef6b6da50ac21905e422bf4fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3356ad7c26d11deef6b6da50ac21905e422bf4fb/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7581bb7c02f9960fba66add3e4c7c62874c60c7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7581bb7c02f9960fba66add3e4c7c62874c60c7f", "html_url": "https://github.com/rust-lang/rust/commit/7581bb7c02f9960fba66add3e4c7c62874c60c7f"}, {"sha": "defcd7ff47d81f184eb3ba5c1d44bbb9e3658de0", "url": "https://api.github.com/repos/rust-lang/rust/commits/defcd7ff47d81f184eb3ba5c1d44bbb9e3658de0", "html_url": "https://github.com/rust-lang/rust/commit/defcd7ff47d81f184eb3ba5c1d44bbb9e3658de0"}], "stats": {"total": 259, "additions": 109, "deletions": 150}, "files": [{"sha": "c9497f2a5b2b058a3b89150d82e556515a442461", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -13,15 +13,13 @@ use rustc_hir::{Generics, HirId, Item, StructField, TraitRef, Ty, TyKind, Varian\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability::{DeprecationEntry, Index};\n-use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{self, query::Providers, TyCtxt};\n use rustc_session::lint;\n use rustc_session::lint::builtin::INEFFECTIVE_UNSTABLE_TRAIT_IMPL;\n use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::Span;\n-use rustc_trait_selection::traits::misc::can_type_implement_copy;\n+use rustc_span::{Span, DUMMY_SP};\n \n use std::cmp::Ordering;\n use std::mem::replace;\n@@ -711,27 +709,35 @@ impl Visitor<'tcx> for Checker<'tcx> {\n             // so semi-randomly perform it here in stability.rs\n             hir::ItemKind::Union(..) if !self.tcx.features().untagged_unions => {\n                 let def_id = self.tcx.hir().local_def_id(item.hir_id);\n-                let adt_def = self.tcx.adt_def(def_id);\n                 let ty = self.tcx.type_of(def_id);\n+                let (adt_def, substs) = match ty.kind() {\n+                    ty::Adt(adt_def, substs) => (adt_def, substs),\n+                    _ => bug!(),\n+                };\n \n-                if adt_def.has_dtor(self.tcx) {\n-                    feature_err(\n-                        &self.tcx.sess.parse_sess,\n-                        sym::untagged_unions,\n-                        item.span,\n-                        \"unions with `Drop` implementations are unstable\",\n-                    )\n-                    .emit();\n-                } else {\n-                    let param_env = self.tcx.param_env(def_id);\n-                    if can_type_implement_copy(self.tcx, param_env, ty).is_err() {\n-                        feature_err(\n-                            &self.tcx.sess.parse_sess,\n-                            sym::untagged_unions,\n-                            item.span,\n-                            \"unions with non-`Copy` fields are unstable\",\n-                        )\n-                        .emit();\n+                // Non-`Copy` fields are unstable, except for `ManuallyDrop`.\n+                let param_env = self.tcx.param_env(def_id);\n+                for field in &adt_def.non_enum_variant().fields {\n+                    let field_ty = field.ty(self.tcx, substs);\n+                    if !field_ty.ty_adt_def().map_or(false, |adt_def| adt_def.is_manually_drop())\n+                        && !field_ty.is_copy_modulo_regions(self.tcx.at(DUMMY_SP), param_env)\n+                    {\n+                        if field_ty.needs_drop(self.tcx, param_env) {\n+                            // Avoid duplicate error: This will error later anyway because fields\n+                            // that need drop are not allowed.\n+                            self.tcx.sess.delay_span_bug(\n+                                item.span,\n+                                \"union should have been rejected due to potentially dropping field\",\n+                            );\n+                        } else {\n+                            feature_err(\n+                                &self.tcx.sess.parse_sess,\n+                                sym::untagged_unions,\n+                                self.tcx.def_span(field.did),\n+                                \"unions with non-`Copy` fields other than `ManuallyDrop<T>` are unstable\",\n+                            )\n+                            .emit();\n+                        }\n                     }\n                 }\n             }"}, {"sha": "3d8653b4a6a470ecd72001ecfc5c477fec151b55", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -348,8 +348,7 @@ pub(super) fn check_union(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n     check_packed(tcx, span, def);\n }\n \n-/// When the `#![feature(untagged_unions)]` gate is active,\n-/// check that the fields of the `union` does not contain fields that need dropping.\n+/// Check that the fields of the `union` do not need dropping.\n pub(super) fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> bool {\n     let item_type = tcx.type_of(item_def_id);\n     if let ty::Adt(def, substs) = item_type.kind() {"}, {"sha": "737a95b603b2ac37653167118d2546f2f75776b7", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -131,7 +131,7 @@\n #![feature(transparent_unions)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]\n-#![feature(untagged_unions)]\n+#![cfg_attr(bootstrap, feature(untagged_unions))]\n #![feature(unwind_attributes)]\n #![feature(variant_count)]\n #![feature(tbm_target_feature)]"}, {"sha": "bca3be56ba5f525a7ba6364d53e7a200f02b3eac", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -229,6 +229,16 @@ pub(crate) struct FatPtr<T> {\n     pub(crate) len: usize,\n }\n \n+// Manual impl needed to avoid `T: Clone` bound.\n+impl<T> Clone for FatPtr<T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+// Manual impl needed to avoid `T: Copy` bound.\n+impl<T> Copy for FatPtr<T> {}\n+\n /// Forms a raw slice from a pointer and a length.\n ///\n /// The `len` argument is the number of **elements**, not the number of bytes."}, {"sha": "30e7a7f3c3b10f5600dd551803cb573fbe514b01", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -319,7 +319,7 @@\n #![feature(unsafe_block_in_unsafe_fn)]\n #![feature(unsafe_cell_get_mut)]\n #![feature(unsafe_cell_raw_get)]\n-#![feature(untagged_unions)]\n+#![cfg_attr(bootstrap, feature(untagged_unions))]\n #![feature(unwind_attributes)]\n #![feature(vec_into_raw_parts)]\n #![feature(wake_trait)]"}, {"sha": "99ebe84cd9d83772506f5b2d7537f53c59985abd", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -68,7 +68,6 @@ enum N<F> where F: Fn() -> _ {\n \n union O<F> where F: Fn() -> _ {\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n-//~| ERROR unions with non-`Copy` fields are unstable\n     foo: F,\n }\n "}, {"sha": "ebc0883370b7d62b0a57f95132d878c23288030c", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -57,19 +57,6 @@ LL | type J = ty!(u8);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0658]: unions with non-`Copy` fields are unstable\n-  --> $DIR/bad-assoc-ty.rs:69:1\n-   |\n-LL | / union O<F> where F: Fn() -> _ {\n-LL | |\n-LL | |\n-LL | |     foo: F,\n-LL | | }\n-   | |_^\n-   |\n-   = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n-   = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n-\n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:1:10\n    |\n@@ -215,7 +202,7 @@ LL | union O<F, T> where F: Fn() -> T {\n    |          ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/bad-assoc-ty.rs:75:29\n+  --> $DIR/bad-assoc-ty.rs:74:29\n    |\n LL | trait P<F> where F: Fn() -> _ {\n    |                             ^ not allowed in type signatures\n@@ -226,7 +213,7 @@ LL | trait P<F, T> where F: Fn() -> T {\n    |          ^^^                   ^\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n-  --> $DIR/bad-assoc-ty.rs:80:38\n+  --> $DIR/bad-assoc-ty.rs:79:38\n    |\n LL |     fn foo<F>(_: F) where F: Fn() -> _ {}\n    |                                      ^ not allowed in type signatures\n@@ -236,7 +223,7 @@ help: use type parameters instead\n LL |     fn foo<F, T>(_: F) where F: Fn() -> T {}\n    |             ^^^                         ^\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 28 previous errors\n \n-Some errors have detailed explanations: E0121, E0223, E0658.\n+Some errors have detailed explanations: E0121, E0223.\n For more information about an error, try `rustc --explain E0121`."}, {"sha": "6d0cd101dbc809a47b98d845f9419b9d81a8fbcb", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // ignore-wasm32-bare compiled with panic=abort by default\n \n-#![feature(generators, generator_trait, untagged_unions)]\n+#![feature(generators, generator_trait)]\n #![feature(bindings_after_at)]\n \n #![allow(unused_assignments)]"}, {"sha": "5a9965db5ed47a5913ce0fa728b1798e79de2264", "filename": "src/test/ui/dropck/dropck-union.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,5 +1,3 @@\n-#![feature(untagged_unions)]\n-\n use std::cell::Cell;\n use std::ops::Deref;\n use std::mem::ManuallyDrop;"}, {"sha": "854e29385a81bcc04785808f7410b4110d4d3d97", "filename": "src/test/ui/dropck/dropck-union.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-union.stderr?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `v` does not live long enough\n-  --> $DIR/dropck-union.rs:39:18\n+  --> $DIR/dropck-union.rs:37:18\n    |\n LL |     v.0.set(Some(&v));\n    |                  ^^ borrowed value does not live long enough"}, {"sha": "f5f9631c3bcf9af99af2a4cdf279cb1b9ce8dbef", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-linelength\n+\n union U1 { // OK\n     a: u8,\n }\n@@ -6,15 +8,23 @@ union U2<T: Copy> { // OK\n     a: T,\n }\n \n-union U3 { //~ ERROR unions with non-`Copy` fields are unstable\n+union U22<T> { // OK\n+    a: std::mem::ManuallyDrop<T>,\n+}\n+\n+union U3 {\n     a: String, //~ ERROR unions may not contain fields that need dropping\n }\n \n-union U4<T> { //~ ERROR unions with non-`Copy` fields are unstable\n+union U32 { // field that does not drop but is not `Copy`, either -- this is the real feature gate test!\n+    a: std::cell::RefCell<i32>, //~ ERROR unions with non-`Copy` fields other than `ManuallyDrop<T>` are unstable\n+}\n+\n+union U4<T> {\n     a: T, //~ ERROR unions may not contain fields that need dropping\n }\n \n-union U5 { //~ ERROR unions with `Drop` implementations are unstable\n+union U5 { // Having a drop impl is OK\n     a: u8,\n }\n "}, {"sha": "ed973871b3f06a7051141b751233abe2ea312008", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.stderr", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,61 +1,37 @@\n-error[E0658]: unions with non-`Copy` fields are unstable\n-  --> $DIR/feature-gate-untagged_unions.rs:9:1\n+error[E0658]: unions with non-`Copy` fields other than `ManuallyDrop<T>` are unstable\n+  --> $DIR/feature-gate-untagged_unions.rs:20:5\n    |\n-LL | / union U3 {\n-LL | |     a: String,\n-LL | | }\n-   | |_^\n-   |\n-   = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n-   = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n-\n-error[E0658]: unions with non-`Copy` fields are unstable\n-  --> $DIR/feature-gate-untagged_unions.rs:13:1\n-   |\n-LL | / union U4<T> {\n-LL | |     a: T,\n-LL | | }\n-   | |_^\n-   |\n-   = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n-   = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n-\n-error[E0658]: unions with `Drop` implementations are unstable\n-  --> $DIR/feature-gate-untagged_unions.rs:17:1\n-   |\n-LL | / union U5 {\n-LL | |     a: u8,\n-LL | | }\n-   | |_^\n+LL |     a: std::cell::RefCell<i32>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n    = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n \n error[E0740]: unions may not contain fields that need dropping\n-  --> $DIR/feature-gate-untagged_unions.rs:10:5\n+  --> $DIR/feature-gate-untagged_unions.rs:16:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/feature-gate-untagged_unions.rs:10:5\n+  --> $DIR/feature-gate-untagged_unions.rs:16:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n \n error[E0740]: unions may not contain fields that need dropping\n-  --> $DIR/feature-gate-untagged_unions.rs:14:5\n+  --> $DIR/feature-gate-untagged_unions.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/feature-gate-untagged_unions.rs:14:5\n+  --> $DIR/feature-gate-untagged_unions.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0658, E0740.\n For more information about an error, try `rustc --explain E0658`."}, {"sha": "eac246175335568c605877c5bf5241f6fab71b31", "filename": "src/test/ui/reject-specialized-drops-8142.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freject-specialized-drops-8142.stderr?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,15 +1,3 @@\n-error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the union it is implemented for does not\n-  --> $DIR/reject-specialized-drops-8142.rs:67:21\n-   |\n-LL | impl<AddsBnd:Copy + Bound> Drop for Union<AddsBnd> { fn drop(&mut self) { } } // REJECT\n-   |                     ^^^^^\n-   |\n-note: the implementor must specify the same requirement\n-  --> $DIR/reject-specialized-drops-8142.rs:21:1\n-   |\n-LL | union Union<T: Copy> { f: T }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0367]: `Drop` impl requires `'adds_bnd: 'al` but the struct it is implemented for does not\n   --> $DIR/reject-specialized-drops-8142.rs:23:20\n    |\n@@ -145,6 +133,18 @@ note: the implementor must specify the same requirement\n LL | struct TupleStruct<T>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0367]: `Drop` impl requires `AddsBnd: Bound` but the union it is implemented for does not\n+  --> $DIR/reject-specialized-drops-8142.rs:67:21\n+   |\n+LL | impl<AddsBnd:Copy + Bound> Drop for Union<AddsBnd> { fn drop(&mut self) { } } // REJECT\n+   |                     ^^^^^\n+   |\n+note: the implementor must specify the same requirement\n+  --> $DIR/reject-specialized-drops-8142.rs:21:1\n+   |\n+LL | union Union<T: Copy> { f: T }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error: aborting due to 11 previous errors\n \n Some errors have detailed explanations: E0308, E0366, E0367, E0495."}, {"sha": "81e557d53a660cc58cf49cca53102daf601cd0c7", "filename": "src/test/ui/self/self-in-typedefs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Fself%2Fself-in-typedefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Fself%2Fself-in-typedefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself-in-typedefs.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,7 +1,4 @@\n // build-pass (FIXME(62277): could be check-pass?)\n-\n-#![feature(untagged_unions)]\n-\n #![allow(dead_code)]\n \n use std::mem::ManuallyDrop;"}, {"sha": "cb46fc5ec467d78fd518a0c9a04a2700bdf8c200", "filename": "src/test/ui/transmute/main.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,9 +1,6 @@\n // normalize-stderr-32bit: \"`&str` \\(64 bits\\)\" -> \"`&str` ($$STR bits)\"\n // normalize-stderr-64bit: \"`&str` \\(128 bits\\)\" -> \"`&str` ($$STR bits)\"\n \n-\n-\n-#![feature(untagged_unions)]\n use std::mem::transmute;\n \n pub trait TypeConstructor<'a> {"}, {"sha": "f48562094a4bc4e783b66dc1c6544033573a1c50", "filename": "src/test/ui/transmute/main.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmute%2Fmain.stderr?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,13 +1,13 @@\n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/main.rs:16:5\n+  --> $DIR/main.rs:13:5\n    |\n LL |     transmute(x)\n    |     ^^^^^^^^^\n    |\n    = note: `<C as TypeConstructor>::T` does not have a fixed size\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/main.rs:20:17\n+  --> $DIR/main.rs:17:17\n    |\n LL |     let x: u8 = transmute(10u16);\n    |                 ^^^^^^^^^\n@@ -16,7 +16,7 @@ LL |     let x: u8 = transmute(10u16);\n    = note: target type: `u8` (8 bits)\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/main.rs:24:17\n+  --> $DIR/main.rs:21:17\n    |\n LL |     let x: u8 = transmute(\"test\");\n    |                 ^^^^^^^^^\n@@ -25,7 +25,7 @@ LL |     let x: u8 = transmute(\"test\");\n    = note: target type: `u8` (8 bits)\n \n error[E0512]: cannot transmute between types of different sizes, or dependently-sized types\n-  --> $DIR/main.rs:29:18\n+  --> $DIR/main.rs:26:18\n    |\n LL |     let x: Foo = transmute(10);\n    |                  ^^^^^^^^^"}, {"sha": "1340ae43cd6afd5c6182b79e7cc65990f5602da6", "filename": "src/test/ui/union/union-align.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-align.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(untagged_unions)]\n-\n use std::mem::{size_of, size_of_val, align_of, align_of_val};\n \n #[repr(align(16))]\n@@ -35,6 +33,7 @@ mod hybrid {\n     use std::mem::{size_of, align_of};\n \n     #[repr(align(16))]\n+    #[derive(Copy, Clone)]\n     struct S1 {\n         a: u16,\n         b: u8,"}, {"sha": "5c3f8d90898199ad9911a73886623b6eab1af339", "filename": "src/test/ui/union/union-copy.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-copy.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,13 +1,11 @@\n-#![feature(untagged_unions)]\n-\n #[derive(Clone)]\n union U {\n     a: u8\n }\n \n #[derive(Clone)]\n union W {\n-    a: String\n+    a: std::mem::ManuallyDrop<String>\n }\n \n impl Copy for U {} // OK"}, {"sha": "0f47bae7f0fede41ce85502fd44f2445c782ba57", "filename": "src/test/ui/union/union-copy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,8 +1,8 @@\n error[E0204]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/union-copy.rs:14:6\n+  --> $DIR/union-copy.rs:12:6\n    |\n-LL |     a: String\n-   |     --------- this field does not implement `Copy`\n+LL |     a: std::mem::ManuallyDrop<String>\n+   |     --------------------------------- this field does not implement `Copy`\n ...\n LL | impl Copy for W {}\n    |      ^^^^"}, {"sha": "753a9f74d03e4f68e8561c1bbffbdf68b249cf76", "filename": "src/test/ui/union/union-derive-clone.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,5 +1,3 @@\n-#![feature(untagged_unions)]\n-\n use std::mem::ManuallyDrop;\n \n #[derive(Clone)] //~ ERROR the trait bound `U1: Copy` is not satisfied"}, {"sha": "e18f457a8b6f5b440dd0174b73506fe871bdcabd", "filename": "src/test/ui/union/union-derive-clone.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.stderr?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `U1: Copy` is not satisfied\n-  --> $DIR/union-derive-clone.rs:5:10\n+  --> $DIR/union-derive-clone.rs:3:10\n    |\n LL | #[derive(Clone)]\n    |          ^^^^^ the trait `Copy` is not implemented for `U1`\n@@ -12,7 +12,7 @@ LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no method named `clone` found for union `U5<CloneNoCopy>` in the current scope\n-  --> $DIR/union-derive-clone.rs:37:15\n+  --> $DIR/union-derive-clone.rs:35:15\n    |\n LL | union U5<T> {\n    | -----------"}, {"sha": "e689f8c27d772ba38fe16ed86b68671e06b8c7e6", "filename": "src/test/ui/union/union-derive-eq.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,13 +1,11 @@\n-#![feature(untagged_unions)]\n-\n #[derive(Eq)] // OK\n union U1 {\n     a: u8,\n }\n \n impl PartialEq for U1 { fn eq(&self, rhs: &Self) -> bool { true } }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Copy, Clone)]\n struct PartialEqNotEq;\n \n #[derive(Eq)]"}, {"sha": "0591d12d598ba790e8b3993f57bf5cfa1b6ad03f", "filename": "src/test/ui/union/union-derive-eq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.stderr?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `PartialEqNotEq: Eq` is not satisfied\n-  --> $DIR/union-derive-eq.rs:15:5\n+  --> $DIR/union-derive-eq.rs:13:5\n    |\n LL |     a: PartialEqNotEq,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `PartialEqNotEq`"}, {"sha": "db18a81c1f6651a0c8ec95090cac5d412afff8a7", "filename": "src/test/ui/union/union-derive-rpass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-derive-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-derive-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-rpass.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -4,8 +4,6 @@\n \n // Some traits can be derived for unions.\n \n-#![feature(untagged_unions)]\n-\n #[derive(\n     Copy,\n     Clone,"}, {"sha": "215666bdd9d985f5ac5b5651509d13c42bf8b47e", "filename": "src/test/ui/union/union-drop-assign.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-drop-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-drop-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop-assign.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -3,8 +3,6 @@\n \n // Drop works for union itself.\n \n-#![feature(untagged_unions)]\n-\n use std::mem::ManuallyDrop;\n \n struct S;"}, {"sha": "9edf5827511525d3b5e48f2b20e411dc3347499b", "filename": "src/test/ui/union/union-drop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-drop.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -4,8 +4,7 @@\n \n // Drop works for union itself.\n \n-#![feature(untagged_unions)]\n-\n+#[derive(Copy, Clone)]\n struct S;\n \n union U {"}, {"sha": "69837f31cab27aa78e6ef57bf11ca08d6f1797d3", "filename": "src/test/ui/union/union-generic-rpass.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-generic-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-generic-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-generic-rpass.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n \n-#![feature(untagged_unions)]\n-\n use std::mem::ManuallyDrop;\n \n union MaybeItem<T: Iterator> {\n@@ -16,7 +14,7 @@ union U<A, B> where A: Copy, B: Copy {\n }\n \n unsafe fn union_transmute<A, B>(a: A) -> B where A: Copy, B: Copy {\n-    U { a: a }.b\n+    U { a }.b\n }\n \n fn main() {"}, {"sha": "977d12f1086028bb1e37fc7c4933955a4f27a36f", "filename": "src/test/ui/union/union-manuallydrop-rpass.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-manuallydrop-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-manuallydrop-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-manuallydrop-rpass.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,4 +1,3 @@\n-#![feature(untagged_unions)]\n #![allow(dead_code)]\n // run-pass\n "}, {"sha": "bc58c5995cb80e2ed8317a7976362fe9a7fc2bae", "filename": "src/test/ui/union/union-nodrop.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-nodrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-nodrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-nodrop.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(untagged_unions)]\n-\n #![allow(dead_code)]\n \n use std::mem::needs_drop;"}, {"sha": "399ed9ae458b8f664435e414a4b0f9da2debbbea", "filename": "src/test/ui/union/union-overwrite.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-overwrite.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(untagged_unions)]\n \n #[repr(C)]\n #[derive(Copy, Clone)]"}, {"sha": "9cde44c06bd476ccdf363079d3fe149a1582632e", "filename": "src/test/ui/union/union-packed.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-packed.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -2,8 +2,6 @@\n #![allow(dead_code)]\n #![allow(non_snake_case)]\n \n-#![feature(untagged_unions)]\n-\n use std::mem::{size_of, size_of_val, align_of, align_of_val};\n \n struct S {\n@@ -118,6 +116,7 @@ mod hybrid {\n     use std::mem::{size_of, align_of};\n \n     #[repr(packed)]\n+    #[derive(Copy, Clone)]\n     struct S1 {\n         a: u16,\n         b: u8,"}, {"sha": "10f0c467560f42184fc80a69212b1cbbd6b26677", "filename": "src/test/ui/union/union-unsafe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.rs?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,4 +1,3 @@\n-#![feature(untagged_unions)]\n use std::mem::ManuallyDrop;\n \n union U1 {"}, {"sha": "b50d9e1750657e7a829b29123348548add99e02e", "filename": "src/test/ui/union/union-unsafe.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3356ad7c26d11deef6b6da50ac21905e422bf4fb/src%2Ftest%2Fui%2Funion%2Funion-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.stderr?ref=3356ad7c26d11deef6b6da50ac21905e422bf4fb", "patch": "@@ -1,85 +1,85 @@\n error[E0133]: assignment to non-`Copy` union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:22:5\n+  --> $DIR/union-unsafe.rs:21:5\n    |\n LL |     u3.a = ManuallyDrop::new(T::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to non-`Copy` union field\n    |\n    = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:23:6\n+  --> $DIR/union-unsafe.rs:22:6\n    |\n LL |     *u3.a = T::default();\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:29:6\n+  --> $DIR/union-unsafe.rs:28:6\n    |\n LL |     *u3.a = T::default();\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:37:13\n+  --> $DIR/union-unsafe.rs:36:13\n    |\n LL |     let a = u1.a;\n    |             ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:40:14\n+  --> $DIR/union-unsafe.rs:39:14\n    |\n LL |     let U1 { a } = u1;\n    |              ^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:41:20\n+  --> $DIR/union-unsafe.rs:40:20\n    |\n LL |     if let U1 { a: 12 } = u1 {}\n    |                    ^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: assignment to non-`Copy` union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:45:5\n+  --> $DIR/union-unsafe.rs:44:5\n    |\n LL |     u2.a = ManuallyDrop::new(String::from(\"new\"));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to non-`Copy` union field\n    |\n    = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:46:6\n+  --> $DIR/union-unsafe.rs:45:6\n    |\n LL |     *u2.a = String::from(\"new\");\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:50:6\n+  --> $DIR/union-unsafe.rs:49:6\n    |\n LL |     *u3.a = 1;\n    |      ^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: assignment to non-`Copy` union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:53:5\n+  --> $DIR/union-unsafe.rs:52:5\n    |\n LL |     u3.a = ManuallyDrop::new(String::from(\"new\"));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to non-`Copy` union field\n    |\n    = note: the previous content of the field will be dropped, which causes undefined behavior if the field was not properly initialized\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:54:6\n+  --> $DIR/union-unsafe.rs:53:6\n    |\n LL |     *u3.a = String::from(\"new\");\n    |      ^^^^ access to union field"}]}