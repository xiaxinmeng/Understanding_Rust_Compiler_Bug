{"sha": "ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZjYzNDFkMWRmZTU3YTdhZDZmN2Y4NzUwMWIwMThmZmUyNGJiYTg=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-30T17:32:50Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-02-04T13:56:05Z"}, "message": "Translation part of drop panic recovery\n\nWith this commit we now finally execute all the leftover drops once some drop panics for some\nreason!", "tree": {"sha": "5114224b231d1dfd7b3798d3488ba8c7eaf80eeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5114224b231d1dfd7b3798d3488ba8c7eaf80eeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8", "html_url": "https://github.com/rust-lang/rust/commit/ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98265d338556e32c8ab1f89e14c0b3fab6e52001", "url": "https://api.github.com/repos/rust-lang/rust/commits/98265d338556e32c8ab1f89e14c0b3fab6e52001", "html_url": "https://github.com/rust-lang/rust/commit/98265d338556e32c8ab1f89e14c0b3fab6e52001"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "5be585c4189e162e2494e07e7ac113c774a6d6b2", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8", "patch": "@@ -95,11 +95,36 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 base::build_return_block(bcx.fcx, bcx, return_ty, DebugLoc::None);\n             }\n \n-            mir::Terminator::Drop { ref value, target, unwind: _ } => {\n+            mir::Terminator::Drop { ref value, target, unwind } => {\n                 let lvalue = self.trans_lvalue(bcx, value);\n-                // FIXME: this does not account for possibility of unwinding (and totally should).\n-                glue::drop_ty(bcx, lvalue.llval, lvalue.ty.to_ty(bcx.tcx()), DebugLoc::None);\n-                build::Br(bcx, self.llblock(target), DebugLoc::None);\n+                let ty = lvalue.ty.to_ty(bcx.tcx());\n+                // Double check for necessity to drop\n+                if !glue::type_needs_drop(bcx.tcx(), ty) {\n+                    build::Br(bcx, self.llblock(target), DebugLoc::None);\n+                    return;\n+                }\n+                let drop_fn = glue::get_drop_glue(bcx.ccx(), ty);\n+                let drop_ty = glue::get_drop_glue_type(bcx.ccx(), ty);\n+                let llvalue = if drop_ty != ty {\n+                    build::PointerCast(bcx, lvalue.llval,\n+                                       type_of::type_of(bcx.ccx(), drop_ty).ptr_to())\n+                } else {\n+                    lvalue.llval\n+                };\n+                if let Some(unwind) = unwind {\n+                    let uwbcx = self.bcx(unwind);\n+                    let unwind = self.make_landing_pad(uwbcx);\n+                    build::Invoke(bcx,\n+                                  drop_fn,\n+                                  &[llvalue],\n+                                  self.llblock(target),\n+                                  unwind.llbb,\n+                                  None,\n+                                  DebugLoc::None);\n+                } else {\n+                    build::Call(bcx, drop_fn, &[llvalue], None, DebugLoc::None);\n+                    build::Br(bcx, self.llblock(target), DebugLoc::None);\n+                }\n             }\n \n             mir::Terminator::Call { ref func, ref args, ref destination, ref cleanup } => {"}, {"sha": "d994f1ea7b0b761d56b86606cfc80bea7937ec7b", "filename": "src/librustc_trans/trans/mir/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs?ref=ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8", "patch": "@@ -65,7 +65,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 assert!(lvalue.llextra != ptr::null_mut());\n                 lvalue.llextra\n             }\n-            _ => bcx.sess().bug(\"unexpected type in get_base_and_len\"),\n+            _ => bcx.sess().bug(\"unexpected type in lvalue_len\"),\n         }\n     }\n "}, {"sha": "b19ecc45a4e5e98a2d501f68c08d4cc425f79a2a", "filename": "src/librustc_trans/trans/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs?ref=ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8", "patch": "@@ -195,8 +195,8 @@ fn arg_value_refs<'bcx, 'tcx>(bcx: Block<'bcx, 'tcx>,\n mod analyze;\n mod block;\n mod constant;\n+mod did;\n mod lvalue;\n-mod rvalue;\n mod operand;\n+mod rvalue;\n mod statement;\n-mod did;"}, {"sha": "9868ff4c24128a89c88144633d868d1b2f2cf571", "filename": "src/test/run-fail/mir_drop_panics.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs?ref=ebf6341d1dfe57a7ad6f7f87501b018ffe24bba8", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(rustc_attrs)]\n+// error-pattern:panic 1\n+// error-pattern:drop 2\n+use std::io::{self, Write};\n+\n+struct Droppable(u32);\n+impl Drop for Droppable {\n+    fn drop(&mut self) {\n+        if self.0 == 1 {\n+            panic!(\"panic 1\");\n+        } else {\n+            write!(io::stderr(), \"drop {}\", self.0);\n+        }\n+    }\n+}\n+\n+#[rustc_mir]\n+fn mir() {\n+    let x = Droppable(2);\n+    let y = Droppable(1);\n+}\n+\n+fn main() {\n+    mir();\n+}"}]}