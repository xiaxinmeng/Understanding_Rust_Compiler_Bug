{"sha": "ae9ad7b2884a5775c94d3a9e1295110f989b6417", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOWFkN2IyODg0YTU3NzVjOTRkM2E5ZTEyOTUxMTBmOTg5YjY0MTc=", "commit": {"author": {"name": "Markus Westerlind", "email": "marwes91@gmail.com", "date": "2015-12-02T18:38:05Z"}, "committer": {"name": "Markus Westerlind", "email": "marwes91@gmail.com", "date": "2015-12-02T19:11:10Z"}, "message": "Fix formatting of type aliases where '=' is at or close to the max width", "tree": {"sha": "c97d8344a91a1b40aaaf2301e1355c80ff5fffdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c97d8344a91a1b40aaaf2301e1355c80ff5fffdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae9ad7b2884a5775c94d3a9e1295110f989b6417", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae9ad7b2884a5775c94d3a9e1295110f989b6417", "html_url": "https://github.com/rust-lang/rust/commit/ae9ad7b2884a5775c94d3a9e1295110f989b6417", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae9ad7b2884a5775c94d3a9e1295110f989b6417/comments", "author": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e677f058051ab2dd09480d0347607b42e00b7668", "url": "https://api.github.com/repos/rust-lang/rust/commits/e677f058051ab2dd09480d0347607b42e00b7668", "html_url": "https://github.com/rust-lang/rust/commit/e677f058051ab2dd09480d0347607b42e00b7668"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "d4ed6ad670e5bd74b1b3cd770f6d7ca3a599bb77", "filename": "src/items.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ae9ad7b2884a5775c94d3a9e1295110f989b6417/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9ad7b2884a5775c94d3a9e1295110f989b6417/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=ae9ad7b2884a5775c94d3a9e1295110f989b6417", "patch": "@@ -455,6 +455,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n         let generics_str = try_opt!(rewrite_generics(context,\n                                                      generics,\n                                                      offset,\n+                                                     context.config.max_width,\n                                                      offset + result.len(),\n                                                      mk_sp(lo, hi)));\n         result.push_str(&generics_str);\n@@ -686,6 +687,7 @@ fn format_tuple_struct(context: &RewriteContext,\n             let generics_str = try_opt!(rewrite_generics(context,\n                                                          generics,\n                                                          offset,\n+                                                         context.config.max_width,\n                                                          offset + header_str.len(),\n                                                          mk_sp(span.lo, body_lo)));\n             result.push_str(&generics_str);\n@@ -763,19 +765,24 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n \n     let generics_indent = indent + result.len();\n     let generics_span = mk_sp(span_after(span, \"type\", context.codemap), ty.span.lo);\n+    let generics_width = context.config.max_width - \" =\".len();\n     let generics_str = try_opt!(rewrite_generics(context,\n                                                  generics,\n                                                  indent,\n+                                                 generics_width,\n                                                  generics_indent,\n                                                  generics_span));\n \n     result.push_str(&generics_str);\n     result.push_str(\" = \");\n \n     let line_width = last_line_width(&result);\n-    let budget = try_opt!(context.config\n-                                 .max_width\n-                                 .checked_sub(indent.width() + line_width + \";\".len()));\n+    // This checked_sub may fail as the extra space after '=' is not taken into account\n+    // In that case the budget is set to 0 which will make ty.rewrite retry on a new line\n+    let budget = context.config\n+                        .max_width\n+                        .checked_sub(indent.width() + line_width + \";\".len())\n+                        .unwrap_or(0);\n     let type_indent = indent + line_width;\n     // Try to fit the type on the same line\n     let ty_str = try_opt!(ty.rewrite(context, budget, type_indent)\n@@ -1031,6 +1038,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n     let generics_str = try_opt!(rewrite_generics(context,\n                                                  generics,\n                                                  indent,\n+                                                 context.config.max_width,\n                                                  generics_indent,\n                                                  generics_span));\n     result.push_str(&generics_str);\n@@ -1366,6 +1374,7 @@ fn newline_for_brace(config: &Config, where_clause: &ast::WhereClause) -> bool {\n fn rewrite_generics(context: &RewriteContext,\n                     generics: &ast::Generics,\n                     offset: Indent,\n+                    width: usize,\n                     generics_offset: Indent,\n                     span: Span)\n                     -> Option<String> {\n@@ -1384,7 +1393,7 @@ fn rewrite_generics(context: &RewriteContext,\n         BlockIndentStyle::Visual => generics_offset + 1,\n     };\n \n-    let h_budget = context.config.max_width - generics_offset.width() - 2;\n+    let h_budget = try_opt!(width.checked_sub(generics_offset.width() + 2));\n     // FIXME: might need to insert a newline if the generics are really long.\n \n     // Strings for the generics.\n@@ -1483,6 +1492,8 @@ fn rewrite_where_clause(context: &RewriteContext,\n             BraceStyle::PreferSameLine => 2,\n             BraceStyle::SameLineWhere => 0,\n         }\n+    } else if terminator == \"=\" {\n+        2\n     } else {\n         terminator.len()\n     };\n@@ -1510,7 +1521,12 @@ fn format_generics(context: &RewriteContext,\n                    generics_offset: Indent,\n                    span: Span)\n                    -> Option<String> {\n-    let mut result = try_opt!(rewrite_generics(context, generics, offset, generics_offset, span));\n+    let mut result = try_opt!(rewrite_generics(context,\n+                                               generics,\n+                                               offset,\n+                                               context.config.max_width,\n+                                               generics_offset,\n+                                               span));\n \n     if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n         let budget = try_opt!(context.config.max_width.checked_sub(last_line_width(&result)));"}, {"sha": "d69375144e7e407a516c066a198abcc58df3ec45", "filename": "tests/source/type_alias.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae9ad7b2884a5775c94d3a9e1295110f989b6417/tests%2Fsource%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9ad7b2884a5775c94d3a9e1295110f989b6417/tests%2Fsource%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype_alias.rs?ref=ae9ad7b2884a5775c94d3a9e1295110f989b6417", "patch": "@@ -9,6 +9,10 @@ pub type Exactly100CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAM\n \n pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<Test>;\n \n+pub type Exactly100CharsToEqualTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B, C> = Vec<i32>;\n+\n+pub type GenericsFitButNotEqualTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A1, B, C> = Vec<i32>;\n+\n pub type CommentTest< /* Lifetime */ 'a\n             ,\n         // Type"}, {"sha": "d2d6bf4404ddb37e0a210531ccfbf31c3114eef2", "filename": "tests/target/type_alias.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ae9ad7b2884a5775c94d3a9e1295110f989b6417/tests%2Ftarget%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae9ad7b2884a5775c94d3a9e1295110f989b6417/tests%2Ftarget%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype_alias.rs?ref=ae9ad7b2884a5775c94d3a9e1295110f989b6417", "patch": "@@ -22,6 +22,19 @@ pub type Exactly100CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAM\n pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> =\n     Vec<Test>;\n \n+pub type Exactly100CharsToEqualTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B, C> =\n+    Vec<i32>;\n+\n+pub type GenericsFitButNotEqualTest<'a,\n+                                    'b,\n+                                    'c,\n+                                    'd,\n+                                    LONGPARAMETERNAME,\n+                                    LONGPARAMETERNAME,\n+                                    A1,\n+                                    B,\n+                                    C> = Vec<i32>;\n+\n pub type CommentTest<// Lifetime\n                      'a, // Type\n                      T> = ();"}]}