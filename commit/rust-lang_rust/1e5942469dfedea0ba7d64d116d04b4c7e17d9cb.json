{"sha": "1e5942469dfedea0ba7d64d116d04b4c7e17d9cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNTk0MjQ2OWRmZWRlYTBiYTdkNjRkMTE2ZDA0YjRjN2UxN2Q5Y2I=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-02T20:24:02Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-14T04:53:27Z"}, "message": "Add `Crate` and `Restricted` variants to `hir::Visibility`", "tree": {"sha": "1fbf1d9867c3e3a18ee7b048137539152708321d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fbf1d9867c3e3a18ee7b048137539152708321d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb", "html_url": "https://github.com/rust-lang/rust/commit/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b2e4dda217b159553b903b117ed7aa66d9f3965", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2e4dda217b159553b903b117ed7aa66d9f3965", "html_url": "https://github.com/rust-lang/rust/commit/2b2e4dda217b159553b903b117ed7aa66d9f3965"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "6e6f845abd368d06ba8e3821815c83223041858a", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=1e5942469dfedea0ba7d64d116d04b4c7e17d9cb", "patch": "@@ -203,6 +203,9 @@ pub trait Visitor<'v> : Sized {\n     fn visit_macro_def(&mut self, macro_def: &'v MacroDef) {\n         walk_macro_def(self, macro_def)\n     }\n+    fn visit_vis(&mut self, vis: &'v Visibility) {\n+        walk_vis(self, vis)\n+    }\n }\n \n pub fn walk_opt_name<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, opt_name: Option<Name>) {\n@@ -288,6 +291,7 @@ pub fn walk_trait_ref<'v, V>(visitor: &mut V, trait_ref: &'v TraitRef)\n }\n \n pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n+    visitor.visit_vis(&item.vis);\n     visitor.visit_name(item.span, item.name);\n     match item.node {\n         ItemExternCrate(opt_name) => {\n@@ -529,6 +533,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n }\n \n pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v ForeignItem) {\n+    visitor.visit_vis(&foreign_item.vis);\n     visitor.visit_name(foreign_item.span, foreign_item.name);\n \n     match foreign_item.node {\n@@ -662,6 +667,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n }\n \n pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem) {\n+    visitor.visit_vis(&impl_item.vis);\n     visitor.visit_name(impl_item.span, impl_item.name);\n     walk_list!(visitor, visit_attribute, &impl_item.attrs);\n     match impl_item.node {\n@@ -690,6 +696,7 @@ pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &\n }\n \n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField) {\n+    visitor.visit_vis(&struct_field.vis);\n     visitor.visit_name(struct_field.span, struct_field.name);\n     visitor.visit_ty(&struct_field.ty);\n     walk_list!(visitor, visit_attribute, &struct_field.attrs);\n@@ -839,6 +846,12 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) {\n     walk_list!(visitor, visit_attribute, &arm.attrs);\n }\n \n+pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) {\n+    if let Visibility::Restricted { ref path, id } = *vis {\n+        visitor.visit_path(path, id)\n+    }\n+}\n+\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct IdRange {\n     pub min: NodeId,"}, {"sha": "7c47665704118cebb165497bc873349f594825f0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1e5942469dfedea0ba7d64d116d04b4c7e17d9cb", "patch": "@@ -1708,8 +1708,10 @@ pub fn lower_capture_clause(_lctx: &LoweringContext, c: CaptureBy) -> hir::Captu\n pub fn lower_visibility(lctx: &LoweringContext, v: &Visibility) -> hir::Visibility {\n     match *v {\n         Visibility::Public => hir::Public,\n+        Visibility::Crate(_) => hir::Visibility::Crate,\n+        Visibility::Restricted { ref path, id } =>\n+            hir::Visibility::Restricted { path: P(lower_path(lctx, path)), id: id },\n         Visibility::Inherited => hir::Inherited,\n-        _ => panic!(lctx.diagnostic().fatal(\"pub(restricted) is not implemented yet!\"))\n     }\n }\n "}, {"sha": "4e7520035238f81f8bbd39a64344fe62c8016d8f", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1e5942469dfedea0ba7d64d116d04b4c7e17d9cb", "patch": "@@ -30,7 +30,7 @@ pub use self::TyParamBound::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n pub use self::ViewPath_::*;\n-pub use self::Visibility::*;\n+pub use self::Visibility::{Public, Inherited};\n pub use self::PathParameters::*;\n \n use hir::def::Def;\n@@ -1434,6 +1434,8 @@ pub struct PolyTraitRef {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Visibility {\n     Public,\n+    Crate,\n+    Restricted { path: P<Path>, id: NodeId },\n     Inherited,\n }\n "}, {"sha": "e595c619e859bb895328d0cfaa98f3c5d209e194", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=1e5942469dfedea0ba7d64d116d04b4c7e17d9cb", "patch": "@@ -325,6 +325,8 @@ pub fn arg_to_string(arg: &hir::Arg) -> String {\n pub fn visibility_qualified(vis: &hir::Visibility, s: &str) -> String {\n     match *vis {\n         hir::Public => format!(\"pub {}\", s),\n+        hir::Visibility::Crate => format!(\"pub(crate) {}\", s),\n+        hir::Visibility::Restricted { ref path, .. } => format!(\"pub({}) {}\", path, s),\n         hir::Inherited => s.to_string(),\n     }\n }\n@@ -898,6 +900,9 @@ impl<'a> State<'a> {\n     pub fn print_visibility(&mut self, vis: &hir::Visibility) -> io::Result<()> {\n         match *vis {\n             hir::Public => self.word_nbsp(\"pub\"),\n+            hir::Visibility::Crate => self.word_nbsp(\"pub(crate)\"),\n+            hir::Visibility::Restricted { ref path, .. } =>\n+                self.word_nbsp(&format!(\"pub({})\", path)),\n             hir::Inherited => Ok(()),\n         }\n     }"}, {"sha": "0377ef92a6f2f36a0587a7c380652394e43fc11d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e5942469dfedea0ba7d64d116d04b4c7e17d9cb/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1e5942469dfedea0ba7d64d116d04b4c7e17d9cb", "patch": "@@ -287,6 +287,15 @@ impl Visibility {\n     pub fn from_hir(visibility: &hir::Visibility, id: NodeId, tcx: &TyCtxt) -> Self {\n         match *visibility {\n             hir::Public => Visibility::Public,\n+            hir::Visibility::Crate => Visibility::Restricted(ast::CRATE_NODE_ID),\n+            hir::Visibility::Restricted { id, .. } => match tcx.def_map.borrow().get(&id) {\n+                Some(resolution) => Visibility::Restricted({\n+                    tcx.map.as_local_node_id(resolution.base_def.def_id()).unwrap()\n+                }),\n+                // If there is no resolution, `resolve` will have already reported an error, so\n+                // assume that the visibility is public to avoid reporting more privacy errors.\n+                None => Visibility::Public,\n+            },\n             hir::Inherited => Visibility::Restricted(tcx.map.get_module_parent(id)),\n         }\n     }"}]}