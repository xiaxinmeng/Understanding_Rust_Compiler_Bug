{"sha": "70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYzFiNmM1MzBiZmU4NmEyYjU0ZGJkNDBhNzYyOGZjMjEwNWMwYjk=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-04-09T00:44:00Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-04-25T17:12:57Z"}, "message": "Define generator discriminant type in only one place", "tree": {"sha": "4ead5db4bd4f60b07822a702eea3eaf5bff9332f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ead5db4bd4f60b07822a702eea3eaf5bff9332f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9", "html_url": "https://github.com/rust-lang/rust/commit/70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e06f2520088a3ad77018f1f5d4c8d3b90497fb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e06f2520088a3ad77018f1f5d4c8d3b90497fb1", "html_url": "https://github.com/rust-lang/rust/commit/9e06f2520088a3ad77018f1f5d4c8d3b90497fb1"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "1ac18f6117f05c1e5b54452c3ce18a2bc1fe32d0", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9", "patch": "@@ -298,14 +298,10 @@ static_assert!(MEM_SIZE_OF_TY_KIND: ::std::mem::size_of::<TyKind<'_>>() == 24);\n ///\n /// ## Generators\n ///\n-/// Perhaps surprisingly, `ClosureSubsts` are also used for\n-/// generators. In that case, what is written above is only half-true\n-/// -- the set of type parameters is similar, but the role of CK and\n-/// CS are different. CK represents the \"yield type\" and CS\n-/// represents the \"return type\" of the generator.\n-///\n-/// It'd be nice to split this struct into ClosureSubsts and\n-/// GeneratorSubsts, I believe. -nmatsakis\n+/// Generators are handled similarly in `GeneratorSubsts`.  The set of\n+/// type parameters is similar, but the role of CK and CS are\n+/// different. CK represents the \"yield type\" and CS represents the\n+/// \"return type\" of the generator.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash,\n          Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct ClosureSubsts<'tcx> {\n@@ -391,6 +387,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     }\n }\n \n+/// Similar to `ClosureSubsts`; see the above documentation for more.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug,\n          RustcEncodable, RustcDecodable, HashStable)]\n pub struct GeneratorSubsts<'tcx> {\n@@ -470,6 +467,11 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> GeneratorSubsts<'tcx> {\n+    /// The type of the state \"discriminant\" used in the generator type.\n+    pub fn discr_ty(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n+        tcx.types.u32\n+    }\n+\n     /// This returns the types of the MIR locals which had to be stored across suspension points.\n     /// It is calculated in rustc_mir::transform::generator::StateTransform.\n     /// All the types here must be in the tuple in GeneratorInterior.\n@@ -484,15 +486,15 @@ impl<'a, 'gcx, 'tcx> GeneratorSubsts<'tcx> {\n \n     /// This is the types of the fields of a generate which\n     /// is available before the generator transformation.\n-    /// It includes the upvars and the state discriminant which is u32.\n+    /// It includes the upvars and the state discriminant.\n     pub fn pre_transforms_tys(self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>) ->\n         impl Iterator<Item=Ty<'tcx>> + 'a\n     {\n-        self.upvar_tys(def_id, tcx).chain(iter::once(tcx.types.u32))\n+        self.upvar_tys(def_id, tcx).chain(iter::once(self.discr_ty(tcx)))\n     }\n \n     /// This is the types of all the fields stored in a generator.\n-    /// It includes the upvars, state types and the state discriminant which is u32.\n+    /// It includes the upvars, state types and the state discriminant.\n     pub fn field_tys(self, def_id: DefId, tcx: TyCtxt<'a, 'gcx, 'tcx>) ->\n         impl Iterator<Item=Ty<'tcx>> + Captures<'gcx> + 'a\n     {"}, {"sha": "0871217c524c4e0d117aaedeaf2d344e5f8f08e4", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9", "patch": "@@ -255,15 +255,16 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         let movability = movability.unwrap();\n                         // Add the state operand since it follows the upvars in the generator\n                         // struct. See librustc_mir/transform/generator.rs for more details.\n+                        let discr_ty = substs.discr_ty(this.hir.tcx());\n                         operands.push(Operand::Constant(box Constant {\n                             span: expr_span,\n-                            ty: this.hir.tcx().types.u32,\n+                            ty: discr_ty,\n                             user_ty: None,\n                             literal: this.hir.tcx().mk_const(\n                                 ty::Const::from_bits(\n                                     this.hir.tcx(),\n                                     0,\n-                                    ty::ParamEnv::empty().and(this.hir.tcx().types.u32),\n+                                    ty::ParamEnv::empty().and(discr_ty),\n                                 ),\n                             ),\n                         }));"}, {"sha": "cf7397ca488808ea0868fdffc6c4b96411c24c96", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=70c1b6c530bfe86a2b54dbd40a7628fc2105c0b9", "patch": "@@ -166,6 +166,9 @@ struct TransformVisitor<'a, 'tcx: 'a> {\n     // The index of the generator state in the generator struct\n     state_field: usize,\n \n+    // The type of the generator state in the generator struct\n+    discr_ty: Ty<'tcx>,\n+\n     // Mapping from Local to (type of local, generator struct index)\n     // FIXME(eddyb) This should use `IndexVec<Local, Option<_>>`.\n     remap: FxHashMap<Local, (Ty<'tcx>, usize)>,\n@@ -200,15 +203,15 @@ impl<'a, 'tcx> TransformVisitor<'a, 'tcx> {\n \n     // Create a statement which changes the generator state\n     fn set_state(&self, state_disc: u32, source_info: SourceInfo) -> Statement<'tcx> {\n-        let state = self.make_field(self.state_field, self.tcx.types.u32);\n+        let state = self.make_field(self.state_field, self.discr_ty);\n         let val = Operand::Constant(box Constant {\n             span: source_info.span,\n-            ty: self.tcx.types.u32,\n+            ty: self.discr_ty,\n             user_ty: None,\n             literal: self.tcx.mk_const(ty::Const::from_bits(\n                 self.tcx,\n                 state_disc.into(),\n-                ty::ParamEnv::empty().and(self.tcx.types.u32)\n+                ty::ParamEnv::empty().and(self.discr_ty)\n             )),\n         });\n         Statement {\n@@ -889,10 +892,11 @@ impl MirPass for StateTransform {\n         let gen_ty = mir.local_decls.raw[1].ty;\n \n         // Get the interior types and substs which typeck computed\n-        let (upvars, interior, movable) = match gen_ty.sty {\n+        let (upvars, interior, discr_ty, movable) = match gen_ty.sty {\n             ty::Generator(_, substs, movability) => {\n                 (substs.upvar_tys(def_id, tcx).collect(),\n                  substs.witness(def_id, tcx),\n+                 substs.discr_ty(tcx),\n                  movability == hir::GeneratorMovability::Movable)\n             }\n             _ => bug!(),\n@@ -937,6 +941,7 @@ impl MirPass for StateTransform {\n             suspension_points: Vec::new(),\n             new_ret_local,\n             state_field,\n+            discr_ty,\n         };\n         transform.visit_mir(mir);\n "}]}