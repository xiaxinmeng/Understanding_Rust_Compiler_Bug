{"sha": "07d11cf95c87e788c69783611a64bb2365d9447d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZDExY2Y5NWM4N2U3ODhjNjk3ODM2MTFhNjRiYjIzNjVkOTQ0N2Q=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-18T12:08:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-18T12:08:41Z"}, "message": "Rollup merge of #84587 - jyn514:rustdoc-lint-block, r=CraftSpider\n\nrustdoc: Make \"rust code block is empty\" and \"could not parse code block\" warnings a lint (`INVALID_RUST_CODEBLOCKS`)\n\nFixes https://github.com/rust-lang/rust/issues/79792. This already went through FCP in https://github.com/rust-lang/rust/pull/79816, so it only needs final review.\n\nThis is mostly a rebase of https://github.com/rust-lang/rust/pull/79816 - thank you ``@poliorcetics`` for doing most of the work!", "tree": {"sha": "c137409064a2f9dbcd9a9bc6f748dd81251ed0ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c137409064a2f9dbcd9a9bc6f748dd81251ed0ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07d11cf95c87e788c69783611a64bb2365d9447d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgo65JCRBK7hj4Ov3rIwAAED4IAG7yQfSeUmhut7ctQz7LtDwY\ny0xehcjZBwbXSZtZ97TAc3a83wGbFs9/lWBKldgeGdit+v2tcx9yltN+WriPA7+O\nz/rmKVCVpLTqoGZWKQVn2OjCGKegZ8FjvNbenykOPEAu55sZdSXWkzclSmD1vbr/\nAH4+roY0G70fqIChIUtlAQ4rGVRtdeXdLxmBuGkunigVR26VdRsLWvhMCr/zF1vJ\n/eGI1K9wcE1vlA8l0Ts7TJV97PUHiMv039NxPAIBM6z/QHt0Tzvijiy1cW7Y5sns\n8fsRJSmosqSvsK04p9WiTK7ZxxD/eBx+4LjlT1RFQ6h+Z2oI1jiV/bsS4zdAbxI=\n=sSBj\n-----END PGP SIGNATURE-----\n", "payload": "tree c137409064a2f9dbcd9a9bc6f748dd81251ed0ca\nparent 25a277f03df7e44643ddfcc240d034409cb2f505\nparent 587c50452f99b437fc4dc946d58d490094e7ef66\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1621339721 +0200\ncommitter GitHub <noreply@github.com> 1621339721 +0200\n\nRollup merge of #84587 - jyn514:rustdoc-lint-block, r=CraftSpider\n\nrustdoc: Make \"rust code block is empty\" and \"could not parse code block\" warnings a lint (`INVALID_RUST_CODEBLOCKS`)\n\nFixes https://github.com/rust-lang/rust/issues/79792. This already went through FCP in https://github.com/rust-lang/rust/pull/79816, so it only needs final review.\n\nThis is mostly a rebase of https://github.com/rust-lang/rust/pull/79816 - thank you ``@poliorcetics`` for doing most of the work!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07d11cf95c87e788c69783611a64bb2365d9447d", "html_url": "https://github.com/rust-lang/rust/commit/07d11cf95c87e788c69783611a64bb2365d9447d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07d11cf95c87e788c69783611a64bb2365d9447d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25a277f03df7e44643ddfcc240d034409cb2f505", "url": "https://api.github.com/repos/rust-lang/rust/commits/25a277f03df7e44643ddfcc240d034409cb2f505", "html_url": "https://github.com/rust-lang/rust/commit/25a277f03df7e44643ddfcc240d034409cb2f505"}, {"sha": "587c50452f99b437fc4dc946d58d490094e7ef66", "url": "https://api.github.com/repos/rust-lang/rust/commits/587c50452f99b437fc4dc946d58d490094e7ef66", "html_url": "https://github.com/rust-lang/rust/commit/587c50452f99b437fc4dc946d58d490094e7ef66"}], "stats": {"total": 198, "additions": 143, "deletions": 55}, "files": [{"sha": "f4d78ac04cb029832ac6bf40d8f19033c6e825a4", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07d11cf95c87e788c69783611a64bb2365d9447d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d11cf95c87e788c69783611a64bb2365d9447d/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=07d11cf95c87e788c69783611a64bb2365d9447d", "patch": "@@ -1241,7 +1241,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// it. However, it works pretty well in practice. In particular,\n     /// this is needed to deal with projection outlives bounds like\n     ///\n-    /// ```ignore (internal compiler representation so lifetime syntax is invalid)\n+    /// ```text\n     /// <T as Foo<'0>>::Item: '1\n     /// ```\n     ///"}, {"sha": "7e67bc118ec1e2821fd0c509bea0cfba37d48349", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07d11cf95c87e788c69783611a64bb2365d9447d/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d11cf95c87e788c69783611a64bb2365d9447d/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=07d11cf95c87e788c69783611a64bb2365d9447d", "patch": "@@ -46,6 +46,7 @@ pub struct OpaqueTypeDecl<'tcx> {\n     /// type Foo = impl Baz;\n     /// fn bar() -> Foo {\n     /// //          ^^^ This is the span we are looking for!\n+    /// }\n     /// ```\n     ///\n     /// In cases where the fn returns `(impl Trait, impl Trait)` or"}, {"sha": "71e222c560a0526a8654599b0c738d5a1c3a433c", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07d11cf95c87e788c69783611a64bb2365d9447d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d11cf95c87e788c69783611a64bb2365d9447d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=07d11cf95c87e788c69783611a64bb2365d9447d", "patch": "@@ -323,7 +323,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// InferBorrowKind results in a structure like this:\n     ///\n-    /// ```\n+    /// ```text\n     /// {\n     ///       Place(base: hir_id_s, projections: [], ....) -> {\n     ///                                                            capture_kind_expr: hir_id_L5,\n@@ -348,7 +348,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// ```\n     ///\n     /// After the min capture analysis, we get:\n-    /// ```\n+    /// ```text\n     /// {\n     ///       hir_id_s -> [\n     ///            Place(base: hir_id_s, projections: [], ....) -> {"}, {"sha": "16b091eb255b0257bc2090414f418f0dd7b081ba", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=07d11cf95c87e788c69783611a64bb2365d9447d", "patch": "@@ -294,6 +294,50 @@ warning: unclosed HTML tag `h1`\n warning: 2 warnings emitted\n ```\n \n+## invalid_rust_codeblocks\n+\n+This lint **warns by default**. It detects Rust code blocks in documentation\n+examples that are invalid (e.g. empty, not parsable as Rust). For example:\n+\n+```rust\n+/// Empty code blocks (with and without the `rust` marker):\n+///\n+/// ```rust\n+/// ```\n+///\n+/// Invalid syntax in code blocks:\n+///\n+/// ```rust\n+/// '<\n+/// ```\n+pub fn foo() {}\n+```\n+\n+Which will give:\n+\n+```text\n+warning: Rust code block is empty\n+ --> lint.rs:3:5\n+  |\n+3 |   /// ```rust\n+  |  _____^\n+4 | | /// ```\n+  | |_______^\n+  |\n+  = note: `#[warn(rustdoc::invalid_rust_codeblocks)]` on by default\n+\n+warning: could not parse code block as Rust code\n+  --> lint.rs:8:5\n+   |\n+8  |   /// ```rust\n+   |  _____^\n+9  | | /// '<\n+10 | | /// ```\n+   | |_______^\n+   |\n+   = note: error from rustc: unterminated character literal\n+```\n+\n ## bare_urls\n \n This lint is **warn-by-default**. It detects URLs which are not links."}, {"sha": "376c83b1a6ea8836e492b202c7bada77e79d4d46", "filename": "src/librustdoc/lint.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Flibrustdoc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Flibrustdoc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flint.rs?ref=07d11cf95c87e788c69783611a64bb2365d9447d", "patch": "@@ -157,13 +157,26 @@ declare_rustdoc_lint! {\n     \"detects URLs that are not hyperlinks\"\n }\n \n+declare_rustdoc_lint! {\n+   /// The `invalid_rust_codeblocks` lint detects Rust code blocks in\n+   /// documentation examples that are invalid (e.g. empty, not parsable as\n+   /// Rust code). This is a `rustdoc` only lint, see the documentation in the\n+   /// [rustdoc book].\n+   ///\n+   /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_rust_codeblocks\n+   INVALID_RUST_CODEBLOCKS,\n+   Warn,\n+   \"codeblock could not be parsed as valid Rust or is empty\"\n+}\n+\n crate static RUSTDOC_LINTS: Lazy<Vec<&'static Lint>> = Lazy::new(|| {\n     vec![\n         BROKEN_INTRA_DOC_LINKS,\n         PRIVATE_INTRA_DOC_LINKS,\n         MISSING_DOC_CODE_EXAMPLES,\n         PRIVATE_DOC_TESTS,\n         INVALID_CODEBLOCK_ATTRIBUTES,\n+        INVALID_RUST_CODEBLOCKS,\n         INVALID_HTML_TAGS,\n         BARE_URLS,\n         MISSING_CRATE_LEVEL_DOCS,"}, {"sha": "7ccfdf29041d2e00d29c44074cf120e99074aeae", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 69, "deletions": 45, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=07d11cf95c87e788c69783611a64bb2365d9447d", "patch": "@@ -1,5 +1,6 @@\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::Emitter, Applicability, Diagnostic, Handler};\n+use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_parse::parse_stream_from_source_str;\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{FilePathMapping, SourceMap};\n@@ -47,63 +48,86 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n         .unwrap_or(false);\n         let buffer = buffer.borrow();\n \n-        if buffer.has_errors || is_empty {\n-            let mut diag = if let Some(sp) = super::source_span_for_markdown_range(\n-                self.cx.tcx,\n-                &dox,\n-                &code_block.range,\n-                &item.attrs,\n-            ) {\n-                let (warning_message, suggest_using_text) = if buffer.has_errors {\n-                    (\"could not parse code block as Rust code\", true)\n-                } else {\n-                    (\"Rust code block is empty\", false)\n-                };\n-\n-                let mut diag = self.cx.sess().struct_span_warn(sp, warning_message);\n-\n-                if code_block.syntax.is_none() && code_block.is_fenced {\n-                    let sp = sp.from_inner(InnerSpan::new(0, 3));\n-                    diag.span_suggestion(\n-                        sp,\n-                        \"mark blocks that do not contain Rust code as text\",\n-                        String::from(\"```text\"),\n-                        Applicability::MachineApplicable,\n+        if !buffer.has_errors && !is_empty {\n+            // No errors in a non-empty program.\n+            return;\n+        }\n+\n+        let local_id = match item.def_id.as_real().and_then(|x| x.as_local()) {\n+            Some(id) => id,\n+            // We don't need to check the syntax for other crates so returning\n+            // without doing anything should not be a problem.\n+            None => return,\n+        };\n+\n+        let hir_id = self.cx.tcx.hir().local_def_id_to_hir_id(local_id);\n+        let empty_block = code_block.syntax.is_none() && code_block.is_fenced;\n+        let is_ignore = code_block.is_ignore;\n+\n+        // The span and whether it is precise or not.\n+        let (sp, precise_span) = match super::source_span_for_markdown_range(\n+            self.cx.tcx,\n+            &dox,\n+            &code_block.range,\n+            &item.attrs,\n+        ) {\n+            Some(sp) => (sp, true),\n+            None => (item.attr_span(self.cx.tcx), false),\n+        };\n+\n+        // lambda that will use the lint to start a new diagnostic and add\n+        // a suggestion to it when needed.\n+        let diag_builder = |lint: LintDiagnosticBuilder<'_>| {\n+            let explanation = if is_ignore {\n+                \"`ignore` code blocks require valid Rust code for syntax highlighting; \\\n+                    mark blocks that do not contain Rust code as text\"\n+            } else {\n+                \"mark blocks that do not contain Rust code as text\"\n+            };\n+            let msg = if buffer.has_errors {\n+                \"could not parse code block as Rust code\"\n+            } else {\n+                \"Rust code block is empty\"\n+            };\n+            let mut diag = lint.build(msg);\n+\n+            if precise_span {\n+                if is_ignore {\n+                    // giving an accurate suggestion is hard because `ignore` might not have come first in the list.\n+                    // just give a `help` instead.\n+                    diag.span_help(\n+                        sp.from_inner(InnerSpan::new(0, 3)),\n+                        &format!(\"{}: ```text\", explanation),\n                     );\n-                } else if suggest_using_text && code_block.is_ignore {\n-                    let sp = sp.from_inner(InnerSpan::new(0, 3));\n+                } else if empty_block {\n                     diag.span_suggestion(\n-                        sp,\n-                        \"`ignore` code blocks require valid Rust code for syntax highlighting. \\\n-                         Mark blocks that do not contain Rust code as text\",\n-                        String::from(\"```text,\"),\n+                        sp.from_inner(InnerSpan::new(0, 3)),\n+                        explanation,\n+                        String::from(\"```text\"),\n                         Applicability::MachineApplicable,\n                     );\n                 }\n-\n-                diag\n-            } else {\n-                // We couldn't calculate the span of the markdown block that had the error, so our\n-                // diagnostics are going to be a bit lacking.\n-                let mut diag = self.cx.sess().struct_span_warn(\n-                    item.attr_span(self.cx.tcx),\n-                    \"doc comment contains an invalid Rust code block\",\n-                );\n-\n-                if code_block.syntax.is_none() && code_block.is_fenced {\n-                    diag.help(\"mark blocks that do not contain Rust code as text: ```text\");\n-                }\n-\n-                diag\n-            };\n+            } else if empty_block || is_ignore {\n+                diag.help(&format!(\"{}: ```text\", explanation));\n+            }\n \n             // FIXME(#67563): Provide more context for these errors by displaying the spans inline.\n             for message in buffer.messages.iter() {\n                 diag.note(&message);\n             }\n \n             diag.emit();\n-        }\n+        };\n+\n+        // Finally build and emit the completed diagnostic.\n+        // All points of divergence have been handled earlier so this can be\n+        // done the same way whether the span is precise or not.\n+        self.cx.tcx.struct_span_lint_hir(\n+            crate::lint::INVALID_RUST_CODEBLOCKS,\n+            hir_id,\n+            sp,\n+            diag_builder,\n+        );\n     }\n }\n "}, {"sha": "86f6a2868fb56af1107918665b267b9c99bb40c4", "filename": "src/test/rustdoc-ui/ignore-block-help.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Ftest%2Frustdoc-ui%2Fignore-block-help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Ftest%2Frustdoc-ui%2Fignore-block-help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fignore-block-help.rs?ref=07d11cf95c87e788c69783611a64bb2365d9447d", "patch": "@@ -3,5 +3,8 @@\n /// ```ignore (to-prevent-tidy-error)\n /// let heart = '\u2764\ufe0f';\n /// ```\n-//~^^^ WARN\n+//~^^^ WARNING could not parse code block\n+//~| NOTE on by default\n+//~| NOTE character literal may only contain one codepoint\n+//~| HELP `ignore` code blocks require valid Rust code\n pub struct X;"}, {"sha": "9c02ff11d19c4bd898a05c34cc0833a99750cce8", "filename": "src/test/rustdoc-ui/ignore-block-help.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Ftest%2Frustdoc-ui%2Fignore-block-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Ftest%2Frustdoc-ui%2Fignore-block-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fignore-block-help.stderr?ref=07d11cf95c87e788c69783611a64bb2365d9447d", "patch": "@@ -7,11 +7,13 @@ LL | | /// let heart = '\u2764\ufe0f';\n LL | | /// ```\n    | |_______^\n    |\n-   = note: error from rustc: character literal may only contain one codepoint\n-help: `ignore` code blocks require valid Rust code for syntax highlighting. Mark blocks that do not contain Rust code as text\n+   = note: `#[warn(rustdoc::invalid_rust_codeblocks)]` on by default\n+help: `ignore` code blocks require valid Rust code for syntax highlighting; mark blocks that do not contain Rust code as text: ```text\n+  --> $DIR/ignore-block-help.rs:3:5\n    |\n-LL | /// ```text,ignore (to-prevent-tidy-error)\n-   |     ^^^^^^^^\n+LL | /// ```ignore (to-prevent-tidy-error)\n+   |     ^^^\n+   = note: error from rustc: character literal may only contain one codepoint\n \n warning: 1 warning emitted\n "}, {"sha": "b503d1093fda8e9e353ba78af406fa3a0f510057", "filename": "src/test/rustdoc-ui/invalid-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.rs?ref=07d11cf95c87e788c69783611a64bb2365d9447d", "patch": "@@ -71,7 +71,7 @@ pub fn blargh() {}\n /// \\_\n #[doc = \"```\"]\n pub fn crazy_attrs() {}\n-//~^^^^ WARNING doc comment contains an invalid Rust code block\n+//~^^^^ WARNING could not parse code block\n \n /// ```rust\n /// ```"}, {"sha": "82eac9bd68b21b966b6276911f56f2ab07350667", "filename": "src/test/rustdoc-ui/invalid-syntax.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07d11cf95c87e788c69783611a64bb2365d9447d/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finvalid-syntax.stderr?ref=07d11cf95c87e788c69783611a64bb2365d9447d", "patch": "@@ -7,6 +7,7 @@ LL | | /// \\__________pkt->size___________/          \\_result->size_/ \\__pkt->si\n LL | | /// ```\n    | |_______^\n    |\n+   = note: `#[warn(rustdoc::invalid_rust_codeblocks)]` on by default\n    = note: error from rustc: unknown start of token: \\\n    = note: error from rustc: unknown start of token: \\\n    = note: error from rustc: unknown start of token: \\\n@@ -90,7 +91,7 @@ LL | | /// ```\n    |\n    = note: error from rustc: unknown start of token: \\\n \n-warning: doc comment contains an invalid Rust code block\n+warning: could not parse code block as Rust code\n   --> $DIR/invalid-syntax.rs:70:1\n    |\n LL | / #[doc = \"```\"]"}]}