{"sha": "27efe126e0c852ab7d1896e61089c69dde17cc09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZWZlMTI2ZTBjODUyYWI3ZDE4OTZlNjEwODljNjlkZGUxN2NjMDk=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-10-16T19:33:45Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-11-03T18:13:22Z"}, "message": "Rename `trait_has_auto_impl` to `trait_is_auto`", "tree": {"sha": "42a9a51daf027859f309ee045c9748f16ef803f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42a9a51daf027859f309ee045c9748f16ef803f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27efe126e0c852ab7d1896e61089c69dde17cc09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27efe126e0c852ab7d1896e61089c69dde17cc09", "html_url": "https://github.com/rust-lang/rust/commit/27efe126e0c852ab7d1896e61089c69dde17cc09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27efe126e0c852ab7d1896e61089c69dde17cc09/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94b07a91bcaad498c18729f187a739e8a86a451c", "url": "https://api.github.com/repos/rust-lang/rust/commits/94b07a91bcaad498c18729f187a739e8a86a451c", "html_url": "https://github.com/rust-lang/rust/commit/94b07a91bcaad498c18729f187a739e8a86a451c"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "7716770d318bae1b47bf6d4d763240b73c199607", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27efe126e0c852ab7d1896e61089c69dde17cc09/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27efe126e0c852ab7d1896e61089c69dde17cc09/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=27efe126e0c852ab7d1896e61089c69dde17cc09", "patch": "@@ -910,7 +910,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {\n         let result = match predicate {\n             ty::Predicate::Trait(ref data) => {\n-                self.tcx().trait_has_auto_impl(data.def_id())\n+                self.tcx().trait_is_auto(data.def_id())\n             }\n             _ => {\n                 false\n@@ -1697,7 +1697,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         let def_id = obligation.predicate.def_id();\n \n-        if self.tcx().trait_has_auto_impl(def_id) {\n+        if self.tcx().trait_is_auto(def_id) {\n             match self_ty.sty {\n                 ty::TyDynamic(..) => {\n                     // For object types, we don't know what the closed"}, {"sha": "81827192cf81457302c2f43763c41cc692389a1a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27efe126e0c852ab7d1896e61089c69dde17cc09/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27efe126e0c852ab7d1896e61089c69dde17cc09/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=27efe126e0c852ab7d1896e61089c69dde17cc09", "patch": "@@ -2308,7 +2308,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.get_attrs(did).iter().any(|item| item.check_name(attr))\n     }\n \n-    pub fn trait_has_auto_impl(self, trait_def_id: DefId) -> bool {\n+    /// Returns true if this is an `auto trait`.\n+    ///\n+    /// NB. For a limited time, also returns true if `impl Trait for .. { }` is in the code-base.\n+    pub fn trait_is_auto(self, trait_def_id: DefId) -> bool {\n         self.trait_def(trait_def_id).has_auto_impl\n     }\n "}, {"sha": "5f2b8efa5387f4c0d887064dbdac5f7ec4c9921f", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27efe126e0c852ab7d1896e61089c69dde17cc09/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27efe126e0c852ab7d1896e61089c69dde17cc09/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=27efe126e0c852ab7d1896e61089c69dde17cc09", "patch": "@@ -970,7 +970,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 let data = TraitData {\n                     unsafety: trait_def.unsafety,\n                     paren_sugar: trait_def.paren_sugar,\n-                    has_auto_impl: tcx.trait_has_auto_impl(def_id),\n+                    has_auto_impl: tcx.trait_is_auto(def_id),\n                     super_predicates: self.lazy(&tcx.super_predicates_of(def_id)),\n                 };\n "}, {"sha": "483af08cabfce624deec7e8da665377672928f17", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27efe126e0c852ab7d1896e61089c69dde17cc09/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27efe126e0c852ab7d1896e61089c69dde17cc09/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=27efe126e0c852ab7d1896e61089c69dde17cc09", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                 // FIXME(#27579) what amount of WF checking do we need for neg impls?\n \n                 let trait_ref = tcx.impl_trait_ref(tcx.hir.local_def_id(item.id)).unwrap();\n-                if !tcx.trait_has_auto_impl(trait_ref.def_id) {\n+                if !tcx.trait_is_auto(trait_ref.def_id) {\n                     error_192(tcx, item.span);\n                 }\n             }\n@@ -318,7 +318,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     fn check_trait(&mut self, item: &hir::Item) {\n         let trait_def_id = self.tcx.hir.local_def_id(item.id);\n \n-        if self.tcx.trait_has_auto_impl(trait_def_id) {\n+        if self.tcx.trait_is_auto(trait_def_id) {\n             self.check_auto_trait(trait_def_id, item.span);\n         }\n "}, {"sha": "9f183973621894e6ad465893540fd1d92fa3cfc7", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27efe126e0c852ab7d1896e61089c69dde17cc09/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27efe126e0c852ab7d1896e61089c69dde17cc09/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=27efe126e0c852ab7d1896e61089c69dde17cc09", "patch": "@@ -100,11 +100,11 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                 // This final impl is legal according to the orpan\n                 // rules, but it invalidates the reasoning from\n                 // `two_foos` above.\n-                debug!(\"trait_ref={:?} trait_def_id={:?} trait_has_auto_impl={}\",\n+                debug!(\"trait_ref={:?} trait_def_id={:?} trait_is_auto={}\",\n                        trait_ref,\n                        trait_def_id,\n-                       self.tcx.trait_has_auto_impl(trait_def_id));\n-                if self.tcx.trait_has_auto_impl(trait_def_id) &&\n+                       self.tcx.trait_is_auto(trait_def_id));\n+                if self.tcx.trait_is_auto(trait_def_id) &&\n                    !trait_def_id.is_local() {\n                     let self_ty = trait_ref.self_ty();\n                     let opt_self_def_id = match self_ty.sty {"}]}