{"sha": "845e146d04bd3591de04ec4bab25f29927d4723c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NWUxNDZkMDRiZDM1OTFkZTA0ZWM0YmFiMjVmMjk5MjdkNDcyM2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-25T21:20:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-25T21:20:51Z"}, "message": "Rollup merge of #60938 - jonas-schievink:doc-include-paths, r=petrochenkov\n\nrustdoc: make #[doc(include)] relative to the containing file\n\nThis matches the behavior of other in-source paths like `#[path]` and the `include_X!` macros.\n\nFixes https://github.com/rust-lang/rust/pull/58373#issuecomment-462349380\nAlso addresses https://github.com/rust-lang/rust/issues/44732#issuecomment-467660239\n\ncc #44732\n\nThis is still missing a stdsimd change (https://github.com/jonas-schievink/stdsimd/commit/42ed30e0b5fb5e2d11765b5d1e1f36234af85984), so CI will currently fail. I'll land that change once I get initial feedback for this PR.", "tree": {"sha": "bd5200a7218740b2064bb4872d3bf814be2f7a05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd5200a7218740b2064bb4872d3bf814be2f7a05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/845e146d04bd3591de04ec4bab25f29927d4723c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdOh0zCRBK7hj4Ov3rIwAAdHIIABxmm3JuCpt7ObSLFUlsdOuc\n17N3Uwo43/0CYn0PZvoFYaXvLmUqTBOgFSsDaEcUksDe/Tt5QGYEZUllielqD6Hp\nlln1WQnngbjTo+2QoKL4+Pi9NUs8vGjz2AvfE2dGOqFJxKQXc0tdByJnvqhbwTjQ\nneW7y/3cSE0rfgtfa0RhyPI+7otDY2mWElrfwVjdQghldAzvqNfKc0K/IwEZCi3s\nNe+Cy4FisvfpaVS8wUPs2PO8uZ1U3jocwtlqWOkU3llxAZYs6PYAUy8VxMSq8vr9\n+MSMwT2LK1KCHvgK10Z1HIOv0KEcknt1g81Rchqx1+33GfnI/EtGJaFUOU4L0BY=\n=yRR5\n-----END PGP SIGNATURE-----\n", "payload": "tree bd5200a7218740b2064bb4872d3bf814be2f7a05\nparent 3b19dc96fc0b67af2451d4c9bd311253818719c7\nparent 218ab4cd7fdf145a0870c582a23ad5fd85cd80e5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564089651 +0200\ncommitter GitHub <noreply@github.com> 1564089651 +0200\n\nRollup merge of #60938 - jonas-schievink:doc-include-paths, r=petrochenkov\n\nrustdoc: make #[doc(include)] relative to the containing file\n\nThis matches the behavior of other in-source paths like `#[path]` and the `include_X!` macros.\n\nFixes https://github.com/rust-lang/rust/pull/58373#issuecomment-462349380\nAlso addresses https://github.com/rust-lang/rust/issues/44732#issuecomment-467660239\n\ncc #44732\n\nThis is still missing a stdsimd change (https://github.com/jonas-schievink/stdsimd/commit/42ed30e0b5fb5e2d11765b5d1e1f36234af85984), so CI will currently fail. I'll land that change once I get initial feedback for this PR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/845e146d04bd3591de04ec4bab25f29927d4723c", "html_url": "https://github.com/rust-lang/rust/commit/845e146d04bd3591de04ec4bab25f29927d4723c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/845e146d04bd3591de04ec4bab25f29927d4723c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b19dc96fc0b67af2451d4c9bd311253818719c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b19dc96fc0b67af2451d4c9bd311253818719c7", "html_url": "https://github.com/rust-lang/rust/commit/3b19dc96fc0b67af2451d4c9bd311253818719c7"}, {"sha": "218ab4cd7fdf145a0870c582a23ad5fd85cd80e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/218ab4cd7fdf145a0870c582a23ad5fd85cd80e5", "html_url": "https://github.com/rust-lang/rust/commit/218ab4cd7fdf145a0870c582a23ad5fd85cd80e5"}], "stats": {"total": 133, "additions": 72, "deletions": 61}, "files": [{"sha": "6e32468b64dee0f4c4503f90e3424fd53dfdb61e", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=845e146d04bd3591de04ec4bab25f29927d4723c", "patch": "@@ -183,9 +183,8 @@ Book][unstable-masked] and [its tracking issue][issue-masked].\n \n As designed in [RFC 1990], Rustdoc can read an external file to use as a type's documentation. This\n is useful if certain documentation is so long that it would break the flow of reading the source.\n-Instead of writing it all inline, writing `#[doc(include = \"sometype.md\")]` (where `sometype.md` is\n-a file adjacent to the `lib.rs` for the crate) will ask Rustdoc to instead read that file and use it\n-as if it were written inline.\n+Instead of writing it all inline, writing `#[doc(include = \"sometype.md\")]` will ask Rustdoc to\n+instead read that file and use it as if it were written inline.\n \n [RFC 1990]: https://github.com/rust-lang/rfcs/pull/1990\n "}, {"sha": "0761c50f4b22953624566ecb1ebe852b3c07a8d6", "filename": "src/libstd/os/raw/mod.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=845e146d04bd3591de04ec4bab25f29927d4723c", "patch": "@@ -8,7 +8,8 @@\n \n #![stable(feature = \"raw_os\", since = \"1.1.0\")]\n \n-#[doc(include = \"os/raw/char.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/char.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"char.md\"))]\n #[cfg(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n                                        target_arch = \"hexagon\",\n@@ -32,7 +33,8 @@\n                                          target_arch = \"powerpc\")),\n           all(target_os = \"fuchsia\", target_arch = \"aarch64\")))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n-#[doc(include = \"os/raw/char.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/char.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"char.md\"))]\n #[cfg(not(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n                                            target_arch = \"hexagon\",\n@@ -56,37 +58,51 @@\n                                              target_arch = \"powerpc\")),\n               all(target_os = \"fuchsia\", target_arch = \"aarch64\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n-#[doc(include = \"os/raw/schar.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/schar.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"schar.md\"))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;\n-#[doc(include = \"os/raw/uchar.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/uchar.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"uchar.md\"))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uchar = u8;\n-#[doc(include = \"os/raw/short.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/short.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"short.md\"))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_short = i16;\n-#[doc(include = \"os/raw/ushort.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/ushort.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"ushort.md\"))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ushort = u16;\n-#[doc(include = \"os/raw/int.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/int.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"int.md\"))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_int = i32;\n-#[doc(include = \"os/raw/uint.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/uint.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"uint.md\"))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_uint = u32;\n-#[doc(include = \"os/raw/long.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/long.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"long.md\"))]\n #[cfg(any(target_pointer_width = \"32\", windows))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i32;\n-#[doc(include = \"os/raw/ulong.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/ulong.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"ulong.md\"))]\n #[cfg(any(target_pointer_width = \"32\", windows))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u32;\n-#[doc(include = \"os/raw/long.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/long.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"long.md\"))]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_long = i64;\n-#[doc(include = \"os/raw/ulong.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/ulong.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"ulong.md\"))]\n #[cfg(all(target_pointer_width = \"64\", not(windows)))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulong = u64;\n-#[doc(include = \"os/raw/longlong.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/longlong.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"longlong.md\"))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_longlong = i64;\n-#[doc(include = \"os/raw/ulonglong.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/ulonglong.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"ulonglong.md\"))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_ulonglong = u64;\n-#[doc(include = \"os/raw/float.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/float.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"float.md\"))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_float = f32;\n-#[doc(include = \"os/raw/double.md\")]\n+#[cfg_attr(bootstrap, doc(include = \"os/raw/double.md\"))]\n+#[cfg_attr(not(bootstrap), doc(include = \"double.md\"))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_double = f64;\n \n #[stable(feature = \"raw_os\", since = \"1.1.0\")]"}, {"sha": "11b7a984aaa001493ed1498a103bb404db49cfb8", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=845e146d04bd3591de04ec4bab25f29927d4723c", "patch": "@@ -1,6 +1,6 @@\n use crate::ast::{self, Attribute, Name, PatKind};\n use crate::attr::{HasAttrs, Stability, Deprecation};\n-use crate::source_map::{SourceMap, Spanned, respan};\n+use crate::source_map::{SourceMap, Spanned, FileName, respan};\n use crate::edition::Edition;\n use crate::ext::expand::{self, AstFragment, Invocation};\n use crate::ext::hygiene::{ExpnId, SyntaxContext, Transparency};\n@@ -889,6 +889,31 @@ impl<'a> ExtCtxt<'a> {\n     pub fn check_unused_macros(&self) {\n         self.resolver.check_unused_macros();\n     }\n+\n+    /// Resolve a path mentioned inside Rust code.\n+    ///\n+    /// This unifies the logic used for resolving `include_X!`, and `#[doc(include)]` file paths.\n+    ///\n+    /// Returns an absolute path to the file that `path` refers to.\n+    pub fn resolve_path(&self, path: impl Into<PathBuf>, span: Span) -> PathBuf {\n+        let path = path.into();\n+\n+        // Relative paths are resolved relative to the file in which they are found\n+        // after macro expansion (that is, they are unhygienic).\n+        if !path.is_absolute() {\n+            let callsite = span.source_callsite();\n+            let mut result = match self.source_map().span_to_unmapped_path(callsite) {\n+                FileName::Real(path) => path,\n+                FileName::DocTest(path, _) => path,\n+                other => panic!(\"cannot resolve relative path in non-file source `{}`\", other),\n+            };\n+            result.pop();\n+            result.push(path);\n+            result\n+        } else {\n+            path\n+        }\n+    }\n }\n \n /// Extracts a string literal from the macro expanded version of `expr`,"}, {"sha": "640daaccc3a2c8b911c0534cb5b53e07871bd682", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=845e146d04bd3591de04ec4bab25f29927d4723c", "patch": "@@ -1253,7 +1253,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                         return noop_visit_attribute(at, self);\n                     }\n \n-                    let filename = self.cx.root_path.join(file.to_string());\n+                    let filename = self.cx.resolve_path(&*file.as_str(), it.span());\n                     match fs::read_to_string(&filename) {\n                         Ok(src) => {\n                             let src_interned = Symbol::intern(&src);\n@@ -1302,10 +1302,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                                 );\n                                 err.span_label(lit.span, \"couldn't read file\");\n \n-                                if e.kind() == ErrorKind::NotFound {\n-                                    err.help(\"external doc paths are relative to the crate root\");\n-                                }\n-\n                                 err.emit();\n                             }\n                         }"}, {"sha": "ae080c05eec91bbfb59b68ae1a8c7dc0bc854b5e", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=845e146d04bd3591de04ec4bab25f29927d4723c", "patch": "@@ -8,11 +8,10 @@ use crate::symbol::Symbol;\n use crate::tokenstream;\n \n use smallvec::SmallVec;\n-use syntax_pos::{self, Pos, Span, FileName};\n+use syntax_pos::{self, Pos, Span};\n \n use std::fs;\n use std::io::ErrorKind;\n-use std::path::PathBuf;\n use rustc_data_structures::sync::Lrc;\n \n // These macros all relate to the file system; they either return\n@@ -78,9 +77,9 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: &[tokenstrea\n         None => return DummyResult::any(sp),\n     };\n     // The file will be added to the code map by the parser\n-    let path = res_rel_file(cx, sp, file);\n+    let file = cx.resolve_path(file, sp);\n     let directory_ownership = DirectoryOwnership::Owned { relative: None };\n-    let p = parse::new_sub_parser_from_file(cx.parse_sess(), &path, directory_ownership, None, sp);\n+    let p = parse::new_sub_parser_from_file(cx.parse_sess(), &file, directory_ownership, None, sp);\n \n     struct ExpandResult<'a> {\n         p: parse::parser::Parser<'a>,\n@@ -115,7 +114,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::To\n         Some(f) => f,\n         None => return DummyResult::expr(sp)\n     };\n-    let file = res_rel_file(cx, sp, file);\n+    let file = cx.resolve_path(file, sp);\n     match fs::read_to_string(&file) {\n         Ok(src) => {\n             let interned_src = Symbol::intern(&src);\n@@ -143,7 +142,7 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::\n         Some(f) => f,\n         None => return DummyResult::expr(sp)\n     };\n-    let file = res_rel_file(cx, sp, file);\n+    let file = cx.resolve_path(file, sp);\n     match fs::read(&file) {\n         Ok(bytes) => {\n             // Add the contents to the source map if it contains UTF-8.\n@@ -164,24 +163,3 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::\n         }\n     }\n }\n-\n-// resolve a file-system path to an absolute file-system path (if it\n-// isn't already)\n-fn res_rel_file(cx: &mut ExtCtxt<'_>, sp: syntax_pos::Span, arg: String) -> PathBuf {\n-    let arg = PathBuf::from(arg);\n-    // Relative paths are resolved relative to the file in which they are found\n-    // after macro expansion (that is, they are unhygienic).\n-    if !arg.is_absolute() {\n-        let callsite = sp.source_callsite();\n-        let mut path = match cx.source_map().span_to_unmapped_path(callsite) {\n-            FileName::Real(path) => path,\n-            FileName::DocTest(path, _) => path,\n-            other => panic!(\"cannot resolve relative path in non-file source `{}`\", other),\n-        };\n-        path.pop();\n-        path.push(arg);\n-        path\n-    } else {\n-        arg\n-    }\n-}"}, {"sha": "4791ba85e7645c02146dd416288480943670d1ca", "filename": "src/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdarch?ref=845e146d04bd3591de04ec4bab25f29927d4723c", "patch": "@@ -1 +1 @@\n-Subproject commit b881a2d124cb0eea09d137300eb4a35829b517fb\n+Subproject commit 4791ba85e7645c02146dd416288480943670d1ca"}, {"sha": "4e89f7464da49219e786d25b96813cb790977823", "filename": "src/test/ui/extern/external-doc-error.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.rs?ref=845e146d04bd3591de04ec4bab25f29927d4723c", "patch": "@@ -4,7 +4,6 @@\n \n #[doc(include = \"not-a-file.md\")]\n pub struct SomeStruct; //~^ ERROR couldn't read\n-                       //~| HELP external doc paths are relative to the crate root\n \n #[doc(include = \"auxiliary/invalid-utf8.txt\")]\n pub struct InvalidUtf8; //~^ ERROR wasn't a utf-8 file"}, {"sha": "b180cd66c52696534864ea82b087ab6137d38169", "filename": "src/test/ui/extern/external-doc-error.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/845e146d04bd3591de04ec4bab25f29927d4723c/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.stderr?ref=845e146d04bd3591de04ec4bab25f29927d4723c", "patch": "@@ -3,35 +3,33 @@ error: couldn't read $DIR/not-a-file.md: $FILE_NOT_FOUND_MSG (os error 2)\n    |\n LL | #[doc(include = \"not-a-file.md\")]\n    |                 ^^^^^^^^^^^^^^^ couldn't read file\n-   |\n-   = help: external doc paths are relative to the crate root\n \n error: $DIR/auxiliary/invalid-utf8.txt wasn't a utf-8 file\n-  --> $DIR/external-doc-error.rs:9:17\n+  --> $DIR/external-doc-error.rs:8:17\n    |\n LL | #[doc(include = \"auxiliary/invalid-utf8.txt\")]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ contains invalid utf-8\n \n error: expected path to external documentation\n-  --> $DIR/external-doc-error.rs:12:7\n+  --> $DIR/external-doc-error.rs:11:7\n    |\n LL | #[doc(include)]\n    |       ^^^^^^^ help: provide a file path with `=`: `include = \"<path>\"`\n \n error: expected path to external documentation\n-  --> $DIR/external-doc-error.rs:17:7\n+  --> $DIR/external-doc-error.rs:16:7\n    |\n LL | #[doc(include(\"../README.md\"))]\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ help: provide a file path with `=`: `include = \"../README.md\"`\n \n error: expected path to external documentation\n-  --> $DIR/external-doc-error.rs:22:7\n+  --> $DIR/external-doc-error.rs:21:7\n    |\n LL | #[doc(include = 123)]\n    |       ^^^^^^^^^^^^^ help: provide a file path with `=`: `include = \"<path>\"`\n \n error: expected path to external documentation\n-  --> $DIR/external-doc-error.rs:27:7\n+  --> $DIR/external-doc-error.rs:26:7\n    |\n LL | #[doc(include(123))]\n    |       ^^^^^^^^^^^^ help: provide a file path with `=`: `include = \"<path>\"`"}]}