{"sha": "9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmOWNjNzJlZTVkYmIwOTkxOTUxZWMxYTM2YTk2NTZkMDVlMjc0MDQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-07T17:08:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-07T17:08:37Z"}, "message": "Complete `crate`, `super` and `self` in non-usetree paths", "tree": {"sha": "7f9777e55bf529a7864d0d008e715b8dacd03ad9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f9777e55bf529a7864d0d008e715b8dacd03ad9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "html_url": "https://github.com/rust-lang/rust/commit/9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b6770c9367d69ea82f63ceab081b2fec7b4900c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b6770c9367d69ea82f63ceab081b2fec7b4900c", "html_url": "https://github.com/rust-lang/rust/commit/2b6770c9367d69ea82f63ceab081b2fec7b4900c"}], "stats": {"total": 183, "additions": 126, "deletions": 57}, "files": [{"sha": "e19edb21252e5232e54e3966bcc9f22c7ce0a751", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "patch": "@@ -74,6 +74,12 @@ impl Completions {\n         items.into_iter().for_each(|item| self.add(item.into()))\n     }\n \n+    pub(crate) fn add_keyword(&mut self, ctx: &CompletionContext, keyword: &'static str) {\n+        let mut item = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), keyword);\n+        item.kind(CompletionItemKind::Keyword);\n+        item.add_to(self);\n+    }\n+\n     pub(crate) fn add_resolution(\n         &mut self,\n         ctx: &CompletionContext,"}, {"sha": "aabc096e6c49a0e5bf8b49df968d32c34194c377", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "patch": "@@ -1,44 +1,12 @@\n //! Completes keywords.\n \n-use std::iter;\n-\n use syntax::{SyntaxKind, T};\n \n use crate::{\n     context::PathCompletionContext, patterns::ImmediateLocation, CompletionContext, CompletionItem,\n     CompletionItemKind, CompletionKind, Completions,\n };\n \n-pub(crate) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n-    // complete keyword \"crate\" in use stmt\n-    let source_range = ctx.source_range();\n-    let kw_completion = move |text: &str| {\n-        let mut item = CompletionItem::new(CompletionKind::Keyword, source_range, text);\n-        item.kind(CompletionItemKind::Keyword).insert_text(text);\n-        item\n-    };\n-\n-    if ctx.in_use_tree() {\n-        match &ctx.path_context {\n-            Some(PathCompletionContext { qualifier: Some(qual), use_tree_parent, .. }) => {\n-                if iter::successors(Some(qual.clone()), |p| p.qualifier())\n-                    .all(|p| p.segment().and_then(|s| s.super_token()).is_some())\n-                {\n-                    kw_completion(\"super::\").add_to(acc);\n-                }\n-                if *use_tree_parent {\n-                    kw_completion(\"self\").add_to(acc);\n-                }\n-            }\n-            _ => {\n-                kw_completion(\"crate::\").add_to(acc);\n-                kw_completion(\"self::\").add_to(acc);\n-                kw_completion(\"super::\").add_to(acc);\n-            }\n-        };\n-    }\n-}\n-\n pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n     if ctx.token.kind() == SyntaxKind::COMMENT {\n         cov_mark::hit!(no_keyword_completion_in_comments);\n@@ -243,6 +211,9 @@ mod tests {\n                 kw for\n                 kw let\n                 kw return\n+                kw self\n+                kw super\n+                kw crate\n             \"#]],\n         );\n     }\n@@ -271,6 +242,9 @@ mod tests {\n                 kw for\n                 kw let\n                 kw return\n+                kw self\n+                kw super\n+                kw crate\n             \"#]],\n         );\n     }\n@@ -301,6 +275,9 @@ mod tests {\n                 kw else\n                 kw else if\n                 kw return\n+                kw self\n+                kw super\n+                kw crate\n             \"#]],\n         );\n         check_edit(\n@@ -330,6 +307,9 @@ fn quux() -> i32 {\n                 kw if let\n                 kw for\n                 kw return\n+                kw self\n+                kw super\n+                kw crate\n             \"#]],\n         );\n     }\n@@ -360,6 +340,9 @@ fn quux() -> i32 {\n                 kw continue\n                 kw break\n                 kw return\n+                kw self\n+                kw super\n+                kw crate\n             \"#]],\n         );\n     }\n@@ -448,6 +431,9 @@ fn foo() {\n                 kw if let\n                 kw for\n                 kw return\n+                kw self\n+                kw super\n+                kw crate\n             \"#]],\n         )\n     }\n@@ -493,6 +479,9 @@ fn foo() {\n                 kw if let\n                 kw for\n                 kw return\n+                kw self\n+                kw super\n+                kw crate\n             \"#]],\n         );\n     }"}, {"sha": "ed0f902017a7fcd83c8afce2366b3368c31a5922", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "patch": "@@ -1,18 +1,22 @@\n //! Completion of paths, i.e. `some::prefix::$0`.\n \n+use std::iter;\n+\n use hir::HasVisibility;\n use rustc_hash::FxHashSet;\n-use syntax::AstNode;\n+use syntax::{ast, AstNode};\n \n-use crate::{CompletionContext, Completions};\n+use crate::{context::PathCompletionContext, CompletionContext, Completions};\n \n pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n     if ctx.is_path_disallowed() {\n         return;\n     }\n-    let path = match ctx.path_qual() {\n-        Some(path) => path,\n-        None => return,\n+    let (path, use_tree_parent) = match &ctx.path_context {\n+        Some(PathCompletionContext { qualifier: Some(qualifier), use_tree_parent, .. }) => {\n+            (qualifier, *use_tree_parent)\n+        }\n+        _ => return,\n     };\n \n     let resolution = match ctx.sema.resolve_path(path) {\n@@ -39,6 +43,23 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         return;\n     }\n \n+    if ctx.in_use_tree() {\n+        if iter::successors(Some(path.clone()), |p| p.qualifier())\n+            .all(|p| p.segment().and_then(|s| s.super_token()).is_some())\n+        {\n+            acc.add_keyword(ctx, \"super::\");\n+        }\n+        // only show `self` in a new use-tree when the qualifier doesn't end in self\n+        if use_tree_parent\n+            && !matches!(\n+                path.segment().and_then(|it| it.kind()),\n+                Some(ast::PathSegmentKind::SelfKw)\n+            )\n+        {\n+            acc.add_keyword(ctx, \"self\");\n+        }\n+    }\n+\n     // Add associated types on type parameters and `Self`.\n     resolution.assoc_type_shorthand_candidates(ctx.db, |_, alias| {\n         acc.add_type_alias(ctx, alias);"}, {"sha": "3ee5095741943d0f1582ce030a72cc141377403a", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "patch": "@@ -10,6 +10,21 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         return;\n     }\n \n+    if ctx.in_use_tree() {\n+        // only show modules in a fresh UseTree\n+        cov_mark::hit!(only_completes_modules_in_import);\n+        ctx.scope.process_all_names(&mut |name, res| {\n+            if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n+                acc.add_resolution(ctx, name, &res);\n+            }\n+        });\n+\n+        std::array::IntoIter::new([\"self::\", \"super::\", \"crate::\"])\n+            .for_each(|kw| acc.add_keyword(ctx, kw));\n+        return;\n+    }\n+    std::array::IntoIter::new([\"self\", \"super\", \"crate\"]).for_each(|kw| acc.add_keyword(ctx, kw));\n+\n     if ctx.expects_item() || ctx.expects_assoc_item() {\n         // only show macros in {Assoc}ItemList\n         ctx.scope.process_all_names(&mut |name, res| {\n@@ -25,17 +40,6 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         return;\n     }\n \n-    if ctx.in_use_tree() {\n-        // only show modules in a fresh UseTree\n-        cov_mark::hit!(only_completes_modules_in_import);\n-        ctx.scope.process_all_names(&mut |name, res| {\n-            if let ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n-                acc.add_resolution(ctx, name, &res);\n-            }\n-        });\n-        return;\n-    }\n-\n     if matches!(&ctx.completion_location, Some(ImmediateLocation::TypeBound)) {\n         ctx.scope.process_all_names(&mut |name, res| {\n             let add_resolution = match res {"}, {"sha": "a9f32a42acfb3a4f36694c391bd88b72febd0304", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "patch": "@@ -150,7 +150,6 @@ pub fn completions(\n     completions::attribute::complete_attribute(&mut acc, &ctx);\n     completions::fn_param::complete_fn_param(&mut acc, &ctx);\n     completions::keyword::complete_expr_keyword(&mut acc, &ctx);\n-    completions::keyword::complete_use_tree_keyword(&mut acc, &ctx);\n     completions::snippet::complete_expr_snippet(&mut acc, &ctx);\n     completions::snippet::complete_item_snippet(&mut acc, &ctx);\n     completions::qualified_path::complete_qualified_path(&mut acc, &ctx);"}, {"sha": "a76881f209766eb18f84272db80d44f0d9214a64", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "patch": "@@ -30,6 +30,9 @@ fn in_mod_item_list() {\n             sn tmod (Test module)\n             sn tfn (Test function)\n             sn macro_rules\n+            kw self\n+            kw super\n+            kw crate\n             ma makro!(\u2026)           #[macro_export] macro_rules! makro\n         \"##]],\n     )\n@@ -58,6 +61,9 @@ fn in_source_file_item_list() {\n             sn tmod (Test module)\n             sn tfn (Test function)\n             sn macro_rules\n+            kw self\n+            kw super\n+            kw crate\n             ma makro!(\u2026)           #[macro_export] macro_rules! makro\n             md module\n             ma makro!(\u2026)           #[macro_export] macro_rules! makro\n@@ -174,6 +180,9 @@ fn in_impl_assoc_item_list() {\n             kw fn\n             kw const\n             kw type\n+            kw self\n+            kw super\n+            kw crate\n             ma makro!(\u2026)  #[macro_export] macro_rules! makro\n             md module\n             ma makro!(\u2026)  #[macro_export] macro_rules! makro\n@@ -205,6 +214,9 @@ fn in_trait_assoc_item_list() {\n             kw fn\n             kw const\n             kw type\n+            kw self\n+            kw super\n+            kw crate\n             md module\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n             ma makro!(\u2026) #[macro_export] macro_rules! makro"}, {"sha": "7df200b486a1cff01df257cf6836ee438924c4cd", "filename": "crates/ide_completion/src/tests/items.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs?ref=9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "patch": "@@ -18,6 +18,9 @@ fn target_type_or_trait_in_impl_block() {\n impl Tra$0\n \"#,\n         expect![[r##\"\n+            kw self\n+            kw super\n+            kw crate\n             tt Trait\n             en Enum\n             st Record\n@@ -38,6 +41,9 @@ fn target_type_in_trait_impl_block() {\n impl Trait for Str$0\n \"#,\n         expect![[r##\"\n+            kw self\n+            kw super\n+            kw crate\n             tt Trait\n             en Enum\n             st Record"}, {"sha": "0821e22f28ca29f7e54ea6af31c075282195ce3f", "filename": "crates/ide_completion/src/tests/predicate.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs?ref=9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "patch": "@@ -16,6 +16,9 @@ fn predicate_start() {\n struct Foo<'lt, T, const C: usize> where $0 {}\n \"#,\n         expect![[r##\"\n+            kw self\n+            kw super\n+            kw crate\n             tt Trait\n             en Enum\n             st Record\n@@ -38,6 +41,9 @@ fn bound_for_type_pred() {\n struct Foo<'lt, T, const C: usize> where T: $0 {}\n \"#,\n         expect![[r##\"\n+            kw self\n+            kw super\n+            kw crate\n             tt Trait\n             md module\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n@@ -54,6 +60,9 @@ fn bound_for_lifetime_pred() {\n struct Foo<'lt, T, const C: usize> where 'lt: $0 {}\n \"#,\n         expect![[r##\"\n+            kw self\n+            kw super\n+            kw crate\n             tt Trait\n             md module\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n@@ -69,6 +78,9 @@ fn bound_for_for_pred() {\n struct Foo<'lt, T, const C: usize> where for<'a> T: $0 {}\n \"#,\n         expect![[r##\"\n+            kw self\n+            kw super\n+            kw crate\n             tt Trait\n             md module\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n@@ -84,6 +96,9 @@ fn param_list_for_for_pred() {\n struct Foo<'lt, T, const C: usize> where for<'a> $0 {}\n \"#,\n         expect![[r##\"\n+            kw self\n+            kw super\n+            kw crate\n             tt Trait\n             en Enum\n             st Record\n@@ -107,6 +122,9 @@ impl Record {\n }\n \"#,\n         expect![[r##\"\n+            kw self\n+            kw super\n+            kw crate\n             sp Self\n             tt Trait\n             en Enum"}, {"sha": "40571f45b83978dea2b1a699e864298e7480c103", "filename": "crates/ide_completion/src/tests/type_pos.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "patch": "@@ -30,6 +30,9 @@ struct Foo<'lt, T, const C: usize> {\n }\n \"#,\n         expect![[r#\"\n+            kw self\n+            kw super\n+            kw crate\n             sp Self\n             tp T\n             tt Trait\n@@ -54,6 +57,9 @@ struct Foo<'lt, T, const C: usize>(f$0);\n         expect![[r#\"\n             kw pub(crate)\n             kw pub\n+            kw self\n+            kw super\n+            kw crate\n             sp Self\n             tp T\n             tt Trait\n@@ -76,6 +82,9 @@ fn fn_return_type() {\n fn x<'lt, T, const C: usize>() -> $0\n \"#,\n         expect![[r#\"\n+            kw self\n+            kw super\n+            kw crate\n             tp T\n             tt Trait\n             en Enum\n@@ -99,6 +108,9 @@ fn foo<'lt, T, const C: usize>() {\n }\n \"#,\n         expect![[r#\"\n+            kw self\n+            kw super\n+            kw crate\n             tp T\n             tt Trait\n             en Enum\n@@ -140,6 +152,9 @@ trait Trait2 {\n fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n \"#,\n         expect![[r#\"\n+            kw self\n+            kw super\n+            kw crate\n             ta Foo =  (as Trait2) type Foo;\n             tp T\n             cp CONST_PARAM"}, {"sha": "71c618e6690cab7dbe40dadf2e5e22b3273c6dfd", "filename": "crates/ide_completion/src/tests/use_tree.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f9cc72ee5dbb0991951ec1a36a9656d05e27404/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=9f9cc72ee5dbb0991951ec1a36a9656d05e27404", "patch": "@@ -22,11 +22,11 @@ mod foo {}\n // nothing here\n \"#,\n         expect![[r#\"\n-            kw crate::\n-            kw self::\n-            kw super::\n             md foo\n             md other_crate\n+            kw self::\n+            kw super::\n+            kw crate::\n         \"#]],\n     );\n }\n@@ -41,7 +41,6 @@ mod foo { pub struct S; }\n use self::{foo::*, bar$0};\n \"#,\n         expect![[r#\"\n-            kw self\n             st S\n             md foo\n         \"#]],\n@@ -230,10 +229,10 @@ pub mod bar {}\n pub use $0;\n \"#,\n         expect![[r#\"\n-            kw crate::\n+            md bar\n             kw self::\n             kw super::\n-            md bar\n+            kw crate::\n         \"#]],\n     );\n }\n@@ -247,10 +246,10 @@ mod bar {}\n use {$0};\n \"#,\n         expect![[r#\"\n-            kw crate::\n+            md bar\n             kw self::\n             kw super::\n-            md bar\n+            kw crate::\n         \"#]],\n     );\n }"}]}