{"sha": "7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MjRhYzdkYzRiNDRmNWVmOWQxZWUxZTk5NTllMjUxZGI3N2Q1YWI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-05-30T03:39:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-30T03:39:14Z"}, "message": "Rollup merge of #72621 - Aaron1011:fix/trait-select-error, r=nikomatsakis\n\nDon't bail out of trait selection when predicate references an error\n\nFixes #72590\n\nWith PR #70551, observing a `ty::Error` guarantees that compilation is\ngoing to fail. Therefore, there are no soundness impliciations to\ncontinuing on when we encounter a `ty::Error` - we can only affect\nwhether or not additional error messags are emitted.\n\nBy not bailing out, we avoid incorrectly determining that types are\n`!Sized` when a type error is present, which allows us to avoid emitting\nadditional spurious error messages.\n\nThe original comment mentioned this code being shared by coherence -\nhowver, this change resulted in no diagnostic changes in any of the\nexisting tests.", "tree": {"sha": "565819b0875a100d8b10f8dfebe62de951837d72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/565819b0875a100d8b10f8dfebe62de951837d72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0dViCRBK7hj4Ov3rIwAAdHIIAKBTEX/gZ38XjIMRMgBk5jOC\nt9yhsoGVAJtRf3bMr9mjjE27X6yJuH9UUTiqzYGnCO/fox0IVabEW9sVuDKZHQZx\n3fuok8COMGyKyEgjKzAmOJ/5rJDbJJElqwnSv4beu5KwUa3rZEv1+kw8U8yvbXgi\n2wtbpXS0b3vAXQCdEy8ymAlYEgeE49owD9sE0SlHfqbWxr7zaHBy/Ee9c2bkxGp4\nW2NJHpnIMsnbaqV1GODso9oEi5/hfBkwMC7B6lt26reDQ/OdKAThKsCQyQWV3zbX\nJ5yF3Nha9MNyzZSN3zIsi6c5EsNXlSolCM72xEhqWY3cNo6GehQXRVTQxJLkm8Q=\n=EJA9\n-----END PGP SIGNATURE-----\n", "payload": "tree 565819b0875a100d8b10f8dfebe62de951837d72\nparent a5fb7fcab376c0d21173f33ceefc4f69998f8964\nparent 1c30c9e92bdae1814dbae9367f214b4819cdd0de\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1590809954 +0900\ncommitter GitHub <noreply@github.com> 1590809954 +0900\n\nRollup merge of #72621 - Aaron1011:fix/trait-select-error, r=nikomatsakis\n\nDon't bail out of trait selection when predicate references an error\n\nFixes #72590\n\nWith PR #70551, observing a `ty::Error` guarantees that compilation is\ngoing to fail. Therefore, there are no soundness impliciations to\ncontinuing on when we encounter a `ty::Error` - we can only affect\nwhether or not additional error messags are emitted.\n\nBy not bailing out, we avoid incorrectly determining that types are\n`!Sized` when a type error is present, which allows us to avoid emitting\nadditional spurious error messages.\n\nThe original comment mentioned this code being shared by coherence -\nhowver, this change resulted in no diagnostic changes in any of the\nexisting tests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab", "html_url": "https://github.com/rust-lang/rust/commit/7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5fb7fcab376c0d21173f33ceefc4f69998f8964", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5fb7fcab376c0d21173f33ceefc4f69998f8964", "html_url": "https://github.com/rust-lang/rust/commit/a5fb7fcab376c0d21173f33ceefc4f69998f8964"}, {"sha": "1c30c9e92bdae1814dbae9367f214b4819cdd0de", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c30c9e92bdae1814dbae9367f214b4819cdd0de", "html_url": "https://github.com/rust-lang/rust/commit/1c30c9e92bdae1814dbae9367f214b4819cdd0de"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "efd4af650aeb19db112222d03b8bc76d96d2f082", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab", "patch": "@@ -1040,17 +1040,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         stack: &TraitObligationStack<'o, 'tcx>,\n     ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n-        if stack.obligation.predicate.references_error() {\n-            // If we encounter a `Error`, we generally prefer the\n-            // most \"optimistic\" result in response -- that is, the\n-            // one least likely to report downstream errors. But\n-            // because this routine is shared by coherence and by\n-            // trait selection, there isn't an obvious \"right\" choice\n-            // here in that respect, so we opt to just return\n-            // ambiguity and let the upstream clients sort it out.\n-            return Ok(None);\n-        }\n-\n         if let Some(conflict) = self.is_knowable(stack) {\n             debug!(\"coherence stage: not knowable\");\n             if self.intercrate_ambiguity_causes.is_some() {"}, {"sha": "00e098d43e073917e8a2a4e1062cf0ffb98d1050", "filename": "src/test/ui/async-await/issue-72590-type-error-sized.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.rs?ref=7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab", "patch": "@@ -0,0 +1,22 @@\n+// Regression test for issue #72590\n+// Tests that we don't emit a spurious \"size cannot be statically determined\" error\n+// edition:2018\n+\n+struct Foo {\n+    foo: Nonexistent, //~ ERROR cannot find\n+    other: str\n+}\n+\n+struct Bar {\n+    test: Missing //~ ERROR cannot find\n+}\n+\n+impl Foo {\n+    async fn frob(self) {} //~ ERROR the size\n+}\n+\n+impl Bar {\n+    async fn myfn(self) {}\n+}\n+\n+fn main() {}"}, {"sha": "603895b598c168384671140c7527625290194e66", "filename": "src/test/ui/async-await/issue-72590-type-error-sized.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72590-type-error-sized.stderr?ref=7624ac7dc4b44f5ef9d1ee1e9959e251db77d5ab", "patch": "@@ -0,0 +1,28 @@\n+error[E0412]: cannot find type `Nonexistent` in this scope\n+  --> $DIR/issue-72590-type-error-sized.rs:6:10\n+   |\n+LL |     foo: Nonexistent,\n+   |          ^^^^^^^^^^^ not found in this scope\n+\n+error[E0412]: cannot find type `Missing` in this scope\n+  --> $DIR/issue-72590-type-error-sized.rs:11:11\n+   |\n+LL |     test: Missing\n+   |           ^^^^^^^ not found in this scope\n+\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/issue-72590-type-error-sized.rs:15:19\n+   |\n+LL |     async fn frob(self) {}\n+   |                   ^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `Foo`, the trait `std::marker::Sized` is not implemented for `str`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required because it appears within the type `Foo`\n+   = note: all local variables must have a statically known size\n+   = help: unsized locals are gated as an unstable feature\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0277, E0412.\n+For more information about an error, try `rustc --explain E0277`."}]}