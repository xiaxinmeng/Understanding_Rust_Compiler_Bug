{"sha": "07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZGIyYmZlMzk1YTI3ODczNzZjM2NmMDY4YmJmZTllMWUyZWI0ZDA=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-01-03T04:49:28Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-01-03T06:06:54Z"}, "message": "Implement floating point SIMD intrinsics over all vector widths, and limit SIMD vector lengths.", "tree": {"sha": "67e52cf7e497445eadf5852f8a065e4e89af0240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67e52cf7e497445eadf5852f8a065e4e89af0240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "html_url": "https://github.com/rust-lang/rust/commit/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd85ca02f6da4531bcec65b8309ecf38e0eb8938", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd85ca02f6da4531bcec65b8309ecf38e0eb8938", "html_url": "https://github.com/rust-lang/rust/commit/fd85ca02f6da4531bcec65b8309ecf38e0eb8938"}], "stats": {"total": 340, "additions": 141, "deletions": 199}, "files": [{"sha": "df3ef26d1ad5e89a9e70c79c4705d354e3d63aa5", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "patch": "@@ -498,25 +498,6 @@ impl CodegenCx<'b, 'tcx> {\n         let t_f32 = self.type_f32();\n         let t_f64 = self.type_f64();\n \n-        macro_rules! vector_types {\n-            ($id_out:ident: $elem_ty:ident, $len:expr) => {\n-                let $id_out = self.type_vector($elem_ty, $len);\n-            };\n-            ($($id_out:ident: $elem_ty:ident, $len:expr;)*) => {\n-                $(vector_types!($id_out: $elem_ty, $len);)*\n-            }\n-        }\n-        vector_types! {\n-            t_v2f32: t_f32, 2;\n-            t_v4f32: t_f32, 4;\n-            t_v8f32: t_f32, 8;\n-            t_v16f32: t_f32, 16;\n-\n-            t_v2f64: t_f64, 2;\n-            t_v4f64: t_f64, 4;\n-            t_v8f64: t_f64, 8;\n-        }\n-\n         ifn!(\"llvm.wasm.trunc.saturate.unsigned.i32.f32\", fn(t_f32) -> t_i32);\n         ifn!(\"llvm.wasm.trunc.saturate.unsigned.i32.f64\", fn(t_f64) -> t_i32);\n         ifn!(\"llvm.wasm.trunc.saturate.unsigned.i64.f32\", fn(t_f32) -> t_i64);\n@@ -540,149 +521,51 @@ impl CodegenCx<'b, 'tcx> {\n         ifn!(\"llvm.sideeffect\", fn() -> void);\n \n         ifn!(\"llvm.powi.f32\", fn(t_f32, t_i32) -> t_f32);\n-        ifn!(\"llvm.powi.v2f32\", fn(t_v2f32, t_i32) -> t_v2f32);\n-        ifn!(\"llvm.powi.v4f32\", fn(t_v4f32, t_i32) -> t_v4f32);\n-        ifn!(\"llvm.powi.v8f32\", fn(t_v8f32, t_i32) -> t_v8f32);\n-        ifn!(\"llvm.powi.v16f32\", fn(t_v16f32, t_i32) -> t_v16f32);\n         ifn!(\"llvm.powi.f64\", fn(t_f64, t_i32) -> t_f64);\n-        ifn!(\"llvm.powi.v2f64\", fn(t_v2f64, t_i32) -> t_v2f64);\n-        ifn!(\"llvm.powi.v4f64\", fn(t_v4f64, t_i32) -> t_v4f64);\n-        ifn!(\"llvm.powi.v8f64\", fn(t_v8f64, t_i32) -> t_v8f64);\n \n         ifn!(\"llvm.pow.f32\", fn(t_f32, t_f32) -> t_f32);\n-        ifn!(\"llvm.pow.v2f32\", fn(t_v2f32, t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.pow.v4f32\", fn(t_v4f32, t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.pow.v8f32\", fn(t_v8f32, t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.pow.v16f32\", fn(t_v16f32, t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.pow.f64\", fn(t_f64, t_f64) -> t_f64);\n-        ifn!(\"llvm.pow.v2f64\", fn(t_v2f64, t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.pow.v4f64\", fn(t_v4f64, t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.pow.v8f64\", fn(t_v8f64, t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.sqrt.f32\", fn(t_f32) -> t_f32);\n-        ifn!(\"llvm.sqrt.v2f32\", fn(t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.sqrt.v4f32\", fn(t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.sqrt.v8f32\", fn(t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.sqrt.v16f32\", fn(t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.sqrt.f64\", fn(t_f64) -> t_f64);\n-        ifn!(\"llvm.sqrt.v2f64\", fn(t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.sqrt.v4f64\", fn(t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.sqrt.v8f64\", fn(t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.sin.f32\", fn(t_f32) -> t_f32);\n-        ifn!(\"llvm.sin.v2f32\", fn(t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.sin.v4f32\", fn(t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.sin.v8f32\", fn(t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.sin.v16f32\", fn(t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.sin.f64\", fn(t_f64) -> t_f64);\n-        ifn!(\"llvm.sin.v2f64\", fn(t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.sin.v4f64\", fn(t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.sin.v8f64\", fn(t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.cos.f32\", fn(t_f32) -> t_f32);\n-        ifn!(\"llvm.cos.v2f32\", fn(t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.cos.v4f32\", fn(t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.cos.v8f32\", fn(t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.cos.v16f32\", fn(t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.cos.f64\", fn(t_f64) -> t_f64);\n-        ifn!(\"llvm.cos.v2f64\", fn(t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.cos.v4f64\", fn(t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.cos.v8f64\", fn(t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.exp.f32\", fn(t_f32) -> t_f32);\n-        ifn!(\"llvm.exp.v2f32\", fn(t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.exp.v4f32\", fn(t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.exp.v8f32\", fn(t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.exp.v16f32\", fn(t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.exp.f64\", fn(t_f64) -> t_f64);\n-        ifn!(\"llvm.exp.v2f64\", fn(t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.exp.v4f64\", fn(t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.exp.v8f64\", fn(t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.exp2.f32\", fn(t_f32) -> t_f32);\n-        ifn!(\"llvm.exp2.v2f32\", fn(t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.exp2.v4f32\", fn(t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.exp2.v8f32\", fn(t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.exp2.v16f32\", fn(t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.exp2.f64\", fn(t_f64) -> t_f64);\n-        ifn!(\"llvm.exp2.v2f64\", fn(t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.exp2.v4f64\", fn(t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.exp2.v8f64\", fn(t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.log.f32\", fn(t_f32) -> t_f32);\n-        ifn!(\"llvm.log.v2f32\", fn(t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.log.v4f32\", fn(t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.log.v8f32\", fn(t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.log.v16f32\", fn(t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.log.f64\", fn(t_f64) -> t_f64);\n-        ifn!(\"llvm.log.v2f64\", fn(t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.log.v4f64\", fn(t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.log.v8f64\", fn(t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.log10.f32\", fn(t_f32) -> t_f32);\n-        ifn!(\"llvm.log10.v2f32\", fn(t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.log10.v4f32\", fn(t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.log10.v8f32\", fn(t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.log10.v16f32\", fn(t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.log10.f64\", fn(t_f64) -> t_f64);\n-        ifn!(\"llvm.log10.v2f64\", fn(t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.log10.v4f64\", fn(t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.log10.v8f64\", fn(t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.log2.f32\", fn(t_f32) -> t_f32);\n-        ifn!(\"llvm.log2.v2f32\", fn(t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.log2.v4f32\", fn(t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.log2.v8f32\", fn(t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.log2.v16f32\", fn(t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.log2.f64\", fn(t_f64) -> t_f64);\n-        ifn!(\"llvm.log2.v2f64\", fn(t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.log2.v4f64\", fn(t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.log2.v8f64\", fn(t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.fma.f32\", fn(t_f32, t_f32, t_f32) -> t_f32);\n-        ifn!(\"llvm.fma.v2f32\", fn(t_v2f32, t_v2f32, t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.fma.v4f32\", fn(t_v4f32, t_v4f32, t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.fma.v8f32\", fn(t_v8f32, t_v8f32, t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.fma.v16f32\", fn(t_v16f32, t_v16f32, t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.fma.f64\", fn(t_f64, t_f64, t_f64) -> t_f64);\n-        ifn!(\"llvm.fma.v2f64\", fn(t_v2f64, t_v2f64, t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.fma.v4f64\", fn(t_v4f64, t_v4f64, t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.fma.v8f64\", fn(t_v8f64, t_v8f64, t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.fabs.f32\", fn(t_f32) -> t_f32);\n-        ifn!(\"llvm.fabs.v2f32\", fn(t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.fabs.v4f32\", fn(t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.fabs.v8f32\", fn(t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.fabs.v16f32\", fn(t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.fabs.f64\", fn(t_f64) -> t_f64);\n-        ifn!(\"llvm.fabs.v2f64\", fn(t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.fabs.v4f64\", fn(t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.fabs.v8f64\", fn(t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.minnum.f32\", fn(t_f32, t_f32) -> t_f32);\n         ifn!(\"llvm.minnum.f64\", fn(t_f64, t_f64) -> t_f64);\n         ifn!(\"llvm.maxnum.f32\", fn(t_f32, t_f32) -> t_f32);\n         ifn!(\"llvm.maxnum.f64\", fn(t_f64, t_f64) -> t_f64);\n \n         ifn!(\"llvm.floor.f32\", fn(t_f32) -> t_f32);\n-        ifn!(\"llvm.floor.v2f32\", fn(t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.floor.v4f32\", fn(t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.floor.v8f32\", fn(t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.floor.v16f32\", fn(t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.floor.f64\", fn(t_f64) -> t_f64);\n-        ifn!(\"llvm.floor.v2f64\", fn(t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.floor.v4f64\", fn(t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.floor.v8f64\", fn(t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.ceil.f32\", fn(t_f32) -> t_f32);\n-        ifn!(\"llvm.ceil.v2f32\", fn(t_v2f32) -> t_v2f32);\n-        ifn!(\"llvm.ceil.v4f32\", fn(t_v4f32) -> t_v4f32);\n-        ifn!(\"llvm.ceil.v8f32\", fn(t_v8f32) -> t_v8f32);\n-        ifn!(\"llvm.ceil.v16f32\", fn(t_v16f32) -> t_v16f32);\n         ifn!(\"llvm.ceil.f64\", fn(t_f64) -> t_f64);\n-        ifn!(\"llvm.ceil.v2f64\", fn(t_v2f64) -> t_v2f64);\n-        ifn!(\"llvm.ceil.v4f64\", fn(t_v4f64) -> t_v4f64);\n-        ifn!(\"llvm.ceil.v8f64\", fn(t_v8f64) -> t_v8f64);\n \n         ifn!(\"llvm.trunc.f32\", fn(t_f32) -> t_f32);\n         ifn!(\"llvm.trunc.f64\", fn(t_f64) -> t_f64);"}, {"sha": "81728b8def97ff0d9ad5b9f05b63498f0eb9e005", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 55, "deletions": 78, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "patch": "@@ -1009,7 +1009,7 @@ fn generic_simd_intrinsic(\n     }\n \n     fn simd_simple_float_intrinsic(\n-        name: &str,\n+        name: Symbol,\n         in_elem: &::rustc_middle::ty::TyS<'_>,\n         in_ty: &::rustc_middle::ty::TyS<'_>,\n         in_len: u64,\n@@ -1036,93 +1036,70 @@ fn generic_simd_intrinsic(\n                 }\n             }\n         }\n-        let ety = match in_elem.kind() {\n-            ty::Float(f) if f.bit_width() == 32 => {\n-                if in_len < 2 || in_len > 16 {\n-                    return_error!(\n-                        \"unsupported floating-point vector `{}` with length `{}` \\\n-                         out-of-range [2, 16]\",\n-                        in_ty,\n-                        in_len\n-                    );\n-                }\n-                \"f32\"\n-            }\n-            ty::Float(f) if f.bit_width() == 64 => {\n-                if in_len < 2 || in_len > 8 {\n+\n+        let (elem_ty_str, elem_ty) = if let ty::Float(f) = in_elem.kind() {\n+            let elem_ty = bx.cx.type_float_from_ty(*f);\n+            match f.bit_width() {\n+                32 => (\"f32\", elem_ty),\n+                64 => (\"f64\", elem_ty),\n+                _ => {\n                     return_error!(\n-                        \"unsupported floating-point vector `{}` with length `{}` \\\n-                                   out-of-range [2, 8]\",\n-                        in_ty,\n-                        in_len\n+                        \"unsupported element type `{}` of floating-point vector `{}`\",\n+                        f.name_str(),\n+                        in_ty\n                     );\n                 }\n-                \"f64\"\n-            }\n-            ty::Float(f) => {\n-                return_error!(\n-                    \"unsupported element type `{}` of floating-point vector `{}`\",\n-                    f.name_str(),\n-                    in_ty\n-                );\n-            }\n-            _ => {\n-                return_error!(\"`{}` is not a floating-point type\", in_ty);\n             }\n+        } else {\n+            return_error!(\"`{}` is not a floating-point type\", in_ty);\n         };\n \n-        let llvm_name = &format!(\"llvm.{0}.v{1}{2}\", name, in_len, ety);\n-        let intrinsic = bx.get_intrinsic(&llvm_name);\n-        let c =\n-            bx.call(intrinsic, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None);\n+        let vec_ty = bx.type_vector(elem_ty, in_len);\n+\n+        let (intr_name, fn_ty) = match name {\n+            sym::simd_fsqrt => (\"sqrt\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fsin => (\"sin\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fcos => (\"cos\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fabs => (\"fabs\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_floor => (\"floor\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_ceil => (\"ceil\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fexp => (\"exp\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fexp2 => (\"exp2\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_flog10 => (\"log10\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_flog2 => (\"log2\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_flog => (\"log\", bx.type_func(&[vec_ty], vec_ty)),\n+            sym::simd_fpowi => (\"powi\", bx.type_func(&[vec_ty, bx.type_i32()], vec_ty)),\n+            sym::simd_fpow => (\"pow\", bx.type_func(&[vec_ty, vec_ty], vec_ty)),\n+            sym::simd_fma => (\"fma\", bx.type_func(&[vec_ty, vec_ty, vec_ty], vec_ty)),\n+            _ => return_error!(\"unrecognized intrinsic `{}`\", name),\n+        };\n+\n+        let llvm_name = &format!(\"llvm.{0}.v{1}{2}\", intr_name, in_len, elem_ty_str);\n+        let f = bx.declare_cfn(&llvm_name, fn_ty);\n+        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n+        let c = bx.call(f, &args.iter().map(|arg| arg.immediate()).collect::<Vec<_>>(), None);\n         unsafe { llvm::LLVMRustSetHasUnsafeAlgebra(c) };\n         Ok(c)\n     }\n \n-    match name {\n-        sym::simd_fsqrt => {\n-            return simd_simple_float_intrinsic(\"sqrt\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_fsin => {\n-            return simd_simple_float_intrinsic(\"sin\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_fcos => {\n-            return simd_simple_float_intrinsic(\"cos\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_fabs => {\n-            return simd_simple_float_intrinsic(\"fabs\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_floor => {\n-            return simd_simple_float_intrinsic(\"floor\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_ceil => {\n-            return simd_simple_float_intrinsic(\"ceil\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_fexp => {\n-            return simd_simple_float_intrinsic(\"exp\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_fexp2 => {\n-            return simd_simple_float_intrinsic(\"exp2\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_flog10 => {\n-            return simd_simple_float_intrinsic(\"log10\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_flog2 => {\n-            return simd_simple_float_intrinsic(\"log2\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_flog => {\n-            return simd_simple_float_intrinsic(\"log\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_fpowi => {\n-            return simd_simple_float_intrinsic(\"powi\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_fpow => {\n-            return simd_simple_float_intrinsic(\"pow\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        sym::simd_fma => {\n-            return simd_simple_float_intrinsic(\"fma\", in_elem, in_ty, in_len, bx, span, args);\n-        }\n-        _ => { /* fallthrough */ }\n+    if std::matches!(\n+        name,\n+        sym::simd_fsqrt\n+            | sym::simd_fsin\n+            | sym::simd_fcos\n+            | sym::simd_fabs\n+            | sym::simd_floor\n+            | sym::simd_ceil\n+            | sym::simd_fexp\n+            | sym::simd_fexp2\n+            | sym::simd_flog10\n+            | sym::simd_flog2\n+            | sym::simd_flog\n+            | sym::simd_fpowi\n+            | sym::simd_fpow\n+            | sym::simd_fma\n+    ) {\n+        return simd_simple_float_intrinsic(name, in_elem, in_ty, in_len, bx, span, args);\n     }\n \n     // FIXME: use:"}, {"sha": "c9be59ca46c28e38731001da5c4c3c513ccdff5d", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "patch": "@@ -694,10 +694,17 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 };\n \n                 // SIMD vectors of zero length are not supported.\n+                // Additionally, lengths are capped at 2^16 as a fixed maximum backends must\n+                // support.\n                 //\n                 // Can't be caught in typeck if the array length is generic.\n                 if e_len == 0 {\n                     tcx.sess.fatal(&format!(\"monomorphising SIMD type `{}` of zero length\", ty));\n+                } else if e_len > 65536 {\n+                    tcx.sess.fatal(&format!(\n+                        \"monomorphising SIMD type `{}` of length greater than 65536\",\n+                        ty,\n+                    ));\n                 }\n \n                 // Compute the ABI of the element type:"}, {"sha": "8abd3a98d4b80770b59a8a40255cd9f201833143", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "patch": "@@ -1098,6 +1098,28 @@ pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: LocalDefId) {\n                     .emit();\n                 return;\n             }\n+\n+            let len = if let ty::Array(_ty, c) = e.kind() {\n+                c.try_eval_usize(tcx, tcx.param_env(def.did))\n+            } else {\n+                Some(fields.len() as u64)\n+            };\n+            if let Some(len) = len {\n+                if len == 0 {\n+                    struct_span_err!(tcx.sess, sp, E0075, \"SIMD vector cannot be empty\").emit();\n+                    return;\n+                } else if len > 65536 {\n+                    struct_span_err!(\n+                        tcx.sess,\n+                        sp,\n+                        E0075,\n+                        \"SIMD vector cannot have more than 65536 elements\"\n+                    )\n+                    .emit();\n+                    return;\n+                }\n+            }\n+\n             match e.kind() {\n                 ty::Param(_) => { /* struct<T>(T, T, T, T) is ok */ }\n                 _ if e.is_machine() => { /* struct(u8, u8, u8, u8) is ok */ }"}, {"sha": "0121404c749355ffe680f9760987163903521596", "filename": "src/test/ui/simd-type-generic-monomorphisation-empty.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-empty.rs?ref=07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "patch": "@@ -0,0 +1,12 @@\n+// build-fail\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+// error-pattern:monomorphising SIMD type `Simd<0_usize>` of zero length\n+\n+#[repr(simd)]\n+struct Simd<const N: usize>([f32; N]);\n+\n+fn main() {\n+    let _ = Simd::<0>([]);\n+}"}, {"sha": "00fde199b12a27ea6a6bca710d20f374ecd42542", "filename": "src/test/ui/simd-type-generic-monomorphisation-empty.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-empty.stderr?ref=07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "patch": "@@ -0,0 +1,4 @@\n+error: monomorphising SIMD type `Simd<0_usize>` of zero length\n+\n+error: aborting due to previous error\n+"}, {"sha": "48bf8345db9776a1bd5cb68f30bd955aafe994ae", "filename": "src/test/ui/simd-type-generic-monomorphisation-oversized.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-oversized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-oversized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-oversized.rs?ref=07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "patch": "@@ -0,0 +1,12 @@\n+// build-fail\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+// error-pattern:monomorphising SIMD type `Simd<65537_usize>` of length greater than 65536\n+\n+#[repr(simd)]\n+struct Simd<const N: usize>([f32; N]);\n+\n+fn main() {\n+    let _ = Simd::<65537>([0.; 65537]);\n+}"}, {"sha": "c8dab7bfbe88346ccc4227d2d7d17bd9c93374c6", "filename": "src/test/ui/simd-type-generic-monomorphisation-oversized.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-oversized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-oversized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-oversized.stderr?ref=07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "patch": "@@ -0,0 +1,4 @@\n+error: monomorphising SIMD type `Simd<65537_usize>` of length greater than 65536\n+\n+error: aborting due to previous error\n+"}, {"sha": "269715d5e8ed0417d0839b12c17af75a24b92c89", "filename": "src/test/ui/simd-type.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/src%2Ftest%2Fui%2Fsimd-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/src%2Ftest%2Fui%2Fsimd-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type.rs?ref=07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "patch": "@@ -6,6 +6,9 @@\n #[repr(simd)]\n struct empty; //~ ERROR SIMD vector cannot be empty\n \n+#[repr(simd)]\n+struct empty2([f32; 0]); //~ ERROR SIMD vector cannot be empty\n+\n #[repr(simd)]\n struct i64f64(i64, f64); //~ ERROR SIMD vector should be homogeneous\n \n@@ -17,4 +20,10 @@ struct FooV(Foo, Foo); //~ ERROR SIMD vector element type should be a primitive\n #[repr(simd)]\n struct FooV2([Foo; 2]); //~ ERROR SIMD vector element type should be a primitive scalar (integer/float/pointer) type\n \n+#[repr(simd)]\n+struct TooBig([f32; 65537]); //~ ERROR SIMD vector cannot have more than 65536 elements\n+\n+#[repr(simd)]\n+struct JustRight([u128; 65536]);\n+\n fn main() {}"}, {"sha": "5fe12c9822769b376f9e17a83343d9619f654bee", "filename": "src/test/ui/simd-type.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/src%2Ftest%2Fui%2Fsimd-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0/src%2Ftest%2Fui%2Fsimd-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type.stderr?ref=07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "patch": "@@ -4,25 +4,37 @@ error[E0075]: SIMD vector cannot be empty\n LL | struct empty;\n    | ^^^^^^^^^^^^^\n \n-error[E0076]: SIMD vector should be homogeneous\n+error[E0075]: SIMD vector cannot be empty\n   --> $DIR/simd-type.rs:10:1\n    |\n+LL | struct empty2([f32; 0]);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0076]: SIMD vector should be homogeneous\n+  --> $DIR/simd-type.rs:13:1\n+   |\n LL | struct i64f64(i64, f64);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ SIMD elements must have the same type\n \n error[E0077]: SIMD vector element type should be a primitive scalar (integer/float/pointer) type\n-  --> $DIR/simd-type.rs:15:1\n+  --> $DIR/simd-type.rs:18:1\n    |\n LL | struct FooV(Foo, Foo);\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0077]: SIMD vector element type should be a primitive scalar (integer/float/pointer) type\n-  --> $DIR/simd-type.rs:18:1\n+  --> $DIR/simd-type.rs:21:1\n    |\n LL | struct FooV2([Foo; 2]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error[E0075]: SIMD vector cannot have more than 65536 elements\n+  --> $DIR/simd-type.rs:24:1\n+   |\n+LL | struct TooBig([f32; 65537]);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0075, E0076, E0077.\n For more information about an error, try `rustc --explain E0075`."}]}