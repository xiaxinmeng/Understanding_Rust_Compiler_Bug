{"sha": "5ab3058569245171a44283fddee6c119a31765b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYjMwNTg1NjkyNDUxNzFhNDQyODNmZGRlZTZjMTE5YTMxNzY1Yjc=", "commit": {"author": {"name": "David Szotten", "email": "davidszotten@gmail.com", "date": "2015-09-19T11:06:36Z"}, "committer": {"name": "David Szotten", "email": "davidszotten@gmail.com", "date": "2015-09-19T11:06:36Z"}, "message": "change back to anchors; divs break md", "tree": {"sha": "7146e4ab16a1c4b3a0b8737d359978f346c0ef0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7146e4ab16a1c4b3a0b8737d359978f346c0ef0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ab3058569245171a44283fddee6c119a31765b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab3058569245171a44283fddee6c119a31765b7", "html_url": "https://github.com/rust-lang/rust/commit/5ab3058569245171a44283fddee6c119a31765b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ab3058569245171a44283fddee6c119a31765b7/comments", "author": {"login": "davidszotten", "id": 412005, "node_id": "MDQ6VXNlcjQxMjAwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/412005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidszotten", "html_url": "https://github.com/davidszotten", "followers_url": "https://api.github.com/users/davidszotten/followers", "following_url": "https://api.github.com/users/davidszotten/following{/other_user}", "gists_url": "https://api.github.com/users/davidszotten/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidszotten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidszotten/subscriptions", "organizations_url": "https://api.github.com/users/davidszotten/orgs", "repos_url": "https://api.github.com/users/davidszotten/repos", "events_url": "https://api.github.com/users/davidszotten/events{/privacy}", "received_events_url": "https://api.github.com/users/davidszotten/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidszotten", "id": 412005, "node_id": "MDQ6VXNlcjQxMjAwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/412005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidszotten", "html_url": "https://github.com/davidszotten", "followers_url": "https://api.github.com/users/davidszotten/followers", "following_url": "https://api.github.com/users/davidszotten/following{/other_user}", "gists_url": "https://api.github.com/users/davidszotten/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidszotten/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidszotten/subscriptions", "organizations_url": "https://api.github.com/users/davidszotten/orgs", "repos_url": "https://api.github.com/users/davidszotten/repos", "events_url": "https://api.github.com/users/davidszotten/events{/privacy}", "received_events_url": "https://api.github.com/users/davidszotten/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7d8b418147fe46f3d0eaba295a0111394446bb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d8b418147fe46f3d0eaba295a0111394446bb0", "html_url": "https://github.com/rust-lang/rust/commit/f7d8b418147fe46f3d0eaba295a0111394446bb0"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "18ce93ea06a64b038c952e0f856a886d5196a9b4", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5ab3058569245171a44283fddee6c119a31765b7/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/5ab3058569245171a44283fddee6c119a31765b7/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=5ab3058569245171a44283fddee6c119a31765b7", "patch": "@@ -87,7 +87,8 @@ thread '<main>' panicked at 'Invalid number: 11', src/bin/panic-simple.rs:5\n Here's another example that is slightly less contrived. A program that accepts\n an integer as an argument, doubles it and prints it.\n \n-<div id=\"code-unwrap-double\">\n+<a name=\"code-unwrap-double\"></a>\n+\n ```rust,should_panic\n use std::env;\n \n@@ -98,7 +99,6 @@ fn main() {\n     println!(\"{}\", 2 * n);\n }\n ```\n-</div>\n \n If you give this program zero arguments (error 1) or if the first argument\n isn't an integer (error 2), the program will panic just like in the first\n@@ -139,7 +139,8 @@ system is an important concept because it will cause the compiler to force the\n programmer to handle that absence. Let's take a look at an example that tries\n to find a character in a string:\n \n-<div id=\"code-option-ex-string-find\">\n+<a name=\"code-option-ex-string-find\"></a>\n+\n ```rust\n // Searches `haystack` for the Unicode character `needle`. If one is found, the\n // byte offset of the character is returned. Otherwise, `None` is returned.\n@@ -152,7 +153,6 @@ fn find(haystack: &str, needle: char) -> Option<usize> {\n     None\n }\n ```\n-</div>\n \n Notice that when this function finds a matching character, it doen't just\n return the `offset`. Instead, it returns `Some(offset)`. `Some` is a variant or\n@@ -186,7 +186,8 @@ But wait, what about `unwrap` used in [`unwrap-double`](#code-unwrap-double)?\n There was no case analysis there! Instead, the case analysis was put inside the\n `unwrap` method for you. You could define it yourself if you want:\n \n-<div id=\"code-option-def-unwrap\">\n+<a name=\"code-option-def-unwrap\"></a>\n+\n ```rust\n enum Option<T> {\n     None,\n@@ -203,7 +204,6 @@ impl<T> Option<T> {\n     }\n }\n ```\n-</div>\n \n The `unwrap` method *abstracts away the case analysis*. This is precisely the thing\n that makes `unwrap` ergonomic to use. Unfortunately, that `panic!` means that\n@@ -253,7 +253,8 @@ option is `None`, in which case, just return `None`.\n Rust has parametric polymorphism, so it is very easy to define a combinator\n that abstracts this pattern:\n \n-<div id=\"code-option-map\">\n+<a name=\"code-option-map\"></a>\n+\n ```rust\n fn map<F, T, A>(option: Option<T>, f: F) -> Option<A> where F: FnOnce(T) -> A {\n     match option {\n@@ -262,7 +263,6 @@ fn map<F, T, A>(option: Option<T>, f: F) -> Option<A> where F: FnOnce(T) -> A {\n     }\n }\n ```\n-</div>\n \n Indeed, `map` is [defined as a method][2] on `Option<T>` in the standard library.\n \n@@ -394,14 +394,14 @@ remove choices because they will panic if `Option<T>` is `None`.\n The `Result` type is also\n [defined in the standard library][6]:\n \n-<div id=\"code-result-def-1\">\n+<a name=\"code-result-def-1\"></a>\n+\n ```rust\n enum Result<T, E> {\n     Ok(T),\n     Err(E),\n }\n ```\n-</div>\n \n The `Result` type is a richer version of `Option`. Instead of expressing the\n possibility of *absence* like `Option` does, `Result` expresses the possibility\n@@ -672,7 +672,8 @@ with both an `Option` and a `Result`, the solution is *usually* to convert the\n (from `env::args()`) means the user didn't invoke the program correctly. We\n could just use a `String` to describe the error. Let's try:\n \n-<div id=\"code-error-double-string\">\n+<a name=\"code-error-double-string\"></a>\n+\n ```rust\n use std::env;\n \n@@ -689,7 +690,6 @@ fn main() {\n     }\n }\n ```\n-</div>\n \n There are a couple new things in this example. The first is the use of the\n [`Option::ok_or`](../std/option/enum.Option.html#method.ok_or)\n@@ -906,7 +906,8 @@ seen above.\n \n Here is a simplified definition of a `try!` macro:\n \n-<div id=\"code-try-def-simple\">\n+<a nama name=\"code-try-def-simple\"></a>\n+\n ```rust\n macro_rules! try {\n     ($e:expr) => (match $e {\n@@ -915,7 +916,6 @@ macro_rules! try {\n     });\n }\n ```\n-</div>\n \n (The [real definition](../std/macro.try!.html) is a bit more\n sophisticated. We will address that later.)\n@@ -1168,13 +1168,13 @@ The `std::convert::From` trait is\n [defined in the standard\n library](../std/convert/trait.From.html):\n \n-<div id=\"code-from-def\">\n+<a name=\"code-from-def\"></a>\n+\n ```rust\n trait From<T> {\n     fn from(T) -> Self;\n }\n ```\n-</div>\n \n Deliciously simple, yes? `From` is very useful because it gives us a generic\n way to talk about conversion *from* a particular type `T` to some other type\n@@ -1250,7 +1250,8 @@ macro_rules! try {\n This is not its real definition. Its real definition is\n [in the standard library](../std/macro.try!.html):\n \n-<div id=\"code-try-def\">\n+<a name=\"code-try-def\"></a>\n+\n ```rust\n macro_rules! try {\n     ($e:expr) => (match $e {\n@@ -1259,7 +1260,6 @@ macro_rules! try {\n     });\n }\n ```\n-</div>\n \n There's one tiny but powerful change: the error value is passed through\n `From::from`. This makes the `try!` macro a lot more powerful because it gives"}]}