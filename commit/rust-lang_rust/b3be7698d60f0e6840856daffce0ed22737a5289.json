{"sha": "b3be7698d60f0e6840856daffce0ed22737a5289", "node_id": "C_kwDOAAsO6NoAKGIzYmU3Njk4ZDYwZjBlNjg0MDg1NmRhZmZjZTBlZDIyNzM3YTUyODk", "commit": {"author": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-21T10:36:16Z"}, "committer": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-22T18:19:19Z"}, "message": "Refactor additional diagnostics in `rustc_attr`", "tree": {"sha": "994ff8b39e387781325b7dba0eefbb0a63ebd5b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/994ff8b39e387781325b7dba0eefbb0a63ebd5b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3be7698d60f0e6840856daffce0ed22737a5289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3be7698d60f0e6840856daffce0ed22737a5289", "html_url": "https://github.com/rust-lang/rust/commit/b3be7698d60f0e6840856daffce0ed22737a5289", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3be7698d60f0e6840856daffce0ed22737a5289/comments", "author": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40c5184eec0c607e856fba385d186684fdd25412", "url": "https://api.github.com/repos/rust-lang/rust/commits/40c5184eec0c607e856fba385d186684fdd25412", "html_url": "https://github.com/rust-lang/rust/commit/40c5184eec0c607e856fba385d186684fdd25412"}], "stats": {"total": 144, "additions": 106, "deletions": 38}, "files": [{"sha": "b752daecc882048cac08dd0f7d71184f81295ce7", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 18, "deletions": 38, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b3be7698d60f0e6840856daffce0ed22737a5289/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3be7698d60f0e6840856daffce0ed22737a5289/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=b3be7698d60f0e6840856daffce0ed22737a5289", "patch": "@@ -645,25 +645,18 @@ pub fn eval_condition(\n                     NestedMetaItem::Literal(Lit { span, .. })\n                     | NestedMetaItem::MetaItem(MetaItem { span, .. }),\n                 ] => {\n-                    sess.span_diagnostic\n-                        .struct_span_err(*span, \"expected a version literal\")\n-                        .emit();\n+                    sess.emit_err(session_diagnostics::ExpectedVersionLiteral { span: *span });\n                     return false;\n                 }\n                 [..] => {\n-                    sess.span_diagnostic\n-                        .struct_span_err(cfg.span, \"expected single version literal\")\n-                        .emit();\n+                    sess.emit_err(session_diagnostics::ExpectedSingleVersionLiteral {\n+                        span: cfg.span,\n+                    });\n                     return false;\n                 }\n             };\n             let Some(min_version) = parse_version(min_version.as_str(), false) else {\n-                sess.span_diagnostic\n-                    .struct_span_warn(\n-                        *span,\n-                        \"unknown version literal format, assuming it refers to a future version\",\n-                    )\n-                    .emit();\n+                sess.emit_warning(session_diagnostics::UnknownVersionLiteral { span: *span });\n                 return false;\n             };\n             let rustc_version = parse_version(env!(\"CFG_RELEASE\"), true).unwrap();\n@@ -706,13 +699,9 @@ pub fn eval_condition(\n                     }),\n                 sym::not => {\n                     if mis.len() != 1 {\n-                        struct_span_err!(\n-                            sess.span_diagnostic,\n-                            cfg.span,\n-                            E0536,\n-                            \"expected 1 cfg-pattern\"\n-                        )\n-                        .emit();\n+                        sess.emit_err(session_diagnostics::ExpectedOneCfgPattern {\n+                            span: cfg.span,\n+                        });\n                         return false;\n                     }\n \n@@ -738,21 +727,16 @@ pub fn eval_condition(\n                     })\n                 }\n                 _ => {\n-                    struct_span_err!(\n-                        sess.span_diagnostic,\n-                        cfg.span,\n-                        E0537,\n-                        \"invalid predicate `{}`\",\n-                        pprust::path_to_string(&cfg.path)\n-                    )\n-                    .emit();\n+                    sess.emit_err(session_diagnostics::InvalidPredicate {\n+                        span: cfg.span,\n+                        predicate: pprust::path_to_string(&cfg.path),\n+                    });\n                     false\n                 }\n             }\n         }\n         ast::MetaItemKind::Word | MetaItemKind::NameValue(..) if cfg.path.segments.len() != 1 => {\n-            sess.span_diagnostic\n-                .span_err(cfg.path.span, \"`cfg` predicate key must be an identifier\");\n+            sess.emit_err(session_diagnostics::CfgPredicateIdentifier { span: cfg.path.span });\n             true\n         }\n         MetaItemKind::NameValue(ref lit) if !lit.kind.is_str() => {\n@@ -868,14 +852,10 @@ where\n                             }\n                             sym::suggestion => {\n                                 if !sess.features_untracked().deprecated_suggestion {\n-                                    let mut diag = sess.struct_span_err(\n-                                        mi.span,\n-                                        \"suggestions on deprecated items are unstable\",\n-                                    );\n-                                    if sess.is_nightly_build() {\n-                                        diag.help(\"add `#![feature(deprecated_suggestion)]` to the crate root\");\n-                                    }\n-                                    diag.note(\"see #94785 for more details\").emit();\n+                                    sess.emit_err(session_diagnostics::DeprecatedItemSuggestion {\n+                                        span: mi.span,\n+                                        is_nightly: sess.is_nightly_build().then_some(()),\n+                                    });\n                                 }\n \n                                 if !get(mi, &mut suggestion) {\n@@ -921,7 +901,7 @@ where\n             }\n \n             if note.is_none() {\n-                struct_span_err!(diagnostic, attr.span, E0543, \"missing 'note'\").emit();\n+                sess.emit_err(session_diagnostics::MissingNote { span: attr.span });\n                 continue;\n             }\n         }"}, {"sha": "4b9f1541f4733eaee09a0b7219e58da3114f4b78", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b3be7698d60f0e6840856daffce0ed22737a5289/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3be7698d60f0e6840856daffce0ed22737a5289/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=b3be7698d60f0e6840856daffce0ed22737a5289", "patch": "@@ -79,6 +79,68 @@ pub(crate) struct SoftNoArgs {\n     pub span: Span,\n }\n \n+#[derive(SessionDiagnostic)]\n+#[error(attr::expected_version_literal)]\n+pub(crate) struct ExpectedVersionLiteral {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::expected_single_version_literal)]\n+pub(crate) struct ExpectedSingleVersionLiteral {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[warning(attr::unknown_version_literal)]\n+pub(crate) struct UnknownVersionLiteral {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::expected_one_cfg_pattern, code = \"E0536\")]\n+pub(crate) struct ExpectedOneCfgPattern {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::invalid_predicate, code = \"E0537\")]\n+pub(crate) struct InvalidPredicate {\n+    #[primary_span]\n+    pub span: Span,\n+\n+    pub predicate: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::cfg_predicate_identifier)]\n+pub(crate) struct CfgPredicateIdentifier {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::deprecated_item_suggestion)]\n+#[note]\n+pub(crate) struct DeprecatedItemSuggestion {\n+    #[primary_span]\n+    pub span: Span,\n+\n+    #[help]\n+    pub is_nightly: Option<()>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::missing_note, code = \"E0543\")]\n+pub(crate) struct MissingNote {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n #[derive(SessionDiagnostic)]\n #[error(attr::invalid_issue_string, code = \"E0545\")]\n pub(crate) struct InvalidIssueString {"}, {"sha": "378377ed8660de2e209aee012ac0394529d3d2ba", "filename": "compiler/rustc_error_messages/locales/en-US/attr.ftl", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b3be7698d60f0e6840856daffce0ed22737a5289/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b3be7698d60f0e6840856daffce0ed22737a5289/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl?ref=b3be7698d60f0e6840856daffce0ed22737a5289", "patch": "@@ -55,3 +55,29 @@ attr_rustc_allowed_unstable_pairing =\n \n attr_soft_no_args =\n     `soft` should not have any arguments\n+\n+attr_expected_version_literal =\n+    expected a version literal\n+\n+attr_expected_single_version_literal =\n+    expected single version literal\n+\n+attr_unknown_version_literal =\n+    unknown version literal format, assuming it refers to a future version\n+\n+attr_expected_one_cfg_pattern =\n+    expected 1 cfg-pattern\n+\n+attr_invalid_predicate =\n+    invalid predicate `{$predicate}`\n+\n+attr_cfg_predicate_identifier =\n+    `cfg` predicate key must be an identifier\n+\n+attr_deprecated_item_suggestion =\n+    suggestions on deprecated items are unstable\n+    .help = add `#![feature(deprecated_suggestion)]` to the crate root\n+    .note = see #94785 for more details\n+\n+attr_missing_note =\n+    missing 'note'"}]}