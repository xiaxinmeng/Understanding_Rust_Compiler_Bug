{"sha": "0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNWYyOGM0YjBjNzhjMDMwOTU2YWZlNzdiN2E1YzBjM2UzM2VmNWI=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-06-10T23:05:51Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-06-25T09:16:59Z"}, "message": "Added `cargo dev setup git-hook`", "tree": {"sha": "02ce45765b6286d7991ad67d7e61815fff505b3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ce45765b6286d7991ad67d7e61815fff505b3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmDVnwsACgkQHKDfKvWd\naKU3Wg//dZc5eNgbb4EPRq/g4t2ue8jk4EhRY/KMs6t2Ol0gICvoH5P6gDxhfJwi\n1dNc7pdzzIriwyDwM8ixCXYbcByPP5TmeVHCvdXYdeeOS6nCIYhRpX+onXxpWOWn\nr0o6gFTLoEjtp5q8g3OpuHcWKI0C4MqaYr0t7D54h9fhAionWI/gNa6jrgZanik7\nOkQxfsBbO6U3gSJyfNMiyWxzESRRrCDnPRrfOQWtRx0CDu4Yv27jWL68D7lYBusj\nRgJ+lQkEusyEymcdjKFh69QR4rHt3Vzr3cf3LHwW7sbANQQ3Eabk9MDiL6uX0Fu3\nSVQ87pNUBjx2aVufWyynILZGz+iyCyas1sEIuGFJaNtLcv3TEM5g10H8iq96cW2/\n5iJfgDEtn6wD4BtRWzuOr7K1UjJE55GqPwILf4jJbOlCH4JY1FF7BL9CJmK49afc\n+lrcoeau7yZwuJnPg3JqyJSOEYpFAayXPFX/EZQa0sUfzqbefQvYeCmaXZI/LJPc\nfQFMY6PD4P6vczrgAREQPc3rll3uwIcFPt9Wa9kfVLguIIeuZ+VPpesHXZe9ULmt\nokmcgOzlwUDPO8/T3bSMv6c1+6ssSnf6keltynMs89XnsSzYQ2cTZfp4Nxve2mRv\nh1s35194GPsLaGfM8kF4at1e2Q0UwWR/a4fOonuxooEVQ4Wih34=\n=V71W\n-----END PGP SIGNATURE-----", "payload": "tree 02ce45765b6286d7991ad67d7e61815fff505b3a\nparent 0941d9f14d9c446f9d7a465485652a3dc131de1e\nauthor xFrednet <xFrednet@gmail.com> 1623366351 +0200\ncommitter flip1995 <philipp.krones@embecosm.com> 1624612619 +0200\n\nAdded `cargo dev setup git-hook`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b", "html_url": "https://github.com/rust-lang/rust/commit/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0941d9f14d9c446f9d7a465485652a3dc131de1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0941d9f14d9c446f9d7a465485652a3dc131de1e", "html_url": "https://github.com/rust-lang/rust/commit/0941d9f14d9c446f9d7a465485652a3dc131de1e"}], "stats": {"total": 140, "additions": 126, "deletions": 14}, "files": [{"sha": "72bdaf8d59282f89f39f63142a9191325f4c224f", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b", "patch": "@@ -14,9 +14,9 @@ use walkdir::WalkDir;\n \n pub mod bless;\n pub mod fmt;\n-pub mod setup;\n pub mod new_lint;\n pub mod serve;\n+pub mod setup;\n pub mod stderr_length_check;\n pub mod update_lints;\n "}, {"sha": "b20c40bc556fef4ee8bb597bdb5cb60312adf2f4", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b", "patch": "@@ -3,7 +3,7 @@\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n use clap::{App, Arg, ArgMatches, SubCommand};\n-use clippy_dev::{bless, fmt, setup, new_lint, serve, stderr_length_check, update_lints};\n+use clippy_dev::{bless, fmt, new_lint, serve, setup, stderr_length_check, update_lints};\n fn main() {\n     let matches = get_clap_config();\n \n@@ -36,7 +36,11 @@ fn main() {\n         (\"limit_stderr_length\", _) => {\n             stderr_length_check::check();\n         },\n-        (\"ide_setup\", Some(matches)) => setup::intellij::run(matches.value_of(\"rustc-repo-path\")),\n+        (\"setup\", Some(sub_command)) => match sub_command.subcommand() {\n+            (\"intellij\", Some(matches)) => setup::intellij::run(matches.value_of(\"rustc-repo-path\")),\n+            (\"git-hook\", Some(matches)) => setup::git_hook::run(matches.is_present(\"force-override\")),\n+            _ => {},\n+        },\n         (\"serve\", Some(matches)) => {\n             let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n             let lint = matches.value_of(\"lint\");\n@@ -140,16 +144,31 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                 .about(\"Ensures that stderr files do not grow longer than a certain amount of lines.\"),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"ide_setup\")\n-                .about(\"Alter dependencies so Intellij Rust can find rustc internals\")\n-                .arg(\n-                    Arg::with_name(\"rustc-repo-path\")\n-                        .long(\"repo-path\")\n-                        .short(\"r\")\n-                        .help(\"The path to a rustc repo that will be used for setting the dependencies\")\n-                        .takes_value(true)\n-                        .value_name(\"path\")\n-                        .required(true),\n+            SubCommand::with_name(\"setup\")\n+                .about(\"Support for setting up your personal development environment\")\n+                .subcommand(\n+                    SubCommand::with_name(\"intellij\")\n+                        .about(\"Alter dependencies so Intellij Rust can find rustc internals\")\n+                        .arg(\n+                            Arg::with_name(\"rustc-repo-path\")\n+                                .long(\"repo-path\")\n+                                .short(\"r\")\n+                                .help(\"The path to a rustc repo that will be used for setting the dependencies\")\n+                                .takes_value(true)\n+                                .value_name(\"path\")\n+                                .required(true),\n+                        ),\n+                )\n+                .subcommand(\n+                    SubCommand::with_name(\"git-hook\")\n+                        .about(\"Add a pre-commit git hook that formats your code to make it look pretty\")\n+                        .arg(\n+                            Arg::with_name(\"force-override\")\n+                                .long(\"force-override\")\n+                                .short(\"f\")\n+                                .help(\"Forces the override of an existing git pre-commit hook\")\n+                                .required(false),\n+                        ),\n                 ),\n         )\n         .subcommand("}, {"sha": "741738e37fb8dda1af8c83335cfe77f3d98ccb8b", "filename": "clippy_dev/src/setup/git_hook.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs?ref=0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b", "patch": "@@ -0,0 +1,61 @@\n+use std::fs;\n+use std::path::Path;\n+\n+/// Rusts setup uses `git rev-parse --git-common-dir` to get the root directory of the repo.\n+/// I've decided against this for the sake of simplicity and to make sure that it doesn't install\n+/// the hook if `clippy_dev` would be used in the rust tree. The hook also references this tool\n+/// for formatting and should therefor only be used in a normal clone of clippy\n+const REPO_GIT_DIR: &str = \".git\";\n+const HOOK_SOURCE_PATH: &str = \"util/etc/pre-commit.sh\";\n+const HOOK_TARGET_PATH: &str = \".git/hooks/pre-commit\";\n+\n+pub fn run(force_override: bool) {\n+    if let Err(_) = check_precondition(force_override) {\n+        return;\n+    }\n+\n+    // So a little bit of a funny story. Git on unix requires the pre-commit file\n+    // to have the `execute` permission to be set. The Rust functions for modifying\n+    // these flags doesn't seem to work when executed with normal user permissions.\n+    //\n+    // However, there is a little hack that is also being used by Rust itself in their\n+    // setup script. Git saves the `execute` flag when syncing files. This means\n+    // that we can check in a file with execution permissions and the sync it to create\n+    // a file with the flag set. We then copy this file here. The copy function will also\n+    // include the `execute` permission.\n+    match fs::copy(HOOK_SOURCE_PATH, HOOK_TARGET_PATH) {\n+        Ok(_) => println!(\"Git hook successfully installed :)\"),\n+        Err(err) => println!(\n+            \"error: unable to copy `{}` to `{}` ({})\",\n+            HOOK_SOURCE_PATH, HOOK_TARGET_PATH, err\n+        ),\n+    }\n+}\n+\n+fn check_precondition(force_override: bool) -> Result<(), ()> {\n+    // Make sure that we can find the git repository\n+    let git_path = Path::new(REPO_GIT_DIR);\n+    if !git_path.exists() || !git_path.is_dir() {\n+        println!(\"error: clippy_dev was unable to find the `.git` directory\");\n+        return Err(());\n+    }\n+\n+    // Make sure that we don't override an existing hook by accident\n+    let path = Path::new(HOOK_TARGET_PATH);\n+    if path.exists() {\n+        if !force_override {\n+            println!(\"warn: The found `.git` directory already has a commit hook\");\n+        }\n+\n+        if force_override || super::ask_yes_no_question(\"Do you want to override it?\") {\n+            if fs::remove_file(path).is_err() {\n+                println!(\"error: unable to delete existing pre-commit git hook\");\n+                return Err(());\n+            }\n+        } else {\n+            return Err(());\n+        }\n+    }\n+\n+    Ok(())\n+}"}, {"sha": "5db545c0ff136290d4927ca1708690099c78ae0b", "filename": "clippy_dev/src/setup/mod.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fsetup%2Fmod.rs?ref=0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b", "patch": "@@ -1 +1,30 @@\n-pub mod intellij;\n\\ No newline at end of file\n+use std::io::{self, Write};\n+pub mod git_hook;\n+pub mod intellij;\n+\n+/// This function will asked the user the given question and wait for user input\n+/// either `true` for yes and `false` for no.\n+fn ask_yes_no_question(question: &str) -> bool {\n+    // This code was proudly stolen from rusts bootstrapping tool.\n+\n+    fn ask_with_result(question: &str) -> io::Result<bool> {\n+        let mut input = String::new();\n+        Ok(loop {\n+            print!(\"{}: [y/N] \", question);\n+            io::stdout().flush()?;\n+            input.clear();\n+            io::stdin().read_line(&mut input)?;\n+            break match input.trim().to_lowercase().as_str() {\n+                \"y\" | \"yes\" => true,\n+                \"n\" | \"no\" | \"\" => false,\n+                _ => {\n+                    println!(\"error: unrecognized option '{}'\", input.trim());\n+                    println!(\"note: press Ctrl+C to exit\");\n+                    continue;\n+                },\n+            };\n+        })\n+    }\n+\n+    ask_with_result(question).unwrap_or_default()\n+}"}, {"sha": "3c76e924b347a864a1b04f22820bb41596295db1", "filename": "util/etc/pre-commit.sh", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b/util%2Fetc%2Fpre-commit.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b/util%2Fetc%2Fpre-commit.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fetc%2Fpre-commit.sh?ref=0a5f28c4b0c78c030956afe77b7a5c0c3e33ef5b", "patch": "@@ -0,0 +1,3 @@\n+#!/bin/sh\n+\n+cargo dev fmt"}]}