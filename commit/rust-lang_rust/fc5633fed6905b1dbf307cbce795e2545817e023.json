{"sha": "fc5633fed6905b1dbf307cbce795e2545817e023", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNTYzM2ZlZDY5MDViMWRiZjMwN2NiY2U3OTVlMjU0NTgxN2UwMjM=", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2021-09-04T15:28:55Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2021-09-04T15:28:55Z"}, "message": "Make fields on `AbstractConst` private", "tree": {"sha": "42fdf2bf7c49ce7c42b17149c4e7d1c977d7f195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42fdf2bf7c49ce7c42b17149c4e7d1c977d7f195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc5633fed6905b1dbf307cbce795e2545817e023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5633fed6905b1dbf307cbce795e2545817e023", "html_url": "https://github.com/rust-lang/rust/commit/fc5633fed6905b1dbf307cbce795e2545817e023", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc5633fed6905b1dbf307cbce795e2545817e023/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e4061819fa00c74c704507a72d4ee3ca60d60e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4061819fa00c74c704507a72d4ee3ca60d60e5", "html_url": "https://github.com/rust-lang/rust/commit/6e4061819fa00c74c704507a72d4ee3ca60d60e5"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "e424a51d01c9742411245d36f7f8acf433715162", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc5633fed6905b1dbf307cbce795e2545817e023/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5633fed6905b1dbf307cbce795e2545817e023/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=fc5633fed6905b1dbf307cbce795e2545817e023", "patch": "@@ -153,7 +153,7 @@ where\n         tcx: TyCtxt<'tcx>,\n         ct: AbstractConst<'tcx>,\n     ) -> ControlFlow<V::BreakTy> {\n-        const_evaluatable::walk_abstract_const(tcx, ct, |node| match node.root(tcx, ct.substs) {\n+        const_evaluatable::walk_abstract_const(tcx, ct, |node| match node.root(tcx) {\n             ACNode::Leaf(leaf) => self.visit_const(leaf),\n             ACNode::Cast(_, _, ty) => self.visit_ty(ty),\n             ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {"}, {"sha": "1adcda41102d2c8164c395afb4fdda474dc81462", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fc5633fed6905b1dbf307cbce795e2545817e023/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5633fed6905b1dbf307cbce795e2545817e023/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=fc5633fed6905b1dbf307cbce795e2545817e023", "patch": "@@ -16,7 +16,7 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::abstract_const::{Node, NodeId, NotConstEvaluatable};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::mir::{self, Rvalue, StatementKind, TerminatorKind};\n-use rustc_middle::ty::subst::{GenericArg, Subst, SubstsRef};\n+use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n@@ -80,7 +80,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n                     Concrete,\n                 }\n                 let mut failure_kind = FailureKind::Concrete;\n-                walk_abstract_const::<!, _>(tcx, ct, |node| match node.root(tcx, ct.substs) {\n+                walk_abstract_const::<!, _>(tcx, ct, |node| match node.root(tcx) {\n                     Node::Leaf(leaf) => {\n                         if leaf.has_infer_types_or_consts() {\n                             failure_kind = FailureKind::MentionsInfer;\n@@ -185,8 +185,8 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n pub struct AbstractConst<'tcx> {\n     // FIXME: Consider adding something like `IndexSlice`\n     // and use this here.\n-    pub inner: &'tcx [Node<'tcx>],\n-    pub substs: SubstsRef<'tcx>,\n+    inner: &'tcx [Node<'tcx>],\n+    substs: SubstsRef<'tcx>,\n }\n \n impl<'tcx> AbstractConst<'tcx> {\n@@ -216,10 +216,10 @@ impl<'tcx> AbstractConst<'tcx> {\n     }\n \n     #[inline]\n-    pub fn root(self, tcx: TyCtxt<'tcx>, substs: &[GenericArg<'tcx>]) -> Node<'tcx> {\n-        let mut node = self.inner.last().copied().unwrap();\n+    pub fn root(self, tcx: TyCtxt<'tcx>) -> Node<'tcx> {\n+        let node = self.inner.last().copied().unwrap();\n         if let Node::Leaf(leaf) = node {\n-            node = Node::Leaf(leaf.subst(tcx, substs));\n+            return Node::Leaf(leaf.subst(tcx, self.substs));\n         }\n         node\n     }\n@@ -589,7 +589,7 @@ where\n         f: &mut dyn FnMut(AbstractConst<'tcx>) -> ControlFlow<R>,\n     ) -> ControlFlow<R> {\n         f(ct)?;\n-        let root = ct.root(tcx, ct.substs);\n+        let root = ct.root(tcx);\n         match root {\n             Node::Leaf(_) => ControlFlow::CONTINUE,\n             Node::Binop(_, l, r) => {\n@@ -617,22 +617,22 @@ pub(super) fn try_unify<'tcx>(\n     // We substitute generics repeatedly to allow AbstractConsts to unify where a\n     // ConstKind::Unevalated could be turned into an AbstractConst that would unify e.g.\n     // Param(N) should unify with Param(T), substs: [Unevaluated(\"T2\", [Unevaluated(\"T3\", [Param(N)])])]\n-    while let Node::Leaf(a_ct) = a.root(tcx, a.substs) {\n+    while let Node::Leaf(a_ct) = a.root(tcx) {\n         match AbstractConst::from_const(tcx, a_ct) {\n             Ok(Some(a_act)) => a = a_act,\n             Ok(None) => break,\n             Err(_) => return true,\n         }\n     }\n-    while let Node::Leaf(b_ct) = b.root(tcx, b.substs) {\n+    while let Node::Leaf(b_ct) = b.root(tcx) {\n         match AbstractConst::from_const(tcx, b_ct) {\n             Ok(Some(b_act)) => b = b_act,\n             Ok(None) => break,\n             Err(_) => return true,\n         }\n     }\n \n-    match (a.root(tcx, a.substs), b.root(tcx, b.substs)) {\n+    match (a.root(tcx), b.root(tcx)) {\n         (Node::Leaf(a_ct), Node::Leaf(b_ct)) => {\n             if a_ct.ty != b_ct.ty {\n                 return false;"}, {"sha": "4eaa3ea47325fb692b69ecdf1f5e1994dc013e00", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc5633fed6905b1dbf307cbce795e2545817e023/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5633fed6905b1dbf307cbce795e2545817e023/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=fc5633fed6905b1dbf307cbce795e2545817e023", "patch": "@@ -839,7 +839,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             use rustc_middle::mir::abstract_const::Node;\n             if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv.shrink()) {\n                 const_evaluatable::walk_abstract_const(self.tcx, ct, |node| {\n-                    match node.root(self.tcx, ct.substs) {\n+                    match node.root(self.tcx) {\n                         Node::Leaf(leaf) => self.visit_const(leaf),\n                         Node::Cast(_, _, ty) => self.visit_ty(ty),\n                         Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {"}]}