{"sha": "1ef32e4096bb813edee300a5fa89c355959ed878", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZjMyZTQwOTZiYjgxM2VkZWUzMDBhNWZhODljMzU1OTU5ZWQ4Nzg=", "commit": {"author": {"name": "Rotem Yaari", "email": "vmalloc@gmail.com", "date": "2018-10-08T08:43:13Z"}, "committer": {"name": "Rotem Yaari", "email": "vmalloc@gmail.com", "date": "2018-10-08T10:07:21Z"}, "message": "Improve diagnostics in case of lifetime elision (closes #3284)", "tree": {"sha": "bbdebb23f2b46b73d3ef4c618400ed40b78625a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbdebb23f2b46b73d3ef4c618400ed40b78625a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ef32e4096bb813edee300a5fa89c355959ed878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef32e4096bb813edee300a5fa89c355959ed878", "html_url": "https://github.com/rust-lang/rust/commit/1ef32e4096bb813edee300a5fa89c355959ed878", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ef32e4096bb813edee300a5fa89c355959ed878/comments", "author": {"login": "vmalloc", "id": 28710, "node_id": "MDQ6VXNlcjI4NzEw", "avatar_url": "https://avatars.githubusercontent.com/u/28710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmalloc", "html_url": "https://github.com/vmalloc", "followers_url": "https://api.github.com/users/vmalloc/followers", "following_url": "https://api.github.com/users/vmalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vmalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmalloc/subscriptions", "organizations_url": "https://api.github.com/users/vmalloc/orgs", "repos_url": "https://api.github.com/users/vmalloc/repos", "events_url": "https://api.github.com/users/vmalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vmalloc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vmalloc", "id": 28710, "node_id": "MDQ6VXNlcjI4NzEw", "avatar_url": "https://avatars.githubusercontent.com/u/28710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vmalloc", "html_url": "https://github.com/vmalloc", "followers_url": "https://api.github.com/users/vmalloc/followers", "following_url": "https://api.github.com/users/vmalloc/following{/other_user}", "gists_url": "https://api.github.com/users/vmalloc/gists{/gist_id}", "starred_url": "https://api.github.com/users/vmalloc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vmalloc/subscriptions", "organizations_url": "https://api.github.com/users/vmalloc/orgs", "repos_url": "https://api.github.com/users/vmalloc/repos", "events_url": "https://api.github.com/users/vmalloc/events{/privacy}", "received_events_url": "https://api.github.com/users/vmalloc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02705d4cf5334844545aff99418d10644447aabd", "url": "https://api.github.com/repos/rust-lang/rust/commits/02705d4cf5334844545aff99418d10644447aabd", "html_url": "https://github.com/rust-lang/rust/commit/02705d4cf5334844545aff99418d10644447aabd"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "81d37404d775de84cb8e4fb032c5e269ac98bf4c", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef32e4096bb813edee300a5fa89c355959ed878/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef32e4096bb813edee300a5fa89c355959ed878/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=1ef32e4096bb813edee300a5fa89c355959ed878", "patch": "@@ -152,7 +152,7 @@ fn check_fn_inner<'a, 'tcx>(\n             cx,\n             NEEDLESS_LIFETIMES,\n             span,\n-            \"explicit lifetimes given in parameter types where they could be elided\",\n+            \"explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\",\n         );\n     }\n     report_extra_lifetimes(cx, decl, generics);"}, {"sha": "c7ed303b43b8e47af90b41828451f6521541ca75", "filename": "tests/ui/lifetimes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ef32e4096bb813edee300a5fa89c355959ed878/tests%2Fui%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef32e4096bb813edee300a5fa89c355959ed878/tests%2Fui%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.rs?ref=1ef32e4096bb813edee300a5fa89c355959ed878", "patch": "@@ -170,5 +170,11 @@ fn test<'a>(x: &'a [u8]) -> u8 {\n     *y\n }\n \n+// #3284 - Give a hint regarding lifetime in return type\n+\n+struct Cow<'a> { x: &'a str, }\n+fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> { unimplemented!() }\n+\n+\n fn main() {\n }"}, {"sha": "46dbf6cce0943978e7a135191657be4cca00f48d", "filename": "tests/ui/lifetimes.stderr", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1ef32e4096bb813edee300a5fa89c355959ed878/tests%2Fui%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ef32e4096bb813edee300a5fa89c355959ed878/tests%2Fui%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.stderr?ref=1ef32e4096bb813edee300a5fa89c355959ed878", "patch": "@@ -1,90 +1,96 @@\n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/lifetimes.rs:17:1\n    |\n 17 | fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/lifetimes.rs:19:1\n    |\n 19 | fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/lifetimes.rs:27:1\n    |\n 27 | fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 { x }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/lifetimes.rs:39:1\n    |\n 39 | fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> { Ok(x) }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/lifetimes.rs:42:1\n    |\n 42 | fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> where T: Copy { Ok(x) }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/lifetimes.rs:48:1\n    |\n 48 | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/lifetimes.rs:62:1\n    |\n 62 | / fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n 63 | |     where for<'x> F: Fn(Lt<'x, I>) -> Lt<'x, I>\n 64 | | { unreachable!() }\n    | |__________________^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/lifetimes.rs:87:5\n    |\n 87 |     fn self_and_out<'s>(&'s self) -> &'s u8 { &self.x }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/lifetimes.rs:91:5\n    |\n 91 |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n    --> $DIR/lifetimes.rs:107:1\n     |\n 107 | fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str { unimplemented!() }\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n    --> $DIR/lifetimes.rs:127:1\n     |\n 127 | fn trait_obj_elided2<'a>(_arg: &'a Drop) -> &'a str { unimplemented!() }\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n    --> $DIR/lifetimes.rs:131:1\n     |\n 131 | fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str { unimplemented!() }\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n    --> $DIR/lifetimes.rs:142:1\n     |\n 142 | fn named_input_elided_output<'a>(_arg: &'a str) -> &str { unimplemented!() }\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n    --> $DIR/lifetimes.rs:146:1\n     |\n 146 | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() }\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+   --> $DIR/lifetimes.rs:176:1\n+    |\n+176 | fn out_return_type_lts<'a>(e: &'a str) -> Cow<'a> { unimplemented!() }\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 15 previous errors\n "}]}