{"sha": "a54b5c7a645ead203d77e78245362f9e0f00dd3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NGI1YzdhNjQ1ZWFkMjAzZDc3ZTc4MjQ1MzYyZjllMGYwMGRkM2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-12T08:19:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-12T08:19:35Z"}, "message": "Auto merge of #57388 - euclio:runmake-explicit-ignore, r=kennytm\n\nuse ignore directives for run-make tests\n\nThis makes the tests easier to read, and makes it possible to tell which\ntests aren't being run on the host platform.\n\nFixes #56704.", "tree": {"sha": "392e43417405a4a42a3d21aa53f9aeb084972c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/392e43417405a4a42a3d21aa53f9aeb084972c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a54b5c7a645ead203d77e78245362f9e0f00dd3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a54b5c7a645ead203d77e78245362f9e0f00dd3c", "html_url": "https://github.com/rust-lang/rust/commit/a54b5c7a645ead203d77e78245362f9e0f00dd3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a54b5c7a645ead203d77e78245362f9e0f00dd3c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75f9159009cd0814bd6b5c3bf6a5406de7c4fe8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/75f9159009cd0814bd6b5c3bf6a5406de7c4fe8d", "html_url": "https://github.com/rust-lang/rust/commit/75f9159009cd0814bd6b5c3bf6a5406de7c4fe8d"}, {"sha": "f15d20c1f78c220d0790b13e2af30670053ee0d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f15d20c1f78c220d0790b13e2af30670053ee0d8", "html_url": "https://github.com/rust-lang/rust/commit/f15d20c1f78c220d0790b13e2af30670053ee0d8"}], "stats": {"total": 424, "additions": 127, "deletions": 297}, "files": [{"sha": "c524610bf5c07a8cda52f93b937976ca737b0e8f", "filename": "src/test/run-make-fulldeps/c-dynamic-dylib/Makefile", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-dylib%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,14 +1,12 @@\n -include ../tools.mk\n \n+# ignore-macos\n+#\n # This hits an assertion in the linker on older versions of osx apparently\n-ifeq ($(shell uname),Darwin)\n-all:\n-\techo ignored\n-else\n+\n all: $(call DYLIB,cfoo)\n \t$(RUSTC) foo.rs -C prefer-dynamic\n \t$(RUSTC) bar.rs\n \t$(call RUN,bar)\n \t$(call REMOVE_DYLIBS,cfoo)\n \t$(call FAIL,bar)\n-endif"}, {"sha": "91343e73e15197af1b4bf715219c62272a1c9aba", "filename": "src/test/run-make-fulldeps/c-dynamic-rlib/Makefile", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-dynamic-rlib%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,17 +1,15 @@\n -include ../tools.mk\n \n+# ignore-macos\n+#\n+# This hits an assertion in the linker on older versions of osx apparently\n+\n # This overrides the LD_LIBRARY_PATH for RUN\n TARGET_RPATH_DIR:=$(TARGET_RPATH_DIR):$(TMPDIR)\n \n-# This hits an assertion in the linker on older versions of osx apparently\n-ifeq ($(shell uname),Darwin)\n-all:\n-\techo ignored\n-else\n all: $(call DYLIB,cfoo)\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n \t$(call RUN,bar)\n \t$(call REMOVE_DYLIBS,cfoo)\n \t$(call FAIL,bar)\n-endif"}, {"sha": "687b59ac00e8f64d4e9642a9e8b307d0412ed6f9", "filename": "src/test/run-make-fulldeps/c-link-to-rust-staticlib/Makefile", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-staticlib%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,16 +1,12 @@\n -include ../tools.mk\n \n-# FIXME: ignore freebsd\n-ifneq ($(shell uname),FreeBSD)\n+# ignore-freebsd\n+# FIXME\n+\n all:\n \t$(RUSTC) foo.rs\n \t$(CC) bar.c $(call STATICLIB,foo) $(call OUT_EXE,bar) \\\n \t\t$(EXTRACFLAGS) $(EXTRACXXFLAGS)\n \t$(call RUN,bar)\n \trm $(call STATICLIB,foo)\n \t$(call RUN,bar)\n-\n-else\n-all:\n-\n-endif"}, {"sha": "23491d814d01db94666ef6210b3c086053615456", "filename": "src/test/run-make-fulldeps/cdylib-fewer-symbols/Makefile", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-fewer-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-fewer-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-fewer-symbols%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -3,13 +3,10 @@\n \n -include ../tools.mk\n \n+# ignore-windows\n # FIXME: The __rdl_ and __rust_ symbol still remains, no matter using MSVC or GNU\n # See https://github.com/rust-lang/rust/pull/46207#issuecomment-347561753\n-ifdef IS_WINDOWS\n-all:\n-\ttrue\n-else\n+\n all:\n \t$(RUSTC) foo.rs\n \tnm -g \"$(call DYLIB,foo)\" | $(CGREP) -v __rdl_ __rde_ __rg_ __rust_\n-endif"}, {"sha": "d7d078e56b2e7a55cad6923ae9c0a06668b4c5c2", "filename": "src/test/run-make-fulldeps/compiler-rt-works-on-mingw/Makefile", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcompiler-rt-works-on-mingw%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,17 +1,9 @@\n -include ../tools.mk\n \n-ifneq (,$(findstring MINGW,$(UNAME)))\n-ifndef IS_MSVC\n+# only-mingw\n+\n all:\n \t$(CXX) foo.cpp -c -o $(TMPDIR)/foo.o\n \t$(AR) crus $(TMPDIR)/libfoo.a $(TMPDIR)/foo.o\n \t$(RUSTC) foo.rs -lfoo -lstdc++\n \t$(call RUN,foo)\n-else\n-all:\n-\n-endif\n-else\n-all:\n-\n-endif"}, {"sha": "339a751ff96befd2e799c9fa1fc3c73306b7cbca", "filename": "src/test/run-make-fulldeps/dep-info-spaces/Makefile", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info-spaces%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,9 +1,9 @@\n -include ../tools.mk\n \n-# FIXME: ignore freebsd/windows\n-# (windows: see `../dep-info/Makefile`)\n-ifneq ($(shell uname),FreeBSD)\n-ifndef IS_WINDOWS\n+# ignore-windows\n+# ignore-freebsd\n+# FIXME: (windows: see `../dep-info/Makefile`)\n+\n all:\n \tcp lib.rs $(TMPDIR)/\n \tcp 'foo foo.rs' $(TMPDIR)/\n@@ -17,12 +17,3 @@ all:\n \tpwd\n \t$(MAKE) -drf Makefile.foo\n \trm $(TMPDIR)/done && exit 1 || exit 0\n-else\n-all:\n-\n-endif\n-\n-else\n-all:\n-\n-endif"}, {"sha": "afb9db177cf03dc1ef8c7bdf2af6c5c8a71d2966", "filename": "src/test/run-make-fulldeps/dep-info/Makefile", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fdep-info%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,11 +1,11 @@\n -include ../tools.mk\n \n-# FIXME: ignore freebsd/windows\n-# on windows `rustc --dep-info` produces Makefile dependency with\n+# ignore-windows\n+# ignore-freebsd\n+# FIXME: on windows `rustc --dep-info` produces Makefile dependency with\n # windows native paths (e.g. `c:\\path\\to\\libfoo.a`)\n # but msys make seems to fail to recognize such paths, so test fails.\n-ifneq ($(shell uname),FreeBSD)\n-ifndef IS_WINDOWS\n+\n all:\n \tcp *.rs $(TMPDIR)\n \t$(RUSTC) --emit dep-info,link --crate-type=lib $(TMPDIR)/lib.rs\n@@ -23,12 +23,3 @@ all:\n \trm $(TMPDIR)/bar.rs\n \tcp $(TMPDIR)/lib2.rs $(TMPDIR)/lib.rs\n \t$(MAKE) -drf Makefile.foo\n-else\n-all:\n-\n-endif\n-\n-else\n-all:\n-\n-endif"}, {"sha": "604fc4688f5321919a5f176763926733a7c55e69", "filename": "src/test/run-make-fulldeps/emit-stack-sizes/Makefile", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Femit-stack-sizes%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,31 +1,13 @@\n -include ../tools.mk\n \n+# ignore-windows\n+# ignore-macos\n+# min-llvm-version 6.0\n+#\n # This feature only works when the output object format is ELF so we ignore\n # macOS and Windows\n-ifdef IS_WINDOWS\n-# Do nothing on Windows.\n-all:\n-\texit 0\n-else ifneq (,$(filter $(TARGET),i686-apple-darwin x86_64-apple-darwin))\n-# Do nothing on macOS.\n-all:\n-\texit 0\n-else\n+\n # check that the .stack_sizes section is generated\n-# this test requires LLVM >= 6.0.0\n-vers = $(shell $(RUSTC) -Vv)\n-ifneq (,$(findstring LLVM version: 3,$(vers)))\n-all:\n-\texit 0\n-else ifneq (,$(findstring LLVM version: 4,$(vers)))\n-all:\n-\texit 0\n-else ifneq (,$(findstring LLVM version: 5,$(vers)))\n-all:\n-\texit 0\n-else\n all:\n \t$(RUSTC) -C opt-level=3 -Z emit-stack-sizes --emit=obj foo.rs\n \tsize -A $(TMPDIR)/foo.o | $(CGREP) .stack_sizes\n-endif\n-endif"}, {"sha": "a3d0190eed6331225986609b74b727f79ff661e0", "filename": "src/test/run-make-fulldeps/fpic/Makefile", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Ffpic%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Ffpic%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ffpic%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,13 +1,10 @@\n -include ../tools.mk\n \n+# ignore-windows\n+# ignore-macos\n+\n # Test for #39529.\n # `-z text` causes ld to error if there are any non-PIC sections\n \n-ifeq ($(UNAME),Darwin)\n-all:\n-else ifdef IS_WINDOWS\n-all:\n-else\n all:\n \t$(RUSTC) hello.rs -C link-args=-Wl,-z,text\n-endif"}, {"sha": "ce79cec67dc37bd944fd072d2793c9616e2a786d", "filename": "src/test/run-make-fulldeps/include_bytes_deps/Makefile", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,20 +1,11 @@\n -include ../tools.mk\n \n-# FIXME: ignore freebsd/windows\n-# on windows `rustc --dep-info` produces Makefile dependency with\n+# ignore-windows\n+# ignore-freebsd\n+# FIXME: on windows `rustc --dep-info` produces Makefile dependency with\n # windows native paths (e.g. `c:\\path\\to\\libfoo.a`)\n # but msys make seems to fail to recognize such paths, so test fails.\n-ifneq ($(shell uname),FreeBSD)\n-ifndef IS_WINDOWS\n+\n all:\n \t$(RUSTC) --emit dep-info main.rs\n \t$(CGREP) \"input.txt\" \"input.bin\" \"input.md\" < $(TMPDIR)/main.d\n-else\n-all:\n-\n-endif\n-\n-else\n-all:\n-\n-endif"}, {"sha": "483091ad4ee8b983c90d39d5061661735f792342", "filename": "src/test/run-make-fulldeps/intrinsic-unreachable/Makefile", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fintrinsic-unreachable%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,15 +1,11 @@\n -include ../tools.mk\n \n-ifndef IS_WINDOWS\n-# The assembly for exit-unreachable.rs should be shorter because it's missing\n-# (at minimum) a return instruction.\n+# ignore-windows\n+#\n+# Because of Windows exception handling, the code is not necessarily any shorter.\n+# https://github.com/llvm-mirror/llvm/commit/64b2297786f7fd6f5fa24cdd4db0298fbf211466\n \n all:\n \t$(RUSTC) -O --emit asm exit-ret.rs\n \t$(RUSTC) -O --emit asm exit-unreachable.rs\n \ttest `wc -l < $(TMPDIR)/exit-unreachable.s` -lt `wc -l < $(TMPDIR)/exit-ret.s`\n-else\n-# Because of Windows exception handling, the code is not necessarily any shorter.\n-# https://github.com/llvm-mirror/llvm/commit/64b2297786f7fd6f5fa24cdd4db0298fbf211466\n-all:\n-endif"}, {"sha": "f7ad238af14ccc8865e90007d8fa29a7ca3879f5", "filename": "src/test/run-make-fulldeps/issue-24445/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fissue-24445%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fissue-24445%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-24445%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,12 +1,10 @@\n -include ../tools.mk\n \n-ifeq ($(UNAME),Linux)\n+# only-linux\n+\n all:\n \t$(RUSTC) foo.rs\n \t$(CC) foo.c -lfoo -L $(TMPDIR) -Wl,--gc-sections -lpthread -ldl -o $(TMPDIR)/foo\n \t$(call RUN,foo)\n \t$(CC) foo.c -lfoo -L $(TMPDIR) -Wl,--gc-sections -lpthread -ldl -pie -fPIC -o $(TMPDIR)/foo\n \t$(call RUN,foo)\n-else\n-all:\n-endif"}, {"sha": "dd023c32ba28f7a16e6ea4e0de7a8d996c3426cd", "filename": "src/test/run-make-fulldeps/issue-26006/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fissue-26006%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fissue-26006%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-26006%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,8 +1,9 @@\n -include ../tools.mk\n \n+# ignore-windows\n+\n OUT := $(TMPDIR)/out\n \n-ifndef IS_WINDOWS\n all: time\n \n time: libc\n@@ -13,6 +14,3 @@ time: libc\n libc:\n \tmkdir -p $(OUT)/libc\n \t$(RUSTC) in/libc/lib.rs --crate-name=libc -Cmetadata=foo -o $(OUT)/libc/liblibc.rlib\n-else\n-all:\n-endif"}, {"sha": "dc1fbb4cefb8450d97ae4d91f41a4747d2931dae", "filename": "src/test/run-make-fulldeps/issue-36710/Makefile", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-36710%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,21 +1,12 @@\n -include ../tools.mk\n \n-ifeq (musl,$(findstring musl,$(TARGET)))\n-all: skip\n-else\n-all: test\n-endif\n+# ignore-musl\n \n-test: foo\n+all: foo\n \t$(call RUN,foo)\n \n-skip:\n-\techo \"expected failure\"\n-\n foo: foo.rs $(call NATIVE_STATICLIB,foo)\n \t$(RUSTC) $< -lfoo $(EXTRACXXFLAGS)\n \n $(TMPDIR)/libfoo.o: foo.cpp\n \t$(call COMPILE_OBJ_CXX,$@,$<)\n-\n-.PHONY: all test skip"}, {"sha": "c405d5c74d7afcaf252f779c148302ff305c57b5", "filename": "src/test/run-make-fulldeps/issue-37839/Makefile", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fissue-37839%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fissue-37839%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-37839%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,12 +1,8 @@\n -include ../tools.mk\n \n-ifeq ($(findstring stage1,$(RUST_BUILD_STAGE)),stage1)\n-# ignore stage1\n-all:\n+# ignore-stage1\n \n-else\n all:\n \t$(RUSTC) a.rs && $(RUSTC) b.rs\n \t$(BARE_RUSTC) c.rs -L dependency=$(TMPDIR) --extern b=$(TMPDIR)/libb.rlib \\\n \t\t--out-dir=$(TMPDIR)\n-endif"}, {"sha": "df58d4f5d9486c5a58c5077cc2245961f0704938", "filename": "src/test/run-make-fulldeps/issue-37893/Makefile", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fissue-37893%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fissue-37893%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-37893%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,10 +1,6 @@\n -include ../tools.mk\n \n-ifeq ($(findstring stage1,$(RUST_BUILD_STAGE)),stage1)\n-# ignore stage1\n-all:\n+# ignore-stage1\n \n-else\n all:\n \t$(RUSTC) a.rs && $(RUSTC) b.rs && $(RUSTC) c.rs\n-endif"}, {"sha": "3027ee578c79f20a2aaaca5616967105497b6ba5", "filename": "src/test/run-make-fulldeps/issue-51671/Makefile", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fissue-51671%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fissue-51671%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-51671%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,13 +1,9 @@\n -include ../tools.mk\n \n-ifdef IS_WINDOWS\n-# Do nothing on MSVC.\n-all:\n-\texit 0\n-else\n+# ignore-windows\n+\n all:\n \t$(RUSTC) --emit=obj app.rs\n \tnm $(TMPDIR)/app.o | $(CGREP) rust_begin_unwind\n \tnm $(TMPDIR)/app.o | $(CGREP) rust_eh_personality\n \tnm $(TMPDIR)/app.o | $(CGREP) rust_oom\n-endif"}, {"sha": "f31036ffa19591cea06c7bcb087ce9d8fc3b9292", "filename": "src/test/run-make-fulldeps/libs-search-path/Makefile", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Flibs-search-path%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Flibs-search-path%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibs-search-path%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,16 +1,10 @@\n -include ../tools.mk\n \n-ifeq ($(if $(IS_WINDOWS),$(IS_MSVC),no),)\n+# only-mingw\n \n all: empty.rs\n \tcp -r $(shell cygpath -u $(shell $(RUSTC) --print sysroot)) $(TMPDIR)/sysroot\n \t$(RUSTC) --target $(TARGET) --sysroot $(TMPDIR)/sysroot -L$(TMPDIR)/obj -Z print-link-args empty.rs | $(CGREP) 'lib\\\\crt2.o'\n \tmkdir -p $(TMPDIR)/obj\n \tmv $(TMPDIR)/sysroot/lib/rustlib/$(TARGET)/lib/crt2.o $(TMPDIR)/obj/crt2.o\n \t$(RUSTC) --target $(TARGET) --sysroot $(TMPDIR)/sysroot -L$(TMPDIR)/obj -Z print-link-args empty.rs | $(CGREP) 'obj\\\\crt2.o'\n-\n-else\n-\n-all:\n-\n-endif"}, {"sha": "7c5ea7e402e5647bc28ce0aac4e90dcfb3121eb7", "filename": "src/test/run-make-fulldeps/libs-through-symlinks/Makefile", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Flibs-through-symlinks%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Flibs-through-symlinks%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibs-through-symlinks%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,8 +1,6 @@\n -include ../tools.mk\n \n-ifdef IS_WINDOWS\n-all:\n-else\n+# ignore-windows\n \n NAME := $(shell $(RUSTC) --print file-names foo.rs)\n \n@@ -11,4 +9,3 @@ all:\n \t$(RUSTC) foo.rs -o $(TMPDIR)/outdir/$(NAME)\n \tln -nsf outdir/$(NAME) $(TMPDIR)\n \tRUST_LOG=rustc_metadata::loader $(RUSTC) bar.rs\n-endif"}, {"sha": "3fffd1e7aa2a2475110c3ae639fd0052e2ca5d9d", "filename": "src/test/run-make-fulldeps/linker-output-non-utf8/Makefile", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Flinker-output-non-utf8%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Flinker-output-non-utf8%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flinker-output-non-utf8%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -2,16 +2,16 @@\n \n # Make sure we don't ICE if the linker prints a non-UTF-8 error message.\n \n-# Ignore Windows and Apple\n-\n+# ignore-windows\n+#\n # This does not work in its current form on windows, possibly due to\n # gcc bugs or something about valid Windows paths.  See issue #29151\n # for more information.\n-ifndef IS_WINDOWS\n \n+# ignore-macos\n+#\n # This also does not work on Apple APFS due to the filesystem requiring\n # valid UTF-8 paths.\n-ifneq ($(shell uname),Darwin)\n \n # The zzz it to allow humans to tab complete or glob this thing.\n bad_dir := $(TMPDIR)/zzz$$'\\xff'\n@@ -21,12 +21,3 @@ all:\n \tmkdir $(bad_dir)\n \tmv $(TMPDIR)/liblibrary.a $(bad_dir)\n \tLIBRARY_PATH=$(bad_dir) $(RUSTC) exec.rs 2>&1 | $(CGREP) this_symbol_not_defined\n-else\n-all:\n-\n-endif\n-\n-else\n-all:\n-\n-endif"}, {"sha": "621027470040d7a829fd1a9f67485c44e4b841a6", "filename": "src/test/run-make-fulldeps/min-global-align/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fmin-global-align%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fmin-global-align%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fmin-global-align%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,5 +1,7 @@\n -include ../tools.mk\n \n+# only-linux\n+\n # This tests ensure that global variables respect the target minimum alignment.\n # The three bools `STATIC_BOOL`, `STATIC_MUT_BOOL`, and `CONST_BOOL` all have\n # type-alignment of 1, but some targets require greater global alignment.\n@@ -8,7 +10,6 @@ SRC = min_global_align.rs\n LL = $(TMPDIR)/min_global_align.ll\n \n all:\n-ifeq ($(UNAME),Linux)\n # Most targets are happy with default alignment -- take i686 for example.\n ifeq ($(filter x86,$(LLVM_COMPONENTS)),x86)\n \t$(RUSTC) --target=i686-unknown-linux-gnu --emit=llvm-ir $(SRC)\n@@ -19,4 +20,3 @@ ifeq ($(filter systemz,$(LLVM_COMPONENTS)),systemz)\n \t$(RUSTC) --target=s390x-unknown-linux-gnu --emit=llvm-ir $(SRC)\n \t[ \"$$(grep -c 'align 2' \"$(LL)\")\" -eq \"3\" ]\n endif\n-endif"}, {"sha": "1567b325d4fe19f3624692f79bf6efa7ebf9eec4", "filename": "src/test/run-make-fulldeps/no-integrated-as/Makefile", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fno-integrated-as%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fno-integrated-as%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fno-integrated-as%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,7 +1,8 @@\n -include ../tools.mk\n \n+# only-linux\n+# only-x86_64\n+\n all:\n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n \t$(RUSTC) hello.rs -C no_integrated_as\n \t$(call RUN,hello)\n-endif"}, {"sha": "e358314c0d09ec55d84992c364dab09bba9bf3d7", "filename": "src/test/run-make-fulldeps/pgo-gen-lto/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen-lto%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,10 +1,10 @@\n -include ../tools.mk\n \n+# ignore-windows\n+\n all:\n ifeq ($(PROFILER_SUPPORT),1)\n-ifndef IS_WINDOWS\n \t$(RUSTC) -Copt-level=3 -Clto=fat -Z pgo-gen=\"$(TMPDIR)/test.profraw\" test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)/test.profraw\" ] || (echo \"No .profraw file\"; exit 1)\n endif\n-endif"}, {"sha": "1961dff8d783edad8fe9de3579adc2931d9fc45c", "filename": "src/test/run-make-fulldeps/pgo-gen/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-gen%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,10 +1,10 @@\n -include ../tools.mk\n \n+# ignore-windows\n+\n all:\n ifeq ($(PROFILER_SUPPORT),1)\n-ifndef IS_WINDOWS\n \t$(RUSTC) -g -Z pgo-gen=\"$(TMPDIR)/test.profraw\" test.rs\n \t$(call RUN,test) || exit 1\n \t[ -e \"$(TMPDIR)/test.profraw\" ] || (echo \"No .profraw file\"; exit 1)\n endif\n-endif"}, {"sha": "3589f98e7e5c8c0efe4ff827ce9b239d81692e2a", "filename": "src/test/run-make-fulldeps/prune-link-args/Makefile", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fprune-link-args%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fprune-link-args%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprune-link-args%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,11 +1,9 @@\n -include ../tools.mk\n-ifdef IS_WINDOWS\n-# ignore windows\n-RUSTC_FLAGS =\n-else\n+\n+# ignore-windows\n+\n # Notice the space in the end, this emulates the output of pkg-config\n RUSTC_FLAGS = -C link-args=\"-lc \"\n-endif\n \n all:\n \t$(RUSTC) $(RUSTC_FLAGS) empty.rs"}, {"sha": "aacb5acb7a3af3ee735123ea62f3752d3eb6aa2f", "filename": "src/test/run-make-fulldeps/relro-levels/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Frelro-levels%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Frelro-levels%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frelro-levels%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,9 +1,10 @@\n -include ../tools.mk\n \n+# only-linux\n+#\n # This tests the different -Zrelro-level values, and makes sure that they work properly.\n \n all:\n-ifeq ($(UNAME),Linux)\n \t# Ensure that binaries built with the full relro level links them with both\n \t# RELRO and BIND_NOW for doing eager symbol resolving.\n \t$(RUSTC) -Zrelro-level=full hello.rs\n@@ -18,4 +19,3 @@ ifeq ($(UNAME),Linux)\n \t# enabled by default.\n \t$(RUSTC) -Zrelro-level=off hello.rs\n \t! readelf -l $(TMPDIR)/hello | grep -q GNU_RELRO\n-endif"}, {"sha": "f95fa88d41cf7d016b19dfcdbd243a0bc4b5e874", "filename": "src/test/run-make-fulldeps/rustdoc-io-error/Makefile", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-io-error%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-io-error%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-io-error%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -4,10 +4,10 @@\n # while generating files. Ideally this would be a rustdoc-ui test, so we could\n # verify the error message as well.\n \n-OUTPUT_DIR := \"$(TMPDIR)/rustdoc-io-error\"\n+# ignore-windows\n+# The test uses `chmod`.\n \n-# Ignore Windows: the test uses `chmod`.\n-ifndef IS_WINDOWS\n+OUTPUT_DIR := \"$(TMPDIR)/rustdoc-io-error\"\n \n # This test operates by creating a temporary directory and modifying its\n # permissions so that it is not writable. We have to take special care to set\n@@ -18,8 +18,3 @@ all:\n \t-$(shell $(RUSTDOC) -o $(OUTPUT_DIR) foo.rs)\n \tchmod u+w $(OUTPUT_DIR)\n \texit $($(.SHELLSTATUS) -eq 1)\n-\n-else\n-all:\n-\n-endif"}, {"sha": "0f3c18f9293f556196e994dbc4f0e552daf14022", "filename": "src/test/run-make-fulldeps/sanitizer-leak/Makefile", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,16 +1,12 @@\n -include ../tools.mk\n \n+# only-linux\n+# only-x86_64\n+# ignore-test\n # FIXME(#46126) ThinLTO for libstd broke this test\n-ifeq (1,0)\n+\n all:\n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n ifdef SANITIZER_SUPPORT\n \t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | $(CGREP) librustc_lsan\n \t$(TMPDIR)/leak 2>&1 | $(CGREP) 'detected memory leaks'\n endif\n-endif\n-\n-else\n-all:\n-endif\n-"}, {"sha": "718d9637ea06d313917192b38ab72acb11f2399d", "filename": "src/test/run-make-fulldeps/sanitizer-memory/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,10 +1,10 @@\n -include ../tools.mk\n \n+# only-linux\n+# only-x86_64\n+\n all:\n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n ifdef SANITIZER_SUPPORT\n \t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | $(CGREP) librustc_msan\n \t$(TMPDIR)/uninit 2>&1 | $(CGREP) use-of-uninitialized-value\n endif\n-endif\n-"}, {"sha": "d99470e30d7eea507a0c7e43ba8e9ca85a480323", "filename": "src/test/run-make-fulldeps/symbol-visibility/Makefile", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsymbol-visibility%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,12 +1,9 @@\n include ../tools.mk\n \n-ifdef IS_WINDOWS\n-# Do nothing on MSVC.\n+# ignore-windows\n+#\n # On MINGW the --version-script, --dynamic-list, and --retain-symbol args don't\n # seem to work reliably.\n-all:\n-\texit 0\n-else\n \n NM=nm -D\n CDYLIB_NAME=liba_cdylib.so\n@@ -89,4 +86,3 @@ all:\n \t# Check that an executable does not export any dynamic symbols\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_c_function_from_rlib)\" -eq \"0\" ]\n \t[ \"$$($(NM) $(TMPDIR)/$(EXE_NAME) | grep -c public_rust_function_from_exe)\" -eq \"0\" ]\n-endif"}, {"sha": "e5061fddead0b10115cc8c893b5ba5a754408323", "filename": "src/test/run-make-fulldeps/symlinked-extern/Makefile", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fsymlinked-extern%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fsymlinked-extern%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsymlinked-extern%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,16 +1,11 @@\n -include ../tools.mk\n \n-# ignore windows: `ln` is actually `cp` on msys.\n-ifndef IS_WINDOWS\n+# ignore-windows\n+# `ln` is actually `cp` on msys.\n \n all:\n \t$(RUSTC) foo.rs\n \tmkdir -p $(TMPDIR)/other\n \tln -nsf $(TMPDIR)/libfoo.rlib $(TMPDIR)/other\n \t$(RUSTC) bar.rs -L $(TMPDIR)\n \t$(RUSTC) baz.rs --extern foo=$(TMPDIR)/other/libfoo.rlib  -L $(TMPDIR)\n-\n-else\n-all:\n-\n-endif"}, {"sha": "618ae87bfe3c55f8aebf77dfdd7d4f32af04e5ab", "filename": "src/test/run-make-fulldeps/symlinked-libraries/Makefile", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fsymlinked-libraries%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fsymlinked-libraries%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsymlinked-libraries%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,15 +1,10 @@\n -include ../tools.mk\n \n-# ignore windows: `ln` is actually `cp` on msys.\n-ifndef IS_WINDOWS\n+# ignore-windows\n+# `ln` is actually `cp` on msys.\n \n all:\n \t$(RUSTC) foo.rs -C prefer-dynamic\n \tmkdir -p $(TMPDIR)/other\n \tln -nsf $(TMPDIR)/$(call DYLIB_GLOB,foo) $(TMPDIR)/other\n \t$(RUSTC) bar.rs -L $(TMPDIR)/other\n-\n-else\n-all:\n-\n-endif"}, {"sha": "996989ce4d893cb12ae4e55f54f069ec864e77ac", "filename": "src/test/run-make-fulldeps/symlinked-rlib/Makefile", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fsymlinked-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fsymlinked-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsymlinked-rlib%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,14 +1,9 @@\n -include ../tools.mk\n \n-# ignore windows: `ln` is actually `cp` on msys.\n-ifndef IS_WINDOWS\n+# ignore-windows\n+# `ln` is actually `cp` on msys.\n \n all:\n \t$(RUSTC) foo.rs --crate-type=rlib -o $(TMPDIR)/foo.xxx\n \tln -nsf $(TMPDIR)/foo.xxx $(TMPDIR)/libfoo.rlib\n \t$(RUSTC) bar.rs -L $(TMPDIR)\n-\n-else\n-all:\n-\n-endif"}, {"sha": "d152e9f76d3d6d2dd96b7aa054aedf27ac10d79a", "filename": "src/test/run-make-fulldeps/target-cpu-native/Makefile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Ftarget-cpu-native%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Ftarget-cpu-native%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftarget-cpu-native%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,18 +1,18 @@\n -include ../tools.mk\n \n+# only-linux\n+# only-x86_64\n+#\n # I *really* don't want to deal with a cross-platform way to compare file sizes,\n # tests in `make` sort of are awful\n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n+\n all: $(TMPDIR)/out.log\n \t# Make sure no warnings about \"unknown CPU `native`\" were emitted\n \tif [ \"$$(wc -c $(TMPDIR)/out.log | cut -d' ' -f 1)\" = \"0\" ]; then \\\n \t  echo no warnings generated; \\\n \telse \\\n \t  exit 1; \\\n \tfi\n-else\n-all: $(TMPDIR)/out.log\n-endif\n \n \n $(TMPDIR)/out.log:"}, {"sha": "3976da3113190f7fba9e13818455585b2a59da00", "filename": "src/test/run-make-fulldeps/use-extern-for-plugins/Makefile", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fuse-extern-for-plugins%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fuse-extern-for-plugins%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fuse-extern-for-plugins%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,8 +1,9 @@\n -include ../tools.mk\n \n-SKIP_OS := 'FreeBSD OpenBSD Bitrig SunOS'\n-\n-ifneq ($(UNAME),$(findstring $(UNAME),$(SKIP_OS)))\n+# ignore-freebsd\n+# ignore-openbsd\n+# ignore-bitrig\n+# ignore-sunos\n \n HOST := $(shell $(RUSTC) -vV | grep 'host:' | sed 's/host: //')\n ifeq ($(findstring i686,$(HOST)),i686)\n@@ -15,7 +16,3 @@ all:\n \t$(RUSTC) foo.rs -C extra-filename=-host\n \t$(RUSTC) bar.rs -C extra-filename=-targ --target $(TARGET)\n \t$(RUSTC) baz.rs --extern a=$(TMPDIR)/liba-targ.rlib --target $(TARGET)\n-else\n-# FreeBSD, OpenBSD, and Bitrig support only x86_64 architecture for now\n-all:\n-endif"}, {"sha": "8d913e3993502fec1b65dd6b30f90571284f4e85", "filename": "src/test/run-make-fulldeps/used/Makefile", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fused%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fused%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fused%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,11 +1,7 @@\n -include ../tools.mk\n \n-ifdef IS_WINDOWS\n-# Do nothing on MSVC.\n-all:\n-\texit 0\n-else\n+# ignore-windows\n+\n all:\n \t$(RUSTC) -C opt-level=3 --emit=obj used.rs\n \tnm $(TMPDIR)/used.o | $(CGREP) FOO\n-endif"}, {"sha": "c09ce8109e6fdb0791b67da7d8b75b2dea1d5384", "filename": "src/test/run-make-fulldeps/windows-spawn/Makefile", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fwindows-spawn%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make-fulldeps%2Fwindows-spawn%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fwindows-spawn%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,14 +1,8 @@\n -include ../tools.mk\n \n-ifdef IS_WINDOWS\n+# only-windows\n \n all:\n \t$(RUSTC) -o \"$(TMPDIR)/hopefullydoesntexist bar.exe\" hello.rs\n \t$(RUSTC) spawn.rs\n \t$(TMPDIR)/spawn.exe\n-\n-else\n-\n-all:\n-\n-endif"}, {"sha": "6791c8ccdf138382f8405062878d54d6d8fb3874", "filename": "src/test/run-make/thumb-none-cortex-m/Makefile", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -10,8 +10,10 @@\n # - thumbv7em-none-eabihf (Bare Cortex-M4F, M7F, FPU, hardfloat)\n # - thumbv7m-none-eabi (Bare Cortex-M3)\n \n-# See https://stackoverflow.com/questions/7656425/makefile-ifeq-logical-or\n-ifneq (,$(filter $(TARGET),thumbv6m-none-eabi thumbv7em-none-eabi thumbv7em-none-eabihf thumbv7m-none-eabi))\n+# only-thumbv6m-none-eabi\n+# only-thumbv7em-none-eabi\n+# only-thumbv7em-none-eabihf\n+# only-thumbv7m-none-eabi\n \n # For cargo setting\n RUSTC := $(RUSTC_ORIGINAL)\n@@ -36,8 +38,3 @@ all:\n \t# These come from the top-level Rust workspace, that this crate is not a\n \t# member of, but Cargo tries to load the workspace `Cargo.toml` anyway.\n \tcd $(WORK_DIR) && cd $(CRATE) && env RUSTC_BOOTSTRAP=1 $(CARGO) build --target $(TARGET) -v\n-else\n-\n-all:\n-\n-endif"}, {"sha": "cb1ff8591221e7ac4fb2172102488172c94f3ab9", "filename": "src/test/run-make/thumb-none-qemu/Makefile", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fthumb-none-qemu%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fthumb-none-qemu%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fthumb-none-qemu%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,11 +1,12 @@\n -include ../../run-make-fulldeps/tools.mk\n \n+# only-thumbv7m-none-eabi\n+# only-thumbv6m-none-eabi\n+\n # How to run this\n # $ ./x.py clean\n # $ ./x.py test --target thumbv7m-none-eabi src/test/run-make\n \n-ifneq (,$(filter $(TARGET),thumbv6m-none-eabi thumbv7m-none-eabi))\n-\n # For cargo setting\n export RUSTC := $(RUSTC_ORIGINAL)\n export LD_LIBRARY_PATH := $(HOST_RPATH_DIR)\n@@ -25,6 +26,3 @@ unexport CXX\n \n all:\n \tbash script.sh\n-else\n-all:\n-endif"}, {"sha": "7c64dc58bf791a7561ff5fe2e1da263a0b67f2d5", "filename": "src/test/run-make/wasm-custom-section/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-section%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,10 +1,8 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-ifeq ($(TARGET),wasm32-unknown-unknown)\n+# only-wasm32\n+\n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown\n \t$(RUSTC) bar.rs -C lto -O --target wasm32-unknown-unknown\n \t$(NODE) foo.js $(TMPDIR)/bar.wasm\n-else\n-all:\n-endif"}, {"sha": "fec7643d20c537151e3c3a6aaafad8047893c239", "filename": "src/test/run-make/wasm-custom-sections-opt/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-custom-sections-opt%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,9 +1,7 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-ifeq ($(TARGET),wasm32-unknown-unknown)\n+# only-wasm32\n+\n all:\n \t$(RUSTC) foo.rs -O --target wasm32-unknown-unknown\n \t$(NODE) foo.js $(TMPDIR)/foo.wasm\n-else\n-all:\n-endif"}, {"sha": "039481215f0a6033ee44975173d1cce9cc492017", "filename": "src/test/run-make/wasm-export-all-symbols/Makefile", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-export-all-symbols%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,6 +1,7 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-ifeq ($(TARGET),wasm32-unknown-unknown)\n+# only-wasm32\n+\n all:\n \t$(RUSTC) bar.rs --target wasm32-unknown-unknown\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown\n@@ -10,7 +11,3 @@ all:\n \t$(NODE) verify.js $(TMPDIR)/foo.wasm\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown -C lto\n \t$(NODE) verify.js $(TMPDIR)/foo.wasm\n-else\n-all:\n-endif\n-"}, {"sha": "255d8f1ef0e63f3bd6b76da6b96a8afa46be1585", "filename": "src/test/run-make/wasm-import-module/Makefile", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-import-module%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,10 +1,8 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-ifeq ($(TARGET),wasm32-unknown-unknown)\n+ # only-wasm32\n+\n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown\n \t$(RUSTC) bar.rs -C lto -O --target wasm32-unknown-unknown\n \t$(NODE) foo.js $(TMPDIR)/bar.wasm\n-else\n-all:\n-endif"}, {"sha": "b9141f93d538ceb07e8ce82f54fff10cdce4746e", "filename": "src/test/run-make/wasm-panic-small/Makefile", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-panic-small%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,6 +1,7 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-ifeq ($(TARGET),wasm32-unknown-unknown)\n+# only-wasm32\n+\n all:\n \t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown --cfg a\n \twc -c < $(TMPDIR)/foo.wasm\n@@ -14,7 +15,3 @@ all:\n \t$(RUSTC) foo.rs -C lto -O --target wasm32-unknown-unknown --cfg d\n \twc -c < $(TMPDIR)/foo.wasm\n \t[ \"`wc -c < $(TMPDIR)/foo.wasm`\" -lt \"5120\" ]\n-else\n-all:\n-endif\n-"}, {"sha": "b17e04b77177356822bca5ff7a6b1e06582d7ea1", "filename": "src/test/run-make/wasm-symbols-not-exported/Makefile", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-exported%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,6 +1,7 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-ifeq ($(TARGET),wasm32-unknown-unknown)\n+# only-wasm32\n+\n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown\n \t$(NODE) verify-exported-symbols.js $(TMPDIR)/foo.wasm\n@@ -10,7 +11,3 @@ all:\n \t$(NODE) verify-exported-symbols.js $(TMPDIR)/bar.wasm\n \t$(RUSTC) bar.rs --target wasm32-unknown-unknown -O\n \t$(NODE) verify-exported-symbols.js $(TMPDIR)/bar.wasm\n-else\n-all:\n-endif\n-"}, {"sha": "b8f64e06f31ef844accfbd0b4a16f4e8d19f7544", "filename": "src/test/run-make/wasm-symbols-not-imported/Makefile", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fwasm-symbols-not-imported%2FMakefile?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -1,6 +1,7 @@\n -include ../../run-make-fulldeps/tools.mk\n \n-ifeq ($(TARGET),wasm32-unknown-unknown)\n+# only-wasm32\n+\n all:\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown\n \t$(NODE) verify-no-imports.js $(TMPDIR)/foo.wasm\n@@ -10,7 +11,3 @@ all:\n \t$(NODE) verify-no-imports.js $(TMPDIR)/foo.wasm\n \t$(RUSTC) foo.rs --target wasm32-unknown-unknown -O -C lto\n \t$(NODE) verify-no-imports.js $(TMPDIR)/foo.wasm\n-else\n-all:\n-endif\n-"}, {"sha": "240287fa248bd9ac4a720ef98d237451d9495b25", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54b5c7a645ead203d77e78245362f9e0f00dd3c/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=a54b5c7a645ead203d77e78245362f9e0f00dd3c", "patch": "@@ -9,6 +9,7 @@ const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"androideabi\", \"android\"),\n     (\"bitrig\", \"bitrig\"),\n     (\"cloudabi\", \"cloudabi\"),\n+    (\"cuda\", \"cuda\"),\n     (\"darwin\", \"macos\"),\n     (\"dragonfly\", \"dragonfly\"),\n     (\"emscripten\", \"emscripten\"),\n@@ -20,9 +21,11 @@ const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"l4re\", \"l4re\"),\n     (\"linux\", \"linux\"),\n     (\"mingw32\", \"windows\"),\n+    (\"none\", \"none\"),\n     (\"netbsd\", \"netbsd\"),\n     (\"openbsd\", \"openbsd\"),\n     (\"redox\", \"redox\"),\n+    (\"sgx\", \"sgx\"),\n     (\"solaris\", \"solaris\"),\n     (\"win32\", \"windows\"),\n     (\"windows\", \"windows\"),\n@@ -38,6 +41,7 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"armv7\", \"arm\"),\n     (\"armv7s\", \"arm\"),\n     (\"asmjs\", \"asmjs\"),\n+    (\"cuda\", \"cuda\"),\n     (\"hexagon\", \"hexagon\"),\n     (\"i386\", \"x86\"),\n     (\"i586\", \"x86\"),\n@@ -154,6 +158,7 @@ fn test_get_arch_failure() {\n fn test_get_arch() {\n     assert_eq!(\"x86_64\", get_arch(\"x86_64-unknown-linux-gnu\"));\n     assert_eq!(\"x86_64\", get_arch(\"amd64\"));\n+    assert_eq!(\"cuda\", get_arch(\"nvptx64-nvidia-cuda\"));\n }\n \n #[test]\n@@ -168,4 +173,8 @@ fn test_matches_os() {\n     assert!(matches_os(\"wasm32-unknown-unknown\", \"emscripten\"));\n     assert!(matches_os(\"wasm32-unknown-unknown\", \"wasm32-bare\"));\n     assert!(!matches_os(\"wasm32-unknown-unknown\", \"windows\"));\n+    assert!(matches_os(\"thumbv6m0-none-eabi\", \"none\"));\n+    assert!(matches_os(\"riscv32imc-unknown-none-elf\", \"none\"));\n+    assert!(matches_os(\"nvptx64-nvidia-cuda\", \"cuda\"));\n+    assert!(matches_os(\"x86_64-fortanix-unknown-sgx\", \"sgx\"));\n }"}]}