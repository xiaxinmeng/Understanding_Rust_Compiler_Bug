{"sha": "6a541937dc314cc9e71062a82119b170dd27e995", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNTQxOTM3ZGMzMTRjYzllNzEwNjJhODIxMTliMTcwZGQyN2U5OTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T06:36:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T19:51:47Z"}, "message": "rustbuild: Add crate documentation generation\n\nRun `cargo doc` to generate all documentation for the standard library, and also\nadd a target which generates documentation for the compiler as well (but don't\nenable it by default).", "tree": {"sha": "e2733938236078ca1f8bc62ff7f0861b63813a24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2733938236078ca1f8bc62ff7f0861b63813a24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a541937dc314cc9e71062a82119b170dd27e995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a541937dc314cc9e71062a82119b170dd27e995", "html_url": "https://github.com/rust-lang/rust/commit/6a541937dc314cc9e71062a82119b170dd27e995", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a541937dc314cc9e71062a82119b170dd27e995/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "063e68b0b6db5bd732f1719c5fcfa8837837eb1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/063e68b0b6db5bd732f1719c5fcfa8837837eb1a", "html_url": "https://github.com/rust-lang/rust/commit/063e68b0b6db5bd732f1719c5fcfa8837837eb1a"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "02eda0e7b58fb2419a68967299f181ed23e462f1", "filename": "src/bootstrap/build/doc.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6a541937dc314cc9e71062a82119b170dd27e995/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a541937dc314cc9e71062a82119b170dd27e995/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdoc.rs?ref=6a541937dc314cc9e71062a82119b170dd27e995", "patch": "@@ -13,7 +13,7 @@ use std::fs::{self, File};\n use std::io::prelude::*;\n \n use build::{Build, Compiler};\n-use build::util::up_to_date;\n+use build::util::{up_to_date, cp_r};\n \n pub fn rustbook(build: &Build, stage: u32, host: &str, name: &str, out: &Path) {\n     t!(fs::create_dir_all(out));\n@@ -102,3 +102,40 @@ pub fn standalone(build: &Build, stage: u32, host: &str, out: &Path) {\n         build.run(&mut cmd);\n     }\n }\n+\n+pub fn std(build: &Build, stage: u32, host: &str, out: &Path) {\n+    println!(\"Documenting stage{} std ({})\", stage, host);\n+    let compiler = Compiler::new(stage, host);\n+    let out_dir = build.stage_out(stage, host, true)\n+                       .join(host).join(\"doc\");\n+    let rustdoc = build.tool(&compiler, \"rustdoc\");\n+    if !up_to_date(&rustdoc, &out_dir.join(\"std/index.html\")) {\n+        t!(fs::remove_dir_all(&out_dir));\n+    }\n+\n+    let mut cargo = build.cargo(stage, &compiler, true, host,\n+                                \"doc\");\n+    cargo.arg(\"--manifest-path\")\n+         .arg(build.src.join(\"src/rustc/std_shim/Cargo.toml\"))\n+         .arg(\"--features\").arg(build.std_features());\n+    build.run(&mut cargo);\n+    cp_r(&out_dir, out)\n+}\n+\n+pub fn rustc(build: &Build, stage: u32, host: &str, out: &Path) {\n+    println!(\"Documenting stage{} compiler ({})\", stage, host);\n+    let compiler = Compiler::new(stage, host);\n+    let out_dir = build.stage_out(stage, host, false)\n+                       .join(host).join(\"doc\");\n+    let rustdoc = build.tool(&compiler, \"rustdoc\");\n+    if !up_to_date(&rustdoc, &out_dir.join(\"rustc/index.html\")) {\n+        t!(fs::remove_dir_all(&out_dir));\n+    }\n+    let mut cargo = build.cargo(stage, &compiler, false, host,\n+                                \"doc\");\n+    cargo.arg(\"--manifest-path\")\n+         .arg(build.src.join(\"src/rustc/Cargo.toml\"))\n+         .arg(\"--features\").arg(build.rustc_features(stage));\n+    build.run(&mut cargo);\n+    cp_r(&out_dir, out)\n+}"}, {"sha": "05920a480a9ae77d65ef8eae887735198788d28d", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a541937dc314cc9e71062a82119b170dd27e995/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a541937dc314cc9e71062a82119b170dd27e995/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=6a541937dc314cc9e71062a82119b170dd27e995", "patch": "@@ -179,7 +179,15 @@ impl Build {\n                 DocStandalone { stage } => {\n                     doc::standalone(self, stage, target.target, &doc_out);\n                 }\n-                Doc { .. } => {} // pseudo-step\n+                DocStd { stage } => {\n+                    doc::std(self, stage, target.target, &doc_out);\n+                }\n+                DocRustc { stage } => {\n+                    doc::rustc(self, stage, target.target, &doc_out);\n+                }\n+\n+                Doc { .. } | // pseudo-steps\n+                Check { .. } => {}\n             }\n         }\n     }"}, {"sha": "fc8d366faac2a1ee9b30e868a5faa733b1265991", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a541937dc314cc9e71062a82119b170dd27e995/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a541937dc314cc9e71062a82119b170dd27e995/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=6a541937dc314cc9e71062a82119b170dd27e995", "patch": "@@ -62,6 +62,8 @@ macro_rules! targets {\n             (doc_nomicon, DocNomicon { stage: u32 }),\n             (doc_style, DocStyle { stage: u32 }),\n             (doc_standalone, DocStandalone { stage: u32 }),\n+            (doc_std, DocStd { stage: u32 }),\n+            (doc_rustc, DocRustc { stage: u32 }),\n \n             // Steps for running tests. The 'check' target is just a pseudo\n             // target to depend on a bunch of others.\n@@ -182,6 +184,8 @@ fn add_steps<'a>(build: &'a Build,\n             \"doc-standalone\" => targets.push(host.doc_standalone(stage)),\n             \"doc-nomicon\" => targets.push(host.doc_nomicon(stage)),\n             \"doc-book\" => targets.push(host.doc_book(stage)),\n+            \"doc-std\" => targets.push(host.doc_std(stage)),\n+            \"doc-rustc\" => targets.push(host.doc_rustc(stage)),\n             \"doc\" => targets.push(host.doc(stage)),\n             \"check\" => targets.push(host.check(stage, compiler)),\n             _ => panic!(\"unknown build target: `{}`\", step),\n@@ -239,15 +243,22 @@ impl<'a> Step<'a> {\n                 vec![self.llvm(()).target(&build.config.build)]\n             }\n             Source::Llvm { _dummy } => Vec::new(),\n+            Source::DocStd { stage } => {\n+                vec![self.libstd(stage, self.compiler(stage))]\n+            }\n             Source::DocBook { stage } |\n             Source::DocNomicon { stage } |\n             Source::DocStyle { stage } |\n             Source::DocStandalone { stage } => {\n                 vec![self.rustc(stage)]\n             }\n+            Source::DocRustc { stage } => {\n+                vec![self.doc_std(stage)]\n+            }\n             Source::Doc { stage } => {\n                 vec![self.doc_book(stage), self.doc_nomicon(stage),\n-                     self.doc_style(stage), self.doc_standalone(stage)]\n+                     self.doc_style(stage), self.doc_standalone(stage),\n+                     self.doc_std(stage)]\n             }\n             Source::Check { stage, compiler: _ } => {\n                 vec![]"}, {"sha": "35d22ee5d2658ecedd01abc92cc22b11b4f8a7f1", "filename": "src/bootstrap/build/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a541937dc314cc9e71062a82119b170dd27e995/src%2Fbootstrap%2Fbuild%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a541937dc314cc9e71062a82119b170dd27e995/src%2Fbootstrap%2Fbuild%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Futil.rs?ref=6a541937dc314cc9e71062a82119b170dd27e995", "patch": "@@ -30,7 +30,6 @@ pub fn mtime(path: &Path) -> FileTime {\n     }).unwrap_or(FileTime::zero())\n }\n \n-#[allow(dead_code)] // this will be used soon\n pub fn cp_r(src: &Path, dst: &Path) {\n     for f in t!(fs::read_dir(src)) {\n         let f = t!(f);"}]}