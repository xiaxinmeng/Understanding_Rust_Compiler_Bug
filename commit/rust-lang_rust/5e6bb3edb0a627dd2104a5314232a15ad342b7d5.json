{"sha": "5e6bb3edb0a627dd2104a5314232a15ad342b7d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNmJiM2VkYjBhNjI3ZGQyMTA0YTUzMTQyMzJhMTVhZDM0MmI3ZDU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-12-08T07:59:04Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-12-08T07:59:04Z"}, "message": "Keep track of line number in visitor", "tree": {"sha": "a1a25a744c0ead767a806c2d76934524010ff452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1a25a744c0ead767a806c2d76934524010ff452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e6bb3edb0a627dd2104a5314232a15ad342b7d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6bb3edb0a627dd2104a5314232a15ad342b7d5", "html_url": "https://github.com/rust-lang/rust/commit/5e6bb3edb0a627dd2104a5314232a15ad342b7d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e6bb3edb0a627dd2104a5314232a15ad342b7d5/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97fd517593c83125409cfd494d2369ae955cad36", "url": "https://api.github.com/repos/rust-lang/rust/commits/97fd517593c83125409cfd494d2369ae955cad36", "html_url": "https://github.com/rust-lang/rust/commit/97fd517593c83125409cfd494d2369ae955cad36"}], "stats": {"total": 103, "additions": 57, "deletions": 46}, "files": [{"sha": "1d38328d45cfff76724b0ec2b9f52ea7ce11e69a", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e6bb3edb0a627dd2104a5314232a15ad342b7d5/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e6bb3edb0a627dd2104a5314232a15ad342b7d5/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=5e6bb3edb0a627dd2104a5314232a15ad342b7d5", "patch": "@@ -285,7 +285,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n             Some(ref s) => {\n                 self.format_missing_with_indent(source!(self, span).lo());\n-                self.buffer.push_str(s);\n+                self.push_str(s);\n                 self.last_pos = source!(self, span).hi();\n             }\n             None => {"}, {"sha": "44c03ebf95bad08b8224bec2bb2fd4796fc4ed5e", "filename": "src/items.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5e6bb3edb0a627dd2104a5314232a15ad342b7d5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e6bb3edb0a627dd2104a5314232a15ad342b7d5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=5e6bb3edb0a627dd2104a5314232a15ad342b7d5", "patch": "@@ -240,12 +240,12 @@ impl<'a> FnSig<'a> {\n \n impl<'a> FmtVisitor<'a> {\n     fn format_item(&mut self, item: Item) {\n-        self.buffer.push_str(&item.abi);\n+        self.push_str(&item.abi);\n \n         let snippet = self.snippet(item.span);\n         let brace_pos = snippet.find_uncommented(\"{\").unwrap();\n \n-        self.buffer.push_str(\"{\");\n+        self.push_str(\"{\");\n         if !item.body.is_empty() || contains_comment(&snippet[brace_pos..]) {\n             // FIXME: this skips comments between the extern keyword and the opening\n             // brace.\n@@ -255,9 +255,8 @@ impl<'a> FmtVisitor<'a> {\n             if item.body.is_empty() {\n                 self.format_missing_no_indent(item.span.hi() - BytePos(1));\n                 self.block_indent = self.block_indent.block_unindent(self.config);\n-\n-                self.buffer\n-                    .push_str(&self.block_indent.to_string(self.config));\n+                let indent_str = self.block_indent.to_string(self.config);\n+                self.push_str(&indent_str);\n             } else {\n                 for item in &item.body {\n                     self.format_body_element(item);\n@@ -268,7 +267,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n         }\n \n-        self.buffer.push_str(\"}\");\n+        self.push_str(\"}\");\n         self.last_pos = item.span.hi();\n     }\n \n@@ -423,7 +422,7 @@ impl<'a> FmtVisitor<'a> {\n         span: Span,\n     ) {\n         let enum_header = format_header(\"enum \", ident, vis);\n-        self.buffer.push_str(&enum_header);\n+        self.push_str(&enum_header);\n \n         let enum_snippet = self.snippet(span);\n         let brace_pos = enum_snippet.find_uncommented(\"{\").unwrap();\n@@ -441,23 +440,23 @@ impl<'a> FmtVisitor<'a> {\n             mk_sp(span.lo(), body_start),\n             last_line_width(&enum_header),\n         ).unwrap();\n-        self.buffer.push_str(&generics_str);\n+        self.push_str(&generics_str);\n \n         self.last_pos = body_start;\n \n         self.block_indent = self.block_indent.block_indent(self.config);\n         let variant_list = self.format_variant_list(enum_def, body_start, span.hi() - BytePos(1));\n         match variant_list {\n-            Some(ref body_str) => self.buffer.push_str(body_str),\n+            Some(ref body_str) => self.push_str(body_str),\n             None => self.format_missing_no_indent(span.hi() - BytePos(1)),\n         }\n         self.block_indent = self.block_indent.block_unindent(self.config);\n \n         if variant_list.is_some() || contains_comment(&enum_snippet[brace_pos..]) {\n-            self.buffer\n-                .push_str(&self.block_indent.to_string(self.config));\n+            let indent_str = self.block_indent.to_string(self.config);\n+            self.push_str(&indent_str);\n         }\n-        self.buffer.push_str(\"}\");\n+        self.push_str(\"}\");\n         self.last_pos = span.hi();\n     }\n "}, {"sha": "3acba4a4cf13acc245e61d83dae7b5422d87b76c", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e6bb3edb0a627dd2104a5314232a15ad342b7d5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e6bb3edb0a627dd2104a5314232a15ad342b7d5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5e6bb3edb0a627dd2104a5314232a15ad342b7d5", "patch": "@@ -338,6 +338,11 @@ where\n             visitor.format_separate_mod(module, &*filemap);\n         };\n \n+        assert_eq!(\n+            visitor.line_number,\n+            ::utils::count_newlines(&format!(\"{}\", visitor.buffer))\n+        );\n+\n         has_diff |= match after_file(path_str, &mut visitor.buffer) {\n             Ok(result) => result,\n             Err(e) => {"}, {"sha": "2ed1f50182b883543134d5f3edba89f8083eea2e", "filename": "src/missed_spans.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5e6bb3edb0a627dd2104a5314232a15ad342b7d5/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e6bb3edb0a627dd2104a5314232a15ad342b7d5/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=5e6bb3edb0a627dd2104a5314232a15ad342b7d5", "patch": "@@ -28,27 +28,25 @@ impl<'a> FmtVisitor<'a> {\n     // TODO these format_missing methods are ugly. Refactor and add unit tests\n     // for the central whitespace stripping loop.\n     pub fn format_missing(&mut self, end: BytePos) {\n-        self.format_missing_inner(end, |this, last_snippet, _| {\n-            this.buffer.push_str(last_snippet)\n-        })\n+        self.format_missing_inner(end, |this, last_snippet, _| this.push_str(last_snippet))\n     }\n \n     pub fn format_missing_with_indent(&mut self, end: BytePos) {\n         let config = self.config;\n         self.format_missing_inner(end, |this, last_snippet, snippet| {\n-            this.buffer.push_str(last_snippet.trim_right());\n+            this.push_str(last_snippet.trim_right());\n             if last_snippet == snippet && !this.output_at_start() {\n                 // No new lines in the snippet.\n-                this.buffer.push_str(\"\\n\");\n+                this.push_str(\"\\n\");\n             }\n             let indent = this.block_indent.to_string(config);\n-            this.buffer.push_str(&indent);\n+            this.push_str(&indent);\n         })\n     }\n \n     pub fn format_missing_no_indent(&mut self, end: BytePos) {\n         self.format_missing_inner(end, |this, last_snippet, _| {\n-            this.buffer.push_str(last_snippet.trim_right());\n+            this.push_str(last_snippet.trim_right());\n         })\n     }\n \n@@ -97,7 +95,7 @@ impl<'a> FmtVisitor<'a> {\n             newline_count = newline_lower_bound;\n         }\n         let blank_lines: String = repeat('\\n').take(newline_count).collect();\n-        self.buffer.push_str(&blank_lines);\n+        self.push_str(&blank_lines);\n     }\n \n     fn write_snippet<F>(&mut self, span: Span, process_last_snippet: F)\n@@ -154,12 +152,12 @@ impl<'a> FmtVisitor<'a> {\n         if status.rewrite_next_comment {\n             if fix_indent {\n                 if let Some('{') = last_char {\n-                    self.buffer.push_str(\"\\n\");\n+                    self.push_str(\"\\n\");\n                 }\n-                self.buffer\n-                    .push_str(&self.block_indent.to_string(self.config));\n+                let indent_str = self.block_indent.to_string(self.config);\n+                self.push_str(&indent_str);\n             } else {\n-                self.buffer.push_str(\" \");\n+                self.push_str(\" \");\n             }\n \n             let comment_width = ::std::cmp::min(\n@@ -170,7 +168,7 @@ impl<'a> FmtVisitor<'a> {\n             let comment_shape = Shape::legacy(comment_width, comment_indent);\n             let comment_str = rewrite_comment(subslice, false, comment_shape, self.config)\n                 .unwrap_or_else(|| String::from(subslice));\n-            self.buffer.push_str(&comment_str);\n+            self.push_str(&comment_str);\n \n             status.last_wspace = None;\n             status.line_start = offset + subslice.len();\n@@ -183,13 +181,13 @@ impl<'a> FmtVisitor<'a> {\n                     .any(|s| s.len() >= 2 && &s[0..2] == \"/*\")\n                 {\n                     // Add a newline after line comments\n-                    self.buffer.push_str(\"\\n\");\n+                    self.push_str(\"\\n\");\n                 }\n             } else if status.line_start <= snippet.len() {\n                 // For other comments add a newline if there isn't one at the end already\n                 match snippet[status.line_start..].chars().next() {\n                     Some('\\n') | Some('\\r') => (),\n-                    _ => self.buffer.push_str(\"\\n\"),\n+                    _ => self.push_str(\"\\n\"),\n                 }\n             }\n \n@@ -277,10 +275,10 @@ impl<'a> FmtVisitor<'a> {\n                         }\n \n                         if let Some(lw) = status.last_wspace {\n-                            self.buffer.push_str(&snippet[status.line_start..lw]);\n-                            self.buffer.push_str(\"\\n\");\n+                            self.push_str(&snippet[status.line_start..lw]);\n+                            self.push_str(\"\\n\");\n                         } else {\n-                            self.buffer.push_str(&snippet[status.line_start..i + 1]);\n+                            self.push_str(&snippet[status.line_start..i + 1]);\n                         }\n \n                         status.cur_line += 1;\n@@ -306,7 +304,7 @@ impl<'a> FmtVisitor<'a> {\n \n                 let remaining = snippet[status.line_start..subslice.len() + offset].trim();\n                 if !remaining.is_empty() {\n-                    self.buffer.push_str(remaining);\n+                    self.push_str(remaining);\n                     status.line_start = subslice.len() + offset;\n                     status.rewrite_next_comment = true;\n                 }"}, {"sha": "dc11dcd89381de00c03d059958fff8849045b5b4", "filename": "src/visitor.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5e6bb3edb0a627dd2104a5314232a15ad342b7d5/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e6bb3edb0a627dd2104a5314232a15ad342b7d5/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=5e6bb3edb0a627dd2104a5314232a15ad342b7d5", "patch": "@@ -81,6 +81,7 @@ pub struct FmtVisitor<'a> {\n     pub config: &'a Config,\n     pub is_if_else_block: bool,\n     pub snippet_provider: &'a SnippetProvider<'a>,\n+    pub line_number: usize,\n }\n \n impl<'b, 'a: 'b> FmtVisitor<'a> {\n@@ -132,7 +133,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n         self.last_pos = self.last_pos + brace_compensation;\n         self.block_indent = self.block_indent.block_indent(self.config);\n-        self.buffer.push_str(\"{\");\n+        self.push_str(\"{\");\n \n         if self.config.remove_blank_lines_at_start_or_end_of_block() {\n             if let Some(first_stmt) = b.stmts.first() {\n@@ -195,7 +196,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         if !b.stmts.is_empty() {\n             if let Some(expr) = utils::stmt_expr(&b.stmts[b.stmts.len() - 1]) {\n                 if utils::semicolon_for_expr(&self.get_context(), expr) {\n-                    self.buffer.push_str(\";\");\n+                    self.push_str(\";\");\n                 }\n             }\n         }\n@@ -255,7 +256,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             self.config.tab_spaces()\n         };\n         self.buffer.truncate(total_len - chars_too_many);\n-        self.buffer.push_str(\"}\");\n+        self.push_str(\"}\");\n         self.block_indent = self.block_indent.block_unindent(self.config);\n     }\n \n@@ -288,7 +289,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n         if let Some(fn_str) = rewrite {\n             self.format_missing_with_indent(source!(self, s).lo());\n-            self.buffer.push_str(&fn_str);\n+            self.push_str(&fn_str);\n             if let Some(c) = fn_str.chars().last() {\n                 if c == '}' {\n                     self.last_pos = source!(self, block.span).hi();\n@@ -519,13 +520,18 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.push_rewrite(mac.span, rewrite);\n     }\n \n+    pub fn push_str(&mut self, s: &str) {\n+        self.line_number += count_newlines(s);\n+        self.buffer.push_str(s);\n+    }\n+\n     pub fn push_rewrite(&mut self, span: Span, rewrite: Option<String>) {\n         self.format_missing_with_indent(source!(self, span).lo());\n         if let Some(ref s) = rewrite {\n-            self.buffer.push_str(s);\n+            self.push_str(s);\n         } else {\n             let snippet = self.snippet(span);\n-            self.buffer.push_str(snippet);\n+            self.push_str(snippet);\n         }\n         self.last_pos = source!(self, span).hi();\n     }\n@@ -548,6 +554,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             config: config,\n             is_if_else_block: false,\n             snippet_provider: snippet_provider,\n+            line_number: 0,\n         }\n     }\n \n@@ -692,23 +699,25 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         let is_internal = !(inner_span.lo().0 == 0 && inner_span.hi().0 == 0)\n             && local_file_name == self.codemap.span_to_filename(inner_span);\n \n-        self.buffer.push_str(&*utils::format_visibility(vis));\n-        self.buffer.push_str(\"mod \");\n-        self.buffer.push_str(&ident.to_string());\n+        self.push_str(&*utils::format_visibility(vis));\n+        self.push_str(\"mod \");\n+        self.push_str(&ident.to_string());\n \n         if is_internal {\n             match self.config.brace_style() {\n-                BraceStyle::AlwaysNextLine => self.buffer\n-                    .push_str(&format!(\"\\n{}{{\", self.block_indent.to_string(self.config))),\n-                _ => self.buffer.push_str(\" {\"),\n+                BraceStyle::AlwaysNextLine => {\n+                    let sep_str = format!(\"\\n{}{{\", self.block_indent.to_string(self.config));\n+                    self.push_str(&sep_str);\n+                }\n+                _ => self.push_str(\" {\"),\n             }\n             // Hackery to account for the closing }.\n             let mod_lo = self.codemap.span_after(source!(self, s), \"{\");\n             let body_snippet =\n                 self.snippet(mk_sp(mod_lo, source!(self, m.inner).hi() - BytePos(1)));\n             let body_snippet = body_snippet.trim();\n             if body_snippet.is_empty() {\n-                self.buffer.push_str(\"}\");\n+                self.push_str(\"}\");\n             } else {\n                 self.last_pos = mod_lo;\n                 self.block_indent = self.block_indent.block_indent(self.config);\n@@ -719,7 +728,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             }\n             self.last_pos = source!(self, m.inner).hi();\n         } else {\n-            self.buffer.push_str(\";\");\n+            self.push_str(\";\");\n             self.last_pos = source!(self, s).hi();\n         }\n     }"}]}