{"sha": "d1cf449034095725a19cba0bbc79753f2f460e69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxY2Y0NDkwMzQwOTU3MjVhMTljYmEwYmJjNzk3NTNmMmY0NjBlNjk=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-30T15:49:17Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-30T15:53:46Z"}, "message": "Maybe ignore the explicit examples of a race condition", "tree": {"sha": "0540eb85f67da778a2661b2a962afed6285828d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0540eb85f67da778a2661b2a962afed6285828d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1cf449034095725a19cba0bbc79753f2f460e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1cf449034095725a19cba0bbc79753f2f460e69", "html_url": "https://github.com/rust-lang/rust/commit/d1cf449034095725a19cba0bbc79753f2f460e69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1cf449034095725a19cba0bbc79753f2f460e69/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbf3a63dd78f547bced8d086067d98ba0b414fd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbf3a63dd78f547bced8d086067d98ba0b414fd3", "html_url": "https://github.com/rust-lang/rust/commit/dbf3a63dd78f547bced8d086067d98ba0b414fd3"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "2ad62c14a806b8cc8dbb87a95aa9fb4a707677e0", "filename": "src/doc/tarpl/races.md", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d1cf449034095725a19cba0bbc79753f2f460e69/src%2Fdoc%2Ftarpl%2Fraces.md", "raw_url": "https://github.com/rust-lang/rust/raw/d1cf449034095725a19cba0bbc79753f2f460e69/src%2Fdoc%2Ftarpl%2Fraces.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Fraces.md?ref=d1cf449034095725a19cba0bbc79753f2f460e69", "patch": "@@ -25,7 +25,7 @@ race condition can't violate memory safety in a Rust program on\n its own. Only in conjunction with some other unsafe code can a race condition\n actually violate memory safety. For instance:\n \n-```rust\n+```rust,norun\n use std::thread;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::Arc;\n@@ -54,6 +54,24 @@ thread::spawn(move || {\n // program execution (panicing is rarely correct) depends on order of\n // thread execution.\n println!(\"{}\", data[idx.load(Ordering::SeqCst)]);\n+```\n+\n+```rust,norun\n+use std::thread;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::sync::Arc;\n+\n+let data = vec![1, 2, 3, 4];\n+\n+let idx = Arc::new(AtomicUsize::new(0));\n+let other_idx = idx.clone();\n+\n+// `move` captures other_idx by-value, moving it into this thread\n+thread::spawn(move || {\n+    // It's ok to mutate idx because this value\n+    // is an atomic, so it can't cause a Data Race.\n+    other_idx.fetch_add(10, Ordering::SeqCst);\n+});\n \n if idx.load(Ordering::SeqCst) < data.len() {\n     unsafe {"}]}