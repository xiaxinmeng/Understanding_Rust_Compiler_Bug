{"sha": "46ad16b70f16795f419eb04b823f4c6485867b32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YWQxNmI3MGYxNjc5NWY0MTllYjA0YjgyM2Y0YzY0ODU4NjdiMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-10T23:14:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-10T23:14:11Z"}, "message": "Auto merge of #85630 - gilescope:to_digit_speedup3, r=nagisa\n\nto_digit simplification (less jumps)\n\nI just realised we might be able to make use of the fact that changing case in ascii is easy to help simplify to_digit some more.\n\nIt looks a bit cleaner and it looks like it's less jumps and there's less instructions in the generated assembly:\n\nhttps://godbolt.org/z/84Erh5dhz\n\nThe benchmarks don't really tell me much. Maybe a slight improvement on the var radix.\n\nBefore:\n```\ntest char::methods::bench_to_digit_radix_10                     ... bench:      53,819 ns/iter (+/- 8,314)\ntest char::methods::bench_to_digit_radix_16                     ... bench:      57,265 ns/iter (+/- 10,730)\ntest char::methods::bench_to_digit_radix_2                      ... bench:      55,077 ns/iter (+/- 5,431)\ntest char::methods::bench_to_digit_radix_36                     ... bench:      56,549 ns/iter (+/- 3,248)\ntest char::methods::bench_to_digit_radix_var                    ... bench:      43,848 ns/iter (+/- 3,189)\n\ntest char::methods::bench_to_digit_radix_10                     ... bench:      51,707 ns/iter (+/- 10,946)\ntest char::methods::bench_to_digit_radix_16                     ... bench:      52,835 ns/iter (+/- 2,689)\ntest char::methods::bench_to_digit_radix_2                      ... bench:      51,012 ns/iter (+/- 2,746)\ntest char::methods::bench_to_digit_radix_36                     ... bench:      53,210 ns/iter (+/- 8,645)\ntest char::methods::bench_to_digit_radix_var                    ... bench:      40,386 ns/iter (+/- 4,711)\n\ntest char::methods::bench_to_digit_radix_10                     ... bench:      54,088 ns/iter (+/- 5,677)\ntest char::methods::bench_to_digit_radix_16                     ... bench:      55,972 ns/iter (+/- 17,229)\ntest char::methods::bench_to_digit_radix_2                      ... bench:      52,083 ns/iter (+/- 2,425)\ntest char::methods::bench_to_digit_radix_36                     ... bench:      54,132 ns/iter (+/- 1,548)\ntest char::methods::bench_to_digit_radix_var                    ... bench:      41,250 ns/iter (+/- 5,299)\n```\nAfter:\n```\ntest char::methods::bench_to_digit_radix_10                     ... bench:      48,907 ns/iter (+/- 19,449)\ntest char::methods::bench_to_digit_radix_16                     ... bench:      52,673 ns/iter (+/- 8,122)\ntest char::methods::bench_to_digit_radix_2                      ... bench:      48,509 ns/iter (+/- 2,885)\ntest char::methods::bench_to_digit_radix_36                     ... bench:      50,526 ns/iter (+/- 4,610)\ntest char::methods::bench_to_digit_radix_var                    ... bench:      38,618 ns/iter (+/- 3,180)\n\ntest char::methods::bench_to_digit_radix_10                     ... bench:      54,202 ns/iter (+/- 6,994)\ntest char::methods::bench_to_digit_radix_16                     ... bench:      56,585 ns/iter (+/- 8,448)\ntest char::methods::bench_to_digit_radix_2                      ... bench:      50,548 ns/iter (+/- 1,674)\ntest char::methods::bench_to_digit_radix_36                     ... bench:      52,749 ns/iter (+/- 2,576)\ntest char::methods::bench_to_digit_radix_var                    ... bench:      40,215 ns/iter (+/- 3,327)\n\ntest char::methods::bench_to_digit_radix_10                     ... bench:      50,233 ns/iter (+/- 22,272)\ntest char::methods::bench_to_digit_radix_16                     ... bench:      50,841 ns/iter (+/- 19,981)\ntest char::methods::bench_to_digit_radix_2                      ... bench:      50,386 ns/iter (+/- 4,555)\ntest char::methods::bench_to_digit_radix_36                     ... bench:      52,369 ns/iter (+/- 2,737)\ntest char::methods::bench_to_digit_radix_var                    ... bench:      40,417 ns/iter (+/- 2,766)\n```\n\nI removed the likely as it resulted in a few less instructions. (It's not been in there long - I added it in the last to_digit iteration).", "tree": {"sha": "0775edb869a31b73e3f242c9a8cbd60fc18145c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0775edb869a31b73e3f242c9a8cbd60fc18145c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46ad16b70f16795f419eb04b823f4c6485867b32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46ad16b70f16795f419eb04b823f4c6485867b32", "html_url": "https://github.com/rust-lang/rust/commit/46ad16b70f16795f419eb04b823f4c6485867b32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46ad16b70f16795f419eb04b823f4c6485867b32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e18395ce33ca1ebfe60a591fb2f9317a75d822", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e18395ce33ca1ebfe60a591fb2f9317a75d822", "html_url": "https://github.com/rust-lang/rust/commit/16e18395ce33ca1ebfe60a591fb2f9317a75d822"}, {"sha": "9c3d81e186c36091b1609db88cbec961c2fc49ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3d81e186c36091b1609db88cbec961c2fc49ab", "html_url": "https://github.com/rust-lang/rust/commit/9c3d81e186c36091b1609db88cbec961c2fc49ab"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "80d0890551fd2f34e85caef419ca3982cd18c379", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/46ad16b70f16795f419eb04b823f4c6485867b32/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ad16b70f16795f419eb04b823f4c6485867b32/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=46ad16b70f16795f419eb04b823f4c6485867b32", "patch": "@@ -1,6 +1,5 @@\n //! impl char {}\n \n-use crate::intrinsics::likely;\n use crate::slice;\n use crate::str::from_utf8_unchecked_mut;\n use crate::unicode::printable::is_printable;\n@@ -332,21 +331,16 @@ impl char {\n     #[inline]\n     pub fn to_digit(self, radix: u32) -> Option<u32> {\n         assert!(radix <= 36, \"to_digit: radix is too high (maximum 36)\");\n-        // the code is split up here to improve execution speed for cases where\n-        // the `radix` is constant and 10 or smaller\n-        let val = if likely(radix <= 10) {\n-            // If not a digit, a number greater than radix will be created.\n-            (self as u32).wrapping_sub('0' as u32)\n-        } else {\n-            match self {\n-                '0'..='9' => self as u32 - '0' as u32,\n-                'a'..='z' => self as u32 - 'a' as u32 + 10,\n-                'A'..='Z' => self as u32 - 'A' as u32 + 10,\n-                _ => return None,\n+        // If not a digit, a number greater than radix will be created.\n+        let mut digit = (self as u32).wrapping_sub('0' as u32);\n+        if radix > 10 {\n+            if digit < 10 {\n+                return Some(digit);\n             }\n-        };\n-\n-        if val < radix { Some(val) } else { None }\n+            // Force the 6th bit to be set to ensure ascii is lower case.\n+            digit = (self as u32 | 0b10_0000).wrapping_sub('a' as u32).saturating_add(10);\n+        }\n+        (digit < radix).then_some(digit)\n     }\n \n     /// Returns an iterator that yields the hexadecimal Unicode escape of a"}, {"sha": "41a4eab3c85fde6cefbf967849d1573635a61452", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46ad16b70f16795f419eb04b823f4c6485867b32/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ad16b70f16795f419eb04b823f4c6485867b32/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=46ad16b70f16795f419eb04b823f4c6485867b32", "patch": "@@ -65,6 +65,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n #![feature(asm)]\n+#![feature(bool_to_option)]\n #![feature(cfg_target_has_atomic)]\n #![feature(const_heap)]\n #![feature(const_alloc_layout)]"}, {"sha": "51eca1e05d3438a463f07d7ffad33ee7aae7d015", "filename": "library/core/tests/char.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46ad16b70f16795f419eb04b823f4c6485867b32/library%2Fcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46ad16b70f16795f419eb04b823f4c6485867b32/library%2Fcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fchar.rs?ref=46ad16b70f16795f419eb04b823f4c6485867b32", "patch": "@@ -67,10 +67,20 @@ fn test_to_digit() {\n     assert_eq!('A'.to_digit(16), Some(10));\n     assert_eq!('b'.to_digit(16), Some(11));\n     assert_eq!('B'.to_digit(16), Some(11));\n+    assert_eq!('A'.to_digit(36), Some(10));\n     assert_eq!('z'.to_digit(36), Some(35));\n     assert_eq!('Z'.to_digit(36), Some(35));\n-    assert_eq!(' '.to_digit(10), None);\n+    assert_eq!('['.to_digit(36), None);\n+    assert_eq!('`'.to_digit(36), None);\n+    assert_eq!('{'.to_digit(36), None);\n     assert_eq!('$'.to_digit(36), None);\n+    assert_eq!('@'.to_digit(16), None);\n+    assert_eq!('G'.to_digit(16), None);\n+    assert_eq!('g'.to_digit(16), None);\n+    assert_eq!(' '.to_digit(10), None);\n+    assert_eq!('/'.to_digit(10), None);\n+    assert_eq!(':'.to_digit(10), None);\n+    assert_eq!(':'.to_digit(11), None);\n }\n \n #[test]"}]}