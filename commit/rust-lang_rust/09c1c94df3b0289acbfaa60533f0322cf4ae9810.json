{"sha": "09c1c94df3b0289acbfaa60533f0322cf4ae9810", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YzFjOTRkZjNiMDI4OWFjYmZhYTYwNTMzZjAzMjJjZjRhZTk4MTA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-17T15:46:38Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-17T17:13:53Z"}, "message": "rustc_metadata: Stop leaking `Lazy` from the `rmeta` module", "tree": {"sha": "f1bce539a901ba5b635ac562d872b68b5154fd7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1bce539a901ba5b635ac562d872b68b5154fd7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09c1c94df3b0289acbfaa60533f0322cf4ae9810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09c1c94df3b0289acbfaa60533f0322cf4ae9810", "html_url": "https://github.com/rust-lang/rust/commit/09c1c94df3b0289acbfaa60533f0322cf4ae9810", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09c1c94df3b0289acbfaa60533f0322cf4ae9810/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1570238b84434363e3ec915d83fa032991885da", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1570238b84434363e3ec915d83fa032991885da", "html_url": "https://github.com/rust-lang/rust/commit/c1570238b84434363e3ec915d83fa032991885da"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "a721e381b4e9971ef560a7e374d4daea9d29d73c", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/09c1c94df3b0289acbfaa60533f0322cf4ae9810/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c1c94df3b0289acbfaa60533f0322cf4ae9810/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=09c1c94df3b0289acbfaa60533f0322cf4ae9810", "patch": "@@ -213,16 +213,18 @@ impl<'a> CrateLoader<'a> {\n \n         let cnum_map = self.resolve_crate_deps(root, &crate_root, &metadata, cnum, span, dep_kind);\n \n-        let raw_proc_macros =  crate_root.proc_macro_data.map(|_| {\n+        let raw_proc_macros = if crate_root.is_proc_macro_crate() {\n             let temp_root;\n             let (dlsym_source, dlsym_root) = match &host_lib {\n                 Some(host_lib) =>\n                     (&host_lib.source, { temp_root = host_lib.metadata.get_root(); &temp_root }),\n                 None => (&source, &crate_root),\n             };\n             let dlsym_dylib = dlsym_source.dylib.as_ref().expect(\"no dylib for a proc-macro crate\");\n-            self.dlsym_proc_macros(&dlsym_dylib.0, dlsym_root.disambiguator, span)\n-        });\n+            Some(self.dlsym_proc_macros(&dlsym_dylib.0, dlsym_root.disambiguator, span))\n+        } else {\n+            None\n+        };\n \n         self.cstore.set_crate_data(cnum, CrateMetadata::new(\n             self.sess,\n@@ -348,7 +350,7 @@ impl<'a> CrateLoader<'a> {\n         match result {\n             (LoadResult::Previous(cnum), None) => {\n                 let data = self.cstore.get_crate_data(cnum);\n-                if data.root.proc_macro_data.is_some() {\n+                if data.root.is_proc_macro_crate() {\n                     dep_kind = DepKind::UnexportedMacrosOnly;\n                 }\n                 data.dep_kind.with_lock(|data_dep_kind| {\n@@ -441,14 +443,14 @@ impl<'a> CrateLoader<'a> {\n                           dep_kind: DepKind)\n                           -> CrateNumMap {\n         debug!(\"resolving deps of external crate\");\n-        if crate_root.proc_macro_data.is_some() {\n+        if crate_root.is_proc_macro_crate() {\n             return CrateNumMap::new();\n         }\n \n         // The map from crate numbers in the crate we're resolving to local crate numbers.\n         // We map 0 and all other holes in the map to our parent crate. The \"additional\"\n         // self-dependencies should be harmless.\n-        std::iter::once(krate).chain(crate_root.crate_deps.decode(metadata).map(|dep| {\n+        std::iter::once(krate).chain(crate_root.decode_crate_deps(metadata).map(|dep| {\n             info!(\"resolving dep crate {} hash: `{}` extra filename: `{}`\", dep.name, dep.hash,\n                   dep.extra_filename);\n             if dep.kind == DepKind::UnexportedMacrosOnly {"}, {"sha": "58661292b276a72ad24a8f2f713c4b590075626c", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09c1c94df3b0289acbfaa60533f0322cf4ae9810/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c1c94df3b0289acbfaa60533f0322cf4ae9810/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=09c1c94df3b0289acbfaa60533f0322cf4ae9810", "patch": "@@ -768,10 +768,11 @@ impl<'a> CrateLocator<'a> {\n         }\n \n         let root = metadata.get_root();\n-        if let Some(is_proc_macro) = self.is_proc_macro {\n-            if root.proc_macro_data.is_some() != is_proc_macro {\n+        if let Some(expected_is_proc_macro) = self.is_proc_macro {\n+            let is_proc_macro = root.is_proc_macro_crate();\n+            if is_proc_macro != expected_is_proc_macro {\n                 info!(\"Rejecting via proc macro: expected {} got {}\",\n-                      is_proc_macro, root.proc_macro_data.is_some());\n+                      expected_is_proc_macro, is_proc_macro);\n                 return None;\n             }\n         }"}, {"sha": "5ba587944a3c6c66dc90cb8f8e6d395e7d15871e", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/09c1c94df3b0289acbfaa60533f0322cf4ae9810/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c1c94df3b0289acbfaa60533f0322cf4ae9810/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=09c1c94df3b0289acbfaa60533f0322cf4ae9810", "patch": "@@ -126,7 +126,7 @@ struct ImportedSourceFile {\n     translated_source_file: Lrc<syntax_pos::SourceFile>,\n }\n \n-crate struct DecodeContext<'a, 'tcx> {\n+pub(super) struct DecodeContext<'a, 'tcx> {\n     opaque: opaque::Decoder<'a>,\n     cdata: Option<&'a CrateMetadata>,\n     sess: Option<&'tcx Session>,\n@@ -142,7 +142,7 @@ crate struct DecodeContext<'a, 'tcx> {\n }\n \n /// Abstract over the various ways one can create metadata decoders.\n-crate trait Metadata<'a, 'tcx>: Copy {\n+pub(super) trait Metadata<'a, 'tcx>: Copy {\n     fn raw_bytes(self) -> &'a [u8];\n     fn cdata(self) -> Option<&'a CrateMetadata> { None }\n     fn sess(self) -> Option<&'tcx Session> { None }\n@@ -218,15 +218,15 @@ impl<'a, 'tcx> Metadata<'a, 'tcx> for (&'a CrateMetadata, TyCtxt<'tcx>) {\n }\n \n impl<'a, 'tcx, T: Encodable + Decodable> Lazy<T> {\n-    crate fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {\n+    fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {\n         let mut dcx = metadata.decoder(self.position.get());\n         dcx.lazy_state = LazyState::NodeStart(self.position);\n         T::decode(&mut dcx).unwrap()\n     }\n }\n \n impl<'a: 'x, 'tcx: 'x, 'x, T: Encodable + Decodable> Lazy<[T]> {\n-    crate fn decode<M: Metadata<'a, 'tcx>>(\n+    fn decode<M: Metadata<'a, 'tcx>>(\n         self,\n         metadata: M,\n     ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {\n@@ -553,6 +553,19 @@ impl<'tcx> EntryKind<'tcx> {\n     }\n }\n \n+impl CrateRoot<'_> {\n+    crate fn is_proc_macro_crate(&self) -> bool {\n+        self.proc_macro_data.is_some()\n+    }\n+\n+    crate fn decode_crate_deps(\n+        &self,\n+        metadata: &'a MetadataBlob,\n+    ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {\n+        self.crate_deps.decode(metadata)\n+    }\n+}\n+\n impl<'a, 'tcx> CrateMetadata {\n     crate fn new(\n         sess: &Session,\n@@ -595,12 +608,11 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     fn is_proc_macro_crate(&self) -> bool {\n-        self.root.proc_macro_decls_static.is_some()\n+        self.root.is_proc_macro_crate()\n     }\n \n     fn is_proc_macro(&self, id: DefIndex) -> bool {\n-        self.is_proc_macro_crate() &&\n-            self.root.proc_macro_data.unwrap().decode(self).find(|x| *x == id).is_some()\n+        self.root.proc_macro_data.and_then(|data| data.decode(self).find(|x| *x == id)).is_some()\n     }\n \n     fn maybe_kind(&self, item_id: DefIndex) -> Option<EntryKind<'tcx>> {"}, {"sha": "cb780414f15b42b2689a3fb9c968efbe4715d3dc", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/09c1c94df3b0289acbfaa60533f0322cf4ae9810/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c1c94df3b0289acbfaa60533f0322cf4ae9810/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=09c1c94df3b0289acbfaa60533f0322cf4ae9810", "patch": "@@ -51,7 +51,7 @@ crate const METADATA_HEADER: &[u8; 8] =\n \n /// Additional metadata for a `Lazy<T>` where `T` may not be `Sized`,\n /// e.g. for `Lazy<[T]>`, this is the length (count of `T` values).\n-crate trait LazyMeta {\n+trait LazyMeta {\n     type Meta: Copy + 'static;\n \n     /// Returns the minimum encoded size.\n@@ -105,7 +105,7 @@ impl<T: Encodable> LazyMeta for [T] {\n #[must_use]\n // FIXME(#59875) the `Meta` parameter only exists to dodge\n // invariance wrt `T` (coming from the `meta: T::Meta` field).\n-crate struct Lazy<T, Meta = <T as LazyMeta>::Meta>\n+struct Lazy<T, Meta = <T as LazyMeta>::Meta>\n     where T: ?Sized + LazyMeta<Meta = Meta>,\n           Meta: 'static + Copy,\n {\n@@ -188,7 +188,7 @@ crate struct CrateRoot<'tcx> {\n     proc_macro_decls_static: Option<DefIndex>,\n     proc_macro_stability: Option<attr::Stability>,\n \n-    pub crate_deps: Lazy<[CrateDep]>,\n+    crate_deps: Lazy<[CrateDep]>,\n     dylib_dependency_formats: Lazy<[Option<LinkagePreference>]>,\n     lib_features: Lazy<[(Symbol, Option<Symbol>)]>,\n     lang_items: Lazy<[(DefIndex, usize)]>,\n@@ -204,9 +204,8 @@ crate struct CrateRoot<'tcx> {\n \n     per_def: LazyPerDefTables<'tcx>,\n \n-    /// The DefIndex's of any proc macros delcared by\n-    /// this crate\n-    pub proc_macro_data: Option<Lazy<[DefIndex]>>,\n+    /// The DefIndex's of any proc macros delcared by this crate.\n+    proc_macro_data: Option<Lazy<[DefIndex]>>,\n \n     compiler_builtins: bool,\n     pub needs_allocator: bool,"}]}