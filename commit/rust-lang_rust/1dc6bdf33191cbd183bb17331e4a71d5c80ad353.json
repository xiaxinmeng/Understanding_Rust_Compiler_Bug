{"sha": "1dc6bdf33191cbd183bb17331e4a71d5c80ad353", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYzZiZGYzMzE5MWNiZDE4M2JiMTczMzFlNGE3MWQ1YzgwYWQzNTM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-05T01:22:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-05T01:22:43Z"}, "message": "rustc: Don't recurse forever if type glue needs to refer to its own type descriptor", "tree": {"sha": "0bbbd1b094752fc8b958eb401bbf7d3b5f3b9c69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bbbd1b094752fc8b958eb401bbf7d3b5f3b9c69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc6bdf33191cbd183bb17331e4a71d5c80ad353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc6bdf33191cbd183bb17331e4a71d5c80ad353", "html_url": "https://github.com/rust-lang/rust/commit/1dc6bdf33191cbd183bb17331e4a71d5c80ad353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc6bdf33191cbd183bb17331e4a71d5c80ad353/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aa74828e36f2b57822317e9c99435993633a424", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa74828e36f2b57822317e9c99435993633a424", "html_url": "https://github.com/rust-lang/rust/commit/0aa74828e36f2b57822317e9c99435993633a424"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "9b7a501c52ef5372c4b1740196a1fd00aae50c45", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1dc6bdf33191cbd183bb17331e4a71d5c80ad353/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc6bdf33191cbd183bb17331e4a71d5c80ad353/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1dc6bdf33191cbd183bb17331e4a71d5c80ad353", "patch": "@@ -60,6 +60,10 @@ type glue_fns = rec(ValueRef activate_glue,\n                     ValueRef bzero_glue,\n                     ValueRef vec_append_glue);\n \n+type tydesc_info = rec(ValueRef tydesc,\n+                       ValueRef take_glue,\n+                       ValueRef drop_glue);\n+\n state type crate_ctxt = rec(session.session sess,\n                             ModuleRef llmod,\n                             target_data td,\n@@ -78,7 +82,7 @@ state type crate_ctxt = rec(session.session sess,\n                             hashmap[ast.def_id, ValueRef] fn_pairs,\n                             hashmap[ast.def_id, ValueRef] consts,\n                             hashmap[ast.def_id,()] obj_methods,\n-                            hashmap[@ty.t, ValueRef] tydescs,\n+                            hashmap[@ty.t, @tydesc_info] tydescs,\n                             vec[ast.ty_param] obj_typarams,\n                             vec[ast.obj_field] obj_fields,\n                             @glue_fns glues,\n@@ -1291,10 +1295,11 @@ fn get_tydesc(&@block_ctxt cx, @ty.t t) -> result {\n         check (n_params == _vec.len[ValueRef](tys._1));\n \n         if (!cx.fcx.ccx.tydescs.contains_key(t)) {\n-            make_tydesc(cx.fcx.ccx, t, tys._0);\n+            declare_tydesc(cx.fcx.ccx, t);\n+            define_tydesc(cx.fcx.ccx, t, tys._0);\n         }\n \n-        auto root = cx.fcx.ccx.tydescs.get(t);\n+        auto root = cx.fcx.ccx.tydescs.get(t).tydesc;\n \n         auto tydescs = cx.build.Alloca(T_array(T_ptr(T_tydesc(cx.fcx.ccx.tn)),\n                                                n_params));\n@@ -1329,16 +1334,18 @@ fn get_tydesc(&@block_ctxt cx, @ty.t t) -> result {\n     // Otherwise, generate a tydesc if necessary, and return it.\n     if (!cx.fcx.ccx.tydescs.contains_key(t)) {\n         let vec[ast.def_id] defs = vec();\n-        make_tydesc(cx.fcx.ccx, t, defs);\n+        declare_tydesc(cx.fcx.ccx, t);\n+        define_tydesc(cx.fcx.ccx, t, defs);\n     }\n-    ret res(cx, cx.fcx.ccx.tydescs.get(t));\n+    ret res(cx, cx.fcx.ccx.tydescs.get(t).tydesc);\n }\n \n-fn make_tydesc(@crate_ctxt cx, @ty.t t, vec[ast.def_id] typaram_defs) {\n-    auto tg = make_take_glue;\n-    auto take_glue = make_generic_glue(cx, t, \"take\", tg, typaram_defs);\n-    auto dg = make_drop_glue;\n-    auto drop_glue = make_generic_glue(cx, t, \"drop\", dg, typaram_defs);\n+// Generates the declaration for (but doesn't fill in) a type descriptor. This\n+// needs to be separate from make_tydesc() below, because sometimes type glue\n+// functions needs to refer to their own type descriptors.\n+fn declare_tydesc(@crate_ctxt cx, @ty.t t) {\n+    auto take_glue = declare_generic_glue(cx, t, \"take\");\n+    auto drop_glue = declare_generic_glue(cx, t, \"drop\");\n \n     auto llsize;\n     auto llalign;\n@@ -1383,18 +1390,40 @@ fn make_tydesc(@crate_ctxt cx, @ty.t t, vec[ast.def_id] typaram_defs) {\n     llvm.LLVMSetGlobalConstant(gvar, True);\n     llvm.LLVMSetLinkage(gvar, lib.llvm.LLVMPrivateLinkage\n                         as llvm.Linkage);\n-    cx.tydescs.insert(t, gvar);\n+\n+    auto info = rec(\n+        tydesc=gvar,\n+        take_glue=take_glue,\n+        drop_glue=drop_glue\n+    );\n+\n+    cx.tydescs.insert(t, @info);\n }\n \n-fn make_generic_glue(@crate_ctxt cx, @ty.t t, str name,\n-                     val_and_ty_fn helper,\n-                     vec[ast.def_id] typaram_defs) -> ValueRef {\n+// declare_tydesc() above must have been called first.\n+fn define_tydesc(@crate_ctxt cx, @ty.t t, vec[ast.def_id] typaram_defs) {\n+    auto info = cx.tydescs.get(t);\n+    auto gvar = info.tydesc;\n+\n+    auto tg = make_take_glue;\n+    auto take_glue = make_generic_glue(cx, t, info.take_glue, tg,\n+                                       typaram_defs);\n+    auto dg = make_drop_glue;\n+    auto drop_glue = make_generic_glue(cx, t, info.drop_glue, dg,\n+                                       typaram_defs);\n+}\n+\n+fn declare_generic_glue(@crate_ctxt cx, @ty.t t, str name) -> ValueRef {\n     auto llfnty = T_glue_fn(cx.tn);\n \n     auto fn_name = cx.names.next(\"_rust_\" + name) + sep() + ty.ty_to_str(t);\n     fn_name = sanitize(fn_name);\n-    auto llfn = decl_fastcall_fn(cx.llmod, fn_name, llfnty);\n+    ret decl_fastcall_fn(cx.llmod, fn_name, llfnty);\n+}\n \n+fn make_generic_glue(@crate_ctxt cx, @ty.t t, ValueRef llfn,\n+                     val_and_ty_fn helper,\n+                     vec[ast.def_id] typaram_defs) -> ValueRef {\n     auto fcx = new_fn_ctxt(cx, llfn);\n     auto bcx = new_top_block_ctxt(fcx);\n \n@@ -5508,7 +5537,7 @@ fn trans_crate(session.session sess, @ast.crate crate, str output,\n     auto hasher = ty.hash_ty;\n     auto eqer = ty.eq_ty;\n     auto tag_sizes = map.mk_hashmap[@ty.t,uint](hasher, eqer);\n-    auto tydescs = map.mk_hashmap[@ty.t,ValueRef](hasher, eqer);\n+    auto tydescs = map.mk_hashmap[@ty.t,@tydesc_info](hasher, eqer);\n     let vec[ast.ty_param] obj_typarams = vec();\n     let vec[ast.obj_field] obj_fields = vec();\n "}]}