{"sha": "bd334984e217235b2b2089f3008e1d4be79b6deb", "node_id": "C_kwDOAAsO6NoAKGJkMzM0OTg0ZTIxNzIzNWIyYjIwODlmMzAwOGUxZDRiZTc5YjZkZWI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-16T22:07:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-16T22:07:23Z"}, "message": "Rollup merge of #95346 - Aaron1011:stablize-const-extern-fn, r=pnkfelix\n\nStablize `const_extern_fn` for \"Rust\" and \"C\"\n\nAll other ABIs are left unstable for now.\n\ncc #64926", "tree": {"sha": "4c54f2f667a0444dc89204264e473fffc3f7d601", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c54f2f667a0444dc89204264e473fffc3f7d601"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd334984e217235b2b2089f3008e1d4be79b6deb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiWz4bCRBK7hj4Ov3rIwAAHf0IAFF24DEhqtVl0OKjv80sx+tv\nSNv40aAHTAdMy0EeHjzNB239Ku06QTbsArJ5KZMzfLZUrnze2C/LcvPcWlcBtP8Q\nKsmw38JWz43w6wn2XywosR8G60hyIWtCVv6yZQpQSx5Oaa8y/7Clltf5Qjm8/lIk\nTDKPdxDuULoM+zfrfE80iBDkksXzWACxC9QvnCk9fwxhkXVM0guG/D1cY4zc+z6d\n69BoXE9Eu4JEBG4eVLwNyPhQzr+qUFSYdIm+0oWiKJMsFdA4MCTa4I5RmJKnuduW\nx+Gn7tPo0R/l+fPbZFtx6SzqsgEibJhKULvtSw964CuJaroymJeBQyumToap4DA=\n=PaOh\n-----END PGP SIGNATURE-----\n", "payload": "tree 4c54f2f667a0444dc89204264e473fffc3f7d601\nparent 878c7833f6c1ff10e2fd89074e5bd4ef5ff15936\nparent 8035796b9aabf1aa2a711694e40f00fe8a822f40\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650146843 +0200\ncommitter GitHub <noreply@github.com> 1650146843 +0200\n\nRollup merge of #95346 - Aaron1011:stablize-const-extern-fn, r=pnkfelix\n\nStablize `const_extern_fn` for \"Rust\" and \"C\"\n\nAll other ABIs are left unstable for now.\n\ncc #64926\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd334984e217235b2b2089f3008e1d4be79b6deb", "html_url": "https://github.com/rust-lang/rust/commit/bd334984e217235b2b2089f3008e1d4be79b6deb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd334984e217235b2b2089f3008e1d4be79b6deb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "878c7833f6c1ff10e2fd89074e5bd4ef5ff15936", "url": "https://api.github.com/repos/rust-lang/rust/commits/878c7833f6c1ff10e2fd89074e5bd4ef5ff15936", "html_url": "https://github.com/rust-lang/rust/commit/878c7833f6c1ff10e2fd89074e5bd4ef5ff15936"}, {"sha": "8035796b9aabf1aa2a711694e40f00fe8a822f40", "url": "https://api.github.com/repos/rust-lang/rust/commits/8035796b9aabf1aa2a711694e40f00fe8a822f40", "html_url": "https://github.com/rust-lang/rust/commit/8035796b9aabf1aa2a711694e40f00fe8a822f40"}], "stats": {"total": 111, "additions": 42, "deletions": 69}, "files": [{"sha": "649af48e48adf624311ba4f4e37a6ef2c69c6783", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bd334984e217235b2b2089f3008e1d4be79b6deb/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd334984e217235b2b2089f3008e1d4be79b6deb/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=bd334984e217235b2b2089f3008e1d4be79b6deb", "patch": "@@ -58,9 +58,22 @@ struct PostExpansionVisitor<'a> {\n }\n \n impl<'a> PostExpansionVisitor<'a> {\n-    fn check_abi(&self, abi: ast::StrLit) {\n+    fn check_abi(&self, abi: ast::StrLit, constness: ast::Const) {\n         let ast::StrLit { symbol_unescaped, span, .. } = abi;\n \n+        if let ast::Const::Yes(_) = constness {\n+            match symbol_unescaped.as_str() {\n+                // Stable\n+                \"Rust\" | \"C\" => {}\n+                abi => gate_feature_post!(\n+                    &self,\n+                    const_extern_fn,\n+                    span,\n+                    &format!(\"`{}` as a `const fn` ABI is unstable\", abi)\n+                ),\n+            }\n+        }\n+\n         match symbol_unescaped.as_str() {\n             // Stable\n             \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n@@ -261,9 +274,9 @@ impl<'a> PostExpansionVisitor<'a> {\n         }\n     }\n \n-    fn check_extern(&self, ext: ast::Extern) {\n+    fn check_extern(&self, ext: ast::Extern, constness: ast::Const) {\n         if let ast::Extern::Explicit(abi) = ext {\n-            self.check_abi(abi);\n+            self.check_abi(abi, constness);\n         }\n     }\n \n@@ -437,7 +450,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         match i.kind {\n             ast::ItemKind::ForeignMod(ref foreign_module) => {\n                 if let Some(abi) = foreign_module.abi {\n-                    self.check_abi(abi);\n+                    self.check_abi(abi, ast::Const::No);\n                 }\n             }\n \n@@ -560,7 +573,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_ty(&mut self, ty: &'a ast::Ty) {\n         match ty.kind {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n-                self.check_extern(bare_fn_ty.ext);\n+                // Function pointers cannot be `const`\n+                self.check_extern(bare_fn_ty.ext, ast::Const::No);\n             }\n             ast::TyKind::Never => {\n                 gate_feature_post!(&self, never_type, ty.span, \"the `!` type is experimental\");\n@@ -660,18 +674,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_fn(&mut self, fn_kind: FnKind<'a>, span: Span, _: NodeId) {\n         if let Some(header) = fn_kind.header() {\n             // Stability of const fn methods are covered in `visit_assoc_item` below.\n-            self.check_extern(header.ext);\n-\n-            if let (ast::Const::Yes(_), ast::Extern::Implicit)\n-            | (ast::Const::Yes(_), ast::Extern::Explicit(_)) = (header.constness, header.ext)\n-            {\n-                gate_feature_post!(\n-                    &self,\n-                    const_extern_fn,\n-                    span,\n-                    \"`const extern fn` definitions are unstable\"\n-                );\n-            }\n+            self.check_extern(header.ext, header.constness);\n         }\n \n         if fn_kind.ctxt() != Some(FnCtxt::Foreign) && fn_kind.decl().c_variadic() {"}, {"sha": "bb387064e27fe0e583c16f63a565cf8e96d94383", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd334984e217235b2b2089f3008e1d4be79b6deb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd334984e217235b2b2089f3008e1d4be79b6deb/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=bd334984e217235b2b2089f3008e1d4be79b6deb", "patch": "@@ -523,6 +523,9 @@ impl<'a> Parser<'a> {\n         let decl = self.parse_fn_decl(|_| false, AllowPlus::No, recover_return_sign)?;\n         let whole_span = lo.to(self.prev_token.span);\n         if let ast::Const::Yes(span) = constness {\n+            // If we ever start to allow `const fn()`, then update\n+            // feature gating for `#![feature(const_extern_fn)]` to\n+            // cover it.\n             self.error_fn_ptr_bad_qualifier(whole_span, span, \"const\");\n         }\n         if let ast::Async::Yes { span, .. } = asyncness {"}, {"sha": "f7bed91b03787bd899c01c2189ae16f28f7e31e1", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bd334984e217235b2b2089f3008e1d4be79b6deb/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd334984e217235b2b2089f3008e1d4be79b6deb/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.rs?ref=bd334984e217235b2b2089f3008e1d4be79b6deb", "patch": "@@ -1,10 +1,13 @@\n-// Check that `const extern fn` and `const unsafe extern fn` are feature-gated.\n+// Check that `const extern fn` and `const unsafe extern fn` are feature-gated\n+// for certain ABIs.\n \n-const extern fn foo1() {} //~ ERROR `const extern fn` definitions are unstable\n-const extern \"C\" fn foo2() {} //~ ERROR `const extern fn` definitions are unstable\n-const extern \"Rust\" fn foo3() {} //~ ERROR `const extern fn` definitions are unstable\n-const unsafe extern fn bar1() {} //~ ERROR `const extern fn` definitions are unstable\n-const unsafe extern \"C\" fn bar2() {} //~ ERROR `const extern fn` definitions are unstable\n-const unsafe extern \"Rust\" fn bar3() {} //~ ERROR `const extern fn` definitions are unstable\n+const extern fn foo1() {}\n+const extern \"C\" fn foo2() {}\n+const extern \"Rust\" fn foo3() {}\n+const extern \"cdecl\" fn foo4() {} //~ ERROR `cdecl` as a `const fn` ABI is unstable\n+const unsafe extern fn bar1() {}\n+const unsafe extern \"C\" fn bar2() {}\n+const unsafe extern \"Rust\" fn bar3() {}\n+const unsafe extern \"cdecl\" fn bar4() {} //~ ERROR `cdecl` as a `const fn` ABI is unstable\n \n fn main() {}"}, {"sha": "f8c3107bd221aa40b2f56682e3a871748b60ecb0", "filename": "src/test/ui/consts/const-extern-fn/feature-gate-const_extern_fn.stderr", "status": "modified", "additions": 9, "deletions": 45, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bd334984e217235b2b2089f3008e1d4be79b6deb/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd334984e217235b2b2089f3008e1d4be79b6deb/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Ffeature-gate-const_extern_fn.stderr?ref=bd334984e217235b2b2089f3008e1d4be79b6deb", "patch": "@@ -1,57 +1,21 @@\n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:3:1\n+error[E0658]: `cdecl` as a `const fn` ABI is unstable\n+  --> $DIR/feature-gate-const_extern_fn.rs:7:14\n    |\n-LL | const extern fn foo1() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const extern \"cdecl\" fn foo4() {}\n+   |              ^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:4:1\n+error[E0658]: `cdecl` as a `const fn` ABI is unstable\n+  --> $DIR/feature-gate-const_extern_fn.rs:11:21\n    |\n-LL | const extern \"C\" fn foo2() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | const unsafe extern \"cdecl\" fn bar4() {}\n+   |                     ^^^^^^^\n    |\n    = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n    = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n \n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:5:1\n-   |\n-LL | const extern \"Rust\" fn foo3() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:6:1\n-   |\n-LL | const unsafe extern fn bar1() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:7:1\n-   |\n-LL | const unsafe extern \"C\" fn bar2() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error[E0658]: `const extern fn` definitions are unstable\n-  --> $DIR/feature-gate-const_extern_fn.rs:8:1\n-   |\n-LL | const unsafe extern \"Rust\" fn bar3() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #64926 <https://github.com/rust-lang/rust/issues/64926> for more information\n-   = help: add `#![feature(const_extern_fn)]` to the crate attributes to enable\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}