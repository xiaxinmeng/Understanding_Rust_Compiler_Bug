{"sha": "848a7e692102643d99bb208b5a64199b6d6d87a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0OGE3ZTY5MjEwMjY0M2Q5OWJiMjA4YjVhNjQxOTliNmQ2ZDg3YTE=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-21T06:08:06Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-25T00:34:18Z"}, "message": "Enhance and move information about macro debugging\n\nFixes #22424.", "tree": {"sha": "92ffb345a6c3d41dd44bfe4bc3781fc504693a0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ffb345a6c3d41dd44bfe4bc3781fc504693a0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/848a7e692102643d99bb208b5a64199b6d6d87a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/848a7e692102643d99bb208b5a64199b6d6d87a1", "html_url": "https://github.com/rust-lang/rust/commit/848a7e692102643d99bb208b5a64199b6d6d87a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/848a7e692102643d99bb208b5a64199b6d6d87a1/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df0865754e56d3d804df3b2bb15d405e344e2015", "url": "https://api.github.com/repos/rust-lang/rust/commits/df0865754e56d3d804df3b2bb15d405e344e2015", "html_url": "https://github.com/rust-lang/rust/commit/df0865754e56d3d804df3b2bb15d405e344e2015"}], "stats": {"total": 62, "additions": 39, "deletions": 23}, "files": [{"sha": "781b40be768c86f03b05ce809ce1a9c7aead5145", "filename": "src/doc/reference.md", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/848a7e692102643d99bb208b5a64199b6d6d87a1/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/848a7e692102643d99bb208b5a64199b6d6d87a1/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=848a7e692102643d99bb208b5a64199b6d6d87a1", "patch": "@@ -731,15 +731,20 @@ Rust syntax is restricted in two ways:\n    pairs when they occur at the beginning of, or immediately after, a `$(...)*`;\n    requiring a distinctive token in front can solve the problem.\n \n-## Syntax extensions useful for the macro author\n+## Syntax extensions useful in macros\n \n-* `log_syntax!` : print out the arguments at compile time\n-* `trace_macros!` : supply `true` or `false` to enable or disable macro expansion logging\n * `stringify!` : turn the identifier argument into a string literal\n * `concat!` : concatenates a comma-separated list of literals\n-* `concat_idents!` : create a new identifier by concatenating the arguments\n \n-The following attributes are used for quasiquoting in procedural macros:\n+## Syntax extensions for macro debugging\n+\n+* `log_syntax!` : print out the arguments at compile time\n+* `trace_macros!` : supply `true` or `false` to enable or disable macro expansion logging\n+\n+## Quasiquoting\n+\n+The following syntax extensions are used for quasiquoting Rust syntax trees,\n+usually in [procedural macros](book/plugins.html#syntax-extensions):\n \n * `quote_expr!`\n * `quote_item!`\n@@ -748,6 +753,8 @@ The following attributes are used for quasiquoting in procedural macros:\n * `quote_tokens!`\n * `quote_ty!`\n \n+Documentation is very limited at the moment.\n+\n # Crates and source files\n \n Rust is a *compiled* language. Its semantics obey a *phase distinction*"}, {"sha": "a226e4d0bf911ac97b57c420129c3ff515bb53aa", "filename": "src/doc/trpl/advanced-macros.md", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/848a7e692102643d99bb208b5a64199b6d6d87a1/src%2Fdoc%2Ftrpl%2Fadvanced-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/848a7e692102643d99bb208b5a64199b6d6d87a1/src%2Fdoc%2Ftrpl%2Fadvanced-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fadvanced-macros.md?ref=848a7e692102643d99bb208b5a64199b6d6d87a1", "patch": "@@ -239,19 +239,11 @@ fn main() {\n Exercise: use macros to reduce duplication in the above definition of the\n `bct!` macro.\n \n-# A final note\n-\n-Macros, as currently implemented, are not for the faint of heart. Even\n-ordinary syntax errors can be more difficult to debug when they occur inside a\n-macro, and errors caused by parse problems in generated code can be very\n-tricky. Invoking the `log_syntax!` macro can help elucidate intermediate\n-states, invoking `trace_macros!(true)` will automatically print those\n-intermediate states out, and passing the flag `--pretty expanded` as a\n-command-line argument to the compiler will show the result of expansion.\n+# Procedural macros\n \n If Rust's macro system can't do what you need, you may want to write a\n [compiler plugin](plugins.html) instead. Compared to `macro_rules!`\n macros, this is significantly more work, the interfaces are much less stable,\n-and the warnings about debugging apply ten-fold. In exchange you get the\n+and bugs can be much harder to track down. In exchange you get the\n flexibility of running arbitrary Rust code within the compiler. Syntax\n extension plugins are sometimes called *procedural macros* for this reason."}, {"sha": "ce48a5aeda42c7f62bf7a326afc20fba46a681c5", "filename": "src/doc/trpl/macros.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/848a7e692102643d99bb208b5a64199b6d6d87a1/src%2Fdoc%2Ftrpl%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/848a7e692102643d99bb208b5a64199b6d6d87a1/src%2Fdoc%2Ftrpl%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fmacros.md?ref=848a7e692102643d99bb208b5a64199b6d6d87a1", "patch": "@@ -405,6 +405,25 @@ fn main() {\n }\n ```\n \n+# Debugging macro code\n+\n+To see the results of expanding macros, run `rustc --pretty expanded`. The\n+output represents a whole crate, so you can also feed it back in to `rustc`,\n+which will sometimes produce better error messages than the original\n+compilation. Note that the `--pretty expanded` output may have a different\n+meaning if multiple variables of the same name (but different syntax contexts)\n+are in play in the same scope. In this case `--pretty expanded,hygiene` will\n+tell you about the syntax contexts.\n+\n+`rustc` provides two syntax extensions that help with macro debugging. For now,\n+they are unstable and require feature gates.\n+\n+* `log_syntax!(...)` will print its arguments to standard output, at compile\n+  time, and \"expand\" to nothing.\n+\n+* `trace_macros!(true)` will enable a compiler message every time a macro is\n+  expanded. Use `trace_macros!(false)` later in expansion to turn it off.\n+\n # Further reading\n \n The [advanced macros chapter][] goes into more detail about macro syntax. It"}, {"sha": "f609a0a918aa7628a6dc05372da67c168dd7335f", "filename": "src/doc/trpl/plugins.md", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/848a7e692102643d99bb208b5a64199b6d6d87a1/src%2Fdoc%2Ftrpl%2Fplugins.md", "raw_url": "https://github.com/rust-lang/rust/raw/848a7e692102643d99bb208b5a64199b6d6d87a1/src%2Fdoc%2Ftrpl%2Fplugins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fplugins.md?ref=848a7e692102643d99bb208b5a64199b6d6d87a1", "patch": "@@ -146,14 +146,7 @@ a more involved macro example, see\n \n ## Tips and tricks\n \n-To see the results of expanding syntax extensions, run\n-`rustc --pretty expanded`. The output represents a whole crate, so you\n-can also feed it back in to `rustc`, which will sometimes produce better\n-error messages than the original compilation. Note that the\n-`--pretty expanded` output may have a different meaning if multiple\n-variables of the same name (but different syntax contexts) are in play\n-in the same scope. In this case `--pretty expanded,hygiene` will tell\n-you about the syntax contexts.\n+Some of the [macro debugging tips](macros.html#debugging-macro-code) are applicable.\n \n You can use [`syntax::parse`](../syntax/parse/index.html) to turn token trees into\n higher-level syntax elements like expressions:\n@@ -184,6 +177,11 @@ and return\n [`DummyResult`](../syntax/ext/base/struct.DummyResult.html),\n so that the compiler can continue and find further errors.\n \n+To print syntax fragments for debugging, you can use\n+[`span_note`](../syntax/ext/base/struct.ExtCtxt.html#method.span_note) together\n+with\n+[`syntax::print::pprust::*_to_string`](http://doc.rust-lang.org/syntax/print/pprust/index.html#functions).\n+\n The example above produced an integer literal using\n [`AstBuilder::expr_uint`](../syntax/ext/build/trait.AstBuilder.html#tymethod.expr_uint).\n As an alternative to the `AstBuilder` trait, `libsyntax` provides a set of"}]}