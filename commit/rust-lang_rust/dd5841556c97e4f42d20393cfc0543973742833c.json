{"sha": "dd5841556c97e4f42d20393cfc0543973742833c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNTg0MTU1NmM5N2U0ZjQyZDIwMzkzY2ZjMDU0Mzk3Mzc0MjgzM2M=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T22:51:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T22:51:34Z"}, "message": "Smarter introduce variable\n\nUse field init shorthand", "tree": {"sha": "f45c7562ed78fac5bc81c77750a4e9e860f5e06d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f45c7562ed78fac5bc81c77750a4e9e860f5e06d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd5841556c97e4f42d20393cfc0543973742833c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5841556c97e4f42d20393cfc0543973742833c", "html_url": "https://github.com/rust-lang/rust/commit/dd5841556c97e4f42d20393cfc0543973742833c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd5841556c97e4f42d20393cfc0543973742833c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70f7dc10c622e0ffec4b264235ad203b4047171", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70f7dc10c622e0ffec4b264235ad203b4047171", "html_url": "https://github.com/rust-lang/rust/commit/e70f7dc10c622e0ffec4b264235ad203b4047171"}], "stats": {"total": 57, "additions": 49, "deletions": 8}, "files": [{"sha": "96affe49d32dcf88f98cf79070c7267ddd53d893", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/dd5841556c97e4f42d20393cfc0543973742833c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd5841556c97e4f42d20393cfc0543973742833c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=dd5841556c97e4f42d20393cfc0543973742833c", "patch": "@@ -44,12 +44,26 @@ pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Opti\n     }\n     let target = expr.syntax().text_range();\n     acc.add(AssistId(\"introduce_variable\"), \"Extract into variable\", target, move |edit| {\n+        let field_shorthand = match expr.syntax().parent().and_then(ast::RecordField::cast) {\n+            Some(field) => field.name_ref(),\n+            None => None,\n+        };\n+\n         let mut buf = String::new();\n \n+        let var_name = match &field_shorthand {\n+            Some(it) => it.to_string(),\n+            None => \"var_name\".to_string(),\n+        };\n+        let expr_range = match &field_shorthand {\n+            Some(it) => it.syntax().text_range().cover(expr.syntax().text_range()),\n+            None => expr.syntax().text_range(),\n+        };\n+\n         if wrap_in_block {\n-            buf.push_str(\"{ let var_name = \");\n+            format_to!(buf, \"{{ let {} = \", var_name);\n         } else {\n-            buf.push_str(\"let var_name = \");\n+            format_to!(buf, \"let {} = \", var_name);\n         };\n         format_to!(buf, \"{}\", expr.syntax());\n \n@@ -64,13 +78,13 @@ pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Opti\n             if full_stmt.unwrap().semicolon_token().is_none() {\n                 buf.push_str(\";\");\n             }\n-            let offset = expr.syntax().text_range();\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n-                    let snip = buf.replace(\"let var_name\", \"let $0var_name\");\n-                    edit.replace_snippet(cap, offset, snip)\n+                    let snip =\n+                        buf.replace(&format!(\"let {}\", var_name), &format!(\"let $0{}\", var_name));\n+                    edit.replace_snippet(cap, expr_range, snip)\n                 }\n-                None => edit.replace(offset, buf),\n+                None => edit.replace(expr_range, buf),\n             }\n             return;\n         }\n@@ -88,11 +102,12 @@ pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Opti\n             buf.push_str(text);\n         }\n \n-        edit.replace(expr.syntax().text_range(), \"var_name\".to_string());\n+        edit.replace(expr_range, var_name.clone());\n         let offset = anchor_stmt.text_range().start();\n         match ctx.config.snippet_cap {\n             Some(cap) => {\n-                let snip = buf.replace(\"let var_name\", \"let $0var_name\");\n+                let snip =\n+                    buf.replace(&format!(\"let {}\", var_name), &format!(\"let $0{}\", var_name));\n                 edit.insert_snippet(cap, offset, snip)\n             }\n             None => edit.insert(offset, buf),\n@@ -503,6 +518,32 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn introduce_var_field_shorthand() {\n+        check_assist(\n+            introduce_variable,\n+            r#\"\n+struct S {\n+    foo: i32\n+}\n+\n+fn main() {\n+    S { foo: <|>1 + 1<|> }\n+}\n+\"#,\n+            r#\"\n+struct S {\n+    foo: i32\n+}\n+\n+fn main() {\n+    let $0foo = 1 + 1;\n+    S { foo }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn test_introduce_var_for_return_not_applicable() {\n         check_assist_not_applicable(introduce_variable, \"fn foo() { <|>return<|>; } \");"}]}