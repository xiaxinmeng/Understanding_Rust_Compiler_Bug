{"sha": "7d296c4843785f64a4246213375b21c1ab1e7462", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMjk2YzQ4NDM3ODVmNjRhNDI0NjIxMzM3NWIyMWMxYWIxZTc0NjI=", "commit": {"author": {"name": "Vitali Lovich", "email": "vlovich@google.com", "date": "2018-02-02T19:17:48Z"}, "committer": {"name": "Vitali Lovich", "email": "vlovich@google.com", "date": "2018-02-02T19:29:58Z"}, "message": "Add Condvar APIs not susceptible to spurious wake\n\nProvide wait_until and wait_timeout_until helper wrappers that aren't\nsusceptible to spurious wake.", "tree": {"sha": "ddd8fa0ffde2ae31ed8f368036c518adc4818526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddd8fa0ffde2ae31ed8f368036c518adc4818526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d296c4843785f64a4246213375b21c1ab1e7462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d296c4843785f64a4246213375b21c1ab1e7462", "html_url": "https://github.com/rust-lang/rust/commit/7d296c4843785f64a4246213375b21c1ab1e7462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d296c4843785f64a4246213375b21c1ab1e7462/comments", "author": null, "committer": null, "parents": [{"sha": "616b66dca25a67321b1654e5a65acc6337d63cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/616b66dca25a67321b1654e5a65acc6337d63cf4", "html_url": "https://github.com/rust-lang/rust/commit/616b66dca25a67321b1654e5a65acc6337d63cf4"}], "stats": {"total": 207, "additions": 205, "deletions": 2}, "files": [{"sha": "1e5beaaa342759ab2271fcd32e5947871488ad84", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 205, "deletions": 2, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/7d296c4843785f64a4246213375b21c1ab1e7462/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d296c4843785f64a4246213375b21c1ab1e7462/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=7d296c4843785f64a4246213375b21c1ab1e7462", "patch": "@@ -14,7 +14,7 @@ use sync::{mutex, MutexGuard, PoisonError};\n use sys_common::condvar as sys;\n use sys_common::mutex as sys_mutex;\n use sys_common::poison::{self, LockResult};\n-use time::Duration;\n+use time::{Duration, Instant};\n \n /// A type indicating whether a timed wait on a condition variable returned\n /// due to a time out or not.\n@@ -219,6 +219,61 @@ impl Condvar {\n         }\n     }\n \n+    /// Blocks the current thread until this condition variable receives a\n+    /// notification and the required condition is met. There are no spurious\n+    /// wakeups when calling this.\n+    ///\n+    /// This function will atomically unlock the mutex specified (represented by\n+    /// `guard`) and block the current thread. This means that any calls\n+    /// to [`notify_one`] or [`notify_all`] which happen logically after the\n+    /// mutex is unlocked are candidates to wake this thread up. When this\n+    /// function call returns, the lock specified will have been re-acquired.\n+    ///\n+    /// # Errors\n+    ///\n+    /// This function will return an error if the mutex being waited on is\n+    /// poisoned when this thread re-acquires the lock. For more information,\n+    /// see information about [poisoning] on the [`Mutex`] type.\n+    ///\n+    /// [`notify_one`]: #method.notify_one\n+    /// [`notify_all`]: #method.notify_all\n+    /// [poisoning]: ../sync/struct.Mutex.html#poisoning\n+    /// [`Mutex`]: ../sync/struct.Mutex.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::{Arc, Mutex, Condvar};\n+    /// use std::thread;\n+    ///\n+    /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+    /// let pair2 = pair.clone();\n+    ///\n+    /// thread::spawn(move|| {\n+    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let mut started = lock.lock().unwrap();\n+    ///     *started = true;\n+    ///     // We notify the condvar that the value has changed.\n+    ///     cvar.notify_one();\n+    /// });\n+    ///\n+    /// // Wait for the thread to start up.\n+    /// let &(ref lock, ref cvar) = &*pair;\n+    /// // As long as the value inside the `Mutex` is false, we wait.\n+    /// cvar.wait_until(lock.lock().unwrap(), |ref started| { started });\n+    /// ```\n+    #[stable(feature = \"wait_until\", since = \"1.24\")]\n+    pub fn wait_until<'a, T, F>(&self, mut guard: MutexGuard<'a, T>,\n+                                mut condition: F)\n+                                -> LockResult<MutexGuard<'a, T>>\n+                                where F: FnMut(&T) -> bool {\n+        while !condition(&*guard) {\n+            guard = self.wait(guard)?;\n+        }\n+        Ok(guard)\n+    }\n+\n+\n     /// Waits on this condition variable for a notification, timing out after a\n     /// specified duration.\n     ///\n@@ -293,7 +348,15 @@ impl Condvar {\n     ///\n     /// Note that the best effort is made to ensure that the time waited is\n     /// measured with a monotonic clock, and not affected by the changes made to\n-    /// the system time.\n+    /// the system time.  This function is susceptible to spurious wakeups.\n+    /// Condition variables normally have a boolean predicate associated with\n+    /// them, and the predicate must always be checked each time this function\n+    /// returns to protect against spurious wakeups.  Additionally, it is\n+    /// typically desirable for the time-out to not exceed some duration in\n+    /// spite of spurious wakes, thus the sleep-duration is decremented by the\n+    /// amount slept.  Alternatively, use the `wait_timeout_until` method\n+    /// to wait until a condition is met with a total time-out regardless\n+    /// of spurious wakes.\n     ///\n     /// The returned [`WaitTimeoutResult`] value indicates if the timeout is\n     /// known to have elapsed.\n@@ -302,6 +365,7 @@ impl Condvar {\n     /// returns, regardless of whether the timeout elapsed or not.\n     ///\n     /// [`wait`]: #method.wait\n+    /// [`wait_timeout_until`]: #method.wait_timeout_until\n     /// [`WaitTimeoutResult`]: struct.WaitTimeoutResult.html\n     ///\n     /// # Examples\n@@ -353,6 +417,76 @@ impl Condvar {\n         }\n     }\n \n+    /// Waits on this condition variable for a notification, timing out after a\n+    /// specified duration.\n+    ///\n+    /// The semantics of this function are equivalent to [`wait_until`] except\n+    /// that the thread will be blocked for roughly no longer than `dur`. This\n+    /// method should not be used for precise timing due to anomalies such as\n+    /// preemption or platform differences that may not cause the maximum\n+    /// amount of time waited to be precisely `dur`.\n+    ///\n+    /// Note that the best effort is made to ensure that the time waited is\n+    /// measured with a monotonic clock, and not affected by the changes made to\n+    /// the system time.\n+    ///\n+    /// The returned [`WaitTimeoutResult`] value indicates if the timeout is\n+    /// known to have elapsed without the condition being met.\n+    ///\n+    /// Like [`wait_until`], the lock specified will be re-acquired when this\n+    /// function returns, regardless of whether the timeout elapsed or not.\n+    ///\n+    /// [`wait_until`]: #method.wait_until\n+    /// [`wait_timeout`]: #method.wait_timeout\n+    /// [`WaitTimeoutResult`]: struct.WaitTimeoutResult.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::{Arc, Mutex, Condvar};\n+    /// use std::thread;\n+    /// use std::time::Duration;\n+    ///\n+    /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+    /// let pair2 = pair.clone();\n+    ///\n+    /// thread::spawn(move|| {\n+    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let mut started = lock.lock().unwrap();\n+    ///     *started = true;\n+    ///     // We notify the condvar that the value has changed.\n+    ///     cvar.notify_one();\n+    /// });\n+    ///\n+    /// // wait for the thread to start up\n+    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let result = cvar.wait_timeout_until(lock, Duration::from_millis(100), |started| {\n+    ///     started\n+    /// }).unwrap();\n+    /// if result.1.timed_out() {\n+    ///     // timed-out without the condition ever evaluating to true.\n+    /// }\n+    /// // access the locked mutex via result.0\n+    /// ```\n+    #[stable(feature = \"wait_timeout_until\", since = \"1.24\")]\n+    pub fn wait_timeout_until<'a, T, F>(&self, mut guard: MutexGuard<'a, T>,\n+                                        mut dur: Duration, mut condition: F)\n+                                        -> LockResult<(MutexGuard<'a, T>, WaitTimeoutResult)>\n+                                        where F: FnMut(&T) -> bool {\n+        let timed_out = Duration::new(0, 0);\n+        loop {\n+            if !condition(&*guard) {\n+                return Ok((guard, WaitTimeoutResult(false)));\n+            } else if dur == timed_out {\n+                return Ok((guard, WaitTimeoutResult(false)));\n+            }\n+            let wait_timer = Instant::now();\n+            let wait_result = self.wait_timeout(guard, dur)?;\n+            dur = dur.checked_sub(wait_timer.elapsed()).unwrap_or(timed_out);\n+            guard = wait_result.0;\n+        }\n+    }\n+\n     /// Wakes up one blocked thread on this condvar.\n     ///\n     /// If there is a blocked thread on this condition variable, then it will\n@@ -546,6 +680,29 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n+    fn wait_until() {\n+        let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+        let pair2 = pair.clone();\n+\n+        // Inside of our lock, spawn a new thread, and then wait for it to start.\n+        thread::spawn(move|| {\n+            let &(ref lock, ref cvar) = &*pair2;\n+            let mut started = lock.lock().unwrap();\n+            *started = true;\n+            // We notify the condvar that the value has changed.\n+            cvar.notify_one();\n+        });\n+\n+        // Wait for the thread to start up.\n+        let &(ref lock, ref cvar) = &*pair;\n+        let guard = cvar.wait_until(lock.lock().unwrap(), |started| {\n+            started\n+        });\n+        assert!(*guard);\n+    }\n+\n     #[test]\n     #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn wait_timeout_wait() {\n@@ -565,6 +722,52 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n+    fn wait_timeout_until_wait() {\n+        let m = Arc::new(Mutex::new(()));\n+        let c = Arc::new(Condvar::new());\n+\n+        let g = m.lock().unwrap();\n+        let (_g, wait) = c.wait_timeout_until(g, Duration::from_millis(1), || { false }).unwrap();\n+        // no spurious wakeups. ensure it timed-out\n+        assert!(wait.timed_out());\n+    }\n+\n+    #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n+    fn wait_timeout_until_instant_satisfy() {\n+        let m = Arc::new(Mutex::new(()));\n+        let c = Arc::new(Condvar::new());\n+\n+        let g = m.lock().unwrap();\n+        let (_g, wait) = c.wait_timeout_until(g, Duration::from_millis(0), || { true }).unwrap();\n+        // ensure it didn't time-out even if we were not given any time.\n+        assert!(!wait.timed_out());\n+    }\n+\n+    #[test]\n+    #[cfg_attr(target_os = \"emscripten\", ignore)]\n+    fn wait_timeout_until_wake() {\n+        let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+        let pair_copy = pair.clone();\n+\n+        let g = m.lock().unwrap();\n+        let t = thread::spawn(move || {\n+            let &(ref lock, ref cvar) = &*pair2;\n+            let mut started = lock.lock().unwrap();\n+            thread::sleep(Duration::from_millis(1));\n+            started = true;\n+            cvar.notify_one();\n+        });\n+        let (g2, wait) = c.wait_timeout_until(g, Duration::from_millis(u64::MAX), |&notified| {\n+            notified\n+        }).unwrap();\n+        // ensure it didn't time-out even if we were not given any time.\n+        assert!(!wait.timed_out());\n+        assert!(*g2);\n+    }\n+\n     #[test]\n     #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn wait_timeout_wake() {"}]}