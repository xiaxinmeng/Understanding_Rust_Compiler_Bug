{"sha": "46687f1313454882df10609e12d47f997501962d", "node_id": "C_kwDOAAsO6NoAKDQ2Njg3ZjEzMTM0NTQ4ODJkZjEwNjA5ZTEyZDQ3Zjk5NzUwMTk2MmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-17T01:46:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-17T01:46:58Z"}, "message": "Auto merge of #7896 - surechen:fix_manual_split_once, r=camsteffen\n\nFix for #7889 and add new lint needless_splitn\n\nfixes: #7889\n1. Fix the problem of manual_split_once changing the original behavior.\n2. Add a new lint needless_splitn.\n\nchangelog: Fix the problem of manual_split_once changing the original behavior and add a new lint needless_splitn.", "tree": {"sha": "9b113e9def3b5d3078b309ecbb362f5b9248062a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b113e9def3b5d3078b309ecbb362f5b9248062a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46687f1313454882df10609e12d47f997501962d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46687f1313454882df10609e12d47f997501962d", "html_url": "https://github.com/rust-lang/rust/commit/46687f1313454882df10609e12d47f997501962d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46687f1313454882df10609e12d47f997501962d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83ad51108b43cc5605c3d91b28aa4a2069660f11", "url": "https://api.github.com/repos/rust-lang/rust/commits/83ad51108b43cc5605c3d91b28aa4a2069660f11", "html_url": "https://github.com/rust-lang/rust/commit/83ad51108b43cc5605c3d91b28aa4a2069660f11"}, {"sha": "c051656c836bf11335781afbabe1690ea7542f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/c051656c836bf11335781afbabe1690ea7542f49", "html_url": "https://github.com/rust-lang/rust/commit/c051656c836bf11335781afbabe1690ea7542f49"}], "stats": {"total": 319, "additions": 276, "deletions": 43}, "files": [{"sha": "f6bbcbdad89fa2f7360b9e69d4bb0b91d3543120", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -3039,6 +3039,7 @@ Released 2018-09-13\n [`needless_question_mark`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_question_mark\n [`needless_range_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n [`needless_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n+[`needless_splitn`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_splitn\n [`needless_update`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_update\n [`neg_cmp_op_on_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#neg_cmp_op_on_partial_ord\n [`neg_multiply`]: https://rust-lang.github.io/rust-clippy/master/index.html#neg_multiply"}, {"sha": "225ee3c4cc2e11b625e99807bab6c4416eb2fe09", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -159,6 +159,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::MANUAL_STR_REPEAT),\n     LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n     LintId::of(methods::MAP_IDENTITY),\n+    LintId::of(methods::NEEDLESS_SPLITN),\n     LintId::of(methods::NEW_RET_NO_SELF),\n     LintId::of(methods::OK_EXPECT),\n     LintId::of(methods::OPTION_AS_REF_DEREF),"}, {"sha": "dcc95cf6c074d357cc1c52467c8936edaba1dcca", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -42,6 +42,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(methods::MANUAL_FIND_MAP),\n     LintId::of(methods::MANUAL_SPLIT_ONCE),\n     LintId::of(methods::MAP_IDENTITY),\n+    LintId::of(methods::NEEDLESS_SPLITN),\n     LintId::of(methods::OPTION_AS_REF_DEREF),\n     LintId::of(methods::OPTION_FILTER_MAP),\n     LintId::of(methods::SEARCH_IS_SOME),"}, {"sha": "d931227765ff6e41a54dc92466343c9777747b42", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -293,6 +293,7 @@ store.register_lints(&[\n     methods::MAP_FLATTEN,\n     methods::MAP_IDENTITY,\n     methods::MAP_UNWRAP_OR,\n+    methods::NEEDLESS_SPLITN,\n     methods::NEW_RET_NO_SELF,\n     methods::OK_EXPECT,\n     methods::OPTION_AS_REF_DEREF,"}, {"sha": "6ab5015ca789098044e945571e279adcae317780", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -33,7 +33,6 @@ mod iter_nth_zero;\n mod iter_skip_next;\n mod iterator_step_by_zero;\n mod manual_saturating_arithmetic;\n-mod manual_split_once;\n mod manual_str_repeat;\n mod map_collect_result_unit;\n mod map_flatten;\n@@ -50,6 +49,7 @@ mod single_char_insert_string;\n mod single_char_pattern;\n mod single_char_push_string;\n mod skip_while_next;\n+mod str_splitn;\n mod string_extend_chars;\n mod suspicious_map;\n mod suspicious_splitn;\n@@ -1861,6 +1861,30 @@ declare_clippy_lint! {\n     \"replace `.splitn(2, pat)` with `.split_once(pat)`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for usages of `str::splitn` (or `str::rsplitn`) where using `str::split` would be the same.\n+    /// ### Why is this bad?\n+    /// The function `split` is simpler and there is no performance difference in these cases, considering\n+    /// that both functions return a lazy iterator.\n+    /// ### Example\n+    /// ```rust\n+    /// // Bad\n+    /// let str = \"key=value=add\";\n+    /// let _ = str.splitn(3, '=').next().unwrap();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// // Good\n+    /// let str = \"key=value=add\";\n+    /// let _ = str.split('=').next().unwrap();\n+    /// ```\n+    #[clippy::version = \"1.58.0\"]\n+    pub NEEDLESS_SPLITN,\n+    complexity,\n+    \"usages of `str::splitn` that can be replaced with `str::split`\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -1939,7 +1963,8 @@ impl_lint_pass!(Methods => [\n     SUSPICIOUS_SPLITN,\n     MANUAL_STR_REPEAT,\n     EXTEND_WITH_DRAIN,\n-    MANUAL_SPLIT_ONCE\n+    MANUAL_SPLIT_ONCE,\n+    NEEDLESS_SPLITN\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2271,7 +2296,10 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg) {\n                     suspicious_splitn::check(cx, name, expr, recv, count);\n                     if count == 2 && meets_msrv(msrv, &msrvs::STR_SPLIT_ONCE) {\n-                        manual_split_once::check(cx, name, expr, recv, pat_arg);\n+                        str_splitn::check_manual_split_once(cx, name, expr, recv, pat_arg);\n+                    }\n+                    if count >= 2 {\n+                        str_splitn::check_needless_splitn(cx, name, expr, recv, pat_arg, count);\n                     }\n                 }\n             },"}, {"sha": "2595f734f1151acddcfca4b985fbfc5451ec1c2e", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "renamed", "additions": 131, "deletions": 19, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -11,7 +11,13 @@ use rustc_span::{symbol::sym, Span, SyntaxContext};\n \n use super::MANUAL_SPLIT_ONCE;\n \n-pub(super) fn check(cx: &LateContext<'_>, method_name: &str, expr: &Expr<'_>, self_arg: &Expr<'_>, pat_arg: &Expr<'_>) {\n+pub(super) fn check_manual_split_once(\n+    cx: &LateContext<'_>,\n+    method_name: &str,\n+    expr: &Expr<'_>,\n+    self_arg: &Expr<'_>,\n+    pat_arg: &Expr<'_>,\n+) {\n     if !cx.typeck_results().expr_ty_adjusted(self_arg).peel_refs().is_str() {\n         return;\n     }\n@@ -36,7 +42,7 @@ pub(super) fn check(cx: &LateContext<'_>, method_name: &str, expr: &Expr<'_>, se\n             format!(\"{}.{}({})\", self_snip, method_name, pat_snip)\n         },\n         IterUsageKind::RNextTuple => format!(\"{}.{}({}).map(|(x, y)| (y, x))\", self_snip, method_name, pat_snip),\n-        IterUsageKind::Next => {\n+        IterUsageKind::Next | IterUsageKind::Second => {\n             let self_deref = {\n                 let adjust = cx.typeck_results().expr_adjustments(self_arg);\n                 if adjust.is_empty() {\n@@ -51,26 +57,49 @@ pub(super) fn check(cx: &LateContext<'_>, method_name: &str, expr: &Expr<'_>, se\n                     \"*\".repeat(adjust.len() - 2)\n                 }\n             };\n-            if usage.unwrap_kind.is_some() {\n-                format!(\n-                    \"{}.{}({}).map_or({}{}, |x| x.0)\",\n-                    &self_snip, method_name, pat_snip, self_deref, &self_snip\n-                )\n+            if matches!(usage.kind, IterUsageKind::Next) {\n+                match usage.unwrap_kind {\n+                    Some(UnwrapKind::Unwrap) => {\n+                        if reverse {\n+                            format!(\"{}.{}({}).unwrap().0\", self_snip, method_name, pat_snip)\n+                        } else {\n+                            format!(\n+                                \"{}.{}({}).map_or({}{}, |x| x.0)\",\n+                                self_snip, method_name, pat_snip, self_deref, &self_snip\n+                            )\n+                        }\n+                    },\n+                    Some(UnwrapKind::QuestionMark) => {\n+                        format!(\n+                            \"{}.{}({}).map_or({}{}, |x| x.0)\",\n+                            self_snip, method_name, pat_snip, self_deref, &self_snip\n+                        )\n+                    },\n+                    None => {\n+                        format!(\n+                            \"Some({}.{}({}).map_or({}{}, |x| x.0))\",\n+                            &self_snip, method_name, pat_snip, self_deref, &self_snip\n+                        )\n+                    },\n+                }\n             } else {\n-                format!(\n-                    \"Some({}.{}({}).map_or({}{}, |x| x.0))\",\n-                    &self_snip, method_name, pat_snip, self_deref, &self_snip\n-                )\n+                match usage.unwrap_kind {\n+                    Some(UnwrapKind::Unwrap) => {\n+                        if reverse {\n+                            // In this case, no better suggestion is offered.\n+                            return;\n+                        }\n+                        format!(\"{}.{}({}).unwrap().1\", self_snip, method_name, pat_snip)\n+                    },\n+                    Some(UnwrapKind::QuestionMark) => {\n+                        format!(\"{}.{}({})?.1\", self_snip, method_name, pat_snip)\n+                    },\n+                    None => {\n+                        format!(\"{}.{}({}).map(|x| x.1)\", self_snip, method_name, pat_snip)\n+                    },\n+                }\n             }\n         },\n-        IterUsageKind::Second => {\n-            let access_str = match usage.unwrap_kind {\n-                Some(UnwrapKind::Unwrap) => \".unwrap().1\",\n-                Some(UnwrapKind::QuestionMark) => \"?.1\",\n-                None => \".map(|x| x.1)\",\n-            };\n-            format!(\"{}.{}({}){}\", self_snip, method_name, pat_snip, access_str)\n-        },\n     };\n \n     span_lint_and_sugg(cx, MANUAL_SPLIT_ONCE, usage.span, msg, \"try this\", sugg, app);\n@@ -209,3 +238,86 @@ fn parse_iter_usage(\n         span,\n     })\n }\n+\n+use super::NEEDLESS_SPLITN;\n+\n+pub(super) fn check_needless_splitn(\n+    cx: &LateContext<'_>,\n+    method_name: &str,\n+    expr: &Expr<'_>,\n+    self_arg: &Expr<'_>,\n+    pat_arg: &Expr<'_>,\n+    count: u128,\n+) {\n+    if !cx.typeck_results().expr_ty_adjusted(self_arg).peel_refs().is_str() {\n+        return;\n+    }\n+    let ctxt = expr.span.ctxt();\n+    let mut app = Applicability::MachineApplicable;\n+    let (reverse, message) = if method_name == \"splitn\" {\n+        (false, \"unnecessary use of `splitn`\")\n+    } else {\n+        (true, \"unnecessary use of `rsplitn`\")\n+    };\n+    if_chain! {\n+        if count >= 2;\n+        if check_iter(cx, ctxt, cx.tcx.hir().parent_iter(expr.hir_id), count);\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                NEEDLESS_SPLITN,\n+                expr.span,\n+                message,\n+                \"try this\",\n+                format!(\n+                    \"{}.{}({})\",\n+                    snippet_with_context(cx, self_arg.span, ctxt, \"..\", &mut app).0,\n+                    if reverse {\"rsplit\"} else {\"split\"},\n+                    snippet_with_context(cx, pat_arg.span, ctxt, \"..\", &mut app).0\n+                ),\n+                app,\n+            );\n+        }\n+    }\n+}\n+\n+fn check_iter(\n+    cx: &LateContext<'tcx>,\n+    ctxt: SyntaxContext,\n+    mut iter: impl Iterator<Item = (HirId, Node<'tcx>)>,\n+    count: u128,\n+) -> bool {\n+    match iter.next() {\n+        Some((_, Node::Expr(e))) if e.span.ctxt() == ctxt => {\n+            let (name, args) = if let ExprKind::MethodCall(name, _, [_, args @ ..], _) = e.kind {\n+                (name, args)\n+            } else {\n+                return false;\n+            };\n+            if_chain! {\n+                if let Some(did) = cx.typeck_results().type_dependent_def_id(e.hir_id);\n+                if let Some(iter_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n+                then {\n+                    match (&*name.ident.as_str(), args) {\n+                        (\"next\", []) if cx.tcx.trait_of_item(did) == Some(iter_id) => {\n+                            return true;\n+                        },\n+                        (\"next_tuple\", []) if count > 2 => {\n+                            return true;\n+                        },\n+                        (\"nth\", [idx_expr]) if cx.tcx.trait_of_item(did) == Some(iter_id) => {\n+                            if let Some((Constant::Int(idx), _)) = constant(cx, cx.typeck_results(), idx_expr) {\n+                                if count > idx + 1 {\n+                                    return true;\n+                                }\n+                            }\n+                        },\n+                        _ =>  return false,\n+                    }\n+                }\n+            }\n+        },\n+        _ => return false,\n+    };\n+    false\n+}", "previous_filename": "clippy_lints/src/methods/manual_split_once.rs"}, {"sha": "d5113df569a086c4b99b514bb59e9f0f461b3865", "filename": "tests/ui/manual_split_once.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fmanual_split_once.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fmanual_split_once.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_split_once.fixed?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(custom_inner_attributes)]\n #![warn(clippy::manual_split_once)]\n-#![allow(clippy::iter_skip_next, clippy::iter_nth_zero)]\n+#![allow(clippy::iter_skip_next, clippy::iter_nth_zero, clippy::needless_splitn)]\n \n extern crate itertools;\n \n@@ -38,8 +38,8 @@ fn main() {\n     let _ = [0, 1, 2].splitn(2, |&x| x == 1).nth(1).unwrap();\n \n     // `rsplitn` gives the results in the reverse order of `rsplit_once`\n-    let _ = \"key=value\".rsplit_once('=').unwrap().1;\n-    let _ = \"key=value\".rsplit_once('=').map_or(\"key=value\", |x| x.0);\n+    let _ = \"key=value\".rsplitn(2, '=').next().unwrap();\n+    let _ = \"key=value\".rsplit_once('=').unwrap().0;\n     let _ = \"key=value\".rsplit_once('=').map(|x| x.1);\n     let (_, _) = \"key=value\".rsplit_once('=').map(|(x, y)| (y, x)).unwrap();\n }"}, {"sha": "80e02952dbd07f8adf537d03f093a9eb580fb92e", "filename": "tests/ui/manual_split_once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fmanual_split_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fmanual_split_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_split_once.rs?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(custom_inner_attributes)]\n #![warn(clippy::manual_split_once)]\n-#![allow(clippy::iter_skip_next, clippy::iter_nth_zero)]\n+#![allow(clippy::iter_skip_next, clippy::iter_nth_zero, clippy::needless_splitn)]\n \n extern crate itertools;\n "}, {"sha": "af9c7a2d41bff248f287da4e9f022b06a886b02a", "filename": "tests/ui/manual_split_once.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fmanual_split_once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fmanual_split_once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_split_once.stderr?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -72,17 +72,11 @@ error: manual implementation of `split_once`\n LL |         let _ = s.splitn(2, \"key=value\").skip(1).next()?;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.split_once(\"key=value\")?.1`\n \n-error: manual implementation of `rsplit_once`\n-  --> $DIR/manual_split_once.rs:41:13\n-   |\n-LL |     let _ = \"key=value\".rsplitn(2, '=').next().unwrap();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"key=value\".rsplit_once('=').unwrap().1`\n-\n error: manual implementation of `rsplit_once`\n   --> $DIR/manual_split_once.rs:42:13\n    |\n LL |     let _ = \"key=value\".rsplitn(2, '=').nth(1).unwrap();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"key=value\".rsplit_once('=').map_or(\"key=value\", |x| x.0)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"key=value\".rsplit_once('=').unwrap().0`\n \n error: manual implementation of `rsplit_once`\n   --> $DIR/manual_split_once.rs:43:13\n@@ -102,5 +96,5 @@ error: manual implementation of `split_once`\n LL |     let _ = \"key=value\".splitn(2, '=').nth(1).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"key=value\".split_once('=').unwrap().1`\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 16 previous errors\n "}, {"sha": "f6a4b2f17d33d81f048a1c828fe3bc2cfb744631", "filename": "tests/ui/needless_splitn.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fneedless_splitn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fneedless_splitn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_splitn.fixed?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![feature(custom_inner_attributes)]\n+#![warn(clippy::needless_splitn)]\n+#![allow(clippy::iter_skip_next, clippy::iter_nth_zero, clippy::manual_split_once)]\n+\n+extern crate itertools;\n+\n+#[allow(unused_imports)]\n+use itertools::Itertools;\n+\n+fn main() {\n+    let str = \"key=value=end\";\n+    let _ = str.split('=').next();\n+    let _ = str.split('=').nth(0);\n+    let _ = str.splitn(2, '=').nth(1);\n+    let (_, _) = str.splitn(2, '=').next_tuple().unwrap();\n+    let (_, _) = str.split('=').next_tuple().unwrap();\n+    let _: Vec<&str> = str.splitn(3, '=').collect();\n+\n+    let _ = str.rsplit('=').next();\n+    let _ = str.rsplit('=').nth(0);\n+    let _ = str.rsplitn(2, '=').nth(1);\n+    let (_, _) = str.rsplitn(2, '=').next_tuple().unwrap();\n+    let (_, _) = str.rsplit('=').next_tuple().unwrap();\n+}"}, {"sha": "6ba32255bb2d767da5e6bc6c155cd7b05d22ef0e", "filename": "tests/ui/needless_splitn.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fneedless_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fneedless_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_splitn.rs?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -0,0 +1,27 @@\n+// run-rustfix\n+// edition:2018\n+\n+#![feature(custom_inner_attributes)]\n+#![warn(clippy::needless_splitn)]\n+#![allow(clippy::iter_skip_next, clippy::iter_nth_zero, clippy::manual_split_once)]\n+\n+extern crate itertools;\n+\n+#[allow(unused_imports)]\n+use itertools::Itertools;\n+\n+fn main() {\n+    let str = \"key=value=end\";\n+    let _ = str.splitn(2, '=').next();\n+    let _ = str.splitn(2, '=').nth(0);\n+    let _ = str.splitn(2, '=').nth(1);\n+    let (_, _) = str.splitn(2, '=').next_tuple().unwrap();\n+    let (_, _) = str.splitn(3, '=').next_tuple().unwrap();\n+    let _: Vec<&str> = str.splitn(3, '=').collect();\n+\n+    let _ = str.rsplitn(2, '=').next();\n+    let _ = str.rsplitn(2, '=').nth(0);\n+    let _ = str.rsplitn(2, '=').nth(1);\n+    let (_, _) = str.rsplitn(2, '=').next_tuple().unwrap();\n+    let (_, _) = str.rsplitn(3, '=').next_tuple().unwrap();\n+}"}, {"sha": "66de2256554e3ad2ea2ea1b0ddd13891a94e6845", "filename": "tests/ui/needless_splitn.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fneedless_splitn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fneedless_splitn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_splitn.stderr?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -0,0 +1,40 @@\n+error: unnecessary use of `splitn`\n+  --> $DIR/needless_splitn.rs:15:13\n+   |\n+LL |     let _ = str.splitn(2, '=').next();\n+   |             ^^^^^^^^^^^^^^^^^^ help: try this: `str.split('=')`\n+   |\n+   = note: `-D clippy::needless-splitn` implied by `-D warnings`\n+\n+error: unnecessary use of `splitn`\n+  --> $DIR/needless_splitn.rs:16:13\n+   |\n+LL |     let _ = str.splitn(2, '=').nth(0);\n+   |             ^^^^^^^^^^^^^^^^^^ help: try this: `str.split('=')`\n+\n+error: unnecessary use of `splitn`\n+  --> $DIR/needless_splitn.rs:19:18\n+   |\n+LL |     let (_, _) = str.splitn(3, '=').next_tuple().unwrap();\n+   |                  ^^^^^^^^^^^^^^^^^^ help: try this: `str.split('=')`\n+\n+error: unnecessary use of `rsplitn`\n+  --> $DIR/needless_splitn.rs:22:13\n+   |\n+LL |     let _ = str.rsplitn(2, '=').next();\n+   |             ^^^^^^^^^^^^^^^^^^^ help: try this: `str.rsplit('=')`\n+\n+error: unnecessary use of `rsplitn`\n+  --> $DIR/needless_splitn.rs:23:13\n+   |\n+LL |     let _ = str.rsplitn(2, '=').nth(0);\n+   |             ^^^^^^^^^^^^^^^^^^^ help: try this: `str.rsplit('=')`\n+\n+error: unnecessary use of `rsplitn`\n+  --> $DIR/needless_splitn.rs:26:18\n+   |\n+LL |     let (_, _) = str.rsplitn(3, '=').next_tuple().unwrap();\n+   |                  ^^^^^^^^^^^^^^^^^^^ help: try this: `str.rsplit('=')`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "528f2ddcc862496a45c29c353a8e9c5f4e77ba7e", "filename": "tests/ui/suspicious_splitn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fsuspicious_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fsuspicious_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_splitn.rs?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -1,4 +1,5 @@\n #![warn(clippy::suspicious_splitn)]\n+#![allow(clippy::needless_splitn)]\n \n fn main() {\n     let _ = \"a,b,c\".splitn(3, ',');"}, {"sha": "3bcd681fa49d8af347654a367074a41cea139b40", "filename": "tests/ui/suspicious_splitn.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fsuspicious_splitn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46687f1313454882df10609e12d47f997501962d/tests%2Fui%2Fsuspicious_splitn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_splitn.stderr?ref=46687f1313454882df10609e12d47f997501962d", "patch": "@@ -1,5 +1,5 @@\n error: `splitn` called with `0` splits\n-  --> $DIR/suspicious_splitn.rs:9:13\n+  --> $DIR/suspicious_splitn.rs:10:13\n    |\n LL |     let _ = \"a,b\".splitn(0, ',');\n    |             ^^^^^^^^^^^^^^^^^^^^\n@@ -8,63 +8,63 @@ LL |     let _ = \"a,b\".splitn(0, ',');\n    = note: the resulting iterator will always return `None`\n \n error: `rsplitn` called with `0` splits\n-  --> $DIR/suspicious_splitn.rs:10:13\n+  --> $DIR/suspicious_splitn.rs:11:13\n    |\n LL |     let _ = \"a,b\".rsplitn(0, ',');\n    |             ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the resulting iterator will always return `None`\n \n error: `splitn` called with `1` split\n-  --> $DIR/suspicious_splitn.rs:11:13\n+  --> $DIR/suspicious_splitn.rs:12:13\n    |\n LL |     let _ = \"a,b\".splitn(1, ',');\n    |             ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the resulting iterator will always return the entire string followed by `None`\n \n error: `splitn` called with `0` splits\n-  --> $DIR/suspicious_splitn.rs:12:13\n+  --> $DIR/suspicious_splitn.rs:13:13\n    |\n LL |     let _ = [0, 1, 2].splitn(0, |&x| x == 1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the resulting iterator will always return `None`\n \n error: `splitn_mut` called with `0` splits\n-  --> $DIR/suspicious_splitn.rs:13:13\n+  --> $DIR/suspicious_splitn.rs:14:13\n    |\n LL |     let _ = [0, 1, 2].splitn_mut(0, |&x| x == 1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the resulting iterator will always return `None`\n \n error: `splitn` called with `1` split\n-  --> $DIR/suspicious_splitn.rs:14:13\n+  --> $DIR/suspicious_splitn.rs:15:13\n    |\n LL |     let _ = [0, 1, 2].splitn(1, |&x| x == 1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the resulting iterator will always return the entire slice followed by `None`\n \n error: `rsplitn_mut` called with `1` split\n-  --> $DIR/suspicious_splitn.rs:15:13\n+  --> $DIR/suspicious_splitn.rs:16:13\n    |\n LL |     let _ = [0, 1, 2].rsplitn_mut(1, |&x| x == 1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the resulting iterator will always return the entire slice followed by `None`\n \n error: `splitn` called with `1` split\n-  --> $DIR/suspicious_splitn.rs:18:13\n+  --> $DIR/suspicious_splitn.rs:19:13\n    |\n LL |     let _ = \"a,b\".splitn(X + 1, ',');\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the resulting iterator will always return the entire string followed by `None`\n \n error: `splitn` called with `0` splits\n-  --> $DIR/suspicious_splitn.rs:19:13\n+  --> $DIR/suspicious_splitn.rs:20:13\n    |\n LL |     let _ = \"a,b\".splitn(X, ',');\n    |             ^^^^^^^^^^^^^^^^^^^^"}]}