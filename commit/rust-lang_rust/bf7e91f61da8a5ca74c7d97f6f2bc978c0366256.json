{"sha": "bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmN2U5MWY2MWRhOGE1Y2E3NGM3ZDk3ZjZmMmJjOTc4YzAzNjYyNTY=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-07-23T20:46:09Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-07-23T21:38:09Z"}, "message": "field does not exist error: note fields if Levenshtein suggestion fails\n\nWhen trying to access or initialize a nonexistent field, if we can't infer what\nfield was meant (by virtue of the purported field in the source being a small\nLevenshtein distance away from an actual field, suggestive of a typo), issue a\nnote listing all the available fields. To reduce terminal clutter, we don't\nissue the note when we have a `find_best_match_for_name` Levenshtein\nsuggestion: the suggestion is probably right.\n\nThe third argument of the call to `find_best_match_for_name` is changed to\n`None`, accepting the default maximum Levenshtein distance of one-third of the\nidentifier supplied for correction. The previous value of `Some(name.len())`\nwas overzealous, inappropriately very Levenshtein-distant suggestions when the\nattempted field access could not plausibly be a mere typo. For example, if a\nstruct has fields `mule` and `phone`, but I type `.donkey`, I'd rather the\nerror have a note listing that the available fields are, in fact, `mule` and\n`phone` (which is the behavior induced by this patch) rather than the error\nasking \"did you mean `phone`?\" (which is the behavior on master). The \"only\nfind fits with at least one matching letter\" comment was accurate when it was\nfirst introduced in 09d992471 (January 2015), but is a vicious lie in its\npresent context before a call to `find_best_match_for_name` and must be\ndestroyed (replacing every letter is a Levenshtein distance of name.len()).\n\nThe present author claims that this suffices to resolve #42599.", "tree": {"sha": "e9a3b982e3e658e607a2f033b605749c8c43ccca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9a3b982e3e658e607a2f033b605749c8c43ccca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "html_url": "https://github.com/rust-lang/rust/commit/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6270257f4ef6e65213631d6b5a2a85807b8b2364", "url": "https://api.github.com/repos/rust-lang/rust/commits/6270257f4ef6e65213631d6b5a2a85807b8b2364", "html_url": "https://github.com/rust-lang/rust/commit/6270257f4ef6e65213631d6b5a2a85807b8b2364"}], "stats": {"total": 127, "additions": 114, "deletions": 13}, "files": [{"sha": "4b40a46f74eefa016470c1721c48b41f3f98b7c7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "patch": "@@ -2956,6 +2956,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                format!(\"did you mean `{}`?\", suggested_field_name));\n                             } else {\n                                 err.span_label(field.span, \"unknown field\");\n+                                let struct_variant_def = def.struct_variant();\n+                                let available_field_names = self.available_field_names(\n+                                    struct_variant_def);\n+                                err.note(&format!(\"available fields are: {}\",\n+                                                  available_field_names.join(\", \")));\n                             };\n                     }\n                     ty::TyRawPtr(..) => {\n@@ -2979,7 +2984,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     // Return an hint about the closest match in field names\n     fn suggest_field_name(variant: &'tcx ty::VariantDef,\n                           field: &Spanned<ast::Name>,\n-                          skip : Vec<InternedString>)\n+                          skip: Vec<InternedString>)\n                           -> Option<Symbol> {\n         let name = field.node.as_str();\n         let names = variant.fields.iter().filter_map(|field| {\n@@ -2992,8 +2997,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             }\n         });\n \n-        // only find fits with at least one matching letter\n-        find_best_match_for_name(names, &name, Some(name.len()))\n+        find_best_match_for_name(names, &name, None)\n+    }\n+\n+    fn available_field_names(&self, variant: &'tcx ty::VariantDef) -> Vec<String> {\n+        let mut available = Vec::new();\n+        for field in variant.fields.iter() {\n+            let (_, def_scope) = self.tcx.adjust(field.name, variant.did, self.body_id);\n+            if field.vis.is_accessible_from(def_scope, self.tcx) {\n+                available.push(field.name.to_string());\n+            }\n+        }\n+        available\n     }\n \n     // Check tuple index expressions\n@@ -3107,14 +3122,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                            format!(\"field does not exist - did you mean `{}`?\", field_name));\n         } else {\n             match ty.sty {\n-                ty::TyAdt(adt, ..) if adt.is_enum() => {\n-                    err.span_label(field.name.span, format!(\"`{}::{}` does not have this field\",\n-                                                             ty, variant.name));\n-                }\n-                _ => {\n-                    err.span_label(field.name.span, format!(\"`{}` does not have this field\", ty));\n+                ty::TyAdt(adt, ..) => {\n+                    if adt.is_enum() {\n+                        err.span_label(field.name.span,\n+                                       format!(\"`{}::{}` does not have this field\",\n+                                               ty, variant.name));\n+                    } else {\n+                        err.span_label(field.name.span,\n+                                       format!(\"`{}` does not have this field\", ty));\n+                    }\n+                    let available_field_names = self.available_field_names(variant);\n+                    err.note(&format!(\"available fields are: {}\",\n+                                      available_field_names.join(\", \")));\n                 }\n+                _ => bug!(\"non-ADT passed to report_unknown_field\")\n             }\n+\n         };\n         err.emit();\n     }"}, {"sha": "21bb2dc7002ca64c6991a926efca0e4158531b14", "filename": "src/test/compile-fail/E0559.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2FE0559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2FE0559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0559.rs?ref=bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "patch": "@@ -15,5 +15,6 @@ enum Field {\n fn main() {\n     let s = Field::Fool { joke: 0 };\n     //~^ ERROR E0559\n-    //~| NOTE field does not exist - did you mean `x`?\n+    //~| NOTE `Field::Fool` does not have this field\n+    //~| NOTE available fields are: x\n }"}, {"sha": "7aa6b2e86d6983b944028e650ad3168d295a9dee", "filename": "src/test/compile-fail/E0560.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2FE0560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2FE0560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0560.rs?ref=bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "patch": "@@ -16,4 +16,5 @@ fn main() {\n     let s = Simba { mother: 1, father: 0 };\n     //~^ ERROR E0560\n     //~| NOTE `Simba` does not have this field\n+    //~| NOTE available fields are: mother\n }"}, {"sha": "429c4384117a9c6f0d25f2e47717620caff3af07", "filename": "src/test/compile-fail/issue-19922.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2Fissue-19922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2Fissue-19922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19922.rs?ref=bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "patch": "@@ -15,5 +15,6 @@ enum Homura {\n fn main() {\n     let homura = Homura::Akemi { kaname: () };\n     //~^ ERROR variant `Homura::Akemi` has no field named `kaname`\n-    //~| NOTE field does not exist - did you mean `madoka`?\n+    //~| NOTE `Homura::Akemi` does not have this field\n+    //~| NOTE available fields are: madoka\n }"}, {"sha": "242c3a3a33d25b508b78f65985c922426aceb417", "filename": "src/test/compile-fail/numeric-fields.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2Fnumeric-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2Fnumeric-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnumeric-fields.rs?ref=bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "patch": "@@ -13,7 +13,8 @@ struct S(u8, u16);\n fn main() {\n     let s = S{0b1: 10, 0: 11};\n     //~^ ERROR struct `S` has no field named `0b1`\n-    //~| NOTE field does not exist - did you mean `1`?\n+    //~| NOTE `S` does not have this field\n+    //~| NOTE available fields are: 0, 1\n     match s {\n         S{0: a, 0x1: b, ..} => {}\n         //~^ ERROR does not have a field named `0x1`"}, {"sha": "78ab94d5fb4d985110f27e046fc32112757b82f0", "filename": "src/test/compile-fail/struct-fields-too-many.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2Fstruct-fields-too-many.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2Fstruct-fields-too-many.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-fields-too-many.rs?ref=bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "patch": "@@ -18,5 +18,6 @@ fn main() {\n         bar: 0\n         //~^ ERROR struct `BuildData` has no field named `bar`\n         //~| NOTE `BuildData` does not have this field\n+        //~| NOTE available fields are: foo\n     };\n }"}, {"sha": "959932af9b1d7231947fd1901a7471d4d5c65810", "filename": "src/test/compile-fail/suggest-private-fields.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuggest-private-fields.rs?ref=bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "patch": "@@ -27,7 +27,8 @@ fn main () {\n         //~| NOTE field does not exist - did you mean `a`?\n         bb: 20,\n         //~^ ERROR struct `xc::B` has no field named `bb`\n-        //~| NOTE field does not exist - did you mean `a`?\n+        //~| NOTE `xc::B` does not have this field\n+        //~| NOTE available fields are: a\n     };\n     // local crate struct\n     let l = A {"}, {"sha": "2bcc2204e3345ce59770e0ecbf71d892f34c4ec6", "filename": "src/test/compile-fail/union/union-fields.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2Funion%2Funion-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fcompile-fail%2Funion%2Funion-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-fields.rs?ref=bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "patch": "@@ -20,6 +20,7 @@ fn main() {\n     let u = U { a: 0, b: 1, c: 2 }; //~ ERROR union expressions should have exactly one field\n                                     //~^ ERROR union `U` has no field named `c`\n                                     //~| NOTE `U` does not have this field\n+                                    //~| NOTE available fields are: a, b\n     let u = U { ..u }; //~ ERROR union expressions should have exactly one field\n                        //~^ ERROR functional record update syntax requires a struct\n "}, {"sha": "610466c894aa761dedd68e9cd4c83a3ffa12a377", "filename": "src/test/ui/did_you_mean/issue-36798_unknown_field.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-36798_unknown_field.stderr?ref=bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "patch": "@@ -3,6 +3,8 @@ error[E0609]: no field `zz` on type `Foo`\n    |\n 17 |     f.zz;\n    |       ^^ unknown field\n+   |\n+   = note: available fields are: bar\n \n error: aborting due to previous error\n "}, {"sha": "4b0cc7b96a765d4b526d85acb1312475f5e49506", "filename": "src/test/ui/did_you_mean/issue-42599_available_fields_note.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.rs?ref=bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod submodule {\n+\n+    #[derive(Default)]\n+    pub struct Demo {\n+        pub favorite_integer: isize,\n+        secret_integer: isize,\n+        pub innocently_misspellable: ()\n+    }\n+\n+    impl Demo {\n+        fn new_with_secret_two() -> Self {\n+            Self { secret_integer: 2, inocently_mispellable: () }\n+        }\n+\n+        fn new_with_secret_three() -> Self {\n+            Self { secret_integer: 3, egregiously_nonexistent_field: () }\n+        }\n+    }\n+\n+}\n+\n+fn main() {\n+    use submodule::Demo;\n+\n+    let demo = Demo::default();\n+    let innocent_field_misaccess = demo.inocently_mispellable;\n+    // note shouldn't suggest private `secret_integer` field\n+    let egregious_field_misaccess = demo.egregiously_nonexistent_field;\n+}"}, {"sha": "17edac92fd9d9a115106bd08bba82b30b3e6e393", "filename": "src/test/ui/did_you_mean/issue-42599_available_fields_note.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bf7e91f61da8a5ca74c7d97f6f2bc978c0366256/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42599_available_fields_note.stderr?ref=bf7e91f61da8a5ca74c7d97f6f2bc978c0366256", "patch": "@@ -0,0 +1,30 @@\n+error[E0560]: struct `submodule::Demo` has no field named `inocently_mispellable`\n+  --> $DIR/issue-42599_available_fields_note.rs:22:39\n+   |\n+22 |             Self { secret_integer: 2, inocently_mispellable: () }\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^ field does not exist - did you mean `innocently_misspellable`?\n+\n+error[E0560]: struct `submodule::Demo` has no field named `egregiously_nonexistent_field`\n+  --> $DIR/issue-42599_available_fields_note.rs:26:39\n+   |\n+26 |             Self { secret_integer: 3, egregiously_nonexistent_field: () }\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `submodule::Demo` does not have this field\n+   |\n+   = note: available fields are: favorite_integer, secret_integer, innocently_misspellable\n+\n+error[E0609]: no field `inocently_mispellable` on type `submodule::Demo`\n+  --> $DIR/issue-42599_available_fields_note.rs:36:41\n+   |\n+36 |     let innocent_field_misaccess = demo.inocently_mispellable;\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^ did you mean `innocently_misspellable`?\n+\n+error[E0609]: no field `egregiously_nonexistent_field` on type `submodule::Demo`\n+  --> $DIR/issue-42599_available_fields_note.rs:38:42\n+   |\n+38 |     let egregious_field_misaccess = demo.egregiously_nonexistent_field;\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown field\n+   |\n+   = note: available fields are: favorite_integer, innocently_misspellable\n+\n+error: aborting due to 4 previous errors\n+"}]}