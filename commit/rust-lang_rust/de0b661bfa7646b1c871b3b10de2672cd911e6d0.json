{"sha": "de0b661bfa7646b1c871b3b10de2672cd911e6d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMGI2NjFiZmE3NjQ2YjFjODcxYjNiMTBkZTI2NzJjZDkxMWU2ZDA=", "commit": {"author": {"name": "Otavio Salvador", "email": "otavio@ossystems.com.br", "date": "2018-10-23T05:33:46Z"}, "committer": {"name": "Otavio Salvador", "email": "otavio@ossystems.com.br", "date": "2018-10-24T13:01:08Z"}, "message": "cargo-fmt: Take into account the edition for each target\n\nWhen formatting the crate, with `cargo fmt`, it parses each target\nwith the specific Rust edition.\n\nFixes: #3104.\n\nSigned-off-by: Otavio Salvador <otavio@ossystems.com.br>", "tree": {"sha": "cb0a5d82d8f4c1d6f96f17f486a4835cdc715f03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0a5d82d8f4c1d6f96f17f486a4835cdc715f03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de0b661bfa7646b1c871b3b10de2672cd911e6d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de0b661bfa7646b1c871b3b10de2672cd911e6d0", "html_url": "https://github.com/rust-lang/rust/commit/de0b661bfa7646b1c871b3b10de2672cd911e6d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de0b661bfa7646b1c871b3b10de2672cd911e6d0/comments", "author": {"login": "otavio", "id": 25278, "node_id": "MDQ6VXNlcjI1Mjc4", "avatar_url": "https://avatars.githubusercontent.com/u/25278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/otavio", "html_url": "https://github.com/otavio", "followers_url": "https://api.github.com/users/otavio/followers", "following_url": "https://api.github.com/users/otavio/following{/other_user}", "gists_url": "https://api.github.com/users/otavio/gists{/gist_id}", "starred_url": "https://api.github.com/users/otavio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/otavio/subscriptions", "organizations_url": "https://api.github.com/users/otavio/orgs", "repos_url": "https://api.github.com/users/otavio/repos", "events_url": "https://api.github.com/users/otavio/events{/privacy}", "received_events_url": "https://api.github.com/users/otavio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "otavio", "id": 25278, "node_id": "MDQ6VXNlcjI1Mjc4", "avatar_url": "https://avatars.githubusercontent.com/u/25278?v=4", "gravatar_id": "", "url": "https://api.github.com/users/otavio", "html_url": "https://github.com/otavio", "followers_url": "https://api.github.com/users/otavio/followers", "following_url": "https://api.github.com/users/otavio/following{/other_user}", "gists_url": "https://api.github.com/users/otavio/gists{/gist_id}", "starred_url": "https://api.github.com/users/otavio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/otavio/subscriptions", "organizations_url": "https://api.github.com/users/otavio/orgs", "repos_url": "https://api.github.com/users/otavio/repos", "events_url": "https://api.github.com/users/otavio/events{/privacy}", "received_events_url": "https://api.github.com/users/otavio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e41fcb137cc28c2d0ec6d81eec802ab8cb0a9f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/e41fcb137cc28c2d0ec6d81eec802ab8cb0a9f61", "html_url": "https://github.com/rust-lang/rust/commit/e41fcb137cc28c2d0ec6d81eec802ab8cb0a9f61"}], "stats": {"total": 108, "additions": 53, "deletions": 55}, "files": [{"sha": "45d00251828606fda6fad66ab242359521960b2e", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 53, "deletions": 55, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/de0b661bfa7646b1c871b3b10de2672cd911e6d0/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de0b661bfa7646b1c871b3b10de2672cd911e6d0/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=de0b661bfa7646b1c871b3b10de2672cd911e6d0", "patch": "@@ -17,14 +17,14 @@ extern crate cargo_metadata;\n extern crate getopts;\n extern crate serde_json as json;\n \n-use std::collections::HashSet;\n+use std::collections::{HashMap, HashSet};\n use std::env;\n use std::fs;\n use std::hash::{Hash, Hasher};\n use std::io::{self, Write};\n use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n-use std::process::{Command, ExitStatus};\n+use std::process::Command;\n use std::str;\n \n use getopts::{Matches, Options};\n@@ -122,30 +122,21 @@ pub enum Verbosity {\n     Quiet,\n }\n \n-fn handle_command_status(status: Result<ExitStatus, io::Error>, opts: &getopts::Options) -> i32 {\n+fn handle_command_status(status: Result<i32, io::Error>, opts: &getopts::Options) -> i32 {\n     match status {\n         Err(e) => {\n             print_usage_to_stderr(opts, &e.to_string());\n             FAILURE\n         }\n-        Ok(status) => {\n-            if status.success() {\n-                SUCCESS\n-            } else {\n-                status.code().unwrap_or(FAILURE)\n-            }\n-        }\n+        Ok(status) => status,\n     }\n }\n \n-fn get_version(verbosity: Verbosity) -> Result<ExitStatus, io::Error> {\n-    run_rustfmt(&[], &[String::from(\"--version\")], verbosity)\n+fn get_version(verbosity: Verbosity) -> Result<i32, io::Error> {\n+    run_rustfmt(&HashSet::new(), &[String::from(\"--version\")], verbosity)\n }\n \n-fn format_crate(\n-    verbosity: Verbosity,\n-    strategy: &CargoFmtStrategy,\n-) -> Result<ExitStatus, io::Error> {\n+fn format_crate(verbosity: Verbosity, strategy: &CargoFmtStrategy) -> Result<i32, io::Error> {\n     let rustfmt_args = get_fmt_args();\n     let targets = if rustfmt_args\n         .iter()\n@@ -157,17 +148,7 @@ fn format_crate(\n     };\n \n     // Currently only bin and lib files get formatted\n-    let files: Vec<_> = targets\n-        .into_iter()\n-        .inspect(|t| {\n-            if verbosity == Verbosity::Verbose {\n-                println!(\"[{}] {:?}\", t.kind, t.path)\n-            }\n-        })\n-        .map(|t| t.path)\n-        .collect();\n-\n-    run_rustfmt(&files, &rustfmt_args, verbosity)\n+    run_rustfmt(&targets, &rustfmt_args, verbosity)\n }\n \n fn get_fmt_args() -> Vec<String> {\n@@ -182,6 +163,8 @@ pub struct Target {\n     path: PathBuf,\n     /// A kind of target (e.g. lib, bin, example, ...).\n     kind: String,\n+    /// Rust edition for this target.\n+    edition: String,\n }\n \n impl Target {\n@@ -192,6 +175,7 @@ impl Target {\n         Target {\n             path: canonicalized,\n             kind: target.kind[0].clone(),\n+            edition: target.edition.clone(),\n         }\n     }\n }\n@@ -334,41 +318,55 @@ fn add_targets(target_paths: &[cargo_metadata::Target], targets: &mut HashSet<Ta\n }\n \n fn run_rustfmt(\n-    files: &[PathBuf],\n+    targets: &HashSet<Target>,\n     fmt_args: &[String],\n     verbosity: Verbosity,\n-) -> Result<ExitStatus, io::Error> {\n-    let stdout = if verbosity == Verbosity::Quiet {\n-        std::process::Stdio::null()\n-    } else {\n-        std::process::Stdio::inherit()\n-    };\n+) -> Result<i32, io::Error> {\n+    let by_edition: HashMap<_, _> = targets\n+        .iter()\n+        .inspect(|t| {\n+            if verbosity == Verbosity::Verbose {\n+                println!(\"[{} ({})] {:?}\", t.kind, t.edition, t.path)\n+            }\n+        })\n+        .map(|t| (&t.edition, vec![&t.path]))\n+        .collect();\n \n-    if verbosity == Verbosity::Verbose {\n-        print!(\"rustfmt\");\n-        for a in fmt_args {\n-            print!(\" {}\", a);\n+    for (edition, files) in by_edition {\n+        let stdout = if verbosity == Verbosity::Quiet {\n+            std::process::Stdio::null()\n+        } else {\n+            std::process::Stdio::inherit()\n+        };\n+\n+        if verbosity == Verbosity::Verbose {\n+            print!(\"rustfmt\");\n+            fmt_args.iter().for_each(|f| print!(\" {}\", f));\n+            files.iter().for_each(|f| print!(\" {}\", f.display()));\n+            println!();\n         }\n-        for f in files {\n-            print!(\" {}\", f.display());\n+\n+        let mut command = Command::new(\"rustfmt\")\n+            .stdout(stdout)\n+            .args(files)\n+            .args(&[\"--edition\", edition])\n+            .args(fmt_args)\n+            .spawn()\n+            .map_err(|e| match e.kind() {\n+                io::ErrorKind::NotFound => io::Error::new(\n+                    io::ErrorKind::Other,\n+                    \"Could not run rustfmt, please make sure it is in your PATH.\",\n+                ),\n+                _ => e,\n+            })?;\n+\n+        let status = command.wait()?;\n+        if !status.success() {\n+            return Ok(status.code().unwrap_or(FAILURE));\n         }\n-        println!();\n     }\n \n-    let mut command = Command::new(\"rustfmt\")\n-        .stdout(stdout)\n-        .args(files)\n-        .args(fmt_args)\n-        .spawn()\n-        .map_err(|e| match e.kind() {\n-            io::ErrorKind::NotFound => io::Error::new(\n-                io::ErrorKind::Other,\n-                \"Could not run rustfmt, please make sure it is in your PATH.\",\n-            ),\n-            _ => e,\n-        })?;\n-\n-    command.wait()\n+    Ok(SUCCESS)\n }\n \n fn get_cargo_metadata(manifest_path: Option<&Path>) -> Result<cargo_metadata::Metadata, io::Error> {"}]}