{"sha": "5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYjdjNjVmNTQ1YzBlOWYzZTA5MWJkYjhhZDI3ZTRhM2Y1ZmJkMGQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-01T08:12:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-01T08:12:51Z"}, "message": "Rollup merge of #52851 - flip1995:tool_lints, r=oli-obk\n\nMake the tool_lints actually usable\n\ncc #44690\n\nNecessary for rust-lang-nursery/rust-clippy#2955 and rust-lang-nursery/rust-clippy#2977\n\nThis PR makes it possible for lint tools (at the moment only for Clippy) to implement the `tool_lints`, like it was documented in #52018.\n\nBecause the `declare_lint` macro is pretty cluttered right now, there was not really a good way to add the `tool_name` as an additional argument of the macro. That's why I chose to introduce the new `declare_tool_lint` macro.\n\nThe switch from `&str` to `String` in the `lint_groups` `FxHashMap` is because I got weird error messages in the `check_lint_name` method. And the `by_name` field of the `LintStore` also uses `String`.\n\n### What comes with this PR:\n\nIf this PR lands and Clippy switches to the `tool_lints`, the currently used methods\n```rust\n#[cfg_attr(feature = \"cargo-clippy\", allow(clippy_lint))]\n#[allow(unknown_lints, clippy_lint)]\n```\nto `allow`/`warn`/`deny`/`forbid` Clippy lints, won't have any effects anymore, but also won't produce a warning. That is because the name of `clippy_lint` will then be `clippy::clippy_lint`. (Maybe we can add a clippy lint to search for `cfg_attr` appearances with the `cargo-clippy` feature?)\n\nr? @oli-obk", "tree": {"sha": "4ed3ac9cae417b8a0016572e4b1d2970bceedabf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ed3ac9cae417b8a0016572e4b1d2970bceedabf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbYWuDCRBK7hj4Ov3rIwAAdHIIABd/OtSEhCiCC++cusIQOsJM\nEP1fA7KjozcAdJYAFisKmy1MnZP7IsTeU4ifEbdko9FtO4RxmAuphq8NSl0YBzWW\nYXUOFcO7dTT5Y/QJfvWicWq3gHrjCD+hd4fltU2l/VlLlR/ysLRuOopEoA+bq5EN\nSIi/aPsP+LqlsEIG8qmwq9C5gMwSFQVB0zfQ48+wY2uGTONtXqIwN417Vj/FNDpo\njoitReGiYx4u7abTYs8WC8YEKCJkuYcP0pj0vkdqovI4x/L3xO1kp7ED8EVLJBiU\nDhnz5AnClbeXRa6/ciURSBblVIICjxKliP8OrsCFS48PlajNwqRFSiAxJR60Dts=\n=3eNu\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ed3ac9cae417b8a0016572e4b1d2970bceedabf\nparent c9aca0343fff5fc7377f200b395d13b8335dadd1\nparent 7b9388b7b5fcdbb2f7e7178dc0a533e3284184c5\nauthor Pietro Albini <pietro@pietroalbini.org> 1533111171 +0200\ncommitter GitHub <noreply@github.com> 1533111171 +0200\n\nRollup merge of #52851 - flip1995:tool_lints, r=oli-obk\n\nMake the tool_lints actually usable\n\ncc #44690\n\nNecessary for rust-lang-nursery/rust-clippy#2955 and rust-lang-nursery/rust-clippy#2977\n\nThis PR makes it possible for lint tools (at the moment only for Clippy) to implement the `tool_lints`, like it was documented in #52018.\n\nBecause the `declare_lint` macro is pretty cluttered right now, there was not really a good way to add the `tool_name` as an additional argument of the macro. That's why I chose to introduce the new `declare_tool_lint` macro.\n\nThe switch from `&str` to `String` in the `lint_groups` `FxHashMap` is because I got weird error messages in the `check_lint_name` method. And the `by_name` field of the `LintStore` also uses `String`.\n\n### What comes with this PR:\n\nIf this PR lands and Clippy switches to the `tool_lints`, the currently used methods\n```rust\n#[cfg_attr(feature = \"cargo-clippy\", allow(clippy_lint))]\n#[allow(unknown_lints, clippy_lint)]\n```\nto `allow`/`warn`/`deny`/`forbid` Clippy lints, won't have any effects anymore, but also won't produce a warning. That is because the name of `clippy_lint` will then be `clippy::clippy_lint`. (Maybe we can add a clippy lint to search for `cfg_attr` appearances with the `cargo-clippy` feature?)\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d", "html_url": "https://github.com/rust-lang/rust/commit/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9aca0343fff5fc7377f200b395d13b8335dadd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9aca0343fff5fc7377f200b395d13b8335dadd1", "html_url": "https://github.com/rust-lang/rust/commit/c9aca0343fff5fc7377f200b395d13b8335dadd1"}, {"sha": "7b9388b7b5fcdbb2f7e7178dc0a533e3284184c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b9388b7b5fcdbb2f7e7178dc0a533e3284184c5", "html_url": "https://github.com/rust-lang/rust/commit/7b9388b7b5fcdbb2f7e7178dc0a533e3284184c5"}], "stats": {"total": 201, "additions": 172, "deletions": 29}, "files": [{"sha": "15630157722fa502ea3c715648c4ad01f7508914", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 43, "deletions": 21, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d", "patch": "@@ -42,7 +42,7 @@ use util::nodemap::FxHashMap;\n use std::default::Default as StdDefault;\n use syntax::ast;\n use syntax::edition;\n-use syntax_pos::{MultiSpan, Span};\n+use syntax_pos::{MultiSpan, Span, symbol::LocalInternedString};\n use errors::DiagnosticBuilder;\n use hir;\n use hir::def_id::LOCAL_CRATE;\n@@ -133,6 +133,12 @@ pub enum CheckLintNameResult<'a> {\n     /// The lint is either renamed or removed. This is the warning\n     /// message, and an optional new name (`None` if removed).\n     Warning(String, Option<String>),\n+    /// The lint is from a tool. If the Option is None, then either\n+    /// the lint does not exist in the tool or the code was not\n+    /// compiled with the tool and therefore the lint was never\n+    /// added to the `LintStore`. Otherwise the `LintId` will be\n+    /// returned as if it where a rustc lint.\n+    Tool(Option<&'a [LintId]>),\n }\n \n impl LintStore {\n@@ -288,14 +294,15 @@ impl LintStore {\n                                    sess: &Session,\n                                    lint_name: &str,\n                                    level: Level) {\n-        let db = match self.check_lint_name(lint_name) {\n+        let db = match self.check_lint_name(lint_name, None) {\n             CheckLintNameResult::Ok(_) => None,\n             CheckLintNameResult::Warning(ref msg, _) => {\n                 Some(sess.struct_warn(msg))\n             },\n             CheckLintNameResult::NoLint => {\n                 Some(struct_err!(sess, E0602, \"unknown lint: `{}`\", lint_name))\n             }\n+            CheckLintNameResult::Tool(_) => unreachable!(),\n         };\n \n         if let Some(mut db) = db {\n@@ -319,26 +326,41 @@ impl LintStore {\n     /// it emits non-fatal warnings and there are *two* lint passes that\n     /// inspect attributes, this is only run from the late pass to avoid\n     /// printing duplicate warnings.\n-    pub fn check_lint_name(&self, lint_name: &str) -> CheckLintNameResult {\n-        match self.by_name.get(lint_name) {\n-            Some(&Renamed(ref new_name, _)) => {\n-                CheckLintNameResult::Warning(\n-                    format!(\"lint `{}` has been renamed to `{}`\", lint_name, new_name),\n-                    Some(new_name.to_owned())\n-                )\n-            },\n-            Some(&Removed(ref reason)) => {\n-                CheckLintNameResult::Warning(\n-                    format!(\"lint `{}` has been removed: `{}`\", lint_name, reason),\n-                    None\n-                )\n-            },\n-            None => {\n-                match self.lint_groups.get(lint_name) {\n-                    None => CheckLintNameResult::NoLint,\n-                    Some(ids) => CheckLintNameResult::Ok(&ids.0),\n-                }\n+    pub fn check_lint_name(\n+        &self,\n+        lint_name: &str,\n+        tool_name: Option<LocalInternedString>,\n+    ) -> CheckLintNameResult {\n+        let complete_name = if let Some(tool_name) = tool_name {\n+            format!(\"{}::{}\", tool_name, lint_name)\n+        } else {\n+            lint_name.to_string()\n+        };\n+        if let Some(_) = tool_name {\n+            match self.by_name.get(&complete_name) {\n+                None => match self.lint_groups.get(&*complete_name) {\n+                    None => return CheckLintNameResult::Tool(None),\n+                    Some(ids) => return CheckLintNameResult::Tool(Some(&ids.0)),\n+                },\n+                Some(&Id(ref id)) => return CheckLintNameResult::Tool(Some(slice::from_ref(id))),\n+                // If the lint was registered as removed or renamed by the lint tool, we don't need\n+                // to treat tool_lints and rustc lints different and can use the code below.\n+                _ => {}\n             }\n+        }\n+        match self.by_name.get(&complete_name) {\n+            Some(&Renamed(ref new_name, _)) => CheckLintNameResult::Warning(\n+                format!(\"lint `{}` has been renamed to `{}`\", lint_name, new_name),\n+                Some(new_name.to_owned()),\n+            ),\n+            Some(&Removed(ref reason)) => CheckLintNameResult::Warning(\n+                format!(\"lint `{}` has been removed: `{}`\", lint_name, reason),\n+                None,\n+            ),\n+            None => match self.lint_groups.get(&*complete_name) {\n+                None => CheckLintNameResult::NoLint,\n+                Some(ids) => CheckLintNameResult::Ok(&ids.0),\n+            },\n             Some(&Id(ref id)) => CheckLintNameResult::Ok(slice::from_ref(id)),\n         }\n     }"}, {"sha": "483e2ea8a96cd8607c51deab2f0717e301355e66", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d", "patch": "@@ -227,17 +227,18 @@ impl<'a> LintLevelsBuilder<'a> {\n                         continue\n                     }\n                 };\n-                if let Some(lint_tool) = word.is_scoped() {\n-                    if !self.sess.features_untracked().tool_lints {\n+                let tool_name = if let Some(lint_tool) = word.is_scoped() {\n+                    let gate_feature = !self.sess.features_untracked().tool_lints;\n+                    let known_tool = attr::is_known_lint_tool(lint_tool);\n+                    if gate_feature {\n                         feature_gate::emit_feature_err(&sess.parse_sess,\n                                                        \"tool_lints\",\n                                                        word.span,\n                                                        feature_gate::GateIssue::Language,\n                                                        &format!(\"scoped lint `{}` is experimental\",\n                                                                 word.ident));\n                     }\n-\n-                    if !attr::is_known_lint_tool(lint_tool) {\n+                    if !known_tool {\n                         span_err!(\n                             sess,\n                             lint_tool.span,\n@@ -247,17 +248,37 @@ impl<'a> LintLevelsBuilder<'a> {\n                         );\n                     }\n \n-                    continue\n-                }\n+                    if gate_feature || !known_tool {\n+                        continue\n+                    }\n+\n+                    Some(lint_tool.as_str())\n+                } else {\n+                    None\n+                };\n                 let name = word.name();\n-                match store.check_lint_name(&name.as_str()) {\n+                match store.check_lint_name(&name.as_str(), tool_name) {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintSource::Node(name, li.span);\n                         for id in ids {\n                             specs.insert(*id, (level, src));\n                         }\n                     }\n \n+                    CheckLintNameResult::Tool(result) => {\n+                        if let Some(ids) = result {\n+                            let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n+                            let src = LintSource::Node(Symbol::intern(complete_name), li.span);\n+                            for id in ids {\n+                                specs.insert(*id, (level, src));\n+                            }\n+                        }\n+                        // If Tool(None) is returned, then either the lint does not exist in the\n+                        // tool or the code was not compiled with the tool and therefore the lint\n+                        // was never added to the `LintStore`. To detect this is the responsibility\n+                        // of the lint tool.\n+                    }\n+\n                     _ if !self.warn_about_weird_lints => {}\n \n                     CheckLintNameResult::Warning(msg, renamed) => {\n@@ -298,7 +319,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                         if name.as_str().chars().any(|c| c.is_uppercase()) {\n                             let name_lower = name.as_str().to_lowercase().to_string();\n                             if let CheckLintNameResult::NoLint =\n-                                    store.check_lint_name(&name_lower) {\n+                                    store.check_lint_name(&name_lower, tool_name) {\n                                 db.emit();\n                             } else {\n                                 db.span_suggestion_with_applicability("}, {"sha": "6940826ba86536ef1001032e1c6e30eca5e833c8", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d", "patch": "@@ -139,6 +139,26 @@ macro_rules! declare_lint {\n     );\n }\n \n+#[macro_export]\n+macro_rules! declare_tool_lint {\n+    ($vis: vis $tool: ident ::$NAME: ident, $Level: ident, $desc: expr) => (\n+        declare_tool_lint!{$vis $tool::$NAME, $Level, $desc, false}\n+    );\n+    ($vis: vis $tool: ident ::$NAME: ident, $Level: ident, $desc: expr,\n+     report_in_external_macro: $rep: expr) => (\n+         declare_tool_lint!{$vis $tool::$NAME, $Level, $desc, $rep}\n+    );\n+    ($vis: vis $tool: ident ::$NAME: ident, $Level: ident, $desc: expr, $external: expr) => (\n+        $vis static $NAME: &$crate::lint::Lint = &$crate::lint::Lint {\n+            name: &concat!(stringify!($tool), \"::\", stringify!($NAME)),\n+            default_level: $crate::lint::$Level,\n+            desc: $desc,\n+            edition_lint_opts: None,\n+            report_in_external_macro: $external,\n+        };\n+    );\n+}\n+\n /// Declare a static `LintArray` and return it as an expression.\n #[macro_export]\n macro_rules! lint_array {"}, {"sha": "01fa2f3459ea71d4a6cb1c6897c1f4042c25b802", "filename": "src/test/ui-fulldeps/auxiliary/lint_tool_test.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_tool_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_tool_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Flint_tool_test.rs?ref=5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d", "patch": "@@ -0,0 +1,48 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(plugin_registrar)]\n+#![feature(box_syntax, rustc_private)]\n+#![feature(macro_vis_matcher)]\n+#![feature(macro_at_most_once_rep)]\n+\n+extern crate syntax;\n+\n+// Load rustc as a plugin to get macros\n+#[macro_use]\n+extern crate rustc;\n+extern crate rustc_plugin;\n+\n+use rustc::lint::{EarlyContext, LintContext, LintPass, EarlyLintPass,\n+                  LintArray};\n+use rustc_plugin::Registry;\n+use syntax::ast;\n+declare_tool_lint!(pub clippy::TEST_LINT, Warn, \"Warn about stuff\");\n+\n+struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(TEST_LINT)\n+    }\n+}\n+\n+impl EarlyLintPass for Pass {\n+    fn check_item(&mut self, cx: &EarlyContext, it: &ast::Item) {\n+        if it.ident.name == \"lintme\" {\n+            cx.span_lint(TEST_LINT, it.span, \"item is named 'lintme'\");\n+        }\n+    }\n+}\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    reg.register_early_lint_pass(box Pass);\n+}"}, {"sha": "ccdcd2df31b4f49afd20bd2202f1088986c2afa3", "filename": "src/test/ui-fulldeps/lint_tool_test.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.rs?ref=5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+// aux-build:lint_tool_test.rs\n+// ignore-stage1\n+#![feature(plugin)]\n+#![feature(tool_lints)]\n+#![plugin(lint_tool_test)]\n+#![allow(dead_code)]\n+\n+fn lintme() { } //~ WARNING item is named 'lintme'\n+\n+#[allow(clippy::test_lint)]\n+pub fn main() {\n+    fn lintme() { }\n+}"}, {"sha": "22d0f458e7d7b487690175a9f3547adc8d99bec5", "filename": "src/test/ui-fulldeps/lint_tool_test.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.stderr?ref=5fb7c65f545c0e9f3e091bdb8ad27e4a3f5fbd0d", "patch": "@@ -0,0 +1,8 @@\n+warning: item is named 'lintme'\n+  --> $DIR/lint_tool_test.rs:19:1\n+   |\n+LL | fn lintme() { } //~ WARNING item is named 'lintme'\n+   | ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(clippy::test_lint)] on by default\n+"}]}