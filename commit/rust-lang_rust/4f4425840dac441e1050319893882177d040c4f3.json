{"sha": "4f4425840dac441e1050319893882177d040c4f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNDQyNTg0MGRhYzQ0MWUxMDUwMzE5ODkzODgyMTc3ZDA0MGM0ZjM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-07-14T22:49:03Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:37Z"}, "message": "Add some SIMD target_feature cfg's when appropriate.\n\nNB. this may not be 100% perfect.", "tree": {"sha": "6d650d9bf14c91ae4b5209f765ebd56e7dff7bf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d650d9bf14c91ae4b5209f765ebd56e7dff7bf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f4425840dac441e1050319893882177d040c4f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4425840dac441e1050319893882177d040c4f3", "html_url": "https://github.com/rust-lang/rust/commit/4f4425840dac441e1050319893882177d040c4f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f4425840dac441e1050319893882177d040c4f3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e364f0eb5a51a96932ecd01dd2319eff4bdae2d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e364f0eb5a51a96932ecd01dd2319eff4bdae2d1", "html_url": "https://github.com/rust-lang/rust/commit/e364f0eb5a51a96932ecd01dd2319eff4bdae2d1"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "60eaffd71cbc6a91bd1ab5dfa341cdf787a8fe08", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f4425840dac441e1050319893882177d040c4f3/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4425840dac441e1050319893882177d040c4f3/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=4f4425840dac441e1050319893882177d040c4f3", "patch": "@@ -89,6 +89,7 @@ pub mod test;\n \n pub mod driver;\n pub mod pretty;\n+pub mod target_features;\n \n \n const BUG_REPORT_URL: &'static str =\n@@ -136,7 +137,8 @@ pub fn run_compiler<'a>(args: &[String],\n     if sess.unstable_options() {\n         sess.opts.show_span = matches.opt_str(\"show-span\");\n     }\n-    let cfg = config::build_configuration(&sess);\n+    let mut cfg = config::build_configuration(&sess);\n+    target_features::add_configuration(&mut cfg, &sess);\n \n     do_or_return!(callbacks.late_callback(&matches, &sess, &input, &odir, &ofile));\n "}, {"sha": "ca76046acf0fb684d28953e99b4c037fa02fdb98", "filename": "src/librustc_driver/target_features.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/4f4425840dac441e1050319893882177d040c4f3/src%2Flibrustc_driver%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4425840dac441e1050319893882177d040c4f3/src%2Flibrustc_driver%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftarget_features.rs?ref=4f4425840dac441e1050319893882177d040c4f3", "patch": "@@ -0,0 +1,98 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use syntax::{ast, attr};\n+use rustc::session::Session;\n+use syntax::parse::token::InternedString;\n+use syntax::parse::token::intern_and_get_ident as intern;\n+\n+/// Add `target_feature = \"...\"` cfgs for a variety of platform\n+/// specific features (SSE, NEON etc.).\n+///\n+/// This uses a scheme similar to that employed by clang: reimplement\n+/// the target feature knowledge. *Theoretically* we could query LLVM\n+/// since that has perfect knowledge about what things are enabled in\n+/// code-generation, however, it is extremely non-obvious how to do\n+/// this successfully. Each platform defines a subclass of a\n+/// SubtargetInfo, which knows all this information, but the ways to\n+/// query them do not seem to be public.\n+pub fn add_configuration(cfg: &mut ast::CrateConfig, sess: &Session) {\n+    let tf = InternedString::new(\"target_feature\");\n+    macro_rules! fillout {\n+        ($($func: ident, $name: expr;)*) => {{\n+            $(if $func(sess) {\n+                cfg.push(attr::mk_name_value_item_str(tf.clone(), intern($name)))\n+            })*\n+        }}\n+    }\n+    fillout! {\n+        has_sse, \"sse\";\n+        has_sse2, \"sse2\";\n+        has_sse3, \"sse3\";\n+        has_ssse3, \"ssse3\";\n+        has_sse41, \"sse4.1\";\n+        has_sse42, \"sse4.2\";\n+        has_avx, \"avx\";\n+        has_avx2, \"avx2\";\n+        has_neon, \"neon\";\n+        has_vfp, \"vfp\";\n+    }\n+}\n+\n+\n+fn features_contain(sess: &Session, s: &str) -> bool {\n+    sess.target.target.options.features.contains(s) ||\n+        sess.opts.cg.target_feature.contains(s)\n+}\n+\n+pub fn has_sse(sess: &Session) -> bool {\n+    features_contain(sess, \"+sse\") ||\n+        has_sse2(sess)\n+}\n+pub fn has_sse2(sess: &Session) -> bool {\n+    // x86-64 requires at least SSE2 support\n+    sess.target.target.arch == \"x86_64\" ||\n+        features_contain(sess, \"+sse2\") ||\n+        has_sse3(sess)\n+}\n+pub fn has_sse3(sess: &Session) -> bool {\n+    features_contain(sess, \"+sse3\") ||\n+        has_ssse3(sess)\n+}\n+pub fn has_ssse3(sess: &Session) -> bool {\n+    features_contain(sess, \"+ssse3\") ||\n+        has_sse41(sess)\n+}\n+pub fn has_sse41(sess: &Session) -> bool {\n+    features_contain(sess, \"+sse4.1\") ||\n+        has_sse42(sess)\n+}\n+pub fn has_sse42(sess: &Session) -> bool {\n+    features_contain(sess, \"+sse4.2\") ||\n+        has_avx(sess)\n+}\n+pub fn has_avx(sess: &Session) -> bool {\n+    features_contain(sess, \"+avx\") ||\n+        has_avx2(sess)\n+}\n+pub fn has_avx2(sess: &Session) -> bool {\n+    features_contain(sess, \"+avx2\")\n+}\n+\n+pub fn has_neon(sess: &Session) -> bool {\n+    // AArch64 requires NEON support\n+    sess.target.target.arch == \"aarch64\" ||\n+        features_contain(sess, \"+neon\")\n+}\n+pub fn has_vfp(sess: &Session) -> bool {\n+    // AArch64 requires VFP support\n+    sess.target.target.arch == \"aarch64\" ||\n+        features_contain(sess, \"+vfp\")\n+}"}, {"sha": "81399938f27c51782d7cc8f66303ecbeec19c54c", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f4425840dac441e1050319893882177d040c4f3/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4425840dac441e1050319893882177d040c4f3/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=4f4425840dac441e1050319893882177d040c4f3", "patch": "@@ -10,7 +10,7 @@\n pub use self::MaybeTyped::*;\n \n use rustc_lint;\n-use rustc_driver::driver;\n+use rustc_driver::{driver, target_features};\n use rustc::session::{self, config};\n use rustc::middle::{privacy, ty};\n use rustc::ast_map;\n@@ -119,7 +119,8 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n                                        span_diagnostic_handler);\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n-    let cfg = config::build_configuration(&sess);\n+    let mut cfg = config::build_configuration(&sess);\n+    target_features::add_configuration(&mut cfg, &sess);\n \n     let krate = driver::phase_1_parse_input(&sess, cfg, &input);\n "}]}