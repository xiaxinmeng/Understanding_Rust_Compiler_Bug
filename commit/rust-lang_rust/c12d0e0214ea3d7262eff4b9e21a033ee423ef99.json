{"sha": "c12d0e0214ea3d7262eff4b9e21a033ee423ef99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMmQwZTAyMTRlYTNkNzI2MmVmZjRiOWUyMWEwMzNlZTQyM2VmOTk=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-21T23:28:44Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-22T09:35:03Z"}, "message": "Refactor the workaround a bit", "tree": {"sha": "ece08a471d69fa678ac1cd588c2def1149fddec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ece08a471d69fa678ac1cd588c2def1149fddec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c12d0e0214ea3d7262eff4b9e21a033ee423ef99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c12d0e0214ea3d7262eff4b9e21a033ee423ef99", "html_url": "https://github.com/rust-lang/rust/commit/c12d0e0214ea3d7262eff4b9e21a033ee423ef99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c12d0e0214ea3d7262eff4b9e21a033ee423ef99/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07bd4bedcb9a0c560578399e840b413b500d4a46", "url": "https://api.github.com/repos/rust-lang/rust/commits/07bd4bedcb9a0c560578399e840b413b500d4a46", "html_url": "https://github.com/rust-lang/rust/commit/07bd4bedcb9a0c560578399e840b413b500d4a46"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "cfcf47b2fc58cb77bb64824a0cc949ee3472fa3b", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c12d0e0214ea3d7262eff4b9e21a033ee423ef99/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c12d0e0214ea3d7262eff4b9e21a033ee423ef99/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=c12d0e0214ea3d7262eff4b9e21a033ee423ef99", "patch": "@@ -216,37 +216,34 @@ class AstInspector implements vscode.HoverProvider, vscode.DefinitionProvider, D\n         return new vscode.Range(begin, end);\n     }\n \n-    // Shitty memoize the last value, otherwise the CPU is at 100% single core\n+    // Memoize the last value, otherwise the CPU is at 100% single core\n     // with quadratic lookups when we build rust2Ast cache\n-    memo?: [vscode.TextDocument, number, number];\n+    cache?: { doc: vscode.TextDocument; offset: number; line: number };\n \n-    positionAt(doc: vscode.TextDocument, offset: number): vscode.Position {\n+    positionAt(doc: vscode.TextDocument, targetOffset: number): vscode.Position {\n         if (doc.eol === vscode.EndOfLine.LF) {\n-            return doc.positionAt(offset);\n+            return doc.positionAt(targetOffset);\n         }\n \n-        // God damn shitty workaround for crlf line endings\n+        // Shitty workaround for crlf line endings\n         // We are still in this prehistoric era of carriage returns here...\n \n-        let i = 0;\n-        let curOffset = 0;\n+        let line = 0;\n+        let offset = 0;\n \n-        if (this.memo) {\n-            const [memDoc, memOffset, memI] = this.memo;\n-            if (memDoc === doc && memOffset <= offset) {\n-                curOffset = memOffset;\n-                i = memI;\n-            }\n+        const cache = this.cache;\n+        if (cache?.doc === doc && cache.offset <= targetOffset) {\n+            ({ line, offset } = cache);\n         }\n \n         while (true) {\n-            const lineLenWithLf = doc.lineAt(i).text.length + 1;\n-            curOffset += lineLenWithLf;\n-            if (curOffset > offset) {\n-                this.memo = [doc, curOffset - lineLenWithLf, i];\n-                return doc.positionAt(offset + i);\n+            const lineLenWithLf = doc.lineAt(line).text.length + 1;\n+            if (offset + lineLenWithLf > targetOffset) {\n+                this.cache = { doc, offset, line };\n+                return doc.positionAt(targetOffset + line);\n             }\n-            i += 1;\n+            offset += lineLenWithLf;\n+            line += 1;\n         }\n     }\n }"}]}