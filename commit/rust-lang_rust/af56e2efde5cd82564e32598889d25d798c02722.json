{"sha": "af56e2efde5cd82564e32598889d25d798c02722", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNTZlMmVmZGU1Y2Q4MjU2NGUzMjU5ODg4OWQyNWQ3OThjMDI3MjI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-11T21:41:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-19T17:53:06Z"}, "message": "rustc_back: Tweak the MSVC target spec\n\nThis change primarily changes the default ar utility used by MSVC-targeting\ncompilers as `llvm-ar`, adding comments along the way as to why.", "tree": {"sha": "108dd33084ff05b73137ea05aee3ef658940ffe0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/108dd33084ff05b73137ea05aee3ef658940ffe0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af56e2efde5cd82564e32598889d25d798c02722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af56e2efde5cd82564e32598889d25d798c02722", "html_url": "https://github.com/rust-lang/rust/commit/af56e2efde5cd82564e32598889d25d798c02722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af56e2efde5cd82564e32598889d25d798c02722/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37659a1803e398a5e374968aee5aabe541632021", "url": "https://api.github.com/repos/rust-lang/rust/commits/37659a1803e398a5e374968aee5aabe541632021", "html_url": "https://github.com/rust-lang/rust/commit/37659a1803e398a5e374968aee5aabe541632021"}], "stats": {"total": 73, "additions": 60, "deletions": 13}, "files": [{"sha": "ceac37513ee8c710da4e31cf9bc2fe9e08274150", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af56e2efde5cd82564e32598889d25d798c02722/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af56e2efde5cd82564e32598889d25d798c02722/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=af56e2efde5cd82564e32598889d25d798c02722", "patch": "@@ -93,6 +93,8 @@ pub struct Target {\n pub struct TargetOptions {\n     /// Linker to invoke. Defaults to \"cc\".\n     pub linker: String,\n+    /// Archive utility to use when managing archives. Defaults to \"ar\".\n+    pub ar: String,\n     /// Linker arguments that are unconditionally passed *before* any\n     /// user-defined libraries.\n     pub pre_link_args: Vec<String>,\n@@ -154,22 +156,24 @@ pub struct TargetOptions {\n     pub linker_is_gnu: bool,\n     /// Whether the linker support rpaths or not. Defaults to false.\n     pub has_rpath: bool,\n-    /// Whether to disable linking to compiler-rt. Defaults to false, as LLVM will emit references\n-    /// to the functions that compiler-rt provides.\n+    /// Whether to disable linking to compiler-rt. Defaults to false, as LLVM\n+    /// will emit references to the functions that compiler-rt provides.\n     pub no_compiler_rt: bool,\n-    /// Dynamically linked executables can be compiled as position independent if the default\n-    /// relocation model of position independent code is not changed. This is a requirement to take\n-    /// advantage of ASLR, as otherwise the functions in the executable are not randomized and can\n-    /// be used during an exploit of a vulnerability in any code.\n+    /// Dynamically linked executables can be compiled as position independent\n+    /// if the default relocation model of position independent code is not\n+    /// changed. This is a requirement to take advantage of ASLR, as otherwise\n+    /// the functions in the executable are not randomized and can be used\n+    /// during an exploit of a vulnerability in any code.\n     pub position_independent_executables: bool,\n }\n \n impl Default for TargetOptions {\n-    /// Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for\n-    /// compilation, will certainly not work.\n+    /// Create a set of \"sane defaults\" for any target. This is still\n+    /// incomplete, and if used for compilation, will certainly not work.\n     fn default() -> TargetOptions {\n         TargetOptions {\n             linker: \"cc\".to_string(),\n+            ar: \"ar\".to_string(),\n             pre_link_args: Vec::new(),\n             post_link_args: Vec::new(),\n             cpu: \"generic\".to_string(),"}, {"sha": "30d74c807352c192a6a554484d108fef0c8d402f", "filename": "src/librustc_back/target/windows_msvc_base.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/af56e2efde5cd82564e32598889d25d798c02722/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af56e2efde5cd82564e32598889d25d798c02722/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_msvc_base.rs?ref=af56e2efde5cd82564e32598889d25d798c02722", "patch": "@@ -14,7 +14,38 @@ use std::default::Default;\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         function_sections: true,\n-        linker: \"link\".to_string(),\n+        linker: \"link.exe\".to_string(),\n+        // When taking a look at the value of this `ar` field, one might expect\n+        // `lib.exe` to be the value here! The `lib.exe` program is the default\n+        // tool for managing `.lib` archives on Windows, but unfortunately the\n+        // compiler cannot use it.\n+        //\n+        // To recap, we use `ar` here to manage rlibs (which are just archives).\n+        // LLVM does not expose bindings for modifying archives so we have to\n+        // invoke this utility for write operations (e.g. deleting files, adding\n+        // files, etc). Normally archives only have object files within them,\n+        // but the compiler also uses archives for storing metadata and\n+        // compressed bytecode, so we don't exactly fall within \"normal use\n+        // cases\".\n+        //\n+        // MSVC's `lib.exe` tool by default will choke when adding a non-object\n+        // file to an archive, which we do on a regular basis, making it\n+        // inoperable for us. Luckily, however, LLVM has already rewritten `ar`\n+        // in the form of `llvm-ar` which is built by default when we build\n+        // LLVM. This tool, unlike `lib.exe`, works just fine with non-object\n+        // files, so we use it instead.\n+        //\n+        // Note that there's a few caveats associated with this:\n+        //\n+        // * This still requires that the *linker* (the consumer of rlibs) will\n+        //   ignore non-object files. Thankfully `link.exe` on Windows does\n+        //   indeed ignore non-object files in archives.\n+        // * This requires `llvm-ar.exe` to be distributed with the compiler\n+        //   itself, but we already make sure of this elsewhere.\n+        //\n+        // Perhaps one day we won't even need this tool at all and we'll just be\n+        // able to make library calls into LLVM!\n+        ar: \"llvm-ar.exe\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         dll_prefix: \"\".to_string(),\n@@ -25,7 +56,10 @@ pub fn opts() -> TargetOptions {\n         morestack: false,\n         is_like_windows: true,\n         is_like_msvc: true,\n-        pre_link_args: Vec::new(),\n+        pre_link_args: vec![\n+            \"/NOLOGO\".to_string(),\n+            \"/NXCOMPAT\".to_string(),\n+        ],\n \n         .. Default::default()\n     }"}, {"sha": "f7c3ca4b3f6edd61d41975cfba58fec7f5f23853", "filename": "src/librustc_back/target/x86_64_pc_windows_msvc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af56e2efde5cd82564e32598889d25d798c02722/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af56e2efde5cd82564e32598889d25d798c02722/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_pc_windows_msvc.rs?ref=af56e2efde5cd82564e32598889d25d798c02722", "patch": "@@ -15,7 +15,10 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".to_string();\n \n     Target {\n-        // FIXME: Test this. Copied from linux (#2398)\n+        // This is currently in sync with the specification for\n+        // x86_64-pc-windows-gnu but there's a comment in that file questioning\n+        // whether this is valid or not. Sounds like the two should stay in sync\n+        // at least for now.\n         data_layout: \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n                       f32:32:32-f64:64:64-v64:64:64-v128:128:128-a:0:64-\\\n                       s0:64:64-f80:128:128-n8:16:32:64-S128\".to_string(),"}, {"sha": "c6a59ff30a6e234cfa5a1a4a20e8ec49cffd1e02", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af56e2efde5cd82564e32598889d25d798c02722/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af56e2efde5cd82564e32598889d25d798c02722/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=af56e2efde5cd82564e32598889d25d798c02722", "patch": "@@ -365,6 +365,12 @@ pub fn get_cc_prog(sess: &Session) -> String {\n     }\n }\n \n+pub fn get_ar_prog(sess: &Session) -> String {\n+    sess.opts.cg.ar.clone().unwrap_or_else(|| {\n+        sess.target.target.options.ar.clone()\n+    })\n+}\n+\n pub fn remove(sess: &Session, path: &Path) {\n     match fs::remove_file(path) {\n         Ok(..) => {}\n@@ -547,7 +553,7 @@ fn link_rlib<'a>(sess: &'a Session,\n         lib_search_paths: archive_search_paths(sess),\n         slib_prefix: sess.target.target.options.staticlib_prefix.clone(),\n         slib_suffix: sess.target.target.options.staticlib_suffix.clone(),\n-        maybe_ar_prog: sess.opts.cg.ar.clone()\n+        ar_prog: get_ar_prog(sess),\n     };\n     let mut ab = ArchiveBuilder::create(config);\n     ab.add_file(obj_filename).unwrap();\n@@ -1181,7 +1187,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker, sess: &Session,\n                     lib_search_paths: archive_search_paths(sess),\n                     slib_prefix: sess.target.target.options.staticlib_prefix.clone(),\n                     slib_suffix: sess.target.target.options.staticlib_suffix.clone(),\n-                    maybe_ar_prog: sess.opts.cg.ar.clone()\n+                    ar_prog: get_ar_prog(sess),\n                 };\n                 let mut archive = Archive::open(config);\n                 archive.remove_file(&format!(\"{}.o\", name));"}]}