{"sha": "67477b85ae7404508e3a963d68dbfb09a3d247f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NDc3Yjg1YWU3NDA0NTA4ZTNhOTYzZDY4ZGJmYjA5YTNkMjQ3Zjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-22T00:24:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-22T00:24:26Z"}, "message": "Support basic function calls in rustc.", "tree": {"sha": "b9e09ddf435b03239f19c5ad79213470ef10a729", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9e09ddf435b03239f19c5ad79213470ef10a729"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67477b85ae7404508e3a963d68dbfb09a3d247f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67477b85ae7404508e3a963d68dbfb09a3d247f9", "html_url": "https://github.com/rust-lang/rust/commit/67477b85ae7404508e3a963d68dbfb09a3d247f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67477b85ae7404508e3a963d68dbfb09a3d247f9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aaae2a881ed0e8c74a4a5b36e4fa4624d48eda0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aaae2a881ed0e8c74a4a5b36e4fa4624d48eda0", "html_url": "https://github.com/rust-lang/rust/commit/3aaae2a881ed0e8c74a4a5b36e4fa4624d48eda0"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "76b654b72af1e47977941460804b04f6d61c62c3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 39, "deletions": 8, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/67477b85ae7404508e3a963d68dbfb09a3d247f9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67477b85ae7404508e3a963d68dbfb09a3d247f9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=67477b85ae7404508e3a963d68dbfb09a3d247f9", "patch": "@@ -43,7 +43,8 @@ type glue_fns = rec(ValueRef activate_glue,\n state type trans_ctxt = rec(session.session sess,\n                             ModuleRef llmod,\n                             hashmap[str,ValueRef] upcalls,\n-                            hashmap[str,ValueRef] fns,\n+                            hashmap[str,ValueRef] fn_names,\n+                            hashmap[ast.def_id,ValueRef] fn_ids,\n                             @glue_fns glues,\n                             namegen names,\n                             str path);\n@@ -667,6 +668,9 @@ fn trans_lval(@block_ctxt cx, &ast.expr e) -> result {\n                         case (ast.def_local(?did)) {\n                             ret res(cx, cx.fcx.lllocals.get(did));\n                         }\n+                        case (ast.def_fn(?did)) {\n+                            ret res(cx, cx.fcx.tcx.fn_ids.get(did));\n+                        }\n                         case (_) {\n                             cx.fcx.tcx.sess.unimpl(\"def variant in trans\");\n                         }\n@@ -682,6 +686,20 @@ fn trans_lval(@block_ctxt cx, &ast.expr e) -> result {\n     fail;\n }\n \n+fn trans_exprs(@block_ctxt cx, &vec[@ast.expr] es)\n+    -> tup(@block_ctxt, vec[ValueRef]) {\n+    let vec[ValueRef] vs = vec();\n+    let @block_ctxt bcx = cx;\n+\n+    for (@ast.expr e in es) {\n+        auto res = trans_expr(bcx, *e);\n+        vs += res.val;\n+        bcx = res.bcx;\n+    }\n+\n+    ret tup(bcx, vs);\n+}\n+\n fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n     alt (e.node) {\n         case (ast.expr_lit(?lit, _)) {\n@@ -723,6 +741,16 @@ fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n                     cx.build.Store(rhs_res.val, lhs_res.val));\n         }\n \n+        case (ast.expr_call(?f, ?args, _)) {\n+            auto f_res = trans_lval(cx, *f);\n+            auto args_res = trans_exprs(f_res.bcx, args);\n+            auto llargs = vec(cx.fcx.lloutptr,\n+                              cx.fcx.lltaskptr);\n+            llargs += args_res._1;\n+            ret res(args_res._0,\n+                    cx.build.Call(f_res.val, llargs));\n+        }\n+\n     }\n     cx.fcx.tcx.sess.unimpl(\"expr variant in trans_expr\");\n     fail;\n@@ -895,14 +923,16 @@ fn trans_block(@block_ctxt cx, &ast.block b) -> result {\n \n fn new_fn_ctxt(@trans_ctxt cx,\n                str name,\n+               ast.def_id fid,\n                TypeRef T_out,\n                vec[TypeRef] T_explicit_args) -> @fn_ctxt {\n     let vec[TypeRef] args = vec(T_ptr(T_out), // outptr.\n                                 T_taskptr()   // taskptr\n                                 );\n     args += T_explicit_args;\n     let ValueRef llfn = decl_cdecl_fn(cx.llmod, name, args, T_void());\n-    cx.fns.insert(cx.path, llfn);\n+    cx.fn_names.insert(cx.path, llfn);\n+    cx.fn_ids.insert(fid, llfn);\n     let ValueRef lloutptr = llvm.LLVMGetParam(llfn, 0u);\n     let ValueRef lltaskptr = llvm.LLVMGetParam(llfn, 1u);\n     let hashmap[ast.def_id, ValueRef] lllocals = new_def_hash[ValueRef]();\n@@ -913,20 +943,20 @@ fn new_fn_ctxt(@trans_ctxt cx,\n              tcx=cx);\n }\n \n-fn trans_fn(@trans_ctxt cx, &ast._fn f) {\n+fn trans_fn(@trans_ctxt cx, &ast._fn f, ast.def_id fid) {\n     let TypeRef out = T_int();\n     let vec[TypeRef] args = vec();\n \n-    auto fcx = new_fn_ctxt(cx, cx.path, out, args);\n+    auto fcx = new_fn_ctxt(cx, cx.path, fid, out, args);\n \n     trans_block(new_top_block_ctxt(fcx), f.body);\n }\n \n fn trans_item(@trans_ctxt cx, &ast.item item) {\n     alt (item.node) {\n-        case (ast.item_fn(?name, ?f, _)) {\n+        case (ast.item_fn(?name, ?f, ?fid)) {\n             auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n-            trans_fn(sub_cx, f);\n+            trans_fn(sub_cx, f, fid);\n         }\n         case (ast.item_mod(?name, ?m, _)) {\n             auto sub_cx = @rec(path=cx.path + \".\" + name with *cx);\n@@ -1014,7 +1044,7 @@ fn trans_main_fn(@trans_ctxt cx, ValueRef llcrate) {\n \n     auto llargc = llvm.LLVMGetParam(llmain, 0u);\n     auto llargv = llvm.LLVMGetParam(llmain, 1u);\n-    auto llrust_main = cx.fns.get(\"_rust.main\");\n+    auto llrust_main = cx.fn_names.get(\"_rust.main\");\n \n     //\n     // Emit the moral equivalent of:\n@@ -1067,7 +1097,8 @@ fn trans_crate(session.session sess, @ast.crate crate) {\n     auto cx = @rec(sess = sess,\n                    llmod = llmod,\n                    upcalls = new_str_hash[ValueRef](),\n-                   fns = new_str_hash[ValueRef](),\n+                   fn_names = new_str_hash[ValueRef](),\n+                   fn_ids = new_def_hash[ValueRef](),\n                    glues = glues,\n                    names = namegen(0),\n                    path = \"_rust\");"}]}