{"sha": "15aad8356083e6098f7e8aefa1293b68201ec43c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YWFkODM1NjA4M2U2MDk4ZjdlOGFlZmExMjkzYjY4MjAxZWM0M2M=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-06-29T21:17:35Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-01T15:14:26Z"}, "message": "Fix infinite loops when regions are self-referential.", "tree": {"sha": "e4978d38e33cae4db23fdd5239c39f83753e8e43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4978d38e33cae4db23fdd5239c39f83753e8e43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15aad8356083e6098f7e8aefa1293b68201ec43c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAls479IACgkQAXYLT59T\n8VQ7jg//agt8DiK4Mt+vVjhTwSiSdtw+WJp5ETIMO4AsIQlu/YNhTT0Iiq/x4ZAz\nLt8BewBFPGht2+zP6qejRKx8Y2s8RAR1cyklQW4zYLQLmg9cRRclMD00ltFXxg6u\nKYhlgooUrhfPLuyzlqJ06VOLTYFXNoCJ4L8GuRg91X7CO7LtbPlDRtRO3kNwhmuQ\nlyWIRWIT6Pvo9bs7cf2y2S21fCFx/gSxviOAFbwPdXJ3zEX3DvLdNsQsMGUdbz5w\nBA081mYAI026nWGSghjiV87UpGx5XIFdGxT0CWVKFE2W8VtTWPY/7dhrS0EUcqFC\nUFTO45j69uf4cCBMmF3us+dBe0EDRUhrrG4sZvDNSI4D9YNXKPM7KujbdKwRlmE4\nPEpGwV3/BUREW0DT3nZWXIc3PLJgfXpJxLefTGOlBMi2CQgDJANuR8H542nwsuG+\nHFErTHQXKA8OETGLAtAoNMVM8LMo3Gwv1N5EGa2CCoXcn78PZMQPKzurR8eS/J4m\nnm4SsdK2x3/P0ZsIlhMw0bNZkyMpowz7jMyvePAk6yaZFCyIPyuvA8c9uv6hs9Mh\nu9uBEeni8htFYQZ+Dc/v4IsF+Hpt5aG7p7ceqUutjjroGzsKDhAkahsnOLwL3uth\necHspUxRef0eImSLFmL67mNlmQPnjS4zMfQUVSx6fNp0noBcSek=\n=I6FO\n-----END PGP SIGNATURE-----", "payload": "tree e4978d38e33cae4db23fdd5239c39f83753e8e43\nparent f334a9e8dd3438fb2f827b8f3932b18ae50e76ce\nauthor David Wood <david@davidtw.co> 1530307055 +0100\ncommitter David Wood <david@davidtw.co> 1530458066 +0100\n\nFix infinite loops when regions are self-referential.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15aad8356083e6098f7e8aefa1293b68201ec43c", "html_url": "https://github.com/rust-lang/rust/commit/15aad8356083e6098f7e8aefa1293b68201ec43c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15aad8356083e6098f7e8aefa1293b68201ec43c/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f334a9e8dd3438fb2f827b8f3932b18ae50e76ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/f334a9e8dd3438fb2f827b8f3932b18ae50e76ce", "html_url": "https://github.com/rust-lang/rust/commit/f334a9e8dd3438fb2f827b8f3932b18ae50e76ce"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "970652d8872cd71f4b4b220487fa1a90136f6249", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/15aad8356083e6098f7e8aefa1293b68201ec43c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15aad8356083e6098f7e8aefa1293b68201ec43c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting.rs?ref=15aad8356083e6098f7e8aefa1293b68201ec43c", "patch": "@@ -63,12 +63,15 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // Regions that have been visited.\n         let mut visited = FxHashSet();\n         // Ends of paths.\n-        let mut end_regions: Vec<RegionVid> = Vec::new();\n+        let mut end_regions = FxHashSet();\n \n         // When we've still got points to visit...\n         while let Some(current) = next.pop() {\n             // ...take the next point...\n-            debug!(\"find_constraint_paths_from_region: current={:?} next={:?}\", current, next);\n+            debug!(\"find_constraint_paths_from_region: current={:?} visited={:?} next={:?}\",\n+                   current, visited, next);\n+            // ...but make sure not to visit this point again...\n+            visited.insert(current);\n \n             // ...find the edges containing it...\n             let mut upcoming = Vec::new();\n@@ -93,16 +96,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             if upcoming.is_empty() {\n                 // If we didn't find any edges then this is the end of a path...\n                 debug!(\"find_constraint_paths_from_region: new end region current={:?}\", current);\n-                end_regions.push(current);\n+                end_regions.insert(current);\n             } else {\n-                // ...but, if we did find edges, then add these to the regions yet to visit...\n+                // ...but, if we did find edges, then add these to the regions yet to visit.\n                 debug!(\"find_constraint_paths_from_region: extend next upcoming={:?}\", upcoming);\n                 next.extend(upcoming);\n             }\n \n-            // ...and don't visit it again.\n-            visited.insert(current.clone());\n-            debug!(\"find_constraint_paths_from_region: next={:?} visited={:?}\", next, visited);\n         }\n \n         // Now we've visited each point, compute the final paths."}]}