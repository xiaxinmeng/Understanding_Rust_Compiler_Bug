{"sha": "ff388c12770dd8aa33ed48595f780d2aa49cd5d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMzg4YzEyNzcwZGQ4YWEzM2VkNDg1OTVmNzgwZDJhYTQ5Y2Q1ZDI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-17T15:57:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-17T22:15:27Z"}, "message": "Traits that reference `Self` in the supertrait list are not object-safe. Fixes #22040.", "tree": {"sha": "d8186d9ee41a61aa236c96ed5115949d34b279f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8186d9ee41a61aa236c96ed5115949d34b279f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff388c12770dd8aa33ed48595f780d2aa49cd5d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff388c12770dd8aa33ed48595f780d2aa49cd5d2", "html_url": "https://github.com/rust-lang/rust/commit/ff388c12770dd8aa33ed48595f780d2aa49cd5d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff388c12770dd8aa33ed48595f780d2aa49cd5d2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02e1d5ec0613c0c6e89e4cd55376b112c57a582c", "url": "https://api.github.com/repos/rust-lang/rust/commits/02e1d5ec0613c0c6e89e4cd55376b112c57a582c", "html_url": "https://github.com/rust-lang/rust/commit/02e1d5ec0613c0c6e89e4cd55376b112c57a582c"}], "stats": {"total": 177, "additions": 170, "deletions": 7}, "files": [{"sha": "d8d75f9084b6bcb17ad56b4c90a668d0b080cde7", "filename": "src/librustc/middle/traits/object_safety.rs", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ff388c12770dd8aa33ed48595f780d2aa49cd5d2/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff388c12770dd8aa33ed48595f780d2aa49cd5d2/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fobject_safety.rs?ref=ff388c12770dd8aa33ed48595f780d2aa49cd5d2", "patch": "@@ -20,7 +20,7 @@\n use super::supertraits;\n use super::elaborate_predicates;\n \n-use middle::subst::{self, SelfSpace};\n+use middle::subst::{self, SelfSpace, TypeSpace};\n use middle::traits;\n use middle::ty::{self, Ty};\n use std::rc::Rc;\n@@ -31,6 +31,10 @@ pub enum ObjectSafetyViolation<'tcx> {\n     /// Self : Sized declared on the trait\n     SizedSelf,\n \n+    /// Supertrait reference references `Self` an in illegal location\n+    /// (e.g. `trait Foo : Bar<Self>`)\n+    SupertraitSelf,\n+\n     /// Method has something illegal\n     Method(Rc<ty::Method<'tcx>>, MethodViolationCode),\n }\n@@ -110,6 +114,9 @@ fn object_safety_violations_for_trait<'tcx>(tcx: &ty::ctxt<'tcx>,\n     if trait_has_sized_self(tcx, trait_def_id) {\n         violations.push(ObjectSafetyViolation::SizedSelf);\n     }\n+    if supertraits_reference_self(tcx, trait_def_id) {\n+        violations.push(ObjectSafetyViolation::SupertraitSelf);\n+    }\n \n     debug!(\"object_safety_violations_for_trait(trait_def_id={}) = {}\",\n            trait_def_id.repr(tcx),\n@@ -118,6 +125,34 @@ fn object_safety_violations_for_trait<'tcx>(tcx: &ty::ctxt<'tcx>,\n     violations\n }\n \n+fn supertraits_reference_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n+                                    trait_def_id: ast::DefId)\n+                                    -> bool\n+{\n+    let trait_def = ty::lookup_trait_def(tcx, trait_def_id);\n+    let trait_ref = trait_def.trait_ref.clone();\n+    let predicates = ty::predicates_for_trait_ref(tcx, &ty::Binder(trait_ref));\n+    predicates\n+        .into_iter()\n+        .any(|predicate| {\n+            match predicate {\n+                ty::Predicate::Trait(ref data) => {\n+                    // In the case of a trait predicate, we can skip the \"self\" type.\n+                    data.0.trait_ref.substs.types.get_slice(TypeSpace)\n+                                                 .iter()\n+                                                 .cloned()\n+                                                 .any(is_self)\n+                }\n+                ty::Predicate::Projection(..) |\n+                ty::Predicate::TypeOutlives(..) |\n+                ty::Predicate::RegionOutlives(..) |\n+                ty::Predicate::Equate(..) => {\n+                    false\n+                }\n+            }\n+        })\n+}\n+\n fn trait_has_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n                               trait_def_id: ast::DefId)\n                               -> bool\n@@ -138,11 +173,7 @@ fn trait_has_sized_self<'tcx>(tcx: &ty::ctxt<'tcx>,\n         .any(|predicate| {\n             match predicate {\n                 ty::Predicate::Trait(ref trait_pred) if trait_pred.def_id() == sized_def_id => {\n-                    let self_ty = trait_pred.0.self_ty();\n-                    match self_ty.sty {\n-                        ty::ty_param(ref data) => data.space == subst::SelfSpace,\n-                        _ => false,\n-                    }\n+                    is_self(trait_pred.0.self_ty())\n                 }\n                 ty::Predicate::Projection(..) |\n                 ty::Predicate::Trait(..) |\n@@ -295,8 +326,17 @@ impl<'tcx> Repr<'tcx> for ObjectSafetyViolation<'tcx> {\n         match *self {\n             ObjectSafetyViolation::SizedSelf =>\n                 format!(\"SizedSelf\"),\n+            ObjectSafetyViolation::SupertraitSelf =>\n+                format!(\"SupertraitSelf\"),\n             ObjectSafetyViolation::Method(ref m, code) =>\n                 format!(\"Method({},{:?})\", m.repr(tcx), code),\n         }\n     }\n }\n+\n+fn is_self<'tcx>(ty: Ty<'tcx>) -> bool {\n+    match ty.sty {\n+        ty::ty_param(ref data) => data.space == subst::SelfSpace,\n+        _ => false,\n+    }\n+}"}, {"sha": "02eeed1cfda897c4c97e93756827177e4f4ac59c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ff388c12770dd8aa33ed48595f780d2aa49cd5d2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff388c12770dd8aa33ed48595f780d2aa49cd5d2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ff388c12770dd8aa33ed48595f780d2aa49cd5d2", "patch": "@@ -78,7 +78,7 @@ use std::marker;\n use std::mem;\n use std::ops;\n use std::rc::Rc;\n-use std::vec::CowVec;\n+use std::vec::{CowVec, IntoIter};\n use collections::enum_set::{EnumSet, CLike};\n use std::collections::{HashMap, HashSet};\n use syntax::abi;\n@@ -2034,6 +2034,40 @@ impl<'tcx> AsPredicate<'tcx> for PolyProjectionPredicate<'tcx> {\n }\n \n impl<'tcx> Predicate<'tcx> {\n+    /// Iterates over the types in this predicate. Note that in all\n+    /// cases this is skipping over a binder, so late-bound regions\n+    /// with depth 0 are bound by the predicate.\n+    pub fn walk_tys(&self) -> IntoIter<Ty<'tcx>> {\n+        let vec: Vec<_> = match *self {\n+            ty::Predicate::Trait(ref data) => {\n+                data.0.trait_ref.substs.types.as_slice().to_vec()\n+            }\n+            ty::Predicate::Equate(ty::Binder(ref data)) => {\n+                vec![data.0, data.1]\n+            }\n+            ty::Predicate::TypeOutlives(ty::Binder(ref data)) => {\n+                vec![data.0]\n+            }\n+            ty::Predicate::RegionOutlives(..) => {\n+                vec![]\n+            }\n+            ty::Predicate::Projection(ref data) => {\n+                let trait_inputs = data.0.projection_ty.trait_ref.substs.types.as_slice();\n+                trait_inputs.iter()\n+                            .cloned()\n+                            .chain(Some(data.0.ty).into_iter())\n+                            .collect()\n+            }\n+        };\n+\n+        // The only reason to collect into a vector here is that I was\n+        // too lazy to make the full (somewhat complicated) iterator\n+        // type that would be needed here. But I wanted this fn to\n+        // return an iterator conceptually, rather than a `Vec`, so as\n+        // to be closer to `Ty::walk`.\n+        vec.into_iter()\n+    }\n+\n     pub fn has_escaping_regions(&self) -> bool {\n         match *self {\n             Predicate::Trait(ref trait_ref) => trait_ref.has_escaping_regions(),"}, {"sha": "3666b69d1c678ac4cc6a64d60118b794f4bdf449", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff388c12770dd8aa33ed48595f780d2aa49cd5d2/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff388c12770dd8aa33ed48595f780d2aa49cd5d2/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=ff388c12770dd8aa33ed48595f780d2aa49cd5d2", "patch": "@@ -126,6 +126,13 @@ pub fn check_object_safety<'tcx>(tcx: &ty::ctxt<'tcx>,\n                     \"the trait cannot require that `Self : Sized`\");\n             }\n \n+            ObjectSafetyViolation::SupertraitSelf => {\n+                tcx.sess.span_note(\n+                    span,\n+                    \"the trait cannot use `Self` as a type parameter \\\n+                     in the supertrait listing\");\n+            }\n+\n             ObjectSafetyViolation::Method(method, MethodViolationCode::ByValueSelf) => {\n                 tcx.sess.span_note(\n                     span,"}, {"sha": "edf32131b6875772f68ea6d46ef90b57622dfc17", "filename": "src/test/compile-fail/object-safety-issue-22040.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ff388c12770dd8aa33ed48595f780d2aa49cd5d2/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff388c12770dd8aa33ed48595f780d2aa49cd5d2/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-issue-22040.rs?ref=ff388c12770dd8aa33ed48595f780d2aa49cd5d2", "patch": "@@ -0,0 +1,50 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #22040.\n+\n+use std::fmt::Debug;\n+\n+trait Expr: Debug + PartialEq {\n+    fn print_element_count(&self);\n+}\n+\n+//#[derive(PartialEq)]\n+#[derive(Debug)]\n+struct SExpr<'x> {\n+    elements: Vec<Box<Expr+ 'x>>,\n+}\n+\n+impl<'x> PartialEq for SExpr<'x> {\n+    fn eq(&self, other:&SExpr<'x>) -> bool {\n+        println!(\"L1: {} L2: {}\", self.elements.len(), other.elements.len());\n+        let result = self.elements.len() == other.elements.len();\n+\n+        println!(\"Got compare {}\", result);\n+        return result;\n+    }\n+}\n+\n+impl <'x> SExpr<'x> {\n+    fn new() -> SExpr<'x> { return SExpr{elements: Vec::new(),}; }\n+}\n+\n+impl <'x> Expr for SExpr<'x> {\n+    fn print_element_count(&self) {\n+        println!(\"element count: {}\", self.elements.len());\n+    }\n+}\n+\n+fn main() {\n+    let a: Box<Expr> = Box::new(SExpr::new()); //~ ERROR trait `Expr` is not object-safe\n+    let b: Box<Expr> = Box::new(SExpr::new()); //~ ERROR trait `Expr` is not object-safe\n+\n+    assert_eq!(a , b);\n+}"}, {"sha": "d3f9dc73020fb3eafe0e2483d00e273dc2b43c19", "filename": "src/test/compile-fail/object-safety-supertrait-mentions-Self.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ff388c12770dd8aa33ed48595f780d2aa49cd5d2/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff388c12770dd8aa33ed48595f780d2aa49cd5d2/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-supertrait-mentions-Self.rs?ref=ff388c12770dd8aa33ed48595f780d2aa49cd5d2", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we correctly prevent users from making trait objects\n+// form traits that make use of `Self` in an argument or return position.\n+\n+trait Bar<T> {\n+    fn bar(&self, x: &T);\n+}\n+\n+trait Baz : Bar<Self> {\n+}\n+\n+fn make_bar<T:Bar<u32>>(t: &T) -> &Bar<u32> {\n+    t\n+}\n+\n+fn make_baz<T:Baz>(t: &T) -> &Baz {\n+    t\n+        //~^ ERROR `Baz` is not object-safe\n+        //~| NOTE the trait cannot use `Self` as a type parameter in the supertrait listing\n+}\n+\n+fn main() {\n+}"}]}