{"sha": "955aebf529787fd49b05f07346e3de97da31cb09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NWFlYmY1Mjk3ODdmZDQ5YjA1ZjA3MzQ2ZTNkZTk3ZGEzMWNiMDk=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-04T08:53:28Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-04T08:53:28Z"}, "message": "Don't serialize ExpnData for foreign crates\n\nWhen we encode an ExpnId into the crate metadata, we write out the\nCrateNum of the crate that 'owns' the corresponding `ExpnData`, which\nis later used to decode the `ExpnData` from its owning crate.\n\nHowever, we current serialize the `ExpnData` for all `ExpnIds` that we\nserialize, even if the `ExpnData` was already serialized into a foreign\ncrate. This commit skips encoding this kind of `ExpnData`, which should\nhopefully speed up metadata encoding and reduce the total metadata size.", "tree": {"sha": "1a571abe3a63eebc224512172f6d9b4b8427134c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a571abe3a63eebc224512172f6d9b4b8427134c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/955aebf529787fd49b05f07346e3de97da31cb09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl8pIvUACgkQtAh+UQ6Y\nsWTtNhAArppzS+2USemOdKqcOO3PTGAbfy29QhyLx6jua4Umv3XR1zAuxh+t4qkn\ncjcLcmGZXQkKwGQDCBk+LFuLCuVldDDilV5bB2O3+13ieM4v3cAjkD7AMI2u8qpI\nVp0RvxAt6CpcWcoC6/4TNFWDb7tOaJVN/l9WLmjogm1Fy0v9qLE3JB/TSTyglUNW\nrlheDoe8+/E5Tz47Rt6fpbTfu5oK5FKrtpAQWKZkSvjT/K9V9T+Uv9AQsoDqmR+w\nW16PAFuzObTNHJMiLTmdbanslnJUNBDhsFRMPU0Pd4ERB8Ho8RLRkMp5L4cPUT2I\nqeREDUwQ/hT5QiNPiP/vuGJkXdL8ey7zJQU86K2GThvqkfXfw3OYr/Rjiwnwcnk4\nkB6xJVxEcn0E1x5lCXN67ZPXqSwvMcr1YaO9DGUQ/CZxYCtLtWujnfAcLYbUOerg\nXsuJlrqudrlBV0Ra+w0S6Q4/zFSGEaqdnwWL/fOCjHWmM/4hX4AhSTJWw5BXNDbB\nLvIttb1DDJpSanfHaByE8lDlil6LH6gK08va2SgEo8R/Wx2pIVqVHzvUUhuL36uf\n7povhVYnyzVK4omvSaSNPmC+yQs079tTO2pzYRMmTpd2QDJZqOFOVD7DwlIDIlqa\n49jpi4CuzfT3/FF7e2ArzxVfZ/cbnFiVNWy75PmgZOHBptB0IDQ=\n=oofE\n-----END PGP SIGNATURE-----", "payload": "tree 1a571abe3a63eebc224512172f6d9b4b8427134c\nparent 40857b9453a80801fc51b606b0d7532efedad42b\nauthor Aaron Hill <aa1ronham@gmail.com> 1596531208 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1596531208 -0400\n\nDon't serialize ExpnData for foreign crates\n\nWhen we encode an ExpnId into the crate metadata, we write out the\nCrateNum of the crate that 'owns' the corresponding `ExpnData`, which\nis later used to decode the `ExpnData` from its owning crate.\n\nHowever, we current serialize the `ExpnData` for all `ExpnIds` that we\nserialize, even if the `ExpnData` was already serialized into a foreign\ncrate. This commit skips encoding this kind of `ExpnData`, which should\nhopefully speed up metadata encoding and reduce the total metadata size.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/955aebf529787fd49b05f07346e3de97da31cb09", "html_url": "https://github.com/rust-lang/rust/commit/955aebf529787fd49b05f07346e3de97da31cb09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/955aebf529787fd49b05f07346e3de97da31cb09/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40857b9453a80801fc51b606b0d7532efedad42b", "url": "https://api.github.com/repos/rust-lang/rust/commits/40857b9453a80801fc51b606b0d7532efedad42b", "html_url": "https://github.com/rust-lang/rust/commit/40857b9453a80801fc51b606b0d7532efedad42b"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "87c2c1e6bd08ba64cd1e66cc94d26c4e522035cd", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/955aebf529787fd49b05f07346e3de97da31cb09/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955aebf529787fd49b05f07346e3de97da31cb09/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=955aebf529787fd49b05f07346e3de97da31cb09", "patch": "@@ -1170,13 +1170,27 @@ pub fn raw_encode_expn_id<E: Encoder>(\n     mode: ExpnDataEncodeMode,\n     e: &mut E,\n ) -> Result<(), E::Error> {\n-    if !context.serialized_expns.lock().contains(&expn) {\n-        context.latest_expns.lock().insert(expn);\n-    }\n+    // Record the fact that we need to serialize the corresponding\n+    // `ExpnData`\n+    let needs_data = || {\n+        if !context.serialized_expns.lock().contains(&expn) {\n+            context.latest_expns.lock().insert(expn);\n+        }\n+    };\n+\n     match mode {\n-        ExpnDataEncodeMode::IncrComp => expn.0.encode(e),\n+        ExpnDataEncodeMode::IncrComp => {\n+            // Always serialize the `ExpnData` in incr comp mode\n+            needs_data();\n+            expn.0.encode(e)\n+        }\n         ExpnDataEncodeMode::Metadata => {\n             let data = expn.expn_data();\n+            // We only need to serialize the ExpnData\n+            // if it comes from this crate.\n+            if data.krate == LOCAL_CRATE {\n+                needs_data();\n+            }\n             data.orig_id.expect(\"Missing orig_id\").encode(e)?;\n             data.krate.encode(e)\n         }"}]}