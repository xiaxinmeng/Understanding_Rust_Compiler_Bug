{"sha": "4b4db597722ff561515812e2e0cab255a678a41c", "node_id": "C_kwDOAAsO6NoAKDRiNGRiNTk3NzIyZmY1NjE1MTU4MTJlMmUwY2FiMjU1YTY3OGE0MWM", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-16T09:01:17Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T10:05:18Z"}, "message": "output looks fantastic", "tree": {"sha": "b94c7813bda20fb4bf87e98647117fe32ad34dc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b94c7813bda20fb4bf87e98647117fe32ad34dc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b4db597722ff561515812e2e0cab255a678a41c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b4db597722ff561515812e2e0cab255a678a41c", "html_url": "https://github.com/rust-lang/rust/commit/4b4db597722ff561515812e2e0cab255a678a41c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b4db597722ff561515812e2e0cab255a678a41c/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e53a4da4a142d3e90f8eb658a19466eca54901ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e53a4da4a142d3e90f8eb658a19466eca54901ea", "html_url": "https://github.com/rust-lang/rust/commit/e53a4da4a142d3e90f8eb658a19466eca54901ea"}], "stats": {"total": 165, "additions": 96, "deletions": 69}, "files": [{"sha": "7eeb2914c4007b2cb62c3dbd0ca98046de2f88c4", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4b4db597722ff561515812e2e0cab255a678a41c/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b4db597722ff561515812e2e0cab255a678a41c/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=4b4db597722ff561515812e2e0cab255a678a41c", "patch": "@@ -1,8 +1,9 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-// use clippy_utils::is_integer_const;\n use clippy_utils::consts::{miri_to_const, Constant};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n use rustc_errors::Applicability;\n-use rustc_hir::{HirId, Item, ItemKind, TyKind, VariantData};\n+use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::{Item, ItemKind, TyKind, VariantData};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n@@ -46,26 +47,14 @@ impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutReprC {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         dbg!(item.ident);\n \n-        let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id);\n-        let hir_id2 = item.hir_id();\n-        dbg!(hir_id);\n-        dbg!(hir_id2);\n-        dbg!(hir_id == hir_id2);\n-\n-        let span1 = cx.tcx.hir().span(hir_id);\n-        let span2 = item.span;\n-        dbg!(span1);\n-        dbg!(span2);\n-        dbg!(span1 == span2);\n-\n-        if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_c(cx, hir_id) {\n+        if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_c(cx, item.def_id) {\n             span_lint_and_sugg(\n                 cx,\n                 TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR_C,\n-                span2,\n-                \"trailing zero-sized array in a struct which isn't marked `#[repr(C)]`\",\n+                item.span,\n+                \"trailing zero-sized array in a struct which is not marked `#[repr(C)]`\",\n                 \"try\",\n-                \"#[repr(C)]\".to_string(),\n+                format!(\"#[repr(C)]\\n{}\", snippet(cx, item.span, \"..\")),\n                 Applicability::MaybeIncorrect,\n             );\n         }\n@@ -101,13 +90,14 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n     false\n }\n \n-fn has_repr_c(cx: &LateContext<'tcx>, hir_id: HirId) -> bool {\n+fn has_repr_c(cx: &LateContext<'tcx>, def_id: LocalDefId) -> bool {\n+    let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n     let attrs = cx.tcx.hir().attrs(hir_id);\n+\n     // NOTE: Can there ever be more than one `repr` attribute?\n     // other `repr` syms: repr, repr128, repr_align, repr_align_enum, repr_no_niche, repr_packed,\n     // repr_simd, repr_transparent\n-\n-    if let Some(repr_attr) = attrs.iter().find(|attr| attr.has_name(sym::repr)) {\n+    if let Some(_repr_attr) = attrs.iter().find(|attr| attr.has_name(sym::repr)) {\n         // eprintln!(\"repr: true\");\n         true\n     } else {"}, {"sha": "311193fb4a1b62018b88c037524c98476c880286", "filename": "tests/ui/trailing_zero_sized_array_without_repr_c.rs", "status": "modified", "additions": 84, "deletions": 47, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/4b4db597722ff561515812e2e0cab255a678a41c/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b4db597722ff561515812e2e0cab255a678a41c/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr_c.rs?ref=4b4db597722ff561515812e2e0cab255a678a41c", "patch": "@@ -1,5 +1,7 @@\n #![warn(clippy::trailing_zero_sized_array_without_repr_c)]\n \n+// #![feature(const_generics_defaults)]\n+\n struct RarelyUseful {\n     field: i32,\n     last: [usize; 0],\n@@ -15,62 +17,97 @@ struct OnlyFieldIsZeroSizeArray {\n     first_and_last: [usize; 0],\n }\n \n-// struct GenericArrayType<T> {\n-//     field: i32,\n-//     last: [T; 0],\n-// }\n+struct GenericArrayType<T> {\n+    field: i32,\n+    last: [T; 0],\n+}\n \n-// struct SizedArray {\n-//     field: i32,\n-//     last: [usize; 1],\n-// }\n+struct SizedArray {\n+    field: i32,\n+    last: [usize; 1],\n+}\n \n-// const ZERO: usize = 0;\n-// struct ZeroSizedFromExternalConst {\n-//     field: i32,\n-//     last: [usize; ZERO],\n-// }\n+const ZERO: usize = 0;\n+struct ZeroSizedFromExternalConst {\n+    field: i32,\n+    last: [usize; ZERO],\n+}\n+\n+const ONE: usize = 1;\n+struct NonZeroSizedFromExternalConst {\n+    field: i32,\n+    last: [usize; ONE],\n+}\n \n-// const ONE: usize = 1;\n-// struct NonZeroSizedFromExternalConst {\n+#[allow(clippy::eq_op)] // lmao im impressed\n+const fn compute_zero() -> usize {\n+    (4 + 6) - (2 * 5)\n+}\n+struct UsingFunction {\n+    field: i32,\n+    last: [usize; compute_zero()],\n+}\n+\n+// #[repr(C)]\n+// struct ConstParamOk<const N: usize = 0> {\n //     field: i32,\n-//     last: [usize; ONE],\n+//     last: [usize; N]\n // }\n \n-// #[allow(clippy::eq_op)] // lmao im impressed\n-// const fn compute_zero() -> usize {\n-//     (4 + 6) - (2 * 5)\n-// }\n-// struct UsingFunction {\n+// struct ConstParamLint<const N: usize = 0> {\n //     field: i32,\n-//     last: [usize; compute_zero()],\n+//     last: [usize; N]\n // }\n \n-// // TODO: same\n-// #[repr(packed)]\n-// struct ReprPacked {\n-//     small: u8,\n-//     medium: i32,\n-//     weird: [u64; 0],\n-// }\n \n-// // TODO: actually, uh,, \n-// #[repr(align(64))]\n-// struct ReprAlign {\n-//     field: i32,\n-//     last: [usize; 0],\n-// }\n-// #[repr(C, align(64))]\n-// struct ReprCAlign {\n-//     field: i32,\n-//     last: [usize; 0],\n-// }\n+// TODO: actually, uh,,\n+#[repr(packed)]\n+struct ReprPacked {\n+    small: u8,\n+    medium: i32,\n+    weird: [u64; 0],\n+}\n \n-// #[repr(C)]\n-// enum DontLintAnonymousStructsFromDesuraging {\n-//     A(u32),\n-//     B(f32, [u64; 0]),\n-//     C { x: u32, y: [u64; 0] },\n-// }\n+// same\n+#[repr(align(64))]\n+struct ReprAlign {\n+    field: i32,\n+    last: [usize; 0],\n+}\n \n-fn main() {}\n+// same\n+#[repr(C, align(64))]\n+struct ReprCAlign {\n+    field: i32,\n+    last: [usize; 0],\n+}\n+\n+#[repr(C)]\n+enum DontLintAnonymousStructsFromDesuraging {\n+    A(u32),\n+    B(f32, [u64; 0]),\n+    C { x: u32, y: [u64; 0] },\n+}\n+\n+struct LotsOfFields {\n+    f1: u32,\n+    f2: u32,\n+    f3: u32,\n+    f4: u32,\n+    f5: u32,\n+    f6: u32,\n+    f7: u32,\n+    f8: u32,\n+    f9: u32,\n+    f10: u32,\n+    f11: u32,\n+    f12: u32,\n+    f13: u32,\n+    f14: u32,\n+    f15: u32,\n+    f16: u32,\n+    last: [usize; 0],\n+}\n+\n+fn main() {\n+}"}]}