{"sha": "4ed3826f27055e51a85378afa5493c6630cbe80d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZDM4MjZmMjcwNTVlNTFhODUzNzhhZmE1NDkzYzY2MzBjYmU4MGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-02T01:31:15Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-02T01:31:15Z"}, "message": "Rollup merge of #31982 - apasel422:sync, r=alexcrichton\n\nThese types were already `!Sync`, but this improves error messages when they are used in contexts that require `Sync`, aligning them with conventions used with `Rc`, among others.\n\nr? @alexcrichton", "tree": {"sha": "be7964236aa4eb74489eeda215891798685a1a0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be7964236aa4eb74489eeda215891798685a1a0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ed3826f27055e51a85378afa5493c6630cbe80d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed3826f27055e51a85378afa5493c6630cbe80d", "html_url": "https://github.com/rust-lang/rust/commit/4ed3826f27055e51a85378afa5493c6630cbe80d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ed3826f27055e51a85378afa5493c6630cbe80d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d4422e1fc2d579b1f7f28837c2cc78f453d818a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4422e1fc2d579b1f7f28837c2cc78f453d818a", "html_url": "https://github.com/rust-lang/rust/commit/9d4422e1fc2d579b1f7f28837c2cc78f453d818a"}, {"sha": "f522d882373067ab79ea0fdc30be6150eeccb1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f522d882373067ab79ea0fdc30be6150eeccb1fd", "html_url": "https://github.com/rust-lang/rust/commit/f522d882373067ab79ea0fdc30be6150eeccb1fd"}], "stats": {"total": 100, "additions": 46, "deletions": 54}, "files": [{"sha": "144adde12e42b119b962b47907941aa226f850ff", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3826f27055e51a85378afa5493c6630cbe80d/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3826f27055e51a85378afa5493c6630cbe80d/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=4ed3826f27055e51a85378afa5493c6630cbe80d", "patch": "@@ -241,6 +241,9 @@ impl<T:Copy> Cell<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T> Send for Cell<T> where T: Send {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> !Sync for Cell<T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Copy> Clone for Cell<T> {\n     #[inline]\n@@ -461,6 +464,9 @@ impl<T: ?Sized> RefCell<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized> Send for RefCell<T> where T: Send {}\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> !Sync for RefCell<T> {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Clone> Clone for RefCell<T> {\n     #[inline]"}, {"sha": "dbcc2bc95bc2147511f201a82960373ad591ef25", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3826f27055e51a85378afa5493c6630cbe80d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3826f27055e51a85378afa5493c6630cbe80d/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=4ed3826f27055e51a85378afa5493c6630cbe80d", "patch": "@@ -299,6 +299,9 @@ pub struct Receiver<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Send> Send for Receiver<T> { }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> !Sync for Receiver<T> { }\n+\n /// An iterator over messages on a receiver, this iterator will block\n /// whenever `next` is called, waiting for a new message, and `None` will be\n /// returned when the corresponding channel has hung up.\n@@ -327,6 +330,9 @@ pub struct Sender<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: Send> Send for Sender<T> { }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T> !Sync for Sender<T> { }\n+\n /// The sending-half of Rust's synchronous channel type. This half can only be\n /// owned by one thread, but it can be cloned to send to other threads.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "305acfec40114aad89cc92258594b8cc07c338b4", "filename": "src/test/compile-fail/comm-not-freeze-receiver.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d4422e1fc2d579b1f7f28837c2cc78f453d818a/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4422e1fc2d579b1f7f28837c2cc78f453d818a/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze-receiver.rs?ref=9d4422e1fc2d579b1f7f28837c2cc78f453d818a", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::sync::mpsc::Receiver;\n-\n-fn test<T: Sync>() {}\n-\n-fn main() {\n-    test::<Receiver<isize>>();   //~ ERROR: `core::marker::Sync` is not implemented\n-}"}, {"sha": "de2c96920c38b45d8bcbfe5d38a32eb54a2c0ec3", "filename": "src/test/compile-fail/comm-not-freeze.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9d4422e1fc2d579b1f7f28837c2cc78f453d818a/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4422e1fc2d579b1f7f28837c2cc78f453d818a/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcomm-not-freeze.rs?ref=9d4422e1fc2d579b1f7f28837c2cc78f453d818a", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::sync::mpsc::Sender;\n-\n-fn test<T: Sync>() {}\n-\n-fn main() {\n-    test::<Sender<isize>>();     //~ ERROR: `core::marker::Sync` is not implemented\n-}"}, {"sha": "4bc3442871f5d749dba9e83d1e297ea1b0a0e281", "filename": "src/test/compile-fail/no_share-rc.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9d4422e1fc2d579b1f7f28837c2cc78f453d818a/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4422e1fc2d579b1f7f28837c2cc78f453d818a/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs?ref=9d4422e1fc2d579b1f7f28837c2cc78f453d818a", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::rc::Rc;\n-use std::cell::RefCell;\n-\n-fn bar<T: Sync>(_: T) {}\n-\n-fn main() {\n-    let x = Rc::new(RefCell::new(5));\n-    bar(x);\n-    //~^ ERROR the trait `core::marker::Sync` is not implemented\n-}"}, {"sha": "a60138c6e1f69aa13884b3bd56ccf68fc2ea097f", "filename": "src/test/compile-fail/not-sync.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4ed3826f27055e51a85378afa5493c6630cbe80d/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed3826f27055e51a85378afa5493c6630cbe80d/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-sync.rs?ref=4ed3826f27055e51a85378afa5493c6630cbe80d", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::{Cell, RefCell};\n+use std::rc::{Rc, Weak};\n+use std::sync::mpsc::{Receiver, Sender, SyncSender};\n+\n+fn test<T: Sync>() {}\n+\n+fn main() {\n+    test::<Cell<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `core::cell::Cell<i32>`\n+    test::<RefCell<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `core::cell::RefCell<i32>`\n+\n+    test::<Rc<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `alloc::rc::Rc<i32>`\n+    test::<Weak<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `alloc::rc::Weak<i32>`\n+\n+    test::<Receiver<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::Receiver<i32>`\n+    test::<Sender<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::Sender<i32>`\n+    test::<SyncSender<i32>>();\n+    //~^ ERROR marker::Sync` is not implemented for the type `std::sync::mpsc::SyncSender<i32>`\n+}"}]}