{"sha": "941d4bfa53ebf4dd683889c2151544bcc3095073", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MWQ0YmZhNTNlYmY0ZGQ2ODM4ODljMjE1MTU0NGJjYzMwOTUwNzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T07:26:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T07:27:59Z"}, "message": "Simplify", "tree": {"sha": "5cc950031a414bb0a9d9580b6f4416a34dc02e14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cc950031a414bb0a9d9580b6f4416a34dc02e14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/941d4bfa53ebf4dd683889c2151544bcc3095073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/941d4bfa53ebf4dd683889c2151544bcc3095073", "html_url": "https://github.com/rust-lang/rust/commit/941d4bfa53ebf4dd683889c2151544bcc3095073", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/941d4bfa53ebf4dd683889c2151544bcc3095073/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d401092f004f7f61e622b6c1d19a32799cbe31f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d401092f004f7f61e622b6c1d19a32799cbe31f", "html_url": "https://github.com/rust-lang/rust/commit/5d401092f004f7f61e622b6c1d19a32799cbe31f"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "3e73cf6fff6d3ede3be5b9b3b51a6a36c708f6a1", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/941d4bfa53ebf4dd683889c2151544bcc3095073/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941d4bfa53ebf4dd683889c2151544bcc3095073/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=941d4bfa53ebf4dd683889c2151544bcc3095073", "patch": "@@ -49,7 +49,7 @@ impl fmt::Display for FlycheckConfig {\n #[derive(Debug)]\n pub struct FlycheckHandle {\n     // XXX: drop order is significant\n-    cmd_send: Sender<CheckCommand>,\n+    cmd_send: Sender<Restart>,\n     handle: jod_thread::JoinHandle,\n }\n \n@@ -59,7 +59,7 @@ impl FlycheckHandle {\n         config: FlycheckConfig,\n         workspace_root: PathBuf,\n     ) -> FlycheckHandle {\n-        let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n+        let (cmd_send, cmd_recv) = unbounded::<Restart>();\n         let handle = jod_thread::spawn(move || {\n             FlycheckActor::new(sender, config, workspace_root).run(&cmd_recv);\n         });\n@@ -68,7 +68,7 @@ impl FlycheckHandle {\n \n     /// Schedule a re-start of the cargo check worker.\n     pub fn update(&self) {\n-        self.cmd_send.send(CheckCommand::Update).unwrap();\n+        self.cmd_send.send(Restart).unwrap();\n     }\n }\n \n@@ -91,10 +91,7 @@ pub enum Progress {\n     End,\n }\n \n-enum CheckCommand {\n-    /// Request re-start of check thread\n-    Update,\n-}\n+struct Restart;\n \n struct FlycheckActor {\n     sender: Box<dyn Fn(Message) + Send>,\n@@ -127,14 +124,14 @@ impl FlycheckActor {\n         }\n     }\n \n-    fn run(&mut self, cmd_recv: &Receiver<CheckCommand>) {\n+    fn run(&mut self, cmd_recv: &Receiver<Restart>) {\n         // If we rerun the thread, we need to discard the previous check results first\n         self.clean_previous_results();\n \n         loop {\n             select! {\n                 recv(&cmd_recv) -> cmd => match cmd {\n-                    Ok(cmd) => self.handle_command(cmd),\n+                    Ok(Restart) => self.last_update_req = Some(Instant::now()),\n                     Err(RecvError) => {\n                         // Command channel has closed, so shut down\n                         break;\n@@ -174,12 +171,6 @@ impl FlycheckActor {\n         false\n     }\n \n-    fn handle_command(&mut self, cmd: CheckCommand) {\n-        match cmd {\n-            CheckCommand::Update => self.last_update_req = Some(Instant::now()),\n-        }\n-    }\n-\n     fn handle_message(&self, msg: CheckEvent) {\n         match msg {\n             CheckEvent::Begin => {"}]}