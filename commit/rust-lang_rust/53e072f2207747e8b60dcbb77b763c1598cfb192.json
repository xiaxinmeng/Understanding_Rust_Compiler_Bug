{"sha": "53e072f2207747e8b60dcbb77b763c1598cfb192", "node_id": "C_kwDOAAsO6NoAKDUzZTA3MmYyMjA3NzQ3ZThiNjBkY2JiNzdiNzYzYzE1OThjZmIxOTI", "commit": {"author": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-10-05T21:11:49Z"}, "committer": {"name": "Dan Gohman", "email": "dev@sunfishcode.online", "date": "2021-10-05T21:13:07Z"}, "message": "Fix compilation on WASI, which doesn't yet support `dup`.", "tree": {"sha": "35791ed38c5d4e38e1882e6412be2d225402a7d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35791ed38c5d4e38e1882e6412be2d225402a7d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53e072f2207747e8b60dcbb77b763c1598cfb192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53e072f2207747e8b60dcbb77b763c1598cfb192", "html_url": "https://github.com/rust-lang/rust/commit/53e072f2207747e8b60dcbb77b763c1598cfb192", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53e072f2207747e8b60dcbb77b763c1598cfb192/comments", "author": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sunfishcode", "id": 4503403, "node_id": "MDQ6VXNlcjQ1MDM0MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/4503403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sunfishcode", "html_url": "https://github.com/sunfishcode", "followers_url": "https://api.github.com/users/sunfishcode/followers", "following_url": "https://api.github.com/users/sunfishcode/following{/other_user}", "gists_url": "https://api.github.com/users/sunfishcode/gists{/gist_id}", "starred_url": "https://api.github.com/users/sunfishcode/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sunfishcode/subscriptions", "organizations_url": "https://api.github.com/users/sunfishcode/orgs", "repos_url": "https://api.github.com/users/sunfishcode/repos", "events_url": "https://api.github.com/users/sunfishcode/events{/privacy}", "received_events_url": "https://api.github.com/users/sunfishcode/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d6a4c85ca037ac07cac6029c2b174678c39a40d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6a4c85ca037ac07cac6029c2b174678c39a40d", "html_url": "https://github.com/rust-lang/rust/commit/2d6a4c85ca037ac07cac6029c2b174678c39a40d"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "0b6588db92c83102b30fb5fe7a17de01c82a4acf", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/53e072f2207747e8b60dcbb77b763c1598cfb192/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53e072f2207747e8b60dcbb77b763c1598cfb192/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=53e072f2207747e8b60dcbb77b763c1598cfb192", "patch": "@@ -8,6 +8,7 @@ use crate::fmt;\n use crate::fs;\n use crate::marker::PhantomData;\n use crate::mem::forget;\n+#[cfg(not(target_os = \"wasi\"))]\n use crate::sys::cvt;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n@@ -71,6 +72,7 @@ impl BorrowedFd<'_> {\n impl OwnedFd {\n     /// Creates a new `OwnedFd` instance that shares the same underlying file handle\n     /// as the existing `OwnedFd` instance.\n+    #[cfg(not(target_os = \"wasi\"))]\n     pub fn try_clone(&self) -> crate::io::Result<Self> {\n         // We want to atomically duplicate this file descriptor and set the\n         // CLOEXEC flag, and currently that's done via F_DUPFD_CLOEXEC. This\n@@ -88,6 +90,14 @@ impl OwnedFd {\n         let fd = cvt(unsafe { libc::fcntl(self.as_raw_fd(), cmd, 0) })?;\n         Ok(unsafe { Self::from_raw_fd(fd) })\n     }\n+\n+    #[cfg(target_os = \"wasi\")]\n+    pub fn try_clone(&self) -> crate::io::Result<Self> {\n+        Err(crate::io::Error::new_const(\n+            crate::io::ErrorKind::Unsupported,\n+            &\"operation not supported on WASI yet\",\n+        ))\n+    }\n }\n \n #[unstable(feature = \"io_safety\", issue = \"87074\")]"}]}