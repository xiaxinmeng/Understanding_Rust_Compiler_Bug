{"sha": "88262984eb623f683e61e657363459550ba93199", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjYyOTg0ZWI2MjNmNjgzZTYxZTY1NzM2MzQ1OTU1MGJhOTMxOTk=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-05T03:05:28Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-06-09T01:47:33Z"}, "message": "Show `SyntaxContext` in formatted `Span` debug output\n\nThis is only really useful in debug messages, so I've switched to\ncalling `span_to_string` in any place that causes a `Span` to end up in\nuser-visible output.", "tree": {"sha": "f62c22090bc1c7c13f4ce0aba3ec30d03b99545e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f62c22090bc1c7c13f4ce0aba3ec30d03b99545e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88262984eb623f683e61e657363459550ba93199", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl7e6jUACgkQtAh+UQ6Y\nsWQ+ShAAhQK6FX76LPW112+6mD4JSmdLASRqc18ma1DK2Stp2okJMdK8uRvJcfQ5\n8ckWr4u5gIYT/0XK7EgqXXro0v2PWznQUzUx2YQEfUBzsIRHvxCNMJOqMvRaLKZJ\ne8flOSX0fpsg4VA9Puba3h8MaPn6EvklPdhjgc0htpE4Mb26jtQioSKWK254AIy6\nkb2F4ZAqkJnuhwR/Rn3iHGDIN2eY5aMqRqOWd6LBCgsqtJSlVqGmHNKjQSoMMRIy\nnZm47JMMdkUTqZp9uSB3yncOgvY/AKHAuIJbvHCCq3de9N58i+lnSKDeWoMdWozg\nhrw5exOq31y4tYMn8+pmi+pRFytZIWvEK/hf2xm8WOpJkrYub/oQ2hKwnkEE4os3\nyJShw53IONL76xcfVQTl+nvCDakf0JnqRFxwpjFibalhMI76fjm7tCQ0lohx1kfF\nBYNMqTSQTZ0NzgrnN1ZvE1xMY0rnMPwDn18SPn/oRJEiUuMRG0V/0GwAD8CO0zGp\nmHdQbUTniJHDi0qwEWuBEplvd7P0MLDLz2iriM7bTWQiRYetQoSAvGGmrFPLcZ+G\nUSydxCjnV5mGJWSWk7OrqTTU/QpQ+N4lqlmbLwL/iCuxVsb19L0ZSdGUI5Q5l04G\njIy1sBdWFmNFQQf0WixeS209u53MVCPmlS/G4FRw6SBFZJLPXI0=\n=onAw\n-----END PGP SIGNATURE-----", "payload": "tree f62c22090bc1c7c13f4ce0aba3ec30d03b99545e\nparent fd4b177aabb9749dfb562c48e47379cea81dc277\nauthor Aaron Hill <aa1ronham@gmail.com> 1591326328 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1591667253 -0400\n\nShow `SyntaxContext` in formatted `Span` debug output\n\nThis is only really useful in debug messages, so I've switched to\ncalling `span_to_string` in any place that causes a `Span` to end up in\nuser-visible output.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88262984eb623f683e61e657363459550ba93199", "html_url": "https://github.com/rust-lang/rust/commit/88262984eb623f683e61e657363459550ba93199", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88262984eb623f683e61e657363459550ba93199/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd4b177aabb9749dfb562c48e47379cea81dc277", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd4b177aabb9749dfb562c48e47379cea81dc277", "html_url": "https://github.com/rust-lang/rust/commit/fd4b177aabb9749dfb562c48e47379cea81dc277"}], "stats": {"total": 122, "additions": 75, "deletions": 47}, "files": [{"sha": "7fa1a3eb0f591b02abcbaa53801492938ddf90c7", "filename": "src/librustc_interface/callbacks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_interface%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_interface%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fcallbacks.rs?ref=88262984eb623f683e61e657363459550ba93199", "patch": "@@ -18,7 +18,7 @@ use std::fmt;\n fn span_debug(span: rustc_span::Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     tls::with_opt(|tcx| {\n         if let Some(tcx) = tcx {\n-            write!(f, \"{}\", tcx.sess.source_map().span_to_string(span))\n+            rustc_span::debug_with_source_map(span, f, tcx.sess.source_map())\n         } else {\n             rustc_span::default_span_debug(span, f)\n         }"}, {"sha": "56d3afe961ce99ee9e30d9d7f8d9591c8a9e44c4", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=88262984eb623f683e61e657363459550ba93199", "patch": "@@ -2449,7 +2449,8 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                                     tcx.def_path_str_with_substs(def_id.to_def_id(), substs),\n                                 )\n                             } else {\n-                                format!(\"[closure@{:?}]\", tcx.hir().span(hir_id))\n+                                let span = tcx.hir().span(hir_id);\n+                                format!(\"[closure@{}]\", tcx.sess.source_map().span_to_string(span))\n                             };\n                             let mut struct_fmt = fmt.debug_struct(&name);\n "}, {"sha": "017f7270761a4dbf41442cb01f30a92ba2983261", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=88262984eb623f683e61e657363459550ba93199", "patch": "@@ -605,7 +605,8 @@ pub trait PrettyPrinter<'tcx>:\n                 // FIXME(eddyb) should use `def_span`.\n                 if let Some(did) = did.as_local() {\n                     let hir_id = self.tcx().hir().as_local_hir_id(did);\n-                    p!(write(\"@{:?}\", self.tcx().hir().span(hir_id)));\n+                    let span = self.tcx().hir().span(hir_id);\n+                    p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n \n                     if substs.as_generator().is_valid() {\n                         let upvar_tys = substs.as_generator().upvar_tys();\n@@ -653,7 +654,8 @@ pub trait PrettyPrinter<'tcx>:\n                     if self.tcx().sess.opts.debugging_opts.span_free_formats {\n                         p!(write(\"@\"), print_def_path(did.to_def_id(), substs));\n                     } else {\n-                        p!(write(\"@{:?}\", self.tcx().hir().span(hir_id)));\n+                        let span = self.tcx().hir().span(hir_id);\n+                        p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n                     }\n \n                     if substs.as_closure().is_valid() {\n@@ -1362,7 +1364,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n                 if !self.empty_path {\n                     write!(self, \"::\")?;\n                 }\n-                write!(self, \"<impl at {:?}>\", span)?;\n+                write!(self, \"<impl at {}>\", self.tcx.sess.source_map().span_to_string(span))?;\n                 self.empty_path = false;\n \n                 return Ok(self);"}, {"sha": "375b3210e8c2ced12ea8d4a896ed9d5e257192c5", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=88262984eb623f683e61e657363459550ba93199", "patch": "@@ -314,7 +314,7 @@ pub(super) fn dump_mir_results<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     source: MirSource<'tcx>,\n     body: &Body<'tcx>,\n-    regioncx: &RegionInferenceContext<'_>,\n+    regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n ) {\n     if !mir_util::dump_enabled(infcx.tcx, \"nll\", source.def_id()) {\n@@ -325,7 +325,7 @@ pub(super) fn dump_mir_results<'a, 'tcx>(\n         match pass_where {\n             // Before the CFG, dump out the values for each region variable.\n             PassWhere::BeforeCFG => {\n-                regioncx.dump_mir(out)?;\n+                regioncx.dump_mir(infcx.tcx, out)?;\n                 writeln!(out, \"|\")?;\n \n                 if let Some(closure_region_requirements) = closure_region_requirements {"}, {"sha": "d6e48deb031ac317326d72f27a85d7700726905a", "filename": "src/librustc_mir/borrow_check/region_infer/dump_mir.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fdump_mir.rs?ref=88262984eb623f683e61e657363459550ba93199", "patch": "@@ -4,7 +4,9 @@\n //! context internal state.\n \n use super::{OutlivesConstraint, RegionInferenceContext};\n+use crate::borrow_check::type_check::Locations;\n use rustc_infer::infer::NLLRegionVariableOrigin;\n+use rustc_middle::ty::TyCtxt;\n use std::io::{self, Write};\n \n // Room for \"'_#NNNNr\" before things get misaligned.\n@@ -14,7 +16,7 @@ const REGION_WIDTH: usize = 8;\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Write out our state into the `.mir` files.\n-    pub(crate) fn dump_mir(&self, out: &mut dyn Write) -> io::Result<()> {\n+    pub(crate) fn dump_mir(&self, tcx: TyCtxt<'tcx>, out: &mut dyn Write) -> io::Result<()> {\n         writeln!(out, \"| Free Region Mapping\")?;\n \n         for region in self.regions() {\n@@ -48,7 +50,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         writeln!(out, \"|\")?;\n         writeln!(out, \"| Inference Constraints\")?;\n-        self.for_each_constraint(&mut |msg| writeln!(out, \"| {}\", msg))?;\n+        self.for_each_constraint(tcx, &mut |msg| writeln!(out, \"| {}\", msg))?;\n \n         Ok(())\n     }\n@@ -59,6 +61,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// inference resulted in the values that it did when debugging.\n     fn for_each_constraint(\n         &self,\n+        tcx: TyCtxt<'tcx>,\n         with_msg: &mut dyn FnMut(&str) -> io::Result<()>,\n     ) -> io::Result<()> {\n         for region in self.definitions.indices() {\n@@ -72,7 +75,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         constraints.sort();\n         for constraint in &constraints {\n             let OutlivesConstraint { sup, sub, locations, category } = constraint;\n-            with_msg(&format!(\"{:?}: {:?} due to {:?} at {:?}\", sup, sub, category, locations,))?;\n+            let (name, arg) = match locations {\n+                Locations::All(span) => (\"All\", tcx.sess.source_map().span_to_string(*span)),\n+                Locations::Single(loc) => (\"Single\", format!(\"{:?}\", loc)),\n+            };\n+            with_msg(&format!(\"{:?}: {:?} due to {:?} at {}({})\", sup, sub, category, name, arg))?;\n         }\n \n         Ok(())"}, {"sha": "02614044063fce04a66dac26add05396ba11b64c", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=88262984eb623f683e61e657363459550ba93199", "patch": "@@ -135,7 +135,7 @@ fn dump_matched_mir_node<'tcx, F>(\n         }\n         writeln!(file)?;\n         extra_data(PassWhere::BeforeCFG, &mut file)?;\n-        write_user_type_annotations(body, &mut file)?;\n+        write_user_type_annotations(tcx, body, &mut file)?;\n         write_mir_fn(tcx, source, body, &mut extra_data, &mut file)?;\n         extra_data(PassWhere::AfterCFG, &mut file)?;\n     };\n@@ -351,7 +351,7 @@ fn write_extra<'tcx, F>(tcx: TyCtxt<'tcx>, write: &mut dyn Write, mut visit_op:\n where\n     F: FnMut(&mut ExtraComments<'tcx>),\n {\n-    let mut extra_comments = ExtraComments { _tcx: tcx, comments: vec![] };\n+    let mut extra_comments = ExtraComments { tcx, comments: vec![] };\n     visit_op(&mut extra_comments);\n     for comment in extra_comments.comments {\n         writeln!(write, \"{:A$} // {}\", \"\", comment, A = ALIGN)?;\n@@ -360,7 +360,7 @@ where\n }\n \n struct ExtraComments<'tcx> {\n-    _tcx: TyCtxt<'tcx>, // don't need it now, but bet we will soon\n+    tcx: TyCtxt<'tcx>,\n     comments: Vec<String>,\n }\n \n@@ -377,7 +377,7 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n         self.super_constant(constant, location);\n         let Constant { span, user_ty, literal } = constant;\n         self.push(\"mir::Constant\");\n-        self.push(&format!(\"+ span: {:?}\", span));\n+        self.push(&format!(\"+ span: {}\", self.tcx.sess.source_map().span_to_string(*span)));\n         if let Some(user_ty) = user_ty {\n             self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n         }\n@@ -862,12 +862,22 @@ fn write_mir_sig(\n     Ok(())\n }\n \n-fn write_user_type_annotations(body: &Body<'_>, w: &mut dyn Write) -> io::Result<()> {\n+fn write_user_type_annotations(\n+    tcx: TyCtxt<'_>,\n+    body: &Body<'_>,\n+    w: &mut dyn Write,\n+) -> io::Result<()> {\n     if !body.user_type_annotations.is_empty() {\n         writeln!(w, \"| User Type Annotations\")?;\n     }\n     for (index, annotation) in body.user_type_annotations.iter_enumerated() {\n-        writeln!(w, \"| {:?}: {:?} at {:?}\", index.index(), annotation.user_ty, annotation.span)?;\n+        writeln!(\n+            w,\n+            \"| {:?}: {:?} at {}\",\n+            index.index(),\n+            annotation.user_ty,\n+            tcx.sess.source_map().span_to_string(annotation.span)\n+        )?;\n     }\n     if !body.user_type_annotations.is_empty() {\n         writeln!(w, \"|\")?;"}, {"sha": "a543fd7df8ce9ddc552d58cba9837b5089348dd1", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88262984eb623f683e61e657363459550ba93199/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=88262984eb623f683e61e657363459550ba93199", "patch": "@@ -726,10 +726,18 @@ pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) ->\n     f()\n }\n \n+pub fn debug_with_source_map(\n+    span: Span,\n+    f: &mut fmt::Formatter<'_>,\n+    source_map: &SourceMap,\n+) -> fmt::Result {\n+    write!(f, \"{} ({:?})\", source_map.span_to_string(span), span.ctxt())\n+}\n+\n pub fn default_span_debug(span: Span, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n     GLOBALS.with(|globals| {\n         if let Some(source_map) = &*globals.source_map.borrow() {\n-            write!(f, \"{}\", source_map.span_to_string(span))\n+            debug_with_source_map(span, f, source_map)\n         } else {\n             f.debug_struct(\"Span\")\n                 .field(\"lo\", &span.lo())"}, {"sha": "2c05bdbc492a45d963c70a02b79a45b2a7132ef7", "filename": "src/test/ui/proc-macro/debug/dump-debug-span-debug.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/88262984eb623f683e61e657363459550ba93199/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88262984eb623f683e61e657363459550ba93199/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdebug%2Fdump-debug-span-debug.stderr?ref=88262984eb623f683e61e657363459550ba93199", "patch": "@@ -1,166 +1,166 @@\n-TokenStream [Ident { ident: \"ident\", span: $DIR/dump-debug-span-debug.rs:9:5: 9:10 }, Ident { ident: \"r#ident\", span: $DIR/dump-debug-span-debug.rs:10:5: 10:12 }, Punct { ch: ',', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:11:5: 11:6 }, Punct { ch: '=', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:12:5: 12:7 }, Punct { ch: '=', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:12:5: 12:7 }, Punct { ch: '>', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:12:7: 12:8 }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/dump-debug-span-debug.rs:13:5: 13:7 }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: \"_\", span: $DIR/dump-debug-span-debug.rs:14:6: 14:7 }], span: $DIR/dump-debug-span-debug.rs:14:5: 14:8 }, Literal { kind: Integer, symbol: \"0\", suffix: None, span: $DIR/dump-debug-span-debug.rs:17:5: 17:6 }, Literal { kind: Float, symbol: \"1.0\", suffix: None, span: $DIR/dump-debug-span-debug.rs:18:5: 18:8 }, Literal { kind: Str, symbol: \"S\", suffix: None, span: $DIR/dump-debug-span-debug.rs:19:5: 19:8 }, Literal { kind: ByteStr, symbol: \"B\", suffix: None, span: $DIR/dump-debug-span-debug.rs:20:5: 20:9 }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: None, span: $DIR/dump-debug-span-debug.rs:21:5: 21:9 }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: None, span: $DIR/dump-debug-span-debug.rs:22:5: 22:13 }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: None, span: $DIR/dump-debug-span-debug.rs:23:5: 23:11 }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: None, span: $DIR/dump-debug-span-debug.rs:24:5: 24:15 }, Literal { kind: Char, symbol: \"C\", suffix: None, span: $DIR/dump-debug-span-debug.rs:25:5: 25:8 }, Literal { kind: Byte, symbol: \"B\", suffix: None, span: $DIR/dump-debug-span-debug.rs:26:5: 26:9 }, Literal { kind: Integer, symbol: \"0\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:29:5: 29:7 }, Literal { kind: Float, symbol: \"1.0\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:30:5: 30:9 }, Literal { kind: Str, symbol: \"S\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:31:5: 31:9 }, Literal { kind: ByteStr, symbol: \"B\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:32:5: 32:10 }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:33:5: 33:10 }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:34:5: 34:14 }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:35:5: 35:12 }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:36:5: 36:16 }, Literal { kind: Char, symbol: \"C\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:37:5: 37:9 }, Literal { kind: Byte, symbol: \"B\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:38:5: 38:10 }]\n+TokenStream [Ident { ident: \"ident\", span: $DIR/dump-debug-span-debug.rs:9:5: 9:10 (#0) }, Ident { ident: \"r#ident\", span: $DIR/dump-debug-span-debug.rs:10:5: 10:12 (#0) }, Punct { ch: ',', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:11:5: 11:6 (#0) }, Punct { ch: '=', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:12:5: 12:7 (#0) }, Punct { ch: '=', spacing: Joint, span: $DIR/dump-debug-span-debug.rs:12:5: 12:7 (#0) }, Punct { ch: '>', spacing: Alone, span: $DIR/dump-debug-span-debug.rs:12:7: 12:8 (#0) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/dump-debug-span-debug.rs:13:5: 13:7 (#0) }, Group { delimiter: Bracket, stream: TokenStream [Ident { ident: \"_\", span: $DIR/dump-debug-span-debug.rs:14:6: 14:7 (#0) }], span: $DIR/dump-debug-span-debug.rs:14:5: 14:8 (#0) }, Literal { kind: Integer, symbol: \"0\", suffix: None, span: $DIR/dump-debug-span-debug.rs:17:5: 17:6 (#0) }, Literal { kind: Float, symbol: \"1.0\", suffix: None, span: $DIR/dump-debug-span-debug.rs:18:5: 18:8 (#0) }, Literal { kind: Str, symbol: \"S\", suffix: None, span: $DIR/dump-debug-span-debug.rs:19:5: 19:8 (#0) }, Literal { kind: ByteStr, symbol: \"B\", suffix: None, span: $DIR/dump-debug-span-debug.rs:20:5: 20:9 (#0) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: None, span: $DIR/dump-debug-span-debug.rs:21:5: 21:9 (#0) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: None, span: $DIR/dump-debug-span-debug.rs:22:5: 22:13 (#0) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: None, span: $DIR/dump-debug-span-debug.rs:23:5: 23:11 (#0) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: None, span: $DIR/dump-debug-span-debug.rs:24:5: 24:15 (#0) }, Literal { kind: Char, symbol: \"C\", suffix: None, span: $DIR/dump-debug-span-debug.rs:25:5: 25:8 (#0) }, Literal { kind: Byte, symbol: \"B\", suffix: None, span: $DIR/dump-debug-span-debug.rs:26:5: 26:9 (#0) }, Literal { kind: Integer, symbol: \"0\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:29:5: 29:7 (#0) }, Literal { kind: Float, symbol: \"1.0\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:30:5: 30:9 (#0) }, Literal { kind: Str, symbol: \"S\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:31:5: 31:9 (#0) }, Literal { kind: ByteStr, symbol: \"B\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:32:5: 32:10 (#0) }, Literal { kind: StrRaw(0), symbol: \"R\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:33:5: 33:10 (#0) }, Literal { kind: StrRaw(2), symbol: \"R\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:34:5: 34:14 (#0) }, Literal { kind: ByteStrRaw(0), symbol: \"BR\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:35:5: 35:12 (#0) }, Literal { kind: ByteStrRaw(2), symbol: \"BR\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:36:5: 36:16 (#0) }, Literal { kind: Char, symbol: \"C\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:37:5: 37:9 (#0) }, Literal { kind: Byte, symbol: \"B\", suffix: Some(\"q\"), span: $DIR/dump-debug-span-debug.rs:38:5: 38:10 (#0) }]\n TokenStream [\n     Ident {\n         ident: \"ident\",\n-        span: $DIR/dump-debug-span-debug.rs:9:5: 9:10,\n+        span: $DIR/dump-debug-span-debug.rs:9:5: 9:10 (#0),\n     },\n     Ident {\n         ident: \"r#ident\",\n-        span: $DIR/dump-debug-span-debug.rs:10:5: 10:12,\n+        span: $DIR/dump-debug-span-debug.rs:10:5: 10:12 (#0),\n     },\n     Punct {\n         ch: ',',\n         spacing: Alone,\n-        span: $DIR/dump-debug-span-debug.rs:11:5: 11:6,\n+        span: $DIR/dump-debug-span-debug.rs:11:5: 11:6 (#0),\n     },\n     Punct {\n         ch: '=',\n         spacing: Joint,\n-        span: $DIR/dump-debug-span-debug.rs:12:5: 12:7,\n+        span: $DIR/dump-debug-span-debug.rs:12:5: 12:7 (#0),\n     },\n     Punct {\n         ch: '=',\n         spacing: Joint,\n-        span: $DIR/dump-debug-span-debug.rs:12:5: 12:7,\n+        span: $DIR/dump-debug-span-debug.rs:12:5: 12:7 (#0),\n     },\n     Punct {\n         ch: '>',\n         spacing: Alone,\n-        span: $DIR/dump-debug-span-debug.rs:12:7: 12:8,\n+        span: $DIR/dump-debug-span-debug.rs:12:7: 12:8 (#0),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [],\n-        span: $DIR/dump-debug-span-debug.rs:13:5: 13:7,\n+        span: $DIR/dump-debug-span-debug.rs:13:5: 13:7 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"_\",\n-                span: $DIR/dump-debug-span-debug.rs:14:6: 14:7,\n+                span: $DIR/dump-debug-span-debug.rs:14:6: 14:7 (#0),\n             },\n         ],\n-        span: $DIR/dump-debug-span-debug.rs:14:5: 14:8,\n+        span: $DIR/dump-debug-span-debug.rs:14:5: 14:8 (#0),\n     },\n     Literal {\n         kind: Integer,\n         symbol: \"0\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:17:5: 17:6,\n+        span: $DIR/dump-debug-span-debug.rs:17:5: 17:6 (#0),\n     },\n     Literal {\n         kind: Float,\n         symbol: \"1.0\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:18:5: 18:8,\n+        span: $DIR/dump-debug-span-debug.rs:18:5: 18:8 (#0),\n     },\n     Literal {\n         kind: Str,\n         symbol: \"S\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:19:5: 19:8,\n+        span: $DIR/dump-debug-span-debug.rs:19:5: 19:8 (#0),\n     },\n     Literal {\n         kind: ByteStr,\n         symbol: \"B\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:20:5: 20:9,\n+        span: $DIR/dump-debug-span-debug.rs:20:5: 20:9 (#0),\n     },\n     Literal {\n         kind: StrRaw(0),\n         symbol: \"R\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:21:5: 21:9,\n+        span: $DIR/dump-debug-span-debug.rs:21:5: 21:9 (#0),\n     },\n     Literal {\n         kind: StrRaw(2),\n         symbol: \"R\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:22:5: 22:13,\n+        span: $DIR/dump-debug-span-debug.rs:22:5: 22:13 (#0),\n     },\n     Literal {\n         kind: ByteStrRaw(0),\n         symbol: \"BR\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:23:5: 23:11,\n+        span: $DIR/dump-debug-span-debug.rs:23:5: 23:11 (#0),\n     },\n     Literal {\n         kind: ByteStrRaw(2),\n         symbol: \"BR\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:24:5: 24:15,\n+        span: $DIR/dump-debug-span-debug.rs:24:5: 24:15 (#0),\n     },\n     Literal {\n         kind: Char,\n         symbol: \"C\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:25:5: 25:8,\n+        span: $DIR/dump-debug-span-debug.rs:25:5: 25:8 (#0),\n     },\n     Literal {\n         kind: Byte,\n         symbol: \"B\",\n         suffix: None,\n-        span: $DIR/dump-debug-span-debug.rs:26:5: 26:9,\n+        span: $DIR/dump-debug-span-debug.rs:26:5: 26:9 (#0),\n     },\n     Literal {\n         kind: Integer,\n         symbol: \"0\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:29:5: 29:7,\n+        span: $DIR/dump-debug-span-debug.rs:29:5: 29:7 (#0),\n     },\n     Literal {\n         kind: Float,\n         symbol: \"1.0\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:30:5: 30:9,\n+        span: $DIR/dump-debug-span-debug.rs:30:5: 30:9 (#0),\n     },\n     Literal {\n         kind: Str,\n         symbol: \"S\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:31:5: 31:9,\n+        span: $DIR/dump-debug-span-debug.rs:31:5: 31:9 (#0),\n     },\n     Literal {\n         kind: ByteStr,\n         symbol: \"B\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:32:5: 32:10,\n+        span: $DIR/dump-debug-span-debug.rs:32:5: 32:10 (#0),\n     },\n     Literal {\n         kind: StrRaw(0),\n         symbol: \"R\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:33:5: 33:10,\n+        span: $DIR/dump-debug-span-debug.rs:33:5: 33:10 (#0),\n     },\n     Literal {\n         kind: StrRaw(2),\n         symbol: \"R\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:34:5: 34:14,\n+        span: $DIR/dump-debug-span-debug.rs:34:5: 34:14 (#0),\n     },\n     Literal {\n         kind: ByteStrRaw(0),\n         symbol: \"BR\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:35:5: 35:12,\n+        span: $DIR/dump-debug-span-debug.rs:35:5: 35:12 (#0),\n     },\n     Literal {\n         kind: ByteStrRaw(2),\n         symbol: \"BR\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:36:5: 36:16,\n+        span: $DIR/dump-debug-span-debug.rs:36:5: 36:16 (#0),\n     },\n     Literal {\n         kind: Char,\n         symbol: \"C\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:37:5: 37:9,\n+        span: $DIR/dump-debug-span-debug.rs:37:5: 37:9 (#0),\n     },\n     Literal {\n         kind: Byte,\n         symbol: \"B\",\n         suffix: Some(\"q\"),\n-        span: $DIR/dump-debug-span-debug.rs:38:5: 38:10,\n+        span: $DIR/dump-debug-span-debug.rs:38:5: 38:10 (#0),\n     },\n ]"}]}