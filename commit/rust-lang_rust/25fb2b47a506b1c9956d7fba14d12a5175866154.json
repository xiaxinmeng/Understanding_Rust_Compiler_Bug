{"sha": "25fb2b47a506b1c9956d7fba14d12a5175866154", "node_id": "C_kwDOAAsO6NoAKDI1ZmIyYjQ3YTUwNmIxYzk5NTZkN2ZiYTE0ZDEyYTUxNzU4NjYxNTQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-29T04:58:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-29T04:58:24Z"}, "message": "Rollup merge of #98603 - compiler-errors:minor-borrowck-diagnostic-fixes, r=davidtwco\n\nSome borrowck diagnostic fixes\n\n1. Remove some redundant `.as_ref` suggestion logic from borrowck, this has the consequence of also not suggesting `.as_ref` after `Option` methods, but (correctly) before.\n2. Fix a bug where we were replacing a binding's name with a type. Instead, make it a note.\n\nThis is somewhat incomplete. See `src/test/ui/borrowck/suggest-as-ref-on-mut-closure.rs` for more improvements.", "tree": {"sha": "7a6a4e36d9fe5b58cd220ce720642bec26fe3599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a6a4e36d9fe5b58cd220ce720642bec26fe3599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25fb2b47a506b1c9956d7fba14d12a5175866154", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiu9vwCRBK7hj4Ov3rIwAAAQoIADpCGix37hp6LmWXXy/SiorA\nr55+jIjlRwUO3YxcWAdR125nFU+UPlwBO1LG5KcvrN8NW+qG6tns8Ay59gz5V57j\nP4Mdicq4oAasEpjkUykT01ySs+Enwj877XwvQHYM+gt01o42LV1VkYWkDvs44wDI\njS/iM4GW1AS/lFRXmCFSdd+rvAvJZ8Kr0Es9/L1tJiJYqeGkufMtG/INNhKWPCS1\nw+D1siBL4NMslDAqPe2gU0Holg6D8LtSi3OUwnHwpEZdY+vkX/rdOA3HiwezrUP1\nATd+sdi9wJd+VeRBmiBNaNbStpUHg+HfuSpuXgX85/W3KyCXQBtod8rp8WYBX4s=\n=sUxZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a6a4e36d9fe5b58cd220ce720642bec26fe3599\nparent 021d21c88877bb8f5db8326ebfdb1baad64b1e70\nparent 8fd73560b3ba9d970887b36e335de256ca293c80\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1656478704 +0530\ncommitter GitHub <noreply@github.com> 1656478704 +0530\n\nRollup merge of #98603 - compiler-errors:minor-borrowck-diagnostic-fixes, r=davidtwco\n\nSome borrowck diagnostic fixes\n\n1. Remove some redundant `.as_ref` suggestion logic from borrowck, this has the consequence of also not suggesting `.as_ref` after `Option` methods, but (correctly) before.\n2. Fix a bug where we were replacing a binding's name with a type. Instead, make it a note.\n\nThis is somewhat incomplete. See `src/test/ui/borrowck/suggest-as-ref-on-mut-closure.rs` for more improvements.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25fb2b47a506b1c9956d7fba14d12a5175866154", "html_url": "https://github.com/rust-lang/rust/commit/25fb2b47a506b1c9956d7fba14d12a5175866154", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25fb2b47a506b1c9956d7fba14d12a5175866154/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "021d21c88877bb8f5db8326ebfdb1baad64b1e70", "url": "https://api.github.com/repos/rust-lang/rust/commits/021d21c88877bb8f5db8326ebfdb1baad64b1e70", "html_url": "https://github.com/rust-lang/rust/commit/021d21c88877bb8f5db8326ebfdb1baad64b1e70"}, {"sha": "8fd73560b3ba9d970887b36e335de256ca293c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fd73560b3ba9d970887b36e335de256ca293c80", "html_url": "https://github.com/rust-lang/rust/commit/8fd73560b3ba9d970887b36e335de256ca293c80"}], "stats": {"total": 247, "additions": 150, "deletions": 97}, "files": [{"sha": "becb81b2e26a8d916a8ea6a84853004803060db1", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 7, "deletions": 46, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -4,7 +4,7 @@ use rustc_middle::ty;\n use rustc_mir_dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind, LookupResult, MoveError, MovePathIndex,\n };\n-use rustc_span::{sym, Span};\n+use rustc_span::Span;\n \n use crate::diagnostics::UseSpans;\n use crate::prefixes::PrefixSet;\n@@ -218,29 +218,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n     fn report(&mut self, error: GroupedMoveError<'tcx>) {\n         let (mut err, err_span) = {\n-            let (span, use_spans, original_path, kind, has_complex_bindings): (\n-                Span,\n-                Option<UseSpans<'tcx>>,\n-                Place<'tcx>,\n-                &IllegalMoveOriginKind<'_>,\n-                bool,\n-            ) = match error {\n-                GroupedMoveError::MovesFromPlace {\n-                    span,\n-                    original_path,\n-                    ref kind,\n-                    ref binds_to,\n-                    ..\n+            let (span, use_spans, original_path, kind) = match error {\n+                GroupedMoveError::MovesFromPlace { span, original_path, ref kind, .. }\n+                | GroupedMoveError::MovesFromValue { span, original_path, ref kind, .. } => {\n+                    (span, None, original_path, kind)\n                 }\n-                | GroupedMoveError::MovesFromValue {\n-                    span,\n-                    original_path,\n-                    ref kind,\n-                    ref binds_to,\n-                    ..\n-                } => (span, None, original_path, kind, !binds_to.is_empty()),\n                 GroupedMoveError::OtherIllegalMove { use_spans, original_path, ref kind } => {\n-                    (use_spans.args_or_use(), Some(use_spans), original_path, kind, false)\n+                    (use_spans.args_or_use(), Some(use_spans), original_path, kind)\n                 }\n             };\n             debug!(\n@@ -259,7 +243,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             target_place,\n                             span,\n                             use_spans,\n-                            has_complex_bindings,\n                         ),\n                     &IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } => {\n                         self.cannot_move_out_of_interior_of_drop(span, ty)\n@@ -302,7 +285,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         deref_target_place: Place<'tcx>,\n         span: Span,\n         use_spans: Option<UseSpans<'tcx>>,\n-        has_complex_bindings: bool,\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         // Inspect the type of the content behind the\n         // borrow to provide feedback about why this\n@@ -399,28 +381,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 }\n             }\n         };\n-        let ty = move_place.ty(self.body, self.infcx.tcx).ty;\n-        let def_id = match *ty.kind() {\n-            ty::Adt(self_def, _) => self_def.did(),\n-            ty::Foreign(def_id)\n-            | ty::FnDef(def_id, _)\n-            | ty::Closure(def_id, _)\n-            | ty::Generator(def_id, ..)\n-            | ty::Opaque(def_id, _) => def_id,\n-            _ => return err,\n-        };\n-        let diag_name = self.infcx.tcx.get_diagnostic_name(def_id);\n-        if matches!(diag_name, Some(sym::Option | sym::Result))\n-            && use_spans.map_or(true, |v| !v.for_closure())\n-            && !has_complex_bindings\n-        {\n-            err.span_suggestion_verbose(\n-                span.shrink_to_hi(),\n-                &format!(\"consider borrowing the `{}`'s content\", diag_name.unwrap()),\n-                \".as_ref()\",\n-                Applicability::MaybeIncorrect,\n-            );\n-        } else if let Some(use_spans) = use_spans {\n+        if let Some(use_spans) = use_spans {\n             self.explain_captures(\n                 &mut err, span, span, use_spans, move_place, None, \"\", \"\", \"\", false, true,\n             );"}, {"sha": "49b24a05071b2746b0f9bbeba07cef3449862527", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -434,16 +434,16 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 match self.local_names[local] {\n                     Some(name) if !local_decl.from_compiler_desugaring() => {\n-                        let label = match local_decl.local_info.as_ref().unwrap() {\n-                            box LocalInfo::User(ClearCrossCrate::Set(\n+                        let label = match local_decl.local_info.as_deref().unwrap() {\n+                            LocalInfo::User(ClearCrossCrate::Set(\n                                 mir::BindingForm::ImplicitSelf(_),\n                             )) => {\n                                 let (span, suggestion) =\n                                     suggest_ampmut_self(self.infcx.tcx, local_decl);\n                                 Some((true, span, suggestion))\n                             }\n \n-                            box LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n+                            LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n                                 mir::VarBindingForm {\n                                     binding_mode: ty::BindingMode::BindByValue(_),\n                                     opt_ty_info,\n@@ -473,20 +473,15 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                     // on for loops, RHS points to the iterator part\n                                     Some(DesugaringKind::ForLoop) => {\n                                         self.suggest_similar_mut_method_for_for_loop(&mut err);\n-                                        Some((\n-                                            false,\n-                                            opt_assignment_rhs_span.unwrap(),\n-                                            format!(\n-                                                \"this iterator yields `{SIGIL}` {DESC}s\",\n-                                                SIGIL = pointer_sigil,\n-                                                DESC = pointer_desc\n-                                            ),\n-                                        ))\n+                                        err.span_label(opt_assignment_rhs_span.unwrap(), format!(\n+                                            \"this iterator yields `{pointer_sigil}` {pointer_desc}s\",\n+                                        ));\n+                                        None\n                                     }\n                                     // don't create labels for compiler-generated spans\n                                     Some(_) => None,\n                                     None => {\n-                                        let (span, suggestion) = if name != kw::SelfLower {\n+                                        let label = if name != kw::SelfLower {\n                                             suggest_ampmut(\n                                                 self.infcx.tcx,\n                                                 local_decl,\n@@ -501,7 +496,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                                         ..\n                                                     }),\n                                                 ))) => {\n-                                                    suggest_ampmut_self(self.infcx.tcx, local_decl)\n+                                                    let (span, sugg) = suggest_ampmut_self(\n+                                                        self.infcx.tcx,\n+                                                        local_decl,\n+                                                    );\n+                                                    (true, span, sugg)\n                                                 }\n                                                 // explicit self (eg `self: &'a Self`)\n                                                 _ => suggest_ampmut(\n@@ -512,12 +511,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                                 ),\n                                             }\n                                         };\n-                                        Some((true, span, suggestion))\n+                                        Some(label)\n                                     }\n                                 }\n                             }\n \n-                            box LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n+                            LocalInfo::User(ClearCrossCrate::Set(mir::BindingForm::Var(\n                                 mir::VarBindingForm {\n                                     binding_mode: ty::BindingMode::BindByReference(_),\n                                     ..\n@@ -528,7 +527,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                     .map(|replacement| (true, pattern_span, replacement))\n                             }\n \n-                            box LocalInfo::User(ClearCrossCrate::Clear) => {\n+                            LocalInfo::User(ClearCrossCrate::Clear) => {\n                                 bug!(\"saw cleared local state\")\n                             }\n \n@@ -559,7 +558,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                 }\n                             }\n                             Some((false, err_label_span, message)) => {\n-                                err.span_label(err_label_span, &message);\n+                                err.span_label(\n+                                    err_label_span,\n+                                    &format!(\n+                                        \"consider changing this binding's type to be: `{message}`\"\n+                                    ),\n+                                );\n                             }\n                             None => {}\n                         }\n@@ -1004,7 +1008,7 @@ fn suggest_ampmut<'tcx>(\n     local_decl: &mir::LocalDecl<'tcx>,\n     opt_assignment_rhs_span: Option<Span>,\n     opt_ty_info: Option<Span>,\n-) -> (Span, String) {\n+) -> (bool, Span, String) {\n     if let Some(assignment_rhs_span) = opt_assignment_rhs_span\n         && let Ok(src) = tcx.sess.source_map().span_to_snippet(assignment_rhs_span)\n     {\n@@ -1028,37 +1032,38 @@ fn suggest_ampmut<'tcx>(\n             let lt_name = &src[1..ws_pos];\n             let ty = src[ws_pos..].trim_start();\n             if !is_mutbl(ty) {\n-                return (assignment_rhs_span, format!(\"&{lt_name} mut {ty}\"));\n+                return (true, assignment_rhs_span, format!(\"&{lt_name} mut {ty}\"));\n             }\n         } else if let Some(stripped) = src.strip_prefix('&') {\n             let stripped = stripped.trim_start();\n             if !is_mutbl(stripped) {\n-                return (assignment_rhs_span, format!(\"&mut {stripped}\"));\n+                return (true, assignment_rhs_span, format!(\"&mut {stripped}\"));\n             }\n         }\n     }\n \n-    let highlight_span = match opt_ty_info {\n+    let (suggestability, highlight_span) = match opt_ty_info {\n         // if this is a variable binding with an explicit type,\n         // try to highlight that for the suggestion.\n-        Some(ty_span) => ty_span,\n+        Some(ty_span) => (true, ty_span),\n \n         // otherwise, just highlight the span associated with\n         // the (MIR) LocalDecl.\n-        None => local_decl.source_info.span,\n+        None => (false, local_decl.source_info.span),\n     };\n \n     if let Ok(src) = tcx.sess.source_map().span_to_snippet(highlight_span)\n         && let (true, Some(ws_pos)) = (src.starts_with(\"&'\"), src.find(char::is_whitespace))\n     {\n         let lt_name = &src[1..ws_pos];\n         let ty = &src[ws_pos..];\n-        return (highlight_span, format!(\"&{} mut{}\", lt_name, ty));\n+        return (true, highlight_span, format!(\"&{} mut{}\", lt_name, ty));\n     }\n \n     let ty_mut = local_decl.ty.builtin_deref(true).unwrap();\n     assert_eq!(ty_mut.mutbl, hir::Mutability::Not);\n     (\n+        suggestability,\n         highlight_span,\n         if local_decl.ty.is_region_ptr() {\n             format!(\"&mut {}\", ty_mut.ty)"}, {"sha": "cdacf3ad892e0c71531e5910b0b6475b45ece6c1", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -162,7 +162,11 @@ fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_\n                 let opt_ty_info;\n                 let self_arg;\n                 if let Some(ref fn_decl) = tcx.hir().fn_decl_by_hir_id(owner_id) {\n-                    opt_ty_info = fn_decl.inputs.get(index).map(|ty| ty.span);\n+                    opt_ty_info = fn_decl\n+                        .inputs\n+                        .get(index)\n+                        // Make sure that inferred closure args have no type span\n+                        .and_then(|ty| if arg.pat.span != ty.span { Some(ty.span) } else { None });\n                     self_arg = if index == 0 && fn_decl.implicit_self.has_implicit_self() {\n                         match fn_decl.implicit_self {\n                             hir::ImplicitSelfKind::Imm => Some(ImplicitSelfKind::Imm),"}, {"sha": "695b01d5ee3ad7798092c953c21d9c3283cd4088", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -63,8 +63,20 @@ LL |     use_mut(n); use_imm(m);\n error[E0507]: cannot move out of `*m` which is behind a mutable reference\n   --> $DIR/binop-move-semantics.rs:30:5\n    |\n-LL |     *m\n-   |     ^^ move occurs because `*m` has type `T`, which does not implement the `Copy` trait\n+LL |       *m\n+   |       -^\n+   |       |\n+   |  _____move occurs because `*m` has type `T`, which does not implement the `Copy` trait\n+   | |\n+LL | |     +\n+LL | |     *n;\n+   | |______- `*m` moved due to usage in operator\n+   |\n+note: calling this operator moves the left-hand side\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+   |\n+LL |     fn add(self, rhs: Rhs) -> Self::Output;\n+   |            ^^^^\n \n error[E0507]: cannot move out of `*n` which is behind a shared reference\n   --> $DIR/binop-move-semantics.rs:32:5"}, {"sha": "c99c0f77982edecf4a03edc402f7f8afb3526755", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -2,7 +2,7 @@ error[E0594]: cannot assign to `**t1`, which is behind a `&` reference\n   --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:9:5\n    |\n LL |     let t1 = t0;\n-   |         -- help: consider changing this to be a mutable reference: `&mut &mut isize`\n+   |         -- consider changing this binding's type to be: `&mut &mut isize`\n LL |     let p: &isize = &**t0;\n LL |     **t1 = 22;\n    |     ^^^^^^^^^ `t1` is a `&` reference, so the data it refers to cannot be written"}, {"sha": "1598cd5d3c86fa98c005b47f2f725775a809d0f6", "filename": "src/test/ui/borrowck/issue-85765.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.rs?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let mut test = Vec::new();\n     let rofl: &Vec<Vec<i32>> = &mut test;\n-    //~^ HELP consider changing this to be a mutable reference\n+    //~^ NOTE consider changing this binding's type to be\n     rofl.push(Vec::new());\n     //~^ ERROR cannot borrow `*rofl` as mutable, as it is behind a `&` reference\n     //~| NOTE `rofl` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n@@ -15,14 +15,14 @@ fn main() {\n \n     #[rustfmt::skip]\n     let x: &usize = &mut{0};\n-    //~^ HELP consider changing this to be a mutable reference\n+    //~^ NOTE consider changing this binding's type to be\n     *x = 1;\n     //~^ ERROR cannot assign to `*x`, which is behind a `&` reference\n     //~| NOTE `x` is a `&` reference, so the data it refers to cannot be written\n \n     #[rustfmt::skip]\n     let y: &usize = &mut(0);\n-    //~^ HELP consider changing this to be a mutable reference\n+    //~^ NOTE consider changing this binding's type to be\n     *y = 1;\n     //~^ ERROR cannot assign to `*y`, which is behind a `&` reference\n     //~| NOTE `y` is a `&` reference, so the data it refers to cannot be written"}, {"sha": "13033962142fa51583cd5065639db7221824a981", "filename": "src/test/ui/borrowck/issue-85765.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow `*rofl` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-85765.rs:5:5\n    |\n LL |     let rofl: &Vec<Vec<i32>> = &mut test;\n-   |         ---- help: consider changing this to be a mutable reference: `&mut Vec<Vec<i32>>`\n+   |         ---- consider changing this binding's type to be: `&mut Vec<Vec<i32>>`\n LL |\n LL |     rofl.push(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^ `rofl` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n@@ -20,7 +20,7 @@ error[E0594]: cannot assign to `*x`, which is behind a `&` reference\n   --> $DIR/issue-85765.rs:19:5\n    |\n LL |     let x: &usize = &mut{0};\n-   |         - help: consider changing this to be a mutable reference: `&mut usize`\n+   |         - consider changing this binding's type to be: `&mut usize`\n LL |\n LL |     *x = 1;\n    |     ^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n@@ -29,7 +29,7 @@ error[E0594]: cannot assign to `*y`, which is behind a `&` reference\n   --> $DIR/issue-85765.rs:26:5\n    |\n LL |     let y: &usize = &mut(0);\n-   |         - help: consider changing this to be a mutable reference: `&mut usize`\n+   |         - consider changing this binding's type to be: `&mut usize`\n LL |\n LL |     *y = 1;\n    |     ^^^^^^ `y` is a `&` reference, so the data it refers to cannot be written"}, {"sha": "67407c1eae3cfe2bf2144e0e97609146d26de3b2", "filename": "src/test/ui/borrowck/issue-91206.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fissue-91206.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fissue-91206.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-91206.rs?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -9,7 +9,8 @@ impl TestClient {\n fn main() {\n     let client = TestClient;\n     let inner = client.get_inner_ref();\n-    //~^ HELP consider changing this to be a mutable reference\n+    //~^ NOTE consider changing this binding's type to be\n     inner.clear();\n     //~^ ERROR cannot borrow `*inner` as mutable, as it is behind a `&` reference [E0596]\n+    //~| NOTE `inner` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n }"}, {"sha": "12d8d27c5f0264906276f2753ff25ce4260e8d4e", "filename": "src/test/ui/borrowck/issue-91206.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fissue-91206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fissue-91206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-91206.stderr?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow `*inner` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-91206.rs:13:5\n    |\n LL |     let inner = client.get_inner_ref();\n-   |         ----- help: consider changing this to be a mutable reference: `&mut Vec<usize>`\n+   |         ----- consider changing this binding's type to be: `&mut Vec<usize>`\n LL |\n LL |     inner.clear();\n    |     ^^^^^^^^^^^^^ `inner` is a `&` reference, so the data it refers to cannot be borrowed as mutable"}, {"sha": "62b1183e71b4beb03ce8fa9de7fc83b69533cbd5", "filename": "src/test/ui/borrowck/issue-92015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fissue-92015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fissue-92015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-92015.stderr?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -2,7 +2,7 @@ error[E0594]: cannot assign to `*foo`, which is behind a `&` reference\n   --> $DIR/issue-92015.rs:6:5\n    |\n LL |     let foo = Some(&0).unwrap();\n-   |         --- help: consider changing this to be a mutable reference: `&mut i32`\n+   |         --- consider changing this binding's type to be: `&mut i32`\n LL |     *foo = 1;\n    |     ^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be written\n "}, {"sha": "1dcf04618796e2e2b92a0c17745871364fbdcbf2", "filename": "src/test/ui/borrowck/suggest-as-ref-on-mut-closure.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.rs?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -0,0 +1,16 @@\n+// This is not exactly right, yet.\n+\n+// Ideally we should be suggesting `as_mut` for the first case,\n+// and suggesting to change `as_ref` to `as_mut` in the second.\n+\n+fn x(cb: &mut Option<&mut dyn FnMut()>) {\n+    cb.map(|cb| cb());\n+    //~^ ERROR cannot move out of `*cb` which is behind a mutable reference\n+}\n+\n+fn x2(cb: &mut Option<&mut dyn FnMut()>) {\n+    cb.as_ref().map(|cb| cb());\n+    //~^ ERROR cannot borrow `*cb` as mutable, as it is behind a `&` reference\n+}\n+\n+fn main() {}"}, {"sha": "af26169c8068146c6def241f05af87c3a6ec39a0", "filename": "src/test/ui/borrowck/suggest-as-ref-on-mut-closure.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-as-ref-on-mut-closure.stderr?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -0,0 +1,31 @@\n+error[E0507]: cannot move out of `*cb` which is behind a mutable reference\n+  --> $DIR/suggest-as-ref-on-mut-closure.rs:7:5\n+   |\n+LL |     cb.map(|cb| cb());\n+   |     ^^^--------------\n+   |     |  |\n+   |     |  `*cb` moved due to this method call\n+   |     move occurs because `*cb` has type `Option<&mut dyn FnMut()>`, which does not implement the `Copy` trait\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `*cb`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub const fn map<U, F>(self, f: F) -> Option<U>\n+   |                            ^^^^\n+help: consider calling `.as_ref()` to borrow the type's contents\n+   |\n+LL |     cb.as_ref().map(|cb| cb());\n+   |        +++++++++\n+\n+error[E0596]: cannot borrow `*cb` as mutable, as it is behind a `&` reference\n+  --> $DIR/suggest-as-ref-on-mut-closure.rs:12:26\n+   |\n+LL |     cb.as_ref().map(|cb| cb());\n+   |                      --  ^^ `cb` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |                      |\n+   |                      consider changing this binding's type to be: `&mut &mut dyn FnMut()`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0507, E0596.\n+For more information about an error, try `rustc --explain E0507`."}, {"sha": "797c1085d517b1b44b9159f6252a29399d92c328", "filename": "src/test/ui/issues/issue-51515.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fissues%2Fissue-51515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fissues%2Fissue-51515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51515.rs?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -5,8 +5,6 @@ fn main() {\n     *foo = 32;\n     //~^ ERROR cannot assign to `*foo`, which is behind a `&` reference\n     let bar = foo;\n-    //~^ HELP consider changing this to be a mutable reference\n-    //~| SUGGESTION &mut i32\n     *bar = 64;\n     //~^ ERROR cannot assign to `*bar`, which is behind a `&` reference\n }"}, {"sha": "067bdef8b6746c73a645eda9e50115ebbae0ebac", "filename": "src/test/ui/issues/issue-51515.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51515.stderr?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -8,11 +8,10 @@ LL |     *foo = 32;\n    |     ^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be written\n \n error[E0594]: cannot assign to `*bar`, which is behind a `&` reference\n-  --> $DIR/issue-51515.rs:10:5\n+  --> $DIR/issue-51515.rs:8:5\n    |\n LL |     let bar = foo;\n-   |         --- help: consider changing this to be a mutable reference: `&mut i32`\n-...\n+   |         --- consider changing this binding's type to be: `&mut i32`\n LL |     *bar = 64;\n    |     ^^^^^^^^^ `bar` is a `&` reference, so the data it refers to cannot be written\n "}, {"sha": "fccfbe1d744c2054159e72ad87afd1d27a073229", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -2,23 +2,37 @@ error[E0507]: cannot move out of `selection.1` which is behind a shared referenc\n   --> $DIR/option-content-move.rs:11:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n-   |                    ^^^^^^^^^^^ move occurs because `selection.1` has type `Option<String>`, which does not implement the `Copy` trait\n+   |                    ^^^^^^^^^^^ -------- `selection.1` moved due to this method call\n+   |                    |\n+   |                    move occurs because `selection.1` has type `Option<String>`, which does not implement the `Copy` trait\n    |\n-help: consider borrowing the `Option`'s content\n+note: this function takes ownership of the receiver `self`, which moves `selection.1`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     pub const fn unwrap(self) -> T {\n+   |                         ^^^^\n+help: consider calling `.as_ref()` to borrow the type's contents\n    |\n LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n-   |                               +++++++++\n+   |                                +++++++++\n \n error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n   --> $DIR/option-content-move.rs:29:20\n    |\n LL |                 if selection.1.unwrap().contains(selection.0) {\n-   |                    ^^^^^^^^^^^ move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n+   |                    ^^^^^^^^^^^ -------- `selection.1` moved due to this method call\n+   |                    |\n+   |                    move occurs because `selection.1` has type `Result<String, String>`, which does not implement the `Copy` trait\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `selection.1`\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n    |\n-help: consider borrowing the `Result`'s content\n+LL |     pub fn unwrap(self) -> T\n+   |                   ^^^^\n+help: consider calling `.as_ref()` to borrow the type's contents\n    |\n LL |                 if selection.1.as_ref().unwrap().contains(selection.0) {\n-   |                               +++++++++\n+   |                                +++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "65d866c716e0e01049bd00b514915b708b5b5e4f", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25fb2b47a506b1c9956d7fba14d12a5175866154/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=25fb2b47a506b1c9956d7fba14d12a5175866154", "patch": "@@ -46,13 +46,25 @@ error[E0507]: cannot move out of `*m` which is behind a mutable reference\n   --> $DIR/unop-move-semantics.rs:24:6\n    |\n LL |     !*m;\n-   |      ^^ move occurs because `*m` has type `T`, which does not implement the `Copy` trait\n+   |     -^^\n+   |     ||\n+   |     |move occurs because `*m` has type `T`, which does not implement the `Copy` trait\n+   |     `*m` moved due to usage in operator\n+   |\n+note: calling this operator moves the left-hand side\n+  --> $SRC_DIR/core/src/ops/bit.rs:LL:COL\n+   |\n+LL |     fn not(self) -> Self::Output;\n+   |            ^^^^\n \n error[E0507]: cannot move out of `*n` which is behind a shared reference\n   --> $DIR/unop-move-semantics.rs:26:6\n    |\n LL |     !*n;\n-   |      ^^ move occurs because `*n` has type `T`, which does not implement the `Copy` trait\n+   |     -^^\n+   |     ||\n+   |     |move occurs because `*n` has type `T`, which does not implement the `Copy` trait\n+   |     `*n` moved due to usage in operator\n \n error: aborting due to 5 previous errors\n "}]}