{"sha": "0d27f70743e12255804d40ff491108c8962bd7a3", "node_id": "C_kwDOAAsO6NoAKDBkMjdmNzA3NDNlMTIyNTU4MDRkNDBmZjQ5MTEwOGM4OTYyYmQ3YTM", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2022-05-21T17:53:26Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2022-05-21T18:22:06Z"}, "message": "Remove feature: `crate` visibility modifier", "tree": {"sha": "c66b69ca3b156a40f47f1642d5ad98b9f1d7360c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c66b69ca3b156a40f47f1642d5ad98b9f1d7360c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d27f70743e12255804d40ff491108c8962bd7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d27f70743e12255804d40ff491108c8962bd7a3", "html_url": "https://github.com/rust-lang/rust/commit/0d27f70743e12255804d40ff491108c8962bd7a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d27f70743e12255804d40ff491108c8962bd7a3/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "241a6f69309d177f0cb212851cbddcdf8ffdf10b", "url": "https://api.github.com/repos/rust-lang/rust/commits/241a6f69309d177f0cb212851cbddcdf8ffdf10b", "html_url": "https://github.com/rust-lang/rust/commit/241a6f69309d177f0cb212851cbddcdf8ffdf10b"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "ecbd44e197624b034275eed58d35539dfe906bb0", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d27f70743e12255804d40ff491108c8962bd7a3/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d27f70743e12255804d40ff491108c8962bd7a3/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0d27f70743e12255804d40ff491108c8962bd7a3", "patch": "@@ -1361,7 +1361,7 @@ pub(crate) fn format_struct_struct(\n \n fn get_bytepos_after_visibility(vis: &ast::Visibility, default_span: Span) -> BytePos {\n     match vis.kind {\n-        ast::VisibilityKind::Crate(..) | ast::VisibilityKind::Restricted { .. } => vis.span.hi(),\n+        ast::VisibilityKind::Crate | ast::VisibilityKind::Restricted { .. } => vis.span.hi(),\n         _ => default_span.lo(),\n     }\n }"}, {"sha": "4a66c168bb95d83693b9efb5543648b1ee7ed12f", "filename": "src/utils.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0d27f70743e12255804d40ff491108c8962bd7a3/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d27f70743e12255804d40ff491108c8962bd7a3/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=0d27f70743e12255804d40ff491108c8962bd7a3", "patch": "@@ -1,7 +1,7 @@\n use std::borrow::Cow;\n \n use rustc_ast::ast::{\n-    self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem, NodeId, Path, Visibility,\n+    self, Attribute, MetaItem, MetaItemKind, NestedMetaItem, NodeId, Path, Visibility,\n     VisibilityKind,\n };\n use rustc_ast::ptr;\n@@ -46,12 +46,8 @@ pub(crate) fn is_same_visibility(a: &Visibility, b: &Visibility) -> bool {\n         (VisibilityKind::Public, VisibilityKind::Public)\n         | (VisibilityKind::Inherited, VisibilityKind::Inherited)\n         | (\n-            VisibilityKind::Crate(CrateSugar::PubCrate),\n-            VisibilityKind::Crate(CrateSugar::PubCrate),\n-        )\n-        | (\n-            VisibilityKind::Crate(CrateSugar::JustCrate),\n-            VisibilityKind::Crate(CrateSugar::JustCrate),\n+            VisibilityKind::Crate,\n+            VisibilityKind::Crate,\n         ) => true,\n         _ => false,\n     }\n@@ -65,8 +61,7 @@ pub(crate) fn format_visibility(\n     match vis.kind {\n         VisibilityKind::Public => Cow::from(\"pub \"),\n         VisibilityKind::Inherited => Cow::from(\"\"),\n-        VisibilityKind::Crate(CrateSugar::PubCrate) => Cow::from(\"pub(crate) \"),\n-        VisibilityKind::Crate(CrateSugar::JustCrate) => Cow::from(\"crate \"),\n+        VisibilityKind::Crate => Cow::from(\"pub(crate) \"),\n         VisibilityKind::Restricted { ref path, .. } => {\n             let Path { ref segments, .. } = **path;\n             let mut segments_iter = segments.iter().map(|seg| rewrite_ident(context, seg.ident));"}]}