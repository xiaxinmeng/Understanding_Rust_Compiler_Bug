{"sha": "0a46ca43e2833cb44adfc3c95c34d7edf7c15a4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNDZjYTQzZTI4MzNjYjQ0YWRmYzNjOTVjMzRkN2VkZjdjMTVhNGU=", "commit": {"author": {"name": "Lokathor", "email": "zefria@gmail.com", "date": "2020-10-08T04:15:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-08T04:15:30Z"}, "message": "Merge pull request #31 from thomcc/negxor\n\nUse xor to implement Neg::neg for floats", "tree": {"sha": "cf21a89c7322f06c3a31806014efa3a074ff8d97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf21a89c7322f06c3a31806014efa3a074ff8d97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a46ca43e2833cb44adfc3c95c34d7edf7c15a4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJffpJiCRBK7hj4Ov3rIwAAdHIIAEtLxqlwj5HJi7FAyFBasMD1\nKMzvJwNewHpJ1eeqGEKhapPupVJL8f/XTfi+G3wM9bWl3YV1j6X6qblV7YtBhrMz\nLEs7VwSNatWdOHaVCamREY27EBCu5pdZh5yCJEmZBmC+DyTTRgDqkfkGK+vlUlVz\nYm29IKhlTM9W6Zo6ipwqirCv6bdeOJTZF2B4doxNWrh6Esxg2onTUcpJ7ZSp/miN\ny6NRxHzbAkpQlS8h2TKH5Bd2YUrQ4tlmclu7AKG7k6gt7OatWO49MvdtshtAScKS\nWZLaIum6amPFC5fsoSiBlHvGlltR9G8wnFEh6PgNp4Yd23EXiqOMLJ2cwUK5nIY=\n=1XtK\n-----END PGP SIGNATURE-----\n", "payload": "tree cf21a89c7322f06c3a31806014efa3a074ff8d97\nparent a1c327a034425b1cc44f47a825ab2dcbfdd24b22\nparent ffd562f2181f5969d56c4a6c9399be27058c8a74\nauthor Lokathor <zefria@gmail.com> 1602130530 -0600\ncommitter GitHub <noreply@github.com> 1602130530 -0600\n\nMerge pull request #31 from thomcc/negxor\n\nUse xor to implement Neg::neg for floats"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a46ca43e2833cb44adfc3c95c34d7edf7c15a4e", "html_url": "https://github.com/rust-lang/rust/commit/0a46ca43e2833cb44adfc3c95c34d7edf7c15a4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a46ca43e2833cb44adfc3c95c34d7edf7c15a4e/comments", "author": {"login": "Lokathor", "id": 5456384, "node_id": "MDQ6VXNlcjU0NTYzODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5456384?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Lokathor", "html_url": "https://github.com/Lokathor", "followers_url": "https://api.github.com/users/Lokathor/followers", "following_url": "https://api.github.com/users/Lokathor/following{/other_user}", "gists_url": "https://api.github.com/users/Lokathor/gists{/gist_id}", "starred_url": "https://api.github.com/users/Lokathor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Lokathor/subscriptions", "organizations_url": "https://api.github.com/users/Lokathor/orgs", "repos_url": "https://api.github.com/users/Lokathor/repos", "events_url": "https://api.github.com/users/Lokathor/events{/privacy}", "received_events_url": "https://api.github.com/users/Lokathor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c327a034425b1cc44f47a825ab2dcbfdd24b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c327a034425b1cc44f47a825ab2dcbfdd24b22", "html_url": "https://github.com/rust-lang/rust/commit/a1c327a034425b1cc44f47a825ab2dcbfdd24b22"}, {"sha": "ffd562f2181f5969d56c4a6c9399be27058c8a74", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd562f2181f5969d56c4a6c9399be27058c8a74", "html_url": "https://github.com/rust-lang/rust/commit/ffd562f2181f5969d56c4a6c9399be27058c8a74"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "5a186649821b46ec51b0e19432347e5f66b1b1e9", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a46ca43e2833cb44adfc3c95c34d7edf7c15a4e/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a46ca43e2833cb44adfc3c95c34d7edf7c15a4e/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=0a46ca43e2833cb44adfc3c95c34d7edf7c15a4e", "patch": "@@ -212,7 +212,20 @@ macro_rules! impl_op {\n             impl core::ops::Neg for $type {\n                 type Output = Self;\n                 fn neg(self) -> Self::Output {\n-                    <$type>::splat(-<$scalar>::default()) - self\n+                    <$type>::splat(0) - self\n+                }\n+            }\n+        }\n+    };\n+\n+    { impl Neg for $type:ty, $scalar:ty, @float } => {\n+        impl_ref_ops! {\n+            impl core::ops::Neg for $type {\n+                type Output = Self;\n+                fn neg(self) -> Self::Output {\n+                    // FIXME: Replace this with fneg intrinsic once available.\n+                    // https://github.com/rust-lang/stdsimd/issues/32\n+                    Self::from_bits(<$type>::splat(-0.0).to_bits() ^ self.to_bits())\n                 }\n             }\n         }\n@@ -310,7 +323,7 @@ macro_rules! impl_float_ops {\n                 impl_op! { impl Mul for $vector, $scalar }\n                 impl_op! { impl Div for $vector, $scalar }\n                 impl_op! { impl Rem for $vector, $scalar }\n-                impl_op! { impl Neg for $vector, $scalar }\n+                impl_op! { impl Neg for $vector, $scalar, @float }\n                 impl_op! { impl Index for $vector, $scalar }\n             )*\n         )*"}, {"sha": "7df30ec39f6c1205db316b89edf4abfebdab90b4", "filename": "crates/core_simd/tests/ops_impl/float_macros.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a46ca43e2833cb44adfc3c95c34d7edf7c15a4e/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a46ca43e2833cb44adfc3c95c34d7edf7c15a4e/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs?ref=0a46ca43e2833cb44adfc3c95c34d7edf7c15a4e", "patch": "@@ -289,6 +289,15 @@ macro_rules! float_tests {\n                 assert_biteq!(-v, expected);\n             }\n \n+            #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+            fn neg_odd_floats() {\n+                for v in slice_chunks(&C) {\n+                    let expected = apply_unary_lanewise(v, core::ops::Neg::neg);\n+                    assert_biteq!(-v, expected);\n+                }\n+            }\n+\n             #[test]\n             #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn abs_negative() {"}]}