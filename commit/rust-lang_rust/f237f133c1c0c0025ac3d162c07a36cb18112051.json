{"sha": "f237f133c1c0c0025ac3d162c07a36cb18112051", "node_id": "C_kwDOAAsO6NoAKGYyMzdmMTMzYzFjMGMwMDI1YWMzZDE2MmMwN2EzNmNiMTgxMTIwNTE", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-06-01T00:20:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-01T00:20:00Z"}, "message": "Merge pull request #280 from rust-lang/feature/document-unsafety\n\nDocument unsafety", "tree": {"sha": "b3c7c19791d65115497445ec84de05dd82e43651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3c7c19791d65115497445ec84de05dd82e43651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f237f133c1c0c0025ac3d162c07a36cb18112051", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJilrCwCRBK7hj4Ov3rIwAA5T8IABWlwlNLX4qDbkmTHYdh/TPG\nepf4qg8Bw0tZ4SVXbnG2j6bpp5BpPYS4dzkwQQnAQdignoDWt5RwkmJshju/RPVn\nEgL8g5vG2YSr0XjNlPM7CFIiu9zs9acDtCbLJiEubiBBWYUEJutjBiV29tgXr2KN\nTlmbpmkIFL1n4gChn02P7gH3CAU2ixQKDL10d2iMgKSLwsLFvDraAKsjJmkXUC89\nzdxng7R26sdXITOT0s/m0wLX47Qk36N6UYR5H4jCw1b3MNHnGIHnDi5ZLouvZ6hF\niNoQ3U2dhZBCOGdhAoiqV9jX8IfVWew6NXtiPvIqJd43UXrD02CRJTljx4APWyA=\n=Odnd\n-----END PGP SIGNATURE-----\n", "payload": "tree b3c7c19791d65115497445ec84de05dd82e43651\nparent 5e320046ecc286607885cc839df662c0c0706168\nparent 05c92c73c181015ed512255abef8377292d5cbf7\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1654042800 -0400\ncommitter GitHub <noreply@github.com> 1654042800 -0400\n\nMerge pull request #280 from rust-lang/feature/document-unsafety\n\nDocument unsafety"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f237f133c1c0c0025ac3d162c07a36cb18112051", "html_url": "https://github.com/rust-lang/rust/commit/f237f133c1c0c0025ac3d162c07a36cb18112051", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f237f133c1c0c0025ac3d162c07a36cb18112051/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e320046ecc286607885cc839df662c0c0706168", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e320046ecc286607885cc839df662c0c0706168", "html_url": "https://github.com/rust-lang/rust/commit/5e320046ecc286607885cc839df662c0c0706168"}, {"sha": "05c92c73c181015ed512255abef8377292d5cbf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c92c73c181015ed512255abef8377292d5cbf7", "html_url": "https://github.com/rust-lang/rust/commit/05c92c73c181015ed512255abef8377292d5cbf7"}], "stats": {"total": 72, "additions": 50, "deletions": 22}, "files": [{"sha": "67e4454e5e120b73c140e60a8e80632c4bc12ad3", "filename": "crates/core_simd/src/elements/float.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Felements%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Felements%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Felements%2Ffloat.rs?ref=f237f133c1c0c0025ac3d162c07a36cb18112051", "patch": "@@ -202,17 +202,20 @@ macro_rules! impl_trait {\n             #[inline]\n             fn to_bits(self) -> Simd<$bits_ty, LANES> {\n                 assert_eq!(core::mem::size_of::<Self>(), core::mem::size_of::<Self::Bits>());\n+                // Safety: transmuting between vector types is safe\n                 unsafe { core::mem::transmute_copy(&self) }\n             }\n \n             #[inline]\n             fn from_bits(bits: Simd<$bits_ty, LANES>) -> Self {\n                 assert_eq!(core::mem::size_of::<Self>(), core::mem::size_of::<Self::Bits>());\n+                // Safety: transmuting between vector types is safe\n                 unsafe { core::mem::transmute_copy(&bits) }\n             }\n \n             #[inline]\n             fn abs(self) -> Self {\n+                // Safety: `self` is a float vector\n                 unsafe { intrinsics::simd_fabs(self) }\n             }\n \n@@ -283,11 +286,13 @@ macro_rules! impl_trait {\n \n             #[inline]\n             fn simd_min(self, other: Self) -> Self {\n+                // Safety: `self` and `other` are float vectors\n                 unsafe { intrinsics::simd_fmin(self, other) }\n             }\n \n             #[inline]\n             fn simd_max(self, other: Self) -> Self {\n+                // Safety: `self` and `other` are floating point vectors\n                 unsafe { intrinsics::simd_fmax(self, other) }\n             }\n "}, {"sha": "715f258f617df25961052a021a349b248d87b8d0", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=f237f133c1c0c0025ac3d162c07a36cb18112051", "patch": "@@ -12,7 +12,7 @@\n #![cfg_attr(feature = \"generic_const_exprs\", feature(generic_const_exprs))]\n #![cfg_attr(feature = \"generic_const_exprs\", allow(incomplete_features))]\n #![warn(missing_docs)]\n-#![deny(unsafe_op_in_unsafe_fn)]\n+#![deny(unsafe_op_in_unsafe_fn, clippy::undocumented_unsafe_blocks)]\n #![unstable(feature = \"portable_simd\", issue = \"86656\")]\n //! Portable SIMD module.\n "}, {"sha": "c36c336d8a216ce91fdf04f668020bf4b477eb28", "filename": "crates/core_simd/src/masks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fmasks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks.rs?ref=f237f133c1c0c0025ac3d162c07a36cb18112051", "patch": "@@ -68,6 +68,7 @@ macro_rules! impl_element {\n             const FALSE: Self = 0;\n         }\n \n+        // Safety: this is a valid mask element type\n         unsafe impl MaskElement for $ty {}\n     }\n }"}, {"sha": "65d3ce9be65ecfa123585f3b6e9ccedb0ae07d58", "filename": "crates/core_simd/src/masks/to_bitmask.rs", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fto_bitmask.rs?ref=f237f133c1c0c0025ac3d162c07a36cb18112051", "patch": "@@ -16,11 +16,7 @@ where\n /// Converts masks to and from integer bitmasks.\n ///\n /// Each bit of the bitmask corresponds to a mask lane, starting with the LSB.\n-///\n-/// # Safety\n-/// This trait is `unsafe` and sealed, since the `BitMask` type must match the number of lanes in\n-/// the mask.\n-pub unsafe trait ToBitMask: Sealed {\n+pub trait ToBitMask: Sealed {\n     /// The integer bitmask type.\n     type BitMask;\n \n@@ -34,12 +30,8 @@ pub unsafe trait ToBitMask: Sealed {\n /// Converts masks to and from byte array bitmasks.\n ///\n /// Each bit of the bitmask corresponds to a mask lane, starting with the LSB of the first byte.\n-///\n-/// # Safety\n-/// This trait is `unsafe` and sealed, since the `BYTES` value must match the number of lanes in\n-/// the mask.\n #[cfg(feature = \"generic_const_exprs\")]\n-pub unsafe trait ToBitMaskArray: Sealed {\n+pub trait ToBitMaskArray: Sealed {\n     /// The length of the bitmask array.\n     const BYTES: usize;\n \n@@ -51,9 +43,9 @@ pub unsafe trait ToBitMaskArray: Sealed {\n }\n \n macro_rules! impl_integer_intrinsic {\n-    { $(unsafe impl ToBitMask<BitMask=$int:ty> for Mask<_, $lanes:literal>)* } => {\n+    { $(impl ToBitMask<BitMask=$int:ty> for Mask<_, $lanes:literal>)* } => {\n         $(\n-        unsafe impl<T: MaskElement> ToBitMask for Mask<T, $lanes> {\n+        impl<T: MaskElement> ToBitMask for Mask<T, $lanes> {\n             type BitMask = $int;\n \n             fn to_bitmask(self) -> $int {\n@@ -69,13 +61,13 @@ macro_rules! impl_integer_intrinsic {\n }\n \n impl_integer_intrinsic! {\n-    unsafe impl ToBitMask<BitMask=u8> for Mask<_, 1>\n-    unsafe impl ToBitMask<BitMask=u8> for Mask<_, 2>\n-    unsafe impl ToBitMask<BitMask=u8> for Mask<_, 4>\n-    unsafe impl ToBitMask<BitMask=u8> for Mask<_, 8>\n-    unsafe impl ToBitMask<BitMask=u16> for Mask<_, 16>\n-    unsafe impl ToBitMask<BitMask=u32> for Mask<_, 32>\n-    unsafe impl ToBitMask<BitMask=u64> for Mask<_, 64>\n+    impl ToBitMask<BitMask=u8> for Mask<_, 1>\n+    impl ToBitMask<BitMask=u8> for Mask<_, 2>\n+    impl ToBitMask<BitMask=u8> for Mask<_, 4>\n+    impl ToBitMask<BitMask=u8> for Mask<_, 8>\n+    impl ToBitMask<BitMask=u16> for Mask<_, 16>\n+    impl ToBitMask<BitMask=u32> for Mask<_, 32>\n+    impl ToBitMask<BitMask=u64> for Mask<_, 64>\n }\n \n /// Returns the minimum numnber of bytes in a bitmask with `lanes` lanes.\n@@ -85,7 +77,7 @@ pub const fn bitmask_len(lanes: usize) -> usize {\n }\n \n #[cfg(feature = \"generic_const_exprs\")]\n-unsafe impl<T: MaskElement, const LANES: usize> ToBitMaskArray for Mask<T, LANES>\n+impl<T: MaskElement, const LANES: usize> ToBitMaskArray for Mask<T, LANES>\n where\n     LaneCount<LANES>: SupportedLaneCount,\n {"}, {"sha": "5a077a469d8390b427bfd8f69567a0b960d072a9", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=f237f133c1c0c0025ac3d162c07a36cb18112051", "patch": "@@ -33,6 +33,7 @@ where\n \n macro_rules! unsafe_base {\n     ($lhs:ident, $rhs:ident, {$simd_call:ident}, $($_:tt)*) => {\n+        // Safety: $lhs and $rhs are vectors\n         unsafe { $crate::simd::intrinsics::$simd_call($lhs, $rhs) }\n     };\n }\n@@ -49,6 +50,7 @@ macro_rules! unsafe_base {\n macro_rules! wrap_bitshift {\n     ($lhs:ident, $rhs:ident, {$simd_call:ident}, $int:ident) => {\n         #[allow(clippy::suspicious_arithmetic_impl)]\n+        // Safety: $lhs and the bitand result are vectors\n         unsafe {\n             $crate::simd::intrinsics::$simd_call(\n                 $lhs,\n@@ -91,6 +93,7 @@ macro_rules! int_divrem_guard {\n                 // Nice base case to make it easy to const-fold away the other branch.\n                 $rhs\n             };\n+            // Safety: $lhs and rhs are vectors\n             unsafe { $crate::simd::intrinsics::$simd_call($lhs, rhs) }\n         }\n     };"}, {"sha": "4ad02215034be3ddd3bb9d95396052d5edfbf9a2", "filename": "crates/core_simd/src/ops/unary.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fops%2Funary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fops%2Funary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops%2Funary.rs?ref=f237f133c1c0c0025ac3d162c07a36cb18112051", "patch": "@@ -14,6 +14,7 @@ macro_rules! neg {\n             #[inline]\n             #[must_use = \"operator returns a new vector without mutating the input\"]\n             fn neg(self) -> Self::Output {\n+                // Safety: `self` is a signed vector\n                 unsafe { intrinsics::simd_neg(self) }\n             }\n         })*"}, {"sha": "e111f3e0494767cdc235d3235b33d0d018d0f7f3", "filename": "crates/core_simd/src/round.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=f237f133c1c0c0025ac3d162c07a36cb18112051", "patch": "@@ -30,6 +30,8 @@ macro_rules! implement {\n                 $type: FloatToInt<I>,\n                 I: SimdElement,\n             {\n+                // Safety: `self` is a vector, and `FloatToInt` ensures the type can be casted to\n+                // an integer.\n                 unsafe { intrinsics::simd_cast(self) }\n             }\n         }"}, {"sha": "fac7dca51f4b0e2a798b7d2e6dff7a05a9b3c4c4", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f237f133c1c0c0025ac3d162c07a36cb18112051/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=f237f133c1c0c0025ac3d162c07a36cb18112051", "patch": "@@ -213,7 +213,7 @@ where\n     #[inline]\n     #[cfg(not(bootstrap))]\n     pub fn cast<U: SimdElement>(self) -> Simd<U, LANES> {\n-        // Safety: The input argument is a vector of a known SIMD type.\n+        // Safety: The input argument is a vector of a valid SIMD element type.\n         unsafe { intrinsics::simd_as(self) }\n     }\n \n@@ -624,61 +624,85 @@ pub unsafe trait SimdElement: Sealed + Copy {\n }\n \n impl Sealed for u8 {}\n+\n+// Safety: u8 is a valid SIMD element type, and is supported by this API\n unsafe impl SimdElement for u8 {\n     type Mask = i8;\n }\n \n impl Sealed for u16 {}\n+\n+// Safety: u16 is a valid SIMD element type, and is supported by this API\n unsafe impl SimdElement for u16 {\n     type Mask = i16;\n }\n \n impl Sealed for u32 {}\n+\n+// Safety: u32 is a valid SIMD element type, and is supported by this API\n unsafe impl SimdElement for u32 {\n     type Mask = i32;\n }\n \n impl Sealed for u64 {}\n+\n+// Safety: u64 is a valid SIMD element type, and is supported by this API\n unsafe impl SimdElement for u64 {\n     type Mask = i64;\n }\n \n impl Sealed for usize {}\n+\n+// Safety: usize is a valid SIMD element type, and is supported by this API\n unsafe impl SimdElement for usize {\n     type Mask = isize;\n }\n \n impl Sealed for i8 {}\n+\n+// Safety: i8 is a valid SIMD element type, and is supported by this API\n unsafe impl SimdElement for i8 {\n     type Mask = i8;\n }\n \n impl Sealed for i16 {}\n+\n+// Safety: i16 is a valid SIMD element type, and is supported by this API\n unsafe impl SimdElement for i16 {\n     type Mask = i16;\n }\n \n impl Sealed for i32 {}\n+\n+// Safety: i32 is a valid SIMD element type, and is supported by this API\n unsafe impl SimdElement for i32 {\n     type Mask = i32;\n }\n \n impl Sealed for i64 {}\n+\n+// Safety: i64 is a valid SIMD element type, and is supported by this API\n unsafe impl SimdElement for i64 {\n     type Mask = i64;\n }\n \n impl Sealed for isize {}\n+\n+// Safety: isize is a valid SIMD element type, and is supported by this API\n unsafe impl SimdElement for isize {\n     type Mask = isize;\n }\n \n impl Sealed for f32 {}\n+\n+// Safety: f32 is a valid SIMD element type, and is supported by this API\n unsafe impl SimdElement for f32 {\n     type Mask = i32;\n }\n \n impl Sealed for f64 {}\n+\n+// Safety: f64 is a valid SIMD element type, and is supported by this API\n unsafe impl SimdElement for f64 {\n     type Mask = i64;\n }"}]}