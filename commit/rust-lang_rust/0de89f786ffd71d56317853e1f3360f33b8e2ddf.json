{"sha": "0de89f786ffd71d56317853e1f3360f33b8e2ddf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZTg5Zjc4NmZmZDcxZDU2MzE3ODUzZTFmMzM2MGYzM2I4ZTJkZGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-02T14:58:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-02T14:58:04Z"}, "message": "always produce source for import", "tree": {"sha": "d6b13431cc32ca74c696166233aec7b44d331ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6b13431cc32ca74c696166233aec7b44d331ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0de89f786ffd71d56317853e1f3360f33b8e2ddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0de89f786ffd71d56317853e1f3360f33b8e2ddf", "html_url": "https://github.com/rust-lang/rust/commit/0de89f786ffd71d56317853e1f3360f33b8e2ddf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0de89f786ffd71d56317853e1f3360f33b8e2ddf/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a758a2c4803c7ecc956d2aa6ed2ce48c4e4edd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a758a2c4803c7ecc956d2aa6ed2ce48c4e4edd9", "html_url": "https://github.com/rust-lang/rust/commit/0a758a2c4803c7ecc956d2aa6ed2ce48c4e4edd9"}], "stats": {"total": 99, "additions": 70, "deletions": 29}, "files": [{"sha": "87d81f4a4a67e58c598fcc053737127f22de49a5", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0de89f786ffd71d56317853e1f3360f33b8e2ddf/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de89f786ffd71d56317853e1f3360f33b8e2ddf/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=0de89f786ffd71d56317853e1f3360f33b8e2ddf", "patch": "@@ -4,7 +4,7 @@ use ra_db::{CrateId, SourceRootId, Edition};\n use ra_syntax::{ast::self, TreeArc};\n \n use crate::{\n-    Name, ScopesWithSourceMap, Ty, HirFileId,\n+    Name, ScopesWithSourceMap, Ty, HirFileId, ImportSource,\n     HirDatabase, DefDatabase,\n     type_ref::TypeRef,\n     nameres::{ModuleScope, Namespace, ImportId, CrateModuleId},\n@@ -117,7 +117,7 @@ impl Module {\n     }\n \n     /// Returns the syntax of the last path segment corresponding to this import\n-    pub fn import_source(&self, db: &impl HirDatabase, import: ImportId) -> TreeArc<ast::UseTree> {\n+    pub fn import_source(&self, db: &impl HirDatabase, import: ImportId) -> ImportSource {\n         self.import_source_impl(db, import)\n     }\n "}, {"sha": "88dee3a69cea08ad911d1db6a6fe0b0d97b38e82", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0de89f786ffd71d56317853e1f3360f33b8e2ddf/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de89f786ffd71d56317853e1f3360f33b8e2ddf/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=0de89f786ffd71d56317853e1f3360f33b8e2ddf", "patch": "@@ -5,7 +5,7 @@ use crate::{\n     Module, ModuleSource, Name, AstId,\n     nameres::{CrateModuleId, ImportId},\n     HirDatabase, DefDatabase,\n-    HirFileId,\n+    HirFileId, ImportSource,\n };\n \n impl ModuleSource {\n@@ -72,7 +72,7 @@ impl Module {\n         &self,\n         db: &impl HirDatabase,\n         import: ImportId,\n-    ) -> TreeArc<ast::UseTree> {\n+    ) -> ImportSource {\n         let (file_id, source) = self.definition_source(db);\n         let (_, source_map) = db.raw_items_with_source_map(file_id);\n         source_map.get(&source, import)"}, {"sha": "643bee6cdc67c9c30fa3854f30bd2227b84d2df3", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0de89f786ffd71d56317853e1f3360f33b8e2ddf/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de89f786ffd71d56317853e1f3360f33b8e2ddf/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=0de89f786ffd71d56317853e1f3360f33b8e2ddf", "patch": "@@ -56,7 +56,7 @@ pub use self::{\n     name::Name,\n     source_id::{AstIdMap, ErasedFileAstId},\n     ids::{HirFileId, MacroDefId, MacroCallId, MacroCallLoc, HirInterner},\n-    nameres::{PerNs, Namespace},\n+    nameres::{PerNs, Namespace, ImportId, ImportSource},\n     ty::{Ty, ApplicationTy, TypeCtor, Substs, display::HirDisplay},\n     impl_block::{ImplBlock, ImplItem},\n     docs::{Docs, Documentation},"}, {"sha": "6f049acfc3ee30ce14e3d51c88d9cbe66290cca3", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0de89f786ffd71d56317853e1f3360f33b8e2ddf/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de89f786ffd71d56317853e1f3360f33b8e2ddf/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=0de89f786ffd71d56317853e1f3360f33b8e2ddf", "patch": "@@ -70,9 +70,12 @@ use crate::{\n     AstId,\n };\n \n-pub(crate) use self::raw::{RawItems, ImportId, ImportSourceMap};\n+pub(crate) use self::raw::{RawItems, ImportSourceMap};\n \n-pub use self::per_ns::{PerNs, Namespace};\n+pub use self::{\n+    per_ns::{PerNs, Namespace},\n+    raw::{ImportId, ImportSource},\n+};\n \n /// Contans all top-level defs from a macro-expanded crate\n #[derive(Debug, PartialEq, Eq)]"}, {"sha": "b7416ede6736c4887df74e20d809d9e5ab5e0430", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 52, "deletions": 17, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0de89f786ffd71d56317853e1f3360f33b8e2ddf/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de89f786ffd71d56317853e1f3360f33b8e2ddf/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=0de89f786ffd71d56317853e1f3360f33b8e2ddf", "patch": "@@ -31,21 +31,43 @@ pub struct RawItems {\n \n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ImportSourceMap {\n-    map: ArenaMap<ImportId, AstPtr<ast::UseTree>>,\n+    map: ArenaMap<ImportId, ImportSourcePtr>,\n+}\n+\n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+enum ImportSourcePtr {\n+    UseTree(AstPtr<ast::UseTree>),\n+    ExternCrate(AstPtr<ast::ExternCrateItem>),\n+}\n+\n+impl ImportSourcePtr {\n+    fn to_node(self, file: &SourceFile) -> ImportSource {\n+        match self {\n+            ImportSourcePtr::UseTree(ptr) => ImportSource::UseTree(ptr.to_node(file).to_owned()),\n+            ImportSourcePtr::ExternCrate(ptr) => {\n+                ImportSource::ExternCrate(ptr.to_node(file).to_owned())\n+            }\n+        }\n+    }\n+}\n+\n+pub enum ImportSource {\n+    UseTree(TreeArc<ast::UseTree>),\n+    ExternCrate(TreeArc<ast::ExternCrateItem>),\n }\n \n impl ImportSourceMap {\n-    fn insert(&mut self, import: ImportId, use_tree: &ast::UseTree) {\n-        self.map.insert(import, AstPtr::new(use_tree))\n+    fn insert(&mut self, import: ImportId, ptr: ImportSourcePtr) {\n+        self.map.insert(import, ptr)\n     }\n \n-    pub(crate) fn get(&self, source: &ModuleSource, import: ImportId) -> TreeArc<ast::UseTree> {\n+    pub(crate) fn get(&self, source: &ModuleSource, import: ImportId) -> ImportSource {\n         let file = match source {\n             ModuleSource::SourceFile(file) => &*file,\n             ModuleSource::Module(m) => m.syntax().ancestors().find_map(SourceFile::cast).unwrap(),\n         };\n \n-        self.map[import].to_node(file).to_owned()\n+        self.map[import].to_node(file)\n     }\n }\n \n@@ -257,15 +279,13 @@ impl RawItemsCollector {\n         let is_prelude = use_item.has_atom_attr(\"prelude_import\");\n \n         Path::expand_use_item(use_item, |path, use_tree, is_glob, alias| {\n-            let import = self.raw_items.imports.alloc(ImportData {\n-                path,\n-                alias,\n-                is_glob,\n-                is_prelude,\n-                is_extern_crate: false,\n-            });\n-            self.source_map.insert(import, use_tree);\n-            self.push_item(current_module, RawItem::Import(import))\n+            let import_data =\n+                ImportData { path, alias, is_glob, is_prelude, is_extern_crate: false };\n+            self.push_import(\n+                current_module,\n+                import_data,\n+                ImportSourcePtr::UseTree(AstPtr::new(use_tree)),\n+            );\n         })\n     }\n \n@@ -277,14 +297,18 @@ impl RawItemsCollector {\n         if let Some(name_ref) = extern_crate.name_ref() {\n             let path = Path::from_name_ref(name_ref);\n             let alias = extern_crate.alias().and_then(|a| a.name()).map(AsName::as_name);\n-            let import = self.raw_items.imports.alloc(ImportData {\n+            let import_data = ImportData {\n                 path,\n                 alias,\n                 is_glob: false,\n                 is_prelude: false,\n                 is_extern_crate: true,\n-            });\n-            self.push_item(current_module, RawItem::Import(import))\n+            };\n+            self.push_import(\n+                current_module,\n+                import_data,\n+                ImportSourcePtr::ExternCrate(AstPtr::new(extern_crate)),\n+            );\n         }\n     }\n \n@@ -301,6 +325,17 @@ impl RawItemsCollector {\n         self.push_item(current_module, RawItem::Macro(m));\n     }\n \n+    fn push_import(\n+        &mut self,\n+        current_module: Option<Module>,\n+        data: ImportData,\n+        source: ImportSourcePtr,\n+    ) {\n+        let import = self.raw_items.imports.alloc(data);\n+        self.source_map.insert(import, source);\n+        self.push_item(current_module, RawItem::Import(import))\n+    }\n+\n     fn push_item(&mut self, current_module: Option<Module>, item: RawItem) {\n         match current_module {\n             Some(module) => match &mut self.raw_items.modules[module] {"}, {"sha": "e54fe7b7e4189fe8c3a3c995ba2bf6eaf7eea085", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0de89f786ffd71d56317853e1f3360f33b8e2ddf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de89f786ffd71d56317853e1f3360f33b8e2ddf/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=0de89f786ffd71d56317853e1f3360f33b8e2ddf", "patch": "@@ -19,11 +19,14 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n             for (name, res) in module_scope.entries() {\n                 if Some(module) == ctx.module {\n                     if let Some(import) = res.import {\n-                        let path = module.import_source(ctx.db, import);\n-                        if path.syntax().range().contains_inclusive(ctx.offset) {\n-                            // for `use self::foo<|>`, don't suggest `foo` as a completion\n-                            tested_by!(dont_complete_current_use);\n-                            continue;\n+                        if let hir::ImportSource::UseTree(tree) =\n+                            module.import_source(ctx.db, import)\n+                        {\n+                            if tree.syntax().range().contains_inclusive(ctx.offset) {\n+                                // for `use self::foo<|>`, don't suggest `foo` as a completion\n+                                tested_by!(dont_complete_current_use);\n+                                continue;\n+                            }\n                         }\n                     }\n                 }"}]}