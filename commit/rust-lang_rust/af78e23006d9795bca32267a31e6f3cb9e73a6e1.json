{"sha": "af78e23006d9795bca32267a31e6f3cb9e73a6e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNzhlMjMwMDZkOTc5NWJjYTMyMjY3YTMxZTZmM2NiOWU3M2E2ZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-24T03:04:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-24T03:04:53Z"}, "message": "auto merge of #7958 : kemurphy/rust/link-section, r=alexcrichton\n\nThis allows for control over the section placement of static, static\r\nmut, and fn items.  One caveat is that if a static and a static mut are\r\nplaced in the same section, the static is declared first, and the static\r\nmut is assigned to, the generated program crashes.  For example:\r\n\r\n#[link_section=\".boot\"]\r\nstatic foo : uint = 0xdeadbeef;\r\n\r\n#[link_section=\".boot\"]\r\nstatic mut bar : uint = 0xcafebabe;\r\n\r\nDeclaring bar first would mark .bootdata as writable, preventing the\r\ncrash when bar is written to.", "tree": {"sha": "df940605470509921b4f69f836a7519308a2662b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df940605470509921b4f69f836a7519308a2662b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af78e23006d9795bca32267a31e6f3cb9e73a6e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af78e23006d9795bca32267a31e6f3cb9e73a6e1", "html_url": "https://github.com/rust-lang/rust/commit/af78e23006d9795bca32267a31e6f3cb9e73a6e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af78e23006d9795bca32267a31e6f3cb9e73a6e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "359755a39a1d216a03a4e4d0b14e64e6610bbf91", "url": "https://api.github.com/repos/rust-lang/rust/commits/359755a39a1d216a03a4e4d0b14e64e6610bbf91", "html_url": "https://github.com/rust-lang/rust/commit/359755a39a1d216a03a4e4d0b14e64e6610bbf91"}, {"sha": "c6c1472c6845ea02fad009603b1c2331b679ed67", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c1472c6845ea02fad009603b1c2331b679ed67", "html_url": "https://github.com/rust-lang/rust/commit/c6c1472c6845ea02fad009603b1c2331b679ed67"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "bf5c5ac334de99a09c8c8732098ad5c5f488d721", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af78e23006d9795bca32267a31e6f3cb9e73a6e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af78e23006d9795bca32267a31e6f3cb9e73a6e1/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=af78e23006d9795bca32267a31e6f3cb9e73a6e1", "patch": "@@ -2449,7 +2449,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::node_id) -> ValueRef {\n         let val = match item {\n           ast_map::node_item(i, pth) => {\n             let my_path = vec::append((*pth).clone(), [path_name(i.ident)]);\n-            match i.node {\n+            let v = match i.node {\n               ast::item_static(_, m, expr) => {\n                 let typ = ty::node_id_to_type(ccx.tcx, i.id);\n                 let s = mangle_exported_name(ccx, my_path, typ);\n@@ -2481,7 +2481,16 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::node_id) -> ValueRef {\n                 llfn\n               }\n               _ => fail!(\"get_item_val: weird result in table\")\n+            };\n+            match (attr::first_attr_value_str_by_name(i.attrs, \"link_section\")) {\n+                Some(sect) => unsafe {\n+                    do sect.as_c_str |buf| {\n+                        llvm::LLVMSetSection(v, buf);\n+                    }\n+                },\n+                None => ()\n             }\n+            v\n           }\n           ast_map::node_trait_method(trait_method, _, pth) => {\n             debug!(\"get_item_val(): processing a node_trait_method\");"}, {"sha": "ff1e4740394781456ae66bfd3dbd6d7995b9427f", "filename": "src/test/run-pass/link-section.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/af78e23006d9795bca32267a31e6f3cb9e73a6e1/src%2Ftest%2Frun-pass%2Flink-section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af78e23006d9795bca32267a31e6f3cb9e73a6e1/src%2Ftest%2Frun-pass%2Flink-section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flink-section.rs?ref=af78e23006d9795bca32267a31e6f3cb9e73a6e1", "patch": "@@ -0,0 +1,34 @@\n+#[cfg(not(target_os = \"macos\"))]\n+#[link_section=\".moretext\"]\n+fn i_live_in_more_text() -> &'static str {\n+    \"knock knock\"\n+}\n+\n+#[cfg(not(target_os = \"macos\"))]\n+#[link_section=\".imm\"]\n+static magic: uint = 42;\n+\n+#[cfg(not(target_os = \"macos\"))]\n+#[link_section=\".mut\"]\n+static mut frobulator: uint = 0xdeadbeef;\n+\n+#[cfg(target_os = \"macos\")]\n+#[link_section=\"__TEXT,__moretext\"]\n+fn i_live_in_more_text() -> &'static str {\n+    \"knock knock\"\n+}\n+\n+#[cfg(target_os = \"macos\")]\n+#[link_section=\"__RODATA,__imm\"]\n+static magic: uint = 42;\n+\n+#[cfg(target_os = \"macos\")]\n+#[link_section=\"__DATA,__mut\"]\n+static mut frobulator: uint = 0xdeadbeef;\n+\n+fn main() {\n+    unsafe {\n+        frobulator = 0xcafebabe;\n+        printfln!(\"%? %? %?\", i_live_in_more_text(), magic, frobulator);\n+    }\n+}"}]}