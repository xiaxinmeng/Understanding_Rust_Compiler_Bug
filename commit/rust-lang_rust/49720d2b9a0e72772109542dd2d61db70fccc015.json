{"sha": "49720d2b9a0e72772109542dd2d61db70fccc015", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NzIwZDJiOWEwZTcyNzcyMTA5NTQyZGQyZDYxZGI3MGZjY2MwMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-29T03:57:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-29T03:57:54Z"}, "message": "Auto merge of #78512 - JohnTitor:rollup-a7qwjah, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #77213 (rustdoc options to set default theme (and other settings))\n - #78224 (min_const_generics: allow ty param in repeat expr)\n - #78428 (MinConstGenerics UI test for invalid values for bool & char)\n - #78460 (Adjust turbofish help message for const generics)\n - #78470 (Clean up intra-doc links in `std::path`)\n - #78475 (fix a comment in validity check)\n - #78478 (Add const generics tests for supertraits + dyn traits.)\n - #78487 (Fix typo \"compiltest\")\n - #78491 (Inline NonZeroN::from(n))\n - #78492 (Update books)\n - #78494 (Fix typos)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "f534a2c0c2d56dd3d0d66c41a313286fa13b1854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f534a2c0c2d56dd3d0d66c41a313286fa13b1854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49720d2b9a0e72772109542dd2d61db70fccc015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49720d2b9a0e72772109542dd2d61db70fccc015", "html_url": "https://github.com/rust-lang/rust/commit/49720d2b9a0e72772109542dd2d61db70fccc015", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49720d2b9a0e72772109542dd2d61db70fccc015/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9187adaef2005b903f666bf323ac675cadf8407", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9187adaef2005b903f666bf323ac675cadf8407", "html_url": "https://github.com/rust-lang/rust/commit/f9187adaef2005b903f666bf323ac675cadf8407"}, {"sha": "30d1d8f5da19ad354a1d540df9150296501bba96", "url": "https://api.github.com/repos/rust-lang/rust/commits/30d1d8f5da19ad354a1d540df9150296501bba96", "html_url": "https://github.com/rust-lang/rust/commit/30d1d8f5da19ad354a1d540df9150296501bba96"}], "stats": {"total": 674, "additions": 562, "deletions": 112}, "files": [{"sha": "193247af584bb579d240582f8de712df42b22aed", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -206,8 +206,10 @@ pub enum Res<Id = hir::HirId> {\n     /// ```rust\n     /// impl Foo { fn test() -> [u8; std::mem::size_of::<Self>()] {} }\n     /// ```\n+    /// We do however allow `Self` in repeat expression even if it is generic to not break code\n+    /// which already works on stable while causing the `const_evaluatable_unchecked` future compat lint.\n     ///\n-    /// FIXME(lazy_normalization_consts): Remove this bodge once this feature is stable.\n+    /// FIXME(lazy_normalization_consts): Remove this bodge once that feature is stable.\n     SelfTy(Option<DefId> /* trait */, Option<(DefId, bool)> /* impl */),\n     ToolMod, // e.g., `rustfmt` in `#[rustfmt::skip]`\n "}, {"sha": "acded5351f80a5dbaa8045adf25292fe83ace8d3", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -678,8 +678,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n     pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {\n         let mut inner = self.inner.borrow_mut();\n-        // FIXME(const_generics): should there be an equivalent function for const variables?\n-\n         let mut vars: Vec<Ty<'_>> = inner\n             .type_variables()\n             .unsolved_variables()"}, {"sha": "6b7889c4d9e8f8e7881688baecb587a4c856b695", "filename": "compiler/rustc_mir/src/dataflow/impls/borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fborrows.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -177,7 +177,7 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n         //\n         // We are careful always to call this function *before* we\n         // set up the gen-bits for the statement or\n-        // termanator. That way, if the effect of the statement or\n+        // terminator. That way, if the effect of the statement or\n         // terminator *does* introduce a new loan of the same\n         // region, then setting that gen-bit will override any\n         // potential kill introduced here."}, {"sha": "a2b0713cd7d0b6cf87dce1b3e37f00e637cbf9a8", "filename": "compiler/rustc_mir/src/dataflow/impls/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fimpls%2Fliveness.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -8,7 +8,7 @@ use crate::dataflow::{AnalysisDomain, Backward, GenKill, GenKillAnalysis};\n ///\n /// This analysis considers references as being used only at the point of the\n /// borrow. In other words, this analysis does not track uses because of references that already\n-/// exist. See [this `mir-datalow` test][flow-test] for an example. You almost never want to use\n+/// exist. See [this `mir-dataflow` test][flow-test] for an example. You almost never want to use\n /// this analysis without also looking at the results of [`MaybeBorrowedLocals`].\n ///\n /// [`MaybeBorrowedLocals`]: ../struct.MaybeBorrowedLocals.html\n@@ -134,7 +134,7 @@ impl DefUse {\n \n             // `MutatingUseContext::Call` and `MutatingUseContext::Yield` indicate that this is the\n             // destination place for a `Call` return or `Yield` resume respectively. Since this is\n-            // only a `Def` when the function returns succesfully, we handle this case separately\n+            // only a `Def` when the function returns successfully, we handle this case separately\n             // in `call_return_effect` above.\n             PlaceContext::MutatingUse(MutatingUseContext::Call | MutatingUseContext::Yield) => None,\n "}, {"sha": "2d235d65c4d3812e04694ebded070094ce502dc4", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -579,9 +579,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 // Nothing to check.\n                 Ok(true)\n             }\n-            // The above should be all the (inhabited) primitive types. The rest is compound, we\n+            // The above should be all the primitive types. The rest is compound, we\n             // check them by visiting their fields/variants.\n-            // (`Str` UTF-8 check happens in `visit_aggregate`, too.)\n             ty::Adt(..)\n             | ty::Tuple(..)\n             | ty::Array(..)"}, {"sha": "f13a4329d3b6f7cc27045afed8c01dfd0bf2cbf1", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -20,7 +20,8 @@ use rustc_span::{MultiSpan, Span, SpanSnippetError, DUMMY_SP};\n \n use tracing::{debug, trace};\n \n-const TURBOFISH: &str = \"use `::<...>` instead of `<...>` to specify type arguments\";\n+const TURBOFISH_SUGGESTION_STR: &str =\n+    \"use `::<...>` instead of `<...>` to specify type or const arguments\";\n \n /// Creates a placeholder argument.\n pub(super) fn dummy_arg(ident: Ident) -> Param {\n@@ -659,7 +660,7 @@ impl<'a> Parser<'a> {\n                                 Ok(_) => {\n                                     e.span_suggestion_verbose(\n                                         binop.span.shrink_to_lo(),\n-                                        \"use `::<...>` instead of `<...>` to specify type arguments\",\n+                                        TURBOFISH_SUGGESTION_STR,\n                                         \"::\".to_string(),\n                                         Applicability::MaybeIncorrect,\n                                     );\n@@ -814,7 +815,7 @@ impl<'a> Parser<'a> {\n                 let suggest = |err: &mut DiagnosticBuilder<'_>| {\n                     err.span_suggestion_verbose(\n                         op.span.shrink_to_lo(),\n-                        TURBOFISH,\n+                        TURBOFISH_SUGGESTION_STR,\n                         \"::\".to_string(),\n                         Applicability::MaybeIncorrect,\n                     );\n@@ -888,7 +889,7 @@ impl<'a> Parser<'a> {\n                         {\n                             // All we know is that this is `foo < bar >` and *nothing* else. Try to\n                             // be helpful, but don't attempt to recover.\n-                            err.help(TURBOFISH);\n+                            err.help(TURBOFISH_SUGGESTION_STR);\n                             err.help(\"or use `(...)` if you meant to specify fn arguments\");\n                         }\n "}, {"sha": "d323aebe59798cc04de848bf7307bed502dbdef3", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 70, "deletions": 18, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -57,6 +57,12 @@ enum PatternSource {\n     FnParam,\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum IsRepeatExpr {\n+    No,\n+    Yes,\n+}\n+\n impl PatternSource {\n     fn descr(self) -> &'static str {\n         match self {\n@@ -437,10 +443,8 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         self.resolve_block(block);\n     }\n     fn visit_anon_const(&mut self, constant: &'ast AnonConst) {\n-        debug!(\"visit_anon_const {:?}\", constant);\n-        self.with_constant_rib(constant.value.is_potential_trivial_const_param(), |this| {\n-            visit::walk_anon_const(this, constant);\n-        });\n+        // We deal with repeat expressions explicitly in `resolve_expr`.\n+        self.resolve_anon_const(constant, IsRepeatExpr::No);\n     }\n     fn visit_expr(&mut self, expr: &'ast Expr) {\n         self.resolve_expr(expr, None);\n@@ -647,7 +651,11 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                         if !check_ns(TypeNS) && check_ns(ValueNS) {\n                             // This must be equivalent to `visit_anon_const`, but we cannot call it\n                             // directly due to visitor lifetimes so we have to copy-paste some code.\n-                            self.with_constant_rib(true, |this| {\n+                            //\n+                            // Note that we might not be inside of an repeat expression here,\n+                            // but considering that `IsRepeatExpr` is only relevant for\n+                            // non-trivial constants this is doesn't matter.\n+                            self.with_constant_rib(IsRepeatExpr::No, true, |this| {\n                                 this.smart_resolve_path(\n                                     ty.id,\n                                     qself.as_ref(),\n@@ -980,9 +988,11 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             //\n                                             // Type parameters can already be used and as associated consts are\n                                             // not used as part of the type system, this is far less surprising.\n-                                            this.with_constant_rib(true, |this| {\n-                                                this.visit_expr(expr)\n-                                            });\n+                                            this.with_constant_rib(\n+                                                IsRepeatExpr::No,\n+                                                true,\n+                                                |this| this.visit_expr(expr),\n+                                            );\n                                         }\n                                     }\n                                     AssocItemKind::Fn(_, _, generics, _) => {\n@@ -1023,7 +1033,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.with_item_rib(HasGenericParams::No, |this| {\n                     this.visit_ty(ty);\n                     if let Some(expr) = expr {\n-                        this.with_constant_rib(expr.is_potential_trivial_const_param(), |this| {\n+                        // We already forbid generic params because of the above item rib,\n+                        // so it doesn't matter whether this is a trivial constant.\n+                        this.with_constant_rib(IsRepeatExpr::No, true, |this| {\n                             this.visit_expr(expr)\n                         });\n                     }\n@@ -1122,12 +1134,29 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         self.with_rib(ValueNS, kind, |this| this.with_rib(TypeNS, kind, f))\n     }\n \n-    fn with_constant_rib(&mut self, trivial: bool, f: impl FnOnce(&mut Self)) {\n-        debug!(\"with_constant_rib\");\n-        self.with_rib(ValueNS, ConstantItemRibKind(trivial), |this| {\n-            this.with_rib(TypeNS, ConstantItemRibKind(trivial), |this| {\n-                this.with_label_rib(ConstantItemRibKind(trivial), f);\n-            })\n+    // HACK(min_const_generics,const_evaluatable_unchecked): We\n+    // want to keep allowing `[0; std::mem::size_of::<*mut T>()]`\n+    // with a future compat lint for now. We do this by adding an\n+    // additional special case for repeat expressions.\n+    //\n+    // Note that we intentionally still forbid `[0; N + 1]` during\n+    // name resolution so that we don't extend the future\n+    // compat lint to new cases.\n+    fn with_constant_rib(\n+        &mut self,\n+        is_repeat: IsRepeatExpr,\n+        is_trivial: bool,\n+        f: impl FnOnce(&mut Self),\n+    ) {\n+        debug!(\"with_constant_rib: is_repeat={:?} is_trivial={}\", is_repeat, is_trivial);\n+        self.with_rib(ValueNS, ConstantItemRibKind(is_trivial), |this| {\n+            this.with_rib(\n+                TypeNS,\n+                ConstantItemRibKind(is_repeat == IsRepeatExpr::Yes || is_trivial),\n+                |this| {\n+                    this.with_label_rib(ConstantItemRibKind(is_trivial), f);\n+                },\n+            )\n         });\n     }\n \n@@ -1272,9 +1301,17 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                             //\n                                             // Type parameters can already be used and as associated consts are\n                                             // not used as part of the type system, this is far less surprising.\n-                                            this.with_constant_rib(true, |this| {\n-                                                visit::walk_assoc_item(this, item, AssocCtxt::Impl)\n-                                            });\n+                                            this.with_constant_rib(\n+                                                IsRepeatExpr::No,\n+                                                true,\n+                                                |this| {\n+                                                    visit::walk_assoc_item(\n+                                                        this,\n+                                                        item,\n+                                                        AssocCtxt::Impl,\n+                                                    )\n+                                                },\n+                                            );\n                                         }\n                                         AssocItemKind::Fn(_, _, generics, _) => {\n                                             // We also need a new scope for the impl item type parameters.\n@@ -2199,6 +2236,17 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         debug!(\"(resolving block) leaving block\");\n     }\n \n+    fn resolve_anon_const(&mut self, constant: &'ast AnonConst, is_repeat: IsRepeatExpr) {\n+        debug!(\"resolve_anon_const {:?} is_repeat: {:?}\", constant, is_repeat);\n+        self.with_constant_rib(\n+            is_repeat,\n+            constant.value.is_potential_trivial_const_param(),\n+            |this| {\n+                visit::walk_anon_const(this, constant);\n+            },\n+        );\n+    }\n+\n     fn resolve_expr(&mut self, expr: &'ast Expr, parent: Option<&'ast Expr>) {\n         // First, record candidate traits for this expression if it could\n         // result in the invocation of a method call.\n@@ -2322,6 +2370,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ExprKind::Async(..) | ExprKind::Closure(..) => {\n                 self.with_label_rib(ClosureOrAsyncRibKind, |this| visit::walk_expr(this, expr));\n             }\n+            ExprKind::Repeat(ref elem, ref ct) => {\n+                self.visit_expr(elem);\n+                self.resolve_anon_const(ct, IsRepeatExpr::Yes);\n+            }\n             _ => {\n                 visit::walk_expr(self, expr);\n             }"}, {"sha": "5a9fd902c9ca125fb51b839bd7eb5959d524015e", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -92,6 +92,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 doc_comment! {\n                     concat!(\n \"Converts a `\", stringify!($Ty), \"` into an `\", stringify!($Int), \"`\"),\n+                    #[inline]\n                     fn from(nonzero: $Ty) -> Self {\n                         nonzero.0\n                     }"}, {"sha": "8a75c1d6058da2eb7044af40e48271852e54abb0", "filename": "library/std/src/path.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -446,7 +446,7 @@ impl Hash for PrefixComponent<'_> {\n /// (`/` or `\\`).\n ///\n /// This `enum` is created by iterating over [`Components`], which in turn is\n-/// created by the [`components`][`Path::components`] method on [`Path`].\n+/// created by the [`components`](Path::components) method on [`Path`].\n ///\n /// # Examples\n ///\n@@ -1319,7 +1319,7 @@ impl PathBuf {\n         self.inner\n     }\n \n-    /// Converts this `PathBuf` into a [boxed][`Box`] [`Path`].\n+    /// Converts this `PathBuf` into a [boxed](Box) [`Path`].\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n     pub fn into_boxed_path(self) -> Box<Path> {\n         let rw = Box::into_raw(self.inner.into_boxed_os_str()) as *mut Path;\n@@ -1686,8 +1686,7 @@ pub struct Path {\n     inner: OsStr,\n }\n \n-/// An error returned from [`Path::strip_prefix`][`strip_prefix`] if the prefix\n-/// was not found.\n+/// An error returned from [`Path::strip_prefix`] if the prefix was not found.\n ///\n /// This `struct` is created by the [`strip_prefix`] method on [`Path`].\n /// See its documentation for more.\n@@ -2470,7 +2469,7 @@ impl Path {\n         fs::metadata(self).map(|m| m.is_dir()).unwrap_or(false)\n     }\n \n-    /// Converts a [`Box<Path>`][`Box`] into a [`PathBuf`] without copying or\n+    /// Converts a [`Box<Path>`](Box) into a [`PathBuf`] without copying or\n     /// allocating.\n     #[stable(feature = \"into_boxed_path\", since = \"1.20.0\")]\n     pub fn into_path_buf(self: Box<Path>) -> PathBuf {\n@@ -2498,7 +2497,7 @@ impl fmt::Debug for Path {\n ///\n /// A [`Path`] might contain non-Unicode data. This `struct` implements the\n /// [`Display`] trait in a way that mitigates that. It is created by the\n-/// [`display`][`Path::display`] method on [`Path`].\n+/// [`display`](Path::display) method on [`Path`].\n ///\n /// # Examples\n ///"}, {"sha": "13e1c05420bca86ecc79e4ba5b6d02de9bd53c62", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1 +1 @@\n-Subproject commit 451a1e30f2dd137aa04e142414eafb8d05f87f84\n+Subproject commit 13e1c05420bca86ecc79e4ba5b6d02de9bd53c62"}, {"sha": "7bc9b7a5e800f79df62947cb7d566fd2fbaf19fe", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1 +1 @@\n-Subproject commit 81f16863014de60b53de401d71ff904d163ee030\n+Subproject commit 7bc9b7a5e800f79df62947cb7d566fd2fbaf19fe"}, {"sha": "69333eddb1de92fd17e272ce4677cc983d3bd71d", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1 +1 @@\n-Subproject commit 6e57e64501f61873ab80cb78a07180a22751a5d6\n+Subproject commit 69333eddb1de92fd17e272ce4677cc983d3bd71d"}, {"sha": "10c16caebe475d0d11bec0531b95d7697856c13c", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1 +1 @@\n-Subproject commit 1b78182e71709169dc0f1c3acdc4541b6860e1c4\n+Subproject commit 10c16caebe475d0d11bec0531b95d7697856c13c"}, {"sha": "99eafee0cb14e6ec641bf02a69d7b30f6058349a", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1 +1 @@\n-Subproject commit 152475937a8d8a1f508d8eeb57db79139bc803d9\n+Subproject commit 99eafee0cb14e6ec641bf02a69d7b30f6058349a"}, {"sha": "b43070510413ab5d89a471176f82ea7e221fd10c", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -348,7 +348,7 @@ Using this flag looks like this:\n $ rustdoc src/lib.rs -Z unstable-options --enable-per-target-ignores\n ```\n \n-This flag allows you to tag doctests with compiltest style `ignore-foo` filters that prevent\n+This flag allows you to tag doctests with compiletest style `ignore-foo` filters that prevent\n rustdoc from running that test if the target triple string contains foo. For example:\n \n ```rust"}, {"sha": "02885f519363c1b0b06ec735eb1f0f48eca3a205", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1,4 +1,4 @@\n-use std::collections::BTreeMap;\n+use std::collections::{BTreeMap, HashMap};\n use std::convert::TryFrom;\n use std::ffi::OsStr;\n use std::fmt;\n@@ -216,6 +216,9 @@ pub struct RenderOptions {\n     pub extension_css: Option<PathBuf>,\n     /// A map of crate names to the URL to use instead of querying the crate's `html_root_url`.\n     pub extern_html_root_urls: BTreeMap<String, String>,\n+    /// A map of the default settings (values are as for DOM storage API). Keys should lack the\n+    /// `rustdoc-` prefix.\n+    pub default_settings: HashMap<String, String>,\n     /// If present, suffix added to CSS/JavaScript files when referencing them in generated pages.\n     pub resource_suffix: String,\n     /// Whether to run the static CSS/JavaScript through a minifier when outputting them. `true` by\n@@ -374,6 +377,32 @@ impl Options {\n             }\n         };\n \n+        let default_settings: Vec<Vec<(String, String)>> = vec![\n+            matches\n+                .opt_str(\"default-theme\")\n+                .iter()\n+                .map(|theme| {\n+                    vec![\n+                        (\"use-system-theme\".to_string(), \"false\".to_string()),\n+                        (\"theme\".to_string(), theme.to_string()),\n+                    ]\n+                })\n+                .flatten()\n+                .collect(),\n+            matches\n+                .opt_strs(\"default-setting\")\n+                .iter()\n+                .map(|s| {\n+                    let mut kv = s.splitn(2, '=');\n+                    // never panics because `splitn` always returns at least one element\n+                    let k = kv.next().unwrap().to_string();\n+                    let v = kv.next().unwrap_or(\"true\").to_string();\n+                    (k, v)\n+                })\n+                .collect(),\n+        ];\n+        let default_settings = default_settings.into_iter().flatten().collect();\n+\n         let test_args = matches.opt_strs(\"test-args\");\n         let test_args: Vec<String> =\n             test_args.iter().flat_map(|s| s.split_whitespace()).map(|s| s.to_string()).collect();\n@@ -596,6 +625,7 @@ impl Options {\n                 themes,\n                 extension_css,\n                 extern_html_root_urls,\n+                default_settings,\n                 resource_suffix,\n                 enable_minification,\n                 enable_index_page,"}, {"sha": "b089bcb0862a54bbb944398ebcdcea1a6b9422f1", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1,3 +1,4 @@\n+use std::collections::HashMap;\n use std::path::PathBuf;\n \n use crate::externalfiles::ExternalHtml;\n@@ -10,6 +11,7 @@ pub struct Layout {\n     pub logo: String,\n     pub favicon: String,\n     pub external_html: ExternalHtml,\n+    pub default_settings: HashMap<String, String>,\n     pub krate: String,\n     /// The given user css file which allow to customize the generated\n     /// documentation theme.\n@@ -53,6 +55,7 @@ pub fn render<T: Print, S: Print>(\n     <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{static_root_path}rustdoc{suffix}.css\\\" \\\n           id=\\\"mainThemeStyle\\\">\\\n     {style_files}\\\n+    <script id=\\\"default-settings\\\"{default_settings}></script>\\\n     <script src=\\\"{static_root_path}storage{suffix}.js\\\"></script>\\\n     <noscript><link rel=\\\"stylesheet\\\" href=\\\"{static_root_path}noscript{suffix}.css\\\"></noscript>\\\n     {css_extension}\\\n@@ -172,6 +175,11 @@ pub fn render<T: Print, S: Print>(\n         after_content = layout.external_html.after_content,\n         sidebar = Buffer::html().to_display(sidebar),\n         krate = layout.krate,\n+        default_settings = layout\n+            .default_settings\n+            .iter()\n+            .map(|(k, v)| format!(r#\" data-{}=\"{}\"\"#, k.replace('-', \"_\"), Escape(v)))\n+            .collect::<String>(),\n         style_files = style_files\n             .iter()\n             .filter_map(|t| {"}, {"sha": "ca8b811681cc9c9c60a4da433477b3450e056100", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1228,6 +1228,7 @@ fn init_id_map() -> FxHashMap<String, usize> {\n     map.insert(\"render-detail\".to_owned(), 1);\n     map.insert(\"toggle-all-docs\".to_owned(), 1);\n     map.insert(\"all-types\".to_owned(), 1);\n+    map.insert(\"default-settings\".to_owned(), 1);\n     // This is the list of IDs used by rustdoc sections.\n     map.insert(\"fields\".to_owned(), 1);\n     map.insert(\"variants\".to_owned(), 1);"}, {"sha": "0621eafd913474a5ff1181cc848621caf3aa5345", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -392,6 +392,7 @@ impl FormatRenderer for Context {\n             playground_url,\n             sort_modules_alphabetically,\n             themes: style_files,\n+            default_settings,\n             extension_css,\n             resource_suffix,\n             static_root_path,\n@@ -415,6 +416,7 @@ impl FormatRenderer for Context {\n             logo: String::new(),\n             favicon: String::new(),\n             external_html,\n+            default_settings,\n             krate: krate.name.clone(),\n             css_file_extension: extension_css,\n             generate_search_filter,"}, {"sha": "28bd1ba5247d600858c77bff1c08889fa271480c", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -89,7 +89,7 @@ function defocusSearchBar() {\n                      \"derive\",\n                      \"traitalias\"];\n \n-    var disableShortcuts = getCurrentValue(\"rustdoc-disable-shortcuts\") === \"true\";\n+    var disableShortcuts = getSettingValue(\"disable-shortcuts\") === \"true\";\n     var search_input = getSearchInput();\n     var searchTimeout = null;\n     var toggleAllDocsId = \"toggle-all-docs\";\n@@ -1580,7 +1580,7 @@ function defocusSearchBar() {\n         function showResults(results) {\n             var search = getSearchElement();\n             if (results.others.length === 1\n-                && getCurrentValue(\"rustdoc-go-to-only-result\") === \"true\"\n+                && getSettingValue(\"go-to-only-result\") === \"true\"\n                 // By default, the search DOM element is \"empty\" (meaning it has no children not\n                 // text content). Once a search has been run, it won't be empty, even if you press\n                 // ESC or empty the search input (which also \"cancels\" the search).\n@@ -2296,7 +2296,7 @@ function defocusSearchBar() {\n     function autoCollapse(pageId, collapse) {\n         if (collapse) {\n             toggleAllDocs(pageId, true);\n-        } else if (getCurrentValue(\"rustdoc-auto-hide-trait-implementations\") !== \"false\") {\n+        } else if (getSettingValue(\"auto-hide-trait-implementations\") !== \"false\") {\n             var impl_list = document.getElementById(\"trait-implementations-list\");\n \n             if (impl_list !== null) {\n@@ -2370,8 +2370,8 @@ function defocusSearchBar() {\n         }\n \n         var toggle = createSimpleToggle(false);\n-        var hideMethodDocs = getCurrentValue(\"rustdoc-auto-hide-method-docs\") === \"true\";\n-        var hideImplementors = getCurrentValue(\"rustdoc-auto-collapse-implementors\") !== \"false\";\n+        var hideMethodDocs = getSettingValue(\"auto-hide-method-docs\") === \"true\";\n+        var hideImplementors = getSettingValue(\"auto-collapse-implementors\") !== \"false\";\n         var pageId = getPageId();\n \n         var func = function(e) {\n@@ -2487,15 +2487,15 @@ function defocusSearchBar() {\n                 });\n             }\n         }\n-        var showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-\" + className);\n+        var showItemDeclarations = getSettingValue(\"auto-hide-\" + className);\n         if (showItemDeclarations === null) {\n             if (className === \"enum\" || className === \"macro\") {\n                 showItemDeclarations = \"false\";\n             } else if (className === \"struct\" || className === \"union\" || className === \"trait\") {\n                 showItemDeclarations = \"true\";\n             } else {\n                 // In case we found an unknown type, we just use the \"parent\" value.\n-                showItemDeclarations = getCurrentValue(\"rustdoc-auto-hide-declarations\");\n+                showItemDeclarations = getSettingValue(\"auto-hide-declarations\");\n             }\n         }\n         showItemDeclarations = showItemDeclarations === \"false\";\n@@ -2569,7 +2569,7 @@ function defocusSearchBar() {\n         onEachLazy(document.getElementsByClassName(\"sub-variant\"), buildToggleWrapper);\n         var pageId = getPageId();\n \n-        autoCollapse(pageId, getCurrentValue(\"rustdoc-collapse\") === \"true\");\n+        autoCollapse(pageId, getSettingValue(\"collapse\") === \"true\");\n \n         if (pageId !== null) {\n             expandSection(pageId);\n@@ -2592,7 +2592,7 @@ function defocusSearchBar() {\n     (function() {\n         // To avoid checking on \"rustdoc-item-attributes\" value on every loop...\n         var itemAttributesFunc = function() {};\n-        if (getCurrentValue(\"rustdoc-auto-hide-attributes\") !== \"false\") {\n+        if (getSettingValue(\"auto-hide-attributes\") !== \"false\") {\n             itemAttributesFunc = function(x) {\n                 collapseDocs(x.previousSibling.childNodes[0], \"toggle\");\n             };\n@@ -2611,7 +2611,7 @@ function defocusSearchBar() {\n     (function() {\n         // To avoid checking on \"rustdoc-line-numbers\" value on every loop...\n         var lineNumbersFunc = function() {};\n-        if (getCurrentValue(\"rustdoc-line-numbers\") === \"true\") {\n+        if (getSettingValue(\"line-numbers\") === \"true\") {\n             lineNumbersFunc = function(x) {\n                 var count = x.textContent.split(\"\\n\").length;\n                 var elems = [];\n@@ -2768,7 +2768,7 @@ function defocusSearchBar() {\n             }\n             return 0;\n         });\n-        var savedCrate = getCurrentValue(\"rustdoc-saved-filter-crate\");\n+        var savedCrate = getSettingValue(\"saved-filter-crate\");\n         for (var i = 0; i < crates_text.length; ++i) {\n             var option = document.createElement(\"option\");\n             option.value = crates_text[i];"}, {"sha": "da3378ccf0dd06f128ccdd11116fa427ff08622f", "filename": "src/librustdoc/html/static/settings.js", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fsettings.js?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -14,10 +14,6 @@\n         }\n     }\n \n-    function getSettingValue(settingName) {\n-        return getCurrentValue(\"rustdoc-\" + settingName);\n-    }\n-\n     function setEvents() {\n         var elems = {\n             toggles: document.getElementsByClassName(\"slider\"),"}, {"sha": "d081781f14be15b8fba7e86ca367c87c2365b405", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1,10 +1,37 @@\n // From rust:\n-/* global resourcesSuffix */\n+/* global resourcesSuffix, getSettingValue */\n \n var darkThemes = [\"dark\", \"ayu\"];\n var currentTheme = document.getElementById(\"themeStyle\");\n var mainTheme = document.getElementById(\"mainThemeStyle\");\n-var localStoredTheme = getCurrentValue(\"rustdoc-theme\");\n+\n+var settingsDataset = (function () {\n+    var settingsElement = document.getElementById(\"default-settings\");\n+    if (settingsElement === null) {\n+        return null;\n+    }\n+    var dataset = settingsElement.dataset;\n+    if (dataset === undefined) {\n+        return null;\n+    }\n+    return dataset;\n+})();\n+\n+function getSettingValue(settingName) {\n+    var current = getCurrentValue('rustdoc-' + settingName);\n+    if (current !== null) {\n+        return current;\n+    }\n+    if (settingsDataset !== null) {\n+        var def = settingsDataset[settingName.replace(/-/g,'_')];\n+        if (def !== undefined) {\n+            return def;\n+        }\n+    }\n+    return null;\n+}\n+\n+var localStoredTheme = getSettingValue(\"theme\");\n \n var savedHref = [];\n \n@@ -156,9 +183,9 @@ var updateSystemTheme = (function() {\n \n     function handlePreferenceChange(mql) {\n         // maybe the user has disabled the setting in the meantime!\n-        if (getCurrentValue(\"rustdoc-use-system-theme\") !== \"false\") {\n-            var lightTheme = getCurrentValue(\"rustdoc-preferred-light-theme\") || \"light\";\n-            var darkTheme = getCurrentValue(\"rustdoc-preferred-dark-theme\") || \"dark\";\n+        if (getSettingValue(\"use-system-theme\") !== \"false\") {\n+            var lightTheme = getSettingValue(\"preferred-light-theme\") || \"light\";\n+            var darkTheme = getSettingValue(\"preferred-dark-theme\") || \"dark\";\n \n             if (mql.matches) {\n                 // prefers a dark theme\n@@ -181,11 +208,11 @@ var updateSystemTheme = (function() {\n     };\n })();\n \n-if (getCurrentValue(\"rustdoc-use-system-theme\") !== \"false\" && window.matchMedia) {\n+if (getSettingValue(\"use-system-theme\") !== \"false\" && window.matchMedia) {\n     // update the preferred dark theme if the user is already using a dark theme\n     // See https://github.com/rust-lang/rust/pull/77809#issuecomment-707875732\n-    if (getCurrentValue(\"rustdoc-use-system-theme\") === null\n-        && getCurrentValue(\"rustdoc-preferred-dark-theme\") === null\n+    if (getSettingValue(\"use-system-theme\") === null\n+        && getSettingValue(\"preferred-dark-theme\") === null\n         && darkThemes.indexOf(localStoredTheme) >= 0) {\n         updateLocalStorage(\"rustdoc-preferred-dark-theme\", localStoredTheme);\n     }\n@@ -196,7 +223,7 @@ if (getCurrentValue(\"rustdoc-use-system-theme\") !== \"false\" && window.matchMedia\n     switchTheme(\n         currentTheme,\n         mainTheme,\n-        getCurrentValue(\"rustdoc-theme\") || \"light\",\n+        getSettingValue(\"theme\") || \"light\",\n         false\n     );\n }"}, {"sha": "7efbca5c6c3b7c4df7d3275fd99917f107909f48", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -269,6 +269,26 @@ fn opts() -> Vec<RustcOptGroup> {\n                 \"sort modules by where they appear in the program, rather than alphabetically\",\n             )\n         }),\n+        unstable(\"default-theme\", |o| {\n+            o.optopt(\n+                \"\",\n+                \"default-theme\",\n+                \"Set the default theme. THEME should be the theme name, generally lowercase. \\\n+                 If an unknown default theme is specified, the builtin default is used. \\\n+                 The set of themes, and the rustdoc built-in default is not stable.\",\n+                \"THEME\",\n+            )\n+        }),\n+        unstable(\"default-setting\", |o| {\n+            o.optmulti(\n+                \"\",\n+                \"default-setting\",\n+                \"Default value for a rustdoc setting (used when \\\"rustdoc-SETTING\\\" is absent \\\n+                 from web browser Local Storage). If VALUE is not supplied, \\\"true\\\" is used. \\\n+                 Supported SETTINGs and VALUEs are not documented and not stable.\",\n+                \"SETTING[=VALUE]\",\n+            )\n+        }),\n         stable(\"theme\", |o| {\n             o.optmulti(\n                 \"\","}, {"sha": "0295255d8099cd63b70b210be853f637fe0c18cd", "filename": "src/test/ui/const-generics/dyn-supertraits.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdyn-supertraits.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -0,0 +1,85 @@\n+// run-pass\n+// revisions: full min\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+#![cfg_attr(min, feature(min_const_generics))]\n+\n+trait Foo<const N: usize> {\n+    fn myfun(&self) -> usize;\n+}\n+trait Bar<const N: usize> : Foo<N> {}\n+trait Baz: Foo<3> {}\n+\n+struct FooType<const N: usize>;\n+struct BarType<const N: usize>;\n+struct BazType;\n+\n+impl<const N: usize> Foo<N> for FooType<N> {\n+    fn myfun(&self) -> usize { N }\n+}\n+impl<const N: usize> Foo<N> for BarType<N> {\n+    fn myfun(&self) -> usize { N + 1 }\n+}\n+impl<const N: usize> Bar<N> for BarType<N> {}\n+impl Foo<3> for BazType {\n+    fn myfun(&self) -> usize { 999 }\n+}\n+impl Baz for BazType {}\n+\n+trait Foz {}\n+trait Boz: Foo<3> + Foz {}\n+trait Bok<const N: usize>: Foo<N> + Foz {}\n+\n+struct FozType;\n+struct BozType;\n+struct BokType<const N: usize>;\n+\n+impl Foz for FozType {}\n+\n+impl Foz for BozType {}\n+impl Foo<3> for BozType {\n+    fn myfun(&self) -> usize { 9999 }\n+}\n+impl Boz for BozType {}\n+\n+impl<const N: usize> Foz for BokType<N> {}\n+impl<const N: usize> Foo<N> for BokType<N> {\n+    fn myfun(&self) -> usize { N + 2 }\n+}\n+impl<const N: usize> Bok<N> for BokType<N> {}\n+\n+fn a<const N: usize>(x: &dyn Foo<N>) -> usize { x.myfun() }\n+fn b(x: &dyn Foo<3>) -> usize { x.myfun() }\n+fn c<T: Bok<N>, const N: usize>(x: T) -> usize { a::<N>(&x) }\n+fn d<T: ?Sized + Foo<3>>(x: &T) -> usize { x.myfun() }\n+fn e(x: &dyn Bar<3>) -> usize { d(x) }\n+\n+fn main() {\n+    let foo = FooType::<3> {};\n+    assert!(a(&foo) == 3);\n+    assert!(b(&foo) == 3);\n+    assert!(d(&foo) == 3);\n+\n+    let bar = BarType::<3> {};\n+    assert!(a(&bar) == 4);\n+    assert!(b(&bar) == 4);\n+    assert!(d(&bar) == 4);\n+    assert!(e(&bar) == 4);\n+\n+    let baz = BazType {};\n+    assert!(a(&baz) == 999);\n+    assert!(b(&baz) == 999);\n+    assert!(d(&baz) == 999);\n+\n+    let boz = BozType {};\n+    assert!(a(&boz) == 9999);\n+    assert!(b(&boz) == 9999);\n+    assert!(d(&boz) == 9999);\n+\n+    let bok = BokType::<3> {};\n+    assert!(a(&bok) == 5);\n+    assert!(b(&bok) == 5);\n+    assert!(d(&bok) == 5);\n+    assert!(c(BokType::<3> {}) == 5);\n+}"}, {"sha": "865eaf749326764fd36b94e16d68d45600451d99", "filename": "src/test/ui/const-generics/issues/issue-62504.min.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.min.stderr?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1,14 +1,20 @@\n-error: generic `Self` types are currently not permitted in anonymous constants\n+error[E0308]: mismatched types\n+  --> $DIR/issue-62504.rs:19:21\n+   |\n+LL |         ArrayHolder([0; Self::SIZE])\n+   |                     ^^^^^^^^^^^^^^^ expected `X`, found `Self::SIZE`\n+   |\n+   = note: expected array `[u32; X]`\n+              found array `[u32; _]`\n+\n+error: constant expression depends on a generic parameter\n   --> $DIR/issue-62504.rs:19:25\n    |\n LL |         ArrayHolder([0; Self::SIZE])\n    |                         ^^^^^^^^^^\n    |\n-note: not a concrete type\n-  --> $DIR/issue-62504.rs:17:22\n-   |\n-LL | impl<const X: usize> ArrayHolder<X> {\n-   |                      ^^^^^^^^^^^^^^\n+   = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5630962ff53767ca8ff9b156640b464fbb9c5b90", "filename": "src/test/ui/const-generics/issues/issue-62504.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -17,8 +17,8 @@ struct ArrayHolder<const X: usize>([u32; X]);\n impl<const X: usize> ArrayHolder<X> {\n     pub const fn new() -> Self {\n         ArrayHolder([0; Self::SIZE])\n-        //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic `Self` types are currently\n+        //~^ ERROR constant expression depends on a generic parameter\n+        //[min]~| ERROR mismatched types\n     }\n }\n "}, {"sha": "27a56b8eb02b2a0692f28bf6042155c77320600f", "filename": "src/test/ui/const-generics/issues/issue-67739.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters may not be used in const operations\n-  --> $DIR/issue-67739.rs:12:30\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-67739.rs:12:15\n    |\n LL |         [0u8; mem::size_of::<Self::Associated>()];\n-   |                              ^^^^^^^^^^^^^^^^ cannot perform const operation using `Self`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: type parameters may not be used in const expressions\n+   = note: this may fail depending on what value the parameter takes\n \n error: aborting due to previous error\n "}, {"sha": "0f5860f22fdd34310f6132bda694682531ac76fe", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -10,8 +10,7 @@ pub trait Trait {\n \n     fn associated_size(&self) -> usize {\n         [0u8; mem::size_of::<Self::Associated>()];\n-        //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic parameters may not be used in const operations\n+        //~^ ERROR constant expression depends on a generic parameter\n         0\n     }\n }"}, {"sha": "686ce98fcdff3f88f4a2a50a4ef7ee5e947067e4", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1,5 +1,7 @@\n #![feature(min_const_generics)]\n \n+use std::mem::size_of;\n+\n fn test<const N: usize>() {}\n \n fn ok<const M: usize>() -> [u8; M] {\n@@ -22,6 +24,24 @@ fn break3<const N: usize>() {\n     //~^ ERROR generic parameters may not be used in const operations\n }\n \n+struct BreakTy0<T>(T, [u8; { size_of::<*mut T>() }]);\n+//~^ ERROR generic parameters may not be used in const operations\n+\n+struct BreakTy1<T>(T, [u8; { { size_of::<*mut T>() } }]);\n+//~^ ERROR generic parameters may not be used in const operations\n+\n+fn break_ty2<T>() {\n+    let _: [u8; size_of::<*mut T>() + 1];\n+    //~^ ERROR generic parameters may not be used in const operations\n+}\n+\n+fn break_ty3<T>() {\n+    let _ = [0; size_of::<*mut T>() + 1];\n+    //~^ WARN cannot use constants which depend on generic parameters in types\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+}\n+\n+\n trait Foo {\n     const ASSOC: usize;\n }"}, {"sha": "a8de987e1675ed2f2939c0a71a17f29c188be6e6", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -1,34 +1,68 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:9:38\n+  --> $DIR/complex-expression.rs:11:38\n    |\n LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n    |                                      ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:12:40\n+  --> $DIR/complex-expression.rs:14:40\n    |\n LL | struct Break1<const N: usize>([u8; { { N } }]);\n    |                                        ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:16:17\n+  --> $DIR/complex-expression.rs:18:17\n    |\n LL |     let _: [u8; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:21:17\n+  --> $DIR/complex-expression.rs:23:17\n    |\n LL |     let _ = [0; N + 1];\n    |                 ^ cannot perform const operation using `N`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `N`\n \n-error: aborting due to 4 previous errors\n+error: generic parameters may not be used in const operations\n+  --> $DIR/complex-expression.rs:27:45\n+   |\n+LL | struct BreakTy0<T>(T, [u8; { size_of::<*mut T>() }]);\n+   |                                             ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/complex-expression.rs:30:47\n+   |\n+LL | struct BreakTy1<T>(T, [u8; { { size_of::<*mut T>() } }]);\n+   |                                               ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/complex-expression.rs:34:32\n+   |\n+LL |     let _: [u8; size_of::<*mut T>() + 1];\n+   |                                ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/complex-expression.rs:39:17\n+   |\n+LL |     let _ = [0; size_of::<*mut T>() + 1];\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+error: aborting due to 7 previous errors; 1 warning emitted\n "}, {"sha": "dd82be33a8e80b7be29d5c4c1da7641f28bcd49d", "filename": "src/test/ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+#![feature(min_const_generics)]\n+#![allow(dead_code)]\n+\n+fn foo<T>() {\n+    [0; std::mem::size_of::<*mut T>()];\n+    //~^ WARN cannot use constants which depend on generic parameters in types\n+    //~| WARN this was previously accepted by the compiler but is being phased out\n+}\n+\n+struct Foo<T>(T);\n+\n+impl<T> Foo<T> {\n+    const ASSOC: usize = 4;\n+\n+    fn test() {\n+        let _ = [0; Self::ASSOC];\n+        //~^ WARN cannot use constants which depend on generic parameters in types\n+        //~| WARN this was previously accepted by the compiler but is being phased out\n+    }\n+}\n+\n+struct Bar<const N: usize>;\n+\n+impl<const N: usize> Bar<N> {\n+    const ASSOC: usize = 4;\n+\n+    fn test() {\n+        let _ = [0; Self::ASSOC];\n+        //~^ WARN cannot use constants which depend on generic parameters in types\n+        //~| WARN this was previously accepted by the compiler but is being phased out\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4d0cab012f99e1fef4c9ab31b4c6422d4dfa89d0", "filename": "src/test/ui/const-generics/min_const_generics/const-evaluatable-unchecked.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -0,0 +1,30 @@\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/const-evaluatable-unchecked.rs:6:9\n+   |\n+LL |     [0; std::mem::size_of::<*mut T>()];\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(const_evaluatable_unchecked)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/const-evaluatable-unchecked.rs:17:21\n+   |\n+LL |         let _ = [0; Self::ASSOC];\n+   |                     ^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/const-evaluatable-unchecked.rs:29:21\n+   |\n+LL |         let _ = [0; Self::ASSOC];\n+   |                     ^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+warning: 3 warnings emitted\n+"}, {"sha": "13742238a201aa47a48d000dd9e58c56fc4a8fa9", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces-without-turbofish.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces-without-turbofish.stderr?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -4,7 +4,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR + 3>();\n    |        ^       ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR + 3>();\n    |        ^^\n@@ -15,7 +15,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR + BAR>();\n    |        ^         ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR + BAR>();\n    |        ^^\n@@ -26,7 +26,7 @@ error: comparison operators cannot be chained\n LL |     foo<3 + 3>();\n    |        ^     ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<3 + 3>();\n    |        ^^\n@@ -37,7 +37,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - 3>();\n    |        ^       ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR - 3>();\n    |        ^^\n@@ -48,7 +48,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - BAR>();\n    |        ^         ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR - BAR>();\n    |        ^^\n@@ -59,7 +59,7 @@ error: comparison operators cannot be chained\n LL |     foo<100 - BAR>();\n    |        ^         ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<100 - BAR>();\n    |        ^^\n@@ -70,7 +70,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar<i32>()>();\n    |        ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<bar<i32>()>();\n    |        ^^\n@@ -87,7 +87,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar::<i32>()>();\n    |        ^            ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<bar::<i32>()>();\n    |        ^^\n@@ -98,7 +98,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar::<i32>() + BAR>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<bar::<i32>() + BAR>();\n    |        ^^\n@@ -109,7 +109,7 @@ error: comparison operators cannot be chained\n LL |     foo<bar::<i32>() - BAR>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<bar::<i32>() - BAR>();\n    |        ^^\n@@ -120,7 +120,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - bar::<i32>()>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |        ^^\n@@ -131,7 +131,7 @@ error: comparison operators cannot be chained\n LL |     foo<BAR - bar::<i32>()>();\n    |        ^                  ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     foo::<BAR - bar::<i32>()>();\n    |        ^^"}, {"sha": "e59b97922bea131e931791cbff303f0bdd21c185", "filename": "src/test/ui/const-generics/min_const_generics/invalid-patterns.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finvalid-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finvalid-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finvalid-patterns.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -0,0 +1,45 @@\n+#![feature(min_const_generics)]\n+use std::mem::transmute;\n+\n+fn get_flag<const FlagSet: bool, const ShortName: char>() -> Option<char> {\n+  if FlagSet {\n+    Some(ShortName)\n+  } else {\n+    None\n+  }\n+}\n+\n+union CharRaw {\n+  byte: u8,\n+  character: char,\n+}\n+\n+union BoolRaw {\n+  byte: u8,\n+  boolean: bool,\n+}\n+\n+const char_raw: CharRaw = CharRaw { byte: 0xFF };\n+const bool_raw: BoolRaw = BoolRaw { byte: 0x42 };\n+\n+fn main() {\n+  // Test that basic cases don't work\n+  assert!(get_flag::<true, 'c'>().is_some());\n+  assert!(get_flag::<false, 'x'>().is_none());\n+  get_flag::<false, 0xFF>();\n+  //~^ ERROR mismatched types\n+  get_flag::<7, 'c'>();\n+  //~^ ERROR mismatched types\n+  get_flag::<42, 0x5ad>();\n+  //~^ ERROR mismatched types\n+  //~| ERROR mismatched types\n+\n+\n+  get_flag::<false, { unsafe { char_raw.character } }>();\n+  //~^ ERROR it is undefined behavior\n+  get_flag::<{ unsafe { bool_raw.boolean } }, 'z'>();\n+  //~^ ERROR it is undefined behavior\n+  get_flag::<{ unsafe { bool_raw.boolean } }, { unsafe { char_raw.character } }>();\n+  //~^ ERROR it is undefined behavior\n+  //~| ERROR it is undefined behavior\n+}"}, {"sha": "a3157c6b5644d12f747d55bea5923fcccb66d2cf", "filename": "src/test/ui/const-generics/min_const_generics/invalid-patterns.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finvalid-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finvalid-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finvalid-patterns.stderr?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -0,0 +1,60 @@\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-patterns.rs:29:21\n+   |\n+LL |   get_flag::<false, 0xFF>();\n+   |                     ^^^^ expected `char`, found `u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-patterns.rs:31:14\n+   |\n+LL |   get_flag::<7, 'c'>();\n+   |              ^ expected `bool`, found integer\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-patterns.rs:33:14\n+   |\n+LL |   get_flag::<42, 0x5ad>();\n+   |              ^^ expected `bool`, found integer\n+\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-patterns.rs:33:18\n+   |\n+LL |   get_flag::<42, 0x5ad>();\n+   |                  ^^^^^ expected `char`, found `u8`\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/invalid-patterns.rs:38:21\n+   |\n+LL |   get_flag::<false, { unsafe { char_raw.character } }>();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/invalid-patterns.rs:40:14\n+   |\n+LL |   get_flag::<{ unsafe { bool_raw.boolean } }, 'z'>();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x42, but expected a boolean\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/invalid-patterns.rs:42:14\n+   |\n+LL |   get_flag::<{ unsafe { bool_raw.boolean } }, { unsafe { char_raw.character } }>();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0x42, but expected a boolean\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/invalid-patterns.rs:42:47\n+   |\n+LL |   get_flag::<{ unsafe { bool_raw.boolean } }, { unsafe { char_raw.character } }>();\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0080, E0308.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "2c2978d2bff2d8ad27d2240d9816e9372ad952ab", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -4,7 +4,7 @@ error: comparison operators cannot be chained\n LL |     (0..13).collect<Vec<i32>>();\n    |                    ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     (0..13).collect::<Vec<i32>>();\n    |                    ^^\n@@ -15,7 +15,7 @@ error: comparison operators cannot be chained\n LL |     Vec<i32>::new();\n    |        ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     Vec::<i32>::new();\n    |        ^^\n@@ -26,7 +26,7 @@ error: comparison operators cannot be chained\n LL |     (0..13).collect<Vec<i32>();\n    |                    ^   ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     (0..13).collect::<Vec<i32>();\n    |                    ^^\n@@ -37,7 +37,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, or an operator, found `,`\n LL |     let x = std::collections::HashMap<i128, i128>::new();\n    |                                           ^ expected one of 7 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     let x = std::collections::HashMap::<i128, i128>::new();\n    |                                      ^^\n@@ -48,7 +48,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |         std::collections::HashMap<i128, i128>::new()\n    |                                       ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new()\n    |                                  ^^\n@@ -59,7 +59,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |         std::collections::HashMap<i128, i128>::new();\n    |                                       ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new();\n    |                                  ^^\n@@ -70,7 +70,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |         std::collections::HashMap<i128, i128>::new(1, 2);\n    |                                       ^ expected one of 8 possible tokens\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |         std::collections::HashMap::<i128, i128>::new(1, 2);\n    |                                  ^^"}, {"sha": "e3ce6cd39bc24f1199612d4daae23d0ca5692f3e", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -12,15 +12,15 @@ fn main() {\n \n     f<X>();\n     //~^ ERROR comparison operators cannot be chained\n-    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify type or const arguments\n \n     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n     //~^ ERROR comparison operators cannot be chained\n-    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify type or const arguments\n \n     use std::convert::identity;\n     let _ = identity<u8>;\n     //~^ ERROR comparison operators cannot be chained\n-    //~| HELP use `::<...>` instead of `<...>` to specify type arguments\n+    //~| HELP use `::<...>` instead of `<...>` to specify type or const arguments\n     //~| HELP or use `(...)` if you meant to specify fn arguments\n }"}, {"sha": "afb964c17e255053e3403dc5dbe0c96a4faedaab", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/49720d2b9a0e72772109542dd2d61db70fccc015/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=49720d2b9a0e72772109542dd2d61db70fccc015", "patch": "@@ -26,7 +26,7 @@ error: comparison operators cannot be chained\n LL |     f<X>();\n    |      ^ ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     f::<X>();\n    |      ^^\n@@ -37,7 +37,7 @@ error: comparison operators cannot be chained\n LL |     f<Result<Option<X>, Option<Option<X>>>(1, 2);\n    |      ^      ^\n    |\n-help: use `::<...>` instead of `<...>` to specify type arguments\n+help: use `::<...>` instead of `<...>` to specify type or const arguments\n    |\n LL |     f::<Result<Option<X>, Option<Option<X>>>(1, 2);\n    |      ^^\n@@ -48,7 +48,7 @@ error: comparison operators cannot be chained\n LL |     let _ = identity<u8>;\n    |                     ^  ^\n    |\n-   = help: use `::<...>` instead of `<...>` to specify type arguments\n+   = help: use `::<...>` instead of `<...>` to specify type or const arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error: aborting due to 5 previous errors"}]}