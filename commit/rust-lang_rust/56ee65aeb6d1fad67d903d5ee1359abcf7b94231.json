{"sha": "56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "node_id": "C_kwDOAAsO6NoAKDU2ZWU2NWFlYjZkMWZhZDY3ZDkwM2Q1ZWUxMzU5YWJjZjdiOTQyMzE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-11T23:05:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-11T23:05:58Z"}, "message": "Auto merge of #106743 - matthiaskrgr:rollup-q5dpxms, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #106620 (Detect struct literal needing parentheses)\n - #106622 (Detect out of bounds range pattern value)\n - #106703 (Note predicate span on `ImplDerivedObligation`)\n - #106705 (Report fulfillment errors in new trait solver)\n - #106726 (Fix some typos in code comments.)\n - #106734 (Deny having src/test exisiting in tidy)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2ddda23b3e396ddddfa76f9f282647e3233e0898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ddda23b3e396ddddfa76f9f282647e3233e0898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "html_url": "https://github.com/rust-lang/rust/commit/56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e4f90061cc4bc566f99ab21b1f101182b10cf0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4f90061cc4bc566f99ab21b1f101182b10cf0c", "html_url": "https://github.com/rust-lang/rust/commit/1e4f90061cc4bc566f99ab21b1f101182b10cf0c"}, {"sha": "106df9ec98012c6fbeb0ffe636f5f566333cfaa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/106df9ec98012c6fbeb0ffe636f5f566333cfaa1", "html_url": "https://github.com/rust-lang/rust/commit/106df9ec98012c6fbeb0ffe636f5f566333cfaa1"}], "stats": {"total": 561, "additions": 452, "deletions": 109}, "files": [{"sha": "25dc88c535da9c69c110a27dbf2143e7c7af3f56", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -1098,7 +1098,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     // There are a few environmental pre-conditions that shape how the system\n     // is set up:\n     //\n-    // - Error reporting only can happen on the main thread because that's the\n+    // - Error reporting can only happen on the main thread because that's the\n     //   only place where we have access to the compiler `Session`.\n     // - LLVM work can be done on any thread.\n     // - Codegen can only happen on the main thread.\n@@ -1110,16 +1110,16 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     // Error Reporting\n     // ===============\n     // The error reporting restriction is handled separately from the rest: We\n-    // set up a `SharedEmitter` the holds an open channel to the main thread.\n+    // set up a `SharedEmitter` that holds an open channel to the main thread.\n     // When an error occurs on any thread, the shared emitter will send the\n     // error message to the receiver main thread (`SharedEmitterMain`). The\n     // main thread will periodically query this error message queue and emit\n     // any error messages it has received. It might even abort compilation if\n-    // has received a fatal error. In this case we rely on all other threads\n+    // it has received a fatal error. In this case we rely on all other threads\n     // being torn down automatically with the main thread.\n     // Since the main thread will often be busy doing codegen work, error\n     // reporting will be somewhat delayed, since the message queue can only be\n-    // checked in between to work packages.\n+    // checked in between two work packages.\n     //\n     // Work Processing Infrastructure\n     // ==============================\n@@ -1133,7 +1133,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     // thread about what work to do when, and it will spawn off LLVM worker\n     // threads as open LLVM WorkItems become available.\n     //\n-    // The job of the main thread is to codegen CGUs into LLVM work package\n+    // The job of the main thread is to codegen CGUs into LLVM work packages\n     // (since the main thread is the only thread that can do this). The main\n     // thread will block until it receives a message from the coordinator, upon\n     // which it will codegen one CGU, send it to the coordinator and block\n@@ -1142,10 +1142,10 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     //\n     // The coordinator keeps a queue of LLVM WorkItems, and when a `Token` is\n     // available, it will spawn off a new LLVM worker thread and let it process\n-    // that a WorkItem. When a LLVM worker thread is done with its WorkItem,\n+    // a WorkItem. When a LLVM worker thread is done with its WorkItem,\n     // it will just shut down, which also frees all resources associated with\n     // the given LLVM module, and sends a message to the coordinator that the\n-    // has been completed.\n+    // WorkItem has been completed.\n     //\n     // Work Scheduling\n     // ===============\n@@ -1165,7 +1165,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     //\n     // Doing LLVM Work on the Main Thread\n     // ----------------------------------\n-    // Since the main thread owns the compiler processes implicit `Token`, it is\n+    // Since the main thread owns the compiler process's implicit `Token`, it is\n     // wasteful to keep it blocked without doing any work. Therefore, what we do\n     // in this case is: We spawn off an additional LLVM worker thread that helps\n     // reduce the queue. The work it is doing corresponds to the implicit\n@@ -1216,7 +1216,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     // ------------------------------\n     //\n     // The final job the coordinator thread is responsible for is managing LTO\n-    // and how that works. When LTO is requested what we'll to is collect all\n+    // and how that works. When LTO is requested what we'll do is collect all\n     // optimized LLVM modules into a local vector on the coordinator. Once all\n     // modules have been codegened and optimized we hand this to the `lto`\n     // module for further optimization. The `lto` module will return back a list"}, {"sha": "aacaafeede6956e02b58b4f2ea0331ee5bcf10ea", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -206,6 +206,10 @@ mir_build_lower_range_bound_must_be_less_than_or_equal_to_upper =\n     .label = lower bound larger than upper bound\n     .teach_note = When matching against a range, the compiler verifies that the range is non-empty. Range patterns include both end-points, so this is equivalent to requiring the start of the range to be less than or equal to the end of the range.\n \n+mir_build_literal_in_range_out_of_bounds =\n+    literal out of range for `{$ty}`\n+    .label = this value doesn't fit in `{$ty}` whose maximum value is `{$max}`\n+\n mir_build_lower_range_bound_must_be_less_than_upper = lower range bound must be less than upper\n \n mir_build_leading_irrefutable_let_patterns = leading irrefutable {$count ->"}, {"sha": "f3f00fff230a0a08eccd1db78e2b1659733d8828", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -2,6 +2,10 @@ parse_struct_literal_body_without_path =\n     struct literal body without path\n     .suggestion = you might have forgotten to add the struct literal inside the block\n \n+parse_struct_literal_needing_parens =\n+    invalid struct literal\n+    .suggestion = you might need to surround the struct literal in parentheses\n+\n parse_maybe_report_ambiguous_plus =\n     ambiguous `+` in a type\n     .suggestion = use parentheses to disambiguate"}, {"sha": "233eecbd5b4ecb4a950d132a5196bf42f9bc60bf", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -493,6 +493,16 @@ pub struct LowerRangeBoundMustBeLessThanOrEqualToUpper {\n     pub teach: Option<()>,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(mir_build_literal_in_range_out_of_bounds)]\n+pub struct LiteralOutOfRange<'tcx> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub ty: Ty<'tcx>,\n+    pub max: u128,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(mir_build_lower_range_bound_must_be_less_than_upper, code = \"E0579\")]\n pub struct LowerRangeBoundMustBeLessThanUpper {"}, {"sha": "7d4353c52926d7be6c5cd25c9b4360dbffd3fa02", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 62, "deletions": 6, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -129,10 +129,20 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         hi: mir::ConstantKind<'tcx>,\n         end: RangeEnd,\n         span: Span,\n+        lo_expr: Option<&hir::Expr<'tcx>>,\n+        hi_expr: Option<&hir::Expr<'tcx>>,\n     ) -> PatKind<'tcx> {\n         assert_eq!(lo.ty(), ty);\n         assert_eq!(hi.ty(), ty);\n         let cmp = compare_const_vals(self.tcx, lo, hi, self.param_env);\n+        let max = || {\n+            self.tcx\n+                .layout_of(self.param_env.with_reveal_all_normalized(self.tcx).and(ty))\n+                .ok()\n+                .unwrap()\n+                .size\n+                .unsigned_int_max()\n+        };\n         match (end, cmp) {\n             // `x..y` where `x < y`.\n             // Non-empty because the range includes at least `x`.\n@@ -141,7 +151,27 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             }\n             // `x..y` where `x >= y`. The range is empty => error.\n             (RangeEnd::Excluded, _) => {\n-                self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanUpper { span });\n+                let mut lower_overflow = false;\n+                let mut higher_overflow = false;\n+                if let Some(hir::Expr { kind: hir::ExprKind::Lit(lit), .. }) = lo_expr\n+                    && let rustc_ast::ast::LitKind::Int(val, _) = lit.node\n+                {\n+                    if lo.eval_bits(self.tcx, self.param_env, ty) != val {\n+                        lower_overflow = true;\n+                        self.tcx.sess.emit_err(LiteralOutOfRange { span: lit.span, ty, max: max() });\n+                    }\n+                }\n+                if let Some(hir::Expr { kind: hir::ExprKind::Lit(lit), .. }) = hi_expr\n+                    && let rustc_ast::ast::LitKind::Int(val, _) = lit.node\n+                {\n+                    if hi.eval_bits(self.tcx, self.param_env, ty) != val {\n+                        higher_overflow = true;\n+                        self.tcx.sess.emit_err(LiteralOutOfRange { span: lit.span, ty, max: max() });\n+                    }\n+                }\n+                if !lower_overflow && !higher_overflow {\n+                    self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanUpper { span });\n+                }\n                 PatKind::Wild\n             }\n             // `x..=y` where `x == y`.\n@@ -152,10 +182,34 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             }\n             // `x..=y` where `x > y` hence the range is empty => error.\n             (RangeEnd::Included, _) => {\n-                self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanOrEqualToUpper {\n-                    span,\n-                    teach: if self.tcx.sess.teach(&error_code!(E0030)) { Some(()) } else { None },\n-                });\n+                let mut lower_overflow = false;\n+                let mut higher_overflow = false;\n+                if let Some(hir::Expr { kind: hir::ExprKind::Lit(lit), .. }) = lo_expr\n+                    && let rustc_ast::ast::LitKind::Int(val, _) = lit.node\n+                {\n+                    if lo.eval_bits(self.tcx, self.param_env, ty) != val {\n+                        lower_overflow = true;\n+                        self.tcx.sess.emit_err(LiteralOutOfRange { span: lit.span, ty, max: max() });\n+                    }\n+                }\n+                if let Some(hir::Expr { kind: hir::ExprKind::Lit(lit), .. }) = hi_expr\n+                    && let rustc_ast::ast::LitKind::Int(val, _) = lit.node\n+                {\n+                    if hi.eval_bits(self.tcx, self.param_env, ty) != val {\n+                        higher_overflow = true;\n+                        self.tcx.sess.emit_err(LiteralOutOfRange { span: lit.span, ty, max: max() });\n+                    }\n+                }\n+                if !lower_overflow && !higher_overflow {\n+                    self.tcx.sess.emit_err(LowerRangeBoundMustBeLessThanOrEqualToUpper {\n+                        span,\n+                        teach: if self.tcx.sess.teach(&error_code!(E0030)) {\n+                            Some(())\n+                        } else {\n+                            None\n+                        },\n+                    });\n+                }\n                 PatKind::Wild\n             }\n         }\n@@ -201,7 +255,9 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n \n                 let (lp, hp) = (lo.as_ref().map(|(x, _)| x), hi.as_ref().map(|(x, _)| x));\n                 let mut kind = match self.normalize_range_pattern_ends(ty, lp, hp) {\n-                    Some((lc, hc)) => self.lower_pattern_range(ty, lc, hc, end, lo_span),\n+                    Some((lc, hc)) => {\n+                        self.lower_pattern_range(ty, lc, hc, end, lo_span, lo_expr, hi_expr)\n+                    }\n                     None => {\n                         let msg = &format!(\n                             \"found bad range pattern `{:?}` outside of error recovery\","}, {"sha": "19eeb069a259880645e90bee5f7fa66d275554c5", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -970,6 +970,24 @@ pub(crate) struct StructLiteralBodyWithoutPathSugg {\n     pub after: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parse_struct_literal_needing_parens)]\n+pub(crate) struct StructLiteralNeedingParens {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub sugg: StructLiteralNeedingParensSugg,\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(suggestion, applicability = \"machine-applicable\")]\n+pub(crate) struct StructLiteralNeedingParensSugg {\n+    #[suggestion_part(code = \"(\")]\n+    pub before: Span,\n+    #[suggestion_part(code = \")\")]\n+    pub after: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parse_unmatched_angle_brackets)]\n pub(crate) struct UnmatchedAngleBrackets {"}, {"sha": "4c918c6702ed9b19f3a2ed08af51506c50e17666", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -12,9 +12,10 @@ use crate::errors::{\n     IncorrectAwait, IncorrectSemicolon, IncorrectUseOfAwait, ParenthesesInForHead,\n     ParenthesesInForHeadSugg, PatternMethodParamWithoutBody, QuestionMarkInType,\n     QuestionMarkInTypeSugg, SelfParamNotFirst, StructLiteralBodyWithoutPath,\n-    StructLiteralBodyWithoutPathSugg, SuggEscapeToUseAsIdentifier, SuggRemoveComma,\n-    UnexpectedConstInGenericParam, UnexpectedConstParamDeclaration,\n-    UnexpectedConstParamDeclarationSugg, UnmatchedAngleBrackets, UseEqInstead,\n+    StructLiteralBodyWithoutPathSugg, StructLiteralNeedingParens, StructLiteralNeedingParensSugg,\n+    SuggEscapeToUseAsIdentifier, SuggRemoveComma, UnexpectedConstInGenericParam,\n+    UnexpectedConstParamDeclaration, UnexpectedConstParamDeclarationSugg, UnmatchedAngleBrackets,\n+    UseEqInstead,\n };\n \n use crate::lexer::UnmatchedBrace;\n@@ -623,12 +624,15 @@ impl<'a> Parser<'a> {\n         &mut self,\n         lo: Span,\n         s: BlockCheckMode,\n+        maybe_struct_name: token::Token,\n+        can_be_struct_literal: bool,\n     ) -> Option<PResult<'a, P<Block>>> {\n         if self.token.is_ident() && self.look_ahead(1, |t| t == &token::Colon) {\n             // We might be having a struct literal where people forgot to include the path:\n             // fn foo() -> Foo {\n             //     field: value,\n             // }\n+            info!(?maybe_struct_name, ?self.token);\n             let mut snapshot = self.create_snapshot_for_diagnostic();\n             let path = Path {\n                 segments: ThinVec::new(),\n@@ -648,21 +652,32 @@ impl<'a> Parser<'a> {\n                     //     field: value,\n                     // } }\n                     err.delay_as_bug();\n-                    self.sess.emit_err(StructLiteralBodyWithoutPath {\n-                        span: expr.span,\n-                        sugg: StructLiteralBodyWithoutPathSugg {\n-                            before: expr.span.shrink_to_lo(),\n-                            after: expr.span.shrink_to_hi(),\n-                        },\n-                    });\n                     self.restore_snapshot(snapshot);\n                     let mut tail = self.mk_block(\n                         vec![self.mk_stmt_err(expr.span)],\n                         s,\n                         lo.to(self.prev_token.span),\n                     );\n                     tail.could_be_bare_literal = true;\n-                    Ok(tail)\n+                    if maybe_struct_name.is_ident() && can_be_struct_literal {\n+                        // Account for `if Example { a: one(), }.is_pos() {}`.\n+                        Err(self.sess.create_err(StructLiteralNeedingParens {\n+                            span: maybe_struct_name.span.to(expr.span),\n+                            sugg: StructLiteralNeedingParensSugg {\n+                                before: maybe_struct_name.span.shrink_to_lo(),\n+                                after: expr.span.shrink_to_hi(),\n+                            },\n+                        }))\n+                    } else {\n+                        self.sess.emit_err(StructLiteralBodyWithoutPath {\n+                            span: expr.span,\n+                            sugg: StructLiteralBodyWithoutPathSugg {\n+                                before: expr.span.shrink_to_lo(),\n+                                after: expr.span.shrink_to_hi(),\n+                            },\n+                        });\n+                        Ok(tail)\n+                    }\n                 }\n                 (Err(err), Ok(tail)) => {\n                     // We have a block tail that contains a somehow valid type ascription expr."}, {"sha": "f5093fb02a8750b4a198a0cdfd9e485193cfcda1", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -2039,7 +2039,7 @@ impl<'a> Parser<'a> {\n             });\n         }\n \n-        let (attrs, blk) = self.parse_block_common(lo, blk_mode)?;\n+        let (attrs, blk) = self.parse_block_common(lo, blk_mode, true)?;\n         Ok(self.mk_expr_with_attrs(blk.span, ExprKind::Block(blk, opt_label), attrs))\n     }\n "}, {"sha": "a251e3ded2f56b081c2d24fa0878ec8c3595da49", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -2214,7 +2214,8 @@ impl<'a> Parser<'a> {\n             *sig_hi = self.prev_token.span;\n             (AttrVec::new(), None)\n         } else if self.check(&token::OpenDelim(Delimiter::Brace)) || self.token.is_whole_block() {\n-            self.parse_inner_attrs_and_block().map(|(attrs, body)| (attrs, Some(body)))?\n+            self.parse_block_common(self.token.span, BlockCheckMode::Default, false)\n+                .map(|(attrs, body)| (attrs, Some(body)))?\n         } else if self.token.kind == token::Eq {\n             // Recover `fn foo() = $expr;`.\n             self.bump(); // `=`"}, {"sha": "1e5c2834960352c03082ef1e40994755af26dff4", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -498,24 +498,31 @@ impl<'a> Parser<'a> {\n \n     /// Parses a block. Inner attributes are allowed.\n     pub(super) fn parse_inner_attrs_and_block(&mut self) -> PResult<'a, (AttrVec, P<Block>)> {\n-        self.parse_block_common(self.token.span, BlockCheckMode::Default)\n+        self.parse_block_common(self.token.span, BlockCheckMode::Default, true)\n     }\n \n     /// Parses a block. Inner attributes are allowed.\n     pub(super) fn parse_block_common(\n         &mut self,\n         lo: Span,\n         blk_mode: BlockCheckMode,\n+        can_be_struct_literal: bool,\n     ) -> PResult<'a, (AttrVec, P<Block>)> {\n         maybe_whole!(self, NtBlock, |x| (AttrVec::new(), x));\n \n+        let maybe_ident = self.prev_token.clone();\n         self.maybe_recover_unexpected_block_label();\n         if !self.eat(&token::OpenDelim(Delimiter::Brace)) {\n             return self.error_block_no_opening_brace();\n         }\n \n         let attrs = self.parse_inner_attributes()?;\n-        let tail = match self.maybe_suggest_struct_literal(lo, blk_mode) {\n+        let tail = match self.maybe_suggest_struct_literal(\n+            lo,\n+            blk_mode,\n+            maybe_ident,\n+            can_be_struct_literal,\n+        ) {\n             Some(tail) => tail?,\n             None => self.parse_block_tail(lo, blk_mode, AttemptLocalParseRecovery::Yes)?,\n         };"}, {"sha": "c014d682a9aaabcdb269168dd6e050f4dae2784c", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -3,7 +3,10 @@ use std::mem;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_infer::{\n     infer::InferCtxt,\n-    traits::{query::NoSolution, FulfillmentError, PredicateObligation, TraitEngine},\n+    traits::{\n+        query::NoSolution, FulfillmentError, FulfillmentErrorCode, PredicateObligation,\n+        SelectionError, TraitEngine,\n+    },\n };\n use rustc_middle::ty;\n \n@@ -45,32 +48,43 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n             return errors;\n         }\n \n-        if self.obligations.is_empty() {\n-            Vec::new()\n-        } else {\n-            unimplemented!(\"ambiguous obligations\")\n-        }\n+        self.obligations\n+            .drain(..)\n+            .map(|obligation| FulfillmentError {\n+                obligation: obligation.clone(),\n+                code: FulfillmentErrorCode::CodeSelectionError(SelectionError::Unimplemented),\n+                root_obligation: obligation,\n+            })\n+            .collect()\n     }\n \n     fn select_where_possible(&mut self, infcx: &InferCtxt<'tcx>) -> Vec<FulfillmentError<'tcx>> {\n-        let errors = Vec::new();\n+        let mut errors = Vec::new();\n         for i in 0.. {\n             if !infcx.tcx.recursion_limit().value_within_limit(i) {\n                 unimplemented!(\"overflow\")\n             }\n \n             let mut has_changed = false;\n-            for o in mem::take(&mut self.obligations) {\n+            for obligation in mem::take(&mut self.obligations) {\n                 let mut cx = EvalCtxt::new(infcx.tcx);\n-                let (changed, certainty) = match cx.evaluate_goal(infcx, o.clone().into()) {\n+                let (changed, certainty) = match cx.evaluate_goal(infcx, obligation.clone().into())\n+                {\n                     Ok(result) => result,\n-                    Err(NoSolution) => unimplemented!(\"error\"),\n+                    Err(NoSolution) => {\n+                        errors.push(FulfillmentError {\n+                            obligation: obligation.clone(),\n+                            code: FulfillmentErrorCode::CodeAmbiguity,\n+                            root_obligation: obligation,\n+                        });\n+                        continue;\n+                    }\n                 };\n \n                 has_changed |= changed;\n                 match certainty {\n                     Certainty::Yes => {}\n-                    Certainty::Maybe(_) => self.obligations.push(o),\n+                    Certainty::Maybe(_) => self.obligations.push(obligation),\n                 }\n             }\n "}, {"sha": "53769742c47a79937727be1ed888ffd4383fcbdc", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -36,7 +36,7 @@ use rustc_middle::ty::{\n     TypeSuperFoldable, TypeVisitable, TypeckResults,\n };\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::{BytePos, DesugaringKind, ExpnKind, Span, DUMMY_SP};\n+use rustc_span::{BytePos, DesugaringKind, ExpnKind, MacroKind, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use std::ops::Deref;\n \n@@ -2949,7 +2949,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         // FIXME: we should do something else so that it works even on crate foreign\n                         // auto traits.\n                         is_auto_trait = matches!(is_auto, hir::IsAuto::Yes);\n-                        err.span_note(ident.span, &msg)\n+                        err.span_note(ident.span, &msg);\n                     }\n                     Some(Node::Item(hir::Item {\n                         kind: hir::ItemKind::Impl(hir::Impl { of_trait, self_ty, .. }),\n@@ -2960,9 +2960,29 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             spans.push(trait_ref.path.span);\n                         }\n                         spans.push(self_ty.span);\n-                        err.span_note(spans, &msg)\n+                        let mut spans: MultiSpan = spans.into();\n+                        if matches!(\n+                            self_ty.span.ctxt().outer_expn_data().kind,\n+                            ExpnKind::Macro(MacroKind::Derive, _)\n+                        ) || matches!(\n+                            of_trait.as_ref().map(|t| t.path.span.ctxt().outer_expn_data().kind),\n+                            Some(ExpnKind::Macro(MacroKind::Derive, _))\n+                        ) {\n+                            spans.push_span_label(\n+                                data.span,\n+                                \"unsatisfied trait bound introduced in this `derive` macro\",\n+                            );\n+                        } else if !data.span.is_dummy() && !data.span.overlaps(self_ty.span) {\n+                            spans.push_span_label(\n+                                data.span,\n+                                \"unsatisfied trait bound introduced here\",\n+                            );\n+                        }\n+                        err.span_note(spans, &msg);\n+                    }\n+                    _ => {\n+                        err.note(&msg);\n                     }\n-                    _ => err.note(&msg),\n                 };\n \n                 if let Some(file) = file {"}, {"sha": "1eb146989e4f89ee892065fcd261ca2d8b9f7f65", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -64,6 +64,7 @@ pub mod pal;\n pub mod primitive_docs;\n pub mod style;\n pub mod target_specific_tests;\n+pub mod tests_placement;\n pub mod ui_tests;\n pub mod unit_tests;\n pub mod unstable_book;"}, {"sha": "79441cda64c054ac314516f227aa5462bd07f7e8", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -76,6 +76,7 @@ fn main() {\n         check!(extdeps, &root_path);\n \n         // Checks over tests.\n+        check!(tests_placement, &root_path);\n         check!(debug_artifacts, &tests_path);\n         check!(ui_tests, &tests_path);\n         check!(mir_opt_tests, &tests_path, bless);"}, {"sha": "9d0057df8bcd85f09ea4eeede8ee98db18c458a6", "filename": "src/tools/tidy/src/tests_placement.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/src%2Ftools%2Ftidy%2Fsrc%2Ftests_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/src%2Ftools%2Ftidy%2Fsrc%2Ftests_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ftests_placement.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -0,0 +1,15 @@\n+use std::path::Path;\n+\n+const FORBIDDEN_PATH: &str = \"src/test\";\n+const ALLOWED_PATH: &str = \"tests\";\n+\n+pub fn check(root_path: impl AsRef<Path>, bad: &mut bool) {\n+    if root_path.as_ref().join(FORBIDDEN_PATH).exists() {\n+        tidy_error!(\n+            bad,\n+            \"Tests have been moved, please move them from {} to {}\",\n+            root_path.as_ref().join(FORBIDDEN_PATH).display(),\n+            root_path.as_ref().join(ALLOWED_PATH).display()\n+        )\n+    }\n+}"}, {"sha": "749986f09c63d8a3c1b592d5e19a72871dd07c57", "filename": "tests/ui/associated-types/hr-associated-type-bound-2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -10,6 +10,9 @@ note: required for `u32` to implement `for<'b> X<'b>`\n    |\n LL | impl X<'_> for u32\n    |      ^^^^^     ^^^\n+LL | where\n+LL |     for<'b> <Self as X<'b>>::U: Clone,\n+   |                                 ----- unsatisfied trait bound introduced here\n    = note: 128 redundant requirements hidden\n    = note: required for `u32` to implement `for<'b> X<'b>`\n "}, {"sha": "206060f1980dbffebafb582fcaa899cec19cb880", "filename": "tests/ui/associated-types/impl-wf-cycle-1.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -9,6 +9,9 @@ note: required for `(T,)` to implement `Grault`\n    |\n LL | impl<T: Grault> Grault for (T,)\n    |                 ^^^^^^     ^^^^\n+...\n+LL |     Self::A: Baz,\n+   |              --- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `(T,)` to implement `Grault`\n "}, {"sha": "771ba751e8c95d21f2c8189c11fbff7a1c76c2aa", "filename": "tests/ui/associated-types/impl-wf-cycle-2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -9,6 +9,9 @@ note: required for `(T,)` to implement `Grault`\n    |\n LL | impl<T: Grault> Grault for (T,)\n    |                 ^^^^^^     ^^^^\n+...\n+LL |     Self::A: Copy,\n+   |              ---- unsatisfied trait bound introduced here\n \n error: aborting due to previous error\n "}, {"sha": "8bddcd95568923951e6a37d67d864866412460ec", "filename": "tests/ui/associated-types/issue-44153.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fissue-44153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fissue-44153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-44153.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -14,6 +14,8 @@ note: required for `()` to implement `Visit`\n    |\n LL | impl<'a> Visit for () where\n    |          ^^^^^     ^^\n+LL |     (): Array<Element=&'a ()>,\n+   |               -------------- unsatisfied trait bound introduced here\n \n error: aborting due to previous error\n "}, {"sha": "91b557555d582d21badd9b3aef511085a9aec4fc", "filename": "tests/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -22,7 +22,9 @@ note: required for `&mut T` to implement `MyDisplay`\n   --> $DIR/issue-65774-1.rs:5:24\n    |\n LL | impl<'a, T: MyDisplay> MyDisplay for &'a mut T { }\n-   |                        ^^^^^^^^^     ^^^^^^^^^\n+   |             ---------  ^^^^^^^^^     ^^^^^^^^^\n+   |             |\n+   |             unsatisfied trait bound introduced here\n    = note: required for the cast from `&mut T` to the object type `dyn MyDisplay`\n \n error: aborting due to 2 previous errors"}, {"sha": "eadaa35b65e5a8707db96a9a0bf9de7035d59a6a", "filename": "tests/ui/associated-types/substs-ppaux.normal.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -81,7 +81,9 @@ note: required for `str` to implement `Foo<'_, '_, u8>`\n   --> $DIR/substs-ppaux.rs:11:17\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n-   |                 ^^^^^^^^^^^^^^     ^\n+   |            -    ^^^^^^^^^^^^^^     ^\n+   |            |\n+   |            unsatisfied trait bound introduced here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "2077543ce30344517bb723b15297d2844ca2caa0", "filename": "tests/ui/associated-types/substs-ppaux.verbose.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -81,7 +81,9 @@ note: required for `str` to implement `Foo<'_#0r, '_#1r, u8>`\n   --> $DIR/substs-ppaux.rs:11:17\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n-   |                 ^^^^^^^^^^^^^^     ^\n+   |            -    ^^^^^^^^^^^^^^     ^\n+   |            |\n+   |            unsatisfied trait bound introduced here\n \n error: aborting due to 5 previous errors\n "}, {"sha": "9aae9013d1b040e20391a4158d19229eb724d262", "filename": "tests/ui/auto-traits/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -9,7 +9,9 @@ note: required for `&'static u32` to implement `Defaulted`\n   --> $DIR/typeck-default-trait-impl-precedence.rs:10:19\n    |\n LL | impl<'a,T:Signed> Defaulted for &'a T { }\n-   |                   ^^^^^^^^^     ^^^^^\n+   |           ------  ^^^^^^^^^     ^^^^^\n+   |           |\n+   |           unsatisfied trait bound introduced here\n note: required by a bound in `is_defaulted`\n   --> $DIR/typeck-default-trait-impl-precedence.rs:12:19\n    |"}, {"sha": "24341c0f58a80d3f9dc2d71febf5091331af091d", "filename": "tests/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -9,7 +9,9 @@ note: required for `Bob` to implement `Add<{integer}>`\n   --> $DIR/issue-22645.rs:8:19\n    |\n LL | impl<RHS: Scalar> Add <RHS> for Bob {\n-   |                   ^^^^^^^^^     ^^^\n+   |           ------  ^^^^^^^^^     ^^^\n+   |           |\n+   |           unsatisfied trait bound introduced here\n \n error[E0308]: mismatched types\n   --> $DIR/issue-22645.rs:15:3"}, {"sha": "e50ac671eca54cfe436762374c623b079842cf47", "filename": "tests/ui/const-generics/generic_const_exprs/issue-85848.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-85848.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -11,12 +11,12 @@ note: required for `&C` to implement `Contains<(), true>`\n   --> $DIR/issue-85848.rs:21:12\n    |\n LL | impl<T, U> Contains<T, { contains::<T, U>() }> for U where T: _Contains<U> {}\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^          ------------ unsatisfied trait bound introduced here\n note: required for `&C` to implement `Delegates<()>`\n   --> $DIR/issue-85848.rs:12:12\n    |\n LL | impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n-   |            ^^^^^^^^^^^^     ^\n+   |            ^^^^^^^^^^^^     ^          ----------------- unsatisfied trait bound introduced here\n note: required by a bound in `writes_to_specific_path`\n   --> $DIR/issue-85848.rs:30:31\n    |\n@@ -36,12 +36,14 @@ note: required for `&C` to implement `Contains<(), true>`\n   --> $DIR/issue-85848.rs:21:12\n    |\n LL | impl<T, U> Contains<T, { contains::<T, U>() }> for U where T: _Contains<U> {}\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+   |            ^^^^^^^^^^^^----------------------^     ^\n+   |                        |\n+   |                        unsatisfied trait bound introduced here\n note: required for `&C` to implement `Delegates<()>`\n   --> $DIR/issue-85848.rs:12:12\n    |\n LL | impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n-   |            ^^^^^^^^^^^^     ^\n+   |            ^^^^^^^^^^^^     ^          ----------------- unsatisfied trait bound introduced here\n note: required by a bound in `writes_to_specific_path`\n   --> $DIR/issue-85848.rs:30:31\n    |"}, {"sha": "06fa4b0b1f30cb93d994bee7951393b53d9a7463", "filename": "tests/ui/consts/const-blocks/trait-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -8,7 +8,7 @@ note: required for `Foo<String>` to implement `Copy`\n   --> $DIR/trait-error.rs:1:10\n    |\n LL | #[derive(Copy, Clone)]\n-   |          ^^^^\n+   |          ^^^^ unsatisfied trait bound introduced in this `derive` macro\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n    = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n    = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information"}, {"sha": "9c4ca01ff377778a6ca5ed8a89988d777e7f68da", "filename": "tests/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -10,7 +10,7 @@ note: required for `B<C>` to implement `Copy`\n   --> $DIR/deriving-copyclone.rs:9:10\n    |\n LL | #[derive(Copy, Clone)]\n-   |          ^^^^\n+   |          ^^^^ unsatisfied trait bound introduced in this `derive` macro\n note: required by a bound in `is_copy`\n   --> $DIR/deriving-copyclone.rs:18:15\n    |\n@@ -34,7 +34,7 @@ note: required for `B<C>` to implement `Clone`\n   --> $DIR/deriving-copyclone.rs:9:16\n    |\n LL | #[derive(Copy, Clone)]\n-   |                ^^^^^\n+   |                ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n note: required by a bound in `is_clone`\n   --> $DIR/deriving-copyclone.rs:19:16\n    |\n@@ -58,7 +58,7 @@ note: required for `B<D>` to implement `Copy`\n   --> $DIR/deriving-copyclone.rs:9:10\n    |\n LL | #[derive(Copy, Clone)]\n-   |          ^^^^\n+   |          ^^^^ unsatisfied trait bound introduced in this `derive` macro\n note: required by a bound in `is_copy`\n   --> $DIR/deriving-copyclone.rs:18:15\n    |"}, {"sha": "cf9a7f69bfbdd913d19fb8de20b62f4a92929b91", "filename": "tests/ui/error-codes/E0275.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0275.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -9,7 +9,7 @@ note: required for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<\n   --> $DIR/E0275.rs:6:9\n    |\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n-   |         ^^^     ^\n+   |         ^^^     ^               --- unsatisfied trait bound introduced here\n    = note: the full type name has been written to '$TEST_BUILD_DIR/error-codes/E0275/E0275.long-type-hash.txt'\n    = note: 127 redundant requirements hidden\n    = note: required for `Bar<T>` to implement `Foo`"}, {"sha": "261070d1db4bf2340243247c467f960eb6310e78", "filename": "tests/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -31,7 +31,7 @@ note: required for `Fooy<T>` to implement `Copy`\n   --> $DIR/impl_bounds.rs:10:10\n    |\n LL | #[derive(Copy, Clone)]\n-   |          ^^^^\n+   |          ^^^^ unsatisfied trait bound introduced in this `derive` macro\n note: the requirement `Fooy<T>: Copy` appears on the `impl`'s associated type `C` but not on the corresponding trait's associated type\n   --> $DIR/impl_bounds.rs:6:10\n    |\n@@ -56,7 +56,7 @@ note: required for `Fooy<T>` to implement `Copy`\n   --> $DIR/impl_bounds.rs:10:10\n    |\n LL | #[derive(Copy, Clone)]\n-   |          ^^^^\n+   |          ^^^^ unsatisfied trait bound introduced in this `derive` macro\n note: the requirement `Fooy<T>: Copy` appears on the `impl`'s method `d` but not on the corresponding trait's method\n   --> $DIR/impl_bounds.rs:7:8\n    |"}, {"sha": "1f9273a8c4ab2f3be8699dce18f6a60a191eec92", "filename": "tests/ui/generic-associated-types/issue-101020.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -8,7 +8,7 @@ note: required for `&'a mut ()` to implement `for<'a> FuncInput<'a, &'a mut ()>`\n   --> $DIR/issue-101020.rs:27:20\n    |\n LL | impl<'a, T, F: 'a> FuncInput<'a, F> for T where F: Foo<T> {}\n-   |                    ^^^^^^^^^^^^^^^^     ^\n+   |                    ^^^^^^^^^^^^^^^^     ^          ------ unsatisfied trait bound introduced here\n note: required by a bound in `LendingIterator::consume`\n   --> $DIR/issue-101020.rs:9:33\n    |"}, {"sha": "381865db07d1eb68a81bbfa35f076883096b94d1", "filename": "tests/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -49,6 +49,9 @@ note: required for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]>` to i\n    |\n LL | impl<'a, A, T> T0<'a, A> for L<T>\n    |                ^^^^^^^^^     ^^^^\n+LL | where\n+LL |     T: FnMut(A) -> Unit3,\n+   |                    ----- unsatisfied trait bound introduced here\n note: required by a bound in `T1::m`\n   --> $DIR/issue-62203-hrtb-ice.rs:27:12\n    |"}, {"sha": "62d0128fd85a0ecc99bcab195e8b878e0ad0b1a6", "filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-89118.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -8,7 +8,9 @@ note: required for `Ctx<()>` to implement `for<'a> BufferUdpStateContext<&'a ()>\n   --> $DIR/issue-89118.rs:5:23\n    |\n LL | impl<B: BufferMut, C> BufferUdpStateContext<B> for C {}\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+   |         ---------     ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n note: required by a bound in `StackContext`\n   --> $DIR/issue-89118.rs:9:14\n    |\n@@ -28,7 +30,9 @@ note: required for `Ctx<()>` to implement `for<'a> BufferUdpStateContext<&'a ()>\n   --> $DIR/issue-89118.rs:5:23\n    |\n LL | impl<B: BufferMut, C> BufferUdpStateContext<B> for C {}\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+   |         ---------     ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n note: required by a bound in `EthernetWorker`\n   --> $DIR/issue-89118.rs:28:14\n    |\n@@ -48,7 +52,9 @@ note: required for `Ctx<()>` to implement `for<'a> BufferUdpStateContext<&'a ()>\n   --> $DIR/issue-89118.rs:5:23\n    |\n LL | impl<B: BufferMut, C> BufferUdpStateContext<B> for C {}\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+   |         ---------     ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n note: required by a bound in `StackContext`\n   --> $DIR/issue-89118.rs:9:14\n    |"}, {"sha": "b85bb5efd100ae215266882aa180b8484f4e3e63", "filename": "tests/ui/impl-trait/nested-return-type2-tait2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -9,7 +9,9 @@ note: required for `[closure@$DIR/nested-return-type2-tait2.rs:27:5: 27:7]` to i\n   --> $DIR/nested-return-type2-tait2.rs:14:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n-   |                               ^^^^^     ^\n+   |         ---                   ^^^^^     ^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n \n error: aborting due to previous error\n "}, {"sha": "19fd3c134acda693312a6e9fc059a9132c8c1622", "filename": "tests/ui/impl-trait/nested-return-type2-tait3.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -9,7 +9,9 @@ note: required for `[closure@$DIR/nested-return-type2-tait3.rs:26:5: 26:7]` to i\n   --> $DIR/nested-return-type2-tait3.rs:14:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n-   |                               ^^^^^     ^\n+   |         ---                   ^^^^^     ^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n \n error: aborting due to previous error\n "}, {"sha": "a4ff510477a4c38d4de2fc4287bab63e43855b91", "filename": "tests/ui/impl-trait/projection-mismatch-in-impl-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fprojection-mismatch-in-impl-where-clause.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -13,7 +13,7 @@ note: required for `()` to implement `Test`\n   --> $DIR/projection-mismatch-in-impl-where-clause.rs:11:9\n    |\n LL | impl<T> Test for T where T: Super<Assoc = ()> {}\n-   |         ^^^^     ^\n+   |         ^^^^     ^                ---------- unsatisfied trait bound introduced here\n \n error: aborting due to previous error\n "}, {"sha": "4d319b44987e20cfaaebb815a243b8134cae0317", "filename": "tests/ui/inference/issue-80816.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Finference%2Fissue-80816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Finference%2Fissue-80816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-80816.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -30,6 +30,7 @@ pub trait Access<T> {\n }\n impl<T, A: Access<T>, P: Deref<Target = A>> Access<T> for P {\n     //~^ NOTE: required for `Arc<ArcSwapAny<Arc<usize>>>` to implement `Access<_>`\n+    //~| NOTE unsatisfied trait bound introduced here\n     type Guard = A::Guard;\n }\n impl<T> Access<T> for ArcSwapAny<T> {"}, {"sha": "80c0c8abec6a3e953d28ed978dfe247644de9807", "filename": "tests/ui/inference/issue-80816.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Finference%2Fissue-80816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Finference%2Fissue-80816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-80816.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -1,11 +1,11 @@\n error[E0283]: type annotations needed\n-  --> $DIR/issue-80816.rs:49:38\n+  --> $DIR/issue-80816.rs:50:38\n    |\n LL |     let guard: Guard<Arc<usize>> = s.load();\n    |                                      ^^^^\n    |\n note: multiple `impl`s satisfying `ArcSwapAny<Arc<usize>>: Access<_>` found\n-  --> $DIR/issue-80816.rs:35:1\n+  --> $DIR/issue-80816.rs:36:1\n    |\n LL | impl<T> Access<T> for ArcSwapAny<T> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,7 +16,9 @@ note: required for `Arc<ArcSwapAny<Arc<usize>>>` to implement `Access<_>`\n   --> $DIR/issue-80816.rs:31:45\n    |\n LL | impl<T, A: Access<T>, P: Deref<Target = A>> Access<T> for P {\n-   |                                             ^^^^^^^^^     ^\n+   |            ---------                        ^^^^^^^^^     ^\n+   |            |\n+   |            unsatisfied trait bound introduced here\n help: try using a fully qualified path to specify the expected types\n    |\n LL |     let guard: Guard<Arc<usize>> = <Arc<ArcSwapAny<Arc<usize>>> as Access<T>>::load(&s);"}, {"sha": "202e8463145cc4b9a0705db4d8d2b5787d1eaa9b", "filename": "tests/ui/issues/issue-20413.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-20413.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -18,7 +18,7 @@ note: required for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoDa\n   --> $DIR/issue-20413.rs:9:9\n    |\n LL | impl<T> Foo for T where NoData<T>: Foo {\n-   |         ^^^     ^\n+   |         ^^^     ^                  --- unsatisfied trait bound introduced here\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n    = note: 127 redundant requirements hidden\n    = note: required for `NoData<T>` to implement `Foo`\n@@ -34,13 +34,13 @@ note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNo\n   --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n-   |         ^^^     ^\n+   |         ^^^     ^                        --- unsatisfied trait bound introduced here\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>` to implement `Baz`\n   --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n-   |         ^^^     ^\n+   |         ^^^     ^                        --- unsatisfied trait bound introduced here\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n    = note: 126 redundant requirements hidden\n    = note: required for `EvenLessData<T>` to implement `Baz`\n@@ -56,13 +56,13 @@ note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLess\n   --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n-   |         ^^^     ^\n+   |         ^^^     ^                        --- unsatisfied trait bound introduced here\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>` to implement `Bar`\n   --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n-   |         ^^^     ^\n+   |         ^^^     ^                        --- unsatisfied trait bound introduced here\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n    = note: 126 redundant requirements hidden\n    = note: required for `AlmostNoData<T>` to implement `Bar`"}, {"sha": "9510197197a8c29582f2a8e8f7b2a125c86bcc2c", "filename": "tests/ui/issues/issue-22872.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fissues%2Fissue-22872.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fissues%2Fissue-22872.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-22872.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -10,6 +10,9 @@ note: required for `Wrapper<P>` to implement `for<'b> Wrap<'b>`\n    |\n LL | impl<'b, P> Wrap<'b> for Wrapper<P>\n    |             ^^^^^^^^     ^^^^^^^^^^\n+LL | where P: Process<'b>,\n+LL |       <P as Process<'b>>::Item: Iterator {\n+   |                                 -------- unsatisfied trait bound introduced here\n    = note: required for the cast from `Wrapper<P>` to the object type `dyn for<'b> Wrap<'b>`\n help: consider further restricting the associated type\n    |"}, {"sha": "06e5b711a82276be3c2db629d70f987bae0bade6", "filename": "tests/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -9,7 +9,9 @@ note: required for `GetNext<<<<<<<... as Next>::Next as Next>::Next as Next>::Ne\n   --> $DIR/issue-23122-2.rs:10:15\n    |\n LL | impl<T: Next> Next for GetNext<T> {\n-   |               ^^^^     ^^^^^^^^^^\n+   |      -        ^^^^     ^^^^^^^^^^\n+   |      |\n+   |      unsatisfied trait bound introduced here\n    = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-23122-2/issue-23122-2.long-type-hash.txt'\n \n error: aborting due to previous error"}, {"sha": "a52a9c138f1479a3b279be892be7d6d9a7c724dd", "filename": "tests/ui/issues/issue-38821.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fissues%2Fissue-38821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fissues%2Fissue-38821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-38821.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -8,7 +8,9 @@ note: required for `<Col as Expression>::SqlType` to implement `IntoNullable`\n   --> $DIR/issue-38821.rs:9:18\n    |\n LL | impl<T: NotNull> IntoNullable for T {\n-   |                  ^^^^^^^^^^^^     ^\n+   |         -------  ^^^^^^^^^^^^     ^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting the associated type\n    |"}, {"sha": "0cabdf7f234a8926078392340b1ac711dfcfd895", "filename": "tests/ui/issues/issue-39970.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-39970.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -14,6 +14,9 @@ note: required for `()` to implement `Visit`\n    |\n LL | impl Visit for () where\n    |      ^^^^^     ^^\n+LL |     //(): for<'a> Array<'a, Element=&'a ()>, // No ICE\n+LL |     (): for<'a> Array<'a, Element=()>, // ICE\n+   |                           ---------- unsatisfied trait bound introduced here\n \n error: aborting due to previous error\n "}, {"sha": "1d26ae51f44aba4265f2aef24f93f970b44b767d", "filename": "tests/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -10,7 +10,9 @@ note: required for `Box<{integer}>` to implement `Foo`\n   --> $DIR/kindck-impl-type-params-2.rs:6:14\n    |\n LL | impl<T:Copy> Foo for T {\n-   |              ^^^     ^\n+   |        ----  ^^^     ^\n+   |        |\n+   |        unsatisfied trait bound introduced here\n note: required by a bound in `take_param`\n   --> $DIR/kindck-impl-type-params-2.rs:9:17\n    |"}, {"sha": "6fd1fc3f7a1aa88e2bbd6fd8d0be95e3b391032b", "filename": "tests/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -8,7 +8,9 @@ note: required for `S<T>` to implement `Gettable<T>`\n   --> $DIR/kindck-impl-type-params.rs:12:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n-   |                                ^^^^^^^^^^^     ^^^^\n+   |         ----                   ^^^^^^^^^^^     ^^^^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n    = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n@@ -25,7 +27,9 @@ note: required for `S<T>` to implement `Gettable<T>`\n   --> $DIR/kindck-impl-type-params.rs:12:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n-   |                                ^^^^^^^^^^^     ^^^^\n+   |                ----            ^^^^^^^^^^^     ^^^^\n+   |                |\n+   |                unsatisfied trait bound introduced here\n    = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n@@ -42,7 +46,9 @@ note: required for `S<T>` to implement `Gettable<T>`\n   --> $DIR/kindck-impl-type-params.rs:12:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n-   |                                ^^^^^^^^^^^     ^^^^\n+   |         ----                   ^^^^^^^^^^^     ^^^^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n    = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n@@ -59,7 +65,9 @@ note: required for `S<T>` to implement `Gettable<T>`\n   --> $DIR/kindck-impl-type-params.rs:12:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n-   |                                ^^^^^^^^^^^     ^^^^\n+   |                ----            ^^^^^^^^^^^     ^^^^\n+   |                |\n+   |                unsatisfied trait bound introduced here\n    = note: required for the cast from `S<T>` to the object type `dyn Gettable<T>`\n help: consider restricting type parameter `T`\n    |\n@@ -77,7 +85,9 @@ note: required for `S<String>` to implement `Gettable<String>`\n   --> $DIR/kindck-impl-type-params.rs:12:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n-   |                                ^^^^^^^^^^^     ^^^^\n+   |                ----            ^^^^^^^^^^^     ^^^^\n+   |                |\n+   |                unsatisfied trait bound introduced here\n    = note: required for the cast from `S<String>` to the object type `dyn Gettable<String>`\n \n error[E0277]: the trait bound `Foo: Copy` is not satisfied\n@@ -91,7 +101,9 @@ note: required for `S<Foo>` to implement `Gettable<Foo>`\n   --> $DIR/kindck-impl-type-params.rs:12:32\n    |\n LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n-   |                                ^^^^^^^^^^^     ^^^^\n+   |                ----            ^^^^^^^^^^^     ^^^^\n+   |                |\n+   |                unsatisfied trait bound introduced here\n    = note: required for the cast from `S<Foo>` to the object type `dyn Gettable<Foo>`\n help: consider annotating `Foo` with `#[derive(Copy)]`\n    |"}, {"sha": "8d45748a6c4119d59a59d3370305852c1c4c7a82", "filename": "tests/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -10,7 +10,9 @@ note: required for `Box<{integer}>` to implement `Foo`\n   --> $DIR/kindck-inherited-copy-bound.rs:14:14\n    |\n LL | impl<T:Copy> Foo for T {\n-   |              ^^^     ^\n+   |        ----  ^^^     ^\n+   |        |\n+   |        unsatisfied trait bound introduced here\n note: required by a bound in `take_param`\n   --> $DIR/kindck-inherited-copy-bound.rs:17:17\n    |"}, {"sha": "2fbb5a98a8d922fc7e6354d355a1d46808473bec", "filename": "tests/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -10,7 +10,9 @@ note: required for `Box<{integer}>` to implement `Foo`\n   --> $DIR/kindck-inherited-copy-bound.rs:14:14\n    |\n LL | impl<T:Copy> Foo for T {\n-   |              ^^^     ^\n+   |        ----  ^^^     ^\n+   |        |\n+   |        unsatisfied trait bound introduced here\n note: required by a bound in `take_param`\n   --> $DIR/kindck-inherited-copy-bound.rs:17:17\n    |"}, {"sha": "8be7c9ee8ac3acbc5e9c1ceae280e026fe897198", "filename": "tests/ui/parser/method-call-on-struct-literal-in-if-condition.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -0,0 +1,13 @@\n+pub struct Example { a: i32 }\n+\n+impl Example {\n+    fn is_pos(&self) -> bool { self.a > 0 }\n+}\n+\n+fn one() -> i32 { 1 }\n+\n+fn main() {\n+    if Example { a: one(), }.is_pos() { //~ ERROR invalid struct literal\n+        println!(\"Positive!\");\n+    }\n+}"}, {"sha": "7fd7ffc94a513d20401223fdb0a007fcc375a568", "filename": "tests/ui/parser/method-call-on-struct-literal-in-if-condition.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fmethod-call-on-struct-literal-in-if-condition.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -0,0 +1,13 @@\n+error: invalid struct literal\n+  --> $DIR/method-call-on-struct-literal-in-if-condition.rs:10:8\n+   |\n+LL |     if Example { a: one(), }.is_pos() {\n+   |        ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you might need to surround the struct literal in parentheses\n+   |\n+LL |     if (Example { a: one(), }).is_pos() {\n+   |        +                     +\n+\n+error: aborting due to previous error\n+"}, {"sha": "4769d53eb354f8e7e9b8ab53a18fbc0213f5131d", "filename": "tests/ui/phantom-auto-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fphantom-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fphantom-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fphantom-auto-trait.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -10,7 +10,7 @@ note: required for `&T` to implement `Zen`\n   --> $DIR/phantom-auto-trait.rs:10:24\n    |\n LL | unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n-   |                        ^^^     ^^^^^\n+   |                        ^^^     ^^^^^          ---- unsatisfied trait bound introduced here\n    = note: required because it appears within the type `PhantomData<&T>`\n note: required because it appears within the type `Guard<'_, T>`\n   --> $DIR/phantom-auto-trait.rs:12:8\n@@ -39,7 +39,7 @@ note: required for `&T` to implement `Zen`\n   --> $DIR/phantom-auto-trait.rs:10:24\n    |\n LL | unsafe impl<'a, T: 'a> Zen for &'a T where T: Sync {}\n-   |                        ^^^     ^^^^^\n+   |                        ^^^     ^^^^^          ---- unsatisfied trait bound introduced here\n    = note: required because it appears within the type `PhantomData<&T>`\n note: required because it appears within the type `Guard<'_, T>`\n   --> $DIR/phantom-auto-trait.rs:12:8"}, {"sha": "3b2a5e701886b1de6db55ca8190aea3924159490", "filename": "tests/ui/proc-macro/issue-104884-trait-impl-sugg-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fproc-macro%2Fissue-104884-trait-impl-sugg-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fproc-macro%2Fissue-104884-trait-impl-sugg-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fissue-104884-trait-impl-sugg-err.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -29,7 +29,7 @@ note: required for `PriorityQueue<T>` to implement `PartialOrd`\n   --> $DIR/issue-104884-trait-impl-sugg-err.rs:13:10\n    |\n LL | #[derive(PartialOrd, AddImpl)]\n-   |          ^^^^^^^^^^\n+   |          ^^^^^^^^^^ unsatisfied trait bound introduced in this `derive` macro\n note: required by a bound in `Ord`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    = note: this error originates in the derive macro `AddImpl` which comes from the expansion of the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "d02caff1febd2289e98237bd3fdeebd80b241d6e", "filename": "tests/ui/range/range-pattern-out-of-bounds-issue-68972.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Frange%2Frange-pattern-out-of-bounds-issue-68972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Frange%2Frange-pattern-out-of-bounds-issue-68972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Frange-pattern-out-of-bounds-issue-68972.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -0,0 +1,13 @@\n+#![feature(exclusive_range_pattern)]\n+#![allow(unreachable_patterns)]\n+fn main() {\n+    match 0u8 {\n+        251..257 => {}\n+        //~^ ERROR literal out of range\n+        //~| ERROR literal out of range\n+        251..=256 => {}\n+        //~^ ERROR literal out of range\n+        //~| ERROR literal out of range\n+        _ => {}\n+    }\n+}"}, {"sha": "7b8309b9bc2a1eafdf5339165d0e8bc0e38a6a07", "filename": "tests/ui/range/range-pattern-out-of-bounds-issue-68972.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Frange%2Frange-pattern-out-of-bounds-issue-68972.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Frange%2Frange-pattern-out-of-bounds-issue-68972.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange%2Frange-pattern-out-of-bounds-issue-68972.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -0,0 +1,26 @@\n+error: literal out of range for `u8`\n+  --> $DIR/range-pattern-out-of-bounds-issue-68972.rs:5:14\n+   |\n+LL |         251..257 => {}\n+   |              ^^^ this value doesn't fit in `u8` whose maximum value is `255`\n+\n+error: literal out of range for `u8`\n+  --> $DIR/range-pattern-out-of-bounds-issue-68972.rs:8:15\n+   |\n+LL |         251..=256 => {}\n+   |               ^^^ this value doesn't fit in `u8` whose maximum value is `255`\n+\n+error: literal out of range for `u8`\n+  --> $DIR/range-pattern-out-of-bounds-issue-68972.rs:5:14\n+   |\n+LL |         251..257 => {}\n+   |              ^^^ this value doesn't fit in `u8` whose maximum value is `255`\n+\n+error: literal out of range for `u8`\n+  --> $DIR/range-pattern-out-of-bounds-issue-68972.rs:8:15\n+   |\n+LL |         251..=256 => {}\n+   |               ^^^ this value doesn't fit in `u8` whose maximum value is `255`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a3e559054f9bc1c98e288e5d9894b8b1006601b0", "filename": "tests/ui/rfc-2397-do-not-recommend/feature-gate-do_not_recommend.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Frfc-2397-do-not-recommend%2Ffeature-gate-do_not_recommend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Frfc-2397-do-not-recommend%2Ffeature-gate-do_not_recommend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2397-do-not-recommend%2Ffeature-gate-do_not_recommend.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -11,7 +11,9 @@ note: required for `u8` to implement `Bar`\n   --> $DIR/feature-gate-do_not_recommend.rs:13:14\n    |\n LL | impl<T: Foo> Bar for T {\n-   |              ^^^     ^\n+   |         ---  ^^^     ^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n note: required by a bound in `stuff`\n   --> $DIR/feature-gate-do_not_recommend.rs:16:13\n    |"}, {"sha": "8923416f4c77bb93ad05e394a8de5d1caf6da6aa", "filename": "tests/ui/rfc-2632-const-trait-impl/specializing-constness-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fspecializing-constness-2.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -8,7 +8,9 @@ note: required for `T` to implement `~const A`\n   --> $DIR/specializing-constness-2.rs:20:37\n    |\n LL | impl<T: Default + ~const Sup> const A for T {\n-   |                                     ^     ^\n+   |                   ----------        ^     ^\n+   |                   |\n+   |                   unsatisfied trait bound introduced here\n help: consider further restricting this bound\n    |\n LL | const fn generic<T: Default + ~const Sup>() {"}, {"sha": "5a05f9c270ab9147b3669fa06c5f4f924791ed25", "filename": "tests/ui/specialization/issue-38091-2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fspecialization%2Fissue-38091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fissue-38091-2.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -15,6 +15,9 @@ note: required for `i32` to implement `Iterate<'_>`\n    |\n LL | impl<'a, T> Iterate<'a> for T\n    |             ^^^^^^^^^^^     ^\n+LL | where\n+LL |     T: Check,\n+   |        ----- unsatisfied trait bound introduced here\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "9ce51d1136d0eee324692477392be0fb747386f6", "filename": "tests/ui/specialization/issue-39448.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fspecialization%2Fissue-39448.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fspecialization%2Fissue-39448.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fissue-39448.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -18,12 +18,17 @@ note: required for `T` to implement `FromA<U>`\n   --> $DIR/issue-39448.rs:24:29\n    |\n LL | impl<T: A, U: A + FromA<T>> FromA<T> for U {\n-   |                             ^^^^^^^^     ^\n+   |                   --------  ^^^^^^^^     ^\n+   |                   |\n+   |                   unsatisfied trait bound introduced here\n note: required for `U` to implement `ToA<T>`\n   --> $DIR/issue-39448.rs:34:12\n    |\n LL | impl<T, U> ToA<U> for T\n    |            ^^^^^^     ^\n+LL | where\n+LL |     U: FromA<T>,\n+   |        -------- unsatisfied trait bound introduced here\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "9d843c2514b9b20da088db697285a6d74da100fb", "filename": "tests/ui/suggestions/derive-clone-for-eq.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fsuggestions%2Fderive-clone-for-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fsuggestions%2Fderive-clone-for-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fderive-clone-for-eq.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -8,7 +8,9 @@ note: required for `Struct<T>` to implement `PartialEq`\n   --> $DIR/derive-clone-for-eq.rs:9:19\n    |\n LL | impl<T: Clone, U> PartialEq<U> for Struct<T>\n-   |                   ^^^^^^^^^^^^     ^^^^^^^^^\n+   |         -----     ^^^^^^^^^^^^     ^^^^^^^^^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n note: required by a bound in `Eq`\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "79036279df954ff9bbb40102b00d607fce179b7d", "filename": "tests/ui/suggestions/derive-macro-missing-bounds.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -30,7 +30,9 @@ note: required for `c::Inner<T>` to implement `Debug`\n   --> $DIR/derive-macro-missing-bounds.rs:34:28\n    |\n LL |     impl<T: Debug + Trait> Debug for Inner<T> {\n-   |                            ^^^^^     ^^^^^^^^\n+   |                     -----  ^^^^^     ^^^^^^^^\n+   |                     |\n+   |                     unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&c::Inner<T>` to implement `Debug`\n    = note: required for the cast from `&c::Inner<T>` to the object type `dyn Debug`\n@@ -52,7 +54,7 @@ note: required for `d::Inner<T>` to implement `Debug`\n   --> $DIR/derive-macro-missing-bounds.rs:49:13\n    |\n LL |     impl<T> Debug for Inner<T> where T: Debug, T: Trait {\n-   |             ^^^^^     ^^^^^^^^\n+   |             ^^^^^     ^^^^^^^^                    ----- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&d::Inner<T>` to implement `Debug`\n    = note: required for the cast from `&d::Inner<T>` to the object type `dyn Debug`\n@@ -74,7 +76,7 @@ note: required for `e::Inner<T>` to implement `Debug`\n   --> $DIR/derive-macro-missing-bounds.rs:64:13\n    |\n LL |     impl<T> Debug for Inner<T> where T: Debug + Trait {\n-   |             ^^^^^     ^^^^^^^^\n+   |             ^^^^^     ^^^^^^^^                  ----- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&e::Inner<T>` to implement `Debug`\n    = note: required for the cast from `&e::Inner<T>` to the object type `dyn Debug`\n@@ -96,7 +98,7 @@ note: required for `f::Inner<T>` to implement `Debug`\n   --> $DIR/derive-macro-missing-bounds.rs:79:20\n    |\n LL |     impl<T: Debug> Debug for Inner<T> where T: Trait {\n-   |                    ^^^^^     ^^^^^^^^\n+   |                    ^^^^^     ^^^^^^^^          ----- unsatisfied trait bound introduced here\n    = note: 1 redundant requirement hidden\n    = note: required for `&f::Inner<T>` to implement `Debug`\n    = note: required for the cast from `&f::Inner<T>` to the object type `dyn Debug`"}, {"sha": "d4e9433dfda04a68fe6d7e8cb9f1af84ad333c3c", "filename": "tests/ui/suggestions/issue-96223.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fsuggestions%2Fissue-96223.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Fsuggestions%2Fissue-96223.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-96223.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -11,12 +11,15 @@ note: required for `Baz<EmptyBis<'de>>` to implement `for<'de> Foo<'de>`\n   --> $DIR/issue-96223.rs:16:14\n    |\n LL | impl<'de, T> Foo<'de> for Baz<T> where T: Foo<'de> {}\n-   |              ^^^^^^^^     ^^^^^^\n+   |              ^^^^^^^^     ^^^^^^          -------- unsatisfied trait bound introduced here\n note: required for `Empty` to implement `Dummy<EmptyMarker>`\n   --> $DIR/issue-96223.rs:20:9\n    |\n LL | impl<M> Dummy<M> for Empty\n    |         ^^^^^^^^     ^^^^^\n+...\n+LL |     for<'de> Baz<<M::Bar as Bar<'de>>::Inner>: Foo<'de>,\n+   |                                                -------- unsatisfied trait bound introduced here\n note: required by a bound in `icey_bounds`\n   --> $DIR/issue-96223.rs:45:19\n    |"}, {"sha": "eeee997608e6e62da835b3ba6a332465355f042d", "filename": "tests/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -22,11 +22,17 @@ note: required for `RootDatabase` to implement `SourceDatabase`\n    |\n LL | impl<T> SourceDatabase for T\n    |         ^^^^^^^^^^^^^^     ^\n+LL | where\n+LL |     T: RefUnwindSafe,\n+   |        ------------- unsatisfied trait bound introduced here\n note: required for `ParseQuery` to implement `Query<RootDatabase>`\n   --> $DIR/cycle-cache-err-60010.rs:37:10\n    |\n LL | impl<DB> Query<DB> for ParseQuery\n    |          ^^^^^^^^^     ^^^^^^^^^^\n+LL | where\n+LL |     DB: SourceDatabase,\n+   |         -------------- unsatisfied trait bound introduced here\n \n error: aborting due to previous error\n "}, {"sha": "bf536d21cf970b1a1cd97b913881516c28355610", "filename": "tests/ui/traits/inductive-overflow/lifetime.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -16,6 +16,7 @@ struct C<'a>(&'a ());\n struct X<T: Y>(T::P);\n \n impl<T: NotAuto> NotAuto for Box<T> {} //~ NOTE: required\n+//~^ NOTE unsatisfied trait bound introduced here\n impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n impl<'a> NotAuto for C<'a> {}\n "}, {"sha": "357e59991a3d4e71e7d06d6b341f4354ceb11d33", "filename": "tests/ui/traits/inductive-overflow/lifetime.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `X<C<'_>>: NotAuto`\n-  --> $DIR/lifetime.rs:28:5\n+  --> $DIR/lifetime.rs:29:5\n    |\n LL |     is_send::<X<C<'static>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,11 +8,13 @@ note: required for `Box<X<C<'_>>>` to implement `NotAuto`\n   --> $DIR/lifetime.rs:18:18\n    |\n LL | impl<T: NotAuto> NotAuto for Box<T> {}\n-   |                  ^^^^^^^     ^^^^^^\n+   |         -------  ^^^^^^^     ^^^^^^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n    = note: 3 redundant requirements hidden\n    = note: required for `X<C<'static>>` to implement `NotAuto`\n note: required by a bound in `is_send`\n-  --> $DIR/lifetime.rs:22:15\n+  --> $DIR/lifetime.rs:23:15\n    |\n LL | fn is_send<S: NotAuto>() {}\n    |               ^^^^^^^ required by this bound in `is_send`"}, {"sha": "e3b4ec07d2369f5e7a949d636124e66ce71b065e", "filename": "tests/ui/traits/inductive-overflow/simultaneous.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -8,7 +8,9 @@ note: required for `{integer}` to implement `Combo`\n   --> $DIR/simultaneous.rs:11:34\n    |\n LL | impl<T: Tweedledee + Tweedledum> Combo for T {}\n-   |                                  ^^^^^     ^\n+   |                      ----------  ^^^^^     ^\n+   |                      |\n+   |                      unsatisfied trait bound introduced here\n note: required by a bound in `is_ee`\n   --> $DIR/simultaneous.rs:13:13\n    |"}, {"sha": "b537ecf17213f799ea5dc812a129d714fd7847ea", "filename": "tests/ui/traits/inductive-overflow/supertrait.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -8,7 +8,9 @@ note: required for `NoClone` to implement `Magic`\n   --> $DIR/supertrait.rs:5:16\n    |\n LL | impl<T: Magic> Magic for T {}\n-   |                ^^^^^     ^\n+   |         -----  ^^^^^     ^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n note: required by a bound in `copy`\n   --> $DIR/supertrait.rs:7:12\n    |"}, {"sha": "edaf08f490f13549ed4b9c969e70fe4ab52f1101", "filename": "tests/ui/traits/issue-18400.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Fissue-18400.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Fissue-18400.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-18400.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -9,7 +9,9 @@ note: required for `{integer}` to implement `Set<&[_]>`\n   --> $DIR/issue-18400.rs:6:16\n    |\n LL | impl<'a, T, S> Set<&'a [T]> for S where\n-   |                ^^^^^^^^^^^^     ^\n+   |          -     ^^^^^^^^^^^^     ^\n+   |          |\n+   |          unsatisfied trait bound introduced here\n    = note: 128 redundant requirements hidden\n    = note: required for `{integer}` to implement `Set<&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[&[_]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]>`\n "}, {"sha": "6b314fa586d338b6d09c244600c19d243b866e01", "filename": "tests/ui/traits/issue-91594.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Fissue-91594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Fissue-91594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-91594.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -9,7 +9,9 @@ note: required for `Foo` to implement `Component<Foo>`\n   --> $DIR/issue-91594.rs:13:27\n    |\n LL | impl<M: HasComponent<()>> Component<M> for Foo {\n-   |                           ^^^^^^^^^^^^     ^^^\n+   |         ----------------  ^^^^^^^^^^^^     ^^^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n \n error: aborting due to previous error\n "}, {"sha": "ce690b749f5512ae86f2c0905124a015f66d05ec", "filename": "tests/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -113,7 +113,9 @@ note: required for `Outer2<main::TestType>` to implement `Sync`\n   --> $DIR/negated-auto-traits-error.rs:14:22\n    |\n LL | unsafe impl<T: Send> Sync for Outer2<T> {}\n-   |                      ^^^^     ^^^^^^^^^\n+   |                ----  ^^^^     ^^^^^^^^^\n+   |                |\n+   |                unsatisfied trait bound introduced here\n note: required by a bound in `is_sync`\n   --> $DIR/negated-auto-traits-error.rs:17:15\n    |"}, {"sha": "92d9d32cf9c707fbcdb2f02aaeb56be78fc6e00e", "filename": "tests/ui/traits/not-suggest-non-existing-fully-qualified-path.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnot-suggest-non-existing-fully-qualified-path.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -27,6 +27,9 @@ note: required for `A<B>` to implement `V<_>`\n    |\n LL | impl<T, U> V<U> for A<T>\n    |            ^^^^     ^^^^\n+LL | where\n+LL |     T: I<U>,\n+   |        ---- unsatisfied trait bound introduced here\n help: try using a fully qualified path to specify the expected types\n    |\n LL |     <A<B> as V<U>>::method(a);"}, {"sha": "0c45046f5f51657a5662d9639d746032ff5dd138", "filename": "tests/ui/type-alias-impl-trait/issue-90400-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-90400-2.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -8,7 +8,9 @@ note: required for `MyBaz<B>` to implement `Baz`\n   --> $DIR/issue-90400-2.rs:30:14\n    |\n LL | impl<B: Bar> Baz for MyBaz<B> {\n-   |              ^^^     ^^^^^^^^\n+   |         ---  ^^^     ^^^^^^^^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n help: consider restricting type parameter `B`\n    |\n LL |     type FooFn<B: Bar> = impl Baz;"}, {"sha": "103636b6cdde2de9a1c15ab22a786deb511ec96a", "filename": "tests/ui/type-alias-impl-trait/underconstrained_generic.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ee65aeb6d1fad67d903d5ee1359abcf7b94231/tests%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Funderconstrained_generic.stderr?ref=56ee65aeb6d1fad67d903d5ee1359abcf7b94231", "patch": "@@ -8,7 +8,9 @@ note: required for `()` to implement `ProofForConversion<T>`\n   --> $DIR/underconstrained_generic.rs:13:16\n    |\n LL | impl<X: Trait> ProofForConversion<X> for () {\n-   |                ^^^^^^^^^^^^^^^^^^^^^     ^^\n+   |         -----  ^^^^^^^^^^^^^^^^^^^^^     ^^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n help: consider restricting type parameter `T`\n    |\n LL | type Converter<T: Trait> = impl ProofForConversion<T>;"}]}