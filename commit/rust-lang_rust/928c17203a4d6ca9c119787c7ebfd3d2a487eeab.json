{"sha": "928c17203a4d6ca9c119787c7ebfd3d2a487eeab", "node_id": "C_kwDOAAsO6NoAKDkyOGMxNzIwM2E0ZDZjYTljMTE5Nzg3YzdlYmZkM2QyYTQ4N2VlYWI", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-07-04T09:38:11Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-07-04T09:38:11Z"}, "message": "Only validate HIR with `debug_assertions` on", "tree": {"sha": "c7897611149e0e41b415f8cea39672bde1e26ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7897611149e0e41b415f8cea39672bde1e26ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/928c17203a4d6ca9c119787c7ebfd3d2a487eeab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEzFQynJm4WzBnfhz8kJzQ0mSDUWsFAmLCtQMACgkQkJzQ0mSD\nUWuQCwwAmjnE7rQ2lTN/eugJHOHUFMKP/vhk7FpNV0qpfRWKRRkPkBR9O2Do0zfg\nVQNGk31woJm1P8HYy33MNpb51j5H8laYlC8GsfPm79bPsKrSRN5Q+7hn4KrTNJBY\nT8yRrkaXpI8tRPEybG2ku6NZuWLDdALnTsa3aTmRJu9bMPieuOyFsu0TEnQcNpwc\nc6w7LMszujaTSmMdYtPz88bXoUTBI9rnq9GxEabAT4P1je5byWiY0uoyMKKJlfP2\ncRwBlWn4bwH1szg/ikkV0frKqaYwKFecxKgC7Zs40yOnykaj6rpJTOUdmG9/cwp7\nTgi0fxpZlycIN50mCfa0TY+e11uZ4oVMHgt1aK43q95RDC8MfxVIv0KTVJvVSQ5o\nlhO9BRNvWuFSQe7HLP20T1TyJpFvyNE6wlwGj7Rr2wCVYOccxsxxs1jEZaDXv4pJ\nuEucXQDNESGIjF8g3mE+tutCi/tPTPA15wFAcqsGSNJsRFi4hXe8aBXnxqt3aoSB\nKZ7bsiv9\n=EZge\n-----END PGP SIGNATURE-----", "payload": "tree c7897611149e0e41b415f8cea39672bde1e26ed9\nparent 2a57e5efed5b84a2eaedf5240df4b8d80f012409\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1656927491 +0200\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1656927491 +0200\n\nOnly validate HIR with `debug_assertions` on\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/928c17203a4d6ca9c119787c7ebfd3d2a487eeab", "html_url": "https://github.com/rust-lang/rust/commit/928c17203a4d6ca9c119787c7ebfd3d2a487eeab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/928c17203a4d6ca9c119787c7ebfd3d2a487eeab/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a57e5efed5b84a2eaedf5240df4b8d80f012409", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a57e5efed5b84a2eaedf5240df4b8d80f012409", "html_url": "https://github.com/rust-lang/rust/commit/2a57e5efed5b84a2eaedf5240df4b8d80f012409"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "550c062f4de0a8da721f69b64e569de727bb4695", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/928c17203a4d6ca9c119787c7ebfd3d2a487eeab/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/928c17203a4d6ca9c119787c7ebfd3d2a487eeab/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=928c17203a4d6ca9c119787c7ebfd3d2a487eeab", "patch": "@@ -15,25 +15,28 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n         crate::hir_stats::print_hir_stats(tcx);\n     }\n \n-    let errors = Lock::new(Vec::new());\n-    let hir_map = tcx.hir();\n-\n-    hir_map.par_for_each_module(|module_id| {\n-        let mut v = HirIdValidator {\n-            hir_map,\n-            owner: None,\n-            hir_ids_seen: Default::default(),\n-            errors: &errors,\n-        };\n-\n-        tcx.hir().deep_visit_item_likes_in_module(module_id, &mut v);\n-    });\n-\n-    let errors = errors.into_inner();\n-\n-    if !errors.is_empty() {\n-        let message = errors.iter().fold(String::new(), |s1, s2| s1 + \"\\n\" + s2);\n-        tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, &message);\n+    #[cfg(debug_assertions)]\n+    {\n+        let errors = Lock::new(Vec::new());\n+        let hir_map = tcx.hir();\n+\n+        hir_map.par_for_each_module(|module_id| {\n+            let mut v = HirIdValidator {\n+                hir_map,\n+                owner: None,\n+                hir_ids_seen: Default::default(),\n+                errors: &errors,\n+            };\n+\n+            tcx.hir().deep_visit_item_likes_in_module(module_id, &mut v);\n+        });\n+\n+        let errors = errors.into_inner();\n+\n+        if !errors.is_empty() {\n+            let message = errors.iter().fold(String::new(), |s1, s2| s1 + \"\\n\" + s2);\n+            tcx.sess.delay_span_bug(rustc_span::DUMMY_SP, &message);\n+        }\n     }\n }\n "}]}