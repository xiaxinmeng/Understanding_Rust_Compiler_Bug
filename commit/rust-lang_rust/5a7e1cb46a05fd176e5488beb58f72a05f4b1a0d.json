{"sha": "5a7e1cb46a05fd176e5488beb58f72a05f4b1a0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhN2UxY2I0NmEwNWZkMTc2ZTU0ODhiZWI1OGY3MmEwNWY0YjFhMGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T22:27:55Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T22:27:55Z"}, "message": "typeck/pat.rs: dedup in `check_pat_box`.", "tree": {"sha": "fe3546f1e24394a203cacf342d5d7417819fed3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe3546f1e24394a203cacf342d5d7417819fed3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a7e1cb46a05fd176e5488beb58f72a05f4b1a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7e1cb46a05fd176e5488beb58f72a05f4b1a0d", "html_url": "https://github.com/rust-lang/rust/commit/5a7e1cb46a05fd176e5488beb58f72a05f4b1a0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a7e1cb46a05fd176e5488beb58f72a05f4b1a0d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f7532765967ea174816a23c11188aa8c7865966", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f7532765967ea174816a23c11188aa8c7865966", "html_url": "https://github.com/rust-lang/rust/commit/4f7532765967ea174816a23c11188aa8c7865966"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "3f6fc95360a5eb4607c08a96308df73e75e072a4", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5a7e1cb46a05fd176e5488beb58f72a05f4b1a0d/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a7e1cb46a05fd176e5488beb58f72a05f4b1a0d/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=5a7e1cb46a05fd176e5488beb58f72a05f4b1a0d", "patch": "@@ -952,22 +952,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         discrim_span: Option<Span>,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n-        let inner_ty = self.next_ty_var(TypeVariableOrigin {\n-            kind: TypeVariableOriginKind::TypeInference,\n-            span: inner.span,\n-        });\n-        let uniq_ty = tcx.mk_box(inner_ty);\n-\n-        if self.check_dereferencable(span, expected, &inner) {\n+        let (box_ty, inner_ty) = if self.check_dereferencable(span, expected, &inner) {\n             // Here, `demand::subtype` is good enough, but I don't\n             // think any errors can be introduced by using `demand::eqtype`.\n-            self.demand_eqtype_pat(span, expected, uniq_ty, discrim_span);\n-            self.check_pat(&inner, inner_ty, def_bm, discrim_span);\n-            uniq_ty\n+            let inner_ty = self.next_ty_var(TypeVariableOrigin {\n+                kind: TypeVariableOriginKind::TypeInference,\n+                span: inner.span,\n+            });\n+            let box_ty = tcx.mk_box(inner_ty);\n+            self.demand_eqtype_pat(span, expected, box_ty, discrim_span);\n+            (box_ty, inner_ty)\n         } else {\n-            self.check_pat(&inner, tcx.types.err, def_bm, discrim_span);\n-            tcx.types.err\n-        }\n+            (tcx.types.err, tcx.types.err)\n+        };\n+        self.check_pat(&inner, inner_ty, def_bm, discrim_span);\n+        box_ty\n     }\n \n     fn check_pat_ref("}]}