{"sha": "74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db", "node_id": "C_kwDOAAsO6NoAKDc0MjMwZTI2ZmZhNGFkMWJiZGJmODIyOWM3YTZiNTVjNDY0Y2E0ZGI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-19T11:38:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-19T11:38:37Z"}, "message": "internal: Improve inlay hint tooltips", "tree": {"sha": "04a86f6c9e230178c27e2bf16ae71910d37f7445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04a86f6c9e230178c27e2bf16ae71910d37f7445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db", "html_url": "https://github.com/rust-lang/rust/commit/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "018975b0418f5b5baa1a5403fce32a53d95e5068", "url": "https://api.github.com/repos/rust-lang/rust/commits/018975b0418f5b5baa1a5403fce32a53d95e5068", "html_url": "https://github.com/rust-lang/rust/commit/018975b0418f5b5baa1a5403fce32a53d95e5068"}], "stats": {"total": 128, "additions": 71, "deletions": 57}, "files": [{"sha": "e68631f9f7105b2906fe92dbe62d023f1b2ea9c1", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 44, "deletions": 35, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db", "patch": "@@ -57,19 +57,19 @@ pub enum InlayKind {\n     TypeHint,\n }\n \n-// FIXME: This should live somewhere more general\n-#[derive(Debug)]\n-pub enum RangeOrOffset {\n-    Range(TextRange),\n-    Offset(TextSize),\n-}\n-\n #[derive(Debug)]\n pub struct InlayHint {\n     pub range: TextRange,\n     pub kind: InlayKind,\n     pub label: String,\n-    pub hover_trigger: Option<RangeOrOffset>,\n+    pub tooltip: Option<InlayTooltip>,\n+}\n+\n+#[derive(Debug)]\n+pub enum InlayTooltip {\n+    String(String),\n+    HoverRanged(FileId, TextRange),\n+    HoverOffset(FileId, TextSize),\n }\n \n // Feature: Inlay Hints\n@@ -109,7 +109,7 @@ pub(crate) fn inlay_hints(\n \n     let mut acc = Vec::new();\n \n-    let hints = |node| hints(&mut acc, &sema, config, node);\n+    let hints = |node| hints(&mut acc, &sema, config, file_id, node);\n     match range_limit {\n         Some(FileRange { range, .. }) => match file.covering_element(range) {\n             NodeOrToken::Token(_) => return acc,\n@@ -128,24 +128,25 @@ fn hints(\n     hints: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n+    file_id: FileId,\n     node: SyntaxNode,\n ) {\n     let famous_defs = match sema.scope(&node) {\n         Some(it) => FamousDefs(sema, it.krate()),\n         None => return,\n     };\n \n-    closing_brace_hints(hints, sema, config, node.clone());\n+    closing_brace_hints(hints, sema, config, file_id, node.clone());\n     match_ast! {\n         match node {\n             ast::Expr(expr) => {\n-                chaining_hints(hints, sema, &famous_defs, config, &expr);\n+                chaining_hints(hints, sema, &famous_defs, config, file_id, &expr);\n                 match expr {\n                     ast::Expr::CallExpr(it) => param_name_hints(hints, sema, config, ast::Expr::from(it)),\n                     ast::Expr::MethodCallExpr(it) => {\n                         param_name_hints(hints, sema, config, ast::Expr::from(it))\n                     }\n-                    ast::Expr::ClosureExpr(it) => closure_ret_hints(hints, sema, &famous_defs, config, it),\n+                    ast::Expr::ClosureExpr(it) => closure_ret_hints(hints, sema, &famous_defs, config, file_id, it),\n                     // We could show reborrows for all expressions, but usually that is just noise to the user\n                     // and the main point here is to show why \"moving\" a mutable reference doesn't necessarily move it\n                     ast::Expr::PathExpr(_) => reborrow_hints(hints, sema, config, &expr),\n@@ -155,7 +156,7 @@ fn hints(\n             ast::Pat(it) => {\n                 binding_mode_hints(hints, sema, config, &it);\n                 if let ast::Pat::IdentPat(it) = it {\n-                    bind_pat_hints(hints, sema, config, &it);\n+                    bind_pat_hints(hints, sema, config, file_id, &it);\n                 }\n                 Some(())\n             },\n@@ -169,6 +170,7 @@ fn closing_brace_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n+    file_id: FileId,\n     node: SyntaxNode,\n ) -> Option<()> {\n     let min_lines = config.closing_brace_hints_min_lines?;\n@@ -263,7 +265,7 @@ fn closing_brace_hints(\n         range: closing_token.text_range(),\n         kind: InlayKind::ClosingBraceHint,\n         label,\n-        hover_trigger: name_offset.map(RangeOrOffset::Offset),\n+        tooltip: name_offset.map(|it| InlayTooltip::HoverOffset(file_id, it)),\n     });\n \n     None\n@@ -282,7 +284,7 @@ fn lifetime_fn_hints(\n         range: t.text_range(),\n         kind: InlayKind::LifetimeHint,\n         label,\n-        hover_trigger: None,\n+        tooltip: Some(InlayTooltip::String(\"Elided lifetime\".into())),\n     };\n \n     let param_list = func.param_list()?;\n@@ -428,20 +430,22 @@ fn lifetime_fn_hints(\n         (Some(gpl), allocated_lifetimes) => {\n             let angle_tok = gpl.l_angle_token()?;\n             let is_empty = gpl.generic_params().next().is_none();\n-            acc.push(mk_lt_hint(\n-                angle_tok,\n-                format!(\n+            acc.push(InlayHint {\n+                range: angle_tok.text_range(),\n+                kind: InlayKind::LifetimeHint,\n+                label: format!(\n                     \"{}{}\",\n                     allocated_lifetimes.iter().format(\", \"),\n                     if is_empty { \"\" } else { \", \" }\n                 ),\n-            ));\n+                tooltip: Some(InlayTooltip::String(\"Elided lifetimes\".into())),\n+            });\n         }\n         (None, allocated_lifetimes) => acc.push(InlayHint {\n             range: func.name()?.syntax().text_range(),\n             kind: InlayKind::GenericParamListHint,\n             label: format!(\"<{}>\", allocated_lifetimes.iter().format(\", \"),).into(),\n-            hover_trigger: None,\n+            tooltip: Some(InlayTooltip::String(\"Elided lifetimes\".into())),\n         }),\n     }\n     Some(())\n@@ -452,6 +456,7 @@ fn closure_ret_hints(\n     sema: &Semantics<RootDatabase>,\n     famous_defs: &FamousDefs,\n     config: &InlayHintsConfig,\n+    file_id: FileId,\n     closure: ast::ClosureExpr,\n ) -> Option<()> {\n     if !config.closure_return_type_hints {\n@@ -475,7 +480,7 @@ fn closure_ret_hints(\n         kind: InlayKind::ClosureReturnTypeHint,\n         label: hint_iterator(sema, &famous_defs, config, &ty)\n             .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string()),\n-        hover_trigger: None,\n+        tooltip: Some(InlayTooltip::HoverRanged(file_id, param_list.syntax().text_range())),\n     });\n     Some(())\n }\n@@ -502,7 +507,7 @@ fn reborrow_hints(\n         range: expr.syntax().text_range(),\n         kind: InlayKind::ImplicitReborrowHint,\n         label: label.to_string(),\n-        hover_trigger: None,\n+        tooltip: Some(InlayTooltip::String(\"Compiler inserted reborrow\".into())),\n     });\n     Some(())\n }\n@@ -512,6 +517,7 @@ fn chaining_hints(\n     sema: &Semantics<RootDatabase>,\n     famous_defs: &FamousDefs,\n     config: &InlayHintsConfig,\n+    file_id: FileId,\n     expr: &ast::Expr,\n ) -> Option<()> {\n     if !config.chaining_hints {\n@@ -561,7 +567,7 @@ fn chaining_hints(\n                 label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n                     ty.display_truncated(sema.db, config.max_length).to_string()\n                 }),\n-                hover_trigger: Some(RangeOrOffset::Range(expr.syntax().text_range())),\n+                tooltip: Some(InlayTooltip::HoverRanged(file_id, expr.syntax().text_range())),\n             });\n         }\n     }\n@@ -586,24 +592,23 @@ fn param_name_hints(\n         .filter_map(|((param, _ty), arg)| {\n             // Only annotate hints for expressions that exist in the original file\n             let range = sema.original_range_opt(arg.syntax())?;\n-            let param_name = match param? {\n-                Either::Left(_) => \"self\".to_string(),\n+            let (param_name, param_syntax) = match param.as_ref()? {\n+                Either::Left(pat) => (\"self\".to_string(), pat.syntax()),\n                 Either::Right(pat) => match pat {\n-                    ast::Pat::IdentPat(it) => it.name()?.to_string(),\n+                    ast::Pat::IdentPat(it) => (it.name()?.to_string(), pat.syntax()),\n                     _ => return None,\n                 },\n             };\n-            Some((param_name, arg, range))\n+            Some((sema.original_range_opt(param_syntax), param_name, arg, range))\n         })\n-        .filter(|(param_name, arg, _)| {\n+        .filter(|(_, param_name, arg, _)| {\n             !should_hide_param_name_hint(sema, &callable, param_name, arg)\n         })\n-        .map(|(param_name, _, FileRange { range, .. })| InlayHint {\n+        .map(|(param_range, param_name, _, FileRange { range, .. })| InlayHint {\n             range,\n             kind: InlayKind::ParameterHint,\n-            label: param_name.into(),\n-            // FIXME: Show hover for parameter\n-            hover_trigger: None,\n+            label: param_name,\n+            tooltip: param_range.map(|it| InlayTooltip::HoverOffset(it.file_id, it.range.start())),\n         });\n \n     acc.extend(hints);\n@@ -633,7 +638,7 @@ fn binding_mode_hints(\n             range,\n             kind: InlayKind::BindingModeHint,\n             label: r.to_string(),\n-            hover_trigger: None,\n+            tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n         });\n     });\n     match pat {\n@@ -648,7 +653,7 @@ fn binding_mode_hints(\n                 range,\n                 kind: InlayKind::BindingModeHint,\n                 label: bm.to_string(),\n-                hover_trigger: None,\n+                tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n             });\n         }\n         _ => (),\n@@ -661,6 +666,7 @@ fn bind_pat_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n+    file_id: FileId,\n     pat: &ast::IdentPat,\n ) -> Option<()> {\n     if !config.type_hints {\n@@ -699,7 +705,10 @@ fn bind_pat_hints(\n         },\n         kind: InlayKind::TypeHint,\n         label,\n-        hover_trigger: pat.name().map(|it| it.syntax().text_range()).map(RangeOrOffset::Range),\n+        tooltip: pat\n+            .name()\n+            .map(|it| it.syntax().text_range())\n+            .map(|it| InlayTooltip::HoverRanged(file_id, it)),\n     });\n \n     Some(())"}, {"sha": "0d87f4fcfaf474ba91af8dd3dfd7620c5e565623", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db", "patch": "@@ -81,7 +81,7 @@ pub use crate::{\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{\n-        InlayHint, InlayHintsConfig, InlayKind, LifetimeElisionHints, RangeOrOffset, ReborrowHints,\n+        InlayHint, InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints, ReborrowHints,\n     },\n     join_lines::JoinLinesConfig,\n     markup::Markup,"}, {"sha": "261c02816d59f72bc8bf21ba63494d05984a3c3e", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db", "patch": "@@ -1344,12 +1344,7 @@ pub(crate) fn handle_inlay_hints(\n             .inlay_hints(&inlay_hints_config, file_id, Some(range))?\n             .into_iter()\n             .map(|it| {\n-                to_proto::inlay_hint(\n-                    &line_index,\n-                    &params.text_document,\n-                    inlay_hints_config.render_colons,\n-                    it,\n-                )\n+                to_proto::inlay_hint(&snap, &line_index, inlay_hints_config.render_colons, it)\n             })\n             .collect(),\n     ))"}, {"sha": "5493180c5ec28698afd3fd28fb7ed118f2468875", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=74230e26ffa4ad1bbdbf8229c7a6b55c464ca4db", "patch": "@@ -415,8 +415,8 @@ pub(crate) fn signature_help(\n }\n \n pub(crate) fn inlay_hint(\n+    snap: &GlobalStateSnapshot,\n     line_index: &LineIndex,\n-    text_document: &lsp_types::TextDocumentIdentifier,\n     render_colons: bool,\n     inlay_hint: InlayHint,\n ) -> lsp_types::InlayHint {\n@@ -472,20 +472,30 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ClosingBraceHint => None,\n         },\n         text_edits: None,\n-        tooltip: Some(lsp_types::InlayHintTooltip::String(inlay_hint.label)),\n-        data: inlay_hint.hover_trigger.map(|range_or_offset| {\n-            to_value(lsp_ext::InlayHintResolveData {\n-                text_document: text_document.clone(),\n-                position: match range_or_offset {\n-                    ide::RangeOrOffset::Offset(offset) => {\n-                        lsp_ext::PositionOrRange::Position(position(line_index, offset))\n-                    }\n-                    ide::RangeOrOffset::Range(text_range) => {\n-                        lsp_ext::PositionOrRange::Range(range(line_index, text_range))\n-                    }\n-                },\n-            })\n-            .unwrap()\n+        data: match inlay_hint.tooltip {\n+            Some(ide::InlayTooltip::HoverOffset(file_id, offset)) => {\n+                let uri = url(snap, file_id);\n+                let text_document = lsp_types::TextDocumentIdentifier { uri };\n+                to_value(lsp_ext::InlayHintResolveData {\n+                    text_document,\n+                    position: lsp_ext::PositionOrRange::Position(position(line_index, offset)),\n+                })\n+                .ok()\n+            }\n+            Some(ide::InlayTooltip::HoverRanged(file_id, text_range)) => {\n+                let uri = url(snap, file_id);\n+                let text_document = lsp_types::TextDocumentIdentifier { uri };\n+                to_value(lsp_ext::InlayHintResolveData {\n+                    text_document,\n+                    position: lsp_ext::PositionOrRange::Range(range(line_index, text_range)),\n+                })\n+                .ok()\n+            }\n+            _ => None,\n+        },\n+        tooltip: Some(match inlay_hint.tooltip {\n+            Some(ide::InlayTooltip::String(s)) => lsp_types::InlayHintTooltip::String(s),\n+            _ => lsp_types::InlayHintTooltip::String(inlay_hint.label),\n         }),\n     }\n }"}]}