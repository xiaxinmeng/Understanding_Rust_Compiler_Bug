{"sha": "944f71afc692733cbc151bb3113d45a8159de132", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NGY3MWFmYzY5MjczM2NiYzE1MWJiMzExM2Q0NWE4MTU5ZGUxMzI=", "commit": {"author": {"name": "Unreal Hoang", "email": "unrealhoang@gmail.com", "date": "2019-07-08T15:02:15Z"}, "committer": {"name": "Unreal Hoang", "email": "unrealhoang@gmail.com", "date": "2019-07-08T15:19:09Z"}, "message": "projection over std::ops::Try::Ok to infer try/?", "tree": {"sha": "d7f7e23f43a461d526d143cd4e4e0ba7021a7c4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7f7e23f43a461d526d143cd4e4e0ba7021a7c4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/944f71afc692733cbc151bb3113d45a8159de132", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE5FNMeJ7UuhhqQiT99mIXvcbzfPoFAl0jXu8ACgkQ9mIXvcbz\nfPrQVA/6AwgGGogNAFHhcvus883+5ptFF6fWTjLTfcktD+KfJNTU/CBxRR2l8LdS\nljF5nmz0oJozU0RnO3qJ/BoCIBI4wu8P0pnvXc7i/waW53xfvY+5Irdr3k+GZn7B\nH0istkFGfqjuKLoDEmg8G1SkUgWFXX4vQhqoRHCYfMCTwpuJyKhO7arSaDscVjs+\ni7fg6I6JnoUzQVAv5shOfhBidTvWaoSSyUBtYrgwIS2zK7Na2MIiEJnmxzwJF8Es\nCfKNlWQw9dFsxRjK7w0dZCMyTRyZvr/dbjprHf1CS0XeMIIEFG+AcyD9SFjtPSFd\n+Jw/sQvJQ6AMiFZN6IxP2Xrlz/o2BqJF7krG8g6mbtxkZjrDo6tR3ius2hkAqxlu\nJQ8z77j5IxVY/u+/8OU9Ygr69dQZN0N6DK2rFSSbb2GEGdCx1uAf9P0/sKzsRMgk\njnxd8iXwdy4mJoQMvcjAJUEBVFfzrmbNnToo/rPUWY6tLQJQ7Xe4+JODGPdM5j+H\nrAg+2WF/TiFIvnLIb7bzEALFuUeZvpJQ26k0BLFEaUJywOjYKfyIW8jLtEyFEe8g\nhP+cAlK5G93kfiusYwtyc4Q90UKUWq2j8UaqqmtOYh79s4sGmJY3CcaLTfdE9jFX\nPTj4/vPGq/6W3B4zHrO3MQJKTTQ1Wr1SHe1esGVCs4RRYk+K3Ls=\n=30GN\n-----END PGP SIGNATURE-----", "payload": "tree d7f7e23f43a461d526d143cd4e4e0ba7021a7c4e\nparent 64b718bff7df788bfe6e8e2dce24b20faf9be235\nauthor Unreal Hoang <unrealhoang@gmail.com> 1562598135 +0900\ncommitter Unreal Hoang <unrealhoang@gmail.com> 1562599149 +0900\n\nprojection over std::ops::Try::Ok to infer try/?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/944f71afc692733cbc151bb3113d45a8159de132", "html_url": "https://github.com/rust-lang/rust/commit/944f71afc692733cbc151bb3113d45a8159de132", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/944f71afc692733cbc151bb3113d45a8159de132/comments", "author": {"login": "unrealhoang", "id": 1218094, "node_id": "MDQ6VXNlcjEyMTgwOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1218094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unrealhoang", "html_url": "https://github.com/unrealhoang", "followers_url": "https://api.github.com/users/unrealhoang/followers", "following_url": "https://api.github.com/users/unrealhoang/following{/other_user}", "gists_url": "https://api.github.com/users/unrealhoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/unrealhoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unrealhoang/subscriptions", "organizations_url": "https://api.github.com/users/unrealhoang/orgs", "repos_url": "https://api.github.com/users/unrealhoang/repos", "events_url": "https://api.github.com/users/unrealhoang/events{/privacy}", "received_events_url": "https://api.github.com/users/unrealhoang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unrealhoang", "id": 1218094, "node_id": "MDQ6VXNlcjEyMTgwOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1218094?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unrealhoang", "html_url": "https://github.com/unrealhoang", "followers_url": "https://api.github.com/users/unrealhoang/followers", "following_url": "https://api.github.com/users/unrealhoang/following{/other_user}", "gists_url": "https://api.github.com/users/unrealhoang/gists{/gist_id}", "starred_url": "https://api.github.com/users/unrealhoang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unrealhoang/subscriptions", "organizations_url": "https://api.github.com/users/unrealhoang/orgs", "repos_url": "https://api.github.com/users/unrealhoang/repos", "events_url": "https://api.github.com/users/unrealhoang/events{/privacy}", "received_events_url": "https://api.github.com/users/unrealhoang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64b718bff7df788bfe6e8e2dce24b20faf9be235", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b718bff7df788bfe6e8e2dce24b20faf9be235", "html_url": "https://github.com/rust-lang/rust/commit/64b718bff7df788bfe6e8e2dce24b20faf9be235"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "40c9d6002245a010de37acbfa5eef509a9bc688a", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/944f71afc692733cbc151bb3113d45a8159de132/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f71afc692733cbc151bb3113d45a8159de132/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=944f71afc692733cbc151bb3113d45a8159de132", "patch": "@@ -115,6 +115,9 @@ pub(crate) const ITER: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"iter\n pub(crate) const INTO_ITERATOR: Name =\n     Name::new(SmolStr::new_inline_from_ascii(12, b\"IntoIterator\"));\n pub(crate) const ITEM: Name = Name::new(SmolStr::new_inline_from_ascii(4, b\"Item\"));\n+pub(crate) const OPS: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"ops\"));\n+pub(crate) const TRY: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"Try\"));\n+pub(crate) const OK: Name = Name::new(SmolStr::new_inline_from_ascii(2, b\"Ok\"));\n \n fn resolve_name(text: &SmolStr) -> SmolStr {\n     let raw_start = \"r#\";"}, {"sha": "2f1c503554edbd21154d6ec5ef44f0a9fd648aa4", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/944f71afc692733cbc151bb3113d45a8159de132/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f71afc692733cbc151bb3113d45a8159de132/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=944f71afc692733cbc151bb3113d45a8159de132", "patch": "@@ -1140,8 +1140,23 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.insert_type_vars(ty)\n             }\n             Expr::Try { expr } => {\n-                let _inner_ty = self.infer_expr(*expr, &Expectation::none());\n-                Ty::Unknown\n+                let inner_ty = self.infer_expr(*expr, &Expectation::none());\n+                let ty = match self.resolve_ops_try_ok() {\n+                    Some(ops_try_ok_alias) => {\n+                        let ty = self.new_type_var();\n+                        let projection = ProjectionPredicate {\n+                            ty: ty.clone(),\n+                            projection_ty: ProjectionTy {\n+                                associated_ty: ops_try_ok_alias,\n+                                parameters: vec![inner_ty].into(),\n+                            },\n+                        };\n+                        self.obligations.push(Obligation::Projection(projection));\n+                        self.resolve_ty_as_possible(&mut vec![], ty)\n+                    }\n+                    None => Ty::Unknown,\n+                };\n+                ty\n             }\n             Expr::Cast { expr, type_ref } => {\n                 let _inner_ty = self.infer_expr(*expr, &Expectation::none());\n@@ -1360,6 +1375,26 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             _ => None,\n         }\n     }\n+\n+    fn resolve_ops_try_ok(&self) -> Option<TypeAlias> {\n+        use crate::name::{OK, OPS, TRY};\n+\n+        let ops_try_path = Path {\n+            kind: PathKind::Abs,\n+            segments: vec![\n+                PathSegment { name: STD, args_and_bindings: None },\n+                PathSegment { name: OPS, args_and_bindings: None },\n+                PathSegment { name: TRY, args_and_bindings: None },\n+            ],\n+        };\n+\n+        match self.resolver.resolve_path_segments(self.db, &ops_try_path).into_fully_resolved() {\n+            PerNs { types: Some(Def(Trait(trait_))), .. } => {\n+                Some(trait_.associated_type_by_name(self.db, OK)?)\n+            }\n+            _ => None,\n+        }\n+    }\n }\n \n /// The ID of a type variable."}, {"sha": "d5c03c4bc74274d457d9c642fcf95e1782dea3f5", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/944f71afc692733cbc151bb3113d45a8159de132/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944f71afc692733cbc151bb3113d45a8159de132/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=944f71afc692733cbc151bb3113d45a8159de132", "patch": "@@ -20,6 +20,42 @@ use crate::{\n // against snapshots of the expected results using insta. Use cargo-insta to\n // update the snapshots.\n \n+#[test]\n+fn infer_try() {\n+    let (mut db, pos) = MockDatabase::with_position(\n+        r#\"\n+//- /main.rs\n+enum Result<O, E> {\n+    Ok(O),\n+    Err(E)\n+}\n+\n+impl<O, E> ::std::ops::Try for Result<O, E> {\n+    type Ok = O;\n+    type Error = E;\n+}\n+fn test() {\n+    let r: Result<i32, u64> = Result::Ok(1);\n+    let v = r?;\n+    v<|>;\n+}\n+\n+//- /lib.rs\n+mod ops {\n+    trait Try {\n+        type Ok;\n+        type Error;\n+    }\n+}\n+\"#,\n+    );\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", [\"std\"]),\n+        \"std\": (\"/lib.rs\", []),\n+    });\n+    assert_eq!(\"i32\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_for_loop() {\n     let (mut db, pos) = MockDatabase::with_position(\n@@ -56,6 +92,7 @@ mod iter {\n     });\n     assert_eq!(\"&str\", type_at_pos(&db, pos));\n }\n+\n #[test]\n fn infer_basics() {\n     assert_snapshot_matches!("}]}