{"sha": "c8a5b1368e78979eda0420a95381fe6f61f1a086", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YTViMTM2OGU3ODk3OWVkYTA0MjBhOTUzODFmZTZmNjFmMWEwODY=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-07-08T19:36:46Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-07-08T19:38:10Z"}, "message": "Make `std::env::current_dir` work for path names longer than 2048 bytes on non-Windows", "tree": {"sha": "daa96a584631c2cd7e37c331c3d9edc3200cbd4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa96a584631c2cd7e37c331c3d9edc3200cbd4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8a5b1368e78979eda0420a95381fe6f61f1a086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a5b1368e78979eda0420a95381fe6f61f1a086", "html_url": "https://github.com/rust-lang/rust/commit/c8a5b1368e78979eda0420a95381fe6f61f1a086", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8a5b1368e78979eda0420a95381fe6f61f1a086/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50df2a09b8b9dd4883eb27d833a8482799175a3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/50df2a09b8b9dd4883eb27d833a8482799175a3b", "html_url": "https://github.com/rust-lang/rust/commit/50df2a09b8b9dd4883eb27d833a8482799175a3b"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "b65e065fe9148e0d307f3027e40322d83ed2b2ba", "filename": "src/libstd/env.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8a5b1368e78979eda0420a95381fe6f61f1a086/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a5b1368e78979eda0420a95381fe6f61f1a086/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=c8a5b1368e78979eda0420a95381fe6f61f1a086", "patch": "@@ -36,7 +36,6 @@ use sys::os as os_imp;\n ///\n /// * Current directory does not exist.\n /// * There are insufficient permissions to access the current directory.\n-/// * The internal buffer is not large enough to hold the path.\n ///\n /// # Examples\n ///"}, {"sha": "90b7d5f471956bfd66ab3ca6d17b24093a1b02b0", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c8a5b1368e78979eda0420a95381fe6f61f1a086/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a5b1368e78979eda0420a95381fe6f61f1a086/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=c8a5b1368e78979eda0420a95381fe6f61f1a086", "patch": "@@ -75,6 +75,41 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     }\n }\n \n+// Some system functions expect the user to pass a appropiately-sized buffer\n+// without specifying its size. They will only report back whether the buffer\n+// was large enough or not.\n+//\n+// The callback is yielded a (pointer, len) pair which can be\n+// passed to a syscall. The `ptr` is valid for `len` items (i8 in this case).\n+// The closure is expected to return `None` if the space was insufficient and\n+// `Some(r)` if the syscall did not fail due to insufficient space.\n+fn fill_bytes_buf<F, T>(mut f: F) -> io::Result<T>\n+    where F: FnMut(*mut i8, libc::size_t) -> Option<io::Result<T>>,\n+{\n+    // Start off with a stack buf but then spill over to the heap if we end up\n+    // needing more space.\n+    let mut stack_buf = [0i8; os::BUF_BYTES];\n+    let mut heap_buf = Vec::new();\n+    unsafe {\n+        let mut n = stack_buf.len();\n+        loop {\n+            let buf = if n <= stack_buf.len() {\n+                &mut stack_buf[..]\n+            } else {\n+                heap_buf.set_len(0);\n+                heap_buf.reserve(n);\n+                heap_buf.set_len(n);\n+                &mut heap_buf[..]\n+            };\n+\n+            match f(buf.as_mut_ptr(), n as libc::size_t) {\n+                None => n *= 2,\n+                Some(r) => return r,\n+            }\n+        }\n+    }\n+}\n+\n pub fn cvt<T: One + PartialEq + Neg<Output=T>>(t: T) -> io::Result<T> {\n     let one: T = T::one();\n     if t == -one {"}, {"sha": "6cf07ea077de6f3e1ec39cdf64d40dc730ad6782", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c8a5b1368e78979eda0420a95381fe6f61f1a086/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a5b1368e78979eda0420a95381fe6f61f1a086/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=c8a5b1368e78979eda0420a95381fe6f61f1a086", "patch": "@@ -22,15 +22,15 @@ use io;\n use iter;\n use libc::{self, c_int, c_char, c_void};\n use mem;\n-use ptr;\n use path::{self, PathBuf};\n+use ptr;\n use slice;\n use str;\n use sys::c;\n use sys::fd;\n use vec;\n \n-const BUF_BYTES: usize = 2048;\n+pub const BUF_BYTES: usize = 2048;\n const TMPBUF_SZ: usize = 128;\n \n fn bytes2path(b: &[u8]) -> PathBuf {\n@@ -102,14 +102,19 @@ pub fn error_string(errno: i32) -> String {\n }\n \n pub fn getcwd() -> io::Result<PathBuf> {\n-    let mut buf = [0 as c_char; BUF_BYTES];\n-    unsafe {\n-        if libc::getcwd(buf.as_mut_ptr(), buf.len() as libc::size_t).is_null() {\n-            Err(io::Error::last_os_error())\n-        } else {\n-            Ok(bytes2path(CStr::from_ptr(buf.as_ptr()).to_bytes()))\n+    super::fill_bytes_buf(|buf, len| {\n+        unsafe {\n+            Some(if !libc::getcwd(buf, len).is_null() {\n+                Ok(bytes2path(CStr::from_ptr(buf).to_bytes()))\n+            } else {\n+                let error = io::Error::last_os_error();\n+                if error.raw_os_error().unwrap() == libc::ERANGE {\n+                    return None;\n+                }\n+                Err(error)\n+            })\n         }\n-    }\n+    })\n }\n \n pub fn chdir(p: &path::Path) -> io::Result<()> {"}]}