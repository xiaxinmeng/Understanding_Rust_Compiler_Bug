{"sha": "7b817b6ab97f31d96dc935278fa4d34e4b510782", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiODE3YjZhYjk3ZjMxZDk2ZGM5MzUyNzhmYTRkMzRlNGI1MTA3ODI=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-07-25T19:58:27Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-08-01T19:09:03Z"}, "message": "libsync: Add safer abstraction for SPSC queue.\n\nThe current spsc implementation doesn't enforce single-producer\nsingle-consumer usage and also allows unsafe memory use through\npeek & pop.\n\nFor safer usage, `spsc_queue::queue` now returns a pair of owned objects which\nonly allow consumer or producer behaviours through an `Arc`.\nThrough restricting the mutability of the receiver to `mut` the\npeek and pop behaviour becomes safe again, with the compiler\ncomplaining about usage which could lead to problems.\n\nTo fix code broken from this, update:\nQueue::new(x) -> unsafe { Queue::new(x) }\n\n[breaking-change]", "tree": {"sha": "cb6f23e65aa1564fdd92c2baa60e0e95a4e6ad8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb6f23e65aa1564fdd92c2baa60e0e95a4e6ad8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b817b6ab97f31d96dc935278fa4d34e4b510782", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b817b6ab97f31d96dc935278fa4d34e4b510782", "html_url": "https://github.com/rust-lang/rust/commit/7b817b6ab97f31d96dc935278fa4d34e4b510782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b817b6ab97f31d96dc935278fa4d34e4b510782/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "624885810344184f7040892637250c35ceaf8db7", "url": "https://api.github.com/repos/rust-lang/rust/commits/624885810344184f7040892637250c35ceaf8db7", "html_url": "https://github.com/rust-lang/rust/commit/624885810344184f7040892637250c35ceaf8db7"}], "stats": {"total": 179, "additions": 143, "deletions": 36}, "files": [{"sha": "f8a28b7600f316b5fb7e74b3f1cae77276a60192", "filename": "src/libsync/comm/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b817b6ab97f31d96dc935278fa4d34e4b510782/src%2Flibsync%2Fcomm%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b817b6ab97f31d96dc935278fa4d34e4b510782/src%2Flibsync%2Fcomm%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fstream.rs?ref=7b817b6ab97f31d96dc935278fa4d34e4b510782", "patch": "@@ -74,7 +74,7 @@ enum Message<T> {\n impl<T: Send> Packet<T> {\n     pub fn new() -> Packet<T> {\n         Packet {\n-            queue: spsc::Queue::new(128),\n+            queue: unsafe { spsc::Queue::new(128) },\n \n             cnt: atomics::AtomicInt::new(0),\n             steals: 0,"}, {"sha": "d8cd44f993594006d981f38e925507aa72cec413", "filename": "src/libsync/spsc_queue.rs", "status": "modified", "additions": 142, "deletions": 35, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/7b817b6ab97f31d96dc935278fa4d34e4b510782/src%2Flibsync%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b817b6ab97f31d96dc935278fa4d34e4b510782/src%2Flibsync%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fspsc_queue.rs?ref=7b817b6ab97f31d96dc935278fa4d34e4b510782", "patch": "@@ -40,6 +40,7 @@ use core::prelude::*;\n use alloc::boxed::Box;\n use core::mem;\n use core::cell::UnsafeCell;\n+use alloc::arc::Arc;\n \n use atomics::{AtomicPtr, Relaxed, AtomicUint, Acquire, Release};\n \n@@ -73,6 +74,39 @@ pub struct Queue<T> {\n     cache_subtractions: AtomicUint,\n }\n \n+/// A safe abstraction for the consumer in a single-producer single-consumer\n+/// queue.\n+pub struct Consumer<T> {\n+    inner: Arc<Queue<T>>\n+}\n+\n+impl<T: Send> Consumer<T> {\n+    /// Attempts to pop the value from the head of the queue, returning `None`\n+    /// if the queue is empty.\n+    pub fn pop(&mut self) -> Option<T> {\n+        self.inner.pop()\n+    }\n+\n+    /// Attempts to peek at the head of the queue, returning `None` if the queue\n+    /// is empty.\n+    pub fn peek<'a>(&'a mut self) -> Option<&'a mut T> {\n+        self.inner.peek()\n+    }\n+}\n+\n+/// A safe abstraction for the producer in a single-producer single-consumer\n+/// queue.\n+pub struct Producer<T> {\n+    inner: Arc<Queue<T>>\n+}\n+\n+impl<T: Send> Producer<T> {\n+    /// Pushes a new value onto the queue.\n+    pub fn push(&mut self, t: T) {\n+        self.inner.push(t)\n+    }\n+}\n+\n impl<T: Send> Node<T> {\n     fn new() -> *mut Node<T> {\n         unsafe {\n@@ -84,9 +118,37 @@ impl<T: Send> Node<T> {\n     }\n }\n \n+/// Creates a new queue with a consumer-producer pair.\n+///\n+/// The producer returned is connected to the consumer to push all data to\n+/// the consumer.\n+///\n+/// # Arguments\n+///\n+///   * `bound` - This queue implementation is implemented with a linked\n+///               list, and this means that a push is always a malloc. In\n+///               order to amortize this cost, an internal cache of nodes is\n+///               maintained to prevent a malloc from always being\n+///               necessary. This bound is the limit on the size of the\n+///               cache (if desired). If the value is 0, then the cache has\n+///               no bound. Otherwise, the cache will never grow larger than\n+///               `bound` (although the queue itself could be much larger.\n+pub fn queue<T: Send>(bound: uint) -> (Consumer<T>, Producer<T>) {\n+    let q = unsafe { Queue::new(bound) };\n+    let arc = Arc::new(q);\n+    let consumer = Consumer { inner: arc.clone() };\n+    let producer = Producer { inner: arc };\n+\n+    (consumer, producer)\n+}\n+\n impl<T: Send> Queue<T> {\n-    /// Creates a new queue. The producer returned is connected to the consumer\n-    /// to push all data to the consumer.\n+    /// Creates a new queue.\n+    ///\n+    /// This is unsafe as the type system doesn't enforce a single\n+    /// consumer-producer relationship. It also allows the consumer to `pop`\n+    /// items while there is a `peek` active due to all methods having a\n+    /// non-mutable receiver.\n     ///\n     /// # Arguments\n     ///\n@@ -98,10 +160,10 @@ impl<T: Send> Queue<T> {\n     ///               cache (if desired). If the value is 0, then the cache has\n     ///               no bound. Otherwise, the cache will never grow larger than\n     ///               `bound` (although the queue itself could be much larger.\n-    pub fn new(bound: uint) -> Queue<T> {\n+    pub unsafe fn new(bound: uint) -> Queue<T> {\n         let n1 = Node::new();\n         let n2 = Node::new();\n-        unsafe { (*n1).next.store(n2, Relaxed) }\n+        (*n1).next.store(n2, Relaxed);\n         Queue {\n             tail: UnsafeCell::new(n2),\n             tail_prev: AtomicPtr::new(n1),\n@@ -199,6 +261,11 @@ impl<T: Send> Queue<T> {\n \n     /// Attempts to peek at the head of the queue, returning `None` if the queue\n     /// has no data currently\n+    ///\n+    /// # Warning\n+    /// The reference returned is invalid if it is not used before the consumer\n+    /// pops the value off the queue. If the producer then pushes another value\n+    /// onto the queue, it will overwrite the value pointed to by the reference.\n     pub fn peek<'a>(&'a self) -> Option<&'a mut T> {\n         // This is essentially the same as above with all the popping bits\n         // stripped out.\n@@ -229,46 +296,84 @@ impl<T: Send> Drop for Queue<T> {\n mod test {\n     use std::prelude::*;\n \n-    use alloc::arc::Arc;\n     use native;\n \n-    use super::Queue;\n+    use super::{queue, Queue};\n \n     #[test]\n     fn smoke() {\n-        let q = Queue::new(0);\n-        q.push(1i);\n-        q.push(2);\n-        assert_eq!(q.pop(), Some(1));\n-        assert_eq!(q.pop(), Some(2));\n-        assert_eq!(q.pop(), None);\n-        q.push(3);\n-        q.push(4);\n-        assert_eq!(q.pop(), Some(3));\n-        assert_eq!(q.pop(), Some(4));\n-        assert_eq!(q.pop(), None);\n+        let (mut consumer, mut producer) = queue(0);\n+        producer.push(1i);\n+        producer.push(2);\n+        assert_eq!(consumer.pop(), Some(1i));\n+        assert_eq!(consumer.pop(), Some(2));\n+        assert_eq!(consumer.pop(), None);\n+        producer.push(3);\n+        producer.push(4);\n+        assert_eq!(consumer.pop(), Some(3));\n+        assert_eq!(consumer.pop(), Some(4));\n+        assert_eq!(consumer.pop(), None);\n+    }\n+\n+    // This behaviour is blocked by the type system if using the safe constructor\n+    #[test]\n+    fn pop_peeked_unchecked() {\n+        let q = unsafe { Queue::new(0) };\n+        q.push(vec![1i]);\n+        q.push(vec![2]);\n+        let peeked = q.peek().unwrap();\n+\n+        assert_eq!(*peeked, vec![1]);\n+        assert_eq!(q.pop(), Some(vec![1]));\n+\n+        assert_eq!(*peeked, vec![1]);\n+        q.push(vec![7]);\n+\n+        // Note: This should actually expect 1, but this test is to highlight\n+        // the unsafety allowed by the unchecked usage. A Rust user would not\n+        // expect their peeked value to mutate like this without the type system\n+        // complaining.\n+        assert_eq!(*peeked, vec![7]);\n+    }\n+\n+    #[test]\n+    fn peek() {\n+        let (mut consumer, mut producer) = queue(0);\n+        producer.push(vec![1i]);\n+\n+        // Ensure the borrowchecker works\n+        match consumer.peek() {\n+            Some(vec) => match vec.as_slice() {\n+                // Note that `pop` is not allowed here due to borrow\n+                [1] => {}\n+                _ => return\n+            },\n+            None => unreachable!()\n+        }\n+\n+        consumer.pop();\n     }\n \n     #[test]\n     fn drop_full() {\n-        let q = Queue::new(0);\n-        q.push(box 1i);\n-        q.push(box 2i);\n+        let (_, mut producer) = queue(0);\n+        producer.push(box 1i);\n+        producer.push(box 2i);\n     }\n \n     #[test]\n     fn smoke_bound() {\n-        let q = Queue::new(1);\n-        q.push(1i);\n-        q.push(2);\n-        assert_eq!(q.pop(), Some(1));\n-        assert_eq!(q.pop(), Some(2));\n-        assert_eq!(q.pop(), None);\n-        q.push(3);\n-        q.push(4);\n-        assert_eq!(q.pop(), Some(3));\n-        assert_eq!(q.pop(), Some(4));\n-        assert_eq!(q.pop(), None);\n+        let (mut consumer, mut producer) = queue(1);\n+        producer.push(1i);\n+        producer.push(2);\n+        assert_eq!(consumer.pop(), Some(1));\n+        assert_eq!(consumer.pop(), Some(2));\n+        assert_eq!(consumer.pop(), None);\n+        producer.push(3);\n+        producer.push(4);\n+        assert_eq!(consumer.pop(), Some(3));\n+        assert_eq!(consumer.pop(), Some(4));\n+        assert_eq!(consumer.pop(), None);\n     }\n \n     #[test]\n@@ -277,13 +382,15 @@ mod test {\n         stress_bound(1);\n \n         fn stress_bound(bound: uint) {\n-            let a = Arc::new(Queue::new(bound));\n-            let b = a.clone();\n+            let (consumer, mut producer) = queue(bound);\n+\n             let (tx, rx) = channel();\n             native::task::spawn(proc() {\n+                // Move the consumer to a local mutable slot\n+                let mut consumer = consumer;\n                 for _ in range(0u, 100000) {\n                     loop {\n-                        match b.pop() {\n+                        match consumer.pop() {\n                             Some(1i) => break,\n                             Some(_) => fail!(),\n                             None => {}\n@@ -293,7 +400,7 @@ mod test {\n                 tx.send(());\n             });\n             for _ in range(0i, 100000) {\n-                a.push(1);\n+                producer.push(1);\n             }\n             rx.recv();\n         }"}]}