{"sha": "db81a7f669773a1f0bb495e6965f7da64a833ae4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiODFhN2Y2Njk3NzNhMWYwYmI0OTVlNjk2NWY3ZGE2NGE4MzNhZTQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-30T23:18:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-30T23:18:38Z"}, "message": "Merge pull request #2216 from topecongiro/issue-2214\n\nPreserve trailing comma on array inside macro call", "tree": {"sha": "9d2bd6541ea0c49f41c53d8c793bc214a498db12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d2bd6541ea0c49f41c53d8c793bc214a498db12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db81a7f669773a1f0bb495e6965f7da64a833ae4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaIJHOCRBK7hj4Ov3rIwAAdHIIAI6WieqJJneL0RE5OHmfCZYD\ns8WKCcSkgtxc/NFOhyNtYC6z14TxMHqq9ysM1ub02zDDJwvb5T9cwTyWzQvOzkU3\n7zxCHS/OSx3muhwoR4F3sNf4AB5zEm79J5ZPg0MQ6+2yCNV6xcqQVtN3LURcj8NN\n8GPdvovaZ5La/PmJYvuYIHcAP3lhcc+rx1Po4IvZ1zwPK4D3l603V2w7gzph+0c1\nM1D3c1Sr2b2WsLZG2597wuXr8JjCWpVJWUB0BhU6+ny3juEkvesz0JpcWQeCz3iW\nXYHeHJKODiPmyG21+OfTJ5Qkb/0jQAa8UzyxYjjL5exjcKHIqk2N6b0sYpMEVi0=\n=eqFe\n-----END PGP SIGNATURE-----\n", "payload": "tree 9d2bd6541ea0c49f41c53d8c793bc214a498db12\nparent 076bc2332f6dcd349ce7b9391ecf5523b21889e4\nparent b33df45d04aeda1e8ed7923b855269eb63306a67\nauthor Nick Cameron <nrc@ncameron.org> 1512083918 +1300\ncommitter GitHub <noreply@github.com> 1512083918 +1300\n\nMerge pull request #2216 from topecongiro/issue-2214\n\nPreserve trailing comma on array inside macro call"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db81a7f669773a1f0bb495e6965f7da64a833ae4", "html_url": "https://github.com/rust-lang/rust/commit/db81a7f669773a1f0bb495e6965f7da64a833ae4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db81a7f669773a1f0bb495e6965f7da64a833ae4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "076bc2332f6dcd349ce7b9391ecf5523b21889e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/076bc2332f6dcd349ce7b9391ecf5523b21889e4", "html_url": "https://github.com/rust-lang/rust/commit/076bc2332f6dcd349ce7b9391ecf5523b21889e4"}, {"sha": "b33df45d04aeda1e8ed7923b855269eb63306a67", "url": "https://api.github.com/repos/rust-lang/rust/commits/b33df45d04aeda1e8ed7923b855269eb63306a67", "html_url": "https://github.com/rust-lang/rust/commit/b33df45d04aeda1e8ed7923b855269eb63306a67"}], "stats": {"total": 72, "additions": 49, "deletions": 23}, "files": [{"sha": "8e6d811e87bad91f28a862f368af006dc1649ee8", "filename": "src/expr.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/db81a7f669773a1f0bb495e6965f7da64a833ae4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db81a7f669773a1f0bb495e6965f7da64a833ae4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=db81a7f669773a1f0bb495e6965f7da64a833ae4", "patch": "@@ -63,7 +63,7 @@ pub fn format_expr(\n \n     let expr_rw = match expr.node {\n         ast::ExprKind::Array(ref expr_vec) => rewrite_array(\n-            expr_vec.iter().map(|e| &**e),\n+            &ptr_vec_to_ref_vec(expr_vec),\n             mk_sp(context.codemap.span_after(expr.span, \"[\"), expr.span.hi()),\n             context,\n             shape,\n@@ -397,16 +397,13 @@ where\n     ))\n }\n \n-pub fn rewrite_array<'a, I>(\n-    expr_iter: I,\n+pub fn rewrite_array<T: Rewrite + Spanned + ToExpr>(\n+    exprs: &[&T],\n     span: Span,\n     context: &RewriteContext,\n     shape: Shape,\n     trailing_comma: bool,\n-) -> Option<String>\n-where\n-    I: Iterator<Item = &'a ast::Expr>,\n-{\n+) -> Option<String> {\n     let bracket_size = if context.config.spaces_within_parens_and_brackets() {\n         2 // \"[ \"\n     } else {\n@@ -426,11 +423,11 @@ where\n \n     let items = itemize_list(\n         context.codemap,\n-        expr_iter,\n+        exprs.iter(),\n         \"]\",\n         \",\",\n-        |item| item.span.lo(),\n-        |item| item.span.hi(),\n+        |item| item.span().lo(),\n+        |item| item.span().hi(),\n         |item| item.rewrite(context, nested_shape),\n         span.lo(),\n         span.hi(),\n@@ -484,7 +481,17 @@ where\n         separator: \",\",\n         trailing_separator: if trailing_comma {\n             SeparatorTactic::Always\n-        } else if context.inside_macro || context.config.indent_style() == IndentStyle::Visual {\n+        } else if context.inside_macro && !exprs.is_empty() {\n+            let ends_with_bracket = context.snippet(span).ends_with(']');\n+            let bracket_offset = if ends_with_bracket { 1 } else { 0 };\n+            let snippet = context.snippet(mk_sp(span.lo(), span.hi() - BytePos(bracket_offset)));\n+            let last_char_index = snippet.rfind(|c: char| !c.is_whitespace())?;\n+            if &snippet[last_char_index..last_char_index + 1] == \",\" {\n+                SeparatorTactic::Always\n+            } else {\n+                SeparatorTactic::Never\n+            }\n+        } else if context.config.indent_style() == IndentStyle::Visual {\n             SeparatorTactic::Never\n         } else {\n             SeparatorTactic::Vertical"}, {"sha": "f53acbc024a24d299bc638d2e79ddb75e2291cb5", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db81a7f669773a1f0bb495e6965f7da64a833ae4/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db81a7f669773a1f0bb495e6965f7da64a833ae4/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=db81a7f669773a1f0bb495e6965f7da64a833ae4", "patch": "@@ -257,24 +257,14 @@ pub fn rewrite_macro(\n                     trailing_comma = false;\n                 }\n                 // Convert `MacroArg` into `ast::Expr`, as `rewrite_array` only accepts the latter.\n-                let expr_vec: Vec<_> = arg_vec\n-                    .iter()\n-                    .filter_map(|e| match *e {\n-                        MacroArg::Expr(ref e) => Some(e.clone()),\n-                        _ => None,\n-                    })\n-                    .collect();\n-                if expr_vec.len() != arg_vec.len() {\n-                    return Some(context.snippet(mac.span));\n-                }\n                 let sp = mk_sp(\n                     context\n                         .codemap\n                         .span_after(mac.span, original_style.opener()),\n                     mac.span.hi() - BytePos(1),\n                 );\n-                let rewrite =\n-                    rewrite_array(expr_vec.iter(), sp, context, mac_shape, trailing_comma)?;\n+                let arg_vec = &arg_vec.iter().map(|e| &*e).collect::<Vec<_>>()[..];\n+                let rewrite = rewrite_array(arg_vec, sp, context, mac_shape, trailing_comma)?;\n \n                 Some(format!(\"{}{}\", macro_name, rewrite))\n             }"}, {"sha": "c8f769062542617600a25d42237c685a830ac814", "filename": "tests/source/macros.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/db81a7f669773a1f0bb495e6965f7da64a833ae4/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db81a7f669773a1f0bb495e6965f7da64a833ae4/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=db81a7f669773a1f0bb495e6965f7da64a833ae4", "patch": "@@ -204,3 +204,15 @@ macro_rules! try_opt {\n         None => { return None; }\n     })\n }\n+\n+// #2214\n+// macro call whose argument is an array with trailing comma.\n+fn issue2214() {\n+make_test!(str_searcher_ascii_haystack, \"bb\", \"abbcbbd\", [\n+    Reject(0, 1),\n+    Match (1, 3),\n+    Reject(3, 4),\n+    Match (4, 6),\n+    Reject(6, 7),\n+]);\n+}"}, {"sha": "25156ff21fdaed6cc19b9aa8f0d6716dbddd0f41", "filename": "tests/target/macros.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/db81a7f669773a1f0bb495e6965f7da64a833ae4/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db81a7f669773a1f0bb495e6965f7da64a833ae4/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=db81a7f669773a1f0bb495e6965f7da64a833ae4", "patch": "@@ -253,3 +253,20 @@ macro_rules! try_opt {\n         None => { return None; }\n     })\n }\n+\n+// #2214\n+// macro call whose argument is an array with trailing comma.\n+fn issue2214() {\n+    make_test!(\n+        str_searcher_ascii_haystack,\n+        \"bb\",\n+        \"abbcbbd\",\n+        [\n+            Reject(0, 1),\n+            Match(1, 3),\n+            Reject(3, 4),\n+            Match(4, 6),\n+            Reject(6, 7),\n+        ]\n+    );\n+}"}]}