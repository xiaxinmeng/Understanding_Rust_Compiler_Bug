{"sha": "963184bbb670c1ffa97fc28a98cd5e8473118859", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2MzE4NGJiYjY3MGMxZmZhOTdmYzI4YTk4Y2Q1ZTg0NzMxMTg4NTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-18T20:49:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-18T20:49:22Z"}, "message": "Auto merge of #60093 - GuillaumeGomez:fix-attrs-pos, r=Manishearth\n\nFix attrs pos\n\nFixes #60042.\n\nScreenshot:\n\n<img width=\"438\" alt=\"Screenshot 2019-05-12 at 15 02 25\" src=\"https://user-images.githubusercontent.com/3050060/57582606-1455ec00-74c7-11e9-9d4e-5ec4da4de7dd.png\">\n\nr? @rust-lang/rustdoc", "tree": {"sha": "bf29f149b0a87794740f86d303fbc96c299e10de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf29f149b0a87794740f86d303fbc96c299e10de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/963184bbb670c1ffa97fc28a98cd5e8473118859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/963184bbb670c1ffa97fc28a98cd5e8473118859", "html_url": "https://github.com/rust-lang/rust/commit/963184bbb670c1ffa97fc28a98cd5e8473118859", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/963184bbb670c1ffa97fc28a98cd5e8473118859/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f40ad9990ead688f6a0cd97efa686c0fb455386", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f40ad9990ead688f6a0cd97efa686c0fb455386", "html_url": "https://github.com/rust-lang/rust/commit/0f40ad9990ead688f6a0cd97efa686c0fb455386"}, {"sha": "180b859b265679cce46dac331b4b4bac47a0286d", "url": "https://api.github.com/repos/rust-lang/rust/commits/180b859b265679cce46dac331b4b4bac47a0286d", "html_url": "https://github.com/rust-lang/rust/commit/180b859b265679cce46dac331b4b4bac47a0286d"}], "stats": {"total": 81, "additions": 51, "deletions": 30}, "files": [{"sha": "3978f10367db0876da08425adf09ff63a3062110", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/963184bbb670c1ffa97fc28a98cd5e8473118859/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963184bbb670c1ffa97fc28a98cd5e8473118859/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=963184bbb670c1ffa97fc28a98cd5e8473118859", "patch": "@@ -2992,7 +2992,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n fn item_constant(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n                  c: &clean::Constant) -> fmt::Result {\n     write!(w, \"<pre class='rust const'>\")?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(w, \"{vis}const \\\n                {name}: {typ}</pre>\",\n            vis = VisSpace(&it.visibility),\n@@ -3004,7 +3004,7 @@ fn item_constant(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n fn item_static(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n                s: &clean::Static) -> fmt::Result {\n     write!(w, \"<pre class='rust static'>\")?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(w, \"{vis}static {mutability}\\\n                {name}: {typ}</pre>\",\n            vis = VisSpace(&it.visibility),\n@@ -3027,7 +3027,7 @@ fn item_function(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n         f.generics\n     ).len();\n     write!(w, \"{}<pre class='rust fn'>\", render_spotlight_traits(it)?)?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(w,\n            \"{vis}{constness}{unsafety}{asyncness}{abi}fn \\\n            {name}{generics}{decl}{where_clause}</pre>\",\n@@ -3116,7 +3116,7 @@ fn item_trait(\n     // Output the trait definition\n     wrap_into_docblock(w, |w| {\n         write!(w, \"<pre class='rust trait'>\")?;\n-        render_attributes(w, it)?;\n+        render_attributes(w, it, true)?;\n         write!(w, \"{}{}{}trait {}{}{}\",\n                VisSpace(&it.visibility),\n                UnsafetySpace(t.unsafety),\n@@ -3379,8 +3379,10 @@ fn assoc_const(w: &mut fmt::Formatter<'_>,\n                it: &clean::Item,\n                ty: &clean::Type,\n                _default: Option<&String>,\n-               link: AssocItemLink<'_>) -> fmt::Result {\n-    write!(w, \"{}const <a href='{}' class=\\\"constant\\\"><b>{}</b></a>: {}\",\n+               link: AssocItemLink<'_>,\n+               extra: &str) -> fmt::Result {\n+    write!(w, \"{}{}const <a href='{}' class=\\\"constant\\\"><b>{}</b></a>: {}\",\n+           extra,\n            VisSpace(&it.visibility),\n            naive_assoc_href(it, link),\n            it.name.as_ref().unwrap(),\n@@ -3391,8 +3393,10 @@ fn assoc_const(w: &mut fmt::Formatter<'_>,\n fn assoc_type<W: fmt::Write>(w: &mut W, it: &clean::Item,\n                              bounds: &[clean::GenericBound],\n                              default: Option<&clean::Type>,\n-                             link: AssocItemLink<'_>) -> fmt::Result {\n-    write!(w, \"type <a href='{}' class=\\\"type\\\">{}</a>\",\n+                             link: AssocItemLink<'_>,\n+                             extra: &str) -> fmt::Result {\n+    write!(w, \"{}type <a href='{}' class=\\\"type\\\">{}</a>\",\n+           extra,\n            naive_assoc_href(it, link),\n            it.name.as_ref().unwrap())?;\n     if !bounds.is_empty() {\n@@ -3469,7 +3473,7 @@ fn render_assoc_item(w: &mut fmt::Formatter<'_>,\n         } else {\n             (0, true)\n         };\n-        render_attributes(w, meth)?;\n+        render_attributes(w, meth, false)?;\n         write!(w, \"{}{}{}{}{}{}{}fn <a href='{href}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n                if parent == ItemType::Trait { \"    \" } else { \"\" },\n@@ -3503,10 +3507,12 @@ fn render_assoc_item(w: &mut fmt::Formatter<'_>,\n             method(w, item, m.header, &m.generics, &m.decl, link, parent)\n         }\n         clean::AssociatedConstItem(ref ty, ref default) => {\n-            assoc_const(w, item, ty, default.as_ref(), link)\n+            assoc_const(w, item, ty, default.as_ref(), link,\n+                        if parent == ItemType::Trait { \"    \" } else { \"\" })\n         }\n         clean::AssociatedTypeItem(ref bounds, ref default) => {\n-            assoc_type(w, item, bounds, default.as_ref(), link)\n+            assoc_type(w, item, bounds, default.as_ref(), link,\n+                       if parent == ItemType::Trait { \"    \" } else { \"\" })\n         }\n         _ => panic!(\"render_assoc_item called on non-associated-item\")\n     }\n@@ -3516,7 +3522,7 @@ fn item_struct(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n                s: &clean::Struct) -> fmt::Result {\n     wrap_into_docblock(w, |w| {\n         write!(w, \"<pre class='rust struct'>\")?;\n-        render_attributes(w, it)?;\n+        render_attributes(w, it, true)?;\n         render_struct(w,\n                       it,\n                       Some(&s.generics),\n@@ -3567,7 +3573,7 @@ fn item_union(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n                s: &clean::Union) -> fmt::Result {\n     wrap_into_docblock(w, |w| {\n         write!(w, \"<pre class='rust union'>\")?;\n-        render_attributes(w, it)?;\n+        render_attributes(w, it, true)?;\n         render_union(w,\n                      it,\n                      Some(&s.generics),\n@@ -3612,7 +3618,7 @@ fn item_enum(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n              e: &clean::Enum) -> fmt::Result {\n     wrap_into_docblock(w, |w| {\n         write!(w, \"<pre class='rust enum'>\")?;\n-        render_attributes(w, it)?;\n+        render_attributes(w, it, true)?;\n         write!(w, \"{}enum {}{}{}\",\n                VisSpace(&it.visibility),\n                it.name.as_ref().unwrap(),\n@@ -3773,7 +3779,15 @@ const ATTRIBUTE_WHITELIST: &'static [Symbol] = &[\n     sym::non_exhaustive\n ];\n \n-fn render_attributes(w: &mut dyn fmt::Write, it: &clean::Item) -> fmt::Result {\n+// The `top` parameter is used when generating the item declaration to ensure it doesn't have a\n+// left padding. For example:\n+//\n+// #[foo] <----- \"top\" attribute\n+// struct Foo {\n+//     #[bar] <---- not \"top\" attribute\n+//     bar: usize,\n+// }\n+fn render_attributes(w: &mut dyn fmt::Write, it: &clean::Item, top: bool) -> fmt::Result {\n     let mut attrs = String::new();\n \n     for attr in &it.attrs.other_attrs {\n@@ -3785,7 +3799,8 @@ fn render_attributes(w: &mut dyn fmt::Write, it: &clean::Item) -> fmt::Result {\n         }\n     }\n     if attrs.len() > 0 {\n-        write!(w, \"<div class=\\\"docblock attributes\\\">{}</div>\", &attrs)?;\n+        write!(w, \"<div class=\\\"docblock attributes{}\\\">{}</div>\",\n+               if top { \" top-attr\" } else { \"\" }, &attrs)?;\n     }\n     Ok(())\n }\n@@ -4118,7 +4133,8 @@ fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n                             out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n                             assoc_type(&mut out, it, &[],\n                                        Some(&tydef.type_),\n-                                       AssocItemLink::GotoSource(t_did, &FxHashSet::default()))?;\n+                                       AssocItemLink::GotoSource(t_did, &FxHashSet::default()),\n+                                       \"\")?;\n                             out.push_str(\";</span>\");\n                         }\n                     }\n@@ -4158,7 +4174,8 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n                     if let clean::TypedefItem(ref tydef, _) = it.inner {\n                         write!(w, \"<span class=\\\"where fmt-newline\\\">  \")?;\n                         assoc_type(w, it, &vec![], Some(&tydef.type_),\n-                                   AssocItemLink::Anchor(None))?;\n+                                   AssocItemLink::Anchor(None),\n+                                   \"\")?;\n                         write!(w, \";</span>\")?;\n                     }\n                 }\n@@ -4228,15 +4245,15 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<code id='{}'>\", ns_id)?;\n-                assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id))?;\n+                assoc_type(w, item, &Vec::new(), Some(&tydef.type_), link.anchor(&id), \"\")?;\n                 write!(w, \"</code></h4>\")?;\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n                 let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<code id='{}'>\", ns_id)?;\n-                assoc_const(w, item, ty, default.as_ref(), link.anchor(&id))?;\n+                assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\")?;\n                 write!(w, \"</code>\")?;\n                 render_stability_since_raw(w, item.stable_since(), outer_version)?;\n                 if let Some(l) = (Item { cx, item }).src_href() {\n@@ -4250,7 +4267,7 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n                 let ns_id = cx.derive_id(format!(\"{}.{}\", name, item_type.name_space()));\n                 write!(w, \"<h4 id='{}' class=\\\"{}{}\\\">\", id, item_type, extra_class)?;\n                 write!(w, \"<code id='{}'>\", ns_id)?;\n-                assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id))?;\n+                assoc_type(w, item, bounds, default.as_ref(), link.anchor(&id), \"\")?;\n                 write!(w, \"</code></h4>\")?;\n             }\n             clean::StrippedItem(..) => return Ok(()),\n@@ -4338,7 +4355,7 @@ fn item_existential(\n     t: &clean::Existential,\n ) -> fmt::Result {\n     write!(w, \"<pre class='rust existential'>\")?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(w, \"existential type {}{}{where_clause}: {bounds};</pre>\",\n            it.name.as_ref().unwrap(),\n            t.generics,\n@@ -4357,7 +4374,7 @@ fn item_existential(\n fn item_trait_alias(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n                     t: &clean::TraitAlias) -> fmt::Result {\n     write!(w, \"<pre class='rust trait-alias'>\")?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(w, \"trait {}{}{} = {};</pre>\",\n            it.name.as_ref().unwrap(),\n            t.generics,\n@@ -4376,7 +4393,7 @@ fn item_trait_alias(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n fn item_typedef(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n                 t: &clean::Typedef) -> fmt::Result {\n     write!(w, \"<pre class='rust typedef'>\")?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(w, \"type {}{}{where_clause} = {type_};</pre>\",\n            it.name.as_ref().unwrap(),\n            t.generics,\n@@ -4394,7 +4411,7 @@ fn item_typedef(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item,\n \n fn item_foreign_type(w: &mut fmt::Formatter<'_>, cx: &Context, it: &clean::Item) -> fmt::Result {\n     writeln!(w, \"<pre class='rust foreigntype'>extern {{\")?;\n-    render_attributes(w, it)?;\n+    render_attributes(w, it, false)?;\n     write!(\n         w,\n         \"    {}type {};\\n}}</pre>\","}, {"sha": "72a01a49bc66dc2d8ddaf1cda6195062f2bea2eb", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/963184bbb670c1ffa97fc28a98cd5e8473118859/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/963184bbb670c1ffa97fc28a98cd5e8473118859/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=963184bbb670c1ffa97fc28a98cd5e8473118859", "patch": "@@ -2325,7 +2325,11 @@ if (!DOMTokenList.prototype.remove) {\n     }\n     var attributesToggle = createToggleWrapper(createSimpleToggle(false));\n     onEachLazy(main.getElementsByClassName(\"attributes\"), function(i_e) {\n-        i_e.parentNode.insertBefore(attributesToggle.cloneNode(true), i_e);\n+        var attr_tog = attributesToggle.cloneNode(true);\n+        if (hasClass(i_e, \"top-attr\") === true) {\n+            addClass(attr_tog, \"top-attr\");\n+        }\n+        i_e.parentNode.insertBefore(attr_tog, i_e);\n         itemAttributesFunc(i_e);\n     });\n "}, {"sha": "522b6d60a18d82facc2d3a32d394fde68eb2dd01", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/963184bbb670c1ffa97fc28a98cd5e8473118859/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/963184bbb670c1ffa97fc28a98cd5e8473118859/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=963184bbb670c1ffa97fc28a98cd5e8473118859", "patch": "@@ -1587,10 +1587,10 @@ div.name.expand::before {\n }\n \n /* This part is to fix the \"Expand attributes\" part in the type declaration. */\n-.type-decl > pre > :first-child {\n+.type-decl > pre > .toggle-wrapper.toggle-attributes.top-attr {\n \tmargin-left: 0 !important;\n }\n-.type-decl > pre > :nth-child(2) {\n+.type-decl > pre > .docblock.attributes.top-attr {\n \tmargin-left: 1.8em !important;\n }\n .type-decl > pre > .toggle-attributes {"}, {"sha": "6ecdad3ec0000aa04592ec1b0354e132198d5113", "filename": "src/test/rustdoc/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/963184bbb670c1ffa97fc28a98cd5e8473118859/src%2Ftest%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/963184bbb670c1ffa97fc28a98cd5e8473118859/src%2Ftest%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fattributes.rs?ref=963184bbb670c1ffa97fc28a98cd5e8473118859", "patch": "@@ -8,8 +8,8 @@ pub extern \"C\" fn f() {}\n #[export_name = \"bar\"]\n pub extern \"C\" fn g() {}\n \n-// @has foo/enum.Foo.html '//*[@class=\"docblock attributes\"]' '#[repr(i64)]'\n-// @has foo/enum.Foo.html '//*[@class=\"docblock attributes\"]' '#[must_use]'\n+// @has foo/enum.Foo.html '//*[@class=\"docblock attributes top-attr\"]' '#[repr(i64)]'\n+// @has foo/enum.Foo.html '//*[@class=\"docblock attributes top-attr\"]' '#[must_use]'\n #[repr(i64)]\n #[must_use]\n pub enum Foo {"}]}