{"sha": "1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyNDFhODhmYTlkZGY1ZTY0NWQxZTZlOTNlMDRjNDM1YmJmMTVjZDQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-15T14:58:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-03-17T20:28:53Z"}, "message": "Minor fixups to fix tidy errors", "tree": {"sha": "987da130316d1be22082895a02b1adb6cb35e677", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/987da130316d1be22082895a02b1adb6cb35e677"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "html_url": "https://github.com/rust-lang/rust/commit/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f4a1bd984091ffb8f87f9440e2483f94b44a20", "html_url": "https://github.com/rust-lang/rust/commit/a8f4a1bd984091ffb8f87f9440e2483f94b44a20"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "1d616233881b4bb955247d17304323bed0e7d4e0", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "patch": "@@ -332,7 +332,10 @@ impl<T> Arc<T> {\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         // To find the corresponding pointer to the `ArcInner` we need to subtract the offset of the\n         // `data` field from the pointer.\n-        Arc { ptr: Shared::new((ptr as *const u8).offset(-offset_of!(ArcInner<T>, data)) as *const _) }\n+        let ptr = (ptr as *const u8).offset(-offset_of!(ArcInner<T>, data));\n+        Arc {\n+            ptr: Shared::new(ptr as *const _),\n+        }\n     }\n }\n "}, {"sha": "53fe6b4bc9f4f6bbbbe1dc43d3fcce6e6085ee23", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "patch": "@@ -338,6 +338,7 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n }\n \n /// An iterator over a sub-range of BTreeMap's entries.\n+#[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n     back: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n@@ -351,6 +352,7 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Range<'a, K, V>\n }\n \n /// A mutable iterator over a sub-range of BTreeMap's entries.\n+#[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct RangeMut<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,\n     back: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,"}, {"sha": "72d25f87bca9515858b9765f7dc047d90841ddc1", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "patch": "@@ -113,6 +113,7 @@ pub struct IntoIter<T> {\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`range`]: struct.BTreeSet.html#method.range\n #[derive(Debug)]\n+#[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, T: 'a> {\n     iter: ::btree_map::Range<'a, T, ()>,\n }\n@@ -264,8 +265,6 @@ impl<T: Ord> BTreeSet<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(btree_range, collections_bound)]\n-    ///\n     /// use std::collections::BTreeSet;\n     /// use std::collections::Bound::Included;\n     ///\n@@ -278,9 +277,7 @@ impl<T: Ord> BTreeSet<T> {\n     /// }\n     /// assert_eq!(Some(&5), set.range(4..).next());\n     /// ```\n-    #[unstable(feature = \"btree_range\",\n-               reason = \"matches collection reform specification, waiting for dust to settle\",\n-               issue = \"27787\")]\n+    #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n     pub fn range<K: ?Sized, R>(&self, range: R) -> Range<T>\n         where K: Ord, T: Borrow<K>, R: RangeArgument<K>\n     {"}, {"sha": "31e4d001397bf51fc93b148eca34d09a1bb98d52", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "patch": "@@ -29,7 +29,6 @@ pub trait RangeArgument<T: ?Sized> {\n     /// ```\n     /// #![feature(collections)]\n     /// #![feature(collections_range)]\n-    /// #![feature(collections_bound)]\n     ///\n     /// extern crate collections;\n     ///\n@@ -52,7 +51,6 @@ pub trait RangeArgument<T: ?Sized> {\n     /// ```\n     /// #![feature(collections)]\n     /// #![feature(collections_range)]\n-    /// #![feature(collections_bound)]\n     ///\n     /// extern crate collections;\n     ///"}, {"sha": "618eb386c0f4c88887b1baab32c2cc553ce64a69", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "patch": "@@ -13,11 +13,9 @@\n #![feature(binary_heap_extras)]\n #![feature(binary_heap_peek_mut_pop)]\n #![feature(box_syntax)]\n-#![feature(btree_range)]\n #![feature(inclusive_range_syntax)]\n #![feature(collection_placement)]\n #![feature(collections)]\n-#![feature(collections_bound)]\n #![feature(const_fn)]\n #![feature(exact_size_is_empty)]\n #![feature(pattern)]"}, {"sha": "909e44df20abbb67d8edf0eb749fba5791600a6d", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "patch": "@@ -658,7 +658,6 @@ impl<T: ?Sized> Eq for *mut T {}\n /// # Examples\n ///\n /// ```\n-/// #![feature(ptr_eq)]\n /// use std::ptr;\n ///\n /// let five = 5;\n@@ -673,7 +672,7 @@ impl<T: ?Sized> Eq for *mut T {}\n /// assert!(ptr::eq(five_ref, same_five_ref));\n /// assert!(!ptr::eq(five_ref, other_five_ref));\n /// ```\n-#[unstable(feature = \"ptr_eq\", reason = \"newly added\", issue = \"36497\")]\n+#[stable(feature = \"ptr_eq\", since = \"1.17.0\")]\n #[inline]\n pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {\n     a == b"}, {"sha": "d84a1e227560ea45383e42759c491dee9c8564dd", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=1241a88fa9ddf5e645d1e6e93e04c435bbf15cd4", "patch": "@@ -23,17 +23,13 @@\n #![feature(nonzero)]\n #![feature(rand)]\n #![feature(raw)]\n-#![feature(result_expect_err)]\n #![feature(sip_hash_13)]\n #![feature(slice_patterns)]\n #![feature(step_by)]\n #![feature(test)]\n #![feature(try_from)]\n #![feature(unicode)]\n #![feature(unique)]\n-#![feature(ordering_chaining)]\n-#![feature(ptr_unaligned)]\n-#![feature(move_cell)]\n #![feature(fmt_internals)]\n \n extern crate core;"}]}