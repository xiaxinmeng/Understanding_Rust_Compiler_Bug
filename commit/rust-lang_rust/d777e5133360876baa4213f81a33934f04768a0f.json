{"sha": "d777e5133360876baa4213f81a33934f04768a0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NzdlNTEzMzM2MDg3NmJhYTQyMTNmODFhMzM5MzRmMDQ3NjhhMGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-29T23:00:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-02T01:18:29Z"}, "message": "Demode reinterpret_cast", "tree": {"sha": "13d3daefe774fc627d454cda2a043b0f95b57072", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13d3daefe774fc627d454cda2a043b0f95b57072"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d777e5133360876baa4213f81a33934f04768a0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d777e5133360876baa4213f81a33934f04768a0f", "html_url": "https://github.com/rust-lang/rust/commit/d777e5133360876baa4213f81a33934f04768a0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d777e5133360876baa4213f81a33934f04768a0f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bfc80f8fb5b764d0e288a41960876fbbe662af2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfc80f8fb5b764d0e288a41960876fbbe662af2", "html_url": "https://github.com/rust-lang/rust/commit/6bfc80f8fb5b764d0e288a41960876fbbe662af2"}], "stats": {"total": 295, "additions": 148, "deletions": 147}, "files": [{"sha": "54f3ff0fc82434e870c678ecc59ba9de74ad75ea", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -29,7 +29,7 @@ extern mod rusti {\n pure fn capacity<T>(&&v: @[const T]) -> uint {\n     unsafe {\n         let repr: **unsafe::VecRepr =\n-            ::unsafe::reinterpret_cast(addr_of(v));\n+            ::unsafe::reinterpret_cast(&addr_of(v));\n         (**repr).alloc / sys::size_of::<T>()\n     }\n }\n@@ -154,13 +154,13 @@ mod unsafe {\n      */\n     #[inline(always)]\n     unsafe fn set_len<T>(&&v: @[const T], new_len: uint) {\n-        let repr: **VecRepr = ::unsafe::reinterpret_cast(addr_of(v));\n+        let repr: **VecRepr = ::unsafe::reinterpret_cast(&addr_of(v));\n         (**repr).fill = new_len * sys::size_of::<T>();\n     }\n \n     #[inline(always)]\n     unsafe fn push<T>(&v: @[const T], +initval: T) {\n-        let repr: **VecRepr = ::unsafe::reinterpret_cast(addr_of(v));\n+        let repr: **VecRepr = ::unsafe::reinterpret_cast(&addr_of(v));\n         let fill = (**repr).fill;\n         if (**repr).alloc > fill {\n             push_fast(v, initval);\n@@ -172,7 +172,7 @@ mod unsafe {\n     // This doesn't bother to make sure we have space.\n     #[inline(always)] // really pretty please\n     unsafe fn push_fast<T>(&v: @[const T], +initval: T) {\n-        let repr: **VecRepr = ::unsafe::reinterpret_cast(addr_of(v));\n+        let repr: **VecRepr = ::unsafe::reinterpret_cast(&addr_of(v));\n         let fill = (**repr).fill;\n         (**repr).fill += sys::size_of::<T>();\n         let p = ptr::addr_of((**repr).data);"}, {"sha": "0fffec961dfb073fa540192f528bcac16aeb1be8", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -81,7 +81,7 @@ fn unwrap<A>(+d: DVec<A>) -> ~[mut A] {\n priv impl<A> DVec<A> {\n     pure fn check_not_borrowed() {\n         unsafe {\n-            let data: *() = unsafe::reinterpret_cast(self.data);\n+            let data: *() = unsafe::reinterpret_cast(&self.data);\n             if data.is_null() {\n                 fail ~\"Recursive use of dvec\";\n             }\n@@ -91,9 +91,9 @@ priv impl<A> DVec<A> {\n     #[inline(always)]\n     fn check_out<B>(f: fn(-~[mut A]) -> B) -> B {\n         unsafe {\n-            let mut data = unsafe::reinterpret_cast(null::<()>());\n+            let mut data = unsafe::reinterpret_cast(&null::<()>());\n             data <-> self.data;\n-            let data_ptr: *() = unsafe::reinterpret_cast(data);\n+            let data_ptr: *() = unsafe::reinterpret_cast(&data);\n             if data_ptr.is_null() { fail ~\"Recursive use of dvec\"; }\n             return f(data);\n         }\n@@ -156,9 +156,9 @@ impl<A> DVec<A> {\n     /// Insert a single item at the front of the list\n     fn unshift(-t: A) {\n         unsafe {\n-            let mut data = unsafe::reinterpret_cast(null::<()>());\n+            let mut data = unsafe::reinterpret_cast(&null::<()>());\n             data <-> self.data;\n-            let data_ptr: *() = unsafe::reinterpret_cast(data);\n+            let data_ptr: *() = unsafe::reinterpret_cast(&data);\n             if data_ptr.is_null() { fail ~\"Recursive use of dvec\"; }\n             log(error, ~\"a\");\n             self.data <- ~[mut t];"}, {"sha": "4f9ee06145f91ad8fabab5afdb5a664d33aedcec", "filename": "src/libcore/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -222,10 +222,10 @@ mod global_env {\n         fn getenv(n: &str) -> Option<~str> {\n             unsafe {\n                 let s = str::as_c_str(n, libc::getenv);\n-                return if ptr::null::<u8>() == unsafe::reinterpret_cast(s) {\n+                return if ptr::null::<u8>() == unsafe::reinterpret_cast(&s) {\n                     option::None::<~str>\n                 } else {\n-                    let s = unsafe::reinterpret_cast(s);\n+                    let s = unsafe::reinterpret_cast(&s);\n                     option::Some::<~str>(str::unsafe::from_buf(s))\n                 };\n             }\n@@ -595,7 +595,7 @@ fn make_dir(p: &Path, mode: c_int) -> bool {\n         import win32::*;\n         // FIXME: turn mode into something useful? #2623\n         do as_utf16_p(p.to_str()) |buf| {\n-            CreateDirectoryW(buf, unsafe { unsafe::reinterpret_cast(0) })\n+            CreateDirectoryW(buf, unsafe { unsafe::reinterpret_cast(&0) })\n                 != (0 as BOOL)\n         }\n     }"}, {"sha": "077095a70361e38bbf4841e610c2e3d2882061e1", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -189,11 +189,11 @@ struct PacketHeader {\n     // thing. You'll proobably want to forget them when you're done.\n     unsafe fn buf_header() -> ~BufferHeader {\n         assert self.buffer.is_not_null();\n-        reinterpret_cast(self.buffer)\n+        reinterpret_cast(&self.buffer)\n     }\n \n     fn set_buffer<T: send>(b: ~Buffer<T>) unsafe {\n-        self.buffer = reinterpret_cast(b);\n+        self.buffer = reinterpret_cast(&b);\n     }\n }\n \n@@ -253,7 +253,7 @@ fn unibuffer<T: send>() -> ~Buffer<Packet<T>> {\n     };\n \n     unsafe {\n-        b.data.header.buffer = reinterpret_cast(b);\n+        b.data.header.buffer = reinterpret_cast(&b);\n     }\n \n     b\n@@ -274,7 +274,7 @@ fn entangle_buffer<T: send, Tstart: send>(\n     init: fn(*libc::c_void, x: &T) -> *Packet<Tstart>)\n     -> (SendPacketBuffered<Tstart, T>, RecvPacketBuffered<Tstart, T>)\n {\n-    let p = init(unsafe { reinterpret_cast(buffer) }, &buffer.data);\n+    let p = init(unsafe { reinterpret_cast(&buffer) }, &buffer.data);\n     unsafe { forget(buffer) }\n     (SendPacketBuffered(p), RecvPacketBuffered(p))\n }"}, {"sha": "9143c30a497d4b07b4cff43b1798885c45e93231", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -63,12 +63,12 @@ unsafe fn chan_from_global_ptr<T: send>(\n         // This is the proposed global channel\n         let ch = comm::recv(setup_po);\n         // 0 is our sentinal value. It is not a valid channel\n-        assert unsafe::reinterpret_cast(ch) != 0u;\n+        assert unsafe::reinterpret_cast(&ch) != 0u;\n \n         // Install the channel\n         log(debug,~\"BEFORE COMPARE AND SWAP\");\n         let swapped = compare_and_swap(\n-            global, 0u, unsafe::reinterpret_cast(ch));\n+            global, 0u, unsafe::reinterpret_cast(&ch));\n         log(debug,fmt!(\"AFTER .. swapped? %?\", swapped));\n \n         if swapped {\n@@ -78,11 +78,11 @@ unsafe fn chan_from_global_ptr<T: send>(\n         } else {\n             // Somebody else got in before we did\n             comm::send(setup_ch, Abort);\n-            unsafe::reinterpret_cast(*global)\n+            unsafe::reinterpret_cast(&*global)\n         }\n     } else {\n         log(debug, ~\"global != 0\");\n-        unsafe::reinterpret_cast(*global)\n+        unsafe::reinterpret_cast(&*global)\n     }\n }\n \n@@ -189,7 +189,7 @@ unsafe fn weaken_task(f: fn(comm::Port<()>)) {\n     let po = comm::Port();\n     let ch = comm::Chan(po);\n     unsafe {\n-        rustrt::rust_task_weaken(unsafe::reinterpret_cast(ch));\n+        rustrt::rust_task_weaken(unsafe::reinterpret_cast(&ch));\n     }\n     let _unweaken = Unweaken(ch);\n     f(po);\n@@ -198,7 +198,7 @@ unsafe fn weaken_task(f: fn(comm::Port<()>)) {\n       let ch: comm::Chan<()>;\n       new(ch: comm::Chan<()>) { self.ch = ch; }\n       drop unsafe {\n-        rustrt::rust_task_unweaken(unsafe::reinterpret_cast(self.ch));\n+        rustrt::rust_task_unweaken(unsafe::reinterpret_cast(&self.ch));\n       }\n     }\n }"}, {"sha": "27998b49415d6a7954cfdc15811aabc7591f7a9f", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -45,7 +45,7 @@ pure fn addr_of<T>(val: T) -> *T { unchecked { rusti::addr_of(val) } }\n #[inline(always)]\n pure fn mut_addr_of<T>(val: T) -> *mut T {\n     unsafe {\n-        unsafe::reinterpret_cast(rusti::addr_of(val))\n+        unsafe::reinterpret_cast(&rusti::addr_of(val))\n     }\n }\n \n@@ -89,7 +89,7 @@ unsafe fn position<T>(buf: *T, f: fn(T) -> bool) -> uint {\n \n /// Create an unsafe null pointer\n #[inline(always)]\n-pure fn null<T>() -> *T { unsafe { unsafe::reinterpret_cast(0u) } }\n+pure fn null<T>() -> *T { unsafe { unsafe::reinterpret_cast(&0u) } }\n \n /// Returns true if the pointer is equal to the null pointer.\n pure fn is_null<T>(ptr: *const T) -> bool { ptr == null() }\n@@ -137,7 +137,7 @@ unsafe fn memset<T>(dst: *mut T, c: int, count: uint)  {\n */\n #[inline(always)]\n fn to_unsafe_ptr<T>(thing: &T) -> *T unsafe {\n-    unsafe::reinterpret_cast(thing)\n+    unsafe::reinterpret_cast(&thing)\n }\n \n /**\n@@ -149,7 +149,7 @@ fn to_unsafe_ptr<T>(thing: &T) -> *T unsafe {\n */\n #[inline(always)]\n fn to_uint<T>(thing: &T) -> uint unsafe {\n-    unsafe::reinterpret_cast(thing)\n+    unsafe::reinterpret_cast(&thing)\n }\n \n /// Determine if two borrowed pointers point to the same thing.\n@@ -175,32 +175,32 @@ impl<T> *T: Ptr {\n // Equality for pointers\n impl<T> *const T : Eq {\n     pure fn eq(&&other: *const T) -> bool unsafe {\n-        let a: uint = unsafe::reinterpret_cast(self);\n-        let b: uint = unsafe::reinterpret_cast(other);\n+        let a: uint = unsafe::reinterpret_cast(&self);\n+        let b: uint = unsafe::reinterpret_cast(&other);\n         return a == b;\n     }\n }\n \n // Comparison for pointers\n impl<T> *const T : Ord {\n     pure fn lt(&&other: *const T) -> bool unsafe {\n-        let a: uint = unsafe::reinterpret_cast(self);\n-        let b: uint = unsafe::reinterpret_cast(other);\n+        let a: uint = unsafe::reinterpret_cast(&self);\n+        let b: uint = unsafe::reinterpret_cast(&other);\n         return a < b;\n     }\n     pure fn le(&&other: *const T) -> bool unsafe {\n-        let a: uint = unsafe::reinterpret_cast(self);\n-        let b: uint = unsafe::reinterpret_cast(other);\n+        let a: uint = unsafe::reinterpret_cast(&self);\n+        let b: uint = unsafe::reinterpret_cast(&other);\n         return a <= b;\n     }\n     pure fn ge(&&other: *const T) -> bool unsafe {\n-        let a: uint = unsafe::reinterpret_cast(self);\n-        let b: uint = unsafe::reinterpret_cast(other);\n+        let a: uint = unsafe::reinterpret_cast(&self);\n+        let b: uint = unsafe::reinterpret_cast(&other);\n         return a >= b;\n     }\n     pure fn gt(&&other: *const T) -> bool unsafe {\n-        let a: uint = unsafe::reinterpret_cast(self);\n-        let b: uint = unsafe::reinterpret_cast(other);\n+        let a: uint = unsafe::reinterpret_cast(&self);\n+        let b: uint = unsafe::reinterpret_cast(&other);\n         return a > b;\n     }\n }\n@@ -226,7 +226,7 @@ fn test() {\n         type Pair = {mut fst: int, mut snd: int};\n         let p = {mut fst: 10, mut snd: 20};\n         let pptr: *mut Pair = mut_addr_of(p);\n-        let iptr: *mut int = unsafe::reinterpret_cast(pptr);\n+        let iptr: *mut int = unsafe::reinterpret_cast(&pptr);\n         assert (*iptr == 10);;\n         *iptr = 30;\n         assert (*iptr == 30);"}, {"sha": "1b101689ffb5e3c31c3a2995fe70f63679d21b5e", "filename": "src/libcore/run.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -113,7 +113,7 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n         }\n         vec::push(ptrs, ptr::null());\n         vec::as_buf(ptrs, |p, _len|\n-            unsafe { cb(::unsafe::reinterpret_cast(p)) }\n+            unsafe { cb(::unsafe::reinterpret_cast(&p)) }\n         )\n       }\n       _ => cb(ptr::null())\n@@ -133,12 +133,12 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n             for vec::each(es) |e| {\n                 let (k,v) = e;\n                 let t = fmt!(\"%s=%s\", k, v);\n-                let mut v : ~[u8] = ::unsafe::reinterpret_cast(t);\n+                let mut v : ~[u8] = ::unsafe::reinterpret_cast(&t);\n                 blk += v;\n                 ::unsafe::forget(v);\n             }\n             blk += ~[0_u8];\n-            vec::as_buf(blk, |p, _len| cb(::unsafe::reinterpret_cast(p)))\n+            vec::as_buf(blk, |p, _len| cb(::unsafe::reinterpret_cast(&p)))\n           }\n           _ => cb(ptr::null())\n         }"}, {"sha": "d71ad9a1a41ac1dc7345a31bbdc954df37b90953", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -20,16 +20,16 @@ fn walk_stack(visit: fn(Frame) -> bool) {\n \n     do frame_address |frame_pointer| {\n         let mut frame_address: *Word = unsafe {\n-            reinterpret_cast(frame_pointer)\n+            reinterpret_cast(&frame_pointer)\n         };\n         loop {\n             let fr = Frame(frame_address);\n \n-            debug!(\"frame: %x\", unsafe { reinterpret_cast(fr.fp) });\n+            debug!(\"frame: %x\", unsafe { reinterpret_cast(&fr.fp) });\n             visit(fr);\n \n             unsafe {\n-                let next_fp: **Word = reinterpret_cast(frame_address);\n+                let next_fp: **Word = reinterpret_cast(&frame_address);\n                 frame_address = *next_fp;\n                 if *frame_address == 0u {\n                     debug!(\"encountered task_start_wrapper. ending walk\");"}, {"sha": "bbebfd12bc8373f08a002e64f0ef11dcdca49cef", "filename": "src/libcore/str.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -164,7 +164,7 @@ fn push_char(&s: ~str, ch: char) {\n         reserve_at_least(s, new_len);\n         let off = len;\n         do as_buf(s) |buf, _len| {\n-            let buf: *mut u8 = ::unsafe::reinterpret_cast(buf);\n+            let buf: *mut u8 = ::unsafe::reinterpret_cast(&buf);\n             if nb == 1u {\n                 *ptr::mut_offset(buf, off) =\n                     code as u8;\n@@ -1746,7 +1746,7 @@ const tag_six_b: uint = 252u;\n  */\n pure fn as_bytes<T>(s: ~str, f: fn(~[u8]) -> T) -> T {\n     unsafe {\n-        let v: *~[u8] = ::unsafe::reinterpret_cast(ptr::addr_of(s));\n+        let v: *~[u8] = ::unsafe::reinterpret_cast(&ptr::addr_of(s));\n         f(*v)\n     }\n }\n@@ -1790,7 +1790,7 @@ pure fn as_c_str<T>(s: &str, f: fn(*libc::c_char) -> T) -> T {\n #[inline(always)]\n pure fn as_buf<T>(s: &str, f: fn(*u8, uint) -> T) -> T {\n     unsafe {\n-        let v : *(*u8,uint) = ::unsafe::reinterpret_cast(ptr::addr_of(s));\n+        let v : *(*u8,uint) = ::unsafe::reinterpret_cast(&ptr::addr_of(s));\n         let (buf,len) = *v;\n         f(buf, len)\n     }\n@@ -1814,7 +1814,7 @@ pure fn as_buf<T>(s: &str, f: fn(*u8, uint) -> T) -> T {\n  */\n fn reserve(&s: ~str, n: uint) {\n     unsafe {\n-        let v: *mut ~[u8] = ::unsafe::reinterpret_cast(ptr::addr_of(s));\n+        let v: *mut ~[u8] = ::unsafe::reinterpret_cast(&ptr::addr_of(s));\n         vec::reserve(*v, n + 1);\n     }\n }\n@@ -1917,18 +1917,18 @@ mod unsafe {\n     /// without copying\n     unsafe fn from_buf_len_nocopy(buf: &a / *u8, len: uint) -> &a / str {\n         let v = (*buf, len + 1);\n-        assert is_utf8(::unsafe::reinterpret_cast(v));\n+        assert is_utf8(::unsafe::reinterpret_cast(&v));\n         return ::unsafe::transmute(v);\n     }\n \n     /// Create a Rust string from a null-terminated C string\n     unsafe fn from_c_str(c_str: *libc::c_char) -> ~str {\n-        from_buf(::unsafe::reinterpret_cast(c_str))\n+        from_buf(::unsafe::reinterpret_cast(&c_str))\n     }\n \n     /// Create a Rust string from a `*c_char` buffer of the given length\n     unsafe fn from_c_str_len(c_str: *libc::c_char, len: uint) -> ~str {\n-        from_buf_len(::unsafe::reinterpret_cast(c_str), len)\n+        from_buf_len(::unsafe::reinterpret_cast(&c_str), len)\n     }\n \n     /// Converts a vector of bytes to a string.\n@@ -1987,15 +1987,15 @@ mod unsafe {\n              assert (end <= n);\n \n              let tuple = (ptr::offset(sbuf, begin), end - begin + 1);\n-             ::unsafe::reinterpret_cast(tuple)\n+             ::unsafe::reinterpret_cast(&tuple)\n         }\n     }\n \n     /// Appends a byte to a string. (Not UTF-8 safe).\n     unsafe fn push_byte(&s: ~str, b: u8) {\n         reserve_at_least(s, s.len() + 1);\n         do as_buf(s) |buf, len| {\n-            let buf: *mut u8 = ::unsafe::reinterpret_cast(buf);\n+            let buf: *mut u8 = ::unsafe::reinterpret_cast(&buf);\n             *ptr::mut_offset(buf, len) = b;\n         }\n         set_len(s, s.len() + 1);\n@@ -2027,7 +2027,7 @@ mod unsafe {\n \n     /// Sets the length of the string and adds the null terminator\n     unsafe fn set_len(&v: ~str, new_len: uint) {\n-        let repr: *vec::unsafe::VecRepr = ::unsafe::reinterpret_cast(v);\n+        let repr: *vec::unsafe::VecRepr = ::unsafe::reinterpret_cast(&v);\n         (*repr).fill = new_len + 1u;\n         let null = ptr::mut_offset(ptr::mut_addr_of((*repr).data), new_len);\n         *null = 0u8;"}, {"sha": "29844259a5f6f3a83de4f45fb022b2414f9554ad", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -88,14 +88,14 @@ pure fn pref_align_of<T>() -> uint {\n /// Returns the refcount of a shared box (as just before calling this)\n pure fn refcount<T>(+t: @T) -> uint {\n     unsafe {\n-        let ref_ptr: *uint = unsafe::reinterpret_cast(t);\n+        let ref_ptr: *uint = unsafe::reinterpret_cast(&t);\n         *ref_ptr - 1\n     }\n }\n \n pure fn log_str<T>(t: T) -> ~str {\n     unsafe {\n-        let data_ptr: *() = unsafe::reinterpret_cast(ptr::addr_of(t));\n+        let data_ptr: *() = unsafe::reinterpret_cast(&ptr::addr_of(t));\n         rustrt::shape_log_str(get_type_desc::<T>(), data_ptr)\n     }\n }"}, {"sha": "7a898985c18fcd116ee4555a47566e97e06e5d47", "filename": "src/libcore/task.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -1154,7 +1154,7 @@ fn spawn_raw(+opts: TaskOpts, +f: fn~()) {\n                 make_child_wrapper(new_task, child_tg, ancestors, is_main,\n                                    opts.notify_chan, f);\n             let fptr = ptr::addr_of(child_wrapper);\n-            let closure: *rust_closure = unsafe::reinterpret_cast(fptr);\n+            let closure: *rust_closure = unsafe::reinterpret_cast(&fptr);\n \n             // Getting killed between these two calls would free the child's\n             // closure. (Reordering them wouldn't help - then getting killed\n@@ -1295,8 +1295,8 @@ impl<T: owned> @T: LocalData { }\n \n impl LocalData: Eq {\n     pure fn eq(&&other: LocalData) -> bool unsafe {\n-        let ptr_a: (uint, uint) = unsafe::reinterpret_cast(self);\n-        let ptr_b: (uint, uint) = unsafe::reinterpret_cast(other);\n+        let ptr_a: (uint, uint) = unsafe::reinterpret_cast(&self);\n+        let ptr_b: (uint, uint) = unsafe::reinterpret_cast(&other);\n         return ptr_a == ptr_b;\n     }\n }\n@@ -1310,7 +1310,7 @@ type TaskLocalMap = @dvec::DVec<Option<TaskLocalElement>>;\n extern fn cleanup_task_local_map(map_ptr: *libc::c_void) unsafe {\n     assert !map_ptr.is_null();\n     // Get and keep the single reference that was created at the beginning.\n-    let _map: TaskLocalMap = unsafe::reinterpret_cast(map_ptr);\n+    let _map: TaskLocalMap = unsafe::reinterpret_cast(&map_ptr);\n     // All local_data will be destroyed along with the map.\n }\n \n@@ -1325,7 +1325,8 @@ unsafe fn get_task_local_map(task: *rust_task) -> TaskLocalMap {\n     if map_ptr.is_null() {\n         let map: TaskLocalMap = @dvec::DVec();\n         // Use reinterpret_cast -- transmute would take map away from us also.\n-        rustrt::rust_set_task_local_data(task, unsafe::reinterpret_cast(map));\n+        rustrt::rust_set_task_local_data(\n+            task, unsafe::reinterpret_cast(&map));\n         rustrt::rust_task_local_data_atexit(task, cleanup_task_local_map);\n         // Also need to reference it an extra time to keep it for now.\n         unsafe::bump_box_refcount(map);\n@@ -1342,7 +1343,7 @@ unsafe fn key_to_key_value<T: owned>(\n \n     // Keys are closures, which are (fnptr,envptr) pairs. Use fnptr.\n     // Use reintepret_cast -- transmute would leak (forget) the closure.\n-    let pair: (*libc::c_void, *libc::c_void) = unsafe::reinterpret_cast(key);\n+    let pair: (*libc::c_void, *libc::c_void) = unsafe::reinterpret_cast(&key);\n     pair.first()\n }\n \n@@ -1411,7 +1412,7 @@ unsafe fn local_set<T: owned>(\n     // own on it can be dropped when the box is destroyed. The unsafe pointer\n     // does not have a reference associated with it, so it may become invalid\n     // when the box is destroyed.\n-    let data_ptr = unsafe::reinterpret_cast(data);\n+    let data_ptr = unsafe::reinterpret_cast(&data);\n     let data_box = data as LocalData;\n     // Construct new entry to store in the map.\n     let new_entry = Some((keyval, data_ptr, data_box));"}, {"sha": "c2102eb2bcd3899d64659027b53c40e3b1879ba6", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -19,8 +19,8 @@ extern mod rusti {\n \n /// Casts the value at `src` to U. The two types must have the same length.\n #[inline(always)]\n-unsafe fn reinterpret_cast<T, U>(src: T) -> U {\n-    rusti::reinterpret_cast(src)\n+unsafe fn reinterpret_cast<T, U>(src: &T) -> U {\n+    rusti::reinterpret_cast(*src)\n }\n \n /**\n@@ -51,7 +51,7 @@ unsafe fn bump_box_refcount<T>(+t: @T) { forget(t); }\n  *     assert transmute(\"L\") == ~[76u8, 0u8];\n  */\n unsafe fn transmute<L, G>(-thing: L) -> G {\n-    let newthing = reinterpret_cast(thing);\n+    let newthing = reinterpret_cast(&thing);\n     forget(thing);\n     return newthing;\n }\n@@ -101,7 +101,7 @@ struct ArcDestruct<T> {\n             return; // Happens when destructing an unwrapper's handle.\n         }\n         do task::unkillable {\n-            let data: ~ArcData<T> = unsafe::reinterpret_cast(self.data);\n+            let data: ~ArcData<T> = unsafe::reinterpret_cast(&self.data);\n             let new_count = rustrt::rust_atomic_decrement(&mut data.count);\n             assert new_count >= 0;\n             if new_count == 0 {\n@@ -111,7 +111,7 @@ struct ArcDestruct<T> {\n                 // being here means we're the only *awake* task with the data.\n                 if data.unwrapper != 0 {\n                     let p: UnwrapProto =\n-                        unsafe::reinterpret_cast(data.unwrapper);\n+                        unsafe::reinterpret_cast(&data.unwrapper);\n                     let (message, response) = option::swap_unwrap(p);\n                     // Send 'ready' and wait for a response.\n                     pipes::send_one(message, ());\n@@ -154,7 +154,7 @@ unsafe fn unwrap_shared_mutable_state<T: send>(+rc: SharedMutableState<T>)\n     }\n \n     do task::unkillable {\n-        let ptr: ~ArcData<T> = unsafe::reinterpret_cast(rc.data);\n+        let ptr: ~ArcData<T> = unsafe::reinterpret_cast(&rc.data);\n         let (c1,p1) = pipes::oneshot(); // ()\n         let (c2,p2) = pipes::oneshot(); // bool\n         let server: UnwrapProto = ~mut Some((c1,p2));\n@@ -216,7 +216,7 @@ unsafe fn shared_mutable_state<T: send>(+data: T) -> SharedMutableState<T> {\n unsafe fn get_shared_mutable_state<T: send>(rc: &a/SharedMutableState<T>)\n         -> &a/mut T {\n     unsafe {\n-        let ptr: ~ArcData<T> = unsafe::reinterpret_cast((*rc).data);\n+        let ptr: ~ArcData<T> = unsafe::reinterpret_cast(&(*rc).data);\n         assert ptr.count > 0;\n         // Cast us back into the correct region\n         let r = unsafe::transmute_region(option::get_ref(&ptr.data));\n@@ -228,7 +228,7 @@ unsafe fn get_shared_mutable_state<T: send>(rc: &a/SharedMutableState<T>)\n unsafe fn get_shared_immutable_state<T: send>(rc: &a/SharedMutableState<T>)\n         -> &a/T {\n     unsafe {\n-        let ptr: ~ArcData<T> = unsafe::reinterpret_cast((*rc).data);\n+        let ptr: ~ArcData<T> = unsafe::reinterpret_cast(&(*rc).data);\n         assert ptr.count > 0;\n         // Cast us back into the correct region\n         let r = unsafe::transmute_region(option::get_ref(&ptr.data));\n@@ -240,7 +240,7 @@ unsafe fn get_shared_immutable_state<T: send>(rc: &a/SharedMutableState<T>)\n unsafe fn clone_shared_mutable_state<T: send>(rc: &SharedMutableState<T>)\n         -> SharedMutableState<T> {\n     unsafe {\n-        let ptr: ~ArcData<T> = unsafe::reinterpret_cast((*rc).data);\n+        let ptr: ~ArcData<T> = unsafe::reinterpret_cast(&(*rc).data);\n         let new_count = rustrt::rust_atomic_increment(&mut ptr.count);\n         assert new_count >= 2;\n         unsafe::forget(ptr);\n@@ -356,7 +356,7 @@ mod tests {\n \n     #[test]\n     fn test_reinterpret_cast() {\n-        assert unsafe { reinterpret_cast(1) } == 1u;\n+        assert unsafe { reinterpret_cast(&1) } == 1u;\n     }\n \n     #[test]\n@@ -365,8 +365,8 @@ mod tests {\n             let box = @~\"box box box\";       // refcount 1\n             bump_box_refcount(box);         // refcount 2\n             let ptr: *int = transmute(box); // refcount 2\n-            let _box1: @~str = reinterpret_cast(ptr);\n-            let _box2: @~str = reinterpret_cast(ptr);\n+            let _box1: @~str = reinterpret_cast(&ptr);\n+            let _box2: @~str = reinterpret_cast(&ptr);\n             assert *_box1 == ~\"box box box\";\n             assert *_box2 == ~\"box box box\";\n             // Will destroy _box1 and _box2. Without the bump, this would"}, {"sha": "3f5051ac55babc0c921104c442f8e9be189d5d0e", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -167,7 +167,7 @@ fn reserve_at_least<T>(&v: ~[const T], n: uint) {\n #[inline(always)]\n pure fn capacity<T>(&&v: ~[const T]) -> uint {\n     unsafe {\n-        let repr: **unsafe::VecRepr = ::unsafe::reinterpret_cast(addr_of(v));\n+        let repr: **unsafe::VecRepr = ::unsafe::reinterpret_cast(&addr_of(v));\n         (**repr).alloc / sys::size_of::<T>()\n     }\n }\n@@ -335,7 +335,7 @@ pure fn view<T>(v: &[T], start: uint, end: uint) -> &[T] {\n     do as_buf(v) |p, _len| {\n         unsafe {\n             ::unsafe::reinterpret_cast(\n-                (ptr::offset(p, start), (end - start) * sys::size_of::<T>()))\n+                &(ptr::offset(p, start), (end - start) * sys::size_of::<T>()))\n         }\n     }\n }\n@@ -347,7 +347,7 @@ pure fn mut_view<T>(v: &[mut T], start: uint, end: uint) -> &[mut T] {\n     do as_buf(v) |p, _len| {\n         unsafe {\n             ::unsafe::reinterpret_cast(\n-                (ptr::offset(p, start), (end - start) * sys::size_of::<T>()))\n+                &(ptr::offset(p, start), (end - start) * sys::size_of::<T>()))\n         }\n     }\n }\n@@ -359,7 +359,7 @@ pure fn const_view<T>(v: &[const T], start: uint, end: uint) -> &[const T] {\n     do as_buf(v) |p, _len| {\n         unsafe {\n             ::unsafe::reinterpret_cast(\n-                (ptr::offset(p, start), (end - start) * sys::size_of::<T>()))\n+                &(ptr::offset(p, start), (end - start) * sys::size_of::<T>()))\n         }\n     }\n }\n@@ -558,7 +558,7 @@ fn swap_remove<T>(&v: ~[const T], index: uint) -> T {\n #[inline(always)]\n fn push<T>(&v: ~[const T], +initval: T) {\n     unsafe {\n-        let repr: **unsafe::VecRepr = ::unsafe::reinterpret_cast(addr_of(v));\n+        let repr: **unsafe::VecRepr = ::unsafe::reinterpret_cast(&addr_of(v));\n         let fill = (**repr).fill;\n         if (**repr).alloc > fill {\n             push_fast(v, initval);\n@@ -572,7 +572,7 @@ fn push<T>(&v: ~[const T], +initval: T) {\n // This doesn't bother to make sure we have space.\n #[inline(always)] // really pretty please\n unsafe fn push_fast<T>(&v: ~[const T], +initval: T) {\n-    let repr: **unsafe::VecRepr = ::unsafe::reinterpret_cast(addr_of(v));\n+    let repr: **unsafe::VecRepr = ::unsafe::reinterpret_cast(&addr_of(v));\n     let fill = (**repr).fill;\n     (**repr).fill += sys::size_of::<T>();\n     let p = ptr::addr_of((**repr).data);\n@@ -1357,7 +1357,7 @@ pure fn windowed<TT: copy>(nn: uint, xx: &[TT]) -> ~[~[TT]] {\n pure fn as_buf<T,U>(s: &[const T],\n                     f: fn(*T, uint) -> U) -> U {\n     unsafe {\n-        let v : *(*T,uint) = ::unsafe::reinterpret_cast(ptr::addr_of(s));\n+        let v : *(*T,uint) = ::unsafe::reinterpret_cast(&ptr::addr_of(s));\n         let (buf,len) = *v;\n         f(buf, len / sys::size_of::<T>())\n     }\n@@ -1369,7 +1369,7 @@ pure fn as_const_buf<T,U>(s: &[const T],\n                           f: fn(*const T, uint) -> U) -> U {\n     do as_buf(s) |p, len| {\n         unsafe {\n-            let pp : *const T = ::unsafe::reinterpret_cast(p);\n+            let pp : *const T = ::unsafe::reinterpret_cast(&p);\n             f(pp, len)\n         }\n     }\n@@ -1381,7 +1381,7 @@ pure fn as_mut_buf<T,U>(s: &[mut T],\n                         f: fn(*mut T, uint) -> U) -> U {\n     do as_buf(s) |p, len| {\n         unsafe {\n-            let pp : *mut T = ::unsafe::reinterpret_cast(p);\n+            let pp : *mut T = ::unsafe::reinterpret_cast(&p);\n             f(pp, len)\n         }\n     }\n@@ -1740,7 +1740,7 @@ mod unsafe {\n      */\n     #[inline(always)]\n     unsafe fn set_len<T>(&&v: ~[const T], new_len: uint) {\n-        let repr: **VecRepr = ::unsafe::reinterpret_cast(addr_of(v));\n+        let repr: **VecRepr = ::unsafe::reinterpret_cast(&addr_of(v));\n         (**repr).fill = new_len * sys::size_of::<T>();\n     }\n \n@@ -1755,15 +1755,15 @@ mod unsafe {\n      */\n     #[inline(always)]\n     unsafe fn to_ptr<T>(v: ~[const T]) -> *T {\n-        let repr: **VecRepr = ::unsafe::reinterpret_cast(addr_of(v));\n-        return ::unsafe::reinterpret_cast(addr_of((**repr).data));\n+        let repr: **VecRepr = ::unsafe::reinterpret_cast(&addr_of(v));\n+        return ::unsafe::reinterpret_cast(&addr_of((**repr).data));\n     }\n \n \n     #[inline(always)]\n     unsafe fn to_ptr_slice<T>(v: &[const T]) -> *T {\n-        let repr: **SliceRepr = ::unsafe::reinterpret_cast(addr_of(v));\n-        return ::unsafe::reinterpret_cast(addr_of((**repr).data));\n+        let repr: **SliceRepr = ::unsafe::reinterpret_cast(&addr_of(v));\n+        return ::unsafe::reinterpret_cast(&addr_of((**repr).data));\n     }\n \n \n@@ -1775,7 +1775,7 @@ mod unsafe {\n     unsafe fn form_slice<T,U>(p: *T, len: uint, f: fn(&& &[T]) -> U) -> U {\n         let pair = (p, len * sys::size_of::<T>());\n         let v : *(&blk/[T]) =\n-            ::unsafe::reinterpret_cast(ptr::addr_of(pair));\n+            ::unsafe::reinterpret_cast(&ptr::addr_of(pair));\n         f(*v)\n     }\n "}, {"sha": "52945c6765f18fe937c6b627d4ed8e8117f60bc6", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -95,7 +95,7 @@ unsafe fn destroy_chunk(chunk: Chunk) {\n     let fill = chunk.fill;\n \n     while idx < fill {\n-        let tydesc_data: *uint = reinterpret_cast(ptr::offset(buf, idx));\n+        let tydesc_data: *uint = reinterpret_cast(&ptr::offset(buf, idx));\n         let (tydesc, is_done) = un_bitpack_tydesc_ptr(*tydesc_data);\n         let size = (*tydesc).size, align = (*tydesc).align;\n \n@@ -121,12 +121,12 @@ unsafe fn destroy_chunk(chunk: Chunk) {\n // during an initializer.\n #[inline(always)]\n unsafe fn bitpack_tydesc_ptr(p: *TypeDesc, is_done: bool) -> uint {\n-    let p_bits: uint = reinterpret_cast(p);\n+    let p_bits: uint = reinterpret_cast(&p);\n     p_bits | (is_done as uint)\n }\n #[inline(always)]\n unsafe fn un_bitpack_tydesc_ptr(p: uint) -> (*TypeDesc, bool) {\n-    (reinterpret_cast(p & !1), p & 1 == 1)\n+    (reinterpret_cast(&(p & !1)), p & 1 == 1)\n }\n \n // The duplication between the POD and non-POD functions is annoying.\n@@ -167,9 +167,9 @@ impl &Arena {\n         unsafe {\n             let tydesc = sys::get_type_desc::<T>();\n             let ptr = self.alloc_pod_inner((*tydesc).size, (*tydesc).align);\n-            let ptr: *mut T = reinterpret_cast(ptr);\n+            let ptr: *mut T = reinterpret_cast(&ptr);\n             rusti::move_val_init(*ptr, op());\n-            return reinterpret_cast(ptr);\n+            return reinterpret_cast(&ptr);\n         }\n     }\n \n@@ -213,18 +213,18 @@ impl &Arena {\n             let tydesc = sys::get_type_desc::<T>();\n             let (ty_ptr, ptr) =\n                 self.alloc_nonpod_inner((*tydesc).size, (*tydesc).align);\n-            let ty_ptr: *mut uint = reinterpret_cast(ty_ptr);\n-            let ptr: *mut T = reinterpret_cast(ptr);\n+            let ty_ptr: *mut uint = reinterpret_cast(&ty_ptr);\n+            let ptr: *mut T = reinterpret_cast(&ptr);\n             // Write in our tydesc along with a bit indicating that it\n             // has *not* been initialized yet.\n-            *ty_ptr = reinterpret_cast(tydesc);\n+            *ty_ptr = reinterpret_cast(&tydesc);\n             // Actually initialize it\n             rusti::move_val_init(*ptr, op());\n             // Now that we are done, update the tydesc to indicate that\n             // the object is there.\n             *ty_ptr = bitpack_tydesc_ptr(tydesc, true);\n \n-            return reinterpret_cast(ptr);\n+            return reinterpret_cast(&ptr);\n         }\n     }\n "}, {"sha": "bc016823b51ddc797b07f844f864d0cf9f544658", "filename": "src/libstd/dbg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -46,8 +46,8 @@ fn debug_fn<T>(+x: T) {\n \n unsafe fn ptr_cast<T, U>(x: @T) -> @U {\n     reinterpret_cast(\n-        rustrt::debug_ptrcast(sys::get_type_desc::<T>(),\n-                              reinterpret_cast(x)))\n+        &rustrt::debug_ptrcast(sys::get_type_desc::<T>(),\n+                              reinterpret_cast(&x)))\n }\n \n /// Triggers a debugger breakpoint"}, {"sha": "52366e33a2797034e55887eaad0799fdbda589e9", "filename": "src/libstd/par.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -48,7 +48,7 @@ fn map_slices<A: copy send, B: copy send>(\n                                      len * sys::size_of::<A>());\n                         log(info, fmt!(\"pre-slice: %?\", (base, slice)));\n                         let slice : &[A] =\n-                            unsafe::reinterpret_cast(slice);\n+                            unsafe::reinterpret_cast(&slice);\n                         log(info, fmt!(\"slice: %?\",\n                                        (base, vec::len(slice), end - base)));\n                         assert(vec::len(slice) == end - base);"}, {"sha": "d6ba90af84c6565e4de7e5aa4b5bbd17875626c9", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -807,7 +807,7 @@ mod node {\n               option::Some(x) => {\n                 //FIXME (#2744): Replace with memcpy or something similar\n                 let mut local_buf: ~[u8] =\n-                    unsafe::reinterpret_cast(*x.content);\n+                    unsafe::reinterpret_cast(&*x.content);\n                 let mut i = x.byte_offset;\n                 while i < x.byte_len {\n                     buf[offset] = local_buf[i];"}, {"sha": "b64376892e74edd6d6df918087924a43c93a6650", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -751,7 +751,7 @@ mod tests {\n         let ptr = ptr::addr_of(*sharedstate);\n         do task::spawn {\n             let sharedstate: &mut int =\n-                unsafe { unsafe::reinterpret_cast(ptr) };\n+                unsafe { unsafe::reinterpret_cast(&ptr) };\n             access_shared(sharedstate, m2, 10);\n             c.send(());\n \n@@ -1018,7 +1018,7 @@ mod tests {\n         let ptr = ptr::addr_of(*sharedstate);\n         do task::spawn {\n             let sharedstate: &mut int =\n-                unsafe { unsafe::reinterpret_cast(ptr) };\n+                unsafe { unsafe::reinterpret_cast(&ptr) };\n             access_shared(sharedstate, x2, mode1, 10);\n             c.send(());\n         }"}, {"sha": "22eaa6902953fcdf8ca6b10bab262c9bf1a45d57", "filename": "src/rustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Frustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Frustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Floader.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -186,7 +186,7 @@ fn get_metadata_section(os: os,\n             let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n             let csz = llvm::LLVMGetSectionSize(si.llsi) as uint;\n             unsafe {\n-                let cvbuf: *u8 = unsafe::reinterpret_cast(cbuf);\n+                let cvbuf: *u8 = unsafe::reinterpret_cast(&cbuf);\n                 let v = vec::unsafe::from_buf(cvbuf, csz);\n                 let inflated = flate::inflate_buf(v);\n                 return Some(@inflated);"}, {"sha": "400a5ed2b82aa9ced7ffab74871301dceb14c61e", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -134,7 +134,7 @@ fn IndirectBr(cx: block, Addr: ValueRef, NumDests: uint) {\n // lot more efficient) than doing str::as_c_str(\"\", ...) every time.\n fn noname() -> *libc::c_char unsafe {\n     const cnull: uint = 0u;\n-    return unsafe::reinterpret_cast(ptr::addr_of(cnull));\n+    return unsafe::reinterpret_cast(&ptr::addr_of(cnull));\n }\n \n fn Invoke(cx: block, Fn: ValueRef, Args: ~[ValueRef],\n@@ -629,8 +629,8 @@ fn Phi(cx: block, Ty: TypeRef, vals: ~[ValueRef], bbs: ~[BasicBlockRef])\n fn AddIncomingToPhi(phi: ValueRef, val: ValueRef, bb: BasicBlockRef) {\n     if llvm::LLVMIsUndef(phi) == lib::llvm::True { return; }\n     unsafe {\n-        let valptr = unsafe::reinterpret_cast(ptr::addr_of(val));\n-        let bbptr = unsafe::reinterpret_cast(ptr::addr_of(bb));\n+        let valptr = unsafe::reinterpret_cast(&ptr::addr_of(val));\n+        let bbptr = unsafe::reinterpret_cast(&ptr::addr_of(bb));\n         llvm::LLVMAddIncoming(phi, valptr, bbptr, 1 as c_uint);\n     }\n }"}, {"sha": "dc5bf00b59d16606e3d87716f4393f8674759668", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -971,7 +971,7 @@ fn C_array(ty: TypeRef, elts: ~[ValueRef]) -> ValueRef unsafe {\n \n fn C_bytes(bytes: ~[u8]) -> ValueRef unsafe {\n     return llvm::LLVMConstString(\n-        unsafe::reinterpret_cast(vec::unsafe::to_ptr(bytes)),\n+        unsafe::reinterpret_cast(&vec::unsafe::to_ptr(bytes)),\n         bytes.len() as c_uint, False);\n }\n "}, {"sha": "1362c67041b0a41f4aa4fdf40a2ab24042f3ba64", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -73,7 +73,7 @@ fn llunused() -> ValueRef {\n     lli32(0x0)\n }\n fn llnull() -> ValueRef unsafe {\n-    unsafe::reinterpret_cast(ptr::null::<ValueRef>())\n+    unsafe::reinterpret_cast(&ptr::null::<ValueRef>())\n }\n \n fn add_named_metadata(cx: @crate_ctxt, name: ~str, val: ValueRef) {"}, {"sha": "1d28e0351415d395071a74436b592b04d4b12f3b", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -338,7 +338,7 @@ enum t_opaque {}\n type t = *t_opaque;\n \n pure fn get(t: t) -> t_box unsafe {\n-    let t2 = unsafe::reinterpret_cast::<t, t_box>(t);\n+    let t2 = unsafe::reinterpret_cast::<t, t_box>(&t);\n     let t3 = t2;\n     unsafe::forget(t2);\n     t3\n@@ -712,7 +712,7 @@ fn mk_t(cx: ctxt, +st: sty) -> t { mk_t_with_id(cx, st, None) }\n fn mk_t_with_id(cx: ctxt, +st: sty, o_def_id: Option<ast::def_id>) -> t {\n     let key = {struct: st, o_def_id: o_def_id};\n     match cx.interner.find(key) {\n-      Some(t) => unsafe { return unsafe::reinterpret_cast(t); },\n+      Some(t) => unsafe { return unsafe::reinterpret_cast(&t); },\n       _ => ()\n     }\n     let mut flags = 0u;\n@@ -770,7 +770,7 @@ fn mk_t_with_id(cx: ctxt, +st: sty, o_def_id: Option<ast::def_id>) -> t {\n     let t = @{struct: st, id: cx.next_id, flags: flags, o_def_id: o_def_id};\n     cx.interner.insert(key, t);\n     cx.next_id += 1u;\n-    unsafe { unsafe::reinterpret_cast(t) }\n+    unsafe { unsafe::reinterpret_cast(&t) }\n }\n \n fn mk_nil(cx: ctxt) -> t { mk_t(cx, ty_nil) }"}, {"sha": "2295a8ff2d75f9c6af43bc8e41c7d2663603c4d0", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -8,13 +8,13 @@ struct r {\n   let v: *int;\n   new(v: *int) { self.v = v; }\n   drop unsafe {\n-    let _v2: ~int = unsafe::reinterpret_cast(self.v);\n+    let _v2: ~int = unsafe::reinterpret_cast(&self.v);\n   }\n }\n \n fn main() unsafe {\n     let i1 = ~0;\n-    let i1p = unsafe::reinterpret_cast(i1);\n+    let i1p = unsafe::reinterpret_cast(&i1);\n     unsafe::forget(i1);\n     let x = @r(i1p);\n     failfn();"}, {"sha": "2f62b410dd3c1d520d58160981353cfccd9ad99b", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -58,9 +58,9 @@ fn test_box() {\n }\n \n fn test_ptr() unsafe {\n-    let p1: *u8 = unsafe::reinterpret_cast(0);\n-    let p2: *u8 = unsafe::reinterpret_cast(0);\n-    let p3: *u8 = unsafe::reinterpret_cast(1);\n+    let p1: *u8 = unsafe::reinterpret_cast(&0);\n+    let p2: *u8 = unsafe::reinterpret_cast(&0);\n+    let p3: *u8 = unsafe::reinterpret_cast(&1);\n \n     assert p1 == p2;\n     assert p1 != p3;\n@@ -97,8 +97,8 @@ fn test_class() {\n   \n   unsafe {\n   error!(\"q = %x, r = %x\",\n-         (unsafe::reinterpret_cast::<*p, uint>(ptr::addr_of(q))),\n-         (unsafe::reinterpret_cast::<*p, uint>(ptr::addr_of(r))));\n+         (unsafe::reinterpret_cast::<*p, uint>(&ptr::addr_of(q))),\n+         (unsafe::reinterpret_cast::<*p, uint>(&ptr::addr_of(r))));\n   }\n   assert(q == r);\n   r.y = 17;"}, {"sha": "886739fc154535803f37db1d831f2452b774e8bc", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -2,7 +2,7 @@ import libc::{c_double, c_int};\n import f64::*;\n \n fn to_c_int(v: &mut int) -> &mut c_int unsafe {\n-    unsafe::reinterpret_cast(v)\n+    unsafe::reinterpret_cast(&v)\n }\n \n fn lgamma(n: c_double, value: &mut int) -> c_double {"}, {"sha": "42b7b935c73e982d8230ea7103b1db2ef0ee9016", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -17,7 +17,7 @@ type ccx = {\n \n fn alloc(_bcx : &arena) -> &bcx unsafe {\n     return unsafe::reinterpret_cast(\n-        libc::malloc(sys::size_of::<bcx/&blk>() as libc::size_t));\n+        &libc::malloc(sys::size_of::<bcx/&blk>() as libc::size_t));\n }\n \n fn h(bcx : &bcx) -> &bcx {\n@@ -28,7 +28,7 @@ fn g(fcx : &fcx) {\n     let bcx = { fcx: fcx };\n     let bcx2 = h(&bcx);\n     unsafe {\n-        libc::free(unsafe::reinterpret_cast(bcx2));\n+        libc::free(unsafe::reinterpret_cast(&bcx2));\n     }\n }\n "}, {"sha": "e0d85e4d28857af143b43dc61210a685366b2147", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -5,16 +5,16 @@ struct r {\n   new(v: *int) unsafe {\n     self.v = v;\n     debug!(\"r's ctor: v = %x, self = %x, self.v = %x\",\n-           unsafe::reinterpret_cast::<*int, uint>(v),\n-           unsafe::reinterpret_cast::<*r, uint>(ptr::addr_of(self)),\n-           unsafe::reinterpret_cast::<**int, uint>(ptr::addr_of(self.v)));\n+           unsafe::reinterpret_cast::<*int, uint>(&v),\n+           unsafe::reinterpret_cast::<*r, uint>(&ptr::addr_of(self)),\n+           unsafe::reinterpret_cast::<**int, uint>(&ptr::addr_of(self.v)));\n      }\n   drop unsafe {\n     debug!(\"r's dtor: self = %x, self.v = %x, self.v's value = %x\",\n-           unsafe::reinterpret_cast::<*r, uint>(ptr::addr_of(self)),\n-           unsafe::reinterpret_cast::<**int, uint>(ptr::addr_of(self.v)),\n-           unsafe::reinterpret_cast::<*int, uint>(self.v));\n-    let v2: ~int = unsafe::reinterpret_cast(self.v); }\n+           unsafe::reinterpret_cast::<*r, uint>(&ptr::addr_of(self)),\n+           unsafe::reinterpret_cast::<**int, uint>(&ptr::addr_of(self.v)),\n+           unsafe::reinterpret_cast::<*int, uint>(&self.v));\n+    let v2: ~int = unsafe::reinterpret_cast(&self.v); }\n }\n \n enum t = {\n@@ -24,38 +24,38 @@ enum t = {\n \n fn main() unsafe {\n     let i1 = ~0;\n-    let i1p = unsafe::reinterpret_cast(i1);\n+    let i1p = unsafe::reinterpret_cast(&i1);\n     unsafe::forget(i1);\n     let i2 = ~0;\n-    let i2p = unsafe::reinterpret_cast(i2);\n+    let i2p = unsafe::reinterpret_cast(&i2);\n     unsafe::forget(i2);\n \n     let x1 = @t({\n         mut next: None,\n           r: {\n           let rs = r(i1p);\n           debug!(\"r = %x\",\n-                 unsafe::reinterpret_cast::<*r, uint>(ptr::addr_of(rs)));\n+                 unsafe::reinterpret_cast::<*r, uint>(&ptr::addr_of(rs)));\n           rs }\n     });\n     \n     debug!(\"x1 = %x, x1.r = %x\",\n-        unsafe::reinterpret_cast::<@t, uint>(x1),\n-        unsafe::reinterpret_cast::<*r, uint>(ptr::addr_of(x1.r)));\n+        unsafe::reinterpret_cast::<@t, uint>(&x1),\n+        unsafe::reinterpret_cast::<*r, uint>(&ptr::addr_of(x1.r)));\n \n     let x2 = @t({\n         mut next: None,\n           r: {\n           let rs = r(i2p);\n           debug!(\"r2 = %x\",\n-                 unsafe::reinterpret_cast::<*r, uint>(ptr::addr_of(rs)));\n+                 unsafe::reinterpret_cast::<*r, uint>(&ptr::addr_of(rs)));\n           rs\n             }\n     });\n     \n     debug!(\"x2 = %x, x2.r = %x\",\n-           unsafe::reinterpret_cast::<@t, uint>(x2),\n-           unsafe::reinterpret_cast::<*r, uint>(ptr::addr_of(x2.r)));\n+           unsafe::reinterpret_cast::<@t, uint>(&x2),\n+           unsafe::reinterpret_cast::<*r, uint>(&ptr::addr_of(x2.r)));\n \n     x1.next = Some(x2);\n     x2.next = Some(x1);"}, {"sha": "c5b69af33d97109bbeb07f75fa5df368572c9d8c", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -10,7 +10,7 @@ struct r {\n   let v: u;\n   new(v: u) { self.v = v; }\n   drop unsafe {\n-    let v2: ~int = unsafe::reinterpret_cast(self.v.c);\n+    let v2: ~int = unsafe::reinterpret_cast(&self.v.c);\n   }\n }\n \n@@ -21,10 +21,10 @@ enum t = {\n \n fn main() unsafe {\n     let i1 = ~0xA;\n-    let i1p = unsafe::reinterpret_cast(i1);\n+    let i1p = unsafe::reinterpret_cast(&i1);\n     unsafe::forget(i1);\n     let i2 = ~0xA;\n-    let i2p = unsafe::reinterpret_cast(i2);\n+    let i2p = unsafe::reinterpret_cast(&i2);\n     unsafe::forget(i2);\n \n     let u1 = {a: 0xB, b: 0xC, c: i1p};"}, {"sha": "36d73bf23e53e111392305c21bff08894f3b2b19", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -13,10 +13,10 @@ struct r {\n   let w: int;\n   let x: *int;\n   new(v: u, w: int, _x: *int) unsafe { self.v = v; self.w = w; \n-    self.x = unsafe::reinterpret_cast(0);\n+    self.x = unsafe::reinterpret_cast(&0);\n     /* self.x = x; */ }\n   drop unsafe {\n-    let _v2: ~int = unsafe::reinterpret_cast(self.v.c);\n+    let _v2: ~int = unsafe::reinterpret_cast(&self.v.c);\n     // let _v3: ~int = unsafe::reinterpret_cast(self.x);\n   }\n }\n@@ -28,10 +28,10 @@ enum t = {\n \n fn main() unsafe {\n     let i1 = ~0xA;\n-    let i1p = unsafe::reinterpret_cast(i1);\n+    let i1p = unsafe::reinterpret_cast(&i1);\n     unsafe::forget(i1);\n     let i2 = ~0xA;\n-    let i2p = unsafe::reinterpret_cast(i2);\n+    let i2p = unsafe::reinterpret_cast(&i2);\n     unsafe::forget(i2);\n \n     let u1 = {a: 0xB, b: 0xC, c: i1p};"}, {"sha": "0cba7faa74c8d13c47d59c84db33e600f42bb62a", "filename": "src/test/run-pass/rt-sched-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Frt-sched-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-sched-1.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -32,7 +32,7 @@ fn main() unsafe {\n         assert child_sched_id == new_sched_id;\n         comm::send(ch, ());\n     };\n-    let fptr = unsafe::reinterpret_cast(ptr::addr_of(f));\n+    let fptr = unsafe::reinterpret_cast(&ptr::addr_of(f));\n     rustrt::start_task(new_task_id, fptr);\n     unsafe::forget(f);\n     comm::recv(po);"}, {"sha": "07d55229fb7b85534f19bce0ac8d26f80bfc567a", "filename": "src/test/run-pass/unify-return-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d777e5133360876baa4213f81a33934f04768a0f/src%2Ftest%2Frun-pass%2Funify-return-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funify-return-ty.rs?ref=d777e5133360876baa4213f81a33934f04768a0f", "patch": "@@ -4,6 +4,6 @@\n use std;\n import unsafe;\n \n-fn null<T>() -> *T unsafe { unsafe::reinterpret_cast(0) }\n+fn null<T>() -> *T unsafe { unsafe::reinterpret_cast(&0) }\n \n fn main() { null::<int>(); }"}]}