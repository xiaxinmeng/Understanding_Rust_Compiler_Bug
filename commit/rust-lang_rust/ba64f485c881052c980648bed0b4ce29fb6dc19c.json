{"sha": "ba64f485c881052c980648bed0b4ce29fb6dc19c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNjRmNDg1Yzg4MTA1MmM5ODA2NDhiZWQwYjRjZTI5ZmI2ZGMxOWM=", "commit": {"author": {"name": "Smit Soni", "email": "atsmtat@gmail.com", "date": "2021-06-09T13:28:35Z"}, "committer": {"name": "Smit Soni", "email": "atsmtat@gmail.com", "date": "2021-06-09T13:28:35Z"}, "message": "Fix parameter of io error helper function\n\n`set_last_error_from_io_error` works with only the error kind, and\ndiscards the payload. Fix its signature to make it explicit.", "tree": {"sha": "89be9509fc00abf77fdaa75d1d8c8dfe2de2d9ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89be9509fc00abf77fdaa75d1d8c8dfe2de2d9ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba64f485c881052c980648bed0b4ce29fb6dc19c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba64f485c881052c980648bed0b4ce29fb6dc19c", "html_url": "https://github.com/rust-lang/rust/commit/ba64f485c881052c980648bed0b4ce29fb6dc19c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba64f485c881052c980648bed0b4ce29fb6dc19c/comments", "author": {"login": "atsmtat", "id": 25519955, "node_id": "MDQ6VXNlcjI1NTE5OTU1", "avatar_url": "https://avatars.githubusercontent.com/u/25519955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atsmtat", "html_url": "https://github.com/atsmtat", "followers_url": "https://api.github.com/users/atsmtat/followers", "following_url": "https://api.github.com/users/atsmtat/following{/other_user}", "gists_url": "https://api.github.com/users/atsmtat/gists{/gist_id}", "starred_url": "https://api.github.com/users/atsmtat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atsmtat/subscriptions", "organizations_url": "https://api.github.com/users/atsmtat/orgs", "repos_url": "https://api.github.com/users/atsmtat/repos", "events_url": "https://api.github.com/users/atsmtat/events{/privacy}", "received_events_url": "https://api.github.com/users/atsmtat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "atsmtat", "id": 25519955, "node_id": "MDQ6VXNlcjI1NTE5OTU1", "avatar_url": "https://avatars.githubusercontent.com/u/25519955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atsmtat", "html_url": "https://github.com/atsmtat", "followers_url": "https://api.github.com/users/atsmtat/followers", "following_url": "https://api.github.com/users/atsmtat/following{/other_user}", "gists_url": "https://api.github.com/users/atsmtat/gists{/gist_id}", "starred_url": "https://api.github.com/users/atsmtat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atsmtat/subscriptions", "organizations_url": "https://api.github.com/users/atsmtat/orgs", "repos_url": "https://api.github.com/users/atsmtat/repos", "events_url": "https://api.github.com/users/atsmtat/events{/privacy}", "received_events_url": "https://api.github.com/users/atsmtat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "892f706ce55d38bf8a6c80fec5d08e785d2240ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/892f706ce55d38bf8a6c80fec5d08e785d2240ac", "html_url": "https://github.com/rust-lang/rust/commit/892f706ce55d38bf8a6c80fec5d08e785d2240ac"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "8bfc65111d4926f36ff6d2ff9a08f42044490dbe", "filename": "src/helpers.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ba64f485c881052c980648bed0b4ce29fb6dc19c/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba64f485c881052c980648bed0b4ce29fb6dc19c/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=ba64f485c881052c980648bed0b4ce29fb6dc19c", "patch": "@@ -460,15 +460,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.read_scalar(&errno_place.into())?.check_init()\n     }\n \n-    /// Sets the last OS error using a `std::io::Error`. This function tries to produce the most\n+    /// Sets the last OS error using a `std::io::ErrorKind`. This function tries to produce the most\n     /// similar OS error from the `std::io::ErrorKind` and sets it as the last OS error.\n-    fn set_last_error_from_io_error(&mut self, e: std::io::Error) -> InterpResult<'tcx> {\n+    fn set_last_error_from_io_error(&mut self, err_kind: std::io::ErrorKind) -> InterpResult<'tcx> {\n         use std::io::ErrorKind::*;\n         let this = self.eval_context_mut();\n         let target = &this.tcx.sess.target;\n         let target_os = &target.os;\n         let last_error = if target.families.contains(&\"unix\".to_owned()) {\n-            this.eval_libc(match e.kind() {\n+            this.eval_libc(match err_kind {\n                 ConnectionRefused => \"ECONNREFUSED\",\n                 ConnectionReset => \"ECONNRESET\",\n                 PermissionDenied => \"EPERM\",\n@@ -484,18 +484,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 AlreadyExists => \"EEXIST\",\n                 WouldBlock => \"EWOULDBLOCK\",\n                 _ => {\n-                    throw_unsup_format!(\"io error {} cannot be transformed into a raw os error\", e)\n+                    throw_unsup_format!(\n+                        \"io error {:?} cannot be transformed into a raw os error\",\n+                        err_kind\n+                    )\n                 }\n             })?\n         } else if target.families.contains(&\"windows\".to_owned()) {\n             // FIXME: we have to finish implementing the Windows equivalent of this.\n             this.eval_windows(\n                 \"c\",\n-                match e.kind() {\n+                match err_kind {\n                     NotFound => \"ERROR_FILE_NOT_FOUND\",\n                     _ => throw_unsup_format!(\n-                        \"io error {} cannot be transformed into a raw os error\",\n-                        e\n+                        \"io error {:?} cannot be transformed into a raw os error\",\n+                        err_kind\n                     ),\n                 },\n             )?\n@@ -521,7 +524,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match result {\n             Ok(ok) => Ok(ok),\n             Err(e) => {\n-                self.eval_context_mut().set_last_error_from_io_error(e)?;\n+                self.eval_context_mut().set_last_error_from_io_error(e.kind())?;\n                 Ok((-1).into())\n             }\n         }"}, {"sha": "2ce0fbfdc949c7733a2c96f4c79e36f86631bee3", "filename": "src/shims/env.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ba64f485c881052c980648bed0b4ce29fb6dc19c/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba64f485c881052c980648bed0b4ce29fb6dc19c/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=ba64f485c881052c980648bed0b4ce29fb6dc19c", "patch": "@@ -1,7 +1,7 @@\n use std::convert::TryFrom;\n use std::env;\n use std::ffi::{OsStr, OsString};\n-use std::io::{Error, ErrorKind};\n+use std::io::ErrorKind;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_mir::interpret::Pointer;\n@@ -324,8 +324,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"getcwd\", reject_with)?;\n-            let err = Error::new(ErrorKind::NotFound, \"rejected due to isolation\");\n-            this.set_last_error_from_io_error(err)?;\n+            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n             return Ok(Scalar::null_ptr(&*this.tcx));\n         }\n \n@@ -340,7 +339,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let erange = this.eval_libc(\"ERANGE\")?;\n                 this.set_last_error(erange)?;\n             }\n-            Err(e) => this.set_last_error_from_io_error(e)?,\n+            Err(e) => this.set_last_error_from_io_error(e.kind())?,\n         }\n \n         Ok(Scalar::null_ptr(&*this.tcx))\n@@ -357,8 +356,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"GetCurrentDirectoryW\", reject_with)?;\n-            let err = Error::new(ErrorKind::NotFound, \"rejected due to isolation\");\n-            this.set_last_error_from_io_error(err)?;\n+            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n             return Ok(0);\n         }\n \n@@ -369,7 +367,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match env::current_dir() {\n             Ok(cwd) =>\n                 return Ok(windows_check_buffer_size(this.write_path_to_wide_str(&cwd, buf, size)?)),\n-            Err(e) => this.set_last_error_from_io_error(e)?,\n+            Err(e) => this.set_last_error_from_io_error(e.kind())?,\n         }\n         Ok(0)\n     }\n@@ -384,8 +382,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"chdir\", reject_with)?;\n-            let err = Error::new(ErrorKind::NotFound, \"rejected due to isolation\");\n-            this.set_last_error_from_io_error(err)?;\n+            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n \n             return Ok(-1);\n         }\n@@ -395,7 +392,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match env::set_current_dir(path) {\n             Ok(()) => Ok(0),\n             Err(e) => {\n-                this.set_last_error_from_io_error(e)?;\n+                this.set_last_error_from_io_error(e.kind())?;\n                 Ok(-1)\n             }\n         }\n@@ -413,8 +410,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"SetCurrentDirectoryW\", reject_with)?;\n-            let err = Error::new(ErrorKind::NotFound, \"rejected due to isolation\");\n-            this.set_last_error_from_io_error(err)?;\n+            this.set_last_error_from_io_error(ErrorKind::NotFound)?;\n \n             return Ok(0);\n         }\n@@ -424,7 +420,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match env::set_current_dir(path) {\n             Ok(()) => Ok(1),\n             Err(e) => {\n-                this.set_last_error_from_io_error(e)?;\n+                this.set_last_error_from_io_error(e.kind())?;\n                 Ok(0)\n             }\n         }"}, {"sha": "fbef9f304071328f58ac429d59d2ad16ce3eeb6e", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba64f485c881052c980648bed0b4ce29fb6dc19c/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba64f485c881052c980648bed0b4ce29fb6dc19c/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=ba64f485c881052c980648bed0b4ce29fb6dc19c", "patch": "@@ -634,7 +634,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     match dup_result {\n                         Ok(dup_fd) => Ok(fh.insert_fd_with_min_fd(dup_fd, start)),\n                         Err(e) => {\n-                            this.set_last_error_from_io_error(e)?;\n+                            this.set_last_error_from_io_error(e.kind())?;\n                             Ok(-1)\n                         }\n                     }\n@@ -707,7 +707,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     Ok(read_bytes)\n                 }\n                 Err(e) => {\n-                    this.set_last_error_from_io_error(e)?;\n+                    this.set_last_error_from_io_error(e.kind())?;\n                     Ok(-1)\n                 }\n             }\n@@ -1118,7 +1118,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 Ok(Scalar::from_machine_usize(id, this))\n             }\n             Err(e) => {\n-                this.set_last_error_from_io_error(e)?;\n+                this.set_last_error_from_io_error(e.kind())?;\n                 Ok(Scalar::null_ptr(this))\n             }\n         }\n@@ -1462,7 +1462,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 Ok(path_bytes.len().try_into().unwrap())\n             }\n             Err(e) => {\n-                this.set_last_error_from_io_error(e)?;\n+                this.set_last_error_from_io_error(e.kind())?;\n                 Ok(-1)\n             }\n         }\n@@ -1526,7 +1526,7 @@ impl FileMetadata {\n         let metadata = match metadata {\n             Ok(metadata) => metadata,\n             Err(e) => {\n-                ecx.set_last_error_from_io_error(e)?;\n+                ecx.set_last_error_from_io_error(e.kind())?;\n                 return Ok(None);\n             }\n         };"}]}