{"sha": "ed583994493d9828533e0875fe6b143cd61efac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNTgzOTk0NDkzZDk4Mjg1MzNlMDg3NWZlNmIxNDNjZDYxZWZhYzg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-15T13:05:12Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-15T13:12:47Z"}, "message": "Rollup merge of #22297 - nagisa:spring-cleanup, r=alexcrichton\n\n This PR replaces uses of `os::getenv` with newly introduced `env::var{,_os}`.\n\nMostly did this as a background activity to procrastinate from procrastinating.\n\nTests appear to build and run fine. This includes benchmarks from test/bench directory.", "tree": {"sha": "9171cf560e704d8f61697fd83f4ba67675f21ffd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9171cf560e704d8f61697fd83f4ba67675f21ffd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed583994493d9828533e0875fe6b143cd61efac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed583994493d9828533e0875fe6b143cd61efac8", "html_url": "https://github.com/rust-lang/rust/commit/ed583994493d9828533e0875fe6b143cd61efac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed583994493d9828533e0875fe6b143cd61efac8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc1900f0d0ce09e26c5b0693d83516a4d0cf505f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1900f0d0ce09e26c5b0693d83516a4d0cf505f", "html_url": "https://github.com/rust-lang/rust/commit/bc1900f0d0ce09e26c5b0693d83516a4d0cf505f"}, {"sha": "220bf41d252048310632bc357eb2de2cc2e62e8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/220bf41d252048310632bc357eb2de2cc2e62e8c", "html_url": "https://github.com/rust-lang/rust/commit/220bf41d252048310632bc357eb2de2cc2e62e8c"}], "stats": {"total": 97, "additions": 56, "deletions": 41}, "files": [{"sha": "b80a486b191d20ede43a37b50bb558ca8a330d36", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -384,8 +384,7 @@ impl Target {\n             Path::new(target)\n         };\n \n-        let target_path = env::var_os(\"RUST_TARGET_PATH\")\n-                              .unwrap_or(OsString::from_str(\"\"));\n+        let target_path = env::var_os(\"RUST_TARGET_PATH\").unwrap_or(OsString::from_str(\"\"));\n \n         // FIXME 16351: add a sane default search path?\n "}, {"sha": "d783acd57ac04356fe6e6f06fa1e722f1cfbd1fd", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -1024,14 +1024,14 @@ impl fmt::Display for TryRecvError {\n mod test {\n     use prelude::v1::*;\n \n-    use os;\n+    use std::env;\n     use super::*;\n     use thread::Thread;\n \n     pub fn stress_factor() -> uint {\n-        match os::getenv(\"RUST_TEST_STRESS\") {\n-            Some(val) => val.parse().unwrap(),\n-            None => 1,\n+        match env::var(\"RUST_TEST_STRESS\") {\n+            Ok(val) => val.parse().unwrap(),\n+            Err(..) => 1,\n         }\n     }\n \n@@ -1546,14 +1546,14 @@ mod test {\n mod sync_tests {\n     use prelude::v1::*;\n \n-    use os;\n+    use std::env;\n     use thread::Thread;\n     use super::*;\n \n     pub fn stress_factor() -> uint {\n-        match os::getenv(\"RUST_TEST_STRESS\") {\n-            Some(val) => val.parse().unwrap(),\n-            None => 1,\n+        match env::var(\"RUST_TEST_STRESS\") {\n+            Ok(val) => val.parse().unwrap(),\n+            Err(..) => 1,\n         }\n     }\n "}, {"sha": "00f8feacff8cab0710b16b85f3864a92a2e1da8c", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -17,6 +17,7 @@ use std::old_io::File;\n use std::iter::repeat;\n use std::mem::swap;\n use std::os;\n+use std::env;\n use std::rand::Rng;\n use std::rand;\n use std::str;\n@@ -46,7 +47,7 @@ fn main() {\n fn maybe_run_test<F>(argv: &[String], name: String, test: F) where F: FnOnce() {\n     let mut run_test = false;\n \n-    if os::getenv(\"RUST_BENCH\").is_some() {\n+    if env::var_os(\"RUST_BENCH\").is_some() {\n         run_test = true\n     } else if argv.len() > 0 {\n         run_test = argv.iter().any(|x| x == &\"all\".to_string()) || argv.iter().any(|x| x == &name)"}, {"sha": "90cc222c3deba06188dc9788ad9b35817f64367f", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -9,10 +9,11 @@\n // except according to those terms.\n \n use std::os;\n+use std::env;\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"10000000\".to_string())\n     } else if args.len() <= 1u {\n         vec!(\"\".to_string(), \"100000\".to_string())"}, {"sha": "4e9c2fe99bd4a342fdecef0033ca366a2d7019fb", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -20,6 +20,7 @@\n \n use std::sync::mpsc::{channel, Sender, Receiver};\n use std::os;\n+use std::env;\n use std::thread::Thread;\n use std::time::Duration;\n \n@@ -94,7 +95,7 @@ fn run(args: &[String]) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"1000000\".to_string(), \"10000\".to_string())\n     } else if args.len() <= 1u {\n         vec!(\"\".to_string(), \"10000\".to_string(), \"4\".to_string())"}, {"sha": "2530e8bd90707f31b2e9aa01d6693411516f64cb", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -16,6 +16,7 @@\n \n use std::sync::mpsc::{channel, Sender, Receiver};\n use std::os;\n+use std::env;\n use std::thread::Thread;\n use std::time::Duration;\n \n@@ -101,7 +102,7 @@ fn run(args: &[String]) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"1000000\".to_string(), \"8\".to_string())\n     } else if args.len() <= 1u {\n         vec!(\"\".to_string(), \"10000\".to_string(), \"4\".to_string())"}, {"sha": "a935a6b30864612eef5b356bf700f74c11de2274", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -19,6 +19,7 @@\n // ignore-lexer-test FIXME #15679\n \n use std::os;\n+use std::env;\n use std::sync::{Arc, Future, Mutex, Condvar};\n use std::time::Duration;\n \n@@ -64,7 +65,7 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"100\".to_string(), \"10000\".to_string())\n     } else if args.len() <= 1u {\n         vec!(\"\".to_string(), \"10\".to_string(), \"100\".to_string())"}, {"sha": "933c1c218c376441004a08eb34a9405025299e4b", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::os;\n+use std::env;\n \n fn ack(m: int, n: int) -> int {\n     if m == 0 {\n@@ -24,7 +25,7 @@ fn ack(m: int, n: int) -> int {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"12\".to_string())\n     } else if args.len() <= 1u {\n         vec!(\"\".to_string(), \"8\".to_string())"}, {"sha": "0311a1ac7c4e1e6ca4e79f69c1d660d8436730c0", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -86,7 +86,7 @@ fn inner(depth: i32, iterations: i32) -> String {\n fn main() {\n     let args = std::os::args();\n     let args = args;\n-    let n = if std::os::getenv(\"RUST_BENCH\").is_some() {\n+    let n = if std::env::var_os(\"RUST_BENCH\").is_some() {\n         17\n     } else if args.len() <= 1u {\n         8"}, {"sha": "628206986c51829a7a6d31c29dd2acd619f887f6", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -227,7 +227,7 @@ fn rendezvous(nn: uint, set: Vec<Color>) {\n }\n \n fn main() {\n-    let nn = if std::os::getenv(\"RUST_BENCH\").is_some() {\n+    let nn = if std::env::var_os(\"RUST_BENCH\").is_some() {\n         200000\n     } else {\n         std::os::args()"}, {"sha": "5bf0862e0a1d6b8d809ca254bee45dd3c56d8a9d", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -43,6 +43,7 @@ use std::old_io::{BufferedWriter, File};\n use std::old_io;\n use std::num::Float;\n use std::os;\n+use std::env;\n \n const LINE_LENGTH: uint = 60;\n const IM: u32 = 139968;\n@@ -105,7 +106,7 @@ fn make_fasta<W: Writer, I: Iterator<Item=u8>>(\n fn run<W: Writer>(writer: &mut W) -> std::old_io::IoResult<()> {\n     let args = os::args();\n     let args = args;\n-    let n = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let n = if env::var_os(\"RUST_BENCH\").is_some() {\n         25000000\n     } else if args.len() <= 1u {\n         1000\n@@ -143,7 +144,7 @@ fn run<W: Writer>(writer: &mut W) -> std::old_io::IoResult<()> {\n }\n \n fn main() {\n-    let res = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let res = if env::var_os(\"RUST_BENCH\").is_some() {\n         let mut file = BufferedWriter::new(File::create(&Path::new(\"./shootout-fasta.data\")));\n         run(&mut file)\n     } else {"}, {"sha": "6a062ba3980d65606eb670b96ad1da7dd46416dc", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::os;\n+use std::env;\n \n fn fib(n: int) -> int {\n     if n < 2 {\n@@ -20,7 +21,7 @@ fn fib(n: int) -> int {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"40\".to_string())\n     } else if args.len() <= 1u {\n         vec!(\"\".to_string(), \"30\".to_string())"}, {"sha": "3c96878179f3ab473e05ec3e1a2396f899c84a8b", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -22,6 +22,7 @@ use std::mem::replace;\n use std::num::Float;\n use std::option;\n use std::os;\n+use std::env;\n use std::sync::mpsc::{channel, Sender, Receiver};\n use std::thread::Thread;\n \n@@ -148,7 +149,7 @@ fn make_sequence_processor(sz: uint,\n fn main() {\n     use std::old_io::{stdio, MemReader, BufferedReader};\n \n-    let rdr = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let rdr = if env::var_os(\"RUST_BENCH\").is_some() {\n         let foo = include_bytes!(\"shootout-k-nucleotide.data\");\n         box MemReader::new(foo.to_vec()) as Box<Reader>\n     } else {"}, {"sha": "ca920b2fa821c9470b1072db83da7b22ff4b07cc", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -291,7 +291,7 @@ fn get_sequence<R: Buffer>(r: &mut R, key: &str) -> Vec<u8> {\n }\n \n fn main() {\n-    let input = if std::os::getenv(\"RUST_BENCH\").is_some() {\n+    let input = if std::env::var_os(\"RUST_BENCH\").is_some() {\n         let fd = std::old_io::File::open(&Path::new(\"shootout-k-nucleotide.data\"));\n         get_sequence(&mut std::old_io::BufferedReader::new(fd), \">THREE\")\n     } else {"}, {"sha": "7904657bece2855dee67265f8f001d3a9c87cdf2", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -170,7 +170,7 @@ fn offset_momentum(bodies: &mut [Planet;N_BODIES]) {\n }\n \n fn main() {\n-    let n = if std::os::getenv(\"RUST_BENCH\").is_some() {\n+    let n = if std::env::var_os(\"RUST_BENCH\").is_some() {\n         5000000\n     } else {\n         std::os::args().get(1)"}, {"sha": "9abc808f88770f2a58269e427b523376bdd7b936", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -22,6 +22,7 @@ extern crate getopts;\n \n use std::sync::mpsc::{channel, Sender};\n use std::os;\n+use std::env;\n use std::result::Result::{Ok, Err};\n use std::thread::Thread;\n use std::time::Duration;\n@@ -89,7 +90,7 @@ fn stress(num_tasks: int) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"20\".to_string())\n     } else if args.len() <= 1u {\n         vec!(\"\".to_string(), \"8\".to_string())"}, {"sha": "8356df8d8a184264390bdf7b342eda454a5d5e88", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -48,12 +48,13 @@ use std::thread::Thread;\n use std::mem;\n use std::num::Float;\n use std::os;\n+use std::env;\n use std::raw::Repr;\n use std::simd::f64x2;\n \n fn main() {\n     let args = os::args();\n-    let answer = spectralnorm(if os::getenv(\"RUST_BENCH\").is_some() {\n+    let answer = spectralnorm(if env::var_os(\"RUST_BENCH\").is_some() {\n         5500\n     } else if args.len() < 2 {\n         2000"}, {"sha": "8614f94da89ea87d03fdb2a70bc733876b112065", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -65,7 +65,7 @@ fn roundtrip(id: i32, tx: Sender<i32>, rx: Receiver<i32>) {\n \n fn main() {\n     let args = std::os::args();\n-    let token = if std::os::getenv(\"RUST_BENCH\").is_some() {\n+    let token = if std::env::var_os(\"RUST_BENCH\").is_some() {\n         2000000\n     } else {\n         args.get(1).and_then(|arg| arg.parse().ok()).unwrap_or(1000)"}, {"sha": "e6948a1371c9ed401b3de108cbaf0c2554a4b5c3", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -12,6 +12,7 @@\n \n use std::collections::VecMap;\n use std::os;\n+use std::env;\n use std::time::Duration;\n \n fn append_sequential(min: uint, max: uint, map: &mut VecMap<uint>) {\n@@ -28,7 +29,7 @@ fn check_sequential(min: uint, max: uint, map: &VecMap<uint>) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"100000\".to_string(), \"100\".to_string())\n     } else if args.len() <= 1u {\n         vec!(\"\".to_string(), \"10000\".to_string(), \"50\".to_string())"}, {"sha": "f09e64cb9c5eac8456a38c3cffb5226339ee1434", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(unsafe_destructor, box_syntax)]\n \n-use std::os;\n+use std::env;\n use std::thread::Thread;\n use std::time::Duration;\n \n@@ -20,7 +20,7 @@ enum List<T> {\n }\n \n fn main() {\n-    let (repeat, depth) = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let (repeat, depth) = if env::var_os(\"RUST_BENCH\").is_some() {\n         (50, 1000)\n     } else {\n         (10, 10)"}, {"sha": "9edb4201098d6c4a472786205995832a416c051c", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -19,6 +19,7 @@\n \n use std::sync::mpsc::{channel, Sender};\n use std::os;\n+use std::env;\n use std::thread::Thread;\n \n fn child_generation(gens_left: uint, tx: Sender<()>) {\n@@ -39,7 +40,7 @@ fn child_generation(gens_left: uint, tx: Sender<()>) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"100000\".to_string())\n     } else if args.len() <= 1 {\n         vec!(\"\".to_string(), \"100\".to_string())"}, {"sha": "279b3fa432a3cb208eefc98c64d476e61209ec01", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::os;\n+use std::env;\n use std::thread::Thread;\n \n fn f(n: uint) {\n@@ -23,7 +24,7 @@ fn g() { }\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n+    let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"400\".to_string())\n     } else if args.len() <= 1u {\n         vec!(\"\".to_string(), \"10\".to_string())"}, {"sha": "b1cb4d6e42c23f46c1c7a320526cf82fcc143ae6", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -15,14 +15,15 @@\n #![feature(unsafe_destructor)]\n \n use std::os;\n+use std::env;\n use std::old_io::process::Command;\n use std::str;\n use std::ops::{Drop, FnMut, FnOnce};\n \n #[inline(never)]\n fn foo() {\n     let _v = vec![1, 2, 3];\n-    if os::getenv(\"IS_TEST\").is_some() {\n+    if env::var_os(\"IS_TEST\").is_some() {\n         panic!()\n     }\n }"}, {"sha": "a71016fd88baaf6676c06df88de4340b424d1c1a", "filename": "src/test/run-pass/exec-env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Frun-pass%2Fexec-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Frun-pass%2Fexec-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexec-env.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -10,8 +10,8 @@\n \n // exec-env:TEST_EXEC_ENV=22\n \n-use std::os;\n+use std::env;\n \n pub fn main() {\n-    assert_eq!(os::getenv(\"TEST_EXEC_ENV\"), Some(\"22\".to_string()));\n+    assert_eq!(env::var(\"TEST_EXEC_ENV\"), Ok(\"22\".to_string()));\n }"}, {"sha": "aa45a8c5d5f7f538576fdbcb177f9cfbd84fa902", "filename": "src/test/run-pass/issue-15149.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Frun-pass%2Fissue-15149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15149.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -13,6 +13,7 @@\n use std::slice::SliceExt;\n use std::old_io::{Command, fs, USER_RWX};\n use std::os;\n+use std::env;\n use std::old_path::BytesContainer;\n use std::rand::random;\n \n@@ -45,7 +46,7 @@ fn test() {\n     fs::copy(&my_path, &child_path).unwrap();\n \n     // Append the new directory to our own PATH.\n-    let mut path = os::split_paths(os::getenv(\"PATH\").unwrap_or(String::new()));\n+    let mut path = os::split_paths(env::var(\"PATH\").ok().unwrap_or(String::new()));\n     path.push(child_dir.clone());\n     let path = os::join_paths(&path).unwrap();\n "}, {"sha": "9eb7d624c9921bf602fbc7ab34ddebcd994d73d9", "filename": "src/test/run-pass/process-remove-from-env.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed583994493d9828533e0875fe6b143cd61efac8/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-remove-from-env.rs?ref=ed583994493d9828533e0875fe6b143cd61efac8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::old_io::Command;\n-use std::os;\n+use std::env;\n \n #[cfg(all(unix, not(target_os=\"android\")))]\n pub fn env_cmd() -> Command {\n@@ -31,17 +31,17 @@ pub fn env_cmd() -> Command {\n \n fn main() {\n     // save original environment\n-    let old_env = os::getenv(\"RUN_TEST_NEW_ENV\");\n+    let old_env = env::var_os(\"RUN_TEST_NEW_ENV\");\n \n-    os::setenv(\"RUN_TEST_NEW_ENV\", \"123\");\n+    env::set_var(\"RUN_TEST_NEW_ENV\", \"123\");\n \n     let mut cmd = env_cmd();\n     cmd.env_remove(\"RUN_TEST_NEW_ENV\");\n \n     // restore original environment\n     match old_env {\n-        None => os::unsetenv(\"RUN_TEST_NEW_ENV\"),\n-        Some(val) => os::setenv(\"RUN_TEST_NEW_ENV\", val)\n+        None => env::remove_var(\"RUN_TEST_NEW_ENV\"),\n+        Some(val) => env::set_var(\"RUN_TEST_NEW_ENV\", &val)\n     }\n \n     let prog = cmd.spawn().unwrap();"}]}