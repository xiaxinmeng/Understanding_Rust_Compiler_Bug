{"sha": "2b35247d7a80e689dee6363730807687fdf42b5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMzUyNDdkN2E4MGU2ODlkZWU2MzYzNzMwODA3Njg3ZmRmNDJiNWQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-17T01:59:29Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-27T23:28:20Z"}, "message": "Modify wording", "tree": {"sha": "b9184e6caa04a819cdde18c540b3cb5dadfc43c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9184e6caa04a819cdde18c540b3cb5dadfc43c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b35247d7a80e689dee6363730807687fdf42b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b35247d7a80e689dee6363730807687fdf42b5d", "html_url": "https://github.com/rust-lang/rust/commit/2b35247d7a80e689dee6363730807687fdf42b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b35247d7a80e689dee6363730807687fdf42b5d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0d30b0a3ea6b715e275aa17ced2f7bc8d5207d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d30b0a3ea6b715e275aa17ced2f7bc8d5207d8", "html_url": "https://github.com/rust-lang/rust/commit/d0d30b0a3ea6b715e275aa17ced2f7bc8d5207d8"}], "stats": {"total": 104, "additions": 84, "deletions": 20}, "files": [{"sha": "ca925233333c19bef9c7ad771b247d8d841da4c1", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 72, "deletions": 11, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2b35247d7a80e689dee6363730807687fdf42b5d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b35247d7a80e689dee6363730807687fdf42b5d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=2b35247d7a80e689dee6363730807687fdf42b5d", "patch": "@@ -2,15 +2,17 @@\n \n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n-use crate::infer::{Subtype, ValuePairs};\n+use crate::infer::{Subtype, TyCtxtInferExt, ValuePairs};\n use crate::traits::ObligationCauseCode::CompareImplMethodObligation;\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::ErrorReported;\n+use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::intravisit::Visitor;\n use rustc_hir::ItemKind;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n@@ -59,8 +61,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             .tcx()\n             .sess\n             .struct_span_err(sp, \"`impl` item signature doesn't match `trait` item signature\");\n-        err.span_label(sp, &format!(\"found {:?}\", found));\n-        err.span_label(trait_sp, &format!(\"expected {:?}\", expected));\n+        err.span_label(sp, &format!(\"found `{:?}`\", found));\n+        err.span_label(trait_sp, &format!(\"expected `{:?}`\", expected));\n         let trait_fn_sig = tcx.fn_sig(trait_def_id);\n \n         // Check the `trait`'s method's output to look for type parameters that might have\n@@ -73,7 +75,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         struct AssocTypeFinder(FxIndexSet<ty::ParamTy>);\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for AssocTypeFinder {\n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> bool {\n-                debug!(\"assoc type finder ty {:?} {:?}\", ty, ty.kind);\n                 if let ty::Param(param) = ty.kind {\n                     self.0.insert(param);\n                 }\n@@ -86,18 +87,40 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             let parent_id = tcx.hir().get_parent_item(id);\n             let trait_item = tcx.hir().expect_item(parent_id);\n             if let ItemKind::Trait(_, _, generics, _, _) = &trait_item.kind {\n-                for param_ty in visitor.0 {\n+                for param_ty in &visitor.0 {\n                     if let Some(generic) = generics.get_named(param_ty.name) {\n-                        err.span_label(generic.span, &format!(\n-                            \"for `impl` items to implement the method, this type parameter might \\\n-                             need a lifetime restriction like `{}: 'a`\",\n-                            param_ty.name,\n-                        ));\n+                        err.span_label(\n+                            generic.span,\n+                            \"this type parameter might not have a lifetime compatible with the \\\n+                             `impl`\",\n+                        );\n                     }\n                 }\n             }\n         }\n \n+        // Get the span of all the used type parameters in the method.\n+        let assoc_item = self.tcx().associated_item(trait_def_id);\n+        let mut visitor = TypeParamSpanVisitor { tcx: self.tcx(), types: vec![] };\n+        match assoc_item.kind {\n+            ty::AssocKind::Method => {\n+                let hir = self.tcx().hir();\n+                if let Some(hir_id) = hir.as_local_hir_id(assoc_item.def_id) {\n+                    if let Some(decl) = hir.fn_decl_by_hir_id(hir_id) {\n+                        visitor.visit_fn_decl(decl);\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n+        for span in visitor.types {\n+            err.span_label(\n+                span,\n+                \"you might want to borrow this type parameter in the trait to make it match the \\\n+                 `impl`\",\n+            );\n+        }\n+\n         if let Some((expected, found)) = tcx\n             .infer_ctxt()\n             .enter(|infcx| infcx.expected_found_str_ty(&ExpectedFound { expected, found }))\n@@ -116,3 +139,41 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         err.emit();\n     }\n }\n+\n+struct TypeParamSpanVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    types: Vec<Span>,\n+}\n+\n+impl Visitor<'tcx> for TypeParamSpanVisitor<'tcx> {\n+    type Map = hir::intravisit::Map<'tcx>;\n+\n+    fn nested_visit_map<'this>(\n+        &'this mut self,\n+    ) -> hir::intravisit::NestedVisitorMap<'this, Self::Map> {\n+        hir::intravisit::NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n+    }\n+\n+    fn visit_ty(&mut self, arg: &'tcx hir::Ty<'tcx>) {\n+        match arg.kind {\n+            hir::TyKind::Slice(_) | hir::TyKind::Tup(_) | hir::TyKind::Array(..) => {\n+                hir::intravisit::walk_ty(self, arg);\n+            }\n+            hir::TyKind::Path(hir::QPath::Resolved(None, path)) => match &path.segments {\n+                [segment]\n+                    if segment\n+                        .res\n+                        .map(|res| match res {\n+                            hir::def::Res::Def(hir::def::DefKind::TyParam, _) => true,\n+                            _ => false,\n+                        })\n+                        .unwrap_or(false) =>\n+                {\n+                    self.types.push(path.span);\n+                }\n+                _ => {}\n+            },\n+            _ => {}\n+        }\n+    }\n+}"}, {"sha": "61a8674a2310eb58268b3d1f342ba19d8f52d153", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b35247d7a80e689dee6363730807687fdf42b5d/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b35247d7a80e689dee6363730807687fdf42b5d/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=2b35247d7a80e689dee6363730807687fdf42b5d", "patch": "@@ -2,12 +2,12 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/mismatched_trait_impl-2.rs:8:5\n    |\n LL |     fn deref(&self) -> &dyn Trait {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&Struct) -> &dyn Trait\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&Struct) -> &dyn Trait`\n    | \n   ::: $SRC_DIR/libcore/ops/deref.rs:LL:COL\n    |\n LL |     fn deref(&self) -> &Self::Target;\n-   |     --------------------------------- expected fn(&Struct) -> &(dyn Trait + 'static)\n+   |     --------------------------------- expected `fn(&Struct) -> &(dyn Trait + 'static)`\n    |\n    = note: expected `fn(&Struct) -> &(dyn Trait + 'static)`\n               found `fn(&Struct) -> &dyn Trait`"}, {"sha": "ca61029145530242faffc49c5bd56ff493da6228", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b35247d7a80e689dee6363730807687fdf42b5d/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b35247d7a80e689dee6363730807687fdf42b5d/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=2b35247d7a80e689dee6363730807687fdf42b5d", "patch": "@@ -2,10 +2,10 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/mismatched_trait_impl.rs:9:5\n    |\n LL |     fn foo(&self, x: &'a u32, y: &u32) -> &'a u32;\n-   |     ---------------------------------------------- expected fn(&i32, &'a u32, &u32) -> &'a u32\n+   |     ---------------------------------------------- expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n ...\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &u32, &u32) -> &u32\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&i32, &u32, &u32) -> &u32`\n    |\n    = note: expected `fn(&i32, &'a u32, &u32) -> &'a u32`\n               found `fn(&i32, &u32, &u32) -> &u32`"}, {"sha": "53f6aae5ff6e0163f2f2e961a7d26ba4e09c5a54", "filename": "src/test/ui/lifetimes/lifetime-mismatch-between-trait-and-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b35247d7a80e689dee6363730807687fdf42b5d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b35247d7a80e689dee6363730807687fdf42b5d/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-mismatch-between-trait-and-impl.stderr?ref=2b35247d7a80e689dee6363730807687fdf42b5d", "patch": "@@ -2,10 +2,10 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/lifetime-mismatch-between-trait-and-impl.rs:6:5\n    |\n LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32;\n-   |     ------------------------------------------- expected fn(&i32, &'a i32) -> &'a i32\n+   |     ------------------------------------------- expected `fn(&i32, &'a i32) -> &'a i32`\n ...\n LL |     fn foo<'a>(x: &'a i32, y: &'a i32) -> &'a i32 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&i32, &i32) -> &i32\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&i32, &i32) -> &i32`\n    |\n    = note: expected `fn(&i32, &'a i32) -> &'a i32`\n               found `fn(&i32, &i32) -> &i32`"}, {"sha": "a7be2d3365c1a34b5c1d1cddec0c7ea6b937ccb4", "filename": "src/test/ui/traits/trait-param-without-lifetime-constraint.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b35247d7a80e689dee6363730807687fdf42b5d/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b35247d7a80e689dee6363730807687fdf42b5d/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-param-without-lifetime-constraint.stderr?ref=2b35247d7a80e689dee6363730807687fdf42b5d", "patch": "@@ -2,12 +2,15 @@ error: `impl` item signature doesn't match `trait` item signature\n   --> $DIR/trait-param-without-lifetime-constraint.rs:14:5\n    |\n LL | pub trait HaveRelationship<To> {\n-   |                            -- for `impl` items to implement the method, this type parameter might need a lifetime restriction like `To: 'a`\n+   |                            -- this type parameter might not have a lifetime compatible with the `impl`\n LL |     fn get_relation(&self) -> To;\n-   |     ----------------------------- expected fn(&Article) -> &ProofReader\n+   |     -----------------------------\n+   |     |                         |\n+   |     |                         you might want to borrow this type parameter in the trait to make it match the `impl`\n+   |     expected `fn(&Article) -> &ProofReader`\n ...\n LL |     fn get_relation(&self) -> &ProofReader {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found fn(&Article) -> &ProofReader\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ found `fn(&Article) -> &ProofReader`\n    |\n    = note: expected `fn(&Article) -> &ProofReader`\n               found `fn(&Article) -> &ProofReader`"}]}