{"sha": "a7de0bc4c6059d8455338d20444b38da85792500", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZGUwYmM0YzYwNTlkODQ1NTMzOGQyMDQ0NGIzOGRhODU3OTI1MDA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-08-09T19:28:24Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-08-11T13:56:00Z"}, "message": "Address comments by reviewers.", "tree": {"sha": "08c1c55ff18ffe4f303e63722826df87cd81da5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08c1c55ff18ffe4f303e63722826df87cd81da5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7de0bc4c6059d8455338d20444b38da85792500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7de0bc4c6059d8455338d20444b38da85792500", "html_url": "https://github.com/rust-lang/rust/commit/a7de0bc4c6059d8455338d20444b38da85792500", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7de0bc4c6059d8455338d20444b38da85792500/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65eb024542835c0235c31ef0e2381d155c797b03", "url": "https://api.github.com/repos/rust-lang/rust/commits/65eb024542835c0235c31ef0e2381d155c797b03", "html_url": "https://github.com/rust-lang/rust/commit/65eb024542835c0235c31ef0e2381d155c797b03"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "e988ddcd97b1518e34adde4771ca071903db99d6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a7de0bc4c6059d8455338d20444b38da85792500/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7de0bc4c6059d8455338d20444b38da85792500/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=a7de0bc4c6059d8455338d20444b38da85792500", "patch": "@@ -258,13 +258,11 @@ top_level_options!(\n         lint_cap: Option<lint::Level> [TRACKED],\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n-        // FIXME(mw): I'm not entirely sure if this can have any influence on\n-        //            incremental compilation apart from what is already handled\n-        //            by crate metadata hashes. Better track it.\n+        // FIXME(mw): We track this for now but it actually doesn't make too\n+        //            much sense: The search path can stay the same while the\n+        //            things discovered there might have changed on disk.\n         search_paths: SearchPaths [TRACKED],\n-        // FIXME(mw): Might not need to do dep-tracking for `libs`?\n         libs: Vec<(String, cstore::NativeLibraryKind)> [TRACKED],\n-        // FIXME(mw): Might not need to do dep-tracking for `maybe_sysroot`?\n         maybe_sysroot: Option<PathBuf> [TRACKED],\n \n         target_triple: String [TRACKED],\n@@ -280,8 +278,9 @@ top_level_options!(\n         debugging_opts: DebuggingOptions [TRACKED],\n         prints: Vec<PrintRequest> [UNTRACKED],\n         cg: CodegenOptions [TRACKED],\n-        // FIXME(mw): `externs` might not need to be tracked but let's err on\n-        //            the side of caution for now.\n+        // FIXME(mw): We track this for now but it actually doesn't make too\n+        //            much sense: The value of this option can stay the same\n+        //            while the files they refer to might have changed on disk.\n         externs: Externs [TRACKED],\n         crate_name: Option<String> [TRACKED],\n         // An optional name to use as the crate for std during std injection,\n@@ -1719,11 +1718,12 @@ mod dep_tracking {\n         ($t:ty) => (\n             impl DepTrackingHash for Vec<$t> {\n                 fn hash(&self, hasher: &mut SipHasher, error_format: ErrorOutputType) {\n-                    let mut elems = self.clone();\n+                    let mut elems: Vec<&$t> = self.iter().collect();\n                     elems.sort();\n-                    for (i, e) in elems.iter().enumerate() {\n-                        Hash::hash(&i, hasher);\n-                        DepTrackingHash::hash(e, hasher, error_format);\n+                    Hash::hash(&elems.len(), hasher);\n+                    for (index, elem) in elems.iter().enumerate() {\n+                        Hash::hash(&index, hasher);\n+                        DepTrackingHash::hash(*elem, hasher, error_format);\n                     }\n                 }\n             }"}]}