{"sha": "11864c4e6cbf9f76ba8589c251908a73c6d9277b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExODY0YzRlNmNiZjlmNzZiYTg1ODljMjUxOTA4YTczYzZkOTI3N2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-19T19:03:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-19T19:03:03Z"}, "message": "Auto merge of #51854 - davidtwco:rfc-2008-rustdoc, r=QuietMisdreavus\n\nRFC 2008 non-exhaustive enums/structs: Rustdoc\n\nPart of #44109. Not sure how those who maintain rustdoc primarily would prefer this addition look or where it should be placed, happy to make any changes required.\n\nr? @QuietMisdreavus (not sure if this is the right person, just guessing)", "tree": {"sha": "061d481b880474529eb4f474d7a2bb9c9e66e551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/061d481b880474529eb4f474d7a2bb9c9e66e551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11864c4e6cbf9f76ba8589c251908a73c6d9277b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11864c4e6cbf9f76ba8589c251908a73c6d9277b", "html_url": "https://github.com/rust-lang/rust/commit/11864c4e6cbf9f76ba8589c251908a73c6d9277b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11864c4e6cbf9f76ba8589c251908a73c6d9277b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8247dd5c69ca57ede5073209bd30afb90dd4e3b", "html_url": "https://github.com/rust-lang/rust/commit/a8247dd5c69ca57ede5073209bd30afb90dd4e3b"}, {"sha": "b671bdc381c8d4b870e408ae83b281ec3ede855f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b671bdc381c8d4b870e408ae83b281ec3ede855f", "html_url": "https://github.com/rust-lang/rust/commit/b671bdc381c8d4b870e408ae83b281ec3ede855f"}], "stats": {"total": 91, "additions": 81, "deletions": 10}, "files": [{"sha": "e3dc304128f172645f80ed802a82019299e7c7c2", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=11864c4e6cbf9f76ba8589c251908a73c6d9277b", "patch": "@@ -496,6 +496,11 @@ impl Item {\n         self.stability.as_ref().map(|s| &s.since[..])\n     }\n \n+    pub fn is_non_exhaustive(&self) -> bool {\n+        self.attrs.other_attrs.iter()\n+            .any(|a| a.name().as_str() == \"non_exhaustive\")\n+    }\n+\n     /// Returns a documentation-level item type from the item.\n     pub fn type_(&self) -> ItemType {\n         ItemType::from(self)"}, {"sha": "ddc5d56b474fcecf2ea08fa6b14fe0214e2ad998", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=11864c4e6cbf9f76ba8589c251908a73c6d9277b", "patch": "@@ -92,7 +92,16 @@ pub trait DocFolder : Sized {\n \n     /// don't override!\n     fn fold_item_recur(&mut self, item: Item) -> Option<Item> {\n-        let Item { attrs, name, source, visibility, def_id, inner, stability, deprecation } = item;\n+        let Item {\n+            attrs,\n+            name,\n+            source,\n+            visibility,\n+            def_id,\n+            inner,\n+            stability,\n+            deprecation,\n+        } = item;\n \n         let inner = match inner {\n             StrippedItem(box i) => StrippedItem(box self.fold_inner_recur(i)),"}, {"sha": "d92405612ea074e9a59a09e525d382715fa30b68", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=11864c4e6cbf9f76ba8589c251908a73c6d9277b", "patch": "@@ -2276,6 +2276,37 @@ fn document_stability(w: &mut fmt::Formatter, cx: &Context, item: &clean::Item)\n     Ok(())\n }\n \n+fn document_non_exhaustive_header(item: &clean::Item) -> &str {\n+    if item.is_non_exhaustive() { \" (Non-exhaustive)\" } else { \"\" }\n+}\n+\n+fn document_non_exhaustive(w: &mut fmt::Formatter, item: &clean::Item) -> fmt::Result {\n+    if item.is_non_exhaustive() {\n+        write!(w, \"<div class='docblock non-exhaustive non-exhaustive-{}'>\", {\n+            if item.is_struct() { \"struct\" } else if item.is_enum() { \"enum\" } else { \"type\" }\n+        })?;\n+\n+        if item.is_struct() {\n+            write!(w, \"Non-exhaustive structs could have additional fields added in future. \\\n+                       Therefore, non-exhaustive structs cannot be constructed in external crates \\\n+                       using the traditional <code>Struct {{ .. }}</code> syntax; cannot be \\\n+                       matched against without a wildcard <code>..</code>; and \\\n+                       struct update syntax will not work.\")?;\n+        } else if item.is_enum() {\n+            write!(w, \"Non-exhaustive enums could have additional variants added in future. \\\n+                       Therefore, when matching against variants of non-exhaustive enums, an \\\n+                       extra wildcard arm must be added to account for any future variants.\")?;\n+        } else {\n+            write!(w, \"This type will require a wildcard arm in any match statements or \\\n+                       constructors.\")?;\n+        }\n+\n+        write!(w, \"</div>\")?;\n+    }\n+\n+    Ok(())\n+}\n+\n fn name_key(name: &str) -> (&str, u64, usize) {\n     // find number at end\n     let split = name.bytes().rposition(|b| b < b'0' || b'9' < b).map_or(0, |s| s + 1);\n@@ -3136,7 +3167,9 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     if let doctree::Plain = s.struct_type {\n         if fields.peek().is_some() {\n             write!(w, \"<h2 id='fields' class='fields small-section-header'>\n-                       Fields<a href='#fields' class='anchor'></a></h2>\")?;\n+                       Fields{}<a href='#fields' class='anchor'></a></h2>\",\n+                       document_non_exhaustive_header(it))?;\n+            document_non_exhaustive(w, it)?;\n             for (field, ty) in fields {\n                 let id = derive_id(format!(\"{}.{}\",\n                                            ItemType::StructField,\n@@ -3268,7 +3301,9 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     document(w, cx, it)?;\n     if !e.variants.is_empty() {\n         write!(w, \"<h2 id='variants' class='variants small-section-header'>\n-                   Variants<a href='#variants' class='anchor'></a></h2>\\n\")?;\n+                   Variants{}<a href='#variants' class='anchor'></a></h2>\\n\",\n+                   document_non_exhaustive_header(it))?;\n+        document_non_exhaustive(w, it)?;\n         for variant in &e.variants {\n             let id = derive_id(format!(\"{}.{}\",\n                                        ItemType::Variant,\n@@ -3369,7 +3404,8 @@ const ATTRIBUTE_WHITELIST: &'static [&'static str] = &[\n     \"must_use\",\n     \"no_mangle\",\n     \"repr\",\n-    \"unsafe_destructor_blind_to_params\"\n+    \"unsafe_destructor_blind_to_params\",\n+    \"non_exhaustive\"\n ];\n \n fn render_attributes(w: &mut fmt::Formatter, it: &clean::Item) -> fmt::Result {"}, {"sha": "62ef5626ee5bb4f1165ac09b34d4e3413ac38872", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=11864c4e6cbf9f76ba8589c251908a73c6d9277b", "patch": "@@ -2001,15 +2001,18 @@\n         onEach(e.getElementsByClassName('associatedconstant'), func);\n     });\n \n-    function createToggle(otherMessage, extraClass) {\n+    function createToggle(otherMessage, fontSize, extraClass) {\n         var span = document.createElement('span');\n         span.className = 'toggle-label';\n         span.style.display = 'none';\n         if (!otherMessage) {\n             span.innerHTML = '&nbsp;Expand&nbsp;description';\n         } else {\n             span.innerHTML = otherMessage;\n-            span.style.fontSize = '20px';\n+        }\n+\n+        if (fontSize) {\n+            span.style.fontSize = fontSize;\n         }\n \n         var mainToggle = toggle.cloneNode(true);\n@@ -2048,13 +2051,27 @@\n         }\n         if (e.parentNode.id === \"main\") {\n             var otherMessage;\n+            var fontSize;\n             var extraClass;\n+\n             if (hasClass(e, \"type-decl\")) {\n+                fontSize = \"20px\";\n                 otherMessage = '&nbsp;Show&nbsp;declaration';\n+            } else if (hasClass(e, \"non-exhaustive\")) {\n+                otherMessage = '&nbsp;This&nbsp;';\n+                if (hasClass(e, \"non-exhaustive-struct\")) {\n+                    otherMessage += 'struct';\n+                } else if (hasClass(e, \"non-exhaustive-enum\")) {\n+                    otherMessage += 'enum';\n+                } else if (hasClass(e, \"non-exhaustive-type\")) {\n+                    otherMessage += 'type';\n+                }\n+                otherMessage += '&nbsp;is&nbsp;marked&nbsp;as&nbsp;non-exhaustive';\n             } else if (hasClass(e.childNodes[0], \"impl-items\")) {\n                 extraClass = \"marg-left\";\n             }\n-            e.parentNode.insertBefore(createToggle(otherMessage, extraClass), e);\n+\n+            e.parentNode.insertBefore(createToggle(otherMessage, fontSize, extraClass), e);\n             if (otherMessage && getCurrentValue('rustdoc-item-declarations') !== \"false\") {\n                 collapseDocs(e.previousSibling.childNodes[0], \"toggle\");\n             }"}, {"sha": "b689e2fa3854e3608f2344b8f8ebd7ab4e745891", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=11864c4e6cbf9f76ba8589c251908a73c6d9277b", "patch": "@@ -1358,4 +1358,8 @@ kbd {\n }\n #all-types > p {\n \tmargin: 5px 0;\n-}\n\\ No newline at end of file\n+}\n+\n+.non-exhaustive {\n+\tmargin-bottom: 1em;\n+}"}, {"sha": "b4342f4749185cd84eaa85796b15968f5b2fb020", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=11864c4e6cbf9f76ba8589c251908a73c6d9277b", "patch": "@@ -406,4 +406,4 @@ kbd {\n }\n .search-results td span.grey {\n \tcolor: #ccc;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e84e3cb56636e485048b3be7d856e3225f47e891", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/11864c4e6cbf9f76ba8589c251908a73c6d9277b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=11864c4e6cbf9f76ba8589c251908a73c6d9277b", "patch": "@@ -400,4 +400,4 @@ kbd {\n }\n .search-results td span.grey {\n \tcolor: #999;\n-}\n\\ No newline at end of file\n+}"}]}