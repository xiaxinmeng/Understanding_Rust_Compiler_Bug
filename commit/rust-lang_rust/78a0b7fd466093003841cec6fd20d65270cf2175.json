{"sha": "78a0b7fd466093003841cec6fd20d65270cf2175", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YTBiN2ZkNDY2MDkzMDAzODQxY2VjNmZkMjBkNjUyNzBjZjIxNzU=", "commit": {"author": {"name": "O01eg", "email": "o01eg@yandex.ru", "date": "2018-02-07T17:57:02Z"}, "committer": {"name": "O01eg", "email": "o01eg@yandex.ru", "date": "2018-02-07T17:57:02Z"}, "message": "Refactor checks on list of extended tools.", "tree": {"sha": "015df3a72d799aee405b5db0f77a39f3d9181fb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/015df3a72d799aee405b5db0f77a39f3d9181fb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78a0b7fd466093003841cec6fd20d65270cf2175", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQQl7SqOimvGwwcxiyLRqU8kAPvH5QUCWns97gAKCRDRqU8kAPvH\n5WKJAP0Wowatyw3WoZN/4ZZYDcltWwb0tkRJnM2jGC2EuPNT9gEAlbc5U+7YRClU\ngZ4dHm5GH5WIiAfMwFb1T0R+Wa74cjQ=\n=cyI3\n-----END PGP SIGNATURE-----", "payload": "tree 015df3a72d799aee405b5db0f77a39f3d9181fb2\nparent 7be8e2fbb3745602ac864fc079a040dd3a80d91d\nauthor O01eg <o01eg@yandex.ru> 1518026222 +0300\ncommitter O01eg <o01eg@yandex.ru> 1518026222 +0300\n\nRefactor checks on list of extended tools.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78a0b7fd466093003841cec6fd20d65270cf2175", "html_url": "https://github.com/rust-lang/rust/commit/78a0b7fd466093003841cec6fd20d65270cf2175", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78a0b7fd466093003841cec6fd20d65270cf2175/comments", "author": {"login": "o01eg", "id": 397177, "node_id": "MDQ6VXNlcjM5NzE3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/397177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/o01eg", "html_url": "https://github.com/o01eg", "followers_url": "https://api.github.com/users/o01eg/followers", "following_url": "https://api.github.com/users/o01eg/following{/other_user}", "gists_url": "https://api.github.com/users/o01eg/gists{/gist_id}", "starred_url": "https://api.github.com/users/o01eg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/o01eg/subscriptions", "organizations_url": "https://api.github.com/users/o01eg/orgs", "repos_url": "https://api.github.com/users/o01eg/repos", "events_url": "https://api.github.com/users/o01eg/events{/privacy}", "received_events_url": "https://api.github.com/users/o01eg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "o01eg", "id": 397177, "node_id": "MDQ6VXNlcjM5NzE3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/397177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/o01eg", "html_url": "https://github.com/o01eg", "followers_url": "https://api.github.com/users/o01eg/followers", "following_url": "https://api.github.com/users/o01eg/following{/other_user}", "gists_url": "https://api.github.com/users/o01eg/gists{/gist_id}", "starred_url": "https://api.github.com/users/o01eg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/o01eg/subscriptions", "organizations_url": "https://api.github.com/users/o01eg/orgs", "repos_url": "https://api.github.com/users/o01eg/repos", "events_url": "https://api.github.com/users/o01eg/events{/privacy}", "received_events_url": "https://api.github.com/users/o01eg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7be8e2fbb3745602ac864fc079a040dd3a80d91d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be8e2fbb3745602ac864fc079a040dd3a80d91d", "html_url": "https://github.com/rust-lang/rust/commit/7be8e2fbb3745602ac864fc079a040dd3a80d91d"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "20f7d379a6967a45700f87a4de5d767e609a6b65", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/78a0b7fd466093003841cec6fd20d65270cf2175/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78a0b7fd466093003841cec6fd20d65270cf2175/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=78a0b7fd466093003841cec6fd20d65270cf2175", "patch": "@@ -22,6 +22,7 @@ use dist::{self, pkgname, sanitize_sh, tmpdir};\n \n use builder::{Builder, RunConfig, ShouldRun, Step};\n use cache::Interned;\n+use config::Config;\n \n pub fn install_docs(builder: &Builder, stage: u32, host: Interned<String>) {\n     install_sh(builder, \"docs\", \"rust-docs\", stage, Some(host));\n@@ -144,6 +145,19 @@ macro_rules! install {\n             pub host: Interned<String>,\n         }\n \n+        impl $name {\n+            #[allow(dead_code)]\n+            fn should_build(config: &Config) -> bool {\n+                config.extended && config.tools.as_ref()\n+                    .map_or(true, |t| t.contains($path))\n+            }\n+\n+            #[allow(dead_code)]\n+            fn should_install(builder: &Builder) -> bool {\n+                builder.config.tools.as_ref().map_or(false, |t| t.contains($path))\n+            }\n+        }\n+\n         impl Step for $name {\n             type Output = ();\n             const DEFAULT: bool = true;\n@@ -185,39 +199,34 @@ install!((self, builder, _config),\n             install_std(builder, self.stage, *target);\n         }\n     };\n-    Cargo, \"cargo\", _config.extended &&\n-            _config.tools.as_ref().map_or(true, |t| t.contains(\"cargo\")), only_hosts: true, {\n+    Cargo, \"cargo\", Self::should_build(_config), only_hosts: true, {\n         builder.ensure(dist::Cargo { stage: self.stage, target: self.target });\n         install_cargo(builder, self.stage, self.target);\n     };\n-    Rls, \"rls\", _config.extended &&\n-            _config.tools.as_ref().map_or(true, |t| t.contains(\"rls\")), only_hosts: true, {\n+    Rls, \"rls\", Self::should_build(_config), only_hosts: true, {\n         if builder.ensure(dist::Rls { stage: self.stage, target: self.target }).is_some() ||\n-            builder.config.tools.as_ref().map_or(false, |t| t.contains(\"rls\")) {\n+            Self::should_install(builder) {\n             install_rls(builder, self.stage, self.target);\n         } else {\n             println!(\"skipping Install RLS stage{} ({})\", self.stage, self.target);\n         }\n     };\n-    Rustfmt, \"rustfmt\", _config.extended &&\n-            _config.tools.as_ref().map_or(true, |t| t.contains(\"rustfmt\")), only_hosts: true, {\n+    Rustfmt, \"rustfmt\", Self::should_build(_config), only_hosts: true, {\n         if builder.ensure(dist::Rustfmt { stage: self.stage, target: self.target }).is_some() ||\n-            builder.config.tools.as_ref().map_or(false, |t| t.contains(\"rustfmt\"))  {\n+            Self::should_install(builder) {\n             install_rustfmt(builder, self.stage, self.target);\n         } else {\n             println!(\"skipping Install Rustfmt stage{} ({})\", self.stage, self.target);\n         }\n     };\n-    Analysis, \"analysis\", _config.extended &&\n-            _config.tools.as_ref().map_or(true, |t| t.contains(\"analysis\")), only_hosts: false, {\n+    Analysis, \"analysis\", Self::should_build(_config), only_hosts: false, {\n         builder.ensure(dist::Analysis {\n             compiler: builder.compiler(self.stage, self.host),\n             target: self.target\n         });\n         install_analysis(builder, self.stage, self.target);\n     };\n-    Src, \"src\", _config.extended &&\n-            _config.tools.as_ref().map_or(true, |t| t.contains(\"src\")), only_hosts: true, {\n+    Src, \"src\", Self::should_build(_config) , only_hosts: true, {\n         builder.ensure(dist::Src);\n         install_src(builder, self.stage);\n     }, ONLY_BUILD;"}]}