{"sha": "1b5be76bdf33db05eaca01932852fd29fe199d0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNWJlNzZiZGYzM2RiMDVlYWNhMDE5MzI4NTJmZDI5ZmUxOTlkMGY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-28T12:25:44Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-28T12:25:44Z"}, "message": "Add `time` crate to index, expand docs of `test`.", "tree": {"sha": "74a7101a3b454d3d1b2ace1cffb2ede65eea9300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a7101a3b454d3d1b2ace1cffb2ede65eea9300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5be76bdf33db05eaca01932852fd29fe199d0f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5be76bdf33db05eaca01932852fd29fe199d0f", "html_url": "https://github.com/rust-lang/rust/commit/1b5be76bdf33db05eaca01932852fd29fe199d0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5be76bdf33db05eaca01932852fd29fe199d0f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e9c947a3303b4b785f9a7f130b00c625456326", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e9c947a3303b4b785f9a7f130b00c625456326", "html_url": "https://github.com/rust-lang/rust/commit/31e9c947a3303b4b785f9a7f130b00c625456326"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "cf2d8155f7e51eeb93e574b604671cbd6947f47c", "filename": "src/doc/index.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b5be76bdf33db05eaca01932852fd29fe199d0f/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b5be76bdf33db05eaca01932852fd29fe199d0f/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=1b5be76bdf33db05eaca01932852fd29fe199d0f", "patch": "@@ -42,7 +42,8 @@ li {list-style-type: none; }\n * [The `sync` library for concurrency-enabled mechanisms and primitives](sync/index.html)\n * [The `syntax` library, the Rust parser](syntax/index.html)\n * [The `term` terminal-handling library](term/index.html)\n-* [The `test` library](test/index.html)\n+* [The `test` library containing the unit-testing & micro-benchmark framework](test/index.html)\n+* [The `time` library](time/index.html)\n * [The `uuid` 128-bit universally unique identifier library](uuid/index.html)\n \n # Tooling"}, {"sha": "c156e3f9ad9085eebcaf6f47d281d6ac0475a6bc", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1b5be76bdf33db05eaca01932852fd29fe199d0f/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5be76bdf33db05eaca01932852fd29fe199d0f/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=1b5be76bdf33db05eaca01932852fd29fe199d0f", "patch": "@@ -8,10 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Support code for rustc's built in test runner generator. Currently,\n-// none of this is meant for users. It is intended to support the\n-// simplest interface possible for representing and running tests\n-// while providing a base that other test frameworks may build off of.\n+//! Support code for rustc's built in unit-test and micro-benchmarking\n+//! framework.\n+//!\n+//! Almost all user code will only be interested in `BenchHarness` and\n+//! `black_box`. All other interactions (such as writing tests and\n+//! benchmarks themselves) should be done via the `#[test]` and\n+//! `#[bench]` attributes.\n+//!\n+//! See the [Testing Guide](../guide-testing.html) for more details.\n+\n+// Currently, not much of this is meant for users. It is intended to\n+// support the simplest interface possible for representing and\n+// running tests while providing a base that other test frameworks may\n+// build off of.\n \n #[crate_id = \"test#0.10-pre\"];\n #[comment = \"Rust internal test library only used by rustc\"];\n@@ -127,7 +137,11 @@ impl TestFn {\n     }\n }\n \n-// Structure passed to BenchFns\n+/// Manager of the benchmarking runs.\n+///\n+/// This is feed into functions marked with `#[bench]` to allow for\n+/// set-up & tear-down before running a piece of code repeatedly via a\n+/// call to `iter`.\n pub struct BenchHarness {\n     priv iterations: u64,\n     priv ns_start: u64,\n@@ -1575,4 +1589,3 @@ mod tests {\n         assert_eq!(*(m4.find(&~\"throughput\").unwrap()), Metric::new(50.0, 2.0));\n     }\n }\n-"}]}