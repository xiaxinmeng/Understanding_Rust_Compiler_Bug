{"sha": "1f43824a8b783c74418a0b2c8b962b61b546f952", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNDM4MjRhOGI3ODNjNzQ0MThhMGIyYzhiOTYyYjYxYjU0NmY5NTI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-15T09:36:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-15T09:36:29Z"}, "message": "Rollup merge of #66398 - sfackler:no-async-nesting, r=Centril\n\nRemove some stack frames from `.async` calls\n\nThe `Context` argument is currently smuggled through TLS for\nasync-generated futures. The current infrastructure is closure-based,\nand results in an extra 6 stack frames when .awaiting an async-generated\nfuture!\n\n```\n  12: foo::async_b::{{closure}}\n             at src/main.rs:10\n  13: <std::future::GenFuture<T> as core::future::future::Future>::poll::{{closure}}\n             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/future.rs:43\n  14: std::future::set_task_context\n             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/future.rs:79\n  15: <std::future::GenFuture<T> as core::future::future::Future>::poll\n             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/future.rs:43\n  16: std::future::poll_with_tls_context::{{closure}}\n             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/future.rs:121\n  17: std::future::get_task_context\n             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/future.rs:111\n  18: std::future::poll_with_tls_context\n             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/future.rs:121\n  19: foo::async_a::{{closure}}\n             at src/main.rs:6\n```\n\nWhile the long (medium?) term solution is to remove the use of TLS\nentirely, we can improve things a bit in the meantime. In particular,\nthis commit does 2 things:\n\n1. `get_task_context` has been inlined into `poll_with_tls_context`,\n    removing 2 frames (16 and 17 above).\n2. `set_task_context` now returns a guard type that resets the TLS\n    rather than taking a closure, removing 2 frames (13 and 14 above).\n\nWe can also remove frame 18 by removing `poll_with_tls_context` in favor\nof a `get_task_context` function which returns a guard, but that\nrequires adjusting the code generated for .await, so I've left that off\nfor now.", "tree": {"sha": "5b60cddc039cfd826045c72839e9b687e03e5812", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b60cddc039cfd826045c72839e9b687e03e5812"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f43824a8b783c74418a0b2c8b962b61b546f952", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdznGdCRBK7hj4Ov3rIwAAdHIIACdX6vXLSzSvYm3jyjYNdOp2\nhcGON8xCsoaiIpJG8tBgj8TkirjwrbBMh0AjbYUlTZZxCN2Nz1JuNlzNNuWzRorh\nugApXZiHfW7Mbf9eC+rbdtKn9LGbbKPULdmDowVgQ09R8JfQT7okR5b01EJ0rUWe\ncTlk+ij3sDcRs3Hg2KWqrbl+ERKjyds+6Dp6VfId0AegtwILg3R/5W6pp7mCFkNL\nUSx2b5zUptbplPdoARkHhpuDmGf883Q34dbMcn6EP3xVze9eBb+jhYyQ3MTPKmz5\nVEOdxdnCYfCokIrzd3wLOzso4HUK4G+YlO1cHZDisj5inYfGpeI3v3hkMcxFGvc=\n=k5ST\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b60cddc039cfd826045c72839e9b687e03e5812\nparent c5b6dceb68d4f05d26d5b59602d5a0c205ed2233\nparent 3fe7cfc32656518d5e6262e580f0a16cd2412dd7\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573810589 +0900\ncommitter GitHub <noreply@github.com> 1573810589 +0900\n\nRollup merge of #66398 - sfackler:no-async-nesting, r=Centril\n\nRemove some stack frames from `.async` calls\n\nThe `Context` argument is currently smuggled through TLS for\nasync-generated futures. The current infrastructure is closure-based,\nand results in an extra 6 stack frames when .awaiting an async-generated\nfuture!\n\n```\n  12: foo::async_b::{{closure}}\n             at src/main.rs:10\n  13: <std::future::GenFuture<T> as core::future::future::Future>::poll::{{closure}}\n             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/future.rs:43\n  14: std::future::set_task_context\n             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/future.rs:79\n  15: <std::future::GenFuture<T> as core::future::future::Future>::poll\n             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/future.rs:43\n  16: std::future::poll_with_tls_context::{{closure}}\n             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/future.rs:121\n  17: std::future::get_task_context\n             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/future.rs:111\n  18: std::future::poll_with_tls_context\n             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/future.rs:121\n  19: foo::async_a::{{closure}}\n             at src/main.rs:6\n```\n\nWhile the long (medium?) term solution is to remove the use of TLS\nentirely, we can improve things a bit in the meantime. In particular,\nthis commit does 2 things:\n\n1. `get_task_context` has been inlined into `poll_with_tls_context`,\n    removing 2 frames (16 and 17 above).\n2. `set_task_context` now returns a guard type that resets the TLS\n    rather than taking a closure, removing 2 frames (13 and 14 above).\n\nWe can also remove frame 18 by removing `poll_with_tls_context` in favor\nof a `get_task_context` function which returns a guard, but that\nrequires adjusting the code generated for .await, so I've left that off\nfor now.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f43824a8b783c74418a0b2c8b962b61b546f952", "html_url": "https://github.com/rust-lang/rust/commit/1f43824a8b783c74418a0b2c8b962b61b546f952", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f43824a8b783c74418a0b2c8b962b61b546f952/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5b6dceb68d4f05d26d5b59602d5a0c205ed2233", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b6dceb68d4f05d26d5b59602d5a0c205ed2233", "html_url": "https://github.com/rust-lang/rust/commit/c5b6dceb68d4f05d26d5b59602d5a0c205ed2233"}, {"sha": "3fe7cfc32656518d5e6262e580f0a16cd2412dd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fe7cfc32656518d5e6262e580f0a16cd2412dd7", "html_url": "https://github.com/rust-lang/rust/commit/3fe7cfc32656518d5e6262e580f0a16cd2412dd7"}], "stats": {"total": 45, "additions": 12, "deletions": 33}, "files": [{"sha": "6de3f1d545b57fbfbe9a837b63d0c9516a182182", "filename": "src/libstd/future.rs", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1f43824a8b783c74418a0b2c8b962b61b546f952/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f43824a8b783c74418a0b2c8b962b61b546f952/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=1f43824a8b783c74418a0b2c8b962b61b546f952", "patch": "@@ -40,10 +40,11 @@ impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n         // Safe because we're !Unpin + !Drop mapping to a ?Unpin value\n         let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n-        set_task_context(cx, || match gen.resume() {\n+        let _guard = unsafe { set_task_context(cx) };\n+        match gen.resume() {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n-        })\n+        }\n     }\n }\n \n@@ -61,35 +62,23 @@ impl Drop for SetOnDrop {\n     }\n }\n \n-#[doc(hidden)]\n-#[unstable(feature = \"gen_future\", issue = \"50547\")]\n-/// Sets the thread-local task context used by async/await futures.\n-pub fn set_task_context<F, R>(cx: &mut Context<'_>, f: F) -> R\n-where\n-    F: FnOnce() -> R\n-{\n+// Safety: the returned guard must drop before `cx` is dropped and before\n+// any previous guard is dropped.\n+unsafe fn set_task_context(cx: &mut Context<'_>) -> SetOnDrop {\n     // transmute the context's lifetime to 'static so we can store it.\n-    let cx = unsafe {\n-        core::mem::transmute::<&mut Context<'_>, &mut Context<'static>>(cx)\n-    };\n+    let cx = core::mem::transmute::<&mut Context<'_>, &mut Context<'static>>(cx);\n     let old_cx = TLS_CX.with(|tls_cx| {\n         tls_cx.replace(Some(NonNull::from(cx)))\n     });\n-    let _reset = SetOnDrop(old_cx);\n-    f()\n+    SetOnDrop(old_cx)\n }\n \n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n-/// Retrieves the thread-local task context used by async/await futures.\n-///\n-/// This function acquires exclusive access to the task context.\n-///\n-/// Panics if no context has been set or if the context has already been\n-/// retrieved by a surrounding call to get_task_context.\n-pub fn get_task_context<F, R>(f: F) -> R\n+/// Polls a future in the current thread-local task waker.\n+pub fn poll_with_tls_context<F>(f: Pin<&mut F>) -> Poll<F::Output>\n where\n-    F: FnOnce(&mut Context<'_>) -> R\n+    F: Future\n {\n     let cx_ptr = TLS_CX.with(|tls_cx| {\n         // Clear the entry so that nested `get_task_waker` calls\n@@ -108,15 +97,5 @@ where\n     //\n     // The pointer that was inserted came from an `&mut Context<'_>`,\n     // so it is safe to treat as mutable.\n-    unsafe { f(cx_ptr.as_mut()) }\n-}\n-\n-#[doc(hidden)]\n-#[unstable(feature = \"gen_future\", issue = \"50547\")]\n-/// Polls a future in the current thread-local task waker.\n-pub fn poll_with_tls_context<F>(f: Pin<&mut F>) -> Poll<F::Output>\n-where\n-    F: Future\n-{\n-    get_task_context(|cx| F::poll(f, cx))\n+    unsafe { F::poll(f, cx_ptr.as_mut()) }\n }"}]}