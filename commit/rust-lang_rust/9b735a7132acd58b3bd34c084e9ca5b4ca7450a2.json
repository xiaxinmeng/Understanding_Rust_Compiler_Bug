{"sha": "9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "node_id": "C_kwDOAAsO6NoAKDliNzM1YTcxMzJhY2Q1OGIzYmQzNGMwODRlOWNhNWI0Y2E3NDUwYTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T02:15:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T02:15:39Z"}, "message": "Auto merge of #104083 - JohnTitor:rollup-lo3wbzs, r=JohnTitor\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #103885 (rustdoc: various cross-crate reexport fixes)\n - #103914 (Make underscore_literal_suffix a hard error.)\n - #104045 (Add type_array to BaseTypeMethods)\n - #104056 (Vec: IntoIterator signature consistency)\n - #104059 (Fix typo in `rustc_middle/lint.rs`)\n - #104062 (rustdoc: remove unused CSS `#sidebar-filler`)\n - #104065 (Migrate rust logo filter to CSS variables)\n - #104066 (LLVM 16: Update RISCV data layout)\n - #104074 (rustdoc: Add an example for round that is different from truncate)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a551182bfce55b37e2ba49f98be4796bf1e94093", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a551182bfce55b37e2ba49f98be4796bf1e94093"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "html_url": "https://github.com/rust-lang/rust/commit/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eef946fc0e0eff40e588eab77b09b287accbec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eef946fc0e0eff40e588eab77b09b287accbec3", "html_url": "https://github.com/rust-lang/rust/commit/7eef946fc0e0eff40e588eab77b09b287accbec3"}, {"sha": "7ca833efe07a918f3ba89630da312d3fd6a85e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca833efe07a918f3ba89630da312d3fd6a85e01", "html_url": "https://github.com/rust-lang/rust/commit/7ca833efe07a918f3ba89630da312d3fd6a85e01"}], "stats": {"total": 386, "additions": 242, "deletions": 144}, "files": [{"sha": "862ed62c68b2ab9124e9ef04252819839e34a78c", "filename": "compiler/rustc_codegen_gcc/src/type_.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -201,6 +201,27 @@ impl<'gcc, 'tcx> BaseTypeMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     fn val_ty(&self, value: RValue<'gcc>) -> Type<'gcc> {\n         value.get_type()\n     }\n+\n+    fn type_array(&self, ty: Type<'gcc>, mut len: u64) -> Type<'gcc> {\n+        if let Some(struct_type) = ty.is_struct() {\n+            if struct_type.get_field_count() == 0 {\n+                // NOTE: since gccjit only supports i32 for the array size and libcore's tests uses a\n+                // size of usize::MAX in test_binary_search, we workaround this by setting the size to\n+                // zero for ZSTs.\n+                // FIXME(antoyo): fix gccjit API.\n+                len = 0;\n+            }\n+        }\n+\n+        // NOTE: see note above. Some other test uses usize::MAX.\n+        if len == u64::MAX {\n+            len = 0;\n+        }\n+\n+        let len: i32 = len.try_into().expect(\"array len\");\n+\n+        self.context.new_array_type(None, ty, len)\n+    }\n }\n \n impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n@@ -227,27 +248,6 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         self.context.new_opaque_struct_type(None, name)\n     }\n \n-    pub fn type_array(&self, ty: Type<'gcc>, mut len: u64) -> Type<'gcc> {\n-        if let Some(struct_type) = ty.is_struct() {\n-            if struct_type.get_field_count() == 0 {\n-                // NOTE: since gccjit only supports i32 for the array size and libcore's tests uses a\n-                // size of usize::MAX in test_binary_search, we workaround this by setting the size to\n-                // zero for ZSTs.\n-                // FIXME(antoyo): fix gccjit API.\n-                len = 0;\n-            }\n-        }\n-\n-        // NOTE: see note above. Some other test uses usize::MAX.\n-        if len == u64::MAX {\n-            len = 0;\n-        }\n-\n-        let len: i32 = len.try_into().expect(\"array len\");\n-\n-        self.context.new_array_type(None, ty, len)\n-    }\n-\n     pub fn type_bool(&self) -> Type<'gcc> {\n         self.context.new_type::<bool>()\n     }"}, {"sha": "c22ec128dacb0cddc7b57f337668448729ed0dcb", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -158,6 +158,10 @@ pub unsafe fn create_module<'ll>(\n         if sess.target.arch == \"s390x\" {\n             target_data_layout = target_data_layout.replace(\"-v128:64\", \"\");\n         }\n+\n+        if sess.target.arch == \"riscv64\" {\n+            target_data_layout = target_data_layout.replace(\"-n32:64-\", \"-n64-\");\n+        }\n     }\n \n     // Ensure the data-layout values hardcoded remain the defaults."}, {"sha": "5eec7dc613028e3e25f6a50296399f20a6d8f34d", "filename": "compiler/rustc_codegen_llvm/src/type_.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -127,10 +127,6 @@ impl<'ll> CodegenCx<'ll, '_> {\n     pub(crate) fn type_variadic_func(&self, args: &[&'ll Type], ret: &'ll Type) -> &'ll Type {\n         unsafe { llvm::LLVMFunctionType(ret, args.as_ptr(), args.len() as c_uint, True) }\n     }\n-\n-    pub(crate) fn type_array(&self, ty: &'ll Type, len: u64) -> &'ll Type {\n-        unsafe { llvm::LLVMRustArrayType(ty, len) }\n-    }\n }\n \n impl<'ll, 'tcx> BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n@@ -231,6 +227,10 @@ impl<'ll, 'tcx> BaseTypeMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn val_ty(&self, v: &'ll Value) -> &'ll Type {\n         common::val_ty(v)\n     }\n+\n+    fn type_array(&self, ty: &'ll Type, len: u64) -> &'ll Type {\n+        unsafe { llvm::LLVMRustArrayType(ty, len) }\n+    }\n }\n \n impl Type {"}, {"sha": "86481d5d758d6d251c5b916163079905a8dd805f", "filename": "compiler/rustc_codegen_ssa/src/traits/type_.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Ftype_.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -22,6 +22,7 @@ pub trait BaseTypeMethods<'tcx>: Backend<'tcx> {\n     fn type_f32(&self) -> Self::Type;\n     fn type_f64(&self) -> Self::Type;\n \n+    fn type_array(&self, ty: Self::Type, len: u64) -> Self::Type;\n     fn type_func(&self, args: &[Self::Type], ret: Self::Type) -> Self::Type;\n     fn type_struct(&self, els: &[Self::Type], packed: bool) -> Self::Type;\n     fn type_kind(&self, ty: Self::Type) -> TypeKind;"}, {"sha": "dd2c09cae02fdd83f659e1591e38429854d610a9", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -88,7 +88,9 @@ pub enum TokenKind {\n     /// tokens.\n     UnknownPrefix,\n \n-    /// Examples: `\"12_u8\"`, `\"1.0e-40\"`, `b\"123`.\n+    /// Examples: `12u8`, `1.0e-40`, `b\"123\"`. Note that `_` is an invalid\n+    /// suffix, but may be present here on string and float literals. Users of\n+    /// this type will need to check for and reject that case.\n     ///\n     /// See [LiteralKind] for more details.\n     Literal { kind: LiteralKind, suffix_start: u32 },\n@@ -840,12 +842,13 @@ impl Cursor<'_> {\n         self.eat_decimal_digits()\n     }\n \n-    // Eats the suffix of the literal, e.g. \"_u8\".\n+    // Eats the suffix of the literal, e.g. \"u8\".\n     fn eat_literal_suffix(&mut self) {\n         self.eat_identifier();\n     }\n \n-    // Eats the identifier.\n+    // Eats the identifier. Note: succeeds on `_`, which isn't a valid\n+    // identifer.\n     fn eat_identifier(&mut self) {\n         if !is_id_start(self.first()) {\n             return;"}, {"sha": "51df42f6d14e06a3ddfff7346d82fa3f14a85e06", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -276,7 +276,7 @@ pub fn explain_lint_level_source(\n \n /// The innermost function for emitting lints.\n ///\n-/// If you are loocking to implement a lint, look for higher level functions,\n+/// If you are looking to implement a lint, look for higher level functions,\n /// for example:\n /// - [`TyCtxt::emit_spanned_lint`]\n /// - [`TyCtxt::struct_span_lint_hir`]"}, {"sha": "de8f1c00c1295747ca42619c8c52520e7e4554ac", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -175,20 +175,10 @@ impl<'a> StringReader<'a> {\n                         if string == \"_\" {\n                             self.sess\n                                 .span_diagnostic\n-                                .struct_span_warn(\n+                                .struct_span_err(\n                                     self.mk_sp(suffix_start, self.pos),\n                                     \"underscore literal suffix is not allowed\",\n                                 )\n-                                .warn(\n-                                    \"this was previously accepted by the compiler but is \\\n-                                       being phased out; it will become a hard error in \\\n-                                       a future release!\",\n-                                )\n-                                .note(\n-                                    \"see issue #42326 \\\n-                                     <https://github.com/rust-lang/rust/issues/42326> \\\n-                                     for more information\",\n-                                )\n                                 .emit();\n                             None\n                         } else {"}, {"sha": "8281bac10f88feba01ee04bd28bdbd3858bd34b8", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_freebsd.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"riscv64-unknown-freebsd\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"riscv64\".into(),\n         options: TargetOptions {\n             code_model: Some(CodeModel::Medium),"}, {"sha": "90dccb28063dc955e7029939ca36d3f1a6429348", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_gnu.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"riscv64-unknown-linux-gnu\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"riscv64\".into(),\n         options: TargetOptions {\n             code_model: Some(CodeModel::Medium),"}, {"sha": "1a56c78e6852421e6eafd144d1835cccb4ec7edb", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_linux_musl.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"riscv64-unknown-linux-musl\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"riscv64\".into(),\n         options: TargetOptions {\n             code_model: Some(CodeModel::Medium),"}, {"sha": "409b0b2696152305a411713bace7a52f22f9bd88", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".into(),\n         llvm_target: \"riscv64\".into(),\n         pointer_width: 64,\n         arch: \"riscv64\".into(),"}, {"sha": "ade9d77624bdb4840bff24c6768d54c323bfeaea", "filename": "compiler/rustc_target/src/spec/riscv64gc_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64gc_unknown_openbsd.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     Target {\n         llvm_target: \"riscv64-unknown-openbsd\".into(),\n         pointer_width: 64,\n-        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".into(),\n         arch: \"riscv64\".into(),\n         options: TargetOptions {\n             code_model: Some(CodeModel::Medium),"}, {"sha": "87aba9171b41679976e92c0c7e1f517941b0965a", "filename": "compiler/rustc_target/src/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     Target {\n-        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n32:64-S128\".into(),\n         llvm_target: \"riscv64\".into(),\n         pointer_width: 64,\n         arch: \"riscv64\".into(),"}, {"sha": "766006939fa48ccd14c37e482596424267c111dd", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -2780,7 +2780,7 @@ impl<T, A: Allocator> IntoIterator for Vec<T, A> {\n     /// assert_eq!(v_iter.next(), None);\n     /// ```\n     #[inline]\n-    fn into_iter(self) -> IntoIter<T, A> {\n+    fn into_iter(self) -> Self::IntoIter {\n         unsafe {\n             let mut me = ManuallyDrop::new(self);\n             let alloc = ManuallyDrop::new(ptr::read(me.allocator()));\n@@ -2808,7 +2808,7 @@ impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {\n     type Item = &'a T;\n     type IntoIter = slice::Iter<'a, T>;\n \n-    fn into_iter(self) -> slice::Iter<'a, T> {\n+    fn into_iter(self) -> Self::IntoIter {\n         self.iter()\n     }\n }\n@@ -2818,7 +2818,7 @@ impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {\n     type Item = &'a mut T;\n     type IntoIter = slice::IterMut<'a, T>;\n \n-    fn into_iter(self) -> slice::IterMut<'a, T> {\n+    fn into_iter(self) -> Self::IntoIter {\n         self.iter_mut()\n     }\n }"}, {"sha": "4127c4056f24ed8125bfe974439616a5394b1c53", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -77,9 +77,11 @@ impl f32 {\n     /// ```\n     /// let f = 3.3_f32;\n     /// let g = -3.3_f32;\n+    /// let h = -3.7_f32;\n     ///\n     /// assert_eq!(f.round(), 3.0);\n     /// assert_eq!(g.round(), -3.0);\n+    /// assert_eq!(h.round(), -4.0);\n     /// ```\n     #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]"}, {"sha": "cc64258da60d1a63fdc44ef0f72f41d07e2ab976", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -77,9 +77,11 @@ impl f64 {\n     /// ```\n     /// let f = 3.3_f64;\n     /// let g = -3.3_f64;\n+    /// let h = -3.7_f64;\n     ///\n     /// assert_eq!(f.round(), 3.0);\n     /// assert_eq!(g.round(), -3.0);\n+    /// assert_eq!(h.round(), -4.0);\n     /// ```\n     #[rustc_allow_incoherent_impl]\n     #[must_use = \"method returns a new number and does not mutate the original value\"]"}, {"sha": "85bd8446640dd70a8e7428b94de2e1993af163ea", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -336,10 +336,7 @@ where\n                 match br {\n                     // We only care about named late bound regions, as we need to add them\n                     // to the 'for<>' section\n-                    ty::BrNamed(_, name) => Some(GenericParamDef {\n-                        name,\n-                        kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n-                    }),\n+                    ty::BrNamed(_, name) => Some(GenericParamDef::lifetime(name)),\n                     _ => None,\n                 }\n             })"}, {"sha": "8a5463c10f210a62f1292e36a37208552f10c8cc", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -243,10 +243,19 @@ pub(crate) fn build_external_trait(cx: &mut DocContext<'_>, did: DefId) -> clean\n fn build_external_function<'tcx>(cx: &mut DocContext<'tcx>, did: DefId) -> Box<clean::Function> {\n     let sig = cx.tcx.fn_sig(did);\n \n-    let predicates = cx.tcx.predicates_of(did);\n+    let late_bound_regions = sig.bound_vars().into_iter().filter_map(|var| match var {\n+        ty::BoundVariableKind::Region(ty::BrNamed(_, name)) if name != kw::UnderscoreLifetime => {\n+            Some(clean::GenericParamDef::lifetime(name))\n+        }\n+        _ => None,\n+    });\n+\n+    let predicates = cx.tcx.explicit_predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, |cx| {\n         // NOTE: generics need to be cleaned before the decl!\n-        let generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n+        let mut generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n+        // FIXME: This does not place parameters in source order (late-bound ones come last)\n+        generics.params.extend(late_bound_regions);\n         let decl = clean_fn_decl_from_did_and_sig(cx, Some(did), sig);\n         (generics, decl)\n     });"}, {"sha": "19276b9b187a03e70bdba8a81c69f79c9c69193b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 61, "deletions": 20, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -12,7 +12,7 @@ pub(crate) mod utils;\n \n use rustc_ast as ast;\n use rustc_attr as attr;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -182,10 +182,9 @@ fn clean_poly_trait_ref_with_bindings<'tcx>(\n         .collect_referenced_late_bound_regions(&poly_trait_ref)\n         .into_iter()\n         .filter_map(|br| match br {\n-            ty::BrNamed(_, name) if name != kw::UnderscoreLifetime => Some(GenericParamDef {\n-                name,\n-                kind: GenericParamDefKind::Lifetime { outlives: vec![] },\n-            }),\n+            ty::BrNamed(_, name) if name != kw::UnderscoreLifetime => {\n+                Some(GenericParamDef::lifetime(name))\n+            }\n             _ => None,\n         })\n         .collect();\n@@ -741,10 +740,7 @@ fn clean_ty_generics<'tcx>(\n                             p.get_bound_params()\n                                 .into_iter()\n                                 .flatten()\n-                                .map(|param| GenericParamDef {\n-                                    name: param.0,\n-                                    kind: GenericParamDefKind::Lifetime { outlives: Vec::new() },\n-                                })\n+                                .map(|param| GenericParamDef::lifetime(param.0))\n                                 .collect(),\n                         ));\n                     }\n@@ -957,12 +953,14 @@ fn clean_args_from_types_and_names<'tcx>(\n         values: types\n             .iter()\n             .enumerate()\n-            .map(|(i, ty)| {\n-                let mut name = names.get(i).map_or(kw::Empty, |ident| ident.name);\n-                if name.is_empty() {\n-                    name = kw::Underscore;\n-                }\n-                Argument { name, type_: clean_ty(ty, cx), is_const: false }\n+            .map(|(i, ty)| Argument {\n+                type_: clean_ty(ty, cx),\n+                name: names\n+                    .get(i)\n+                    .map(|ident| ident.name)\n+                    .filter(|ident| !ident.is_empty())\n+                    .unwrap_or(kw::Underscore),\n+                is_const: false,\n             })\n             .collect(),\n     }\n@@ -1024,7 +1022,11 @@ fn clean_fn_decl_from_did_and_sig<'tcx>(\n                 .iter()\n                 .map(|t| Argument {\n                     type_: clean_middle_ty(*t, cx, None),\n-                    name: names.next().map_or(kw::Empty, |i| i.name),\n+                    name: names\n+                        .next()\n+                        .map(|i| i.name)\n+                        .filter(|i| !i.is_empty())\n+                        .unwrap_or(kw::Underscore),\n                     is_const: false,\n                 })\n                 .collect(),\n@@ -1144,12 +1146,25 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n             }\n         }\n         ty::AssocKind::Fn => {\n-            let generics = clean_ty_generics(\n+            let sig = tcx.fn_sig(assoc_item.def_id);\n+\n+            let late_bound_regions = sig.bound_vars().into_iter().filter_map(|var| match var {\n+                ty::BoundVariableKind::Region(ty::BrNamed(_, name))\n+                    if name != kw::UnderscoreLifetime =>\n+                {\n+                    Some(GenericParamDef::lifetime(name))\n+                }\n+                _ => None,\n+            });\n+\n+            let mut generics = clean_ty_generics(\n                 cx,\n                 tcx.generics_of(assoc_item.def_id),\n                 tcx.explicit_predicates_of(assoc_item.def_id),\n             );\n-            let sig = tcx.fn_sig(assoc_item.def_id);\n+            // FIXME: This does not place parameters in source order (late-bound ones come last)\n+            generics.params.extend(late_bound_regions);\n+\n             let mut decl = clean_fn_decl_from_did_and_sig(cx, Some(assoc_item.def_id), sig);\n \n             if assoc_item.fn_has_self_parameter {\n@@ -1281,7 +1296,16 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n                         ..\n                     }) = generics.params.iter_mut().find(|param| &param.name == arg)\n                     {\n-                        param_bounds.extend(mem::take(bounds));\n+                        param_bounds.append(bounds);\n+                    } else if let WherePredicate::RegionPredicate { lifetime: Lifetime(arg), bounds } = &mut pred\n+                    && let Some(GenericParamDef {\n+                        kind: GenericParamDefKind::Lifetime { outlives: param_bounds },\n+                        ..\n+                    }) = generics.params.iter_mut().find(|param| &param.name == arg) {\n+                        param_bounds.extend(bounds.drain(..).map(|bound| match bound {\n+                            GenericBound::Outlives(lifetime) => lifetime,\n+                            _ => unreachable!(),\n+                        }));\n                     } else {\n                         where_predicates.push(pred);\n                     }\n@@ -1653,6 +1677,9 @@ pub(crate) fn clean_middle_ty<'tcx>(\n \n             inline::record_extern_fqn(cx, did, ItemType::Trait);\n \n+            // FIXME(fmease): Hide the trait-object lifetime bound if it coincides with its default\n+            // to partially address #44306. Follow the rules outlined at\n+            // https://doc.rust-lang.org/reference/lifetime-elision.html#default-trait-object-lifetimes\n             let lifetime = clean_middle_region(*reg);\n             let mut bounds = dids\n                 .map(|did| {\n@@ -1680,8 +1707,22 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                 })\n                 .collect();\n \n+            let late_bound_regions: FxIndexSet<_> = obj\n+                .iter()\n+                .flat_map(|pb| pb.bound_vars())\n+                .filter_map(|br| match br {\n+                    ty::BoundVariableKind::Region(ty::BrNamed(_, name))\n+                        if name != kw::UnderscoreLifetime =>\n+                    {\n+                        Some(GenericParamDef::lifetime(name))\n+                    }\n+                    _ => None,\n+                })\n+                .collect();\n+            let late_bound_regions = late_bound_regions.into_iter().collect();\n+\n             let path = external_path(cx, did, false, bindings, substs);\n-            bounds.insert(0, PolyTrait { trait_: path, generic_params: Vec::new() });\n+            bounds.insert(0, PolyTrait { trait_: path, generic_params: late_bound_regions });\n \n             DynTrait(bounds, lifetime)\n         }"}, {"sha": "7d97d2994e460ee3d46ba6d1169032109ea9d245", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -51,10 +51,7 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> ThinVec<WP\n         let Some((bounds, _)) = tybounds.get_mut(ty) else { return true };\n         let bound_params = bound_params\n             .into_iter()\n-            .map(|param| clean::GenericParamDef {\n-                name: param.0,\n-                kind: clean::GenericParamDefKind::Lifetime { outlives: Vec::new() },\n-            })\n+            .map(|param| clean::GenericParamDef::lifetime(param.0))\n             .collect();\n         merge_bounds(cx, bounds, bound_params, trait_did, name, rhs)\n     });\n@@ -99,9 +96,8 @@ pub(crate) fn merge_bounds(\n         let last = trait_ref.trait_.segments.last_mut().expect(\"segments were empty\");\n \n         trait_ref.generic_params.append(&mut bound_params);\n-        // Since the parameters (probably) originate from `tcx.collect_*_late_bound_regions` which\n-        // returns a hash set, sort them alphabetically to guarantee a stable and deterministic\n-        // output (and to fully deduplicate them).\n+        // Sort parameters (likely) originating from a hashset alphabetically to\n+        // produce predictable output (and to allow for full deduplication).\n         trait_ref.generic_params.sort_unstable_by(|p, q| p.name.as_str().cmp(q.name.as_str()));\n         trait_ref.generic_params.dedup_by_key(|p| p.name);\n "}, {"sha": "bbedfdd0eafe09031e5db1a379b62bc8011a0650", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -1437,6 +1437,10 @@ pub(crate) struct GenericParamDef {\n }\n \n impl GenericParamDef {\n+    pub(crate) fn lifetime(name: Symbol) -> Self {\n+        Self { name, kind: GenericParamDefKind::Lifetime { outlives: Vec::new() } }\n+    }\n+\n     pub(crate) fn is_synthetic_type_param(&self) -> bool {\n         match self.kind {\n             GenericParamDefKind::Lifetime { .. } | GenericParamDefKind::Const { .. } => false,"}, {"sha": "824d98113c8f3a18ae8aa3ffbb4197a74df499d9", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -4,7 +4,7 @@ use crate::clean::render_macro_matchers::render_macro_matcher;\n use crate::clean::{\n     clean_doc_module, clean_middle_const, clean_middle_region, clean_middle_ty, inline, Crate,\n     ExternalCrate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime, Path,\n-    PathSegment, Primitive, PrimitiveType, Type, TypeBinding,\n+    PathSegment, Primitive, PrimitiveType, Term, Type, TypeBinding, TypeBindingKind,\n };\n use crate::core::DocContext;\n use crate::html::format::visibility_to_src_with_space;\n@@ -113,12 +113,12 @@ fn external_generic_args<'tcx>(\n                 ty::Tuple(tys) => tys.iter().map(|t| clean_middle_ty(t, cx, None)).collect::<Vec<_>>().into(),\n                 _ => return GenericArgs::AngleBracketed { args: args.into(), bindings },\n             };\n-        let output = None;\n-        // FIXME(#20299) return type comes from a projection now\n-        // match types[1].kind {\n-        //     ty::Tuple(ref v) if v.is_empty() => None, // -> ()\n-        //     _ => Some(types[1].clean(cx))\n-        // };\n+        let output = bindings.into_iter().next().and_then(|binding| match binding.kind {\n+            TypeBindingKind::Equality { term: Term::Type(ty) } if ty != Type::Tuple(Vec::new()) => {\n+                Some(Box::new(ty))\n+            }\n+            _ => None,\n+        });\n         GenericArgs::Parenthesized { inputs, output }\n     } else {\n         GenericArgs::AngleBracketed { args: args.into(), bindings: bindings.into() }"}, {"sha": "a5c3d35b1b594ec9bcbc3ba401c23d7fccfb4944", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -1232,9 +1232,8 @@ impl clean::Arguments {\n     ) -> impl fmt::Display + 'a + Captures<'tcx> {\n         display_fn(move |f| {\n             for (i, input) in self.values.iter().enumerate() {\n-                if !input.name.is_empty() {\n-                    write!(f, \"{}: \", input.name)?;\n-                }\n+                write!(f, \"{}: \", input.name)?;\n+\n                 if f.alternate() {\n                     write!(f, \"{:#}\", input.type_.print(cx))?;\n                 } else {\n@@ -1367,10 +1366,8 @@ impl clean::FnDecl {\n                     args.push_str(\"const \");\n                     args_plain.push_str(\"const \");\n                 }\n-                if !input.name.is_empty() {\n-                    write!(args, \"{}: \", input.name);\n-                    write!(args_plain, \"{}: \", input.name);\n-                }\n+                write!(args, \"{}: \", input.name);\n+                write!(args_plain, \"{}: \", input.name);\n \n                 if f.alternate() {\n                     write!(args, \"{:#}\", input.type_.print(cx));"}, {"sha": "a38c0e42ab455345017d014801a85d38404e545a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -378,6 +378,10 @@ img {\n \tobject-fit: contain;\n }\n \n+.rust-logo {\n+\tfilter: var(--rust-logo-filter);\n+}\n+\n .sidebar, .mobile-topbar, .sidebar-menu-toggle {\n \tbackground-color: var(--sidebar-background-color);\n }\n@@ -1804,21 +1808,6 @@ in storage.js\n \t\tdisplay: block;\n \t}\n \n-\t/* Because of ios, we need to actually have a full height sidebar title so the\n-\t * actual sidebar can show up. But then we need to make it transparent so we don't\n-\t * hide content. The filler just allows to create the background for the sidebar\n-\t * title. But because of the absolute position, I had to lower the z-index.\n-\t */\n-\t#sidebar-filler {\n-\t\tposition: fixed;\n-\t\tleft: 45px;\n-\t\twidth: calc(100% - 45px);\n-\t\ttop: 0;\n-\t\theight: 45px;\n-\t\tz-index: -1;\n-\t\tborder-bottom: 1px solid;\n-\t}\n-\n \t#main-content > details.rustdoc-toggle > summary::before,\n \t#main-content > div > details.rustdoc-toggle > summary::before {\n \t\tleft: -11px;"}, {"sha": "bf8a60affaa227f980ca8eece943da8ba76005fa", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -63,6 +63,10 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--test-arrow-background-color: rgba(57, 175, 215, 0.09);\n \t--test-arrow-hover-color: #c5c5c5;\n \t--test-arrow-hover-background-color: rgba(57, 175, 215, 0.368);\n+\t--rust-logo-filter: drop-shadow(1px 0 0px #fff)\n+\t\tdrop-shadow(0 1px 0 #fff)\n+\t\tdrop-shadow(-1px 0 0 #fff)\n+\t\tdrop-shadow(0 -1px 0 #fff);\n }\n \n .slider {\n@@ -104,13 +108,6 @@ pre, .rustdoc.source .example-wrap {\n \tcolor: #e6e1cf;\n }\n \n-.rust-logo {\n-\tfilter: drop-shadow(1px 0 0px #fff)\n-\t\tdrop-shadow(0 1px 0 #fff)\n-\t\tdrop-shadow(-1px 0 0 #fff)\n-\t\tdrop-shadow(0 -1px 0 #fff);\n-}\n-\n .sidebar .current,\n .sidebar a:hover {\n \tcolor: #ffb44c;"}, {"sha": "ac6e527848f613e4853a64708cd4a10e86c09101", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -58,6 +58,10 @@\n \t--test-arrow-background-color: rgba(78, 139, 202, 0.2);\n \t--test-arrow-hover-color: #dedede;\n \t--test-arrow-hover-background-color: #4e8bca;\n+\t--rust-logo-filter: drop-shadow(1px 0 0px #fff)\n+\t\tdrop-shadow(0 1px 0 #fff)\n+\t\tdrop-shadow(-1px 0 0 #fff)\n+\t\tdrop-shadow(0 -1px 0 #fff);\n }\n \n .slider {\n@@ -70,13 +74,6 @@ input:focus + .slider {\n \tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n }\n \n-.rust-logo {\n-\tfilter: drop-shadow(1px 0 0px #fff)\n-\t\tdrop-shadow(0 1px 0 #fff)\n-\t\tdrop-shadow(-1px 0 0 #fff)\n-\t\tdrop-shadow(0 -1px 0 #fff)\n-}\n-\n .content .item-info::before { color: #ccc; }\n \n body.source .example-wrap pre.rust a {"}, {"sha": "608fc5aba7fd3f6e2bd2ee4c70cd565dca569e10", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -58,6 +58,7 @@\n \t--test-arrow-background-color: rgba(78, 139, 202, 0.2);\n \t--test-arrow-hover-color: #f5f5f5;\n \t--test-arrow-hover-background-color: #4e8bca;\n+\t--rust-logo-filter: initial;\n }\n \n .slider {\n@@ -70,12 +71,6 @@ input:focus + .slider {\n \tbox-shadow: 0 0 0 2px #0a84ff, 0 0 0 6px rgba(10, 132, 255, 0.3);\n }\n \n-.rust-logo {\n-\t/* This rule exists to force other themes to explicitly style the logo.\n-\t * Rustdoc has a custom linter for this purpose.\n-\t */\n-}\n-\n .content .item-info::before { color: #ccc; }\n \n body.source .example-wrap pre.rust a {"}, {"sha": "816cc9abd693dca67daeeed89d728804e9db67c5", "filename": "src/test/rustdoc-gui/rust-logo.goml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Frust-logo.goml?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -17,6 +17,15 @@ define-function: (\n         (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n         (\"reload\"),\n         (\"assert-css\", (\".rust-logo\", {\"filter\": |filter|})),\n+        // Now we check that the non-rust logos don't have a CSS filter set.\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/huge_logo/index.html\"),\n+        // Changing theme on the new page (again...).\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        (\"reload\"),\n+        // Check there is no rust logo\n+        (\"assert-false\", \".rust-logo\"),\n+        // Check there is no filter.\n+        (\"assert-css\", (\".sidebar .logo-container img\", {\"filter\": \"none\"})),\n     ],\n )\n "}, {"sha": "3da19a13e5331ecb3e83dabc2b014f252eb98a01", "filename": "src/test/rustdoc/assoc-consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-consts.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -46,6 +46,7 @@ pub fn f(_: &(ToString + 'static)) {}\n impl Bar {\n     // @has assoc_consts/struct.Bar.html '//*[@id=\"associatedconstant.F\"]' \\\n     //      \"const F: fn(_: &(dyn ToString + 'static))\"\n+    // FIXME(fmease): Hide default lifetime, render \"const F: fn(_: &dyn ToString)\"\n     pub const F: fn(_: &(ToString + 'static)) = f;\n }\n "}, {"sha": "db2491b87b4d64b755027a9c430d3cb7348e3240", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -33,8 +33,12 @@ extern crate assoc_item_trait_bounds as aux;\n // @snapshot out9 - '//*[@id=\"associatedtype.Out9\"]/*[@class=\"code-header\"]'\n //\n // @has - '//*[@id=\"tymethod.make\"]' \\\n-// \"fn make<F>(F, impl FnMut(&str) -> bool)\\\n+// \"fn make<F>(_: F, _: impl FnMut(&str) -> bool)\\\n // where \\\n //     F: FnOnce(u32) -> String, \\\n //     Self::Out2<()>: Protocol<u8, Q0 = Self::Item, Q1 = ()>\"\n pub use aux::Main;\n+\n+// @has main/trait.Aid.html\n+// @has - '//*[@id=\"associatedtype.Result\"]' \"type Result<'inter: 'src>\"\n+pub use aux::Aid;"}, {"sha": "6644c8e41478914ae08ab0cd84393ec4dba17962", "filename": "src/test/rustdoc/inline_cross/auxiliary/assoc_item_trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -42,5 +42,5 @@ pub trait Helper {\n }\n \n pub trait Aid<'src> {\n-    type Result<'inter>;\n+    type Result<'inter: 'src>;\n }"}, {"sha": "9ac2e3d96debdf3fd12db4b7fea67de8be16becc", "filename": "src/test/rustdoc/inline_cross/auxiliary/dyn_trait.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fdyn_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fdyn_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fdyn_trait.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -0,0 +1,17 @@\n+pub type Ty0 = dyn for<'any> FnOnce(&'any str) -> bool;\n+\n+pub type Ty1<'obj> = dyn std::fmt::Display + 'obj;\n+\n+pub type Ty2 = dyn for<'a, 'r> Container<'r, Item<'a, 'static> = ()>;\n+\n+pub type Ty3<'s> = &'s dyn ToString;\n+\n+pub fn func0(_: &(dyn Fn() + '_)) {}\n+\n+pub fn func1<'func>(_: &(dyn Fn() + 'func)) {}\n+\n+pub trait Container<'r> {\n+    type Item<'a, 'ctx>;\n+}\n+\n+pub trait Shape<'a> {}"}, {"sha": "fa760540e436596d54dc7c359a1ab4112b5333ac", "filename": "src/test/rustdoc/inline_cross/dyn_trait.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Finline_cross%2Fdyn_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Finline_cross%2Fdyn_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fdyn_trait.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -0,0 +1,31 @@\n+#![crate_name = \"user\"]\n+\n+// aux-crate:dyn_trait=dyn_trait.rs\n+// edition:2021\n+\n+// @has user/type.Ty0.html\n+// @has - '//*[@class=\"item-decl\"]//code' \"dyn for<'any> FnOnce(&'any str) -> bool + 'static\"\n+// FIXME(fmease): Hide default lifetime bound `'static`\n+pub use dyn_trait::Ty0;\n+\n+// @has user/type.Ty1.html\n+// @has - '//*[@class=\"item-decl\"]//code' \"dyn Display + 'obj\"\n+pub use dyn_trait::Ty1;\n+\n+// @has user/type.Ty2.html\n+// @has - '//*[@class=\"item-decl\"]//code' \"dyn for<'a, 'r> Container<'r, Item<'a, 'static> = ()>\"\n+pub use dyn_trait::Ty2;\n+\n+// @has user/type.Ty3.html\n+// @has - '//*[@class=\"item-decl\"]//code' \"&'s (dyn ToString + 's)\"\n+// FIXME(fmease): Hide default lifetime bound, render \"&'s dyn ToString\"\n+pub use dyn_trait::Ty3;\n+\n+// @has user/fn.func0.html\n+// @has - '//pre[@class=\"rust fn\"]' \"func0(_: &dyn Fn())\"\n+// FIXME(fmease): Show placeholder-lifetime bound, render \"func0(_: &(dyn Fn() + '_))\"\n+pub use dyn_trait::func0;\n+\n+// @has user/fn.func1.html\n+// @has - '//pre[@class=\"rust fn\"]' \"func1<'func>(_: &(dyn Fn() + 'func))\"\n+pub use dyn_trait::func1;"}, {"sha": "9c4f646592038e6ec62fe4036f2b47c4aef8f794", "filename": "src/test/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -29,7 +29,7 @@ pub use impl_trait_aux::func4;\n // @has impl_trait/fn.func5.html\n // @has - '//pre[@class=\"rust fn\"]' \"func5(\"\n // @has - '//pre[@class=\"rust fn\"]' \"_f: impl for<'any> Fn(&'any str, &'any str) -> bool + for<'r> Other<T<'r> = ()>,\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(&'beta ())>\"\n+// @has - '//pre[@class=\"rust fn\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(_: &'beta ())>\"\n // @!has - '//pre[@class=\"rust fn\"]' 'where'\n pub use impl_trait_aux::func5;\n "}, {"sha": "c1a98cd57daf8cc66e452bf5fee3991e0e8cacb5", "filename": "src/test/rustdoc/issue-20727.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Fissue-20727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Frustdoc%2Fissue-20727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20727.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -19,6 +19,6 @@ pub mod reexport {\n     // @has - '//*[@class=\"rust trait\"]' 'trait Deref {'\n     // @has - '//*[@class=\"rust trait\"]' 'type Target: ?Sized;'\n     // @has - '//*[@class=\"rust trait\"]' \\\n-    //      \"fn deref(&'a self) -> &'a Self::Target;\"\n+    //      \"fn deref<'a>(&'a self) -> &'a Self::Target;\"\n     pub use issue_20727::Deref;\n }"}, {"sha": "bd260752e04d61297208c3a850c86ecc1f003c81", "filename": "src/test/ui/parser/underscore-suffix-for-string.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Fui%2Fparser%2Funderscore-suffix-for-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Fui%2Fparser%2Funderscore-suffix-for-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore-suffix-for-string.rs?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -1,8 +1,17 @@\n-// check-pass\n+macro_rules! sink {\n+    ($tt:tt) => {()}\n+}\n \n fn main() {\n     let _ = \"Foo\"_;\n-    //~^ WARNING underscore literal suffix is not allowed\n-    //~| WARNING this was previously accepted\n-    //~| NOTE issue #42326\n+    //~^ ERROR underscore literal suffix is not allowed\n+\n+    // This is ok, because `__` is a valid identifier and the macro consumes it\n+    // before proper parsing happens.\n+    let _ = sink!(\"Foo\"__);\n+\n+    // This is not ok, even as an input to a macro, because the `_` suffix is\n+    // never allowed.\n+    sink!(\"Foo\"_);\n+    //~^ ERROR underscore literal suffix is not allowed\n }"}, {"sha": "2fe2c130eb2116fca15fe0ab54223ffc6063412a", "filename": "src/test/ui/parser/underscore-suffix-for-string.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Fui%2Fparser%2Funderscore-suffix-for-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2/src%2Ftest%2Fui%2Fparser%2Funderscore-suffix-for-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funderscore-suffix-for-string.stderr?ref=9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "patch": "@@ -1,11 +1,14 @@\n-warning: underscore literal suffix is not allowed\n-  --> $DIR/underscore-suffix-for-string.rs:4:18\n+error: underscore literal suffix is not allowed\n+  --> $DIR/underscore-suffix-for-string.rs:6:18\n    |\n LL |     let _ = \"Foo\"_;\n    |                  ^\n+\n+error: underscore literal suffix is not allowed\n+  --> $DIR/underscore-suffix-for-string.rs:15:16\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: see issue #42326 <https://github.com/rust-lang/rust/issues/42326> for more information\n+LL |     sink!(\"Foo\"_);\n+   |                ^\n \n-warning: 1 warning emitted\n+error: aborting due to 2 previous errors\n "}]}