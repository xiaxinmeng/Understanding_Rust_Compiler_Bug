{"sha": "1ce809d0fa59ade71b13c200870b1fd5f74ceff4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZTgwOWQwZmE1OWFkZTcxYjEzYzIwMDg3MGIxZmQ1Zjc0Y2VmZjQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-24T20:23:22Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-26T15:23:40Z"}, "message": "Add logic for resolving and checking visibility", "tree": {"sha": "4ba1954121fcf4145b4b0deea16456d9f19754e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ba1954121fcf4145b4b0deea16456d9f19754e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ce809d0fa59ade71b13c200870b1fd5f74ceff4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce809d0fa59ade71b13c200870b1fd5f74ceff4", "html_url": "https://github.com/rust-lang/rust/commit/1ce809d0fa59ade71b13c200870b1fd5f74ceff4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ce809d0fa59ade71b13c200870b1fd5f74ceff4/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "069bf55cca1e1be1f6cdd28b638f691e059858dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/069bf55cca1e1be1f6cdd28b638f691e059858dc", "html_url": "https://github.com/rust-lang/rust/commit/069bf55cca1e1be1f6cdd28b638f691e059858dc"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "d509dc3dd5815510ed56ee157e31f1eb450aeda4", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1ce809d0fa59ade71b13c200870b1fd5f74ceff4/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce809d0fa59ade71b13c200870b1fd5f74ceff4/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=1ce809d0fa59ade71b13c200870b1fd5f74ceff4", "patch": "@@ -19,6 +19,7 @@ use crate::{\n     nameres::CrateDefMap,\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n+    visibility::{ResolvedVisibility, Visibility},\n     AdtId, AssocContainerId, ConstId, ContainerId, DefWithBodyId, EnumId, EnumVariantId,\n     FunctionId, GenericDefId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId, ModuleId,\n     StaticId, StructId, TraitId, TypeAliasId, TypeParamId, VariantId,\n@@ -231,6 +232,26 @@ impl Resolver {\n         Some(res)\n     }\n \n+    pub fn resolve_visibility(\n+        &self,\n+        db: &impl DefDatabase,\n+        visibility: &Visibility,\n+    ) -> Option<ResolvedVisibility> {\n+        match visibility {\n+            Visibility::Module(mod_path) => {\n+                let resolved = self.resolve_module_path_in_items(db, &mod_path).take_types()?;\n+                match resolved {\n+                    ModuleDefId::ModuleId(m) => Some(ResolvedVisibility::Module(m)),\n+                    _ => {\n+                        // error: visibility needs to refer to module\n+                        None\n+                    }\n+                }\n+            }\n+            Visibility::Public => Some(ResolvedVisibility::Public),\n+        }\n+    }\n+\n     pub fn resolve_path_in_value_ns(\n         &self,\n         db: &impl DefDatabase,"}, {"sha": "901bc71915f84856b51e550d995b1c2d8f2b9dd4", "filename": "crates/ra_hir_def/src/visibility.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1ce809d0fa59ade71b13c200870b1fd5f74ceff4/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce809d0fa59ade71b13c200870b1fd5f74ceff4/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fvisibility.rs?ref=1ce809d0fa59ade71b13c200870b1fd5f74ceff4", "patch": "@@ -9,7 +9,7 @@ use crate::{\n     db::DefDatabase,\n     path::{ModPath, PathKind},\n     src::{HasChildSource, HasSource},\n-    AdtId, Lookup, VisibilityDefId,\n+    AdtId, Lookup, ModuleId, VisibilityDefId,\n };\n \n /// Visibility of an item, not yet resolved.\n@@ -89,6 +89,44 @@ impl Visibility {\n             ast::VisibilityKind::Pub => Visibility::Public,\n         }\n     }\n+\n+    pub fn resolve(\n+        &self,\n+        db: &impl DefDatabase,\n+        resolver: &crate::resolver::Resolver,\n+    ) -> ResolvedVisibility {\n+        // we fall back to public visibility (i.e. fail open) if the path can't be resolved\n+        resolver.resolve_visibility(db, self).unwrap_or(ResolvedVisibility::Public)\n+    }\n+}\n+\n+/// Visibility of an item, with the path resolved.\n+#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n+pub enum ResolvedVisibility {\n+    /// Visibility is restricted to a certain module.\n+    Module(ModuleId),\n+    /// Visibility is unrestricted.\n+    Public,\n+}\n+\n+impl ResolvedVisibility {\n+    pub fn visible_from(self, db: &impl DefDatabase, from_module: ModuleId) -> bool {\n+        let to_module = match self {\n+            ResolvedVisibility::Module(m) => m,\n+            ResolvedVisibility::Public => return true,\n+        };\n+        // if they're not in the same crate, it can't be visible\n+        if from_module.krate != to_module.krate {\n+            return false;\n+        }\n+        // from_module needs to be a descendant of to_module\n+        let def_map = db.crate_def_map(from_module.krate);\n+        let mut ancestors = std::iter::successors(Some(from_module), |m| {\n+            let parent_id = def_map[m.local_id].parent?;\n+            Some(ModuleId { local_id: parent_id, ..*m })\n+        });\n+        ancestors.any(|m| m == to_module)\n+    }\n }\n \n fn visibility_from_loc<T>(node: T, db: &impl DefDatabase) -> Visibility"}]}