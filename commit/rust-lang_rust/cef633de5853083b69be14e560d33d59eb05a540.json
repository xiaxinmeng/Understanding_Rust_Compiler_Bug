{"sha": "cef633de5853083b69be14e560d33d59eb05a540", "node_id": "C_kwDOAAsO6NoAKGNlZjYzM2RlNTg1MzA4M2I2OWJlMTRlNTYwZDMzZDU5ZWIwNWE1NDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-22T13:22:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-22T13:22:34Z"}, "message": "Auto merge of #107187 - matthiaskrgr:rollup-lvwzlg2, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #107102 (Implement some more predicates in the new solver)\n - #107111 (Fix missing arguments issues and copy-paste bug for fluent)\n - #107114 (Add note about absolute paths to Path::join)\n - #107127 (Enable sanitizers for s390x-linux)\n - #107152 (Migrate scraped-examples top and bottom \"borders\" to CSS variables)\n - #107170 (Add myself to .mailmap)\n - #107174 (rustdoc: Use `DefId(Map,Set)` instead of `FxHash(Map,Set)`)\n - #107180 (Remove unnecessary `&format!`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2c5545ae0d21ed1cca25f123852c71b43a3e3900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c5545ae0d21ed1cca25f123852c71b43a3e3900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cef633de5853083b69be14e560d33d59eb05a540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cef633de5853083b69be14e560d33d59eb05a540", "html_url": "https://github.com/rust-lang/rust/commit/cef633de5853083b69be14e560d33d59eb05a540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cef633de5853083b69be14e560d33d59eb05a540/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e6809072304b147f9e98d55c87f42c0f3959679", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6809072304b147f9e98d55c87f42c0f3959679", "html_url": "https://github.com/rust-lang/rust/commit/8e6809072304b147f9e98d55c87f42c0f3959679"}, {"sha": "2f7a3a1f0ada365333b52f4ef11f640499856451", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7a3a1f0ada365333b52f4ef11f640499856451", "html_url": "https://github.com/rust-lang/rust/commit/2f7a3a1f0ada365333b52f4ef11f640499856451"}], "stats": {"total": 648, "additions": 484, "deletions": 164}, "files": [{"sha": "42c86a827693a16de9fe7fc3cc925bdbfa8de70c", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -15,6 +15,7 @@ Adrien T\u00e9tar <adri-from-59@hotmail.fr>\n Ahmed Charles <ahmedcharles@gmail.com> <acharles@outlook.com>\n Alan Egerton <eggyal@gmail.com>\n Alan Stoate <alan.stoate@gmail.com>\n+Albert Larsan <albert.larsan@gmail.com> Albert Larsan <74931857+albertlarsan68@users.noreply.github.com>\n Alessandro Decina <alessandro.d@gmail.com>\n Alex Burka <durka42+github@gmail.com> Alex Burka <aburka@seas.upenn.edu>\n Alex Hansen <ahansen2@trinity.edu>"}, {"sha": "164d6d26d230d656f0896e69cf8269b9d8845aaa", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -268,28 +268,28 @@ infer_but_calling_introduces = {$has_param_name ->\n     [true] `{$param_name}`\n     *[false] `fn` parameter\n } has {$lifetime_kind ->\n-    [named] lifetime `{$lifetime}`\n-    *[anon] an anonymous lifetime `'_`\n-} but calling `{assoc_item}` introduces an implicit `'static` lifetime requirement\n+    [true] lifetime `{$lifetime}`\n+    *[false] an anonymous lifetime `'_`\n+} but calling `{$assoc_item}` introduces an implicit `'static` lifetime requirement\n     .label1 = {$has_lifetime ->\n-        [named] lifetime `{$lifetime}`\n-        *[anon] an anonymous lifetime `'_`\n+        [true] lifetime `{$lifetime}`\n+        *[false] an anonymous lifetime `'_`\n     }\n     .label2 = ...is used and required to live as long as `'static` here because of an implicit lifetime bound on the {$has_impl_path ->\n-        [named] `impl` of `{$impl_path}`\n-        *[anon] inherent `impl`\n+        [true] `impl` of `{$impl_path}`\n+        *[false] inherent `impl`\n     }\n \n infer_but_needs_to_satisfy = {$has_param_name ->\n     [true] `{$param_name}`\n     *[false] `fn` parameter\n } has {$has_lifetime ->\n-    [named] lifetime `{$lifetime}`\n-    *[anon] an anonymous lifetime `'_`\n+    [true] lifetime `{$lifetime}`\n+    *[false] an anonymous lifetime `'_`\n } but it needs to satisfy a `'static` lifetime requirement\n     .influencer = this data with {$has_lifetime ->\n-        [named] lifetime `{$lifetime}`\n-        *[anon] an anonymous lifetime `'_`\n+        [true] lifetime `{$lifetime}`\n+        *[false] an anonymous lifetime `'_`\n     }...\n     .require = {$spans_empty ->\n         *[true] ...is used and required to live as long as `'static` here\n@@ -302,8 +302,8 @@ infer_more_targeted = {$has_param_name ->\n     [true] `{$param_name}`\n     *[false] `fn` parameter\n } has {$has_lifetime ->\n-    [named] lifetime `{$lifetime}`\n-    *[anon] an anonymous lifetime `'_`\n+    [true] lifetime `{$lifetime}`\n+    *[false] an anonymous lifetime `'_`\n } but calling `{$ident}` introduces an implicit `'static` lifetime requirement\n \n infer_ril_introduced_here = `'static` requirement introduced here"}, {"sha": "8bf3a160abbb4aaf2f064fef5967b0f3b7b83e8b", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -927,6 +927,8 @@ pub struct ButNeedsToSatisfy {\n     #[subdiagnostic]\n     pub req_introduces_loc: Option<ReqIntroducedLocations>,\n \n+    pub has_param_name: bool,\n+    pub param_name: String,\n     pub spans_empty: bool,\n     pub has_lifetime: bool,\n     pub lifetime: String,"}, {"sha": "6a463583dfb0ff42573d3cbf0c308ef67fe434a1", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -98,6 +98,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let sp = var_origin.span();\n         let return_sp = sub_origin.span();\n         let param = self.find_param_with_region(*sup_r, *sub_r)?;\n+        let simple_ident = param.param.pat.simple_ident();\n         let lifetime_name = if sup_r.has_name() { sup_r.to_string() } else { \"'_\".to_owned() };\n \n         let (mention_influencer, influencer_point) =\n@@ -187,7 +188,9 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             req_introduces_loc: subdiag,\n \n             has_lifetime: sup_r.has_name(),\n-            lifetime: sup_r.to_string(),\n+            lifetime: lifetime_name.clone(),\n+            has_param_name: simple_ident.is_some(),\n+            param_name: simple_ident.map(|x| x.to_string()).unwrap_or_default(),\n             spans_empty,\n             bound,\n         };"}, {"sha": "f2c722b9a89da076e450e6bc8ceda7ce9fe3d67b", "filename": "compiler/rustc_target/src/spec/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_gnu.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -1,5 +1,5 @@\n use crate::abi::Endian;\n-use crate::spec::{StackProbeType, Target};\n+use crate::spec::{SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n@@ -13,6 +13,8 @@ pub fn target() -> Target {\n     base.max_atomic_width = Some(64);\n     base.min_global_align = Some(16);\n     base.stack_probes = StackProbeType::Inline;\n+    base.supported_sanitizers =\n+        SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n \n     Target {\n         llvm_target: \"s390x-unknown-linux-gnu\".into(),"}, {"sha": "8fe9d023c527e824a7d8803f4abecfe8603328ac", "filename": "compiler/rustc_target/src/spec/s390x_unknown_linux_musl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fs390x_unknown_linux_musl.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -1,5 +1,5 @@\n use crate::abi::Endian;\n-use crate::spec::{StackProbeType, Target};\n+use crate::spec::{SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n@@ -14,6 +14,8 @@ pub fn target() -> Target {\n     base.min_global_align = Some(16);\n     base.static_position_independent_executables = true;\n     base.stack_probes = StackProbeType::Inline;\n+    base.supported_sanitizers =\n+        SanitizerSet::ADDRESS | SanitizerSet::LEAK | SanitizerSet::MEMORY | SanitizerSet::THREAD;\n \n     Target {\n         llvm_target: \"s390x-unknown-linux-musl\".into(),"}, {"sha": "cdb72d49834f0101f401660171e102675bfa9e3b", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -1,7 +1,7 @@\n //! Code shared by trait and projection goals for candidate assembly.\n \n use super::infcx_ext::InferCtxtExt;\n-use super::{CanonicalResponse, Certainty, EvalCtxt, Goal, MaybeCause, QueryResult};\n+use super::{CanonicalResponse, Certainty, EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::util::elaborate_predicates;\n@@ -148,9 +148,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         if goal.predicate.self_ty().is_ty_var() {\n             return vec![Candidate {\n                 source: CandidateSource::BuiltinImpl,\n-                result: self\n-                    .make_canonical_response(Certainty::Maybe(MaybeCause::Ambiguity))\n-                    .unwrap(),\n+                result: self.make_canonical_response(Certainty::AMBIGUOUS).unwrap(),\n             }];\n         }\n "}, {"sha": "da2a1a19957e128f491b8a1bbc3b3384da637581", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 76, "deletions": 7, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -19,14 +19,17 @@\n \n use std::mem;\n \n+use rustc_hir::def_id::DefId;\n use rustc_infer::infer::canonical::{Canonical, CanonicalVarKind, CanonicalVarValues};\n use rustc_infer::infer::canonical::{OriginalQueryValues, QueryRegionConstraints, QueryResponse};\n use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::Obligation;\n use rustc_middle::infer::canonical::Certainty as OldCertainty;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_middle::ty::{RegionOutlivesPredicate, ToPredicate, TypeOutlivesPredicate};\n+use rustc_middle::ty::{\n+    CoercePredicate, RegionOutlivesPredicate, SubtypePredicate, ToPredicate, TypeOutlivesPredicate,\n+};\n use rustc_span::DUMMY_SP;\n \n use crate::traits::ObligationCause;\n@@ -87,6 +90,8 @@ pub enum Certainty {\n }\n \n impl Certainty {\n+    pub const AMBIGUOUS: Certainty = Certainty::Maybe(MaybeCause::Ambiguity);\n+\n     /// When proving multiple goals using **AND**, e.g. nested obligations for an impl,\n     /// use this function to unify the certainty of these goals\n     pub fn unify_and(self, other: Certainty) -> Certainty {\n@@ -243,16 +248,28 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 ty::PredicateKind::Clause(ty::Clause::RegionOutlives(predicate)) => {\n                     self.compute_region_outlives_goal(Goal { param_env, predicate })\n                 }\n+                ty::PredicateKind::Subtype(predicate) => {\n+                    self.compute_subtype_goal(Goal { param_env, predicate })\n+                }\n+                ty::PredicateKind::Coerce(predicate) => {\n+                    self.compute_coerce_goal(Goal { param_env, predicate })\n+                }\n+                ty::PredicateKind::ClosureKind(def_id, substs, kind) => self\n+                    .compute_closure_kind_goal(Goal {\n+                        param_env,\n+                        predicate: (def_id, substs, kind),\n+                    }),\n+                ty::PredicateKind::Ambiguous => self.make_canonical_response(Certainty::AMBIGUOUS),\n                 // FIXME: implement these predicates :)\n                 ty::PredicateKind::WellFormed(_)\n                 | ty::PredicateKind::ObjectSafe(_)\n-                | ty::PredicateKind::ClosureKind(_, _, _)\n-                | ty::PredicateKind::Subtype(_)\n-                | ty::PredicateKind::Coerce(_)\n                 | ty::PredicateKind::ConstEvaluatable(_)\n-                | ty::PredicateKind::ConstEquate(_, _)\n-                | ty::PredicateKind::TypeWellFormedFromEnv(_)\n-                | ty::PredicateKind::Ambiguous => self.make_canonical_response(Certainty::Yes),\n+                | ty::PredicateKind::ConstEquate(_, _) => {\n+                    self.make_canonical_response(Certainty::Yes)\n+                }\n+                ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n+                    bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n+                }\n             }\n         } else {\n             let kind = self.infcx.replace_bound_vars_with_placeholders(kind);\n@@ -275,6 +292,58 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n     ) -> QueryResult<'tcx> {\n         self.make_canonical_response(Certainty::Yes)\n     }\n+\n+    fn compute_coerce_goal(\n+        &mut self,\n+        goal: Goal<'tcx, CoercePredicate<'tcx>>,\n+    ) -> QueryResult<'tcx> {\n+        self.compute_subtype_goal(Goal {\n+            param_env: goal.param_env,\n+            predicate: SubtypePredicate {\n+                a_is_expected: false,\n+                a: goal.predicate.a,\n+                b: goal.predicate.b,\n+            },\n+        })\n+    }\n+\n+    fn compute_subtype_goal(\n+        &mut self,\n+        goal: Goal<'tcx, SubtypePredicate<'tcx>>,\n+    ) -> QueryResult<'tcx> {\n+        if goal.predicate.a.is_ty_var() && goal.predicate.b.is_ty_var() {\n+            // FIXME: Do we want to register a subtype relation between these vars?\n+            // That won't actually reflect in the query response, so it seems moot.\n+            self.make_canonical_response(Certainty::AMBIGUOUS)\n+        } else {\n+            self.infcx.probe(|_| {\n+                let InferOk { value: (), obligations } = self\n+                    .infcx\n+                    .at(&ObligationCause::dummy(), goal.param_env)\n+                    .sub(goal.predicate.a, goal.predicate.b)?;\n+                self.evaluate_all_and_make_canonical_response(\n+                    obligations.into_iter().map(|pred| pred.into()).collect(),\n+                )\n+            })\n+        }\n+    }\n+\n+    fn compute_closure_kind_goal(\n+        &mut self,\n+        goal: Goal<'tcx, (DefId, ty::SubstsRef<'tcx>, ty::ClosureKind)>,\n+    ) -> QueryResult<'tcx> {\n+        let (_, substs, expected_kind) = goal.predicate;\n+        let found_kind = substs.as_closure().kind_ty().to_opt_closure_kind();\n+\n+        let Some(found_kind) = found_kind else {\n+            return self.make_canonical_response(Certainty::AMBIGUOUS);\n+        };\n+        if found_kind.extends(expected_kind) {\n+            self.make_canonical_response(Certainty::Yes)\n+        } else {\n+            Err(NoSolution)\n+        }\n+    }\n }\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {"}, {"sha": "32e15f03998b3598431b58e417d87938e5cab02d", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -3,7 +3,7 @@ use crate::traits::{specialization_graph, translate_substs};\n use super::assembly::{self, Candidate, CandidateSource};\n use super::infcx_ext::InferCtxtExt;\n use super::trait_goals::structural_traits;\n-use super::{Certainty, EvalCtxt, Goal, MaybeCause, QueryResult};\n+use super::{Certainty, EvalCtxt, Goal, QueryResult};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n@@ -229,8 +229,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 goal.predicate.def_id(),\n                 impl_def_id\n             )? else {\n-                let certainty = Certainty::Maybe(MaybeCause::Ambiguity);\n-                return ecx.make_canonical_response(trait_ref_certainty.unify_and(certainty));\n+                return ecx.make_canonical_response(trait_ref_certainty.unify_and(Certainty::AMBIGUOUS));\n             };\n \n             if !assoc_def.item.defaultness(tcx).has_value() {\n@@ -382,7 +381,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 .to_predicate(ecx.tcx());\n             Self::consider_assumption(ecx, goal, pred)\n         } else {\n-            ecx.make_canonical_response(Certainty::Maybe(MaybeCause::Ambiguity))\n+            ecx.make_canonical_response(Certainty::AMBIGUOUS)\n         }\n     }\n "}, {"sha": "4b6d673c999c96fd7dab198e99a3aec327ceba70", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -4,7 +4,7 @@ use std::iter;\n \n use super::assembly::{self, Candidate, CandidateSource};\n use super::infcx_ext::InferCtxtExt;\n-use super::{Certainty, EvalCtxt, Goal, MaybeCause, QueryResult};\n+use super::{Certainty, EvalCtxt, Goal, QueryResult};\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::InferCtxt;\n use rustc_infer::traits::query::NoSolution;\n@@ -133,7 +133,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n         if goal.predicate.self_ty().has_non_region_infer() {\n-            return ecx.make_canonical_response(Certainty::Maybe(MaybeCause::Ambiguity));\n+            return ecx.make_canonical_response(Certainty::AMBIGUOUS);\n         }\n \n         let tcx = ecx.tcx();\n@@ -171,7 +171,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                 .to_predicate(ecx.tcx());\n             Self::consider_assumption(ecx, goal, pred)\n         } else {\n-            ecx.make_canonical_response(Certainty::Maybe(MaybeCause::Ambiguity))\n+            ecx.make_canonical_response(Certainty::AMBIGUOUS)\n         }\n     }\n "}, {"sha": "2a7ec544f9e2e138804cf0c7720b70091d2d2927", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -1355,11 +1355,11 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{}\", Foo::new(2)), \"2\");\n-    /// assert_eq!(&format!(\"{}\", Foo::new(-1)), \"-1\");\n-    /// assert_eq!(&format!(\"{}\", Foo::new(0)), \"0\");\n-    /// assert_eq!(&format!(\"{:#}\", Foo::new(-1)), \"-Foo 1\");\n-    /// assert_eq!(&format!(\"{:0>#8}\", Foo::new(-1)), \"00-Foo 1\");\n+    /// assert_eq!(format!(\"{}\", Foo::new(2)), \"2\");\n+    /// assert_eq!(format!(\"{}\", Foo::new(-1)), \"-1\");\n+    /// assert_eq!(format!(\"{}\", Foo::new(0)), \"0\");\n+    /// assert_eq!(format!(\"{:#}\", Foo::new(-1)), \"-Foo 1\");\n+    /// assert_eq!(format!(\"{:0>#8}\", Foo::new(-1)), \"00-Foo 1\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pad_integral(&mut self, is_nonnegative: bool, prefix: &str, buf: &str) -> Result {\n@@ -1452,8 +1452,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{Foo:<4}\"), \"Foo \");\n-    /// assert_eq!(&format!(\"{Foo:0>4}\"), \"0Foo\");\n+    /// assert_eq!(format!(\"{Foo:<4}\"), \"Foo \");\n+    /// assert_eq!(format!(\"{Foo:0>4}\"), \"0Foo\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn pad(&mut self, s: &str) -> Result {\n@@ -1636,8 +1636,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{Foo}\"), \"Foo\");\n-    /// assert_eq!(&format!(\"{Foo:0>8}\"), \"Foo\");\n+    /// assert_eq!(format!(\"{Foo}\"), \"Foo\");\n+    /// assert_eq!(format!(\"{Foo:0>8}\"), \"Foo\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write_str(&mut self, data: &str) -> Result {\n@@ -1659,8 +1659,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{}\", Foo(-1)), \"Foo -1\");\n-    /// assert_eq!(&format!(\"{:0>8}\", Foo(2)), \"Foo 2\");\n+    /// assert_eq!(format!(\"{}\", Foo(-1)), \"Foo -1\");\n+    /// assert_eq!(format!(\"{:0>8}\", Foo(2)), \"Foo 2\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn write_fmt(&mut self, fmt: Arguments<'_>) -> Result {\n@@ -1703,8 +1703,8 @@ impl<'a> Formatter<'a> {\n     /// }\n     ///\n     /// // We set alignment to the right with \">\".\n-    /// assert_eq!(&format!(\"{Foo:G>3}\"), \"GGG\");\n-    /// assert_eq!(&format!(\"{Foo:t>6}\"), \"tttttt\");\n+    /// assert_eq!(format!(\"{Foo:G>3}\"), \"GGG\");\n+    /// assert_eq!(format!(\"{Foo:t>6}\"), \"tttttt\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1738,10 +1738,10 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{Foo:<}\"), \"left\");\n-    /// assert_eq!(&format!(\"{Foo:>}\"), \"right\");\n-    /// assert_eq!(&format!(\"{Foo:^}\"), \"center\");\n-    /// assert_eq!(&format!(\"{Foo}\"), \"into the void\");\n+    /// assert_eq!(format!(\"{Foo:<}\"), \"left\");\n+    /// assert_eq!(format!(\"{Foo:>}\"), \"right\");\n+    /// assert_eq!(format!(\"{Foo:^}\"), \"center\");\n+    /// assert_eq!(format!(\"{Foo}\"), \"into the void\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n@@ -1767,16 +1767,16 @@ impl<'a> Formatter<'a> {\n     ///     fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n     ///         if let Some(width) = formatter.width() {\n     ///             // If we received a width, we use it\n-    ///             write!(formatter, \"{:width$}\", &format!(\"Foo({})\", self.0), width = width)\n+    ///             write!(formatter, \"{:width$}\", format!(\"Foo({})\", self.0), width = width)\n     ///         } else {\n     ///             // Otherwise we do nothing special\n     ///             write!(formatter, \"Foo({})\", self.0)\n     ///         }\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:10}\", Foo(23)), \"Foo(23)   \");\n-    /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n+    /// assert_eq!(format!(\"{:10}\", Foo(23)), \"Foo(23)   \");\n+    /// assert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1806,8 +1806,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:.4}\", Foo(23.2)), \"Foo(23.2000)\");\n-    /// assert_eq!(&format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n+    /// assert_eq!(format!(\"{:.4}\", Foo(23.2)), \"Foo(23.2000)\");\n+    /// assert_eq!(format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1837,9 +1837,9 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:+}\", Foo(23)), \"Foo(+23)\");\n-    /// assert_eq!(&format!(\"{:+}\", Foo(-23)), \"Foo(-23)\");\n-    /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n+    /// assert_eq!(format!(\"{:+}\", Foo(23)), \"Foo(+23)\");\n+    /// assert_eq!(format!(\"{:+}\", Foo(-23)), \"Foo(-23)\");\n+    /// assert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1867,8 +1867,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:-}\", Foo(23)), \"-Foo(23)\");\n-    /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n+    /// assert_eq!(format!(\"{:-}\", Foo(23)), \"-Foo(23)\");\n+    /// assert_eq!(format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1895,8 +1895,8 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:#}\", Foo(23)), \"Foo(23)\");\n-    /// assert_eq!(&format!(\"{}\", Foo(23)), \"23\");\n+    /// assert_eq!(format!(\"{:#}\", Foo(23)), \"Foo(23)\");\n+    /// assert_eq!(format!(\"{}\", Foo(23)), \"23\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n@@ -1922,7 +1922,7 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(&format!(\"{:04}\", Foo(23)), \"23\");\n+    /// assert_eq!(format!(\"{:04}\", Foo(23)), \"23\");\n     /// ```\n     #[must_use]\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]"}, {"sha": "a2b9bb551e677c57672721373a2866f624a307e5", "filename": "library/core/tests/num/dec2flt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -15,7 +15,7 @@ macro_rules! test_literal {\n         for input in inputs {\n             assert_eq!(input.parse(), Ok(x64));\n             assert_eq!(input.parse(), Ok(x32));\n-            let neg_input = &format!(\"-{input}\");\n+            let neg_input = format!(\"-{input}\");\n             assert_eq!(neg_input.parse(), Ok(-x64));\n             assert_eq!(neg_input.parse(), Ok(-x32));\n         }"}, {"sha": "d576bd0ccee03b5d4ea32070dd410f94a1ac131c", "filename": "library/portable-simd/crates/core_simd/examples/spectral_norm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fexamples%2Fspectral_norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fexamples%2Fspectral_norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fexamples%2Fspectral_norm.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -69,7 +69,7 @@ fn dot(x: &[f64], y: &[f64]) -> f64 {\n #[cfg(test)]\n #[test]\n fn test() {\n-    assert_eq!(&format!(\"{:.9}\", spectral_norm(100)), \"1.274219991\");\n+    assert_eq!(format!(\"{:.9}\", spectral_norm(100)), \"1.274219991\");\n }\n \n fn main() {"}, {"sha": "9aea62a5b940c553cfb011ecb322f7ff7a5a9af0", "filename": "library/std/src/io/error/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror%2Ftests.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -190,5 +190,5 @@ fn test_std_io_error_downcast() {\n     let io_error = io_error.downcast::<E>().unwrap_err();\n \n     assert_eq!(SIMPLE_MESSAGE.kind, io_error.kind());\n-    assert_eq!(SIMPLE_MESSAGE.message, &*format!(\"{io_error}\"));\n+    assert_eq!(SIMPLE_MESSAGE.message, format!(\"{io_error}\"));\n }"}, {"sha": "0eb59d45de727b6603bd32b1988b55fcb509e9ac", "filename": "library/std/src/net/ip_addr/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/library%2Fstd%2Fsrc%2Fnet%2Fip_addr%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/library%2Fstd%2Fsrc%2Fnet%2Fip_addr%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip_addr%2Ftests.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -125,8 +125,8 @@ fn ipv4_addr_to_string() {\n     assert_eq!(Ipv4Addr::new(127, 127, 127, 127).to_string(), \"127.127.127.127\");\n \n     // Test padding\n-    assert_eq!(&format!(\"{:16}\", Ipv4Addr::new(1, 1, 1, 1)), \"1.1.1.1         \");\n-    assert_eq!(&format!(\"{:>16}\", Ipv4Addr::new(1, 1, 1, 1)), \"         1.1.1.1\");\n+    assert_eq!(format!(\"{:16}\", Ipv4Addr::new(1, 1, 1, 1)), \"1.1.1.1         \");\n+    assert_eq!(format!(\"{:>16}\", Ipv4Addr::new(1, 1, 1, 1)), \"         1.1.1.1\");\n }\n \n #[test]\n@@ -148,8 +148,8 @@ fn ipv6_addr_to_string() {\n         \"1111:2222:3333:4444:5555:6666:7777:8888\"\n     );\n     // padding\n-    assert_eq!(&format!(\"{:20}\", Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8)), \"1:2:3:4:5:6:7:8     \");\n-    assert_eq!(&format!(\"{:>20}\", Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8)), \"     1:2:3:4:5:6:7:8\");\n+    assert_eq!(format!(\"{:20}\", Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8)), \"1:2:3:4:5:6:7:8     \");\n+    assert_eq!(format!(\"{:>20}\", Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8)), \"     1:2:3:4:5:6:7:8\");\n \n     // reduce a single run of zeros\n     assert_eq!("}, {"sha": "dfc6dabbed1edeace9365cd0ed3bcdb89ea4e932", "filename": "library/std/src/net/socket_addr/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/library%2Fstd%2Fsrc%2Fnet%2Fsocket_addr%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/library%2Fstd%2Fsrc%2Fnet%2Fsocket_addr%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fsocket_addr%2Ftests.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -64,11 +64,11 @@ fn ipv4_socket_addr_to_string() {\n \n     // Test padding.\n     assert_eq!(\n-        &format!(\"{:16}\", SocketAddrV4::new(Ipv4Addr::new(1, 1, 1, 1), 53)),\n+        format!(\"{:16}\", SocketAddrV4::new(Ipv4Addr::new(1, 1, 1, 1), 53)),\n         \"1.1.1.1:53      \"\n     );\n     assert_eq!(\n-        &format!(\"{:>16}\", SocketAddrV4::new(Ipv4Addr::new(1, 1, 1, 1), 53)),\n+        format!(\"{:>16}\", SocketAddrV4::new(Ipv4Addr::new(1, 1, 1, 1), 53)),\n         \"      1.1.1.1:53\"\n     );\n }\n@@ -111,11 +111,11 @@ fn ipv6_socket_addr_to_string() {\n \n     // Test padding.\n     assert_eq!(\n-        &format!(\"{:22}\", SocketAddrV6::new(Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8), 9, 0, 0)),\n+        format!(\"{:22}\", SocketAddrV6::new(Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8), 9, 0, 0)),\n         \"[1:2:3:4:5:6:7:8]:9   \"\n     );\n     assert_eq!(\n-        &format!(\"{:>22}\", SocketAddrV6::new(Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8), 9, 0, 0)),\n+        format!(\"{:>22}\", SocketAddrV6::new(Ipv6Addr::new(1, 2, 3, 4, 5, 6, 7, 8), 9, 0, 0)),\n         \"   [1:2:3:4:5:6:7:8]:9\"\n     );\n }"}, {"sha": "2f53cf83936910e1df1dc217f96a8884c6f53302", "filename": "library/std/src/path.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -2531,6 +2531,8 @@ impl Path {\n \n     /// Creates an owned [`PathBuf`] with `path` adjoined to `self`.\n     ///\n+    /// If `path` is absolute, it replaces the current path.\n+    ///\n     /// See [`PathBuf::push`] for more details on what it means to adjoin a path.\n     ///\n     /// # Examples\n@@ -2539,6 +2541,7 @@ impl Path {\n     /// use std::path::{Path, PathBuf};\n     ///\n     /// assert_eq!(Path::new(\"/etc\").join(\"passwd\"), PathBuf::from(\"/etc/passwd\"));\n+    /// assert_eq!(Path::new(\"/etc\").join(\"/bin/sh\"), PathBuf::from(\"/bin/sh\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[must_use]"}, {"sha": "cb5706ca0a6516f838cc56581d580bfdf34207f8", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -1105,6 +1105,12 @@ fn supported_sanitizers(\n         \"x86_64-unknown-linux-musl\" => {\n             common_libs(\"linux\", \"x86_64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n         }\n+        \"s390x-unknown-linux-gnu\" => {\n+            common_libs(\"linux\", \"s390x\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n+        }\n+        \"s390x-unknown-linux-musl\" => {\n+            common_libs(\"linux\", \"s390x\", &[\"asan\", \"lsan\", \"msan\", \"tsan\"])\n+        }\n         _ => Vec::new(),\n     }\n }"}, {"sha": "adb98d7ebb54541e83fbd61d1c877a169119a1cd", "filename": "src/ci/docker/host-x86_64/dist-s390x-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2FDockerfile?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -28,5 +28,5 @@ ENV \\\n \n ENV HOSTS=s390x-unknown-linux-gnu\n \n-ENV RUST_CONFIGURE_ARGS --enable-extended --enable-lld --enable-profiler --disable-docs\n+ENV RUST_CONFIGURE_ARGS --enable-extended --enable-lld --enable-sanitizers --enable-profiler --disable-docs\n ENV SCRIPT python3 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "da300b89a4e9b1273a168fdd4b57908834f14ae0", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -9,7 +9,7 @@ use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::def_id::{DefId, DefIdSet, LocalDefId};\n use rustc_hir::Mutability;\n use rustc_metadata::creader::{CStore, LoadedMacro};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -45,7 +45,7 @@ pub(crate) fn try_inline(\n     res: Res,\n     name: Symbol,\n     attrs: Option<&[ast::Attribute]>,\n-    visited: &mut FxHashSet<DefId>,\n+    visited: &mut DefIdSet,\n ) -> Option<Vec<clean::Item>> {\n     let did = res.opt_def_id()?;\n     if did.is_local() {\n@@ -163,7 +163,7 @@ pub(crate) fn try_inline_glob(\n     cx: &mut DocContext<'_>,\n     res: Res,\n     current_mod: LocalDefId,\n-    visited: &mut FxHashSet<DefId>,\n+    visited: &mut DefIdSet,\n     inlined_names: &mut FxHashSet<(ItemType, Symbol)>,\n ) -> Option<Vec<clean::Item>> {\n     let did = res.opt_def_id()?;\n@@ -568,11 +568,7 @@ pub(crate) fn build_impl(\n     ));\n }\n \n-fn build_module(\n-    cx: &mut DocContext<'_>,\n-    did: DefId,\n-    visited: &mut FxHashSet<DefId>,\n-) -> clean::Module {\n+fn build_module(cx: &mut DocContext<'_>, did: DefId, visited: &mut DefIdSet) -> clean::Module {\n     let items = build_module_items(cx, did, visited, &mut FxHashSet::default(), None);\n \n     let span = clean::Span::new(cx.tcx.def_span(did));\n@@ -582,9 +578,9 @@ fn build_module(\n fn build_module_items(\n     cx: &mut DocContext<'_>,\n     did: DefId,\n-    visited: &mut FxHashSet<DefId>,\n+    visited: &mut DefIdSet,\n     inlined_names: &mut FxHashSet<(ItemType, Symbol)>,\n-    allowed_def_ids: Option<&FxHashSet<DefId>>,\n+    allowed_def_ids: Option<&DefIdSet>,\n ) -> Vec<clean::Item> {\n     let mut items = Vec::new();\n "}, {"sha": "34a7068e5da53b84b75f5e5147027801a2fd9d36", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -15,7 +15,7 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet, IndexEntry};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n use rustc_hir::PredicateOrigin;\n use rustc_hir_analysis::hir_ty_to_ty;\n use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n@@ -1528,7 +1528,7 @@ fn maybe_expand_private_type_alias<'tcx>(\n     let hir::ItemKind::TyAlias(ty, generics) = alias else { return None };\n \n     let provided_params = &path.segments.last().expect(\"segments were empty\");\n-    let mut substs = FxHashMap::default();\n+    let mut substs = DefIdMap::default();\n     let generic_args = provided_params.args();\n \n     let mut indices: hir::GenericParamCount = Default::default();\n@@ -2321,7 +2321,7 @@ fn clean_extern_crate<'tcx>(\n \n     let krate_owner_def_id = krate.owner_id.to_def_id();\n     if please_inline {\n-        let mut visited = FxHashSet::default();\n+        let mut visited = DefIdSet::default();\n \n         let res = Res::Def(DefKind::Mod, crate_def_id);\n \n@@ -2440,7 +2440,7 @@ fn clean_use_statement_inner<'tcx>(\n     let path = clean_path(path, cx);\n     let inner = if kind == hir::UseKind::Glob {\n         if !denied {\n-            let mut visited = FxHashSet::default();\n+            let mut visited = DefIdSet::default();\n             if let Some(items) =\n                 inline::try_inline_glob(cx, path.res, current_mod, &mut visited, inlined_names)\n             {\n@@ -2459,7 +2459,7 @@ fn clean_use_statement_inner<'tcx>(\n             }\n         }\n         if !denied {\n-            let mut visited = FxHashSet::default();\n+            let mut visited = DefIdSet::default();\n             let import_def_id = import.owner_id.to_def_id();\n \n             if let Some(mut items) = inline::try_inline("}, {"sha": "10b606f425ea41fcd4839ff72fd0d95806428d04", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::emitter::{Emitter, EmitterWriter};\n use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n use rustc_hir::def::{Namespace, Res};\n-use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n+use rustc_hir::def_id::{DefId, DefIdMap, DefIdSet, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{HirId, Path, TraitCandidate};\n use rustc_interface::interface;\n@@ -60,11 +60,11 @@ pub(crate) struct DocContext<'tcx> {\n     pub(crate) external_traits: Rc<RefCell<FxHashMap<DefId, clean::Trait>>>,\n     /// Used while populating `external_traits` to ensure we don't process the same trait twice at\n     /// the same time.\n-    pub(crate) active_extern_traits: FxHashSet<DefId>,\n+    pub(crate) active_extern_traits: DefIdSet,\n     // The current set of parameter substitutions,\n     // for expanding type aliases at the HIR level:\n     /// Table `DefId` of type, lifetime, or const parameter -> substituted type, lifetime, or const\n-    pub(crate) substs: FxHashMap<DefId, clean::SubstParam>,\n+    pub(crate) substs: DefIdMap<clean::SubstParam>,\n     /// Table synthetic type parameter for `impl Trait` in argument position -> bounds\n     pub(crate) impl_trait_bounds: FxHashMap<ImplTraitParam, Vec<clean::GenericBound>>,\n     /// Auto-trait or blanket impls processed so far, as `(self_ty, trait_def_id)`.\n@@ -108,11 +108,7 @@ impl<'tcx> DocContext<'tcx> {\n \n     /// Call the closure with the given parameters set as\n     /// the substitutions for a type alias' RHS.\n-    pub(crate) fn enter_alias<F, R>(\n-        &mut self,\n-        substs: FxHashMap<DefId, clean::SubstParam>,\n-        f: F,\n-    ) -> R\n+    pub(crate) fn enter_alias<F, R>(&mut self, substs: DefIdMap<clean::SubstParam>, f: F) -> R\n     where\n         F: FnOnce(&mut Self) -> R,\n     {"}, {"sha": "24752cddb337ceeade25dcacdde3e9370d2af23e", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -1,7 +1,7 @@\n use std::mem;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::Symbol;\n \n@@ -33,7 +33,7 @@ pub(crate) struct Cache {\n     ///\n     /// The values of the map are a list of implementations and documentation\n     /// found on that implementation.\n-    pub(crate) impls: FxHashMap<DefId, Vec<Impl>>,\n+    pub(crate) impls: DefIdMap<Vec<Impl>>,\n \n     /// Maintains a mapping of local crate `DefId`s to the fully qualified name\n     /// and \"short type description\" of that node. This is used when generating\n@@ -56,7 +56,7 @@ pub(crate) struct Cache {\n     /// to the path used if the corresponding type is inlined. By\n     /// doing this, we can detect duplicate impls on a trait page, and only display\n     /// the impl for the inlined type.\n-    pub(crate) exact_paths: FxHashMap<DefId, Vec<Symbol>>,\n+    pub(crate) exact_paths: DefIdMap<Vec<Symbol>>,\n \n     /// This map contains information about all known traits of this crate.\n     /// Implementations of a crate should inherit the documentation of the\n@@ -127,7 +127,7 @@ pub(crate) struct Cache {\n struct CacheBuilder<'a, 'tcx> {\n     cache: &'a mut Cache,\n     /// This field is used to prevent duplicated impl blocks.\n-    impl_ids: FxHashMap<DefId, FxHashSet<DefId>>,\n+    impl_ids: DefIdMap<DefIdSet>,\n     tcx: TyCtxt<'tcx>,\n }\n \n@@ -173,7 +173,7 @@ impl Cache {\n \n         let (krate, mut impl_ids) = {\n             let mut cache_builder =\n-                CacheBuilder { tcx, cache: &mut cx.cache, impl_ids: FxHashMap::default() };\n+                CacheBuilder { tcx, cache: &mut cx.cache, impl_ids: Default::default() };\n             krate = cache_builder.fold_crate(krate);\n             (krate, cache_builder.impl_ids)\n         };"}, {"sha": "15258a467a228106abf2a18d728c066681b2bc6a", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -6,7 +6,7 @@ use std::rc::Rc;\n use std::sync::mpsc::{channel, Receiver};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefIdMap, LOCAL_CRATE};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n@@ -56,7 +56,7 @@ pub(crate) struct Context<'tcx> {\n     pub(super) render_redirect_pages: bool,\n     /// Tracks section IDs for `Deref` targets so they match in both the main\n     /// body and the sidebar.\n-    pub(super) deref_id_map: FxHashMap<DefId, String>,\n+    pub(super) deref_id_map: DefIdMap<String>,\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     pub(super) id_map: IdMap,\n     /// Shared mutable state.\n@@ -544,7 +544,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             dst,\n             render_redirect_pages: false,\n             id_map,\n-            deref_id_map: FxHashMap::default(),\n+            deref_id_map: Default::default(),\n             shared: Rc::new(scx),\n             include_sources,\n             types_with_notable_traits: FxHashSet::default(),\n@@ -572,7 +572,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             current: self.current.clone(),\n             dst: self.dst.clone(),\n             render_redirect_pages: self.render_redirect_pages,\n-            deref_id_map: FxHashMap::default(),\n+            deref_id_map: Default::default(),\n             id_map: IdMap::new(),\n             shared: Rc::clone(&self.shared),\n             include_sources: self.include_sources,"}, {"sha": "d644293d3ef12c0174da5c7f83fb499ab8373983", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -50,7 +50,7 @@ use rustc_ast_pretty::pprust;\n use rustc_attr::{ConstStability, Deprecation, StabilityLevel};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::CtorKind;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, DefIdSet};\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n use rustc_middle::ty;\n@@ -1115,7 +1115,7 @@ fn render_assoc_items(\n     it: DefId,\n     what: AssocItemRender<'_>,\n ) {\n-    let mut derefs = FxHashSet::default();\n+    let mut derefs = DefIdSet::default();\n     derefs.insert(it);\n     render_assoc_items_inner(w, cx, containing_item, it, what, &mut derefs)\n }\n@@ -1126,7 +1126,7 @@ fn render_assoc_items_inner(\n     containing_item: &clean::Item,\n     it: DefId,\n     what: AssocItemRender<'_>,\n-    derefs: &mut FxHashSet<DefId>,\n+    derefs: &mut DefIdSet,\n ) {\n     info!(\"Documenting associated items of {:?}\", containing_item.name);\n     let shared = Rc::clone(&cx.shared);\n@@ -1215,7 +1215,7 @@ fn render_deref_methods(\n     impl_: &Impl,\n     container_item: &clean::Item,\n     deref_mut: bool,\n-    derefs: &mut FxHashSet<DefId>,\n+    derefs: &mut DefIdSet,\n ) {\n     let cache = cx.cache();\n     let deref_type = impl_.inner_impl().trait_.as_ref().unwrap();\n@@ -2175,7 +2175,7 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             if let Some(impl_) =\n                 v.iter().find(|i| i.trait_did() == cx.tcx().lang_items().deref_trait())\n             {\n-                let mut derefs = FxHashSet::default();\n+                let mut derefs = DefIdSet::default();\n                 derefs.insert(did);\n                 sidebar_deref_methods(cx, out, impl_, v, &mut derefs, &mut used_links);\n             }\n@@ -2195,7 +2195,7 @@ fn sidebar_deref_methods(\n     out: &mut Buffer,\n     impl_: &Impl,\n     v: &[Impl],\n-    derefs: &mut FxHashSet<DefId>,\n+    derefs: &mut DefIdSet,\n     used_links: &mut FxHashSet<String>,\n ) {\n     let c = cx.cache();"}, {"sha": "e0d64c231a6ab8a54c1ed985e2bcb1f38f57dcef", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -1907,9 +1907,15 @@ in storage.js\n }\n .scraped-example:not(.expanded) .code-wrapper:before {\n \ttop: 0;\n+\tbackground: linear-gradient(to bottom,\n+\t\tvar(--scrape-example-code-wrapper-background-start),\n+\t\tvar(--scrape-example-code-wrapper-background-end));\n }\n .scraped-example:not(.expanded) .code-wrapper:after {\n \tbottom: 0;\n+\tbackground: linear-gradient(to top,\n+\t\tvar(--scrape-example-code-wrapper-background-start),\n+\t\tvar(--scrape-example-code-wrapper-background-end));\n }\n \n .scraped-example .code-wrapper .example-wrap {"}, {"sha": "ed779bf6166eed34cb97036796868426617b05aa", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -97,6 +97,8 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--scrape-example-help-color: #eee;\n \t--scrape-example-help-hover-border-color: #fff;\n \t--scrape-example-help-hover-color: #fff;\n+\t--scrape-example-code-wrapper-background-start: rgba(15, 20, 25, 1);\n+\t--scrape-example-code-wrapper-background-end: rgba(15, 20, 25, 0);\n }\n \n h1, h2, h3, h4 {\n@@ -203,10 +205,3 @@ above the `@media (max-width: 700px)` rules due to a bug in the css checker */\n #source-sidebar div.files > a.selected {\n \tcolor: #ffb44c;\n }\n-\n-.scraped-example:not(.expanded) .code-wrapper::before {\n-\tbackground: linear-gradient(to bottom, rgba(15, 20, 25, 1), rgba(15, 20, 25, 0));\n-}\n-.scraped-example:not(.expanded) .code-wrapper::after {\n-\tbackground: linear-gradient(to top, rgba(15, 20, 25, 1), rgba(15, 20, 25, 0));\n-}"}, {"sha": "3766f0daa42ff837264542bee9f59c15212b3170", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -92,6 +92,8 @@\n \t--scrape-example-help-color: #eee;\n \t--scrape-example-help-hover-border-color: #fff;\n \t--scrape-example-help-hover-color: #fff;\n+\t--scrape-example-code-wrapper-background-start: rgba(53, 53, 53, 1);\n+\t--scrape-example-code-wrapper-background-end: rgba(53, 53, 53, 0);\n }\n \n #search-tabs > button:not(.selected) {\n@@ -103,10 +105,3 @@\n \tborder-top-color: #0089ff;\n \tbackground-color: #353535;\n }\n-\n-.scraped-example:not(.expanded) .code-wrapper::before {\n-\tbackground: linear-gradient(to bottom, rgba(53, 53, 53, 1), rgba(53, 53, 53, 0));\n-}\n-.scraped-example:not(.expanded) .code-wrapper::after {\n-\tbackground: linear-gradient(to top, rgba(53, 53, 53, 1), rgba(53, 53, 53, 0));\n-}"}, {"sha": "8a7f6abcf8d8e83141923f3a8400bd38606725bd", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -89,6 +89,8 @@\n \t--scrape-example-help-color: #333;\n \t--scrape-example-help-hover-border-color: #000;\n \t--scrape-example-help-hover-color: #000;\n+\t--scrape-example-code-wrapper-background-start: rgba(255, 255, 255, 1);\n+\t--scrape-example-code-wrapper-background-end: rgba(255, 255, 255, 0);\n }\n \n #search-tabs > button:not(.selected) {\n@@ -100,10 +102,3 @@\n \tbackground-color: #ffffff;\n \tborder-top-color: #0089ff;\n }\n-\n-.scraped-example:not(.expanded) .code-wrapper::before {\n-\tbackground: linear-gradient(to bottom, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n-}\n-.scraped-example:not(.expanded) .code-wrapper::after {\n-\tbackground: linear-gradient(to top, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n-}"}, {"sha": "982370aa21c43b2ef4960f73714b2993710e2748", "filename": "src/librustdoc/json/import_finder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fjson%2Fimport_finder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fjson%2Fimport_finder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fimport_finder.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -1,5 +1,4 @@\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::DefIdSet;\n \n use crate::{\n     clean::{self, Import, ImportSource, Item},\n@@ -14,14 +13,15 @@ use crate::{\n /// See [#100973](https://github.com/rust-lang/rust/issues/100973) and\n /// [#101103](https://github.com/rust-lang/rust/issues/101103) for times when\n /// this information is needed.\n-pub(crate) fn get_imports(krate: clean::Crate) -> (clean::Crate, FxHashSet<DefId>) {\n-    let mut finder = ImportFinder { imported: FxHashSet::default() };\n+pub(crate) fn get_imports(krate: clean::Crate) -> (clean::Crate, DefIdSet) {\n+    let mut finder = ImportFinder::default();\n     let krate = finder.fold_crate(krate);\n     (krate, finder.imported)\n }\n \n+#[derive(Default)]\n struct ImportFinder {\n-    imported: FxHashSet<DefId>,\n+    imported: DefIdSet,\n }\n \n impl DocFolder for ImportFinder {"}, {"sha": "5adc0d2a40e41bf2944e0aa079c169decf4fb253", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -13,8 +13,8 @@ use std::io::{BufWriter, Write};\n use std::path::PathBuf;\n use std::rc::Rc;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::DefId;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_hir::def_id::{DefId, DefIdSet};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n use rustc_span::def_id::LOCAL_CRATE;\n@@ -40,7 +40,7 @@ pub(crate) struct JsonRenderer<'tcx> {\n     /// The directory where the blob will be written to.\n     out_path: PathBuf,\n     cache: Rc<Cache>,\n-    imported_items: FxHashSet<DefId>,\n+    imported_items: DefIdSet,\n }\n \n impl<'tcx> JsonRenderer<'tcx> {"}, {"sha": "7d15a207d06524b06bf3415f3621d60f6d647113", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -7,8 +7,8 @@ use crate::core::DocContext;\n use crate::formats::cache::Cache;\n use crate::visit::DocVisitor;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_hir::def_id::{DefId, DefIdMap, DefIdSet, LOCAL_CRATE};\n use rustc_middle::ty::{self, DefIdTree};\n use rustc_span::symbol::sym;\n \n@@ -126,14 +126,14 @@ pub(crate) fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) ->\n     });\n \n     let mut cleaner = BadImplStripper { prims, items: crate_items, cache: &cx.cache };\n-    let mut type_did_to_deref_target: FxHashMap<DefId, &Type> = FxHashMap::default();\n+    let mut type_did_to_deref_target: DefIdMap<&Type> = DefIdMap::default();\n \n     // Follow all `Deref` targets of included items and recursively add them as valid\n     fn add_deref_target(\n         cx: &DocContext<'_>,\n-        map: &FxHashMap<DefId, &Type>,\n+        map: &DefIdMap<&Type>,\n         cleaner: &mut BadImplStripper<'_>,\n-        targets: &mut FxHashSet<DefId>,\n+        targets: &mut DefIdSet,\n         type_did: DefId,\n     ) {\n         if let Some(target) = map.get(&type_did) {\n@@ -177,7 +177,7 @@ pub(crate) fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) ->\n                         // `Deref` target type and the impl for type positions, this map of types is keyed by\n                         // `DefId` and for convenience uses a special cleaner that accepts `DefId`s directly.\n                         if cleaner.keep_impl_with_def_id(for_did.into()) {\n-                            let mut targets = FxHashSet::default();\n+                            let mut targets = DefIdSet::default();\n                             targets.insert(for_did);\n                             add_deref_target(\n                                 cx,"}, {"sha": "00ea6ca4152c8ee460c09434fa3350911b7f950a", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -1,12 +1,11 @@\n //! The Rust AST Visitor. Extracts useful information and massages it into a form\n //! usable for `clean`.\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::DefId;\n-use rustc_hir::Node;\n-use rustc_hir::CRATE_HIR_ID;\n+use rustc_hir::def_id::{DefId, DefIdMap};\n+use rustc_hir::{HirIdSet, Node, CRATE_HIR_ID};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -62,24 +61,24 @@ pub(crate) fn inherits_doc_hidden(tcx: TyCtxt<'_>, mut node: hir::HirId) -> bool\n \n pub(crate) struct RustdocVisitor<'a, 'tcx> {\n     cx: &'a mut core::DocContext<'tcx>,\n-    view_item_stack: FxHashSet<hir::HirId>,\n+    view_item_stack: HirIdSet,\n     inlining: bool,\n     /// Are the current module and all of its parents public?\n     inside_public_path: bool,\n-    exact_paths: FxHashMap<DefId, Vec<Symbol>>,\n+    exact_paths: DefIdMap<Vec<Symbol>>,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub(crate) fn new(cx: &'a mut core::DocContext<'tcx>) -> RustdocVisitor<'a, 'tcx> {\n         // If the root is re-exported, terminate all recursion.\n-        let mut stack = FxHashSet::default();\n+        let mut stack = HirIdSet::default();\n         stack.insert(hir::CRATE_HIR_ID);\n         RustdocVisitor {\n             cx,\n             view_item_stack: stack,\n             inlining: false,\n             inside_public_path: true,\n-            exact_paths: FxHashMap::default(),\n+            exact_paths: Default::default(),\n         }\n     }\n "}, {"sha": "fd4f9254107caee8baa3b9837b7260f115a1737b", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -1,14 +1,13 @@\n use crate::core::DocContext;\n-use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, DefIdSet};\n use rustc_middle::ty::TyCtxt;\n \n // FIXME: this may not be exhaustive, but is sufficient for rustdocs current uses\n \n #[derive(Default)]\n pub(crate) struct RustdocEffectiveVisibilities {\n-    extern_public: FxHashSet<DefId>,\n+    extern_public: DefIdSet,\n }\n \n macro_rules! define_method {\n@@ -43,9 +42,9 @@ pub(crate) fn lib_embargo_visit_item(cx: &mut DocContext<'_>, def_id: DefId) {\n struct LibEmbargoVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     // Effective visibilities for reachable nodes\n-    extern_public: &'a mut FxHashSet<DefId>,\n+    extern_public: &'a mut DefIdSet,\n     // Keeps track of already visited modules, in case a module re-exports its parent\n-    visited_mods: FxHashSet<DefId>,\n+    visited_mods: DefIdSet,\n }\n \n impl LibEmbargoVisitor<'_, '_> {"}, {"sha": "3676f69b100db0136b8701413a1e15513a634399", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -123,6 +123,7 @@ pub enum FailMode {\n pub enum CompareMode {\n     Polonius,\n     Chalk,\n+    NextSolver,\n     SplitDwarf,\n     SplitDwarfSingle,\n }\n@@ -132,6 +133,7 @@ impl CompareMode {\n         match *self {\n             CompareMode::Polonius => \"polonius\",\n             CompareMode::Chalk => \"chalk\",\n+            CompareMode::NextSolver => \"next-solver\",\n             CompareMode::SplitDwarf => \"split-dwarf\",\n             CompareMode::SplitDwarfSingle => \"split-dwarf-single\",\n         }\n@@ -141,6 +143,7 @@ impl CompareMode {\n         match s.as_str() {\n             \"polonius\" => CompareMode::Polonius,\n             \"chalk\" => CompareMode::Chalk,\n+            \"next-solver\" => CompareMode::NextSolver,\n             \"split-dwarf\" => CompareMode::SplitDwarf,\n             \"split-dwarf-single\" => CompareMode::SplitDwarfSingle,\n             x => panic!(\"unknown --compare-mode option: {}\", x),"}, {"sha": "dc30e4bb1bef793171358affe8acb3d156dd0c43", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -710,6 +710,7 @@ impl Config {\n             match self.compare_mode {\n                 Some(CompareMode::Polonius) => name == \"compare-mode-polonius\",\n                 Some(CompareMode::Chalk) => name == \"compare-mode-chalk\",\n+                Some(CompareMode::NextSolver) => name == \"compare-mode-next-solver\",\n                 Some(CompareMode::SplitDwarf) => name == \"compare-mode-split-dwarf\",\n                 Some(CompareMode::SplitDwarfSingle) => name == \"compare-mode-split-dwarf-single\",\n                 None => false,"}, {"sha": "51c9a27c83d51cfbb0e7dac0541d66e5ea4b1977", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -2030,6 +2030,9 @@ impl<'test> TestCx<'test> {\n             Some(CompareMode::Chalk) => {\n                 rustc.args(&[\"-Ztrait-solver=chalk\"]);\n             }\n+            Some(CompareMode::NextSolver) => {\n+                rustc.args(&[\"-Ztrait-solver=next\"]);\n+            }\n             Some(CompareMode::SplitDwarf) if self.config.target.contains(\"windows\") => {\n                 rustc.args(&[\"-Csplit-debuginfo=unpacked\", \"-Zunstable-options\"]);\n             }"}, {"sha": "ff7e8df987816ec29614a59a9450ba3bf8dd3ad7", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -23,6 +23,7 @@ pub const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n     \"x86_64-linux-android\",\n     \"x86_64-unknown-freebsd\",\n     \"x86_64-unknown-linux-gnu\",\n+    \"s390x-unknown-linux-gnu\",\n ];\n \n // FIXME(rcvalle): More targets are likely supported.\n@@ -50,17 +51,23 @@ pub const LSAN_SUPPORTED_TARGETS: &[&str] = &[\n     \"aarch64-unknown-linux-gnu\",\n     \"x86_64-apple-darwin\",\n     \"x86_64-unknown-linux-gnu\",\n+    \"s390x-unknown-linux-gnu\",\n ];\n \n-pub const MSAN_SUPPORTED_TARGETS: &[&str] =\n-    &[\"aarch64-unknown-linux-gnu\", \"x86_64-unknown-freebsd\", \"x86_64-unknown-linux-gnu\"];\n+pub const MSAN_SUPPORTED_TARGETS: &[&str] = &[\n+    \"aarch64-unknown-linux-gnu\",\n+    \"x86_64-unknown-freebsd\",\n+    \"x86_64-unknown-linux-gnu\",\n+    \"s390x-unknown-linux-gnu\",\n+];\n \n pub const TSAN_SUPPORTED_TARGETS: &[&str] = &[\n     \"aarch64-apple-darwin\",\n     \"aarch64-unknown-linux-gnu\",\n     \"x86_64-apple-darwin\",\n     \"x86_64-unknown-freebsd\",\n     \"x86_64-unknown-linux-gnu\",\n+    \"s390x-unknown-linux-gnu\",\n ];\n \n pub const HWASAN_SUPPORTED_TARGETS: &[&str] ="}, {"sha": "67c58826efc2691e226365fe3a4b9a0253af9353", "filename": "tests/rustdoc-gui/scrape-examples-color.goml", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/tests%2Frustdoc-gui%2Fscrape-examples-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/tests%2Frustdoc-gui%2Fscrape-examples-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fscrape-examples-color.goml?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -58,3 +58,39 @@ call-function: (\"check-colors\", {\n     \"help_hover_border\": \"rgb(0, 0, 0)\",\n     \"help_hover_color\": \"rgb(0, 0, 0)\",\n })\n+\n+// Now testing the top and bottom background in case there is only one scraped examples.\n+goto: \"file://\" + |DOC_PATH| + \"/scrape_examples/fn.test.html\"\n+\n+define-function: (\n+    \"check-background\",\n+    (theme, background_color_start, background_color_end),\n+    block {\n+        local-storage: { \"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\", }\n+        reload:\n+        assert-css: (\".scraped-example:not(.expanded) .code-wrapper::before\", {\n+            \"background-image\": \"linear-gradient(\" + |background_color_start| + \", \" +\n+                |background_color_end| + \")\",\n+        })\n+        assert-css: (\".scraped-example:not(.expanded) .code-wrapper::after\", {\n+            \"background-image\": \"linear-gradient(to top, \" + |background_color_start| + \", \" +\n+                |background_color_end| + \")\",\n+        })\n+    },\n+)\n+\n+call-function: (\"check-background\", {\n+    \"theme\": \"ayu\",\n+    \"background_color_start\": \"rgb(15, 20, 25)\",\n+    \"background_color_end\": \"rgba(15, 20, 25, 0)\",\n+})\n+call-function: (\"check-background\", {\n+    \"theme\": \"dark\",\n+    \"background_color_start\": \"rgb(53, 53, 53)\",\n+    \"background_color_end\": \"rgba(53, 53, 53, 0)\",\n+})\n+call-function: (\"check-background\", {\n+    \"theme\": \"light\",\n+    \"background_color_start\": \"rgb(255, 255, 255)\",\n+    \"background_color_end\": \"rgba(255, 255, 255, 0)\",\n+})"}, {"sha": "9426445656f23dc4561c2249007a213727858c39", "filename": "tests/ui/inference/issue-107090.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/tests%2Fui%2Finference%2Fissue-107090.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/tests%2Fui%2Finference%2Fissue-107090.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-107090.rs?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -0,0 +1,31 @@\n+use std::marker::PhantomData;\n+struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+where\n+    Foo<'short, 'out, T>: Convert<'a, 'b>;\n+    //~^ ERROR mismatched types\n+    //~^^ ERROR mismatched types\n+    //~^^^ ERROR use of undeclared lifetime name\n+    //~| ERROR use of undeclared lifetime name `'out`\n+\n+trait Convert<'a, 'b>: Sized {\n+    fn cast(&'a self) -> &'b Self;\n+}\n+impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+    //~^ ERROR use of undeclared lifetime name\n+    //~^^ ERROR use of undeclared lifetime name `'out`\n+    //~| ERROR cannot infer an appropriate lifetime for lifetime parameter\n+    fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n+        //~^ ERROR use of undeclared lifetime name\n+        //~| ERROR cannot infer an appropriate lifetime for lifetime parameter\n+        self\n+    }\n+}\n+\n+fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+    //~^ ERROR use of undeclared lifetime name\n+    //~^^ ERROR incompatible lifetime on type\n+    //~| ERROR `x` has lifetime `'in_` but it needs to satisfy a `'static` lifetime requirement\n+    sadness.cast()\n+}\n+\n+fn main() {}"}, {"sha": "33cb39014acfa658853824fdb08f20a484589d0b", "filename": "tests/ui/inference/issue-107090.stderr", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/cef633de5853083b69be14e560d33d59eb05a540/tests%2Fui%2Finference%2Fissue-107090.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cef633de5853083b69be14e560d33d59eb05a540/tests%2Fui%2Finference%2Fissue-107090.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finference%2Fissue-107090.stderr?ref=cef633de5853083b69be14e560d33d59eb05a540", "patch": "@@ -0,0 +1,173 @@\n+error[E0261]: use of undeclared lifetime name `'short`\n+  --> $DIR/issue-107090.rs:4:9\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |         ^^^^^^ undeclared lifetime\n+   |\n+   = note: for more information on higher-ranked polymorphism, visit https://doc.rust-lang.org/nomicon/hrtb.html\n+help: consider making the bound lifetime-generic with a new `'short` lifetime\n+   |\n+LL |     for<'short> Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |     +++++++++++\n+help: consider introducing lifetime `'short` here\n+   |\n+LL | struct Foo<'short, 'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+   |            +++++++\n+\n+error[E0261]: use of undeclared lifetime name `'out`\n+  --> $DIR/issue-107090.rs:4:17\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |                 ^^^^ undeclared lifetime\n+   |\n+help: consider making the bound lifetime-generic with a new `'out` lifetime\n+   |\n+LL |     for<'out> Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |     +++++++++\n+help: consider introducing lifetime `'out` here\n+   |\n+LL | struct Foo<'out, 'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+   |            +++++\n+\n+error[E0261]: use of undeclared lifetime name `'b`\n+  --> $DIR/issue-107090.rs:13:47\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |      -                                        ^^ undeclared lifetime\n+   |      |\n+   |      help: consider introducing lifetime `'b` here: `'b,`\n+\n+error[E0261]: use of undeclared lifetime name `'out`\n+  --> $DIR/issue-107090.rs:13:67\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |      - help: consider introducing lifetime `'out` here: `'out,`   ^^^^ undeclared lifetime\n+\n+error[E0261]: use of undeclared lifetime name `'out`\n+  --> $DIR/issue-107090.rs:17:49\n+   |\n+LL |     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n+   |                                                 ^^^^ undeclared lifetime\n+   |\n+help: consider introducing lifetime `'out` here\n+   |\n+LL |     fn cast<'out>(&'long self) -> &'short Foo<'short, 'out, T> {\n+   |            ++++++\n+help: consider introducing lifetime `'out` here\n+   |\n+LL | impl<'out, 'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |      +++++\n+\n+error[E0261]: use of undeclared lifetime name `'short`\n+  --> $DIR/issue-107090.rs:24:68\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+   |           -                                                        ^^^^^^ undeclared lifetime\n+   |           |\n+   |           help: consider introducing lifetime `'short` here: `'short,`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-107090.rs:4:27\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |                           ^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected trait `Convert<'static, 'static>`\n+              found trait `Convert<'a, 'b>`\n+note: the lifetime `'a` as defined here...\n+  --> $DIR/issue-107090.rs:2:12\n+   |\n+LL | struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+   |            ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-107090.rs:4:27\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |                           ^^^^^^^^^^^^^^^ lifetime mismatch\n+   |\n+   = note: expected trait `Convert<'static, 'static>`\n+              found trait `Convert<'a, 'b>`\n+note: the lifetime `'b` as defined here...\n+  --> $DIR/issue-107090.rs:2:16\n+   |\n+LL | struct Foo<'a, 'b, T>(PhantomData<(&'a (), &'b (), T)>)\n+   |                ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'long` due to conflicting requirements\n+  --> $DIR/issue-107090.rs:13:55\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'short` as defined here...\n+  --> $DIR/issue-107090.rs:13:21\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |                     ^^^^^^\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+note: ...so that the types are compatible\n+  --> $DIR/issue-107090.rs:13:55\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^\n+   = note: expected `Convert<'short, 'static>`\n+              found `Convert<'_, 'static>`\n+\n+error: incompatible lifetime on type\n+  --> $DIR/issue-107090.rs:24:29\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+   |                             ^^^^^^^^^^^^^^^^^^\n+   |\n+note: because this has an unmet lifetime requirement\n+  --> $DIR/issue-107090.rs:4:27\n+   |\n+LL |     Foo<'short, 'out, T>: Convert<'a, 'b>;\n+   |                           ^^^^^^^^^^^^^^^ introduces a `'static` lifetime requirement\n+note: the lifetime `'out` as defined here...\n+  --> $DIR/issue-107090.rs:24:17\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+   |                 ^^^^\n+note: ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n+  --> $DIR/issue-107090.rs:13:1\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0759]: `x` has lifetime `'in_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/issue-107090.rs:24:29\n+   |\n+LL | fn badboi<'in_, 'out, T>(x: Foo<'in_, 'out, T>, sadness: &'in_ Foo<'short, 'out, T>) -> &'out T {\n+   |                             ^^^^^^^^^^^^^^^^^^\n+   |                             |\n+   |                             this data with lifetime `'in_`...\n+   |                             ...is used and required to live as long as `'static` here\n+\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'long` due to conflicting requirements\n+  --> $DIR/issue-107090.rs:17:13\n+   |\n+LL |     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n+   |             ^^^^^^^^^^^\n+   |\n+note: first, the lifetime cannot outlive the lifetime `'short` as defined here...\n+  --> $DIR/issue-107090.rs:13:21\n+   |\n+LL | impl<'long: 'short, 'short, T> Convert<'long, 'b> for Foo<'short, 'out, T> {\n+   |                     ^^^^^^\n+   = note: ...but the lifetime must also be valid for the static lifetime...\n+note: ...so that the types are compatible\n+  --> $DIR/issue-107090.rs:17:13\n+   |\n+LL |     fn cast(&'long self) -> &'short Foo<'short, 'out, T> {\n+   |             ^^^^^^^^^^^\n+   = note: expected `Convert<'short, 'static>`\n+              found `Convert<'_, 'static>`\n+\n+error: aborting due to 12 previous errors\n+\n+Some errors have detailed explanations: E0261, E0308, E0495, E0759.\n+For more information about an error, try `rustc --explain E0261`."}]}