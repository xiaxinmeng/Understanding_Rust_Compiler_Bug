{"sha": "67c84e05e72931587e5f81a297dee95bc149bcd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3Yzg0ZTA1ZTcyOTMxNTg3ZTVmODFhMjk3ZGVlOTViYzE0OWJjZDg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-13T16:20:27Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-18T09:27:10Z"}, "message": "incr.comp.: Use StableHash impls instead of functions for hashing most maps.", "tree": {"sha": "218a7eb69f31e03b0c019549c5d5392a1310bd9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/218a7eb69f31e03b0c019549c5d5392a1310bd9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67c84e05e72931587e5f81a297dee95bc149bcd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67c84e05e72931587e5f81a297dee95bc149bcd8", "html_url": "https://github.com/rust-lang/rust/commit/67c84e05e72931587e5f81a297dee95bc149bcd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67c84e05e72931587e5f81a297dee95bc149bcd8/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "html_url": "https://github.com/rust-lang/rust/commit/b9816c5fab6bfde01f83d83a0b53e78bb00d3900"}], "stats": {"total": 365, "additions": 118, "deletions": 247}, "files": [{"sha": "0932c5ce8fb800362a01bf7a3b48b4afe16856c5", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 107, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=67c84e05e72931587e5f81a297dee95bc149bcd8", "patch": "@@ -14,11 +14,10 @@ use hir::map::DefPathHash;\n use ich::{self, CachingCodemapView};\n use session::config::DebugInfoLevel::NoDebugInfo;\n use ty::{self, TyCtxt, fast_reject};\n-use util::nodemap::{NodeMap, NodeSet, ItemLocalMap};\n \n use std::cmp::Ord;\n use std::hash as std_hash;\n-use std::collections::{HashMap, HashSet, BTreeMap};\n+use std::collections::HashMap;\n \n use syntax::ast;\n use syntax::attr;\n@@ -337,111 +336,6 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for Span {\n     }\n }\n \n-pub fn hash_stable_hashmap<'a, 'gcx, 'tcx, K, V, R, SK, F, W>(\n-    hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n-    hasher: &mut StableHasher<W>,\n-    map: &HashMap<K, V, R>,\n-    extract_stable_key: F)\n-    where K: Eq + std_hash::Hash,\n-          V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n-          R: std_hash::BuildHasher,\n-          SK: HashStable<StableHashingContext<'a, 'gcx, 'tcx>> + Ord + Clone,\n-          F: Fn(&mut StableHashingContext<'a, 'gcx, 'tcx>, &K) -> SK,\n-          W: StableHasherResult,\n-{\n-    let mut keys: Vec<_> = map.keys()\n-                              .map(|k| (extract_stable_key(hcx, k), k))\n-                              .collect();\n-    keys.sort_unstable_by(|&(ref sk1, _), &(ref sk2, _)| sk1.cmp(sk2));\n-    keys.len().hash_stable(hcx, hasher);\n-    for (stable_key, key) in keys {\n-        stable_key.hash_stable(hcx, hasher);\n-        map[key].hash_stable(hcx, hasher);\n-    }\n-}\n-\n-pub fn hash_stable_hashset<'a, 'tcx, 'gcx, K, R, SK, F, W>(\n-    hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n-    hasher: &mut StableHasher<W>,\n-    set: &HashSet<K, R>,\n-    extract_stable_key: F)\n-    where K: Eq + std_hash::Hash,\n-          R: std_hash::BuildHasher,\n-          SK: HashStable<StableHashingContext<'a, 'gcx, 'tcx>> + Ord + Clone,\n-          F: Fn(&mut StableHashingContext<'a, 'gcx, 'tcx>, &K) -> SK,\n-          W: StableHasherResult,\n-{\n-    let mut keys: Vec<_> = set.iter()\n-                              .map(|k| extract_stable_key(hcx, k))\n-                              .collect();\n-    keys.sort_unstable();\n-    keys.hash_stable(hcx, hasher);\n-}\n-\n-pub fn hash_stable_nodemap<'a, 'tcx, 'gcx, V, W>(\n-    hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n-    hasher: &mut StableHasher<W>,\n-    map: &NodeMap<V>)\n-    where V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n-          W: StableHasherResult,\n-{\n-    let definitions = hcx.tcx.hir.definitions();\n-    hash_stable_hashmap(hcx, hasher, map, |_, node_id| {\n-        let hir_id = definitions.node_to_hir_id(*node_id);\n-        let owner_def_path_hash = definitions.def_path_hash(hir_id.owner);\n-        (owner_def_path_hash, hir_id.local_id)\n-    });\n-}\n-\n-pub fn hash_stable_nodeset<'a, 'tcx, 'gcx, W>(\n-    hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n-    hasher: &mut StableHasher<W>,\n-    map: &NodeSet)\n-    where W: StableHasherResult,\n-{\n-    let definitions = hcx.tcx.hir.definitions();\n-    hash_stable_hashset(hcx, hasher, map, |_, node_id| {\n-        let hir_id = definitions.node_to_hir_id(*node_id);\n-        let owner_def_path_hash = definitions.def_path_hash(hir_id.owner);\n-        (owner_def_path_hash, hir_id.local_id)\n-    });\n-}\n-\n-pub fn hash_stable_itemlocalmap<'a, 'tcx, 'gcx, V, W>(\n-    hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n-    hasher: &mut StableHasher<W>,\n-    map: &ItemLocalMap<V>)\n-    where V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n-          W: StableHasherResult,\n-{\n-    hash_stable_hashmap(hcx, hasher, map, |_, local_id| {\n-        *local_id\n-    });\n-}\n-\n-\n-pub fn hash_stable_btreemap<'a, 'tcx, 'gcx, K, V, SK, F, W>(\n-    hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n-    hasher: &mut StableHasher<W>,\n-    map: &BTreeMap<K, V>,\n-    extract_stable_key: F)\n-    where K: Eq + Ord,\n-          V: HashStable<StableHashingContext<'a, 'gcx, 'tcx>>,\n-          SK: HashStable<StableHashingContext<'a, 'gcx, 'tcx>> + Ord + Clone,\n-          F: Fn(&mut StableHashingContext<'a, 'gcx, 'tcx>, &K) -> SK,\n-          W: StableHasherResult,\n-{\n-    let mut keys: Vec<_> = map.keys()\n-                              .map(|k| (extract_stable_key(hcx, k), k))\n-                              .collect();\n-    keys.sort_unstable_by(|&(ref sk1, _), &(ref sk2, _)| sk1.cmp(sk2));\n-    keys.len().hash_stable(hcx, hasher);\n-    for (stable_key, key) in keys {\n-        stable_key.hash_stable(hcx, hasher);\n-        map[key].hash_stable(hcx, hasher);\n-    }\n-}\n-\n pub fn hash_stable_trait_impls<'a, 'tcx, 'gcx, W, R>(\n     hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n     hasher: &mut StableHasher<W>,"}, {"sha": "371a9c966440ad4f02884ad83b220a93cc5bd64c", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 27, "deletions": 56, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=67c84e05e72931587e5f81a297dee95bc149bcd8", "patch": "@@ -11,9 +11,9 @@\n //! This module contains `HashStable` implementations for various data types\n //! from rustc::ty in no particular order.\n \n-use ich::{self, StableHashingContext, NodeIdHashingMode};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n-                                           StableHasherResult};\n+use ich::{StableHashingContext, NodeIdHashingMode};\n+use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n+                                           StableHasher, StableHasherResult};\n use std::hash as std_hash;\n use std::mem;\n use middle::region;\n@@ -124,9 +124,10 @@ for ty::adjustment::Adjust<'gcx> {\n \n impl_stable_hash_for!(struct ty::adjustment::Adjustment<'tcx> { kind, target });\n impl_stable_hash_for!(struct ty::adjustment::OverloadedDeref<'tcx> { region, mutbl });\n-impl_stable_hash_for!(struct ty::UpvarId { var_id, closure_expr_id });\n impl_stable_hash_for!(struct ty::UpvarBorrow<'tcx> { kind, region });\n \n+impl_stable_hash_for!(struct ty::UpvarId { var_id, closure_expr_id });\n+\n impl_stable_hash_for!(enum ty::BorrowKind {\n     ImmBorrow,\n     UniqueImmBorrow,\n@@ -513,28 +514,20 @@ impl_stable_hash_for!(enum ty::cast::CastKind {\n     FnPtrAddrCast\n });\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for region::Scope\n-{\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n-                                          hasher: &mut StableHasher<W>) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            match *self {\n-                region::Scope::Node(node_id) |\n-                region::Scope::Destruction(node_id) => {\n-                    node_id.hash_stable(hcx, hasher);\n-                }\n-                region::Scope::CallSite(body_id) |\n-                region::Scope::Arguments(body_id) => {\n-                    body_id.hash_stable(hcx, hasher);\n-                }\n-                region::Scope::Remainder(block_remainder) => {\n-                    block_remainder.hash_stable(hcx, hasher);\n-                }\n-            }\n-        })\n+impl_stable_hash_for!(enum ::middle::region::Scope {\n+    Node(local_id),\n+    Destruction(local_id),\n+    CallSite(local_id),\n+    Arguments(local_id),\n+    Remainder(block_remainder)\n+});\n+\n+impl<'a, 'gcx, 'tcx> ToStableHashKey<StableHashingContext<'a, 'gcx, 'tcx>> for region::Scope {\n+    type KeyType = region::Scope;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &StableHashingContext<'a, 'gcx, 'tcx>) -> region::Scope {\n+        *self\n     }\n }\n \n@@ -770,10 +763,7 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::Cr\n         } = *self;\n \n         dependencies.hash_stable(hcx, hasher);\n-\n-        ich::hash_stable_hashmap(hcx, hasher, variances, |hcx, def_id| {\n-            hcx.def_path_hash(*def_id)\n-        });\n+        variances.hash_stable(hcx, hasher);\n     }\n }\n \n@@ -836,25 +826,14 @@ for ::middle::privacy::AccessLevels {\n                 ref map\n             } = *self;\n \n-            ich::hash_stable_nodemap(hcx, hasher, map);\n+            map.hash_stable(hcx, hasher);\n         });\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for ty::CrateInherentImpls {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n-                                          hasher: &mut StableHasher<W>) {\n-        let ty::CrateInherentImpls {\n-            ref inherent_impls,\n-        } = *self;\n-\n-        ich::hash_stable_hashmap(hcx, hasher, inherent_impls, |hcx, def_id| {\n-            hcx.def_path_hash(*def_id)\n-        });\n-    }\n-}\n+impl_stable_hash_for!(struct ty::CrateInherentImpls {\n+    inherent_impls\n+});\n \n impl_stable_hash_for!(enum ::session::CompileIncomplete {\n     Stopped,\n@@ -863,14 +842,6 @@ impl_stable_hash_for!(enum ::session::CompileIncomplete {\n \n impl_stable_hash_for!(struct ::util::common::ErrorReported {});\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>>\n-for ::middle::reachable::ReachableSet {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n-                                          hasher: &mut StableHasher<W>) {\n-        let ::middle::reachable::ReachableSet(ref reachable_set) = *self;\n-\n-        ich::hash_stable_nodeset(hcx, hasher, reachable_set);\n-    }\n-}\n-\n+impl_stable_hash_for!(tuple_struct ::middle::reachable::ReachableSet {\n+    reachable_set\n+});"}, {"sha": "cd0749a686511f34379f94526e1db7221df4ad79", "filename": "src/librustc/ich/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Fich%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Fich%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fmod.rs?ref=67c84e05e72931587e5f81a297dee95bc149bcd8", "patch": "@@ -12,9 +12,7 @@\n \n pub use self::fingerprint::Fingerprint;\n pub use self::caching_codemap_view::CachingCodemapView;\n-pub use self::hcx::{StableHashingContext, NodeIdHashingMode, hash_stable_hashmap,\n-                    hash_stable_hashset, hash_stable_nodemap, hash_stable_nodeset,\n-                    hash_stable_btreemap, hash_stable_itemlocalmap,\n+pub use self::hcx::{StableHashingContext, NodeIdHashingMode,\n                     hash_stable_trait_impls};\n mod fingerprint;\n mod caching_codemap_view;"}, {"sha": "eb2b136e417d318ff0242fc6c1d4397acbe89f68", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=67c84e05e72931587e5f81a297dee95bc149bcd8", "patch": "@@ -12,12 +12,12 @@ use std::cmp;\n \n use errors::DiagnosticBuilder;\n use hir::HirId;\n-use ich::{self, StableHashingContext};\n+use ich::StableHashingContext;\n use lint::builtin;\n use lint::context::CheckLintNameResult;\n use lint::{self, Lint, LintId, Level, LintSource};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n-                                           StableHasherResult};\n+use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n+                                           StableHasher, StableHasherResult};\n use session::Session;\n use syntax::ast;\n use syntax::attr;\n@@ -396,10 +396,7 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for LintLe\n             ref id_to_set,\n         } = *self;\n \n-        let definitions = hcx.tcx().hir.definitions();\n-        ich::hash_stable_hashmap(hcx, hasher, id_to_set, |_, hir_id| {\n-            (definitions.def_path_hash(hir_id.owner), hir_id.local_id)\n-        });\n+        id_to_set.hash_stable(hcx, hasher);\n \n         let LintLevelSets {\n             ref list,\n@@ -418,14 +415,10 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for LintLe\n \n                 match *lint_set {\n                     LintSet::CommandLine { ref specs } => {\n-                        ich::hash_stable_hashmap(hcx, hasher, specs, |_, lint_id| {\n-                            lint_id.lint_name_raw()\n-                        });\n+                        specs.hash_stable(hcx, hasher);\n                     }\n                     LintSet::Node { ref specs, parent } => {\n-                        ich::hash_stable_hashmap(hcx, hasher, specs, |_, lint_id| {\n-                            lint_id.lint_name_raw()\n-                        });\n+                        specs.hash_stable(hcx, hasher);\n                         parent.hash_stable(hcx, hasher);\n                     }\n                 }\n@@ -434,12 +427,20 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for LintLe\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for LintId {\n+impl<HCX> HashStable<HCX> for LintId {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n+                                          hcx: &mut HCX,\n                                           hasher: &mut StableHasher<W>) {\n         self.lint_name_raw().hash_stable(hcx, hasher);\n     }\n }\n \n+impl<HCX> ToStableHashKey<HCX> for LintId {\n+    type KeyType = &'static str;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self, _: &HCX) -> &'static str {\n+        self.lint_name_raw()\n+    }\n+}"}, {"sha": "5c6feddb1fdf244c251926dfb9d54b1faca4cdf2", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=67c84e05e72931587e5f81a297dee95bc149bcd8", "patch": "@@ -14,7 +14,7 @@\n //! Most of the documentation on regions can be found in\n //! `middle/infer/region_inference/README.md`\n \n-use ich::{self, StableHashingContext, NodeIdHashingMode};\n+use ich::{StableHashingContext, NodeIdHashingMode};\n use util::nodemap::{FxHashMap, FxHashSet};\n use ty;\n \n@@ -1259,22 +1259,11 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ScopeT\n             root_parent.hash_stable(hcx, hasher);\n         });\n \n-        ich::hash_stable_hashmap(hcx, hasher, parent_map, |hcx, scope| {\n-            let mut hasher = StableHasher::new();\n-            scope.hash_stable(hcx, &mut hasher);\n-            let stable: u64 = hasher.finish();\n-            stable\n-        });\n-\n-        ich::hash_stable_itemlocalmap(hcx, hasher, var_map);\n-        ich::hash_stable_itemlocalmap(hcx, hasher, destruction_scopes);\n-        ich::hash_stable_itemlocalmap(hcx, hasher, rvalue_scopes);\n-        ich::hash_stable_itemlocalmap(hcx, hasher, closure_tree);\n-        ich::hash_stable_hashmap(hcx, hasher, yield_in_scope, |hcx, scope| {\n-            let mut hasher = StableHasher::new();\n-            scope.hash_stable(hcx, &mut hasher);\n-            let stable: u64 = hasher.finish();\n-            stable\n-        });\n+        parent_map.hash_stable(hcx, hasher);\n+        var_map.hash_stable(hcx, hasher);\n+        destruction_scopes.hash_stable(hcx, hasher);\n+        rvalue_scopes.hash_stable(hcx, hasher);\n+        closure_tree.hash_stable(hcx, hasher);\n+        yield_in_scope.hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "6895e0e8a34562ddca4286ff02de9ed10ef409fb", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=67c84e05e72931587e5f81a297dee95bc149bcd8", "patch": "@@ -382,20 +382,7 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for Childr\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for Graph {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n-                                          hasher: &mut StableHasher<W>) {\n-        let Graph {\n-            ref parent,\n-            ref children,\n-        } = *self;\n-\n-        ich::hash_stable_hashmap(hcx, hasher, parent, |hcx, def_id| {\n-            hcx.def_path_hash(*def_id)\n-        });\n-        ich::hash_stable_hashmap(hcx, hasher, children, |hcx, def_id| {\n-            hcx.def_path_hash(*def_id)\n-        });\n-    }\n-}\n+impl_stable_hash_for!(struct self::Graph {\n+    parent,\n+    children\n+});"}, {"sha": "0ea466a1bbcc32423e963cb0b1e78831cbeb95b3", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=67c84e05e72931587e5f81a297dee95bc149bcd8", "patch": "@@ -21,7 +21,7 @@ use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use hir::map as hir_map;\n use hir::map::DefPathHash;\n use lint::{self, Lint};\n-use ich::{self, StableHashingContext, NodeIdHashingMode};\n+use ich::{StableHashingContext, NodeIdHashingMode};\n use middle::const_val::ConstVal;\n use middle::cstore::{CrateStore, LinkMeta, EncodedMetadataHashes};\n use middle::cstore::EncodedMetadata;\n@@ -49,8 +49,8 @@ use ty::BindingMode;\n use util::nodemap::{NodeMap, NodeSet, DefIdSet, ItemLocalMap};\n use util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n-                                           StableHasherResult};\n+use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n+                                           StableHasher, StableHasherResult};\n \n use arena::{TypedArena, DroplessArena};\n use rustc_const_math::{ConstInt, ConstUsize};\n@@ -714,12 +714,12 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for Typeck\n         } = *self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            ich::hash_stable_itemlocalmap(hcx, hasher, type_dependent_defs);\n-            ich::hash_stable_itemlocalmap(hcx, hasher, node_types);\n-            ich::hash_stable_itemlocalmap(hcx, hasher, node_substs);\n-            ich::hash_stable_itemlocalmap(hcx, hasher, adjustments);\n-            ich::hash_stable_itemlocalmap(hcx, hasher, pat_binding_modes);\n-            ich::hash_stable_hashmap(hcx, hasher, upvar_capture_map, |hcx, up_var_id| {\n+            type_dependent_defs.hash_stable(hcx, hasher);\n+            node_types.hash_stable(hcx, hasher);\n+            node_substs.hash_stable(hcx, hasher);\n+            adjustments.hash_stable(hcx, hasher);\n+            pat_binding_modes.hash_stable(hcx, hasher);\n+            hash_stable_hashmap(hcx, hasher, upvar_capture_map, |up_var_id, hcx| {\n                 let ty::UpvarId {\n                     var_id,\n                     closure_expr_id\n@@ -736,22 +736,19 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for Typeck\n                     krate: local_id_root.krate,\n                     index: closure_expr_id,\n                 };\n-                ((hcx.def_path_hash(var_owner_def_id), var_id.local_id),\n-                 hcx.def_path_hash(closure_def_id))\n-            });\n-\n-            ich::hash_stable_itemlocalmap(hcx, hasher, closure_tys);\n-            ich::hash_stable_itemlocalmap(hcx, hasher, closure_kinds);\n-            ich::hash_stable_itemlocalmap(hcx, hasher, liberated_fn_sigs);\n-            ich::hash_stable_itemlocalmap(hcx, hasher, fru_field_types);\n-            ich::hash_stable_itemlocalmap(hcx, hasher, cast_kinds);\n-            ich::hash_stable_itemlocalmap(hcx, hasher, generator_sigs);\n-            ich::hash_stable_itemlocalmap(hcx, hasher, generator_interiors);\n-\n-            ich::hash_stable_hashset(hcx, hasher, used_trait_imports, |hcx, def_id| {\n-                hcx.def_path_hash(*def_id)\n+                (hcx.tcx().def_path_hash(var_owner_def_id),\n+                 var_id.local_id,\n+                 hcx.tcx().def_path_hash(closure_def_id))\n             });\n \n+            closure_tys.hash_stable(hcx, hasher);\n+            closure_kinds.hash_stable(hcx, hasher);\n+            liberated_fn_sigs.hash_stable(hcx, hasher);\n+            fru_field_types.hash_stable(hcx, hasher);\n+            cast_kinds.hash_stable(hcx, hasher);\n+            generator_sigs.hash_stable(hcx, hasher);\n+            generator_interiors.hash_stable(hcx, hasher);\n+            used_trait_imports.hash_stable(hcx, hasher);\n             tainted_by_errors.hash_stable(hcx, hasher);\n             free_region_map.hash_stable(hcx, hasher);\n         })"}, {"sha": "e18c1969a91ccc9cbc01a89032c39c0750946fda", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c84e05e72931587e5f81a297dee95bc149bcd8/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=67c84e05e72931587e5f81a297dee95bc149bcd8", "patch": "@@ -289,16 +289,33 @@ impl<T1: HashStable<CTX>, CTX> HashStable<CTX> for (T1,) {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           ctx: &mut CTX,\n                                           hasher: &mut StableHasher<W>) {\n-        self.0.hash_stable(ctx, hasher);\n+        let (ref _0,) = *self;\n+        _0.hash_stable(ctx, hasher);\n     }\n }\n \n impl<T1: HashStable<CTX>, T2: HashStable<CTX>, CTX> HashStable<CTX> for (T1, T2) {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           ctx: &mut CTX,\n                                           hasher: &mut StableHasher<W>) {\n-        self.0.hash_stable(ctx, hasher);\n-        self.1.hash_stable(ctx, hasher);\n+        let (ref _0, ref _1) = *self;\n+        _0.hash_stable(ctx, hasher);\n+        _1.hash_stable(ctx, hasher);\n+    }\n+}\n+\n+impl<T1, T2, T3, CTX> HashStable<CTX> for (T1, T2, T3)\n+     where T1: HashStable<CTX>,\n+           T2: HashStable<CTX>,\n+           T3: HashStable<CTX>,\n+{\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          ctx: &mut CTX,\n+                                          hasher: &mut StableHasher<W>) {\n+        let (ref _0, ref _1, ref _2) = *self;\n+        _0.hash_stable(ctx, hasher);\n+        _1.hash_stable(ctx, hasher);\n+        _2.hash_stable(ctx, hasher);\n     }\n }\n \n@@ -462,14 +479,11 @@ impl<K, V, R, HCX> HashStable<HCX> for ::std::collections::HashMap<K, V, R>\n           V: HashStable<HCX>,\n           R: BuildHasher,\n {\n+    #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut HCX,\n                                           hasher: &mut StableHasher<W>) {\n-        let mut entries: Vec<_> = self.iter()\n-                                      .map(|(k, v)| (k.to_stable_hash_key(hcx), v))\n-                                      .collect();\n-        entries.sort_unstable_by(|&(ref sk1, _), &(ref sk2, _)| sk1.cmp(sk2));\n-        entries.hash_stable(hcx, hasher);\n+        hash_stable_hashmap(hcx, hasher, self, ToStableHashKey::to_stable_hash_key);\n     }\n }\n \n@@ -516,3 +530,23 @@ impl<K, HCX> HashStable<HCX> for ::std::collections::BTreeSet<K>\n         keys.hash_stable(hcx, hasher);\n     }\n }\n+\n+pub fn hash_stable_hashmap<HCX, K, V, R, SK, F, W>(\n+    hcx: &mut HCX,\n+    hasher: &mut StableHasher<W>,\n+    map: &::std::collections::HashMap<K, V, R>,\n+    to_stable_hash_key: F)\n+    where K: Eq + Hash,\n+          V: HashStable<HCX>,\n+          R: BuildHasher,\n+          SK: HashStable<HCX> + Ord + Clone,\n+          F: Fn(&K, &HCX) -> SK,\n+          W: StableHasherResult,\n+{\n+    let mut entries: Vec<_> = map.iter()\n+                                  .map(|(k, v)| (to_stable_hash_key(k, hcx), v))\n+                                  .collect();\n+    entries.sort_unstable_by(|&(ref sk1, _), &(ref sk2, _)| sk1.cmp(sk2));\n+    entries.hash_stable(hcx, hasher);\n+}\n+"}]}