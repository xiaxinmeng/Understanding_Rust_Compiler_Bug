{"sha": "b73dbbfbf2cad646eb3f8e3342a1c390a874dc53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3M2RiYmZiZjJjYWQ2NDZlYjNmOGUzMzQyYTFjMzkwYTg3NGRjNTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-02T09:50:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-02T09:53:07Z"}, "message": "Add missing members generates indented blocks", "tree": {"sha": "34ca972a836d004c9e0b79960c062400f49d1459", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34ca972a836d004c9e0b79960c062400f49d1459"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b73dbbfbf2cad646eb3f8e3342a1c390a874dc53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b73dbbfbf2cad646eb3f8e3342a1c390a874dc53", "html_url": "https://github.com/rust-lang/rust/commit/b73dbbfbf2cad646eb3f8e3342a1c390a874dc53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b73dbbfbf2cad646eb3f8e3342a1c390a874dc53/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b58dfd24f1bf1f30128fa9a78368b4d430e10e97", "url": "https://api.github.com/repos/rust-lang/rust/commits/b58dfd24f1bf1f30128fa9a78368b4d430e10e97", "html_url": "https://github.com/rust-lang/rust/commit/b58dfd24f1bf1f30128fa9a78368b4d430e10e97"}], "stats": {"total": 210, "additions": 122, "deletions": 88}, "files": [{"sha": "d6a34b609ed513528e1f4c54980972c1635a702e", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b73dbbfbf2cad646eb3f8e3342a1c390a874dc53/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73dbbfbf2cad646eb3f8e3342a1c390a874dc53/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=b73dbbfbf2cad646eb3f8e3342a1c390a874dc53", "patch": "@@ -180,7 +180,9 @@ trait Trait<T> {\n }\n \n impl Trait<u32> for () {\n-    fn foo(&self) -> u32 { todo!() }\n+    fn foo(&self) -> u32 {\n+        todo!()\n+    }\n \n }\n \"#####,"}, {"sha": "e466c9a86d87ae6b8a3003af9a5865278d6a524f", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 116, "deletions": 78, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/b73dbbfbf2cad646eb3f8e3342a1c390a874dc53/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73dbbfbf2cad646eb3f8e3342a1c390a874dc53/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=b73dbbfbf2cad646eb3f8e3342a1c390a874dc53", "patch": "@@ -1,6 +1,10 @@\n use hir::HasSource;\n use ra_syntax::{\n-    ast::{self, edit, make, AstNode, NameOwner},\n+    ast::{\n+        self,\n+        edit::{self, IndentLevel},\n+        make, AstNode, NameOwner,\n+    },\n     SmolStr,\n };\n \n@@ -40,7 +44,9 @@ enum AddMissingImplMembersMode {\n // }\n //\n // impl Trait<u32> for () {\n-//     fn foo(&self) -> u32 { todo!() }\n+//     fn foo(&self) -> u32 {\n+//         todo!()\n+//     }\n //\n // }\n // ```\n@@ -165,7 +171,9 @@ fn add_missing_impl_members_inner(\n \n fn add_body(fn_def: ast::FnDef) -> ast::FnDef {\n     if fn_def.body().is_none() {\n-        fn_def.with_body(make::block_from_expr(make::expr_todo()))\n+        let body = make::block_expr(None, Some(make::expr_todo()));\n+        let body = IndentLevel(1).increase_indent(body);\n+        fn_def.with_body(body)\n     } else {\n         fn_def\n     }\n@@ -181,7 +189,7 @@ mod tests {\n     fn test_add_missing_impl_members() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo {\n     type Output;\n \n@@ -197,8 +205,8 @@ struct S;\n impl Foo for S {\n     fn bar(&self) {}\n <|>\n-}\",\n-            \"\n+}\"#,\n+            r#\"\n trait Foo {\n     type Output;\n \n@@ -215,18 +223,22 @@ impl Foo for S {\n     fn bar(&self) {}\n     <|>type Output;\n     const CONST: usize = 42;\n-    fn foo(&self) { todo!() }\n-    fn baz(&self) { todo!() }\n+    fn foo(&self) {\n+        todo!()\n+    }\n+    fn baz(&self) {\n+        todo!()\n+    }\n \n-}\",\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_copied_overriden_members() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo {\n     fn foo(&self);\n     fn bar(&self) -> bool { true }\n@@ -238,8 +250,8 @@ struct S;\n impl Foo for S {\n     fn bar(&self) {}\n <|>\n-}\",\n-            \"\n+}\"#,\n+            r#\"\n trait Foo {\n     fn foo(&self);\n     fn bar(&self) -> bool { true }\n@@ -250,146 +262,162 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n-    <|>fn foo(&self) { todo!() }\n+    <|>fn foo(&self) {\n+        todo!()\n+    }\n \n-}\",\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_empty_impl_def() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo { fn foo(&self); }\n struct S;\n-impl Foo for S { <|> }\",\n-            \"\n+impl Foo for S { <|> }\"#,\n+            r#\"\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    <|>fn foo(&self) { todo!() }\n-}\",\n+    <|>fn foo(&self) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn fill_in_type_params_1() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n-impl Foo<u32> for S { <|> }\",\n-            \"\n+impl Foo<u32> for S { <|> }\"#,\n+            r#\"\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n impl Foo<u32> for S {\n-    <|>fn foo(&self, t: u32) -> &u32 { todo!() }\n-}\",\n+    <|>fn foo(&self, t: u32) -> &u32 {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn fill_in_type_params_2() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n-impl<U> Foo<U> for S { <|> }\",\n-            \"\n+impl<U> Foo<U> for S { <|> }\"#,\n+            r#\"\n trait Foo<T> { fn foo(&self, t: T) -> &T; }\n struct S;\n impl<U> Foo<U> for S {\n-    <|>fn foo(&self, t: U) -> &U { todo!() }\n-}\",\n+    <|>fn foo(&self, t: U) -> &U {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_cursor_after_empty_impl_def() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo { fn foo(&self); }\n struct S;\n-impl Foo for S {}<|>\",\n-            \"\n+impl Foo for S {}<|>\"#,\n+            r#\"\n trait Foo { fn foo(&self); }\n struct S;\n impl Foo for S {\n-    <|>fn foo(&self) { todo!() }\n-}\",\n+    <|>fn foo(&self) {\n+        todo!()\n+    }\n+}\"#,\n         )\n     }\n \n     #[test]\n     fn test_qualify_path_1() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     pub struct Bar;\n     trait Foo { fn foo(&self, bar: Bar); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\",\n-            \"\n+impl foo::Foo for S { <|> }\"#,\n+            r#\"\n mod foo {\n     pub struct Bar;\n     trait Foo { fn foo(&self, bar: Bar); }\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: foo::Bar) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_qualify_path_generic() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     trait Foo { fn foo(&self, bar: Bar<u32>); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\",\n-            \"\n+impl foo::Foo for S { <|> }\"#,\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     trait Foo { fn foo(&self, bar: Bar<u32>); }\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: foo::Bar<u32>) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_qualify_path_and_substitute_param() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     trait Foo<T> { fn foo(&self, bar: Bar<T>); }\n }\n struct S;\n-impl foo::Foo<u32> for S { <|> }\",\n-            \"\n+impl foo::Foo<u32> for S { <|> }\"#,\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     trait Foo<T> { fn foo(&self, bar: Bar<T>); }\n }\n struct S;\n impl foo::Foo<u32> for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: foo::Bar<u32>) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n@@ -398,122 +426,130 @@ impl foo::Foo<u32> for S {\n         // when substituting params, the substituted param should not be qualified!\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     trait Foo<T> { fn foo(&self, bar: T); }\n     pub struct Param;\n }\n struct Param;\n struct S;\n-impl foo::Foo<Param> for S { <|> }\",\n-            \"\n+impl foo::Foo<Param> for S { <|> }\"#,\n+            r#\"\n mod foo {\n     trait Foo<T> { fn foo(&self, bar: T); }\n     pub struct Param;\n }\n struct Param;\n struct S;\n impl foo::Foo<Param> for S {\n-    <|>fn foo(&self, bar: Param) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: Param) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_qualify_path_associated_item() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     impl Bar<T> { type Assoc = u32; }\n     trait Foo { fn foo(&self, bar: Bar<u32>::Assoc); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\",\n-            \"\n+impl foo::Foo for S { <|> }\"#,\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     impl Bar<T> { type Assoc = u32; }\n     trait Foo { fn foo(&self, bar: Bar<u32>::Assoc); }\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<u32>::Assoc) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: foo::Bar<u32>::Assoc) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_qualify_path_nested() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     pub struct Baz;\n     trait Foo { fn foo(&self, bar: Bar<Baz>); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\",\n-            \"\n+impl foo::Foo for S { <|> }\"#,\n+            r#\"\n mod foo {\n     pub struct Bar<T>;\n     pub struct Baz;\n     trait Foo { fn foo(&self, bar: Bar<Baz>); }\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: foo::Bar<foo::Baz>) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: foo::Bar<foo::Baz>) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_qualify_path_fn_trait_notation() {\n         check_assist(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n mod foo {\n     pub trait Fn<Args> { type Output; }\n     trait Foo { fn foo(&self, bar: dyn Fn(u32) -> i32); }\n }\n struct S;\n-impl foo::Foo for S { <|> }\",\n-            \"\n+impl foo::Foo for S { <|> }\"#,\n+            r#\"\n mod foo {\n     pub trait Fn<Args> { type Output; }\n     trait Foo { fn foo(&self, bar: dyn Fn(u32) -> i32); }\n }\n struct S;\n impl foo::Foo for S {\n-    <|>fn foo(&self, bar: dyn Fn(u32) -> i32) { todo!() }\n-}\",\n+    <|>fn foo(&self, bar: dyn Fn(u32) -> i32) {\n+        todo!()\n+    }\n+}\"#,\n         );\n     }\n \n     #[test]\n     fn test_empty_trait() {\n         check_assist_not_applicable(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo;\n struct S;\n-impl Foo for S { <|> }\",\n+impl Foo for S { <|> }\"#,\n         )\n     }\n \n     #[test]\n     fn test_ignore_unnamed_trait_members_and_default_methods() {\n         check_assist_not_applicable(\n             add_missing_impl_members,\n-            \"\n+            r#\"\n trait Foo {\n     fn (arg: u32);\n     fn valid(some: u32) -> bool { false }\n }\n struct S;\n-impl Foo for S { <|> }\",\n+impl Foo for S { <|> }\"#,\n         )\n     }\n \n@@ -544,7 +580,9 @@ trait Foo {\n struct S;\n impl Foo for S {\n     <|>type Output;\n-    fn foo(&self) { todo!() }\n+    fn foo(&self) {\n+        todo!()\n+    }\n }\"#,\n         )\n     }\n@@ -553,7 +591,7 @@ impl Foo for S {\n     fn test_default_methods() {\n         check_assist(\n             add_missing_default_members,\n-            \"\n+            r#\"\n trait Foo {\n     type Output;\n \n@@ -563,8 +601,8 @@ trait Foo {\n     fn foo(some: u32) -> bool;\n }\n struct S;\n-impl Foo for S { <|> }\",\n-            \"\n+impl Foo for S { <|> }\"#,\n+            r#\"\n trait Foo {\n     type Output;\n \n@@ -576,7 +614,7 @@ trait Foo {\n struct S;\n impl Foo for S {\n     <|>fn valid(some: u32) -> bool { false }\n-}\",\n+}\"#,\n         )\n     }\n }"}, {"sha": "7b17fef4928ebcbd535dd6bb4078978b8f305fc1", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b73dbbfbf2cad646eb3f8e3342a1c390a874dc53/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b73dbbfbf2cad646eb3f8e3342a1c390a874dc53/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=b73dbbfbf2cad646eb3f8e3342a1c390a874dc53", "patch": "@@ -82,14 +82,6 @@ pub fn block_expr(\n     ast_from_text(&format!(\"fn f() {}\", buf))\n }\n \n-pub fn block_from_expr(e: ast::Expr) -> ast::BlockExpr {\n-    return from_text(&format!(\"{{ {} }}\", e));\n-\n-    fn from_text(text: &str) -> ast::BlockExpr {\n-        ast_from_text(&format!(\"fn f() {}\", text))\n-    }\n-}\n-\n pub fn expr_unit() -> ast::Expr {\n     expr_from_text(\"()\")\n }"}, {"sha": "5a83c4a98f9c95fbdb9901da23a96ede611687d0", "filename": "docs/user/assists.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b73dbbfbf2cad646eb3f8e3342a1c390a874dc53/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/b73dbbfbf2cad646eb3f8e3342a1c390a874dc53/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=b73dbbfbf2cad646eb3f8e3342a1c390a874dc53", "patch": "@@ -175,7 +175,9 @@ trait Trait<T> {\n }\n \n impl Trait<u32> for () {\n-    fn foo(&self) -> u32 { todo!() }\n+    fn foo(&self) -> u32 {\n+        todo!()\n+    }\n \n }\n ```"}]}