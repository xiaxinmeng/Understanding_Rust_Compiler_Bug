{"sha": "7f9953691563f30335462f55d05c8b266f7b1932", "node_id": "C_kwDOAAsO6NoAKDdmOTk1MzY5MTU2M2YzMDMzNTQ2MmY1NWQwNWM4YjI2NmY3YjE5MzI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-02-24T20:42:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-24T20:42:12Z"}, "message": "Rollup merge of #93714 - compiler-errors:can-type-impl-copy-error-span, r=jackh726\n\nbetter ObligationCause for normalization errors in `can_type_implement_copy`\n\nSome logic is needed so we can point to the field when given totally nonsense types like `struct Foo(<u32 as Iterator>::Item);`\n\nFixes #93687", "tree": {"sha": "49a7f8a281e44dde238d17a1e5b35c403bb6628d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49a7f8a281e44dde238d17a1e5b35c403bb6628d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f9953691563f30335462f55d05c8b266f7b1932", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiF+2kCRBK7hj4Ov3rIwAAtOAIAJ+tKpmAW3/tW+G9VOaSqZYD\nDDks83yA170md4hGb/griD78Aruckjootgrw1H6Q+A2hQjVEVD9UChi+/Sl3IWOg\nQEk1gExdOIiWJksi/QrmwXcRR0gPF+Y0oA4S9zeMVnvcW+p5mIZQQhtzLW0M3N21\nZYMTjRQFEcpDXoCkXghFsvx7/SsOEcFhUIlSzd+G+G7Jizw5Khg4ed9TCkyMCO1s\nFPS0L3k2mUitg91NIP76GVkEPerhscHTyvT54OrAHRu8QWvwty4HZk0jOHnTdKcV\nZ5j4Lt1Mfn0T3BvN4PrHotGxkuQMKeXSX5mENC2/owvPqP2Fs8G9IUfyBkZ8Vm0=\n=mgjx\n-----END PGP SIGNATURE-----\n", "payload": "tree 49a7f8a281e44dde238d17a1e5b35c403bb6628d\nparent 6ba167a6afa013ac75f1a898e4951c3a4921a6db\nparent ee98dc8b3bdff99591630ca225f4769201100603\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1645735332 +0100\ncommitter GitHub <noreply@github.com> 1645735332 +0100\n\nRollup merge of #93714 - compiler-errors:can-type-impl-copy-error-span, r=jackh726\n\nbetter ObligationCause for normalization errors in `can_type_implement_copy`\n\nSome logic is needed so we can point to the field when given totally nonsense types like `struct Foo(<u32 as Iterator>::Item);`\n\nFixes #93687\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9953691563f30335462f55d05c8b266f7b1932", "html_url": "https://github.com/rust-lang/rust/commit/7f9953691563f30335462f55d05c8b266f7b1932", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f9953691563f30335462f55d05c8b266f7b1932/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ba167a6afa013ac75f1a898e4951c3a4921a6db", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba167a6afa013ac75f1a898e4951c3a4921a6db", "html_url": "https://github.com/rust-lang/rust/commit/6ba167a6afa013ac75f1a898e4951c3a4921a6db"}, {"sha": "ee98dc8b3bdff99591630ca225f4769201100603", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee98dc8b3bdff99591630ca225f4769201100603", "html_url": "https://github.com/rust-lang/rust/commit/ee98dc8b3bdff99591630ca225f4769201100603"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "0a218c2d2558487a3a57dcb674435d833c9e61d6", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f9953691563f30335462f55d05c8b266f7b1932/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9953691563f30335462f55d05c8b266f7b1932/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=7f9953691563f30335462f55d05c8b266f7b1932", "patch": "@@ -51,7 +51,7 @@ use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, InnerSpan, MultiSpan, Span};\n use rustc_target::abi::VariantIdx;\n-use rustc_trait_selection::traits::misc::can_type_implement_copy;\n+use rustc_trait_selection::traits::{self, misc::can_type_implement_copy};\n \n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n@@ -764,7 +764,14 @@ impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {\n         if ty.is_copy_modulo_regions(cx.tcx.at(item.span), param_env) {\n             return;\n         }\n-        if can_type_implement_copy(cx.tcx, param_env, ty).is_ok() {\n+        if can_type_implement_copy(\n+            cx.tcx,\n+            param_env,\n+            ty,\n+            traits::ObligationCause::misc(item.span, item.hir_id()),\n+        )\n+        .is_ok()\n+        {\n             cx.struct_span_lint(MISSING_COPY_IMPLEMENTATIONS, item.span, |lint| {\n                 lint.build(\n                     \"type could implement `Copy`; consider adding `impl \\"}, {"sha": "c293708dcc9296017383fca25f247c334f6a12f1", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f9953691563f30335462f55d05c8b266f7b1932/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9953691563f30335462f55d05c8b266f7b1932/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=7f9953691563f30335462f55d05c8b266f7b1932", "patch": "@@ -20,6 +20,7 @@ pub fn can_type_implement_copy<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     self_type: Ty<'tcx>,\n+    cause: ObligationCause<'tcx>,\n ) -> Result<(), CopyImplementationError<'tcx>> {\n     // FIXME: (@jroesch) float this code up\n     tcx.infer_ctxt().enter(|infcx| {\n@@ -49,7 +50,19 @@ pub fn can_type_implement_copy<'tcx>(\n                     continue;\n                 }\n                 let span = tcx.def_span(field.did);\n-                let cause = ObligationCause::dummy_with_span(span);\n+                // FIXME(compiler-errors): This gives us better spans for bad\n+                // projection types like in issue-50480.\n+                // If the ADT has substs, point to the cause we are given.\n+                // If it does not, then this field probably doesn't normalize\n+                // to begin with, and point to the bad field's span instead.\n+                let cause = if field\n+                    .ty(tcx, traits::InternalSubsts::identity_for_item(tcx, adt.did))\n+                    .has_param_types_or_consts()\n+                {\n+                    cause.clone()\n+                } else {\n+                    ObligationCause::dummy_with_span(span)\n+                };\n                 let ctx = traits::FulfillmentContext::new();\n                 match traits::fully_normalize(&infcx, ctx, cause, param_env, ty) {\n                     Ok(ty) => {"}, {"sha": "a43f7f871167e27fb25217d874f5fb07d8bc6292", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f9953691563f30335462f55d05c8b266f7b1932/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9953691563f30335462f55d05c8b266f7b1932/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=7f9953691563f30335462f55d05c8b266f7b1932", "patch": "@@ -74,7 +74,8 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n \n     debug!(\"visit_implementation_of_copy: self_type={:?} (free)\", self_type);\n \n-    match can_type_implement_copy(tcx, param_env, self_type) {\n+    let cause = traits::ObligationCause::misc(span, impl_hir_id);\n+    match can_type_implement_copy(tcx, param_env, self_type, cause) {\n         Ok(()) => {}\n         Err(CopyImplementationError::InfrigingFields(fields)) => {\n             let item = tcx.hir().expect_item(impl_did);"}, {"sha": "a78ff046e97f976f9150f774fa754fc6baec3ff3", "filename": "src/test/ui/traits/copy-impl-cannot-normalize.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7f9953691563f30335462f55d05c8b266f7b1932/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9953691563f30335462f55d05c8b266f7b1932/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.rs?ref=7f9953691563f30335462f55d05c8b266f7b1932", "patch": "@@ -0,0 +1,25 @@\n+trait TraitFoo {\n+    type Bar;\n+}\n+\n+struct Foo<T>\n+where\n+    T: TraitFoo,\n+{\n+    inner: T::Bar,\n+}\n+\n+impl<T> Clone for Foo<T>\n+where\n+    T: TraitFoo,\n+    T::Bar: Clone,\n+{\n+    fn clone(&self) -> Self {\n+        Self { inner: self.inner.clone() }\n+    }\n+}\n+\n+impl<T> Copy for Foo<T> {}\n+//~^ ERROR the trait bound `T: TraitFoo` is not satisfied\n+\n+fn main() {}"}, {"sha": "cc540ea905a10da10d66e659b83178b237d1e05f", "filename": "src/test/ui/traits/copy-impl-cannot-normalize.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f9953691563f30335462f55d05c8b266f7b1932/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f9953691563f30335462f55d05c8b266f7b1932/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcopy-impl-cannot-normalize.stderr?ref=7f9953691563f30335462f55d05c8b266f7b1932", "patch": "@@ -0,0 +1,14 @@\n+error[E0277]: the trait bound `T: TraitFoo` is not satisfied\n+  --> $DIR/copy-impl-cannot-normalize.rs:22:1\n+   |\n+LL | impl<T> Copy for Foo<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `TraitFoo` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: TraitFoo> Copy for Foo<T> {}\n+   |       ++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d27e1383d012b7aa71e2541d79ed5a4fc28558b1", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f9953691563f30335462f55d05c8b266f7b1932/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9953691563f30335462f55d05c8b266f7b1932/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=7f9953691563f30335462f55d05c8b266f7b1932", "patch": "@@ -199,7 +199,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n                     let sugg = |diag: &mut DiagnosticBuilder<'_>| {\n                         if let ty::Adt(def, ..) = ty.kind() {\n                             if let Some(span) = cx.tcx.hir().span_if_local(def.did) {\n-                                if can_type_implement_copy(cx.tcx, cx.param_env, ty).is_ok() {\n+                                if can_type_implement_copy(cx.tcx, cx.param_env, ty, traits::ObligationCause::dummy_with_span(span)).is_ok() {\n                                     diag.span_help(span, \"consider marking this type as `Copy`\");\n                                 }\n                             }"}]}