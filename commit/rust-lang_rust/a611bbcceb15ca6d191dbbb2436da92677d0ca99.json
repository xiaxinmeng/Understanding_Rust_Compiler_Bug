{"sha": "a611bbcceb15ca6d191dbbb2436da92677d0ca99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MTFiYmNjZWIxNWNhNmQxOTFkYmJiMjQzNmRhOTI2NzdkMGNhOTk=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-02-18T02:55:28Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertaylorj@gmail.com", "date": "2017-02-18T20:43:29Z"}, "message": "Rename hir::Label to hir::Destination", "tree": {"sha": "af2d3d6741de53e90a43ab7f83545e18965b1b9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af2d3d6741de53e90a43ab7f83545e18965b1b9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a611bbcceb15ca6d191dbbb2436da92677d0ca99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a611bbcceb15ca6d191dbbb2436da92677d0ca99", "html_url": "https://github.com/rust-lang/rust/commit/a611bbcceb15ca6d191dbbb2436da92677d0ca99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a611bbcceb15ca6d191dbbb2436da92677d0ca99/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56e519dd5c8df832dfb78a180ac771de3649b12f", "url": "https://api.github.com/repos/rust-lang/rust/commits/56e519dd5c8df832dfb78a180ac771de3649b12f", "html_url": "https://github.com/rust-lang/rust/commit/56e519dd5c8df832dfb78a180ac771de3649b12f"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "122543aee40eca45178cf1b84ab1cf77d0bb269c", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a611bbcceb15ca6d191dbbb2436da92677d0ca99/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a611bbcceb15ca6d191dbbb2436da92677d0ca99/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=a611bbcceb15ca6d191dbbb2436da92677d0ca99", "patch": "@@ -303,17 +303,17 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.add_unreachable_node()\n             }\n \n-            hir::ExprBreak(label, ref opt_expr) => {\n+            hir::ExprBreak(destination, ref opt_expr) => {\n                 let v = self.opt_expr(opt_expr, pred);\n-                let loop_scope = self.find_scope(expr, label);\n+                let loop_scope = self.find_scope(expr, destination);\n                 let b = self.add_ast_node(expr.id, &[v]);\n                 self.add_exiting_edge(expr, b,\n                                       loop_scope, loop_scope.break_index);\n                 self.add_unreachable_node()\n             }\n \n-            hir::ExprAgain(label) => {\n-                let loop_scope = self.find_scope(expr, label);\n+            hir::ExprAgain(destination) => {\n+                let loop_scope = self.find_scope(expr, destination);\n                 let a = self.add_ast_node(expr.id, &[pred]);\n                 self.add_exiting_edge(expr, a,\n                                       loop_scope, loop_scope.continue_index);\n@@ -588,9 +588,9 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n \n     fn find_scope(&self,\n                   expr: &hir::Expr,\n-                  label: hir::Label) -> LoopScope {\n+                  destination: hir::Destination) -> LoopScope {\n \n-        match label.loop_id.into() {\n+        match destination.loop_id.into() {\n             Ok(loop_id) => {\n                 for l in &self.loop_scopes {\n                     if l.loop_id == loop_id {"}, {"sha": "efb351e0325572dcce3a7912254854fc3c14c76e", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a611bbcceb15ca6d191dbbb2436da92677d0ca99/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a611bbcceb15ca6d191dbbb2436da92677d0ca99/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=a611bbcceb15ca6d191dbbb2436da92677d0ca99", "patch": "@@ -326,17 +326,19 @@ impl<'a> LoweringContext<'a> {\n         o_id.map(|sp_ident| respan(sp_ident.span, sp_ident.node.name))\n     }\n \n-    fn lower_label(&mut self, label: Option<(NodeId, Spanned<Ident>)>) -> hir::Label {\n-        match label {\n-            Some((id, label_ident)) => hir::Label {\n+    fn lower_destination(&mut self, destination: Option<(NodeId, Spanned<Ident>)>)\n+        -> hir::Destination\n+    {\n+        match destination {\n+            Some((id, label_ident)) => hir::Destination {\n                 ident: Some(label_ident),\n                 loop_id: if let Def::Label(loop_id) = self.expect_full_def(id) {\n                     hir::LoopIdResult::Ok(loop_id)\n                 } else {\n                     hir::LoopIdResult::Err(hir::LoopIdError::UnresolvedLabel)\n                 }\n             },\n-            None => hir::Label {\n+            None => hir::Destination {\n                 ident: None,\n                 loop_id: self.loop_scopes.last().map(|innermost_loop_id| Ok(*innermost_loop_id))\n                             .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope)).into()\n@@ -1729,12 +1731,12 @@ impl<'a> LoweringContext<'a> {\n                 }\n                 ExprKind::Break(opt_ident, ref opt_expr) => {\n                     let label_result = if self.is_in_loop_condition && opt_ident.is_none() {\n-                        hir::Label {\n+                        hir::Destination {\n                             ident: opt_ident,\n                             loop_id: Err(hir::LoopIdError::UnlabeledCfInWhileCondition).into(),\n                         }\n                     } else {\n-                        self.lower_label(opt_ident.map(|ident| (e.id, ident)))\n+                        self.lower_destination(opt_ident.map(|ident| (e.id, ident)))\n                     };\n                     hir::ExprBreak(\n                             label_result,\n@@ -1743,13 +1745,13 @@ impl<'a> LoweringContext<'a> {\n                 ExprKind::Continue(opt_ident) =>\n                     hir::ExprAgain(\n                         if self.is_in_loop_condition && opt_ident.is_none() {\n-                            hir::Label {\n+                            hir::Destination {\n                                 ident: opt_ident,\n                                 loop_id: Err(\n                                     hir::LoopIdError::UnlabeledCfInWhileCondition).into(),\n                             }\n                         } else {\n-                            self.lower_label(opt_ident.map( | ident| (e.id, ident)))\n+                            self.lower_destination(opt_ident.map( |ident| (e.id, ident)))\n                         }),\n                 ExprKind::Ret(ref e) => hir::ExprRet(e.as_ref().map(|x| P(self.lower_expr(x)))),\n                 ExprKind::InlineAsm(ref asm) => {\n@@ -2244,7 +2246,7 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn expr_break(&mut self, span: Span, attrs: ThinVec<Attribute>) -> P<hir::Expr> {\n-        let expr_break = hir::ExprBreak(self.lower_label(None), None);\n+        let expr_break = hir::ExprBreak(self.lower_destination(None), None);\n         P(self.expr(span, expr_break, attrs))\n     }\n "}, {"sha": "e8c5f2447cd6f5a15ffd9e62b4a267f2b798e16a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a611bbcceb15ca6d191dbbb2436da92677d0ca99/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a611bbcceb15ca6d191dbbb2436da92677d0ca99/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a611bbcceb15ca6d191dbbb2436da92677d0ca99", "patch": "@@ -959,9 +959,9 @@ pub enum Expr_ {\n     /// A referencing operation (`&a` or `&mut a`)\n     ExprAddrOf(Mutability, P<Expr>),\n     /// A `break`, with an optional label to break\n-    ExprBreak(Label, Option<P<Expr>>),\n+    ExprBreak(Destination, Option<P<Expr>>),\n     /// A `continue`, with an optional label\n-    ExprAgain(Label),\n+    ExprAgain(Destination),\n     /// A `return`, with an optional value to be returned\n     ExprRet(Option<P<Expr>>),\n \n@@ -1073,7 +1073,7 @@ impl From<Result<NodeId, LoopIdError>> for LoopIdResult {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub struct Label {\n+pub struct Destination {\n     // This is `Some(_)` iff there is an explicit user-specified `label\n     pub ident: Option<Spanned<Ident>>,\n "}]}