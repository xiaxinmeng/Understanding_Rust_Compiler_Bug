{"sha": "2d266032190476df30a673622498a1519f1ef86d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMjY2MDMyMTkwNDc2ZGYzMGE2NzM2MjI0OThhMTUxOWYxZWY4NmQ=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-09-06T16:38:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-06T16:38:02Z"}, "message": "Rollup merge of #36263 - apasel422:scoped, r=steveklabnik\n\nClean up thread-local storage docs\n\n`std` no longer contains an implementation of scoped TLS.\n\nr? @steveklabnik", "tree": {"sha": "daeee2f432e32f22b7fd3b9ce5865d365b62b4ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daeee2f432e32f22b7fd3b9ce5865d365b62b4ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d266032190476df30a673622498a1519f1ef86d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d266032190476df30a673622498a1519f1ef86d", "html_url": "https://github.com/rust-lang/rust/commit/2d266032190476df30a673622498a1519f1ef86d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d266032190476df30a673622498a1519f1ef86d/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f5f8b865da393565c892a4cd4f3d111416e17a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f5f8b865da393565c892a4cd4f3d111416e17a", "html_url": "https://github.com/rust-lang/rust/commit/b5f5f8b865da393565c892a4cd4f3d111416e17a"}, {"sha": "8d3fd03855c597ebaf81d727bae76217237f0a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d3fd03855c597ebaf81d727bae76217237f0a3f", "html_url": "https://github.com/rust-lang/rust/commit/8d3fd03855c597ebaf81d727bae76217237f0a3f"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "d8e021bb04ff9d9aeaead09365b762e20c7401cf", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2d266032190476df30a673622498a1519f1ef86d/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d266032190476df30a673622498a1519f1ef86d/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=2d266032190476df30a673622498a1519f1ef86d", "patch": "@@ -135,29 +135,24 @@\n //!\n //! ## Thread-local storage\n //!\n-//! This module also provides an implementation of thread local storage for Rust\n-//! programs. Thread local storage is a method of storing data into a global\n-//! variable which each thread in the program will have its own copy of.\n+//! This module also provides an implementation of thread-local storage for Rust\n+//! programs. Thread-local storage is a method of storing data into a global\n+//! variable that each thread in the program will have its own copy of.\n //! Threads do not share this data, so accesses do not need to be synchronized.\n //!\n-//! At a high level, this module provides two variants of storage:\n-//!\n-//! * Owned thread-local storage. This is a type of thread local key which\n-//!   owns the value that it contains, and will destroy the value when the\n-//!   thread exits. This variant is created with the `thread_local!` macro and\n-//!   can contain any value which is `'static` (no borrowed pointers).\n-//!\n-//! * Scoped thread-local storage. This type of key is used to store a reference\n-//!   to a value into local storage temporarily for the scope of a function\n-//!   call. There are no restrictions on what types of values can be placed\n-//!   into this key.\n-//!\n-//! Both forms of thread local storage provide an accessor function, `with`,\n-//! which will yield a shared reference to the value to the specified\n-//! closure. Thread-local keys only allow shared access to values as there is no\n-//! way to guarantee uniqueness if a mutable borrow was allowed. Most values\n+//! A thread-local key owns the value it contains and will destroy the value when the\n+//! thread exits. It is created with the [`thread_local!`] macro and can contain any\n+//! value that is `'static` (no borrowed pointers). It provides an accessor function,\n+//! [`with`], that yields a shared reference to the value to the specified\n+//! closure. Thread-local keys allow only shared access to values, as there would be no\n+//! way to guarantee uniqueness if mutable borrows were allowed. Most values\n //! will want to make use of some form of **interior mutability** through the\n-//! `Cell` or `RefCell` types.\n+//! [`Cell`] or [`RefCell`] types.\n+//!\n+//! [`Cell`]: ../cell/struct.Cell.html\n+//! [`RefCell`]: ../cell/struct.RefCell.html\n+//! [`thread_local!`]: ../macro.thread_local!.html\n+//! [`with`]: struct.LocalKey.html#method.with\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}