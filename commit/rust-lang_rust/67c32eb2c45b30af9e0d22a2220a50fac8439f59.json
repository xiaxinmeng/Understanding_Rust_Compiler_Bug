{"sha": "67c32eb2c45b30af9e0d22a2220a50fac8439f59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YzMyZWIyYzQ1YjMwYWY5ZTBkMjJhMjIyMGE1MGZhYzg0MzlmNTk=", "commit": {"author": {"name": "Wayne Warren", "email": "wayne.warren.s@gmail.com", "date": "2018-11-21T01:57:53Z"}, "committer": {"name": "Wayne Warren", "email": "wayne.warren.s@gmail.com", "date": "2018-11-21T13:52:02Z"}, "message": "Update trivially_copy_pass_by_ref with Trait examples", "tree": {"sha": "54b7acb68f103361d2cb92fd038224779de5b7db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b7acb68f103361d2cb92fd038224779de5b7db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67c32eb2c45b30af9e0d22a2220a50fac8439f59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67c32eb2c45b30af9e0d22a2220a50fac8439f59", "html_url": "https://github.com/rust-lang/rust/commit/67c32eb2c45b30af9e0d22a2220a50fac8439f59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67c32eb2c45b30af9e0d22a2220a50fac8439f59/comments", "author": {"login": "waynr", "id": 1441126, "node_id": "MDQ6VXNlcjE0NDExMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1441126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/waynr", "html_url": "https://github.com/waynr", "followers_url": "https://api.github.com/users/waynr/followers", "following_url": "https://api.github.com/users/waynr/following{/other_user}", "gists_url": "https://api.github.com/users/waynr/gists{/gist_id}", "starred_url": "https://api.github.com/users/waynr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/waynr/subscriptions", "organizations_url": "https://api.github.com/users/waynr/orgs", "repos_url": "https://api.github.com/users/waynr/repos", "events_url": "https://api.github.com/users/waynr/events{/privacy}", "received_events_url": "https://api.github.com/users/waynr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "waynr", "id": 1441126, "node_id": "MDQ6VXNlcjE0NDExMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1441126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/waynr", "html_url": "https://github.com/waynr", "followers_url": "https://api.github.com/users/waynr/followers", "following_url": "https://api.github.com/users/waynr/following{/other_user}", "gists_url": "https://api.github.com/users/waynr/gists{/gist_id}", "starred_url": "https://api.github.com/users/waynr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/waynr/subscriptions", "organizations_url": "https://api.github.com/users/waynr/orgs", "repos_url": "https://api.github.com/users/waynr/repos", "events_url": "https://api.github.com/users/waynr/events{/privacy}", "received_events_url": "https://api.github.com/users/waynr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70ca0523975596409210e0bf41d21bc48a54d4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/70ca0523975596409210e0bf41d21bc48a54d4ec", "html_url": "https://github.com/rust-lang/rust/commit/70ca0523975596409210e0bf41d21bc48a54d4ec"}], "stats": {"total": 71, "additions": 45, "deletions": 26}, "files": [{"sha": "2a0dc22bfef30705af7142772320dbfacfc497e2", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/67c32eb2c45b30af9e0d22a2220a50fac8439f59/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67c32eb2c45b30af9e0d22a2220a50fac8439f59/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=67c32eb2c45b30af9e0d22a2220a50fac8439f59", "patch": "@@ -18,6 +18,11 @@ struct Foo(u32);\n #[derive(Copy, Clone)]\n struct Bar([u8; 24]);\n \n+#[derive(Copy, Clone)]\n+pub struct Color {\n+    pub r: u8, pub g: u8, pub b: u8, pub a: u8,\n+}\n+\n struct FooRef<'a> {\n     foo: &'a Foo,\n }\n@@ -80,6 +85,20 @@ impl Bar {\n     }\n }\n \n+trait MyTrait {\n+    fn trait_method(&self, _foo: &Foo);\n+}\n+\n+pub trait MyTrait2 {\n+    fn trait_method2(&self, _color: &Color);\n+}\n+\n+impl MyTrait for Foo {\n+    fn trait_method(&self, _foo: &Foo) {\n+        unimplemented!()\n+    }\n+}\n+\n fn main() {\n     let (mut foo, bar) = (Foo(0), Bar([0; 24]));\n     let (mut a, b, c, x, y, z) = (0, 0, Bar([0; 24]), 0, Foo(0), 0);"}, {"sha": "d3610c10ef8aa6b4b3c34e94638bf3f434d3e25d", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/67c32eb2c45b30af9e0d22a2220a50fac8439f59/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67c32eb2c45b30af9e0d22a2220a50fac8439f59/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=67c32eb2c45b30af9e0d22a2220a50fac8439f59", "patch": "@@ -1,81 +1,81 @@\n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:52:11\n+  --> $DIR/trivially_copy_pass_by_ref.rs:57:11\n    |\n-52 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+57 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |           ^^^^ help: consider passing by value instead: `u32`\n    |\n    = note: `-D clippy::trivially-copy-pass-by-ref` implied by `-D warnings`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:52:20\n+  --> $DIR/trivially_copy_pass_by_ref.rs:57:20\n    |\n-52 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+57 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:52:29\n+  --> $DIR/trivially_copy_pass_by_ref.rs:57:29\n    |\n-52 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n+57 | fn bad(x: &u32, y: &Foo, z: &Baz) {\n    |                             ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:62:12\n+  --> $DIR/trivially_copy_pass_by_ref.rs:67:12\n    |\n-62 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+67 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |            ^^^^^ help: consider passing by value instead: `self`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:62:22\n+  --> $DIR/trivially_copy_pass_by_ref.rs:67:22\n    |\n-62 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+67 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                      ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:62:31\n+  --> $DIR/trivially_copy_pass_by_ref.rs:67:31\n    |\n-62 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+67 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                               ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:62:40\n+  --> $DIR/trivially_copy_pass_by_ref.rs:67:40\n    |\n-62 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n+67 |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {\n    |                                        ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:65:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:70:16\n    |\n-65 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+70 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:65:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:70:25\n    |\n-65 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+70 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:65:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:70:34\n    |\n-65 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+70 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:79:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:84:16\n    |\n-79 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+84 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:79:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:84:25\n    |\n-79 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+84 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument is passed by reference, but would be more efficient if passed by value\n-  --> $DIR/trivially_copy_pass_by_ref.rs:79:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:84:34\n    |\n-79 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n+84 |     fn bad2(x: &u32, y: &Foo, z: &Baz) {\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: aborting due to 13 previous errors"}]}