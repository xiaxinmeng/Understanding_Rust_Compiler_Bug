{"sha": "51a29cbb23d2146322350fbfde53fe9523e554fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYTI5Y2JiMjNkMjE0NjMyMjM1MGZiZmRlNTNmZTk1MjNlNTU0ZmI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-03-19T22:01:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-19T22:01:42Z"}, "message": "Rollup merge of #83297 - oli-obk:why_bug_today_if_you_can_delay_to_tomorrow, r=petrochenkov\n\nDo not ICE on ty::Error as an error must already have been reported\n\nfixes #83253", "tree": {"sha": "147f1b291abe9114184d93bff95adb94b78fa522", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/147f1b291abe9114184d93bff95adb94b78fa522"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51a29cbb23d2146322350fbfde53fe9523e554fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVR9GCRBK7hj4Ov3rIwAAdHIIAIYeesfV86rDPLDiG9t9HItD\nCDa6Xav6iDAeLA054VTQHafsVD2jW71YKyV0L8BadS0z1+kdycXEF++Gy9Wb1AMJ\nGixu0eZgNEdWG+bhFDcdTq2p2p3v8Au4vmkfDmceIUqj4saHEyLoJ5QR1kseJ35s\nplCsNcN1ytU0l6ZeXUdfeEemHudWK3vaMhc8zciiinx7uQhmFT71g4mGyPphBijD\nkxx9sj1IWeaKZOpT0zTuGyUNsi2MGEIJAXYT8ehxBffiRXX8bc513UzezB1wDhGg\nl81gDYn6fhgw/sS2AwIwbKyKSIvcWaC04TtFzJq89o2cZjJ1JaNF+i8ZfP41Re8=\n=1HEI\n-----END PGP SIGNATURE-----\n", "payload": "tree 147f1b291abe9114184d93bff95adb94b78fa522\nparent 767b094d1e638c38725f449778bf6759349353f8\nparent 957705802ee2f255ec57e42fe60a59a60e56a425\nauthor Dylan DPC <dylan.dpc@gmail.com> 1616191302 +0100\ncommitter GitHub <noreply@github.com> 1616191302 +0100\n\nRollup merge of #83297 - oli-obk:why_bug_today_if_you_can_delay_to_tomorrow, r=petrochenkov\n\nDo not ICE on ty::Error as an error must already have been reported\n\nfixes #83253\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51a29cbb23d2146322350fbfde53fe9523e554fb", "html_url": "https://github.com/rust-lang/rust/commit/51a29cbb23d2146322350fbfde53fe9523e554fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51a29cbb23d2146322350fbfde53fe9523e554fb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "767b094d1e638c38725f449778bf6759349353f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/767b094d1e638c38725f449778bf6759349353f8", "html_url": "https://github.com/rust-lang/rust/commit/767b094d1e638c38725f449778bf6759349353f8"}, {"sha": "957705802ee2f255ec57e42fe60a59a60e56a425", "url": "https://api.github.com/repos/rust-lang/rust/commits/957705802ee2f255ec57e42fe60a59a60e56a425", "html_url": "https://github.com/rust-lang/rust/commit/957705802ee2f255ec57e42fe60a59a60e56a425"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "b41bf70e88eec973cc32c59958ae1f5a6d107e57", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/51a29cbb23d2146322350fbfde53fe9523e554fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a29cbb23d2146322350fbfde53fe9523e554fb/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=51a29cbb23d2146322350fbfde53fe9523e554fb", "patch": "@@ -10,6 +10,7 @@ use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_hir as ast;\n use rustc_hir::def_id::DefId;\n+use rustc_span::DUMMY_SP;\n use rustc_target::spec::abi;\n use std::iter;\n \n@@ -499,11 +500,14 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n \n     // FIXME(oli-obk): once const generics can have generic types, this assertion\n     // will likely get triggered. Move to `normalize_erasing_regions` at that point.\n-    assert_eq!(\n-        tcx.erase_regions(a.ty),\n-        tcx.erase_regions(b.ty),\n-        \"cannot relate constants of different types\"\n-    );\n+    let a_ty = tcx.erase_regions(a.ty);\n+    let b_ty = tcx.erase_regions(b.ty);\n+    if a_ty != b_ty {\n+        relation.tcx().sess.delay_span_bug(\n+            DUMMY_SP,\n+            &format!(\"cannot relate constants of different types: {} != {}\", a_ty, b_ty),\n+        );\n+    }\n \n     let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());\n     let a = eagerly_eval(a);"}, {"sha": "4a7534e3713818de3996da38970f8908ab6c2763", "filename": "src/test/ui/const-generics/type_mismatch.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/51a29cbb23d2146322350fbfde53fe9523e554fb/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a29cbb23d2146322350fbfde53fe9523e554fb/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.rs?ref=51a29cbb23d2146322350fbfde53fe9523e554fb", "patch": "@@ -0,0 +1,9 @@\n+fn foo<const N: usize>() -> [u8; N] {\n+    bar::<N>() //~ ERROR mismatched types\n+}\n+\n+fn bar<const N: u8>() -> [u8; N] {}\n+//~^ ERROR mismatched types\n+//~| ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "f5053e4c8c8d3f348d55d25bca1812f8ac6b759e", "filename": "src/test/ui/const-generics/type_mismatch.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/51a29cbb23d2146322350fbfde53fe9523e554fb/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51a29cbb23d2146322350fbfde53fe9523e554fb/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_mismatch.stderr?ref=51a29cbb23d2146322350fbfde53fe9523e554fb", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/type_mismatch.rs:2:11\n+   |\n+LL |     bar::<N>()\n+   |           ^ expected `u8`, found `usize`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type_mismatch.rs:5:31\n+   |\n+LL | fn bar<const N: u8>() -> [u8; N] {}\n+   |                               ^ expected `usize`, found `u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type_mismatch.rs:5:26\n+   |\n+LL | fn bar<const N: u8>() -> [u8; N] {}\n+   |    ---                   ^^^^^^^ expected array `[u8; N]`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "5933701808b3ef1418f54d413eff491e3203c9a1", "filename": "src/test/ui/const-generics/type_not_in_scope.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/51a29cbb23d2146322350fbfde53fe9523e554fb/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51a29cbb23d2146322350fbfde53fe9523e554fb/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.rs?ref=51a29cbb23d2146322350fbfde53fe9523e554fb", "patch": "@@ -0,0 +1,11 @@\n+impl X {\n+    //~^ ERROR cannot find type\n+    fn getn<const N: usize>() -> [u8; N] {\n+        getn::<N>()\n+    }\n+}\n+fn getn<const N: cfg_attr>() -> [u8; N] {}\n+//~^ ERROR expected type, found built-in attribute `cfg_attr`\n+//~| ERROR mismatched types\n+\n+fn main() {}"}, {"sha": "16796acb3d2855a7d62ec7e3ed3d74ed6b5b3582", "filename": "src/test/ui/const-generics/type_not_in_scope.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/51a29cbb23d2146322350fbfde53fe9523e554fb/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51a29cbb23d2146322350fbfde53fe9523e554fb/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype_not_in_scope.stderr?ref=51a29cbb23d2146322350fbfde53fe9523e554fb", "patch": "@@ -0,0 +1,24 @@\n+error[E0412]: cannot find type `X` in this scope\n+  --> $DIR/type_not_in_scope.rs:1:6\n+   |\n+LL | impl X {\n+   |      ^ not found in this scope\n+\n+error[E0573]: expected type, found built-in attribute `cfg_attr`\n+  --> $DIR/type_not_in_scope.rs:7:18\n+   |\n+LL | fn getn<const N: cfg_attr>() -> [u8; N] {}\n+   |                  ^^^^^^^^ not a type\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type_not_in_scope.rs:7:33\n+   |\n+LL | fn getn<const N: cfg_attr>() -> [u8; N] {}\n+   |    ----                         ^^^^^^^ expected array `[u8; N]`, found `()`\n+   |    |\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0308, E0412, E0573.\n+For more information about an error, try `rustc --explain E0308`."}]}