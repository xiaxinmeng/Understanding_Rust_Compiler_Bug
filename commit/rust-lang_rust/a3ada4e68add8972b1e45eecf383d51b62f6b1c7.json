{"sha": "a3ada4e68add8972b1e45eecf383d51b62f6b1c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYWRhNGU2OGFkZDg5NzJiMWU0NWVlY2YzODNkNTFiNjJmNmIxYzc=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-30T16:11:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-02T10:25:26Z"}, "message": "Refactor CrateLocator.is_proc_macro\n\nThis also fixes a (theoretical) bug where a proc-macro may be loaded as\nplugin if it exports a symbol with the right name.", "tree": {"sha": "e99dff029b56181630f34a84781e6d680f3e992b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e99dff029b56181630f34a84781e6d680f3e992b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3ada4e68add8972b1e45eecf383d51b62f6b1c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ada4e68add8972b1e45eecf383d51b62f6b1c7", "html_url": "https://github.com/rust-lang/rust/commit/a3ada4e68add8972b1e45eecf383d51b62f6b1c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3ada4e68add8972b1e45eecf383d51b62f6b1c7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f35f66796acc8711ccb844afe951aef29cfbaad", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f35f66796acc8711ccb844afe951aef29cfbaad", "html_url": "https://github.com/rust-lang/rust/commit/4f35f66796acc8711ccb844afe951aef29cfbaad"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "5968fc258dc60a64abe46acb426455737c2d6b45", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3ada4e68add8972b1e45eecf383d51b62f6b1c7/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3ada4e68add8972b1e45eecf383d51b62f6b1c7/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=a3ada4e68add8972b1e45eecf383d51b62f6b1c7", "patch": "@@ -459,7 +459,7 @@ impl<'a> CrateLoader<'a> {\n         let mut proc_macro_locator = locator.clone();\n \n         // Try to load a proc macro\n-        proc_macro_locator.is_proc_macro = Some(true);\n+        proc_macro_locator.is_proc_macro = true;\n \n         // Load the proc macro crate for the target\n         let (locator, target_result) = if self.sess.opts.debugging_opts.dual_proc_macros {\n@@ -482,7 +482,7 @@ impl<'a> CrateLoader<'a> {\n         // Load the proc macro crate for the host\n \n         locator.reset();\n-        locator.is_proc_macro = Some(true);\n+        locator.is_proc_macro = true;\n         locator.target = &self.sess.host;\n         locator.triple = TargetTriple::from_triple(config::host_triple());\n         locator.filesearch = self.sess.host_filesearch(path_kind);\n@@ -556,7 +556,6 @@ impl<'a> CrateLoader<'a> {\n                 false, // is_host\n                 path_kind,\n                 root,\n-                Some(false), // is_proc_macro\n             );\n \n             match self.load(&mut locator)? {\n@@ -605,7 +604,7 @@ impl<'a> CrateLoader<'a> {\n         // FIXME: why is this condition necessary? It was adding in #33625 but I\n         // don't know why and the original author doesn't remember ...\n         let can_reuse_cratenum =\n-            locator.triple == self.sess.opts.target_triple || locator.is_proc_macro == Some(true);\n+            locator.triple == self.sess.opts.target_triple || locator.is_proc_macro;\n         Ok(Some(if can_reuse_cratenum {\n             let mut result = LoadResult::Loaded(library);\n             self.cstore.iter_crate_data(|cnum, data| {"}, {"sha": "75efad22b5d1ba2b07508e0250371733feeb1abb", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a3ada4e68add8972b1e45eecf383d51b62f6b1c7/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3ada4e68add8972b1e45eecf383d51b62f6b1c7/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=a3ada4e68add8972b1e45eecf383d51b62f6b1c7", "patch": "@@ -254,7 +254,7 @@ crate struct CrateLocator<'a> {\n     pub triple: TargetTriple,\n     pub filesearch: FileSearch<'a>,\n     root: Option<&'a CratePaths>,\n-    pub is_proc_macro: Option<bool>,\n+    pub is_proc_macro: bool,\n \n     // Mutable in-progress state or output.\n     rejected_via_hash: Vec<CrateMismatch>,\n@@ -304,7 +304,6 @@ impl<'a> CrateLocator<'a> {\n         is_host: bool,\n         path_kind: PathKind,\n         root: Option<&'a CratePaths>,\n-        is_proc_macro: Option<bool>,\n     ) -> CrateLocator<'a> {\n         // The all loop is because `--crate-type=rlib --crate-type=rlib` is\n         // legal and produces both inside this type.\n@@ -349,7 +348,7 @@ impl<'a> CrateLocator<'a> {\n                 sess.target_filesearch(path_kind)\n             },\n             root,\n-            is_proc_macro,\n+            is_proc_macro: false,\n             rejected_via_hash: Vec::new(),\n             rejected_via_triple: Vec::new(),\n             rejected_via_kind: Vec::new(),\n@@ -491,7 +490,7 @@ impl<'a> CrateLocator<'a> {\n     }\n \n     fn needs_crate_flavor(&self, flavor: CrateFlavor) -> bool {\n-        if flavor == CrateFlavor::Dylib && self.is_proc_macro == Some(true) {\n+        if flavor == CrateFlavor::Dylib && self.is_proc_macro {\n             return true;\n         }\n \n@@ -623,15 +622,13 @@ impl<'a> CrateLocator<'a> {\n         }\n \n         let root = metadata.get_root();\n-        if let Some(expected_is_proc_macro) = self.is_proc_macro {\n-            let is_proc_macro = root.is_proc_macro_crate();\n-            if is_proc_macro != expected_is_proc_macro {\n-                info!(\n-                    \"Rejecting via proc macro: expected {} got {}\",\n-                    expected_is_proc_macro, is_proc_macro\n-                );\n-                return None;\n-            }\n+        if root.is_proc_macro_crate() != self.is_proc_macro {\n+            info!(\n+                \"Rejecting via proc macro: expected {} got {}\",\n+                self.is_proc_macro,\n+                root.is_proc_macro_crate(),\n+            );\n+            return None;\n         }\n \n         if self.exact_paths.is_empty() && self.crate_name != root.name() {\n@@ -815,7 +812,6 @@ fn find_plugin_registrar_impl<'a>(\n         true, // is_host\n         PathKind::Crate,\n         None, // root\n-        None, // is_proc_macro\n     );\n \n     match locator.maybe_load_library_crate()? {"}]}