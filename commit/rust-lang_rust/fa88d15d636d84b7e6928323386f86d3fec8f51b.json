{"sha": "fa88d15d636d84b7e6928323386f86d3fec8f51b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhODhkMTVkNjM2ZDg0YjdlNjkyODMyMzM4NmY4NmQzZmVjOGY1MWI=", "commit": {"author": {"name": "Jon Morton", "email": "jonanin@gmail.com", "date": "2012-04-02T21:13:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-02T21:21:09Z"}, "message": "remove unneeded assert, move get_task_tls to sched_loop", "tree": {"sha": "5ef2894ef4bb7fc0eb4bd96049acb30b21a697e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ef2894ef4bb7fc0eb4bd96049acb30b21a697e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa88d15d636d84b7e6928323386f86d3fec8f51b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa88d15d636d84b7e6928323386f86d3fec8f51b", "html_url": "https://github.com/rust-lang/rust/commit/fa88d15d636d84b7e6928323386f86d3fec8f51b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa88d15d636d84b7e6928323386f86d3fec8f51b/comments", "author": {"login": "jamorton", "id": 18852, "node_id": "MDQ6VXNlcjE4ODUy", "avatar_url": "https://avatars.githubusercontent.com/u/18852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamorton", "html_url": "https://github.com/jamorton", "followers_url": "https://api.github.com/users/jamorton/followers", "following_url": "https://api.github.com/users/jamorton/following{/other_user}", "gists_url": "https://api.github.com/users/jamorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamorton/subscriptions", "organizations_url": "https://api.github.com/users/jamorton/orgs", "repos_url": "https://api.github.com/users/jamorton/repos", "events_url": "https://api.github.com/users/jamorton/events{/privacy}", "received_events_url": "https://api.github.com/users/jamorton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a949eed6e6a5f2cba72663d92a0012e5439d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/33a949eed6e6a5f2cba72663d92a0012e5439d80", "html_url": "https://github.com/rust-lang/rust/commit/33a949eed6e6a5f2cba72663d92a0012e5439d80"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "9c059ac6230415c19d97f00f2c6d61fb0c20257d", "filename": "src/rt/rust_sched_loop.h", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fa88d15d636d84b7e6928323386f86d3fec8f51b/src%2Frt%2Frust_sched_loop.h", "raw_url": "https://github.com/rust-lang/rust/raw/fa88d15d636d84b7e6928323386f86d3fec8f51b/src%2Frt%2Frust_sched_loop.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.h?ref=fa88d15d636d84b7e6928323386f86d3fec8f51b", "patch": "@@ -38,6 +38,14 @@ struct rust_sched_loop\n \n     const int id;\n \n+    static bool tls_initialized;\n+\n+#ifndef __WIN32__\n+    static pthread_key_t task_key;\n+#else\n+    static DWORD task_key;\n+#endif\n+\n     context c_context;\n \n     bool should_exit;\n@@ -62,13 +70,6 @@ struct rust_sched_loop\n public:\n     rust_kernel *kernel;\n     rust_scheduler *sched;\n-    static bool tls_initialized;\n-\n-#ifndef __WIN32__\n-    static pthread_key_t task_key;\n-#else\n-    static DWORD task_key;\n-#endif\n \n     // NB: this is used to filter *runtime-originating* debug\n     // logging, on a per-scheduler basis. It's not likely what\n@@ -116,6 +117,8 @@ struct rust_sched_loop\n     void init_tls();\n     void place_task_in_tls(rust_task *task);\n \n+    static rust_task *get_task_tls();\n+\n     // Called by each task when they are ready to be destroyed\n     void release_task(rust_task *task);\n \n@@ -132,6 +135,21 @@ rust_sched_loop::get_log() {\n     return _log;\n }\n \n+inline rust_task* rust_sched_loop::get_task_tls()\n+{\n+    if (!tls_initialized)\n+        return NULL;\n+#ifdef __WIN32__\n+    rust_task *task = reinterpret_cast<rust_task *>\n+        (TlsGetValue(task_key));\n+#else\n+    rust_task *task = reinterpret_cast<rust_task *>\n+        (pthread_getspecific(task_key));\n+#endif\n+    assert(task && \"Couldn't get the task from TLS!\");\n+    return task;\n+}\n+\n // NB: Runs on the Rust stack\n inline stk_seg *\n rust_sched_loop::borrow_c_stack() {"}, {"sha": "87aeca511e9fb0d5cf5392689250faea7e454e73", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa88d15d636d84b7e6928323386f86d3fec8f51b/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/fa88d15d636d84b7e6928323386f86d3fec8f51b/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=fa88d15d636d84b7e6928323386f86d3fec8f51b", "patch": "@@ -444,30 +444,14 @@ rust_task::record_stack_limit() {\n     record_sp_limit(stk->data + LIMIT_OFFSET + RED_ZONE_SIZE);\n }\n \n-inline rust_task* __rust_get_task_tls()\n-{\n-    if (!rust_sched_loop::tls_initialized)\n-        return NULL;\n-#ifdef __WIN32__\n-    rust_task *task = reinterpret_cast<rust_task *>\n-        (TlsGetValue(rust_sched_loop::task_key));\n-#else\n-    rust_task *task = reinterpret_cast<rust_task *>\n-        (pthread_getspecific(rust_sched_loop::task_key));\n-#endif\n-    assert(task && \"Couldn't get the task from TLS!\");\n-    return task;\n-\n-}\n-\n inline rust_task* rust_get_current_task() {\n     uintptr_t sp_limit = get_sp_limit();\n \n     // FIXME (1226) - Because of a hack in upcall_call_shim_on_c_stack this\n     // value is sometimes inconveniently set to 0, so we can't use this\n     // method of retreiving the task pointer and need to fall back to TLS.\n     if (sp_limit == 0)\n-        return __rust_get_task_tls();\n+        return rust_sched_loop::get_task_tls();\n \n     // The stack pointer boundary is stored in a quickly-accessible location\n     // in the TCB. From that we can calculate the address of the stack segment\n@@ -476,11 +460,9 @@ inline rust_task* rust_get_current_task() {\n     uintptr_t seg_addr =\n         sp_limit - RED_ZONE_SIZE - LIMIT_OFFSET - sizeof(stk_seg);\n     stk_seg *stk = (stk_seg*) seg_addr;\n+\n     // Make sure we've calculated the right address\n     ::check_stack_canary(stk);\n-\n-    if (stk->task == NULL)\n-        return __rust_get_task_tls();\n     return stk->task;\n }\n "}]}