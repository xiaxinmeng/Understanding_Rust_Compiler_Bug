{"sha": "795d96d87b5ed28e090a7d9ad883b08eb926607b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NWQ5NmQ4N2I1ZWQyOGUwOTBhN2Q5YWQ4ODNiMDhlYjkyNjYwN2I=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-21T20:38:30Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-21T22:25:07Z"}, "message": "Place::as_place_ref is now Place::as_ref", "tree": {"sha": "31ceea1625f687c4ea356366a9004966bee54978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ceea1625f687c4ea356366a9004966bee54978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/795d96d87b5ed28e090a7d9ad883b08eb926607b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/795d96d87b5ed28e090a7d9ad883b08eb926607b", "html_url": "https://github.com/rust-lang/rust/commit/795d96d87b5ed28e090a7d9ad883b08eb926607b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/795d96d87b5ed28e090a7d9ad883b08eb926607b/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83dfe7b27cf2debecebedd3b038f9a1c2e05e051", "url": "https://api.github.com/repos/rust-lang/rust/commits/83dfe7b27cf2debecebedd3b038f9a1c2e05e051", "html_url": "https://github.com/rust-lang/rust/commit/83dfe7b27cf2debecebedd3b038f9a1c2e05e051"}], "stats": {"total": 186, "additions": 93, "deletions": 93}, "files": [{"sha": "75f03949d995b11f609e6369faf64f605ddab47f", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -1931,7 +1931,7 @@ impl<'tcx> Place<'tcx> {\n         iterate_over2(place_base, place_projection, &Projections::Empty, op)\n     }\n \n-    pub fn as_place_ref(&self) -> PlaceRef<'_, 'tcx> {\n+    pub fn as_ref(&self) -> PlaceRef<'_, 'tcx> {\n         PlaceRef {\n             base: &self.base,\n             projection: &self.projection,"}, {"sha": "907689541f97884ba0d60d8e662b24a56eb31070", "filename": "src/librustc_codegen_ssa/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fanalyze.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -238,7 +238,7 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n                    context: PlaceContext,\n                    location: Location) {\n         debug!(\"visit_place(place={:?}, context={:?})\", place, context);\n-        self.process_place(&place.as_place_ref(), context, location);\n+        self.process_place(&place.as_ref(), context, location);\n     }\n \n     fn visit_local(&mut self,"}, {"sha": "54afefd1a64e2a25b435f7a730f4851c4154d505", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -253,7 +253,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             PassMode::Direct(_) | PassMode::Pair(..) => {\n                 let op =\n-                    self.codegen_consume(&mut bx, &mir::Place::RETURN_PLACE.as_place_ref());\n+                    self.codegen_consume(&mut bx, &mir::Place::RETURN_PLACE.as_ref());\n                 if let Ref(llval, _, align) = op.val {\n                     bx.load(llval, align)\n                 } else {\n@@ -314,7 +314,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return\n         }\n \n-        let place = self.codegen_place(&mut bx, &location.as_place_ref());\n+        let place = self.codegen_place(&mut bx, &location.as_ref());\n         let (args1, args2);\n         let mut args = if let Some(llextra) = place.llextra {\n             args2 = [place.llval, llextra];\n@@ -1171,7 +1171,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 LocalRef::Place(place) => self.codegen_transmute_into(bx, src, place),\n                 LocalRef::UnsizedPlace(_) => bug!(\"transmute must not involve unsized locals\"),\n                 LocalRef::Operand(None) => {\n-                    let dst_layout = bx.layout_of(self.monomorphized_place_ty(&dst.as_place_ref()));\n+                    let dst_layout = bx.layout_of(self.monomorphized_place_ty(&dst.as_ref()));\n                     assert!(!dst_layout.ty.has_erasable_regions());\n                     let place = PlaceRef::alloca(bx, dst_layout, \"transmute_temp\");\n                     place.storage_live(bx);\n@@ -1186,7 +1186,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n         } else {\n-            let dst = self.codegen_place(bx, &dst.as_place_ref());\n+            let dst = self.codegen_place(bx, &dst.as_ref());\n             self.codegen_transmute_into(bx, src, dst);\n         }\n     }"}, {"sha": "302dcfcc682a3e423088ba35c6a8c219f21ef9e9", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         match *operand {\n             mir::Operand::Copy(ref place) |\n             mir::Operand::Move(ref place) => {\n-                self.codegen_consume(bx, &place.as_place_ref())\n+                self.codegen_consume(bx, &place.as_ref())\n             }\n \n             mir::Operand::Constant(ref constant) => {"}, {"sha": "202cf147f1fcbcefa8fce6fe83555acd4235399a", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -355,7 +355,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             mir::Rvalue::Ref(_, bk, ref place) => {\n-                let cg_place = self.codegen_place(&mut bx, &place.as_place_ref());\n+                let cg_place = self.codegen_place(&mut bx, &place.as_ref());\n \n                 let ty = cg_place.layout.ty;\n \n@@ -446,7 +446,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             mir::Rvalue::Discriminant(ref place) => {\n                 let discr_ty = rvalue.ty(&*self.mir, bx.tcx());\n-                let discr =  self.codegen_place(&mut bx, &place.as_place_ref())\n+                let discr =  self.codegen_place(&mut bx, &place.as_ref())\n                     .codegen_get_discr(&mut bx, discr_ty);\n                 (bx, OperandRef {\n                     val: OperandValue::Immediate(discr),\n@@ -527,7 +527,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n         }\n         // use common size calculation for non zero-sized types\n-        let cg_value = self.codegen_place(bx, &place.as_place_ref());\n+        let cg_value = self.codegen_place(bx, &place.as_ref());\n         cg_value.len(bx.cx())\n     }\n "}, {"sha": "3717be4b4175338fb1200a4f36c999ae50bd90c3", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -46,12 +46,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         }\n                     }\n                 } else {\n-                    let cg_dest = self.codegen_place(&mut bx, &place.as_place_ref());\n+                    let cg_dest = self.codegen_place(&mut bx, &place.as_ref());\n                     self.codegen_rvalue(bx, cg_dest, rvalue)\n                 }\n             }\n             mir::StatementKind::SetDiscriminant{ref place, variant_index} => {\n-                self.codegen_place(&mut bx, &place.as_place_ref())\n+                self.codegen_place(&mut bx, &place.as_ref())\n                     .codegen_set_discr(&mut bx, variant_index);\n                 bx\n             }\n@@ -73,7 +73,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n             mir::StatementKind::InlineAsm(ref asm) => {\n                 let outputs = asm.outputs.iter().map(|output| {\n-                    self.codegen_place(&mut bx, &output.as_place_ref())\n+                    self.codegen_place(&mut bx, &output.as_ref())\n                 }).collect();\n \n                 let input_vals = asm.inputs.iter()"}, {"sha": "5d0e490ebea5a0549ae4e43bfa4b9d994d66bfee", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -139,14 +139,14 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let is_partial_move = move_site_vec.iter().any(|move_site| {\n                 let move_out = self.move_data.moves[(*move_site).moi];\n                 let moved_place = &self.move_data.move_paths[move_out.path].place;\n-                used_place != moved_place.as_place_ref()\n-                    && used_place.is_prefix_of(moved_place.as_place_ref())\n+                used_place != moved_place.as_ref()\n+                    && used_place.is_prefix_of(moved_place.as_ref())\n             });\n             for move_site in &move_site_vec {\n                 let move_out = self.move_data.moves[(*move_site).moi];\n                 let moved_place = &self.move_data.move_paths[move_out.path].place;\n \n-                let move_spans = self.move_spans(moved_place.as_place_ref(), move_out.source);\n+                let move_spans = self.move_spans(moved_place.as_ref(), move_out.source);\n                 let move_span = move_spans.args_or_use();\n \n                 let move_msg = if move_spans.for_closure() {\n@@ -223,7 +223,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 let ty = place.ty(self.body, self.infcx.tcx).ty;\n                 let opt_name =\n-                    self.describe_place_with_options(place.as_place_ref(), IncludingDowncast(true));\n+                    self.describe_place_with_options(place.as_ref(), IncludingDowncast(true));\n                 let note_msg = match opt_name {\n                     Some(ref name) => format!(\"`{}`\", name),\n                     None => \"value\".to_owned(),\n@@ -275,24 +275,24 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             \"report_move_out_while_borrowed: location={:?} place={:?} span={:?} borrow={:?}\",\n             location, place, span, borrow\n         );\n-        let value_msg = match self.describe_place(place.as_place_ref()) {\n+        let value_msg = match self.describe_place(place.as_ref()) {\n             Some(name) => format!(\"`{}`\", name),\n             None => \"value\".to_owned(),\n         };\n-        let borrow_msg = match self.describe_place(borrow.borrowed_place.as_place_ref()) {\n+        let borrow_msg = match self.describe_place(borrow.borrowed_place.as_ref()) {\n             Some(name) => format!(\"`{}`\", name),\n             None => \"value\".to_owned(),\n         };\n \n         let borrow_spans = self.retrieve_borrow_spans(borrow);\n         let borrow_span = borrow_spans.args_or_use();\n \n-        let move_spans = self.move_spans(place.as_place_ref(), location);\n+        let move_spans = self.move_spans(place.as_ref(), location);\n         let span = move_spans.args_or_use();\n \n         let mut err = self.cannot_move_when_borrowed(\n             span,\n-            &self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned()),\n+            &self.describe_place(place.as_ref()).unwrap_or_else(|| \"_\".to_owned()),\n         );\n         err.span_label(borrow_span, format!(\"borrow of {} occurs here\", borrow_msg));\n         err.span_label(span, format!(\"move out of {} occurs here\", value_msg));\n@@ -326,21 +326,21 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         // Conflicting borrows are reported separately, so only check for move\n         // captures.\n-        let use_spans = self.move_spans(place.as_place_ref(), location);\n+        let use_spans = self.move_spans(place.as_ref(), location);\n         let span = use_spans.var_or_use();\n \n         let mut err = self.cannot_use_when_mutably_borrowed(\n             span,\n-            &self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned()),\n+            &self.describe_place(place.as_ref()).unwrap_or_else(|| \"_\".to_owned()),\n             borrow_span,\n-            &self.describe_place(borrow.borrowed_place.as_place_ref())\n+            &self.describe_place(borrow.borrowed_place.as_ref())\n                 .unwrap_or_else(|| \"_\".to_owned()),\n         );\n \n         borrow_spans.var_span_label(&mut err, {\n             let place = &borrow.borrowed_place;\n             let desc_place =\n-                self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned());\n+                self.describe_place(place.as_ref()).unwrap_or_else(|| \"_\".to_owned());\n \n             format!(\"borrow occurs due to use of `{}`{}\", desc_place, borrow_spans.describe())\n         });\n@@ -517,7 +517,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             );\n         } else {\n             let borrow_place = &issued_borrow.borrowed_place;\n-            let borrow_place_desc = self.describe_place(borrow_place.as_place_ref())\n+            let borrow_place_desc = self.describe_place(borrow_place.as_ref())\n                                         .unwrap_or_else(|| \"_\".to_owned());\n             issued_spans.var_span_label(\n                 &mut err,\n@@ -650,8 +650,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                                 return Some((\n                                     describe_base_place,\n-                                    describe_place(first_borrowed_place.as_place_ref()),\n-                                    describe_place(second_borrowed_place.as_place_ref()),\n+                                    describe_place(first_borrowed_place.as_ref()),\n+                                    describe_place(second_borrowed_place.as_ref()),\n                                     union_ty.to_string(),\n                                 ));\n                             }\n@@ -666,7 +666,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 // If we didn't find a field access into a union, or both places match, then\n                 // only return the description of the first place.\n                 (\n-                    describe_place(first_borrowed_place.as_place_ref()),\n+                    describe_place(first_borrowed_place.as_ref()),\n                     \"\".to_string(),\n                     \"\".to_string(),\n                     \"\".to_string(),\n@@ -697,7 +697,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         );\n \n         let drop_span = place_span.1;\n-        let root_place = self.prefixes(borrow.borrowed_place.as_place_ref(), PrefixSet::All)\n+        let root_place = self.prefixes(borrow.borrowed_place.as_ref(), PrefixSet::All)\n             .last()\n             .unwrap();\n \n@@ -730,21 +730,21 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }, borrow_span));\n \n         if let StorageDeadOrDrop::Destructor(dropped_ty) =\n-            self.classify_drop_access_kind(borrow.borrowed_place.as_place_ref())\n+            self.classify_drop_access_kind(borrow.borrowed_place.as_ref())\n         {\n             // If a borrow of path `B` conflicts with drop of `D` (and\n             // we're not in the uninteresting case where `B` is a\n             // prefix of `D`), then report this as a more interesting\n             // destructor conflict.\n-            if !borrow.borrowed_place.as_place_ref().is_prefix_of(place_span.0.as_place_ref()) {\n+            if !borrow.borrowed_place.as_ref().is_prefix_of(place_span.0.as_ref()) {\n                 self.report_borrow_conflicts_with_destructor(\n                     location, borrow, place_span, kind, dropped_ty,\n                 );\n                 return;\n             }\n         }\n \n-        let place_desc = self.describe_place(borrow.borrowed_place.as_place_ref());\n+        let place_desc = self.describe_place(borrow.borrowed_place.as_ref());\n \n         let kind_place = kind.filter(|_| place_desc.is_some()).map(|k| (k, place_span.0));\n         let explanation = self.explain_why_borrow_contains_point(location, &borrow, kind_place);\n@@ -951,12 +951,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n         let mut err = self.cannot_borrow_across_destructor(borrow_span);\n \n-        let what_was_dropped = match self.describe_place(place.as_place_ref()) {\n+        let what_was_dropped = match self.describe_place(place.as_ref()) {\n             Some(name) => format!(\"`{}`\", name.as_str()),\n             None => String::from(\"temporary value\"),\n         };\n \n-        let label = match self.describe_place(borrow.borrowed_place.as_place_ref()) {\n+        let label = match self.describe_place(borrow.borrowed_place.as_ref()) {\n             Some(borrowed) => format!(\n                 \"here, drop of {D} needs exclusive access to `{B}`, \\\n                  because the type `{T}` implements the `Drop` trait\",\n@@ -1127,7 +1127,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 format!(\"`{}` is borrowed here\", place_desc),\n             )\n         } else {\n-            let root_place = self.prefixes(borrow.borrowed_place.as_place_ref(),\n+            let root_place = self.prefixes(borrow.borrowed_place.as_ref(),\n                                            PrefixSet::All)\n                 .last()\n                 .unwrap();\n@@ -1390,7 +1390,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             let mut err = self.cannot_mutate_in_match_guard(\n                 span,\n                 loan_span,\n-                &self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned()),\n+                &self.describe_place(place.as_ref()).unwrap_or_else(|| \"_\".to_owned()),\n                 \"assign\",\n             );\n             loan_spans.var_span_label(\n@@ -1406,7 +1406,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut err = self.cannot_assign_to_borrowed(\n             span,\n             loan_span,\n-            &self.describe_place(place.as_place_ref()).unwrap_or_else(|| \"_\".to_owned()),\n+            &self.describe_place(place.as_ref()).unwrap_or_else(|| \"_\".to_owned()),\n         );\n \n         loan_spans.var_span_label(\n@@ -1466,8 +1466,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 is_user_variable: None,\n                 ..\n             })\n-            | None => (self.describe_place(place.as_place_ref()), assigned_span),\n-            Some(decl) => (self.describe_place(err_place.as_place_ref()), decl.source_info.span),\n+            | None => (self.describe_place(place.as_ref()), assigned_span),\n+            Some(decl) => (self.describe_place(err_place.as_ref()), decl.source_info.span),\n         };\n \n         let mut err = self.cannot_reassign_immutable("}, {"sha": "a05c77aad6700903e86bedd213034f579be3162a", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -855,7 +855,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     def_id, is_generator, places\n                 );\n                 if let Some((args_span, var_span)) = self.closure_span(\n-                    *def_id, Place::from(target).as_place_ref(), places\n+                    *def_id, Place::from(target).as_ref(), places\n                 ) {\n                     return ClosureUse {\n                         is_generator,\n@@ -895,7 +895,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             for (upvar, place) in self.infcx.tcx.upvars(def_id)?.values().zip(places) {\n                 match place {\n                     Operand::Copy(place) |\n-                    Operand::Move(place) if target_place == place.as_place_ref() => {\n+                    Operand::Move(place) if target_place == place.as_ref() => {\n                         debug!(\"closure_span: found captured local {:?}\", place);\n                         return Some((*args_span, upvar.span));\n                     },"}, {"sha": "5ec1e514100de1c60d9192b5ede6781a7f4fbdd4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -560,7 +560,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                 self.check_if_path_or_subpath_is_moved(\n                     location,\n                     InitializationRequiringAction::Use,\n-                    (place.as_place_ref(), span),\n+                    (place.as_ref(), span),\n                     flow_state,\n                 );\n             }\n@@ -591,7 +591,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n                         self.check_if_path_or_subpath_is_moved(\n                             location,\n                             InitializationRequiringAction::Use,\n-                            (output.as_place_ref(), o.span),\n+                            (output.as_ref(), o.span),\n                             flow_state,\n                         );\n                     } else {\n@@ -1154,7 +1154,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.check_if_path_or_subpath_is_moved(\n                     location,\n                     InitializationRequiringAction::Update,\n-                    (place_span.0.as_place_ref(), place_span.1),\n+                    (place_span.0.as_ref(), place_span.1),\n                     flow_state,\n                 );\n             }\n@@ -1232,7 +1232,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.check_if_path_or_subpath_is_moved(\n                     location,\n                     action,\n-                    (place.as_place_ref(), span),\n+                    (place.as_ref(), span),\n                     flow_state,\n                 );\n             }\n@@ -1260,7 +1260,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.check_if_path_or_subpath_is_moved(\n                     location,\n                     InitializationRequiringAction::Use,\n-                    (place.as_place_ref(), span),\n+                    (place.as_ref(), span),\n                     flow_state,\n                 );\n             }\n@@ -1309,7 +1309,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn propagate_closure_used_mut_upvar(&mut self, operand: &Operand<'tcx>) {\n         let propagate_closure_used_mut_place = |this: &mut Self, place: &Place<'tcx>| {\n             if place.projection.is_some() {\n-                if let Some(field) = this.is_upvar_field_projection(place.as_place_ref()) {\n+                if let Some(field) = this.is_upvar_field_projection(place.as_ref()) {\n                     this.used_mut_upvars.push(field);\n                 }\n             } else if let PlaceBase::Local(local) = place.base {\n@@ -1401,7 +1401,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.check_if_path_or_subpath_is_moved(\n                     location,\n                     InitializationRequiringAction::Use,\n-                    (place.as_place_ref(), span),\n+                    (place.as_ref(), span),\n                     flow_state,\n                 );\n             }\n@@ -1419,7 +1419,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 self.check_if_path_or_subpath_is_moved(\n                     location,\n                     InitializationRequiringAction::Use,\n-                    (place.as_place_ref(), span),\n+                    (place.as_ref(), span),\n                     flow_state,\n                 );\n             }\n@@ -1437,7 +1437,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) {\n         debug!(\"check_for_invalidation_at_exit({:?})\", borrow);\n         let place = &borrow.borrowed_place;\n-        let root_place = self.prefixes(place.as_place_ref(), PrefixSet::All).last().unwrap();\n+        let root_place = self.prefixes(place.as_ref(), PrefixSet::All).last().unwrap();\n \n         // FIXME(nll-rfc#40): do more precise destructor tracking here. For now\n         // we just know that all locals are dropped at function exit (otherwise"}, {"sha": "738a091b0dd7624c809df545a033708c627de49d", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                let move_spans = self.move_spans(original_path.as_place_ref(), location);\n+                let move_spans = self.move_spans(original_path.as_ref(), location);\n                 grouped_errors.push(GroupedMoveError::OtherIllegalMove {\n                     use_spans: move_spans,\n                     original_path,\n@@ -160,7 +160,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let from_simple_let = match_place.is_none();\n         let match_place = match_place.as_ref().unwrap_or(move_from);\n \n-        match self.move_data.rev_lookup.find(match_place.as_place_ref()) {\n+        match self.move_data.rev_lookup.find(match_place.as_ref()) {\n             // Error with the match place\n             LookupResult::Parent(_) => {\n                 for ge in &mut *grouped_errors {\n@@ -192,7 +192,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             }\n             // Error with the pattern\n             LookupResult::Exact(_) => {\n-                let mpi = match self.move_data.rev_lookup.find(move_from.as_place_ref()) {\n+                let mpi = match self.move_data.rev_lookup.find(move_from.as_ref()) {\n                     LookupResult::Parent(Some(mpi)) => mpi,\n                     // move_from should be a projection from match_place.\n                     _ => unreachable!(\"Probably not unreachable...\"),\n@@ -242,7 +242,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 };\n             debug!(\"report: original_path={:?} span={:?}, kind={:?} \\\n                    original_path.is_upvar_field_projection={:?}\", original_path, span, kind,\n-                   self.is_upvar_field_projection(original_path.as_place_ref()));\n+                   self.is_upvar_field_projection(original_path.as_ref()));\n             (\n                 match kind {\n                     IllegalMoveOriginKind::Static => {\n@@ -277,7 +277,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         span: Span\n     ) -> DiagnosticBuilder<'a> {\n         let description = if place.projection.is_none() {\n-            format!(\"static item `{}`\", self.describe_place(place.as_place_ref()).unwrap())\n+            format!(\"static item `{}`\", self.describe_place(place.as_ref()).unwrap())\n         } else {\n             let mut base_static = &place.projection;\n             while let Some(box Projection { base: Some(ref proj), .. }) = base_static {\n@@ -290,7 +290,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n             format!(\n                 \"`{:?}` as `{:?}` is a static item\",\n-                self.describe_place(place.as_place_ref()).unwrap(),\n+                self.describe_place(place.as_ref()).unwrap(),\n                 self.describe_place(base_static).unwrap(),\n             )\n         };\n@@ -308,7 +308,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         // borrow to provide feedback about why this\n         // was a move rather than a copy.\n         let ty = deref_target_place.ty(self.body, self.infcx.tcx).ty;\n-        let upvar_field = self.prefixes(move_place.as_place_ref(), PrefixSet::All)\n+        let upvar_field = self.prefixes(move_place.as_ref(), PrefixSet::All)\n             .find_map(|p| self.is_upvar_field_projection(p));\n \n         let deref_base = match deref_target_place.projection {\n@@ -363,10 +363,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let upvar_name = upvar.name;\n                 let upvar_span = self.infcx.tcx.hir().span(upvar_hir_id);\n \n-                let place_name = self.describe_place(move_place.as_place_ref()).unwrap();\n+                let place_name = self.describe_place(move_place.as_ref()).unwrap();\n \n                 let place_description = if self\n-                    .is_upvar_field_projection(move_place.as_place_ref())\n+                    .is_upvar_field_projection(move_place.as_ref())\n                     .is_some()\n                 {\n                     format!(\"`{}`, a {}\", place_name, capture_description)\n@@ -393,7 +393,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             _ => {\n                 let source = self.borrowed_content_source(deref_base);\n                 match (\n-                    self.describe_place(move_place.as_place_ref()),\n+                    self.describe_place(move_place.as_ref()),\n                     source.describe_for_named_place(),\n                 ) {\n                     (Some(place_desc), Some(source_desc)) => {\n@@ -455,7 +455,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n                 if binds_to.is_empty() {\n                     let place_ty = move_from.ty(self.body, self.infcx.tcx).ty;\n-                    let place_desc = match self.describe_place(move_from.as_place_ref()) {\n+                    let place_desc = match self.describe_place(move_from.as_ref()) {\n                         Some(desc) => format!(\"`{}`\", desc),\n                         None => format!(\"value\"),\n                     };\n@@ -483,7 +483,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             GroupedMoveError::OtherIllegalMove { ref original_path, use_spans, .. } => {\n                 let span = use_spans.var_or_use();\n                 let place_ty = original_path.ty(self.body, self.infcx.tcx).ty;\n-                let place_desc = match self.describe_place(original_path.as_place_ref()) {\n+                let place_desc = match self.describe_place(original_path.as_ref()) {\n                     Some(desc) => format!(\"`{}`\", desc),\n                     None => format!(\"value\"),\n                 };"}, {"sha": "937c6383be341e50f3a5429440820650ce969147", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -42,7 +42,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let item_msg;\n         let reason;\n         let mut opt_source = None;\n-        let access_place_desc = self.describe_place(access_place.as_place_ref());\n+        let access_place_desc = self.describe_place(access_place.as_ref());\n         debug!(\"report_mutability_error: access_place_desc={:?}\", access_place_desc);\n \n         match the_place_err {\n@@ -77,7 +77,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 ));\n \n                 item_msg = format!(\"`{}`\", access_place_desc.unwrap());\n-                if self.is_upvar_field_projection(access_place.as_place_ref()).is_some() {\n+                if self.is_upvar_field_projection(access_place.as_ref()).is_some() {\n                     reason = \", as it is not declared as mutable\".to_string();\n                 } else {\n                     let name = self.upvars[upvar_index.index()].name;\n@@ -109,7 +109,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     ));\n \n                     reason =\n-                        if self.is_upvar_field_projection(access_place.as_place_ref()).is_some() {\n+                        if self.is_upvar_field_projection(access_place.as_ref()).is_some() {\n                             \", as it is a captured variable in a `Fn` closure\".to_string()\n                         } else {\n                             \", as `Fn` closures cannot mutate their captured variables\".to_string()\n@@ -244,7 +244,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     format!(\n                         \"mutable borrow occurs due to use of `{}` in closure\",\n                         // always Some() if the message is printed.\n-                        self.describe_place(access_place.as_place_ref()).unwrap_or_default(),\n+                        self.describe_place(access_place.as_ref()).unwrap_or_default(),\n                     )\n                 );\n                 borrow_span"}, {"sha": "aba3ef1cbbfc9a64ec41f9e2ee9f0bbdd2f77898", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -252,7 +252,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Some(Cause::LiveVar(local, location)) => {\n                 let span = body.source_info(location).span;\n                 let spans = self\n-                    .move_spans(Place::from(local).as_place_ref(), location)\n+                    .move_spans(Place::from(local).as_ref(), location)\n                     .or_else(|| self.borrow_spans(span, location));\n \n                 let borrow_location = location;\n@@ -305,7 +305,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         );\n                     if let Some(region_name) = region_name {\n                         let opt_place_desc =\n-                            self.describe_place(borrow.borrowed_place.as_place_ref());\n+                            self.describe_place(borrow.borrowed_place.as_ref());\n                         BorrowExplanation::MustBeValidFor {\n                             category,\n                             from_closure,"}, {"sha": "da3f165482655a9ffea313041c0753bed4649bbc", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -50,7 +50,7 @@ pub(super) fn each_borrow_involving_path<'tcx, F, I, S>(\n             body,\n             &borrowed.borrowed_place,\n             borrowed.kind,\n-            place.as_place_ref(),\n+            place.as_ref(),\n             access,\n             places_conflict::PlaceConflictBias::Overlap,\n         ) {"}, {"sha": "b2a03147ecf803dfd5ad567bb0949556da714afe", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -36,7 +36,7 @@ crate fn places_conflict<'tcx>(\n         body,\n         borrow_place,\n         BorrowKind::Mut { allow_two_phase_borrow: true },\n-        access_place.as_place_ref(),\n+        access_place.as_ref(),\n         AccessDepth::Deep,\n         bias,\n     )"}, {"sha": "d72b0addae91500e6900d52617bb4aeacd15b83c", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -1304,7 +1304,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 prefix_cursor = base;\n             }\n \n-            all_fake_borrows.push(place.as_place_ref());\n+            all_fake_borrows.push(place.as_ref());\n         }\n \n         // Deduplicate and ensure a deterministic order."}, {"sha": "c071b3101fce3f2651cb04ae147216b86043b96d", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -171,7 +171,7 @@ pub(crate) fn drop_flag_effects_for_function_entry<'tcx, F>(\n     let move_data = &ctxt.move_data;\n     for arg in body.args_iter() {\n         let place = mir::Place::from(arg);\n-        let lookup_result = move_data.rev_lookup.find(place.as_place_ref());\n+        let lookup_result = move_data.rev_lookup.find(place.as_ref());\n         on_lookup_result_bits(tcx, body, move_data,\n                               lookup_result,\n                               |mpi| callback(mpi, DropFlagState::Present));"}, {"sha": "69bbe087921404ba5d3f4f977986050f75ffd3f7", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeInitializedPlaces<'a, 'tcx> {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_place to 1 (initialized).\n         on_lookup_result_bits(self.tcx, self.body, self.move_data(),\n-                              self.move_data().rev_lookup.find(dest_place.as_place_ref()),\n+                              self.move_data().rev_lookup.find(dest_place.as_ref()),\n                               |mpi| { in_out.insert(mpi); });\n     }\n }\n@@ -367,7 +367,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for MaybeUninitializedPlaces<'a, 'tcx> {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_place to 0 (initialized).\n         on_lookup_result_bits(self.tcx, self.body, self.move_data(),\n-                              self.move_data().rev_lookup.find(dest_place.as_place_ref()),\n+                              self.move_data().rev_lookup.find(dest_place.as_ref()),\n                               |mpi| { in_out.remove(mpi); });\n     }\n }\n@@ -423,7 +423,7 @@ impl<'a, 'tcx> BitDenotation<'tcx> for DefinitelyInitializedPlaces<'a, 'tcx> {\n         // when a call returns successfully, that means we need to set\n         // the bits for that dest_place to 1 (initialized).\n         on_lookup_result_bits(self.tcx, self.body, self.move_data(),\n-                              self.move_data().rev_lookup.find(dest_place.as_place_ref()),\n+                              self.move_data().rev_lookup.find(dest_place.as_ref()),\n                               |mpi| { in_out.insert(mpi); });\n     }\n }"}, {"sha": "366b96b53b42312bd46173597a32e3605f000349", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -274,9 +274,9 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                     // move-path for the interior so it will be separate from\n                     // the exterior.\n                     self.create_move_path(&place.clone().deref());\n-                    self.gather_init(place.as_place_ref(), InitKind::Shallow);\n+                    self.gather_init(place.as_ref(), InitKind::Shallow);\n                 } else {\n-                    self.gather_init(place.as_place_ref(), InitKind::Deep);\n+                    self.gather_init(place.as_ref(), InitKind::Deep);\n                 }\n                 self.gather_rvalue(rval);\n             }\n@@ -286,7 +286,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::InlineAsm(ref asm) => {\n                 for (output, kind) in asm.outputs.iter().zip(&asm.asm.outputs) {\n                     if !kind.is_indirect {\n-                        self.gather_init(output.as_place_ref(), InitKind::Deep);\n+                        self.gather_init(output.as_ref(), InitKind::Deep);\n                     }\n                 }\n                 for (_, input) in asm.inputs.iter() {\n@@ -376,7 +376,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             TerminatorKind::DropAndReplace { ref location, ref value, .. } => {\n                 self.create_move_path(location);\n                 self.gather_operand(value);\n-                self.gather_init(location.as_place_ref(), InitKind::Deep);\n+                self.gather_init(location.as_ref(), InitKind::Deep);\n             }\n             TerminatorKind::Call {\n                 ref func,\n@@ -391,7 +391,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 }\n                 if let Some((ref destination, _bb)) = *destination {\n                     self.create_move_path(destination);\n-                    self.gather_init(destination.as_place_ref(), InitKind::NonPanicPathOnly);\n+                    self.gather_init(destination.as_ref(), InitKind::NonPanicPathOnly);\n                 }\n             }\n         }"}, {"sha": "d573423906c2ab58047d55c5bde6bfba735e7282", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -79,7 +79,7 @@ impl MirPass for AddRetag {\n         let needs_retag = |place: &Place<'tcx>| {\n             // FIXME: Instead of giving up for unstable places, we should introduce\n             // a temporary and retag on that.\n-            is_stable(place.as_place_ref())\n+            is_stable(place.as_ref())\n                 && may_have_reference(place.ty(&*local_decls, tcx).ty, tcx)\n         };\n "}, {"sha": "0a021d9b8fa066d3b3c8f7ac44686cfba0f595ff", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -105,7 +105,7 @@ fn find_dead_unwinds<'tcx>(\n             init_data.apply_location(tcx, body, env, loc);\n         }\n \n-        let path = match env.move_data.rev_lookup.find(location.as_place_ref()) {\n+        let path = match env.move_data.rev_lookup.find(location.as_ref()) {\n             LookupResult::Exact(e) => e,\n             LookupResult::Parent(..) => {\n                 debug!(\"find_dead_unwinds: has parent; skipping\");\n@@ -360,7 +360,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 statement_index: data.statements.len()\n             });\n \n-            let path = self.move_data().rev_lookup.find(location.as_place_ref());\n+            let path = self.move_data().rev_lookup.find(location.as_ref());\n             debug!(\"collect_drop_flags: {:?}, place {:?} ({:?})\",\n                    bb, location, path);\n \n@@ -399,7 +399,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             match terminator.kind {\n                 TerminatorKind::Drop { ref location, target, unwind } => {\n                     let init_data = self.initialization_data_at(loc);\n-                    match self.move_data().rev_lookup.find(location.as_place_ref()) {\n+                    match self.move_data().rev_lookup.find(location.as_ref()) {\n                         LookupResult::Exact(path) => {\n                             elaborate_drop(\n                                 &mut Elaborator {\n@@ -488,7 +488,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             is_cleanup: false,\n         });\n \n-        match self.move_data().rev_lookup.find(location.as_place_ref()) {\n+        match self.move_data().rev_lookup.find(location.as_ref()) {\n             LookupResult::Exact(path) => {\n                 debug!(\"elaborate_drop_and_replace({:?}) - tracked {:?}\", terminator, path);\n                 let init_data = self.initialization_data_at(loc);\n@@ -558,7 +558,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 assert!(!self.patch.is_patched(bb));\n \n                 let loc = Location { block: tgt, statement_index: 0 };\n-                let path = self.move_data().rev_lookup.find(place.as_place_ref());\n+                let path = self.move_data().rev_lookup.find(place.as_ref());\n                 on_lookup_result_bits(\n                     self.tcx, self.body, self.move_data(), path,\n                     |child| self.set_drop_flag(loc, child, DropFlagState::Present)\n@@ -632,7 +632,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 assert!(!self.patch.is_patched(bb));\n \n                 let loc = Location { block: bb, statement_index: data.statements.len() };\n-                let path = self.move_data().rev_lookup.find(place.as_place_ref());\n+                let path = self.move_data().rev_lookup.find(place.as_ref());\n                 on_lookup_result_bits(\n                     self.tcx, self.body, self.move_data(), path,\n                     |child| self.set_drop_flag(loc, child, DropFlagState::Present)"}, {"sha": "ffeaf4e19c22a76008d1a6a3a92d8b8caf68565a", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -243,7 +243,7 @@ trait Qualif {\n     fn in_operand(cx: &ConstCx<'_, 'tcx>, operand: &Operand<'tcx>) -> bool {\n         match *operand {\n             Operand::Copy(ref place) |\n-            Operand::Move(ref place) => Self::in_place(cx, place.as_place_ref()),\n+            Operand::Move(ref place) => Self::in_place(cx, place.as_ref()),\n \n             Operand::Constant(ref constant) => {\n                 if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n@@ -272,7 +272,7 @@ trait Qualif {\n             Rvalue::NullaryOp(..) => false,\n \n             Rvalue::Discriminant(ref place) |\n-            Rvalue::Len(ref place) => Self::in_place(cx, place.as_place_ref()),\n+            Rvalue::Len(ref place) => Self::in_place(cx, place.as_ref()),\n \n             Rvalue::Use(ref operand) |\n             Rvalue::Repeat(ref operand, _) |\n@@ -298,7 +298,7 @@ trait Qualif {\n                     }\n                 }\n \n-                Self::in_place(cx, place.as_place_ref())\n+                Self::in_place(cx, place.as_ref())\n             }\n \n             Rvalue::Aggregate(_, ref operands) => {"}, {"sha": "7fe8480c819e6f690aee0fbda0a9a983c2b598fe", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/795d96d87b5ed28e090a7d9ad883b08eb926607b/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=795d96d87b5ed28e090a7d9ad883b08eb926607b", "patch": "@@ -168,7 +168,7 @@ fn each_block<'tcx, O>(\n         if place == peek_arg_place {\n             if let mir::Rvalue::Ref(_, mir::BorrowKind::Shared, ref peeking_at_place) = **rvalue {\n                 // Okay, our search is over.\n-                match move_data.rev_lookup.find(peeking_at_place.as_place_ref()) {\n+                match move_data.rev_lookup.find(peeking_at_place.as_ref()) {\n                     LookupResult::Exact(peek_mpi) => {\n                         let bit_state = on_entry.contains(peek_mpi);\n                         debug!(\"rustc_peek({:?} = &{:?}) bit_state: {}\",\n@@ -192,7 +192,7 @@ fn each_block<'tcx, O>(\n             }\n         }\n \n-        let lhs_mpi = move_data.rev_lookup.find(place.as_place_ref());\n+        let lhs_mpi = move_data.rev_lookup.find(place.as_ref());\n \n         debug!(\"rustc_peek: computing effect on place: {:?} ({:?}) in stmt: {:?}\",\n                place, lhs_mpi, stmt);"}]}