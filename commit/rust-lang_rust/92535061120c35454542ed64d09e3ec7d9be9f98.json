{"sha": "92535061120c35454542ed64d09e3ec7d9be9f98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNTM1MDYxMTIwYzM1NDU0NTQyZWQ2NGQwOWUzZWM3ZDliZTlmOTg=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-05-01T19:32:54Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-05-02T14:36:59Z"}, "message": "remove function body from \"too many args\" span", "tree": {"sha": "2723b3fdb84174312dd6f6da032d93c900b9daa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2723b3fdb84174312dd6f6da032d93c900b9daa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92535061120c35454542ed64d09e3ec7d9be9f98", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlzLAJMWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdAm2CACIHMQub8i9bF0a2f6KY+8JTwMB\ndVQevBMTTM7JUaSMqkS1t1R25HyxsYVot8ogaaleLdTpYE0QoRvCBJ0lNbRgREjl\nk0uIiEebp6m88BTisPAUS5Asz3AkC0xuwUW0b1lZM8er+d6Zhw7RwUke7a7Gxdxg\nRPmU8JidHAHGIuDDNR6SCE1glvbBUYBMVO2cdCK04HaGu1EQtjgwrC3ybGyvvv5D\noBHZMhVrecoO4C2rKQ/WdLUtXSvgBrJyl9OQPZIUsJ8luuX6NWw9bYYlb2D4jJ66\nn2oMZvlrMc+I2oQY2hAxszkMU8W574PgbMw6XcQ4iPQPdtVF2EJ+wkqEIKEE\n=KZVC\n-----END PGP SIGNATURE-----", "payload": "tree 2723b3fdb84174312dd6f6da032d93c900b9daa9\nparent 5162ea5d0ca39a1a8dbce8ae301dbe62d6360309\nauthor Andy Russell <arussell123@gmail.com> 1556739174 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1556807819 -0400\n\nremove function body from \"too many args\" span\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92535061120c35454542ed64d09e3ec7d9be9f98", "html_url": "https://github.com/rust-lang/rust/commit/92535061120c35454542ed64d09e3ec7d9be9f98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92535061120c35454542ed64d09e3ec7d9be9f98/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5162ea5d0ca39a1a8dbce8ae301dbe62d6360309", "url": "https://api.github.com/repos/rust-lang/rust/commits/5162ea5d0ca39a1a8dbce8ae301dbe62d6360309", "html_url": "https://github.com/rust-lang/rust/commit/5162ea5d0ca39a1a8dbce8ae301dbe62d6360309"}], "stats": {"total": 79, "additions": 63, "deletions": 16}, "files": [{"sha": "67af615bf762b0e20fcfc88ea1ddcf24d9ce5f0d", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/92535061120c35454542ed64d09e3ec7d9be9f98/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92535061120c35454542ed64d09e3ec7d9be9f98/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=92535061120c35454542ed64d09e3ec7d9be9f98", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{iter_input_pats, snippet, span_lint, type_is_unsafe_function};\n+use std::convert::TryFrom;\n+\n+use crate::utils::{iter_input_pats, snippet, snippet_opt, span_lint, type_is_unsafe_function};\n use matches::matches;\n use rustc::hir;\n use rustc::hir::def::Def;\n@@ -8,7 +10,7 @@ use rustc::ty;\n use rustc::{declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_target::spec::abi::Abi;\n-use syntax::source_map::Span;\n+use syntax::source_map::{BytePos, Span};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for functions with too many parameters.\n@@ -162,6 +164,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n \n impl<'a, 'tcx> Functions {\n     fn check_arg_number(self, cx: &LateContext<'_, '_>, decl: &hir::FnDecl, span: Span) {\n+        // Remove the function body from the span. We can't use `SourceMap::def_span` because the\n+        // argument list might span multiple lines.\n+        let span = if let Some(snippet) = snippet_opt(cx, span) {\n+            let snippet = snippet.split('{').nth(0).unwrap_or(\"\").trim_end();\n+            if snippet.is_empty() {\n+                span\n+            } else {\n+                span.with_hi(BytePos(span.lo().0 + u32::try_from(snippet.len()).unwrap()))\n+            }\n+        } else {\n+            span\n+        };\n+\n         let args = decl.inputs.len() as u64;\n         if args > self.threshold {\n             span_lint("}, {"sha": "f8de18dc6243ea2a0c1e7a300214405ecb39c172", "filename": "tests/ui/functions.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/92535061120c35454542ed64d09e3ec7d9be9f98/tests%2Fui%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92535061120c35454542ed64d09e3ec7d9be9f98/tests%2Fui%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.rs?ref=92535061120c35454542ed64d09e3ec7d9be9f98", "patch": "@@ -7,6 +7,26 @@ fn good(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32,\n \n fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n \n+#[rustfmt::skip]\n+fn bad_multiline(\n+    one: u32,\n+    two: u32,\n+    three: &str,\n+    four: bool,\n+    five: f32,\n+    six: f32,\n+    seven: bool,\n+    eight: ()\n+) {\n+    let _one = one;\n+    let _two = two;\n+    let _three = three;\n+    let _four = four;\n+    let _five = five;\n+    let _six = six;\n+    let _seven = seven;\n+}\n+\n // don't lint extern fns\n extern \"C\" fn extern_fn(\n     _one: u32,"}, {"sha": "10d72fb96b1d497702b4725429a5c880003f3bd6", "filename": "tests/ui/functions.stderr", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/92535061120c35454542ed64d09e3ec7d9be9f98/tests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92535061120c35454542ed64d09e3ec7d9be9f98/tests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.stderr?ref=92535061120c35454542ed64d09e3ec7d9be9f98", "patch": "@@ -2,77 +2,89 @@ error: this function has too many arguments (8/7)\n   --> $DIR/functions.rs:8:1\n    |\n LL | fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::too-many-arguments` implied by `-D warnings`\n \n error: this function has too many arguments (8/7)\n-  --> $DIR/functions.rs:25:5\n+  --> $DIR/functions.rs:11:1\n+   |\n+LL | / fn bad_multiline(\n+LL | |     one: u32,\n+LL | |     two: u32,\n+LL | |     three: &str,\n+...  |\n+LL | |     eight: ()\n+LL | | ) {\n+   | |_^\n+\n+error: this function has too many arguments (8/7)\n+  --> $DIR/functions.rs:45:5\n    |\n LL |     fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this function has too many arguments (8/7)\n-  --> $DIR/functions.rs:34:5\n+  --> $DIR/functions.rs:54:5\n    |\n LL |     fn bad_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:43:34\n+  --> $DIR/functions.rs:63:34\n    |\n LL |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n    |\n    = note: `-D clippy::not-unsafe-ptr-arg-deref` implied by `-D warnings`\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:44:35\n+  --> $DIR/functions.rs:64:35\n    |\n LL |         println!(\"{:?}\", unsafe { p.as_ref() });\n    |                                   ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:45:33\n+  --> $DIR/functions.rs:65:33\n    |\n LL |         unsafe { std::ptr::read(p) };\n    |                                 ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:56:30\n+  --> $DIR/functions.rs:76:30\n    |\n LL |     println!(\"{}\", unsafe { *p });\n    |                              ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:57:31\n+  --> $DIR/functions.rs:77:31\n    |\n LL |     println!(\"{:?}\", unsafe { p.as_ref() });\n    |                               ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:58:29\n+  --> $DIR/functions.rs:78:29\n    |\n LL |     unsafe { std::ptr::read(p) };\n    |                             ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:67:34\n+  --> $DIR/functions.rs:87:34\n    |\n LL |         println!(\"{}\", unsafe { *p });\n    |                                  ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:68:35\n+  --> $DIR/functions.rs:88:35\n    |\n LL |         println!(\"{:?}\", unsafe { p.as_ref() });\n    |                                   ^\n \n error: this public function dereferences a raw pointer but is not marked `unsafe`\n-  --> $DIR/functions.rs:69:33\n+  --> $DIR/functions.rs:89:33\n    |\n LL |         unsafe { std::ptr::read(p) };\n    |                                 ^\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}]}