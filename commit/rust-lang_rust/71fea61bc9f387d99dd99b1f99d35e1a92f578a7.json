{"sha": "71fea61bc9f387d99dd99b1f99d35e1a92f578a7", "node_id": "C_kwDOAAsO6NoAKDcxZmVhNjFiYzlmMzg3ZDk5ZGQ5OWIxZjk5ZDM1ZTFhOTJmNTc4YTc", "commit": {"author": {"name": "Takayuki Maeda", "email": "41065217+TaKO8Ki@users.noreply.github.com", "date": "2022-04-08T14:17:57Z"}, "committer": {"name": "Takayuki Maeda", "email": "41065217+TaKO8Ki@users.noreply.github.com", "date": "2022-04-08T14:17:57Z"}, "message": "suggest adding a local for vector to fix borrowck errors", "tree": {"sha": "332be050371e3d661a6bed7ec48750b1952a417e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/332be050371e3d661a6bed7ec48750b1952a417e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71fea61bc9f387d99dd99b1f99d35e1a92f578a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71fea61bc9f387d99dd99b1f99d35e1a92f578a7", "html_url": "https://github.com/rust-lang/rust/commit/71fea61bc9f387d99dd99b1f99d35e1a92f578a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "html_url": "https://github.com/rust-lang/rust/commit/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32"}], "stats": {"total": 118, "additions": 109, "deletions": 9}, "files": [{"sha": "9e5fb674772d5f0d7c9c525c40dbe886c13e784e", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=71fea61bc9f387d99dd99b1f99d35e1a92f578a7", "patch": "@@ -785,13 +785,22 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         issued_borrow: &BorrowData<'tcx>,\n         explanation: BorrowExplanation,\n     ) {\n-        let used_in_call =\n-            matches!(explanation, BorrowExplanation::UsedLater(LaterUseKind::Call, _call_span, _));\n+        let used_in_call = matches!(\n+            explanation,\n+            BorrowExplanation::UsedLater(LaterUseKind::Call | LaterUseKind::Other, _call_span, _)\n+        );\n         if !used_in_call {\n             debug!(\"not later used in call\");\n             return;\n         }\n \n+        let use_span =\n+            if let BorrowExplanation::UsedLater(LaterUseKind::Other, use_span, _) = explanation {\n+                Some(use_span)\n+            } else {\n+                None\n+            };\n+\n         let outer_call_loc =\n             if let TwoPhaseActivation::ActivatedAt(loc) = issued_borrow.activation_location {\n                 loc\n@@ -835,7 +844,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         debug!(\"===> outer_call_loc = {:?}, inner_call_loc = {:?}\", outer_call_loc, inner_call_loc);\n \n         let inner_call_span = inner_call_term.source_info.span;\n-        let outer_call_span = outer_call_stmt.either(|s| s.source_info, |t| t.source_info).span;\n+        let outer_call_span = match use_span {\n+            Some(span) => span,\n+            None => outer_call_stmt.either(|s| s.source_info, |t| t.source_info).span,\n+        };\n         if outer_call_span == inner_call_span || !outer_call_span.contains(inner_call_span) {\n             // FIXME: This stops the suggestion in some cases where it should be emitted.\n             //        Fix the spans for those cases so it's emitted correctly.\n@@ -845,8 +857,20 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             );\n             return;\n         }\n-        err.span_help(inner_call_span, \"try adding a local storing this argument...\");\n-        err.span_help(outer_call_span, \"...and then using that local as the argument to this call\");\n+        err.span_help(\n+            inner_call_span,\n+            &format!(\n+                \"try adding a local storing this{}...\",\n+                if use_span.is_some() { \"\" } else { \" argument\" }\n+            ),\n+        );\n+        err.span_help(\n+            outer_call_span,\n+            &format!(\n+                \"...and then using that local {}\",\n+                if use_span.is_some() { \"here\" } else { \"as the argument to this call\" }\n+            ),\n+        );\n     }\n \n     fn suggest_split_at_mut_if_applicable(\n@@ -1912,10 +1936,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         } else {\n             \"cannot assign twice to immutable variable\"\n         };\n-        if span != assigned_span {\n-            if !from_arg {\n-                err.span_label(assigned_span, format!(\"first assignment to {}\", place_description));\n-            }\n+        if span != assigned_span && !from_arg {\n+            err.span_label(assigned_span, format!(\"first assignment to {}\", place_description));\n         }\n         if let Some(decl) = local_decl\n             && let Some(name) = local_name"}, {"sha": "40f013f6a78a767c4b4e7df041a683907e484448", "filename": "src/test/ui/borrowck/suggest-local-var-for-vector.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-for-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-for-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-for-vector.rs?ref=71fea61bc9f387d99dd99b1f99d35e1a92f578a7", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let mut vec = vec![0u32; 420];\n+    vec[vec.len() - 1] = 123; //~ ERROR cannot borrow `vec` as immutable because it is also borrowed as mutable\n+}"}, {"sha": "615fffcd578adbc763965fb09b7eadeee0bbe393", "filename": "src/test/ui/borrowck/suggest-local-var-for-vector.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-for-vector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-for-vector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-local-var-for-vector.stderr?ref=71fea61bc9f387d99dd99b1f99d35e1a92f578a7", "patch": "@@ -0,0 +1,24 @@\n+error[E0502]: cannot borrow `vec` as immutable because it is also borrowed as mutable\n+  --> $DIR/suggest-local-var-for-vector.rs:3:9\n+   |\n+LL |     vec[vec.len() - 1] = 123;\n+   |     ----^^^^^^^^^-----\n+   |     |   |\n+   |     |   immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     mutable borrow later used here\n+   |\n+help: try adding a local storing this...\n+  --> $DIR/suggest-local-var-for-vector.rs:3:9\n+   |\n+LL |     vec[vec.len() - 1] = 123;\n+   |         ^^^^^^^^^\n+help: ...and then using that local here\n+  --> $DIR/suggest-local-var-for-vector.rs:3:5\n+   |\n+LL |     vec[vec.len() - 1] = 123;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "40f013f6a78a767c4b4e7df041a683907e484448", "filename": "src/test/ui/borrowck/suggest-storing-local-var-for-vector.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-storing-local-var-for-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-storing-local-var-for-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-storing-local-var-for-vector.rs?ref=71fea61bc9f387d99dd99b1f99d35e1a92f578a7", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let mut vec = vec![0u32; 420];\n+    vec[vec.len() - 1] = 123; //~ ERROR cannot borrow `vec` as immutable because it is also borrowed as mutable\n+}"}, {"sha": "e3a16eddfd5eca533f9b4a1bf2cfba25660b873c", "filename": "src/test/ui/borrowck/suggest-storing-local-var-for-vector.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-storing-local-var-for-vector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-storing-local-var-for-vector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fsuggest-storing-local-var-for-vector.stderr?ref=71fea61bc9f387d99dd99b1f99d35e1a92f578a7", "patch": "@@ -0,0 +1,24 @@\n+error[E0502]: cannot borrow `vec` as immutable because it is also borrowed as mutable\n+  --> $DIR/suggest-storing-local-var-for-vector.rs:3:9\n+   |\n+LL |     vec[vec.len() - 1] = 123;\n+   |     ----^^^^^^^^^-----\n+   |     |   |\n+   |     |   immutable borrow occurs here\n+   |     mutable borrow occurs here\n+   |     mutable borrow later used here\n+   |\n+help: try adding a local storing this...\n+  --> $DIR/suggest-storing-local-var-for-vector.rs:3:9\n+   |\n+LL |     vec[vec.len() - 1] = 123;\n+   |         ^^^^^^^^^\n+help: ...and then using that local here\n+  --> $DIR/suggest-storing-local-var-for-vector.rs:3:5\n+   |\n+LL |     vec[vec.len() - 1] = 123;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "0f2daaf99d9145a4be74fa3297e84589fa8dcca4", "filename": "src/test/ui/borrowck/two-phase-nonrecv-autoref.nll.stderr", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71fea61bc9f387d99dd99b1f99d35e1a92f578a7/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-nonrecv-autoref.nll.stderr?ref=71fea61bc9f387d99dd99b1f99d35e1a92f578a7", "patch": "@@ -54,6 +54,17 @@ LL |     i[i[3]] = 4;\n    |     | immutable borrow occurs here\n    |     mutable borrow occurs here\n    |     mutable borrow later used here\n+   |\n+help: try adding a local storing this...\n+  --> $DIR/two-phase-nonrecv-autoref.rs:138:7\n+   |\n+LL |     i[i[3]] = 4;\n+   |       ^^^^\n+help: ...and then using that local here\n+  --> $DIR/two-phase-nonrecv-autoref.rs:138:5\n+   |\n+LL |     i[i[3]] = 4;\n+   |     ^^^^^^^\n \n error[E0502]: cannot borrow `i` as immutable because it is also borrowed as mutable\n   --> $DIR/two-phase-nonrecv-autoref.rs:143:7\n@@ -64,6 +75,17 @@ LL |     i[i[3]] = i[4];\n    |     | immutable borrow occurs here\n    |     mutable borrow occurs here\n    |     mutable borrow later used here\n+   |\n+help: try adding a local storing this...\n+  --> $DIR/two-phase-nonrecv-autoref.rs:143:7\n+   |\n+LL |     i[i[3]] = i[4];\n+   |       ^^^^\n+help: ...and then using that local here\n+  --> $DIR/two-phase-nonrecv-autoref.rs:143:5\n+   |\n+LL |     i[i[3]] = i[4];\n+   |     ^^^^^^^\n \n error: aborting due to 7 previous errors\n "}]}