{"sha": "ca697d370594aaed020fb252a216b632abc56d33", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNjk3ZDM3MDU5NGFhZWQwMjBmYjI1MmEyMTZiNjMyYWJjNTZkMzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-26T18:57:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-26T18:57:25Z"}, "message": "rustdoc: Generate documentation for foreign items\n\nThis slurps up everything inside of an 'extern' block into the enclosing module\nin order to document them. The documentation must be on the items themselves,\nand they'll show up next to everything else on the module index pages.\n\nCloses #5953", "tree": {"sha": "380a49a5b2a8bb629f7c2ddd7ef268bd72f54a2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380a49a5b2a8bb629f7c2ddd7ef268bd72f54a2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca697d370594aaed020fb252a216b632abc56d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca697d370594aaed020fb252a216b632abc56d33", "html_url": "https://github.com/rust-lang/rust/commit/ca697d370594aaed020fb252a216b632abc56d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca697d370594aaed020fb252a216b632abc56d33/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c429c7c04b9c19c2ca5992b5f4e094e83832dcb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c429c7c04b9c19c2ca5992b5f4e094e83832dcb8", "html_url": "https://github.com/rust-lang/rust/commit/c429c7c04b9c19c2ca5992b5f4e094e83832dcb8"}], "stats": {"total": 121, "additions": 88, "deletions": 33}, "files": [{"sha": "bfd71345c15753dca337b05f7f39bfd1fd6cea12", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ca697d370594aaed020fb252a216b632abc56d33/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca697d370594aaed020fb252a216b632abc56d33/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=ca697d370594aaed020fb252a216b632abc56d33", "patch": "@@ -149,6 +149,8 @@ pub enum ItemEnum {\n     MethodItem(Method),\n     StructFieldItem(StructField),\n     VariantItem(Variant),\n+    ForeignFunctionItem(Function),\n+    ForeignStaticItem(Static),\n }\n \n #[deriving(Clone, Encodable, Decodable)]\n@@ -172,6 +174,7 @@ impl Clean<Item> for doctree::Module {\n             inner: ModuleItem(Module {\n                items: std::vec::concat(&[self.structs.clean(),\n                               self.enums.clean(), self.fns.clean(),\n+                              std::vec::concat(self.foreigns.clean()),\n                               self.mods.clean(), self.typedefs.clean(),\n                               self.statics.clean(), self.traits.clean(),\n                               self.impls.clean(), self.view_items.clean()])\n@@ -968,6 +971,41 @@ impl Clean<ViewListIdent> for ast::path_list_ident {\n     }\n }\n \n+impl Clean<~[Item]> for ast::foreign_mod {\n+    fn clean(&self) -> ~[Item] {\n+        self.items.clean()\n+    }\n+}\n+\n+impl Clean<Item> for ast::foreign_item {\n+    fn clean(&self) -> Item {\n+        let inner = match self.node {\n+            ast::foreign_item_fn(ref decl, ref generics) => {\n+                ForeignFunctionItem(Function {\n+                    decl: decl.clean(),\n+                    generics: generics.clean(),\n+                    purity: ast::extern_fn,\n+                })\n+            }\n+            ast::foreign_item_static(ref ty, mutbl) => {\n+                ForeignStaticItem(Static {\n+                    type_: ty.clean(),\n+                    mutability: if mutbl {Mutable} else {Immutable},\n+                    expr: ~\"\",\n+                })\n+            }\n+        };\n+        Item {\n+            name: Some(self.ident.clean()),\n+            attrs: self.attrs.clean(),\n+            source: self.span.clean(),\n+            id: self.id,\n+            visibility: self.vis.clean(),\n+            inner: inner,\n+        }\n+    }\n+}\n+\n // Utilities\n \n trait ToSource {"}, {"sha": "835781907f3d1df1965b5a26543b61df3fca85da", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca697d370594aaed020fb252a216b632abc56d33/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca697d370594aaed020fb252a216b632abc56d33/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=ca697d370594aaed020fb252a216b632abc56d33", "patch": "@@ -30,6 +30,7 @@ pub struct Module {\n     traits: ~[Trait],\n     vis: ast::visibility,\n     impls: ~[Impl],\n+    foreigns: ~[ast::foreign_mod],\n     view_items: ~[ast::view_item],\n }\n \n@@ -50,6 +51,7 @@ impl Module {\n             traits     : ~[],\n             impls      : ~[],\n             view_items : ~[],\n+            foreigns   : ~[],\n         }\n     }\n }"}, {"sha": "70f433ff2a3024402f99e09f0c52bc4375ad77ba", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/ca697d370594aaed020fb252a216b632abc56d33/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca697d370594aaed020fb252a216b632abc56d33/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ca697d370594aaed020fb252a216b632abc56d33", "patch": "@@ -540,19 +540,21 @@ impl Context {\n \n fn shortty(item: &clean::Item) -> &'static str {\n     match item.inner {\n-        clean::ModuleItem(*)      => \"mod\",\n-        clean::StructItem(*)      => \"struct\",\n-        clean::EnumItem(*)        => \"enum\",\n-        clean::FunctionItem(*)    => \"fn\",\n-        clean::TypedefItem(*)     => \"typedef\",\n-        clean::StaticItem(*)      => \"static\",\n-        clean::TraitItem(*)       => \"trait\",\n-        clean::ImplItem(*)        => \"impl\",\n-        clean::ViewItemItem(*)    => \"viewitem\",\n-        clean::TyMethodItem(*)    => \"tymethod\",\n-        clean::MethodItem(*)      => \"method\",\n-        clean::StructFieldItem(*) => \"structfield\",\n-        clean::VariantItem(*)     => \"variant\",\n+        clean::ModuleItem(*)          => \"mod\",\n+        clean::StructItem(*)          => \"struct\",\n+        clean::EnumItem(*)            => \"enum\",\n+        clean::FunctionItem(*)        => \"fn\",\n+        clean::TypedefItem(*)         => \"typedef\",\n+        clean::StaticItem(*)          => \"static\",\n+        clean::TraitItem(*)           => \"trait\",\n+        clean::ImplItem(*)            => \"impl\",\n+        clean::ViewItemItem(*)        => \"viewitem\",\n+        clean::TyMethodItem(*)        => \"tymethod\",\n+        clean::MethodItem(*)          => \"method\",\n+        clean::StructFieldItem(*)     => \"structfield\",\n+        clean::VariantItem(*)         => \"variant\",\n+        clean::ForeignFunctionItem(*) => \"ffi\",\n+        clean::ForeignStaticItem(*)   => \"ffs\",\n     }\n }\n \n@@ -592,7 +594,8 @@ impl<'self> fmt::Default for Item<'self> {\n         match it.item.inner {\n             clean::ModuleItem(ref m) => item_module(fmt.buf, it.cx,\n                                                     it.item, m.items),\n-            clean::FunctionItem(ref f) => item_function(fmt.buf, it.item, f),\n+            clean::FunctionItem(ref f) | clean::ForeignFunctionItem(ref f) =>\n+                item_function(fmt.buf, it.item, f),\n             clean::TraitItem(ref t) => item_trait(fmt.buf, it.item, t),\n             clean::StructItem(ref s) => item_struct(fmt.buf, it.item, s),\n             clean::EnumItem(ref e) => item_enum(fmt.buf, it.item, e),\n@@ -673,6 +676,10 @@ fn item_module(w: &mut io::Writer, cx: &Context,\n             (_, &clean::EnumItem(*)) => false,\n             (&clean::StaticItem(*), _) => true,\n             (_, &clean::StaticItem(*)) => false,\n+            (&clean::ForeignFunctionItem(*), _) => true,\n+            (_, &clean::ForeignFunctionItem(*)) => false,\n+            (&clean::ForeignStaticItem(*), _) => true,\n+            (_, &clean::ForeignStaticItem(*)) => false,\n             (&clean::TraitItem(*), _) => true,\n             (_, &clean::TraitItem(*)) => false,\n             (&clean::FunctionItem(*), _) => true,\n@@ -700,27 +707,31 @@ fn item_module(w: &mut io::Writer, cx: &Context,\n             }\n             curty = myty;\n             write!(w, \"<h2>{}</h2>\\n<table>\", match myitem.inner {\n-                clean::ModuleItem(*)      => \"Modules\",\n-                clean::StructItem(*)      => \"Structs\",\n-                clean::EnumItem(*)        => \"Enums\",\n-                clean::FunctionItem(*)    => \"Functions\",\n-                clean::TypedefItem(*)     => \"Type Definitions\",\n-                clean::StaticItem(*)      => \"Statics\",\n-                clean::TraitItem(*)       => \"Traits\",\n-                clean::ImplItem(*)        => \"Implementations\",\n-                clean::ViewItemItem(*)    => \"Reexports\",\n-                clean::TyMethodItem(*)    => \"Type Methods\",\n-                clean::MethodItem(*)      => \"Methods\",\n-                clean::StructFieldItem(*) => \"Struct Fields\",\n-                clean::VariantItem(*)     => \"Variants\",\n+                clean::ModuleItem(*)          => \"Modules\",\n+                clean::StructItem(*)          => \"Structs\",\n+                clean::EnumItem(*)            => \"Enums\",\n+                clean::FunctionItem(*)        => \"Functions\",\n+                clean::TypedefItem(*)         => \"Type Definitions\",\n+                clean::StaticItem(*)          => \"Statics\",\n+                clean::TraitItem(*)           => \"Traits\",\n+                clean::ImplItem(*)            => \"Implementations\",\n+                clean::ViewItemItem(*)        => \"Reexports\",\n+                clean::TyMethodItem(*)        => \"Type Methods\",\n+                clean::MethodItem(*)          => \"Methods\",\n+                clean::StructFieldItem(*)     => \"Struct Fields\",\n+                clean::VariantItem(*)         => \"Variants\",\n+                clean::ForeignFunctionItem(*) => \"Foreign Functions\",\n+                clean::ForeignStaticItem(*)   => \"Foreign Statics\",\n             });\n         }\n \n         match myitem.inner {\n-            clean::StaticItem(ref s) => {\n+            clean::StaticItem(ref s) | clean::ForeignStaticItem(ref s) => {\n                 struct Initializer<'self>(&'self str);\n                 impl<'self> fmt::Default for Initializer<'self> {\n                     fn fmt(s: &Initializer<'self>, f: &mut fmt::Formatter) {\n+                        if s.len() == 0 { return; }\n+                        write!(f.buf, \"<code> = </code>\");\n                         let tag = if s.contains(\"\\n\") { \"pre\" } else { \"code\" };\n                         write!(f.buf, \"<{tag}>{}</{tag}>\",\n                                s.as_slice(), tag=tag);\n@@ -729,7 +740,7 @@ fn item_module(w: &mut io::Writer, cx: &Context,\n \n                 write!(w, \"\n                     <tr>\n-                        <td><code>{}static {}: {} = </code>{}</td>\n+                        <td><code>{}static {}: {}</code>{}</td>\n                         <td class='docblock'>{}&nbsp;</td>\n                     </tr>\n                 \","}, {"sha": "b962694fe68413eaa3bd67d707d03189ccc88355", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca697d370594aaed020fb252a216b632abc56d33/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca697d370594aaed020fb252a216b632abc56d33/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=ca697d370594aaed020fb252a216b632abc56d33", "patch": "@@ -59,7 +59,8 @@ pub fn strip_private(crate: clean::Crate) -> plugins::PluginResult {\n                 clean::TypedefItem(*) | clean::StaticItem(*) |\n                 clean::StructItem(*) | clean::EnumItem(*) |\n                 clean::TraitItem(*) | clean::FunctionItem(*) |\n-                clean::ViewItemItem(*) | clean::MethodItem(*) => {\n+                clean::ViewItemItem(*) | clean::MethodItem(*) |\n+                clean::ForeignFunctionItem(*) | clean::ForeignStaticItem(*) => {\n                     // XXX: re-exported items should get surfaced in the docs as\n                     //      well (using the output of resolve analysis)\n                     if i.visibility != Some(ast::public) {"}, {"sha": "8e89c07ef001cb13b6f79ce22808463da8ac0a98", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca697d370594aaed020fb252a216b632abc56d33/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca697d370594aaed020fb252a216b632abc56d33/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=ca697d370594aaed020fb252a216b632abc56d33", "patch": "@@ -174,6 +174,9 @@ impl RustdocVisitor {\n                     };\n                     om.impls.push(i);\n                 },\n+                ast::item_foreign_mod(ref fm) => {\n+                    om.foreigns.push(fm.clone());\n+                }\n                 _ => (),\n             }\n         }"}, {"sha": "7bea1f098c3cf19dcacee07176c92f0b4ecf2572", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca697d370594aaed020fb252a216b632abc56d33/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca697d370594aaed020fb252a216b632abc56d33/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ca697d370594aaed020fb252a216b632abc56d33", "patch": "@@ -4204,9 +4204,9 @@ impl Parser {\n     }\n \n     // parse a function declaration from a foreign module\n-    fn parse_item_foreign_fn(&self,  attrs: ~[Attribute]) -> @foreign_item {\n+    fn parse_item_foreign_fn(&self, vis: ast::visibility,\n+                             attrs: ~[Attribute]) -> @foreign_item {\n         let lo = self.span.lo;\n-        let vis = self.parse_visibility();\n \n         // Parse obsolete purity.\n         let purity = self.parse_fn_purity();\n@@ -4740,7 +4740,7 @@ impl Parser {\n         if (self.is_keyword(keywords::Fn) || self.is_keyword(keywords::Pure) ||\n                 self.is_keyword(keywords::Unsafe)) {\n             // FOREIGN FUNCTION ITEM\n-            let item = self.parse_item_foreign_fn(attrs);\n+            let item = self.parse_item_foreign_fn(visibility, attrs);\n             return iovi_foreign_item(item);\n         }\n         self.parse_macro_use_or_failure(attrs,macros_allowed,lo,visibility)"}]}