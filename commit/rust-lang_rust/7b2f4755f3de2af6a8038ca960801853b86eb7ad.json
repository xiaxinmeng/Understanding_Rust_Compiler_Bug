{"sha": "7b2f4755f3de2af6a8038ca960801853b86eb7ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMmY0NzU1ZjNkZTJhZjZhODAzOGNhOTYwODAxODUzYjg2ZWI3YWQ=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-14T19:45:45Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-07-14T19:45:52Z"}, "message": "Get rid of ast::ty_vstore, which was only used for fixed length.", "tree": {"sha": "b0f8cd1798dad2e4c6bc819cad203e8fb92f9964", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0f8cd1798dad2e4c6bc819cad203e8fb92f9964"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b2f4755f3de2af6a8038ca960801853b86eb7ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2f4755f3de2af6a8038ca960801853b86eb7ad", "html_url": "https://github.com/rust-lang/rust/commit/7b2f4755f3de2af6a8038ca960801853b86eb7ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b2f4755f3de2af6a8038ca960801853b86eb7ad/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d884085f43f87213e3045e474c39908d6555153a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d884085f43f87213e3045e474c39908d6555153a", "html_url": "https://github.com/rust-lang/rust/commit/d884085f43f87213e3045e474c39908d6555153a"}], "stats": {"total": 74, "additions": 26, "deletions": 48}, "files": [{"sha": "6cf6818ba40930a8da5c0bbfd193c0e90abe8cb5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7b2f4755f3de2af6a8038ca960801853b86eb7ad", "patch": "@@ -503,7 +503,7 @@ enum ty_ {\n     ty_tup(~[@ty]),\n     ty_path(@path, node_id),\n     ty_constr(@ty, ~[@ty_constr]),\n-    ty_vstore(@ty, vstore),\n+    ty_fixed_length(@ty, option<uint>),\n     ty_mac(mac),\n     // ty_infer means the type should be inferred instead of it having been\n     // specified. This should only appear at the \"top level\" of a type and not"}, {"sha": "98671234249b7094809606d7bc7aa6e9052060d7", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=7b2f4755f3de2af6a8038ca960801853b86eb7ad", "patch": "@@ -497,15 +497,9 @@ fn ser_ty(cx: ext_ctxt, tps: ser_tps_map,\n         }]\n       }\n \n-      // For unique vstores, just pass through to the underlying vec or str\n-      ast::ty_vstore(ty, ast::vstore_uniq) {\n-        ser_ty(cx, tps, ty, s, v)\n-      }\n-\n-      ast::ty_vstore(_, _) {\n-        cx.span_unimpl(ty.span, ~\"serialization for vstore types\");\n+      ast::ty_fixed_length(_, _) {\n+        cx.span_unimpl(ty.span, ~\"serialization for fixed length types\");\n       }\n-\n     }\n }\n \n@@ -720,13 +714,8 @@ fn deser_ty(cx: ext_ctxt, tps: deser_tps_map,\n         #ast{ std::serialization::read_to_vec($(d), $(l)) }\n       }\n \n-      // For unique vstores, just pass through to the underlying vec or str\n-      ast::ty_vstore(ty, ast::vstore_uniq) {\n-        deser_ty(cx, tps, ty, d)\n-      }\n-\n-      ast::ty_vstore(_, _) {\n-        cx.span_unimpl(ty.span, ~\"deserialization for vstore types\");\n+      ast::ty_fixed_length(_, _) {\n+        cx.span_unimpl(ty.span, ~\"deserialization for fixed length types\");\n       }\n     }\n }"}, {"sha": "e3bb29cdb92cbed3c2b068a611a725b7cba9b145", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7b2f4755f3de2af6a8038ca960801853b86eb7ad", "patch": "@@ -506,7 +506,7 @@ fn noop_fold_ty(t: ty_, fld: ast_fold) -> ty_ {\n       ty_path(path, id) {ty_path(fld.fold_path(path), fld.new_id(id))}\n       ty_constr(ty, constrs) {ty_constr(fld.fold_ty(ty),\n                                 vec::map(constrs, |x| fld.fold_ty_constr(x)))}\n-      ty_vstore(t, vs) {ty_vstore(fld.fold_ty(t), vs)}\n+      ty_fixed_length(t, vs) {ty_fixed_length(fld.fold_ty(t), vs)}\n       ty_mac(mac) {ty_mac(fold_mac(mac))}\n     }\n }"}, {"sha": "b67fd88ab61d45c76f22144f39851e2238323136", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7b2f4755f3de2af6a8038ca960801853b86eb7ad", "patch": "@@ -49,7 +49,8 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              tt_delim, tt_dotdotdot, tt_flat, tt_interpolate, ty, ty_, ty_bot,\n              ty_box, ty_constr, ty_constr_, ty_constr_arg, ty_field, ty_fn,\n              ty_infer, ty_mac, ty_method, ty_nil, ty_param, ty_path, ty_ptr,\n-             ty_rec, ty_rptr, ty_tup, ty_u32, ty_uniq, ty_vec, ty_vstore,\n+             ty_rec, ty_rptr, ty_tup, ty_u32, ty_uniq, ty_vec,\n+             ty_fixed_length,\n              unchecked_blk, uniq, unsafe_blk, unsafe_fn, variant, view_item,\n              view_item_, view_item_export, view_item_import, view_item_use,\n              view_path, view_path_glob, view_path_list, view_path_simple,\n@@ -554,11 +555,11 @@ class parser {\n \n         let sp = mk_sp(lo, self.last_span.hi);\n         ret @{id: self.get_id(),\n-              node: alt self.maybe_parse_vstore() {\n-                // Consider a vstore suffix like /@ or /~\n+              node: alt self.maybe_parse_fixed_vstore() {\n+                // Consider a fixed vstore suffix (/N or /_)\n                 none { t }\n                 some(v) {\n-                  ty_vstore(@{id: self.get_id(), node:t, span: sp}, v)\n+                  ty_fixed_length(@{id: self.get_id(), node:t, span: sp}, v)\n                 } },\n               span: sp}\n     }\n@@ -650,15 +651,15 @@ class parser {\n         }\n     }\n \n-    fn maybe_parse_vstore() -> option<vstore> {\n+    fn maybe_parse_fixed_vstore() -> option<option<uint>> {\n         if self.token == token::BINOP(token::SLASH) {\n             self.bump();\n             alt copy self.token {\n               token::UNDERSCORE {\n-                self.bump(); some(vstore_fixed(none))\n+                self.bump(); some(none)\n               }\n               token::LIT_INT_UNSUFFIXED(i) if i >= 0i64 {\n-                self.bump(); some(vstore_fixed(some(i as uint)))\n+                self.bump(); some(some(i as uint))\n               }\n               _ {\n                 none\n@@ -1029,11 +1030,11 @@ class parser {\n         alt ex {\n           expr_lit(@{node: lit_str(_), span: _}) |\n           expr_vec(_, _)  {\n-            alt self.maybe_parse_vstore() {\n+            alt self.maybe_parse_fixed_vstore() {\n               none { }\n               some(v) {\n                 hi = self.span.hi;\n-                ex = expr_vstore(self.mk_expr(lo, hi, ex), v);\n+                ex = expr_vstore(self.mk_expr(lo, hi, ex), vstore_fixed(v));\n               }\n             }\n           }"}, {"sha": "a0ad2647cbae58a6a38c7863ea0635ef18df88c9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7b2f4755f3de2af6a8038ca960801853b86eb7ad", "patch": "@@ -378,18 +378,10 @@ fn print_type_ex(s: ps, &&ty: @ast::ty, print_colons: bool) {\n         space(s.s);\n         word(s.s, constrs_str(cs, ty_constr_to_str));\n       }\n-      ast::ty_vstore(t, v) {\n-        alt v {\n-          ast::vstore_fixed(_) {\n-            print_type(s, t);\n-            word(s.s, ~\"/\");\n-            print_vstore(s, v);\n-          }\n-          _ {\n-            print_vstore(s, v);\n-            print_type(s, t);\n-          }\n-        }\n+      ast::ty_fixed_length(t, v) {\n+        print_type(s, t);\n+        word(s.s, ~\"/\");\n+        print_vstore(s, ast::vstore_fixed(v));\n       }\n       ast::ty_mac(_) {\n           fail ~\"print_type doesn't know how to print a ty_mac\";"}, {"sha": "86ba214f23cc3c1db5eb3413679c06f900633935", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7b2f4755f3de2af6a8038ca960801853b86eb7ad", "patch": "@@ -200,7 +200,7 @@ fn visit_ty<E>(t: @ty, e: E, v: vt<E>) {\n         v.visit_ty(decl.output, e, v);\n       }\n       ty_path(p, _) { visit_path(p, e, v); }\n-      ty_vstore(t, _) {\n+      ty_fixed_length(t, _) {\n         v.visit_ty(t, e, v);\n       }\n       ty_constr(t, cs) {"}, {"sha": "b448cefd242e134836c4ce799afe60e531e69ca8", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=7b2f4755f3de2af6a8038ca960801853b86eb7ad", "patch": "@@ -464,7 +464,7 @@ fn check_item_old_vecs(cx: ty::ctxt, it: @ast::item) {\n                     old_strs, t.id, it.id,\n                     t.span, ~\"deprecated str type\");\n               }\n-              ast::ty_vstore(inner, _) |\n+              ast::ty_fixed_length(inner, _) |\n               ast::ty_box({ty: inner, _}) |\n               ast::ty_uniq({ty: inner, _}) |\n               ast::ty_rptr(_, {ty: inner, _}) {"}, {"sha": "7403d568d5a8806ebcdd5a2bd3c01a97bb1ad833", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=7b2f4755f3de2af6a8038ca960801853b86eb7ad", "patch": "@@ -566,8 +566,7 @@ fn determine_rp_in_ty(ty: @ast::ty,\n     // like path/r, add to the worklist/set\n     alt ty.node {\n       ast::ty_rptr(r, _) |\n-      ast::ty_path(@{rp: some(r), _}, _) |\n-      ast::ty_vstore(_, ast::vstore_slice(r)) => {\n+      ast::ty_path(@{rp: some(r), _}, _) => {\n         #debug[\"referenced type with regions %s\", pprust::ty_to_str(ty)];\n         if cx.region_is_relevant(r) {\n             cx.add_rp(cx.item_id);\n@@ -644,4 +643,4 @@ fn determine_rp_in_crate(sess: session,\n \n     // return final set\n     ret cx.region_paramd_items;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b9325b3abee38b25d3622c7a11496f282eedc898", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2f4755f3de2af6a8038ca960801853b86eb7ad/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=7b2f4755f3de2af6a8038ca960801853b86eb7ad", "patch": "@@ -316,7 +316,7 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy>(\n           }\n         }\n       }\n-      ast::ty_vstore(a_t, ast::vstore_fixed(some(u))) {\n+      ast::ty_fixed_length(a_t, some(u)) {\n         mk_maybe_vstore(self, rscope, {ty: a_t, mutbl: ast::m_imm},\n                         ty::vstore_fixed(u),\n                         |ty| {\n@@ -327,14 +327,11 @@ fn ast_ty_to_ty<AC: ast_conv, RS: region_scope copy>(\n                             ty.ty\n                         })\n       }\n-      ast::ty_vstore(_, ast::vstore_fixed(none)) {\n+      ast::ty_fixed_length(_, none) {\n         tcx.sess.span_bug(\n             ast_ty.span,\n             ~\"implied fixed length for bound\");\n       }\n-      ast::ty_vstore(_, _) {\n-        tcx.sess.span_bug(ast_ty.span, ~\"vstore in type??\");\n-      }\n       ast::ty_constr(t, cs) {\n         let mut out_cs = ~[];\n         for cs.each |constr| {"}]}