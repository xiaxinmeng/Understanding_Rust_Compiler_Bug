{"sha": "06009c28f467b416b54f8f97efbd04dbd355e361", "node_id": "C_kwDOAAsO6NoAKDA2MDA5YzI4ZjQ2N2I0MTZiNTRmOGY5N2VmYmQwNGRiZDM1NWUzNjE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-24T18:04:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-24T18:04:28Z"}, "message": "Rollup merge of #99672 - GuillaumeGomez:clean-trait-removal, r=Dylan-DPC\n\nRemove Clean trait implementation for more items\n\nFollow up of #99638.\n\ncc `@camelid`\nr? `@notriddle`", "tree": {"sha": "3f4040a929a29a3199d7ff96f0b1d5dc8e17035d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f4040a929a29a3199d7ff96f0b1d5dc8e17035d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06009c28f467b416b54f8f97efbd04dbd355e361", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi3YmsCRBK7hj4Ov3rIwAAecoIAEq8RnGAGZ+HdWglQo7N8hjE\nk3wioaVE0pyArLzBh9nvaw+DM/ljnXimNfBfEf3HrH/sV8aNla1J/o9suOPeDc5w\n9WjPzvmDhOqSwYV9iXA8pTZemme0g0zldroJhx1l30vR46RQIsBTEw9ypuooDZyX\nOuR5awN/al8Rn4I7gpOU3XxJCviysch8ml1gy/8GFg251AZ/DeQVW3FTG3siduSa\nc1Djb3i4RY6jAYD1LmyjKGOaT+/8EcZb1ZL1/N0L0OqvUofhmmwE0yWccVQ/cA6I\nHpqWitPnlhziA2yb5laCBcu9ui51QXdjw6VU51avCUAUW32GDZO4bjk8M8V00mU=\n=NfQl\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f4040a929a29a3199d7ff96f0b1d5dc8e17035d\nparent 51b3d51cf47be5d1de040ada17675f71b10f54b5\nparent e55b0206f3e889bb90b734828e9c90dfdb426a92\nauthor Ralf Jung <post@ralfj.de> 1658685868 -0400\ncommitter GitHub <noreply@github.com> 1658685868 -0400\n\nRollup merge of #99672 - GuillaumeGomez:clean-trait-removal, r=Dylan-DPC\n\nRemove Clean trait implementation for more items\n\nFollow up of #99638.\n\ncc `@camelid`\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06009c28f467b416b54f8f97efbd04dbd355e361", "html_url": "https://github.com/rust-lang/rust/commit/06009c28f467b416b54f8f97efbd04dbd355e361", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06009c28f467b416b54f8f97efbd04dbd355e361/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51b3d51cf47be5d1de040ada17675f71b10f54b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/51b3d51cf47be5d1de040ada17675f71b10f54b5", "html_url": "https://github.com/rust-lang/rust/commit/51b3d51cf47be5d1de040ada17675f71b10f54b5"}, {"sha": "e55b0206f3e889bb90b734828e9c90dfdb426a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/e55b0206f3e889bb90b734828e9c90dfdb426a92", "html_url": "https://github.com/rust-lang/rust/commit/e55b0206f3e889bb90b734828e9c90dfdb426a92"}], "stats": {"total": 108, "additions": 55, "deletions": 53}, "files": [{"sha": "4b91f7ba096cb4fc9c9c4b11103f9845290178ad", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06009c28f467b416b54f8f97efbd04dbd355e361/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06009c28f467b416b54f8f97efbd04dbd355e361/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=06009c28f467b416b54f8f97efbd04dbd355e361", "patch": "@@ -16,8 +16,8 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use crate::clean::{\n-    self, clean_fn_decl_from_did_and_sig, clean_middle_ty, clean_ty, clean_ty_generics, utils,\n-    Attributes, AttributesExt, Clean, ImplKind, ItemId, Type, Visibility,\n+    self, clean_fn_decl_from_did_and_sig, clean_middle_field, clean_middle_ty, clean_ty,\n+    clean_ty_generics, utils, Attributes, AttributesExt, Clean, ImplKind, ItemId, Type, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -246,7 +246,7 @@ fn build_struct(cx: &mut DocContext<'_>, did: DefId) -> clean::Struct {\n     clean::Struct {\n         struct_type: variant.ctor_kind,\n         generics: clean_ty_generics(cx, cx.tcx.generics_of(did), predicates),\n-        fields: variant.fields.iter().map(|x| x.clean(cx)).collect(),\n+        fields: variant.fields.iter().map(|x| clean_middle_field(x, cx)).collect(),\n     }\n }\n \n@@ -255,7 +255,7 @@ fn build_union(cx: &mut DocContext<'_>, did: DefId) -> clean::Union {\n     let variant = cx.tcx.adt_def(did).non_enum_variant();\n \n     let generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n-    let fields = variant.fields.iter().map(|x| x.clean(cx)).collect();\n+    let fields = variant.fields.iter().map(|x| clean_middle_field(x, cx)).collect();\n     clean::Union { generics, fields }\n }\n "}, {"sha": "c9ef4748a48451619cadda1289bbd09d54d5d97e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 47, "deletions": 45, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/06009c28f467b416b54f8f97efbd04dbd355e361/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06009c28f467b416b54f8f97efbd04dbd355e361/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=06009c28f467b416b54f8f97efbd04dbd355e361", "patch": "@@ -237,13 +237,22 @@ impl<'tcx> Clean<'tcx, Lifetime> for hir::Lifetime {\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Constant> for hir::ConstArg {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Constant {\n-        let def_id = cx.tcx.hir().body_owner_def_id(self.value.body).to_def_id();\n-        Constant {\n-            type_: clean_middle_ty(cx.tcx.type_of(def_id), cx, Some(def_id)),\n-            kind: ConstantKind::Anonymous { body: self.value.body },\n-        }\n+pub(crate) fn clean_const<'tcx>(constant: &hir::ConstArg, cx: &mut DocContext<'tcx>) -> Constant {\n+    let def_id = cx.tcx.hir().body_owner_def_id(constant.value.body).to_def_id();\n+    Constant {\n+        type_: clean_middle_ty(cx.tcx.type_of(def_id), cx, Some(def_id)),\n+        kind: ConstantKind::Anonymous { body: constant.value.body },\n+    }\n+}\n+\n+pub(crate) fn clean_middle_const<'tcx>(\n+    constant: ty::Const<'tcx>,\n+    cx: &mut DocContext<'tcx>,\n+) -> Constant {\n+    // FIXME: instead of storing the stringified expression, store `self` directly instead.\n+    Constant {\n+        type_: clean_middle_ty(constant.ty(), cx, None),\n+        kind: ConstantKind::TyConst { expr: constant.to_string() },\n     }\n }\n \n@@ -392,7 +401,7 @@ impl<'tcx> Clean<'tcx, Term> for ty::Term<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Term {\n         match self {\n             ty::Term::Ty(ty) => Term::Type(clean_middle_ty(*ty, cx, None)),\n-            ty::Term::Const(c) => Term::Constant(c.clean(cx)),\n+            ty::Term::Const(c) => Term::Constant(clean_middle_const(*c, cx)),\n         }\n     }\n }\n@@ -403,7 +412,7 @@ impl<'tcx> Clean<'tcx, Term> for hir::Term<'tcx> {\n             hir::Term::Ty(ty) => Term::Type(clean_ty(ty, cx)),\n             hir::Term::Const(c) => {\n                 let def_id = cx.tcx.hir().local_def_id(c.hir_id);\n-                Term::Constant(ty::Const::from_anon_const(cx.tcx, def_id).clean(cx))\n+                Term::Constant(clean_middle_const(ty::Const::from_anon_const(cx.tcx, def_id), cx))\n             }\n         }\n     }\n@@ -1468,8 +1477,10 @@ fn maybe_expand_private_type_alias<'tcx>(\n                     _ => None,\n                 });\n                 if let Some(ct) = const_ {\n-                    substs\n-                        .insert(const_param_def_id.to_def_id(), SubstParam::Constant(ct.clean(cx)));\n+                    substs.insert(\n+                        const_param_def_id.to_def_id(),\n+                        SubstParam::Constant(clean_const(ct, cx)),\n+                    );\n                 }\n                 // FIXME(const_generics_defaults)\n                 indices.consts += 1;\n@@ -1764,35 +1775,26 @@ pub(crate) fn clean_middle_ty<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Constant> for ty::Const<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Constant {\n-        // FIXME: instead of storing the stringified expression, store `self` directly instead.\n-        Constant {\n-            type_: clean_middle_ty(self.ty(), cx, None),\n-            kind: ConstantKind::TyConst { expr: self.to_string() },\n-        }\n-    }\n-}\n-\n-impl<'tcx> Clean<'tcx, Item> for hir::FieldDef<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n-        let def_id = cx.tcx.hir().local_def_id(self.hir_id).to_def_id();\n-        clean_field(def_id, self.ident.name, clean_ty(self.ty, cx), cx)\n-    }\n+pub(crate) fn clean_field<'tcx>(field: &hir::FieldDef<'tcx>, cx: &mut DocContext<'tcx>) -> Item {\n+    let def_id = cx.tcx.hir().local_def_id(field.hir_id).to_def_id();\n+    clean_field_with_def_id(def_id, field.ident.name, clean_ty(field.ty, cx), cx)\n }\n \n-impl<'tcx> Clean<'tcx, Item> for ty::FieldDef {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n-        clean_field(\n-            self.did,\n-            self.name,\n-            clean_middle_ty(cx.tcx.type_of(self.did), cx, Some(self.did)),\n-            cx,\n-        )\n-    }\n+pub(crate) fn clean_middle_field<'tcx>(field: &ty::FieldDef, cx: &mut DocContext<'tcx>) -> Item {\n+    clean_field_with_def_id(\n+        field.did,\n+        field.name,\n+        clean_middle_ty(cx.tcx.type_of(field.did), cx, Some(field.did)),\n+        cx,\n+    )\n }\n \n-fn clean_field(def_id: DefId, name: Symbol, ty: Type, cx: &mut DocContext<'_>) -> Item {\n+pub(crate) fn clean_field_with_def_id(\n+    def_id: DefId,\n+    name: Symbol,\n+    ty: Type,\n+    cx: &mut DocContext<'_>,\n+) -> Item {\n     let what_rustc_thinks =\n         Item::from_def_id_and_parts(def_id, Some(name), StructFieldItem(ty), cx);\n     if is_field_vis_inherited(cx.tcx, def_id) {\n@@ -1830,27 +1832,27 @@ impl<'tcx> Clean<'tcx, VariantStruct> for rustc_hir::VariantData<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> VariantStruct {\n         VariantStruct {\n             struct_type: CtorKind::from_hir(self),\n-            fields: self.fields().iter().map(|x| x.clean(cx)).collect(),\n+            fields: self.fields().iter().map(|x| clean_field(x, cx)).collect(),\n         }\n     }\n }\n \n impl<'tcx> Clean<'tcx, Vec<Item>> for hir::VariantData<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Vec<Item> {\n-        self.fields().iter().map(|x| x.clean(cx)).collect()\n+        self.fields().iter().map(|x| clean_field(x, cx)).collect()\n     }\n }\n \n impl<'tcx> Clean<'tcx, Item> for ty::VariantDef {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n         let kind = match self.ctor_kind {\n             CtorKind::Const => Variant::CLike,\n-            CtorKind::Fn => {\n-                Variant::Tuple(self.fields.iter().map(|field| field.clean(cx)).collect())\n-            }\n+            CtorKind::Fn => Variant::Tuple(\n+                self.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n+            ),\n             CtorKind::Fictive => Variant::Struct(VariantStruct {\n                 struct_type: CtorKind::Fictive,\n-                fields: self.fields.iter().map(|field| field.clean(cx)).collect(),\n+                fields: self.fields.iter().map(|field| clean_middle_field(field, cx)).collect(),\n             }),\n         };\n         let what_rustc_thinks =\n@@ -1894,7 +1896,7 @@ impl<'tcx> Clean<'tcx, GenericArgs> for hir::GenericArgs<'tcx> {\n                     }\n                     hir::GenericArg::Lifetime(_) => GenericArg::Lifetime(Lifetime::elided()),\n                     hir::GenericArg::Type(ty) => GenericArg::Type(clean_ty(ty, cx)),\n-                    hir::GenericArg::Const(ct) => GenericArg::Const(Box::new(ct.clean(cx))),\n+                    hir::GenericArg::Const(ct) => GenericArg::Const(Box::new(clean_const(ct, cx))),\n                     hir::GenericArg::Infer(_inf) => GenericArg::Infer,\n                 })\n                 .collect::<Vec<_>>()\n@@ -1970,12 +1972,12 @@ fn clean_maybe_renamed_item<'tcx>(\n             }),\n             ItemKind::Union(ref variant_data, generics) => UnionItem(Union {\n                 generics: generics.clean(cx),\n-                fields: variant_data.fields().iter().map(|x| x.clean(cx)).collect(),\n+                fields: variant_data.fields().iter().map(|x| clean_field(x, cx)).collect(),\n             }),\n             ItemKind::Struct(ref variant_data, generics) => StructItem(Struct {\n                 struct_type: CtorKind::from_hir(variant_data),\n                 generics: generics.clean(cx),\n-                fields: variant_data.fields().iter().map(|x| x.clean(cx)).collect(),\n+                fields: variant_data.fields().iter().map(|x| clean_field(x, cx)).collect(),\n             }),\n             ItemKind::Impl(impl_) => return clean_impl(impl_, item.hir_id(), cx),\n             // proc macros can have a name set by attributes"}, {"sha": "27ecea5cc40bd2a9dac6880247c210477803a2ef", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06009c28f467b416b54f8f97efbd04dbd355e361/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06009c28f467b416b54f8f97efbd04dbd355e361/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=06009c28f467b416b54f8f97efbd04dbd355e361", "patch": "@@ -2,9 +2,9 @@ use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::render_macro_matchers::render_macro_matcher;\n use crate::clean::{\n-    clean_middle_ty, inline, Clean, Crate, ExternalCrate, Generic, GenericArg, GenericArgs,\n-    ImportSource, Item, ItemKind, Lifetime, Path, PathSegment, Primitive, PrimitiveType, Type,\n-    TypeBinding, Visibility,\n+    clean_middle_const, clean_middle_ty, inline, Clean, Crate, ExternalCrate, Generic, GenericArg,\n+    GenericArgs, ImportSource, Item, ItemKind, Lifetime, Path, PathSegment, Primitive,\n+    PrimitiveType, Type, TypeBinding, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -93,7 +93,7 @@ pub(crate) fn substs_to_args<'tcx>(\n             None\n         }\n         GenericArgKind::Type(ty) => Some(GenericArg::Type(clean_middle_ty(ty, cx, None))),\n-        GenericArgKind::Const(ct) => Some(GenericArg::Const(Box::new(ct.clean(cx)))),\n+        GenericArgKind::Const(ct) => Some(GenericArg::Const(Box::new(clean_middle_const(ct, cx)))),\n     }));\n     ret_val\n }"}]}