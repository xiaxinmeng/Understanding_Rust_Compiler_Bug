{"sha": "fa71af419207fbd0169f1e2d36abcfaf3bc4fab2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNzFhZjQxOTIwN2ZiZDAxNjlmMWUyZDM2YWJjZmFmM2JjNGZhYjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T10:48:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-27T10:48:43Z"}, "message": "use query boilerplate for `normalize`", "tree": {"sha": "86c52456a2cfeed914c0befc23ed00301bcbb71b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86c52456a2cfeed914c0befc23ed00301bcbb71b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa71af419207fbd0169f1e2d36abcfaf3bc4fab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa71af419207fbd0169f1e2d36abcfaf3bc4fab2", "html_url": "https://github.com/rust-lang/rust/commit/fa71af419207fbd0169f1e2d36abcfaf3bc4fab2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa71af419207fbd0169f1e2d36abcfaf3bc4fab2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fd8a312d9883b322981be03bd1c17308354634d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd8a312d9883b322981be03bd1c17308354634d", "html_url": "https://github.com/rust-lang/rust/commit/2fd8a312d9883b322981be03bd1c17308354634d"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "78e8a0ff3e698a1ad17d59b64be3446382d62ab6", "filename": "src/librustc_traits/type_op_normalize.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fa71af419207fbd0169f1e2d36abcfaf3bc4fab2/src%2Flibrustc_traits%2Ftype_op_normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa71af419207fbd0169f1e2d36abcfaf3bc4fab2/src%2Flibrustc_traits%2Ftype_op_normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op_normalize.rs?ref=fa71af419207fbd0169f1e2d36abcfaf3bc4fab2", "patch": "@@ -9,60 +9,56 @@\n // except according to those terms.\n \n use rustc::infer::canonical::{Canonical, QueryResult};\n-use rustc::infer::InferCtxt;\n+use rustc::infer::{InferCtxt, InferOk};\n use rustc::traits::query::type_op::normalize::Normalize;\n-use rustc::traits::query::NoSolution;\n-use rustc::traits::{FulfillmentContext, Normalized, ObligationCause};\n+use rustc::traits::query::{Fallible, NoSolution};\n+use rustc::traits::{Normalized, ObligationCause};\n use rustc::ty::{FnSig, Lift, PolyFnSig, Predicate, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::sync::Lrc;\n use std::fmt;\n-use syntax::codemap::DUMMY_SP;\n \n-fn type_op_normalize<'gcx, 'tcx, T>(\n+fn type_op_normalize<T>(\n     infcx: &InferCtxt<'_, 'gcx, 'tcx>,\n-    canonicalized: Canonical<'tcx, Normalize<'tcx, T>>,\n-) -> Result<Lrc<Canonical<'gcx, QueryResult<'gcx, <T as Lift<'gcx>>::Lifted>>>, NoSolution>\n+    key: Normalize<'tcx, T>,\n+) -> Fallible<InferOk<'tcx, T>>\n where\n     T: fmt::Debug + TypeFoldable<'tcx> + Lift<'gcx>,\n {\n-    let (Normalize { param_env, value }, canonical_inference_vars) =\n-        infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonicalized);\n-    let fulfill_cx = &mut FulfillmentContext::new();\n+    let Normalize { param_env, value } = key;\n     let Normalized { value, obligations } = infcx\n         .at(&ObligationCause::dummy(), param_env)\n         .normalize(&value)?;\n-    fulfill_cx.register_predicate_obligations(infcx, obligations);\n-    infcx.make_canonicalized_query_result(canonical_inference_vars, value, fulfill_cx)\n+    Ok(InferOk { value, obligations }) // ugh we should merge these two structs\n }\n \n-crate fn type_op_normalize_ty<'tcx>(\n+crate fn type_op_normalize_ty(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, Normalize<'tcx, Ty<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, Ty<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n-        .enter(|ref infcx| type_op_normalize(infcx, canonicalized))\n+        .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n-crate fn type_op_normalize_predicate<'tcx>(\n+crate fn type_op_normalize_predicate(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, Normalize<'tcx, Predicate<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, Predicate<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n-        .enter(|ref infcx| type_op_normalize(infcx, canonicalized))\n+        .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n-crate fn type_op_normalize_fn_sig<'tcx>(\n+crate fn type_op_normalize_fn_sig(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, Normalize<'tcx, FnSig<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, FnSig<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n-        .enter(|ref infcx| type_op_normalize(infcx, canonicalized))\n+        .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }\n \n-crate fn type_op_normalize_poly_fn_sig<'tcx>(\n+crate fn type_op_normalize_poly_fn_sig(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     canonicalized: Canonical<'tcx, Normalize<'tcx, PolyFnSig<'tcx>>>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, PolyFnSig<'tcx>>>>, NoSolution> {\n     tcx.infer_ctxt()\n-        .enter(|ref infcx| type_op_normalize(infcx, canonicalized))\n+        .enter_canonical_trait_query(&canonicalized, type_op_normalize)\n }"}]}