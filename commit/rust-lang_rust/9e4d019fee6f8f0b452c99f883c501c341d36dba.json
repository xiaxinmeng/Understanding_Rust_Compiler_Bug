{"sha": "9e4d019fee6f8f0b452c99f883c501c341d36dba", "node_id": "C_kwDOAAsO6NoAKDllNGQwMTlmZWU2ZjhmMGI0NTJjOTlmODgzYzUwMWMzNDFkMzZkYmE", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-03-28T03:38:10Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-03-28T03:38:10Z"}, "message": "suggest replacing field when using the same type", "tree": {"sha": "b66e550ab71bef24b4aa5aa4801597617ef319a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b66e550ab71bef24b4aa5aa4801597617ef319a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4d019fee6f8f0b452c99f883c501c341d36dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4d019fee6f8f0b452c99f883c501c341d36dba", "html_url": "https://github.com/rust-lang/rust/commit/9e4d019fee6f8f0b452c99f883c501c341d36dba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4d019fee6f8f0b452c99f883c501c341d36dba/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "185a3f0a112fd6439247cf15452d0c5dfb3c8c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/185a3f0a112fd6439247cf15452d0c5dfb3c8c92", "html_url": "https://github.com/rust-lang/rust/commit/185a3f0a112fd6439247cf15452d0c5dfb3c8c92"}], "stats": {"total": 187, "additions": 161, "deletions": 26}, "files": [{"sha": "67124f2d23836d72b9e3fd7522030f0b3d4f4390", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9e4d019fee6f8f0b452c99f883c501c341d36dba/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4d019fee6f8f0b452c99f883c501c341d36dba/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=9e4d019fee6f8f0b452c99f883c501c341d36dba", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n use rustc_hir::{HirId, Pat, PatKind};\n use rustc_infer::infer;\n+use rustc_infer::infer::error_reporting::same_type_modulo_infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::ty::{self, Adt, BindingMode, Ty, TypeFoldable};\n@@ -1258,7 +1259,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.field_ty(span, f, substs)\n                         })\n                         .unwrap_or_else(|| {\n-                            inexistent_fields.push(field.ident);\n+                            inexistent_fields.push(field);\n                             no_field_errors = false;\n                             tcx.ty_error()\n                         })\n@@ -1276,13 +1277,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .collect::<Vec<_>>();\n \n         let inexistent_fields_err = if !(inexistent_fields.is_empty() || variant.is_recovered())\n-            && !inexistent_fields.iter().any(|field| field.name == kw::Underscore)\n+            && !inexistent_fields.iter().any(|field| field.ident.name == kw::Underscore)\n         {\n             Some(self.error_inexistent_fields(\n                 adt.variant_descr(),\n                 &inexistent_fields,\n                 &mut unmentioned_fields,\n                 variant,\n+                substs,\n             ))\n         } else {\n             None\n@@ -1448,28 +1450,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn error_inexistent_fields(\n         &self,\n         kind_name: &str,\n-        inexistent_fields: &[Ident],\n-        unmentioned_fields: &mut Vec<(&ty::FieldDef, Ident)>,\n+        inexistent_fields: &[&hir::PatField<'tcx>],\n+        unmentioned_fields: &mut Vec<(&'tcx ty::FieldDef, Ident)>,\n         variant: &ty::VariantDef,\n+        substs: &'tcx ty::List<ty::subst::GenericArg<'tcx>>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let tcx = self.tcx;\n         let (field_names, t, plural) = if inexistent_fields.len() == 1 {\n-            (format!(\"a field named `{}`\", inexistent_fields[0]), \"this\", \"\")\n+            (format!(\"a field named `{}`\", inexistent_fields[0].ident), \"this\", \"\")\n         } else {\n             (\n                 format!(\n                     \"fields named {}\",\n                     inexistent_fields\n                         .iter()\n-                        .map(|ident| format!(\"`{}`\", ident))\n+                        .map(|field| format!(\"`{}`\", field.ident))\n                         .collect::<Vec<String>>()\n                         .join(\", \")\n                 ),\n                 \"these\",\n                 \"s\",\n             )\n         };\n-        let spans = inexistent_fields.iter().map(|ident| ident.span).collect::<Vec<_>>();\n+        let spans = inexistent_fields.iter().map(|field| field.ident.span).collect::<Vec<_>>();\n         let mut err = struct_span_err!(\n             tcx.sess,\n             spans,\n@@ -1479,9 +1482,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             tcx.def_path_str(variant.def_id),\n             field_names\n         );\n-        if let Some(ident) = inexistent_fields.last() {\n+        if let Some(pat_field) = inexistent_fields.last() {\n             err.span_label(\n-                ident.span,\n+                pat_field.ident.span,\n                 format!(\n                     \"{} `{}` does not have {} field{}\",\n                     kind_name,\n@@ -1494,10 +1497,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if unmentioned_fields.len() == 1 {\n                 let input =\n                     unmentioned_fields.iter().map(|(_, field)| field.name).collect::<Vec<_>>();\n-                let suggested_name = find_best_match_for_name(&input, ident.name, None);\n+                let suggested_name = find_best_match_for_name(&input, pat_field.ident.name, None);\n                 if let Some(suggested_name) = suggested_name {\n                     err.span_suggestion(\n-                        ident.span,\n+                        pat_field.ident.span,\n                         \"a field with a similar name exists\",\n                         suggested_name.to_string(),\n                         Applicability::MaybeIncorrect,\n@@ -1513,17 +1516,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         unmentioned_fields.retain(|&(_, x)| x.name != suggested_name);\n                     }\n                 } else if inexistent_fields.len() == 1 {\n-                    let unmentioned_field = unmentioned_fields[0].1.name;\n-                    err.span_suggestion_short(\n-                        ident.span,\n-                        &format!(\n-                            \"`{}` has a field named `{}`\",\n-                            tcx.def_path_str(variant.def_id),\n-                            unmentioned_field\n-                        ),\n-                        unmentioned_field.to_string(),\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    match pat_field.pat.kind {\n+                        PatKind::Lit(expr)\n+                            if !same_type_modulo_infer(\n+                                self.typeck_results.borrow().expr_ty(expr),\n+                                self.field_ty(\n+                                    unmentioned_fields[0].1.span,\n+                                    unmentioned_fields[0].0,\n+                                    substs,\n+                                ),\n+                            ) => {}\n+                        _ => {\n+                            let unmentioned_field = unmentioned_fields[0].1.name;\n+                            err.span_suggestion_short(\n+                                pat_field.ident.span,\n+                                &format!(\n+                                    \"`{}` has a field named `{}`\",\n+                                    tcx.def_path_str(variant.def_id),\n+                                    unmentioned_field\n+                                ),\n+                                unmentioned_field.to_string(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                    }\n                 }\n             }\n         }"}, {"sha": "eb9eb680200672da966418f7491ce6a5b9a64422", "filename": "src/test/ui/issues/issue-51102.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e4d019fee6f8f0b452c99f883c501c341d36dba/src%2Ftest%2Fui%2Fissues%2Fissue-51102.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e4d019fee6f8f0b452c99f883c501c341d36dba/src%2Ftest%2Fui%2Fissues%2Fissue-51102.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51102.stderr?ref=9e4d019fee6f8f0b452c99f883c501c341d36dba", "patch": "@@ -2,10 +2,7 @@ error[E0026]: struct `SimpleStruct` does not have a field named `state`\n   --> $DIR/issue-51102.rs:13:17\n    |\n LL |                 state: 0,\n-   |                 ^^^^^\n-   |                 |\n-   |                 struct `SimpleStruct` does not have this field\n-   |                 help: `SimpleStruct` has a field named `no_state_here`\n+   |                 ^^^^^ struct `SimpleStruct` does not have this field\n \n error[E0025]: field `no_state_here` bound multiple times in the pattern\n   --> $DIR/issue-51102.rs:24:17"}, {"sha": "dd2fe79731eac4b9cd9028d660aebe880640291b", "filename": "src/test/ui/structs/suggest-replacing-field-when-specifying-same-type.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9e4d019fee6f8f0b452c99f883c501c341d36dba/src%2Ftest%2Fui%2Fstructs%2Fsuggest-replacing-field-when-specifying-same-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4d019fee6f8f0b452c99f883c501c341d36dba/src%2Ftest%2Fui%2Fstructs%2Fsuggest-replacing-field-when-specifying-same-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fsuggest-replacing-field-when-specifying-same-type.rs?ref=9e4d019fee6f8f0b452c99f883c501c341d36dba", "patch": "@@ -0,0 +1,28 @@\n+enum Foo {\n+    Bar { a: u8, b: i8, c: u8 },\n+    Baz { a: f32 },\n+    None,\n+}\n+\n+fn main() {\n+    let foo = Foo::None;\n+    match foo {\n+        Foo::Bar { a, aa: 1, c } => (),\n+        //~^ ERROR variant `Foo::Bar` does not have a field named `aa` [E0026]\n+        //~| ERROR pattern does not mention field `b` [E0027]\n+        Foo::Baz { bb: 1.0 } => (),\n+        //~^ ERROR variant `Foo::Baz` does not have a field named `bb` [E0026]\n+        //~| ERROR pattern does not mention field `a` [E0027]\n+        _ => (),\n+    }\n+\n+    match foo {\n+        Foo::Bar { a, aa: \"\", c } => (),\n+        //~^ ERROR variant `Foo::Bar` does not have a field named `aa` [E0026]\n+        //~| ERROR pattern does not mention field `b` [E0027]\n+        Foo::Baz { bb: \"\" } => (),\n+        //~^ ERROR variant `Foo::Baz` does not have a field named `bb` [E0026]\n+        //~| pattern does not mention field `a` [E0027]\n+        _ => (),\n+    }\n+}"}, {"sha": "e8503f540c288da0b2848b7a08d6f2c9f40525d6", "filename": "src/test/ui/structs/suggest-replacing-field-when-specifying-same-type.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/9e4d019fee6f8f0b452c99f883c501c341d36dba/src%2Ftest%2Fui%2Fstructs%2Fsuggest-replacing-field-when-specifying-same-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e4d019fee6f8f0b452c99f883c501c341d36dba/src%2Ftest%2Fui%2Fstructs%2Fsuggest-replacing-field-when-specifying-same-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fsuggest-replacing-field-when-specifying-same-type.stderr?ref=9e4d019fee6f8f0b452c99f883c501c341d36dba", "patch": "@@ -0,0 +1,94 @@\n+error[E0026]: variant `Foo::Bar` does not have a field named `aa`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:10:23\n+   |\n+LL |         Foo::Bar { a, aa: 1, c } => (),\n+   |                       ^^\n+   |                       |\n+   |                       variant `Foo::Bar` does not have this field\n+   |                       help: `Foo::Bar` has a field named `b`\n+\n+error[E0027]: pattern does not mention field `b`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:10:9\n+   |\n+LL |         Foo::Bar { a, aa: 1, c } => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ missing field `b`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |         Foo::Bar { a, aa: 1, c, b } => (),\n+   |                               ~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |         Foo::Bar { a, aa: 1, c, .. } => (),\n+   |                               ~~~~~~\n+\n+error[E0026]: variant `Foo::Baz` does not have a field named `bb`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:13:20\n+   |\n+LL |         Foo::Baz { bb: 1.0 } => (),\n+   |                    ^^\n+   |                    |\n+   |                    variant `Foo::Baz` does not have this field\n+   |                    help: `Foo::Baz` has a field named `a`\n+\n+error[E0027]: pattern does not mention field `a`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:13:9\n+   |\n+LL |         Foo::Baz { bb: 1.0 } => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^ missing field `a`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |         Foo::Baz { bb: 1.0, a } => (),\n+   |                           ~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |         Foo::Baz { bb: 1.0, .. } => (),\n+   |                           ~~~~~~\n+\n+error[E0026]: variant `Foo::Bar` does not have a field named `aa`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:20:23\n+   |\n+LL |         Foo::Bar { a, aa: \"\", c } => (),\n+   |                       ^^ variant `Foo::Bar` does not have this field\n+\n+error[E0027]: pattern does not mention field `b`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:20:9\n+   |\n+LL |         Foo::Bar { a, aa: \"\", c } => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `b`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |         Foo::Bar { a, aa: \"\", c, b } => (),\n+   |                                ~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |         Foo::Bar { a, aa: \"\", c, .. } => (),\n+   |                                ~~~~~~\n+\n+error[E0026]: variant `Foo::Baz` does not have a field named `bb`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:23:20\n+   |\n+LL |         Foo::Baz { bb: \"\" } => (),\n+   |                    ^^ variant `Foo::Baz` does not have this field\n+\n+error[E0027]: pattern does not mention field `a`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:23:9\n+   |\n+LL |         Foo::Baz { bb: \"\" } => (),\n+   |         ^^^^^^^^^^^^^^^^^^^ missing field `a`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |         Foo::Baz { bb: \"\", a } => (),\n+   |                          ~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |         Foo::Baz { bb: \"\", .. } => (),\n+   |                          ~~~~~~\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0026, E0027.\n+For more information about an error, try `rustc --explain E0026`."}]}