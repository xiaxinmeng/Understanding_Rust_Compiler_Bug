{"sha": "a0ab5a3651f5cb30efa2f82a3ee15a7df479080a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwYWI1YTM2NTFmNWNiMzBlZmEyZjgyYTNlZTE1YTdkZjQ3OTA4MGE=", "commit": {"author": {"name": "ksqsf", "email": "i@ksqsf.moe", "date": "2019-07-31T16:26:47Z"}, "committer": {"name": "ksqsf", "email": "i@ksqsf.moe", "date": "2019-07-31T16:26:47Z"}, "message": "Add Result::cloned{,_err} and Result::copied{,_err}", "tree": {"sha": "b5617fe4b7f1d6638553f89374f325ad748aea33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5617fe4b7f1d6638553f89374f325ad748aea33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0ab5a3651f5cb30efa2f82a3ee15a7df479080a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ab5a3651f5cb30efa2f82a3ee15a7df479080a", "html_url": "https://github.com/rust-lang/rust/commit/a0ab5a3651f5cb30efa2f82a3ee15a7df479080a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0ab5a3651f5cb30efa2f82a3ee15a7df479080a/comments", "author": {"login": "ksqsf", "id": 23358293, "node_id": "MDQ6VXNlcjIzMzU4Mjkz", "avatar_url": "https://avatars.githubusercontent.com/u/23358293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksqsf", "html_url": "https://github.com/ksqsf", "followers_url": "https://api.github.com/users/ksqsf/followers", "following_url": "https://api.github.com/users/ksqsf/following{/other_user}", "gists_url": "https://api.github.com/users/ksqsf/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksqsf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksqsf/subscriptions", "organizations_url": "https://api.github.com/users/ksqsf/orgs", "repos_url": "https://api.github.com/users/ksqsf/repos", "events_url": "https://api.github.com/users/ksqsf/events{/privacy}", "received_events_url": "https://api.github.com/users/ksqsf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ksqsf", "id": 23358293, "node_id": "MDQ6VXNlcjIzMzU4Mjkz", "avatar_url": "https://avatars.githubusercontent.com/u/23358293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksqsf", "html_url": "https://github.com/ksqsf", "followers_url": "https://api.github.com/users/ksqsf/followers", "following_url": "https://api.github.com/users/ksqsf/following{/other_user}", "gists_url": "https://api.github.com/users/ksqsf/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksqsf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksqsf/subscriptions", "organizations_url": "https://api.github.com/users/ksqsf/orgs", "repos_url": "https://api.github.com/users/ksqsf/repos", "events_url": "https://api.github.com/users/ksqsf/events{/privacy}", "received_events_url": "https://api.github.com/users/ksqsf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9152fe4ea053a29469691349f4b63aa94c9aac56", "url": "https://api.github.com/repos/rust-lang/rust/commits/9152fe4ea053a29469691349f4b63aa94c9aac56", "html_url": "https://github.com/rust-lang/rust/commit/9152fe4ea053a29469691349f4b63aa94c9aac56"}], "stats": {"total": 160, "additions": 160, "deletions": 0}, "files": [{"sha": "a8f0f422cb4d7ef7a7a805b0d92403f47f0b2aa2", "filename": "src/libcore/result.rs", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/a0ab5a3651f5cb30efa2f82a3ee15a7df479080a/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0ab5a3651f5cb30efa2f82a3ee15a7df479080a/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=a0ab5a3651f5cb30efa2f82a3ee15a7df479080a", "patch": "@@ -820,6 +820,166 @@ impl<T, E> Result<T, E> {\n     }\n }\n \n+impl<T: Copy, E> Result<&T, E> {\n+    /// Maps a `Result<&T, E>` to a `Result<T, E>` by copying the contents of the\n+    /// `Ok` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_copied)]\n+    /// let val = 12;\n+    /// let x = Ok(&val);\n+    /// assert_eq!(x, Ok(&12));\n+    /// let copied = x.copied();\n+    /// assert_eq!(copied, Ok(12));\n+    /// ```\n+    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"XXXXX\")]\n+    fn copied(self) -> Result<T, E> {\n+        self.map(|&t| t)\n+    }\n+}\n+\n+impl<T: Copy, E> Result<&mut T, E> {\n+    /// Maps a `Result<&mut T, E>` to a `Result<T, E>` by copying the contents of the\n+    /// `Ok` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_copied)]\n+    /// let val = 12;\n+    /// let x = Ok(&mut val);\n+    /// assert_eq!(x, Ok(&mut 12));\n+    /// let copied = x.copied();\n+    /// assert_eq!(copied, Ok(12));\n+    /// ```\n+    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"XXXXX\")]\n+    fn copied(self) -> Result<T, E> {\n+        self.map(|&mut t| t)\n+    }\n+}\n+\n+impl<T, E: Copy> Result<T, &E> {\n+    /// Maps a `Result<T, &E>` to a `Result<T, E>` by copying the contents of the\n+    /// `Err` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_copied)]\n+    /// let val = 12;\n+    /// let x = Err(&val);\n+    /// assert_eq!(x, Err(&12));\n+    /// let copied = x.copied_err();\n+    /// assert_eq!(copied, Err(12));\n+    /// ```\n+    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"XXXXX\")]\n+    fn copied_err(self) -> Result<T, E> {\n+        self.map_err(|&e| e)\n+    }\n+}\n+\n+impl<T, E: Copy> Result<T, &mut E> {\n+    /// Maps a `Result<T, &mut E>` to a `Result<T, E>` by copying the contents of the\n+    /// `Err` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_copied)]\n+    /// let val = 12;\n+    /// let x = Err(&mut val);\n+    /// assert_eq!(x, Err(&mut 12));\n+    /// let copied = x.copied();\n+    /// assert_eq!(cloned, Err(12));\n+    /// ```\n+    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"XXXXX\")]\n+    fn copied_err(self) -> Result<T, E> {\n+        self.map_err(|&mut e| e)\n+    }\n+}\n+\n+impl<T: Clone, E> Result<&T, E> {\n+    /// Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the contents of the\n+    /// `Ok` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_cloned)]\n+    /// let val = 12;\n+    /// let x = Ok(&val);\n+    /// assert_eq!(x, Ok(&12));\n+    /// let cloned = x.cloned();\n+    /// assert_eq!(cloned, Ok(12));\n+    /// ```\n+    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"XXXXX\")]\n+    fn cloned(self) -> Result<T, E> {\n+        self.map(|t| t.clone())\n+    }\n+}\n+\n+impl<T: Clone, E> Result<&mut T, E> {\n+    /// Maps a `Result<&mut T, E>` to a `Result<T, E>` by cloning the contents of the\n+    /// `Ok` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_cloned)]\n+    /// let val = 12;\n+    /// let x = Ok(&mut val);\n+    /// assert_eq!(x, Ok(&mut 12));\n+    /// let cloned = x.cloned();\n+    /// assert_eq!(cloned, Ok(12));\n+    /// ```\n+    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"XXXXX\")]\n+    fn cloned(self) -> Result<T, E> {\n+        self.map(|t| t.clone())\n+    }\n+}\n+\n+impl<T, E: Clone> Result<T, &mut E> {\n+    /// Maps a `Result<T, &E>` to a `Result<T, E>` by cloning the contents of the\n+    /// `Err` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_cloned)]\n+    /// let val = 12;\n+    /// let x = Err(&mut val);\n+    /// assert_eq!(x, Err(&mut 12));\n+    /// let cloned = x.cloned();\n+    /// assert_eq!(cloned, Err(12));\n+    /// ```\n+    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"XXXXX\")]\n+    fn cloned_err(self) -> Result<T, E> {\n+        self.map_err(|e| e.clone())\n+    }\n+}\n+\n+impl<T, E: Clone> Result<T, &mut E> {\n+    /// Maps a `Result<T, &mut E>` to a `Result<T, E>` by cloning the contents of the\n+    /// `Err` part.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_cloned)]\n+    /// let val = 12;\n+    /// let x = Err(&mut val);\n+    /// assert_eq!(x, Err(&mut 12));\n+    /// let cloned = x.cloned();\n+    /// assert_eq!(cloned, Err(12));\n+    /// ```\n+    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"XXXXX\")]\n+    fn cloned_err(self) -> Result<T, E> {\n+        self.map_err(|e| e.clone())\n+    }\n+}\n+\n impl<T, E: fmt::Debug> Result<T, E> {\n     /// Unwraps a result, yielding the content of an [`Ok`].\n     ///"}]}