{"sha": "45263fc66d253f762b3880764ae48611a25bf887", "node_id": "C_kwDOAAsO6NoAKDQ1MjYzZmM2NmQyNTNmNzYyYjM4ODA3NjRhZTQ4NjExYTI1YmY4ODc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-08T15:24:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-08T15:24:57Z"}, "message": "Auto merge of #99054 - Dylan-DPC:rollup-0zuhhds, r=Dylan-DPC\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #98533 (Add a `-Zdump-drop-tracking-cfg` debugging flag)\n - #98654 (An optimization for `pest-2.1.3`)\n - #98657 (Migrate some diagnostics from `rustc_const_eval` to `SessionDiagnostic`)\n - #98794 (Highlight conflicting param-env candidates)\n\nFailed merges:\n\n - #98957 ( don't allow ZST in ScalarInt )\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "bdc7f04fb25ba235bff396b519ac3a567cf6e6dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdc7f04fb25ba235bff396b519ac3a567cf6e6dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45263fc66d253f762b3880764ae48611a25bf887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45263fc66d253f762b3880764ae48611a25bf887", "html_url": "https://github.com/rust-lang/rust/commit/45263fc66d253f762b3880764ae48611a25bf887", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45263fc66d253f762b3880764ae48611a25bf887/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbdb07f4e7f4666085aec4b1ed2fd05817dc42cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdb07f4e7f4666085aec4b1ed2fd05817dc42cf", "html_url": "https://github.com/rust-lang/rust/commit/fbdb07f4e7f4666085aec4b1ed2fd05817dc42cf"}, {"sha": "54dde8678b2c822af8000a9002f18c8a573938f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/54dde8678b2c822af8000a9002f18c8a573938f5", "html_url": "https://github.com/rust-lang/rust/commit/54dde8678b2c822af8000a9002f18c8a573938f5"}], "stats": {"total": 517, "additions": 372, "deletions": 145}, "files": [{"sha": "268af59aa891ca002f922b7228d2652618c14ed1", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -3813,6 +3813,7 @@ dependencies = [\n  \"atty\",\n  \"rustc_data_structures\",\n  \"rustc_error_messages\",\n+ \"rustc_hir\",\n  \"rustc_lint_defs\",\n  \"rustc_macros\",\n  \"rustc_serialize\","}, {"sha": "a463fe7b970f46a2a084254fd07bf786cb8b9d86", "filename": "compiler/rustc_const_eval/src/errors.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ferrors.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -0,0 +1,89 @@\n+use rustc_hir::ConstContext;\n+use rustc_macros::SessionDiagnostic;\n+use rustc_span::Span;\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::unstable_in_stable)]\n+pub(crate) struct UnstableInStable {\n+    pub gate: String,\n+    #[primary_span]\n+    pub span: Span,\n+    #[suggestion(\n+        const_eval::unstable_sugg,\n+        code = \"#[rustc_const_unstable(feature = \\\"...\\\", issue = \\\"...\\\")]\\n\",\n+        applicability = \"has-placeholders\"\n+    )]\n+    #[suggestion(\n+        const_eval::bypass_sugg,\n+        code = \"#[rustc_allow_const_fn_unstable({gate})]\\n\",\n+        applicability = \"has-placeholders\"\n+    )]\n+    pub attr_span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::thread_local_access, code = \"E0625\")]\n+pub(crate) struct NonConstOpErr {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::static_access, code = \"E0013\")]\n+#[help]\n+pub(crate) struct StaticAccessErr {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: ConstContext,\n+    #[note(const_eval::teach_note)]\n+    #[help(const_eval::teach_help)]\n+    pub teach: Option<()>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::raw_ptr_to_int)]\n+#[note]\n+#[note(const_eval::note2)]\n+pub(crate) struct RawPtrToIntErr {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::raw_ptr_comparison)]\n+#[note]\n+pub(crate) struct RawPtrComparisonErr {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::panic_non_str)]\n+pub(crate) struct PanicNonStrErr {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::mut_deref, code = \"E0658\")]\n+pub(crate) struct MutDerefErr {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: ConstContext,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::transient_mut_borrow, code = \"E0658\")]\n+pub(crate) struct TransientMutBorrowErr {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: ConstContext,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(const_eval::transient_mut_borrow_raw, code = \"E0658\")]\n+pub(crate) struct TransientMutBorrowErrRaw {\n+    #[primary_span]\n+    pub span: Span,\n+    pub kind: ConstContext,\n+}"}, {"sha": "d65d4f7eb720ec4e3cc1981d133759739c792453", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -31,6 +31,7 @@ extern crate tracing;\n extern crate rustc_middle;\n \n pub mod const_eval;\n+mod errors;\n pub mod interpret;\n pub mod transform;\n pub mod util;"}, {"sha": "3dcd96df33cf50dc92b0ed114597effc2a8d626a", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -1,6 +1,6 @@\n //! The `Visitor` responsible for actually checking a `mir::Body` for invalid operations.\n \n-use rustc_errors::{Applicability, Diagnostic, ErrorGuaranteed};\n+use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n@@ -24,6 +24,7 @@ use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop, NeedsNonConstDro\n use super::resolver::FlowSensitiveAnalysis;\n use super::{ConstCx, Qualif};\n use crate::const_eval::is_unstable_const_fn;\n+use crate::errors::UnstableInStable;\n \n type QualifResults<'mir, 'tcx, Q> =\n     rustc_mir_dataflow::ResultsCursor<'mir, 'tcx, FlowSensitiveAnalysis<'mir, 'mir, 'tcx, Q>>;\n@@ -1026,23 +1027,5 @@ fn is_int_bool_or_char(ty: Ty<'_>) -> bool {\n fn emit_unstable_in_stable_error(ccx: &ConstCx<'_, '_>, span: Span, gate: Symbol) {\n     let attr_span = ccx.tcx.def_span(ccx.def_id()).shrink_to_lo();\n \n-    ccx.tcx\n-        .sess\n-        .struct_span_err(\n-            span,\n-            &format!(\"const-stable function cannot use `#[feature({})]`\", gate.as_str()),\n-        )\n-        .span_suggestion(\n-            attr_span,\n-            \"if it is not part of the public API, make this function unstably const\",\n-            concat!(r#\"#[rustc_const_unstable(feature = \"...\", issue = \"...\")]\"#, '\\n'),\n-            Applicability::HasPlaceholders,\n-        )\n-        .span_suggestion(\n-            attr_span,\n-            \"otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\",\n-            format!(\"#[rustc_allow_const_fn_unstable({})]\\n\", gate),\n-            Applicability::MaybeIncorrect,\n-        )\n-        .emit();\n+    ccx.tcx.sess.emit_err(UnstableInStable { gate: gate.to_string(), span, attr_span });\n }"}, {"sha": "17376e59e09cc3715d3ab9670530391b6fc83012", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 29, "deletions": 64, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -1,7 +1,9 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n use hir::def_id::LocalDefId;\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{\n+    error_code, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed,\n+};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -20,6 +22,10 @@ use rustc_span::{BytePos, Pos, Span, Symbol};\n use rustc_trait_selection::traits::SelectionContext;\n \n use super::ConstCx;\n+use crate::errors::{\n+    MutDerefErr, NonConstOpErr, PanicNonStrErr, RawPtrComparisonErr, RawPtrToIntErr,\n+    StaticAccessErr, TransientMutBorrowErr, TransientMutBorrowErrRaw,\n+};\n use crate::util::{call_kind, CallDesugaringKind, CallKind};\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n@@ -590,17 +596,17 @@ impl<'tcx> NonConstOp<'tcx> for TransientMutBorrow {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let raw = match self.0 {\n-            hir::BorrowKind::Raw => \"raw \",\n-            hir::BorrowKind::Ref => \"\",\n-        };\n-\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_mut_refs,\n-            span,\n-            &format!(\"{}mutable references are not allowed in {}s\", raw, ccx.const_kind()),\n-        )\n+        let kind = ccx.const_kind();\n+        match self.0 {\n+            hir::BorrowKind::Raw => ccx\n+                .tcx\n+                .sess\n+                .create_feature_err(TransientMutBorrowErrRaw { span, kind }, sym::const_mut_refs),\n+            hir::BorrowKind::Ref => ccx\n+                .tcx\n+                .sess\n+                .create_feature_err(TransientMutBorrowErr { span, kind }, sym::const_mut_refs),\n+        }\n     }\n }\n \n@@ -621,12 +627,9 @@ impl<'tcx> NonConstOp<'tcx> for MutDeref {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_mut_refs,\n-            span,\n-            &format!(\"mutation through a reference is not allowed in {}s\", ccx.const_kind()),\n-        )\n+        ccx.tcx\n+            .sess\n+            .create_feature_err(MutDerefErr { span, kind: ccx.const_kind() }, sym::const_mut_refs)\n     }\n }\n \n@@ -639,10 +642,7 @@ impl<'tcx> NonConstOp<'tcx> for PanicNonStr {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        ccx.tcx.sess.struct_span_err(\n-            span,\n-            \"argument to `panic!()` in a const context must have type `&str`\",\n-        )\n+        ccx.tcx.sess.create_err(PanicNonStrErr { span })\n     }\n }\n \n@@ -657,15 +657,7 @@ impl<'tcx> NonConstOp<'tcx> for RawPtrComparison {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = ccx\n-            .tcx\n-            .sess\n-            .struct_span_err(span, \"pointers cannot be reliably compared during const eval\");\n-        err.note(\n-            \"see issue #53020 <https://github.com/rust-lang/rust/issues/53020> \\\n-            for more information\",\n-        );\n-        err\n+        ccx.tcx.sess.create_err(RawPtrComparisonErr { span })\n     }\n }\n \n@@ -701,15 +693,7 @@ impl<'tcx> NonConstOp<'tcx> for RawPtrToIntCast {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = ccx\n-            .tcx\n-            .sess\n-            .struct_span_err(span, \"pointers cannot be cast to integers during const eval\");\n-        err.note(\"at compile-time, pointers do not have an integer value\");\n-        err.note(\n-            \"avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\",\n-        );\n-        err\n+        ccx.tcx.sess.create_err(RawPtrToIntErr { span })\n     }\n }\n \n@@ -730,24 +714,11 @@ impl<'tcx> NonConstOp<'tcx> for StaticAccess {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = struct_span_err!(\n-            ccx.tcx.sess,\n+        ccx.tcx.sess.create_err(StaticAccessErr {\n             span,\n-            E0013,\n-            \"{}s cannot refer to statics\",\n-            ccx.const_kind()\n-        );\n-        err.help(\n-            \"consider extracting the value of the `static` to a `const`, and referring to that\",\n-        );\n-        if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n-            err.note(\n-                \"`static` and `const` variables can refer to other `const` variables. \\\n-                    A `const` variable, however, cannot refer to a `static` variable.\",\n-            );\n-            err.help(\"To fix this, the value can be extracted to a `const` and then used.\");\n-        }\n-        err\n+            kind: ccx.const_kind(),\n+            teach: ccx.tcx.sess.teach(&error_code!(E0013)).then_some(()),\n+        })\n     }\n }\n \n@@ -760,13 +731,7 @@ impl<'tcx> NonConstOp<'tcx> for ThreadLocalAccess {\n         ccx: &ConstCx<'_, 'tcx>,\n         span: Span,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        struct_span_err!(\n-            ccx.tcx.sess,\n-            span,\n-            E0625,\n-            \"thread-local statics cannot be \\\n-            accessed at compile-time\"\n-        )\n+        ccx.tcx.sess.create_err(NonConstOpErr { span })\n     }\n }\n "}, {"sha": "1d3e33c81851f5cb84b1132f51fdda2a535f81ad", "filename": "compiler/rustc_error_messages/locales/en-US/builtin_macros.ftl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -1,5 +1,5 @@\n-builtin_macros-requires-cfg-pattern =\n+builtin-macros-requires-cfg-pattern =\n     macro requires a cfg-pattern as an argument\n     .label = cfg-pattern required\n \n-builtin_macros-expected-one-cfg-pattern = expected 1 cfg-pattern\n+builtin-macros-expected-one-cfg-pattern = expected 1 cfg-pattern"}, {"sha": "3f2ff86100160b0f2eead39e5ee5dbb1c696cee0", "filename": "compiler/rustc_error_messages/locales/en-US/const_eval.ftl", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fconst_eval.ftl?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -0,0 +1,31 @@\n+const-eval-unstable-in-stable =\n+    const-stable function cannot use `#[feature({$gate})]`\n+    .unstable-sugg = if it is not part of the public API, make this function unstably const\n+    .bypass-sugg = otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n+\n+const-eval-thread-local-access =\n+    thread-local statics cannot be accessed at compile-time\n+\n+const-eval-static-access =\n+    {$kind}s cannot refer to statics\n+    .help = consider extracting the value of the `static` to a `const`, and referring to that\n+    .teach-note = `static` and `const` variables can refer to other `const` variables. A `const` variable, however, cannot refer to a `static` variable.\n+    .teach-help = To fix this, the value can be extracted to a `const` and then used.\n+\n+const-eval-raw-ptr-to-int =\n+    pointers cannot be cast to integers during const eval\n+    .note = at compile-time, pointers do not have an integer value\n+    .note2 = avoiding this restriction via `transmute`, `union`, or raw pointers leads to compile-time undefined behavior\n+\n+const-eval-raw-ptr-comparison =\n+    pointers cannot be reliably compared during const eval\n+    .note = see issue #53020 <https://github.com/rust-lang/rust/issues/53020> for more information\n+\n+const-eval-panic-non-str = argument to `panic!()` in a const context must have type `&str`\n+\n+const-eval-mut-deref =\n+    mutation through a reference is not allowed in {$kind}s\n+\n+const-eval-transient-mut-borrow = mutable references are not allowed in {$kind}s\n+\n+const-eval-transient-mut-borrow-raw = raw mutable references are not allowed in {$kind}s"}, {"sha": "5a482bc5b2c392e311d0a22e093fedb216cf33e3", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -37,6 +37,7 @@ fluent_messages! {\n     parser => \"../locales/en-US/parser.ftl\",\n     privacy => \"../locales/en-US/privacy.ftl\",\n     typeck => \"../locales/en-US/typeck.ftl\",\n+    const_eval => \"../locales/en-US/const_eval.ftl\",\n }\n \n pub use fluent_generated::{self as fluent, DEFAULT_LOCALE_RESOURCES};"}, {"sha": "7d7e92c522922fbf99ba2ac57eb238023a85c715", "filename": "compiler/rustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2FCargo.toml?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -13,6 +13,7 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n unicode-width = \"0.1.4\"\n atty = \"0.2\""}, {"sha": "9429ad1a897453ec2dd7d63abf8eebf3f5f45ab7", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -5,6 +5,7 @@ use crate::{\n };\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_error_messages::FluentValue;\n+use rustc_hir as hir;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_span::edition::LATEST_STABLE_EDITION;\n use rustc_span::symbol::{Ident, Symbol};\n@@ -160,6 +161,16 @@ impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n     }\n }\n \n+impl IntoDiagnosticArg for hir::ConstContext {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Borrowed(match self {\n+            hir::ConstContext::ConstFn => \"constant function\",\n+            hir::ConstContext::Static(_) => \"static\",\n+            hir::ConstContext::Const => \"constant\",\n+        }))\n+    }\n+}\n+\n /// Trait implemented by error types. This should not be implemented manually. Instead, use\n /// `#[derive(SessionSubdiagnostic)]` -- see [rustc_macros::SessionSubdiagnostic].\n #[rustc_diagnostic_item = \"AddSubdiagnostic\"]"}, {"sha": "acd77f5d2ee9136b835cb3b9bc3758b7607020ef", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -1595,6 +1595,9 @@ impl fmt::Display for ConstContext {\n     }\n }\n \n+// NOTE: `IntoDiagnosticArg` impl for `ConstContext` lives in `rustc_errors`\n+// due to a cyclical dependency between hir that crate.\n+\n /// A literal.\n pub type Lit = Spanned<LitKind>;\n "}, {"sha": "1bb79a0264dd1c146f2fd77b125771513b08ebe2", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -649,6 +649,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(dlltool, Some(PathBuf::from(\"custom_dlltool.exe\")));\n     untracked!(dont_buffer_diagnostics, true);\n     untracked!(dump_dep_graph, true);\n+    untracked!(dump_drop_tracking_cfg, Some(\"cfg.dot\".to_string()));\n     untracked!(dump_mir, Some(String::from(\"abc\")));\n     untracked!(dump_mir_dataflow, true);\n     untracked!(dump_mir_dir, String::from(\"abc\"));"}, {"sha": "2758fcd1310fecff31a716a09c096b5ce3319f6b", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -189,9 +189,13 @@ pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::Tok\n             if let Entry::Message(Message { id: Identifier { name }, attributes, .. }) = entry {\n                 let _ = previous_defns.entry(name.to_string()).or_insert(ident_span);\n \n-                // `typeck-foo-bar` => `foo_bar`\n+                // `typeck-foo-bar` => `foo_bar` (in `typeck.ftl`)\n+                // `const-eval-baz` => `baz` (in `const_eval.ftl`)\n                 let snake_name = Ident::new(\n-                    &name.replace(&format!(\"{}-\", res.ident), \"\").replace(\"-\", \"_\"),\n+                    // FIXME: should probably trim prefix, not replace all occurrences\n+                    &name\n+                        .replace(&format!(\"{}-\", res.ident).replace(\"_\", \"-\"), \"\")\n+                        .replace(\"-\", \"_\"),\n                     span,\n                 );\n                 constants.extend(quote! {"}, {"sha": "fe7f72024d358476b49b46c7184e0f7270ad1793", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -546,9 +546,17 @@ pub enum SelectionError<'tcx> {\n     ErrorReporting,\n     /// Multiple applicable `impl`s where found. The `DefId`s correspond to\n     /// all the `impl`s' Items.\n-    Ambiguous(Vec<DefId>),\n+    Ambiguous(Vec<AmbiguousSelection>),\n }\n \n+#[derive(Copy, Clone, Debug)]\n+pub enum AmbiguousSelection {\n+    Impl(DefId),\n+    ParamEnv(Span),\n+}\n+\n+TrivialTypeTraversalAndLiftImpls! { AmbiguousSelection, }\n+\n /// When performing resolution, it is typically the case that there\n /// can be one of three outcomes:\n ///"}, {"sha": "b617eb02eb6e3697cb057739e0bede19ab7d532a", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -1246,6 +1246,8 @@ options! {\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) \\\n         (default: no)\"),\n+    dump_drop_tracking_cfg: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+        \"dump drop-tracking control-flow graph as a `.dot` file (default: no)\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"dump MIR state to file.\n         `val` is used to select which passes and functions to dump. For example:"}, {"sha": "1eee0c3163d400d8fe8cc26ee04e2fa4419084f3", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -2,7 +2,7 @@ use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n use crate::config::{self, CrateType, OutputType, SwitchWithOptPath};\n-use crate::parse::ParseSess;\n+use crate::parse::{add_feature_diagnostics, ParseSess};\n use crate::search_paths::{PathKind, SearchPath};\n use crate::{filesearch, lint};\n \n@@ -458,6 +458,15 @@ impl Session {\n     ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         self.parse_sess.create_err(err)\n     }\n+    pub fn create_feature_err<'a>(\n+        &'a self,\n+        err: impl SessionDiagnostic<'a>,\n+        feature: Symbol,\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        let mut err = self.parse_sess.create_err(err);\n+        add_feature_diagnostics(&mut err, &self.parse_sess, feature);\n+        err\n+    }\n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n         self.parse_sess.emit_err(err)\n     }"}, {"sha": "aa1c91362891ba5fb7dc7c41864c9c9c1a38b126", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -23,7 +23,7 @@ use rustc_hir::GenericParam;\n use rustc_hir::Item;\n use rustc_hir::Node;\n use rustc_infer::infer::error_reporting::same_type_modulo_infer;\n-use rustc_infer::traits::TraitEngine;\n+use rustc_infer::traits::{AmbiguousSelection, TraitEngine};\n use rustc_middle::thir::abstract_const::NotConstEvaluatable;\n use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::error::ExpectedFound;\n@@ -1404,7 +1404,7 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n     fn annotate_source_of_ambiguity(\n         &self,\n         err: &mut Diagnostic,\n-        impls: &[DefId],\n+        impls: &[AmbiguousSelection],\n         predicate: ty::Predicate<'tcx>,\n     );\n \n@@ -2020,6 +2020,14 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 );\n                 match selcx.select_from_obligation(&obligation) {\n                     Err(SelectionError::Ambiguous(impls)) if impls.len() > 1 => {\n+                        if self.is_tainted_by_errors() && subst.is_none() {\n+                            // If `subst.is_none()`, then this is probably two param-env\n+                            // candidates or impl candidates that are equal modulo lifetimes.\n+                            // Therefore, if we've already emitted an error, just skip this\n+                            // one, since it's not particularly actionable.\n+                            err.cancel();\n+                            return;\n+                        }\n                         self.annotate_source_of_ambiguity(&mut err, &impls, predicate);\n                     }\n                     _ => {\n@@ -2170,24 +2178,35 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n     fn annotate_source_of_ambiguity(\n         &self,\n         err: &mut Diagnostic,\n-        impls: &[DefId],\n+        impls: &[AmbiguousSelection],\n         predicate: ty::Predicate<'tcx>,\n     ) {\n         let mut spans = vec![];\n         let mut crates = vec![];\n         let mut post = vec![];\n-        for def_id in impls {\n-            match self.tcx.span_of_impl(*def_id) {\n-                Ok(span) => spans.push(span),\n-                Err(name) => {\n-                    crates.push(name);\n-                    if let Some(header) = to_pretty_impl_header(self.tcx, *def_id) {\n-                        post.push(header);\n+        let mut or_where_clause = false;\n+        for ambig in impls {\n+            match ambig {\n+                AmbiguousSelection::Impl(def_id) => match self.tcx.span_of_impl(*def_id) {\n+                    Ok(span) => spans.push(span),\n+                    Err(name) => {\n+                        crates.push(name);\n+                        if let Some(header) = to_pretty_impl_header(self.tcx, *def_id) {\n+                            post.push(header);\n+                        }\n                     }\n+                },\n+                AmbiguousSelection::ParamEnv(span) => {\n+                    or_where_clause = true;\n+                    spans.push(*span);\n                 }\n             }\n         }\n-        let msg = format!(\"multiple `impl`s satisfying `{}` found\", predicate);\n+        let msg = format!(\n+            \"multiple `impl`s{} satisfying `{}` found\",\n+            if or_where_clause { \" or `where` clauses\" } else { \"\" },\n+            predicate\n+        );\n         let mut crate_names: Vec<_> = crates.iter().map(|n| format!(\"`{}`\", n)).collect();\n         crate_names.sort();\n         crate_names.dedup();"}, {"sha": "21e14eae0ee27bf22de576d1c236d38cd2ec9ee2", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -6,9 +6,11 @@\n //!\n //! [rustc dev guide]:https://rustc-dev-guide.rust-lang.org/traits/resolution.html#candidate-assembly\n use hir::LangItem;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_infer::traits::TraitEngine;\n+use rustc_infer::traits::util::elaborate_predicates_with_span;\n+use rustc_infer::traits::{AmbiguousSelection, TraitEngine};\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n use rustc_lint_defs::builtin::DEREF_INTO_DYN_SUPERTRAIT;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n@@ -199,11 +201,48 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     // and report ambiguity.\n                     if i > 1 {\n                         debug!(\"multiple matches, ambig\");\n+\n+                        // Collect a list of (probable) spans that point to a param-env candidate\n+                        let tcx = self.infcx.tcx;\n+                        let owner = stack.obligation.cause.body_id.owner.to_def_id();\n+                        let predicates = tcx.predicates_of(owner).instantiate_identity(tcx);\n+                        let param_env_spans: FxHashMap<_, _> = elaborate_predicates_with_span(\n+                            tcx,\n+                            std::iter::zip(predicates.predicates, predicates.spans),\n+                        )\n+                        .filter_map(|obligation| {\n+                            let kind = obligation.predicate.kind();\n+                            if let ty::PredicateKind::Trait(trait_pred) = kind.skip_binder() {\n+                                if trait_pred.trait_ref\n+                                    == ty::TraitRef::identity(tcx, trait_pred.def_id())\n+                                        .skip_binder()\n+                                {\n+                                    // HACK: Remap the `Self: Trait` predicate that every trait has to a more useful span\n+                                    Some((\n+                                        kind.rebind(trait_pred),\n+                                        tcx.def_span(trait_pred.def_id()),\n+                                    ))\n+                                } else {\n+                                    Some((kind.rebind(trait_pred), obligation.cause.span))\n+                                }\n+                            } else {\n+                                None\n+                            }\n+                        })\n+                        .collect();\n+\n                         return Err(Ambiguous(\n                             candidates\n                                 .into_iter()\n                                 .filter_map(|c| match c.candidate {\n-                                    SelectionCandidate::ImplCandidate(def_id) => Some(def_id),\n+                                    SelectionCandidate::ImplCandidate(def_id) => {\n+                                        Some(AmbiguousSelection::Impl(def_id))\n+                                    }\n+                                    SelectionCandidate::ParamCandidate(predicate) => {\n+                                        Some(AmbiguousSelection::ParamEnv(\n+                                            *param_env_spans.get(&predicate)?,\n+                                        ))\n+                                    }\n                                     _ => None,\n                                 })\n                                 .collect(),"}, {"sha": "94ca138b9d20d64df7af6439cc20081fcdd91d21", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -58,10 +58,7 @@ pub fn search_for_structural_match_violation<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n ) -> Option<NonStructuralMatchTy<'tcx>> {\n-    // FIXME: we should instead pass in an `infcx` from the outside.\n-    tcx.infer_ctxt().enter(|infcx| {\n-        ty.visit_with(&mut Search { infcx, span, seen: FxHashSet::default() }).break_value()\n-    })\n+    ty.visit_with(&mut Search { tcx, span, seen: FxHashSet::default() }).break_value()\n }\n \n /// This method returns true if and only if `adt_ty` itself has been marked as\n@@ -114,27 +111,23 @@ fn type_marked_structural<'tcx>(\n /// This implements the traversal over the structure of a given type to try to\n /// find instances of ADTs (specifically structs or enums) that do not implement\n /// the structural-match traits (`StructuralPartialEq` and `StructuralEq`).\n-struct Search<'a, 'tcx> {\n+struct Search<'tcx> {\n     span: Span,\n \n-    infcx: InferCtxt<'a, 'tcx>,\n+    tcx: TyCtxt<'tcx>,\n \n     /// Tracks ADTs previously encountered during search, so that\n     /// we will not recur on them again.\n     seen: FxHashSet<hir::def_id::DefId>,\n }\n \n-impl<'a, 'tcx> Search<'a, 'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n-    }\n-\n+impl<'tcx> Search<'tcx> {\n     fn type_marked_structural(&self, adt_ty: Ty<'tcx>) -> bool {\n-        adt_ty.is_structural_eq_shallow(self.tcx())\n+        adt_ty.is_structural_eq_shallow(self.tcx)\n     }\n }\n \n-impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n+impl<'tcx> TypeVisitor<'tcx> for Search<'tcx> {\n     type BreakTy = NonStructuralMatchTy<'tcx>;\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n@@ -193,7 +186,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 return ControlFlow::CONTINUE;\n             }\n             ty::Array(_, n)\n-                if { n.try_eval_usize(self.tcx(), ty::ParamEnv::reveal_all()) == Some(0) } =>\n+                if { n.try_eval_usize(self.tcx, ty::ParamEnv::reveal_all()) == Some(0) } =>\n             {\n                 // rust-lang/rust#62336: ignore type of contents\n                 // for empty array.\n@@ -214,7 +207,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 bug!(\"unexpected type during structural-match checking: {:?}\", ty);\n             }\n             ty::Error(_) => {\n-                self.tcx().sess.delay_span_bug(self.span, \"ty::Error in structural-match check\");\n+                self.tcx.sess.delay_span_bug(self.span, \"ty::Error in structural-match check\");\n                 // We still want to check other types after encountering an error,\n                 // as this may still emit relevant errors.\n                 return ControlFlow::CONTINUE;\n@@ -244,9 +237,9 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n \n         // even though we skip super_visit_with, we must recur on\n         // fields of ADT.\n-        let tcx = self.tcx();\n+        let tcx = self.tcx;\n         adt_def.all_fields().map(|field| field.ty(tcx, substs)).try_for_each(|field_ty| {\n-            let ty = self.tcx().normalize_erasing_regions(ty::ParamEnv::empty(), field_ty);\n+            let ty = self.tcx.normalize_erasing_regions(ty::ParamEnv::empty(), field_ty);\n             debug!(\"structural-match ADT: field_ty={:?}, ty={:?}\", field_ty, ty);\n             ty.visit_with(self)\n         })"}, {"sha": "887c791af76c2c08dc51722ba05e20006db6d7f8", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -109,7 +109,7 @@ rustc_index::newtype_index! {\n }\n \n /// Identifies a value whose drop state we need to track.\n-#[derive(PartialEq, Eq, Hash, Debug, Clone, Copy)]\n+#[derive(PartialEq, Eq, Hash, Clone, Copy)]\n enum TrackedValue {\n     /// Represents a named variable, such as a let binding, parameter, or upvar.\n     ///\n@@ -121,6 +121,21 @@ enum TrackedValue {\n     Temporary(HirId),\n }\n \n+impl Debug for TrackedValue {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        ty::tls::with_opt(|opt_tcx| {\n+            if let Some(tcx) = opt_tcx {\n+                write!(f, \"{}\", tcx.hir().node_to_string(self.hir_id()))\n+            } else {\n+                match self {\n+                    Self::Variable(hir_id) => write!(f, \"Variable({:?})\", hir_id),\n+                    Self::Temporary(hir_id) => write!(f, \"Temporary({:?})\", hir_id),\n+                }\n+            }\n+        })\n+    }\n+}\n+\n impl TrackedValue {\n     fn hir_id(&self) -> HirId {\n         match self {\n@@ -148,7 +163,7 @@ enum TrackedValueConversionError {\n     /// Place projects are not currently supported.\n     ///\n     /// The reasoning around these is kind of subtle, so we choose to be more\n-    /// conservative around these for now. There is not reason in theory we\n+    /// conservative around these for now. There is no reason in theory we\n     /// cannot support these, we just have not implemented it yet.\n     PlaceProjectionsNotSupported,\n }"}, {"sha": "111d534abf83bc9e1fee448df8c10bdbb4862dd0", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -33,6 +33,9 @@ pub(super) fn build_control_flow_graph<'tcx>(\n     intravisit::walk_body(&mut drop_range_visitor, body);\n \n     drop_range_visitor.drop_ranges.process_deferred_edges();\n+    if let Some(filename) = &tcx.sess.opts.debugging_opts.dump_drop_tracking_cfg {\n+        super::cfg_visualize::write_graph_to_file(&drop_range_visitor.drop_ranges, filename, tcx);\n+    }\n \n     (drop_range_visitor.drop_ranges, drop_range_visitor.places.borrowed_temporaries)\n }\n@@ -126,13 +129,14 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n     /// ExprUseVisitor's consume callback doesn't go deep enough for our purposes in all\n     /// expressions. This method consumes a little deeper into the expression when needed.\n     fn consume_expr(&mut self, expr: &hir::Expr<'_>) {\n-        debug!(\"consuming expr {:?}, count={:?}\", expr.hir_id, self.expr_index);\n+        debug!(\"consuming expr {:?}, count={:?}\", expr.kind, self.expr_index);\n         let places = self\n             .places\n             .consumed\n             .get(&expr.hir_id)\n             .map_or(vec![], |places| places.iter().cloned().collect());\n         for place in places {\n+            trace!(?place, \"consuming place\");\n             for_each_consumable(self.hir, place, |value| self.record_drop(value));\n         }\n     }"}, {"sha": "c0a0bfe8e1c00a98cb53dd41b5d1e6e9bb7ba82c", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_visualize.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -2,29 +2,43 @@\n //! flow graph when needed for debugging.\n \n use rustc_graphviz as dot;\n+use rustc_middle::ty::TyCtxt;\n \n use super::{DropRangesBuilder, PostOrderId};\n \n /// Writes the CFG for DropRangesBuilder to a .dot file for visualization.\n ///\n /// It is not normally called, but is kept around to easily add debugging\n /// code when needed.\n-#[allow(dead_code)]\n-pub(super) fn write_graph_to_file(drop_ranges: &DropRangesBuilder, filename: &str) {\n-    dot::render(drop_ranges, &mut std::fs::File::create(filename).unwrap()).unwrap();\n+pub(super) fn write_graph_to_file(\n+    drop_ranges: &DropRangesBuilder,\n+    filename: &str,\n+    tcx: TyCtxt<'_>,\n+) {\n+    dot::render(\n+        &DropRangesGraph { drop_ranges, tcx },\n+        &mut std::fs::File::create(filename).unwrap(),\n+    )\n+    .unwrap();\n }\n \n-impl<'a> dot::GraphWalk<'a> for DropRangesBuilder {\n+struct DropRangesGraph<'a, 'tcx> {\n+    drop_ranges: &'a DropRangesBuilder,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'a> dot::GraphWalk<'a> for DropRangesGraph<'_, '_> {\n     type Node = PostOrderId;\n \n     type Edge = (PostOrderId, PostOrderId);\n \n     fn nodes(&'a self) -> dot::Nodes<'a, Self::Node> {\n-        self.nodes.iter_enumerated().map(|(i, _)| i).collect()\n+        self.drop_ranges.nodes.iter_enumerated().map(|(i, _)| i).collect()\n     }\n \n     fn edges(&'a self) -> dot::Edges<'a, Self::Edge> {\n-        self.nodes\n+        self.drop_ranges\n+            .nodes\n             .iter_enumerated()\n             .flat_map(|(i, node)| {\n                 if node.successors.len() == 0 {\n@@ -45,7 +59,7 @@ impl<'a> dot::GraphWalk<'a> for DropRangesBuilder {\n     }\n }\n \n-impl<'a> dot::Labeller<'a> for DropRangesBuilder {\n+impl<'a> dot::Labeller<'a> for DropRangesGraph<'_, '_> {\n     type Node = PostOrderId;\n \n     type Edge = (PostOrderId, PostOrderId);\n@@ -61,15 +75,15 @@ impl<'a> dot::Labeller<'a> for DropRangesBuilder {\n     fn node_label(&'a self, n: &Self::Node) -> dot::LabelText<'a> {\n         dot::LabelText::LabelStr(\n             format!(\n-                \"{:?}, local_id: {}\",\n-                n,\n-                self.post_order_map\n+                \"{n:?}: {}\",\n+                self.drop_ranges\n+                    .post_order_map\n                     .iter()\n                     .find(|(_hir_id, &post_order_id)| post_order_id == *n)\n-                    .map_or(\"<unknown>\".into(), |(hir_id, _)| format!(\n-                        \"{}\",\n-                        hir_id.local_id.index()\n-                    ))\n+                    .map_or(\"<unknown>\".into(), |(hir_id, _)| self\n+                        .tcx\n+                        .hir()\n+                        .node_to_string(*hir_id))\n             )\n             .into(),\n         )"}, {"sha": "67cc46f21f00b0dce7bd725a2ef6405ff56c6484", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -75,6 +75,7 @@ impl<'tcx> ExprUseDelegate<'tcx> {\n         if !self.places.consumed.contains_key(&consumer) {\n             self.places.consumed.insert(consumer, <_>::default());\n         }\n+        debug!(?consumer, ?target, \"mark_consumed\");\n         self.places.consumed.get_mut(&consumer).map(|places| places.insert(target));\n     }\n \n@@ -136,13 +137,16 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n         diag_expr_id: HirId,\n     ) {\n-        let parent = match self.tcx.hir().find_parent_node(place_with_id.hir_id) {\n+        let hir = self.tcx.hir();\n+        let parent = match hir.find_parent_node(place_with_id.hir_id) {\n             Some(parent) => parent,\n             None => place_with_id.hir_id,\n         };\n         debug!(\n-            \"consume {:?}; diag_expr_id={:?}, using parent {:?}\",\n-            place_with_id, diag_expr_id, parent\n+            \"consume {:?}; diag_expr_id={}, using parent {}\",\n+            place_with_id,\n+            hir.node_to_string(diag_expr_id),\n+            hir.node_to_string(parent)\n         );\n         place_with_id\n             .try_into()"}, {"sha": "2d60b18b1f208eae86ab14800e0e4053f93304d4", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -4,7 +4,13 @@ error[E0283]: type annotations needed: cannot satisfy `&'a T: Foo`\n LL |     where &'a T : Foo,\n    |                   ^^^\n    |\n-   = note: cannot satisfy `&'a T: Foo`\n+note: multiple `impl`s or `where` clauses satisfying `&'a T: Foo` found\n+  --> $DIR/issue-21974.rs:11:19\n+   |\n+LL |     where &'a T : Foo,\n+   |                   ^^^\n+LL |           &'b T : Foo\n+   |                   ^^^\n \n error: aborting due to previous error\n "}, {"sha": "50d7f988e194cdcd30d2fc72c9dd6a639eaebcd4", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -4,7 +4,11 @@ error[E0283]: type annotations needed: cannot satisfy `T0: Trait0<'l0>`\n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n    |                                                         ^^^^^^^^^^^\n    |\n-   = note: cannot satisfy `T0: Trait0<'l0>`\n+note: multiple `impl`s or `where` clauses satisfying `T0: Trait0<'l0>` found\n+  --> $DIR/issue-24424.rs:4:57\n+   |\n+LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n+   |                                                         ^^^^^^^^^^^       ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "a78b3eaf6258de856afff0a18066d08824939ad1", "filename": "src/test/ui/lifetimes/issue-34979.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -4,7 +4,13 @@ error[E0283]: type annotations needed: cannot satisfy `&'a (): Foo`\n LL |     &'a (): Foo,\n    |             ^^^\n    |\n-   = note: cannot satisfy `&'a (): Foo`\n+note: multiple `impl`s or `where` clauses satisfying `&'a (): Foo` found\n+  --> $DIR/issue-34979.rs:6:13\n+   |\n+LL |     &'a (): Foo,\n+   |             ^^^\n+LL |     &'static (): Foo;\n+   |                  ^^^\n \n error: aborting due to previous error\n "}, {"sha": "9e80497ca6e92a1cf95c3f58df7ca752a728e388", "filename": "src/test/ui/traits/issue-85735.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -4,7 +4,14 @@ error[E0283]: type annotations needed: cannot satisfy `T: FnMut<(&'a (),)>`\n LL |     T: FnMut(&'a ()),\n    |        ^^^^^^^^^^^^^\n    |\n-   = note: cannot satisfy `T: FnMut<(&'a (),)>`\n+note: multiple `impl`s or `where` clauses satisfying `T: FnMut<(&'a (),)>` found\n+  --> $DIR/issue-85735.rs:7:8\n+   |\n+LL |     T: FnMut(&'a ()),\n+   |        ^^^^^^^^^^^^^\n+LL |\n+LL |     T: FnMut(&'b ()),\n+   |        ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "d15fd23418bb0be17020759ab5df157b6891b0b3", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45263fc66d253f762b3880764ae48611a25bf887/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45263fc66d253f762b3880764ae48611a25bf887/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=45263fc66d253f762b3880764ae48611a25bf887", "patch": "@@ -4,7 +4,13 @@ error[E0283]: type annotations needed: cannot satisfy `&'a T: Foo`\n LL |     where &'a T : Foo,\n    |                   ^^^\n    |\n-   = note: cannot satisfy `&'a T: Foo`\n+note: multiple `impl`s or `where` clauses satisfying `&'a T: Foo` found\n+  --> $DIR/issue-40294.rs:6:19\n+   |\n+LL |     where &'a T : Foo,\n+   |                   ^^^\n+LL |           &'b T : Foo\n+   |                   ^^^\n \n error: aborting due to previous error\n "}]}