{"sha": "a54a41ce47c149fd6587182a4ab87a146844f939", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NGE0MWNlNDdjMTQ5ZmQ2NTg3MTgyYTRhYjg3YTE0Njg0NGY5Mzk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-02-03T10:59:37Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: provide DisambiguatedDefPathData in ty::print.", "tree": {"sha": "f48533eece21012c999f971adfef58f4b056a48f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f48533eece21012c999f971adfef58f4b056a48f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a54a41ce47c149fd6587182a4ab87a146844f939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a54a41ce47c149fd6587182a4ab87a146844f939", "html_url": "https://github.com/rust-lang/rust/commit/a54a41ce47c149fd6587182a4ab87a146844f939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a54a41ce47c149fd6587182a4ab87a146844f939/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8619edede1496a8d9c4131f9cb2079e71dccd5fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8619edede1496a8d9c4131f9cb2079e71dccd5fb", "html_url": "https://github.com/rust-lang/rust/commit/8619edede1496a8d9c4131f9cb2079e71dccd5fb"}], "stats": {"total": 198, "additions": 127, "deletions": 71}, "files": [{"sha": "dca4ce4aef81773e9ac5879a6fd0e750560f53f9", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -679,13 +679,13 @@ impl DefPathData {\n                 return name\n             }\n             // note that this does not show up in user printouts\n-            CrateRoot => \"{{root}}\",\n+            CrateRoot => \"{{crate}}\",\n             Impl => \"{{impl}}\",\n-            Misc => \"{{?}}\",\n+            Misc => \"{{misc}}\",\n             ClosureExpr => \"{{closure}}\",\n             StructCtor => \"{{constructor}}\",\n             AnonConst => \"{{constant}}\",\n-            ImplTrait => \"{{impl-Trait}}\",\n+            ImplTrait => \"{{opaque}}\",\n         };\n \n         Symbol::intern(s).as_interned_str()"}, {"sha": "2810b5a8e6ada5cad0922392a80cd56c44f0dd5b", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -445,6 +445,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         sp: Span,\n     ) {\n         use hir::def_id::CrateNum;\n+        use hir::map::DisambiguatedDefPathData;\n         use ty::print::Printer;\n         use ty::subst::Kind;\n \n@@ -504,6 +505,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             fn path_append_impl(\n                 self,\n                 _print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+                _disambiguated_data: &DisambiguatedDefPathData,\n                 _self_ty: Ty<'tcx>,\n                 _trait_ref: Option<ty::TraitRef<'tcx>>,\n             ) -> Result<Self::Path, Self::Error> {\n@@ -512,10 +514,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             fn path_append(\n                 self,\n                 print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n-                text: &str,\n+                disambiguated_data: &DisambiguatedDefPathData,\n             ) -> Result<Self::Path, Self::Error> {\n                 let mut path = print_prefix(self)?;\n-                path.push(text.to_string());\n+                path.push(disambiguated_data.data.as_interned_str().to_string());\n                 Ok(path)\n             }\n             fn path_generic_args("}, {"sha": "99b83deab8bab129aab36749efa5310d2be3c8af", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -1,4 +1,4 @@\n-use crate::hir::map::DefPathData;\n+use crate::hir::map::{DefPathData, DisambiguatedDefPathData};\n use crate::hir::def_id::{CrateNum, DefId};\n use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n use crate::ty::subst::{Kind, Subst};\n@@ -71,13 +71,14 @@ pub trait Printer<'gcx: 'tcx, 'tcx>: Sized {\n     fn path_append_impl(\n         self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+        disambiguated_data: &DisambiguatedDefPathData,\n         self_ty: Ty<'tcx>,\n         trait_ref: Option<ty::TraitRef<'tcx>>,\n     ) -> Result<Self::Path, Self::Error>;\n     fn path_append(\n         self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n-        text: &str,\n+        disambiguated_data: &DisambiguatedDefPathData,\n     ) -> Result<Self::Path, Self::Error>;\n     fn path_generic_args(\n         self,\n@@ -156,7 +157,7 @@ pub trait Printer<'gcx: 'tcx, 'tcx>: Sized {\n                     } else {\n                         cx.print_def_path(parent_def_id, parent_substs)\n                     },\n-                    &key.disambiguated_data.data.as_interned_str().as_str(),\n+                    &key.disambiguated_data,\n                 )\n             }\n         }\n@@ -200,12 +201,14 @@ pub trait Printer<'gcx: 'tcx, 'tcx>: Sized {\n         debug!(\"default_print_impl_path: impl_def_id={:?}, self_ty={}, impl_trait_ref={:?}\",\n                impl_def_id, self_ty, impl_trait_ref);\n \n+        let key = self.tcx().def_key(impl_def_id);\n+        let parent_def_id = DefId { index: key.parent.unwrap(), ..impl_def_id };\n+\n         // Decide whether to print the parent path for the impl.\n         // Logically, since impls are global, it's never needed, but\n         // users may find it useful. Currently, we omit the parent if\n         // the impl is either in the same module as the self-type or\n         // as the trait.\n-        let parent_def_id = self.tcx().parent(impl_def_id).unwrap();\n         let in_self_mod = match characteristic_def_id_of_type(self_ty) {\n             None => false,\n             Some(ty_def_id) => self.tcx().parent(ty_def_id) == Some(parent_def_id),\n@@ -221,6 +224,7 @@ pub trait Printer<'gcx: 'tcx, 'tcx>: Sized {\n             // the module more clearly.\n             self.path_append_impl(\n                 |cx| cx.print_def_path(parent_def_id, &[]),\n+                &key.disambiguated_data,\n                 self_ty,\n                 impl_trait_ref,\n             )"}, {"sha": "258903e1f1044a5a1bacc61059066fda3a1dbb2c", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 59, "deletions": 29, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -1,6 +1,6 @@\n use crate::hir;\n use crate::hir::def::Namespace;\n-use crate::hir::map::DefPathData;\n+use crate::hir::map::{DefPathData, DisambiguatedDefPathData};\n use crate::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n use crate::middle::region;\n@@ -313,13 +313,13 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n             visible_parent, actual_parent,\n         );\n \n-        let data = cur_def_key.disambiguated_data.data;\n+        let mut data = cur_def_key.disambiguated_data.data;\n         debug!(\n             \"try_print_visible_def_path: data={:?} visible_parent={:?} actual_parent={:?}\",\n             data, visible_parent, actual_parent,\n         );\n \n-        let symbol = match data {\n+        match data {\n             // In order to output a path that could actually be imported (valid and visible),\n             // we need to handle re-exports correctly.\n             //\n@@ -351,27 +351,30 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n             // the children of the visible parent (as was done when computing\n             // `visible_parent_map`), looking for the specific child we currently have and then\n             // have access to the re-exported name.\n-            DefPathData::Module(actual_name) |\n-            DefPathData::TypeNs(actual_name) if Some(visible_parent) != actual_parent => {\n-                self.tcx().item_children(visible_parent)\n+            DefPathData::Module(ref mut name) |\n+            DefPathData::TypeNs(ref mut name) if Some(visible_parent) != actual_parent => {\n+                let reexport = self.tcx().item_children(visible_parent)\n                     .iter()\n                     .find(|child| child.def.def_id() == def_id)\n-                    .map(|child| child.ident.as_str())\n-                    .unwrap_or_else(|| actual_name.as_str())\n+                    .map(|child| child.ident.as_interned_str());\n+                if let Some(reexport) = reexport {\n+                    *name = reexport;\n+                }\n             }\n-            _ => {\n-                data.get_opt_name().map(|n| n.as_str()).unwrap_or_else(|| {\n-                    // Re-exported `extern crate` (#43189).\n-                    if let DefPathData::CrateRoot = data {\n-                        self.tcx().original_crate_name(def_id.krate).as_str()\n-                    } else {\n-                        Symbol::intern(\"<unnamed>\").as_str()\n-                    }\n-                })\n-            },\n-        };\n-        debug!(\"try_print_visible_def_path: symbol={:?}\", symbol);\n-        Ok((self.path_append(Ok, &symbol)?, true))\n+            // Re-exported `extern crate` (#43189).\n+            DefPathData::CrateRoot => {\n+                data = DefPathData::Module(\n+                    self.tcx().original_crate_name(def_id.krate).as_interned_str(),\n+                );\n+            }\n+            _ => {}\n+        }\n+        debug!(\"try_print_visible_def_path: data={:?}\", data);\n+\n+        Ok((self.path_append(Ok, &DisambiguatedDefPathData {\n+            data,\n+            disambiguator: 0,\n+        })?, true))\n     }\n \n     fn pretty_path_qualified(\n@@ -932,10 +935,18 @@ impl<F: fmt::Write> Printer<'gcx, 'tcx> for FmtPrinter<'_, 'gcx, 'tcx, F> {\n                 // only occur very early in the compiler pipeline.\n                 let parent_def_id = DefId { index: key.parent.unwrap(), ..def_id };\n                 let span = self.tcx.def_span(def_id);\n-                return self.path_append(\n-                    |cx| cx.print_def_path(parent_def_id, &[]),\n-                    &format!(\"<impl at {:?}>\", span),\n-                );\n+\n+                self = self.print_def_path(parent_def_id, &[])?;\n+\n+                // HACK(eddyb) copy of `path_append` to avoid\n+                // constructing a `DisambiguatedDefPathData`.\n+                if !self.empty_path {\n+                    write!(self, \"::\")?;\n+                }\n+                write!(self, \"<impl at {:?}>\", span)?;\n+                self.empty_path = false;\n+\n+                return Ok(self);\n             }\n         }\n \n@@ -995,6 +1006,7 @@ impl<F: fmt::Write> Printer<'gcx, 'tcx> for FmtPrinter<'_, 'gcx, 'tcx, F> {\n     fn path_append_impl(\n         mut self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+        _disambiguated_data: &DisambiguatedDefPathData,\n         self_ty: Ty<'tcx>,\n         trait_ref: Option<ty::TraitRef<'tcx>>,\n     ) -> Result<Self::Path, Self::Error> {\n@@ -1012,17 +1024,35 @@ impl<F: fmt::Write> Printer<'gcx, 'tcx> for FmtPrinter<'_, 'gcx, 'tcx, F> {\n     fn path_append(\n         mut self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n-        text: &str,\n+        disambiguated_data: &DisambiguatedDefPathData,\n     ) -> Result<Self::Path, Self::Error> {\n         self = print_prefix(self)?;\n \n-        // FIXME(eddyb) `text` should never be empty, but it\n+        // Skip `::{{constructor}}` on tuple/unit structs.\n+        match disambiguated_data.data {\n+            DefPathData::StructCtor => return Ok(self),\n+            _ => {}\n+        }\n+\n+        // FIXME(eddyb) `name` should never be empty, but it\n         // currently is for `extern { ... }` \"foreign modules\".\n-        if !text.is_empty() {\n+        let name = disambiguated_data.data.as_interned_str().as_str();\n+        if !name.is_empty() {\n             if !self.empty_path {\n                 write!(self, \"::\")?;\n             }\n-            write!(self, \"{}\", text)?;\n+            write!(self, \"{}\", name)?;\n+\n+            // FIXME(eddyb) this will print e.g. `{{closure}}#3`, but it\n+            // might be nicer to use something else, e.g. `{closure#3}`.\n+            let dis = disambiguated_data.disambiguator;\n+            let print_dis =\n+                disambiguated_data.data.get_opt_name().is_none() ||\n+                dis != 0 && self.tcx.sess.verbose();\n+            if print_dis {\n+                write!(self, \"#{}\", dis)?;\n+            }\n+\n             self.empty_path = false;\n         }\n "}, {"sha": "0fa935199f97b412e2d9125121b73e6c1d39495f", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -90,7 +90,7 @@\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir::Node;\n use rustc::hir::CodegenFnAttrFlags;\n-use rustc::hir::map::definitions::DefPathData;\n+use rustc::hir::map::{DefPathData, DisambiguatedDefPathData};\n use rustc::ich::NodeIdHashingMode;\n use rustc::ty::print::{PrettyPrinter, Printer, Print};\n use rustc::ty::query::Providers;\n@@ -492,30 +492,48 @@ impl Printer<'tcx, 'tcx> for SymbolPrinter<'_, 'tcx> {\n     fn path_append_impl(\n         self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+        _disambiguated_data: &DisambiguatedDefPathData,\n         self_ty: Ty<'tcx>,\n         trait_ref: Option<ty::TraitRef<'tcx>>,\n     ) -> Result<Self::Path, Self::Error> {\n         self.pretty_path_append_impl(\n-            |cx| cx.path_append(print_prefix, \"\"),\n+            |mut cx| {\n+                cx = print_prefix(cx)?;\n+\n+                if cx.keep_within_component {\n+                    // HACK(eddyb) print the path similarly to how `FmtPrinter` prints it.\n+                    cx.write_str(\"::\")?;\n+                } else {\n+                    cx.path.finalize_pending_component();\n+                }\n+\n+                Ok(cx)\n+            },\n             self_ty,\n             trait_ref,\n         )\n     }\n     fn path_append(\n         mut self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n-        text: &str,\n+        disambiguated_data: &DisambiguatedDefPathData,\n     ) -> Result<Self::Path, Self::Error> {\n         self = print_prefix(self)?;\n \n+        // Skip `::{{constructor}}` on tuple/unit structs.\n+        match disambiguated_data.data {\n+            DefPathData::StructCtor => return Ok(self),\n+            _ => {}\n+        }\n+\n         if self.keep_within_component {\n             // HACK(eddyb) print the path similarly to how `FmtPrinter` prints it.\n             self.write_str(\"::\")?;\n         } else {\n             self.path.finalize_pending_component();\n         }\n \n-        self.write_str(text)?;\n+        self.write_str(&disambiguated_data.data.as_interned_str().as_str())?;\n         Ok(self)\n     }\n     fn path_generic_args("}, {"sha": "c80fd8fcd812f9588a34b9da7583a5d218dc832a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -20,6 +20,7 @@ use rustc::mir::interpret::GlobalId;\n use rustc::hir::{self, GenericArg, HirVec};\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::map::DisambiguatedDefPathData;\n use rustc::ty::subst::{Kind, InternalSubsts, SubstsRef};\n use rustc::ty::{self, DefIdTree, TyCtxt, Region, RegionVid, Ty, AdtKind};\n use rustc::ty::fold::TypeFolder;\n@@ -4288,6 +4289,7 @@ pub fn get_path_for_type(\n         fn path_append_impl(\n             self,\n             print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+            _disambiguated_data: &DisambiguatedDefPathData,\n             self_ty: Ty<'tcx>,\n             trait_ref: Option<ty::TraitRef<'tcx>>,\n         ) -> Result<Self::Path, Self::Error> {\n@@ -4306,10 +4308,10 @@ pub fn get_path_for_type(\n         fn path_append(\n             self,\n             print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n-            text: &str,\n+            disambiguated_data: &DisambiguatedDefPathData,\n         ) -> Result<Self::Path, Self::Error> {\n             let mut path = print_prefix(self)?;\n-            path.push(text.to_string());\n+            path.push(disambiguated_data.data.as_interned_str().to_string());\n             Ok(path)\n         }\n         fn path_generic_args("}, {"sha": "3b333b5431c3e995dd5f02bb718abab16344a03e", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -98,7 +98,7 @@ fn main() {\n // }\n // END rustc.main.EraseRegions.after.mir\n // START rustc.main-{{closure}}.EraseRegions.after.mir\n-// fn main::{{closure}}(_1: &[closure@HirId { owner: DefIndex(0:7), local_id: 70 }], _2: &i32) -> &i32 {\n+// fn main::{{closure}}#0(_1: &[closure@HirId { owner: DefIndex(0:7), local_id: 70 }], _2: &i32) -> &i32 {\n //     ...\n //     bb0: {\n //         Retag([fn entry] _1);"}, {"sha": "3762f5e3d6ad8b27cd2601f0ce2ca95475ea50bd", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -1,22 +1,22 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}`\n+error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}#0`\n   --> $DIR/const-size_of-cycle.rs:6:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires const-evaluating `Foo::bytes::{{constant}}`...\n+note: ...which requires const-evaluating `Foo::bytes::{{constant}}#0`...\n   --> $SRC_DIR/libcore/mem.rs:LL:COL\n    |\n LL |     intrinsics::size_of::<T>()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n-note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}`...\n+note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n   --> $DIR/const-size_of-cycle.rs:6:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}`, completing the cycle\n+   = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle\n note: cycle used when processing `Foo`\n   --> $DIR/const-size_of-cycle.rs:5:1\n    |"}, {"sha": "26271395005a782d617020c94d0caad03ded82c4", "filename": "src/test/ui/deprecation/deprecation-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -314,7 +314,7 @@ mod this_crate {\n         let _ = || {\n             #[deprecated]\n             fn bar() { }\n-            bar(); //~ ERROR use of deprecated item 'this_crate::test_fn_closure_body::{{closure}}::bar'\n+            bar(); //~ ERROR use of deprecated item 'this_crate::test_fn_closure_body::{{closure}}#0::bar'\n         };\n     }\n "}, {"sha": "ffbcb259754e77309b8207319e5616718e732658", "filename": "src/test/ui/deprecation/deprecation-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.stderr?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -298,7 +298,7 @@ error: use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n LL |         <Foo as Trait>::trait_deprecated_text(&foo);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated item 'this_crate::test_fn_closure_body::{{closure}}::bar'\n+error: use of deprecated item 'this_crate::test_fn_closure_body::{{closure}}#0::bar'\n   --> $DIR/deprecation-lint.rs:317:13\n    |\n LL |             bar();"}, {"sha": "4e79dfc3f7c01cb55989d766ab3710bca1c7bc98", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -1,4 +1,4 @@\n-error[E0391]: cycle detected when processing `cycle1::{{impl-Trait}}`\n+error[E0391]: cycle detected when processing `cycle1::{{opaque}}#0`\n   --> $DIR/auto-trait-leak.rs:14:16\n    |\n LL | fn cycle1() -> impl Clone {\n@@ -10,7 +10,7 @@ note: ...which requires processing `cycle1`...\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n-note: ...which requires processing `cycle2::{{impl-Trait}}`...\n+note: ...which requires processing `cycle2::{{opaque}}#0`...\n   --> $DIR/auto-trait-leak.rs:23:16\n    |\n LL | fn cycle2() -> impl Clone {\n@@ -21,7 +21,7 @@ note: ...which requires processing `cycle2`...\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n-   = note: ...which again requires processing `cycle1::{{impl-Trait}}`, completing the cycle\n+   = note: ...which again requires processing `cycle1::{{opaque}}#0`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/auto-trait-leak.rs:3:1\n    |\n@@ -34,7 +34,7 @@ LL | |     Rc::new(String::from(\"foo\"))\n LL | | }\n    | |_^\n \n-error[E0391]: cycle detected when processing `cycle1::{{impl-Trait}}`\n+error[E0391]: cycle detected when processing `cycle1::{{opaque}}#0`\n   --> $DIR/auto-trait-leak.rs:14:16\n    |\n LL | fn cycle1() -> impl Clone {\n@@ -46,7 +46,7 @@ note: ...which requires processing `cycle1`...\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n-note: ...which requires processing `cycle2::{{impl-Trait}}`...\n+note: ...which requires processing `cycle2::{{opaque}}#0`...\n   --> $DIR/auto-trait-leak.rs:23:16\n    |\n LL | fn cycle2() -> impl Clone {\n@@ -56,7 +56,7 @@ note: ...which requires processing `cycle2`...\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires processing `cycle1::{{impl-Trait}}`, completing the cycle\n+   = note: ...which again requires processing `cycle1::{{opaque}}#0`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/auto-trait-leak.rs:3:1\n    |"}, {"sha": "da3e2e763af582788b4a1a8ca67b287680b30218", "filename": "src/test/ui/issues/issue-17252.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -5,7 +5,7 @@ LL | const FOO: usize = FOO;\n    |                    ^^^\n    |\n    = note: ...which again requires processing `FOO`, completing the cycle\n-note: cycle used when processing `main::{{constant}}`\n+note: cycle used when processing `main::{{constant}}#0`\n   --> $DIR/issue-17252.rs:4:18\n    |\n LL |     let _x: [u8; FOO]; // caused stack overflow prior to fix"}, {"sha": "43effc0b3b9748ec4c1476ccda7ebba5800d4708", "filename": "src/test/ui/issues/issue-23302-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -1,11 +1,11 @@\n-error[E0391]: cycle detected when processing `X::A::{{constant}}`\n+error[E0391]: cycle detected when processing `X::A::{{constant}}#0`\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires processing `X::A::{{constant}}`, completing the cycle\n-note: cycle used when const-evaluating `X::A::{{constant}}`\n+   = note: ...which again requires processing `X::A::{{constant}}#0`, completing the cycle\n+note: cycle used when const-evaluating `X::A::{{constant}}#0`\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,"}, {"sha": "707d4fa7ed3f781a38af85f4f95bcb121775ff43", "filename": "src/test/ui/issues/issue-23302-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -1,11 +1,11 @@\n-error[E0391]: cycle detected when processing `Y::A::{{constant}}`\n+error[E0391]: cycle detected when processing `Y::A::{{constant}}#0`\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires processing `Y::A::{{constant}}`, completing the cycle\n-note: cycle used when const-evaluating `Y::A::{{constant}}`\n+   = note: ...which again requires processing `Y::A::{{constant}}#0`, completing the cycle\n+note: cycle used when const-evaluating `Y::A::{{constant}}#0`\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,"}, {"sha": "4c3f726180dfee8aec10c9414b5959d7ac3b6b79", "filename": "src/test/ui/issues/issue-36163.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fissues%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fissues%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36163.stderr?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -1,4 +1,4 @@\n-error[E0391]: cycle detected when processing `Foo::B::{{constant}}`\n+error[E0391]: cycle detected when processing `Foo::B::{{constant}}#0`\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,\n@@ -9,8 +9,8 @@ note: ...which requires processing `A`...\n    |\n LL | const A: isize = Foo::B as isize;\n    |                  ^^^^^^^^^^^^^^^\n-   = note: ...which again requires processing `Foo::B::{{constant}}`, completing the cycle\n-note: cycle used when const-evaluating `Foo::B::{{constant}}`\n+   = note: ...which again requires processing `Foo::B::{{constant}}#0`, completing the cycle\n+note: cycle used when const-evaluating `Foo::B::{{constant}}#0`\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,"}, {"sha": "df8e804c87a3f706a5b2246fcac43dcbbd74d75a", "filename": "src/test/ui/issues/issue-44415.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a54a41ce47c149fd6587182a4ab87a146844f939/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr?ref=a54a41ce47c149fd6587182a4ab87a146844f939", "patch": "@@ -1,22 +1,22 @@\n-error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}`\n+error[E0391]: cycle detected when const-evaluating + checking `Foo::bytes::{{constant}}#0`\n   --> $DIR/issue-44415.rs:6:17\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                 ^^^^^^\n    |\n-note: ...which requires const-evaluating `Foo::bytes::{{constant}}`...\n+note: ...which requires const-evaluating `Foo::bytes::{{constant}}#0`...\n   --> $DIR/issue-44415.rs:6:26\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All, def_id: None }, value: [u8; _] }`...\n-note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}`...\n+note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n   --> $DIR/issue-44415.rs:6:17\n    |\n LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n    |                 ^^^^^^\n-   = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}`, completing the cycle\n+   = note: ...which again requires const-evaluating + checking `Foo::bytes::{{constant}}#0`, completing the cycle\n note: cycle used when processing `Foo`\n   --> $DIR/issue-44415.rs:5:1\n    |"}]}