{"sha": "70cc24254500f783ddd08e65e6abcf21e27c0c27", "node_id": "C_kwDOAAsO6NoAKDcwY2MyNDI1NDUwMGY3ODNkZGQwOGU2NWU2YWJjZjIxZTI3YzBjMjc", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T14:22:46Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-09T14:38:45Z"}, "message": "Remove a couple of duplicate calls", "tree": {"sha": "1289686ca890aba0585d3bbdf78ab9cab494631a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1289686ca890aba0585d3bbdf78ab9cab494631a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70cc24254500f783ddd08e65e6abcf21e27c0c27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70cc24254500f783ddd08e65e6abcf21e27c0c27", "html_url": "https://github.com/rust-lang/rust/commit/70cc24254500f783ddd08e65e6abcf21e27c0c27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70cc24254500f783ddd08e65e6abcf21e27c0c27/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5b969583ff12cfd0cd85e2923753101024b72ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b969583ff12cfd0cd85e2923753101024b72ad", "html_url": "https://github.com/rust-lang/rust/commit/c5b969583ff12cfd0cd85e2923753101024b72ad"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "cfe3e7bb92019978d6940438ec73cccf357ef6bd", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/70cc24254500f783ddd08e65e6abcf21e27c0c27/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cc24254500f783ddd08e65e6abcf21e27c0c27/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=70cc24254500f783ddd08e65e6abcf21e27c0c27", "patch": "@@ -9,7 +9,8 @@ pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_middle::ty::subst::SubstsRef;\n+use rustc_span::symbol::{kw, sym, Symbol};\n \n use crate::prelude::*;\n use cranelift_codegen::ir::AtomicRmwOp;\n@@ -391,6 +392,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n     span: Span,\n ) {\n     let intrinsic = fx.tcx.item_name(instance.def_id());\n+    let substs = instance.substs;\n \n     let ret = match destination {\n         Some((place, _)) => place,\n@@ -410,28 +412,24 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n     };\n \n     if intrinsic.as_str().starts_with(\"simd_\") {\n-        self::simd::codegen_simd_intrinsic_call(fx, instance, args, ret, span);\n+        self::simd::codegen_simd_intrinsic_call(fx, intrinsic, substs, args, ret, span);\n         let ret_block = fx.get_block(destination.expect(\"SIMD intrinsics don't diverge\").1);\n         fx.bcx.ins().jump(ret_block, &[]);\n-    } else if codegen_float_intrinsic_call(fx, instance, args, ret) {\n+    } else if codegen_float_intrinsic_call(fx, intrinsic, substs, args, ret) {\n         let ret_block = fx.get_block(destination.expect(\"Float intrinsics don't diverge\").1);\n         fx.bcx.ins().jump(ret_block, &[]);\n     } else {\n-        codegen_regular_intrinsic_call(fx, instance, args, ret, span, destination);\n+        codegen_regular_intrinsic_call(fx, instance, intrinsic, substs, args, ret, span, destination);\n     }\n }\n \n fn codegen_float_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    instance: Instance<'tcx>,\n+    intrinsic: Symbol,\n+    substs: SubstsRef<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     ret: CPlace<'tcx>,\n ) -> bool {\n-    let def_id = instance.def_id();\n-    let substs = instance.substs;\n-\n-    let intrinsic = fx.tcx.item_name(def_id);\n-\n     call_intrinsic_match! {\n         fx, intrinsic, substs, ret, args,\n         expf32(flt) -> f32 => expf,\n@@ -479,16 +477,13 @@ fn codegen_float_intrinsic_call<'tcx>(\n fn codegen_regular_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     instance: Instance<'tcx>,\n+    intrinsic: Symbol,\n+    substs: SubstsRef<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     ret: CPlace<'tcx>,\n     span: Span,\n     destination: Option<(CPlace<'tcx>, BasicBlock)>,\n ) {\n-    let def_id = instance.def_id();\n-    let substs = instance.substs;\n-\n-    let intrinsic = fx.tcx.item_name(def_id);\n-\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n     intrinsic_match! {"}, {"sha": "d8dcf5d0ab9813ca0f8a602c847ebb1c9221b53d", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/70cc24254500f783ddd08e65e6abcf21e27c0c27/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70cc24254500f783ddd08e65e6abcf21e27c0c27/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=70cc24254500f783ddd08e65e6abcf21e27c0c27", "patch": "@@ -1,20 +1,19 @@\n //! Codegen `extern \"platform-intrinsic\"` intrinsics.\n \n+use rustc_middle::ty::subst::SubstsRef;\n+use rustc_span::Symbol;\n+\n use super::*;\n use crate::prelude::*;\n \n pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    instance: Instance<'tcx>,\n+    intrinsic: Symbol,\n+    substs: SubstsRef<'tcx>,\n     args: &[mir::Operand<'tcx>],\n     ret: CPlace<'tcx>,\n     span: Span,\n ) {\n-    let def_id = instance.def_id();\n-    let substs = instance.substs;\n-\n-    let intrinsic = fx.tcx.item_name(def_id);\n-\n     intrinsic_match! {\n         fx, intrinsic, substs, args,\n         _ => {"}]}