{"sha": "24265b1598e20173e4fa3f9f6c32bd4b665789c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MjY1YjE1OThlMjAxNzNlNGZhM2Y5ZjZjMzJiZDRiNjY1Nzg5Yzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-27T23:41:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-27T23:58:24Z"}, "message": "core: Add failure tests for higher-order vec functions", "tree": {"sha": "8edafd74d0d2e3eab3f01166e862fb10f7e9dda9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8edafd74d0d2e3eab3f01166e862fb10f7e9dda9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24265b1598e20173e4fa3f9f6c32bd4b665789c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24265b1598e20173e4fa3f9f6c32bd4b665789c8", "html_url": "https://github.com/rust-lang/rust/commit/24265b1598e20173e4fa3f9f6c32bd4b665789c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24265b1598e20173e4fa3f9f6c32bd4b665789c8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b93d1a29fafa00a1e85e14d1243082d2d355c08", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b93d1a29fafa00a1e85e14d1243082d2d355c08", "html_url": "https://github.com/rust-lang/rust/commit/5b93d1a29fafa00a1e85e14d1243082d2d355c08"}], "stats": {"total": 539, "additions": 539, "deletions": 0}, "files": [{"sha": "07ccb244ddd32a332888d77a1b118895a07e16a6", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 539, "deletions": 0, "changes": 539, "blob_url": "https://github.com/rust-lang/rust/blob/24265b1598e20173e4fa3f9f6c32bd4b665789c8/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24265b1598e20173e4fa3f9f6c32bd4b665789c8/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=24265b1598e20173e4fa3f9f6c32bd4b665789c8", "patch": "@@ -2818,6 +2818,545 @@ mod tests {\n         assert(v[0] == 2);\n         assert(v[1] == 3);\n     }\n+\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_from_fn_fail() {\n+        do from_fn(100) |v| {\n+            if v == 50 { fail }\n+            (~0, @0)\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_build_fail() {\n+        do build |push| {\n+            push((~0, @0));\n+            push((~0, @0));\n+            push((~0, @0));\n+            push((~0, @0));\n+            fail;\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_split_fail_ret_true() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do split(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 1;\n+\n+            true\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_split_fail_ret_false() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do split(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 1;\n+\n+            false\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_splitn_fail_ret_true() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do splitn(v, 100) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 1;\n+\n+            true\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_splitn_fail_ret_false() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do split(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 1;\n+\n+            false\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_rsplit_fail_ret_true() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do rsplit(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 1;\n+\n+            true\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_rsplit_fail_ret_false() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do rsplit(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 1;\n+\n+            false\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_rsplitn_fail_ret_true() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do rsplitn(v, 100) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 1;\n+\n+            true\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_rsplitn_fail_ret_false() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do rsplitn(v, 100) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 1;\n+\n+            false\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_consume_fail() {\n+        let v = ~[(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do consume(v) |_i, _elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 1;\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_consume_mut_fail() {\n+        let v = ~[mut (~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do consume_mut(v) |_i, _elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 1;\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_grow_fn_fail() {\n+        let mut v = ~[];\n+        do grow_fn(v, 100) |i| {\n+            if i == 50 {\n+                fail\n+            }\n+            (~0, @0)\n+        }\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_map_fail() {\n+        let v = [mut (~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do map(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            ~[(~0, @0)]\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_map_consume_fail() {\n+        let v = ~[(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do map_consume(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            ~[(~0, @0)]\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_mapi_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do mapi(v) |_i, _elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            ~[(~0, @0)]\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_flat_map_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do map(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            ~[(~0, @0)]\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_map2_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do map2(v, v) |_elt1, _elt2| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            ~[(~0, @0)]\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_filter_map_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do filter_map(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            Some((~0, @0))\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_filter_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do filter(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            true\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_foldl_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do foldl((~0, @0), v) |_a, _b| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            (~0, @0)\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_foldr_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do foldr(v, (~0, @0)) |_a, _b| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            (~0, @0)\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_any_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do any(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            false\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_any2_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do any(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            false\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_all_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do all(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            true\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_alli_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do alli(v) |_i, _elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            true\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_all2_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do all2(v, v) |_elt1, _elt2| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            true\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_find_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do find(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            false\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_position_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do position(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            false\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_rposition_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do rposition(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            false\n+        };\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_each_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do each(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            false\n+        }\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_eachi_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do eachi(v) |_i, _elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+            false\n+        }\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    #[allow(non_implicitly_copyable_typarams)]\n+    fn test_permute_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let mut i = 0;\n+        do permute(v) |_elt| {\n+            if i == 2 {\n+                fail\n+            }\n+            i += 0;\n+        }\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_as_imm_buf_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        do as_imm_buf(v) |_buf, _i| {\n+            fail\n+        }\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_as_const_buf_fail() {\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        do as_const_buf(v) |_buf, _i| {\n+            fail\n+        }\n+    }\n+\n+    #[test]\n+    #[ignore(windows)]\n+    #[should_fail]\n+    fn test_as_mut_buf_fail() {\n+        let v = [mut (~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        do as_mut_buf(v) |_buf, _i| {\n+            fail\n+        }\n+    }\n+\n+\n }\n \n // Local Variables:"}]}