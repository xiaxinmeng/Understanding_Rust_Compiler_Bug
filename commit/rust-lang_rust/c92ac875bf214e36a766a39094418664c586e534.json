{"sha": "c92ac875bf214e36a766a39094418664c586e534", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5MmFjODc1YmYyMTRlMzZhNzY2YTM5MDk0NDE4NjY0YzU4NmU1MzQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-06T15:42:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-06T15:42:28Z"}, "message": "Rollup merge of #82963 - camelid:move-sharedcontext, r=GuillaumeGomez\n\nMove `SharedContext` to `context.rs`\n\nIt is tightly connected to `Context` and is primarily used as a field in\n`Context`. Thus, it should be next to `Context`.", "tree": {"sha": "6f060d543649eb2a2537cf18e8f77da41300f7f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f060d543649eb2a2537cf18e8f77da41300f7f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c92ac875bf214e36a766a39094418664c586e534", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbIFkCRBK7hj4Ov3rIwAAdHIIAHMfQcCXwbtcTjXiYGHTU0iu\nD8hSuO9LTLYGSXnMNQ9KKoUxYctZa7w6l+CNC9AcHlMvRrzwUP7+Dm9cB8H5xAl5\nWWxJaDvw7vRPq02gZHVwS508YZ7V0Em0mTu5+v0uK+8G2BeJnt+CCHBggMwRsO9S\niIlrvm2W40FPh/xxAq64df9V4EPlqjOw7iKyD6gtcfqgbYpzAFeb56M1hQcjgO0K\nG4E+6a1cCPvbOwZVr1GbxjebI0e31Zkq1FtNBPNnAgTQGVYN+B9dFuAUD3MBGlcY\nzjiskpNaJuT3xpKf9hYH8PXB2aVEeYpTb68p9PHeuDW2OaqYdPLX6ylzDU2UyTk=\n=LP9/\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f060d543649eb2a2537cf18e8f77da41300f7f2\nparent 5c897d430dcbec6b10a9925f7de054dbc0ad3c52\nparent 525646a380f2e0730468bcdcc8ee2021fa9e243d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617723748 +0200\ncommitter GitHub <noreply@github.com> 1617723748 +0200\n\nRollup merge of #82963 - camelid:move-sharedcontext, r=GuillaumeGomez\n\nMove `SharedContext` to `context.rs`\n\nIt is tightly connected to `Context` and is primarily used as a field in\n`Context`. Thus, it should be next to `Context`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c92ac875bf214e36a766a39094418664c586e534", "html_url": "https://github.com/rust-lang/rust/commit/c92ac875bf214e36a766a39094418664c586e534", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c92ac875bf214e36a766a39094418664c586e534/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c897d430dcbec6b10a9925f7de054dbc0ad3c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c897d430dcbec6b10a9925f7de054dbc0ad3c52", "html_url": "https://github.com/rust-lang/rust/commit/5c897d430dcbec6b10a9925f7de054dbc0ad3c52"}, {"sha": "525646a380f2e0730468bcdcc8ee2021fa9e243d", "url": "https://api.github.com/repos/rust-lang/rust/commits/525646a380f2e0730468bcdcc8ee2021fa9e243d", "html_url": "https://github.com/rust-lang/rust/commit/525646a380f2e0730468bcdcc8ee2021fa9e243d"}], "stats": {"total": 160, "additions": 77, "deletions": 83}, "files": [{"sha": "df5ff6e106d7c966567d23a051dbe5394b693a59", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 72, "deletions": 7, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/c92ac875bf214e36a766a39094418664c586e534/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92ac875bf214e36a766a39094418664c586e534/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=c92ac875bf214e36a766a39094418664c586e534", "patch": "@@ -1,11 +1,11 @@\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n use std::io;\n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n use std::rc::Rc;\n-use std::sync::mpsc::channel;\n+use std::sync::mpsc::{channel, Receiver};\n \n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n@@ -16,10 +16,7 @@ use rustc_span::{symbol::sym, Symbol};\n use super::cache::{build_index, ExternalLocation};\n use super::print_item::{full_path, item_path, print_item};\n use super::write_shared::write_shared;\n-use super::{\n-    print_sidebar, settings, AllTypes, NameDoc, SharedContext, StylePath, BASIC_KEYWORDS,\n-    CURRENT_DEPTH,\n-};\n+use super::{print_sidebar, settings, AllTypes, NameDoc, StylePath, BASIC_KEYWORDS, CURRENT_DEPTH};\n \n use crate::clean::{self, AttributesExt};\n use crate::config::RenderOptions;\n@@ -78,6 +75,74 @@ crate struct Context<'tcx> {\n #[cfg(target_arch = \"x86_64\")]\n rustc_data_structures::static_assert_size!(Context<'_>, 152);\n \n+/// Shared mutable state used in [`Context`] and elsewhere.\n+crate struct SharedContext<'tcx> {\n+    crate tcx: TyCtxt<'tcx>,\n+    /// The path to the crate root source minus the file name.\n+    /// Used for simplifying paths to the highlighted source code files.\n+    crate src_root: PathBuf,\n+    /// This describes the layout of each page, and is not modified after\n+    /// creation of the context (contains info like the favicon and added html).\n+    crate layout: layout::Layout,\n+    /// This flag indicates whether `[src]` links should be generated or not. If\n+    /// the source files are present in the html rendering, then this will be\n+    /// `true`.\n+    crate include_sources: bool,\n+    /// The local file sources we've emitted and their respective url-paths.\n+    crate local_sources: FxHashMap<PathBuf, String>,\n+    /// Whether the collapsed pass ran\n+    collapsed: bool,\n+    /// The base-URL of the issue tracker for when an item has been tagged with\n+    /// an issue number.\n+    pub(super) issue_tracker_base_url: Option<String>,\n+    /// The directories that have already been created in this doc run. Used to reduce the number\n+    /// of spurious `create_dir_all` calls.\n+    created_dirs: RefCell<FxHashSet<PathBuf>>,\n+    /// This flag indicates whether listings of modules (in the side bar and documentation itself)\n+    /// should be ordered alphabetically or in order of appearance (in the source code).\n+    pub(super) sort_modules_alphabetically: bool,\n+    /// Additional CSS files to be added to the generated docs.\n+    crate style_files: Vec<StylePath>,\n+    /// Suffix to be added on resource files (if suffix is \"-v2\" then \"light.css\" becomes\n+    /// \"light-v2.css\").\n+    crate resource_suffix: String,\n+    /// Optional path string to be used to load static files on output pages. If not set, uses\n+    /// combinations of `../` to reach the documentation root.\n+    crate static_root_path: Option<String>,\n+    /// The fs handle we are working with.\n+    crate fs: DocFS,\n+    /// The default edition used to parse doctests.\n+    crate edition: Edition,\n+    pub(super) codes: ErrorCodes,\n+    pub(super) playground: Option<markdown::Playground>,\n+    all: RefCell<AllTypes>,\n+    /// Storage for the errors produced while generating documentation so they\n+    /// can be printed together at the end.\n+    errors: Receiver<String>,\n+    /// `None` by default, depends on the `generate-redirect-map` option flag. If this field is set\n+    /// to `Some(...)`, it'll store redirections and then generate a JSON file at the top level of\n+    /// the crate.\n+    redirections: Option<RefCell<FxHashMap<String, String>>>,\n+}\n+\n+impl SharedContext<'_> {\n+    crate fn ensure_dir(&self, dst: &Path) -> Result<(), Error> {\n+        let mut dirs = self.created_dirs.borrow_mut();\n+        if !dirs.contains(dst) {\n+            try_err!(self.fs.create_dir_all(dst), dst);\n+            dirs.insert(dst.to_path_buf());\n+        }\n+\n+        Ok(())\n+    }\n+\n+    /// Based on whether the `collapse-docs` pass was run, return either the `doc_value` or the\n+    /// `collapsed_doc_value` of the given item.\n+    crate fn maybe_collapsed_doc_value<'a>(&self, item: &'a clean::Item) -> Option<String> {\n+        if self.collapsed { item.collapsed_doc_value() } else { item.doc_value() }\n+    }\n+}\n+\n impl<'tcx> Context<'tcx> {\n     pub(super) fn tcx(&self) -> TyCtxt<'tcx> {\n         self.shared.tcx"}, {"sha": "fbe799e718482e7792a6d1c8cf5306d818709935", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 76, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/c92ac875bf214e36a766a39094418664c586e534/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c92ac875bf214e36a766a39094418664c586e534/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=c92ac875bf214e36a766a39094418664c586e534", "patch": "@@ -35,32 +35,30 @@ mod write_shared;\n crate use context::*;\n crate use write_shared::FILES_UNVERSIONED;\n \n-use std::cell::{Cell, RefCell};\n+use std::cell::Cell;\n use std::collections::VecDeque;\n use std::default::Default;\n use std::fmt;\n-use std::path::{Path, PathBuf};\n+use std::path::PathBuf;\n use std::str;\n use std::string::ToString;\n-use std::sync::mpsc::Receiver;\n \n use itertools::Itertools;\n use rustc_ast_pretty::pprust;\n use rustc_attr::{Deprecation, StabilityLevel};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n use rustc_middle::ty::TyCtxt;\n-use rustc_span::edition::Edition;\n use rustc_span::symbol::{kw, sym, Symbol};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n \n use crate::clean::{self, GetDefId, RenderedLink, SelfTy, TypeKind};\n-use crate::docfs::{DocFS, PathError};\n+use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n@@ -70,8 +68,7 @@ use crate::html::format::{\n     href, print_abi_with_space, print_default_space, print_generic_bounds, print_where_clause,\n     Buffer, PrintWithSpace,\n };\n-use crate::html::layout;\n-use crate::html::markdown::{self, ErrorCodes, Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use crate::html::markdown::{Markdown, MarkdownHtml, MarkdownSummaryLine};\n \n /// A pair of name and its optional document.\n crate type NameDoc = (String, Option<String>);\n@@ -82,74 +79,6 @@ crate fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n     })\n }\n \n-/// Shared mutable state used in [`Context`] and elsewhere.\n-crate struct SharedContext<'tcx> {\n-    crate tcx: TyCtxt<'tcx>,\n-    /// The path to the crate root source minus the file name.\n-    /// Used for simplifying paths to the highlighted source code files.\n-    crate src_root: PathBuf,\n-    /// This describes the layout of each page, and is not modified after\n-    /// creation of the context (contains info like the favicon and added html).\n-    crate layout: layout::Layout,\n-    /// This flag indicates whether `[src]` links should be generated or not. If\n-    /// the source files are present in the html rendering, then this will be\n-    /// `true`.\n-    crate include_sources: bool,\n-    /// The local file sources we've emitted and their respective url-paths.\n-    crate local_sources: FxHashMap<PathBuf, String>,\n-    /// Whether the collapsed pass ran\n-    collapsed: bool,\n-    /// The base-URL of the issue tracker for when an item has been tagged with\n-    /// an issue number.\n-    issue_tracker_base_url: Option<String>,\n-    /// The directories that have already been created in this doc run. Used to reduce the number\n-    /// of spurious `create_dir_all` calls.\n-    created_dirs: RefCell<FxHashSet<PathBuf>>,\n-    /// This flag indicates whether listings of modules (in the side bar and documentation itself)\n-    /// should be ordered alphabetically or in order of appearance (in the source code).\n-    sort_modules_alphabetically: bool,\n-    /// Additional CSS files to be added to the generated docs.\n-    crate style_files: Vec<StylePath>,\n-    /// Suffix to be added on resource files (if suffix is \"-v2\" then \"light.css\" becomes\n-    /// \"light-v2.css\").\n-    crate resource_suffix: String,\n-    /// Optional path string to be used to load static files on output pages. If not set, uses\n-    /// combinations of `../` to reach the documentation root.\n-    crate static_root_path: Option<String>,\n-    /// The fs handle we are working with.\n-    crate fs: DocFS,\n-    /// The default edition used to parse doctests.\n-    crate edition: Edition,\n-    codes: ErrorCodes,\n-    playground: Option<markdown::Playground>,\n-    all: RefCell<AllTypes>,\n-    /// Storage for the errors produced while generating documentation so they\n-    /// can be printed together at the end.\n-    errors: Receiver<String>,\n-    /// `None` by default, depends on the `generate-redirect-map` option flag. If this field is set\n-    /// to `Some(...)`, it'll store redirections and then generate a JSON file at the top level of\n-    /// the crate.\n-    redirections: Option<RefCell<FxHashMap<String, String>>>,\n-}\n-\n-impl SharedContext<'_> {\n-    crate fn ensure_dir(&self, dst: &Path) -> Result<(), Error> {\n-        let mut dirs = self.created_dirs.borrow_mut();\n-        if !dirs.contains(dst) {\n-            try_err!(self.fs.create_dir_all(dst), dst);\n-            dirs.insert(dst.to_path_buf());\n-        }\n-\n-        Ok(())\n-    }\n-\n-    /// Based on whether the `collapse-docs` pass was run, return either the `doc_value` or the\n-    /// `collapsed_doc_value` of the given item.\n-    crate fn maybe_collapsed_doc_value<'a>(&self, item: &'a clean::Item) -> Option<String> {\n-        if self.collapsed { item.collapsed_doc_value() } else { item.doc_value() }\n-    }\n-}\n-\n // Helper structs for rendering items/sidebars and carrying along contextual\n // information\n "}]}