{"sha": "21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f", "node_id": "C_kwDOAAsO6NoAKDIxYmZmNGE0YzFjNDBlODg5ZWUwZGI0MWYwYzhkOThkNDQwZDRlNmY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-11-16T06:59:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-16T06:59:39Z"}, "message": "Rollup merge of #90801 - b-naber:missing_normalization_equate_inputs_output, r=jackh726\n\nNormalize both arguments of `equate_normalized_input_or_output`\n\nFixes https://github.com/rust-lang/rust/issues/90638\nFixes https://github.com/rust-lang/rust/issues/90612\n\nTemporary fix for a more complex underlying problem stemming from an inability to normalize closure substs during typecheck.\n\nr? ````@jackh726````", "tree": {"sha": "11f5a08058d4138a0c3c8821048847f43574abf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11f5a08058d4138a0c3c8821048847f43574abf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhk1bbCRBK7hj4Ov3rIwAAn2QIACtlHpCG6bQK1V5MtA3GWseG\nAf53SSwNqlMb3AZGdCRpQzA/gEFZ0ZJccoEUyNVU90EY+U90IfR/F2BLx7bCOK/9\n1EiM/RhDVbogGOwfUJISxxP3yj/bSXrbnKrTAO9lEr4HASkyx4jaizXomIBJNNmx\nG2R6dBAg+q1m4cro9Ri1WKgVELJI1otPplYy6Jwz3IFpHLQ3TGAfYft9vhr/vJ1Y\nlNjsawj1OBSVltHsX2W8WM1QOwd/ixuyv+3x1AH7FnMPc2LnWp2jT6RKH8b9tlzM\nUCW/IInzB5bAFCDzoyDGcroEZQbMmY/A+YoextHxz7iryJPcK1vDmOAcMZY5M2Y=\n=VGWf\n-----END PGP SIGNATURE-----\n", "payload": "tree 11f5a08058d4138a0c3c8821048847f43574abf2\nparent ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5\nparent 7a4aa65810b1e77f5bbfa442ca36b6fd9530e4be\nauthor Yuki Okushi <jtitor@2k36.org> 1637045979 +0900\ncommitter GitHub <noreply@github.com> 1637045979 +0900\n\nRollup merge of #90801 - b-naber:missing_normalization_equate_inputs_output, r=jackh726\n\nNormalize both arguments of `equate_normalized_input_or_output`\n\nFixes https://github.com/rust-lang/rust/issues/90638\nFixes https://github.com/rust-lang/rust/issues/90612\n\nTemporary fix for a more complex underlying problem stemming from an inability to normalize closure substs during typecheck.\n\nr? ````@jackh726````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f", "html_url": "https://github.com/rust-lang/rust/commit/21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5", "html_url": "https://github.com/rust-lang/rust/commit/ebef3ce25ba3d604fa24b4cf5c5670ce551f04f5"}, {"sha": "7a4aa65810b1e77f5bbfa442ca36b6fd9530e4be", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4aa65810b1e77f5bbfa442ca36b6fd9530e4be", "html_url": "https://github.com/rust-lang/rust/commit/7a4aa65810b1e77f5bbfa442ca36b6fd9530e4be"}], "stats": {"total": 145, "additions": 121, "deletions": 24}, "files": [{"sha": "92d2d04f23f239e87873a2dd5f7e73f2cd573a17", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f", "patch": "@@ -7,13 +7,16 @@\n //! `RETURN_PLACE` the MIR arguments) are always fully normalized (and\n //! contain revealed `impl Trait` values).\n \n+use crate::type_check::constraint_conversion::ConstraintConversion;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::mir::*;\n-use rustc_middle::traits::ObligationCause;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::Ty;\n use rustc_span::Span;\n-use rustc_trait_selection::traits::query::normalize::AtExt;\n+use rustc_span::DUMMY_SP;\n+use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n+use rustc_trait_selection::traits::query::Fallible;\n+use type_op::TypeOpOutput;\n \n use crate::universal_regions::UniversalRegions;\n \n@@ -30,6 +33,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let (&normalized_output_ty, normalized_input_tys) =\n             normalized_inputs_and_output.split_last().unwrap();\n \n+        debug!(?normalized_output_ty);\n+        debug!(?normalized_input_tys);\n+\n         let mir_def_id = body.source.def_id().expect_local();\n \n         // If the user explicitly annotated the input types, extract\n@@ -75,10 +81,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     .delay_span_bug(body.span, \"found more normalized_input_ty than local_decls\");\n                 break;\n             }\n+\n             // In MIR, argument N is stored in local N+1.\n             let local = Local::new(argument_index + 1);\n \n             let mir_input_ty = body.local_decls[local].ty;\n+\n             let mir_input_span = body.local_decls[local].source_info.span;\n             self.equate_normalized_input_or_output(\n                 normalized_input_ty,\n@@ -100,6 +108,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // If the user explicitly annotated the input types, enforce those.\n                 let user_provided_input_ty =\n                     self.normalize(user_provided_input_ty, Locations::All(mir_input_span));\n+\n                 self.equate_normalized_input_or_output(\n                     user_provided_input_ty,\n                     mir_input_ty,\n@@ -167,30 +176,14 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // `rustc_traits::normalize_after_erasing_regions`. Ideally, we'd\n             // like to normalize *before* inserting into `local_decls`, but\n             // doing so ends up causing some other trouble.\n-            let b = match self\n-                .infcx\n-                .at(&ObligationCause::dummy(), ty::ParamEnv::empty())\n-                .normalize(b)\n-            {\n-                Ok(n) => {\n-                    debug!(\"equate_inputs_and_outputs: {:?}\", n);\n-                    if n.obligations.iter().all(|o| {\n-                        matches!(\n-                            o.predicate.kind().skip_binder(),\n-                            ty::PredicateKind::RegionOutlives(_)\n-                                | ty::PredicateKind::TypeOutlives(_)\n-                        )\n-                    }) {\n-                        n.value\n-                    } else {\n-                        b\n-                    }\n-                }\n+            let b = match self.normalize_and_add_constraints(b) {\n+                Ok(n) => n,\n                 Err(_) => {\n                     debug!(\"equate_inputs_and_outputs: NoSolution\");\n                     b\n                 }\n             };\n+\n             // Note: if we have to introduce new placeholders during normalization above, then we won't have\n             // added those universes to the universe info, which we would want in `relate_tys`.\n             if let Err(terr) =\n@@ -207,4 +200,27 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    pub(crate) fn normalize_and_add_constraints(&mut self, t: Ty<'tcx>) -> Fallible<Ty<'tcx>> {\n+        let TypeOpOutput { output: norm_ty, constraints, .. } =\n+            self.param_env.and(type_op::normalize::Normalize::new(t)).fully_perform(self.infcx)?;\n+\n+        debug!(\"{:?} normalized to {:?}\", t, norm_ty);\n+\n+        for data in constraints.into_iter().collect::<Vec<_>>() {\n+            ConstraintConversion::new(\n+                self.infcx,\n+                &self.borrowck_context.universal_regions,\n+                &self.region_bound_pairs,\n+                Some(self.implicit_region_bound),\n+                self.param_env,\n+                Locations::All(DUMMY_SP),\n+                ConstraintCategory::Internal,\n+                &mut self.borrowck_context.constraints,\n+            )\n+            .convert_all(&*data);\n+        }\n+\n+        Ok(norm_ty)\n+    }\n }"}, {"sha": "da26d9c7b87790e85e784cf889e28fc92796f187", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f", "patch": "@@ -893,11 +893,11 @@ struct TypeChecker<'a, 'tcx> {\n }\n \n struct BorrowCheckContext<'a, 'tcx> {\n-    universal_regions: &'a UniversalRegions<'tcx>,\n+    pub(crate) universal_regions: &'a UniversalRegions<'tcx>,\n     location_table: &'a LocationTable,\n     all_facts: &'a mut Option<AllFacts>,\n     borrow_set: &'a BorrowSet<'tcx>,\n-    constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n+    pub(crate) constraints: &'a mut MirTypeckRegionConstraints<'tcx>,\n     upvars: &'a [Upvar<'tcx>],\n }\n \n@@ -1157,6 +1157,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         self.relate_types(sup, ty::Variance::Contravariant, sub, locations, category)\n     }\n \n+    #[instrument(skip(self, category), level = \"debug\")]\n     fn eq_types(\n         &mut self,\n         expected: Ty<'tcx>,"}, {"sha": "e150ecfe9a0dc396c4ab8e1d302e2f06337587dc", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90612.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90612.rs?ref=21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+use std::marker::PhantomData;\n+\n+trait Family: Sized {\n+    type Item<'a>;\n+\n+    fn apply_all<F>(&self, f: F)\n+    where\n+        F: FamilyItemFn<Self> { }\n+}\n+\n+struct Array<T>(PhantomData<T>);\n+\n+impl<T: 'static> Family for Array<T> {\n+    type Item<'a> = &'a T;\n+}\n+\n+trait FamilyItemFn<T: Family> {\n+    fn apply(&self, item: T::Item<'_>);\n+}\n+\n+impl<T, F> FamilyItemFn<T> for F\n+where\n+    T: Family,\n+    for<'a> F: Fn(T::Item<'a>)\n+{\n+    fn apply(&self, item: T::Item<'_>) {\n+        (*self)(item);\n+    }\n+}\n+\n+fn process<T: 'static>(array: Array<T>) {\n+    // Works\n+    array.apply_all(|x: &T| { });\n+\n+    // ICE: NoSolution\n+    array.apply_all(|x: <Array<T> as Family>::Item<'_>| { });\n+}\n+\n+fn main() {}"}, {"sha": "18b7f383482a1c4963c12bc1ccb7261aff08a2a1", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90638.rs?ref=21bff4a4c1c40e889ee0db41f0c8d98d440d4e6f", "patch": "@@ -0,0 +1,37 @@\n+//check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+trait Yokeable<'a>: 'static {\n+    type Output: 'a;\n+}\n+\n+trait IsCovariant<'a> {}\n+\n+struct Yoke<Y: for<'a> Yokeable<'a>> {\n+    data: Y,\n+}\n+\n+impl<Y: for<'a> Yokeable<'a>> Yoke<Y> {\n+    fn project<Y2: for<'a> Yokeable<'a>>(&self, _f: for<'a> fn(<Y as Yokeable<'a>>::Output, &'a ())\n+      -> <Y2 as Yokeable<'a>>::Output) -> Yoke<Y2> {\n+\n+        unimplemented!()\n+    }\n+}\n+\n+fn _upcast<Y>(x: Yoke<Y>) -> Yoke<Box<dyn IsCovariant<'static> + 'static>> where\n+    Y: for<'a> Yokeable<'a>,\n+    for<'a> <Y as Yokeable<'a>>::Output: IsCovariant<'a>\n+    {\n+    x.project(|data, _| {\n+        Box::new(data)\n+    })\n+}\n+\n+\n+impl<'a> Yokeable<'a> for Box<dyn IsCovariant<'static> + 'static> {\n+    type Output = Box<dyn IsCovariant<'a> + 'a>;\n+}\n+\n+fn main() {}"}]}