{"sha": "19d0fa107aeb79e7d2e1e4222fad4be8addf679d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZDBmYTEwN2FlYjc5ZTdkMmUxZTQyMjJmYWQ0YmU4YWRkZjY3OWQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-05T00:25:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-05T00:25:52Z"}, "message": "Improve name nodes to ast, teach to parse qualified names, put out flaming tinderbox.", "tree": {"sha": "6fee0ba2f8b477af142a2ca5a0d228e29ef56573", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fee0ba2f8b477af142a2ca5a0d228e29ef56573"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19d0fa107aeb79e7d2e1e4222fad4be8addf679d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19d0fa107aeb79e7d2e1e4222fad4be8addf679d", "html_url": "https://github.com/rust-lang/rust/commit/19d0fa107aeb79e7d2e1e4222fad4be8addf679d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19d0fa107aeb79e7d2e1e4222fad4be8addf679d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e4b2d63aef1e6cb572acfa327ea2c3a36083e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/44e4b2d63aef1e6cb572acfa327ea2c3a36083e8", "html_url": "https://github.com/rust-lang/rust/commit/44e4b2d63aef1e6cb572acfa327ea2c3a36083e8"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "e115087e17b9700e1a71a1502bf38b1632f99fa6", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/19d0fa107aeb79e7d2e1e4222fad4be8addf679d/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d0fa107aeb79e7d2e1e4222fad4be8addf679d/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=19d0fa107aeb79e7d2e1e4222fad4be8addf679d", "patch": "@@ -8,6 +8,19 @@ import util.common.none;\n \n type ident = str;\n \n+type name = rec(ident ident, vec[ty] types);\n+type path = vec[name];\n+\n+type crate_id = int;\n+type slot_id = int;\n+type item_id = int;\n+\n+tag referent {\n+    ref_slot(crate_id, slot_id);\n+    ref_item(crate_id, item_id);\n+}\n+\n+\n type crate = rec(_mod module);\n \n type block = vec[@stmt];\n@@ -62,7 +75,7 @@ tag expr {\n     expr_binary(binop, @expr, @expr);\n     expr_unary(unop, @expr);\n     expr_lit(@lit);\n-    expr_ident(ident);\n+    expr_name(name, option[referent]);\n     expr_field(@expr, ident);\n     expr_index(@expr, @expr);\n     expr_cast(@expr, ty);\n@@ -88,6 +101,7 @@ tag ty {\n     ty_char;\n     ty_str;\n     ty_box(@ty);\n+    ty_path(path, option[referent]);\n }\n \n tag mode {\n@@ -106,6 +120,7 @@ type _mod = hashmap[ident,item];\n tag item {\n     item_fn(@_fn);\n     item_mod(@_mod);\n+    item_ty(@ty);\n }\n \n "}, {"sha": "c939764b77109afa485e85efd08ff39d7aa673c8", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/19d0fa107aeb79e7d2e1e4222fad4be8addf679d/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d0fa107aeb79e7d2e1e4222fad4be8addf679d/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=19d0fa107aeb79e7d2e1e4222fad4be8addf679d", "patch": "@@ -153,7 +153,24 @@ io fn parse_lit(parser p) -> @ast.lit {\n     fail;\n }\n \n+io fn parse_name(parser p, ast.ident id) -> ast.name {\n+    p.bump();\n \n+    let vec[ast.ty] tys = vec();\n+\n+    alt (p.peek()) {\n+        case (token.LBRACKET) {\n+            auto pf = parse_ty;\n+            tys = parse_seq[ast.ty](token.LBRACKET,\n+                                    token.RBRACKET,\n+                                    some(token.COMMA),\n+                                    pf, p);\n+        }\n+        case (_) {\n+        }\n+    }\n+    ret rec(ident=id, types=tys);\n+}\n \n io fn parse_bottom_expr(parser p) -> @ast.expr {\n     alt (p.peek()) {\n@@ -203,8 +220,7 @@ io fn parse_bottom_expr(parser p) -> @ast.expr {\n         }\n \n         case (token.IDENT(?i)) {\n-            p.bump();\n-            ret @ast.expr_ident(i);\n+            ret @ast.expr_name(parse_name(p, i), none[ast.referent]);\n         }\n \n         case (_) {"}, {"sha": "456b82cdc44ad82d0b0fab0268139b4b7d430bc6", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19d0fa107aeb79e7d2e1e4222fad4be8addf679d/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19d0fa107aeb79e7d2e1e4222fad4be8addf679d/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=19d0fa107aeb79e7d2e1e4222fad4be8addf679d", "patch": "@@ -1006,7 +1006,8 @@ obj builder(BuilderRef B) {\n \n \n     /* Miscellaneous instructions */\n-    fn Phi(TypeRef Ty, vec[ValueRef] vals, vec[BasicBlockRef] bbs) -> ValueRef {\n+    fn Phi(TypeRef Ty, vec[ValueRef] vals,\n+           vec[BasicBlockRef] bbs) -> ValueRef {\n         auto phi = llvm.LLVMBuildPhi(B, Ty, _str.buf(\"\"));\n         check (_vec.len[ValueRef](vals) == _vec.len[BasicBlockRef](bbs));\n         llvm.LLVMAddIncoming(phi,"}]}