{"sha": "7963bbb08421c4c5483a33e908ca9375d14c9217", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NjNiYmIwODQyMWM0YzU0ODNhMzNlOTA4Y2E5Mzc1ZDE0YzkyMTc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-08-25T08:22:52Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-08-25T11:38:00Z"}, "message": "Rollup merge of #35916 - eddyb:mir-no-dead-allocas, r=Aatch\n\nrustc_trans: do not generate allocas for unused locals.\n\nThis fixes a regression observed in a [`mio` test](https://travis-ci.org/carllerche/mio/jobs/152142886) which was referencing a 4MB `const` array.\nEven though MIR rvalue promotion would promote the borrow of the array, a dead temp was left behind.\nAs the array doesn't have an immediate type, an `alloca` was generated for it, even though it had no uses.\n\nThe fix is pretty dumb: assume that locals need to be borrowed or assigned before being used.\nAnd if it can't be used, it doesn't get an `alloca`, even if the type would otherwise demand it.\nThis could change in the future, but all the MIR we generate now doesn't break that rule.", "tree": {"sha": "7a56af3c72d7783aeaac91d04273b207771af447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a56af3c72d7783aeaac91d04273b207771af447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7963bbb08421c4c5483a33e908ca9375d14c9217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7963bbb08421c4c5483a33e908ca9375d14c9217", "html_url": "https://github.com/rust-lang/rust/commit/7963bbb08421c4c5483a33e908ca9375d14c9217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7963bbb08421c4c5483a33e908ca9375d14c9217/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e69622e0edf9aaff2135e0566979b3c09cb2d87", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e69622e0edf9aaff2135e0566979b3c09cb2d87", "html_url": "https://github.com/rust-lang/rust/commit/5e69622e0edf9aaff2135e0566979b3c09cb2d87"}, {"sha": "6b95606a136bad2109253e5e32cc13b7ecbbc49e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b95606a136bad2109253e5e32cc13b7ecbbc49e", "html_url": "https://github.com/rust-lang/rust/commit/6b95606a136bad2109253e5e32cc13b7ecbbc49e"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "66eb78aef07b4f0fc7b5bde612daf4996261bed9", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7963bbb08421c4c5483a33e908ca9375d14c9217/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7963bbb08421c4c5483a33e908ca9375d14c9217/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=7963bbb08421c4c5483a33e908ca9375d14c9217", "patch": "@@ -48,6 +48,12 @@ pub fn lvalue_locals<'bcx, 'tcx>(bcx: Block<'bcx,'tcx>,\n                     common::type_is_fat_ptr(bcx.tcx(), ty));\n         } else if common::type_is_imm_pair(bcx.ccx(), ty) {\n             // We allow pairs and uses of any of their 2 fields.\n+        } else if !analyzer.seen_assigned.contains(index) {\n+            // No assignment has been seen, which means that\n+            // either the local has been marked as lvalue\n+            // already, or there is no possible initialization\n+            // for the local, making any reads invalid.\n+            // This is useful in weeding out dead temps.\n         } else {\n             // These sorts of types require an alloca. Note that\n             // type_is_immediate() may *still* be true, particularly"}, {"sha": "9e033421574b9eb333c1d2c3c65943d2c710d751", "filename": "src/test/run-pass/mir_heavy_promoted.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7963bbb08421c4c5483a33e908ca9375d14c9217/src%2Ftest%2Frun-pass%2Fmir_heavy_promoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7963bbb08421c4c5483a33e908ca9375d14c9217/src%2Ftest%2Frun-pass%2Fmir_heavy_promoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_heavy_promoted.rs?ref=7963bbb08421c4c5483a33e908ca9375d14c9217", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const TEST_DATA: [u8; 32 * 1024 * 1024] = [42; 32 * 1024 * 1024];\n+\n+// Check that the promoted copy of TEST_DATA doesn't\n+// leave an alloca from an unused temp behind, which,\n+// without optimizations, can still blow the stack.\n+fn main() {\n+    println!(\"{}\", TEST_DATA.len());\n+}"}]}