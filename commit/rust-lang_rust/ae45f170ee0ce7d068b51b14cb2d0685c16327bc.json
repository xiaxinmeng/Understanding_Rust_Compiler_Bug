{"sha": "ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNDVmMTcwZWUwY2U3ZDA2OGI1MWIxNGNiMmQwNjg1YzE2MzI3YmM=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-27T14:56:59Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-02T06:48:52Z"}, "message": "hir: remove NodeId from StructField", "tree": {"sha": "825e0acd8997827d8c08192329668c3331943ef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/825e0acd8997827d8c08192329668c3331943ef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "html_url": "https://github.com/rust-lang/rust/commit/ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e277d96feffdab52faef3fe5198a550d126db6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e277d96feffdab52faef3fe5198a550d126db6d", "html_url": "https://github.com/rust-lang/rust/commit/7e277d96feffdab52faef3fe5198a550d126db6d"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "b854cd4af1b59b87d03d0f163e864fe09d6fe805", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "patch": "@@ -2743,11 +2743,10 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_struct_field(&mut self, (index, f): (usize, &StructField)) -> hir::StructField {\n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(f.id);\n+        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(f.id);\n \n         hir::StructField {\n             span: f.span,\n-            id: node_id,\n             hir_id,\n             ident: match f.ident {\n                 Some(ident) => ident,"}, {"sha": "fa0487bbc9d48ec65e5f969dc204d57d1a4ef9dd", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "patch": "@@ -2132,7 +2132,6 @@ pub struct StructField {\n     pub span: Span,\n     pub ident: Ident,\n     pub vis: Visibility,\n-    pub id: NodeId,\n     pub hir_id: HirId,\n     pub ty: P<Ty>,\n     pub attrs: HirVec<Attribute>,"}, {"sha": "718e828e601df7f6257f47ccf9f58eabedda1f47", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "patch": "@@ -838,7 +838,6 @@ impl_stable_hash_for!(struct hir::StructField {\n     span,\n     ident -> (ident.name),\n     vis,\n-    id,\n     hir_id,\n     ty,\n     attrs"}, {"sha": "d94a6eb8804b8cd724717b9e664b02cb6bf9c03a", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "patch": "@@ -465,7 +465,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n     }\n \n     fn should_warn_about_field(&mut self, field: &hir::StructField) -> bool {\n-        let field_type = self.tcx.type_of(self.tcx.hir().local_def_id(field.id));\n+        let field_type = self.tcx.type_of(self.tcx.hir().local_def_id_from_hir_id(field.hir_id));\n         !field.is_positional()\n             && !self.symbol_is_live(field.hir_id)\n             && !field_type.is_phantom_data()"}, {"sha": "8b5d70d834d9fde814b469628251371cae7d17a3", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "patch": "@@ -317,10 +317,9 @@ struct MissingStabilityAnnotations<'a, 'tcx: 'a> {\n impl<'a, 'tcx: 'a> MissingStabilityAnnotations<'a, 'tcx> {\n     fn check_missing_stability(&self, hir_id: HirId, span: Span, name: &str) {\n         let stab = self.tcx.stability().local_stability(hir_id);\n-        let node_id = self.tcx.hir().hir_to_node_id(hir_id);\n         let is_error = !self.tcx.sess.opts.test &&\n                         stab.is_none() &&\n-                        self.access_levels.is_reachable(node_id);\n+                        self.access_levels.is_reachable(self.tcx.hir().hir_to_node_id(hir_id));\n         if is_error {\n             self.tcx.sess.span_err(\n                 span,"}, {"sha": "7da28c19d2412d4e30d8040639c5088c297d9312", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "patch": "@@ -69,7 +69,7 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let mut reachable_non_generics: DefIdMap<_> = tcx.reachable_set(LOCAL_CRATE).0\n         .iter()\n-        .filter_map(|&node_id| {\n+        .filter_map(|&hir_id| {\n             // We want to ignore some FFI functions that are not exposed from\n             // this crate. Reachable FFI functions can be lumped into two\n             // categories:\n@@ -83,9 +83,9 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             //\n             // As a result, if this id is an FFI item (foreign item) then we only\n             // let it through if it's included statically.\n-            match tcx.hir().get(node_id) {\n+            match tcx.hir().get_by_hir_id(hir_id) {\n                 Node::ForeignItem(..) => {\n-                    let def_id = tcx.hir().local_def_id(node_id);\n+                    let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n                     if tcx.is_statically_included_foreign_item(def_id) {\n                         Some(def_id)\n                     } else {\n@@ -105,7 +105,7 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     node: hir::ImplItemKind::Method(..),\n                     ..\n                 }) => {\n-                    let def_id = tcx.hir().local_def_id(node_id);\n+                    let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n                     let generics = tcx.generics_of(def_id);\n                     if !generics.requires_monomorphization(tcx) &&\n                         // Functions marked with #[inline] are only ever codegened\n@@ -343,8 +343,8 @@ fn upstream_monomorphizations_for_provider<'a, 'tcx>(\n }\n \n fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> bool {\n-    if let Some(node_id) = tcx.hir().as_local_node_id(def_id) {\n-        !tcx.reachable_set(LOCAL_CRATE).0.contains(&node_id)\n+    if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n+        !tcx.reachable_set(LOCAL_CRATE).0.contains(&hir_id)\n     } else {\n         bug!(\"is_unreachable_local_definition called with non-local DefId: {:?}\",\n              def_id)"}, {"sha": "e540a21c2fda94b80802f66504dcf3173629810a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "patch": "@@ -148,7 +148,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n             hir::ItemKind::Struct(ref struct_def, _) |\n             hir::ItemKind::Union(ref struct_def, _) => {\n                 for struct_field in struct_def.fields() {\n-                    let def_id = cx.tcx.hir().local_def_id(struct_field.id);\n+                    let def_id = cx.tcx.hir().local_def_id_from_hir_id(struct_field.hir_id);\n                     self.check_heap_type(cx, struct_field.span,\n                                          cx.tcx.type_of(def_id));\n                 }\n@@ -560,7 +560,8 @@ impl LintPass for MissingCopyImplementations {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingCopyImplementations {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n-        if !cx.access_levels.is_reachable(item.id) {\n+        let node_id = cx.tcx.hir().hir_to_node_id(item.hir_id);\n+        if !cx.access_levels.is_reachable(node_id) {\n             return;\n         }\n         let (def, ty) = match item.node {\n@@ -631,7 +632,8 @@ impl LintPass for MissingDebugImplementations {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item) {\n-        if !cx.access_levels.is_reachable(item.id) {\n+        let node_id = cx.tcx.hir().hir_to_node_id(item.hir_id);\n+        if !cx.access_levels.is_reachable(node_id) {\n             return;\n         }\n \n@@ -1078,7 +1080,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnionsWithDropFields {\n     fn check_item(&mut self, ctx: &LateContext<'_, '_>, item: &hir::Item) {\n         if let hir::ItemKind::Union(ref vdata, _) = item.node {\n             for field in vdata.fields() {\n-                let field_ty = ctx.tcx.type_of(ctx.tcx.hir().local_def_id(field.id));\n+                let field_ty = ctx.tcx.type_of(\n+                    ctx.tcx.hir().local_def_id_from_hir_id(field.hir_id));\n                 if field_ty.needs_drop(ctx.tcx, ctx.param_env) {\n                     ctx.span_lint(UNIONS_WITH_DROP_FIELDS,\n                                   field.span,"}, {"sha": "51a971823afb8b7f41f90c1a8c4d8048ab56ddd5", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "patch": "@@ -1050,7 +1050,7 @@ struct AdtField<'tcx> {\n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn non_enum_variant(&self, struct_def: &hir::VariantData) -> AdtVariant<'tcx> {\n         let fields = struct_def.fields().iter().map(|field| {\n-            let field_ty = self.tcx.type_of(self.tcx.hir().local_def_id(field.id));\n+            let field_ty = self.tcx.type_of(self.tcx.hir().local_def_id_from_hir_id(field.hir_id));\n             let field_ty = self.normalize_associated_types_in(field.span,\n                                                               &field_ty);\n             AdtField { ty: field_ty, span: field.span }"}, {"sha": "38150192886b1ad955696e836273dfb3c97a5b75", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "patch": "@@ -447,7 +447,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n             tcx.predicates_of(def_id);\n \n             for f in struct_def.fields() {\n-                let def_id = tcx.hir().local_def_id(f.id);\n+                let def_id = tcx.hir().local_def_id_from_hir_id(f.hir_id);\n                 tcx.generics_of(def_id);\n                 tcx.type_of(def_id);\n                 tcx.predicates_of(def_id);\n@@ -555,7 +555,7 @@ fn convert_enum_variant_types<'a, 'tcx>(\n         );\n \n         for f in variant.node.data.fields() {\n-            let def_id = tcx.hir().local_def_id(f.id);\n+            let def_id = tcx.hir().local_def_id_from_hir_id(f.hir_id);\n             tcx.generics_of(def_id);\n             tcx.type_of(def_id);\n             tcx.predicates_of(def_id);\n@@ -582,7 +582,7 @@ fn convert_variant<'a, 'tcx>(\n         .fields()\n         .iter()\n         .map(|f| {\n-            let fid = tcx.hir().local_def_id(f.id);\n+            let fid = tcx.hir().local_def_id_from_hir_id(f.hir_id);\n             let dup_span = seen_fields.get(&f.ident.modern()).cloned();\n             if let Some(prev_span) = dup_span {\n                 struct_span_err!(\n@@ -1577,7 +1577,7 @@ fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> ty::PolyFnSig\n             let ty = tcx.type_of(tcx.hir().get_parent_did(node_id));\n             let inputs = fields\n                 .iter()\n-                .map(|f| tcx.type_of(tcx.hir().local_def_id(f.id)));\n+                .map(|f| tcx.type_of(tcx.hir().local_def_id_from_hir_id(f.hir_id)));\n             ty::Binder::bind(tcx.mk_fn_sig(\n                 inputs,\n                 ty,"}, {"sha": "c39bd13bc3a55e2131e653b0a7f55a5a9892626a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae45f170ee0ce7d068b51b14cb2d0685c16327bc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ae45f170ee0ce7d068b51b14cb2d0685c16327bc", "patch": "@@ -2913,14 +2913,16 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n impl Clean<Item> for hir::StructField {\n     fn clean(&self, cx: &DocContext<'_, '_, '_>) -> Item {\n+        let local_did = cx.tcx.hir().local_def_id_from_hir_id(self.hir_id);\n+\n         Item {\n             name: Some(self.ident.name).clean(cx),\n             attrs: self.attrs.clean(cx),\n             source: self.span.clean(cx),\n             visibility: self.vis.clean(cx),\n-            stability: get_stability(cx, cx.tcx.hir().local_def_id(self.id)),\n-            deprecation: get_deprecation(cx, cx.tcx.hir().local_def_id(self.id)),\n-            def_id: cx.tcx.hir().local_def_id(self.id),\n+            stability: get_stability(cx, local_did),\n+            deprecation: get_deprecation(cx, local_did),\n+            def_id: local_did,\n             inner: StructFieldItem(self.ty.clean(cx)),\n         }\n     }"}]}