{"sha": "a37fe2de697bb1a9d304e4e811836e125f944cd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzN2ZlMmRlNjk3YmIxYTlkMzA0ZTRlODExODM2ZTEyNWY5NDRjZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-27T13:51:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-27T13:51:25Z"}, "message": "Auto merge of #63937 - Nashenas88:rustdoc_57180, r=GuillaumeGomez\n\n Fix ICE in rustdoc when merging generic and where bounds of an Fn with an output\n\nFixes #57180", "tree": {"sha": "132fc6b9457757b05fac04d093c9d42c7e63323c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/132fc6b9457757b05fac04d093c9d42c7e63323c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a37fe2de697bb1a9d304e4e811836e125f944cd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a37fe2de697bb1a9d304e4e811836e125f944cd5", "html_url": "https://github.com/rust-lang/rust/commit/a37fe2de697bb1a9d304e4e811836e125f944cd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a37fe2de697bb1a9d304e4e811836e125f944cd5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "590ae0ec4d0c782f7cf97cff7474dc4012c1b615", "url": "https://api.github.com/repos/rust-lang/rust/commits/590ae0ec4d0c782f7cf97cff7474dc4012c1b615", "html_url": "https://github.com/rust-lang/rust/commit/590ae0ec4d0c782f7cf97cff7474dc4012c1b615"}, {"sha": "143b83a3c1e3a03d9795b891e4f2298c5e59f66a", "url": "https://api.github.com/repos/rust-lang/rust/commits/143b83a3c1e3a03d9795b891e4f2298c5e59f66a", "html_url": "https://github.com/rust-lang/rust/commit/143b83a3c1e3a03d9795b891e4f2298c5e59f66a"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "853170542e083d8613a81bbb472aef95fa57e699", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a37fe2de697bb1a9d304e4e811836e125f944cd5/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37fe2de697bb1a9d304e4e811836e125f944cd5/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=a37fe2de697bb1a9d304e4e811836e125f944cd5", "patch": "@@ -35,7 +35,7 @@ pub fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n                 match ty {\n                     clean::Generic(s) => params.entry(s).or_default()\n                                                .extend(bounds),\n-                    t => tybounds.push((t, ty_bounds(bounds))),\n+                    t => tybounds.push((t, bounds)),\n                 }\n             }\n             WP::RegionPredicate { lifetime, bounds } => {\n@@ -45,11 +45,6 @@ pub fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n         }\n     }\n \n-    // Simplify the type parameter bounds on all the generics\n-    let mut params = params.into_iter().map(|(k, v)| {\n-        (k, ty_bounds(v))\n-    }).collect::<BTreeMap<_, _>>();\n-\n     // Look for equality predicates on associated types that can be merged into\n     // general bound predicates\n     equalities.retain(|&(ref lhs, ref rhs)| {\n@@ -73,7 +68,7 @@ pub fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     // And finally, let's reassemble everything\n     let mut clauses = Vec::new();\n     clauses.extend(lifetimes.into_iter().map(|(lt, bounds)| {\n-        WP::RegionPredicate { lifetime: lt, bounds: bounds }\n+        WP::RegionPredicate { lifetime: lt, bounds }\n     }));\n     clauses.extend(params.into_iter().map(|(k, v)| {\n         WP::BoundPredicate {\n@@ -82,10 +77,10 @@ pub fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n         }\n     }));\n     clauses.extend(tybounds.into_iter().map(|(ty, bounds)| {\n-        WP::BoundPredicate { ty: ty, bounds: bounds }\n+        WP::BoundPredicate { ty, bounds }\n     }));\n     clauses.extend(equalities.into_iter().map(|(lhs, rhs)| {\n-        WP::EqPredicate { lhs: lhs, rhs: rhs }\n+        WP::EqPredicate { lhs, rhs }\n     }));\n     clauses\n }\n@@ -122,9 +117,9 @@ pub fn merge_bounds(\n                     },\n                 });\n             }\n-            PP::Parenthesized { ref mut output, .. } => {\n-                assert!(output.is_none());\n-                if *rhs != clean::Type::Tuple(Vec::new()) {\n+            PP::Parenthesized { ref mut output, .. } => match output {\n+                Some(o) => assert_eq!(o, rhs),\n+                None => if *rhs != clean::Type::Tuple(Vec::new()) {\n                     *output = Some(rhs.clone());\n                 }\n             }\n@@ -137,18 +132,14 @@ pub fn ty_params(mut params: Vec<clean::GenericParamDef>) -> Vec<clean::GenericP\n     for param in &mut params {\n         match param.kind {\n             clean::GenericParamDefKind::Type { ref mut bounds, .. } => {\n-                *bounds = ty_bounds(mem::take(bounds));\n+                *bounds = mem::take(bounds);\n             }\n             _ => panic!(\"expected only type parameters\"),\n         }\n     }\n     params\n }\n \n-fn ty_bounds(bounds: Vec<clean::GenericBound>) -> Vec<clean::GenericBound> {\n-    bounds\n-}\n-\n fn trait_is_same_or_supertrait(cx: &DocContext<'_>, child: DefId,\n                                trait_: DefId) -> bool {\n     if child == trait_ {"}, {"sha": "4e2f4b87c020e9fb934b8c4106787a2a29403c4c", "filename": "src/test/rustdoc/auxiliary/issue-57180.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a37fe2de697bb1a9d304e4e811836e125f944cd5/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-57180.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37fe2de697bb1a9d304e4e811836e125f944cd5/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-57180.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-57180.rs?ref=a37fe2de697bb1a9d304e4e811836e125f944cd5", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: -Cmetadata=aux\n+\n+pub trait Trait {\n+}\n+\n+pub struct Struct<F>\n+{\n+    _p: ::std::marker::PhantomData<F>,\n+}\n+\n+impl<F: Fn() -> u32>\n+Trait for Struct<F>\n+    where\n+        F: Fn() -> u32,\n+{\n+}"}, {"sha": "14bd2b0fec0d50c849d0c00d2d205b5e7bab9b10", "filename": "src/test/rustdoc/issue-57180.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a37fe2de697bb1a9d304e4e811836e125f944cd5/src%2Ftest%2Frustdoc%2Fissue-57180.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37fe2de697bb1a9d304e4e811836e125f944cd5/src%2Ftest%2Frustdoc%2Fissue-57180.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-57180.rs?ref=a37fe2de697bb1a9d304e4e811836e125f944cd5", "patch": "@@ -0,0 +1,7 @@\n+// aux-build:issue-57180.rs\n+\n+extern crate issue_57180;\n+use issue_57180::Trait;\n+\n+fn main() {\n+}"}]}