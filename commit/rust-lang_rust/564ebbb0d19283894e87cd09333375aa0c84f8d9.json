{"sha": "564ebbb0d19283894e87cd09333375aa0c84f8d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NGViYmIwZDE5MjgzODk0ZTg3Y2QwOTMzMzM3NWFhMGM4NGY4ZDk=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-05-20T01:27:03Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-05-20T01:27:50Z"}, "message": "Use fcntl-based file lock for non-Linux unix", "tree": {"sha": "ffa600815eb9ad4948abda784db7069f3ae3e5ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffa600815eb9ad4948abda784db7069f3ae3e5ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/564ebbb0d19283894e87cd09333375aa0c84f8d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/564ebbb0d19283894e87cd09333375aa0c84f8d9", "html_url": "https://github.com/rust-lang/rust/commit/564ebbb0d19283894e87cd09333375aa0c84f8d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/564ebbb0d19283894e87cd09333375aa0c84f8d9/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a23dd0d1e6ddfe6624f1c59e9aefcb59e419610d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a23dd0d1e6ddfe6624f1c59e9aefcb59e419610d", "html_url": "https://github.com/rust-lang/rust/commit/a23dd0d1e6ddfe6624f1c59e9aefcb59e419610d"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "655248e0f522133c4ee92ad656f0a3384885e4b8", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 67, "deletions": 10, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/564ebbb0d19283894e87cd09333375aa0c84f8d9/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564ebbb0d19283894e87cd09333375aa0c84f8d9/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=564ebbb0d19283894e87cd09333375aa0c84f8d9", "patch": "@@ -7,13 +7,13 @@\n #![allow(non_camel_case_types)]\n #![allow(nonstandard_style)]\n \n+use std::fs::{File, OpenOptions};\n use std::io;\n use std::path::Path;\n \n cfg_if! {\n-    if #[cfg(unix)] {\n+    if #[cfg(target_os = \"linux\")] {\n         use std::os::unix::prelude::*;\n-        use std::fs::{File, OpenOptions};\n \n         #[derive(Debug)]\n         pub struct Lock {\n@@ -27,11 +27,11 @@ cfg_if! {\n                        exclusive: bool)\n                        -> io::Result<Lock> {\n                 let file = OpenOptions::new()\n-                           .read(true)\n-                           .write(true)\n-                           .create(create)\n-                           .mode(libc::S_IRWXU as u32)\n-                           .open(p)?;\n+                    .read(true)\n+                    .write(true)\n+                    .create(create)\n+                    .mode(libc::S_IRWXU as u32)\n+                    .open(p)?;\n \n                 let mut operation = if exclusive {\n                     libc::LOCK_EX\n@@ -44,8 +44,7 @@ cfg_if! {\n \n                 let ret = unsafe { libc::flock(file.as_raw_fd(), operation) };\n                 if ret == -1 {\n-                    let err = io::Error::last_os_error();\n-                    Err(err)\n+                    Err(io::Error::last_os_error())\n                 } else {\n                     Ok(Lock { _file: file })\n                 }\n@@ -55,10 +54,68 @@ cfg_if! {\n         // Note that we don't need a Drop impl to execute `flock(fd, LOCK_UN)`. Lock acquired by\n         // `flock` is associated with the file descriptor and closing the file release it\n         // automatically.\n+    } else if #[cfg(unix)] {\n+        use std::mem;\n+        use std::os::unix::prelude::*;\n+\n+        #[derive(Debug)]\n+        pub struct Lock {\n+            file: File,\n+        }\n+\n+        impl Lock {\n+            pub fn new(p: &Path,\n+                       wait: bool,\n+                       create: bool,\n+                       exclusive: bool)\n+                       -> io::Result<Lock> {\n+                let file = OpenOptions::new()\n+                    .read(true)\n+                    .write(true)\n+                    .create(create)\n+                    .mode(libc::S_IRWXU as u32)\n+                    .open(p)?;\n+\n+                let lock_type = if exclusive {\n+                    libc::F_WRLCK\n+                } else {\n+                    libc::F_RDLCK\n+                };\n+\n+                let mut flock: libc::flock = unsafe { mem::zeroed() };\n+                flock.l_type = lock_type as libc::c_short;\n+                flock.l_whence = libc::SEEK_SET as libc::c_short;\n+                flock.l_start = 0;\n+                flock.l_len = 0;\n+\n+                let cmd = if wait { libc::F_SETLKW } else { libc::F_SETLK };\n+                let ret = unsafe {\n+                    libc::fcntl(file.as_raw_fd(), cmd, &flock)\n+                };\n+                if ret == -1 {\n+                    Err(io::Error::last_os_error())\n+                } else {\n+                    Ok(Lock { file })\n+                }\n+            }\n+        }\n+\n+        impl Drop for Lock {\n+            fn drop(&mut self) {\n+                let mut flock: libc::flock = unsafe { mem::zeroed() };\n+                flock.l_type = libc::F_UNLCK as libc::c_short;\n+                flock.l_whence = libc::SEEK_SET as libc::c_short;\n+                flock.l_start = 0;\n+                flock.l_len = 0;\n+\n+                unsafe {\n+                    libc::fcntl(self.file.as_raw_fd(), libc::F_SETLK, &flock);\n+                }\n+            }\n+        }\n     } else if #[cfg(windows)] {\n         use std::mem;\n         use std::os::windows::prelude::*;\n-        use std::fs::{File, OpenOptions};\n \n         use winapi::um::minwinbase::{OVERLAPPED, LOCKFILE_FAIL_IMMEDIATELY, LOCKFILE_EXCLUSIVE_LOCK};\n         use winapi::um::fileapi::LockFileEx;"}]}