{"sha": "5062ad3c60367abb4566885a3276b9305edcf614", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNjJhZDNjNjAzNjdhYmI0NTY2ODg1YTMyNzZiOTMwNWVkY2Y2MTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-08T01:33:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-08T01:33:55Z"}, "message": "Rollup merge of #61615 - petrochenkov:errlit, r=matklad\n\nsyntax: Treat error literals in more principled way\n\nFree them from their character literal origins.\n\nI actually tried to remove `LitKind::Err` entirely (by converting it into `ExprKind::Err` immediately), and it caused no diagnostic regressions in the test suite.\nHowever, I'd still want to use error literals as general purpose error tokens some day, so I kept them.\n\nThe downside of having `LitKind::Err` in addition to `ExprKind::Err` is that every time you want to do something with `ExprKind::Err` you need to make sure that `ExprKind::Lit(LitKind::Err)` is treated in the same way.\nFortunately, this usually happens automatically because both literals and errors are \"leaf\" expressions, however this PR does fix a couple of inconsistencies between them.\n\nAddresses https://github.com/rust-lang/rust/pull/60679#discussion_r282640663 in a way", "tree": {"sha": "241990a5fae0edce0cfaa970e556da9dcd76fa00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/241990a5fae0edce0cfaa970e556da9dcd76fa00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5062ad3c60367abb4566885a3276b9305edcf614", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc+xCDCRBK7hj4Ov3rIwAAdHIIABiAB64QnjA+WGYUlYNRWXo5\nSyPuTLrlbHmPKFKMW8Ohpl4HKNdIK+6epKScRU6s+b7ivxcc2GICSM4Vd/iWfSbh\nv6vZGFRYyUQYhr/CcqqQ4xIRhyxmiVG4v6mqBqaFBD66c3VluDXjJpmxoQC5OGRt\n8SRUgBWFNZJwHcXk7oxurwB8YZYXZdj3pcDoyd/8XVY9vXfbR5dWneeIJZTNt2+8\nnyTIUED+2MsJouiTnR0D2CzpsjeI2Sip19JG6NdF7aq7HzpFvGQHzHrKgcIiATI4\nbncNvl5ixaCymAycbpwiLYBzyKmd7MlRfn0RcMg3N5lBYg8u9J0wXENfS0Ryxm8=\n=H8Wr\n-----END PGP SIGNATURE-----\n", "payload": "tree 241990a5fae0edce0cfaa970e556da9dcd76fa00\nparent 2a9bcbf9a9e1641288a2024de4843382f4ff4c2d\nparent 2af47facc3fd7eda3fb4e52f0589bb6f48eff15c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559957635 +0200\ncommitter GitHub <noreply@github.com> 1559957635 +0200\n\nRollup merge of #61615 - petrochenkov:errlit, r=matklad\n\nsyntax: Treat error literals in more principled way\n\nFree them from their character literal origins.\n\nI actually tried to remove `LitKind::Err` entirely (by converting it into `ExprKind::Err` immediately), and it caused no diagnostic regressions in the test suite.\nHowever, I'd still want to use error literals as general purpose error tokens some day, so I kept them.\n\nThe downside of having `LitKind::Err` in addition to `ExprKind::Err` is that every time you want to do something with `ExprKind::Err` you need to make sure that `ExprKind::Lit(LitKind::Err)` is treated in the same way.\nFortunately, this usually happens automatically because both literals and errors are \"leaf\" expressions, however this PR does fix a couple of inconsistencies between them.\n\nAddresses https://github.com/rust-lang/rust/pull/60679#discussion_r282640663 in a way\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5062ad3c60367abb4566885a3276b9305edcf614", "html_url": "https://github.com/rust-lang/rust/commit/5062ad3c60367abb4566885a3276b9305edcf614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5062ad3c60367abb4566885a3276b9305edcf614/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a9bcbf9a9e1641288a2024de4843382f4ff4c2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9bcbf9a9e1641288a2024de4843382f4ff4c2d", "html_url": "https://github.com/rust-lang/rust/commit/2a9bcbf9a9e1641288a2024de4843382f4ff4c2d"}, {"sha": "2af47facc3fd7eda3fb4e52f0589bb6f48eff15c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2af47facc3fd7eda3fb4e52f0589bb6f48eff15c", "html_url": "https://github.com/rust-lang/rust/commit/2af47facc3fd7eda3fb4e52f0589bb6f48eff15c"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "f4f9d6261de4806c6e07d834a756eae729142987", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=5062ad3c60367abb4566885a3276b9305edcf614", "patch": "@@ -1020,7 +1020,6 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprKind::AddrOf(_, ref subexpression) | ExprKind::Unary(_, ref subexpression) => {\n             visitor.visit_expr(subexpression)\n         }\n-        ExprKind::Lit(_) => {}\n         ExprKind::Cast(ref subexpression, ref typ) | ExprKind::Type(ref subexpression, ref typ) => {\n             visitor.visit_expr(subexpression);\n             visitor.visit_ty(typ)\n@@ -1093,7 +1092,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprKind::Yield(ref subexpression) => {\n             visitor.visit_expr(subexpression);\n         }\n-        ExprKind::Err => {}\n+        ExprKind::Lit(_) | ExprKind::Err => {}\n     }\n }\n "}, {"sha": "e0c01277801d45b7107f24b83e9ec3d25018aca4", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=5062ad3c60367abb4566885a3276b9305edcf614", "patch": "@@ -170,14 +170,14 @@ impl_stable_hash_for!(struct ::syntax::ast::Lit {\n \n impl_stable_hash_for!(enum ::syntax::ast::LitKind {\n     Str(value, style),\n-    Err(value),\n     ByteStr(value),\n     Byte(value),\n     Char(value),\n     Int(value, lit_int_type),\n     Float(value, float_ty),\n     FloatUnsuffixed(value),\n-    Bool(value)\n+    Bool(value),\n+    Err(value)\n });\n \n impl_stable_hash_for_spanned!(::syntax::ast::LitKind);"}, {"sha": "b5604f4cb0f8eda5cf1920641716852d95a3729d", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=5062ad3c60367abb4566885a3276b9305edcf614", "patch": "@@ -34,15 +34,6 @@ crate fn lit_to_const<'a, 'gcx, 'tcx>(\n             let allocation = tcx.intern_const_alloc(allocation);\n             ConstValue::Slice { data: allocation, start: 0, end: s.len() }\n         },\n-        LitKind::Err(ref s) => {\n-            let s = s.as_str();\n-            let allocation = Allocation::from_byte_aligned_bytes(s.as_bytes());\n-            let allocation = tcx.intern_const_alloc(allocation);\n-            return Ok(tcx.mk_const(ty::Const {\n-                val: ConstValue::Slice{ data: allocation, start: 0, end: s.len() },\n-                ty: tcx.types.err,\n-            }));\n-        },\n         LitKind::ByteStr(ref data) => {\n             let id = tcx.allocate_bytes(data);\n             ConstValue::Scalar(Scalar::Ptr(id.into()))\n@@ -66,6 +57,7 @@ crate fn lit_to_const<'a, 'gcx, 'tcx>(\n         }\n         LitKind::Bool(b) => ConstValue::Scalar(Scalar::from_bool(b)),\n         LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n+        LitKind::Err(_) => unreachable!(),\n     };\n     Ok(tcx.mk_const(ty::Const { val: lit, ty }))\n }"}, {"sha": "02fbcb14fa599a25b20811ffb92a922bb6f98294", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=5062ad3c60367abb4566885a3276b9305edcf614", "patch": "@@ -1368,7 +1368,7 @@ pub enum LitKind {\n     FloatUnsuffixed(Symbol),\n     /// A boolean literal.\n     Bool(bool),\n-    /// A recovered character literal that contains mutliple `char`s, most likely a typo.\n+    /// Placeholder for a literal that wasn't well-formed in some way.\n     Err(Symbol),\n }\n \n@@ -1406,10 +1406,10 @@ impl LitKind {\n             | LitKind::ByteStr(..)\n             | LitKind::Byte(..)\n             | LitKind::Char(..)\n-            | LitKind::Err(..)\n             | LitKind::Int(_, LitIntType::Unsuffixed)\n             | LitKind::FloatUnsuffixed(..)\n-            | LitKind::Bool(..) => true,\n+            | LitKind::Bool(..)\n+            | LitKind::Err(..) => true,\n             // suffixed variants\n             LitKind::Int(_, LitIntType::Signed(..))\n             | LitKind::Int(_, LitIntType::Unsigned(..))"}, {"sha": "2889f8edfc64cc4d4cc9ea441c8c852f35d1b624", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=5062ad3c60367abb4566885a3276b9305edcf614", "patch": "@@ -1101,7 +1101,6 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { node, id, span, attrs }: &mut Expr,\n             vis.visit_expr(rhs);\n         }\n         ExprKind::Unary(_unop, ohs) => vis.visit_expr(ohs),\n-        ExprKind::Lit(_lit) => {}\n         ExprKind::Cast(expr, ty) => {\n             vis.visit_expr(expr);\n             vis.visit_ty(ty);\n@@ -1225,7 +1224,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { node, id, span, attrs }: &mut Expr,\n         }\n         ExprKind::Try(expr) => vis.visit_expr(expr),\n         ExprKind::TryBlock(body) => vis.visit_block(body),\n-        ExprKind::Err => {}\n+        ExprKind::Lit(_) | ExprKind::Err => {}\n     }\n     vis.visit_id(id);\n     vis.visit_span(span);"}, {"sha": "467ad6ccfbe8838b928903e2f53bbb1c890bd20a", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=5062ad3c60367abb4566885a3276b9305edcf614", "patch": "@@ -311,7 +311,11 @@ impl<'a> Parser<'a> {\n                 let (lit, span) = (token.expect_lit(), token.span);\n                 self.bump();\n                 err.report(&self.sess.span_diagnostic, lit, span);\n-                let lit = token::Lit::new(token::Err, lit.symbol, lit.suffix);\n+                // Pack possible quotes and prefixes from the original literal into\n+                // the error literal's symbol so they can be pretty-printed faithfully.\n+                let suffixless_lit = token::Lit::new(lit.kind, lit.symbol, None);\n+                let symbol = Symbol::intern(&pprust::literal_to_string(suffixless_lit));\n+                let lit = token::Lit::new(token::Err, symbol, lit.suffix);\n                 Lit::from_lit_token(lit, span).map_err(|_| unreachable!())\n             }\n         }"}, {"sha": "d922e1896cc9cf0dd3c95d0a7d03340423ba6940", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5062ad3c60367abb4566885a3276b9305edcf614", "patch": "@@ -168,9 +168,6 @@ pub fn literal_to_string(lit: token::Lit) -> String {\n     let mut out = match kind {\n         token::Byte          => format!(\"b'{}'\", symbol),\n         token::Char          => format!(\"'{}'\", symbol),\n-        token::Bool          |\n-        token::Float         |\n-        token::Integer       => symbol.to_string(),\n         token::Str           => format!(\"\\\"{}\\\"\", symbol),\n         token::StrRaw(n)     => format!(\"r{delim}\\\"{string}\\\"{delim}\",\n                                         delim=\"#\".repeat(n as usize),\n@@ -179,7 +176,10 @@ pub fn literal_to_string(lit: token::Lit) -> String {\n         token::ByteStrRaw(n) => format!(\"br{delim}\\\"{string}\\\"{delim}\",\n                                         delim=\"#\".repeat(n as usize),\n                                         string=symbol),\n-        token::Err           => format!(\"'{}'\", symbol),\n+        token::Integer       |\n+        token::Float         |\n+        token::Bool          |\n+        token::Err           => symbol.to_string(),\n     };\n \n     if let Some(suffix) = suffix {"}, {"sha": "24b0c37247191efb3ae0b19bf7bfd70e7b186764", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5062ad3c60367abb4566885a3276b9305edcf614", "patch": "@@ -714,7 +714,6 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::AddrOf(_, ref subexpression) | ExprKind::Unary(_, ref subexpression) => {\n             visitor.visit_expr(subexpression)\n         }\n-        ExprKind::Lit(_) => {}\n         ExprKind::Cast(ref subexpression, ref typ) | ExprKind::Type(ref subexpression, ref typ) => {\n             visitor.visit_expr(subexpression);\n             visitor.visit_ty(typ)\n@@ -826,7 +825,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::TryBlock(ref body) => {\n             visitor.visit_block(body)\n         }\n-        ExprKind::Err => {}\n+        ExprKind::Lit(_) | ExprKind::Err => {}\n     }\n \n     visitor.visit_expr_post(expression)"}, {"sha": "68d5178372eba7b774b61dca11a1faa607937a4f", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5062ad3c60367abb4566885a3276b9305edcf614/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=5062ad3c60367abb4566885a3276b9305edcf614", "patch": "@@ -22,7 +22,6 @@ pub fn expand_syntax_ext(\n         match e.node {\n             ast::ExprKind::Lit(ref lit) => match lit.node {\n                 ast::LitKind::Str(ref s, _)\n-                | ast::LitKind::Err(ref s)\n                 | ast::LitKind::Float(ref s, _)\n                 | ast::LitKind::FloatUnsuffixed(ref s) => {\n                     accumulator.push_str(&s.as_str());\n@@ -41,6 +40,9 @@ pub fn expand_syntax_ext(\n                 ast::LitKind::Byte(..) | ast::LitKind::ByteStr(..) => {\n                     cx.span_err(e.span, \"cannot concatenate a byte string literal\");\n                 }\n+                ast::LitKind::Err(_) => {\n+                    has_errors = true;\n+                }\n             },\n             ast::ExprKind::Err => {\n                 has_errors = true;"}, {"sha": "c3975f6b9255e657943b25ab39cd8c3a1720a1a5", "filename": "src/test/ui/extenv/issue-55897.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5062ad3c60367abb4566885a3276b9305edcf614/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5062ad3c60367abb4566885a3276b9305edcf614/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.rs?ref=5062ad3c60367abb4566885a3276b9305edcf614", "patch": "@@ -12,4 +12,9 @@ mod nonexistent_env {\n     //~^ ERROR environment variable `NON_EXISTENT` not defined\n }\n \n+mod erroneous_literal {\n+    include!(concat!(\"NON_EXISTENT\"suffix, \"/data.rs\"));\n+    //~^ ERROR suffixes on a string literal are invalid\n+}\n+\n fn main() {}"}, {"sha": "9d68131beabd7a7fe72f2406ec89a8edf69bbb35", "filename": "src/test/ui/extenv/issue-55897.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5062ad3c60367abb4566885a3276b9305edcf614/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5062ad3c60367abb4566885a3276b9305edcf614/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr?ref=5062ad3c60367abb4566885a3276b9305edcf614", "patch": "@@ -4,6 +4,12 @@ error: environment variable `NON_EXISTENT` not defined\n LL |     include!(concat!(env!(\"NON_EXISTENT\"), \"/data.rs\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^\n \n+error: suffixes on a string literal are invalid\n+  --> $DIR/issue-55897.rs:16:22\n+   |\n+LL |     include!(concat!(\"NON_EXISTENT\"suffix, \"/data.rs\"));\n+   |                      ^^^^^^^^^^^^^^^^^^^^ invalid suffix `suffix`\n+\n error[E0432]: unresolved import `prelude`\n   --> $DIR/issue-55897.rs:1:5\n    |\n@@ -21,6 +27,6 @@ LL |     include!(concat!(env!(\"NON_EXISTENT\"), \"/data.rs\"));\n    |\n    = note: import resolution is stuck, try simplifying macro imports\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0432`."}]}