{"sha": "109cdc754ed893edb25d2d2c1493023858c8eccb", "node_id": "C_kwDOAAsO6NoAKDEwOWNkYzc1NGVkODkzZWRiMjVkMmQyYzE0OTMwMjM4NThjOGVjY2I", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-04T05:46:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-09T22:47:50Z"}, "message": "suggest enabling generic_const_exprs feature if const is unevaluatable", "tree": {"sha": "34c02943d9c52d0221b78b218725823b6796d962", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34c02943d9c52d0221b78b218725823b6796d962"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/109cdc754ed893edb25d2d2c1493023858c8eccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/109cdc754ed893edb25d2d2c1493023858c8eccb", "html_url": "https://github.com/rust-lang/rust/commit/109cdc754ed893edb25d2d2c1493023858c8eccb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/109cdc754ed893edb25d2d2c1493023858c8eccb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b07d59f794d8fffb628f82c9c8156f5457de5e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/b07d59f794d8fffb628f82c9c8156f5457de5e49", "html_url": "https://github.com/rust-lang/rust/commit/b07d59f794d8fffb628f82c9c8156f5457de5e49"}], "stats": {"total": 134, "additions": 109, "deletions": 25}, "files": [{"sha": "0403c611d0b3f4ec093b283bedb27a69a125278b", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/109cdc754ed893edb25d2d2c1493023858c8eccb/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109cdc754ed893edb25d2d2c1493023858c8eccb/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=109cdc754ed893edb25d2d2c1493023858c8eccb", "patch": "@@ -17,6 +17,7 @@\n #![feature(derive_default_enum)]\n #![feature(hash_drain_filter)]\n #![feature(label_break_value)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "a3121a4da5047f00791cccd5e898c058233d0df4", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 63, "deletions": 25, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/109cdc754ed893edb25d2d2c1493023858c8eccb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109cdc754ed893edb25d2d2c1493023858c8eccb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=109cdc754ed893edb25d2d2c1493023858c8eccb", "patch": "@@ -35,34 +35,14 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     span: Span,\n ) -> Result<(), NotConstEvaluatable> {\n     debug!(\"is_const_evaluatable({:?})\", uv);\n-    if infcx.tcx.features().generic_const_exprs {\n-        let tcx = infcx.tcx;\n+    let tcx = infcx.tcx;\n+\n+    if tcx.features().generic_const_exprs {\n         match AbstractConst::new(tcx, uv)? {\n             // We are looking at a generic abstract constant.\n             Some(ct) => {\n-                for pred in param_env.caller_bounds() {\n-                    match pred.kind().skip_binder() {\n-                        ty::PredicateKind::ConstEvaluatable(uv) => {\n-                            if let Some(b_ct) = AbstractConst::new(tcx, uv)? {\n-                                // Try to unify with each subtree in the AbstractConst to allow for\n-                                // `N + 1` being const evaluatable even if theres only a `ConstEvaluatable`\n-                                // predicate for `(N + 1) * 2`\n-                                let result =\n-                                    walk_abstract_const(tcx, b_ct, |b_ct| {\n-                                        match try_unify(tcx, ct, b_ct) {\n-                                            true => ControlFlow::BREAK,\n-                                            false => ControlFlow::CONTINUE,\n-                                        }\n-                                    });\n-\n-                                if let ControlFlow::Break(()) = result {\n-                                    debug!(\"is_const_evaluatable: abstract_const ~~> ok\");\n-                                    return Ok(());\n-                                }\n-                            }\n-                        }\n-                        _ => {} // don't care\n-                    }\n+                if satisfied_from_param_env(tcx, ct, param_env)? {\n+                    return Ok(());\n                 }\n \n                 // We were unable to unify the abstract constant with\n@@ -163,6 +143,33 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n         }\n     }\n \n+    // If we're evaluating a foreign constant, under a nightly compiler without generic\n+    // const exprs, AND it would've passed if that expression had been evaluated with\n+    // generic const exprs, then suggest using generic const exprs.\n+    if concrete.is_err()\n+        && tcx.sess.is_nightly_build()\n+        && !uv.def.did.is_local()\n+        && !tcx.features().generic_const_exprs\n+        && let Ok(Some(ct)) = AbstractConst::new(tcx, uv)\n+        && satisfied_from_param_env(tcx, ct, param_env) == Ok(true)\n+    {\n+        tcx.sess\n+            .struct_span_fatal(\n+                // Slightly better span than just using `span` alone\n+                if span == rustc_span::DUMMY_SP { tcx.def_span(uv.def.did) } else { span },\n+                \"failed to evaluate generic const expression\",\n+            )\n+            .note(\"the crate this constant originates from uses `#![feature(generic_const_exprs)]`\")\n+            .span_suggestion_verbose(\n+                rustc_span::DUMMY_SP,\n+                \"consider enabling this feature\",\n+                \"#![feature(generic_const_exprs)]\\n\".to_string(),\n+                rustc_errors::Applicability::MaybeIncorrect,\n+            )\n+            .emit();\n+        rustc_errors::FatalError.raise();\n+    }\n+\n     debug!(?concrete, \"is_const_evaluatable\");\n     match concrete {\n         Err(ErrorHandled::TooGeneric) => Err(match uv.has_infer_types_or_consts() {\n@@ -178,6 +185,37 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     }\n }\n \n+fn satisfied_from_param_env<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ct: AbstractConst<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+) -> Result<bool, NotConstEvaluatable> {\n+    for pred in param_env.caller_bounds() {\n+        match pred.kind().skip_binder() {\n+            ty::PredicateKind::ConstEvaluatable(uv) => {\n+                if let Some(b_ct) = AbstractConst::new(tcx, uv)? {\n+                    // Try to unify with each subtree in the AbstractConst to allow for\n+                    // `N + 1` being const evaluatable even if theres only a `ConstEvaluatable`\n+                    // predicate for `(N + 1) * 2`\n+                    let result =\n+                        walk_abstract_const(tcx, b_ct, |b_ct| match try_unify(tcx, ct, b_ct) {\n+                            true => ControlFlow::BREAK,\n+                            false => ControlFlow::CONTINUE,\n+                        });\n+\n+                    if let ControlFlow::Break(()) = result {\n+                        debug!(\"is_const_evaluatable: abstract_const ~~> ok\");\n+                        return Ok(true);\n+                    }\n+                }\n+            }\n+            _ => {} // don't care\n+        }\n+    }\n+\n+    Ok(false)\n+}\n+\n /// A tree representing an anonymous constant.\n ///\n /// This is only able to represent a subset of `MIR`,"}, {"sha": "df454dae7250f5f19cb42b9dbf261fbfb65f6225", "filename": "src/test/ui/const-generics/generic_const_exprs/auxiliary/issue-94287-aux.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/109cdc754ed893edb25d2d2c1493023858c8eccb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fissue-94287-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109cdc754ed893edb25d2d2c1493023858c8eccb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fissue-94287-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fauxiliary%2Fissue-94287-aux.rs?ref=109cdc754ed893edb25d2d2c1493023858c8eccb", "patch": "@@ -0,0 +1,21 @@\n+#![feature(generic_const_exprs)]\n+\n+use std::str::FromStr;\n+\n+pub struct If<const CONDITION: bool>;\n+\n+pub trait True {}\n+\n+impl True for If<true> {}\n+\n+pub struct FixedI32<const FRAC: u32>;\n+\n+impl<const FRAC: u32> FromStr for FixedI32<FRAC>\n+where\n+    If<{ FRAC <= 32 }>: True,\n+{\n+    type Err = ();\n+    fn from_str(_s: &str) -> Result<Self, Self::Err> {\n+        unimplemented!()\n+    }\n+}"}, {"sha": "643126a4640a8896b0189f20bb674ab53b5f2666", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-94287.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/109cdc754ed893edb25d2d2c1493023858c8eccb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109cdc754ed893edb25d2d2c1493023858c8eccb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.rs?ref=109cdc754ed893edb25d2d2c1493023858c8eccb", "patch": "@@ -0,0 +1,10 @@\n+// aux-build:issue-94287-aux.rs\n+// build-fail\n+\n+extern crate issue_94287_aux;\n+\n+use std::str::FromStr;\n+\n+fn main() {\n+    let _ = <issue_94287_aux::FixedI32<16>>::from_str(\"\");\n+}"}, {"sha": "c918651ba62d986d603e3df5c19d22e3e74ecc38", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-94287.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/109cdc754ed893edb25d2d2c1493023858c8eccb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109cdc754ed893edb25d2d2c1493023858c8eccb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.stderr?ref=109cdc754ed893edb25d2d2c1493023858c8eccb", "patch": "@@ -0,0 +1,14 @@\n+error: failed to evaluate generic const expression\n+  --> $DIR/auxiliary/issue-94287-aux.rs:15:8\n+   |\n+LL |     If<{ FRAC <= 32 }>: True,\n+   |        ^^^^^^^^^^^^^^\n+   |\n+   = note: the crate this constant originates from uses `#![feature(generic_const_exprs)]`\n+help: consider enabling this feature\n+   |\n+LL | #![feature(generic_const_exprs)]\n+   |\n+\n+error: aborting due to previous error\n+"}]}