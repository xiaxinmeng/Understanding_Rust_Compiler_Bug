{"sha": "daf7e359a10306c004bdffd06b6432998d70b858", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZjdlMzU5YTEwMzA2YzAwNGJkZmZkMDZiNjQzMjk5OGQ3MGI4NTg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:34:39Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:34:39Z"}, "message": "Fix rebase issues with existential types", "tree": {"sha": "90c5845789d855841e52e5e291d36d78dcd1d362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90c5845789d855841e52e5e291d36d78dcd1d362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/daf7e359a10306c004bdffd06b6432998d70b858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/daf7e359a10306c004bdffd06b6432998d70b858", "html_url": "https://github.com/rust-lang/rust/commit/daf7e359a10306c004bdffd06b6432998d70b858", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/daf7e359a10306c004bdffd06b6432998d70b858/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21136b8ab408a71c9f275f6ddcb9838a74c43a0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/21136b8ab408a71c9f275f6ddcb9838a74c43a0c", "html_url": "https://github.com/rust-lang/rust/commit/21136b8ab408a71c9f275f6ddcb9838a74c43a0c"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "ed86ef705649b651de8f718032c5f3cdb615c8cf", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daf7e359a10306c004bdffd06b6432998d70b858/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf7e359a10306c004bdffd06b6432998d70b858/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=daf7e359a10306c004bdffd06b6432998d70b858", "patch": "@@ -511,7 +511,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         ItemExistential(ExistTy {ref generics, ref bounds, impl_trait_fn}) => {\n             visitor.visit_id(item.id);\n             walk_generics(visitor, generics);\n-            walk_list!(visitor, visit_ty_param_bound, bounds);\n+            walk_list!(visitor, visit_param_bound, bounds);\n             if let Some(impl_trait_fn) = impl_trait_fn {\n                 visitor.visit_def_mention(Def::Fn(impl_trait_fn))\n             }"}, {"sha": "6291e0eb113728dc8a8711baec6e7dfe5f7f3ca2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daf7e359a10306c004bdffd06b6432998d70b858/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf7e359a10306c004bdffd06b6432998d70b858/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=daf7e359a10306c004bdffd06b6432998d70b858", "patch": "@@ -1165,7 +1165,7 @@ impl<'a> LoweringContext<'a> {\n                         self.allocate_hir_id_counter(exist_ty_node_id, t);\n \n                         let hir_bounds = self.with_hir_id_owner(exist_ty_node_id, |lctx| {\n-                            lctx.lower_bounds(bounds, itctx)\n+                            lctx.lower_param_bounds(bounds, itctx)\n                         });\n \n                         let (lifetimes, lifetime_defs) = self.lifetimes_from_impl_trait_bounds("}, {"sha": "14f780fab7f2e5d0b1de06a763fb95115dfd6677", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/daf7e359a10306c004bdffd06b6432998d70b858/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daf7e359a10306c004bdffd06b6432998d70b858/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=daf7e359a10306c004bdffd06b6432998d70b858", "patch": "@@ -662,7 +662,7 @@ impl<'a> State<'a> {\n                 self.word_space(\":\")?;\n                 let mut real_bounds = Vec::with_capacity(exist.bounds.len());\n                 for b in exist.bounds.iter() {\n-                    if let TraitTyParamBound(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n+                    if let GenericBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n                         self.s.space()?;\n                         self.word_space(\"for ?\")?;\n                         self.print_trait_ref(&ptr.trait_ref)?;"}]}