{"sha": "05939d504345673b20f701ec6a2dfec043e6c8a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OTM5ZDUwNDM0NTY3M2IyMGY3MDFlYzZhMmRmZWMwNDNlNmM4YTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-23T08:15:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-23T08:15:05Z"}, "message": "Merge #2366\n\n2366: Move attrs query to hir_def r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "cd57fc21ce442e84bdc41241a70ece9995d826af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd57fc21ce442e84bdc41241a70ece9995d826af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05939d504345673b20f701ec6a2dfec043e6c8a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2OqJCRBK7hj4Ov3rIwAAdHIIAC4yMNJc8/FMWJ0mfFD0afWQ\nNyA1wHgpRVlIFSxPoc7QrELfEA1lQlH4Gc43gvzSGsH1TFt5Uzm5OFITiDHv2wIP\n9QnCtbTn675zOabdpFAgX8QgmcqMRdb6eXxllKZWGrZA+565Lcc9dSD1og1xDW4k\ntUPfSq9xvEHDO4JSPG/VA7RJLqCj8HFgGL6Tt0CUxtwf0e9e+uLMewGqtRFz1VyG\nu2R5A6z0IysU/2AaYvo6hLZ5/IQ65f9oFnsJ/H8Th83RBTEhDrG3mZz6SLse57cg\nUQkbcL61vOy/M+oq7FptywumQLSFipLktkN9Gsw33hffUn4dgk+lBkiL9SjieNk=\n=1Dji\n-----END PGP SIGNATURE-----\n", "payload": "tree cd57fc21ce442e84bdc41241a70ece9995d826af\nparent 81bfbd26bef1a63ccbeba33430e6b07a53c8e7d9\nparent 552ba868afc8f72202ac834d07bbeb330aca007d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574496905 +0000\ncommitter GitHub <noreply@github.com> 1574496905 +0000\n\nMerge #2366\n\n2366: Move attrs query to hir_def r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05939d504345673b20f701ec6a2dfec043e6c8a4", "html_url": "https://github.com/rust-lang/rust/commit/05939d504345673b20f701ec6a2dfec043e6c8a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05939d504345673b20f701ec6a2dfec043e6c8a4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81bfbd26bef1a63ccbeba33430e6b07a53c8e7d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/81bfbd26bef1a63ccbeba33430e6b07a53c8e7d9", "html_url": "https://github.com/rust-lang/rust/commit/81bfbd26bef1a63ccbeba33430e6b07a53c8e7d9"}, {"sha": "552ba868afc8f72202ac834d07bbeb330aca007d", "url": "https://api.github.com/repos/rust-lang/rust/commits/552ba868afc8f72202ac834d07bbeb330aca007d", "html_url": "https://github.com/rust-lang/rust/commit/552ba868afc8f72202ac834d07bbeb330aca007d"}], "stats": {"total": 325, "additions": 202, "deletions": 123}, "files": [{"sha": "496b4ee8a4efaae4981f71aefe734b1f842dbf34", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=05939d504345673b20f701ec6a2dfec043e6c8a4", "patch": "@@ -2,7 +2,6 @@\n \n pub(crate) mod src;\n pub(crate) mod docs;\n-pub(crate) mod attrs;\n \n use std::sync::Arc;\n \n@@ -13,8 +12,8 @@ use hir_def::{\n     nameres::per_ns::PerNs,\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n-    ContainerId, CrateModuleId, HasModule, ImplId, LocalEnumVariantId, LocalStructFieldId, Lookup,\n-    ModuleId, UnionId,\n+    AdtId, ContainerId, CrateModuleId, EnumVariantId, HasModule, ImplId, LocalEnumVariantId,\n+    LocalStructFieldId, Lookup, ModuleId, StructFieldId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -110,7 +109,7 @@ impl_froms!(\n     BuiltinType\n );\n \n-pub use hir_def::ModuleSource;\n+pub use hir_def::{attr::Attrs, ModuleSource};\n \n impl Module {\n     pub(crate) fn new(krate: Crate, crate_module_id: CrateModuleId) -> Module {\n@@ -991,3 +990,52 @@ impl From<PerNs> for ScopeDef {\n             .unwrap_or(ScopeDef::Unknown)\n     }\n }\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum AttrDef {\n+    Module(Module),\n+    StructField(StructField),\n+    Adt(Adt),\n+    Function(Function),\n+    EnumVariant(EnumVariant),\n+    Static(Static),\n+    Const(Const),\n+    Trait(Trait),\n+    TypeAlias(TypeAlias),\n+    MacroDef(MacroDef),\n+}\n+\n+impl_froms!(\n+    AttrDef: Module,\n+    StructField,\n+    Adt(Struct, Enum, Union),\n+    EnumVariant,\n+    Static,\n+    Const,\n+    Function,\n+    Trait,\n+    TypeAlias,\n+    MacroDef\n+);\n+\n+pub trait HasAttrs {\n+    fn attrs(self, db: &impl DefDatabase) -> Attrs;\n+}\n+\n+impl<T: Into<AttrDef>> HasAttrs for T {\n+    fn attrs(self, db: &impl DefDatabase) -> Attrs {\n+        let def = self.into();\n+        match def {\n+            AttrDef::Module(it) => db.attrs(it.id.into()),\n+            AttrDef::StructField(it) => db.attrs(StructFieldId::from(it).into()),\n+            AttrDef::Adt(it) => db.attrs(AdtId::from(it).into()),\n+            AttrDef::Function(it) => db.attrs(it.id.into()),\n+            AttrDef::EnumVariant(it) => db.attrs(EnumVariantId::from(it).into()),\n+            AttrDef::Static(it) => db.attrs(it.id.into()),\n+            AttrDef::Const(it) => db.attrs(it.id.into()),\n+            AttrDef::Trait(it) => db.attrs(it.id.into()),\n+            AttrDef::TypeAlias(it) => db.attrs(it.id.into()),\n+            AttrDef::MacroDef(it) => db.attrs(it.id.into()),\n+        }\n+    }\n+}"}, {"sha": "96da8c88c44048feaa44139d162d1d2eda6b22aa", "filename": "crates/ra_hir/src/code_model/attrs.rs", "status": "removed", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/81bfbd26bef1a63ccbeba33430e6b07a53c8e7d9/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81bfbd26bef1a63ccbeba33430e6b07a53c8e7d9/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fattrs.rs?ref=81bfbd26bef1a63ccbeba33430e6b07a53c8e7d9", "patch": "@@ -1,91 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n-    Adt, Const, Enum, EnumVariant, FieldSource, Function, HasSource, MacroDef, Module, Static,\n-    Struct, StructField, Trait, TypeAlias, Union,\n-};\n-use hir_def::attr::{Attr, Attrs};\n-use hir_expand::hygiene::Hygiene;\n-use ra_syntax::ast;\n-\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum AttrDef {\n-    Module(Module),\n-    StructField(StructField),\n-    Adt(Adt),\n-    Function(Function),\n-    EnumVariant(EnumVariant),\n-    Static(Static),\n-    Const(Const),\n-    Trait(Trait),\n-    TypeAlias(TypeAlias),\n-    MacroDef(MacroDef),\n-}\n-\n-impl_froms!(\n-    AttrDef: Module,\n-    StructField,\n-    Adt(Struct, Enum, Union),\n-    EnumVariant,\n-    Static,\n-    Const,\n-    Function,\n-    Trait,\n-    TypeAlias,\n-    MacroDef\n-);\n-\n-pub trait HasAttrs {\n-    fn attrs(&self, db: &impl HirDatabase) -> Attrs;\n-}\n-\n-pub(crate) fn attributes_query(db: &(impl DefDatabase + AstDatabase), def: AttrDef) -> Attrs {\n-    match def {\n-        AttrDef::Module(it) => {\n-            let src = match it.declaration_source(db) {\n-                Some(it) => it,\n-                None => return Attrs::default(),\n-            };\n-            let hygiene = Hygiene::new(db, src.file_id);\n-            Attr::from_attrs_owner(&src.value, &hygiene)\n-        }\n-        AttrDef::StructField(it) => match it.source(db).value {\n-            FieldSource::Named(named) => {\n-                let src = it.source(db);\n-                let hygiene = Hygiene::new(db, src.file_id);\n-                Attr::from_attrs_owner(&named, &hygiene)\n-            }\n-            FieldSource::Pos(..) => Attrs::default(),\n-        },\n-        AttrDef::Adt(it) => match it {\n-            Adt::Struct(it) => attrs_from_ast(it, db),\n-            Adt::Enum(it) => attrs_from_ast(it, db),\n-            Adt::Union(it) => attrs_from_ast(it, db),\n-        },\n-        AttrDef::EnumVariant(it) => attrs_from_ast(it, db),\n-        AttrDef::Static(it) => attrs_from_ast(it, db),\n-        AttrDef::Const(it) => attrs_from_ast(it, db),\n-        AttrDef::Function(it) => attrs_from_ast(it, db),\n-        AttrDef::Trait(it) => attrs_from_ast(it, db),\n-        AttrDef::TypeAlias(it) => attrs_from_ast(it, db),\n-        AttrDef::MacroDef(it) => attrs_from_ast(it, db),\n-    }\n-}\n-\n-fn attrs_from_ast<T, D>(node: T, db: &D) -> Attrs\n-where\n-    T: HasSource,\n-    T::Ast: ast::AttrsOwner,\n-    D: DefDatabase + AstDatabase,\n-{\n-    let src = node.source(db);\n-    let hygiene = Hygiene::new(db, src.file_id);\n-    Attr::from_attrs_owner(&src.value, &hygiene)\n-}\n-\n-impl<T: Into<AttrDef> + Copy> HasAttrs for T {\n-    fn attrs(&self, db: &impl HirDatabase) -> Attrs {\n-        db.attrs((*self).into())\n-    }\n-}"}, {"sha": "09bacf5790aa91c329fc326ba177e90d7114cb5e", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=05939d504345673b20f701ec6a2dfec043e6c8a4", "patch": "@@ -1,13 +1,14 @@\n //! FIXME: write short doc here\n \n use hir_def::{HasChildSource, HasSource as _, Lookup, VariantId};\n+use hir_expand::either::Either;\n use ra_syntax::ast::{self, AstNode};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::AstItemDef,\n-    Const, Either, Enum, EnumVariant, FieldSource, Function, HasBody, HirFileId, MacroDef, Module,\n-    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    Const, Enum, EnumVariant, FieldSource, Function, HasBody, MacroDef, Module, ModuleSource,\n+    Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n pub use hir_expand::Source;\n@@ -23,11 +24,11 @@ impl Module {\n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n     pub fn definition_source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ModuleSource> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        let decl_id = def_map[self.id.module_id].declaration;\n-        let file_id = def_map[self.id.module_id].definition;\n-        let value = ModuleSource::new(db, file_id, decl_id);\n-        let file_id = file_id.map(HirFileId::from).unwrap_or_else(|| decl_id.unwrap().file_id());\n-        Source { file_id, value }\n+        let src = def_map[self.id.module_id].definition_source(db);\n+        src.map(|it| match it {\n+            Either::A(it) => ModuleSource::SourceFile(it),\n+            Either::B(it) => ModuleSource::Module(it),\n+        })\n     }\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n@@ -37,9 +38,7 @@ impl Module {\n         db: &(impl DefDatabase + AstDatabase),\n     ) -> Option<Source<ast::Module>> {\n         let def_map = db.crate_def_map(self.id.krate);\n-        let decl = def_map[self.id.module_id].declaration?;\n-        let value = decl.to_node(db);\n-        Some(Source { file_id: decl.file_id(), value })\n+        def_map[self.id.module_id].declaration_source(db)\n     }\n }\n "}, {"sha": "c3f698ea039d58ef2597c4598423d5fffb362404", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=05939d504345673b20f701ec6a2dfec043e6c8a4", "patch": "@@ -2,7 +2,6 @@\n \n use std::sync::Arc;\n \n-use hir_def::attr::Attrs;\n use ra_db::salsa;\n use ra_syntax::SmolStr;\n \n@@ -46,9 +45,6 @@ pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n \n     #[salsa::invoke(crate::code_model::docs::documentation_query)]\n     fn documentation(&self, def: crate::DocDef) -> Option<crate::Documentation>;\n-\n-    #[salsa::invoke(crate::code_model::attrs::attributes_query)]\n-    fn attrs(&self, def: crate::AttrDef) -> Attrs;\n }\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "5d7af00ab9833766906929ae1f7b130a81d0aed2", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=05939d504345673b20f701ec6a2dfec043e6c8a4", "patch": "@@ -5,13 +5,13 @@\n \n use hir_def::{\n     AdtId, AssocItemId, ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId,\n-    ModuleDefId, StaticId, StructId, TypeAliasId, UnionId, VariantId,\n+    ModuleDefId, StaticId, StructFieldId, StructId, TypeAliasId, UnionId, VariantId,\n };\n \n use crate::{\n     ty::{CallableDef, TypableDef},\n     Adt, AssocItem, Const, Crate, DefWithBody, EnumVariant, Function, GenericDef, ModuleDef,\n-    Static, TypeAlias, VariantDef,\n+    Static, StructField, TypeAlias, VariantDef,\n };\n \n impl From<ra_db::CrateId> for Crate {\n@@ -234,3 +234,9 @@ impl From<VariantDef> for VariantId {\n         }\n     }\n }\n+\n+impl From<StructField> for StructFieldId {\n+    fn from(def: StructField) -> Self {\n+        StructFieldId { parent: def.parent.into(), local_id: def.id }\n+    }\n+}"}, {"sha": "152590cd1719737f882c20461ac87150f8852c35", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=05939d504345673b20f701ec6a2dfec043e6c8a4", "patch": "@@ -51,13 +51,12 @@ mod marks;\n \n pub use crate::{\n     code_model::{\n-        attrs::{AttrDef, HasAttrs},\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n-        Adt, AssocItem, Const, Container, Crate, CrateDependency, DefWithBody, Enum, EnumVariant,\n-        FieldSource, Function, GenericDef, GenericParam, HasBody, ImplBlock, Local, MacroDef,\n-        Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct, StructField, Trait, TypeAlias,\n-        Union, VariantDef,\n+        Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency, DefWithBody, Enum,\n+        EnumVariant, FieldSource, Function, GenericDef, GenericParam, HasAttrs, HasBody, ImplBlock,\n+        Local, MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct, StructField,\n+        Trait, TypeAlias, Union, VariantDef,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,"}, {"sha": "ce397f6b06c8480a4f4163244622746604cd1cf1", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=05939d504345673b20f701ec6a2dfec043e6c8a4", "patch": "@@ -2,7 +2,7 @@\n \n use std::{ops, sync::Arc};\n \n-use hir_expand::hygiene::Hygiene;\n+use hir_expand::{either::Either, hygiene::Hygiene, AstId};\n use mbe::ast_to_token_tree;\n use ra_cfg::CfgOptions;\n use ra_syntax::{\n@@ -11,7 +11,9 @@ use ra_syntax::{\n };\n use tt::Subtree;\n \n-use crate::path::Path;\n+use crate::{\n+    db::DefDatabase2, path::Path, AdtId, AstItemDef, AttrDefId, HasChildSource, HasSource, Lookup,\n+};\n \n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n pub struct Attrs {\n@@ -30,6 +32,46 @@ impl ops::Deref for Attrs {\n }\n \n impl Attrs {\n+    pub(crate) fn attrs_query(db: &impl DefDatabase2, def: AttrDefId) -> Attrs {\n+        match def {\n+            AttrDefId::ModuleId(module) => {\n+                let def_map = db.crate_def_map(module.krate);\n+                let src = match def_map[module.module_id].declaration_source(db) {\n+                    Some(it) => it,\n+                    None => return Attrs::default(),\n+                };\n+                let hygiene = Hygiene::new(db, src.file_id);\n+                Attr::from_attrs_owner(&src.value, &hygiene)\n+            }\n+            AttrDefId::StructFieldId(it) => {\n+                let src = it.parent.child_source(db);\n+                match &src.value[it.local_id] {\n+                    Either::A(_tuple) => Attrs::default(),\n+                    Either::B(record) => {\n+                        let hygiene = Hygiene::new(db, src.file_id);\n+                        Attr::from_attrs_owner(record, &hygiene)\n+                    }\n+                }\n+            }\n+            AttrDefId::AdtId(it) => match it {\n+                AdtId::StructId(it) => attrs_from_ast(it.0.lookup_intern(db).ast_id, db),\n+                AdtId::EnumId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n+                AdtId::UnionId(it) => attrs_from_ast(it.0.lookup_intern(db).ast_id, db),\n+            },\n+            AttrDefId::EnumVariantId(it) => {\n+                let src = it.parent.child_source(db);\n+                let hygiene = Hygiene::new(db, src.file_id);\n+                Attr::from_attrs_owner(&src.value[it.local_id], &hygiene)\n+            }\n+            AttrDefId::StaticId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n+            AttrDefId::ConstId(it) => attrs_from_loc(it.lookup(db), db),\n+            AttrDefId::FunctionId(it) => attrs_from_loc(it.lookup(db), db),\n+            AttrDefId::TraitId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n+            AttrDefId::TypeAliasId(it) => attrs_from_loc(it.lookup(db), db),\n+            AttrDefId::MacroDefId(it) => attrs_from_ast(it.ast_id, db),\n+        }\n+    }\n+\n     pub fn has_atom(&self, atom: &str) -> bool {\n         self.iter().any(|it| it.is_simple_atom(atom))\n     }\n@@ -106,3 +148,23 @@ impl Attr {\n         cfg_options.is_cfg_enabled(self.as_cfg()?)\n     }\n }\n+\n+fn attrs_from_ast<D, N>(src: AstId<N>, db: &D) -> Attrs\n+where\n+    N: ast::AttrsOwner,\n+    D: DefDatabase2,\n+{\n+    let hygiene = Hygiene::new(db, src.file_id());\n+    Attr::from_attrs_owner(&src.to_node(db), &hygiene)\n+}\n+\n+fn attrs_from_loc<T, D>(node: T, db: &D) -> Attrs\n+where\n+    T: HasSource,\n+    T::Value: ast::AttrsOwner,\n+    D: DefDatabase2,\n+{\n+    let src = node.source(db);\n+    let hygiene = Hygiene::new(db, src.file_id);\n+    Attr::from_attrs_owner(&src.value, &hygiene)\n+}"}, {"sha": "e91e741bb9b896b0dde0f69addd0042e1fa5fa36", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=05939d504345673b20f701ec6a2dfec043e6c8a4", "patch": "@@ -7,14 +7,15 @@ use ra_syntax::ast;\n \n use crate::{\n     adt::{EnumData, StructData},\n+    attr::Attrs,\n     body::{scope::ExprScopes, Body, BodySourceMap},\n     data::{ConstData, FunctionData, ImplData, TraitData, TypeAliasData},\n     generics::GenericParams,\n     nameres::{\n         raw::{ImportSourceMap, RawItems},\n         CrateDefMap,\n     },\n-    ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, ImplId, ItemLoc, StaticId,\n+    AttrDefId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, ImplId, ItemLoc, StaticId,\n     StructOrUnionId, TraitId, TypeAliasId,\n };\n \n@@ -87,4 +88,7 @@ pub trait DefDatabase2: InternDatabase + AstDatabase {\n \n     #[salsa::invoke(GenericParams::generic_params_query)]\n     fn generic_params(&self, def: GenericDefId) -> Arc<GenericParams>;\n+\n+    #[salsa::invoke(Attrs::attrs_query)]\n+    fn attrs(&self, def: AttrDefId) -> Attrs;\n }"}, {"sha": "1bcdf9b7891fc6d22dabed3a4c6ba3343e3e00ce", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=05939d504345673b20f701ec6a2dfec043e6c8a4", "patch": "@@ -32,7 +32,7 @@ pub mod nameres;\n \n use std::hash::{Hash, Hasher};\n \n-use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId, Source};\n+use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId, MacroDefId, Source};\n use ra_arena::{impl_arena_id, map::ArenaMap, RawId};\n use ra_db::{salsa, CrateId, FileId};\n use ra_syntax::{ast, AstNode, SyntaxNode};\n@@ -280,8 +280,8 @@ pub enum VariantId {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructFieldId {\n-    parent: VariantId,\n-    local_id: LocalStructFieldId,\n+    pub parent: VariantId,\n+    pub local_id: LocalStructFieldId,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -477,6 +477,33 @@ impl_froms!(\n     ConstId\n );\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum AttrDefId {\n+    ModuleId(ModuleId),\n+    StructFieldId(StructFieldId),\n+    AdtId(AdtId),\n+    FunctionId(FunctionId),\n+    EnumVariantId(EnumVariantId),\n+    StaticId(StaticId),\n+    ConstId(ConstId),\n+    TraitId(TraitId),\n+    TypeAliasId(TypeAliasId),\n+    MacroDefId(MacroDefId),\n+}\n+\n+impl_froms!(\n+    AttrDefId: ModuleId,\n+    StructFieldId,\n+    AdtId(StructId, EnumId, UnionId),\n+    EnumVariantId,\n+    StaticId,\n+    ConstId,\n+    FunctionId,\n+    TraitId,\n+    TypeAliasId,\n+    MacroDefId\n+);\n+\n trait Intern {\n     type ID;\n     fn intern(self, db: &impl db::DefDatabase2) -> Self::ID;"}, {"sha": "6723465a591d78cad6b73fd171c770cc59d49b87", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05939d504345673b20f701ec6a2dfec043e6c8a4/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=05939d504345673b20f701ec6a2dfec043e6c8a4", "patch": "@@ -58,7 +58,10 @@ mod tests;\n \n use std::sync::Arc;\n \n-use hir_expand::{ast_id_map::FileAstId, diagnostics::DiagnosticSink, name::Name, MacroDefId};\n+use hir_expand::{\n+    ast_id_map::FileAstId, diagnostics::DiagnosticSink, either::Either, name::Name, MacroDefId,\n+    Source,\n+};\n use once_cell::sync::Lazy;\n use ra_arena::Arena;\n use ra_db::{CrateId, Edition, FileId};\n@@ -116,12 +119,15 @@ pub struct ModuleData {\n     pub parent: Option<CrateModuleId>,\n     pub children: FxHashMap<Name, CrateModuleId>,\n     pub scope: ModuleScope,\n+\n+    //  FIXME: these can't be both null, we need a three-state enum here.\n     /// None for root\n     pub declaration: Option<AstId<ast::Module>>,\n     /// None for inline modules.\n     ///\n     /// Note that non-inline modules, by definition, live inside non-macro file.\n     pub definition: Option<FileId>,\n+\n     pub impls: Vec<ImplId>,\n }\n \n@@ -285,6 +291,29 @@ impl CrateDefMap {\n     }\n }\n \n+impl ModuleData {\n+    /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n+    pub fn definition_source(\n+        &self,\n+        db: &impl DefDatabase2,\n+    ) -> Source<Either<ast::SourceFile, ast::Module>> {\n+        if let Some(file_id) = self.definition {\n+            let sf = db.parse(file_id).tree();\n+            return Source::new(file_id.into(), Either::A(sf));\n+        }\n+        let decl = self.declaration.unwrap();\n+        Source::new(decl.file_id(), Either::B(decl.to_node(db)))\n+    }\n+\n+    /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n+    /// `None` for the crate root.\n+    pub fn declaration_source(&self, db: &impl DefDatabase2) -> Option<Source<ast::Module>> {\n+        let decl = self.declaration?;\n+        let value = decl.to_node(db);\n+        Some(Source { file_id: decl.file_id(), value })\n+    }\n+}\n+\n mod diagnostics {\n     use hir_expand::diagnostics::DiagnosticSink;\n     use ra_db::RelativePathBuf;"}]}