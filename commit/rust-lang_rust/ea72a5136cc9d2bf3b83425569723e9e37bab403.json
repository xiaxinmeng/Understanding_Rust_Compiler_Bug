{"sha": "ea72a5136cc9d2bf3b83425569723e9e37bab403", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNzJhNTEzNmNjOWQyYmYzYjgzNDI1NTY5NzIzZTllMzdiYWI0MDM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-23T14:09:30Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-23T14:12:09Z"}, "message": "Add functions to base items completion test fixture", "tree": {"sha": "255301001ed46b0f729fe01165c527ea9be4ba96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/255301001ed46b0f729fe01165c527ea9be4ba96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea72a5136cc9d2bf3b83425569723e9e37bab403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea72a5136cc9d2bf3b83425569723e9e37bab403", "html_url": "https://github.com/rust-lang/rust/commit/ea72a5136cc9d2bf3b83425569723e9e37bab403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea72a5136cc9d2bf3b83425569723e9e37bab403/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b744e3369d1f0115a7802b1b587707ff0e7234bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b744e3369d1f0115a7802b1b587707ff0e7234bb", "html_url": "https://github.com/rust-lang/rust/commit/b744e3369d1f0115a7802b1b587707ff0e7234bb"}], "stats": {"total": 152, "additions": 46, "deletions": 106}, "files": [{"sha": "62ec0df799f0cf85dae457488aa3eb4097212f19", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=ea72a5136cc9d2bf3b83425569723e9e37bab403", "patch": "@@ -135,61 +135,6 @@ mod tests {\n         expect.assert_eq(&actual)\n     }\n \n-    #[test]\n-    fn completes_bindings_from_let() {\n-        check(\n-            r#\"\n-fn quux(x: i32) {\n-    let y = 92;\n-    1 + $0;\n-    let z = ();\n-}\n-\"#,\n-            expect![[r#\"\n-                lc y       i32\n-                lc x       i32\n-                fn quux(\u2026) fn(i32)\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_bindings_from_if_let() {\n-        check(\n-            r#\"\n-fn quux() {\n-    if let Some(x) = foo() {\n-        let y = 92;\n-    };\n-    if let Some(a) = bar() {\n-        let b = 62;\n-        1 + $0\n-    }\n-}\n-\"#,\n-            expect![[r#\"\n-                lc b      i32\n-                lc a\n-                fn quux() fn()\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_bindings_from_for() {\n-        check(\n-            r#\"\n-fn quux() {\n-    for x in &[1, 2, 3] { $0 }\n-}\n-\"#,\n-            expect![[r#\"\n-                lc x\n-                fn quux() fn()\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_if_prefix_is_keyword() {\n         cov_mark::check!(completes_if_prefix_is_keyword);"}, {"sha": "b7ba0a893a5b78af33d1242b287283555ddd90bf", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=ea72a5136cc9d2bf3b83425569723e9e37bab403", "patch": "@@ -38,7 +38,7 @@ use test_utils::assert_eq_text;\n use crate::{item::CompletionKind, CompletionConfig, CompletionItem};\n \n /// Lots of basic item definitions\n-const BASE_FIXTURE: &str = r#\"\n+const BASE_ITEMS_FIXTURE: &str = r#\"\n enum Enum { TupleV(u32), RecordV { field: u32 }, UnitV }\n use self::Enum::TupleV;\n mod module {}\n@@ -53,6 +53,7 @@ struct Unit;\n macro_rules! makro {}\n #[rustc_builtin_macro]\n pub macro Clone {}\n+fn function() {}\n \"#;\n \n pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {"}, {"sha": "45d653cfd235cde4912b6ca5f004bea011527513", "filename": "crates/ide_completion/src/tests/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs?ref=ea72a5136cc9d2bf3b83425569723e9e37bab403", "patch": "@@ -4,10 +4,10 @@\n //! in [crate::completions::mod_].\n use expect_test::{expect, Expect};\n \n-use crate::tests::{completion_list, BASE_FIXTURE};\n+use crate::tests::{completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(&format!(\"{}{}\", BASE_FIXTURE, ra_fixture));\n+    let actual = completion_list(&format!(\"{}{}\", BASE_ITEMS_FIXTURE, ra_fixture));\n     expect.assert_eq(&actual)\n }\n \n@@ -25,10 +25,10 @@ impl Tra$0\n             en Enum\n             st Record\n             st Tuple\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             md module\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     )\n@@ -48,10 +48,10 @@ impl Trait for Str$0\n             en Enum\n             st Record\n             st Tuple\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             md module\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     )"}, {"sha": "bd8df49e41e7e27c5f1737a56beb44f5c9786ded", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=ea72a5136cc9d2bf3b83425569723e9e37bab403", "patch": "@@ -1,10 +1,10 @@\n //! Completion tests for item list position.\n use expect_test::{expect, Expect};\n \n-use crate::tests::{completion_list, BASE_FIXTURE};\n+use crate::tests::{completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(&format!(\"{}{}\", BASE_FIXTURE, ra_fixture));\n+    let actual = completion_list(&format!(\"{}{}\", BASE_ITEMS_FIXTURE, ra_fixture));\n     expect.assert_eq(&actual)\n }\n \n@@ -65,9 +65,9 @@ fn in_source_file_item_list() {\n             kw self\n             kw super\n             kw crate\n-            ma makro!(\u2026)           #[macro_export] macro_rules! makro\n             md module\n             ma makro!(\u2026)           #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)           #[macro_export] macro_rules! makro\n         \"##]],\n     )\n }\n@@ -105,8 +105,8 @@ fn in_qualified_path() {\n     check(\n         r#\"crate::$0\"#,\n         expect![[r##\"\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             md module\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n         \"##]],\n     )\n }\n@@ -170,9 +170,9 @@ fn in_impl_assoc_item_list() {\n             kw self\n             kw super\n             kw crate\n-            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n             md module\n             ma makro!(\u2026)  #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n         \"##]],\n     )\n }"}, {"sha": "7b868fd8547a47847b3f4e729854499fea3d55fa", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=ea72a5136cc9d2bf3b83425569723e9e37bab403", "patch": "@@ -1,15 +1,15 @@\n //! Completion tests for pattern position.\n use expect_test::{expect, Expect};\n \n-use crate::tests::{completion_list, BASE_FIXTURE};\n+use crate::tests::{completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(ra_fixture);\n     expect.assert_eq(&actual)\n }\n \n fn check_with(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(&format!(\"{}\\n{}\", BASE_FIXTURE, ra_fixture));\n+    let actual = completion_list(&format!(\"{}\\n{}\", BASE_ITEMS_FIXTURE, ra_fixture));\n     expect.assert_eq(&actual)\n }\n "}, {"sha": "d47b2ecf507eb4d29dbc31084b8c5fe8cb438318", "filename": "crates/ide_completion/src/tests/predicate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs?ref=ea72a5136cc9d2bf3b83425569723e9e37bab403", "patch": "@@ -1,10 +1,10 @@\n //! Completion tests for predicates and bounds.\n use expect_test::{expect, Expect};\n \n-use crate::tests::{completion_list, BASE_FIXTURE};\n+use crate::tests::{completion_list, BASE_ITEMS_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(&format!(\"{}\\n{}\", BASE_FIXTURE, ra_fixture));\n+    let actual = completion_list(&format!(\"{}\\n{}\", BASE_ITEMS_FIXTURE, ra_fixture));\n     expect.assert_eq(&actual)\n }\n \n@@ -130,10 +130,10 @@ impl Record {\n             en Enum\n             st Record\n             st Tuple\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             md module\n             st Unit\n             ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     );"}, {"sha": "eb81aa81e42b7b1908e98dce52e3b1888d6728a4", "filename": "crates/ide_completion/src/tests/type_pos.rs", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea72a5136cc9d2bf3b83425569723e9e37bab403/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=ea72a5136cc9d2bf3b83425569723e9e37bab403", "patch": "@@ -1,23 +1,10 @@\n //! Completion tests for type position.\n use expect_test::{expect, Expect};\n \n-use crate::tests::completion_list;\n+use crate::tests::{completion_list, BASE_ITEMS_FIXTURE};\n \n fn check_with(ra_fixture: &str, expect: Expect) {\n-    let base = r#\"\n-enum Enum { TupleV(u32), RecordV { field: u32 }, UnitV }\n-use self::Enum::TupleV;\n-mod module {}\n-\n-trait Trait {}\n-static STATIC: Unit = Unit;\n-const CONST: Unit = Unit;\n-struct Record { field: u32 }\n-struct Tuple(u32);\n-struct Unit\n-macro_rules! makro {}\n-\"#;\n-    let actual = completion_list(&format!(\"{}\\n{}\", base, ra_fixture));\n+    let actual = completion_list(&format!(\"{}\\n{}\", BASE_ITEMS_FIXTURE, ra_fixture));\n     expect.assert_eq(&actual)\n }\n \n@@ -29,7 +16,7 @@ struct Foo<'lt, T, const C: usize> {\n     f: $0\n }\n \"#,\n-        expect![[r#\"\n+        expect![[r##\"\n             kw self\n             kw super\n             kw crate\n@@ -42,9 +29,10 @@ struct Foo<'lt, T, const C: usize> {\n             md module\n             st Foo<\u2026>\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n-        \"#]],\n+        \"##]],\n     )\n }\n \n@@ -54,7 +42,7 @@ fn tuple_struct_field() {\n         r#\"\n struct Foo<'lt, T, const C: usize>(f$0);\n \"#,\n-        expect![[r#\"\n+        expect![[r##\"\n             kw pub(crate)\n             kw pub\n             kw self\n@@ -69,9 +57,10 @@ struct Foo<'lt, T, const C: usize>(f$0);\n             md module\n             st Foo<\u2026>\n             st Unit\n-            ma makro!(\u2026)  macro_rules! makro\n+            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n             bt u32\n-        \"#]],\n+        \"##]],\n     )\n }\n \n@@ -81,7 +70,7 @@ fn fn_return_type() {\n         r#\"\n fn x<'lt, T, const C: usize>() -> $0\n \"#,\n-        expect![[r#\"\n+        expect![[r##\"\n             kw self\n             kw super\n             kw crate\n@@ -92,9 +81,10 @@ fn x<'lt, T, const C: usize>() -> $0\n             st Tuple\n             md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n-        \"#]],\n+        \"##]],\n     );\n }\n \n@@ -107,7 +97,7 @@ fn foo<'lt, T, const C: usize>() {\n     let _: $0;\n }\n \"#,\n-        expect![[r#\"\n+        expect![[r##\"\n             kw self\n             kw super\n             kw crate\n@@ -118,9 +108,10 @@ fn foo<'lt, T, const C: usize>() {\n             st Tuple\n             md module\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n-        \"#]],\n+        \"##]],\n     );\n     check_with(\n         r#\"\n@@ -129,14 +120,15 @@ fn foo<'lt, T, const C: usize>() {\n     let _: self::$0;\n }\n \"#,\n-        expect![[r#\"\n+        expect![[r##\"\n             tt Trait\n             en Enum\n             st Record\n             st Tuple\n             md module\n             st Unit\n-        \"#]],\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+        \"##]],\n     );\n }\n \n@@ -150,7 +142,7 @@ trait Trait2 {\n \n fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n \"#,\n-        expect![[r#\"\n+        expect![[r##\"\n             kw self\n             kw super\n             kw crate\n@@ -161,13 +153,14 @@ fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n             en Enum\n             st Record\n             st Tuple\n-            tt Trait2\n             md module\n             st Unit\n+            ma makro!(\u2026)          #[macro_export] macro_rules! makro\n+            tt Trait2\n             ct CONST\n-            ma makro!(\u2026)          macro_rules! makro\n+            ma makro!(\u2026)          #[macro_export] macro_rules! makro\n             bt u32\n-        \"#]],\n+        \"##]],\n     );\n     check_with(\n         r#\"\n@@ -177,15 +170,16 @@ trait Trait2 {\n \n fn foo<'lt, T: Trait2<self::$0>, const CONST_PARAM: usize>(_: T) {}\n     \"#,\n-        expect![[r#\"\n+        expect![[r##\"\n             tt Trait\n             en Enum\n             st Record\n             st Tuple\n-            tt Trait2\n             md module\n             st Unit\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            tt Trait2\n             ct CONST\n-        \"#]],\n+        \"##]],\n     );\n }"}]}