{"sha": "b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "node_id": "C_kwDOAAsO6NoAKGIxZjllZmE2NWM5MDZmZjg0YzhlMWRlZjFiMGViZTZiMTJiM2I2ZGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-18T06:59:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-18T06:59:12Z"}, "message": "Auto merge of #12577 - Veykril:completion, r=Veykril\n\ninternal: NameRefKind classification is not optional", "tree": {"sha": "4f738d7b9bf33b10170e3297ff71d483309cebeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f738d7b9bf33b10170e3297ff71d483309cebeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "html_url": "https://github.com/rust-lang/rust/commit/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12dd81092e37df28b7a3591cae9675e668927198", "url": "https://api.github.com/repos/rust-lang/rust/commits/12dd81092e37df28b7a3591cae9675e668927198", "html_url": "https://github.com/rust-lang/rust/commit/12dd81092e37df28b7a3591cae9675e668927198"}, {"sha": "309ecdd71cc09625052f3d358a3bd9c2b245119d", "url": "https://api.github.com/repos/rust-lang/rust/commits/309ecdd71cc09625052f3d358a3bd9c2b245119d", "html_url": "https://github.com/rust-lang/rust/commit/309ecdd71cc09625052f3d358a3bd9c2b245119d"}], "stats": {"total": 287, "additions": 144, "deletions": 143}, "files": [{"sha": "608a74dc152dac684a44a4f8a32a19e563639936", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -123,7 +123,7 @@ pub(crate) fn import_on_the_fly_path(\n                 | PathKind::Type { .. }\n                 | PathKind::Attr { .. }\n                 | PathKind::Derive { .. }\n-                | PathKind::Pat),\n+                | PathKind::Pat { .. }),\n             qualified,\n             ..\n         } => (Some(kind), qualified),\n@@ -183,7 +183,7 @@ pub(crate) fn import_on_the_fly_pat(\n         return None;\n     }\n     let kind = match pat_ctx {\n-        PatternContext { record_pat: None, .. } => PathKind::Pat,\n+        PatternContext { record_pat: None, .. } => PathKind::Pat { pat_ctx: pat_ctx.clone() },\n         _ => return None,\n     };\n \n@@ -229,15 +229,17 @@ fn import_on_the_fly(\n                 PathKind::Expr { .. }\n                 | PathKind::Type { .. }\n                 | PathKind::Item { .. }\n-                | PathKind::Pat,\n+                | PathKind::Pat { .. },\n                 ItemInNs::Macros(mac),\n             ) => mac.is_fn_like(ctx.db),\n             (PathKind::Item { .. }, _) => true,\n \n             (PathKind::Expr { .. }, ItemInNs::Types(_) | ItemInNs::Values(_)) => true,\n \n-            (PathKind::Pat, ItemInNs::Types(_)) => true,\n-            (PathKind::Pat, ItemInNs::Values(def)) => matches!(def, hir::ModuleDef::Const(_)),\n+            (PathKind::Pat { .. }, ItemInNs::Types(_)) => true,\n+            (PathKind::Pat { .. }, ItemInNs::Values(def)) => {\n+                matches!(def, hir::ModuleDef::Const(_))\n+            }\n \n             (PathKind::Type { location }, ItemInNs::Types(ty)) => {\n                 if matches!(location, TypeLocation::TypeBound) {"}, {"sha": "c0c29d4cd22fac1cbd1d2acf7ac6c20551fce087", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -95,12 +95,12 @@ pub(crate) fn complete_trait_impl_name_ref(\n         NameRefContext {\n             nameref,\n             kind:\n-                Some(NameRefKind::Path(\n+                NameRefKind::Path(\n                     path_ctx @ PathCompletionCtx {\n                         kind: PathKind::Item { kind: ItemListKind::TraitImpl },\n                         ..\n                     },\n-                )),\n+                ),\n         } if path_ctx.is_trivial_path() => complete_trait_impl(\n             acc,\n             ctx,"}, {"sha": "dd08ef703e44011911dca147997773a8ea933ba1", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -107,7 +107,7 @@ pub(crate) fn pattern_path_completion(\n     ctx: &CompletionContext,\n     PathCompletionCtx { qualified, kind, .. }: &PathCompletionCtx,\n ) {\n-    if !matches!(kind, PathKind::Pat) {\n+    if !matches!(kind, PathKind::Pat { .. }) {\n         return;\n     }\n     match qualified {"}, {"sha": "2cdd93f95bd9174fb2079bdcefb552fdbc7144c5", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -20,12 +20,12 @@ pub(crate) fn complete_use_tree(\n     let (qualified, name_ref, use_tree_parent) = match name_ref_ctx {\n         NameRefContext {\n             kind:\n-                Some(NameRefKind::Path(PathCompletionCtx {\n+                NameRefKind::Path(PathCompletionCtx {\n                     kind: PathKind::Use,\n                     qualified,\n                     use_tree_parent,\n                     ..\n-                })),\n+                }),\n             nameref,\n             ..\n         } => (qualified, nameref, use_tree_parent),"}, {"sha": "d73cb6034d22e50ba33cbb98bdd6938ec9aab182", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -85,7 +85,7 @@ impl PathCompletionCtx {\n }\n \n /// The kind of path we are completing right now.\n-#[derive(Clone, Debug, PartialEq, Eq)]\n+#[derive(Debug, PartialEq, Eq)]\n pub(super) enum PathKind {\n     Expr {\n         in_block_expr: bool,\n@@ -110,7 +110,9 @@ pub(super) enum PathKind {\n     Item {\n         kind: ItemListKind,\n     },\n-    Pat,\n+    Pat {\n+        pat_ctx: PatternContext,\n+    },\n     Vis {\n         has_in_token: bool,\n     },\n@@ -164,7 +166,7 @@ pub(super) enum Qualified {\n }\n \n /// The state of the pattern we are completing.\n-#[derive(Debug)]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n pub(super) struct PatternContext {\n     pub(super) refutability: PatternRefutability,\n     pub(super) param_ctx: Option<(ast::ParamList, ast::Param, ParamKind)>,\n@@ -208,7 +210,7 @@ pub(super) enum NameKind {\n     ConstParam,\n     Enum,\n     Function,\n-    IdentPat,\n+    IdentPat(PatternContext),\n     MacroDef,\n     MacroRules,\n     /// Fake node\n@@ -230,8 +232,7 @@ pub(super) enum NameKind {\n pub(super) struct NameRefContext {\n     /// NameRef syntax in the original file\n     pub(super) nameref: Option<ast::NameRef>,\n-    // FIXME: This shouldn't be an Option\n-    pub(super) kind: Option<NameRefKind>,\n+    pub(super) kind: NameRefKind,\n }\n \n /// The kind of the NameRef we are completing.\n@@ -243,6 +244,7 @@ pub(super) enum NameRefKind {\n     Keyword(ast::Item),\n     /// The record expression this nameref is a field of\n     RecordExpr(ast::RecordExpr),\n+    Pattern(PatternContext),\n }\n \n /// The identifier we are currently completing.\n@@ -330,7 +332,6 @@ pub(crate) struct CompletionContext<'a> {\n \n     // We might wanna split these out of CompletionContext\n     pub(super) ident_ctx: IdentContext,\n-    pub(super) pattern_ctx: Option<PatternContext>,\n     pub(super) qualifier_ctx: QualifierCtx,\n \n     pub(super) locals: FxHashMap<Name, Local>,\n@@ -505,7 +506,6 @@ impl<'a> CompletionContext<'a> {\n             previous_token: None,\n             // dummy value, will be overwritten\n             ident_ctx: IdentContext::UnexpandedAttrTT { fake_attribute_under_caret: None },\n-            pattern_ctx: None,\n             qualifier_ctx: Default::default(),\n             locals,\n         };"}, {"sha": "fc6ee70a0bcfe19fd0f885d5d5ce459fcd2eb280", "filename": "crates/ide-completion/src/context/analysis.rs", "status": "modified", "additions": 54, "deletions": 75, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext%2Fanalysis.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -343,9 +343,9 @@ impl<'a> CompletionContext<'a> {\n                 find_node_at_offset(&file_with_fake_ident, offset)\n             {\n                 let parent = name_ref.syntax().parent()?;\n-                let (mut nameref_ctx, _, _) =\n-                    Self::classify_name_ref(&self.sema, &original_file, name_ref, parent);\n-                if let Some(NameRefKind::Path(path_ctx)) = &mut nameref_ctx.kind {\n+                let (mut nameref_ctx, _) =\n+                    Self::classify_name_ref(&self.sema, &original_file, name_ref, parent)?;\n+                if let NameRefKind::Path(path_ctx) = &mut nameref_ctx.kind {\n                     path_ctx.kind = PathKind::Derive {\n                         existing_derives: self\n                             .sema\n@@ -427,19 +427,14 @@ impl<'a> CompletionContext<'a> {\n             }\n             ast::NameLike::NameRef(name_ref) => {\n                 let parent = name_ref.syntax().parent()?;\n-                let (nameref_ctx, pat_ctx, qualifier_ctx) =\n-                    Self::classify_name_ref(&self.sema, &original_file, name_ref, parent.clone());\n+                let (nameref_ctx, qualifier_ctx) =\n+                    Self::classify_name_ref(&self.sema, &original_file, name_ref, parent.clone())?;\n \n-                if !matches!(nameref_ctx.kind, Some(NameRefKind::Path(_))) {\n-                    // FIXME: Pattern context should probably be part of ident_ctx\n-                    self.pattern_ctx = pat_ctx;\n-                }\n                 self.qualifier_ctx = qualifier_ctx;\n                 self.ident_ctx = IdentContext::NameRef(nameref_ctx);\n             }\n             ast::NameLike::Name(name) => {\n-                let (name_ctx, pat_ctx) = Self::classify_name(&self.sema, original_file, name)?;\n-                self.pattern_ctx = pat_ctx;\n+                let name_ctx = Self::classify_name(&self.sema, original_file, name)?;\n                 self.ident_ctx = IdentContext::Name(name_ctx);\n             }\n         }\n@@ -477,25 +472,21 @@ impl<'a> CompletionContext<'a> {\n         _sema: &Semantics<RootDatabase>,\n         original_file: &SyntaxNode,\n         name: ast::Name,\n-    ) -> Option<(NameContext, Option<PatternContext>)> {\n+    ) -> Option<NameContext> {\n         let parent = name.syntax().parent()?;\n-        let mut pat_ctx = None;\n         let kind = match_ast! {\n             match parent {\n                 ast::Const(_) => NameKind::Const,\n                 ast::ConstParam(_) => NameKind::ConstParam,\n                 ast::Enum(_) => NameKind::Enum,\n                 ast::Fn(_) => NameKind::Function,\n                 ast::IdentPat(bind_pat) => {\n-                    pat_ctx = Some({\n-                        let mut pat_ctx = pattern_context_for(original_file, bind_pat.into());\n-                        if let Some(record_field) = ast::RecordPatField::for_field_name(&name) {\n-                            pat_ctx.record_pat = find_node_in_file_compensated(original_file, &record_field.parent_record_pat());\n-                        }\n-                        pat_ctx\n-                    });\n+                    let mut pat_ctx = pattern_context_for(original_file, bind_pat.into());\n+                    if let Some(record_field) = ast::RecordPatField::for_field_name(&name) {\n+                        pat_ctx.record_pat = find_node_in_file_compensated(original_file, &record_field.parent_record_pat());\n+                    }\n \n-                    NameKind::IdentPat\n+                    NameKind::IdentPat(pat_ctx)\n                 },\n                 ast::MacroDef(_) => NameKind::MacroDef,\n                 ast::MacroRules(_) => NameKind::MacroRules,\n@@ -514,28 +505,27 @@ impl<'a> CompletionContext<'a> {\n             }\n         };\n         let name = find_node_at_offset(&original_file, name.syntax().text_range().start());\n-        Some((NameContext { name, kind }, pat_ctx))\n+        Some(NameContext { name, kind })\n     }\n \n     fn classify_name_ref(\n         sema: &Semantics<RootDatabase>,\n         original_file: &SyntaxNode,\n         name_ref: ast::NameRef,\n         parent: SyntaxNode,\n-    ) -> (NameRefContext, Option<PatternContext>, QualifierCtx) {\n+    ) -> Option<(NameRefContext, QualifierCtx)> {\n         let nameref = find_node_at_offset(&original_file, name_ref.syntax().text_range().start());\n \n-        let mut res = (NameRefContext { nameref, kind: None }, None, QualifierCtx::default());\n-        let (nameref_ctx, pattern_ctx, qualifier_ctx) = &mut res;\n+        let make_res =\n+            |kind| (NameRefContext { nameref: nameref.clone(), kind }, Default::default());\n \n         if let Some(record_field) = ast::RecordExprField::for_field_name(&name_ref) {\n-            nameref_ctx.kind =\n-                find_node_in_file_compensated(original_file, &record_field.parent_record_lit())\n-                    .map(NameRefKind::RecordExpr);\n-            return res;\n+            return find_node_in_file_compensated(original_file, &record_field.parent_record_lit())\n+                .map(NameRefKind::RecordExpr)\n+                .map(make_res);\n         }\n         if let Some(record_field) = ast::RecordPatField::for_field_name_ref(&name_ref) {\n-            *pattern_ctx = Some(PatternContext {\n+            let kind = NameRefKind::Pattern(PatternContext {\n                 param_ctx: None,\n                 has_type_ascription: false,\n                 ref_token: None,\n@@ -549,7 +539,7 @@ impl<'a> CompletionContext<'a> {\n                     record_field.parent_record_pat().clone().into(),\n                 )\n             });\n-            return res;\n+            return Some(make_res(kind));\n         }\n \n         let segment = match_ast! {\n@@ -564,23 +554,23 @@ impl<'a> CompletionContext<'a> {\n                         },\n                         _ => false,\n                     };\n-                    nameref_ctx.kind = Some(NameRefKind::DotAccess(DotAccess {\n+                    let kind = NameRefKind::DotAccess(DotAccess {\n                         receiver_ty: receiver.as_ref().and_then(|it| sema.type_of_expr(it)),\n                         kind: DotAccessKind::Field { receiver_is_ambiguous_float_literal },\n                         receiver\n-                    }));\n-                    return res;\n+                    });\n+                    return Some(make_res(kind));\n                 },\n                 ast::MethodCallExpr(method) => {\n                     let receiver = find_opt_node_in_file(original_file, method.receiver());\n-                    nameref_ctx.kind = Some(NameRefKind::DotAccess(DotAccess {\n+                    let kind = NameRefKind::DotAccess(DotAccess {\n                         receiver_ty: receiver.as_ref().and_then(|it| sema.type_of_expr(it)),\n                         kind: DotAccessKind::Method { has_parens: method.arg_list().map_or(false, |it| it.l_paren_token().is_some()) },\n                         receiver\n-                    }));\n-                    return res;\n+                    });\n+                    return Some(make_res(kind));\n                 },\n-                _ => return res,\n+                _ => return None,\n             }\n         };\n \n@@ -755,52 +745,47 @@ impl<'a> CompletionContext<'a> {\n         };\n \n         // Infer the path kind\n-        let kind = path.syntax().parent().and_then(|it| {\n-            match_ast! {\n-                match it {\n-                    ast::PathType(it) => Some(make_path_kind_type(it.into())),\n+        let parent = path.syntax().parent()?;\n+        let kind = match_ast! {\n+                match parent {\n+                    ast::PathType(it) => make_path_kind_type(it.into()),\n                     ast::PathExpr(it) => {\n                         if let Some(p) = it.syntax().parent() {\n                             if ast::ExprStmt::can_cast(p.kind()) {\n                                 if let Some(kind) = inbetween_body_and_decl_check(p) {\n-                                    nameref_ctx.kind = Some(NameRefKind::Keyword(kind));\n-                                    return None;\n+                                    return Some(make_res(NameRefKind::Keyword(kind)));\n                                 }\n                             }\n                         }\n \n                         path_ctx.has_call_parens = it.syntax().parent().map_or(false, |it| ast::CallExpr::can_cast(it.kind()));\n \n-                        Some(make_path_kind_expr(it.into()))\n+                        make_path_kind_expr(it.into())\n                     },\n                     ast::TupleStructPat(it) => {\n                         path_ctx.has_call_parens = true;\n-                        *pattern_ctx = Some(pattern_context_for(original_file, it.into()));\n-                        Some(PathKind::Pat)\n+                        PathKind::Pat { pat_ctx: pattern_context_for(original_file, it.into())}\n                     },\n                     ast::RecordPat(it) => {\n                         path_ctx.has_call_parens = true;\n-                        *pattern_ctx = Some(pattern_context_for(original_file, it.into()));\n-                        Some(PathKind::Pat)\n+                        PathKind::Pat { pat_ctx: pattern_context_for(original_file, it.into())}\n                     },\n                     ast::PathPat(it) => {\n-                        *pattern_ctx = Some(pattern_context_for(original_file, it.into()));\n-                        Some(PathKind::Pat)\n+                        PathKind::Pat { pat_ctx: pattern_context_for(original_file, it.into())}\n                     },\n                     ast::MacroCall(it) => {\n                         // A macro call in this position is usually a result of parsing recovery, so check that\n                         if let Some(kind) = inbetween_body_and_decl_check(it.syntax().clone()) {\n-                            nameref_ctx.kind = Some(NameRefKind::Keyword(kind));\n-                            return None;\n+                            return Some(make_res(NameRefKind::Keyword(kind)));\n                         }\n \n                         path_ctx.has_macro_bang = it.excl_token().is_some();\n                         let parent = it.syntax().parent()?;\n                         // Any path in an item list will be treated as a macro call by the parser\n-                        let res = match_ast! {\n+                        match_ast! {\n                             match parent {\n                                 ast::MacroExpr(expr) => make_path_kind_expr(expr.into()),\n-                                ast::MacroPat(_) => PathKind::Pat,\n+                                ast::MacroPat(it) => PathKind::Pat { pat_ctx: pattern_context_for(original_file, it.into())},\n                                 ast::MacroType(ty) => make_path_kind_type(ty.into()),\n                                 ast::ItemList(_) => PathKind::Item { kind: ItemListKind::Module },\n                                 ast::AssocItemList(_) => PathKind::Item { kind: match parent.parent() {\n@@ -821,10 +806,9 @@ impl<'a> CompletionContext<'a> {\n                                 ast::SourceFile(_) => PathKind::Item { kind: ItemListKind::SourceFile },\n                                 _ => return None,\n                             }\n-                        };\n-                        Some(res)\n+                        }\n                     },\n-                    ast::Meta(meta) => (|| {\n+                    ast::Meta(meta) => {\n                         let attr = meta.parent_attr()?;\n                         let kind = attr.kind();\n                         let attached = attr.syntax().parent()?;\n@@ -835,24 +819,19 @@ impl<'a> CompletionContext<'a> {\n                         } else {\n                             Some(attached.kind())\n                         };\n-                        Some(PathKind::Attr {\n+                        PathKind::Attr {\n                             kind,\n                             annotated_item_kind,\n-                        })\n-                    })(),\n-                    ast::Visibility(it) => Some(PathKind::Vis { has_in_token: it.in_token().is_some() }),\n-                    ast::UseTree(_) => Some(PathKind::Use),\n+                        }\n+                    },\n+                    ast::Visibility(it) => PathKind::Vis { has_in_token: it.in_token().is_some() },\n+                    ast::UseTree(_) => PathKind::Use,\n                     _ => return None,\n-                }\n+\n             }\n-        });\n+        };\n \n-        match kind {\n-            Some(kind) => path_ctx.kind = kind,\n-            // unresolved path kind, so this isn't really a path we should be completing,\n-            // just some random identifier which might be in keyword position\n-            None => return res,\n-        }\n+        path_ctx.kind = kind;\n         path_ctx.has_type_args = segment.generic_arg_list().is_some();\n \n         // calculate the qualifier context\n@@ -893,6 +872,7 @@ impl<'a> CompletionContext<'a> {\n             }\n         }\n \n+        let mut qualifier_ctx = QualifierCtx::default();\n         if path_ctx.is_trivial_path() {\n             // fetch the full expression that may have qualifiers attached to it\n             let top_node = match path_ctx.kind {\n@@ -937,17 +917,16 @@ impl<'a> CompletionContext<'a> {\n                                 if ![T![;], T!['}'], T!['{']].contains(&prev.kind()) {\n                                     // This was inferred to be an item position path, but it seems\n                                     // to be part of some other broken node which leaked into an item\n-                                    // list, so return without setting the path context\n-                                    return res;\n+                                    // list\n+                                    return None;\n                                 }\n                             }\n                         }\n                     }\n                 }\n             }\n         }\n-        nameref_ctx.kind = Some(NameRefKind::Path(path_ctx));\n-        res\n+        Some((NameRefContext { nameref, kind: NameRefKind::Path(path_ctx) }, qualifier_ctx))\n     }\n }\n "}, {"sha": "27fe66e385a094779fc1a1cf47a8c82384d15317", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -24,7 +24,7 @@ use text_edit::TextEdit;\n \n use crate::{\n     completions::Completions,\n-    context::{CompletionContext, IdentContext, NameRefContext, NameRefKind},\n+    context::{CompletionContext, IdentContext, NameKind, NameRefContext, NameRefKind},\n };\n \n pub use crate::{\n@@ -151,10 +151,8 @@ pub fn completions(\n \n     // prevent `(` from triggering unwanted completion noise\n     if trigger_character == Some('(') {\n-        if let IdentContext::NameRef(NameRefContext {\n-            kind: Some(NameRefKind::Path(path_ctx)),\n-            ..\n-        }) = &ctx.ident_ctx\n+        if let IdentContext::NameRef(NameRefContext { kind: NameRefKind::Path(path_ctx), .. }) =\n+            &ctx.ident_ctx\n         {\n             completions::vis::complete_vis_path(&mut completions, ctx, path_ctx);\n         }\n@@ -170,6 +168,12 @@ pub fn completions(\n                 completions::field::complete_field_list_record_variant(acc, ctx, name_ctx);\n                 completions::item_list::trait_impl::complete_trait_impl_name(acc, ctx, name_ctx);\n                 completions::mod_::complete_mod(acc, ctx, name_ctx);\n+                if let NameKind::IdentPat(pattern_ctx) = &name_ctx.kind {\n+                    completions::flyimport::import_on_the_fly_pat(acc, ctx, pattern_ctx);\n+                    completions::fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n+                    completions::pattern::complete_pattern(acc, ctx, pattern_ctx);\n+                    completions::record::complete_record_pattern_fields(acc, ctx, pattern_ctx);\n+                }\n             }\n             IdentContext::NameRef(name_ctx @ NameRefContext { kind, .. }) => {\n                 completions::item_list::trait_impl::complete_trait_impl_name_ref(\n@@ -178,7 +182,7 @@ pub fn completions(\n                 completions::use_::complete_use_tree(acc, ctx, name_ctx);\n \n                 match kind {\n-                    Some(NameRefKind::Path(path_ctx)) => {\n+                    NameRefKind::Path(path_ctx) => {\n                         completions::attribute::complete_attribute(acc, ctx, path_ctx);\n                         completions::attribute::complete_derive(acc, ctx, path_ctx);\n                         completions::dot::complete_undotted_self(acc, ctx, path_ctx);\n@@ -194,22 +198,27 @@ pub fn completions(\n                         completions::snippet::complete_item_snippet(acc, ctx, path_ctx);\n                         completions::vis::complete_vis_path(acc, ctx, path_ctx);\n                     }\n-                    Some(NameRefKind::DotAccess(dot_access)) => {\n+                    NameRefKind::DotAccess(dot_access) => {\n                         completions::flyimport::import_on_the_fly_dot(acc, ctx, dot_access);\n                         completions::dot::complete_dot(acc, ctx, dot_access);\n                         completions::postfix::complete_postfix(acc, ctx, dot_access);\n                     }\n-                    Some(NameRefKind::Keyword(item)) => {\n+                    NameRefKind::Keyword(item) => {\n                         completions::keyword::complete_special_keywords(acc, ctx, item);\n                     }\n-                    Some(NameRefKind::RecordExpr(record_expr)) => {\n+                    NameRefKind::RecordExpr(record_expr) => {\n                         completions::record::complete_record_expr_fields_record_expr(\n                             acc,\n                             ctx,\n                             record_expr,\n                         );\n                     }\n-                    None => (),\n+                    NameRefKind::Pattern(pattern_ctx) => {\n+                        completions::flyimport::import_on_the_fly_pat(acc, ctx, pattern_ctx);\n+                        completions::fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n+                        completions::pattern::complete_pattern(acc, ctx, pattern_ctx);\n+                        completions::record::complete_record_pattern_fields(acc, ctx, pattern_ctx);\n+                    }\n                 }\n             }\n             IdentContext::Lifetime(lifetime_ctx) => {\n@@ -225,13 +234,6 @@ pub fn completions(\n             }\n             IdentContext::UnexpandedAttrTT { .. } | IdentContext::String { .. } => (),\n         }\n-\n-        if let Some(pattern_ctx) = &ctx.pattern_ctx {\n-            completions::flyimport::import_on_the_fly_pat(acc, ctx, pattern_ctx);\n-            completions::fn_param::complete_fn_param(acc, ctx, pattern_ctx);\n-            completions::pattern::complete_pattern(acc, ctx, pattern_ctx);\n-            completions::record::complete_record_pattern_fields(acc, ctx, pattern_ctx);\n-        }\n     }\n \n     Some(completions)"}, {"sha": "c6091645ca824b61cc41e7007adbdfd9a0ee94f1", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -78,7 +78,7 @@ impl<'a> RenderContext<'a> {\n         matches!(\n             self.completion.ident_ctx,\n             IdentContext::NameRef(NameRefContext {\n-                kind: Some(NameRefKind::Path(PathCompletionCtx { has_call_parens: true, .. })),\n+                kind: NameRefKind::Path(PathCompletionCtx { has_call_parens: true, .. }),\n                 ..\n             })\n         )\n@@ -218,7 +218,7 @@ fn render_resolution_(\n             let ctx = ctx.import_to_add(import_to_add);\n             return render_fn(ctx, Some(local_name), func);\n         }\n-        ScopeDef::ModuleDef(Variant(var)) if ctx.completion.pattern_ctx.is_none() => {\n+        ScopeDef::ModuleDef(Variant(var)) => {\n             let ctx = ctx.clone().import_to_add(import_to_add.clone());\n             if let Some(item) = render_variant_lit(ctx, Some(local_name.clone()), var, None) {\n                 return item;\n@@ -293,11 +293,11 @@ fn render_resolution_simple_(\n     let type_path_no_ty_args = matches!(\n         ctx.completion.ident_ctx,\n         IdentContext::NameRef(NameRefContext {\n-            kind: Some(NameRefKind::Path(PathCompletionCtx {\n+            kind: NameRefKind::Path(PathCompletionCtx {\n                 kind: PathKind::Type { .. },\n                 has_type_args: false,\n                 ..\n-            })),\n+            }),\n             ..\n         })\n     ) && ctx.completion.config.callable.is_some();"}, {"sha": "48539a03b188d44f6b7da995797272b3ab6122ca", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -83,10 +83,10 @@ fn render(\n         let qualified_path = matches!(\n             ctx.completion.ident_ctx,\n             IdentContext::NameRef(NameRefContext {\n-                kind: Some(NameRefKind::Path(PathCompletionCtx {\n+                kind: NameRefKind::Path(PathCompletionCtx {\n                     qualified: Qualified::With { .. },\n                     ..\n-                })),\n+                }),\n                 ..\n             })\n         );\n@@ -262,24 +262,24 @@ fn params(\n     let has_dot_receiver = match ctx.ident_ctx {\n         IdentContext::NameRef(NameRefContext {\n             kind:\n-                Some(NameRefKind::DotAccess(DotAccess {\n+                NameRefKind::DotAccess(DotAccess {\n                     kind: DotAccessKind::Method { has_parens: true },\n                     ..\n-                })),\n+                }),\n             ..\n         }) => return None,\n         IdentContext::NameRef(NameRefContext {\n-            kind: Some(NameRefKind::DotAccess(DotAccess { .. })),\n+            kind: NameRefKind::DotAccess(DotAccess { .. }),\n             ..\n         }) => true,\n         IdentContext::NameRef(NameRefContext {\n             kind:\n-                Some(NameRefKind::Path(\n+                NameRefKind::Path(\n                     PathCompletionCtx {\n                         kind: PathKind::Expr { .. }, has_call_parens: true, ..\n                     }\n                     | PathCompletionCtx { kind: PathKind::Use | PathKind::Type { .. }, .. },\n-                )),\n+                ),\n             ..\n         }) => return None,\n         _ => false,"}, {"sha": "042c974257944b455d61eb2e4d2393cef660522c", "filename": "crates/ide-completion/src/render/literal.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -55,15 +55,14 @@ fn render(\n     let mut kind = thing.kind(db);\n     let should_add_parens = match &completion.ident_ctx {\n         IdentContext::NameRef(NameRefContext {\n-            kind: Some(NameRefKind::Path(PathCompletionCtx { has_call_parens: true, .. })),\n+            kind: NameRefKind::Path(PathCompletionCtx { has_call_parens: true, .. }),\n             ..\n         }) => false,\n         IdentContext::NameRef(NameRefContext {\n             kind:\n-                Some(NameRefKind::Path(PathCompletionCtx {\n-                    kind: PathKind::Use | PathKind::Type { .. },\n-                    ..\n-                })),\n+                NameRefKind::Path(PathCompletionCtx {\n+                    kind: PathKind::Use | PathKind::Type { .. }, ..\n+                }),\n             ..\n         }) => false,\n         _ => true,"}, {"sha": "0c9c65f4231311bcdddb8ea6d63102c67ebbd36a", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -35,7 +35,7 @@ fn render(\n \n     let needs_bang = match &completion.ident_ctx {\n         IdentContext::NameRef(NameRefContext {\n-            kind: Some(NameRefKind::Path(PathCompletionCtx { kind, has_macro_bang, .. })),\n+            kind: NameRefKind::Path(PathCompletionCtx { kind, has_macro_bang, .. }),\n             ..\n         }) => is_fn_like && *kind != PathKind::Use && !has_macro_bang,\n         _ => is_fn_like,"}, {"sha": "74564bb3aaef329f223af1bd37d368ce867be855", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -7,7 +7,8 @@ use syntax::SmolStr;\n \n use crate::{\n     context::{\n-        IdentContext, NameRefContext, NameRefKind, ParamKind, PathCompletionCtx, PatternContext,\n+        IdentContext, NameContext, NameKind, NameRefContext, NameRefKind, ParamKind,\n+        PathCompletionCtx, PathKind, PatternContext,\n     },\n     render::{variant::visible_fields, RenderContext},\n     CompletionItem, CompletionItemKind,\n@@ -82,7 +83,7 @@ fn render_pat(\n     let has_call_parens = matches!(\n         ctx.completion.ident_ctx,\n         IdentContext::NameRef(NameRefContext {\n-            kind: Some(NameRefKind::Path(PathCompletionCtx { has_call_parens: true, .. })),\n+            kind: NameRefKind::Path(PathCompletionCtx { has_call_parens: true, .. }),\n             ..\n         })\n     );\n@@ -97,14 +98,27 @@ fn render_pat(\n         _ => name.to_owned(),\n     };\n \n-    if matches!(\n-        ctx.completion.pattern_ctx,\n-        Some(PatternContext {\n-            param_ctx: Some((.., ParamKind::Function(_))),\n-            has_type_ascription: false,\n-            ..\n-        }) if !has_call_parens\n-    ) {\n+    let needs_ascription = !has_call_parens\n+        && matches!(\n+            &ctx.completion.ident_ctx,\n+            IdentContext::NameRef(NameRefContext {\n+                kind: NameRefKind::Path(PathCompletionCtx {\n+                    kind: PathKind::Pat {\n+                        pat_ctx\n+                    },\n+                    ..\n+                }),\n+                ..\n+            }) | IdentContext::Name(NameContext {\n+                kind: NameKind::IdentPat(pat_ctx), ..}\n+            )\n+            if matches!(pat_ctx, PatternContext {\n+                param_ctx: Some((.., ParamKind::Function(_))),\n+                has_type_ascription: false,\n+                ..\n+            })\n+        );\n+    if needs_ascription {\n         pat.push(':');\n         pat.push(' ');\n         pat.push_str(name);"}, {"sha": "a3bc1025e95a284e04cc91a4fc59f7cfbc17bd9a", "filename": "crates/ide-completion/src/tests/flyimport.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Ftests%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc/crates%2Fide-completion%2Fsrc%2Ftests%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fflyimport.rs?ref=b1f9efa65c906ff84c8e1def1b0ebe6b12b3b6dc", "patch": "@@ -1,7 +1,7 @@\n use expect_test::{expect, Expect};\n \n use crate::{\n-    context::NameRefKind,\n+    context::{IdentContext, NameContext, NameKind, NameRefKind},\n     tests::{check_edit, check_edit_with_config, TEST_CONFIG},\n };\n \n@@ -11,17 +11,22 @@ fn check(ra_fixture: &str, expect: Expect) {\n     let ctx = crate::context::CompletionContext::new(&db, position, &config).unwrap();\n \n     let mut acc = crate::completions::Completions::default();\n-    if let Some(pattern_ctx) = &ctx.pattern_ctx {\n-        crate::completions::flyimport::import_on_the_fly_pat(&mut acc, &ctx, pattern_ctx);\n+    if let IdentContext::Name(NameContext { kind: NameKind::IdentPat(pat_ctx), .. }) =\n+        &ctx.ident_ctx\n+    {\n+        crate::completions::flyimport::import_on_the_fly_pat(&mut acc, &ctx, pat_ctx);\n     }\n-    if let crate::context::IdentContext::NameRef(name_ref_ctx) = &ctx.ident_ctx {\n+    if let IdentContext::NameRef(name_ref_ctx) = &ctx.ident_ctx {\n         match &name_ref_ctx.kind {\n-            Some(NameRefKind::Path(path)) => {\n+            NameRefKind::Path(path) => {\n                 crate::completions::flyimport::import_on_the_fly_path(&mut acc, &ctx, path);\n             }\n-            Some(NameRefKind::DotAccess(dot_access)) => {\n+            NameRefKind::DotAccess(dot_access) => {\n                 crate::completions::flyimport::import_on_the_fly_dot(&mut acc, &ctx, dot_access);\n             }\n+            NameRefKind::Pattern(pattern) => {\n+                crate::completions::flyimport::import_on_the_fly_pat(&mut acc, &ctx, pattern);\n+            }\n             _ => (),\n         }\n     }"}]}