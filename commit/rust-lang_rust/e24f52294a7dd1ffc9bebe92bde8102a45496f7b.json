{"sha": "e24f52294a7dd1ffc9bebe92bde8102a45496f7b", "node_id": "C_kwDOAAsO6NoAKGUyNGY1MjI5NGE3ZGQxZmZjOWJlYmU5MmJkZTgxMDJhNDU0OTZmN2I", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-09-30T02:33:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-30T02:33:35Z"}, "message": "Rollup merge of #88412 - mdsn:slice-sort-safety, r=dtolnay\n\nRemove ignore-tidy-undocumented-unsafe from core::slice::sort\n\nWrite down the missing safety arguments to be able to remove `ignore-tidy-undocumented-unsafe` from `core::slice::sort`.\n\nHelps with #66219\n\n``@rustbot`` label C-cleanup T-libs", "tree": {"sha": "6ddc0087bd04c2bee3d4babcf150ababd3837175", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ddc0087bd04c2bee3d4babcf150ababd3837175"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e24f52294a7dd1ffc9bebe92bde8102a45496f7b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVSH/CRBK7hj4Ov3rIwAAvsoIAJlu7Yb29J/tbUj3Y5bLC+dS\nU4lSlNY9CBWCQMnLyvAi5VWzLEaNbVbnKimhHMb6+Sb0Pmw/XLfCu4EVVflGKapg\n7gnSx//1Pq4vFy1o24jwMP4NMOnundbJIaDJLsZpKbMmVaoeN0I/gGcfIajAO42h\nors9PVweBwU9BwFeQukRGSHwPUA3JIRQcYOdUGZhFkvG56Avb4PrSmu0e/DmNnq0\nqhpSeUZXzS0cS2zJgNA450pQCJbste/32IqmAzOBIHgIgHv5rUSc4Z8agWgGxM03\npRV9JrIuTn1BqiJzs2cNX6FpVJH5cypNyMsHj3Y1m81MJlG9/z0sjFislEILxr4=\n=uB4Y\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ddc0087bd04c2bee3d4babcf150ababd3837175\nparent 42ea15be0a55ae7624a21f00818c2fcdf0d21e59\nparent 18fb97e4cc66e35fd552789b884a8784f6ae19d5\nauthor Eric Huss <eric@huss.org> 1632969215 -0700\ncommitter GitHub <noreply@github.com> 1632969215 -0700\n\nRollup merge of #88412 - mdsn:slice-sort-safety, r=dtolnay\n\nRemove ignore-tidy-undocumented-unsafe from core::slice::sort\n\nWrite down the missing safety arguments to be able to remove `ignore-tidy-undocumented-unsafe` from `core::slice::sort`.\n\nHelps with #66219\n\n``@rustbot`` label C-cleanup T-libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e24f52294a7dd1ffc9bebe92bde8102a45496f7b", "html_url": "https://github.com/rust-lang/rust/commit/e24f52294a7dd1ffc9bebe92bde8102a45496f7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e24f52294a7dd1ffc9bebe92bde8102a45496f7b/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42ea15be0a55ae7624a21f00818c2fcdf0d21e59", "url": "https://api.github.com/repos/rust-lang/rust/commits/42ea15be0a55ae7624a21f00818c2fcdf0d21e59", "html_url": "https://github.com/rust-lang/rust/commit/42ea15be0a55ae7624a21f00818c2fcdf0d21e59"}, {"sha": "18fb97e4cc66e35fd552789b884a8784f6ae19d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/18fb97e4cc66e35fd552789b884a8784f6ae19d5", "html_url": "https://github.com/rust-lang/rust/commit/18fb97e4cc66e35fd552789b884a8784f6ae19d5"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "60b39295cafe1e26f7ea3517a415bec85493e68d", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e24f52294a7dd1ffc9bebe92bde8102a45496f7b/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24f52294a7dd1ffc9bebe92bde8102a45496f7b/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=e24f52294a7dd1ffc9bebe92bde8102a45496f7b", "patch": "@@ -6,8 +6,6 @@\n //! Unstable sorting is compatible with libcore because it doesn't allocate memory, unlike our\n //! stable sorting implementation.\n \n-// ignore-tidy-undocumented-unsafe\n-\n use crate::cmp;\n use crate::mem::{self, MaybeUninit};\n use crate::ptr;\n@@ -291,6 +289,9 @@ where\n             } else if start_r < end_r {\n                 block_l = rem;\n             } else {\n+                // There were the same number of elements to switch on both blocks during the last\n+                // iteration, so there are no remaining elements on either block. Cover the remaining\n+                // items with roughly equally-sized blocks.\n                 block_l = rem / 2;\n                 block_r = rem - block_l;\n             }\n@@ -437,6 +438,17 @@ where\n         // Move its remaining out-of-order elements to the far right.\n         debug_assert_eq!(width(l, r), block_l);\n         while start_l < end_l {\n+            // remaining-elements-safety\n+            // SAFETY: while the loop condition holds there are still elements in `offsets_l`, so it\n+            // is safe to point `end_l` to the previous element.\n+            //\n+            // The `ptr::swap` is safe if both its arguments are valid for reads and writes:\n+            //  - Per the debug assert above, the distance between `l` and `r` is `block_l`\n+            //    elements, so there can be at most `block_l` remaining offsets between `start_l`\n+            //    and `end_l`. This means `r` will be moved at most `block_l` steps back, which\n+            //    makes the `r.offset` calls valid (at that point `l == r`).\n+            //  - `offsets_l` contains valid offsets into `v` collected during the partitioning of\n+            //    the last block, so the `l.offset` calls are valid.\n             unsafe {\n                 end_l = end_l.offset(-1);\n                 ptr::swap(l.offset(*end_l as isize), r.offset(-1));\n@@ -449,6 +461,7 @@ where\n         // Move its remaining out-of-order elements to the far left.\n         debug_assert_eq!(width(l, r), block_r);\n         while start_r < end_r {\n+            // SAFETY: See the reasoning in [remaining-elements-safety].\n             unsafe {\n                 end_r = end_r.offset(-1);\n                 ptr::swap(l, r.offset(-(*end_r as isize) - 1));\n@@ -481,6 +494,8 @@ where\n \n         // Read the pivot into a stack-allocated variable for efficiency. If a following comparison\n         // operation panics, the pivot will be automatically written back into the slice.\n+\n+        // SAFETY: `pivot` is a reference to the first element of `v`, so `ptr::read` is safe.\n         let mut tmp = mem::ManuallyDrop::new(unsafe { ptr::read(pivot) });\n         let _pivot_guard = CopyOnDrop { src: &mut *tmp, dest: pivot };\n         let pivot = &*tmp;\n@@ -646,6 +661,12 @@ where\n \n     if len >= 8 {\n         // Swaps indices so that `v[a] <= v[b]`.\n+        // SAFETY: `len >= 8` so there are at least two elements in the neighborhoods of\n+        // `a`, `b` and `c`. This means the three calls to `sort_adjacent` result in\n+        // corresponding calls to `sort3` with valid 3-item neighborhoods around each\n+        // pointer, which in turn means the calls to `sort2` are done with valid\n+        // references. Thus the `v.get_unchecked` calls are safe, as is the `ptr::swap`\n+        // call.\n         let mut sort2 = |a: &mut usize, b: &mut usize| unsafe {\n             if is_less(v.get_unchecked(*b), v.get_unchecked(*a)) {\n                 ptr::swap(a, b);"}]}