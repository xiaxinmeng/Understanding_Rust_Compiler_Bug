{"sha": "6adce70a58808426753fa8e74068dcb959c004a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZGNlNzBhNTg4MDg0MjY3NTNmYThlNzQwNjhkY2I5NTljMDA0YTY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-14T16:46:46Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-06-26T15:11:13Z"}, "message": "Improve comments for reserved prefixes.\n\nCo-authored-by: Niko Matsakis <niko@alum.mit.edu>", "tree": {"sha": "119b5c5e56f86f635445cc25c36de62f93af2849", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/119b5c5e56f86f635445cc25c36de62f93af2849"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6adce70a58808426753fa8e74068dcb959c004a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6adce70a58808426753fa8e74068dcb959c004a6", "html_url": "https://github.com/rust-lang/rust/commit/6adce70a58808426753fa8e74068dcb959c004a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6adce70a58808426753fa8e74068dcb959c004a6/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b18e215a3517bf32cc598b6e14743b14e4a928e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b18e215a3517bf32cc598b6e14743b14e4a928e", "html_url": "https://github.com/rust-lang/rust/commit/3b18e215a3517bf32cc598b6e14743b14e4a928e"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "4a8f34e2815c44674af207866583f3172c345dda", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6adce70a58808426753fa8e74068dcb959c004a6/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6adce70a58808426753fa8e74068dcb959c004a6/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=6adce70a58808426753fa8e74068dcb959c004a6", "patch": "@@ -66,7 +66,12 @@ pub enum TokenKind {\n     Ident,\n     /// \"r#ident\"\n     RawIdent,\n-    /// `foo#`, `foo'`, `foo\"`. Note the tailer is not included.\n+    /// An unknown prefix like `foo#`, `foo'`, `foo\"`. Note that only the\n+    /// prefix (`foo`) is included in the token, not the separator (which is\n+    /// lexed as its own distinct token). In Rust 2021 and later, reserved\n+    /// prefixes are reported as errors; in earlier editions, they result in a\n+    /// (allowed by default) lint, and are treated as regular identifier\n+    /// tokens.\n     BadPrefix,\n     /// \"12_u8\", \"1.0e-40\", \"b\"123\"\". See `LiteralKind` for more details.\n     Literal { kind: LiteralKind, suffix_start: usize },\n@@ -493,7 +498,7 @@ impl Cursor<'_> {\n         debug_assert!(is_id_start(self.prev()));\n         // Start is already eaten, eat the rest of identifier.\n         self.eat_while(is_id_continue);\n-        // Good prefixes must have been handled eariler. So if\n+        // Good prefixes must have been handled earlier. So if\n         // we see a prefix here, it is definitely a bad prefix.\n         match self.first() {\n             '#' | '\"' | '\\'' => BadPrefix,"}, {"sha": "b694217b58a95e2770f88e036ef7eee085d1f8d0", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6adce70a58808426753fa8e74068dcb959c004a6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6adce70a58808426753fa8e74068dcb959c004a6/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=6adce70a58808426753fa8e74068dcb959c004a6", "patch": "@@ -500,7 +500,10 @@ impl<'a> StringReader<'a> {\n         FatalError.raise()\n     }\n \n-    // See RFC 3101.\n+    // RFC 3101 introduced the idea of (reserved) prefixes. As of Rust 2021,\n+    // using a (unknown) prefix is an error. In earlier editions, however, they\n+    // only result in a (allowed by default) lint, and are treated as regular\n+    // identifier tokens.\n     fn report_reserved_prefix(&self, start: BytePos) {\n         let prefix_span = self.mk_sp(start, self.pos);\n         let msg = format!(\"prefix `{}` is unknown\", self.str_from_to(start, self.pos));"}]}