{"sha": "351a20c32fad14760e406e76fab43c8596de694d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MWEyMGMzMmZhZDE0NzYwZTQwNmU3NmZhYjQzYzg1OTZkZTY5NGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-31T10:56:42Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-31T10:56:51Z"}, "message": "libstd: deny(elided_lifetimes_in_paths), fixes in sgx", "tree": {"sha": "bdbd384f91e763abf4b9dd9c5dcc4ed4506a538e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdbd384f91e763abf4b9dd9c5dcc4ed4506a538e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/351a20c32fad14760e406e76fab43c8596de694d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/351a20c32fad14760e406e76fab43c8596de694d", "html_url": "https://github.com/rust-lang/rust/commit/351a20c32fad14760e406e76fab43c8596de694d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/351a20c32fad14760e406e76fab43c8596de694d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5d60910ca81736e498b307dbf7dcea26867f9b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d60910ca81736e498b307dbf7dcea26867f9b1", "html_url": "https://github.com/rust-lang/rust/commit/c5d60910ca81736e498b307dbf7dcea26867f9b1"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "fa82e8ccf0588e5fb75cbcde967b26094a70a329", "filename": "src/libstd/sys/sgx/abi/tls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/351a20c32fad14760e406e76fab43c8596de694d/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351a20c32fad14760e406e76fab43c8596de694d/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Ftls.rs?ref=351a20c32fad14760e406e76fab43c8596de694d", "patch": "@@ -84,7 +84,7 @@ impl Tls {\n         Tls { data: dup!((* * * * * * *) (Cell::new(ptr::null_mut()))) }\n     }\n \n-    pub unsafe fn activate(&self) -> ActiveTls {\n+    pub unsafe fn activate(&self) -> ActiveTls<'_> {\n         set_tls_ptr(self as *const Tls as _);\n         ActiveTls { tls: self }\n     }\n@@ -141,7 +141,7 @@ mod sync_bitset {\n         }\n \n         /// Not atomic.\n-        pub fn iter(&self) -> SyncBitsetIter {\n+        pub fn iter(&self) -> SyncBitsetIter<'_> {\n             SyncBitsetIter {\n                 iter: self.0.iter().enumerate().peekable(),\n                 elem_idx: 0,"}, {"sha": "ec9c30a3e4f9d0d94d32b0feab4be41d212d6323", "filename": "src/libstd/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/351a20c32fad14760e406e76fab43c8596de694d/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351a20c32fad14760e406e76fab43c8596de694d/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=351a20c32fad14760e406e76fab43c8596de694d", "patch": "@@ -429,7 +429,7 @@ impl<T> UserRef<[T]> where [T]: UserSafe {\n     }\n \n     /// Returns an iterator over the slice.\n-    pub fn iter(&self) -> Iter<T>\n+    pub fn iter(&self) -> Iter<'_, T>\n         where T: UserSafe // FIXME: should be implied by [T]: UserSafe?\n     {\n         unsafe {\n@@ -438,7 +438,7 @@ impl<T> UserRef<[T]> where [T]: UserSafe {\n     }\n \n     /// Returns an iterator that allows modifying each value.\n-    pub fn iter_mut(&mut self) -> IterMut<T>\n+    pub fn iter_mut(&mut self) -> IterMut<'_, T>\n         where T: UserSafe // FIXME: should be implied by [T]: UserSafe?\n     {\n         unsafe {"}, {"sha": "326737a2418637369ac4fd7679ae2bb132c424fa", "filename": "src/libstd/sys/sgx/backtrace.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/351a20c32fad14760e406e76fab43c8596de694d/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351a20c32fad14760e406e76fab43c8596de694d/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fbacktrace.rs?ref=351a20c32fad14760e406e76fab43c8596de694d", "patch": "@@ -31,8 +31,9 @@ impl fmt::Display for UnwindError {\n #[inline(never)] // this function call can be skipped it when tracing.\n pub fn unwind_backtrace(frames: &mut [Frame]) -> io::Result<(usize, BacktraceContext)> {\n     let mut cx = Context { idx: 0, frames };\n-    let result_unwind =\n-        unsafe { uw::_Unwind_Backtrace(trace_fn, &mut cx as *mut Context as *mut libc::c_void) };\n+    let result_unwind = unsafe {\n+        uw::_Unwind_Backtrace(trace_fn, &mut cx as *mut Context<'_> as *mut libc::c_void)\n+    };\n     // See libunwind:src/unwind/Backtrace.c for the return values.\n     // No, there is no doc.\n     let res = match result_unwind {"}, {"sha": "10cc644a55ec6762e95b303915dfa9165d63b914", "filename": "src/libstd/sys/sgx/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/351a20c32fad14760e406e76fab43c8596de694d/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351a20c32fad14760e406e76fab43c8596de694d/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fnet.rs?ref=351a20c32fad14760e406e76fab43c8596de694d", "patch": "@@ -48,7 +48,7 @@ pub struct TcpStream {\n }\n \n impl fmt::Debug for TcpStream {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut res = f.debug_struct(\"TcpStream\");\n \n         if let Some(ref addr) = self.inner.local_addr {\n@@ -213,7 +213,7 @@ pub struct TcpListener {\n }\n \n impl fmt::Debug for TcpListener {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut res = f.debug_struct(\"TcpListener\");\n \n         if let Some(ref addr) = self.inner.local_addr {"}, {"sha": "4cba36aa64dd53992605d567ca892d1c99b7961e", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/351a20c32fad14760e406e76fab43c8596de694d/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351a20c32fad14760e406e76fab43c8596de694d/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=351a20c32fad14760e406e76fab43c8596de694d", "patch": "@@ -93,8 +93,8 @@ impl RWLock {\n     #[inline]\n     unsafe fn __read_unlock(\n         &self,\n-        mut rguard: SpinMutexGuard<WaitVariable<Option<NonZeroUsize>>>,\n-        wguard: SpinMutexGuard<WaitVariable<bool>>,\n+        mut rguard: SpinMutexGuard<'_, WaitVariable<Option<NonZeroUsize>>>,\n+        wguard: SpinMutexGuard<'_, WaitVariable<bool>>,\n     ) {\n         *rguard.lock_var_mut() = NonZeroUsize::new(rguard.lock_var().unwrap().get() - 1);\n         if rguard.lock_var().is_some() {\n@@ -120,8 +120,8 @@ impl RWLock {\n     #[inline]\n     unsafe fn __write_unlock(\n         &self,\n-        rguard: SpinMutexGuard<WaitVariable<Option<NonZeroUsize>>>,\n-        wguard: SpinMutexGuard<WaitVariable<bool>>,\n+        rguard: SpinMutexGuard<'_, WaitVariable<Option<NonZeroUsize>>>,\n+        wguard: SpinMutexGuard<'_, WaitVariable<bool>>,\n     ) {\n         if let Err(mut wguard) = WaitQueue::notify_one(wguard) {\n             // No writers waiting, release the write lock"}, {"sha": "f4adb7d1e16067e2f8028ce52b48e25735ad61dc", "filename": "src/libstd/sys/sgx/waitqueue.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/351a20c32fad14760e406e76fab43c8596de694d/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351a20c32fad14760e406e76fab43c8596de694d/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs?ref=351a20c32fad14760e406e76fab43c8596de694d", "patch": "@@ -140,7 +140,7 @@ impl WaitQueue {\n     /// until a wakeup event.\n     ///\n     /// This function does not return until this thread has been awoken.\n-    pub fn wait<T>(mut guard: SpinMutexGuard<WaitVariable<T>>) {\n+    pub fn wait<T>(mut guard: SpinMutexGuard<'_, WaitVariable<T>>) {\n         unsafe {\n             let mut entry = UnsafeListEntry::new(SpinMutex::new(WaitEntry {\n                 tcs: thread::current(),\n@@ -162,8 +162,8 @@ impl WaitQueue {\n     ///\n     /// If a waiter is found, a `WaitGuard` is returned which will notify the\n     /// waiter when it is dropped.\n-    pub fn notify_one<T>(mut guard: SpinMutexGuard<WaitVariable<T>>)\n-        -> Result<WaitGuard<T>, SpinMutexGuard<WaitVariable<T>>>\n+    pub fn notify_one<T>(mut guard: SpinMutexGuard<'_, WaitVariable<T>>)\n+        -> Result<WaitGuard<'_, T>, SpinMutexGuard<'_, WaitVariable<T>>>\n     {\n         unsafe {\n             if let Some(entry) = guard.queue.inner.pop() {\n@@ -186,8 +186,8 @@ impl WaitQueue {\n     ///\n     /// If at least one waiter is found, a `WaitGuard` is returned which will\n     /// notify all waiters when it is dropped.\n-    pub fn notify_all<T>(mut guard: SpinMutexGuard<WaitVariable<T>>)\n-        -> Result<WaitGuard<T>, SpinMutexGuard<WaitVariable<T>>>\n+    pub fn notify_all<T>(mut guard: SpinMutexGuard<'_, WaitVariable<T>>)\n+        -> Result<WaitGuard<'_, T>, SpinMutexGuard<'_, WaitVariable<T>>>\n     {\n         unsafe {\n             let mut count = 0;\n@@ -433,7 +433,7 @@ mod spin_mutex {\n         }\n \n         #[inline(always)]\n-        pub fn lock(&self) -> SpinMutexGuard<T> {\n+        pub fn lock(&self) -> SpinMutexGuard<'_, T> {\n             loop {\n                 match self.try_lock() {\n                     None => while self.lock.load(Ordering::Relaxed) {\n@@ -445,7 +445,7 @@ mod spin_mutex {\n         }\n \n         #[inline(always)]\n-        pub fn try_lock(&self) -> Option<SpinMutexGuard<T>> {\n+        pub fn try_lock(&self) -> Option<SpinMutexGuard<'_, T>> {\n             if !self.lock.compare_and_swap(false, true, Ordering::Acquire) {\n                 Some(SpinMutexGuard {\n                     mutex: self,"}]}