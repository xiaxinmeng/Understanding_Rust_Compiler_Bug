{"sha": "9a4e5df12685e58ad42ce0152cdbe266373c6bf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNGU1ZGYxMjY4NWU1OGFkNDJjZTAxNTJjZGJlMjY2MzczYzZiZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-23T05:09:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-23T05:09:13Z"}, "message": "Auto merge of #50682 - F001:issue-50589, r=petrochenkov\n\nAdd lint for multiple associated types\n\nFix https://github.com/rust-lang/rust/issues/50589. cc @abonander", "tree": {"sha": "9a444841d99befe893ba2801037b11d949f0497e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a444841d99befe893ba2801037b11d949f0497e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a4e5df12685e58ad42ce0152cdbe266373c6bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4e5df12685e58ad42ce0152cdbe266373c6bf3", "html_url": "https://github.com/rust-lang/rust/commit/9a4e5df12685e58ad42ce0152cdbe266373c6bf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a4e5df12685e58ad42ce0152cdbe266373c6bf3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ec4ab9b6820c5f0937bf29c09637648fcb547a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ec4ab9b6820c5f0937bf29c09637648fcb547a3", "html_url": "https://github.com/rust-lang/rust/commit/5ec4ab9b6820c5f0937bf29c09637648fcb547a3"}, {"sha": "88f810f52e628795875260a31d479af4f28a5edb", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f810f52e628795875260a31d479af4f28a5edb", "html_url": "https://github.com/rust-lang/rust/commit/88f810f52e628795875260a31d479af4f28a5edb"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "5d7d2f0f9e69878edbc9cb2a97586098f23e2ffe", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a4e5df12685e58ad42ce0152cdbe266373c6bf3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4e5df12685e58ad42ce0152cdbe266373c6bf3/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=9a4e5df12685e58ad42ce0152cdbe266373c6bf3", "patch": "@@ -279,6 +279,12 @@ declare_lint! {\n     \"detects labels that are never used\"\n }\n \n+declare_lint! {\n+    pub DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n+    Warn,\n+    \"warns about duplicate associated type bindings in generics\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -330,6 +336,7 @@ impl LintPass for HardwiredLints {\n             BARE_TRAIT_OBJECT,\n             ABSOLUTE_PATH_NOT_STARTING_WITH_CRATE,\n             UNSTABLE_NAME_COLLISION,\n+            DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n         )\n     }\n }"}, {"sha": "e35537459b70fe713b9ea8f67eea9470e71c29b9", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a4e5df12685e58ad42ce0152cdbe266373c6bf3/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4e5df12685e58ad42ce0152cdbe266373c6bf3/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=9a4e5df12685e58ad42ce0152cdbe266373c6bf3", "patch": "@@ -283,6 +283,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue TBD\",\n             edition: Some(Edition::Edition2018),\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(DUPLICATE_ASSOCIATED_TYPE_BINDINGS),\n+            reference: \"issue #50589 <https://github.com/rust-lang/rust/issues/50589>\",\n+            edition: None,\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "68587fb8b3c1e0c79cdd3c07003112bfd0b35b33", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9a4e5df12685e58ad42ce0152cdbe266373c6bf3/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4e5df12685e58ad42ce0152cdbe266373c6bf3/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9a4e5df12685e58ad42ce0152cdbe266373c6bf3", "patch": "@@ -27,7 +27,7 @@ use rustc_target::spec::abi;\n use std::slice;\n use require_c_abi_if_variadic;\n use util::common::ErrorReported;\n-use util::nodemap::FxHashSet;\n+use util::nodemap::{FxHashSet, FxHashMap};\n use errors::FatalError;\n \n use std::iter;\n@@ -398,11 +398,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                                  trait_ref.path.segments.last().unwrap());\n         let poly_trait_ref = ty::Binder::bind(ty::TraitRef::new(trait_def_id, substs));\n \n+        let mut dup_bindings = FxHashMap::default();\n         poly_projections.extend(assoc_bindings.iter().filter_map(|binding| {\n             // specify type to assert that error was already reported in Err case:\n             let predicate: Result<_, ErrorReported> =\n-                self.ast_type_binding_to_poly_projection_predicate(trait_ref.ref_id, poly_trait_ref,\n-                                                                   binding, speculative);\n+                self.ast_type_binding_to_poly_projection_predicate(\n+                    trait_ref.ref_id, poly_trait_ref, binding, speculative, &mut dup_bindings);\n             predicate.ok() // ok to ignore Err() because ErrorReported (see above)\n         }));\n \n@@ -487,7 +488,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         ref_id: ast::NodeId,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         binding: &ConvertedBinding<'tcx>,\n-        speculative: bool)\n+        speculative: bool,\n+        dup_bindings: &mut FxHashMap<DefId, Span>)\n         -> Result<ty::PolyProjectionPredicate<'tcx>, ErrorReported>\n     {\n         let tcx = self.tcx();\n@@ -566,6 +568,23 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n         tcx.check_stability(assoc_ty.def_id, Some(ref_id), binding.span);\n \n+        if !speculative {\n+            dup_bindings.entry(assoc_ty.def_id)\n+                .and_modify(|prev_span| {\n+                    let mut err = self.tcx().struct_span_lint_node(\n+                        ::rustc::lint::builtin::DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n+                        ref_id,\n+                        binding.span,\n+                        &format!(\"associated type binding `{}` specified more than once\",\n+                                binding.item_name)\n+                    );\n+                    err.span_label(binding.span, \"used more than once\");\n+                    err.span_label(*prev_span, format!(\"first use of `{}`\", binding.item_name));\n+                    err.emit();\n+                })\n+                .or_insert(binding.span);\n+        }\n+\n         Ok(candidate.map_bound(|trait_ref| {\n             ty::ProjectionPredicate {\n                 projection_ty: ty::ProjectionTy::from_ref_and_name("}, {"sha": "2c789a139cd3a6cf95007291be743daed79c9944", "filename": "src/test/ui/lint/issue-50589-multiple-associated-types.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9a4e5df12685e58ad42ce0152cdbe266373c6bf3/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4e5df12685e58ad42ce0152cdbe266373c6bf3/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.rs?ref=9a4e5df12685e58ad42ce0152cdbe266373c6bf3", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+use std::iter::Iterator;\n+\n+type Unit = ();\n+\n+fn test() ->  Box<Iterator<Item = (), Item = Unit>> {\n+    Box::new(None.into_iter())\n+}\n+\n+fn main() {\n+    test();\n+}"}, {"sha": "7f0a1ee1f3307b2a4f3f226d88f715a50af84def", "filename": "src/test/ui/lint/issue-50589-multiple-associated-types.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9a4e5df12685e58ad42ce0152cdbe266373c6bf3/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a4e5df12685e58ad42ce0152cdbe266373c6bf3/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-50589-multiple-associated-types.stderr?ref=9a4e5df12685e58ad42ce0152cdbe266373c6bf3", "patch": "@@ -0,0 +1,23 @@\n+warning: associated type binding `Item` specified more than once\n+  --> $DIR/issue-50589-multiple-associated-types.rs:17:39\n+   |\n+LL | fn test() ->  Box<Iterator<Item = (), Item = Unit>> {\n+   |                            ---------  ^^^^^^^^^^^ used more than once\n+   |                            |\n+   |                            first use of `Item`\n+   |\n+   = note: #[warn(duplicate_associated_type_bindings)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #50589 <https://github.com/rust-lang/rust/issues/50589>\n+\n+warning: associated type binding `Item` specified more than once\n+  --> $DIR/issue-50589-multiple-associated-types.rs:17:39\n+   |\n+LL | fn test() ->  Box<Iterator<Item = (), Item = Unit>> {\n+   |                            ---------  ^^^^^^^^^^^ used more than once\n+   |                            |\n+   |                            first use of `Item`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #50589 <https://github.com/rust-lang/rust/issues/50589>\n+"}]}