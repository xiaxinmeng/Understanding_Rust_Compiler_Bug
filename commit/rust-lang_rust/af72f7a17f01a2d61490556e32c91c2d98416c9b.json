{"sha": "af72f7a17f01a2d61490556e32c91c2d98416c9b", "node_id": "C_kwDOAAsO6NoAKGFmNzJmN2ExN2YwMWEyZDYxNDkwNTU2ZTMyYzkxYzJkOTg0MTZjOWI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-28T00:31:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-29T05:52:15Z"}, "message": "Remove `TreeAndSpacing`.\n\nA `TokenStream` contains a `Lrc<Vec<(TokenTree, Spacing)>>`. But this is\nnot quite right. `Spacing` makes sense for `TokenTree::Token`, but does\nnot make sense for `TokenTree::Delimited`, because a\n`TokenTree::Delimited` cannot be joined with another `TokenTree`.\n\nThis commit fixes this problem, by adding `Spacing` to `TokenTree::Token`,\nchanging `TokenStream` to contain a `Lrc<Vec<TokenTree>>`, and removing the\n`TreeAndSpacing` typedef.\n\nThe commit removes these two impls:\n- `impl From<TokenTree> for TokenStream`\n- `impl From<TokenTree> for TreeAndSpacing`\n\nThese were useful, but also resulted in code with many `.into()` calls\nthat was hard to read, particularly for anyone not highly familiar with\nthe relevant types. This commit makes some other changes to compensate:\n- `TokenTree::token()` becomes `TokenTree::token_{alone,joint}()`.\n- `TokenStream::token_{alone,joint}()` are added.\n- `TokenStream::delimited` is added.\n\nThis results in things like this:\n```rust\nTokenTree::token(token::Semi, stmt.span).into()\n```\nchanging to this:\n```rust\nTokenStream::token_alone(token::Semi, stmt.span)\n```\nThis makes the type of the result, and its spacing, clearer.\n\nThese changes also simplifies `Cursor` and `CursorRef`, because they no longer\nneed to distinguish between `next` and `next_with_spacing`.", "tree": {"sha": "4b1256f4db301b1a38d1bad33b0b35fab0d7ab36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b1256f4db301b1a38d1bad33b0b35fab0d7ab36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af72f7a17f01a2d61490556e32c91c2d98416c9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af72f7a17f01a2d61490556e32c91c2d98416c9b", "html_url": "https://github.com/rust-lang/rust/commit/af72f7a17f01a2d61490556e32c91c2d98416c9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af72f7a17f01a2d61490556e32c91c2d98416c9b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f026688c2abd95fdfabe50ace0a422004d4c47d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f026688c2abd95fdfabe50ace0a422004d4c47d5", "html_url": "https://github.com/rust-lang/rust/commit/f026688c2abd95fdfabe50ace0a422004d4c47d5"}], "stats": {"total": 98, "additions": 61, "deletions": 37}, "files": [{"sha": "3a641fab5d647258f8e3780a7ee32328a09d65a6", "filename": "src/macros.rs", "status": "modified", "additions": 61, "deletions": 37, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/af72f7a17f01a2d61490556e32c91c2d98416c9b/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af72f7a17f01a2d61490556e32c91c2d98416c9b/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=af72f7a17f01a2d61490556e32c91c2d98416c9b", "patch": "@@ -13,7 +13,7 @@ use std::collections::HashMap;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n use rustc_ast::token::{BinOpToken, Delimiter, Token, TokenKind};\n-use rustc_ast::tokenstream::{Cursor, Spacing, TokenStream, TokenTree};\n+use rustc_ast::tokenstream::{Cursor, TokenStream, TokenTree};\n use rustc_ast::{ast, ptr};\n use rustc_ast_pretty::pprust;\n use rustc_span::{\n@@ -682,7 +682,7 @@ struct MacroArgParser {\n \n fn last_tok(tt: &TokenTree) -> Token {\n     match *tt {\n-        TokenTree::Token(ref t) => t.clone(),\n+        TokenTree::Token(ref t, _) => t.clone(),\n         TokenTree::Delimited(delim_span, delim, _) => Token {\n             kind: TokenKind::CloseDelim(delim),\n             span: delim_span.close,\n@@ -737,10 +737,13 @@ impl MacroArgParser {\n \n     fn add_meta_variable(&mut self, iter: &mut Cursor) -> Option<()> {\n         match iter.next() {\n-            Some(TokenTree::Token(Token {\n-                kind: TokenKind::Ident(name, _),\n-                ..\n-            })) => {\n+            Some(TokenTree::Token(\n+                Token {\n+                    kind: TokenKind::Ident(name, _),\n+                    ..\n+                },\n+                _,\n+            )) => {\n                 self.result.push(ParsedMacroArg {\n                     kind: MacroArgKind::MetaVariable(name, self.buf.clone()),\n                 });\n@@ -777,21 +780,30 @@ impl MacroArgParser {\n             }\n \n             match tok {\n-                TokenTree::Token(Token {\n-                    kind: TokenKind::BinOp(BinOpToken::Plus),\n-                    ..\n-                })\n-                | TokenTree::Token(Token {\n-                    kind: TokenKind::Question,\n-                    ..\n-                })\n-                | TokenTree::Token(Token {\n-                    kind: TokenKind::BinOp(BinOpToken::Star),\n-                    ..\n-                }) => {\n+                TokenTree::Token(\n+                    Token {\n+                        kind: TokenKind::BinOp(BinOpToken::Plus),\n+                        ..\n+                    },\n+                    _,\n+                )\n+                | TokenTree::Token(\n+                    Token {\n+                        kind: TokenKind::Question,\n+                        ..\n+                    },\n+                    _,\n+                )\n+                | TokenTree::Token(\n+                    Token {\n+                        kind: TokenKind::BinOp(BinOpToken::Star),\n+                        ..\n+                    },\n+                    _,\n+                ) => {\n                     break;\n                 }\n-                TokenTree::Token(ref t) => {\n+                TokenTree::Token(ref t, _) => {\n                     buffer.push_str(&pprust::token_to_string(t));\n                 }\n                 _ => return None,\n@@ -859,10 +871,13 @@ impl MacroArgParser {\n \n         while let Some(tok) = iter.next() {\n             match tok {\n-                TokenTree::Token(Token {\n-                    kind: TokenKind::Dollar,\n-                    span,\n-                }) => {\n+                TokenTree::Token(\n+                    Token {\n+                        kind: TokenKind::Dollar,\n+                        span,\n+                    },\n+                    _,\n+                ) => {\n                     // We always want to add a separator before meta variables.\n                     if !self.buf.is_empty() {\n                         self.add_separator();\n@@ -875,13 +890,16 @@ impl MacroArgParser {\n                         span,\n                     };\n                 }\n-                TokenTree::Token(Token {\n-                    kind: TokenKind::Colon,\n-                    ..\n-                }) if self.is_meta_var => {\n+                TokenTree::Token(\n+                    Token {\n+                        kind: TokenKind::Colon,\n+                        ..\n+                    },\n+                    _,\n+                ) if self.is_meta_var => {\n                     self.add_meta_variable(&mut iter)?;\n                 }\n-                TokenTree::Token(ref t) => self.update_buffer(t),\n+                TokenTree::Token(ref t, _) => self.update_buffer(t),\n                 TokenTree::Delimited(_delimited_span, delimited, ref tts) => {\n                     if !self.buf.is_empty() {\n                         if next_space(&self.last_tok.kind) == SpaceState::Always {\n@@ -1123,12 +1141,15 @@ impl MacroParser {\n             TokenTree::Token(..) => return None,\n             TokenTree::Delimited(delimited_span, d, _) => (delimited_span.open.lo(), d),\n         };\n-        let args = TokenStream::new(vec![(tok, Spacing::Joint)]);\n+        let args = TokenStream::new(vec![tok]);\n         match self.toks.next()? {\n-            TokenTree::Token(Token {\n-                kind: TokenKind::FatArrow,\n-                ..\n-            }) => {}\n+            TokenTree::Token(\n+                Token {\n+                    kind: TokenKind::FatArrow,\n+                    ..\n+                },\n+                _,\n+            ) => {}\n             _ => return None,\n         }\n         let (mut hi, body, whole_body) = match self.toks.next()? {\n@@ -1147,10 +1168,13 @@ impl MacroParser {\n                 )\n             }\n         };\n-        if let Some(TokenTree::Token(Token {\n-            kind: TokenKind::Semi,\n-            span,\n-        })) = self.toks.look_ahead(0)\n+        if let Some(TokenTree::Token(\n+            Token {\n+                kind: TokenKind::Semi,\n+                span,\n+            },\n+            _,\n+        )) = self.toks.look_ahead(0)\n         {\n             hi = span.hi();\n             self.toks.next();"}]}