{"sha": "4498e300e41f47c75abe4e49ec91ae949aaeea5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OThlMzAwZTQxZjQ3Yzc1YWJlNGU0OWVjOTFhZTk0OWFhZWVhNWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-12T13:24:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-12T13:24:29Z"}, "message": "Auto merge of #87963 - GuillaumeGomez:rollup-e54sbez, r=GuillaumeGomez\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #87819 (Use a more accurate span on assoc types WF checks)\n - #87863 (Fix Windows Command::env(\"PATH\"))\n - #87885 (Link to edition guide instead of issues for 2021 lints.)\n - #87941 (Fix/improve rustdoc-js tool)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d63b62629e1256e38245e5e0194de0759ab0a891", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d63b62629e1256e38245e5e0194de0759ab0a891"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4498e300e41f47c75abe4e49ec91ae949aaeea5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4498e300e41f47c75abe4e49ec91ae949aaeea5f", "html_url": "https://github.com/rust-lang/rust/commit/4498e300e41f47c75abe4e49ec91ae949aaeea5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4498e300e41f47c75abe4e49ec91ae949aaeea5f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bed1f0bc3cc50c10aab26d5f94b16a00776b8a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bed1f0bc3cc50c10aab26d5f94b16a00776b8a5", "html_url": "https://github.com/rust-lang/rust/commit/6bed1f0bc3cc50c10aab26d5f94b16a00776b8a5"}, {"sha": "faf7fb94f9cb7c66ecbc5e922726cabd3016da2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf7fb94f9cb7c66ecbc5e922726cabd3016da2d", "html_url": "https://github.com/rust-lang/rust/commit/faf7fb94f9cb7c66ecbc5e922726cabd3016da2d"}], "stats": {"total": 350, "additions": 189, "deletions": 161}, "files": [{"sha": "21fad5f9af683fb20f1c4ae70b4d4288966a941b", "filename": "compiler/rustc_lint/src/array_into_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Farray_into_iter.rs?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -32,7 +32,7 @@ declare_lint! {\n     Warn,\n     \"detects calling `into_iter` on arrays in Rust 2015 and 2018\",\n     @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #66145 <https://github.com/rust-lang/rust/issues/66145>\",\n+        reference: \"<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\",\n         reason: FutureIncompatibilityReason::EditionSemanticsChange(Edition::Edition2021),\n     };\n }"}, {"sha": "31d0d917f9093fbee583384e861119daa7b99f29", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1680,7 +1680,7 @@ declare_lint! {\n     Warn,\n     \"`...` range patterns are deprecated\",\n     @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #80165 <https://github.com/rust-lang/rust/issues/80165>\",\n+        reference: \"<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\",\n         reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n }"}, {"sha": "9ea17e0ccb61389375ec8422c6d3656f4188ee13", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1605,7 +1605,7 @@ declare_lint! {\n     Warn,\n     \"suggest using `dyn Trait` for trait objects\",\n     @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #80165 <https://github.com/rust-lang/rust/issues/80165>\",\n+        reference: \"<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\",\n         reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n }\n@@ -3247,7 +3247,7 @@ declare_lint! {\n     Allow,\n     \"detects usage of old versions of or-patterns\",\n     @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #84869 <https://github.com/rust-lang/rust/issues/84869>\",\n+        reference: \"<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/or-patterns-macro-rules.html>\",\n         reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n }\n@@ -3296,7 +3296,7 @@ declare_lint! {\n     \"detects the usage of trait methods which are ambiguous with traits added to the \\\n         prelude in future editions\",\n     @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #85684 <https://github.com/rust-lang/rust/issues/85684>\",\n+        reference: \"<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\",\n         reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n }\n@@ -3331,7 +3331,7 @@ declare_lint! {\n     Allow,\n     \"identifiers that will be parsed as a prefix in Rust 2021\",\n     @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #84978 <https://github.com/rust-lang/rust/issues/84978>\",\n+        reference: \"<https://doc.rust-lang.org/nightly/edition-guide/rust-2021/reserving-syntax.html>\",\n         reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n     crate_level_only"}, {"sha": "b82437096592807b823b2f966ca3cf1bf80cb7da", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -194,12 +194,13 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let trait_item = tcx.hir().expect_trait_item(hir_id);\n \n-    let method_sig = match trait_item.kind {\n-        hir::TraitItemKind::Fn(ref sig, _) => Some(sig),\n-        _ => None,\n+    let (method_sig, span) = match trait_item.kind {\n+        hir::TraitItemKind::Fn(ref sig, _) => (Some(sig), trait_item.span),\n+        hir::TraitItemKind::Type(_bounds, Some(ty)) => (None, ty.span),\n+        _ => (None, trait_item.span),\n     };\n     check_object_unsafe_self_trait_by_name(tcx, &trait_item);\n-    check_associated_item(tcx, trait_item.hir_id(), trait_item.span, method_sig);\n+    check_associated_item(tcx, trait_item.hir_id(), span, method_sig);\n }\n \n fn could_be_self(trait_def_id: LocalDefId, ty: &hir::Ty<'_>) -> bool {\n@@ -268,12 +269,13 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n     let impl_item = tcx.hir().expect_impl_item(hir_id);\n \n-    let method_sig = match impl_item.kind {\n-        hir::ImplItemKind::Fn(ref sig, _) => Some(sig),\n-        _ => None,\n+    let (method_sig, span) = match impl_item.kind {\n+        hir::ImplItemKind::Fn(ref sig, _) => (Some(sig), impl_item.span),\n+        hir::ImplItemKind::TyAlias(ty) => (None, ty.span),\n+        _ => (None, impl_item.span),\n     };\n \n-    check_associated_item(tcx, impl_item.hir_id(), impl_item.span, method_sig);\n+    check_associated_item(tcx, impl_item.hir_id(), span, method_sig);\n }\n \n fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {"}, {"sha": "ae193b82e91bb4ce67631babc0ff1c67a6f2e583", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -3,7 +3,6 @@\n #[cfg(test)]\n mod tests;\n \n-use crate::borrow::Borrow;\n use crate::cmp;\n use crate::collections::BTreeMap;\n use crate::convert::{TryFrom, TryInto};\n@@ -46,6 +45,12 @@ pub struct EnvKey {\n     utf16: Vec<u16>,\n }\n \n+impl EnvKey {\n+    fn new<T: Into<OsString>>(key: T) -> Self {\n+        EnvKey::from(key.into())\n+    }\n+}\n+\n // Comparing Windows environment variable keys[1] are behaviourally the\n // composition of two operations[2]:\n //\n@@ -100,6 +105,20 @@ impl PartialEq for EnvKey {\n         }\n     }\n }\n+impl PartialOrd<str> for EnvKey {\n+    fn partial_cmp(&self, other: &str) -> Option<cmp::Ordering> {\n+        Some(self.cmp(&EnvKey::new(other)))\n+    }\n+}\n+impl PartialEq<str> for EnvKey {\n+    fn eq(&self, other: &str) -> bool {\n+        if self.os_string.len() != other.len() {\n+            false\n+        } else {\n+            self.cmp(&EnvKey::new(other)) == cmp::Ordering::Equal\n+        }\n+    }\n+}\n \n // Environment variable keys should preserve their original case even though\n // they are compared using a caseless string mapping.\n@@ -115,9 +134,9 @@ impl From<EnvKey> for OsString {\n     }\n }\n \n-impl Borrow<OsStr> for EnvKey {\n-    fn borrow(&self) -> &OsStr {\n-        &self.os_string\n+impl From<&OsStr> for EnvKey {\n+    fn from(k: &OsStr) -> Self {\n+        Self::from(k.to_os_string())\n     }\n }\n \n@@ -242,7 +261,7 @@ impl Command {\n         // to read the *child's* PATH if one is provided. See #15149 for more\n         // details.\n         let program = maybe_env.as_ref().and_then(|env| {\n-            if let Some(v) = env.get(OsStr::new(\"PATH\")) {\n+            if let Some(v) = env.get(&EnvKey::new(\"PATH\")) {\n                 // Split the value and test each path to see if the\n                 // program exists.\n                 for path in split_paths(&v) {"}, {"sha": "38007d5c414ecd42bd97456334005c4231756bd9", "filename": "library/std/src/sys_common/process.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -65,16 +65,18 @@ impl CommandEnv {\n \n     // The following functions build up changes\n     pub fn set(&mut self, key: &OsStr, value: &OsStr) {\n+        let key = EnvKey::from(key);\n         self.maybe_saw_path(&key);\n-        self.vars.insert(key.to_owned().into(), Some(value.to_owned()));\n+        self.vars.insert(key, Some(value.to_owned()));\n     }\n \n     pub fn remove(&mut self, key: &OsStr) {\n+        let key = EnvKey::from(key);\n         self.maybe_saw_path(&key);\n         if self.clear {\n-            self.vars.remove(key);\n+            self.vars.remove(&key);\n         } else {\n-            self.vars.insert(key.to_owned().into(), None);\n+            self.vars.insert(key, None);\n         }\n     }\n \n@@ -87,7 +89,7 @@ impl CommandEnv {\n         self.saw_path || self.clear\n     }\n \n-    fn maybe_saw_path(&mut self, key: &OsStr) {\n+    fn maybe_saw_path(&mut self, key: &EnvKey) {\n         if !self.saw_path && key == \"PATH\" {\n             self.saw_path = true;\n         }"}, {"sha": "008eddcb29dbcc121770f7fa6681913bea60960d", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,14 +1,14 @@\n error[E0275]: overflow evaluating the requirement `<bool as Tr>::B == _`\n-  --> $DIR/defaults-cyclic-fail-1.rs:26:5\n+  --> $DIR/defaults-cyclic-fail-1.rs:26:14\n    |\n LL |     type A = Box<Self::B>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^\n \n error[E0275]: overflow evaluating the requirement `<usize as Tr>::A == _`\n-  --> $DIR/defaults-cyclic-fail-1.rs:32:5\n+  --> $DIR/defaults-cyclic-fail-1.rs:32:14\n    |\n LL |     type B = &'static Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d0fbab077153f4bbf974ed21d3dc48722df8038b", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,14 +1,14 @@\n error[E0275]: overflow evaluating the requirement `<bool as Tr>::B == _`\n-  --> $DIR/defaults-cyclic-fail-2.rs:27:5\n+  --> $DIR/defaults-cyclic-fail-2.rs:27:14\n    |\n LL |     type A = Box<Self::B>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^\n \n error[E0275]: overflow evaluating the requirement `<usize as Tr>::A == _`\n-  --> $DIR/defaults-cyclic-fail-2.rs:33:5\n+  --> $DIR/defaults-cyclic-fail-2.rs:33:14\n    |\n LL |     type B = &'static Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "380c17c8e62bbcb98b7ecf589c1a9beb12e84001", "filename": "src/test/ui/const-generics/min_const_generics/const-expression-suggest-missing-braces.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-expression-suggest-missing-braces.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -139,7 +139,7 @@ LL |     foo::<BAR + BAR>();\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error[E0747]: type provided when a constant was expected\n   --> $DIR/const-expression-suggest-missing-braces.rs:11:11"}, {"sha": "c9bb08cf35c1dc3111962c2650683b36ce345be5", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #[deny(bare_trait_objects)]\n    |        ^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:35\n@@ -19,7 +19,7 @@ LL | fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n    |                                   ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:9:14\n@@ -28,7 +28,7 @@ LL |     let _x: &SomeTrait = todo!();\n    |              ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "5e0f98c0bbf0a73caf33193f69b6504a2f2ede88", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -18,7 +18,7 @@ LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n   --> $DIR/gat-trait-path-parenthesised-args.rs:7:27"}, {"sha": "345e2b3fcb12ca1fcf8d61b2d920b455462874dc", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,11 +1,11 @@\n error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n-  --> $DIR/projection-bound-cycle-generic.rs:44:5\n+  --> $DIR/projection-bound-cycle-generic.rs:44:18\n    |\n LL | struct OnlySized<T> where T: Sized { f: T }\n    |                  - required by this bound in `OnlySized`\n ...\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "eefc09fa78863bfcfbd1427e4f5f306562d35081", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,11 +1,11 @@\n error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n-  --> $DIR/projection-bound-cycle.rs:46:5\n+  --> $DIR/projection-bound-cycle.rs:46:18\n    |\n LL | struct OnlySized<T> where T: Sized { f: T }\n    |                  - required by this bound in `OnlySized`\n ...\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "67f6b3081bb3042603362155ebce71f855f7bace", "filename": "src/test/ui/issues/issue-21946.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21946.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,8 +1,8 @@\n error[E0275]: overflow evaluating the requirement `<FooStruct as Foo>::A == _`\n-  --> $DIR/issue-21946.rs:8:5\n+  --> $DIR/issue-21946.rs:8:14\n    |\n LL |     type A = <FooStruct as Foo>::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0b568b30e08d8dab9e7e3c6e25dc835746f4c4f0", "filename": "src/test/ui/issues/issue-23122-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-1.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,8 +1,8 @@\n error[E0275]: overflow evaluating the requirement `<GetNext<T> as Next>::Next == _`\n-  --> $DIR/issue-23122-1.rs:10:5\n+  --> $DIR/issue-23122-1.rs:10:17\n    |\n LL |     type Next = <GetNext<T> as Next>::Next;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "68a95dc265e821bc155fd880e1d0405336f16f89", "filename": "src/test/ui/issues/issue-23122-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23122-2.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,8 +1,8 @@\n error[E0275]: overflow evaluating the requirement `<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next: Sized`\n-  --> $DIR/issue-23122-2.rs:9:5\n+  --> $DIR/issue-23122-2.rs:9:17\n    |\n LL |     type Next = <GetNext<T::Next> as Next>::Next;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_23122_2`)\n note: required because of the requirements on the impl of `Next` for `GetNext<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<T as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next as Next>::Next>`"}, {"sha": "0d576909a35692089e8e28eab72812a53ee95c4c", "filename": "src/test/ui/issues/issue-86756.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -22,7 +22,7 @@ LL |     eq::<dyn, Foo>\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error[E0107]: missing generics for trait `Foo`\n   --> $DIR/issue-86756.rs:5:15"}, {"sha": "e9780d9b165c765239b84e22641bf7e8f729ca16", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -6,7 +6,7 @@ LL |     let _: Iter<'_, i32> = array.into_iter();\n    |\n    = note: `#[warn(array_into_iter)]` on by default\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     let _: Iter<'_, i32> = array.iter();\n@@ -23,7 +23,7 @@ LL |     let _: Iter<'_, i32> = Box::new(array).into_iter();\n    |                                            ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     let _: Iter<'_, i32> = Box::new(array).iter();\n@@ -40,7 +40,7 @@ LL |     for _ in [1, 2, 3].into_iter() {}\n    |                        ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     for _ in [1, 2, 3].iter() {}"}, {"sha": "138becc4ffe1ea6cca92202c562eb708ce8cc96c", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -6,7 +6,7 @@ LL |     small.into_iter();\n    |\n    = note: `#[warn(array_into_iter)]` on by default\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     small.iter();\n@@ -23,7 +23,7 @@ LL |     [1, 2].into_iter();\n    |            ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     [1, 2].iter();\n@@ -40,7 +40,7 @@ LL |     big.into_iter();\n    |         ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     big.iter();\n@@ -57,7 +57,7 @@ LL |     [0u8; 33].into_iter();\n    |               ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     [0u8; 33].iter();\n@@ -74,7 +74,7 @@ LL |     Box::new(small).into_iter();\n    |                     ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     Box::new(small).iter();\n@@ -91,7 +91,7 @@ LL |     Box::new([1, 2]).into_iter();\n    |                      ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     Box::new([1, 2]).iter();\n@@ -108,7 +108,7 @@ LL |     Box::new(big).into_iter();\n    |                   ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     Box::new(big).iter();\n@@ -125,7 +125,7 @@ LL |     Box::new([0u8; 33]).into_iter();\n    |                         ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     Box::new([0u8; 33]).iter();\n@@ -142,7 +142,7 @@ LL |     Box::new(Box::new(small)).into_iter();\n    |                               ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     Box::new(Box::new(small)).iter();\n@@ -159,7 +159,7 @@ LL |     Box::new(Box::new([1, 2])).into_iter();\n    |                                ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     Box::new(Box::new([1, 2])).iter();\n@@ -176,7 +176,7 @@ LL |     Box::new(Box::new(big)).into_iter();\n    |                             ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     Box::new(Box::new(big)).iter();\n@@ -193,7 +193,7 @@ LL |     Box::new(Box::new([0u8; 33])).into_iter();\n    |                                   ^^^^^^^^^\n    |\n    = warning: this changes meaning in Rust 2021\n-   = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/IntoIterator-for-arrays.html>\n help: use `.iter()` instead of `.into_iter()` to avoid ambiguity\n    |\n LL |     Box::new(Box::new([0u8; 33])).iter();"}, {"sha": "3477b01b6b567374283133ef3028ee8826973a16", "filename": "src/test/ui/lint/bare-trait-objects-path.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fbare-trait-objects-path.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -12,7 +12,7 @@ LL |     Dyn::func();\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/bare-trait-objects-path.rs:17:5\n@@ -21,7 +21,7 @@ LL |     ::Dyn::func();\n    |     ^^^^^ help: use `dyn`: `<dyn (::Dyn)>`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/bare-trait-objects-path.rs:20:5\n@@ -30,7 +30,7 @@ LL |     Dyn::CONST;\n    |     ^^^ help: use `dyn`: `<dyn Dyn>`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: aborting due to previous error; 3 warnings emitted\n "}, {"sha": "c1ebdb9514bd479f8fefa7459ee3f88bccf67b92", "filename": "src/test/ui/lint/force-warn/force-lint-in-allowed-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-lint-in-allowed-group.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -6,7 +6,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |\n    = note: requested on the command line with `--force-warn bare-trait-objects`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: 1 warning emitted\n "}, {"sha": "8514956af743ef3852c2d7434c4f65e3353ab4da", "filename": "src/test/ui/lint/force-warn/force-warn-cap-lints-allow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-cap-lints-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-cap-lints-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-cap-lints-allow.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -6,7 +6,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |\n    = note: requested on the command line with `--force-warn bare-trait-objects`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: 1 warning emitted\n "}, {"sha": "3a0227463e69a564568b9393661df21667b5517e", "filename": "src/test/ui/lint/force-warn/force-warn-cap-lints-warn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-cap-lints-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-cap-lints-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-cap-lints-warn.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -6,7 +6,7 @@ LL |         0...100 => true,\n    |\n    = note: `--force-warn ellipsis-inclusive-range-patterns` implied by `--force-warn rust-2021-compatibility`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: 1 warning emitted\n "}, {"sha": "29eba6d635f93848c21605743d8d9c8317666338", "filename": "src/test/ui/lint/force-warn/force-warn-group-allow-warning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group-allow-warning.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -6,7 +6,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |\n    = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: 1 warning emitted\n "}, {"sha": "54bee452cddad28621396e91c07f2c0d1a226fc4", "filename": "src/test/ui/lint/force-warn/force-warn-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-warn-group.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -6,7 +6,7 @@ LL | pub fn function(_x: Box<SomeTrait>) {}\n    |\n    = note: `--force-warn bare-trait-objects` implied by `--force-warn rust-2018-idioms`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: 1 warning emitted\n "}, {"sha": "91b8d2b5afc77e60078ca2863eb87dd2a1a060f9", "filename": "src/test/ui/lint/inclusive-range-pattern-syntax.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finclusive-range-pattern-syntax.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: `...` range patterns are deprecated\n   --> $DIR/inclusive-range-pattern-syntax.rs:16:9\n@@ -19,7 +19,7 @@ LL |         &1...2 => {}\n    |         ^^^^^^ help: use `..=` for an inclusive range: `&(1..=2)`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: 2 warnings emitted\n "}, {"sha": "9a5b8009f32cd095a36f49ad080dc976babbfd16", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(rust_2021_incompatible_or_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/or-patterns-macro-rules.html>\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n   --> $DIR/macro-or-patterns-back-compat.rs:13:23\n@@ -19,7 +19,7 @@ LL | macro_rules! bar { ($($x:pat)+ | $($y:pat)+) => {} }\n    |                       ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/or-patterns-macro-rules.html>\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n   --> $DIR/macro-or-patterns-back-compat.rs:19:21\n@@ -28,7 +28,7 @@ LL | macro_rules! ogg { ($x:pat | $y:pat_param) => {} }\n    |                     ^^^^^^ help: use pat_param to preserve semantics: `$x:pat_param`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/or-patterns-macro-rules.html>\n \n error: the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\n   --> $DIR/macro-or-patterns-back-compat.rs:23:26\n@@ -37,7 +37,7 @@ LL |     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n    |                          ^^^^^^^^ help: use pat_param to preserve semantics: `$pat:pat_param`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/or-patterns-macro-rules.html>\n \n error: aborting due to 4 previous errors\n "}, {"sha": "1a64b9a017d519546c8d33aac3b429ebccaa956f", "filename": "src/test/ui/parser/issue-68890-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -12,7 +12,7 @@ LL | type X<'a> = (?'a) +;\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error[E0224]: at least one trait is required for an object type\n   --> $DIR/issue-68890-2.rs:3:14"}, {"sha": "6f26f36e7631591aeb17451876e54f5089d351ff", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -35,7 +35,7 @@ LL | fn y<'a>(y: &mut 'a + Send) {\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-73568-lifetime-after-mut.rs:19:23\n@@ -44,7 +44,7 @@ LL |     let z = y as &mut 'a + Send;\n    |                       ^^ help: use `dyn`: `dyn 'a`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error[E0224]: at least one trait is required for an object type\n   --> $DIR/issue-73568-lifetime-after-mut.rs:14:18"}, {"sha": "876bfd389cb5dc8800e5e27572b60dce06de1dc6", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -12,7 +12,7 @@ LL |     m!('static);\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error[E0224]: at least one trait is required for an object type\n   --> $DIR/trait-object-macro-matcher.rs:11:8"}, {"sha": "762066825db29bb4e520ee4fadbb7245cf5b78c1", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -205,7 +205,7 @@ note: the lint level is defined here\n LL | #![deny(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:45:13\n@@ -214,7 +214,7 @@ LL |     if let 0...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:48:13\n@@ -223,7 +223,7 @@ LL |     if let X...3 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:51:13\n@@ -232,7 +232,7 @@ LL |     if let X...Y = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:54:16\n@@ -241,7 +241,7 @@ LL |     if let true...Y = 0 {}\n    |                ^^^ help: use `..=` for an inclusive range\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:57:13\n@@ -250,7 +250,7 @@ LL |     if let X...true = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:60:14\n@@ -259,7 +259,7 @@ LL |     if let .0...Y = 0 {}\n    |              ^^^ help: use `..=` for an inclusive range\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:64:13\n@@ -268,7 +268,7 @@ LL |     if let X... .0 = 0 {}\n    |             ^^^ help: use `..=` for an inclusive range\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:138:20\n@@ -280,7 +280,7 @@ LL |     mac2!(0, 1);\n    |     ------------ in this macro invocation\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n    = note: this error originates in the macro `mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0029]: only `char` and numeric types are allowed in range patterns"}, {"sha": "b39fe4646a3cc3fe5fc367128491b3a89b1cb628", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -24,7 +24,7 @@ LL |     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/trait-object-trait-parens.rs:13:16\n@@ -33,7 +33,7 @@ LL |     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn ?Sized + (for<'a> Trait<'a>) + (Obj)`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/trait-object-trait-parens.rs:18:16\n@@ -42,7 +42,7 @@ LL |     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn for<'a> Trait<'a> + (Obj) + (?Sized)`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:8:35"}, {"sha": "8af1a570253a2cb611e7325dcee79f3a76919f10", "filename": "src/test/ui/range/range-inclusive-pattern-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -16,7 +16,7 @@ note: the lint level is defined here\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "009273c74350b214d1b70725cfb53f5d81b61df4", "filename": "src/test/ui/range/range-inclusive-pattern-precedence2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-inclusive-pattern-precedence2.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -16,7 +16,7 @@ note: the lint level is defined here\n LL | #![warn(ellipsis_inclusive_range_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "09b51fe0568707684e4c7d9cd0edf748da12ad8d", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region-rev.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region-rev.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,8 +1,8 @@\n error[E0491]: in type `&'a Foo<'b>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-region-rev.rs:17:9\n+  --> $DIR/regions-outlives-nominal-type-region-rev.rs:17:20\n    |\n LL |         type Out = &'a Foo<'b>;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n   --> $DIR/regions-outlives-nominal-type-region-rev.rs:16:10"}, {"sha": "957a9d6dd3c1243876fc9547da9b2a09d6656fef", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-region.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,8 +1,8 @@\n error[E0491]: in type `&'a Foo<'b>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-region.rs:17:9\n+  --> $DIR/regions-outlives-nominal-type-region.rs:17:20\n    |\n LL |         type Out = &'a Foo<'b>;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n   --> $DIR/regions-outlives-nominal-type-region.rs:16:10"}, {"sha": "1589f93d90c8ea184b08b1bb5287292da796c0ad", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type-rev.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type-rev.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,8 +1,8 @@\n error[E0491]: in type `&'a Foo<&'b i32>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-type-rev.rs:17:9\n+  --> $DIR/regions-outlives-nominal-type-type-rev.rs:17:20\n    |\n LL |         type Out = &'a Foo<&'b i32>;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n   --> $DIR/regions-outlives-nominal-type-type-rev.rs:16:10"}, {"sha": "4bfaa1aac782aaa51dd9452cf3fca5e849e3419e", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-outlives-nominal-type-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-outlives-nominal-type-type.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,8 +1,8 @@\n error[E0491]: in type `&'a Foo<&'b i32>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-nominal-type-type.rs:17:9\n+  --> $DIR/regions-outlives-nominal-type-type.rs:17:20\n    |\n LL |         type Out = &'a Foo<&'b i32>;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                    ^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the impl at 16:10\n   --> $DIR/regions-outlives-nominal-type-type.rs:16:10"}, {"sha": "1b1a2f7b043b76ea150d981b883303598e6d81ad", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,18 +1,18 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-struct-not-wf.rs:13:5\n+  --> $DIR/regions-struct-not-wf.rs:13:16\n    |\n LL | impl<'a, T> Trait<'a, T> for usize {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a T;\n-   |     ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n+   |                ^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-struct-not-wf.rs:21:5\n+  --> $DIR/regions-struct-not-wf.rs:21:16\n    |\n LL | impl<'a, T> Trait<'a, T> for u32 {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = RefOk<'a, T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |                ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n note: ...that is required by this bound\n   --> $DIR/regions-struct-not-wf.rs:16:20\n@@ -21,10 +21,10 @@ LL | struct RefOk<'a, T:'a> {\n    |                    ^^\n \n error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-struct-not-wf.rs:25:5\n+  --> $DIR/regions-struct-not-wf.rs:25:16\n    |\n LL |     type Out = &'a &'b T;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime `'a` as defined on the impl at 24:6\n   --> $DIR/regions-struct-not-wf.rs:24:6"}, {"sha": "0a722baa185cd60c8722cf1a98f34ae91df603fa", "filename": "src/test/ui/rust-2021/future-prelude-collision-generic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-generic.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(rust_2021_prelude_collisions)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision-generic.rs:31:5\n@@ -19,7 +19,7 @@ LL |     Generic::<i32, i32>::from_iter(1);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<i32, i32> as MyFromIter>::from_iter`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision-generic.rs:34:5\n@@ -28,7 +28,7 @@ LL |     Generic::<_, _>::from_iter(1);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Generic::<_, _> as MyFromIter>::from_iter`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: 3 warnings emitted\n "}, {"sha": "fbda5d61f36dc070685b900b09c6e23ad381eb8a", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(rust_2021_prelude_collisions)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision-imported.rs:40:22\n@@ -19,7 +19,7 @@ LL |         let _: u32 = 3u8.try_into().unwrap();\n    |                      ^^^^^^^^^^^^^^ help: disambiguate the associated function: `crate::m::TryIntoU32::try_into(3u8)`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision-imported.rs:53:22\n@@ -28,7 +28,7 @@ LL |         let _: u32 = 3u8.try_into().unwrap();\n    |                      ^^^^^^^^^^^^^^ help: disambiguate the associated function: `super::m::TryIntoU32::try_into(3u8)`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: 3 warnings emitted\n "}, {"sha": "889e66de03f9ea541eb70c48437cf0148280e3ca", "filename": "src/test/ui/rust-2021/future-prelude-collision.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(rust_2021_prelude_collisions)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision.rs:61:13\n@@ -19,7 +19,7 @@ LL |     let _ = u32::try_from(3u8).unwrap();\n    |             ^^^^^^^^^^^^^ help: disambiguate the associated function: `<u32 as TryFromU8>::try_from`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait-associated function `from_iter` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision.rs:66:13\n@@ -28,7 +28,7 @@ LL |     let _ = <Vec<u8>>::from_iter(vec![1u8, 2, 3, 4, 5, 6].into_iter());\n    |             ^^^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<Vec<u8> as FromByteIterator>::from_iter`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision.rs:74:18\n@@ -37,7 +37,7 @@ LL |     let _: u32 = <_>::try_from(3u8).unwrap();\n    |                  ^^^^^^^^^^^^^ help: disambiguate the associated function: `<_ as TryFromU8>::try_from`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision.rs:79:18\n@@ -46,7 +46,7 @@ LL |     let _: u32 = (&3u8).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(*(&3u8))`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision.rs:84:18\n@@ -55,7 +55,7 @@ LL |     let _: u32 = 3.0.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(&3.0)`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait method `try_into` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision.rs:90:18\n@@ -64,7 +64,7 @@ LL |     let _: u32 = mut_ptr.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `TryIntoU32::try_into(mut_ptr as *const _)`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: trait-associated function `try_from` will become ambiguous in Rust 2021\n   --> $DIR/future-prelude-collision.rs:95:13\n@@ -73,7 +73,7 @@ LL |     let _ = U32Alias::try_from(3u8).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^ help: disambiguate the associated function: `<U32Alias as TryFromU8>::try_from`\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: 8 warnings emitted\n "}, {"sha": "e6ea28d718db81336adb489c4af9a558ccab5299", "filename": "src/test/ui/rust-2021/generic-type-collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(rust_2021_prelude_collisions)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: 1 warning emitted\n "}, {"sha": "77b4c385132816b2ec2d32daccd289a2e3b005c3", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(rust_2021_prelude_collisions)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/prelude.html>\n \n warning: 1 warning emitted\n "}, {"sha": "dc1152679b92094f323edf788a85cc1c62976d59", "filename": "src/test/ui/rust-2021/reserved-prefixes-migration.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![warn(rust_2021_prefixes_incompatible_syntax)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #84978 <https://github.com/rust-lang/rust/issues/84978>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/reserving-syntax.html>\n help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n LL -     m2!(z\"hey\");\n@@ -24,7 +24,7 @@ LL |     m2!(prefix\"hey\");\n    |         ^^^^^^ unknown prefix\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #84978 <https://github.com/rust-lang/rust/issues/84978>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/reserving-syntax.html>\n help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n LL -     m2!(prefix\"hey\");\n@@ -38,7 +38,7 @@ LL |     m3!(hey#123);\n    |         ^^^ unknown prefix\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #84978 <https://github.com/rust-lang/rust/issues/84978>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/reserving-syntax.html>\n help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n LL -     m3!(hey#123);\n@@ -52,7 +52,7 @@ LL |     m3!(hey#hey);\n    |         ^^^ unknown prefix\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #84978 <https://github.com/rust-lang/rust/issues/84978>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/reserving-syntax.html>\n help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n LL -     m3!(hey#hey);\n@@ -66,7 +66,7 @@ LL |     #name = #kind#value\n    |              ^^^^ unknown prefix\n    |\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #84978 <https://github.com/rust-lang/rust/issues/84978>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/reserving-syntax.html>\n help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n LL -     #name = #kind#value"}, {"sha": "10a39a4914770d1d7890b2589adaf81cb694716f", "filename": "src/test/ui/specialization/issue-51892.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,8 +1,8 @@\n error: unconstrained generic constant\n-  --> $DIR/issue-51892.rs:15:5\n+  --> $DIR/issue-51892.rs:15:17\n    |\n LL |     type Type = [u8; std::mem::size_of::<<T as Trait>::Type>()];\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<<T as Trait>::Type>()]:`\n "}, {"sha": "bb487920e3bb689ca2ad23c727aeb105fb2fa1f1", "filename": "src/test/ui/suggestions/issue-61963.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(bare_trait_objects)]\n    |         ^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n@@ -19,7 +19,7 @@ LL | pub struct Foo {\n    | ^^^ help: use `dyn`: `dyn pub`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0bbf1bffda5101e8072e6de59ed3810a21a2208c", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -6,7 +6,7 @@ LL | fn foo(_x: Foo + Send) {\n    |\n    = note: `#[warn(bare_trait_objects)]` on by default\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error[E0277]: the size for values of type `(dyn Foo + Send + 'static)` cannot be known at compilation time\n   --> $DIR/not-on-bare-trait.rs:7:8"}, {"sha": "272a87535d2508126688c102df0b8cc8c10f0197", "filename": "src/test/ui/wf/hir-wf-check-erase-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `&T` is not an iterator\n-  --> $DIR/hir-wf-check-erase-regions.rs:7:5\n+  --> $DIR/hir-wf-check-erase-regions.rs:7:21\n    |\n LL |     type IntoIter = std::iter::Flatten<std::slice::Iter<'a, T>>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&T` is not an iterator\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&T` is not an iterator\n    |\n   ::: $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n    |"}, {"sha": "3f324190b7b6bcd1fff6b40646c5feb5c361342f", "filename": "src/test/ui/wf/wf-impl-associated-type-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,10 +1,10 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-impl-associated-type-region.rs:10:5\n+  --> $DIR/wf-impl-associated-type-region.rs:10:16\n    |\n LL | impl<'a, T> Foo<'a> for T {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Bar = &'a T;\n-   |     ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n+   |                ^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n \n error: aborting due to previous error\n "}, {"sha": "68c1e9091d753d653d07e8c165a4be0ab1b125ec", "filename": "src/test/ui/wf/wf-outlives-ty-in-fn-or-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,18 +1,18 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:9:5\n+  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:9:16\n    |\n LL | impl<'a, T> Trait<'a, T> for usize {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a fn(T);\n-   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'a fn(T)` does not outlive the data it points at\n+   |                ^^^^^^^^^ ...so that the reference type `&'a fn(T)` does not outlive the data it points at\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:5\n+  --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:16\n    |\n LL | impl<'a, T> Trait<'a, T> for u32 {\n    |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a dyn Baz<T>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'a (dyn Baz<T> + 'a)` does not outlive the data it points at\n+   |                ^^^^^^^^^^^^^^ ...so that the reference type `&'a (dyn Baz<T> + 'a)` does not outlive the data it points at\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6e2cc8aba4b72d104a97dc891cc3438978223a02", "filename": "src/test/ui/wf/wf-trait-associated-type-region.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-trait-associated-type-region.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -1,8 +1,8 @@\n error[E0309]: the associated type `<Self as SomeTrait<'a>>::Type1` may not live long enough\n-  --> $DIR/wf-trait-associated-type-region.rs:9:5\n+  --> $DIR/wf-trait-associated-type-region.rs:9:18\n    |\n LL |     type Type2 = &'a Self::Type1;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<Self as SomeTrait<'a>>::Type1: 'a`...\n    = note: ...so that the reference type `&'a <Self as SomeTrait<'a>>::Type1` does not outlive the data it points at"}, {"sha": "9a89047f072777cd7f6bf3f5588083be74b7f6b0", "filename": "src/tools/clippy/tests/ui/crashes/ice-3969.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-3969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-3969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-3969.stderr?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -6,7 +6,7 @@ LL |     for<'a> Dst<A + 'a>: Sized,\n    |\n    = note: `-D bare-trait-objects` implied by `-D warnings`\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/ice-3969.rs:27:16\n@@ -15,7 +15,7 @@ LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n    |                ^ help: use `dyn`: `dyn A`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/ice-3969.rs:27:57\n@@ -24,7 +24,7 @@ LL |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n    |                                                         ^ help: use `dyn`: `dyn A`\n    |\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n-   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n \n error: aborting due to 3 previous errors\n "}, {"sha": "bb9cd00f3f5829196df0a2a93d12274d82702f8a", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/4498e300e41f47c75abe4e49ec91ae949aaeea5f/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=4498e300e41f47c75abe4e49ec91ae949aaeea5f", "patch": "@@ -20,15 +20,17 @@ function getNextStep(content, pos, stop) {\n // will blow up. Template strings are not tested and might also be\n // broken.\n function extractFunction(content, functionName) {\n-    var indent = 0;\n+    var level = 0;\n     var splitter = \"function \" + functionName + \"(\";\n+    var stop;\n+    var pos, start;\n \n     while (true) {\n-        var start = content.indexOf(splitter);\n+        start = content.indexOf(splitter);\n         if (start === -1) {\n             break;\n         }\n-        var pos = start;\n+        pos = start;\n         while (pos < content.length && content[pos] !== ')') {\n             pos += 1;\n         }\n@@ -44,30 +46,33 @@ function extractFunction(content, functionName) {\n         }\n         while (pos < content.length) {\n             // Eat single-line comments\n-            if (content[pos] === '/' && pos > 0 && content[pos-1] === '/') {\n+            if (content[pos] === '/' && pos > 0 && content[pos - 1] === '/') {\n                 do {\n                     pos += 1;\n                 } while (pos < content.length && content[pos] !== '\\n');\n \n+            // Eat multiline comment.\n+            } else if (content[pos] === '*' && pos > 0 && content[pos - 1] === '/') {\n+                do {\n+                    pos += 1;\n+                } while (pos < content.length && content[pos] !== '/' && content[pos - 1] !== '*');\n+\n             // Eat quoted strings\n             } else if (content[pos] === '\"' || content[pos] === \"'\" || content[pos] === \"`\") {\n-                var stop = content[pos];\n-                var is_escaped = false;\n+                stop = content[pos];\n                 do {\n                     if (content[pos] === '\\\\') {\n-                        pos += 2;\n-                    } else {\n                         pos += 1;\n                     }\n-                } while (pos < content.length &&\n-                         (content[pos] !== stop || content[pos - 1] === '\\\\'));\n+                    pos += 1;\n+                } while (pos < content.length && content[pos] !== stop);\n \n-            // Otherwise, check for indent\n+            // Otherwise, check for block level.\n             } else if (content[pos] === '{') {\n-                indent += 1;\n+                level += 1;\n             } else if (content[pos] === '}') {\n-                indent -= 1;\n-                if (indent === 0) {\n+                level -= 1;\n+                if (level === 0) {\n                     return content.slice(start, pos + 1);\n                 }\n             }"}]}