{"sha": "656edbf0f041d83cd564c5ae742c7720f005b005", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NmVkYmYwZjA0MWQ4M2NkNTY0YzVhZTc0MmM3NzIwZjAwNWIwMDU=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2017-11-17T13:21:46Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-12-27T03:34:09Z"}, "message": "Use std time", "tree": {"sha": "d9cead4d647f897bb6b5ccf44709314f93fe4b5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9cead4d647f897bb6b5ccf44709314f93fe4b5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/656edbf0f041d83cd564c5ae742c7720f005b005", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/656edbf0f041d83cd564c5ae742c7720f005b005", "html_url": "https://github.com/rust-lang/rust/commit/656edbf0f041d83cd564c5ae742c7720f005b005", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/656edbf0f041d83cd564c5ae742c7720f005b005/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc356ffef71ef8cc679c414542ae9efcdf88cf52", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc356ffef71ef8cc679c414542ae9efcdf88cf52", "html_url": "https://github.com/rust-lang/rust/commit/dc356ffef71ef8cc679c414542ae9efcdf88cf52"}], "stats": {"total": 52, "additions": 18, "deletions": 34}, "files": [{"sha": "672c5f59da3377fae2f8e0611793e4fc8fd946d5", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/656edbf0f041d83cd564c5ae742c7720f005b005/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/656edbf0f041d83cd564c5ae742c7720f005b005/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=656edbf0f041d83cd564c5ae742c7720f005b005", "patch": "@@ -159,11 +159,6 @@ name = \"quote\"\n version = \"0.3.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"redox_syscall\"\n-version = \"0.1.32\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"regex\"\n version = \"0.2.3\"\n@@ -203,7 +198,6 @@ dependencies = [\n  \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"time 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -294,17 +288,6 @@ dependencies = [\n  \"unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"time\"\n-version = \"0.1.38\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"redox_syscall 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"toml\"\n version = \"0.4.5\"\n@@ -374,7 +357,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n \"checksum num-traits 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cacfcab5eb48250ee7d0c7896b51a2c5eec99c1feea5f32025635f5ae4b00070\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n-\"checksum redox_syscall 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab105df655884ede59d45b7070c8a65002d921461ee813a024558ca16030eea0\"\n \"checksum regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac6ab4e9218ade5b423358bbd2567d1617418403c7a512603630181813316322\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n \"checksum rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aee45432acc62f7b9a108cc054142dac51f979e69e71ddce7d6fc7adf29e817e\"\n@@ -388,7 +370,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n \"checksum term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa63644f74ce96fbeb9b794f66aff2a52d601cbd5e80f4b97123e3899f4570f1\"\n \"checksum thread_local 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"279ef31c19ededf577bfd12dfae728040a21f635b06a24cd670ff510edd38963\"\n-\"checksum time 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d5d788d3aa77bc0ef3e9621256885555368b47bd495c13dd2e7413c89f845520\"\n \"checksum toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7540f4ffc193e0d3c94121edb19b055670d369f77d5804db11ae053a45b6e7e\"\n \"checksum unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a8083c594e02b8ae1654ae26f0ade5158b119bd88ad0e8227a5d8fcd72407946\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\""}, {"sha": "a0f974c661443cbc1898f977b9c8d8331eea2321", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/656edbf0f041d83cd564c5ae742c7720f005b005/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/656edbf0f041d83cd564c5ae742c7720f005b005/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=656edbf0f041d83cd564c5ae742c7720f005b005", "patch": "@@ -44,7 +44,6 @@ env_logger = \"0.4\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.4\"\n-time = \"0.1\"\n \n [target.'cfg(unix)'.dependencies]\n libc = \"0.2.11\""}, {"sha": "58735d539caa817fa9d4efdea14526c0ae4a788e", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/656edbf0f041d83cd564c5ae742c7720f005b005/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656edbf0f041d83cd564c5ae742c7720f005b005/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=656edbf0f041d83cd564c5ae742c7720f005b005", "patch": "@@ -23,7 +23,6 @@ extern crate serde_derive;\n extern crate serde_json;\n extern crate syntax;\n extern crate term;\n-extern crate time;\n extern crate unicode_segmentation;\n \n use std::collections::HashMap;\n@@ -32,6 +31,7 @@ use std::io::{self, stdout, Write};\n use std::iter::repeat;\n use std::path::PathBuf;\n use std::rc::Rc;\n+use std::time::Duration;\n \n use errors::{DiagnosticBuilder, Handler};\n use errors::emitter::{ColorConfig, EmitterWriter};\n@@ -655,10 +655,14 @@ pub fn format_input<T: Write>(\n     summary.mark_format_time();\n \n     if config.verbose() {\n+        fn duration_to_f32(d: Duration) -> f32 {\n+            d.as_secs() as f32 + d.subsec_nanos() as f32 / 1_000_000_000f32\n+        }\n+\n         println!(\n-            \"Spent {} in the parsing phase, and {} in the formatting phase\",\n-            summary.get_parse_time().unwrap(),\n-            summary.get_format_time().unwrap(),\n+            \"Spent {0:.3} secs in the parsing phase, and {1:.3} secs in the formatting phase\",\n+            duration_to_f32(summary.get_parse_time().unwrap()),\n+            duration_to_f32(summary.get_format_time().unwrap()),\n         );\n     }\n "}, {"sha": "3e339fa4469f5589209d758c822a168314203a41", "filename": "src/summary.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/656edbf0f041d83cd564c5ae742c7720f005b005/src%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/656edbf0f041d83cd564c5ae742c7720f005b005/src%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsummary.rs?ref=656edbf0f041d83cd564c5ae742c7720f005b005", "patch": "@@ -1,4 +1,4 @@\n-use time::{precise_time_ns, Duration};\n+use std::time::{Duration, Instant};\n use std::default::Default;\n \n #[must_use]\n@@ -33,8 +33,8 @@ impl Summary {\n     pub fn get_parse_time(&self) -> Option<Duration> {\n         match self.timer {\n             Timer::DoneParsing(init, parse_time) | Timer::DoneFormatting(init, parse_time, _) => {\n-                // This should never underflow since `precise_time_ns()` guarantees monotonicity.\n-                Some(Duration::nanoseconds((parse_time - init) as i64))\n+                // This should never underflow since `Instant::now()` guarantees monotonicity.\n+                Some(parse_time.duration_since(init))\n             }\n             Timer::Initialized(..) => None,\n         }\n@@ -45,7 +45,7 @@ impl Summary {\n     pub fn get_format_time(&self) -> Option<Duration> {\n         match self.timer {\n             Timer::DoneFormatting(_init, parse_time, format_time) => {\n-                Some(Duration::nanoseconds((format_time - parse_time) as i64))\n+                Some(format_time.duration_since(parse_time))\n             }\n             Timer::DoneParsing(..) | Timer::Initialized(..) => None,\n         }\n@@ -104,29 +104,29 @@ impl Summary {\n \n #[derive(Clone, Copy, Debug)]\n enum Timer {\n-    Initialized(u64),\n-    DoneParsing(u64, u64),\n-    DoneFormatting(u64, u64, u64),\n+    Initialized(Instant),\n+    DoneParsing(Instant, Instant),\n+    DoneFormatting(Instant, Instant, Instant),\n }\n \n impl Default for Timer {\n     fn default() -> Self {\n-        Timer::Initialized(precise_time_ns())\n+        Timer::Initialized(Instant::now())\n     }\n }\n \n impl Timer {\n     fn done_parsing(self) -> Self {\n         match self {\n-            Timer::Initialized(init_time) => Timer::DoneParsing(init_time, precise_time_ns()),\n+            Timer::Initialized(init_time) => Timer::DoneParsing(init_time, Instant::now()),\n             _ => panic!(\"Timer can only transition to DoneParsing from Initialized state\"),\n         }\n     }\n \n     fn done_formatting(self) -> Self {\n         match self {\n             Timer::DoneParsing(init_time, parse_time) => {\n-                Timer::DoneFormatting(init_time, parse_time, precise_time_ns())\n+                Timer::DoneFormatting(init_time, parse_time, Instant::now())\n             }\n             _ => panic!(\"Timer can only transition to DoneFormatting from DoneParsing state\"),\n         }"}]}