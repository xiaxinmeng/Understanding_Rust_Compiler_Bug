{"sha": "3e9bcea018d179bf361cbaee04e2db506ffac4a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlOWJjZWEwMThkMTc5YmYzNjFjYmFlZTA0ZTJkYjUwNmZmYWM0YTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T01:15:13Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:26Z"}, "message": "librustc: Remove `ty_param_defs` from the type context", "tree": {"sha": "e042a1262e7d5eb54d6a8d7e8fbd369ebdf272e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e042a1262e7d5eb54d6a8d7e8fbd369ebdf272e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e9bcea018d179bf361cbaee04e2db506ffac4a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9bcea018d179bf361cbaee04e2db506ffac4a9", "html_url": "https://github.com/rust-lang/rust/commit/3e9bcea018d179bf361cbaee04e2db506ffac4a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e9bcea018d179bf361cbaee04e2db506ffac4a9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d803a0f7334a5283e762b1b32dc12d50871ba7fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d803a0f7334a5283e762b1b32dc12d50871ba7fd", "html_url": "https://github.com/rust-lang/rust/commit/d803a0f7334a5283e762b1b32dc12d50871ba7fd"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "724499bd90fc595fc27db420309bdd51cd850a32", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e9bcea018d179bf361cbaee04e2db506ffac4a9/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9bcea018d179bf361cbaee04e2db506ffac4a9/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=3e9bcea018d179bf361cbaee04e2db506ffac4a9", "patch": "@@ -963,8 +963,11 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     }\n \n     {\n-        let r = tcx.ty_param_defs.find(&id);\n-        for &type_param_def in r.iter() {\n+        let r = {\n+            let ty_param_defs = tcx.ty_param_defs.borrow();\n+            ty_param_defs.get().find(&id).map(|def| *def)\n+        };\n+        for type_param_def in r.iter() {\n             ebml_w.tag(c::tag_table_param_defs, |ebml_w| {\n                 ebml_w.id(id);\n                 ebml_w.tag(c::tag_table_val, |ebml_w| {\n@@ -1247,7 +1250,10 @@ fn decode_side_tables(xcx: @ExtendedDecodeContext,\n                     }\n                     c::tag_table_param_defs => {\n                         let bounds = val_dsr.read_type_param_def(xcx);\n-                        dcx.tcx.ty_param_defs.insert(id, bounds);\n+                        let mut ty_param_defs = dcx.tcx\n+                                                   .ty_param_defs\n+                                                   .borrow_mut();\n+                        ty_param_defs.get().insert(id, bounds);\n                     }\n                     c::tag_table_method_map => {\n                         dcx.maps.method_map.insert("}, {"sha": "92abefe31409d3d4597f7956f0c4a1c4dca545ef", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e9bcea018d179bf361cbaee04e2db506ffac4a9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9bcea018d179bf361cbaee04e2db506ffac4a9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3e9bcea018d179bf361cbaee04e2db506ffac4a9", "patch": "@@ -311,7 +311,7 @@ struct ctxt_ {\n     tc_cache: RefCell<HashMap<uint, TypeContents>>,\n     ast_ty_to_ty_cache: RefCell<HashMap<NodeId, ast_ty_to_ty_cache_entry>>,\n     enum_var_cache: RefCell<HashMap<DefId, @~[@VariantInfo]>>,\n-    ty_param_defs: @mut HashMap<ast::NodeId, TypeParameterDef>,\n+    ty_param_defs: RefCell<HashMap<ast::NodeId, TypeParameterDef>>,\n     adjustments: @mut HashMap<ast::NodeId, @AutoAdjustment>,\n     normalized_cache: @mut HashMap<t, t>,\n     lang_items: middle::lang_items::LanguageItems,\n@@ -1001,7 +1001,7 @@ pub fn mk_ctxt(s: session::Session,\n         trait_method_def_ids: RefCell::new(HashMap::new()),\n         trait_methods_cache: RefCell::new(HashMap::new()),\n         impl_trait_cache: RefCell::new(HashMap::new()),\n-        ty_param_defs: @mut HashMap::new(),\n+        ty_param_defs: RefCell::new(HashMap::new()),\n         adjustments: @mut HashMap::new(),\n         normalized_cache: new_ty_hash(),\n         lang_items: lang_items,\n@@ -2123,7 +2123,8 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 // def-id.\n                 assert_eq!(p.def_id.crate, ast::LOCAL_CRATE);\n \n-                let tp_def = cx.ty_param_defs.get(&p.def_id.node);\n+                let ty_param_defs = cx.ty_param_defs.borrow();\n+                let tp_def = ty_param_defs.get().get(&p.def_id.node);\n                 kind_bounds_to_contents(cx,\n                                         tp_def.bounds.builtin_bounds,\n                                         tp_def.bounds.trait_bounds)\n@@ -2568,7 +2569,8 @@ pub fn type_is_sized(cx: ctxt, ty: ty::t) -> bool {\n     match get(ty).sty {\n         // FIXME(#6308) add trait, vec, str, etc here.\n         ty_param(p) => {\n-            let param_def = cx.ty_param_defs.get(&p.def_id.node);\n+            let ty_param_defs = cx.ty_param_defs.borrow();\n+            let param_def = ty_param_defs.get().get(&p.def_id.node);\n             if param_def.bounds.builtin_bounds.contains_elem(BoundSized) {\n                 return true;\n             }"}, {"sha": "992b46af75a7d4226c4503f01d628011147773fc", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e9bcea018d179bf361cbaee04e2db506ffac4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9bcea018d179bf361cbaee04e2db506ffac4a9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=3e9bcea018d179bf361cbaee04e2db506ffac4a9", "patch": "@@ -892,8 +892,12 @@ pub fn ty_generics(ccx: &CrateCtxt,\n                                          def_id: local_def(l.id) }\n             }).collect(),\n         type_param_defs: @generics.ty_params.mapi_to_vec(|offset, param| {\n-            match ccx.tcx.ty_param_defs.find(&param.id) {\n-                Some(&def) => def,\n+            let existing_def_opt = {\n+                let ty_param_defs = ccx.tcx.ty_param_defs.borrow();\n+                ty_param_defs.get().find(&param.id).map(|def| *def)\n+            };\n+            match existing_def_opt {\n+                Some(def) => def,\n                 None => {\n                     let param_ty = ty::param_ty {idx: base_index + offset,\n                                                  def_id: local_def(param.id)};\n@@ -904,7 +908,11 @@ pub fn ty_generics(ccx: &CrateCtxt,\n                         bounds: bounds\n                     };\n                     debug!(\"def for param: {}\", def.repr(ccx.tcx));\n-                    ccx.tcx.ty_param_defs.insert(param.id, def);\n+\n+                    let mut ty_param_defs = ccx.tcx\n+                                               .ty_param_defs\n+                                               .borrow_mut();\n+                    ty_param_defs.get().insert(param.id, def);\n                     def\n                 }\n             }"}, {"sha": "ac88018a3c41f8e46234629610bce2f9c3f23f23", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e9bcea018d179bf361cbaee04e2db506ffac4a9/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e9bcea018d179bf361cbaee04e2db506ffac4a9/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=3e9bcea018d179bf361cbaee04e2db506ffac4a9", "patch": "@@ -472,11 +472,10 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n       ty_infer(infer_ty) => infer_ty.to_str(),\n       ty_err => ~\"[type error]\",\n       ty_param(param_ty {idx: id, def_id: did}) => {\n-          let param_def = cx.ty_param_defs.find(&did.node);\n+          let ty_param_defs = cx.ty_param_defs.borrow();\n+          let param_def = ty_param_defs.get().find(&did.node);\n           let ident = match param_def {\n-              Some(def) => {\n-                  cx.sess.str_of(def.ident).to_owned()\n-              }\n+              Some(def) => cx.sess.str_of(def.ident).to_owned(),\n               None => {\n                   // This should not happen...\n                   format!(\"BUG[{:?}]\", id)"}]}