{"sha": "2a434286a96d61e9f55a3144004beec48206bb29", "node_id": "C_kwDOAAsO6NoAKDJhNDM0Mjg2YTk2ZDYxZTlmNTVhMzE0NDAwNGJlZWM0ODIwNmJiMjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-19T15:40:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-19T15:40:04Z"}, "message": "Auto merge of #104607 - matthiaskrgr:rollup-9s589me, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #103117 (Use `IsTerminal` in place of `atty`)\n - #103969 (Partial support for running UI tests with `download-rustc`)\n - #103989 (Fix build of std for thumbv7a-pc-windows-msvc)\n - #104076 (fix sysroot issue which appears for ci downloaded rustc)\n - #104469 (Make \"long type\" printing type aware and trim types in E0275)\n - #104497 (detect () to avoid redundant <> suggestion for type)\n - #104577 (Don't focus on notable trait parent when hiding it)\n - #104587 (Update cargo)\n - #104593 (Improve spans for RPITIT object-safety errors)\n - #104604 (Migrate top buttons style to CSS variables)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3d4039fc786f07f1da07322c110b258909d78c18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d4039fc786f07f1da07322c110b258909d78c18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a434286a96d61e9f55a3144004beec48206bb29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a434286a96d61e9f55a3144004beec48206bb29", "html_url": "https://github.com/rust-lang/rust/commit/2a434286a96d61e9f55a3144004beec48206bb29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a434286a96d61e9f55a3144004beec48206bb29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62c627c7a3a9b3e193a5ae6e1ec7348bc5136301", "url": "https://api.github.com/repos/rust-lang/rust/commits/62c627c7a3a9b3e193a5ae6e1ec7348bc5136301", "html_url": "https://github.com/rust-lang/rust/commit/62c627c7a3a9b3e193a5ae6e1ec7348bc5136301"}, {"sha": "f69f4cb19cb315537b40468d061579f43b62dd8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f69f4cb19cb315537b40468d061579f43b62dd8f", "html_url": "https://github.com/rust-lang/rust/commit/f69f4cb19cb315537b40468d061579f43b62dd8f"}], "stats": {"total": 714, "additions": 488, "deletions": 226}, "files": [{"sha": "87a4124e7db0174d70b27a35d209d59042d5cdbe", "filename": "Cargo.lock", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -307,6 +307,7 @@ dependencies = [\n  \"glob\",\n  \"hex 0.4.2\",\n  \"home\",\n+ \"http-auth\",\n  \"humantime 2.0.1\",\n  \"ignore\",\n  \"im-rc\",\n@@ -349,11 +350,11 @@ dependencies = [\n \n [[package]]\n name = \"cargo-credential\"\n-version = \"0.1.0\"\n+version = \"0.2.0\"\n \n [[package]]\n name = \"cargo-credential-1password\"\n-version = \"0.1.0\"\n+version = \"0.2.0\"\n dependencies = [\n  \"cargo-credential\",\n  \"serde\",\n@@ -362,15 +363,15 @@ dependencies = [\n \n [[package]]\n name = \"cargo-credential-macos-keychain\"\n-version = \"0.1.0\"\n+version = \"0.2.0\"\n dependencies = [\n  \"cargo-credential\",\n  \"security-framework\",\n ]\n \n [[package]]\n name = \"cargo-credential-wincred\"\n-version = \"0.1.0\"\n+version = \"0.2.0\"\n dependencies = [\n  \"cargo-credential\",\n  \"winapi\",\n@@ -1692,6 +1693,15 @@ dependencies = [\n  \"syn\",\n ]\n \n+[[package]]\n+name = \"http-auth\"\n+version = \"0.1.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c0b40b39d66c28829a0cf4d09f7e139ff8201f7500a5083732848ed3b4b4d850\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n [[package]]\n name = \"humantime\"\n version = \"1.3.0\"\n@@ -3535,7 +3545,6 @@ name = \"rustc_errors\"\n version = \"0.0.0\"\n dependencies = [\n  \"annotate-snippets\",\n- \"atty\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\",\n  \"rustc_data_structures\",\n@@ -3834,7 +3843,6 @@ dependencies = [\n name = \"rustc_log\"\n version = \"0.0.0\"\n dependencies = [\n- \"atty\",\n  \"rustc_span\",\n  \"tracing\",\n  \"tracing-subscriber\",\n@@ -4389,7 +4397,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"arrayvec\",\n  \"askama\",\n- \"atty\",\n  \"expect-test\",\n  \"itertools\",\n  \"minifier\","}, {"sha": "b90e0962ce6ad05285f2980ab8ff0d4df4b64271", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -62,7 +62,7 @@ impl<'mir, 'tcx> ConstCx<'mir, 'tcx> {\n     }\n \n     fn is_async(&self) -> bool {\n-        self.tcx.asyncness(self.def_id()) == hir::IsAsync::Async\n+        self.tcx.asyncness(self.def_id()).is_async()\n     }\n }\n "}, {"sha": "8a712cec85211b0a9c1936c83b586350a74537dd", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -5,6 +5,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(is_terminal)]\n #![feature(once_cell)]\n #![feature(decl_macro)]\n #![recursion_limit = \"256\"]\n@@ -27,7 +28,6 @@ use rustc_feature::find_gated_cfg;\n use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n-use rustc_log::stdout_isatty;\n use rustc_metadata::locator;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n@@ -48,7 +48,7 @@ use std::default::Default;\n use std::env;\n use std::ffi::OsString;\n use std::fs;\n-use std::io::{self, Read, Write};\n+use std::io::{self, IsTerminal, Read, Write};\n use std::panic::{self, catch_unwind};\n use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n@@ -515,7 +515,7 @@ fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {\n                 }\n                 text.push('\\n');\n             }\n-            if stdout_isatty() {\n+            if io::stdout().is_terminal() {\n                 show_content_with_pager(&text);\n             } else {\n                 print!(\"{}\", text);"}, {"sha": "dee7a31ec2028287b06304fdb3b0b68f377a631e", "filename": "compiler/rustc_errors/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2FCargo.toml?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -18,7 +18,6 @@ rustc_target = { path = \"../rustc_target\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n unicode-width = \"0.1.4\"\n-atty = \"0.2\"\n termcolor = \"1.0\"\n annotate-snippets = \"0.9\"\n termize = \"0.1.1\""}, {"sha": "bc136aea44d4cf59a97f30c8e8e5cdc89dab565a", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -28,8 +28,8 @@ use rustc_error_messages::FluentArgs;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use std::borrow::Cow;\n use std::cmp::{max, min, Reverse};\n-use std::io;\n use std::io::prelude::*;\n+use std::io::{self, IsTerminal};\n use std::iter;\n use std::path::Path;\n use termcolor::{Ansi, BufferWriter, ColorChoice, ColorSpec, StandardStream};\n@@ -619,14 +619,14 @@ impl ColorConfig {\n     fn to_color_choice(self) -> ColorChoice {\n         match self {\n             ColorConfig::Always => {\n-                if atty::is(atty::Stream::Stderr) {\n+                if io::stderr().is_terminal() {\n                     ColorChoice::Always\n                 } else {\n                     ColorChoice::AlwaysAnsi\n                 }\n             }\n             ColorConfig::Never => ColorChoice::Never,\n-            ColorConfig::Auto if atty::is(atty::Stream::Stderr) => ColorChoice::Auto,\n+            ColorConfig::Auto if io::stderr().is_terminal() => ColorChoice::Auto,\n             ColorConfig::Auto => ColorChoice::Never,\n         }\n     }"}, {"sha": "f3f1c7534b0a305c816b16fd1d89595044693e2b", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -5,6 +5,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n+#![feature(is_terminal)]\n #![feature(adt_const_params)]\n #![feature(let_chains)]\n #![feature(never_type)]"}, {"sha": "e0a3864506548f186e95c15387f8b7f7526ba1f0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -2720,6 +2720,12 @@ pub enum IsAsync {\n     NotAsync,\n }\n \n+impl IsAsync {\n+    pub fn is_async(self) -> bool {\n+        self == IsAsync::Async\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, Encodable, Decodable, HashStable_Generic)]\n pub enum Defaultness {\n     Default { has_value: bool },"}, {"sha": "e68df228c6b5186ae13871f1d88eca4c4afbae3f", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -684,9 +684,7 @@ fn report_trait_method_mismatch<'tcx>(\n                 // Suggestion to change output type. We do not suggest in `async` functions\n                 // to avoid complex logic or incorrect output.\n                 match tcx.hir().expect_impl_item(impl_m.def_id.expect_local()).kind {\n-                    ImplItemKind::Fn(ref sig, _)\n-                        if sig.header.asyncness == hir::IsAsync::NotAsync =>\n-                    {\n+                    ImplItemKind::Fn(ref sig, _) if !sig.header.asyncness.is_async() => {\n                         let msg = \"change the output type to match the trait\";\n                         let ap = Applicability::MachineApplicable;\n                         match sig.decl.output {"}, {"sha": "9a66e73d9c2aa1838f7d7342d91b56ee73781d13", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1918,12 +1918,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         | ty::Str\n                         | ty::Projection(_)\n                         | ty::Param(_) => format!(\"{deref_ty}\"),\n-                        // we need to test something like  <&[_]>::len\n+                        // we need to test something like  <&[_]>::len or <(&[u32])>::len\n                         // and Vec::function();\n-                        // <&[_]>::len doesn't need an extra \"<>\" between\n+                        // <&[_]>::len or <&[u32]>::len doesn't need an extra \"<>\" between\n                         // but for Adt type like Vec::function()\n                         // we would suggest <[_]>::function();\n-                        _ if self.tcx.sess.source_map().span_wrapped_by_angle_bracket(ty.span)  => format!(\"{deref_ty}\"),\n+                        _ if self.tcx.sess.source_map().span_wrapped_by_angle_or_parentheses(ty.span)  => format!(\"{deref_ty}\"),\n                         _ => format!(\"<{deref_ty}>\"),\n                     };\n                     err.span_suggestion_verbose("}, {"sha": "3c50827c1abc33abba077405029d7a91aaa61e2c", "filename": "compiler/rustc_log/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_log%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_log%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2FCargo.toml?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -4,7 +4,6 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [dependencies]\n-atty = \"0.2\"\n tracing = \"0.1.28\"\n tracing-subscriber = { version = \"0.3.3\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n tracing-tree = \"0.2.0\""}, {"sha": "ddf29c488c933284433fd2f63376c2d7367e28cf", "filename": "compiler/rustc_log/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_log%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_log%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_log%2Fsrc%2Flib.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -40,10 +40,11 @@\n \n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n+#![feature(is_terminal)]\n \n use std::env::{self, VarError};\n use std::fmt::{self, Display};\n-use std::io;\n+use std::io::{self, IsTerminal};\n use tracing_subscriber::filter::{Directive, EnvFilter, LevelFilter};\n use tracing_subscriber::layer::SubscriberExt;\n \n@@ -93,11 +94,11 @@ pub fn init_env_logger(env: &str) -> Result<(), Error> {\n }\n \n pub fn stdout_isatty() -> bool {\n-    atty::is(atty::Stream::Stdout)\n+    io::stdout().is_terminal()\n }\n \n pub fn stderr_isatty() -> bool {\n-    atty::is(atty::Stream::Stderr)\n+    io::stderr().is_terminal()\n }\n \n #[derive(Debug)]"}, {"sha": "1890c0e24bb4419c1ec17750293b75764b4a0167", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -924,10 +924,13 @@ impl ObjectSafetyViolation {\n             }\n             ObjectSafetyViolation::Method(\n                 name,\n-                MethodViolationCode::ReferencesImplTraitInTrait,\n+                MethodViolationCode::ReferencesImplTraitInTrait(_),\n                 _,\n             ) => format!(\"method `{}` references an `impl Trait` type in its return type\", name)\n                 .into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::AsyncFn, _) => {\n+                format!(\"method `{}` is `async`\", name).into()\n+            }\n             ObjectSafetyViolation::Method(\n                 name,\n                 MethodViolationCode::WhereClauseReferencesSelf,\n@@ -1035,7 +1038,10 @@ pub enum MethodViolationCode {\n     ReferencesSelfOutput,\n \n     /// e.g., `fn foo(&self) -> impl Sized`\n-    ReferencesImplTraitInTrait,\n+    ReferencesImplTraitInTrait(Span),\n+\n+    /// e.g., `async fn foo(&self)`\n+    AsyncFn,\n \n     /// e.g., `fn foo(&self) where Self: Clone`\n     WhereClauseReferencesSelf,"}, {"sha": "d6044ceb0cafc4088a4913c2e5515754c911f8de", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -12,7 +12,12 @@ use rustc_span::{BytePos, Span};\n use rustc_target::spec::abi;\n \n use std::borrow::Cow;\n+use std::collections::hash_map::DefaultHasher;\n use std::fmt;\n+use std::hash::{Hash, Hasher};\n+use std::path::PathBuf;\n+\n+use super::print::PrettyPrinter;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable, TypeVisitable, Lift)]\n pub struct ExpectedFound<T> {\n@@ -985,6 +990,38 @@ fn foo(&self) -> Self::T { String::new() }\n         false\n     }\n \n+    pub fn short_ty_string(self, ty: Ty<'tcx>) -> (String, Option<PathBuf>) {\n+        let length_limit = 50;\n+        let type_limit = 4;\n+        let regular = FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n+            .pretty_print_type(ty)\n+            .expect(\"could not write to `String`\")\n+            .into_buffer();\n+        if regular.len() <= length_limit {\n+            return (regular, None);\n+        }\n+        let short = FmtPrinter::new_with_limit(\n+            self,\n+            hir::def::Namespace::TypeNS,\n+            rustc_session::Limit(type_limit),\n+        )\n+        .pretty_print_type(ty)\n+        .expect(\"could not write to `String`\")\n+        .into_buffer();\n+        if regular == short {\n+            return (regular, None);\n+        }\n+        // Multiple types might be shortened in a single error, ensure we create a file for each.\n+        let mut s = DefaultHasher::new();\n+        ty.hash(&mut s);\n+        let hash = s.finish();\n+        let path = self.output_filenames(()).temp_path_ext(&format!(\"long-type-{hash}.txt\"), None);\n+        match std::fs::write(&path, &regular) {\n+            Ok(_) => (short, Some(path)),\n+            Err(_) => (regular, None),\n+        }\n+    }\n+\n     fn format_generic_args(self, args: &[ty::GenericArg<'tcx>]) -> String {\n         FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n             .path_generic_args(Ok, args)"}, {"sha": "a792d2694b3b9f08e70a4c3d3eb7ba72b4c0f8b1", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -276,28 +276,45 @@ impl<'tcx> InstanceDef<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Display for Instance<'tcx> {\n+fn fmt_instance(\n+    f: &mut fmt::Formatter<'_>,\n+    instance: &Instance<'_>,\n+    type_length: rustc_session::Limit,\n+) -> fmt::Result {\n+    ty::tls::with(|tcx| {\n+        let substs = tcx.lift(instance.substs).expect(\"could not lift for printing\");\n+\n+        let s = FmtPrinter::new_with_limit(tcx, Namespace::ValueNS, type_length)\n+            .print_def_path(instance.def_id(), substs)?\n+            .into_buffer();\n+        f.write_str(&s)\n+    })?;\n+\n+    match instance.def {\n+        InstanceDef::Item(_) => Ok(()),\n+        InstanceDef::VTableShim(_) => write!(f, \" - shim(vtable)\"),\n+        InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n+        InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n+        InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n+        InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({})\", ty),\n+        InstanceDef::ClosureOnceShim { .. } => write!(f, \" - shim\"),\n+        InstanceDef::DropGlue(_, None) => write!(f, \" - shim(None)\"),\n+        InstanceDef::DropGlue(_, Some(ty)) => write!(f, \" - shim(Some({}))\", ty),\n+        InstanceDef::CloneShim(_, ty) => write!(f, \" - shim({})\", ty),\n+    }\n+}\n+\n+pub struct ShortInstance<'a, 'tcx>(pub &'a Instance<'tcx>, pub usize);\n+\n+impl<'a, 'tcx> fmt::Display for ShortInstance<'a, 'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        ty::tls::with(|tcx| {\n-            let substs = tcx.lift(self.substs).expect(\"could not lift for printing\");\n-            let s = FmtPrinter::new(tcx, Namespace::ValueNS)\n-                .print_def_path(self.def_id(), substs)?\n-                .into_buffer();\n-            f.write_str(&s)\n-        })?;\n+        fmt_instance(f, self.0, rustc_session::Limit(self.1))\n+    }\n+}\n \n-        match self.def {\n-            InstanceDef::Item(_) => Ok(()),\n-            InstanceDef::VTableShim(_) => write!(f, \" - shim(vtable)\"),\n-            InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n-            InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n-            InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n-            InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({})\", ty),\n-            InstanceDef::ClosureOnceShim { .. } => write!(f, \" - shim\"),\n-            InstanceDef::DropGlue(_, None) => write!(f, \" - shim(None)\"),\n-            InstanceDef::DropGlue(_, Some(ty)) => write!(f, \" - shim(Some({}))\", ty),\n-            InstanceDef::CloneShim(_, ty) => write!(f, \" - shim({})\", ty),\n-        }\n+impl<'tcx> fmt::Display for Instance<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        ty::tls::with(|tcx| fmt_instance(f, self, tcx.type_length_limit()))\n     }\n }\n "}, {"sha": "a770c6a2e99bee226bab8368096db8c66e174b4f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -84,7 +84,7 @@ pub use self::context::{\n     GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TypeckResults, UserType,\n     UserTypeAnnotationIndex,\n };\n-pub use self::instance::{Instance, InstanceDef};\n+pub use self::instance::{Instance, InstanceDef, ShortInstance};\n pub use self::list::List;\n pub use self::parameterized::ParameterizedOverTcx;\n pub use self::rvalue_scopes::RvalueScopes;"}, {"sha": "023c9d26c42e303700d09d182e80a25c7fb5b5ad", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_session::config::TrimmedDefPaths;\n use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n+use rustc_session::Limit;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n@@ -1583,6 +1584,8 @@ pub struct FmtPrinterData<'a, 'tcx> {\n     region_index: usize,\n     binder_depth: usize,\n     printed_type_count: usize,\n+    type_length_limit: Limit,\n+    truncated: bool,\n \n     pub region_highlight_mode: RegionHighlightMode<'tcx>,\n \n@@ -1605,6 +1608,10 @@ impl DerefMut for FmtPrinter<'_, '_> {\n \n impl<'a, 'tcx> FmtPrinter<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, ns: Namespace) -> Self {\n+        Self::new_with_limit(tcx, ns, tcx.type_length_limit())\n+    }\n+\n+    pub fn new_with_limit(tcx: TyCtxt<'tcx>, ns: Namespace, type_length_limit: Limit) -> Self {\n         FmtPrinter(Box::new(FmtPrinterData {\n             tcx,\n             // Estimated reasonable capacity to allocate upfront based on a few\n@@ -1617,6 +1624,8 @@ impl<'a, 'tcx> FmtPrinter<'a, 'tcx> {\n             region_index: 0,\n             binder_depth: 0,\n             printed_type_count: 0,\n+            type_length_limit,\n+            truncated: false,\n             region_highlight_mode: RegionHighlightMode::new(tcx),\n             ty_infer_name_resolver: None,\n             const_infer_name_resolver: None,\n@@ -1751,11 +1760,11 @@ impl<'tcx> Printer<'tcx> for FmtPrinter<'_, 'tcx> {\n     }\n \n     fn print_type(mut self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n-        let type_length_limit = self.tcx.type_length_limit();\n-        if type_length_limit.value_within_limit(self.printed_type_count) {\n+        if self.type_length_limit.value_within_limit(self.printed_type_count) {\n             self.printed_type_count += 1;\n             self.pretty_print_type(ty)\n         } else {\n+            self.truncated = true;\n             write!(self, \"...\")?;\n             Ok(self)\n         }"}, {"sha": "d74893bf0f0e3354bc5b04daacb86d7cb252461c", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -197,7 +197,6 @@ use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;\n use rustc_session::Limit;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n use rustc_target::abi::Size;\n-use std::iter;\n use std::ops::Range;\n use std::path::PathBuf;\n \n@@ -541,29 +540,23 @@ fn collect_items_rec<'tcx>(\n }\n \n /// Format instance name that is already known to be too long for rustc.\n-/// Show only the first and last 32 characters to avoid blasting\n+/// Show only the first 2 types if it is longer than 32 characters to avoid blasting\n /// the user's terminal with thousands of lines of type-name.\n ///\n /// If the type name is longer than before+after, it will be written to a file.\n fn shrunk_instance_name<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: &Instance<'tcx>,\n-    before: usize,\n-    after: usize,\n ) -> (String, Option<PathBuf>) {\n     let s = instance.to_string();\n \n     // Only use the shrunk version if it's really shorter.\n     // This also avoids the case where before and after slices overlap.\n-    if s.chars().nth(before + after + 1).is_some() {\n-        // An iterator of all byte positions including the end of the string.\n-        let positions = || s.char_indices().map(|(i, _)| i).chain(iter::once(s.len()));\n-\n-        let shrunk = format!(\n-            \"{before}...{after}\",\n-            before = &s[..positions().nth(before).unwrap_or(s.len())],\n-            after = &s[positions().rev().nth(after).unwrap_or(0)..],\n-        );\n+    if s.chars().nth(33).is_some() {\n+        let shrunk = format!(\"{}\", ty::ShortInstance(instance, 4));\n+        if shrunk == s {\n+            return (s, None);\n+        }\n \n         let path = tcx.output_filenames(()).temp_path_ext(\"long-type.txt\", None);\n         let written_to_path = std::fs::write(&path, s).ok().map(|_| path);\n@@ -599,7 +592,7 @@ fn check_recursion_limit<'tcx>(\n     if !recursion_limit.value_within_limit(adjusted_recursion_depth) {\n         let def_span = tcx.def_span(def_id);\n         let def_path_str = tcx.def_path_str(def_id);\n-        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n+        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance);\n         let mut path = PathBuf::new();\n         let was_written = if written_to_path.is_some() {\n             path = written_to_path.unwrap();\n@@ -641,7 +634,7 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     //\n     // Bail out in these cases to avoid that bad user experience.\n     if !tcx.type_length_limit().value_within_limit(type_length) {\n-        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n+        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance);\n         let span = tcx.def_span(instance.def_id());\n         let mut path = PathBuf::new();\n         let was_written = if written_to_path.is_some() {"}, {"sha": "e8d129d733c1e340c10b76bbc28cb2e3b3646c08", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -753,22 +753,29 @@ impl SourceMap {\n         }\n     }\n \n-    /// Given a 'Span', tries to tell if the next character is '>'\n-    /// and the previous charactoer is '<' after skipping white space\n-    /// return true if wrapped by '<>'\n-    pub fn span_wrapped_by_angle_bracket(&self, span: Span) -> bool {\n+    /// Given a 'Span', tries to tell if it's wrapped by \"<>\" or \"()\"\n+    /// the algorithm searches if the next character is '>' or ')' after skipping white space\n+    /// then searches the previous charactoer to match '<' or '(' after skipping white space\n+    /// return true if wrapped by '<>' or '()'\n+    pub fn span_wrapped_by_angle_or_parentheses(&self, span: Span) -> bool {\n         self.span_to_source(span, |src, start_index, end_index| {\n             if src.get(start_index..end_index).is_none() {\n                 return Ok(false);\n             }\n             // test the right side to match '>' after skipping white space\n             let end_src = &src[end_index..];\n             let mut i = 0;\n+            let mut found_right_parentheses = false;\n+            let mut found_right_angle = false;\n             while let Some(cc) = end_src.chars().nth(i) {\n                 if cc == ' ' {\n                     i = i + 1;\n                 } else if cc == '>' {\n                     // found > in the right;\n+                    found_right_angle = true;\n+                    break;\n+                } else if cc == ')' {\n+                    found_right_parentheses = true;\n                     break;\n                 } else {\n                     // failed to find '>' return false immediately\n@@ -786,6 +793,16 @@ impl SourceMap {\n                     i = i - 1;\n                 } else if cc == '<' {\n                     // found < in the left\n+                    if !found_right_angle {\n+                        // skip something like \"(< )>\"\n+                        return Ok(false);\n+                    }\n+                    break;\n+                } else if cc == '(' {\n+                    if !found_right_parentheses {\n+                        // skip something like \"<(>)\"\n+                        return Ok(false);\n+                    }\n                     break;\n                 } else {\n                     // failed to find '<' return false immediately"}, {"sha": "6e90b9446505e18b7d019e0399786c454394184b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -22,6 +22,7 @@ use rustc_errors::{\n     MultiSpan, Style,\n };\n use rustc_hir as hir;\n+use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::GenericParam;\n@@ -34,6 +35,7 @@ use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::print::{FmtPrinter, Print};\n use rustc_middle::ty::{\n     self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n     TypeVisitable,\n@@ -109,7 +111,10 @@ pub trait TypeErrCtxtExt<'tcx> {\n         suggest_increasing_limit: bool,\n     ) -> !\n     where\n-        T: fmt::Display + TypeFoldable<'tcx>;\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n \n     fn suggest_new_overflow_limit(&self, err: &mut Diagnostic);\n \n@@ -468,15 +473,31 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         suggest_increasing_limit: bool,\n     ) -> !\n     where\n-        T: fmt::Display + TypeFoldable<'tcx>,\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n     {\n         let predicate = self.resolve_vars_if_possible(obligation.predicate.clone());\n+        let mut pred_str = predicate.to_string();\n+        if pred_str.len() > 50 {\n+            // We don't need to save the type to a file, we will be talking about this type already\n+            // in a separate note when we explain the obligation, so it will be available that way.\n+            pred_str = predicate\n+                .print(FmtPrinter::new_with_limit(\n+                    self.tcx,\n+                    Namespace::TypeNS,\n+                    rustc_session::Limit(6),\n+                ))\n+                .unwrap()\n+                .into_buffer();\n+        }\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n             obligation.cause.span,\n             E0275,\n             \"overflow evaluating the requirement `{}`\",\n-            predicate\n+            pred_str,\n         );\n \n         if suggest_increasing_limit {"}, {"sha": "757977ac5d508774849861a8050d0b084f3da192", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -2733,9 +2733,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     self.resolve_vars_if_possible(data.derived.parent_trait_pred);\n                 parent_trait_pred.remap_constness_diag(param_env);\n                 let parent_def_id = parent_trait_pred.def_id();\n+                let (self_ty, file) =\n+                    self.tcx.short_ty_string(parent_trait_pred.skip_binder().self_ty());\n                 let msg = format!(\n-                    \"required for `{}` to implement `{}`\",\n-                    parent_trait_pred.skip_binder().self_ty(),\n+                    \"required for `{self_ty}` to implement `{}`\",\n                     parent_trait_pred.print_modifiers_and_trait_path()\n                 );\n                 let mut is_auto_trait = false;\n@@ -2764,6 +2765,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     _ => err.note(&msg),\n                 };\n \n+                if let Some(file) = file {\n+                    err.note(&format!(\n+                        \"the full type name has been written to '{}'\",\n+                        file.display(),\n+                    ));\n+                }\n                 let mut parent_predicate = parent_trait_pred;\n                 let mut data = &data.derived;\n                 let mut count = 0;\n@@ -2804,11 +2811,18 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         count,\n                         pluralize!(count)\n                     ));\n+                    let (self_ty, file) =\n+                        self.tcx.short_ty_string(parent_trait_pred.skip_binder().self_ty());\n                     err.note(&format!(\n-                        \"required for `{}` to implement `{}`\",\n-                        parent_trait_pred.skip_binder().self_ty(),\n+                        \"required for `{self_ty}` to implement `{}`\",\n                         parent_trait_pred.print_modifiers_and_trait_path()\n                     ));\n+                    if let Some(file) = file {\n+                        err.note(&format!(\n+                            \"the full type name has been written to '{}'\",\n+                            file.display(),\n+                        ));\n+                    }\n                 }\n                 // #74711: avoid a stack overflow\n                 ensure_sufficient_stack(|| {"}, {"sha": "9745e0137ee9f63f0dc95218d4579ac2d22fd3ad", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -375,6 +375,7 @@ fn object_safety_violation_for_method(\n         let span = match (&v, node) {\n             (MethodViolationCode::ReferencesSelfInput(Some(span)), _) => *span,\n             (MethodViolationCode::UndispatchableReceiver(Some(span)), _) => *span,\n+            (MethodViolationCode::ReferencesImplTraitInTrait(span), _) => *span,\n             (MethodViolationCode::ReferencesSelfOutput, Some(node)) => {\n                 node.fn_decl().map_or(method.ident(tcx).span, |decl| decl.output.span())\n             }\n@@ -437,8 +438,8 @@ fn virtual_call_violation_for_method<'tcx>(\n     if contains_illegal_self_type_reference(tcx, trait_def_id, sig.output()) {\n         return Some(MethodViolationCode::ReferencesSelfOutput);\n     }\n-    if contains_illegal_impl_trait_in_trait(tcx, sig.output()) {\n-        return Some(MethodViolationCode::ReferencesImplTraitInTrait);\n+    if let Some(code) = contains_illegal_impl_trait_in_trait(tcx, method.def_id, sig.output()) {\n+        return Some(code);\n     }\n \n     // We can't monomorphize things like `fn foo<A>(...)`.\n@@ -864,16 +865,24 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeVisitable<'tcx>>(\n \n pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n+    fn_def_id: DefId,\n     ty: ty::Binder<'tcx, Ty<'tcx>>,\n-) -> bool {\n+) -> Option<MethodViolationCode> {\n+    // This would be caught below, but rendering the error as a separate\n+    // `async-specific` message is better.\n+    if tcx.asyncness(fn_def_id).is_async() {\n+        return Some(MethodViolationCode::AsyncFn);\n+    }\n+\n     // FIXME(RPITIT): Perhaps we should use a visitor here?\n-    ty.skip_binder().walk().any(|arg| {\n+    ty.skip_binder().walk().find_map(|arg| {\n         if let ty::GenericArgKind::Type(ty) = arg.unpack()\n             && let ty::Projection(proj) = ty.kind()\n+            && tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n         {\n-            tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n+            Some(MethodViolationCode::ReferencesImplTraitInTrait(tcx.def_span(proj.item_def_id)))\n         } else {\n-            false\n+            None\n         }\n     })\n }"}, {"sha": "a9314b1b85e668944ab4700a1e84b640baa01610", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -42,6 +42,7 @@ use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::fold::BottomUpFolder;\n+use rustc_middle::ty::print::{FmtPrinter, Print};\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n@@ -1081,11 +1082,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);\n     }\n \n-    fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(\n+    fn check_recursion_depth<T>(\n         &self,\n         depth: usize,\n         error_obligation: &Obligation<'tcx, T>,\n-    ) -> Result<(), OverflowError> {\n+    ) -> Result<(), OverflowError>\n+    where\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n+    {\n         if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {\n             match self.query_mode {\n                 TraitQueryMode::Standard => {\n@@ -1107,11 +1114,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// The weird return type of this function allows it to be used with the `try` (`?`)\n     /// operator within certain functions.\n     #[inline(always)]\n-    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>, V: Display + TypeFoldable<'tcx>>(\n+    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>, V>(\n         &self,\n         obligation: &Obligation<'tcx, T>,\n         error_obligation: &Obligation<'tcx, V>,\n-    ) -> Result<(), OverflowError> {\n+    ) -> Result<(), OverflowError>\n+    where\n+        V: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <V as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n+    {\n         self.check_recursion_depth(obligation.recursion_depth, error_obligation)\n     }\n "}, {"sha": "7e7180a38e2f23d6c76b3886a503ebb20832bec6", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -42,7 +42,8 @@ cfg_if::cfg_if! {\n         // L4Re is unix family but does not yet support unwinding.\n         #[path = \"dummy.rs\"]\n         mod real_imp;\n-    } else if #[cfg(target_env = \"msvc\")] {\n+    } else if #[cfg(all(target_env = \"msvc\", not(target_arch = \"arm\")))] {\n+        // LLVM does not support unwinding on 32 bit ARM msvc (thumbv7a-pc-windows-msvc)\n         #[path = \"seh.rs\"]\n         mod real_imp;\n     } else if #[cfg(any("}, {"sha": "0deed3f990d033ab3a4be39ae379bb68f28badfa", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1121,13 +1121,18 @@ impl Step for Sysroot {\n     fn run(self, builder: &Builder<'_>) -> Interned<PathBuf> {\n         let compiler = self.compiler;\n         let host_dir = builder.out.join(&compiler.host.triple);\n-        let sysroot = if compiler.stage == 0 {\n-            host_dir.join(\"stage0-sysroot\")\n-        } else if builder.download_rustc() {\n-            host_dir.join(\"ci-rustc-sysroot\")\n-        } else {\n-            host_dir.join(format!(\"stage{}\", compiler.stage))\n+\n+        let sysroot_dir = |stage| {\n+            if stage == 0 {\n+                host_dir.join(\"stage0-sysroot\")\n+            } else if builder.download_rustc() && compiler.stage != builder.top_stage {\n+                host_dir.join(\"ci-rustc-sysroot\")\n+            } else {\n+                host_dir.join(format!(\"stage{}\", stage))\n+            }\n         };\n+        let sysroot = sysroot_dir(compiler.stage);\n+\n         let _ = fs::remove_dir_all(&sysroot);\n         t!(fs::create_dir_all(&sysroot));\n \n@@ -1138,9 +1143,15 @@ impl Step for Sysroot {\n                 \"Cross-compiling is not yet supported with `download-rustc`\",\n             );\n \n-            // #102002, cleanup stage1 and stage0-sysroot folders when using download-rustc so people don't use old versions of the toolchain by accident.\n-            let _ = fs::remove_dir_all(host_dir.join(\"stage1\"));\n-            let _ = fs::remove_dir_all(host_dir.join(\"stage0-sysroot\"));\n+            // #102002, cleanup old toolchain folders when using download-rustc so people don't use them by accident.\n+            for stage in 0..=2 {\n+                if stage != compiler.stage {\n+                    let dir = sysroot_dir(stage);\n+                    if !dir.ends_with(\"ci-rustc-sysroot\") {\n+                        let _ = fs::remove_dir_all(dir);\n+                    }\n+                }\n+            }\n \n             // Copy the compiler into the correct sysroot.\n             let ci_rustc_dir ="}, {"sha": "babf09d2b93349605ed3c8b2965635e7932a352b", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1511,19 +1511,25 @@ impl Config {\n \n     /// Return whether we will use a downloaded, pre-compiled version of rustc, or just build from source.\n     pub(crate) fn download_rustc(&self) -> bool {\n-        static DOWNLOAD_RUSTC: OnceCell<bool> = OnceCell::new();\n+        self.download_rustc_commit().is_some()\n+    }\n+\n+    pub(crate) fn download_rustc_commit(&self) -> Option<&'static str> {\n+        static DOWNLOAD_RUSTC: OnceCell<Option<String>> = OnceCell::new();\n         if self.dry_run() && DOWNLOAD_RUSTC.get().is_none() {\n             // avoid trying to actually download the commit\n-            return false;\n+            return None;\n         }\n \n-        *DOWNLOAD_RUSTC.get_or_init(|| match &self.download_rustc_commit {\n-            None => false,\n-            Some(commit) => {\n-                self.download_ci_rustc(commit);\n-                true\n-            }\n-        })\n+        DOWNLOAD_RUSTC\n+            .get_or_init(|| match &self.download_rustc_commit {\n+                None => None,\n+                Some(commit) => {\n+                    self.download_ci_rustc(commit);\n+                    Some(commit.clone())\n+                }\n+            })\n+            .as_deref()\n     }\n \n     pub(crate) fn initial_rustfmt(&self) -> Option<PathBuf> {"}, {"sha": "b22b7ad4ae04a7b28ed8e1cd347d78eff9754e50", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1401,6 +1401,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.arg(\"--src-base\").arg(builder.src.join(\"src/test\").join(suite));\n         cmd.arg(\"--build-base\").arg(testdir(builder, compiler.host).join(suite));\n+        cmd.arg(\"--sysroot-base\").arg(builder.sysroot(compiler));\n         cmd.arg(\"--stage-id\").arg(format!(\"stage{}-{}\", compiler.stage, target));\n         cmd.arg(\"--suite\").arg(suite);\n         cmd.arg(\"--mode\").arg(mode);\n@@ -1670,6 +1671,10 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         cmd.arg(\"--channel\").arg(&builder.config.channel);\n \n+        if let Some(commit) = builder.config.download_rustc_commit() {\n+            cmd.env(\"FAKE_DOWNLOAD_RUSTC_PREFIX\", format!(\"/rustc/{commit}\"));\n+        }\n+\n         builder.ci_env.force_coloring_in_ci(&mut cmd);\n \n         builder.info(&format!("}, {"sha": "3f8dcd03d2db1e396fd994bd43521c76473f02bd", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1 +1 @@\n-0.13.1\n\\ No newline at end of file\n+0.13.2\n\\ No newline at end of file"}, {"sha": "1e7b4fe15b68cad5c59d74e96df437a4d4cf57d9", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -9,7 +9,6 @@ path = \"lib.rs\"\n [dependencies]\n arrayvec = { version = \"0.7\", default-features = false }\n askama = { version = \"0.11\", default-features = false, features = [\"config\"] }\n-atty = \"0.2\"\n itertools = \"0.10.1\"\n minifier = \"0.2.2\"\n once_cell = \"1.10.0\""}, {"sha": "e1234b37f4e2737125fe75fff43c0e67ad487860", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1378,6 +1378,12 @@ a.test-arrow:hover {\n \tbackground-color: var(--button-background-color);\n \tborder: 1px solid var(--border-color);\n \tborder-radius: 2px;\n+\tcolor: var(--settings-button-color);\n+}\n+\n+#settings-menu > a:hover, #settings-menu > a:focus,\n+#help-button > a:hover, #help-button > a:focus {\n+\tborder-color: var(--settings-button-border-focus);\n }\n \n #copy-path {"}, {"sha": "9d2493c035dc75eb61db1640bf8fd46df2270db3", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -7,6 +7,8 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--main-background-color: #0f1419;\n \t--main-color: #c5c5c5;\n \t--settings-input-color: #ffb454;\n+\t--settings-button-color: #fff;\n+\t--settings-button-border-focus: #e0e0e0;\n \t--sidebar-background-color: #14191f;\n \t--sidebar-background-color-hover: rgba(70, 70, 70, 0.33);\n \t--code-block-background-color: #191f26;\n@@ -199,19 +201,10 @@ kbd {\n \tbox-shadow: inset 0 -1px 0 #5c6773;\n }\n \n-#settings-menu > a, #help-button > a {\n-\tcolor: #fff;\n-}\n-\n #settings-menu > a img {\n \tfilter: invert(100);\n }\n \n-#settings-menu > a:hover, #settings-menu > a:focus,\n-#help-button > a:hover, #help-button > a:focus {\n-\tborder-color: #e0e0e0;\n-}\n-\n .search-results .result-name span.alias {\n \tcolor: #c5c5c5;\n }"}, {"sha": "22a3ae7b273ccbb14e98d5e0a072338287edb551", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -2,6 +2,8 @@\n \t--main-background-color: #353535;\n \t--main-color: #ddd;\n \t--settings-input-color: #2196f3;\n+\t--settings-button-color: #000;\n+\t--settings-button-border-focus: #ffb900;\n \t--sidebar-background-color: #505050;\n \t--sidebar-background-color-hover: #676767;\n \t--code-block-background-color: #2A2A2A;\n@@ -104,15 +106,6 @@ kbd {\n \tbox-shadow: inset 0 -1px 0 #c6cbd1;\n }\n \n-#settings-menu > a, #help-button > a {\n-\tcolor: #000;\n-}\n-\n-#settings-menu > a:hover, #settings-menu > a:focus,\n-#help-button > a:hover, #help-button > a:focus {\n-\tborder-color: #ffb900;\n-}\n-\n .search-results .result-name span.alias {\n \tcolor: #fff;\n }"}, {"sha": "219dd5cd2ecf615aeb1f83c877abb1eb51356039", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -2,6 +2,8 @@\n \t--main-background-color: white;\n \t--main-color: black;\n \t--settings-input-color: #2196f3;\n+\t--settings-button-color: #000;\n+\t--settings-button-border-focus: #717171;\n \t--sidebar-background-color: #F5F5F5;\n \t--sidebar-background-color-hover: #E0E0E0;\n \t--code-block-background-color: #F5F5F5;\n@@ -97,15 +99,6 @@ kbd {\n \tbox-shadow: inset 0 -1px 0 #c6cbd1;\n }\n \n-#settings-menu > a, #help-button > a {\n-\tcolor: #000;\n-}\n-\n-#settings-menu > a:hover, #settings-menu > a:focus,\n-#help-button > a:hover, #help-button > a:focus {\n-\tborder-color: #717171;\n-}\n-\n .search-results .result-name span.alias {\n \tcolor: #000;\n }"}, {"sha": "75b3dce2eda86bd4a133e259a89ffa0fd1f49401", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -795,7 +795,7 @@ function loadCss(cssUrl) {\n             // This means when the window is resized, we need to redo the layout.\n             const base = window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE;\n             const force_visible = base.NOTABLE_FORCE_VISIBLE;\n-            hideNotable();\n+            hideNotable(false);\n             if (force_visible) {\n                 showNotable(base);\n                 base.NOTABLE_FORCE_VISIBLE = true;\n@@ -846,7 +846,7 @@ function loadCss(cssUrl) {\n             // Make this function idempotent.\n             return;\n         }\n-        hideNotable();\n+        hideNotable(false);\n         const ty = e.getAttribute(\"data-ty\");\n         const wrapper = document.createElement(\"div\");\n         wrapper.innerHTML = \"<div class=\\\"docblock\\\">\" + window.NOTABLE_TRAITS[ty] + \"</div>\";\n@@ -883,7 +883,7 @@ function loadCss(cssUrl) {\n                 return;\n             }\n             if (!e.NOTABLE_FORCE_VISIBLE && !elemIsInParent(event.relatedTarget, e)) {\n-                hideNotable();\n+                hideNotable(true);\n             }\n         };\n     }\n@@ -903,14 +903,16 @@ function loadCss(cssUrl) {\n             // To work around this, make sure the click finishes being dispatched before\n             // hiding the popover. Since `hideNotable()` is idempotent, this makes Safari behave\n             // consistently with the other two.\n-            setTimeout(hideNotable, 0);\n+            setTimeout(() => hideNotable(false), 0);\n         }\n     }\n \n-    function hideNotable() {\n+    function hideNotable(focus) {\n         if (window.CURRENT_NOTABLE_ELEMENT) {\n             if (window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE.NOTABLE_FORCE_VISIBLE) {\n-                window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE.focus();\n+                if (focus) {\n+                    window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE.focus();\n+                }\n                 window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE.NOTABLE_FORCE_VISIBLE = false;\n             }\n             const body = document.getElementsByTagName(\"body\")[0];\n@@ -923,7 +925,7 @@ function loadCss(cssUrl) {\n         e.onclick = function() {\n             this.NOTABLE_FORCE_VISIBLE = this.NOTABLE_FORCE_VISIBLE ? false : true;\n             if (window.CURRENT_NOTABLE_ELEMENT && !this.NOTABLE_FORCE_VISIBLE) {\n-                hideNotable();\n+                hideNotable(true);\n             } else {\n                 showNotable(this);\n                 window.CURRENT_NOTABLE_ELEMENT.setAttribute(\"tabindex\", \"0\");\n@@ -946,7 +948,7 @@ function loadCss(cssUrl) {\n             }\n             if (!this.NOTABLE_FORCE_VISIBLE &&\n                 !elemIsInParent(event.relatedTarget, window.CURRENT_NOTABLE_ELEMENT)) {\n-                hideNotable();\n+                hideNotable(true);\n             }\n         };\n     });\n@@ -1057,7 +1059,7 @@ function loadCss(cssUrl) {\n         onEachLazy(document.querySelectorAll(\".search-form .popover\"), elem => {\n             elem.style.display = \"none\";\n         });\n-        hideNotable();\n+        hideNotable(false);\n     };\n \n     /**"}, {"sha": "1a84ec650474d28b916f4c62cfab234515490f81", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -8,6 +8,7 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n+#![feature(is_terminal)]\n #![feature(let_chains)]\n #![feature(test)]\n #![feature(never_type)]\n@@ -69,7 +70,7 @@ extern crate jemalloc_sys;\n \n use std::default::Default;\n use std::env::{self, VarError};\n-use std::io;\n+use std::io::{self, IsTerminal};\n use std::process;\n \n use rustc_driver::abort_on_err;\n@@ -179,7 +180,7 @@ fn init_logging() {\n     let color_logs = match std::env::var(\"RUSTDOC_LOG_COLOR\").as_deref() {\n         Ok(\"always\") => true,\n         Ok(\"never\") => false,\n-        Ok(\"auto\") | Err(VarError::NotPresent) => atty::is(atty::Stream::Stdout),\n+        Ok(\"auto\") | Err(VarError::NotPresent) => io::stdout().is_terminal(),\n         Ok(value) => early_error(\n             ErrorOutputType::default(),\n             &format!(\"invalid log color value '{}': expected one of always, never, or auto\", value),"}, {"sha": "aab3b11433e93d2d15ab96fade3614403da6c27c", "filename": "src/test/rustdoc-gui/notable-trait.goml", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -219,3 +219,33 @@ press-key: \"Tab\"\n press-key: \"Tab\"\n press-key: \"Tab\"\n assert-count: (\"//*[@class='notable popover']\", 0)\n+assert: \"#method\\.create_an_iterator_from_read .notable-traits:focus\"\n+\n+// Now we check that the focus isn't given back to the wrong item when opening\n+// another popover.\n+store-window-property: (scroll, \"scrollY\")\n+click: \"#method\\.create_an_iterator_from_read .fnname\"\n+// We ensure that the scroll position changed.\n+assert-window-property-false: {\"scrollY\": |scroll|}\n+// Store the new position.\n+store-window-property: (scroll, \"scrollY\")\n+click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n+wait-for: \"//*[@class='notable popover']\"\n+click: \"#settings-menu a\"\n+click: \".search-input\"\n+// We ensure we didn't come back to the previous focused item.\n+assert-window-property-false: {\"scrollY\": |scroll|}\n+\n+// Same but with Escape handling.\n+store-window-property: (scroll, \"scrollY\")\n+click: \"#method\\.create_an_iterator_from_read .fnname\"\n+// We ensure that the scroll position changed.\n+assert-window-property-false: {\"scrollY\": |scroll|}\n+// Store the new position.\n+store-window-property: (scroll, \"scrollY\")\n+click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n+wait-for: \"//*[@class='notable popover']\"\n+click: \"#settings-menu a\"\n+press-key: \"Escape\"\n+// We ensure we didn't come back to the previous focused item.\n+assert-window-property-false: {\"scrollY\": |scroll|}"}, {"sha": "a8bc35f7e0c59cfc0ad9944ed6b4ded6bedeb700", "filename": "src/test/ui/async-await/in-trait/object-safety.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -0,0 +1,13 @@\n+// edition:2021\n+\n+#![feature(async_fn_in_trait)]\n+//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+trait Foo {\n+    async fn foo(&self);\n+}\n+\n+fn main() {\n+    let x: &dyn Foo = todo!();\n+    //~^ ERROR the trait `Foo` cannot be made into an object\n+}"}, {"sha": "0b318f71f395d85d4e68c25efe84c66ecd25f044", "filename": "src/test/ui/async-await/in-trait/object-safety.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/object-safety.rs:3:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0038]: the trait `Foo` cannot be made into an object\n+  --> $DIR/object-safety.rs:11:12\n+   |\n+LL |     let x: &dyn Foo = todo!();\n+   |            ^^^^^^^^ `Foo` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/object-safety.rs:7:14\n+   |\n+LL | trait Foo {\n+   |       --- this trait cannot be made into an object...\n+LL |     async fn foo(&self);\n+   |              ^^^ ...because method `foo` is `async`\n+   = help: consider moving `foo` to another trait\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0038`."}, {"sha": "95d7f85f10546240f81ae998a841f818953bfea9", "filename": "src/test/ui/error-codes/E0275.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ferror-codes%2FE0275.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ferror-codes%2FE0275.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n trait Foo {}\n \n struct Bar<T>(T);"}, {"sha": "49a4d984af9eb6143418ea31f0bf55e6f02fc9e7", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,15 +1,16 @@\n-error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/E0275.rs:5:33\n+error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<...>>>>>>>: Foo`\n+  --> $DIR/E0275.rs:6:33\n    |\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |                                 ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`E0275`)\n-note: required for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Foo`\n-  --> $DIR/E0275.rs:5:9\n+note: required for `Bar<Bar<Bar<Bar<Bar<Bar<...>>>>>>` to implement `Foo`\n+  --> $DIR/E0275.rs:6:9\n    |\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |         ^^^     ^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/error-codes/E0275/E0275.long-type-hash.txt'\n    = note: 127 redundant requirements hidden\n    = note: required for `Bar<T>` to implement `Foo`\n "}, {"sha": "ca0e760ff6d35fcad92ad1fa7baca2ad132009d3", "filename": "src/test/ui/impl-trait/in-trait/object-safety.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fobject-safety.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -5,12 +5,12 @@ LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |                                 ^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:8\n+  --> $DIR/object-safety.rs:7:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> impl Debug;\n-   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n@@ -20,12 +20,12 @@ LL |     let s = i.baz();\n    |             ^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:8\n+  --> $DIR/object-safety.rs:7:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> impl Debug;\n-   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n \n error[E0038]: the trait `Foo` cannot be made into an object\n@@ -35,12 +35,12 @@ LL |     let i = Box::new(42_u32) as Box<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:7:8\n+  --> $DIR/object-safety.rs:7:22\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> impl Debug;\n-   |        ^^^ ...because method `baz` references an `impl Trait` type in its return type\n+   |                      ^^^^^^^^^^ ...because method `baz` references an `impl Trait` type in its return type\n    = help: consider moving `baz` to another trait\n    = note: required for `Box<u32>` to implement `CoerceUnsized<Box<dyn Foo>>`\n    = note: required by cast to type `Box<dyn Foo>`"}, {"sha": "951e0f5870d7d084ba3c802c2570f4be32340587", "filename": "src/test/ui/infinite/infinite-instantiation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `function::<Option<Option<Option<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `function::<Option<Option<Option<Option<Option<...>>>>>>`\n   --> $DIR/infinite-instantiation.rs:22:9\n    |\n LL |         function(counter - 1, t.to_option());"}, {"sha": "4de22f0c9177d4f90ff06e7dd667c043ac29aeca", "filename": "src/test/ui/issues/issue-20413.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n trait Foo {\n     fn answer(self);\n }"}, {"sha": "91509ceace8cb3406806a91d1c75c54b504b47af", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,64 +1,69 @@\n error[E0392]: parameter `T` is never used\n-  --> $DIR/issue-20413.rs:5:15\n+  --> $DIR/issue-20413.rs:6:15\n    |\n LL | struct NoData<T>;\n    |               ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n-error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/issue-20413.rs:8:36\n+error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<...>>>>>>>: Foo`\n+  --> $DIR/issue-20413.rs:9:36\n    |\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Foo`\n-  --> $DIR/issue-20413.rs:8:9\n+note: required for `NoData<NoData<NoData<NoData<NoData<NoData<...>>>>>>` to implement `Foo`\n+  --> $DIR/issue-20413.rs:9:9\n    |\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |         ^^^     ^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n    = note: 127 redundant requirements hidden\n    = note: required for `NoData<T>` to implement `Foo`\n \n-error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Baz`\n-  --> $DIR/issue-20413.rs:27:42\n+error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>: Baz`\n+  --> $DIR/issue-20413.rs:28:42\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Bar`\n-  --> $DIR/issue-20413.rs:27:9\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>` to implement `Bar`\n+  --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n-note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Baz`\n-  --> $DIR/issue-20413.rs:34:9\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>` to implement `Baz`\n+  --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n    = note: 126 redundant requirements hidden\n    = note: required for `EvenLessData<T>` to implement `Baz`\n \n-error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Bar`\n-  --> $DIR/issue-20413.rs:34:42\n+error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>: Bar`\n+  --> $DIR/issue-20413.rs:35:42\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Baz`\n-  --> $DIR/issue-20413.rs:34:9\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>` to implement `Baz`\n+  --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n-note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Bar`\n-  --> $DIR/issue-20413.rs:27:9\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>` to implement `Bar`\n+  --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n    = note: 126 redundant requirements hidden\n    = note: required for `AlmostNoData<T>` to implement `Bar`\n "}, {"sha": "1caa4221f25015fc6d292f88e9c6b4ae76037719", "filename": "src/test/ui/issues/issue-22638.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -9,7 +9,6 @@ note: `A::matches` defined here\n    |\n LL |     pub fn matches<F: Fn()>(&self, f: &F) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-22638/issue-22638.long-type.txt'\n \n error: aborting due to previous error\n "}, {"sha": "5b8299fe839d7bcdb100808ed8c4e7a5049d5458", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(.....), ...), ...) as Foo>::recurse`\n+error: reached the recursion limit while instantiating `<(&(&(..., ...), ...), ...) as Foo>::recurse`\n   --> $DIR/issue-37311.rs:17:9\n    |\n LL |         (self, self).recurse();"}, {"sha": "4746f918bf8dd53b761d70b0bfcad528f2bddf55", "filename": "src/test/ui/issues/issue-67552.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut &... &mut &mut &mut &mut &mut Empty>`\n+error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut ...>`\n   --> $DIR/issue-67552.rs:29:9\n    |\n LL |         rec(identity(&mut it))"}, {"sha": "22332b357231b3b88d51e21b8c405854c721b8de", "filename": "src/test/ui/issues/issue-8727.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -9,7 +9,7 @@ LL |     generic::<Option<T>>();\n    = help: a `loop` may express intention better if this is on purpose\n    = note: `#[warn(unconditional_recursion)]` on by default\n \n-error: reached the recursion limit while instantiating `generic::<Option<Option<Option<O...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `generic::<Option<Option<Option<Option<Option<...>>>>>>`\n   --> $DIR/issue-8727.rs:8:5\n    |\n LL |     generic::<Option<T>>();"}, {"sha": "38353d161c1339e626f95750c3d58ef166c3ff51", "filename": "src/test/ui/recursion/issue-83150.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,6 +1,7 @@\n // build-fail\n // compile-flags: -Copt-level=0\n-//~^^ ERROR overflow evaluating the requirement\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n+//~^^^ ERROR overflow evaluating the requirement\n \n fn main() {\n     let mut iter = 0u8..1;"}, {"sha": "a67bfd018a2b5cfd9f96255a5c34eddfda1b56c3", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-83150.rs:10:1\n+  --> $DIR/issue-83150.rs:11:1\n    |\n LL | fn func<T: Iterator<Item = u8>>(iter: &mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n@@ -12,9 +12,10 @@ LL |     func(&mut iter.map(|x| x + 1))\n error[E0275]: overflow evaluating the requirement `<std::ops::Range<u8> as Iterator>::Item`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n-   = note: required for `Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>` to implement `Iterator`\n+   = note: required for `Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:12:24: 12:27]>` to implement `Iterator`\n    = note: 64 redundant requirements hidden\n-   = note: required for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>` to implement `Iterator`\n+   = note: required for `&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>` to implement `Iterator`\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-83150/issue-83150.long-type-hash.txt'\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "cf08095372b0792aab0eb8bb6ad92d36a3ccd8ed", "filename": "src/test/ui/recursion/recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<...>>>>>>`\n   --> $DIR/recursion.rs:18:11\n    |\n LL |     _ => {test (n-1, i+1, Cons {head:2*i+1, tail:first}, Cons{head:i*i, tail:second})}"}, {"sha": "6474b2b38e1c089a164cb1c8d86e129126d6b19f", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -Zinline-mir=no\n // error-pattern: overflow evaluating the requirement `(): Sized`\n // error-pattern: function cannot return without recursing\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n \n // Regression test for #91949.\n // This hanged *forever* on 1.56, fixed by #90423."}, {"sha": "a74d2524996a10d4d9f85c9ed166f1733264c3fe", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-91949-hangs-on-recursion.rs:22:1\n+  --> $DIR/issue-91949-hangs-on-recursion.rs:23:1\n    |\n LL | / fn recurse<T>(elements: T) -> Vec<char>\n LL | | where\n@@ -17,7 +17,8 @@ error[E0275]: overflow evaluating the requirement `(): Sized`\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"512\"]` attribute to your crate (`issue_91949_hangs_on_recursion`)\n    = note: required for `std::iter::Empty<()>` to implement `Iterator`\n    = note: 171 redundant requirements hidden\n-   = note: required for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), std::iter::Empty<()>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>` to implement `Iterator`\n+   = note: required for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<..., ...>>, ...>>` to implement `Iterator`\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/traits/issue-91949-hangs-on-recursion/issue-91949-hangs-on-recursion.long-type-hash.txt'\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "7cd76286a929efbf054860ce2e3561a8ad9b1148", "filename": "src/test/ui/type/issue-103271.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -7,4 +7,12 @@ fn main() {\n         let x: &u32 = item;\n         assert_eq!(x, &1);\n     }\n+    let iter_fun2 = <(&[u32])>::iter;\n+    //~^ no function or associated item named `iter` found for reference `&[u32]` in the current scope [E0599]\n+    //~| function or associated item not found in `&[u32]`\n+    //~| HELP the function `iter` is implemented on `[u32]`\n+    for item2 in iter_fun2(&[1,1]) {\n+        let x: &u32 = item2;\n+        assert_eq!(x, &1);\n+    }\n }"}, {"sha": "f4dac51b2b47852a6c4dd8dd7a640f454a544806", "filename": "src/test/ui/type/issue-103271.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -9,6 +9,17 @@ help: the function `iter` is implemented on `[u32]`\n LL |     let iter_fun = <[u32]>::iter;\n    |                     ~~~~~\n \n-error: aborting due to previous error\n+error[E0599]: no function or associated item named `iter` found for reference `&[u32]` in the current scope\n+  --> $DIR/issue-103271.rs:10:33\n+   |\n+LL |     let iter_fun2 = <(&[u32])>::iter;\n+   |                                 ^^^^ function or associated item not found in `&[u32]`\n+   |\n+help: the function `iter` is implemented on `[u32]`\n+   |\n+LL |     let iter_fun2 = <([u32])>::iter;\n+   |                       ~~~~~\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0599`."}, {"sha": "b3c12747414ed15a53432bf5b4055aa3a614dad7", "filename": "src/test/ui/type_length_limit.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -7,22 +7,27 @@\n // The exact type depends on optimizations, so disable them.\n \n #![allow(dead_code)]\n-#![type_length_limit=\"4\"]\n+#![type_length_limit=\"8\"]\n \n macro_rules! link {\n     ($id:ident, $t:ty) => {\n         pub type $id = ($t, $t, $t);\n     }\n }\n \n+link! { A1, B1 }\n+link! { B1, C1 }\n+link! { C1, D1 }\n+link! { D1, E1 }\n+link! { E1, A }\n link! { A, B }\n link! { B, C }\n link! { C, D }\n link! { D, E }\n link! { E, F }\n-link! { F, G }\n+link! { F, G<Option<i32>, Option<i32>> }\n \n-pub struct G;\n+pub struct G<T, K>(std::marker::PhantomData::<(T, K)>);\n \n fn main() {\n     drop::<Option<A>>(None);"}, {"sha": "ff487466902236425d4be9180f9fb20f71ac6bd2", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,20 +1,11 @@\n-error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((...,....., ...), ..., ...), ..., ...)>>`\n+error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((..., ..., ...), ..., ...), ..., ...), ..., ...)>>`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub fn drop<T>(_x: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n+   = help: consider adding a `#![type_length_limit=\"10\"]` attribute to your crate\n    = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n \n-error: reached the type-length limit while instantiating `<[closure@std::rt::lang_start<()...e<()>>::call_once - shim(vtable)`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL |     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "eb5d35917b2395194593c9ca70c3778f60c1573b", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1 +1 @@\n-Subproject commit 16b097879b6f117c8ae698aab054c87f26ff325e\n+Subproject commit eb5d35917b2395194593c9ca70c3778f60c1573b"}, {"sha": "5c6a342b3d074221eaaa9296b06e4a89c9e8e1ae", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound,\n-    HirId, IsAsync, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n+    HirId, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n     ) {\n         if_chain! {\n             if let Some(header) = kind.header();\n-            if header.asyncness == IsAsync::NotAsync;\n+            if !header.asyncness.is_async();\n             // Check that this function returns `impl Future`\n             if let FnRetTy::Return(ret_ty) = decl.output;\n             if let Some((trait_ref, output_lifetimes)) = future_trait_ref(cx, ret_ty);"}, {"sha": "3538bef6e06185a13eb5a17ea1e5a9fb99816a8d", "filename": "src/tools/clippy/clippy_lints/src/unused_async.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId, IsAsync, YieldSource};\n+use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId, YieldSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if !span.from_expansion() && fn_kind.asyncness() == IsAsync::Async {\n+        if !span.from_expansion() && fn_kind.asyncness().is_async() {\n             let mut visitor = AsyncFnVisitor { cx, found_await: false };\n             walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), hir_id);\n             if !visitor.found_await {"}, {"sha": "bb91317d67f5add0846404f949af346aad2fe29c", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -87,10 +87,10 @@ use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness, Destination, Expr,\n-    ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource,\n-    Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n-    TraitRef, TyKind, UnOp,\n+    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness,\n+    Destination, Expr, ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind,\n+    LangItem, Local, MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy,\n+    QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n@@ -1861,7 +1861,7 @@ pub fn if_sequence<'tcx>(mut expr: &'tcx Expr<'tcx>) -> (Vec<&'tcx Expr<'tcx>>,\n \n /// Checks if the given function kind is an async function.\n pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n-    matches!(kind, FnKind::ItemFn(_, _, header) if header.asyncness == IsAsync::Async)\n+    matches!(kind, FnKind::ItemFn(_, _, header) if header.asyncness.is_async())\n }\n \n /// Peels away all the compiler generated code surrounding the body of an async function,"}, {"sha": "07b80b8baac1639ee9270142114cbb3f271246b3", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -230,6 +230,9 @@ pub struct Config {\n     /// The directory where programs should be built\n     pub build_base: PathBuf,\n \n+    /// The directory containing the compiler sysroot\n+    pub sysroot_base: PathBuf,\n+\n     /// The name of the stage being built (stage1, etc)\n     pub stage_id: String,\n "}, {"sha": "e42b8c5240842a1387a490dfdbb02569a22e18e7", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -46,6 +46,7 @@ fn config() -> Config {\n         \"--jsondocck-path=\",\n         \"--src-base=\",\n         \"--build-base=\",\n+        \"--sysroot-base=\",\n         \"--stage-id=stage2\",\n         \"--cc=c\",\n         \"--cxx=c++\","}, {"sha": "519da685f940a24a6b18a2ab5780ad20db66146f", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -69,6 +69,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .optopt(\"\", \"llvm-filecheck\", \"path to LLVM's FileCheck binary\", \"DIR\")\n         .reqopt(\"\", \"src-base\", \"directory to scan for test files\", \"PATH\")\n         .reqopt(\"\", \"build-base\", \"directory to deposit test outputs\", \"PATH\")\n+        .reqopt(\"\", \"sysroot-base\", \"directory containing the compiler sysroot\", \"PATH\")\n         .reqopt(\"\", \"stage-id\", \"the target-stage identifier\", \"stageN-TARGET\")\n         .reqopt(\n             \"\",\n@@ -234,6 +235,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         llvm_bin_dir: matches.opt_str(\"llvm-bin-dir\").map(PathBuf::from),\n         src_base,\n         build_base: opt_path(matches, \"build-base\"),\n+        sysroot_base: opt_path(matches, \"sysroot-base\"),\n         stage_id: matches.opt_str(\"stage-id\").unwrap(),\n         mode,\n         suite: matches.opt_str(\"suite\").unwrap(),"}, {"sha": "a392114aa67f52319f92b7260b62ad2917ced317", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a434286a96d61e9f55a3144004beec48206bb29/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=2a434286a96d61e9f55a3144004beec48206bb29", "patch": "@@ -3533,22 +3533,25 @@ impl<'test> TestCx<'test> {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n         normalize_path(parent_dir, \"$DIR\");\n \n-        // Paths into the libstd/libcore\n-        let base_dir = self.config.src_base.parent().unwrap().parent().unwrap().parent().unwrap();\n-        let src_dir = base_dir.join(\"library\");\n-        normalize_path(&src_dir, \"$SRC_DIR\");\n-\n-        // `ui-fulldeps` tests can show paths to the compiler source when testing macros from\n-        // `rustc_macros`\n-        // eg. /home/user/rust/compiler\n-        let compiler_src_dir = base_dir.join(\"compiler\");\n-        normalize_path(&compiler_src_dir, \"$COMPILER_DIR\");\n-\n-        if let Some(virtual_rust_source_base_dir) =\n-            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from)\n-        {\n-            normalize_path(&virtual_rust_source_base_dir.join(\"library\"), \"$SRC_DIR\");\n-            normalize_path(&virtual_rust_source_base_dir.join(\"compiler\"), \"$COMPILER_DIR\");\n+        let source_bases = &[\n+            // Source base on the current filesystem (calculated as parent of `src/test/$suite`):\n+            Some(self.config.src_base.parent().unwrap().parent().unwrap().parent().unwrap().into()),\n+            // Source base on the sysroot (from the src components downloaded by `download-rustc`):\n+            Some(self.config.sysroot_base.join(\"lib\").join(\"rustlib\").join(\"src\").join(\"rust\")),\n+            // Virtual `/rustc/$sha` remapped paths (if `remap-debuginfo` is enabled):\n+            option_env!(\"CFG_VIRTUAL_RUST_SOURCE_BASE_DIR\").map(PathBuf::from),\n+            // Virtual `/rustc/$sha` coming from download-rustc:\n+            std::env::var_os(\"FAKE_DOWNLOAD_RUSTC_PREFIX\").map(PathBuf::from),\n+        ];\n+        for base_dir in source_bases {\n+            if let Some(base_dir) = base_dir {\n+                // Paths into the libstd/libcore\n+                normalize_path(&base_dir.join(\"library\"), \"$SRC_DIR\");\n+                // `ui-fulldeps` tests can show paths to the compiler source when testing macros from\n+                // `rustc_macros`\n+                // eg. /home/user/rust/compiler\n+                normalize_path(&base_dir.join(\"compiler\"), \"$COMPILER_DIR\");\n+            }\n         }\n \n         // Paths into the build directory"}]}