{"sha": "a490ba06fa635ecb34b5ce0b7205621eefaee603", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0OTBiYTA2ZmE2MzVlY2IzNGI1Y2UwYjcyMDU2MjFlZWZhZWU2MDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-27T08:26:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-27T08:26:46Z"}, "message": "document some more assists", "tree": {"sha": "3793da47dbe724189842cabeb5a7cef91ad592ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3793da47dbe724189842cabeb5a7cef91ad592ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a490ba06fa635ecb34b5ce0b7205621eefaee603", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a490ba06fa635ecb34b5ce0b7205621eefaee603", "html_url": "https://github.com/rust-lang/rust/commit/a490ba06fa635ecb34b5ce0b7205621eefaee603", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a490ba06fa635ecb34b5ce0b7205621eefaee603/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85984b09e182adca4b03d9f7efab20d48b5b632a", "url": "https://api.github.com/repos/rust-lang/rust/commits/85984b09e182adca4b03d9f7efab20d48b5b632a", "html_url": "https://github.com/rust-lang/rust/commit/85984b09e182adca4b03d9f7efab20d48b5b632a"}], "stats": {"total": 369, "additions": 279, "deletions": 90}, "files": [{"sha": "f5ddd7159440f07604cfb2de97eb2835bd8f887c", "filename": "crates/ra_assists/src/assists/merge_match_arms.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a490ba06fa635ecb34b5ce0b7205621eefaee603/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a490ba06fa635ecb34b5ce0b7205621eefaee603/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmerge_match_arms.rs?ref=a490ba06fa635ecb34b5ce0b7205621eefaee603", "patch": "@@ -1,9 +1,31 @@\n-//! FIXME: write short doc here\n-\n use crate::{Assist, AssistCtx, AssistId, TextRange, TextUnit};\n use hir::db::HirDatabase;\n use ra_syntax::ast::{AstNode, MatchArm};\n \n+// Assist: merge_match_arms\n+//\n+// Merges identical match arms.\n+//\n+// ```\n+// enum Action { Move { distance: u32 }, Stop }\n+//\n+// fn handle(action: Action) {\n+//     match action {\n+//         <|>Action::Move(..) => foo(),\n+//         Action::Stop => foo(),\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// enum Action { Move { distance: u32 }, Stop }\n+//\n+// fn handle(action: Action) {\n+//     match action {\n+//         Action::Move(..) | Action::Stop => foo(),\n+//     }\n+// }\n+// ```\n pub(crate) fn merge_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let current_arm = ctx.node_at_offset::<MatchArm>()?;\n "}, {"sha": "f96e19a9f09311e8c8e55451e8333c61883c433c", "filename": "crates/ra_assists/src/assists/move_bounds.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a490ba06fa635ecb34b5ce0b7205621eefaee603/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a490ba06fa635ecb34b5ce0b7205621eefaee603/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_bounds.rs?ref=a490ba06fa635ecb34b5ce0b7205621eefaee603", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, edit, make, AstNode, NameOwner, TypeBoundsOwner},\n@@ -9,6 +7,21 @@ use ra_syntax::{\n \n use crate::{Assist, AssistCtx, AssistId};\n \n+// Assist: move_bounds_to_where_clause\n+//\n+// Moves inline type bounds to a where clause.\n+//\n+// ```\n+// fn apply<T, U, <|>F: FnOnce(T) -> U>(f: F, x: T) -> U {\n+//     f(x)\n+// }\n+// ```\n+// ->\n+// ```\n+// fn apply<T, U, F>(f: F, x: T) -> U where F: FnOnce(T) -> U {\n+//     f(x)\n+// }\n+// ```\n pub(crate) fn move_bounds_to_where_clause(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let type_param_list = ctx.node_at_offset::<ast::TypeParamList>()?;\n "}, {"sha": "36c95128d35f730543230fcb4db7d90c4df49c69", "filename": "crates/ra_assists/src/assists/move_guard.rs", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a490ba06fa635ecb34b5ce0b7205621eefaee603/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a490ba06fa635ecb34b5ce0b7205621eefaee603/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fmove_guard.rs?ref=a490ba06fa635ecb34b5ce0b7205621eefaee603", "patch": "@@ -1,5 +1,3 @@\n-//! FIXME: write short doc here\n-\n use hir::db::HirDatabase;\n use ra_syntax::{\n     ast,\n@@ -9,6 +7,31 @@ use ra_syntax::{\n \n use crate::{Assist, AssistCtx, AssistId};\n \n+// Assist: move_guard_to_arm_body\n+//\n+// Moves match guard into match arm body.\n+//\n+// ```\n+// enum Action { Move { distance: u32 }, Stop }\n+//\n+// fn handle(action: Action) {\n+//     match action {\n+//         Action::Move { distance } <|>if distance > 10 => foo(),\n+//         _ => (),\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// enum Action { Move { distance: u32 }, Stop }\n+//\n+// fn handle(action: Action) {\n+//     match action {\n+//         Action::Move { distance } => if distance > 10 { foo() },\n+//         _ => (),\n+//     }\n+// }\n+// ```\n pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_arm = ctx.node_at_offset::<MatchArm>()?;\n     let guard = match_arm.guard()?;\n@@ -42,6 +65,31 @@ pub(crate) fn move_guard_to_arm_body(mut ctx: AssistCtx<impl HirDatabase>) -> Op\n     ctx.build()\n }\n \n+// Assist: move_arm_cond_to_match_guard\n+//\n+// Moves if expression from match arm body into a guard.\n+//\n+// ```\n+// enum Action { Move { distance: u32 }, Stop }\n+//\n+// fn handle(action: Action) {\n+//     match action {\n+//         Action::Move { distance } => <|>if distance > 10 { foo() },\n+//         _ => (),\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// enum Action { Move { distance: u32 }, Stop }\n+//\n+// fn handle(action: Action) {\n+//     match action {\n+//         Action::Move { distance } if distance > 10 => foo(),\n+//         _ => (),\n+//     }\n+// }\n+// ```\n pub(crate) fn move_arm_cond_to_match_guard(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let match_arm: MatchArm = ctx.node_at_offset::<MatchArm>()?;\n     let last_match_pat = match_arm.pats().last()?;"}, {"sha": "09677af68ffde1d59c65e77e24213901b8e473cf", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/a490ba06fa635ecb34b5ce0b7205621eefaee603/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a490ba06fa635ecb34b5ce0b7205621eefaee603/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=a490ba06fa635ecb34b5ce0b7205621eefaee603", "patch": "@@ -273,3 +273,100 @@ fn main() {\n \"#####,\n     )\n }\n+\n+#[test]\n+fn doctest_merge_match_arms() {\n+    check(\n+        \"merge_match_arms\",\n+        r#####\"\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        <|>Action::Move(..) => foo(),\n+        Action::Stop => foo(),\n+    }\n+}\n+\"#####,\n+        r#####\"\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move(..) | Action::Stop => foo(),\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_move_arm_cond_to_match_guard() {\n+    check(\n+        \"move_arm_cond_to_match_guard\",\n+        r#####\"\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move { distance } => <|>if distance > 10 { foo() },\n+        _ => (),\n+    }\n+}\n+\"#####,\n+        r#####\"\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move { distance } if distance > 10 => foo(),\n+        _ => (),\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_move_bounds_to_where_clause() {\n+    check(\n+        \"move_bounds_to_where_clause\",\n+        r#####\"\n+fn apply<T, U, <|>F: FnOnce(T) -> U>(f: F, x: T) -> U {\n+    f(x)\n+}\n+\"#####,\n+        r#####\"\n+fn apply<T, U, F>(f: F, x: T) -> U where F: FnOnce(T) -> U {\n+    f(x)\n+}\n+\"#####,\n+    )\n+}\n+\n+#[test]\n+fn doctest_move_guard_to_arm_body() {\n+    check(\n+        \"move_guard_to_arm_body\",\n+        r#####\"\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move { distance } <|>if distance > 10 => foo(),\n+        _ => (),\n+    }\n+}\n+\"#####,\n+        r#####\"\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move { distance } => if distance > 10 { foo() },\n+        _ => (),\n+    }\n+}\n+\"#####,\n+    )\n+}"}, {"sha": "34a95696cae234b59eb504864a815bfbc3fcbe95", "filename": "docs/user/assists.md", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a490ba06fa635ecb34b5ce0b7205621eefaee603/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/a490ba06fa635ecb34b5ce0b7205621eefaee603/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=a490ba06fa635ecb34b5ce0b7205621eefaee603", "patch": "@@ -265,3 +265,96 @@ fn main() {\n     var_name * 4;\n }\n ```\n+\n+## `merge_match_arms`\n+\n+Merges identical match arms.\n+\n+```rust\n+// BEFORE\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        \u2503Action::Move(..) => foo(),\n+        Action::Stop => foo(),\n+    }\n+}\n+\n+// AFTER\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move(..) | Action::Stop => foo(),\n+    }\n+}\n+```\n+\n+## `move_arm_cond_to_match_guard`\n+\n+Moves if expression from match arm body into a guard.\n+\n+```rust\n+// BEFORE\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move { distance } => \u2503if distance > 10 { foo() },\n+        _ => (),\n+    }\n+}\n+\n+// AFTER\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move { distance } if distance > 10 => foo(),\n+        _ => (),\n+    }\n+}\n+```\n+\n+## `move_bounds_to_where_clause`\n+\n+Moves inline type bounds to a where clause.\n+\n+```rust\n+// BEFORE\n+fn apply<T, U, \u2503F: FnOnce(T) -> U>(f: F, x: T) -> U {\n+    f(x)\n+}\n+\n+// AFTER\n+fn apply<T, U, F>(f: F, x: T) -> U where F: FnOnce(T) -> U {\n+    f(x)\n+}\n+```\n+\n+## `move_guard_to_arm_body`\n+\n+Moves match guard into match arm body.\n+\n+```rust\n+// BEFORE\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move { distance } \u2503if distance > 10 => foo(),\n+        _ => (),\n+    }\n+}\n+\n+// AFTER\n+enum Action { Move { distance: u32 }, Stop }\n+\n+fn handle(action: Action) {\n+    match action {\n+        Action::Move { distance } => if distance > 10 { foo() },\n+        _ => (),\n+    }\n+}\n+```"}, {"sha": "2e213e34c380050cc0b59b29da91b6e1c33ab031", "filename": "docs/user/features.md", "status": "modified", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/a490ba06fa635ecb34b5ce0b7205621eefaee603/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/a490ba06fa635ecb34b5ce0b7205621eefaee603/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=a490ba06fa635ecb34b5ce0b7205621eefaee603", "patch": "@@ -154,45 +154,6 @@ fn main() {\n }\n ```\n \n-- Flip `,`\n-\n-```rust\n-// before:\n-fn foo(x: usize,<|> dim: (usize, usize)) {}\n-// after:\n-fn foo(dim: (usize, usize), x: usize) {}\n-```\n-\n-- Introduce variable:\n-\n-```rust\n-// before:\n-fn foo() {\n-    foo(<|>1 + 1<|>);\n-}\n-\n-// after:\n-fn foo() {\n-    let var_name = 1 + 1;\n-    foo(var_name);\n-}\n-```\n-\n-- Inline local variable:\n-\n-```rust\n-// before:\n-fn foo() {\n-    let a<|> = 1 + 1;\n-    let b = a * 10;\n-}\n-\n-// after:\n-fn foo() {\n-    let b = (1 + 1) * 10;\n-}\n-```\n-\n - Remove `dbg!`\n \n ```rust\n@@ -245,41 +206,6 @@ use crate:<|>:db::{RootDatabase, FileSymbol};\n use crate::{<|>db::{RootDatabase, FileSymbol}};\n ```\n \n-- Flip binary expression\n-\n-```rust\n-// before:\n-fn foo() {\n-    if 1 <<|> 2 {\n-        println!(\"Who would have thought?\");\n-    }\n-}\n-// after:\n-fn foo() {\n-    if 2 ><|> 1 {\n-        println!(\"Who would have thought?\");\n-    }\n-}\n-```\n-\n-- Move guard expression to match arm body\n-```rust\n-// before:\n-fn f() {\n-    match x {\n-        <|>y @ 4 | y @ 5    if y > 5 => true,\n-        _ => false\n-    }\n-}\n-// after:\n-fn f() {\n-    match x {\n-        y @ 4 | y @ 5 => if y > 5 { <|>true },\n-        _ => false\n-    }\n-}\n-```\n-\n - Move if condition to match arm guard\n ```rust\n // before:\n@@ -309,16 +235,6 @@ fn f() {\n }\n ```\n \n-- Move type bounds to where clause\n-\n-```rust\n-// before:\n-fn foo<T: u32, F: FnOnce(T) -> T>() {}\n-\n-// after:\n-fn foo<T, F>() where T: u32, F: FnOnce(T) -> T {}\n-```\n-\n - Make raw string unescaped\n \n ```rust"}]}