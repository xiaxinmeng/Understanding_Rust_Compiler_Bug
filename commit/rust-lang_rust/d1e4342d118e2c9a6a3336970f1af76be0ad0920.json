{"sha": "d1e4342d118e2c9a6a3336970f1af76be0ad0920", "node_id": "C_kwDOAAsO6NoAKGQxZTQzNDJkMTE4ZTJjOWE2YTMzMzY5NzBmMWFmNzZiZTBhZDA5MjA", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-25T09:46:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-25T09:46:55Z"}, "message": "Rollup merge of #99690 - RalfJung:miri-track-caller, r=Mark-Simulacrum\n\nadd miri-track-caller to more intrinsic-exposing methods\n\nFollow-up to https://github.com/rust-lang/rust/pull/98674: I went through the Miri test suite to find more functions that would benefit from Miri backtrace pruning, and this is what I found.\n\nBasically anything that just exposes a potentially-UB intrinsic to the user should get this treatment.", "tree": {"sha": "b9ceacb5294718faf73733aadae0d1dab96fb5e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9ceacb5294718faf73733aadae0d1dab96fb5e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1e4342d118e2c9a6a3336970f1af76be0ad0920", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi3maPCRBK7hj4Ov3rIwAAoIAIAIuOTYuWRmC5Yx5S6tSsmIoN\nRi5n/SGu5D6BfpAa4W+FpAreaJNF6ZhmPc+cnlmJTQwBUXfaM2wYZ8Lc2OuYy7OW\nh++fxe0n1BO8z9qdCFYoMR2Yx6lGYao/jolAttr2HuFPGq6RJt9A3UmuV5RQLhzB\nTx7MQA3Jbx3nI8A1Mh/a1upO7CyWiLG1jnDwi03vJ1Gl7+zgNGMxqvqGOuCvXg46\ndAx6RnMC0vq6dVlqe3J8O8lNILioSh7R4UdGrDZLh5IDQTfROE6B1EN1NSFws9MW\nwoAlpoD/rG+34tTK7ysBUYKohzeU2xTjDlgTPsQGkfA5ORURG5XkJLSZhWBNdI8=\n=Xeu3\n-----END PGP SIGNATURE-----\n", "payload": "tree b9ceacb5294718faf73733aadae0d1dab96fb5e8\nparent cb512888f353fd56be0074ab2b1f49da215ca440\nparent d10a7b124378ac71f87ce271ddc33c36974d99a3\nauthor Yuki Okushi <jtitor@2k36.org> 1658742415 +0900\ncommitter GitHub <noreply@github.com> 1658742415 +0900\n\nRollup merge of #99690 - RalfJung:miri-track-caller, r=Mark-Simulacrum\n\nadd miri-track-caller to more intrinsic-exposing methods\n\nFollow-up to https://github.com/rust-lang/rust/pull/98674: I went through the Miri test suite to find more functions that would benefit from Miri backtrace pruning, and this is what I found.\n\nBasically anything that just exposes a potentially-UB intrinsic to the user should get this treatment.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e4342d118e2c9a6a3336970f1af76be0ad0920", "html_url": "https://github.com/rust-lang/rust/commit/d1e4342d118e2c9a6a3336970f1af76be0ad0920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1e4342d118e2c9a6a3336970f1af76be0ad0920/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb512888f353fd56be0074ab2b1f49da215ca440", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb512888f353fd56be0074ab2b1f49da215ca440", "html_url": "https://github.com/rust-lang/rust/commit/cb512888f353fd56be0074ab2b1f49da215ca440"}, {"sha": "d10a7b124378ac71f87ce271ddc33c36974d99a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10a7b124378ac71f87ce271ddc33c36974d99a3", "html_url": "https://github.com/rust-lang/rust/commit/d10a7b124378ac71f87ce271ddc33c36974d99a3"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "81b6d5737ea753d9dd867e3a97f37fba3a22b5c9", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=d1e4342d118e2c9a6a3336970f1af76be0ad0920", "patch": "@@ -96,6 +96,7 @@ use crate::intrinsics;\n #[inline]\n #[stable(feature = \"unreachable\", since = \"1.27.0\")]\n #[rustc_const_stable(feature = \"const_unreachable_unchecked\", since = \"1.57.0\")]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn unreachable_unchecked() -> ! {\n     // SAFETY: the safety contract for `intrinsics::unreachable` must\n     // be upheld by the caller."}, {"sha": "4a595902282db4e01e12c51a5d60a64df25c2bcc", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=d1e4342d118e2c9a6a3336970f1af76be0ad0920", "patch": "@@ -2449,6 +2449,7 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n #[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n #[inline]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n     extern \"rust-intrinsic\" {\n         #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n@@ -2535,6 +2536,7 @@ pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: us\n #[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n #[inline]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n     extern \"rust-intrinsic\" {\n         #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]"}, {"sha": "6dc8563c421fc99ecac9bbb4e657af3af045a074", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=d1e4342d118e2c9a6a3336970f1af76be0ad0920", "patch": "@@ -1124,6 +1124,7 @@ impl<T> fmt::Debug for Discriminant<T> {\n #[stable(feature = \"discriminant_value\", since = \"1.21.0\")]\n #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"mem_discriminant\")]\n+#[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n     Discriminant(intrinsics::discriminant_value(v))\n }"}, {"sha": "a66de19bad0edb636f8f2f649cd607203c2a8c64", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=d1e4342d118e2c9a6a3336970f1af76be0ad0920", "patch": "@@ -449,6 +449,7 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n+        #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n         pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_add`.\n@@ -517,6 +518,7 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n+        #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n         pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_sub`.\n@@ -585,6 +587,7 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n+        #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n         pub const unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_mul`.\n@@ -757,6 +760,7 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n+        #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n         pub const unsafe fn unchecked_shl(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shl`.\n@@ -803,6 +807,7 @@ macro_rules! int_impl {\n                       without modifying the original\"]\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n+        #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n         pub const unsafe fn unchecked_shr(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shr`."}, {"sha": "73365544233eb40815a87bea16d6abf8f8fe4360", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=d1e4342d118e2c9a6a3336970f1af76be0ad0920", "patch": "@@ -459,6 +459,7 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n+        #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n         pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_add`.\n@@ -528,6 +529,7 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n+        #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n         pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_sub`.\n@@ -574,6 +576,7 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n+        #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n         pub const unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_mul`.\n@@ -933,6 +936,7 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n+        #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n         pub const unsafe fn unchecked_shl(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shl`.\n@@ -979,6 +983,7 @@ macro_rules! uint_impl {\n                       without modifying the original\"]\n         #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n+        #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n         pub const unsafe fn unchecked_shr(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_shr`."}, {"sha": "e289a8e6bd5f9dd83c3d25fe8dd684a94da02e8e", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=d1e4342d118e2c9a6a3336970f1af76be0ad0920", "patch": "@@ -449,6 +449,7 @@ impl<T: ?Sized> *const T {\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn offset(self, count: isize) -> *const T\n     where\n         T: Sized,\n@@ -471,6 +472,7 @@ impl<T: ?Sized> *const T {\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_offset(self, count: isize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n         let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n@@ -641,6 +643,7 @@ impl<T: ?Sized> *const T {\n     #[stable(feature = \"ptr_offset_from\", since = \"1.47.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n     #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn offset_from(self, origin: *const T) -> isize\n     where\n         T: Sized,\n@@ -663,6 +666,7 @@ impl<T: ?Sized> *const T {\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize {\n         // SAFETY: the caller must uphold the safety contract for `offset_from`.\n         unsafe { self.cast::<u8>().offset_from(origin.cast::<u8>()) }\n@@ -731,6 +735,7 @@ impl<T: ?Sized> *const T {\n     #[unstable(feature = \"ptr_sub_ptr\", issue = \"95892\")]\n     #[rustc_const_unstable(feature = \"const_ptr_sub_ptr\", issue = \"95892\")]\n     #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn sub_ptr(self, origin: *const T) -> usize\n     where\n         T: Sized,\n@@ -862,6 +867,7 @@ impl<T: ?Sized> *const T {\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn add(self, count: usize) -> Self\n     where\n         T: Sized,\n@@ -884,6 +890,7 @@ impl<T: ?Sized> *const T {\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_add(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `add`.\n         let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n@@ -946,6 +953,7 @@ impl<T: ?Sized> *const T {\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn sub(self, count: usize) -> Self\n     where\n         T: Sized,\n@@ -969,6 +977,7 @@ impl<T: ?Sized> *const T {\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_sub(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `sub`.\n         let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n@@ -1205,6 +1214,7 @@ impl<T: ?Sized> *const T {\n     #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn copy_to(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n@@ -1224,6 +1234,7 @@ impl<T: ?Sized> *const T {\n     #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n     where\n         T: Sized,"}, {"sha": "fc3dd2a9b25a9efd646ec0143265b028e702321c", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e4342d118e2c9a6a3336970f1af76be0ad0920/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=d1e4342d118e2c9a6a3336970f1af76be0ad0920", "patch": "@@ -461,6 +461,7 @@ impl<T: ?Sized> *mut T {\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn offset(self, count: isize) -> *mut T\n     where\n         T: Sized,\n@@ -485,6 +486,7 @@ impl<T: ?Sized> *mut T {\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_offset(self, count: isize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `offset`.\n         let this = unsafe { self.cast::<u8>().offset(count).cast::<()>() };\n@@ -824,6 +826,7 @@ impl<T: ?Sized> *mut T {\n     #[stable(feature = \"ptr_offset_from\", since = \"1.47.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"92980\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn offset_from(self, origin: *const T) -> isize\n     where\n         T: Sized,\n@@ -844,6 +847,7 @@ impl<T: ?Sized> *mut T {\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_offset_from(self, origin: *const T) -> isize {\n         // SAFETY: the caller must uphold the safety contract for `offset_from`.\n         unsafe { self.cast::<u8>().offset_from(origin.cast::<u8>()) }\n@@ -913,6 +917,7 @@ impl<T: ?Sized> *mut T {\n     #[unstable(feature = \"ptr_sub_ptr\", issue = \"95892\")]\n     #[rustc_const_unstable(feature = \"const_ptr_sub_ptr\", issue = \"95892\")]\n     #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn sub_ptr(self, origin: *const T) -> usize\n     where\n         T: Sized,\n@@ -976,6 +981,7 @@ impl<T: ?Sized> *mut T {\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn add(self, count: usize) -> Self\n     where\n         T: Sized,\n@@ -998,6 +1004,7 @@ impl<T: ?Sized> *mut T {\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_add(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `add`.\n         let this = unsafe { self.cast::<u8>().add(count).cast::<()>() };\n@@ -1060,6 +1067,7 @@ impl<T: ?Sized> *mut T {\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[rustc_const_stable(feature = \"const_ptr_offset\", since = \"1.61.0\")]\n     #[inline]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn sub(self, count: usize) -> Self\n     where\n         T: Sized,\n@@ -1083,6 +1091,7 @@ impl<T: ?Sized> *mut T {\n     #[inline(always)]\n     #[unstable(feature = \"pointer_byte_offsets\", issue = \"96283\")]\n     #[rustc_const_unstable(feature = \"const_pointer_byte_offsets\", issue = \"96283\")]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn byte_sub(self, count: usize) -> Self {\n         // SAFETY: the caller must uphold the safety contract for `sub`.\n         let this = unsafe { self.cast::<u8>().sub(count).cast::<()>() };\n@@ -1319,6 +1328,7 @@ impl<T: ?Sized> *mut T {\n     #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn copy_to(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n@@ -1338,6 +1348,7 @@ impl<T: ?Sized> *mut T {\n     #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn copy_to_nonoverlapping(self, dest: *mut T, count: usize)\n     where\n         T: Sized,\n@@ -1357,6 +1368,7 @@ impl<T: ?Sized> *mut T {\n     #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn copy_from(self, src: *const T, count: usize)\n     where\n         T: Sized,\n@@ -1376,6 +1388,7 @@ impl<T: ?Sized> *mut T {\n     #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n     #[inline(always)]\n+    #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub const unsafe fn copy_from_nonoverlapping(self, src: *const T, count: usize)\n     where\n         T: Sized,"}]}