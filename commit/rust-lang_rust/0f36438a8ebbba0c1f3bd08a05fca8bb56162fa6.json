{"sha": "0f36438a8ebbba0c1f3bd08a05fca8bb56162fa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMzY0MzhhOGViYmJhMGMxZjNiZDA4YTA1ZmNhOGJiNTYxNjJmYTY=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2014-01-24T11:46:19Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2014-01-24T11:46:19Z"}, "message": "Remove reexport field", "tree": {"sha": "8dee4a1abf4bf9a9271e171886c1b25956eb1906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dee4a1abf4bf9a9271e171886c1b25956eb1906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f36438a8ebbba0c1f3bd08a05fca8bb56162fa6", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f36438a8ebbba0c1f3bd08a05fca8bb56162fa6", "html_url": "https://github.com/rust-lang/rust/commit/0f36438a8ebbba0c1f3bd08a05fca8bb56162fa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f36438a8ebbba0c1f3bd08a05fca8bb56162fa6/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ce84fa1ded0b347e39f8f0830086f19a9cd720a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce84fa1ded0b347e39f8f0830086f19a9cd720a", "html_url": "https://github.com/rust-lang/rust/commit/4ce84fa1ded0b347e39f8f0830086f19a9cd720a"}], "stats": {"total": 17, "additions": 6, "deletions": 11}, "files": [{"sha": "526fb9e8d8660937f93ff069273d44054b07ecd3", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f36438a8ebbba0c1f3bd08a05fca8bb56162fa6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f36438a8ebbba0c1f3bd08a05fca8bb56162fa6/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=0f36438a8ebbba0c1f3bd08a05fca8bb56162fa6", "patch": "@@ -338,7 +338,7 @@ impl<'a> Visitor<()> for EmbargoVisitor<'a> {\n             let exp_map2 = self.exp_map2.borrow();\n             assert!(exp_map2.get().contains_key(&id), \"wut {:?}\", id);\n             for export in exp_map2.get().get(&id).iter() {\n-                if is_local(export.def_id) && export.reexport {\n+                if is_local(export.def_id) {\n                     self.reexports.insert(export.def_id.node);\n                 }\n             }"}, {"sha": "c69db10dc30e2e3ba8b9d395ad741d1c5caba505", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f36438a8ebbba0c1f3bd08a05fca8bb56162fa6/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f36438a8ebbba0c1f3bd08a05fca8bb56162fa6/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=0f36438a8ebbba0c1f3bd08a05fca8bb56162fa6", "patch": "@@ -55,7 +55,6 @@ pub type ExportMap2 = @RefCell<HashMap<NodeId, ~[Export2]>>;\n pub struct Export2 {\n     name: @str,        // The name of the target.\n     def_id: DefId,     // The definition of the target.\n-    reexport: bool,     // Whether this is a reexport.\n }\n \n // This set contains all exported definitions from external crates. The set does\n@@ -3364,22 +3363,19 @@ impl Resolver {\n                                    exports2: &mut ~[Export2],\n                                    name: Name,\n                                    namebindings: @NameBindings,\n-                                   ns: Namespace,\n-                                   reexport: bool) {\n+                                   ns: Namespace) {\n         match namebindings.def_for_namespace(ns) {\n             Some(d) => {\n-                debug!(\"(computing exports) YES: {} '{}' => {:?}\",\n-                       if reexport { ~\"reexport\" } else { ~\"export\"},\n+                debug!(\"(computing exports) YES: export '{}' => {:?}\",\n                        interner_get(name),\n                        def_id_of_def(d));\n                 exports2.push(Export2 {\n-                    reexport: reexport,\n                     name: interner_get(name),\n                     def_id: def_id_of_def(d)\n                 });\n             }\n             d_opt => {\n-                debug!(\"(computing reexports) NO: {:?}\", d_opt);\n+                debug!(\"(computing exports) NO: {:?}\", d_opt);\n             }\n         }\n     }\n@@ -3396,13 +3392,12 @@ impl Resolver {\n             for &ns in xs.iter() {\n                 match importresolution.target_for_namespace(ns) {\n                     Some(target) => {\n-                        debug!(\"(computing exports) maybe reexport '{}'\",\n+                        debug!(\"(computing exports) maybe export '{}'\",\n                                interner_get(*name));\n                         self.add_exports_of_namebindings(exports2,\n                                                          *name,\n                                                          target.bindings,\n-                                                         ns,\n-                                                         true)\n+                                                         ns)\n                     }\n                     _ => ()\n                 }"}]}