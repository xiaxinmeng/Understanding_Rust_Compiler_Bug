{"sha": "e41cdabc3e5fff02abfef513d3289370fae358b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MWNkYWJjM2U1ZmZmMDJhYmZlZjUxM2QzMjg5MzcwZmFlMzU4Yjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-22T11:21:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-22T11:21:59Z"}, "message": "Auto merge of #34408 - Manishearth:rollup, r=Manishearth\n\nRollup of 7 pull requests\n\n- Successful merges: #34190, #34363, #34367, #34383, #34387, #34394, #34404\n- Failed merges:", "tree": {"sha": "8c8de5f65c6796c558fd1a8d0f96031bc280499b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c8de5f65c6796c558fd1a8d0f96031bc280499b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e41cdabc3e5fff02abfef513d3289370fae358b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e41cdabc3e5fff02abfef513d3289370fae358b8", "html_url": "https://github.com/rust-lang/rust/commit/e41cdabc3e5fff02abfef513d3289370fae358b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e41cdabc3e5fff02abfef513d3289370fae358b8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ee3267af39aa95fed707c67acb656845eb8f365", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ee3267af39aa95fed707c67acb656845eb8f365", "html_url": "https://github.com/rust-lang/rust/commit/3ee3267af39aa95fed707c67acb656845eb8f365"}, {"sha": "c749a3e4b588ccc46d34e0c7b40a1e9a2f374c5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c749a3e4b588ccc46d34e0c7b40a1e9a2f374c5b", "html_url": "https://github.com/rust-lang/rust/commit/c749a3e4b588ccc46d34e0c7b40a1e9a2f374c5b"}], "stats": {"total": 234, "additions": 188, "deletions": 46}, "files": [{"sha": "c08e8d39154dc119d42e1acf0c9c9ae192867ee1", "filename": "configure", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/configure", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -1040,37 +1040,6 @@ if [ -n \"$CFG_ENABLE_CLANG\" ]\n then\n     case \"$CC\" in\n         (''|*clang)\n-        CFG_CLANG_REPORTED_VERSION=$($CFG_CC --version | grep version)\n-\n-        if echo $CFG_CLANG_REPORTED_VERSION | grep -q \"(based on LLVM \"; then\n-            CFG_CLANG_VERSION=$(echo $CFG_CLANG_REPORTED_VERSION | sed 's/.*(based on LLVM \\(.*\\))/\\1/')\n-        elif echo $CFG_CLANG_REPORTED_VERSION | grep -q \"Apple LLVM\"; then\n-            CFG_OSX_CLANG_VERSION=$(echo $CFG_CLANG_REPORTED_VERSION | sed 's/.*version \\(.*\\) .*/\\1/')\n-        else\n-            CFG_CLANG_VERSION=$(echo $CFG_CLANG_REPORTED_VERSION | sed 's/.*version \\(.*\\) .*/\\1/')\n-        fi\n-\n-        if [ -n \"$CFG_OSX_CLANG_VERSION\" ]\n-        then\n-            case $CFG_OSX_CLANG_VERSION in\n-                (7.0* | 7.1* | 7.2* | 7.3* | 8.0*)\n-                step_msg \"found ok version of APPLE CLANG: $CFG_OSX_CLANG_VERSION\"\n-                ;;\n-                (*)\n-                err \"bad APPLE CLANG version: $CFG_OSX_CLANG_VERSION, need >=7.0\"\n-                ;;\n-            esac\n-        else\n-            case $CFG_CLANG_VERSION in\n-                (3.2* | 3.3* | 3.4* | 3.5* | 3.6* | 3.7* | 3.8* | 3.9*)\n-                step_msg \"found ok version of CLANG: $CFG_CLANG_VERSION\"\n-                ;;\n-                (*)\n-                err \"bad CLANG version: $CFG_CLANG_VERSION, need >=3.0svn\"\n-                ;;\n-            esac\n-        fi\n-\n         if [ -z \"$CC\" ]\n         then\n             CFG_CC=\"clang\""}, {"sha": "06398fc094e8584fcf1704ff645c3cc456414e31", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -66,6 +66,34 @@ impl<T: fmt::Display> fmt::Display for Wrapping<T> {\n     }\n }\n \n+#[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n+impl<T: fmt::Binary> fmt::Binary for Wrapping<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n+#[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n+impl<T: fmt::Octal> fmt::Octal for Wrapping<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n+#[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n+impl<T: fmt::LowerHex> fmt::LowerHex for Wrapping<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n+#[stable(feature = \"wrapping_fmt\", since = \"1.11.0\")]\n+impl<T: fmt::UpperHex> fmt::UpperHex for Wrapping<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.0.fmt(f)\n+    }\n+}\n+\n mod wrapping;\n \n // All these modules are technically private and only exposed for libcoretest:"}, {"sha": "34dce44004823802e9e545dabd5658fde85efec2", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -1116,6 +1116,7 @@ fn cast_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, val: ConstVal, ty: ty::Ty)\n             ty::TyRawPtr(_) => {\n                 Err(ErrKind::UnimplementedConstVal(\"casting a bytestr to a raw ptr\"))\n             },\n+            ty::TyRef(..) => Err(ErrKind::UnimplementedConstVal(\"casting a bytestr to slice\")),\n             _ => Err(CannotCast),\n         },\n         _ => Err(CannotCast),"}, {"sha": "8ffbd6be41878a56fe329fd273248b2d9e3c00c1", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -143,8 +143,14 @@ pub fn load_attrs<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn record_extern_fqn(cx: &DocContext, did: DefId, kind: clean::TypeKind) {\n     if let Some(tcx) = cx.tcx_opt() {\n         let crate_name = tcx.sess.cstore.crate_name(did.krate).to_string();\n-        let relative = tcx.def_path(did).data.into_iter().map(|elem| {\n-            elem.data.to_string()\n+        let relative = tcx.def_path(did).data.into_iter().filter_map(|elem| {\n+            // extern blocks have an empty name\n+            let s = elem.data.to_string();\n+            if !s.is_empty() {\n+                Some(s)\n+            } else {\n+                None\n+            }\n         });\n         let fqn = once(crate_name).chain(relative).collect();\n         cx.renderinfo.borrow_mut().external_paths.insert(did, (fqn, kind));"}, {"sha": "0d390a87d2050ffbb915ebd1310b57c582fbd94b", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -1519,20 +1519,23 @@ impl<'a> Item<'a> {\n         // located, then we return `None`.\n         } else {\n             let cache = cache();\n-            let path = match cache.external_paths.get(&self.item.def_id) {\n+            let external_path = match cache.external_paths.get(&self.item.def_id) {\n                 Some(path) => path,\n                 None => return None,\n             };\n-            let root = match cache.extern_locations.get(&self.item.def_id.krate) {\n+            let mut path = match cache.extern_locations.get(&self.item.def_id.krate) {\n                 Some(&(_, Remote(ref s))) => s.to_string(),\n                 Some(&(_, Local)) => self.cx.root_path.clone(),\n                 Some(&(_, Unknown)) => return None,\n                 None => return None,\n             };\n-            Some(format!(\"{root}{path}/{file}?gotosrc={goto}\",\n-                         root = root,\n-                         path = path[..path.len() - 1].join(\"/\"),\n-                         file = item_path(shortty(self.item), self.item.name.as_ref().unwrap()),\n+            for item in &external_path[..external_path.len() - 1] {\n+                path.push_str(item);\n+                path.push_str(\"/\");\n+            }\n+            Some(format!(\"{path}{file}?gotosrc={goto}\",\n+                         path = path,\n+                         file = item_path(shortty(self.item), external_path.last().unwrap()),\n                          goto = self.item.def_id.index.as_usize()))\n         }\n     }"}, {"sha": "26cf8a3199d1bb5cff9438b94fc7946ebf3c7571", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -276,7 +276,7 @@ pub mod builtin {\n     /// // fn concat_idents!(new, fun, name) { } // not usable in this way!\n     /// # }\n     /// ```\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[unstable(feature = \"concat_idents\", issue = \"29599\")]\n     #[macro_export]\n     macro_rules! concat_idents {\n         ($($e:ident),*) => ({ /* compiler built-in */ })"}, {"sha": "371319a93d2f2440cf117f7b1d18991613fd7040", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -125,16 +125,25 @@ impl Thread {\n     }\n \n     pub fn sleep(dur: Duration) {\n-        let mut ts = libc::timespec {\n-            tv_sec: dur.as_secs() as libc::time_t,\n-            tv_nsec: dur.subsec_nanos() as libc::c_long,\n-        };\n+        let mut secs = dur.as_secs();\n+        let mut nsecs = dur.subsec_nanos() as libc::c_long;\n \n         // If we're awoken with a signal then the return value will be -1 and\n         // nanosleep will fill in `ts` with the remaining time.\n         unsafe {\n-            while libc::nanosleep(&ts, &mut ts) == -1 {\n-                assert_eq!(os::errno(), libc::EINTR);\n+            while secs > 0 || nsecs > 0 {\n+                let mut ts = libc::timespec {\n+                    tv_sec: cmp::min(libc::time_t::max_value() as u64, secs) as libc::time_t,\n+                    tv_nsec: nsecs,\n+                };\n+                secs -= ts.tv_sec as u64;\n+                if libc::nanosleep(&ts, &mut ts) == -1 {\n+                    assert_eq!(os::errno(), libc::EINTR);\n+                    secs += ts.tv_sec as u64;\n+                    nsecs = ts.tv_nsec;\n+                } else {\n+                    nsecs = 0;\n+                }\n             }\n         }\n     }"}, {"sha": "5feeb36b1e4d4f86a833270e19edbbedcbf2fbb8", "filename": "src/test/compile-fail/issue-23281.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Fcompile-fail%2Fissue-23281.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Fcompile-fail%2Fissue-23281.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23281.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+pub struct Struct;\n+\n+impl Struct {\n+    pub fn function(funs: Vec<Fn() -> ()>) {}\n+    //~^ ERROR the trait bound `std::ops::Fn() + 'static: std::marker::Sized` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "2f265b9112b9809be21c450095f950cead56a0bc", "filename": "src/test/run-pass/const-byte-str-cast.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Frun-pass%2Fconst-byte-str-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Frun-pass%2Fconst-byte-str-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-byte-str-cast.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deny(warnings)]\n+\n+pub fn main() {\n+    let _ = b\"x\" as &[u8];\n+}"}, {"sha": "8b06b02f3cba5fe791ae812c91c206d81d28011b", "filename": "src/test/run-pass/sleep.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Frun-pass%2Fsleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Frun-pass%2Fsleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsleep.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::thread::{self, sleep};\n+use std::time::Duration;\n+use std::sync::{Arc, Mutex};\n+use std::u64;\n+\n+fn main() {\n+    let finished = Arc::new(Mutex::new(false));\n+    let t_finished = finished.clone();\n+    thread::spawn(move || {\n+        sleep(Duration::new(u64::MAX, 0));\n+        *t_finished.lock().unwrap() = true;\n+    });\n+    sleep(Duration::from_millis(100));\n+    assert_eq!(*finished.lock().unwrap(), false);\n+}"}, {"sha": "72026b60856046504738a13befdf6a57ed71aef0", "filename": "src/test/rustdoc/auxiliary/issue-34274.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-34274.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-34274.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-34274.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    pub fn extern_c_fn();\n+}"}, {"sha": "94b7278e9904b2bfba32c4f0039d7c85ef632151", "filename": "src/test/rustdoc/auxiliary/src-links-external.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Frustdoc%2Fauxiliary%2Fsrc-links-external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Frustdoc%2Fauxiliary%2Fsrc-links-external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fsrc-links-external.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo;"}, {"sha": "971c89b1619ed3ff907d2c182415a044f395e6ca", "filename": "src/test/rustdoc/issue-34274.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Frustdoc%2Fissue-34274.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Frustdoc%2Fissue-34274.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-34274.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-34274.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate issue_34274;\n+\n+// @has foo/fn.extern_c_fn.html '//a/@href' '../issue_34274/fn.extern_c_fn.html?gotosrc='\n+pub use issue_34274::extern_c_fn;"}, {"sha": "e9db4f519ed979101a932cfd47628fa5ace09cbf", "filename": "src/test/rustdoc/src-links-external.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Frustdoc%2Fsrc-links-external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e41cdabc3e5fff02abfef513d3289370fae358b8/src%2Ftest%2Frustdoc%2Fsrc-links-external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-external.rs?ref=e41cdabc3e5fff02abfef513d3289370fae358b8", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:src-links-external.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate src_links_external;\n+\n+// @has foo/bar/index.html '//a/@href' '../src_links_external/index.html?gotosrc='\n+pub use src_links_external as bar;\n+\n+// @has foo/bar/struct.Foo.html '//a/@href' '../src_links_external/struct.Foo.html?gotosrc='"}]}