{"sha": "001e34e6e31503195d176a349bc9476681c79e7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMWUzNGU2ZTMxNTAzMTk1ZDE3NmEzNDliYzk0NzY2ODFjNzllN2Y=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-07-05T16:02:32Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-07-05T16:02:32Z"}, "message": "Clippy trivially_copy_pass_by_ref", "tree": {"sha": "facf2c398e8dd428225a84455437abf81a478ee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/facf2c398e8dd428225a84455437abf81a478ee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/001e34e6e31503195d176a349bc9476681c79e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/001e34e6e31503195d176a349bc9476681c79e7f", "html_url": "https://github.com/rust-lang/rust/commit/001e34e6e31503195d176a349bc9476681c79e7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/001e34e6e31503195d176a349bc9476681c79e7f/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec6f71576ace170fd306a68f77e5c5e9646d15be", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6f71576ace170fd306a68f77e5c5e9646d15be", "html_url": "https://github.com/rust-lang/rust/commit/ec6f71576ace170fd306a68f77e5c5e9646d15be"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "5a3ea5f5589e37f1779ec6bae0d28b3af96b7207", "filename": "crates/ra_hir/src/adt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fadt.rs?ref=001e34e6e31503195d176a349bc9476681c79e7f", "patch": "@@ -34,8 +34,8 @@ impl AdtDef {\n }\n \n impl Struct {\n-    pub(crate) fn variant_data(&self, db: &impl DefDatabase) -> Arc<VariantData> {\n-        db.struct_data(*self).variant_data.clone()\n+    pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n+        db.struct_data(self).variant_data.clone()\n     }\n }\n \n@@ -69,7 +69,7 @@ fn variants(enum_def: &ast::EnumDef) -> impl Iterator<Item = &ast::EnumVariant>\n \n impl EnumVariant {\n     pub(crate) fn source_impl(\n-        &self,\n+        self,\n         db: &(impl DefDatabase + AstDatabase),\n     ) -> Source<TreeArc<ast::EnumVariant>> {\n         let src = self.parent.source(db);\n@@ -81,7 +81,7 @@ impl EnumVariant {\n             .to_owned();\n         Source { file_id: src.file_id, ast }\n     }\n-    pub(crate) fn variant_data(&self, db: &impl DefDatabase) -> Arc<VariantData> {\n+    pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         db.enum_data(self.parent).variants[self.id].variant_data.clone()\n     }\n }"}, {"sha": "4e6131dce7258dbc95e81b1ca7544aaac34024e8", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=001e34e6e31503195d176a349bc9476681c79e7f", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         let body = self.func.body(db);\n         for e in body.exprs() {\n             if let (id, Expr::StructLit { path, fields, spread }) = e {\n-                self.validate_struct_literal(id, path, fields, spread, db);\n+                self.validate_struct_literal(id, path, fields, *spread, db);\n             }\n         }\n     }\n@@ -41,7 +41,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         id: ExprId,\n         _path: &Option<Path>,\n         fields: &[StructLitField],\n-        spread: &Option<ExprId>,\n+        spread: Option<ExprId>,\n         db: &impl HirDatabase,\n     ) {\n         if spread.is_some() {"}, {"sha": "5212b78ac349a36905f7e1e677c63c5deb2c7922", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=001e34e6e31503195d176a349bc9476681c79e7f", "patch": "@@ -359,8 +359,8 @@ impl AstItemDef<ast::TypeAliasDef> for TypeAliasId {\n }\n \n impl MacroCallId {\n-    pub fn debug_dump(&self, db: &impl AstDatabase) -> String {\n-        let loc = self.clone().loc(db);\n+    pub fn debug_dump(self, db: &impl AstDatabase) -> String {\n+        let loc = self.loc(db);\n         let node = loc.ast_id.to_node(db);\n         let syntax_str = node.syntax().text().chunks().collect::<Vec<_>>().join(\" \");\n "}, {"sha": "a23daabc282d6995e201bcc4563ae990a5563bf9", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=001e34e6e31503195d176a349bc9476681c79e7f", "patch": "@@ -85,7 +85,7 @@ enum BindingMode {\n }\n \n impl BindingMode {\n-    pub fn convert(annotation: &BindingAnnotation) -> BindingMode {\n+    pub fn convert(annotation: BindingAnnotation) -> BindingMode {\n         match annotation {\n             BindingAnnotation::Unannotated | BindingAnnotation::Mutable => BindingMode::Move,\n             BindingAnnotation::Ref => BindingMode::Ref(Mutability::Shared),\n@@ -778,7 +778,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let mode = if mode == &BindingAnnotation::Unannotated {\n                     default_bm\n                 } else {\n-                    BindingMode::convert(mode)\n+                    BindingMode::convert(*mode)\n                 };\n                 let inner_ty = if let Some(subpat) = subpat {\n                     self.infer_pat(*subpat, expected, default_bm)"}, {"sha": "10a6e0b1079cd3251a8f829d105cc88754168a2e", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=001e34e6e31503195d176a349bc9476681c79e7f", "patch": "@@ -58,7 +58,7 @@ impl CrateImplBlocks {\n \n     pub fn lookup_impl_blocks_for_trait<'a>(\n         &'a self,\n-        tr: &Trait,\n+        tr: Trait,\n     ) -> impl Iterator<Item = ImplBlock> + 'a {\n         self.impls_by_trait.get(&tr).into_iter().flat_map(|i| i.iter()).map(\n             move |(module_id, impl_id)| {\n@@ -68,8 +68,8 @@ impl CrateImplBlocks {\n         )\n     }\n \n-    fn collect_recursive(&mut self, db: &impl HirDatabase, module: &Module) {\n-        let module_impl_blocks = db.impls_in_module(module.clone());\n+    fn collect_recursive(&mut self, db: &impl HirDatabase, module: Module) {\n+        let module_impl_blocks = db.impls_in_module(module);\n \n         for (impl_id, _) in module_impl_blocks.impls.iter() {\n             let impl_block = ImplBlock::from_id(module_impl_blocks.module, impl_id);\n@@ -94,7 +94,7 @@ impl CrateImplBlocks {\n         }\n \n         for child in module.children(db) {\n-            self.collect_recursive(db, &child);\n+            self.collect_recursive(db, child);\n         }\n     }\n \n@@ -108,7 +108,7 @@ impl CrateImplBlocks {\n             impls_by_trait: FxHashMap::default(),\n         };\n         if let Some(module) = krate.root_module(db) {\n-            crate_impl_blocks.collect_recursive(db, &module);\n+            crate_impl_blocks.collect_recursive(db, module);\n         }\n         Arc::new(crate_impl_blocks)\n     }"}, {"sha": "2c60fefd614ea3b1eec75af47e489becae1672c1", "filename": "crates/ra_hir/src/ty/primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs?ref=001e34e6e31503195d176a349bc9476681c79e7f", "patch": "@@ -131,7 +131,7 @@ impl IntTy {\n         IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X128 }\n     }\n \n-    pub(crate) fn ty_to_string(&self) -> &'static str {\n+    pub(crate) fn ty_to_string(self) -> &'static str {\n         match (self.signedness, self.bitness) {\n             (Signedness::Signed, IntBitness::Xsize) => \"isize\",\n             (Signedness::Signed, IntBitness::X8) => \"i8\","}, {"sha": "cff4de316f31458976a92492ee9c459d4feee766", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=001e34e6e31503195d176a349bc9476681c79e7f", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn impls_for_trait_query(\n         impls.extend(db.impls_for_trait(dep.krate, trait_).iter());\n     }\n     let crate_impl_blocks = db.impls_in_crate(krate);\n-    impls.extend(crate_impl_blocks.lookup_impl_blocks_for_trait(&trait_));\n+    impls.extend(crate_impl_blocks.lookup_impl_blocks_for_trait(trait_));\n     impls.into_iter().collect::<Vec<_>>().into()\n }\n "}, {"sha": "97615b01f198b0918ee61006e3f9a86cc0d009f1", "filename": "crates/ra_ide_api/src/impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimpls.rs?ref=001e34e6e31503195d176a349bc9476681c79e7f", "patch": "@@ -65,7 +65,7 @@ fn impls_for_trait(\n \n     Some(\n         impls\n-            .lookup_impl_blocks_for_trait(&tr)\n+            .lookup_impl_blocks_for_trait(tr)\n             .map(|imp| NavigationTarget::from_impl_block(db, imp))\n             .collect(),\n     )"}, {"sha": "534009b98dfd28a46f6c139dfd5d7ab43f9bbc79", "filename": "crates/ra_ide_api/src/line_index_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_ide_api%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_ide_api%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fline_index_utils.rs?ref=001e34e6e31503195d176a349bc9476681c79e7f", "patch": "@@ -213,7 +213,7 @@ impl RunningLineCol {\n         self.col_adjust = TextUnit::from(0);\n     }\n \n-    fn adjust_col(&mut self, range: &TextRange) {\n+    fn adjust_col(&mut self, range: TextRange) {\n         self.col_adjust += range.len() - TextUnit::from(1);\n     }\n }\n@@ -244,7 +244,7 @@ pub fn translate_offset_with_edit(\n                         let clamp = offset.min(x.start());\n                         return res.to_line_col(clamp);\n                     } else {\n-                        res.adjust_col(x);\n+                        res.adjust_col(*x);\n                     }\n                 }\n             }"}, {"sha": "6603ff34d46dc8513a1be51e8c0645e1d97b01a7", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=001e34e6e31503195d176a349bc9476681c79e7f", "patch": "@@ -145,7 +145,7 @@ fn convert_ident(ident: &tt::Ident) -> TtToken {\n     TtToken { kind, is_joint_to_next: false, text: ident.text.clone() }\n }\n \n-fn convert_punct(p: &tt::Punct) -> TtToken {\n+fn convert_punct(p: tt::Punct) -> TtToken {\n     let kind = match p.char {\n         // lexer may produce compound tokens for these ones\n         '.' => T![.],\n@@ -167,6 +167,6 @@ fn convert_leaf(leaf: &tt::Leaf) -> TtToken {\n     match leaf {\n         tt::Leaf::Literal(l) => convert_literal(l),\n         tt::Leaf::Ident(ident) => convert_ident(ident),\n-        tt::Leaf::Punct(punct) => convert_punct(punct),\n+        tt::Leaf::Punct(punct) => convert_punct(*punct),\n     }\n }"}, {"sha": "46827639753c39e56d81bd0fa75ef8a96407ada4", "filename": "crates/ra_mbe/src/tt_cursor.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001e34e6e31503195d176a349bc9476681c79e7f/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs?ref=001e34e6e31503195d176a349bc9476681c79e7f", "patch": "@@ -170,20 +170,20 @@ impl<'a> TtCursor<'a> {\n         }\n     }\n \n-    fn eat_punct3(&mut self, p: &tt::Punct) -> Option<SmallVec<[tt::Punct; 3]>> {\n+    fn eat_punct3(&mut self, p: tt::Punct) -> Option<SmallVec<[tt::Punct; 3]>> {\n         let sec = *self.eat_punct()?;\n         let third = *self.eat_punct()?;\n-        Some(smallvec![*p, sec, third])\n+        Some(smallvec![p, sec, third])\n     }\n \n-    fn eat_punct2(&mut self, p: &tt::Punct) -> Option<SmallVec<[tt::Punct; 3]>> {\n+    fn eat_punct2(&mut self, p: tt::Punct) -> Option<SmallVec<[tt::Punct; 3]>> {\n         let sec = *self.eat_punct()?;\n-        Some(smallvec![*p, sec])\n+        Some(smallvec![p, sec])\n     }\n \n     fn eat_multi_char_punct<'b, I>(\n         &mut self,\n-        p: &tt::Punct,\n+        p: tt::Punct,\n         iter: &mut TokenPeek<'b, I>,\n     ) -> Option<SmallVec<[tt::Punct; 3]>>\n     where\n@@ -250,7 +250,7 @@ impl<'a> TtCursor<'a> {\n                 // But at this phase, some punct still is jointed.\n                 // So we by pass that check here.\n                 let mut peekable = TokenPeek::new(self.subtree.token_trees[self.pos..].iter());\n-                let puncts = self.eat_multi_char_punct(punct, &mut peekable);\n+                let puncts = self.eat_multi_char_punct(*punct, &mut peekable);\n                 let puncts = puncts.unwrap_or_else(|| smallvec![*punct]);\n \n                 Some(crate::Separator::Puncts(puncts))\n@@ -292,7 +292,7 @@ where\n         TokenPeek { iter: itertools::multipeek(iter) }\n     }\n \n-    pub fn current_punct2(&mut self, p: &tt::Punct) -> Option<((char, char), bool)> {\n+    pub fn current_punct2(&mut self, p: tt::Punct) -> Option<((char, char), bool)> {\n         if p.spacing != tt::Spacing::Joint {\n             return None;\n         }\n@@ -302,7 +302,7 @@ where\n         Some(((p.char, p1.char), p1.spacing == tt::Spacing::Joint))\n     }\n \n-    pub fn current_punct3(&mut self, p: &tt::Punct) -> Option<((char, char, char), bool)> {\n+    pub fn current_punct3(&mut self, p: tt::Punct) -> Option<((char, char, char), bool)> {\n         self.current_punct2(p).and_then(|((p0, p1), last_joint)| {\n             if !last_joint {\n                 None"}]}