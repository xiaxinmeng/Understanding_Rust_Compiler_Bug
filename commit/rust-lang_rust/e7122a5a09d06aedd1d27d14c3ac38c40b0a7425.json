{"sha": "e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MTIyYTVhMDlkMDZhZWRkMWQyN2QxNGMzYWMzOGM0MGIwYTc0MjU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-23T22:23:34Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-03-24T21:06:13Z"}, "message": "Change lint names to plurals", "tree": {"sha": "06a9c962cc18c1b6791ac58c37fb0f22db974fd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06a9c962cc18c1b6791ac58c37fb0f22db974fd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "html_url": "https://github.com/rust-lang/rust/commit/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc206a91c8b641b4eccd51541f59d96fabea877d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc206a91c8b641b4eccd51541f59d96fabea877d", "html_url": "https://github.com/rust-lang/rust/commit/dc206a91c8b641b4eccd51541f59d96fabea877d"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "6a65c991c95037b5d45be79dd7c191277a74960a", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -24,8 +24,8 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![doc(test(no_crate_inject))]\n \n-#![allow(trivial_cast)]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_casts)]\n+#![allow(trivial_numeric_casts)]\n #![feature(alloc)]\n #![feature(box_syntax)]\n #![feature(box_patterns)]"}, {"sha": "9e6dbce0325935da3737fe1c10cbf511c7afaa68", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -715,7 +715,7 @@ impl<T> UnsafeCell<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get(&self) -> *mut T {\n         // FIXME(#23542) Replace with type ascription.\n-        #![allow(trivial_cast)]\n+        #![allow(trivial_casts)]\n         &self.value as *const T as *mut T\n     }\n "}, {"sha": "aa0d0a1539a30e045ba424a52b1f4861da689629", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -834,7 +834,7 @@ impl<T> Pointer for *const T {\n impl<T> Pointer for *mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         // FIXME(#23542) Replace with type ascription.\n-        #![allow(trivial_cast)]\n+        #![allow(trivial_casts)]\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n@@ -843,7 +843,7 @@ impl<T> Pointer for *mut T {\n impl<'a, T> Pointer for &'a T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         // FIXME(#23542) Replace with type ascription.\n-        #![allow(trivial_cast)]\n+        #![allow(trivial_casts)]\n         Pointer::fmt(&(*self as *const T), f)\n     }\n }\n@@ -852,7 +852,7 @@ impl<'a, T> Pointer for &'a T {\n impl<'a, T> Pointer for &'a mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         // FIXME(#23542) Replace with type ascription.\n-        #![allow(trivial_cast)]\n+        #![allow(trivial_casts)]\n         Pointer::fmt(&(&**self as *const T), f)\n     }\n }"}, {"sha": "56d2eabc095a3f0f4aa538481a590fe12504df55", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -13,7 +13,7 @@\n // FIXME: #6220 Implement floating point formatting\n \n #![allow(unsigned_negation)]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n use fmt;\n use iter::IteratorExt;"}, {"sha": "2feb2f8b1e36372d8121b54f2167b631c2d04879", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -183,7 +183,7 @@ mod impls {\n \n                 fn hash_slice<H: Hasher>(data: &[$ty], state: &mut H) {\n                     // FIXME(#23542) Replace with type ascription.\n-                    #![allow(trivial_cast)]\n+                    #![allow(trivial_casts)]\n                     let newlen = data.len() * ::$ty::BYTES as usize;\n                     let ptr = data.as_ptr() as *const u8;\n                     state.write(unsafe { slice::from_raw_parts(ptr, newlen) })"}, {"sha": "1e6fb51a8a528e9d75bac0d6fa36da598104f057", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -314,7 +314,7 @@ pub fn drop<T>(_x: T) { }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n     // FIXME(#23542) Replace with type ascription.\n-    #![allow(trivial_cast)]\n+    #![allow(trivial_casts)]\n     ptr::read(src as *const T as *const U)\n }\n "}, {"sha": "efafce3fdefb04537a4b455af99ee20941e00ed9", "filename": "src/libcore/num/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi16.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -12,6 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"i16\")]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n int_module! { i16, 16 }"}, {"sha": "72b0236a8d2a4c12814ab55febe6f2cda730bbbe", "filename": "src/libcore/num/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi32.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -12,6 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"i32\")]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n int_module! { i32, 32 }"}, {"sha": "a64a4febd5a963448fab5c413646509871a896a6", "filename": "src/libcore/num/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi64.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -12,6 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"i64\")]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n int_module! { i64, 64 }"}, {"sha": "459814875ee0ee1686bfe88b502784a9139ce70a", "filename": "src/libcore/num/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fi8.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -12,6 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"i8\")]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n int_module! { i8, 8 }"}, {"sha": "675f568a96099e7c8728f498d5168845c64d5292", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![doc(hidden)]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n macro_rules! int_module { ($T:ty, $bits:expr) => (\n "}, {"sha": "9af51a36748263a2474b26e4c9fc5f7878afe3c8", "filename": "src/libcore/num/isize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fisize.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -16,7 +16,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"isize\")]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n #[cfg(target_pointer_width = \"32\")]\n int_module! { isize, 32 }"}, {"sha": "0eec875afc3bb15a47e1734bb62468f2bc6d8479", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -14,7 +14,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![allow(missing_docs)]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n use self::wrapping::{OverflowingOps, WrappingOps};\n "}, {"sha": "289c5dbd08ea0eb02bf6c028ff2ec62e79ca4e80", "filename": "src/libcore/num/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu16.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -12,6 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"u16\")]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n uint_module! { u16, i16, 16 }"}, {"sha": "6d0b6b0e5eaf9799a4f472bbc2efbbff8c8ea2c5", "filename": "src/libcore/num/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu32.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -12,6 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"u32\")]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n uint_module! { u32, i32, 32 }"}, {"sha": "bf8747fdb6e2f45461a50eeea9795a97e85ecb33", "filename": "src/libcore/num/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu64.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -12,6 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"u64\")]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n uint_module! { u64, i64, 64 }"}, {"sha": "05199735d4acb3f6aee6963963896308dab95ebd", "filename": "src/libcore/num/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fu8.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -12,6 +12,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"u8\")]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n uint_module! { u8, i8, 8 }"}, {"sha": "c22f31cc57ea84efba5238460fee13f32afd64ee", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![doc(hidden)]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n macro_rules! uint_module { ($T:ty, $T_SIGNED:ty, $bits:expr) => (\n "}, {"sha": "82dd3312782c554fdebaadb100d1d1c7df08d90f", "filename": "src/libcore/num/usize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibcore%2Fnum%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fusize.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -16,6 +16,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n #![doc(primitive = \"usize\")]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n uint_module! { usize, isize, ::isize::BITS }"}, {"sha": "a682fa8584176977d02ccb2b942fd91b4e62e2ab", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -10,7 +10,7 @@\n \n //! Generating numbers between two others.\n \n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_numeric_casts)]\n \n // this is surprisingly complicated to be both generic & correct\n "}, {"sha": "14bebe0cd915cf167803a01a40d41227e389c387", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -447,7 +447,7 @@ impl Rng for Isaac64Rng {\n \n     #[inline]\n     fn next_u64(&mut self) -> u64 {\n-        #![allow(trivial_numeric_cast)]\n+        #![allow(trivial_numeric_casts)]\n         if self.cnt == 0 {\n             // make some more numbers\n             self.isaac64();"}, {"sha": "e8af07e43815919ef4a23410a662770d90047409", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -47,8 +47,8 @@\n #![feature(into_cow)]\n #![cfg_attr(test, feature(test))]\n \n-#![allow(trivial_cast)]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_casts)]\n+#![allow(trivial_numeric_casts)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "2cc47f258f0764db771e1a7dd1feb00b51e9f092", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -101,13 +101,13 @@ declare_lint! {\n }\n \n declare_lint! {\n-    pub TRIVIAL_CAST,\n+    pub TRIVIAL_CASTS,\n     Warn,\n     \"detects trivial casts which could be removed\"\n }\n \n declare_lint! {\n-    pub TRIVIAL_NUMERIC_CAST,\n+    pub TRIVIAL_NUMERIC_CASTS,\n     Warn,\n     \"detects trivial casts of numeric types which could be removed\"\n }\n@@ -133,8 +133,8 @@ impl LintPass for HardwiredLints {\n             UNKNOWN_CRATE_TYPES,\n             VARIANT_SIZE_DIFFERENCES,\n             FAT_PTR_TRANSMUTES,\n-            TRIVIAL_CAST,\n-            TRIVIAL_NUMERIC_CAST\n+            TRIVIAL_CASTS,\n+            TRIVIAL_NUMERIC_CASTS\n         )\n     }\n }"}, {"sha": "8b57a48f3ce728355e345cb4b3415009ab00e885", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -1781,7 +1781,7 @@ impl LintPass for UnconditionalRecursion {\n     fn check_fn(&mut self, cx: &Context, fn_kind: visit::FnKind, _: &ast::FnDecl,\n                 blk: &ast::Block, sp: Span, id: ast::NodeId) {\n         // FIXME(#23542) Replace with type ascription.\n-        #![allow(trivial_cast)]\n+        #![allow(trivial_casts)]\n \n         type F = for<'tcx> fn(&ty::ctxt<'tcx>,\n                               ast::NodeId, ast::NodeId, ast::Ident, ast::NodeId) -> bool;"}, {"sha": "9d564fa56f54d88391f62a02fbe7690870f38d93", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -14,8 +14,8 @@\n #![allow(non_camel_case_types)]\n #![allow(non_snake_case)]\n #![allow(dead_code)]\n-#![allow(trivial_cast)]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_casts)]\n+#![allow(trivial_numeric_casts)]\n \n #![crate_name = \"rustc_llvm\"]\n #![unstable(feature = \"rustc_private\")]"}, {"sha": "99a64156d667b96d89a3cef297d4500ed0f6c33c", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -43,8 +43,8 @@\n #![feature(convert)]\n #![feature(path_relative_from)]\n \n-#![allow(trivial_cast)]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_casts)]\n+#![allow(trivial_numeric_casts)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "47aafa2251d9713dcc74a2eea5e9b163f46d0f6a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -1088,14 +1088,14 @@ fn check_cast<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>, cast: &CastCheck<'tcx>) {\n     if !ty::type_has_ty_infer(t_1) {\n         if let Ok(()) = coercion::mk_assignty(fcx, e, t_e, t_1) {\n             if ty::type_is_numeric(t_1) && ty::type_is_numeric(t_e) {\n-                fcx.tcx().sess.add_lint(lint::builtin::TRIVIAL_NUMERIC_CAST,\n+                fcx.tcx().sess.add_lint(lint::builtin::TRIVIAL_NUMERIC_CASTS,\n                                         e.id,\n                                         span,\n                                         format!(\"trivial numeric cast: `{}` as `{}`\",\n                                                 fcx.infcx().ty_to_string(t_e),\n                                                 fcx.infcx().ty_to_string(t_1)));\n             } else {\n-                fcx.tcx().sess.add_lint(lint::builtin::TRIVIAL_CAST,\n+                fcx.tcx().sess.add_lint(lint::builtin::TRIVIAL_CASTS,\n                                         e.id,\n                                         span,\n                                         format!(\"trivial cast: `{}` as `{}`\",\n@@ -4581,7 +4581,7 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                      ty: attr::IntType,\n                      disr: ty::Disr) -> bool {\n         fn uint_in_range(ccx: &CrateCtxt, ty: ast::UintTy, disr: ty::Disr) -> bool {\n-            #![allow(trivial_numeric_cast)]\n+            #![allow(trivial_numeric_casts)]\n \n             match ty {\n                 ast::TyU8 => disr as u8 as Disr == disr,\n@@ -4611,7 +4611,7 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                           id: ast::NodeId,\n                           hint: attr::ReprAttr)\n                           -> Vec<Rc<ty::VariantInfo<'tcx>>> {\n-        #![allow(trivial_numeric_cast)]\n+        #![allow(trivial_numeric_casts)]\n         use std::num::Int;\n \n         let rty = ty::node_id_to_type(ccx.tcx, id);"}, {"sha": "0d6ed91d5298139b1cdf5800d3e6ac20c08aaab4", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -2430,7 +2430,7 @@ macro_rules! to_json_impl_i64 {\n     ($($t:ty), +) => (\n         $(impl ToJson for $t {\n             fn to_json(&self) -> Json {\n-                #![allow(trivial_numeric_cast)]\n+                #![allow(trivial_numeric_casts)]\n                 Json::I64(*self as i64)\n             }\n         })+\n@@ -2443,7 +2443,7 @@ macro_rules! to_json_impl_u64 {\n     ($($t:ty), +) => (\n         $(impl ToJson for $t {\n             fn to_json(&self) -> Json {\n-                #![allow(trivial_numeric_cast)]\n+                #![allow(trivial_numeric_casts)]\n                 Json::U64(*self as u64)\n             }\n         })+"}, {"sha": "cca6bb747d43c5f2e66f0f43dcd2883fbc18345b", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -135,8 +135,8 @@\n #![feature(no_std)]\n #![no_std]\n \n-#![allow(trivial_cast)]\n-#![allow(trivial_numeric_cast)]\n+#![allow(trivial_casts)]\n+#![allow(trivial_numeric_casts)]\n #![deny(missing_docs)]\n \n #[cfg(test)] extern crate test;"}, {"sha": "a25a6451918d72e671784b951fab29d2a3b4c75b", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -262,7 +262,7 @@ pub mod rt {\n         (unsigned, $t:ty, $tag:expr) => (\n             impl ToSource for $t {\n                 fn to_source(&self) -> String {\n-                    #![allow(trivial_numeric_cast)]\n+                    #![allow(trivial_numeric_casts)]\n                     let lit = ast::LitInt(*self as u64, ast::UnsignedIntLit($tag));\n                     pprust::lit_to_string(&dummy_spanned(lit))\n                 }"}, {"sha": "0fee48a8c6c662ddeda75093ea52daf124096aae", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -10,7 +10,7 @@\n \n #![deny(unused_variables)]\n #![deny(unused_assignments)]\n-#![allow(dead_code, non_camel_case_types, trivial_numeric_cast)]\n+#![allow(dead_code, non_camel_case_types, trivial_numeric_casts)]\n \n fn f1(x: isize) {\n     //~^ ERROR unused variable: `x`"}, {"sha": "5a8772d61425fcb9176c7c69abe6368a900c34c1", "filename": "src/test/compile-fail/object-safety-by-value-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n-#![allow(trivial_cast)]\n+#![allow(trivial_casts)]\n \n trait Bar {\n     fn bar(self);"}, {"sha": "3119b865488e896b1a5cba0c195c2532778d72fa", "filename": "src/test/compile-fail/trivial_casts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test the trivial_cast and trivial_numeric_cast lints. For each error we also\n+// Test the trivial_casts and trivial_numeric_casts lints. For each error we also\n // check that the cast can be done using just coercion.\n \n-#![deny(trivial_cast, trivial_numeric_cast)]\n+#![deny(trivial_casts, trivial_numeric_casts)]\n \n trait Foo {\n     fn foo(&self) {}"}, {"sha": "3da1ba0f0451f0b047faa1b495496390bab50f62", "filename": "src/test/run-pass/trivial_casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Ftest%2Frun-pass%2Ftrivial_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7122a5a09d06aedd1d27d14c3ac38c40b0a7425/src%2Ftest%2Frun-pass%2Ftrivial_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial_casts.rs?ref=e7122a5a09d06aedd1d27d14c3ac38c40b0a7425", "patch": "@@ -10,7 +10,7 @@\n \n // Test that all coercions can actually be done using casts (modulo the lints).\n \n-#![allow(trivial_cast, trivial_numeric_cast)]\n+#![allow(trivial_casts, trivial_numeric_casts)]\n \n trait Foo {\n     fn foo(&self) {}"}]}