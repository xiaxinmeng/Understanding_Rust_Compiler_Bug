{"sha": "c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1Nzk5YjJhNzNiZDAzZDFkN2I0YTQzMmZhMGEwY2I5M2U3Mjg4ZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-03T11:37:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-03T11:37:52Z"}, "message": "Auto merge of #88618 - m-ou-se:rollup-6tss5z6, r=m-ou-se\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #88202 (Add an example for deriving PartialOrd on enums)\n - #88483 (Fix LLVM libunwind build for non-musl targets)\n - #88507 (Add test case for using `slice::fill` with MaybeUninit)\n - #88557 (small const generics cleanup)\n - #88579 (remove redundant / misplaced sentence from docs)\n - #88610 (Update outdated docs of array::IntoIter::new.)\n - #88613 (Update primitive docs for rust 2021.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0807b5304f8039c18a4cd8fde6b4335a389f2172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0807b5304f8039c18a4cd8fde6b4335a389f2172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "html_url": "https://github.com/rust-lang/rust/commit/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4e417953920e198f4bc1421ce9e38fd8a85fbca", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e417953920e198f4bc1421ce9e38fd8a85fbca", "html_url": "https://github.com/rust-lang/rust/commit/e4e417953920e198f4bc1421ce9e38fd8a85fbca"}, {"sha": "2ce74b0bc09cef713ad27a700d5ecaaa676c4eba", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce74b0bc09cef713ad27a700d5ecaaa676c4eba", "html_url": "https://github.com/rust-lang/rust/commit/2ce74b0bc09cef713ad27a700d5ecaaa676c4eba"}], "stats": {"total": 120, "additions": 64, "deletions": 56}, "files": [{"sha": "57b8a84300ff9e0db5464fc1759d913c0b6ae9c9", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "patch": "@@ -820,10 +820,10 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             }\n         }\n \n-        fn visit_const(&mut self, ct: &ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            // First check if the type of this constant references `Self`.\n-            self.visit_ty(ct.ty)?;\n-\n+        fn visit_unevaluated_const(\n+            &mut self,\n+            uv: ty::Unevaluated<'tcx>,\n+        ) -> ControlFlow<Self::BreakTy> {\n             // Constants can only influence object safety if they reference `Self`.\n             // This is only possible for unevaluated constants, so we walk these here.\n             //\n@@ -837,7 +837,7 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n             // This shouldn't really matter though as we can't really use any\n             // constants which are not considered const evaluatable.\n             use rustc_middle::mir::abstract_const::Node;\n-            if let Ok(Some(ct)) = AbstractConst::from_const(self.tcx, ct) {\n+            if let Ok(Some(ct)) = AbstractConst::new(self.tcx, uv.shrink()) {\n                 const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node.root() {\n                     Node::Leaf(leaf) => {\n                         let leaf = leaf.subst(self.tcx, ct.substs);\n@@ -852,31 +852,6 @@ fn contains_illegal_self_type_reference<'tcx, T: TypeFoldable<'tcx>>(\n                 ControlFlow::CONTINUE\n             }\n         }\n-\n-        fn visit_predicate(&mut self, pred: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n-            if let ty::PredicateKind::ConstEvaluatable(ct) = pred.kind().skip_binder() {\n-                // FIXME(generic_const_exprs): We should probably deduplicate the logic for\n-                // `AbstractConst`s here, it might make sense to change `ConstEvaluatable` to\n-                // take a `ty::Const` instead.\n-                use rustc_middle::mir::abstract_const::Node;\n-                if let Ok(Some(ct)) = AbstractConst::new(self.tcx, ct) {\n-                    const_evaluatable::walk_abstract_const(self.tcx, ct, |node| match node.root() {\n-                        Node::Leaf(leaf) => {\n-                            let leaf = leaf.subst(self.tcx, ct.substs);\n-                            self.visit_const(leaf)\n-                        }\n-                        Node::Cast(_, _, ty) => self.visit_ty(ty),\n-                        Node::Binop(..) | Node::UnaryOp(..) | Node::FunctionCall(_, _) => {\n-                            ControlFlow::CONTINUE\n-                        }\n-                    })\n-                } else {\n-                    ControlFlow::CONTINUE\n-                }\n-            } else {\n-                pred.super_visit_with(self)\n-            }\n-        }\n     }\n \n     value"}, {"sha": "0e96601d89fd8d91204a0ee3af63b69c60fbd0c0", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "patch": "@@ -120,7 +120,7 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n     // Luckily the only types contained in default substs are type\n     // parameters which don't matter here.\n     //\n-    // FIXME(const_generics): Once more complex const parameter types\n+    // FIXME(adt_const_params): Once complex const parameter types\n     // are allowed, this might be incorrect. I think that we will still be\n     // fine, as all outlives relations of the const param types should also\n     // be part of the adt containing it, but we should still both update the"}, {"sha": "ecdbf09881985a9ee7e4ab997c3750994a6142cd", "filename": "library/core/src/array/iter.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/library%2Fcore%2Fsrc%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fiter.rs?ref=c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "patch": "@@ -37,7 +37,7 @@ impl<T, const N: usize> IntoIter<T, N> {\n     /// Creates a new iterator over the given `array`.\n     ///\n     /// *Note*: this method might be deprecated in the future,\n-    /// after [`IntoIterator` is implemented for arrays][array-into-iter].\n+    /// since [`IntoIterator`] is now implemented for arrays.\n     ///\n     /// # Examples\n     ///\n@@ -48,8 +48,13 @@ impl<T, const N: usize> IntoIter<T, N> {\n     ///     // The type of `value` is an `i32` here, instead of `&i32`\n     ///     let _: i32 = value;\n     /// }\n+    ///\n+    /// // Since Rust 1.53, arrays implement IntoIterator directly:\n+    /// for value in [1, 2, 3, 4, 5] {\n+    ///     // The type of `value` is an `i32` here, instead of `&i32`\n+    ///     let _: i32 = value;\n+    /// }\n     /// ```\n-    /// [array-into-iter]: https://github.com/rust-lang/rust/pull/65819\n     #[stable(feature = \"array_value_iter\", since = \"1.51.0\")]\n     pub fn new(array: [T; N]) -> Self {\n         // SAFETY: The transmute here is actually safe. The docs of `MaybeUninit`"}, {"sha": "4e82b65539460eeaffeb71fe8839a79c93359548", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "patch": "@@ -660,6 +660,18 @@ impl<T: Clone> Clone for Reverse<T> {\n /// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n /// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering based on the top-to-bottom declaration order of the struct's members.\n /// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n+/// This means variants at the top are less than variants at the bottom.\n+/// Here's an example:\n+///\n+/// ```\n+/// #[derive(PartialEq, PartialOrd)]\n+/// enum Size {\n+///     Small,\n+///     Large,\n+/// }\n+///\n+/// assert!(Size::Small < Size::Large);\n+/// ```\n ///\n /// ## Lexicographical comparison\n ///"}, {"sha": "014170604ecaa573230c0de95f0d19709a694186", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "patch": "@@ -182,10 +182,6 @@ mod mut_ptr;\n /// // Ensure that the last item was dropped.\n /// assert!(weak.upgrade().is_none());\n /// ```\n-///\n-/// Notice that the compiler performs this copy automatically when dropping packed structs,\n-/// i.e., you do not usually have to worry about such issues unless you call `drop_in_place`\n-/// manually.\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n #[lang = \"drop_in_place\"]\n #[allow(unconditional_recursion)]"}, {"sha": "c591dd3e1a6dbbca75aa3af7e1266f25affae5f0", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "patch": "@@ -1,5 +1,6 @@\n use core::cell::Cell;\n use core::cmp::Ordering;\n+use core::mem::MaybeUninit;\n use core::result::Result::{Err, Ok};\n \n #[test]\n@@ -2144,3 +2145,10 @@ fn test_slice_run_destructors() {\n \n     assert_eq!(x.get(), 1);\n }\n+\n+#[test]\n+fn test_slice_fill_with_uninit() {\n+    // This should not UB. See #87891\n+    let mut a = [MaybeUninit::<u8>::uninit(); 10];\n+    a.fill(MaybeUninit::uninit());\n+}"}, {"sha": "261d0e648e2ef3df066bcecb92c7c7cf9cb1aa9e", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "patch": "@@ -581,6 +581,8 @@ mod prim_pointer {}\n /// might be made consistent to the behavior of later editions.\n ///\n /// ```rust,edition2018\n+/// // Rust 2015 and 2018:\n+///\n /// # #![allow(array_into_iter)] // override our `deny(warnings)`\n /// let array: [i32; 3] = [0; 3];\n ///\n@@ -604,11 +606,13 @@ mod prim_pointer {}\n /// }\n /// ```\n ///\n-/// Starting in the 2021 edition, `array.into_iter()` will use `IntoIterator` normally to iterate\n+/// Starting in the 2021 edition, `array.into_iter()` uses `IntoIterator` normally to iterate\n /// by value, and `iter()` should be used to iterate by reference like previous editions.\n ///\n-/// ```rust,edition2021,ignore\n-/// # // FIXME: ignored because 2021 testing is still unstable\n+#[cfg_attr(bootstrap, doc = \"```rust,edition2021,ignore\")]\n+#[cfg_attr(not(bootstrap), doc = \"```rust,edition2021\")]\n+/// // Rust 2021:\n+///\n /// let array: [i32; 3] = [0; 3];\n ///\n /// // This iterates by reference:\n@@ -631,12 +635,12 @@ mod prim_pointer {}\n /// avoid the `into_iter` syntax on those editions. If an edition update is not\n /// viable/desired, there are multiple alternatives:\n /// * use `iter`, equivalent to the old behavior, creating references\n-/// * use [`array::IntoIter`], equivalent to the post-2021 behavior (Rust 1.51+)\n+/// * use [`IntoIterator::into_iter`], equivalent to the post-2021 behavior (Rust 1.53+)\n /// * replace `for ... in array.into_iter() {` with `for ... in array {`,\n ///   equivalent to the post-2021 behavior (Rust 1.53+)\n ///\n /// ```rust,edition2018\n-/// use std::array::IntoIter;\n+/// // Rust 2015 and 2018:\n ///\n /// let array: [i32; 3] = [0; 3];\n ///\n@@ -647,7 +651,7 @@ mod prim_pointer {}\n /// }\n ///\n /// // This iterates by value:\n-/// for item in IntoIter::new(array) {\n+/// for item in IntoIterator::into_iter(array) {\n ///     let x: i32 = item;\n ///     println!(\"{}\", x);\n /// }\n@@ -660,7 +664,7 @@ mod prim_pointer {}\n ///\n /// // IntoIter can also start a chain.\n /// // This iterates by value:\n-/// for item in IntoIter::new(array).enumerate() {\n+/// for item in IntoIterator::into_iter(array).enumerate() {\n ///     let (i, x): (usize, i32) = item;\n ///     println!(\"array[{}] = {}\", i, x);\n /// }"}, {"sha": "df9e9bce415276245571bf083e0608ee390e1d88", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=c5799b2a73bd03d1d7b4a432fa0a0cb93e7288db", "patch": "@@ -142,6 +142,14 @@ fn copy_and_stamp(\n     target_deps.push((target, dependency_type));\n }\n \n+fn copy_llvm_libunwind(builder: &Builder<'_>, target: TargetSelection, libdir: &Path) -> PathBuf {\n+    let libunwind_path = builder.ensure(native::Libunwind { target });\n+    let libunwind_source = libunwind_path.join(\"libunwind.a\");\n+    let libunwind_target = libdir.join(\"libunwind.a\");\n+    builder.copy(&libunwind_source, &libunwind_target);\n+    libunwind_target\n+}\n+\n /// Copies third party objects needed by various targets.\n fn copy_third_party_objects(\n     builder: &Builder<'_>,\n@@ -167,6 +175,15 @@ fn copy_third_party_objects(\n         );\n     }\n \n+    if target == \"x86_64-fortanix-unknown-sgx\"\n+        || builder.config.llvm_libunwind == LlvmLibunwind::InTree\n+            && (target.contains(\"linux\") || target.contains(\"fuchsia\"))\n+    {\n+        let libunwind_path =\n+            copy_llvm_libunwind(builder, target, &builder.sysroot_libdir(*compiler, target));\n+        target_deps.push((libunwind_path, DependencyType::Target));\n+    }\n+\n     target_deps\n }\n \n@@ -208,6 +225,9 @@ fn copy_self_contained_objects(\n             builder.copy(&src, &target);\n             target_deps.push((target, DependencyType::TargetSelfContained));\n         }\n+\n+        let libunwind_path = copy_llvm_libunwind(builder, target, &libdir_self_contained);\n+        target_deps.push((libunwind_path, DependencyType::TargetSelfContained));\n     } else if target.ends_with(\"-wasi\") {\n         let srcdir = builder\n             .wasi_root(target)\n@@ -234,18 +254,6 @@ fn copy_self_contained_objects(\n         }\n     }\n \n-    if target.contains(\"musl\")\n-        || target.contains(\"x86_64-fortanix-unknown-sgx\")\n-        || builder.config.llvm_libunwind == LlvmLibunwind::InTree\n-            && (target.contains(\"linux\") || target.contains(\"fuchsia\"))\n-    {\n-        let libunwind_path = builder.ensure(native::Libunwind { target });\n-        let libunwind_source = libunwind_path.join(\"libunwind.a\");\n-        let libunwind_target = libdir_self_contained.join(\"libunwind.a\");\n-        builder.copy(&libunwind_source, &libunwind_target);\n-        target_deps.push((libunwind_target, DependencyType::TargetSelfContained));\n-    }\n-\n     target_deps\n }\n "}]}