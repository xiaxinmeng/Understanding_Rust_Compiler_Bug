{"sha": "020d7af949127d71572ef6f3114ca8db0aec30ca", "node_id": "C_kwDOAAsO6NoAKDAyMGQ3YWY5NDkxMjdkNzE1NzJlZjZmMzExNGNhOGRiMGFlYzMwY2E", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-10T08:24:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-10T08:24:43Z"}, "message": "Rollup merge of #105082 - Swatinem:async-abi, r=compiler-errors\n\nFix Async Generator ABI\n\nThis change was missed when making async generators implement `Future` directly.\nIt did not cause any problems in codegen so far, as `GeneratorState<(), Output>`\nhappens to have the same ABI as `Poll<Output>`.", "tree": {"sha": "42ad18f4ca4a9dc53a4a9ce020372c4b80124205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42ad18f4ca4a9dc53a4a9ce020372c4b80124205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/020d7af949127d71572ef6f3114ca8db0aec30ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjlEJLCRBK7hj4Ov3rIwAAqSgIAE53roTpGLgALViPyTyx1cTT\nhJAt07eU4AjOF5IS9sBWZtP1VDvSL/ypXqePismAHT2edhWd1hZpSegNVr5j53Oa\nJBuEKX7DIS63QtaywcZfNahybELy/zgye8SWwvF+5skjzSgg/SuzQsB6YnZb02w7\nyZGzcu6Tn9CmoeKzmSR89VVEp1qrLB/MSOuUf0pxMru7GxsyzbLxtSkk3NHr8QRR\nLcdwp7LBOixu2Ld4GMctUOuMhhfJJJQqN7uUjsxi3ABhEsqSWoFvHBKkIeJvKh7v\nYqVLdZYeLr+NpgjMrm9igt1+54eojLEla+Syls5JprNBQ+vWIFo8dh+tyqz+YTI=\n=UEjC\n-----END PGP SIGNATURE-----\n", "payload": "tree 42ad18f4ca4a9dc53a4a9ce020372c4b80124205\nparent eb1159cbd811301fc6a681934ba930cf00bc85fa\nparent ecf812777a260e35ec9cd0c7d9dbd17a3f5cf5f9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670660683 +0100\ncommitter GitHub <noreply@github.com> 1670660683 +0100\n\nRollup merge of #105082 - Swatinem:async-abi, r=compiler-errors\n\nFix Async Generator ABI\n\nThis change was missed when making async generators implement `Future` directly.\nIt did not cause any problems in codegen so far, as `GeneratorState<(), Output>`\nhappens to have the same ABI as `Poll<Output>`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/020d7af949127d71572ef6f3114ca8db0aec30ca", "html_url": "https://github.com/rust-lang/rust/commit/020d7af949127d71572ef6f3114ca8db0aec30ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/020d7af949127d71572ef6f3114ca8db0aec30ca/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb1159cbd811301fc6a681934ba930cf00bc85fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1159cbd811301fc6a681934ba930cf00bc85fa", "html_url": "https://github.com/rust-lang/rust/commit/eb1159cbd811301fc6a681934ba930cf00bc85fa"}, {"sha": "ecf812777a260e35ec9cd0c7d9dbd17a3f5cf5f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf812777a260e35ec9cd0c7d9dbd17a3f5cf5f9", "html_url": "https://github.com/rust-lang/rust/commit/ecf812777a260e35ec9cd0c7d9dbd17a3f5cf5f9"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "d644cbccea11b2df6c5080a2191ad3c1c8b8f4f1", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/020d7af949127d71572ef6f3114ca8db0aec30ca/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020d7af949127d71572ef6f3114ca8db0aec30ca/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=020d7af949127d71572ef6f3114ca8db0aec30ca", "patch": "@@ -85,7 +85,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n                 bound_vars,\n             )\n         }\n-        ty::Generator(_, substs, _) => {\n+        ty::Generator(did, substs, _) => {\n             let sig = substs.as_generator().poly_sig();\n \n             let bound_vars = tcx.mk_bound_variable_kinds(\n@@ -104,10 +104,22 @@ fn fn_sig_for_fn_abi<'tcx>(\n             let env_ty = tcx.mk_adt(pin_adt_ref, pin_substs);\n \n             let sig = sig.skip_binder();\n-            let state_did = tcx.require_lang_item(LangItem::GeneratorState, None);\n-            let state_adt_ref = tcx.adt_def(state_did);\n-            let state_substs = tcx.intern_substs(&[sig.yield_ty.into(), sig.return_ty.into()]);\n-            let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n+            // The `FnSig` and the `ret_ty` here is for a generators main\n+            // `Generator::resume(...) -> GeneratorState` function in case we\n+            // have an ordinary generator, or the `Future::poll(...) -> Poll`\n+            // function in case this is a special generator backing an async construct.\n+            let ret_ty = if tcx.generator_is_async(did) {\n+                let state_did = tcx.require_lang_item(LangItem::Poll, None);\n+                let state_adt_ref = tcx.adt_def(state_did);\n+                let state_substs = tcx.intern_substs(&[sig.return_ty.into()]);\n+                tcx.mk_adt(state_adt_ref, state_substs)\n+            } else {\n+                let state_did = tcx.require_lang_item(LangItem::GeneratorState, None);\n+                let state_adt_ref = tcx.adt_def(state_did);\n+                let state_substs = tcx.intern_substs(&[sig.yield_ty.into(), sig.return_ty.into()]);\n+                tcx.mk_adt(state_adt_ref, state_substs)\n+            };\n+\n             ty::Binder::bind_with_vars(\n                 tcx.mk_fn_sig(\n                     [env_ty, sig.resume_ty].iter(),"}]}