{"sha": "35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZTIxMzQ2MjE2Y2M0YzVhM2IyMmJiNmZiMzE2ZjhjODY3ZjhjOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-08T16:01:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-08T16:01:41Z"}, "message": "auto merge of #15521 : nick29581/rust/type, r=pcwalton\n\ncloses #13367\r\n\r\n[breaking-change] Use `Sized?` to indicate a dynamically sized type parameter or trait (used to be `type`). E.g.,\r\n\r\n```\r\ntrait Tr for Sized? {}\r\n\r\nfn foo<Sized? X: Share>(x: X) {}\r\n```", "tree": {"sha": "91a55f3e794601b9b0ae06e7742ba8a867ad705f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a55f3e794601b9b0ae06e7742ba8a867ad705f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "html_url": "https://github.com/rust-lang/rust/commit/35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe4ddfdea45533c98657701509bb7185fd96cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe4ddfdea45533c98657701509bb7185fd96cba", "html_url": "https://github.com/rust-lang/rust/commit/bfe4ddfdea45533c98657701509bb7185fd96cba"}, {"sha": "a0cfda53c4b7367f6494e3d746b35cea644ee50d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0cfda53c4b7367f6494e3d746b35cea644ee50d", "html_url": "https://github.com/rust-lang/rust/commit/a0cfda53c4b7367f6494e3d746b35cea644ee50d"}], "stats": {"total": 393, "additions": 215, "deletions": 178}, "files": [{"sha": "9bff6620aaafd624aea35b1acb4a7bd9f2c1f23e", "filename": "src/librustc/front/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fconfig.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -109,12 +109,12 @@ fn fold_item_underscore(cx: &mut Context, item: &ast::Item_) -> ast::Item_ {\n                 .map(|x| *x).collect();\n             ast::ItemImpl((*a).clone(), (*b).clone(), c, methods)\n         }\n-        ast::ItemTrait(ref a, b, ref c, ref methods) => {\n+        ast::ItemTrait(ref a, ref b, ref c, ref methods) => {\n             let methods = methods.iter()\n                                  .filter(|m| trait_method_in_cfg(cx, *m) )\n                                  .map(|x| (*x).clone())\n                                  .collect();\n-            ast::ItemTrait((*a).clone(), b, (*c).clone(), methods)\n+            ast::ItemTrait((*a).clone(), (*b).clone(), (*c).clone(), methods)\n         }\n         ast::ItemStruct(ref def, ref generics) => {\n             ast::ItemStruct(fold_struct(cx, &**def), generics.clone())"}, {"sha": "d16f24a0ad1b402d02f83d2a338beb846dbd9324", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -164,19 +164,6 @@ fn item_visibility(item: ebml::Doc) -> ast::Visibility {\n     }\n }\n \n-fn item_sized(item: ebml::Doc) -> ast::Sized {\n-    match reader::maybe_get_doc(item, tag_items_data_item_sized) {\n-        None => ast::StaticSize,\n-        Some(sized_doc) => {\n-            match reader::doc_as_u8(sized_doc) as char {\n-                'd' => ast::DynSize,\n-                's' => ast::StaticSize,\n-                _ => fail!(\"unknown sized-ness character\")\n-            }\n-        }\n-    }\n-}\n-\n fn item_method_sort(item: ebml::Doc) -> char {\n     let mut ret = 'r';\n     reader::tagged_docs(item, tag_item_trait_method_sort, |doc| {\n@@ -393,7 +380,6 @@ pub fn get_trait_def(cdata: Cmd,\n     let tp_defs = item_ty_param_defs(item_doc, tcx, cdata,\n                                      tag_items_data_item_ty_param_bounds);\n     let rp_defs = item_region_param_defs(item_doc, cdata);\n-    let sized = item_sized(item_doc);\n     let mut bounds = ty::empty_builtin_bounds();\n     // Collect the builtin bounds from the encoded supertraits.\n     // FIXME(#8559): They should be encoded directly.\n@@ -405,12 +391,6 @@ pub fn get_trait_def(cdata: Cmd,\n         });\n         true\n     });\n-    // Turn sized into a bound, FIXME(#8559).\n-    if sized == ast::StaticSize {\n-        tcx.lang_items.to_builtin_kind(tcx.lang_items.sized_trait().unwrap()).map(|bound| {\n-            bounds.add(bound);\n-        });\n-    }\n \n     ty::TraitDef {\n         generics: ty::Generics {types: tp_defs,"}, {"sha": "0ec9e31872b60e3fc58b9c83639f8fcf2fa65c90", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -881,16 +881,6 @@ fn encode_extension_implementations(ecx: &EncodeContext,\n     }\n }\n \n-fn encode_sized(ebml_w: &mut Encoder, sized: Sized) {\n-    ebml_w.start_tag(tag_items_data_item_sized);\n-    let ch = match sized {\n-        DynSize => 'd',\n-        StaticSize => 's',\n-    };\n-    ebml_w.wr_str(str::from_char(ch).as_slice());\n-    ebml_w.end_tag();\n-}\n-\n fn encode_stability(ebml_w: &mut Encoder, stab_opt: Option<attr::Stability>) {\n     stab_opt.map(|stab| {\n         ebml_w.start_tag(tag_items_data_item_stability);\n@@ -1149,7 +1139,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                                    ast_method)\n         }\n       }\n-      ItemTrait(_, sized, ref super_traits, ref ms) => {\n+      ItemTrait(_, _, ref super_traits, ref ms) => {\n         add_to_index(item, ebml_w, index);\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, def_id);\n@@ -1163,9 +1153,6 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_trait_ref(ebml_w, ecx, &*trait_def.trait_ref, tag_item_trait_ref);\n         encode_name(ebml_w, item.ident.name);\n         encode_attributes(ebml_w, item.attrs.as_slice());\n-        // When we fix the rest of the supertrait nastiness (FIXME(#8559)), we\n-        // should no longer need this ugly little hack either.\n-        encode_sized(ebml_w, sized);\n         encode_visibility(ebml_w, vis);\n         encode_stability(ebml_w, stab);\n         for &method_def_id in ty::trait_method_def_ids(tcx, def_id).iter() {"}, {"sha": "c2f4d2ff6b1e8d1c9252b4949d8c66f6cdd0daec", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -3598,6 +3598,7 @@ impl<'a> Resolver<'a> {\n                                                                item.id,\n                                                                ItemRibKind),\n                                              |this| {\n+                    this.resolve_type_parameters(&generics.ty_params);\n                     visit::walk_item(this, item, ());\n                 });\n             }\n@@ -3623,7 +3624,7 @@ impl<'a> Resolver<'a> {\n                                             methods.as_slice());\n             }\n \n-            ItemTrait(ref generics, _, ref traits, ref methods) => {\n+            ItemTrait(ref generics, ref unbound, ref traits, ref methods) => {\n                 // Create a new rib for the self type.\n                 let self_type_rib = Rib::new(ItemRibKind);\n \n@@ -3645,6 +3646,12 @@ impl<'a> Resolver<'a> {\n                     for trt in traits.iter() {\n                         this.resolve_trait_reference(item.id, trt, TraitDerivation);\n                     }\n+                    match unbound {\n+                        &Some(ast::TraitTyParamBound(ref tpb)) => {\n+                            this.resolve_trait_reference(item.id, tpb, TraitDerivation);\n+                        }\n+                        _ => {}\n+                    }\n \n                     for method in (*methods).iter() {\n                         // Create a new rib for the method-specific type\n@@ -3856,11 +3863,15 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn resolve_type_parameters(&mut self,\n-                                   type_parameters: &OwnedSlice<TyParam>) {\n+                               type_parameters: &OwnedSlice<TyParam>) {\n         for type_parameter in type_parameters.iter() {\n             for bound in type_parameter.bounds.iter() {\n                 self.resolve_type_parameter_bound(type_parameter.id, bound);\n             }\n+            match &type_parameter.unbound {\n+                &Some(ref unbound) => self.resolve_type_parameter_bound(type_parameter.id, unbound),\n+                &None => {}\n+            }\n             match type_parameter.default {\n                 Some(ref ty) => self.resolve_type(&**ty),\n                 None => {}\n@@ -3887,9 +3898,9 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn resolve_trait_reference(&mut self,\n-                                   id: NodeId,\n-                                   trait_reference: &TraitRef,\n-                                   reference_type: TraitReferenceType) {\n+                               id: NodeId,\n+                               trait_reference: &TraitRef,\n+                               reference_type: TraitReferenceType) {\n         match self.resolve_path(id, &trait_reference.path, TypeNS, true) {\n             None => {\n                 let path_str = self.path_idents_to_str(&trait_reference.path);"}, {"sha": "7b871cbe0fe0da7819820e431096904812dc085b", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -692,9 +692,9 @@ pub fn trait_def_of_item(ccx: &CrateCtxt, it: &ast::Item) -> Rc<ty::TraitDef> {\n         _ => {}\n     }\n \n-    let (generics, sized, supertraits) = match it.node {\n-        ast::ItemTrait(ref generics, sized, ref supertraits, _) => {\n-            (generics, sized, supertraits)\n+    let (generics, unbound, supertraits) = match it.node {\n+        ast::ItemTrait(ref generics, ref unbound, ref supertraits, _) => {\n+            (generics, unbound, supertraits)\n         }\n         ref s => {\n             tcx.sess.span_bug(\n@@ -711,7 +711,7 @@ pub fn trait_def_of_item(ccx: &CrateCtxt, it: &ast::Item) -> Rc<ty::TraitDef> {\n                                             generics);\n \n     let builtin_bounds =\n-        ensure_supertraits(ccx, it.id, it.span, supertraits, sized);\n+        ensure_supertraits(ccx, it.id, it.span, supertraits, unbound);\n \n     let substs = mk_item_substs(ccx, &ty_generics);\n     let trait_def = Rc::new(ty::TraitDef {\n@@ -759,7 +759,7 @@ pub fn trait_def_of_item(ccx: &CrateCtxt, it: &ast::Item) -> Rc<ty::TraitDef> {\n                           id: ast::NodeId,\n                           sp: codemap::Span,\n                           ast_trait_refs: &Vec<ast::TraitRef>,\n-                          sized: ast::Sized)\n+                          unbound: &Option<ast::TyParamBound>)\n                           -> ty::BuiltinBounds\n     {\n         let tcx = ccx.tcx;\n@@ -798,15 +798,7 @@ pub fn trait_def_of_item(ccx: &CrateCtxt, it: &ast::Item) -> Rc<ty::TraitDef> {\n             }\n         }\n \n-        if sized == ast::StaticSize {\n-            match tcx.lang_items.require(SizedTraitLangItem) {\n-                Ok(def_id) => {\n-                    ty::try_add_builtin_trait(tcx, def_id, &mut bounds);\n-                }\n-                Err(s) => tcx.sess.err(s.as_slice()),\n-            };\n-        }\n-\n+        add_unsized_bound(ccx, unbound, &mut bounds, \"trait\", sp);\n         tcx.supertraits.borrow_mut().insert(local_def(id),\n                                             Rc::new(ty_trait_refs));\n         bounds\n@@ -974,6 +966,43 @@ fn ty_generics_for_fn_or_method(ccx: &CrateCtxt,\n                 &generics.ty_params, base_generics)\n }\n \n+// Add the Sized bound, unless the type parameter is marked as `Sized?`.\n+fn add_unsized_bound(ccx: &CrateCtxt,\n+                     unbound: &Option<ast::TyParamBound>,\n+                     bounds: &mut ty::BuiltinBounds,\n+                     desc: &str,\n+                     span: Span) {\n+    let kind_id = ccx.tcx.lang_items.require(SizedTraitLangItem);\n+    match unbound {\n+        &Some(TraitTyParamBound(ref tpb)) => {\n+            // #FIXME(8559) currently requires the unbound to be built-in.\n+            let trait_def_id = ty::trait_ref_to_def_id(ccx.tcx, tpb);\n+            match kind_id {\n+                Ok(kind_id) if trait_def_id != kind_id => {\n+                    ccx.tcx.sess.span_warn(span,\n+                                           format!(\"default bound relaxed \\\n+                                                    for a {}, but this does \\\n+                                                    nothing because the given \\\n+                                                    bound is not a default. \\\n+                                                    Only `Sized?` is supported.\",\n+                                                   desc).as_slice());\n+                    ty::try_add_builtin_trait(ccx.tcx,\n+                                              kind_id,\n+                                              bounds);\n+                }\n+                _ => {}\n+            }\n+        }\n+        _ if kind_id.is_ok() => {\n+            ty::try_add_builtin_trait(ccx.tcx,\n+                                      kind_id.unwrap(),\n+                                      bounds);\n+        }\n+        // No lang item for Sized, so we can't add it as a bound.\n+        _ => {}\n+    }\n+}\n+\n fn ty_generics(ccx: &CrateCtxt,\n                space: subst::ParamSpace,\n                lifetimes: &Vec<ast::Lifetime>,\n@@ -1016,7 +1045,7 @@ fn ty_generics(ccx: &CrateCtxt,\n         let bounds = Rc::new(compute_bounds(ccx,\n                                             param_ty,\n                                             &param.bounds,\n-                                            param.sized,\n+                                            &param.unbound,\n                                             param.ident,\n                                             param.span));\n         let default = param.default.map(|path| {\n@@ -1056,7 +1085,7 @@ fn ty_generics(ccx: &CrateCtxt,\n         ccx: &CrateCtxt,\n         param_ty: ty::ParamTy,\n         ast_bounds: &OwnedSlice<ast::TyParamBound>,\n-        sized: ast::Sized,\n+        unbound: &Option<ast::TyParamBound>,\n         ident: ast::Ident,\n         span: Span) -> ty::ParamBounds\n     {\n@@ -1113,15 +1142,11 @@ fn ty_generics(ccx: &CrateCtxt,\n             }\n         }\n \n-        if sized == ast::StaticSize {\n-            match ccx.tcx.lang_items.require(SizedTraitLangItem) {\n-                Ok(def_id) => { ty::try_add_builtin_trait(ccx.tcx,\n-                                                          def_id,\n-                                                          &mut param_bounds.builtin_bounds); },\n-                // Fixme(13367) after `type` makes it into the snapshot, we can check this properly\n-                Err(_s) => {}, //ccx.tcx.sess.err(s),\n-            }\n-        }\n+        add_unsized_bound(ccx,\n+                          unbound,\n+                          &mut param_bounds.builtin_bounds,\n+                          \"type parameter\",\n+                          span);\n \n         check_bounds_compatible(ccx.tcx, &param_bounds, ident, span);\n "}, {"sha": "35661c14aebe771a125e792f0e5133fa42633dd2", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -895,9 +895,9 @@ impl<'a> Rebuilder<'a> {\n                 ident: ty_param.ident,\n                 id: ty_param.id,\n                 bounds: bounds,\n+                unbound: ty_param.unbound.clone(),\n                 default: ty_param.default,\n                 span: ty_param.span,\n-                sized: ty_param.sized,\n             }\n         })\n     }"}, {"sha": "82bb1bd58a6d32f5164d8b630f46156a1f6542cd", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -110,7 +110,7 @@ fn doit(sess: &parse::ParseSess, mut lexer: lexer::StringReader,\n             // miscellaneous, no highlighting\n             t::DOT | t::DOTDOT | t::DOTDOTDOT | t::COMMA | t::SEMI |\n                 t::COLON | t::MOD_SEP | t::LARROW | t::LPAREN |\n-                t::RPAREN | t::LBRACKET | t::LBRACE | t::RBRACE => \"\",\n+                t::RPAREN | t::LBRACKET | t::LBRACE | t::RBRACE | t::QUESTION => \"\",\n             t::DOLLAR => {\n                 if t::is_ident(&lexer.peek().tok) {\n                     is_macro_nonterminal = true;"}, {"sha": "76dbae488393344245362b3c0d11b75fccd66551", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -184,8 +184,8 @@ pub enum TyParamBound {\n pub struct TyParam {\n     pub ident: Ident,\n     pub id: NodeId,\n-    pub sized: Sized,\n     pub bounds: OwnedSlice<TyParamBound>,\n+    pub unbound: Option<TyParamBound>,\n     pub default: Option<P<Ty>>,\n     pub span: Span\n }\n@@ -1041,12 +1041,6 @@ impl Visibility {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n-pub enum Sized {\n-    DynSize,\n-    StaticSize,\n-}\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n pub struct StructField_ {\n     pub kind: StructFieldKind,\n@@ -1115,7 +1109,11 @@ pub enum Item_ {\n     ItemEnum(EnumDef, Generics),\n     ItemStruct(Gc<StructDef>, Generics),\n     /// Represents a Trait Declaration\n-    ItemTrait(Generics, Sized, Vec<TraitRef> , Vec<TraitMethod> ),\n+    ItemTrait(Generics,\n+              Option<TyParamBound>, // (optional) default bound not required for Self.\n+                                    // Currently, only Sized makes sense here.\n+              Vec<TraitRef> ,\n+              Vec<TraitMethod>),\n     ItemImpl(Generics,\n              Option<TraitRef>, // (optional) trait this impl implements\n              P<Ty>, // self"}, {"sha": "4d79ff3257a9a20cd3b58cd5e330ff923a019e97", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -66,8 +66,8 @@ pub trait AstBuilder {\n     fn typaram(&self,\n                span: Span,\n                id: ast::Ident,\n-               sized: ast::Sized,\n                bounds: OwnedSlice<ast::TyParamBound>,\n+               unbound: Option<ast::TyParamBound>,\n                default: Option<P<ast::Ty>>) -> ast::TyParam;\n \n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef;\n@@ -396,14 +396,14 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn typaram(&self,\n                span: Span,\n                id: ast::Ident,\n-               sized: ast::Sized,\n                bounds: OwnedSlice<ast::TyParamBound>,\n+               unbound: Option<ast::TyParamBound>,\n                default: Option<P<ast::Ty>>) -> ast::TyParam {\n         ast::TyParam {\n             ident: id,\n             id: ast::DUMMY_NODE_ID,\n-            sized: sized,\n             bounds: bounds,\n+            unbound: unbound,\n             default: default,\n             span: span\n         }\n@@ -423,7 +423,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n \n     fn strip_bounds(&self, generics: &Generics) -> Generics {\n         let new_params = generics.ty_params.map(|ty_param| {\n-            ast::TyParam { bounds: OwnedSlice::empty(), ..*ty_param }\n+            ast::TyParam { bounds: OwnedSlice::empty(), unbound: None, ..*ty_param }\n         });\n         Generics {\n             ty_params: new_params,"}, {"sha": "6da5f1e2700f1a969c5cb962f22a06697171dea9", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -13,7 +13,6 @@ The compiler code necessary for `#[deriving(Decodable)]`. See\n encodable.rs for more.\n */\n \n-use ast;\n use ast::{MetaItem, Item, Expr, MutMutable, Ident};\n use codemap::Span;\n use ext::base::ExtCtxt;\n@@ -39,10 +38,10 @@ pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds {\n             lifetimes: Vec::new(),\n-            bounds: vec!((\"__D\", ast::StaticSize, vec!(Path::new_(\n+            bounds: vec!((\"__D\", None, vec!(Path::new_(\n                             vec!(\"serialize\", \"Decoder\"), None,\n                             vec!(box Literal(Path::new_local(\"__E\"))), true))),\n-                         (\"__E\", ast::StaticSize, vec!()))\n+                         (\"__E\", None, vec!()))\n         },\n         methods: vec!(\n             MethodDef {"}, {"sha": "652d593c0042ca97d973fafa124646403755bc19", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -82,7 +82,6 @@ would yield functions like:\n ```\n */\n \n-use ast;\n use ast::{MetaItem, Item, Expr, ExprRet, MutMutable, LitNil};\n use codemap::Span;\n use ext::base::ExtCtxt;\n@@ -107,10 +106,10 @@ pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds {\n             lifetimes: Vec::new(),\n-            bounds: vec!((\"__S\", ast::StaticSize, vec!(Path::new_(\n+            bounds: vec!((\"__S\", None, vec!(Path::new_(\n                             vec!(\"serialize\", \"Encoder\"), None,\n                             vec!(box Literal(Path::new_local(\"__E\"))), true))),\n-                         (\"__E\", ast::StaticSize, vec!()))\n+                         (\"__E\", None, vec!()))\n         },\n         methods: vec!(\n             MethodDef {"}, {"sha": "7ad11b186f5004a3f0891983d79d0b87ff6fe003", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -406,8 +406,8 @@ impl<'a> TraitDef<'a> {\n \n             cx.typaram(self.span,\n                        ty_param.ident,\n-                       ty_param.sized,\n                        OwnedSlice::from_vec(bounds),\n+                       ty_param.unbound.clone(),\n                        None)\n         }));\n         let trait_generics = Generics {"}, {"sha": "28f39a4cb8c0fd470cf5b31ebd613a9dad6eb262", "filename": "src/libsyntax/ext/deriving/generic/ty.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -188,17 +188,18 @@ impl<'a> Ty<'a> {\n }\n \n \n-fn mk_ty_param(cx: &ExtCtxt, span: Span, name: &str, sized: ast::Sized, bounds: &[Path],\n+fn mk_ty_param(cx: &ExtCtxt, span: Span, name: &str,\n+               bounds: &[Path], unbound: Option<ast::TyParamBound>,\n                self_ident: Ident, self_generics: &Generics) -> ast::TyParam {\n     let bounds =\n         bounds.iter().map(|b| {\n             let path = b.to_path(cx, span, self_ident, self_generics);\n             cx.typarambound(path)\n         }).collect();\n-    cx.typaram(span, cx.ident_of(name), sized, bounds, None)\n+    cx.typaram(span, cx.ident_of(name), bounds, unbound, None)\n }\n \n-fn mk_generics(lifetimes: Vec<ast::Lifetime> ,  ty_params: Vec<ast::TyParam> ) -> Generics {\n+fn mk_generics(lifetimes: Vec<ast::Lifetime>, ty_params: Vec<ast::TyParam> ) -> Generics {\n     Generics {\n         lifetimes: lifetimes,\n         ty_params: OwnedSlice::from_vec(ty_params)\n@@ -208,7 +209,7 @@ fn mk_generics(lifetimes: Vec<ast::Lifetime> ,  ty_params: Vec<ast::TyParam> ) -\n /// Lifetimes and bounds on type parameters\n pub struct LifetimeBounds<'a> {\n     pub lifetimes: Vec<&'a str>,\n-    pub bounds: Vec<(&'a str, ast::Sized, Vec<Path<'a>>)>,\n+    pub bounds: Vec<(&'a str, Option<ast::TyParamBound>, Vec<Path<'a>>)>,\n }\n \n impl<'a> LifetimeBounds<'a> {\n@@ -228,12 +229,12 @@ impl<'a> LifetimeBounds<'a> {\n         }).collect();\n         let ty_params = self.bounds.iter().map(|t| {\n             match t {\n-                &(ref name, sized, ref bounds) => {\n+                &(ref name, ref unbound, ref bounds) => {\n                     mk_ty_param(cx,\n                                 span,\n                                 *name,\n-                                sized,\n                                 bounds.as_slice(),\n+                                unbound.clone(),\n                                 self_ty,\n                                 self_generics)\n                 }"}, {"sha": "1b3ac47092a2d2e4dde17efc74a904ff3af74774", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use ast;\n use ast::{MetaItem, Item, Expr, MutMutable};\n use codemap::Span;\n use ext::base::ExtCtxt;\n@@ -30,7 +29,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                     vec!(box Literal(Path::new_local(\"__S\"))), true),\n          LifetimeBounds {\n              lifetimes: Vec::new(),\n-             bounds: vec!((\"__S\", ast::StaticSize,\n+             bounds: vec!((\"__S\", None,\n                            vec!(Path::new(vec!(\"std\", \"hash\", \"Writer\"))))),\n          },\n          Path::new_local(\"__S\"))"}, {"sha": "34b5f120d6ab8a62c4e094b30da52323b0960eba", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -35,7 +35,7 @@ pub fn expand_deriving_rand(cx: &mut ExtCtxt,\n                 generics: LifetimeBounds {\n                     lifetimes: Vec::new(),\n                     bounds: vec!((\"R\",\n-                                  ast::StaticSize,\n+                                  None,\n                                   vec!( Path::new(vec!(\"std\", \"rand\", \"Rng\")) )))\n                 },\n                 explicit_self: None,"}, {"sha": "80dd4a83e48f01876db8f4744a10831dfaae3a5f", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -491,8 +491,8 @@ pub fn fold_ty_param<T: Folder>(tp: &TyParam, fld: &mut T) -> TyParam {\n     TyParam {\n         ident: tp.ident,\n         id: id,\n-        sized: tp.sized,\n         bounds: tp.bounds.map(|x| fold_ty_param_bound(x, fld)),\n+        unbound: tp.unbound.as_ref().map(|x| fold_ty_param_bound(x, fld)),\n         default: tp.default.map(|x| fld.fold_ty(x)),\n         span: tp.span\n     }\n@@ -666,15 +666,15 @@ pub fn noop_fold_item_underscore<T: Folder>(i: &Item_, folder: &mut T) -> Item_\n                      methods.iter().map(|x| folder.fold_method(*x)).collect()\n             )\n         }\n-        ItemTrait(ref generics, ref sized, ref traits, ref methods) => {\n+        ItemTrait(ref generics, ref unbound, ref traits, ref methods) => {\n             let methods = methods.iter().map(|method| {\n                 match *method {\n                     Required(ref m) => Required(folder.fold_type_method(m)),\n                     Provided(method) => Provided(folder.fold_method(method))\n                 }\n             }).collect();\n             ItemTrait(fold_generics(generics, folder),\n-                      *sized,\n+                      unbound.clone(),\n                       traits.iter().map(|p| fold_trait_ref(p, folder)).collect(),\n                       methods)\n         }"}, {"sha": "1e72b2de20f732a024eec3d8fea49c0d845dfaf9", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -849,6 +849,7 @@ impl<'a> StringReader<'a> {\n           '@' => { self.bump(); return token::AT; }\n           '#' => { self.bump(); return token::POUND; }\n           '~' => { self.bump(); return token::TILDE; }\n+          '?' => { self.bump(); return token::QUESTION; }\n           ':' => {\n             self.bump();\n             if self.curr_is(':') {"}, {"sha": "3119d34128184b279d49603cde766aeba6592f53", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -42,7 +42,6 @@ use ast::{PatIdent, PatLit, PatRange, PatRegion, PatStruct};\n use ast::{PatTup, PatBox, PatWild, PatWildMulti};\n use ast::{BiRem, Required};\n use ast::{RetStyle, Return, BiShl, BiShr, Stmt, StmtDecl};\n-use ast::{Sized, DynSize, StaticSize};\n use ast::{StmtExpr, StmtSemi, StmtMac, StructDef, StructField};\n use ast::{StructVariantKind, BiSub};\n use ast::StrStyle;\n@@ -3564,11 +3563,40 @@ impl<'a> Parser<'a> {\n         return (ret_lifetime, OwnedSlice::from_vec(result));\n     }\n \n-    // matches typaram = type? IDENT optbounds ( EQ ty )?\n+    fn trait_ref_from_ident(ident: Ident, span: Span) -> ast::TraitRef {\n+        let segment = ast::PathSegment {\n+            identifier: ident,\n+            lifetimes: Vec::new(),\n+            types: OwnedSlice::empty(),\n+        };\n+        let path = ast::Path {\n+            span: span,\n+            global: false,\n+            segments: vec![segment],\n+        };\n+        ast::TraitRef {\n+            path: path,\n+            ref_id: ast::DUMMY_NODE_ID,\n+        }\n+    }\n+\n+    // matches typaram = (unbound`?`)? IDENT optbounds ( EQ ty )?\n     fn parse_ty_param(&mut self) -> TyParam {\n-        let sized = self.parse_sized();\n-        let span = self.span;\n-        let ident = self.parse_ident();\n+        // This is a bit hacky. Currently we are only interested in a single\n+        // unbound, and it may only be `Sized`. To avoid backtracking and other\n+        // complications, we parse an ident, then check for `?`. If we find it,\n+        // we use the ident as the unbound, otherwise, we use it as the name of\n+        // type param.\n+        let mut span = self.span;\n+        let mut ident = self.parse_ident();\n+        let mut unbound = None;\n+        if self.eat(&token::QUESTION) {\n+            let tref = Parser::trait_ref_from_ident(ident, span);\n+            unbound = Some(TraitTyParamBound(tref));\n+            span = self.span;\n+            ident = self.parse_ident();\n+        }\n+\n         let opt_bounds = {\n             if self.eat(&token::COLON) {\n                 let (_, bounds) = self.parse_ty_param_bounds(false);\n@@ -3589,8 +3617,8 @@ impl<'a> Parser<'a> {\n         TyParam {\n             ident: ident,\n             id: ast::DUMMY_NODE_ID,\n-            sized: sized,\n             bounds: bounds,\n+            unbound: unbound,\n             default: default,\n             span: span,\n         }\n@@ -4209,21 +4237,19 @@ impl<'a> Parser<'a> {\n         else { Inherited }\n     }\n \n-    fn parse_sized(&mut self) -> Sized {\n-        if self.eat_keyword(keywords::Type) { DynSize }\n-        else { StaticSize }\n-    }\n-\n-    fn parse_for_sized(&mut self) -> Sized {\n+    fn parse_for_sized(&mut self) -> Option<ast::TyParamBound> {\n         if self.eat_keyword(keywords::For) {\n-            if !self.eat_keyword(keywords::Type) {\n-                let last_span = self.last_span;\n-                self.span_err(last_span,\n-                    \"expected 'type' after for in trait item\");\n+            let span = self.span;\n+            let ident = self.parse_ident();\n+            if !self.eat(&token::QUESTION) {\n+                self.span_err(span,\n+                    \"expected 'Sized?' after `for` in trait item\");\n+                return None;\n             }\n-            DynSize\n+            let tref = Parser::trait_ref_from_ident(ident, span);\n+            Some(TraitTyParamBound(tref))\n         } else {\n-            StaticSize\n+            None\n         }\n     }\n "}, {"sha": "367b18916ac1ddf150b3126de104e8444ef31841", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -76,6 +76,7 @@ pub enum Token {\n     RBRACE,\n     POUND,\n     DOLLAR,\n+    QUESTION,\n \n     /* Literals */\n     LIT_BYTE(u8),\n@@ -195,6 +196,7 @@ pub fn to_str(t: &Token) -> String {\n       RBRACE => \"}\".to_string(),\n       POUND => \"#\".to_string(),\n       DOLLAR => \"$\".to_string(),\n+      QUESTION => \"?\".to_string(),\n \n       /* Literals */\n       LIT_BYTE(b) => {"}, {"sha": "cdaa9bbd8ddb3d65b8a8c2eaa295d7789f3f7ddf", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -740,14 +740,19 @@ impl<'a> State<'a> {\n                 }\n                 try!(self.bclose(item.span));\n             }\n-            ast::ItemTrait(ref generics, ref sized, ref traits, ref methods) => {\n+            ast::ItemTrait(ref generics, ref unbound, ref traits, ref methods) => {\n                 try!(self.head(visibility_qualified(item.vis,\n                                                     \"trait\").as_slice()));\n                 try!(self.print_ident(item.ident));\n                 try!(self.print_generics(generics));\n-                if *sized == ast::DynSize {\n-                    try!(space(&mut self.s));\n-                    try!(word(&mut self.s, \"for type\"));\n+                match unbound {\n+                    &Some(TraitTyParamBound(ref tref)) => {\n+                        try!(space(&mut self.s));\n+                        try!(self.word_space(\"for\"));\n+                        try!(self.print_trait_ref(tref));\n+                        try!(word(&mut self.s, \"?\"));\n+                    }\n+                    _ => {}\n                 }\n                 if traits.len() != 0u {\n                     try!(word(&mut self.s, \":\"));\n@@ -2029,8 +2034,12 @@ impl<'a> State<'a> {\n                     } else {\n                         let idx = idx - generics.lifetimes.len();\n                         let param = generics.ty_params.get(idx);\n-                        if param.sized == ast::DynSize {\n-                            try!(s.word_space(\"type\"));\n+                        match param.unbound {\n+                            Some(TraitTyParamBound(ref tref)) => {\n+                                try!(s.print_trait_ref(tref));\n+                                try!(s.word_space(\"?\"));\n+                            }\n+                            _ => {}\n                         }\n                         try!(s.print_ident(param.ident));\n                         try!(s.print_bounds(&None,"}, {"sha": "6fd749b129819362c479ecf4d9ef759d7df1107e", "filename": "src/test/compile-fail/unsized-bare-typaram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-bare-typaram.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern: instantiating a type parameter with an incompatible type\n fn bar<T: Sized>() { }\n-fn foo<type T>() { bar::<T>() }\n+fn foo<Sized? T>() { bar::<T>() }\n fn main() { }"}, {"sha": "651eb26cadc6fe268a1526d29dab7ae4fa2b2c61", "filename": "src/test/compile-fail/unsized-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern: instantiating a type parameter with an incompatible type\n fn bar<T: Sized>() { }\n-fn foo<type T>() { bar::<Option<T>>() }\n+fn foo<Sized? T>() { bar::<Option<T>>() }\n fn main() { }"}, {"sha": "ec6aafb43f46f5dc04e082838d20b2e64559207c", "filename": "src/test/compile-fail/unsized-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-struct.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -13,5 +13,5 @@\n struct Foo<T> { data: T }\n \n fn bar<T: Sized>() { }\n-fn foo<type T>() { bar::<Foo<T>>() }\n+fn foo<Sized? T>() { bar::<Foo<T>>() }\n fn main() { }"}, {"sha": "c07dcf9368385425b6cbd0411a5ac443666075b4", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -12,45 +12,45 @@\n \n \n // Unbounded.\n-fn f1<type X>(x: &X) {\n+fn f1<Sized? X>(x: &X) {\n     f2::<X>(x); //~ ERROR instantiating a type parameter with an incompatible type `X`, which does n\n }\n fn f2<X>(x: &X) {\n }\n \n // Bounded.\n-trait T for type {}\n-fn f3<type X: T>(x: &X) {\n+trait T for Sized? {}\n+fn f3<Sized? X: T>(x: &X) {\n     f4::<X>(x); //~ ERROR instantiating a type parameter with an incompatible type `X`, which does n\n }\n fn f4<X: T>(x: &X) {\n }\n \n // Test with unsized enum.\n-enum E<type X> {\n+enum E<Sized? X> {\n     V(X),\n }\n \n fn f5<Y>(x: &Y) {}\n-fn f6<type X>(x: &X) {}\n-fn f7<type X>(x1: &E<X>, x2: &E<X>) {\n+fn f6<Sized? X>(x: &X) {}\n+fn f7<Sized? X>(x1: &E<X>, x2: &E<X>) {\n     f5(x1); //~ERROR instantiating a type parameter with an incompatible type `E<X>`, which does not\n     f6(x2); // ok\n }\n \n \n // Test with unsized struct.\n-struct S<type X> {\n+struct S<Sized? X> {\n     x: X,\n }\n \n-fn f8<type X>(x1: &S<X>, x2: &S<X>) {\n+fn f8<Sized? X>(x1: &S<X>, x2: &S<X>) {\n     f5(x1); //~ERROR instantiating a type parameter with an incompatible type `S<X>`, which does not\n     f6(x2); // ok\n }\n \n // Test some tuples.\n-fn f9<type X>(x1: Box<S<X>>, x2: Box<E<X>>) {\n+fn f9<Sized? X>(x1: Box<S<X>>, x2: Box<E<X>>) {\n     f5(&(*x1, 34i)); //~ERROR instantiating a type parameter with an incompatible type `(S<X>,int)`,\n     f5(&(32i, *x2)); //~ERROR instantiating a type parameter with an incompatible type `(int,E<X>)`,\n }\n@@ -60,20 +60,20 @@ fn f9<type X>(x1: Box<S<X>>, x2: Box<E<X>>) {\n // impl - bounded\n trait T1<Z: T> {\n }\n-struct S3<type Y>;\n-impl<type X: T> T1<X> for S3<X> { //ERROR instantiating a type parameter with an incompatible type\n+struct S3<Sized? Y>;\n+impl<Sized? X: T> T1<X> for S3<X> { //ERROR instantiating a type parameter with an incompatible type\n }\n \n // impl - unbounded\n trait T2<Z> {\n }\n-impl<type X> T2<X> for S3<X> { //ERROR instantiating a type parameter with an incompatible type `X`\n+impl<Sized? X> T2<X> for S3<X> { //ERROR instantiating a type parameter with an incompatible type `X\n \n // impl - struct\n-trait T3<type Z> {\n+trait T3<Sized? Z> {\n }\n struct S4<Y>;\n-impl<type X> T3<X> for S4<X> { //ERROR instantiating a type parameter with an incompatible type `X`\n+impl<Sized? X> T3<X> for S4<X> { //ERROR instantiating a type parameter with an incompatible type `X\n }\n */\n "}, {"sha": "e377c9d5f417342f578373fbe512b4a46c1d32f4", "filename": "src/test/compile-fail/unsized4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized4.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -11,7 +11,7 @@\n // Test that bounds are sized-compatible.\n \n trait T {}\n-fn f<type Y: T>() {\n+fn f<Sized? Y: T>() {\n //~^ERROR incompatible bounds on type parameter Y, bound T does not allow unsized type\n }\n "}, {"sha": "7028f7e798b014b99f1a529c7ec795f23281e7e7", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -9,19 +9,19 @@\n // except according to those terms.\n #![feature(struct_variant)]\n \n-// Test `type` types not allowed in fields.\n+// Test `Sized?` types not allowed in fields.\n \n-struct S1<type X> {\n+struct S1<Sized? X> {\n     f1: X, //~ ERROR type `f1` is dynamically sized. dynamically sized types may only appear as the\n     f2: int,\n }\n-struct S2<type X> {\n+struct S2<Sized? X> {\n     f: int,\n     g: X, //~ ERROR type `g` is dynamically sized. dynamically sized types may only appear as the ty\n     h: int,\n }\n \n-enum E<type X> {\n+enum E<Sized? X> {\n     V1(X, int), //~ERROR type `X` is dynamically sized. dynamically sized types may only appear as t\n     V2{f1: X, f: int}, //~ERROR type `f1` is dynamically sized. dynamically sized types may only app\n }"}, {"sha": "def1146526b3920ab687411646849e2564fc55bc", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -8,37 +8,37 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test `type` local variables.\n+// Test `Sized?` local variables.\n \n \n-trait T for type {}\n+trait T for Sized? {}\n \n-fn f1<type X>(x: &X) {\n+fn f1<Sized? X>(x: &X) {\n     let _: X; //~ERROR variable `_` has dynamically sized type `X`\n     let _: (int, (X, int)); //~ERROR variable `_` has dynamically sized type `(int,(X,int))`\n     let y: X; //~ERROR variable `y` has dynamically sized type `X`\n     let y: (int, (X, int)); //~ERROR variable `y` has dynamically sized type `(int,(X,int))`\n }\n-fn f2<type X: T>(x: &X) {\n+fn f2<Sized? X: T>(x: &X) {\n     let _: X; //~ERROR variable `_` has dynamically sized type `X`\n     let _: (int, (X, int)); //~ERROR variable `_` has dynamically sized type `(int,(X,int))`\n     let y: X; //~ERROR variable `y` has dynamically sized type `X`\n     let y: (int, (X, int)); //~ERROR variable `y` has dynamically sized type `(int,(X,int))`\n }\n \n-fn f3<type X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+fn f3<Sized? X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1; //~ERROR variable `y` has dynamically sized type `X`\n     let y = *x2; //~ERROR variable `y` has dynamically sized type `X`\n     let (y, z) = (*x3, 4i); //~ERROR variable `y` has dynamically sized type `X`\n }\n-fn f4<type X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n+fn f4<Sized? X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1;         //~ERROR variable `y` has dynamically sized type `X`\n     let y = *x2;            //~ERROR variable `y` has dynamically sized type `X`\n     let (y, z) = (*x3, 4i); //~ERROR variable `y` has dynamically sized type `X`\n }\n \n-fn g1<type X>(x: X) {} //~ERROR variable `x` has dynamically sized type `X`\n-fn g2<type X: T>(x: X) {} //~ERROR variable `x` has dynamically sized type `X`\n+fn g1<Sized? X>(x: X) {} //~ERROR variable `x` has dynamically sized type `X`\n+fn g2<Sized? X: T>(x: X) {} //~ERROR variable `x` has dynamically sized type `X`\n \n pub fn main() {\n }"}, {"sha": "f49e8f46e78e6a476f56f7a5380300789f1ed3f5", "filename": "src/test/run-pass/unsized.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Frun-pass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Frun-pass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -8,20 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test syntax checks for `type` keyword.\n+// Test syntax checks for `Sized?` syntax.\n \n-trait T1 for type {}\n-pub trait T2 for type {}\n-trait T3<X: T1> for type: T2 {}\n-trait T4<type X> {}\n-trait T5<type X, Y> {}\n-trait T6<Y, type X> {}\n-trait T7<type X, type Y> {}\n-trait T8<type X: T2> {}\n-struct S1<type X>;\n-enum E<type X> {}\n-impl <type X> T1 for S1<X> {}\n-fn f<type X>() {}\n+trait T1 for Sized? {}\n+pub trait T2 for Sized? {}\n+trait T3<X: T1> for Sized?: T2 {}\n+trait T4<Sized? X> {}\n+trait T5<Sized? X, Y> {}\n+trait T6<Y, Sized? X> {}\n+trait T7<Sized? X, Sized? Y> {}\n+trait T8<Sized? X: T2> {}\n+struct S1<Sized? X>;\n+enum E<Sized? X> {}\n+impl <Sized? X> T1 for S1<X> {}\n+fn f<Sized? X>() {}\n \n pub fn main() {\n }"}, {"sha": "9703b55cda760855c10c5bc9fd5b07af1190a0a3", "filename": "src/test/run-pass/unsized2.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Frun-pass%2Funsized2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e21346216cc4c5a3b22bb6fb316f8c867f8c92/src%2Ftest%2Frun-pass%2Funsized2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized2.rs?ref=35e21346216cc4c5a3b22bb6fb316f8c867f8c92", "patch": "@@ -13,7 +13,7 @@\n // Test sized-ness checking in substitution.\n \n // Unbounded.\n-fn f1<type X>(x: &X) {\n+fn f1<Sized? X>(x: &X) {\n     f1::<X>(x);\n }\n fn f2<X>(x: &X) {\n@@ -22,8 +22,8 @@ fn f2<X>(x: &X) {\n }\n \n // Bounded.\n-trait T for type {}\n-fn f3<type X: T>(x: &X) {\n+trait T for Sized? {}\n+fn f3<Sized? X: T>(x: &X) {\n     f3::<X>(x);\n }\n fn f4<X: T>(x: &X) {\n@@ -32,7 +32,7 @@ fn f4<X: T>(x: &X) {\n }\n \n // Self type.\n-trait T2 for type {\n+trait T2 for Sized? {\n     fn f() -> Box<Self>;\n }\n struct S;\n@@ -41,22 +41,22 @@ impl T2 for S {\n         box S\n     }\n }\n-fn f5<type X: T2>(x: &X) {\n+fn f5<Sized? X: T2>(x: &X) {\n     let _: Box<X> = T2::f();\n }\n fn f6<X: T2>(x: &X) {\n     let _: Box<X> = T2::f();\n }\n \n-trait T3 for type {\n+trait T3 for Sized? {\n     fn f() -> Box<Self>;\n }\n impl T3 for S {\n     fn f() -> Box<S> {\n         box S\n     }\n }\n-fn f7<type X: T3>(x: &X) {\n+fn f7<Sized? X: T3>(x: &X) {\n     // This is valid, but the unsized bound on X is irrelevant because any type\n     // which implements T3 must have statically known size.\n     let _: Box<X> = T3::f();\n@@ -66,7 +66,7 @@ trait T4<X> {\n     fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n }\n-trait T5<type X> {\n+trait T5<Sized? X> {\n     // not an error (for now)\n     fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n@@ -76,21 +76,21 @@ trait T6<X: T> {\n     fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n }\n-trait T7<type X: T> {\n+trait T7<Sized? X: T> {\n     // not an error (for now)\n     fn m1(x: &T4<X>);\n     fn m2(x: &T5<X>);\n }\n \n // The last field in a struct or variant may be unsized\n-struct S2<type X> {\n+struct S2<Sized? X> {\n     f: X,\n }\n-struct S3<type X> {\n+struct S3<Sized? X> {\n     f1: int,\n     f2: X,\n }\n-enum E<type X> {\n+enum E<Sized? X> {\n     V1(X),\n     V2{x: X},\n     V3(int, X),"}]}