{"sha": "a2be7a1bb44e4a33421c1397d018a97ae7ec63eb", "node_id": "C_kwDOAAsO6NoAKGEyYmU3YTFiYjQ0ZTRhMzM0MjFjMTM5N2QwMThhOTdhZTdlYzYzZWI", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2023-03-27T16:02:53Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2023-03-27T16:04:05Z"}, "message": "readability tweaks", "tree": {"sha": "3b146611c32f54e2dd2776efadde597e4b4c66a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b146611c32f54e2dd2776efadde597e4b4c66a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2be7a1bb44e4a33421c1397d018a97ae7ec63eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2be7a1bb44e4a33421c1397d018a97ae7ec63eb", "html_url": "https://github.com/rust-lang/rust/commit/a2be7a1bb44e4a33421c1397d018a97ae7ec63eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2be7a1bb44e4a33421c1397d018a97ae7ec63eb/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a69642015ab1cd5115ffc0cfd481ccc3bb95ec44", "url": "https://api.github.com/repos/rust-lang/rust/commits/a69642015ab1cd5115ffc0cfd481ccc3bb95ec44", "html_url": "https://github.com/rust-lang/rust/commit/a69642015ab1cd5115ffc0cfd481ccc3bb95ec44"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "312fecea5dae02657b5fc4490490bdd674518cc1", "filename": "compiler/rustc_middle/src/mir/interpret/allocation/init_mask.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a2be7a1bb44e4a33421c1397d018a97ae7ec63eb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2be7a1bb44e4a33421c1397d018a97ae7ec63eb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Finit_mask.rs?ref=a2be7a1bb44e4a33421c1397d018a97ae7ec63eb", "patch": "@@ -254,44 +254,44 @@ impl InitMaskMaterialized {\n     }\n \n     fn set_range_inbounds(&mut self, start: Size, end: Size, new_state: bool) {\n-        let (blocka, bita) = Self::bit_index(start);\n-        let (blockb, bitb) = Self::bit_index(end);\n-        if blocka == blockb {\n-            // First set all bits except the first `bita`,\n-            // then unset the last `64 - bitb` bits.\n-            let range = if bitb == 0 {\n-                u64::MAX << bita\n+        let (block_a, bit_a) = Self::bit_index(start);\n+        let (block_b, bit_b) = Self::bit_index(end);\n+        if block_a == block_b {\n+            // First set all bits except the first `bit_a`,\n+            // then unset the last `64 - bit_b` bits.\n+            let range = if bit_b == 0 {\n+                u64::MAX << bit_a\n             } else {\n-                (u64::MAX << bita) & (u64::MAX >> (64 - bitb))\n+                (u64::MAX << bit_a) & (u64::MAX >> (64 - bit_b))\n             };\n             if new_state {\n-                self.blocks[blocka] |= range;\n+                self.blocks[block_a] |= range;\n             } else {\n-                self.blocks[blocka] &= !range;\n+                self.blocks[block_a] &= !range;\n             }\n             return;\n         }\n         // across block boundaries\n         if new_state {\n-            // Set `bita..64` to `1`.\n-            self.blocks[blocka] |= u64::MAX << bita;\n-            // Set `0..bitb` to `1`.\n-            if bitb != 0 {\n-                self.blocks[blockb] |= u64::MAX >> (64 - bitb);\n+            // Set `bit_a..64` to `1`.\n+            self.blocks[block_a] |= u64::MAX << bit_a;\n+            // Set `0..bit_b` to `1`.\n+            if bit_b != 0 {\n+                self.blocks[block_b] |= u64::MAX >> (64 - bit_b);\n             }\n             // Fill in all the other blocks (much faster than one bit at a time).\n-            for block in (blocka + 1)..blockb {\n+            for block in (block_a + 1)..block_b {\n                 self.blocks[block] = u64::MAX;\n             }\n         } else {\n-            // Set `bita..64` to `0`.\n-            self.blocks[blocka] &= !(u64::MAX << bita);\n-            // Set `0..bitb` to `0`.\n-            if bitb != 0 {\n-                self.blocks[blockb] &= !(u64::MAX >> (64 - bitb));\n+            // Set `bit_a..64` to `0`.\n+            self.blocks[block_a] &= !(u64::MAX << bit_a);\n+            // Set `0..bit_b` to `0`.\n+            if bit_b != 0 {\n+                self.blocks[block_b] &= !(u64::MAX >> (64 - bit_b));\n             }\n             // Fill in all the other blocks (much faster than one bit at a time).\n-            for block in (blocka + 1)..blockb {\n+            for block in (block_a + 1)..block_b {\n                 self.blocks[block] = 0;\n             }\n         }"}]}