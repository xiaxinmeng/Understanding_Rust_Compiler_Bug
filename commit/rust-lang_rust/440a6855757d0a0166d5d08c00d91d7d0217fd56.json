{"sha": "440a6855757d0a0166d5d08c00d91d7d0217fd56", "node_id": "C_kwDOAAsO6NoAKDQ0MGE2ODU1NzU3ZDBhMDE2NmQ1ZDA4YzAwZDkxZDdkMDIxN2ZkNTY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-18T06:39:13Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-18T06:47:08Z"}, "message": "Rename `TtSeq` as `TtSlice`.\n\nIt's a better name because (a) it holds a slice, and (b) \"sequence\" has\nother meanings in this file.", "tree": {"sha": "aadbe252c33f63bd28a232733863da73fa6f2dae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aadbe252c33f63bd28a232733863da73fa6f2dae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/440a6855757d0a0166d5d08c00d91d7d0217fd56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/440a6855757d0a0166d5d08c00d91d7d0217fd56", "html_url": "https://github.com/rust-lang/rust/commit/440a6855757d0a0166d5d08c00d91d7d0217fd56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/440a6855757d0a0166d5d08c00d91d7d0217fd56/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f43028d06fd7bba6bc6c6cf9bd3e5a5daeaa1d98", "url": "https://api.github.com/repos/rust-lang/rust/commits/f43028d06fd7bba6bc6c6cf9bd3e5a5daeaa1d98", "html_url": "https://github.com/rust-lang/rust/commit/f43028d06fd7bba6bc6c6cf9bd3e5a5daeaa1d98"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "6b6f4d9489b5949f45bcd42d56b6f18c9148e0bf", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/440a6855757d0a0166d5d08c00d91d7d0217fd56/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440a6855757d0a0166d5d08c00d91d7d0217fd56/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=440a6855757d0a0166d5d08c00d91d7d0217fd56", "patch": "@@ -93,28 +93,28 @@ use std::ops::{Deref, DerefMut};\n \n // To avoid costly uniqueness checks, we require that `MatchSeq` always has a nonempty body.\n \n-/// Either a sequence of token trees or a single one. This is used as the representation of the\n-/// sequence of tokens that make up a matcher.\n+/// Either a slice of token trees or a single one. This is used as the representation of the\n+/// token trees that make up a matcher.\n #[derive(Clone)]\n enum TokenTreeOrTokenTreeSlice<'tt> {\n     Tt(TokenTree),\n-    TtSeq(&'tt [TokenTree]),\n+    TtSlice(&'tt [TokenTree]),\n }\n \n impl<'tt> TokenTreeOrTokenTreeSlice<'tt> {\n     /// Returns the number of constituent top-level token trees of `self` (top-level in that it\n     /// will not recursively descend into subtrees).\n     fn len(&self) -> usize {\n         match *self {\n-            TtSeq(ref v) => v.len(),\n+            TtSlice(ref v) => v.len(),\n             Tt(ref tt) => tt.len(),\n         }\n     }\n \n     /// The `index`-th token tree of `self`.\n     fn get_tt(&self, index: usize) -> TokenTree {\n         match *self {\n-            TtSeq(ref v) => v[index].clone(),\n+            TtSlice(ref v) => v[index].clone(),\n             Tt(ref tt) => tt.get_tt(index),\n         }\n     }\n@@ -154,7 +154,7 @@ type NamedMatchVec = SmallVec<[NamedMatch; 4]>;\n /// lifetime. By separating `'tt` from `'root`, we can show that.\n #[derive(Clone)]\n struct MatcherPos<'root, 'tt> {\n-    /// The token or sequence of tokens that make up the matcher. `elts` is short for \"elements\".\n+    /// The token or slice of tokens that make up the matcher. `elts` is short for \"elements\".\n     top_elts: TokenTreeOrTokenTreeSlice<'tt>,\n \n     /// The position of the \"dot\" in this matcher\n@@ -220,7 +220,7 @@ impl<'root, 'tt> MatcherPos<'root, 'tt> {\n         let match_idx_hi = count_names(ms);\n         MatcherPos {\n             // Start with the top level matcher given to us.\n-            top_elts: TtSeq(ms),\n+            top_elts: TtSlice(ms),\n \n             // The \"dot\" is before the first token of the matcher.\n             idx: 0,\n@@ -419,7 +419,7 @@ crate enum NamedMatch {\n     MatchedNonterminal(Lrc<Nonterminal>),\n }\n \n-/// Takes a sequence of token trees `ms` representing a matcher which successfully matched input\n+/// Takes a slice of token trees `ms` representing a matcher which successfully matched input\n /// and an iterator of items that matched input and produces a `NamedParseResult`.\n fn nameize<I: Iterator<Item = NamedMatch>>(\n     sess: &ParseSess,\n@@ -678,8 +678,8 @@ fn parse_tt_inner<'root, 'tt>(\n     }\n }\n \n-/// Use the given sequence of token trees (`ms`) as a matcher. Match the token\n-/// stream from the given `parser` against it and return the match.\n+/// Use the given slice of token trees (`ms`) as a matcher. Match the token stream from the given\n+/// `parser` against it and return the match.\n pub(super) fn parse_tt(\n     parser: &mut Cow<'_, Parser<'_>>,\n     ms: &[TokenTree],"}]}