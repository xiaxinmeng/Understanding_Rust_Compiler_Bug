{"sha": "81f9d4e78f3bc17bc803c793ecac43861ee5eed5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZjlkNGU3OGYzYmMxN2JjODAzYzc5M2VjYWM0Mzg2MWVlNWVlZDU=", "commit": {"author": {"name": "Jimmy Brisson", "email": "theotherjimmy@gmail.com", "date": "2017-10-09T15:39:53Z"}, "committer": {"name": "Jimmy Brisson", "email": "theotherjimmy@gmail.com", "date": "2017-10-13T14:34:13Z"}, "message": "Wrap vtable_methods return type in RC", "tree": {"sha": "2c9a5324d9cc7e6eb32f2287aa10a53de0afdca8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c9a5324d9cc7e6eb32f2287aa10a53de0afdca8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f9d4e78f3bc17bc803c793ecac43861ee5eed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f9d4e78f3bc17bc803c793ecac43861ee5eed5", "html_url": "https://github.com/rust-lang/rust/commit/81f9d4e78f3bc17bc803c793ecac43861ee5eed5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f9d4e78f3bc17bc803c793ecac43861ee5eed5/comments", "author": {"login": "theotherjimmy", "id": 685409, "node_id": "MDQ6VXNlcjY4NTQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/685409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherjimmy", "html_url": "https://github.com/theotherjimmy", "followers_url": "https://api.github.com/users/theotherjimmy/followers", "following_url": "https://api.github.com/users/theotherjimmy/following{/other_user}", "gists_url": "https://api.github.com/users/theotherjimmy/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherjimmy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherjimmy/subscriptions", "organizations_url": "https://api.github.com/users/theotherjimmy/orgs", "repos_url": "https://api.github.com/users/theotherjimmy/repos", "events_url": "https://api.github.com/users/theotherjimmy/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherjimmy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theotherjimmy", "id": 685409, "node_id": "MDQ6VXNlcjY4NTQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/685409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherjimmy", "html_url": "https://github.com/theotherjimmy", "followers_url": "https://api.github.com/users/theotherjimmy/followers", "following_url": "https://api.github.com/users/theotherjimmy/following{/other_user}", "gists_url": "https://api.github.com/users/theotherjimmy/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherjimmy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherjimmy/subscriptions", "organizations_url": "https://api.github.com/users/theotherjimmy/orgs", "repos_url": "https://api.github.com/users/theotherjimmy/repos", "events_url": "https://api.github.com/users/theotherjimmy/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherjimmy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b640c2b95a13ead0285490323b55bfbe01da8e60", "url": "https://api.github.com/repos/rust-lang/rust/commits/b640c2b95a13ead0285490323b55bfbe01da8e60", "html_url": "https://github.com/rust-lang/rust/commit/b640c2b95a13ead0285490323b55bfbe01da8e60"}], "stats": {"total": 91, "additions": 47, "deletions": 44}, "files": [{"sha": "53a974a4bbbd3cf515567e1b899b97338c8949f5", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 43, "deletions": 41, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/81f9d4e78f3bc17bc803c793ecac43861ee5eed5/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f9d4e78f3bc17bc803c793ecac43861ee5eed5/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=81f9d4e78f3bc17bc803c793ecac43861ee5eed5", "patch": "@@ -653,50 +653,52 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn vtable_methods<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_ref: ty::PolyTraitRef<'tcx>)\n-    -> Vec<Option<(DefId, &'tcx Substs<'tcx>)>>\n+    -> Rc<Vec<Option<(DefId, &'tcx Substs<'tcx>)>>>\n {\n     debug!(\"vtable_methods({:?})\", trait_ref);\n \n-    supertraits(tcx, trait_ref).flat_map(move |trait_ref| {\n-        let trait_methods = tcx.associated_items(trait_ref.def_id())\n-            .filter(|item| item.kind == ty::AssociatedKind::Method);\n-\n-        // Now list each method's DefId and Substs (for within its trait).\n-        // If the method can never be called from this object, produce None.\n-        trait_methods.map(move |trait_method| {\n-            debug!(\"vtable_methods: trait_method={:?}\", trait_method);\n-            let def_id = trait_method.def_id;\n-\n-            // Some methods cannot be called on an object; skip those.\n-            if !tcx.is_vtable_safe_method(trait_ref.def_id(), &trait_method) {\n-                debug!(\"vtable_methods: not vtable safe\");\n-                return None;\n-            }\n-\n-            // the method may have some early-bound lifetimes, add\n-            // regions for those\n-            let substs = Substs::for_item(tcx, def_id,\n-                                          |_, _| tcx.types.re_erased,\n-                                          |def, _| trait_ref.substs().type_for_def(def));\n-\n-            // the trait type may have higher-ranked lifetimes in it;\n-            // so erase them if they appear, so that we get the type\n-            // at some particular call site\n-            let substs = tcx.erase_late_bound_regions_and_normalize(&ty::Binder(substs));\n-\n-            // It's possible that the method relies on where clauses that\n-            // do not hold for this particular set of type parameters.\n-            // Note that this method could then never be called, so we\n-            // do not want to try and trans it, in that case (see #23435).\n-            let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n-            if !normalize_and_test_predicates(tcx, predicates.predicates) {\n-                debug!(\"vtable_methods: predicates do not hold\");\n-                return None;\n-            }\n-\n-            Some((def_id, substs))\n-        })\n-    }).collect()\n+    Rc::new(\n+        supertraits(tcx, trait_ref).flat_map(move |trait_ref| {\n+            let trait_methods = tcx.associated_items(trait_ref.def_id())\n+                .filter(|item| item.kind == ty::AssociatedKind::Method);\n+\n+            // Now list each method's DefId and Substs (for within its trait).\n+            // If the method can never be called from this object, produce None.\n+            trait_methods.map(move |trait_method| {\n+                debug!(\"vtable_methods: trait_method={:?}\", trait_method);\n+                let def_id = trait_method.def_id;\n+\n+                // Some methods cannot be called on an object; skip those.\n+                if !tcx.is_vtable_safe_method(trait_ref.def_id(), &trait_method) {\n+                    debug!(\"vtable_methods: not vtable safe\");\n+                    return None;\n+                }\n+\n+                // the method may have some early-bound lifetimes, add\n+                // regions for those\n+                let substs = Substs::for_item(tcx, def_id,\n+                                              |_, _| tcx.types.re_erased,\n+                                              |def, _| trait_ref.substs().type_for_def(def));\n+\n+                // the trait type may have higher-ranked lifetimes in it;\n+                // so erase them if they appear, so that we get the type\n+                // at some particular call site\n+                let substs = tcx.erase_late_bound_regions_and_normalize(&ty::Binder(substs));\n+\n+                // It's possible that the method relies on where clauses that\n+                // do not hold for this particular set of type parameters.\n+                // Note that this method could then never be called, so we\n+                // do not want to try and trans it, in that case (see #23435).\n+                let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs);\n+                if !normalize_and_test_predicates(tcx, predicates.predicates) {\n+                    debug!(\"vtable_methods: predicates do not hold\");\n+                    return None;\n+                }\n+\n+                Some((def_id, substs))\n+            })\n+        }).collect()\n+    )\n }\n \n impl<'tcx,O> Obligation<'tcx,O> {"}, {"sha": "4b68f5addd2be3c7d4d700d4774231f863b9a42b", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f9d4e78f3bc17bc803c793ecac43861ee5eed5/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f9d4e78f3bc17bc803c793ecac43861ee5eed5/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=81f9d4e78f3bc17bc803c793ecac43861ee5eed5", "patch": "@@ -229,7 +229,7 @@ define_maps! { <'tcx>\n     [] fn const_is_rvalue_promotable_to_static: ConstIsRvaluePromotableToStatic(DefId) -> bool,\n     [] fn is_mir_available: IsMirAvailable(DefId) -> bool,\n     [] fn vtable_methods: vtable_methods_node(ty::PolyTraitRef<'tcx>)\n-                          -> Vec<Option<(DefId, &'tcx Substs<'tcx>)>>,\n+                          -> Rc<Vec<Option<(DefId, &'tcx Substs<'tcx>)>>>,\n \n     [] fn trans_fulfill_obligation: fulfill_obligation_dep_node(\n         (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)) -> Vtable<'tcx, ()>,"}, {"sha": "33a2e96ee6621bb4282ad980d1ab8349c1ba15df", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81f9d4e78f3bc17bc803c793ecac43861ee5eed5/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f9d4e78f3bc17bc803c793ecac43861ee5eed5/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=81f9d4e78f3bc17bc803c793ecac43861ee5eed5", "patch": "@@ -850,7 +850,7 @@ fn create_trans_items_for_vtable_methods<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n             // Walk all methods of the trait, including those of its supertraits\n             let methods = tcx.vtable_methods(poly_trait_ref);\n-            let methods = methods.into_iter().filter_map(|method| method)\n+            let methods = methods.iter().cloned().filter_map(|method| method)\n                 .map(|(def_id, substs)| ty::Instance::resolve(\n                         tcx,\n                         ty::ParamEnv::empty(traits::Reveal::All),"}, {"sha": "3253a0339a850ec209451c5ae0e2f4d9cdbd6356", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81f9d4e78f3bc17bc803c793ecac43861ee5eed5/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f9d4e78f3bc17bc803c793ecac43861ee5eed5/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=81f9d4e78f3bc17bc803c793ecac43861ee5eed5", "patch": "@@ -86,7 +86,8 @@ pub fn get_vtable<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     if let Some(trait_ref) = trait_ref {\n         let trait_ref = trait_ref.with_self_ty(tcx, ty);\n-        let methods = tcx.vtable_methods(trait_ref).into_iter().map(|opt_mth| {\n+        let methods = tcx.vtable_methods(trait_ref);\n+        let methods = methods.iter().cloned().map(|opt_mth| {\n             opt_mth.map_or(nullptr, |(def_id, substs)| {\n                 callee::resolve_and_get_fn(ccx, def_id, substs)\n             })"}]}