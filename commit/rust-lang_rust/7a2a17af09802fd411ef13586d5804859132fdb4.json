{"sha": "7a2a17af09802fd411ef13586d5804859132fdb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMmExN2FmMDk4MDJmZDQxMWVmMTM1ODZkNTgwNDg1OTEzMmZkYjQ=", "commit": {"author": {"name": "Samy Kacimi", "email": "samy.kacimi@icloud.com", "date": "2019-07-06T07:48:03Z"}, "committer": {"name": "Samy Kacimi", "email": "samy.kacimi@icloud.com", "date": "2019-07-06T18:40:40Z"}, "message": "normalize use of backticks/lowercase in compiler messages for librustc_mir\n\nhttps://github.com/rust-lang/rust/issues/60532\n\nr? @alexreg", "tree": {"sha": "7b73eefd6952cd1b4daeb70d97d2e5b8cab09ebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b73eefd6952cd1b4daeb70d97d2e5b8cab09ebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a2a17af09802fd411ef13586d5804859132fdb4", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEB8vaBu3I59ljph2cTL44p36js/IFAl0g6ygACgkQTL44p36j\ns/Jb8wv/SJWfU8RBGwhptMOqSV3ydKycnxgbz8AboFg2O3Ime31p6cQnnjfwD7zR\nMH3h83heRqDrdq/YorB91SBjpiEkPPqRQffK7mt65fjHoIKwDbYMnbFc2zq/4vdM\nVfuulVmm/nP/ThZ3i8alzfP3xtHCmcTqeuBymzJ5Fv96tGngrhClX8gVabetvhD2\n+VzehhDW+DXWNjEqq63AYSw2H+4gNBBHPo43txjO8gTuFBVjNi33AVNJTpYnqPbw\nqifADWO5XTlnLtmfPHuWQ9nNS1VjyY9rA0GusuOaTmR7GWQkXpejbJr5fsAmIJnt\ntsNEMeMjDABjpGi3j5cDaNxEeXhMJjZS88cd2s5HuS2WTn8JRA5wuSFm9EuixVNv\n9Fk3uanw8T2720YJCggdFlwWbg9g3hZ1xREhf4TB41It5LPPdxmGICfJh867JY91\nSutzNwT+C/zZk93fwd3/3avdkl5ceCCQASQDbGVLKYYJAMu1+pNxe4Qiu/0hcwCq\nSO2Kl2rL\n=SSef\n-----END PGP SIGNATURE-----", "payload": "tree 7b73eefd6952cd1b4daeb70d97d2e5b8cab09ebd\nparent 254f2014954bd66da206232490824975c0c662f1\nauthor Samy Kacimi <samy.kacimi@icloud.com> 1562399283 +0200\ncommitter Samy Kacimi <samy.kacimi@icloud.com> 1562438440 +0200\n\nnormalize use of backticks/lowercase in compiler messages for librustc_mir\n\nhttps://github.com/rust-lang/rust/issues/60532\n\nr? @alexreg\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2a17af09802fd411ef13586d5804859132fdb4", "html_url": "https://github.com/rust-lang/rust/commit/7a2a17af09802fd411ef13586d5804859132fdb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a2a17af09802fd411ef13586d5804859132fdb4/comments", "author": null, "committer": null, "parents": [{"sha": "254f2014954bd66da206232490824975c0c662f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/254f2014954bd66da206232490824975c0c662f1", "html_url": "https://github.com/rust-lang/rust/commit/254f2014954bd66da206232490824975c0c662f1"}], "stats": {"total": 266, "additions": 133, "deletions": 133}, "files": [{"sha": "dafb8c5f8f706a80325a1faced2ac1ba5a5a8ab0", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -1465,7 +1465,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     .map(|b| GuardFrameLocal::new(b.var_id, b.binding_mode))\n                     .collect(),\n             };\n-            debug!(\"Entering guard building context: {:?}\", guard_frame);\n+            debug!(\"entering guard building context: {:?}\", guard_frame);\n             self.guard_context.push(guard_frame);\n \n             let re_erased = tcx.lifetimes.re_erased;"}, {"sha": "42bbe88283b78d9520dc8568fcec445c165e0a62", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -577,7 +577,7 @@ fn check_legality_of_move_bindings(\n                                            \"cannot bind by-move into a pattern guard\");\n             err.span_label(p.span, \"moves value into pattern guard\");\n             if cx.tcx.sess.opts.unstable_features.is_nightly_build() {\n-                err.help(\"add #![feature(bind_by_move_pattern_guards)] to the \\\n+                err.help(\"add `#![feature(bind_by_move_pattern_guards)]` to the \\\n                           crate attributes to enable\");\n             }\n             err.emit();\n@@ -664,7 +664,7 @@ impl<'a, 'tcx> Delegate<'tcx> for MutationChecker<'a, 'tcx> {\n                           \"cannot mutably borrow in a pattern guard\");\n                 err.span_label(span, \"borrowed mutably in pattern guard\");\n                 if self.cx.tcx.sess.opts.unstable_features.is_nightly_build() {\n-                    err.help(\"add #![feature(bind_by_move_pattern_guards)] to the \\\n+                    err.help(\"add `#![feature(bind_by_move_pattern_guards)]` to the \\\n                               crate attributes to enable\");\n                 }\n                 err.emit();"}, {"sha": "3dee02989c9f93a865751bc3ffa7ffce8477b573", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -351,7 +351,7 @@ where\n                 if field >= len {\n                     // This can be violated because this runs during promotion on code where the\n                     // type system has not yet ensured that such things don't happen.\n-                    debug!(\"Tried to access element {} of array/slice with length {}\", field, len);\n+                    debug!(\"tried to access element {} of array/slice with length {}\", field, len);\n                     return err!(BoundsCheck { len, index: field });\n                 }\n                 stride * field"}, {"sha": "bcc6ad4eac29f9b6feb16f832d41c976190bdf0a", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -289,7 +289,7 @@ pub fn collect_crate_mono_items(\n         collect_roots(tcx, mode)\n     });\n \n-    debug!(\"Building mono item graph, beginning at roots\");\n+    debug!(\"building mono item graph, beginning at roots\");\n \n     let mut visited = MTLock::new(FxHashSet::default());\n     let mut inlining_map = MTLock::new(InliningMap::new());\n@@ -316,7 +316,7 @@ pub fn collect_crate_mono_items(\n // Find all non-generic items by walking the HIR. These items serve as roots to\n // start monomorphizing from.\n fn collect_roots(tcx: TyCtxt<'_>, mode: MonoItemCollectionMode) -> Vec<MonoItem<'_>> {\n-    debug!(\"Collecting roots\");\n+    debug!(\"collecting roots\");\n     let mut roots = Vec::new();\n \n     {"}, {"sha": "0c48531e345217f852711bb1d878153997b7e90b", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -552,10 +552,10 @@ fn unsafe_derive_on_repr_packed(tcx: TyCtxt<'_>, def_id: DefId) {\n     // FIXME: when we make this a hard error, this should have its\n     // own error code.\n     let message = if tcx.generics_of(def_id).own_requires_monomorphization() {\n-        \"#[derive] can't be used on a #[repr(packed)] struct with \\\n+        \"`#[derive]` can't be used on a `#[repr(packed)]` struct with \\\n          type or const parameters (error E0133)\".to_string()\n     } else {\n-        \"#[derive] can't be used on a #[repr(packed)] struct that \\\n+        \"`#[derive]` can't be used on a `#[repr(packed)]` struct that \\\n          does not derive Copy (error E0133)\".to_string()\n     };\n     tcx.lint_hir(SAFE_PACKED_BORROWS,"}, {"sha": "88a46b1012b6169950c1894bf229adce43bb194a", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -47,7 +47,7 @@ impl MirPass for CopyPropagation {\n \n             let mut changed = false;\n             for dest_local in body.local_decls.indices() {\n-                debug!(\"Considering destination local: {:?}\", dest_local);\n+                debug!(\"considering destination local: {:?}\", dest_local);\n \n                 let action;\n                 let location;\n@@ -159,7 +159,7 @@ fn eliminate_self_assignments(\n             } else {\n                 continue;\n             }\n-            debug!(\"Deleting a self-assignment for {:?}\", dest_local);\n+            debug!(\"deleting a self-assignment for {:?}\", dest_local);\n             body.make_statement_nop(location);\n             changed = true;\n         }"}, {"sha": "04ee14f5f59bea8091eff3cbf3b89511b0c1d2d9", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -159,7 +159,7 @@ impl Inliner<'tcx> {\n \n         // Simplify if we inlined anything.\n         if changed {\n-            debug!(\"Running simplify cfg on {:?}\", self.source);\n+            debug!(\"running simplify cfg on {:?}\", self.source);\n             CfgSimplifier::new(caller_body).simplify();\n             remove_dead_blocks(caller_body);\n         }\n@@ -247,7 +247,7 @@ impl Inliner<'tcx> {\n             // need to check for first.\n             attr::InlineAttr::Always => true,\n             attr::InlineAttr::Never => {\n-                debug!(\"#[inline(never)] present - not inlining\");\n+                debug!(\"`#[inline(never)]` present - not inlining\");\n                 return false\n             }\n             attr::InlineAttr::Hint => true,\n@@ -397,7 +397,7 @@ impl Inliner<'tcx> {\n         match terminator.kind {\n             // FIXME: Handle inlining of diverging calls\n             TerminatorKind::Call { args, destination: Some(destination), cleanup, .. } => {\n-                debug!(\"Inlined {:?} into {:?}\", callsite.callee, self.source);\n+                debug!(\"inlined {:?} into {:?}\", callsite.callee, self.source);\n \n                 let mut local_map = IndexVec::with_capacity(callee_body.local_decls.len());\n                 let mut scope_map = IndexVec::with_capacity(callee_body.source_scopes.len());\n@@ -456,7 +456,7 @@ impl Inliner<'tcx> {\n                 }\n \n                 let dest = if dest_needs_borrow(&destination.0) {\n-                    debug!(\"Creating temp for return destination\");\n+                    debug!(\"creating temp for return destination\");\n                     let dest = Rvalue::Ref(\n                         self.tcx.lifetimes.re_erased,\n                         BorrowKind::Mut { allow_two_phase_borrow: false },\n@@ -610,7 +610,7 @@ impl Inliner<'tcx> {\n             }\n         }\n \n-        debug!(\"Creating temp for argument {:?}\", arg);\n+        debug!(\"creating temp for argument {:?}\", arg);\n         // Otherwise, create a temporary for the arg\n         let arg = Rvalue::Use(arg);\n \n@@ -659,7 +659,7 @@ struct Integrator<'a, 'tcx> {\n impl<'a, 'tcx> Integrator<'a, 'tcx> {\n     fn update_target(&self, tgt: BasicBlock) -> BasicBlock {\n         let new = BasicBlock::new(tgt.index() + self.block_idx);\n-        debug!(\"Updating target `{:?}`, new: `{:?}`\", tgt, new);\n+        debug!(\"updating target `{:?}`, new: `{:?}`\", tgt, new);\n         new\n     }\n }"}, {"sha": "40563ad4167d5c206e1b5e45faba8e66cd909d31", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -39,7 +39,7 @@ pub struct InstCombineVisitor<'tcx> {\n impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n     fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n         if self.optimizations.and_stars.remove(&location) {\n-            debug!(\"Replacing `&*`: {:?}\", rvalue);\n+            debug!(\"replacing `&*`: {:?}\", rvalue);\n             let new_place = match *rvalue {\n                 Rvalue::Ref(_, _, Place::Projection(ref mut projection)) => {\n                     // Replace with dummy\n@@ -51,7 +51,7 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n         }\n \n         if let Some(constant) = self.optimizations.arrays_lengths.remove(&location) {\n-            debug!(\"Replacing `Len([_; N])`: {:?}\", rvalue);\n+            debug!(\"replacing `Len([_; N])`: {:?}\", rvalue);\n             *rvalue = Rvalue::Use(Operand::Constant(box constant));\n         }\n "}, {"sha": "2dffafd6e54c0b07131eb8b24b3b36b1b001b669", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -1545,7 +1545,7 @@ impl MirPass for QualifyAndPromoteConstants {\n                             diag.note(\"for more information, see issue \\\n                                        https://github.com/rust-lang/rust/issues/57563\");\n                             diag.help(\n-                                \"add #![feature(const_fn)] to the crate attributes to enable\",\n+                                \"add `#![feature(const_fn)]` to the crate attributes to enable\",\n                             );\n                             diag.emit();\n                         } else {"}, {"sha": "c5f0256c2c92f5b10ce791bbe912f45ad2b3a5d3", "filename": "src/test/ui/bind-by-move/bind-by-move-no-guards.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-no-guards.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -4,7 +4,7 @@ error[E0008]: cannot bind by-move into a pattern guard\n LL |         Some(z) if z.recv().unwrap() => { panic!() },\n    |              ^ moves value into pattern guard\n    |\n-   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "43b578e9f1eafff439d47ca4ab816522f34e271c", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.nll.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -10,7 +10,7 @@ error[E0301]: cannot mutably borrow in a pattern guard\n LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n    |                                      ^ borrowed mutably in pattern guard\n    |\n-   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n \n error[E0302]: cannot assign in a pattern guard\n   --> $DIR/borrowck-mutate-in-guard.rs:15:41"}, {"sha": "d39f535d8e2f76f7af502543df2f8ef1a8ff5520", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -10,7 +10,7 @@ error[E0301]: cannot mutably borrow in a pattern guard\n LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n    |                                      ^ borrowed mutably in pattern guard\n    |\n-   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n \n error[E0302]: cannot assign in a pattern guard\n   --> $DIR/borrowck-mutate-in-guard.rs:15:41"}, {"sha": "a61c9b0c9fef9995daa1542852cf39603ac42417", "filename": "src/test/ui/consts/const_let_refutable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.nll.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -11,7 +11,7 @@ LL |     a + b\n    |     ^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0381]: use of possibly uninitialized variable: `a`\n   --> $DIR/const_let_refutable.rs:4:5"}, {"sha": "a848b20ed98f5876d1761fdbfa1c1e2449f63756", "filename": "src/test/ui/consts/const_let_refutable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_refutable.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -11,7 +11,7 @@ LL |     a + b\n    |     ^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n warning[E0381]: use of possibly uninitialized variable: `a`\n   --> $DIR/const_let_refutable.rs:4:5"}, {"sha": "6228b012dde38760096204cb8691d243fbd3dca0", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL | const fn error(_: fn()) {}\n    |                ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "ecfd30e7b443944958b84b25ae7cb31c72dda139", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL |     vec![1, 2, 3]\n    |     ^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "9919c17a04208152e502f6a23b0c587214c41d50", "filename": "src/test/ui/consts/min_const_fn/cast_errors.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL | const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n    |                                         ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n   --> $DIR/cast_errors.rs:5:23\n@@ -14,7 +14,7 @@ LL | const fn closure() -> fn() { || {} }\n    |                       ^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n   --> $DIR/cast_errors.rs:8:5\n@@ -23,7 +23,7 @@ LL |     (|| {}) as fn();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n   --> $DIR/cast_errors.rs:11:28\n@@ -32,7 +32,7 @@ LL | const fn reify(f: fn()) -> unsafe fn() { f }\n    |                            ^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n   --> $DIR/cast_errors.rs:13:21\n@@ -41,7 +41,7 @@ LL | const fn reify2() { main as unsafe fn(); }\n    |                     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 5 previous errors\n "}, {"sha": "82ed1d45226fa9d59a02c738a421d3d6352c7341", "filename": "src/test/ui/consts/min_const_fn/cmp_fn_pointers.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcmp_fn_pointers.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL | const fn cmp(x: fn(), y: fn()) -> bool {\n    |              ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "edf983fc56b1101c87403b3cfcaa799668642537", "filename": "src/test/ui/consts/min_const_fn/loop_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Floop_ice.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL |     loop {}\n    |     ^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "4b43a0d0a1a1b3c910bcbd9f7d150d49c73953d3", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -11,7 +11,7 @@ LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    |                                    ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:44:28\n@@ -26,7 +26,7 @@ LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    |                                          ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:51:27\n@@ -41,7 +41,7 @@ LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    |                                      ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n   --> $DIR/min_const_fn.rs:58:39\n@@ -50,7 +50,7 @@ LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n    |                                       ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:76:16\n@@ -59,7 +59,7 @@ LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    |                ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:78:18\n@@ -68,7 +68,7 @@ LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    |                  ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:80:33\n@@ -77,7 +77,7 @@ LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n    |                                 ^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:82:35\n@@ -86,7 +86,7 @@ LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n    |                                   ^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int and `bool` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:84:35\n@@ -95,7 +95,7 @@ LL | const fn foo19_3(f: f32) -> f32 { -f }\n    |                                   ^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:86:43\n@@ -104,7 +104,7 @@ LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n    |                                           ^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: cannot access `static` items in const fn\n   --> $DIR/min_const_fn.rs:90:27\n@@ -113,7 +113,7 @@ LL | const fn foo25() -> u32 { BAR }\n    |                           ^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: cannot access `static` items in const fn\n   --> $DIR/min_const_fn.rs:91:36\n@@ -122,7 +122,7 @@ LL | const fn foo26() -> &'static u32 { &BAR }\n    |                                    ^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n   --> $DIR/min_const_fn.rs:92:42\n@@ -131,7 +131,7 @@ LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n   --> $DIR/min_const_fn.rs:94:63\n@@ -140,7 +140,7 @@ LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize }\n    |                                                               ^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n   --> $DIR/min_const_fn.rs:96:42\n@@ -149,7 +149,7 @@ LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n   --> $DIR/min_const_fn.rs:98:63\n@@ -158,7 +158,7 @@ LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize }\n    |                                                               ^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n   --> $DIR/min_const_fn.rs:100:38\n@@ -167,7 +167,7 @@ LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops are not allowed in const fn\n   --> $DIR/min_const_fn.rs:102:29\n@@ -176,7 +176,7 @@ LL | const fn foo30_5(b: bool) { while b { } }\n    |                             ^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n   --> $DIR/min_const_fn.rs:105:44\n@@ -185,7 +185,7 @@ LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    |                                            ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n   --> $DIR/min_const_fn.rs:107:44\n@@ -194,7 +194,7 @@ LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    |                                            ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n   --> $DIR/min_const_fn.rs:109:14\n@@ -203,7 +203,7 @@ LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:114:6\n@@ -212,7 +212,7 @@ LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:119:6\n@@ -221,7 +221,7 @@ LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:124:6\n@@ -230,7 +230,7 @@ LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: `impl Trait` in const fn is unstable\n   --> $DIR/min_const_fn.rs:130:24\n@@ -239,7 +239,7 @@ LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:132:34\n@@ -248,7 +248,7 @@ LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:134:22\n@@ -257,7 +257,7 @@ LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: `impl Trait` in const fn is unstable\n   --> $DIR/min_const_fn.rs:135:23\n@@ -266,7 +266,7 @@ LL | const fn no_rpit() -> impl std::fmt::Debug {}\n    |                       ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:136:23\n@@ -275,7 +275,7 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:137:32\n@@ -284,7 +284,7 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0515]: cannot return reference to temporary value\n   --> $DIR/min_const_fn.rs:137:63\n@@ -302,7 +302,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n   --> $DIR/min_const_fn.rs:148:21\n@@ -311,7 +311,7 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n   --> $DIR/min_const_fn.rs:150:27\n@@ -320,7 +320,7 @@ LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 37 previous errors\n "}, {"sha": "211902b687b1b23d5c7d66c68fb85fe44a527368", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -11,7 +11,7 @@ LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    |                                    ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:44:28\n@@ -26,7 +26,7 @@ LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    |                                          ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:51:27\n@@ -41,7 +41,7 @@ LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    |                                      ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n   --> $DIR/min_const_fn.rs:58:39\n@@ -50,7 +50,7 @@ LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n    |                                       ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:76:16\n@@ -59,7 +59,7 @@ LL | const fn foo11<T: std::fmt::Display>(t: T) -> T { t }\n    |                ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:78:18\n@@ -68,7 +68,7 @@ LL | const fn foo11_2<T: Send>(t: T) -> T { t }\n    |                  ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:80:33\n@@ -77,7 +77,7 @@ LL | const fn foo19(f: f32) -> f32 { f * 2.0 }\n    |                                 ^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:82:35\n@@ -86,7 +86,7 @@ LL | const fn foo19_2(f: f32) -> f32 { 2.0 - f }\n    |                                   ^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int and `bool` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:84:35\n@@ -95,7 +95,7 @@ LL | const fn foo19_3(f: f32) -> f32 { -f }\n    |                                   ^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_fn.rs:86:43\n@@ -104,7 +104,7 @@ LL | const fn foo19_4(f: f32, g: f32) -> f32 { f / g }\n    |                                           ^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: cannot access `static` items in const fn\n   --> $DIR/min_const_fn.rs:90:27\n@@ -113,7 +113,7 @@ LL | const fn foo25() -> u32 { BAR }\n    |                           ^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: cannot access `static` items in const fn\n   --> $DIR/min_const_fn.rs:91:36\n@@ -122,7 +122,7 @@ LL | const fn foo26() -> &'static u32 { &BAR }\n    |                                    ^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n   --> $DIR/min_const_fn.rs:92:42\n@@ -131,7 +131,7 @@ LL | const fn foo30(x: *const u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n   --> $DIR/min_const_fn.rs:94:63\n@@ -140,7 +140,7 @@ LL | const fn foo30_with_unsafe(x: *const u32) -> usize { unsafe { x as usize }\n    |                                                               ^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n   --> $DIR/min_const_fn.rs:96:42\n@@ -149,7 +149,7 @@ LL | const fn foo30_2(x: *mut u32) -> usize { x as usize }\n    |                                          ^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: casting pointers to ints is unstable in const fn\n   --> $DIR/min_const_fn.rs:98:63\n@@ -158,7 +158,7 @@ LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize }\n    |                                                               ^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n   --> $DIR/min_const_fn.rs:100:38\n@@ -167,7 +167,7 @@ LL | const fn foo30_4(b: bool) -> usize { if b { 1 } else { 42 } }\n    |                                      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops are not allowed in const fn\n   --> $DIR/min_const_fn.rs:102:29\n@@ -176,7 +176,7 @@ LL | const fn foo30_5(b: bool) { while b { } }\n    |                             ^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n   --> $DIR/min_const_fn.rs:105:44\n@@ -185,7 +185,7 @@ LL | const fn foo36(a: bool, b: bool) -> bool { a && b }\n    |                                            ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: loops and conditional expressions are not stable in const fn\n   --> $DIR/min_const_fn.rs:107:44\n@@ -194,7 +194,7 @@ LL | const fn foo37(a: bool, b: bool) -> bool { a || b }\n    |                                            ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n   --> $DIR/min_const_fn.rs:109:14\n@@ -203,7 +203,7 @@ LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:114:6\n@@ -212,7 +212,7 @@ LL | impl<T: std::fmt::Debug> Foo<T> {\n    |      ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:119:6\n@@ -221,7 +221,7 @@ LL | impl<T: std::fmt::Debug + Sized> Foo<T> {\n    |      ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:124:6\n@@ -230,7 +230,7 @@ LL | impl<T: Sync + Sized> Foo<T> {\n    |      ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: `impl Trait` in const fn is unstable\n   --> $DIR/min_const_fn.rs:130:24\n@@ -239,7 +239,7 @@ LL | const fn no_rpit2() -> AlanTuring<impl std::fmt::Debug> { AlanTuring(0) }\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:132:34\n@@ -248,7 +248,7 @@ LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:134:22\n@@ -257,7 +257,7 @@ LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                      ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: `impl Trait` in const fn is unstable\n   --> $DIR/min_const_fn.rs:135:23\n@@ -266,7 +266,7 @@ LL | const fn no_rpit() -> impl std::fmt::Debug {}\n    |                       ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:136:23\n@@ -275,7 +275,7 @@ LL | const fn no_dyn_trait(_x: &dyn std::fmt::Debug) {}\n    |                       ^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:137:32\n@@ -284,7 +284,7 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n warning[E0515]: cannot return reference to temporary value\n   --> $DIR/min_const_fn.rs:137:63\n@@ -306,7 +306,7 @@ LL | const fn really_no_traits_i_mean_it() { (&() as &dyn std::fmt::Debug, ()).1\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n   --> $DIR/min_const_fn.rs:148:21\n@@ -315,7 +315,7 @@ LL | const fn no_fn_ptrs(_x: fn()) {}\n    |                     ^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n   --> $DIR/min_const_fn.rs:150:27\n@@ -324,7 +324,7 @@ LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 36 previous errors\n "}, {"sha": "0ea950d678f8784d364d4593b5f42e7665973ca2", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL |     x.0.field;\n    |     ^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn_dyn.rs:12:66\n@@ -14,7 +14,7 @@ LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  ^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/min_const_fn_dyn.rs:12:67"}, {"sha": "02ddb0395296ce41e0a7ab8445f35d3b377d11d5", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL |     x.0.field;\n    |     ^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn_dyn.rs:12:66\n@@ -14,7 +14,7 @@ LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  ^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n warning[E0716]: temporary value dropped while borrowed\n   --> $DIR/min_const_fn_dyn.rs:12:67"}, {"sha": "085ad1aad3a9500b97f1211cd929d6ede4426dc4", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_fn_ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_fn_ptr.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL |     x.0.field;\n    |     ^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: function pointers in const fn are unstable\n   --> $DIR/min_const_fn_fn_ptr.rs:14:59\n@@ -14,7 +14,7 @@ LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasPtr { field }) }\n    |                                                           ^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0af5bdca815f9974791ff845e31d4251504a6f51", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL | const fn bar() -> u32 { foo() }\n    |                         ^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn`\n   --> $DIR/min_const_fn_libstd_stability.rs:22:26\n@@ -14,7 +14,7 @@ LL | const fn bar2() -> u32 { foo2() }\n    |                          ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_fn_libstd_stability.rs:26:26\n@@ -23,7 +23,7 @@ LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |                          ^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn`\n   --> $DIR/min_const_fn_libstd_stability.rs:34:32\n@@ -32,7 +32,7 @@ LL | const fn bar2_gated() -> u32 { foo2_gated() }\n    |                                ^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n "}, {"sha": "bc6f8c596060fb8612c00fc62c3f1eaf902126b9", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL | const unsafe fn bar() -> u32 { unsafe { foo() } }\n    |                                         ^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn`\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:22:42\n@@ -14,7 +14,7 @@ LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } }\n    |                                          ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:26:33\n@@ -23,7 +23,7 @@ LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |                                 ^^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn`\n   --> $DIR/min_const_unsafe_fn_libstd_stability.rs:34:48\n@@ -32,7 +32,7 @@ LL | const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } }\n    |                                                ^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a14fd740c670a0572570d27903968150d4a98f3e", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL | const unsafe fn bar() -> u32 { foo() }\n    |                                ^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn`\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:22:33\n@@ -14,7 +14,7 @@ LL | const unsafe fn bar2() -> u32 { foo2() }\n    |                                 ^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn`\n   --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:30:39\n@@ -23,7 +23,7 @@ LL | const unsafe fn bar2_gated() -> u32 { foo2_gated() }\n    |                                       ^^^^^^^^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7c121be0d552d338692a3d4b2ca6082eb19b1b05", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL |     let b = &mut a;\n    |         ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n   --> $DIR/mutable_borrow.rs:12:13\n@@ -14,7 +14,7 @@ LL |         let b = &mut a;\n    |             ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3f37a6c64505649719e96c63ca93db15db6ce107", "filename": "src/test/ui/consts/single_variant_match_ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fsingle_variant_match_ice.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -17,7 +17,7 @@ LL |         match *self {\n    |               ^^^^^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d354cef66bc06cfbc2af8a4d14bcdab6379b0bfc", "filename": "src/test/ui/derives/deriving-with-repr-packed.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.rs?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -6,15 +6,15 @@\n // not be aligned.\n \n #[derive(Copy, Clone, PartialEq, Eq)]\n-//~^ ERROR #[derive] can't be used\n+//~^ ERROR `#[derive]` can't be used\n //~| hard error\n-//~^^^ ERROR #[derive] can't be used\n+//~^^^ ERROR `#[derive]` can't be used\n //~| hard error\n #[repr(packed)]\n pub struct Foo<T>(T, T, T);\n \n #[derive(PartialEq, Eq)]\n-//~^ ERROR #[derive] can't be used\n+//~^ ERROR `#[derive]` can't be used\n //~| hard error\n #[repr(packed)]\n pub struct Bar(u32, u32, u32);\n@@ -23,7 +23,7 @@ pub struct Bar(u32, u32, u32);\n struct Y(usize);\n \n #[derive(PartialEq)]\n-//~^ ERROR #[derive] can't be used\n+//~^ ERROR `#[derive]` can't be used\n //~| hard error\n #[repr(packed)]\n struct X(Y);"}, {"sha": "8093c58a67e4207fae3188ed8b2ab73a740e7165", "filename": "src/test/ui/derives/deriving-with-repr-packed.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -1,4 +1,4 @@\n-error: #[derive] can't be used on a #[repr(packed)] struct with type or const parameters (error E0133)\n+error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:8:16\n    |\n LL | #[derive(Copy, Clone, PartialEq, Eq)]\n@@ -12,7 +12,7 @@ LL | #![deny(safe_packed_borrows)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n \n-error: #[derive] can't be used on a #[repr(packed)] struct with type or const parameters (error E0133)\n+error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:8:23\n    |\n LL | #[derive(Copy, Clone, PartialEq, Eq)]\n@@ -21,7 +21,7 @@ LL | #[derive(Copy, Clone, PartialEq, Eq)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n \n-error: #[derive] can't be used on a #[repr(packed)] struct that does not derive Copy (error E0133)\n+error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:16:10\n    |\n LL | #[derive(PartialEq, Eq)]\n@@ -30,7 +30,7 @@ LL | #[derive(PartialEq, Eq)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #46043 <https://github.com/rust-lang/rust/issues/46043>\n \n-error: #[derive] can't be used on a #[repr(packed)] struct that does not derive Copy (error E0133)\n+error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:25:10\n    |\n LL | #[derive(PartialEq)]"}, {"sha": "6b45439c4b5877ceadbc7c9cdb715da89ad50241", "filename": "src/test/ui/error-codes/E0008.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0008.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -4,7 +4,7 @@ error[E0008]: cannot bind by-move into a pattern guard\n LL |         Some(s) if s.len() == 0 => {},\n    |              ^ moves value into pattern guard\n    |\n-   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "4f12fd3850e3395a5f45c80c28349b8b56795000", "filename": "src/test/ui/error-codes/E0301.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0301.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -4,7 +4,7 @@ error[E0301]: cannot mutably borrow in a pattern guard\n LL |         option if option.take().is_none() => {},\n    |                   ^^^^^^ borrowed mutably in pattern guard\n    |\n-   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n \n error[E0596]: cannot borrow `option` as mutable, as it is immutable for the pattern guard\n   --> $DIR/E0301.rs:4:19"}, {"sha": "c1523e911fd2bdee35b1e8e29f9eacdb18329590", "filename": "src/test/ui/issues/issue-37550.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37550.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL |     let x = || t;\n    |         ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "c2f6edee05fa6bf40073bad3cf199b9f856bc451", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.no_gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -4,7 +4,7 @@ error[E0008]: cannot bind by-move into a pattern guard\n LL |         A { a: v } if *v == 42 => v,\n    |                ^ moves value into pattern guard\n    |\n-   = help: add #![feature(bind_by_move_pattern_guards)] to the crate attributes to enable\n+   = help: add `#![feature(bind_by_move_pattern_guards)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "e99155ee1016256530804effd095d2c76c87b155", "filename": "src/test/ui/unsafe/ranged_ints2_const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a2a17af09802fd411ef13586d5804859132fdb4/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr?ref=7a2a17af09802fd411ef13586d5804859132fdb4", "patch": "@@ -5,7 +5,7 @@ LL |     let y = &mut x.0;\n    |         ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: mutable references in const fn are unstable\n   --> $DIR/ranged_ints2_const.rs:18:9\n@@ -14,7 +14,7 @@ LL |     let y = unsafe { &mut x.0 };\n    |         ^\n    |\n    = note: for more information, see issue https://github.com/rust-lang/rust/issues/57563\n-   = help: add #![feature(const_fn)] to the crate attributes to enable\n+   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n   --> $DIR/ranged_ints2_const.rs:11:13"}]}