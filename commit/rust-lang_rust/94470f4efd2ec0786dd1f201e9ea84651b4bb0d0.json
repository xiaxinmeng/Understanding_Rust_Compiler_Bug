{"sha": "94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "node_id": "C_kwDOAAsO6NoAKDk0NDcwZjRlZmQyZWMwNzg2ZGQxZjIwMWU5ZWE4NDY1MWI0YmIwZDA", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-16T21:58:58Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-16T21:58:58Z"}, "message": "Use `as_deref` in compiler (but only where it makes sense)", "tree": {"sha": "1bcf415fa3d0bedc9b223162446ab9653c8f5bec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bcf415fa3d0bedc9b223162446ab9653c8f5bec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "html_url": "https://github.com/rust-lang/rust/commit/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e702534763599db252f2ca308739ec340d0933de", "url": "https://api.github.com/repos/rust-lang/rust/commits/e702534763599db252f2ca308739ec340d0933de", "html_url": "https://github.com/rust-lang/rust/commit/e702534763599db252f2ca308739ec340d0933de"}], "stats": {"total": 108, "additions": 45, "deletions": 63}, "files": [{"sha": "acd7eb69ffc376f540f7ac879a0921af7e097364", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -1637,7 +1637,7 @@ fn deny_equality_constraints(\n                                     // Remove `Bar` from `Foo::Bar`.\n                                     assoc_path.segments.pop();\n                                     let len = assoc_path.segments.len() - 1;\n-                                    let gen_args = args.as_ref().map(|p| (**p).clone());\n+                                    let gen_args = args.as_deref().cloned();\n                                     // Build `<Bar = RhsTy>`.\n                                     let arg = AngleBracketedArg::Constraint(AssocConstraint {\n                                         id: rustc_ast::node_id::DUMMY_NODE_ID,"}, {"sha": "9b32d7027dc2c5a13eb4151f593dee0e1d78d974", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -560,7 +560,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n         let template_snippet = ecx.source_map().span_to_snippet(template_sp).ok();\n         template_strs.push((\n             template_str,\n-            template_snippet.as_ref().map(|s| Symbol::intern(s)),\n+            template_snippet.as_deref().map(Symbol::intern),\n             template_sp,\n         ));\n         let template_str = template_str.as_str();"}, {"sha": "df773910dbc8fd7313f2ada1d89495c4646d9366", "filename": "compiler/rustc_builtin_macros/src/format_foreign/printf/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fprintf%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fprintf%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fprintf%2Ftests.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -100,7 +100,7 @@ fn test_iter() {\n     let s = \"The %d'th word %% is: `%.*s` %!\\n\";\n     let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate().ok()).collect();\n     assert_eq!(\n-        subs.iter().map(|ms| ms.as_ref().map(|s| &s[..])).collect::<Vec<_>>(),\n+        subs.iter().map(Option::as_deref).collect::<Vec<_>>(),\n         vec![Some(\"{}\"), None, Some(\"{:.*}\"), None]\n     );\n }"}, {"sha": "93a7afcd6e8b620fff102430c03c455ae8d5b490", "filename": "compiler/rustc_builtin_macros/src/format_foreign/shell/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fshell%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fshell%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign%2Fshell%2Ftests.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -39,7 +39,7 @@ fn test_iter() {\n     let s = \"The $0'th word $$ is: `$WORD` $!\\n\";\n     let subs: Vec<_> = iter_subs(s, 0).map(|sub| sub.translate().ok()).collect();\n     assert_eq!(\n-        subs.iter().map(|ms| ms.as_ref().map(|s| &s[..])).collect::<Vec<_>>(),\n+        subs.iter().map(Option::as_deref).collect::<Vec<_>>(),\n         vec![Some(\"{0}\"), None, Some(\"{WORD}\")]\n     );\n }"}, {"sha": "c627af4e62fe14073bc539d195cb5623afd7dabe", "filename": "compiler/rustc_codegen_cranelift/build_system/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Futils.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -104,5 +104,5 @@ pub(crate) fn copy_dir_recursively(from: &Path, to: &Path) {\n }\n \n pub(crate) fn is_ci() -> bool {\n-    env::var(\"CI\").as_ref().map(|val| &**val) == Ok(\"true\")\n+    env::var(\"CI\").as_deref() == Ok(\"true\")\n }"}, {"sha": "45522fb1a4cab422fc5713905fe8f45d23fb2b49", "filename": "compiler/rustc_codegen_cranelift/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -2,7 +2,7 @@ use std::env;\n use std::str::FromStr;\n \n fn bool_env_var(key: &str) -> bool {\n-    env::var(key).as_ref().map(|val| &**val) == Ok(\"1\")\n+    env::var(key).as_deref() == Ok(\"1\")\n }\n \n /// The mode to use for compilation."}, {"sha": "86580d05d4166a357c767ff8c281bf58887695cf", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -174,7 +174,7 @@ impl CoverageMapGenerator {\n         counter_regions.sort_unstable_by_key(|(_counter, region)| *region);\n         for (counter, region) in counter_regions {\n             let CodeRegion { file_name, start_line, start_col, end_line, end_col } = *region;\n-            let same_file = current_file_name.as_ref().map_or(false, |p| *p == file_name);\n+            let same_file = current_file_name.map_or(false, |p| p == file_name);\n             if !same_file {\n                 if current_file_name.is_some() {\n                     current_file_id += 1;"}, {"sha": "145d93d52d10d85bac32f8c44c88ae59b7f3edb9", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -318,7 +318,7 @@ fn run_compiler(\n                             compiler.input(),\n                             &*expanded_crate,\n                             *ppm,\n-                            compiler.output_file().as_ref().map(|p| &**p),\n+                            compiler.output_file().as_deref(),\n                         );\n                         Ok(())\n                     })?;\n@@ -329,7 +329,7 @@ fn run_compiler(\n                         compiler.input(),\n                         &krate,\n                         *ppm,\n-                        compiler.output_file().as_ref().map(|p| &**p),\n+                        compiler.output_file().as_deref(),\n                     );\n                 }\n                 trace!(\"finished pretty-printing\");\n@@ -383,10 +383,7 @@ fn run_compiler(\n                             &crate_name,\n                             compiler.input(),\n                             None,\n-                            DumpHandler::new(\n-                                compiler.output_dir().as_ref().map(|p| &**p),\n-                                &crate_name,\n-                            ),\n+                            DumpHandler::new(compiler.output_dir().as_deref(), &crate_name),\n                         )\n                     });\n                 }"}, {"sha": "d5b595feca985654eabf02d187052fa5d96f8642", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -248,7 +248,7 @@ pub trait Emitter: Translate {\n         fluent_args: &FluentArgs<'_>,\n     ) -> (MultiSpan, &'a [CodeSuggestion]) {\n         let mut primary_span = diag.span.clone();\n-        let suggestions = diag.suggestions.as_ref().map_or(&[][..], |suggestions| &suggestions[..]);\n+        let suggestions = diag.suggestions.as_deref().unwrap_or(&[]);\n         if let Some((sugg, rest)) = suggestions.split_first() {\n             let msg = self.translate_message(&sugg.msg, fluent_args);\n             if rest.is_empty() &&"}, {"sha": "916a39cda1668c5d0a710490d04955c91ac58e93", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -2179,7 +2179,7 @@ fn check_link_ordinal(tcx: TyCtxt<'_>, attr: &ast::Attribute) -> Option<u16> {\n         .emit();\n     }\n     let meta_item_list = attr.meta_item_list();\n-    let meta_item_list: Option<&[ast::NestedMetaItem]> = meta_item_list.as_ref().map(Vec::as_ref);\n+    let meta_item_list = meta_item_list.as_deref();\n     let sole_meta_list = match meta_item_list {\n         Some([item]) => item.literal(),\n         Some(_) => {"}, {"sha": "df40871f99facfaf8f7ba54da73295abeab8c849", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -30,7 +30,7 @@ use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::DefIdOrName;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n \n-use std::iter;\n+use std::{iter, slice};\n \n /// Checks that it is legal to call methods of the trait corresponding\n /// to `trait_id` (this only cares about the trait, not the specific\n@@ -227,22 +227,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         ] {\n             let Some(trait_def_id) = opt_trait_def_id else { continue };\n \n-            let opt_input_types = opt_arg_exprs.map(|arg_exprs| {\n-                [self.tcx.mk_tup(arg_exprs.iter().map(|e| {\n+            let opt_input_type = opt_arg_exprs.map(|arg_exprs| {\n+                self.tcx.mk_tup(arg_exprs.iter().map(|e| {\n                     self.next_ty_var(TypeVariableOrigin {\n                         kind: TypeVariableOriginKind::TypeInference,\n                         span: e.span,\n                     })\n-                }))]\n+                }))\n             });\n-            let opt_input_types = opt_input_types.as_ref().map(AsRef::as_ref);\n \n             if let Some(ok) = self.lookup_method_in_trait(\n                 call_expr.span,\n                 method_name,\n                 trait_def_id,\n                 adjusted_ty,\n-                opt_input_types,\n+                opt_input_type.as_ref().map(slice::from_ref),\n             ) {\n                 let method = self.register_infer_ok_obligations(ok);\n                 let mut autoref = None;"}, {"sha": "0f74edcf1c8f9cf10f214953a030fcf9d500ad1e", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -589,7 +589,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             }\n             _ => None,\n         };\n-        let coerce_source = reborrow.as_ref().map_or(source, |&(_, ref r)| r.target);\n+        let coerce_source = reborrow.as_ref().map_or(source, |(_, r)| r.target);\n \n         // Setup either a subtyping or a LUB relationship between\n         // the `CoerceUnsized` target type and the expected type."}, {"sha": "99c934862c4803e4af8e9a6c45d003d04c93824b", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -304,7 +304,7 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n                 parse_sess_created(&mut sess.parse_sess);\n             }\n \n-            let temps_dir = sess.opts.unstable_opts.temps_dir.as_ref().map(|o| PathBuf::from(&o));\n+            let temps_dir = sess.opts.unstable_opts.temps_dir.as_deref().map(PathBuf::from);\n \n             let compiler = Compiler {\n                 sess: Lrc::new(sess),"}, {"sha": "fc0b11183f7bf250105b2f65ae9a131f4e26b876", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -33,11 +33,7 @@ pub struct Query<T> {\n \n impl<T> Query<T> {\n     fn compute<F: FnOnce() -> Result<T>>(&self, f: F) -> Result<&Query<T>> {\n-        let mut result = self.result.borrow_mut();\n-        if result.is_none() {\n-            *result = Some(f());\n-        }\n-        result.as_ref().unwrap().as_ref().map(|_| self).map_err(|err| *err)\n+        self.result.borrow_mut().get_or_insert_with(f).as_ref().map(|_| self).map_err(|&err| err)\n     }\n \n     /// Takes ownership of the query result. Further attempts to take or peek the query"}, {"sha": "4142964a0dabbcd6905ed08c9e828ce9e7d3b7f7", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -68,10 +68,7 @@ pub fn create_session(\n     let codegen_backend = if let Some(make_codegen_backend) = make_codegen_backend {\n         make_codegen_backend(&sopts)\n     } else {\n-        get_codegen_backend(\n-            &sopts.maybe_sysroot,\n-            sopts.unstable_opts.codegen_backend.as_ref().map(|name| &name[..]),\n-        )\n+        get_codegen_backend(&sopts.maybe_sysroot, sopts.unstable_opts.codegen_backend.as_deref())\n     };\n \n     // target_override is documented to be called before init(), so this is okay\n@@ -260,7 +257,7 @@ pub fn rustc_path<'a>() -> Option<&'a Path> {\n \n     const BIN_PATH: &str = env!(\"RUSTC_INSTALL_BINDIR\");\n \n-    RUSTC_PATH.get_or_init(|| get_rustc_path_inner(BIN_PATH)).as_ref().map(|v| &**v)\n+    RUSTC_PATH.get_or_init(|| get_rustc_path_inner(BIN_PATH)).as_deref()\n }\n \n fn get_rustc_path_inner(bin_path: &str) -> Option<PathBuf> {"}, {"sha": "1c25b03fdb22ed8ab67ba405dc6409347eca5a5b", "filename": "compiler/rustc_lexer/src/unescape/tests.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Funescape%2Ftests.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -132,8 +132,7 @@ fn test_unescape_str_good() {\n                 }\n             }\n         });\n-        let buf = buf.as_ref().map(|it| it.as_ref());\n-        assert_eq!(buf, Ok(expected))\n+        assert_eq!(buf.as_deref(), Ok(expected))\n     }\n \n     check(\"foo\", \"foo\");\n@@ -250,8 +249,7 @@ fn test_unescape_byte_str_good() {\n                 }\n             }\n         });\n-        let buf = buf.as_ref().map(|it| it.as_ref());\n-        assert_eq!(buf, Ok(expected))\n+        assert_eq!(buf.as_deref(), Ok(expected))\n     }\n \n     check(\"foo\", b\"foo\");"}, {"sha": "1a2389c7a8448878b28c406dbe0d247a6b3a1a61", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -162,7 +162,7 @@ impl CStore {\n     pub(crate) fn iter_crate_data(&self) -> impl Iterator<Item = (CrateNum, &CrateMetadata)> {\n         self.metas\n             .iter_enumerated()\n-            .filter_map(|(cnum, data)| data.as_ref().map(|data| (cnum, &**data)))\n+            .filter_map(|(cnum, data)| data.as_deref().map(|data| (cnum, data)))\n     }\n \n     fn push_dependencies_in_postorder(&self, deps: &mut Vec<CrateNum>, cnum: CrateNum) {"}, {"sha": "ec0f9ad586d9abe6f6318256829399dac6afa88c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -2189,7 +2189,7 @@ impl EncodedMetadata {\n \n     #[inline]\n     pub fn raw_data(&self) -> &[u8] {\n-        self.mmap.as_ref().map(|mmap| mmap.as_ref()).unwrap_or_default()\n+        self.mmap.as_deref().unwrap_or_default()\n     }\n }\n "}, {"sha": "139c276346da4eb9c9c6181fa92325b195f23dce", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -487,7 +487,7 @@ impl<'tcx> Cx<'tcx> {\n                             substs,\n                             user_ty,\n                             fields: self.field_refs(fields),\n-                            base: base.as_ref().map(|base| FruInfo {\n+                            base: base.map(|base| FruInfo {\n                                 base: self.mirror_expr(base),\n                                 field_types: self.typeck_results().fru_field_types()[expr.hir_id]\n                                     .iter()\n@@ -590,7 +590,7 @@ impl<'tcx> Cx<'tcx> {\n                             InlineAsmOperand::Out {\n                                 reg,\n                                 late,\n-                                expr: expr.as_ref().map(|expr| self.mirror_expr(expr)),\n+                                expr: expr.map(|expr| self.mirror_expr(expr)),\n                             }\n                         }\n                         hir::InlineAsmOperand::InOut { reg, late, ref expr } => {\n@@ -605,7 +605,7 @@ impl<'tcx> Cx<'tcx> {\n                             reg,\n                             late,\n                             in_expr: self.mirror_expr(in_expr),\n-                            out_expr: out_expr.as_ref().map(|expr| self.mirror_expr(expr)),\n+                            out_expr: out_expr.map(|expr| self.mirror_expr(expr)),\n                         },\n                         hir::InlineAsmOperand::Const { ref anon_const } => {\n                             let anon_const_def_id = tcx.hir().local_def_id(anon_const.hir_id);\n@@ -659,13 +659,11 @@ impl<'tcx> Cx<'tcx> {\n \n                 ExprKind::Repeat { value: self.mirror_expr(v), count: *count }\n             }\n-            hir::ExprKind::Ret(ref v) => {\n-                ExprKind::Return { value: v.as_ref().map(|v| self.mirror_expr(v)) }\n-            }\n+            hir::ExprKind::Ret(ref v) => ExprKind::Return { value: v.map(|v| self.mirror_expr(v)) },\n             hir::ExprKind::Break(dest, ref value) => match dest.target_id {\n                 Ok(target_id) => ExprKind::Break {\n                     label: region::Scope { id: target_id.local_id, data: region::ScopeData::Node },\n-                    value: value.as_ref().map(|value| self.mirror_expr(value)),\n+                    value: value.map(|value| self.mirror_expr(value)),\n                 },\n                 Err(err) => bug!(\"invalid loop id for break: {}\", err),\n             },"}, {"sha": "68599755f33e3cc0f4142b983102ee9255da04ba", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -216,7 +216,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 let lo = lo_expr.map(|e| self.lower_range_expr(e));\n                 let hi = hi_expr.map(|e| self.lower_range_expr(e));\n \n-                let (lp, hp) = (lo.as_ref().map(|x| &x.0), hi.as_ref().map(|x| &x.0));\n+                let (lp, hp) = (lo.as_ref().map(|(x, _)| x), hi.as_ref().map(|(x, _)| x));\n                 let mut kind = match self.normalize_range_pattern_ends(ty, lp, hp) {\n                     Some((lc, hc)) => self.lower_pattern_range(ty, lc, hc, end, lo_span),\n                     None => {\n@@ -358,7 +358,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         &mut self,\n         pat: &'tcx Option<&'tcx hir::Pat<'tcx>>,\n     ) -> Option<Box<Pat<'tcx>>> {\n-        pat.as_ref().map(|p| self.lower_pattern(p))\n+        pat.map(|p| self.lower_pattern(p))\n     }\n \n     fn slice_or_array_pattern("}, {"sha": "4b059d4443c305fa4c3a0b005c1b4bcb8fe19f84", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -2562,7 +2562,7 @@ impl<'a> Parser<'a> {\n             if let [a, b] = segments {\n                 let (a_span, b_span) = (a.span(), b.span());\n                 let between_span = a_span.shrink_to_hi().to(b_span.shrink_to_lo());\n-                if self.span_to_snippet(between_span).as_ref().map(|a| &a[..]) == Ok(\":: \") {\n+                if self.span_to_snippet(between_span).as_deref() == Ok(\":: \") {\n                     return Err(DoubleColonInBound {\n                         span: path.span.shrink_to_hi(),\n                         between: between_span,"}, {"sha": "1afcf546e305d04f11ab38b2f475ab528a24e8e6", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -923,8 +923,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 //    v     v\n                 //   (  succ  )\n                 //\n-                let else_ln =\n-                    self.propagate_through_opt_expr(else_opt.as_ref().map(|e| &**e), succ);\n+                let else_ln = self.propagate_through_opt_expr(else_opt.as_deref(), succ);\n                 let then_ln = self.propagate_through_expr(&then, succ);\n                 let ln = self.live_node(expr.hir_id, expr.span);\n                 self.init_from_succ(ln, else_ln);\n@@ -967,7 +966,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n             hir::ExprKind::Ret(ref o_e) => {\n                 // Ignore succ and subst exit_ln.\n-                self.propagate_through_opt_expr(o_e.as_ref().map(|e| &**e), self.exit_ln)\n+                self.propagate_through_opt_expr(o_e.as_deref(), self.exit_ln)\n             }\n \n             hir::ExprKind::Break(label, ref opt_expr) => {\n@@ -982,7 +981,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 // look it up in the break loop nodes table\n \n                 match target {\n-                    Some(b) => self.propagate_through_opt_expr(opt_expr.as_ref().map(|e| &**e), b),\n+                    Some(b) => self.propagate_through_opt_expr(opt_expr.as_deref(), b),\n                     None => span_bug!(expr.span, \"`break` to unknown label\"),\n                 }\n             }\n@@ -1027,7 +1026,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             hir::ExprKind::Array(ref exprs) => self.propagate_through_exprs(exprs, succ),\n \n             hir::ExprKind::Struct(_, ref fields, ref with_expr) => {\n-                let succ = self.propagate_through_opt_expr(with_expr.as_ref().map(|e| &**e), succ);\n+                let succ = self.propagate_through_opt_expr(with_expr.as_deref(), succ);\n                 fields\n                     .iter()\n                     .rev()"}, {"sha": "4fc42cdea36fbb0cd413ef4b95d95562a7f83f0c", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -1029,7 +1029,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n                                 trait_item.hir_id(),\n                                 trait_item.ident,\n                                 Some(bounds),\n-                                default_ty.as_ref().map(|ty| &**ty),\n+                                default_ty.as_deref(),\n                                 &self.save_ctxt,\n                             ),\n                             attributes: lower_attributes(attrs.to_vec(), &self.save_ctxt),"}, {"sha": "1ce3a613dc700b76c5e78a984d3edbc79f578b87", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -1480,7 +1480,7 @@ pub fn get_cmd_lint_options(\n \n /// Parses the `--color` flag.\n pub fn parse_color(matches: &getopts::Matches) -> ColorConfig {\n-    match matches.opt_str(\"color\").as_ref().map(|s| &s[..]) {\n+    match matches.opt_str(\"color\").as_deref() {\n         Some(\"auto\") => ColorConfig::Auto,\n         Some(\"always\") => ColorConfig::Always,\n         Some(\"never\") => ColorConfig::Never,\n@@ -1589,7 +1589,7 @@ pub fn parse_error_format(\n     // is unstable, it will not be present. We have to use `opts_present` not\n     // `opt_present` because the latter will panic.\n     let error_format = if matches.opts_present(&[\"error-format\".to_owned()]) {\n-        match matches.opt_str(\"error-format\").as_ref().map(|s| &s[..]) {\n+        match matches.opt_str(\"error-format\").as_deref() {\n             None | Some(\"human\") => {\n                 ErrorOutputType::HumanReadable(HumanReadableErrorType::Default(color))\n             }"}, {"sha": "934355bb14fe854c9c30243129b04129a88bbe40", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -1354,7 +1354,7 @@ pub fn build_session(\n         let profiler = SelfProfiler::new(\n             directory,\n             sopts.crate_name.as_deref(),\n-            sopts.unstable_opts.self_profile_events.as_ref().map(|xs| &xs[..]),\n+            sopts.unstable_opts.self_profile_events.as_deref(),\n             &sopts.unstable_opts.self_profile_counter,\n         );\n         match profiler {\n@@ -1388,7 +1388,7 @@ pub fn build_session(\n         local_crate_source_file.map(|path| file_path_mapping.map_prefix(path).0);\n \n     let optimization_fuel = Lock::new(OptimizationFuel {\n-        remaining: sopts.unstable_opts.fuel.as_ref().map_or(0, |i| i.1),\n+        remaining: sopts.unstable_opts.fuel.as_ref().map_or(0, |&(_, i)| i),\n         out_of_fuel: false,\n     });\n     let print_fuel = AtomicU64::new(0);"}, {"sha": "7ccfa600ec315a604dd6293ccbc734fed28a75a1", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -217,9 +217,7 @@ impl RealFileName {\n     pub fn local_path(&self) -> Option<&Path> {\n         match self {\n             RealFileName::LocalPath(p) => Some(p),\n-            RealFileName::Remapped { local_path: p, virtual_name: _ } => {\n-                p.as_ref().map(PathBuf::as_path)\n-            }\n+            RealFileName::Remapped { local_path, virtual_name: _ } => local_path.as_deref(),\n         }\n     }\n "}, {"sha": "9bfe527647deea58886ce82ce839ab8f3f175fd3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94470f4efd2ec0786dd1f201e9ea84651b4bb0d0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=94470f4efd2ec0786dd1f201e9ea84651b4bb0d0", "patch": "@@ -460,7 +460,7 @@ impl<'tcx> OnUnimplementedDirective {\n         info!(\"evaluate({:?}, trait_ref={:?}, options={:?})\", self, trait_ref, options);\n \n         let options_map: FxHashMap<Symbol, String> =\n-            options.iter().filter_map(|(k, v)| v.as_ref().map(|v| (*k, v.to_owned()))).collect();\n+            options.iter().filter_map(|(k, v)| v.clone().map(|v| (*k, v))).collect();\n \n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition && !attr::eval_condition("}]}