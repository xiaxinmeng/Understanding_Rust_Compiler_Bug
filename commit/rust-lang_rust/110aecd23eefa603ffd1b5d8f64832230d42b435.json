{"sha": "110aecd23eefa603ffd1b5d8f64832230d42b435", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMGFlY2QyM2VlZmE2MDNmZmQxYjVkOGY2NDgzMjIzMGQ0MmI0MzU=", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-09-15T18:48:34Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-09-15T18:48:34Z"}, "message": "factor into struct, and comments", "tree": {"sha": "67c85a49f6c8fe1038859ccd583455672dd4938e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67c85a49f6c8fe1038859ccd583455672dd4938e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/110aecd23eefa603ffd1b5d8f64832230d42b435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/110aecd23eefa603ffd1b5d8f64832230d42b435", "html_url": "https://github.com/rust-lang/rust/commit/110aecd23eefa603ffd1b5d8f64832230d42b435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/110aecd23eefa603ffd1b5d8f64832230d42b435/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2af1ebfbdf01e4aa43fd9b1b5af602b545101e1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2af1ebfbdf01e4aa43fd9b1b5af602b545101e1f", "html_url": "https://github.com/rust-lang/rust/commit/2af1ebfbdf01e4aa43fd9b1b5af602b545101e1f"}], "stats": {"total": 196, "additions": 104, "deletions": 92}, "files": [{"sha": "649ad21385e5e64753719bf25b1ffc4457e6e68e", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/110aecd23eefa603ffd1b5d8f64832230d42b435/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110aecd23eefa603ffd1b5d8f64832230d42b435/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=110aecd23eefa603ffd1b5d8f64832230d42b435", "patch": "@@ -315,7 +315,7 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// The `must_not_suspend` lint guards against values that shouldn't be held across yield points\n+    /// The `must_not_suspend` lint guards against values that shouldn't be held across suspend points\n     /// (`.await`)\n     ///\n     /// ### Example\n@@ -339,10 +339,10 @@ declare_lint! {\n     /// ### Explanation\n     ///\n     /// The `must_not_suspend` lint detects values that are marked with the `#[must_not_suspend]`\n-    /// attribute being held across yield points. A \"yield\" point is usually a `.await` in an async\n+    /// attribute being held across suspend points. A \"suspend\" point is usually a `.await` in an async\n     /// function.\n     ///\n-    /// This attribute can be used to mark values that are semantically incorrect across yields\n+    /// This attribute can be used to mark values that are semantically incorrect across suspends\n     /// (like certain types of timers), values that have async alternatives, and values that\n     /// regularly cause problems with the `Send`-ness of async fn's returned futures (like\n     /// `MutexGuard`'s)"}, {"sha": "e8a24f01b7563ce528067250c0bc12a05d66d746", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 52, "deletions": 68, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/110aecd23eefa603ffd1b5d8f64832230d42b435/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110aecd23eefa603ffd1b5d8f64832230d42b435/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=110aecd23eefa603ffd1b5d8f64832230d42b435", "patch": "@@ -126,12 +126,13 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n                     self.fcx,\n                     ty,\n                     hir_id,\n-                    expr,\n-                    source_span,\n-                    yield_data.span,\n-                    \"\",\n-                    \"\",\n-                    1,\n+                    SuspendCheckData {\n+                        expr,\n+                        source_span,\n+                        yield_span: yield_data.span,\n+                        plural_len: 1,\n+                        ..Default::default()\n+                    },\n                 );\n \n                 self.types.insert(ty::GeneratorInteriorTypeCause {\n@@ -448,56 +449,43 @@ impl<'a, 'tcx> Visitor<'tcx> for ArmPatCollector<'a> {\n     }\n }\n \n+#[derive(Default)]\n+pub struct SuspendCheckData<'a, 'tcx> {\n+    expr: Option<&'tcx Expr<'tcx>>,\n+    source_span: Span,\n+    yield_span: Span,\n+    descr_pre: &'a str,\n+    descr_post: &'a str,\n+    plural_len: usize,\n+}\n+\n // Returns whether it emitted a diagnostic or not\n // Note that this fn and the proceding one are based on the code\n // for creating must_use diagnostics\n pub fn check_must_not_suspend_ty<'tcx>(\n     fcx: &FnCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,\n     hir_id: HirId,\n-    expr: Option<&'tcx Expr<'tcx>>,\n-    source_span: Span,\n-    yield_span: Span,\n-    descr_pre: &str,\n-    descr_post: &str,\n-    plural_len: usize,\n+    data: SuspendCheckData<'_, 'tcx>,\n ) -> bool {\n     if ty.is_unit()\n     // FIXME: should this check `is_ty_uninhabited_from`. This query is not available in this stage\n     // of typeck (before ReVar and RePlaceholder are removed), but may remove noise, like in\n     // `must_use`\n     // || fcx.tcx.is_ty_uninhabited_from(fcx.tcx.parent_module(hir_id).to_def_id(), ty, fcx.param_env)\n     {\n-        return true;\n+        return false;\n     }\n \n-    let plural_suffix = pluralize!(plural_len);\n+    let plural_suffix = pluralize!(data.plural_len);\n \n     match *ty.kind() {\n         ty::Adt(..) if ty.is_box() => {\n             let boxed_ty = ty.boxed_ty();\n-            let descr_pre = &format!(\"{}boxed \", descr_pre);\n-            check_must_not_suspend_ty(\n-                fcx,\n-                boxed_ty,\n-                hir_id,\n-                expr,\n-                source_span,\n-                yield_span,\n-                descr_pre,\n-                descr_post,\n-                plural_len,\n-            )\n+            let descr_pre = &format!(\"{}boxed \", data.descr_pre);\n+            check_must_not_suspend_ty(fcx, boxed_ty, hir_id, SuspendCheckData { descr_pre, ..data })\n         }\n-        ty::Adt(def, _) => check_must_not_suspend_def(\n-            fcx.tcx,\n-            def.did,\n-            hir_id,\n-            source_span,\n-            yield_span,\n-            descr_pre,\n-            descr_post,\n-        ),\n+        ty::Adt(def, _) => check_must_not_suspend_def(fcx.tcx, def.did, hir_id, data),\n         // FIXME: support adding the attribute to TAITs\n         ty::Opaque(def, _) => {\n             let mut has_emitted = false;\n@@ -507,15 +495,12 @@ pub fn check_must_not_suspend_ty<'tcx>(\n                     predicate.kind().skip_binder()\n                 {\n                     let def_id = poly_trait_predicate.trait_ref.def_id;\n-                    let descr_pre = &format!(\"{}implementer{} of \", descr_pre, plural_suffix,);\n+                    let descr_pre = &format!(\"{}implementer{} of \", data.descr_pre, plural_suffix);\n                     if check_must_not_suspend_def(\n                         fcx.tcx,\n                         def_id,\n                         hir_id,\n-                        source_span,\n-                        yield_span,\n-                        descr_pre,\n-                        descr_post,\n+                        SuspendCheckData { descr_pre, ..data },\n                     ) {\n                         has_emitted = true;\n                         break;\n@@ -529,15 +514,12 @@ pub fn check_must_not_suspend_ty<'tcx>(\n             for predicate in binder.iter() {\n                 if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {\n                     let def_id = trait_ref.def_id;\n-                    let descr_post = &format!(\" trait object{}{}\", plural_suffix, descr_post,);\n+                    let descr_post = &format!(\" trait object{}{}\", plural_suffix, data.descr_post);\n                     if check_must_not_suspend_def(\n                         fcx.tcx,\n                         def_id,\n                         hir_id,\n-                        source_span,\n-                        yield_span,\n-                        descr_pre,\n-                        descr_post,\n+                        SuspendCheckData { descr_post, ..data },\n                     ) {\n                         has_emitted = true;\n                         break;\n@@ -548,35 +530,38 @@ pub fn check_must_not_suspend_ty<'tcx>(\n         }\n         ty::Tuple(ref tys) => {\n             let mut has_emitted = false;\n-            let spans = if let Some(hir::ExprKind::Tup(comps)) = expr.map(|e| &e.kind) {\n+            let spans = if let Some(hir::ExprKind::Tup(comps)) = data.expr.map(|e| &e.kind) {\n                 debug_assert_eq!(comps.len(), tys.len());\n                 comps.iter().map(|e| e.span).collect()\n             } else {\n                 vec![]\n             };\n             for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n                 let descr_post = &format!(\" in tuple element {}\", i);\n-                let span = *spans.get(i).unwrap_or(&source_span);\n+                let span = *spans.get(i).unwrap_or(&data.source_span);\n                 if check_must_not_suspend_ty(\n-                    fcx, ty, hir_id, expr, span, yield_span, descr_pre, descr_post, plural_len,\n+                    fcx,\n+                    ty,\n+                    hir_id,\n+                    SuspendCheckData { descr_post, source_span: span, ..data },\n                 ) {\n                     has_emitted = true;\n                 }\n             }\n             has_emitted\n         }\n         ty::Array(ty, len) => {\n-            let descr_pre = &format!(\"{}array{} of \", descr_pre, plural_suffix,);\n+            let descr_pre = &format!(\"{}array{} of \", data.descr_pre, plural_suffix);\n             check_must_not_suspend_ty(\n                 fcx,\n                 ty,\n                 hir_id,\n-                expr,\n-                source_span,\n-                yield_span,\n-                descr_pre,\n-                descr_post,\n-                len.try_eval_usize(fcx.tcx, fcx.param_env).unwrap_or(0) as usize + 1,\n+                SuspendCheckData {\n+                    descr_pre,\n+                    plural_len: len.try_eval_usize(fcx.tcx, fcx.param_env).unwrap_or(0) as usize\n+                        + 1,\n+                    ..data\n+                },\n             )\n         }\n         _ => false,\n@@ -587,39 +572,38 @@ fn check_must_not_suspend_def(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n     hir_id: HirId,\n-    source_span: Span,\n-    yield_span: Span,\n-    descr_pre_path: &str,\n-    descr_post_path: &str,\n+    data: SuspendCheckData<'_, '_>,\n ) -> bool {\n     for attr in tcx.get_attrs(def_id).iter() {\n         if attr.has_name(sym::must_not_suspend) {\n             tcx.struct_span_lint_hir(\n                 rustc_session::lint::builtin::MUST_NOT_SUSPEND,\n                 hir_id,\n-                source_span,\n+                data.source_span,\n                 |lint| {\n                     let msg = format!(\n-                        \"{}`{}`{} held across a yield point, but should not be\",\n-                        descr_pre_path,\n+                        \"{}`{}`{} held across a suspend point, but should not be\",\n+                        data.descr_pre,\n                         tcx.def_path_str(def_id),\n-                        descr_post_path\n+                        data.descr_post,\n                     );\n                     let mut err = lint.build(&msg);\n \n                     // add span pointing to the offending yield/await\n-                    err.span_label(yield_span, \"the value is held across this yield point\");\n+                    err.span_label(data.yield_span, \"the value is held across this suspend point\");\n \n                     // Add optional reason note\n                     if let Some(note) = attr.value_str() {\n-                        err.span_note(source_span, &note.as_str());\n+                        // FIXME(guswynn): consider formatting this better\n+                        err.span_note(data.source_span, &note.as_str());\n                     }\n \n                     // Add some quick suggestions on what to do\n+                    // FIXME: can `drop` work as a suggestion here as well?\n                     err.span_help(\n-                        source_span,\n-                        \"`drop` this value before the yield point, or use a block (`{ ... }`) \\\n-                        to shrink its scope\",\n+                        data.source_span,\n+                        \"consider using a block (`{ ... }`) \\\n+                        to shrink the value's scope, ending before the suspend point\",\n                     );\n \n                     err.emit();"}, {"sha": "edc62b6d687ad32fb12135cc0b176d688daadea0", "filename": "src/test/ui/lint/must_not_suspend/boxed.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/110aecd23eefa603ffd1b5d8f64832230d42b435/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/110aecd23eefa603ffd1b5d8f64832230d42b435/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr?ref=110aecd23eefa603ffd1b5d8f64832230d42b435", "patch": "@@ -1,10 +1,10 @@\n-error: boxed `Umm` held across a yield point, but should not be\n+error: boxed `Umm` held across a suspend point, but should not be\n   --> $DIR/boxed.rs:20:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this yield point\n+   |     ------------- the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/boxed.rs:3:9\n@@ -16,7 +16,7 @@ note: You gotta use Umm's, ya know?\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n-help: `drop` this value before the yield point, or use a block (`{ ... }`) to shrink its scope\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/boxed.rs:20:9\n    |\n LL |     let _guard = bar();"}, {"sha": "8714be6449f92019f9e5bebed4a342bbd9ad3832", "filename": "src/test/ui/lint/must_not_suspend/handled.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/110aecd23eefa603ffd1b5d8f64832230d42b435/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fhandled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110aecd23eefa603ffd1b5d8f64832230d42b435/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fhandled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fhandled.rs?ref=110aecd23eefa603ffd1b5d8f64832230d42b435", "patch": "@@ -0,0 +1,28 @@\n+// edition:2018\n+// run-pass\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n+struct Umm {\n+    _i: i64\n+}\n+\n+\n+fn bar() -> Umm {\n+    Umm {\n+        _i: 1\n+    }\n+}\n+\n+async fn other() {}\n+\n+pub async fn uhoh() {\n+    {\n+        let _guard = bar();\n+    }\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "d4c58bcbcd280a3339792b621b86dbae6347f9d3", "filename": "src/test/ui/lint/must_not_suspend/ref.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/110aecd23eefa603ffd1b5d8f64832230d42b435/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/110aecd23eefa603ffd1b5d8f64832230d42b435/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr?ref=110aecd23eefa603ffd1b5d8f64832230d42b435", "patch": "@@ -1,11 +1,11 @@\n-error: `Umm` held across a yield point, but should not be\n+error: `Umm` held across a suspend point, but should not be\n   --> $DIR/ref.rs:18:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n ...\n LL |         other().await;\n-   |         ------------- the value is held across this yield point\n+   |         ------------- the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/ref.rs:3:9\n@@ -17,27 +17,27 @@ note: You gotta use Umm's, ya know?\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n-help: `drop` this value before the yield point, or use a block (`{ ... }`) to shrink its scope\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/ref.rs:18:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n \n-error: `Umm` held across a yield point, but should not be\n+error: `Umm` held across a suspend point, but should not be\n   --> $DIR/ref.rs:18:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n ...\n LL |         other().await;\n-   |         ------------- the value is held across this yield point\n+   |         ------------- the value is held across this suspend point\n    |\n note: You gotta use Umm's, ya know?\n   --> $DIR/ref.rs:18:26\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n-help: `drop` this value before the yield point, or use a block (`{ ... }`) to shrink its scope\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/ref.rs:18:26\n    |\n LL |         let guard = &mut self.u;"}, {"sha": "d19ffddd482e0ab851b0bfc37b84d9831653556b", "filename": "src/test/ui/lint/must_not_suspend/trait.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/110aecd23eefa603ffd1b5d8f64832230d42b435/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/110aecd23eefa603ffd1b5d8f64832230d42b435/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr?ref=110aecd23eefa603ffd1b5d8f64832230d42b435", "patch": "@@ -1,33 +1,33 @@\n-error: implementer of `Wow` held across a yield point, but should not be\n+error: implementer of `Wow` held across a suspend point, but should not be\n   --> $DIR/trait.rs:21:9\n    |\n LL |     let _guard1 = r#impl();\n    |         ^^^^^^^\n ...\n LL |     other().await;\n-   |     ------------- the value is held across this yield point\n+   |     ------------- the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/trait.rs:3:9\n    |\n LL | #![deny(must_not_suspend)]\n    |         ^^^^^^^^^^^^^^^^\n-help: `drop` this value before the yield point, or use a block (`{ ... }`) to shrink its scope\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/trait.rs:21:9\n    |\n LL |     let _guard1 = r#impl();\n    |         ^^^^^^^\n \n-error: boxed `Wow` trait object held across a yield point, but should not be\n+error: boxed `Wow` trait object held across a suspend point, but should not be\n   --> $DIR/trait.rs:22:9\n    |\n LL |     let _guard2 = r#dyn();\n    |         ^^^^^^^\n LL | \n LL |     other().await;\n-   |     ------------- the value is held across this yield point\n+   |     ------------- the value is held across this suspend point\n    |\n-help: `drop` this value before the yield point, or use a block (`{ ... }`) to shrink its scope\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/trait.rs:22:9\n    |\n LL |     let _guard2 = r#dyn();"}, {"sha": "425c076823d2f30b23d3ad047142bb1a78c6efc8", "filename": "src/test/ui/lint/must_not_suspend/unit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/110aecd23eefa603ffd1b5d8f64832230d42b435/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/110aecd23eefa603ffd1b5d8f64832230d42b435/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr?ref=110aecd23eefa603ffd1b5d8f64832230d42b435", "patch": "@@ -1,10 +1,10 @@\n-error: `Umm` held across a yield point, but should not be\n+error: `Umm` held across a suspend point, but should not be\n   --> $DIR/unit.rs:20:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this yield point\n+   |     ------------- the value is held across this suspend point\n    |\n note: the lint level is defined here\n   --> $DIR/unit.rs:3:9\n@@ -16,7 +16,7 @@ note: You gotta use Umm's, ya know?\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n-help: `drop` this value before the yield point, or use a block (`{ ... }`) to shrink its scope\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/unit.rs:20:9\n    |\n LL |     let _guard = bar();"}, {"sha": "24f52275b430afe1114bc69926318f92970e8335", "filename": "src/test/ui/lint/must_not_suspend/warn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/110aecd23eefa603ffd1b5d8f64832230d42b435/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/110aecd23eefa603ffd1b5d8f64832230d42b435/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr?ref=110aecd23eefa603ffd1b5d8f64832230d42b435", "patch": "@@ -1,18 +1,18 @@\n-warning: `Umm` held across a yield point, but should not be\n+warning: `Umm` held across a suspend point, but should not be\n   --> $DIR/warn.rs:20:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n LL |     other().await;\n-   |     ------------- the value is held across this yield point\n+   |     ------------- the value is held across this suspend point\n    |\n    = note: `#[warn(must_not_suspend)]` on by default\n note: You gotta use Umm's, ya know?\n   --> $DIR/warn.rs:20:9\n    |\n LL |     let _guard = bar();\n    |         ^^^^^^\n-help: `drop` this value before the yield point, or use a block (`{ ... }`) to shrink its scope\n+help: consider using a block (`{ ... }`) to shrink the value's scope, ending before the suspend point\n   --> $DIR/warn.rs:20:9\n    |\n LL |     let _guard = bar();"}]}