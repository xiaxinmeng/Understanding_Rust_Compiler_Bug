{"sha": "0812759840eb9c52e646729603a207c2a0ed1a65", "node_id": "C_kwDOAAsO6NoAKDA4MTI3NTk4NDBlYjljNTJlNjQ2NzI5NjAzYTIwN2MyYTBlZDFhNjU", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-05-02T06:10:56Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2022-05-02T07:08:21Z"}, "message": "Avoid use of `rand::thread_rng` in stdlib benchmarks", "tree": {"sha": "c2554ee7259d66c2994dc18386455387ecb44810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2554ee7259d66c2994dc18386455387ecb44810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0812759840eb9c52e646729603a207c2a0ed1a65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0+qV0hta6XFe2D54u/UMJ4RyKgFAmJvg2oACgkQ4u/UMJ4R\nyKiSnA/+JtOsioiAiFvE+dsu5BEKvYTZYyp1qwGVqXZYQ1kUEhXv1C0zRkBzF8v/\nUpHu8GdnroXfuBGwHxCvknL/TXghpylPpUJAr/KmYcj3IJEDWJveEX+fd+wnjbut\ndmNjm4nd2Ro+rcTjofgHJ3ISYDOkeZEno2hhAzoLs9JwDX/vxblHKwbgTnZoiMGO\n5+OW4jBYKrdspYFS7AN9ebddD94hEwVoOZM/Rc+hnwZuUFYUpAoFkR/d9kd8mR5C\n/C57J/lgrUmrzp0T0yjXaORDVTrzHnbwWHpMk/7g0ogoNWecxBXoXPghM7clNzaO\nfYm+RfT+obxQFGPirgGIJuMjL+GoOAfFT1Hux4vKwqfbFgsStKvcROevmaOvuMw5\ngr/fyeI0yqDF5HJhPfZGT38DGjFxNtoxMJtVI9bqc2+csCurSHP8tjUTA17CNo3a\nH3SelpvH1lkf7hQAqwDPEUGC9/paVCEFin4RQbmsHX2x9JZMI+SJDlLAY76ahmAH\nUvqtYksFrGhi1tu5i9TKjd8Mz3DNdVWSPitOVUOL0cwRfV68eZriXnTFf/88uoDZ\nCdwIdIMahkGYi2pVz16keUTdbKUqrmq85r+xWMAcvDqxYrgrHTNBGZYTyYV/At+V\nIVybHfFSUonNM695D0VBOug/9GJvUY/A4ZcJ5m+VMuVNe4iK/ME=\n=6MGS\n-----END PGP SIGNATURE-----", "payload": "tree c2554ee7259d66c2994dc18386455387ecb44810\nparent 4c5efea6fed6fdb30ffcbb49325c76e2856ac01d\nauthor Thom Chiovoloni <chiovolonit@gmail.com> 1651471856 -0700\ncommitter Thom Chiovoloni <chiovolonit@gmail.com> 1651475301 -0700\n\nAvoid use of `rand::thread_rng` in stdlib benchmarks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0812759840eb9c52e646729603a207c2a0ed1a65", "html_url": "https://github.com/rust-lang/rust/commit/0812759840eb9c52e646729603a207c2a0ed1a65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0812759840eb9c52e646729603a207c2a0ed1a65/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c5efea6fed6fdb30ffcbb49325c76e2856ac01d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5efea6fed6fdb30ffcbb49325c76e2856ac01d", "html_url": "https://github.com/rust-lang/rust/commit/4c5efea6fed6fdb30ffcbb49325c76e2856ac01d"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "f4d2caea44300150fe26f90d6877adc9d61bda9e", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0812759840eb9c52e646729603a207c2a0ed1a65/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0812759840eb9c52e646729603a207c2a0ed1a65/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0812759840eb9c52e646729603a207c2a0ed1a65", "patch": "@@ -827,6 +827,7 @@ name = \"core\"\n version = \"0.0.0\"\n dependencies = [\n  \"rand 0.7.3\",\n+ \"rand_xorshift\",\n ]\n \n [[package]]"}, {"sha": "917e71f250ee8b16181f70ada342f607fd6cf7b0", "filename": "library/alloc/benches/binary_heap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Falloc%2Fbenches%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Falloc%2Fbenches%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fbinary_heap.rs?ref=0812759840eb9c52e646729603a207c2a0ed1a65", "patch": "@@ -1,11 +1,11 @@\n use std::collections::BinaryHeap;\n \n-use rand::{seq::SliceRandom, thread_rng};\n+use rand::seq::SliceRandom;\n use test::{black_box, Bencher};\n \n #[bench]\n fn bench_find_smallest_1000(b: &mut Bencher) {\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n     let mut vec: Vec<u32> = (0..100_000).collect();\n     vec.shuffle(&mut rng);\n \n@@ -47,7 +47,7 @@ fn bench_peek_mut_deref_mut(b: &mut Bencher) {\n \n #[bench]\n fn bench_from_vec(b: &mut Bencher) {\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n     let mut vec: Vec<u32> = (0..100_000).collect();\n     vec.shuffle(&mut rng);\n \n@@ -64,7 +64,7 @@ fn bench_into_sorted_vec(b: &mut Bencher) {\n #[bench]\n fn bench_push(b: &mut Bencher) {\n     let mut bheap = BinaryHeap::with_capacity(50_000);\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n     let mut vec: Vec<u32> = (0..50_000).collect();\n     vec.shuffle(&mut rng);\n "}, {"sha": "1f6b87fb0e40faf74c067df84ed2e28ad757d357", "filename": "library/alloc/benches/btree/map.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fbtree%2Fmap.rs?ref=0812759840eb9c52e646729603a207c2a0ed1a65", "patch": "@@ -3,7 +3,7 @@ use std::iter::Iterator;\n use std::ops::RangeBounds;\n use std::vec::Vec;\n \n-use rand::{seq::SliceRandom, thread_rng, Rng};\n+use rand::{seq::SliceRandom, Rng};\n use test::{black_box, Bencher};\n \n macro_rules! map_insert_rand_bench {\n@@ -13,7 +13,7 @@ macro_rules! map_insert_rand_bench {\n             let n: usize = $n;\n             let mut map = $map::new();\n             // setup\n-            let mut rng = thread_rng();\n+            let mut rng = crate::bench_rng();\n \n             for _ in 0..n {\n                 let i = rng.gen::<usize>() % n;\n@@ -60,7 +60,7 @@ macro_rules! map_from_iter_rand_bench {\n         pub fn $name(b: &mut Bencher) {\n             let n: usize = $n;\n             // setup\n-            let mut rng = thread_rng();\n+            let mut rng = crate::bench_rng();\n             let mut vec = Vec::with_capacity(n);\n \n             for _ in 0..n {\n@@ -106,7 +106,7 @@ macro_rules! map_find_rand_bench {\n             let n: usize = $n;\n \n             // setup\n-            let mut rng = thread_rng();\n+            let mut rng = crate::bench_rng();\n             let mut keys: Vec<_> = (0..n).map(|_| rng.gen::<usize>() % n).collect();\n \n             for &k in &keys {\n@@ -169,7 +169,7 @@ map_find_seq_bench! {find_seq_10_000, 10_000, BTreeMap}\n \n fn bench_iteration(b: &mut Bencher, size: i32) {\n     let mut map = BTreeMap::<i32, i32>::new();\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n \n     for _ in 0..size {\n         map.insert(rng.gen(), rng.gen());\n@@ -199,7 +199,7 @@ pub fn iteration_100000(b: &mut Bencher) {\n \n fn bench_iteration_mut(b: &mut Bencher, size: i32) {\n     let mut map = BTreeMap::<i32, i32>::new();\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n \n     for _ in 0..size {\n         map.insert(rng.gen(), rng.gen());"}, {"sha": "3f4b0e0f14af7497f57675b6350f092a14b2fa8b", "filename": "library/alloc/benches/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Falloc%2Fbenches%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Falloc%2Fbenches%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fbtree%2Fset.rs?ref=0812759840eb9c52e646729603a207c2a0ed1a65", "patch": "@@ -1,10 +1,10 @@\n use std::collections::BTreeSet;\n \n-use rand::{thread_rng, Rng};\n+use rand::Rng;\n use test::Bencher;\n \n fn random(n: usize) -> BTreeSet<usize> {\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n     let mut set = BTreeSet::new();\n     while set.len() < n {\n         set.insert(rng.gen());"}, {"sha": "7dc0f7cebd535e886446fc9898a573e2f666d229", "filename": "library/alloc/benches/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Falloc%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Falloc%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Flib.rs?ref=0812759840eb9c52e646729603a207c2a0ed1a65", "patch": "@@ -17,3 +17,11 @@ mod str;\n mod string;\n mod vec;\n mod vec_deque;\n+\n+/// Returns a `rand::Rng` seeded with a consistent seed.\n+///\n+/// This is done to avoid introducing nondeterminism in benchmark results.\n+fn bench_rng() -> rand_xorshift::XorShiftRng {\n+    const SEED: [u8; 16] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n+    rand::SeedableRng::from_seed(SEED)\n+}"}, {"sha": "bd6f38f2f100322d57fe9569bd8fe01b66ff9258", "filename": "library/alloc/benches/slice.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Falloc%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Falloc%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fslice.rs?ref=0812759840eb9c52e646729603a207c2a0ed1a65", "patch": "@@ -1,8 +1,7 @@\n use std::{mem, ptr};\n \n use rand::distributions::{Alphanumeric, Standard};\n-use rand::{thread_rng, Rng, SeedableRng};\n-use rand_xorshift::XorShiftRng;\n+use rand::Rng;\n use test::{black_box, Bencher};\n \n #[bench]\n@@ -152,7 +151,7 @@ fn zero_1kb_mut_iter(b: &mut Bencher) {\n \n #[bench]\n fn random_inserts(b: &mut Bencher) {\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n     b.iter(|| {\n         let mut v = vec![(0, 0); 30];\n         for _ in 0..100 {\n@@ -164,7 +163,7 @@ fn random_inserts(b: &mut Bencher) {\n \n #[bench]\n fn random_removes(b: &mut Bencher) {\n-    let mut rng = thread_rng();\n+    let mut rng = crate::bench_rng();\n     b.iter(|| {\n         let mut v = vec![(0, 0); 130];\n         for _ in 0..100 {\n@@ -182,20 +181,18 @@ fn gen_descending(len: usize) -> Vec<u64> {\n     (0..len as u64).rev().collect()\n }\n \n-const SEED: [u8; 16] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n-\n fn gen_random(len: usize) -> Vec<u64> {\n-    let mut rng = XorShiftRng::from_seed(SEED);\n+    let mut rng = crate::bench_rng();\n     (&mut rng).sample_iter(&Standard).take(len).collect()\n }\n \n fn gen_random_bytes(len: usize) -> Vec<u8> {\n-    let mut rng = XorShiftRng::from_seed(SEED);\n+    let mut rng = crate::bench_rng();\n     (&mut rng).sample_iter(&Standard).take(len).collect()\n }\n \n fn gen_mostly_ascending(len: usize) -> Vec<u64> {\n-    let mut rng = XorShiftRng::from_seed(SEED);\n+    let mut rng = crate::bench_rng();\n     let mut v = gen_ascending(len);\n     for _ in (0usize..).take_while(|x| x * x <= len) {\n         let x = rng.gen::<usize>() % len;\n@@ -206,7 +203,7 @@ fn gen_mostly_ascending(len: usize) -> Vec<u64> {\n }\n \n fn gen_mostly_descending(len: usize) -> Vec<u64> {\n-    let mut rng = XorShiftRng::from_seed(SEED);\n+    let mut rng = crate::bench_rng();\n     let mut v = gen_descending(len);\n     for _ in (0usize..).take_while(|x| x * x <= len) {\n         let x = rng.gen::<usize>() % len;\n@@ -217,7 +214,7 @@ fn gen_mostly_descending(len: usize) -> Vec<u64> {\n }\n \n fn gen_strings(len: usize) -> Vec<String> {\n-    let mut rng = XorShiftRng::from_seed(SEED);\n+    let mut rng = crate::bench_rng();\n     let mut v = vec![];\n     for _ in 0..len {\n         let n = rng.gen::<usize>() % 20 + 1;\n@@ -227,7 +224,7 @@ fn gen_strings(len: usize) -> Vec<String> {\n }\n \n fn gen_big_random(len: usize) -> Vec<[u64; 16]> {\n-    let mut rng = XorShiftRng::from_seed(SEED);\n+    let mut rng = crate::bench_rng();\n     (&mut rng).sample_iter(&Standard).map(|x| [x; 16]).take(len).collect()\n }\n "}, {"sha": "efc47327e8a86d2fd89b8dec30bf076eb468750f", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=0812759840eb9c52e646729603a207c2a0ed1a65", "patch": "@@ -476,7 +476,7 @@ fn bench_in_place_recycle(b: &mut Bencher) {\n #[bench]\n fn bench_in_place_zip_recycle(b: &mut Bencher) {\n     let mut data = vec![0u8; 1000];\n-    let mut rng = rand::thread_rng();\n+    let mut rng = crate::bench_rng();\n     let mut subst = vec![0u8; 1000];\n     rng.fill_bytes(&mut subst[..]);\n \n@@ -495,7 +495,7 @@ fn bench_in_place_zip_recycle(b: &mut Bencher) {\n #[bench]\n fn bench_in_place_zip_iter_mut(b: &mut Bencher) {\n     let mut data = vec![0u8; 256];\n-    let mut rng = rand::thread_rng();\n+    let mut rng = crate::bench_rng();\n     let mut subst = vec![0u8; 1000];\n     rng.fill_bytes(&mut subst[..]);\n "}, {"sha": "2a7df9556cfe194d9925a70b7414ad7893241ef5", "filename": "library/core/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Fcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Fcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2FCargo.toml?ref=0812759840eb9c52e646729603a207c2a0ed1a65", "patch": "@@ -25,6 +25,7 @@ test = true\n \n [dev-dependencies]\n rand = \"0.7\"\n+rand_xorshift = \"0.2\"\n \n [features]\n # Make panics and failed asserts immediately abort without formatting any message"}, {"sha": "5e19b6db854891a47042d57ab9def061aedfea9c", "filename": "library/core/benches/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Fcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Fcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Flib.rs?ref=0812759840eb9c52e646729603a207c2a0ed1a65", "patch": "@@ -17,3 +17,11 @@ mod ops;\n mod pattern;\n mod slice;\n mod str;\n+\n+/// Returns a `rand::Rng` seeded with a consistent seed.\n+///\n+/// This is done to avoid introducing nondeterminism in benchmark results.\n+fn bench_rng() -> rand_xorshift::XorShiftRng {\n+    const SEED: [u8; 16] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n+    rand::SeedableRng::from_seed(SEED)\n+}"}, {"sha": "19864d2d4676a6d1cf9bd3c3460b03546e1628a2", "filename": "library/core/benches/num/int_log/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0812759840eb9c52e646729603a207c2a0ed1a65/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fbenches%2Fnum%2Fint_log%2Fmod.rs?ref=0812759840eb9c52e646729603a207c2a0ed1a65", "patch": "@@ -17,7 +17,7 @@ macro_rules! int_log_bench {\n \n         #[bench]\n         fn $random(bench: &mut Bencher) {\n-            let mut rng = rand::thread_rng();\n+            let mut rng = crate::bench_rng();\n             /* Exponentially distributed random numbers from the whole range of the type.  */\n             let numbers: Vec<$t> = (0..256)\n                 .map(|_| {\n@@ -34,7 +34,7 @@ macro_rules! int_log_bench {\n \n         #[bench]\n         fn $random_small(bench: &mut Bencher) {\n-            let mut rng = rand::thread_rng();\n+            let mut rng = crate::bench_rng();\n             /* Exponentially distributed random numbers from the range 0..256.  */\n             let numbers: Vec<$t> = (0..256)\n                 .map(|_| {"}]}