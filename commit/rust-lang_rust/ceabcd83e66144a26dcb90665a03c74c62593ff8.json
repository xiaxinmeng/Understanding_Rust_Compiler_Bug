{"sha": "ceabcd83e66144a26dcb90665a03c74c62593ff8", "node_id": "C_kwDOAAsO6NoAKGNlYWJjZDgzZTY2MTQ0YTI2ZGNiOTA2NjVhMDNjNzRjNjI1OTNmZjg", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-19T18:12:39Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-19T19:10:25Z"}, "message": "Remove useless check (drive-by cleanup)\n\nWhile it might *seem* that this does something, it actually doesn't.\n`mut_borrow_of_mutable_ref` returns a `bool` that is ignored by the\nlet-else. This was basically\n```rust\nif !self.body.local_decls.get(local).is_some() {\n    return\n}\n```\nWhich is pretty useless", "tree": {"sha": "9d2fc7abdd1a10452c4b45e8e36ab821d3a935a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d2fc7abdd1a10452c4b45e8e36ab821d3a935a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceabcd83e66144a26dcb90665a03c74c62593ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceabcd83e66144a26dcb90665a03c74c62593ff8", "html_url": "https://github.com/rust-lang/rust/commit/ceabcd83e66144a26dcb90665a03c74c62593ff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceabcd83e66144a26dcb90665a03c74c62593ff8/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eac6fe21e1f82b1cc3c528b6a4b241fe5509b40", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eac6fe21e1f82b1cc3c528b6a4b241fe5509b40", "html_url": "https://github.com/rust-lang/rust/commit/4eac6fe21e1f82b1cc3c528b6a4b241fe5509b40"}], "stats": {"total": 16, "additions": 1, "deletions": 15}, "files": [{"sha": "9823657c03837e8d0c65a321696f34fc2e908088", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ceabcd83e66144a26dcb90665a03c74c62593ff8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceabcd83e66144a26dcb90665a03c74c62593ff8/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=ceabcd83e66144a26dcb90665a03c74c62593ff8", "patch": "@@ -30,7 +30,6 @@ use crate::borrow_set::TwoPhaseActivation;\n use crate::borrowck_errors;\n \n use crate::diagnostics::conflict_errors::StorageDeadOrDrop::LocalStorageDead;\n-use crate::diagnostics::mutability_errors::mut_borrow_of_mutable_ref;\n use crate::diagnostics::{find_all_local_uses, CapturedMessageOpt};\n use crate::{\n     borrow_set::BorrowData, diagnostics::Instance, prefixes::IsPrefixOf,\n@@ -959,11 +958,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     &msg_borrow,\n                     None,\n                 );\n-                self.suggest_binding_for_closure_capture_self(\n-                    &mut err,\n-                    issued_borrow.borrowed_place,\n-                    &issued_spans,\n-                );\n+                self.suggest_binding_for_closure_capture_self(&mut err, &issued_spans);\n                 err\n             }\n \n@@ -1271,20 +1266,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn suggest_binding_for_closure_capture_self(\n         &self,\n         err: &mut Diagnostic,\n-        borrowed_place: Place<'tcx>,\n         issued_spans: &UseSpans<'tcx>,\n     ) {\n         let UseSpans::ClosureUse { capture_kind_span, .. } = issued_spans else { return };\n         let hir = self.infcx.tcx.hir();\n \n-        // check whether the borrowed place is capturing `self` by mut reference\n-        let local = borrowed_place.local;\n-        let Some(_) = self\n-            .body\n-            .local_decls\n-            .get(local)\n-            .map(|l| mut_borrow_of_mutable_ref(l, self.local_names[local])) else { return };\n-\n         struct ExpressionFinder<'hir> {\n             capture_span: Span,\n             closure_change_spans: Vec<Span>,"}]}