{"sha": "fb1e03168570852507dd4852af501fec571137e8", "node_id": "C_kwDOAAsO6NoAKGZiMWUwMzE2ODU3MDg1MjUwN2RkNDg1MmFmNTAxZmVjNTcxMTM3ZTg", "commit": {"author": {"name": "Xidorn Quan", "email": "me@upsuper.org", "date": "2021-12-06T14:26:58Z"}, "committer": {"name": "Xidorn Quan", "email": "me@upsuper.org", "date": "2021-12-11T10:07:41Z"}, "message": "Remove unnecessary bounds for some Hash{Map,Set} methods", "tree": {"sha": "25f3d0e89c4226d0ee8d706d6daa43294384f288", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25f3d0e89c4226d0ee8d706d6daa43294384f288"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb1e03168570852507dd4852af501fec571137e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1e03168570852507dd4852af501fec571137e8", "html_url": "https://github.com/rust-lang/rust/commit/fb1e03168570852507dd4852af501fec571137e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb1e03168570852507dd4852af501fec571137e8/comments", "author": {"login": "upsuper", "id": 333750, "node_id": "MDQ6VXNlcjMzMzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/333750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/upsuper", "html_url": "https://github.com/upsuper", "followers_url": "https://api.github.com/users/upsuper/followers", "following_url": "https://api.github.com/users/upsuper/following{/other_user}", "gists_url": "https://api.github.com/users/upsuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/upsuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/upsuper/subscriptions", "organizations_url": "https://api.github.com/users/upsuper/orgs", "repos_url": "https://api.github.com/users/upsuper/repos", "events_url": "https://api.github.com/users/upsuper/events{/privacy}", "received_events_url": "https://api.github.com/users/upsuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "upsuper", "id": 333750, "node_id": "MDQ6VXNlcjMzMzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/333750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/upsuper", "html_url": "https://github.com/upsuper", "followers_url": "https://api.github.com/users/upsuper/followers", "following_url": "https://api.github.com/users/upsuper/following{/other_user}", "gists_url": "https://api.github.com/users/upsuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/upsuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/upsuper/subscriptions", "organizations_url": "https://api.github.com/users/upsuper/orgs", "repos_url": "https://api.github.com/users/upsuper/repos", "events_url": "https://api.github.com/users/upsuper/events{/privacy}", "received_events_url": "https://api.github.com/users/upsuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a66a704b2c3d30ff07d89380ebb9ba3de3b3182", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a66a704b2c3d30ff07d89380ebb9ba3de3b3182", "html_url": "https://github.com/rust-lang/rust/commit/4a66a704b2c3d30ff07d89380ebb9ba3de3b3182"}], "stats": {"total": 198, "additions": 99, "deletions": 99}, "files": [{"sha": "a35fca37f6bd54b5892fb5c0815aa4555e079ebf", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 77, "deletions": 77, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/fb1e03168570852507dd4852af501fec571137e8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1e03168570852507dd4852af501fec571137e8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=fb1e03168570852507dd4852af501fec571137e8", "patch": "@@ -349,6 +349,33 @@ impl<K, V, S> HashMap<K, V, S> {\n         Keys { inner: self.iter() }\n     }\n \n+    /// Creates a consuming iterator visiting all the keys in arbitrary order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `K`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n+    ///\n+    /// let mut vec: Vec<&str> = map.into_keys().collect();\n+    /// // The `IntoKeys` iterator produces keys in arbitrary order, so the\n+    /// // keys must be sorted to test them against a sorted array.\n+    /// vec.sort_unstable();\n+    /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n+    pub fn into_keys(self) -> IntoKeys<K, V> {\n+        IntoKeys { inner: self.into_iter() }\n+    }\n+\n     /// An iterator visiting all values in arbitrary order.\n     /// The iterator element type is `&'a V`.\n     ///\n@@ -399,6 +426,33 @@ impl<K, V, S> HashMap<K, V, S> {\n         ValuesMut { inner: self.iter_mut() }\n     }\n \n+    /// Creates a consuming iterator visiting all the values in arbitrary order.\n+    /// The map cannot be used after calling this.\n+    /// The iterator element type is `V`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let map = HashMap::from([\n+    ///     (\"a\", 1),\n+    ///     (\"b\", 2),\n+    ///     (\"c\", 3),\n+    /// ]);\n+    ///\n+    /// let mut vec: Vec<i32> = map.into_values().collect();\n+    /// // The `IntoValues` iterator produces values in arbitrary order, so\n+    /// // the values must be sorted to test them against a sorted array.\n+    /// vec.sort_unstable();\n+    /// assert_eq!(vec, [1, 2, 3]);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n+    pub fn into_values(self) -> IntoValues<K, V> {\n+        IntoValues { inner: self.into_iter() }\n+    }\n+\n     /// An iterator visiting all key-value pairs in arbitrary order.\n     /// The iterator element type is `(&'a K, &'a V)`.\n     ///\n@@ -555,6 +609,29 @@ impl<K, V, S> HashMap<K, V, S> {\n         DrainFilter { base: self.base.drain_filter(pred) }\n     }\n \n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n+    /// The elements are visited in unsorted (and unspecified) order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n+    /// map.retain(|&k, _| k % 2 == 0);\n+    /// assert_eq!(map.len(), 4);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n+    pub fn retain<F>(&mut self, f: F)\n+    where\n+        F: FnMut(&K, &mut V) -> bool,\n+    {\n+        self.base.retain(f)\n+    }\n+\n     /// Clears the map, removing all key-value pairs. Keeps the allocated memory\n     /// for reuse.\n     ///\n@@ -937,83 +1014,6 @@ where\n     {\n         self.base.remove_entry(k)\n     }\n-\n-    /// Retains only the elements specified by the predicate.\n-    ///\n-    /// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n-    /// The elements are visited in unsorted (and unspecified) order.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    ///\n-    /// let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n-    /// map.retain(|&k, _| k % 2 == 0);\n-    /// assert_eq!(map.len(), 4);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n-    pub fn retain<F>(&mut self, f: F)\n-    where\n-        F: FnMut(&K, &mut V) -> bool,\n-    {\n-        self.base.retain(f)\n-    }\n-\n-    /// Creates a consuming iterator visiting all the keys in arbitrary order.\n-    /// The map cannot be used after calling this.\n-    /// The iterator element type is `K`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    ///\n-    /// let map = HashMap::from([\n-    ///     (\"a\", 1),\n-    ///     (\"b\", 2),\n-    ///     (\"c\", 3),\n-    /// ]);\n-    ///\n-    /// let mut vec: Vec<&str> = map.into_keys().collect();\n-    /// // The `IntoKeys` iterator produces keys in arbitrary order, so the\n-    /// // keys must be sorted to test them against a sorted array.\n-    /// vec.sort_unstable();\n-    /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n-    pub fn into_keys(self) -> IntoKeys<K, V> {\n-        IntoKeys { inner: self.into_iter() }\n-    }\n-\n-    /// Creates a consuming iterator visiting all the values in arbitrary order.\n-    /// The map cannot be used after calling this.\n-    /// The iterator element type is `V`.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashMap;\n-    ///\n-    /// let map = HashMap::from([\n-    ///     (\"a\", 1),\n-    ///     (\"b\", 2),\n-    ///     (\"c\", 3),\n-    /// ]);\n-    ///\n-    /// let mut vec: Vec<i32> = map.into_values().collect();\n-    /// // The `IntoValues` iterator produces values in arbitrary order, so\n-    /// // the values must be sorted to test them against a sorted array.\n-    /// vec.sort_unstable();\n-    /// assert_eq!(vec, [1, 2, 3]);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n-    pub fn into_values(self) -> IntoValues<K, V> {\n-        IntoValues { inner: self.into_iter() }\n-    }\n }\n \n impl<K, V, S> HashMap<K, V, S>"}, {"sha": "0d087772bf931053a54660844e15e6f7997e189a", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fb1e03168570852507dd4852af501fec571137e8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb1e03168570852507dd4852af501fec571137e8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=fb1e03168570852507dd4852af501fec571137e8", "patch": "@@ -290,6 +290,28 @@ impl<T, S> HashSet<T, S> {\n         DrainFilter { base: self.base.drain_filter(pred) }\n     }\n \n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n+    /// The elements are visited in unsorted (and unspecified) order.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashSet;\n+    ///\n+    /// let mut set = HashSet::from([1, 2, 3, 4, 5, 6]);\n+    /// set.retain(|&k| k % 2 == 0);\n+    /// assert_eq!(set.len(), 3);\n+    /// ```\n+    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n+    pub fn retain<F>(&mut self, f: F)\n+    where\n+        F: FnMut(&T) -> bool,\n+    {\n+        self.base.retain(f)\n+    }\n+\n     /// Clears the set, removing all values.\n     ///\n     /// # Examples\n@@ -906,28 +928,6 @@ where\n     {\n         self.base.take(value)\n     }\n-\n-    /// Retains only the elements specified by the predicate.\n-    ///\n-    /// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n-    /// The elements are visited in unsorted (and unspecified) order.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::collections::HashSet;\n-    ///\n-    /// let mut set = HashSet::from([1, 2, 3, 4, 5, 6]);\n-    /// set.retain(|&k| k % 2 == 0);\n-    /// assert_eq!(set.len(), 3);\n-    /// ```\n-    #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n-    pub fn retain<F>(&mut self, f: F)\n-    where\n-        F: FnMut(&T) -> bool,\n-    {\n-        self.base.retain(f)\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}