{"sha": "ac43ba8bb8edd53090f8749c6be93eb7b7950488", "node_id": "C_kwDOAAsO6NoAKGFjNDNiYThiYjhlZGQ1MzA5MGY4NzQ5YzZiZTkzZWI3Yjc5NTA0ODg", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-24T00:53:30Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-24T00:54:31Z"}, "message": "Format with rust-lang/rust's rustfmt settings", "tree": {"sha": "42945d7c0d9f2536df441625f03bfebc106debe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42945d7c0d9f2536df441625f03bfebc106debe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac43ba8bb8edd53090f8749c6be93eb7b7950488", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHFGkcACgkQ+boUO5X/\nbYKMfhAAla4hQGKSo8cbbl/C9uU7FLZRBefR5hN1nFQ/muNZMWgKB1yIq8MGbxGe\n2ZXJrcDf2Q6Dus6T/VhQvoCXmxBtQxXSi4ITlu2A0cm8j/3sWPrb2NOKVdhyFzSe\n6oHBL1dYHtz4OjJd64duKGU4GIzS6Njfq2JGM4bgjVU9AZUJMIZSP+BAQDFqqoM8\nkwdiUtZYOrgn/9s06HyWP50xpYKEtcjNRFlJXUMya9IBTa/1fjufQaTp6sTndGHC\nNiJsUrE8s/lq/Mx3m/eZmHL/VcWxdI4e/E7Cl5I1eSUfvaOxGRn2yykUvD4hWYEA\n5eTQIC0qpRNjj3MVX1INN9SPVB7QOHRMORt6K4Y0ud8/YkbPQt93dT3dXAU4wuxZ\nNRta+oDMpzbD14py1sPUHZC02hi95fVwWEPDazG/gR7orNZeLC5RYnfT6iZMvr9+\nxEENQWMqw5+rMmHhPmWJkr3PoqiS7unHO5Cd6PjEYvZLUolNr/YEhlSMwX+DZ+FK\nzp+qLLgeKcpKSClfNupLNwN1UOfs0B09pNvn/iMQhGgVK6Q2GS1N0uPOT43Hw6mr\ndHCzmRe6rc9kanc1tb9ow9a5vTaFAFjMUhOLVvT0DlPZNU9eCNEceDJMDDaE2vLH\nGvfO6SFNNfyPWy2e58NwC0DfVyzYUfMXXCfUv2pxWnflSQfJdzM=\n=7qYd\n-----END PGP SIGNATURE-----", "payload": "tree 42945d7c0d9f2536df441625f03bfebc106debe1\nparent a51326f1bafe669523a2aa413d2c068b2fe86ed6\nauthor David Tolnay <dtolnay@gmail.com> 1640307210 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640307271 -0800\n\nFormat with rust-lang/rust's rustfmt settings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac43ba8bb8edd53090f8749c6be93eb7b7950488", "html_url": "https://github.com/rust-lang/rust/commit/ac43ba8bb8edd53090f8749c6be93eb7b7950488", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac43ba8bb8edd53090f8749c6be93eb7b7950488/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a51326f1bafe669523a2aa413d2c068b2fe86ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a51326f1bafe669523a2aa413d2c068b2fe86ed6", "html_url": "https://github.com/rust-lang/rust/commit/a51326f1bafe669523a2aa413d2c068b2fe86ed6"}], "stats": {"total": 55, "additions": 14, "deletions": 41}, "files": [{"sha": "39aac34d45a4a2307c8b8ce3f9a6313c34b9867f", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 14, "deletions": 41, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ac43ba8bb8edd53090f8749c6be93eb7b7950488/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac43ba8bb8edd53090f8749c6be93eb7b7950488/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=ac43ba8bb8edd53090f8749c6be93eb7b7950488", "patch": "@@ -116,10 +116,7 @@ fn test_expr() {\n \n     // ExprKind::Binary\n     assert_eq!(stringify_expr!(true || false), \"true || false\");\n-    assert_eq!(\n-        stringify_expr!(true || false && false),\n-        \"true || false && false\",\n-    );\n+    assert_eq!(stringify_expr!(true || false && false), \"true || false && false\");\n \n     // ExprKind::Unary\n     assert_eq!(stringify_expr!(*expr), \"*expr\");\n@@ -180,10 +177,7 @@ fn test_expr() {\n     // ExprKind::While\n     assert_eq!(stringify_expr!(while true {}), \"while true {}\");\n     assert_eq!(stringify_expr!('a: while true {}), \"'a: while true {}\");\n-    assert_eq!(\n-        stringify_expr!(while let true = true {}),\n-        \"while let true = true {}\",\n-    );\n+    assert_eq!(stringify_expr!(while let true = true {}), \"while let true = true {}\");\n \n     // ExprKind::ForLoop\n     assert_eq!(stringify_expr!(for _ in x {}), \"for _ in x {}\");\n@@ -328,14 +322,8 @@ fn test_expr() {\n     assert_eq!(stringify_expr!(Struct { x, .. }), \"Struct{x, ..}\");\n     assert_eq!(stringify_expr!(Struct { x, ..base }), \"Struct{x, ..base}\");\n     assert_eq!(stringify_expr!(Struct { x: true }), \"Struct{x: true,}\");\n-    assert_eq!(\n-        stringify_expr!(Struct { x: true, .. }),\n-        \"Struct{x: true, ..}\",\n-    );\n-    assert_eq!(\n-        stringify_expr!(Struct { x: true, ..base }),\n-        \"Struct{x: true, ..base}\",\n-    );\n+    assert_eq!(stringify_expr!(Struct { x: true, .. }), \"Struct{x: true, ..}\");\n+    assert_eq!(stringify_expr!(Struct { x: true, ..base }), \"Struct{x: true, ..base}\");\n \n     // ExprKind::Repeat\n     assert_eq!(stringify_expr!([(); 0]), \"[(); 0]\");\n@@ -501,7 +489,10 @@ fn test_item() {\n     );\n     assert_eq!(\n         stringify_item!(\n-            enum Enum<T> where T: 'a {\n+            enum Enum<T>\n+            where\n+                T: 'a,\n+            {\n                 Unit,\n                 Tuple(T),\n                 Struct { t: T },\n@@ -660,10 +651,7 @@ fn test_pat() {\n     // PatKind::Struct\n     assert_eq!(stringify_pat!(Struct {}), \"Struct {  }\"); // FIXME\n     assert_eq!(stringify_pat!(Struct::<u8> {}), \"Struct::<u8> {  }\");\n-    assert_eq!(\n-        stringify_pat!(Struct::<'static> {}),\n-        \"Struct::<'static> {  }\",\n-    );\n+    assert_eq!(stringify_pat!(Struct::<'static> {}), \"Struct::<'static> {  }\");\n     assert_eq!(stringify_pat!(Struct { x }), \"Struct { x }\");\n     assert_eq!(stringify_pat!(Struct { x: _x }), \"Struct { x: _x }\");\n     assert_eq!(stringify_pat!(Struct { .. }), \"Struct { .. }\");\n@@ -682,10 +670,7 @@ fn test_pat() {\n     assert_eq!(stringify_pat!(Tuple(x)), \"Tuple(x)\");\n     assert_eq!(stringify_pat!(Tuple(..)), \"Tuple(..)\");\n     assert_eq!(stringify_pat!(Tuple(x, ..)), \"Tuple(x, ..)\");\n-    assert_eq!(\n-        stringify_pat!(<Struct as Trait>::Type()),\n-        \"<Struct as Trait>::Type()\",\n-    );\n+    assert_eq!(stringify_pat!(<Struct as Trait>::Type()), \"<Struct as Trait>::Type()\");\n \n     // PatKind::Or\n     assert_eq!(stringify_pat!(true | false), \"true | false\");\n@@ -696,10 +681,7 @@ fn test_pat() {\n     assert_eq!(stringify_pat!(crate::Path), \"crate::Path\");\n     assert_eq!(stringify_pat!(Path::<u8>), \"Path::<u8>\");\n     assert_eq!(stringify_pat!(Path::<'static>), \"Path::<'static>\");\n-    assert_eq!(\n-        stringify_pat!(<Struct as Trait>::Type),\n-        \"<Struct as Trait>::Type\",\n-    );\n+    assert_eq!(stringify_pat!(<Struct as Trait>::Type), \"<Struct as Trait>::Type\");\n \n     // PatKind::Tuple\n     assert_eq!(stringify_pat!(()), \"()\");\n@@ -826,10 +808,7 @@ fn test_ty() {\n     assert_eq!(stringify_ty!(PhantomData::<T>), \"PhantomData<T>\");\n     assert_eq!(stringify_ty!(Fn() -> !), \"Fn() -> !\");\n     assert_eq!(stringify_ty!(Fn(u8) -> !), \"Fn(u8) -> !\");\n-    assert_eq!(\n-        stringify_ty!(<Struct as Trait>::Type),\n-        \"<Struct as Trait>::Type\",\n-    );\n+    assert_eq!(stringify_ty!(<Struct as Trait>::Type), \"<Struct as Trait>::Type\");\n \n     // TyKind::TraitObject\n     assert_eq!(stringify_ty!(dyn Send), \"dyn Send\");\n@@ -874,14 +853,8 @@ fn test_vis() {\n     assert_eq!(stringify_vis!(pub(in super)), \"pub(super) \");\n     assert_eq!(stringify_vis!(pub(in path::to)), \"pub(in path::to) \");\n     assert_eq!(stringify_vis!(pub(in ::path::to)), \"pub(in ::path::to) \");\n-    assert_eq!(\n-        stringify_vis!(pub(in self::path::to)),\n-        \"pub(in self::path::to) \",\n-    );\n-    assert_eq!(\n-        stringify_vis!(pub(in super::path::to)),\n-        \"pub(in super::path::to) \",\n-    );\n+    assert_eq!(stringify_vis!(pub(in self::path::to)), \"pub(in self::path::to) \");\n+    assert_eq!(stringify_vis!(pub(in super::path::to)), \"pub(in super::path::to) \");\n \n     // VisibilityKind::Inherited\n     // Directly calling `stringify_vis!()` does not work."}]}