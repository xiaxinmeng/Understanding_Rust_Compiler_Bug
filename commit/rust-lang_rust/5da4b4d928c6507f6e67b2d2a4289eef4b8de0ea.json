{"sha": "5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYTRiNGQ5MjhjNjUwN2Y2ZTY3YjJkMmE0Mjg5ZWVmNGI4ZGUwZWE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-07-12T21:43:57Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-08-22T00:17:41Z"}, "message": "std/extra: changing XXX to FIXME; cleanup\n\n* Get rid of by-value-self workarounds; it works now\n* Remove type annotations, they're not needed anymore", "tree": {"sha": "36503ae5a3f77bc69cd23dc331f3639994d496bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36503ae5a3f77bc69cd23dc331f3639994d496bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "html_url": "https://github.com/rust-lang/rust/commit/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77279a73cbafb1735e5cf53820fde65d5cd05957", "url": "https://api.github.com/repos/rust-lang/rust/commits/77279a73cbafb1735e5cf53820fde65d5cd05957", "html_url": "https://github.com/rust-lang/rust/commit/77279a73cbafb1735e5cf53820fde65d5cd05957"}], "stats": {"total": 93, "additions": 49, "deletions": 44}, "files": [{"sha": "d001e2c6970f89a39b9037195b4a995697c22c6e", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "patch": "@@ -255,8 +255,6 @@ pub mod raw {\n         if capacity(*v) < n {\n             let ptr: *mut *mut Box<Vec<()>> = transmute(v);\n             let ty = intrinsics::get_tydesc::<T>();\n-            // XXX transmute shouldn't be necessary\n-            let ty = cast::transmute(ty);\n             return reserve_raw(ty, ptr, n);\n         }\n     }"}, {"sha": "6d08b3c84bdedbc3bf6416050339e5758762e872", "filename": "src/libstd/rand/distributions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Frand%2Fdistributions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Frand%2Fdistributions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fdistributions.rs?ref=5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "patch": "@@ -92,7 +92,7 @@ impl Rand for StandardNormal {\n             let mut x = 1.0f64;\n             let mut y = 0.0f64;\n \n-            // XXX infinities?\n+            // FIXME #7755: infinities?\n             while -2.0 * y < x * x {\n                 x = rng.gen::<f64>().ln() / ziggurat_tables::ZIG_NORM_R;\n                 y = rng.gen::<f64>().ln();"}, {"sha": "baaf3d44e79d3b22231985f60255dd6ec6d5afdd", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "patch": "@@ -17,8 +17,8 @@\n //! Only valid to call on linux. Mac and Windows use syscalls to\n //! discover the command line arguments.\n //!\n-//! XXX: Would be nice for this to not exist.\n-//! XXX: This has a lot of C glue for lack of globals.\n+//! FIXME #7756: Would be nice for this to not exist.\n+//! FIXME #7756: This has a lot of C glue for lack of globals.\n \n use option::Option;\n "}, {"sha": "5d55261a69dc3a7e386860c047156bae9caef159", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "patch": "@@ -46,7 +46,7 @@ struct Packet<T> {\n     payload: Option<T>,\n }\n \n-/// A one-shot channel.\n+// A one-shot channel.\n pub struct ChanOne<T> {\n     void_packet: *mut Void,\n     suppress_finalize: bool\n@@ -681,7 +681,7 @@ impl<T> Clone for SharedPort<T> {\n     }\n }\n \n-// XXX: Need better name\n+// FIXME #7760: Need better name\n type MegaPipe<T> = (SharedPort<T>, SharedChan<T>);\n \n pub fn megapipe<T: Send>() -> MegaPipe<T> {\n@@ -1027,9 +1027,8 @@ mod test {\n     fn shared_port_stress() {\n         if util::limit_thread_creation_due_to_osx_and_valgrind() { return; }\n         do run_in_mt_newsched_task {\n-            // XXX: Removing these type annotations causes an ICE\n-            let (end_port, end_chan) = stream::<()>();\n-            let (port, chan) = stream::<()>();\n+            let (end_port, end_chan) = stream();\n+            let (port, chan) = stream();\n             let end_chan = SharedChan::new(end_chan);\n             let port = SharedPort::new(port);\n             let total = stress_factor() + 100;"}, {"sha": "5aaddc68383f1e34171aff4f29347f6970e275e0", "filename": "src/libstd/rt/context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcontext.rs?ref=5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "patch": "@@ -14,10 +14,10 @@ use libc::c_void;\n use cast::{transmute, transmute_mut_unsafe,\n            transmute_region, transmute_mut_region};\n \n-// XXX: Registers is boxed so that it is 16-byte aligned, for storing\n+// FIXME #7761: Registers is boxed so that it is 16-byte aligned, for storing\n // SSE regs.  It would be marginally better not to do this. In C++ we\n // use an attribute on a struct.\n-// XXX: It would be nice to define regs as `~Option<Registers>` since\n+// FIXME #7761: It would be nice to define regs as `~Option<Registers>` since\n // the registers are sometimes empty, but the discriminant would\n // then misalign the regs again.\n pub struct Context {\n@@ -37,7 +37,7 @@ impl Context {\n \n     /// Create a new context that will resume execution by running ~fn()\n     pub fn new(start: ~fn(), stack: &mut StackSegment) -> Context {\n-        // XXX: Putting main into a ~ so it's a thin pointer and can\n+        // FIXME #7767: Putting main into a ~ so it's a thin pointer and can\n         // be passed to the spawn function.  Another unfortunate\n         // allocation\n         let start = ~start;\n@@ -206,7 +206,7 @@ fn align_down(sp: *mut uint) -> *mut uint {\n     }\n }\n \n-// XXX: ptr::offset is positive ints only\n+// ptr::mut_offset is positive ints only\n #[inline]\n pub fn mut_offset<T>(ptr: *mut T, count: int) -> *mut T {\n     use std::sys::size_of;"}, {"sha": "3ce04a902e2bdb2cd6bc3a2c17fa3cb6d11341a5", "filename": "src/libstd/rt/io/extensions.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Frt%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fextensions.rs?ref=5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "patch": "@@ -229,7 +229,7 @@ pub trait WriterByteConversions {\n     fn write_be_i64(&mut self, n: i64);\n \n     /// Write a big-endian i32 (4 bytes).\n-    fn write_be_i32(&mut self, n: i32);\n+    fn write_be_i32_(&mut self, n: i32);\n \n     /// Write a big-endian i16 (2 bytes).\n     fn write_be_i16(&mut self, n: i16);\n@@ -238,7 +238,7 @@ pub trait WriterByteConversions {\n     fn write_be_f64(&mut self, f: f64);\n \n     /// Write a big-endian IEEE754 single-precision floating-point (4 bytes).\n-    fn write_be_f32(&mut self, f: f32);\n+    fn write_be_f32_(&mut self, f: f32);\n \n     /// Write a little-endian u64 (8 bytes).\n     fn write_le_u64_(&mut self, n: u64);\n@@ -264,7 +264,7 @@ pub trait WriterByteConversions {\n \n     /// Write a little-endian IEEE754 single-precision floating-point\n     /// (4 bytes).\n-    fn write_le_f32(&mut self, f: f32);\n+    fn write_le_f32_(&mut self, f: f32);\n \n     /// Write a u8 (1 byte).\n     fn write_u8(&mut self, n: u8);\n@@ -519,7 +519,7 @@ impl<T: Writer> WriterByteConversions for T {\n         u64_to_be_bytes(n as u64, 8u, |v| self.write(v))\n     }\n \n-    fn write_be_i32(&mut self, n: i32) {\n+    fn write_be_i32_(&mut self, n: i32) {\n         u64_to_be_bytes(n as u64, 4u, |v| self.write(v))\n     }\n \n@@ -533,7 +533,7 @@ impl<T: Writer> WriterByteConversions for T {\n         }\n     }\n \n-    fn write_be_f32(&mut self, f: f32) {\n+    fn write_be_f32_(&mut self, f: f32) {\n         unsafe {\n             self.write_be_u32(cast::transmute(f))\n         }\n@@ -569,7 +569,7 @@ impl<T: Writer> WriterByteConversions for T {\n         }\n     }\n \n-    fn write_le_f32(&mut self, f: f32) {\n+    fn write_le_f32_(&mut self, f: f32) {\n         unsafe {\n             self.write_le_u32(cast::transmute(f))\n         }\n@@ -594,7 +594,7 @@ mod test {\n     use super::ReaderUtil;\n     use option::{Some, None};\n     use cell::Cell;\n-    use rt::io::mem::MemReader;\n+    use rt::io::mem::{MemReader, MemWriter};\n     use rt::io::mock::MockReader;\n     use rt::io::{read_error, placeholder_error};\n \n@@ -827,48 +827,49 @@ mod test {\n         assert!(buf == ~[10, 11]);\n     }\n \n-    // XXX: Some problem with resolve here\n-    /*#[test]\n-    fn test_read_write_le() {\n-        let uints = [0, 1, 2, 42, 10_123, 100_123_456, u64::max_value];\n+\n+    #[test]\n+    fn test_read_write_le_mem() {\n+        let uints = [0, 1, 2, 42, 10_123, 100_123_456, ::u64::max_value];\n \n         let mut writer = MemWriter::new();\n-        for uints.each |i| {\n-            writer.write_le_u64(*i);\n+        for i in uints.iter() {\n+            writer.write_le_u64_(*i);\n         }\n \n         let mut reader = MemReader::new(writer.inner());\n-        for uints.each |i| {\n+        for i in uints.iter() {\n             assert!(reader.read_le_u64() == *i);\n         }\n     }\n \n+\n     #[test]\n     fn test_read_write_be() {\n-        let uints = [0, 1, 2, 42, 10_123, 100_123_456, u64::max_value];\n+        let uints = [0, 1, 2, 42, 10_123, 100_123_456, ::u64::max_value];\n \n         let mut writer = MemWriter::new();\n-        for uints.each |i| {\n-            writer.write_be_u64(*i);\n+        for i in uints.iter() {\n+            writer.write_be_u64_(*i);\n         }\n \n         let mut reader = MemReader::new(writer.inner());\n-        for uints.each |i| {\n+        for i in uints.iter() {\n             assert!(reader.read_be_u64() == *i);\n         }\n     }\n \n     #[test]\n     fn test_read_be_int_n() {\n-        let ints = [i32::min_value, -123456, -42, -5, 0, 1, i32::max_value];\n+        let ints = [::i32::min_value, -123456, -42, -5, 0, 1, ::i32::max_value];\n \n         let mut writer = MemWriter::new();\n-        for ints.each |i| {\n-            writer.write_be_i32(*i);\n+        for i in ints.iter() {\n+            writer.write_be_i32_(*i);\n         }\n \n         let mut reader = MemReader::new(writer.inner());\n-        for ints.each |i| {\n+        for i in ints.iter() {\n             // this tests that the sign extension is working\n             // (comparing the values as i32 would not test this)\n             assert!(reader.read_be_int_n(4) == *i as i64);\n@@ -893,12 +894,12 @@ mod test {\n         let f:f32 = 8.1250;\n \n         let mut writer = MemWriter::new();\n-        writer.write_be_f32(f);\n-        writer.write_le_f32(f);\n+        writer.write_be_f32_(f);\n+        writer.write_le_f32_(f);\n \n         let mut reader = MemReader::new(writer.inner());\n         assert!(reader.read_be_f32() == 8.1250);\n         assert!(reader.read_le_f32() == 8.1250);\n-    }*/\n+    }\n \n }"}, {"sha": "9128961165900a1e4257878ec9ae3d24f2c65ddb", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "patch": "@@ -13,7 +13,7 @@ use super::support::PathLike;\n use super::{Reader, Writer, Seek};\n use super::SeekStyle;\n \n-/// # XXX\n+/// # FIXME #7785\n /// * Ugh, this is ridiculous. What is the best way to represent these options?\n enum FileMode {\n     /// Opens an existing file. IoError if file does not exist."}, {"sha": "278df5b170e4bb3db035e1c7f2d82c1cc46e6496", "filename": "src/libstd/std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rs?ref=5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "patch": "@@ -198,7 +198,7 @@ mod unicode;\n #[path = \"num/cmath.rs\"]\n mod cmath;\n \n-// XXX: This shouldn't be pub, and it should be reexported under 'unstable'\n+// FIXME #7809: This shouldn't be pub, and it should be reexported under 'unstable'\n // but name resolution doesn't work without it being pub.\n pub mod rt;\n "}, {"sha": "5ffa03dec26d192b9921385145c2327ac4dc4351", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "patch": "@@ -543,7 +543,7 @@ pub fn deschedule() {\n     use rt::local::Local;\n     use rt::sched::Scheduler;\n \n-    // XXX: What does yield really mean in newsched?\n+    // FIXME #6842: What does yield really mean in newsched?\n     // FIXME(#7544): Optimize this, since we know we won't block.\n     let sched = Local::take::<Scheduler>();\n     do sched.deschedule_running_task_and_then |sched, task| {"}, {"sha": "135f71621575a778adc18006f38a2d9b4129e68e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5da4b4d928c6507f6e67b2d2a4289eef4b8de0ea", "patch": "@@ -5061,12 +5061,19 @@ impl Parser {\n         }\n     }\n \n-    pub fn parse_str(&self) -> @str {\n+    pub fn parse_optional_str(&self) -> Option<@str> {\n         match *self.token {\n             token::LIT_STR(s) => {\n                 self.bump();\n-                ident_to_str(&s)\n+                Some(ident_to_str(&s))\n             }\n+            _ => None\n+        }\n+    }\n+\n+    pub fn parse_str(&self) -> @str {\n+        match self.parse_optional_str() {\n+            Some(s) => { s }\n             _ =>  self.fatal(\"expected string literal\")\n         }\n     }"}]}