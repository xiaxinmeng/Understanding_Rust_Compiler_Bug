{"sha": "e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZGU0YzNiMWYwYWI1MWZlM2VhMGE0OTRjZjk3MjdlZTNlMGJmMWQ=", "commit": {"author": {"name": "Philip Craig", "email": "philipjcraig@gmail.com", "date": "2019-03-23T07:00:04Z"}, "committer": {"name": "Philip Craig", "email": "philipjcraig@gmail.com", "date": "2019-03-23T07:13:58Z"}, "message": "Fix invalid DWARF for enums when using thinlto\n\nWe were setting the same identifier for both the DW_TAG_structure_type\nand the DW_TAG_variant_part. This becomes a problem when using thinlto\nbecauses it uses the identifier as a key for a map of types that is used\nto delete duplicates based on the ODR, so one of them is deleted as a\nduplicate, resulting in invalid DWARF.\n\nThe DW_TAG_variant_part isn't a standalone type, so it doesn't need\nan identifier. Fix by omitting its identifier.", "tree": {"sha": "c9b2d4d2a1b8012e37c9092919d8a091af9bdffa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9b2d4d2a1b8012e37c9092919d8a091af9bdffa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d", "html_url": "https://github.com/rust-lang/rust/commit/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d/comments", "author": {"login": "philipc", "id": 330342, "node_id": "MDQ6VXNlcjMzMDM0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipc", "html_url": "https://github.com/philipc", "followers_url": "https://api.github.com/users/philipc/followers", "following_url": "https://api.github.com/users/philipc/following{/other_user}", "gists_url": "https://api.github.com/users/philipc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipc/subscriptions", "organizations_url": "https://api.github.com/users/philipc/orgs", "repos_url": "https://api.github.com/users/philipc/repos", "events_url": "https://api.github.com/users/philipc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philipc", "id": 330342, "node_id": "MDQ6VXNlcjMzMDM0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/330342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philipc", "html_url": "https://github.com/philipc", "followers_url": "https://api.github.com/users/philipc/followers", "following_url": "https://api.github.com/users/philipc/following{/other_user}", "gists_url": "https://api.github.com/users/philipc/gists{/gist_id}", "starred_url": "https://api.github.com/users/philipc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philipc/subscriptions", "organizations_url": "https://api.github.com/users/philipc/orgs", "repos_url": "https://api.github.com/users/philipc/repos", "events_url": "https://api.github.com/users/philipc/events{/privacy}", "received_events_url": "https://api.github.com/users/philipc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c82834e2b930619d4143e4dd94fb80888fa190c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c82834e2b930619d4143e4dd94fb80888fa190c9", "html_url": "https://github.com/rust-lang/rust/commit/c82834e2b930619d4143e4dd94fb80888fa190c9"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "1859b1f4792e1b6acd5caef0f4edbf5d7c9fea85", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d", "patch": "@@ -266,6 +266,7 @@ impl RecursiveTypeDescription<'ll, 'tcx> {\n                 // ... and attach them to the stub to complete it.\n                 set_members_of_composite_type(cx,\n                                               unfinished_type,\n+                                              metadata_stub,\n                                               member_holding_stub,\n                                               member_descriptions);\n                 return MetadataCreationResult::new(metadata_stub, true);\n@@ -1215,6 +1216,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 set_members_of_composite_type(cx,\n                                               self.enum_type,\n                                               variant_type_metadata,\n+                                              variant_type_metadata,\n                                               member_descriptions);\n                 vec![\n                     MemberDescription {\n@@ -1256,6 +1258,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     set_members_of_composite_type(cx,\n                                                   self.enum_type,\n                                                   variant_type_metadata,\n+                                                  variant_type_metadata,\n                                                   member_descriptions);\n                     MemberDescription {\n                         name: if fallback {\n@@ -1298,6 +1301,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     set_members_of_composite_type(cx,\n                                                   self.enum_type,\n                                                   variant_type_metadata,\n+                                                  variant_type_metadata,\n                                                   variant_member_descriptions);\n \n                     // Encode the information about the null variant in the union\n@@ -1358,6 +1362,7 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                         set_members_of_composite_type(cx,\n                                                       self.enum_type,\n                                                       variant_type_metadata,\n+                                                      variant_type_metadata,\n                                                       member_descriptions);\n \n                         let niche_value = if i == dataful_variant {\n@@ -1698,8 +1703,7 @@ fn prepare_enum_metadata(\n             layout.align.abi.bits() as u32,\n             DIFlags::FlagZero,\n             discriminator_metadata,\n-            empty_array,\n-            unique_type_id_str.as_ptr())\n+            empty_array)\n     };\n \n     // The variant part must be wrapped in a struct according to DWARF.\n@@ -1770,14 +1774,16 @@ fn composite_type_metadata(\n     set_members_of_composite_type(cx,\n                                   composite_type,\n                                   composite_type_metadata,\n+                                  composite_type_metadata,\n                                   member_descriptions);\n \n     composite_type_metadata\n }\n \n fn set_members_of_composite_type(cx: &CodegenCx<'ll, 'tcx>,\n                                  composite_type: Ty<'tcx>,\n-                                 composite_type_metadata: &'ll DICompositeType,\n+                                 metadata_stub: &'ll DICompositeType,\n+                                 member_holding_stub: &'ll DICompositeType,\n                                  member_descriptions: Vec<MemberDescription<'ll>>) {\n     // In some rare cases LLVM metadata uniquing would lead to an existing type\n     // description being used instead of a new one created in\n@@ -1788,11 +1794,11 @@ fn set_members_of_composite_type(cx: &CodegenCx<'ll, 'tcx>,\n     {\n         let mut composite_types_completed =\n             debug_context(cx).composite_types_completed.borrow_mut();\n-        if composite_types_completed.contains(&composite_type_metadata) {\n+        if composite_types_completed.contains(&metadata_stub) {\n             bug!(\"debuginfo::set_members_of_composite_type() - \\\n                   Already completed forward declaration re-encountered.\");\n         } else {\n-            composite_types_completed.insert(composite_type_metadata);\n+            composite_types_completed.insert(metadata_stub);\n         }\n     }\n \n@@ -1803,7 +1809,7 @@ fn set_members_of_composite_type(cx: &CodegenCx<'ll, 'tcx>,\n             unsafe {\n                 Some(llvm::LLVMRustDIBuilderCreateVariantMemberType(\n                     DIB(cx),\n-                    composite_type_metadata,\n+                    member_holding_stub,\n                     member_name.as_ptr(),\n                     unknown_file_metadata(cx),\n                     UNKNOWN_LINE_NUMBER,\n@@ -1824,7 +1830,7 @@ fn set_members_of_composite_type(cx: &CodegenCx<'ll, 'tcx>,\n     unsafe {\n         let type_array = create_DIArray(DIB(cx), &member_metadata[..]);\n         llvm::LLVMRustDICompositeTypeReplaceArrays(\n-            DIB(cx), composite_type_metadata, Some(type_array), type_params);\n+            DIB(cx), member_holding_stub, Some(type_array), type_params);\n     }\n }\n "}, {"sha": "eddc509a585d7165cb5f785473b25ea91b77fe5e", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d", "patch": "@@ -1587,8 +1587,7 @@ extern \"C\" {\n                                               AlignInBits: u32,\n                                               Flags: DIFlags,\n                                               Discriminator: Option<&'a DIDerivedType>,\n-                                              Elements: &'a DIArray,\n-                                              UniqueId: *const c_char)\n+                                              Elements: &'a DIArray)\n                                               -> &'a DIDerivedType;\n \n     pub fn LLVMSetUnnamedAddr(GlobalVar: &Value, UnnamedAddr: Bool);"}, {"sha": "470cdcdd613a58cd17a32ba97659434eb7bf854d", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d", "patch": "@@ -723,12 +723,12 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariantPart(\n     LLVMRustDIBuilderRef Builder, LLVMMetadataRef Scope, const char *Name,\n     LLVMMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n     uint32_t AlignInBits, LLVMRustDIFlags Flags, LLVMMetadataRef Discriminator,\n-    LLVMMetadataRef Elements, const char *UniqueId) {\n+    LLVMMetadataRef Elements) {\n #if LLVM_VERSION_GE(7, 0)\n   return wrap(Builder->createVariantPart(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n       SizeInBits, AlignInBits, fromRust(Flags), unwrapDI<DIDerivedType>(Discriminator),\n-      DINodeArray(unwrapDI<MDTuple>(Elements)), UniqueId));\n+      DINodeArray(unwrapDI<MDTuple>(Elements))));\n #else\n   abort();\n #endif"}, {"sha": "ae736e40bcc1ca9013c4354d37afb244ac8b317f", "filename": "src/test/debuginfo/enum-thinlto.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs?ref=e8de4c3b1f0ab51fe3ea0a494cf9727ee3e0bf1d", "patch": "@@ -0,0 +1,48 @@\n+// ignore-tidy-linelength\n+\n+// Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n+// min-system-llvm-version: 7.0\n+// min-gdb-version: 8.2\n+\n+// compile-flags:-g -Z thinlto\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command:run\n+\n+// gdb-command:print *abc\n+// gdbr-check:$1 = enum_thinlto::ABC::TheA{x: 0, y: 8970181431921507452}\n+\n+// === LLDB TESTS ==================================================================================\n+\n+// lldb-command:run\n+\n+// lldb-command:print *abc\n+// lldbg-check:(enum_thinlto::ABC) $0 = ABC { }\n+\n+#![allow(unused_variables)]\n+#![feature(omit_gdb_pretty_printer_section)]\n+#![omit_gdb_pretty_printer_section]\n+\n+// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n+// the size of the discriminant value is machine dependent, this has be taken into account when\n+// datatype layout should be predictable as in this case.\n+#[derive(Debug)]\n+enum ABC {\n+    TheA { x: i64, y: i64 },\n+    TheB (i64, i32, i32),\n+}\n+\n+fn main() {\n+    let abc = ABC::TheA { x: 0, y: 0x7c7c_7c7c_7c7c_7c7c };\n+\n+    f(&abc);\n+}\n+\n+fn f(abc: &ABC) {\n+    zzz(); // #break\n+\n+    println!(\"{:?}\", abc);\n+}\n+\n+fn zzz() {()}"}]}