{"sha": "177d0cef48879c7aea8d7dc5064407c454d36124", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3N2QwY2VmNDg4NzljN2FlYThkN2RjNTA2NDQwN2M0NTRkMzYxMjQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-23T15:03:31Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-23T15:03:31Z"}, "message": "Deduplicate errors in const to pat conversion", "tree": {"sha": "2a83ee29556f6f9c1fabc5a3592a994929738caa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a83ee29556f6f9c1fabc5a3592a994929738caa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/177d0cef48879c7aea8d7dc5064407c454d36124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/177d0cef48879c7aea8d7dc5064407c454d36124", "html_url": "https://github.com/rust-lang/rust/commit/177d0cef48879c7aea8d7dc5064407c454d36124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/177d0cef48879c7aea8d7dc5064407c454d36124/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d486486afdb545e43a27326be07a92d5fc9ad387", "url": "https://api.github.com/repos/rust-lang/rust/commits/d486486afdb545e43a27326be07a92d5fc9ad387", "html_url": "https://github.com/rust-lang/rust/commit/d486486afdb545e43a27326be07a92d5fc9ad387"}], "stats": {"total": 255, "additions": 55, "deletions": 200}, "files": [{"sha": "9af40acc6d6168ef2b6a41b14fd9b3456352c4d7", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -252,7 +252,12 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             ty::Adt(adt_def, _) if adt_def.is_union() => {\n                 // Matching on union fields is unsafe, we can't hide it in constants\n                 self.saw_const_match_error.set(true);\n-                tcx.sess.span_err(span, \"cannot use unions in constant patterns\");\n+                let msg = \"cannot use unions in constant patterns\";\n+                if self.include_lint_checks {\n+                    tcx.sess.span_err(span, msg);\n+                } else {\n+                    tcx.sess.delay_span_bug(span, msg)\n+                }\n                 PatKind::Wild\n             }\n             ty::Adt(..)\n@@ -267,7 +272,11 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     cv.ty, cv.ty,\n                 );\n                 self.saw_const_match_error.set(true);\n-                self.tcx().sess.span_err(self.span, &msg);\n+                if self.include_lint_checks {\n+                    tcx.sess.span_err(self.span, &msg);\n+                } else {\n+                    tcx.sess.delay_span_bug(self.span, &msg)\n+                }\n                 PatKind::Wild\n             }\n             // If the type is not structurally comparable, just emit the constant directly,\n@@ -308,7 +317,11 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     path, path,\n                 );\n                 self.saw_const_match_error.set(true);\n-                tcx.sess.span_err(span, &msg);\n+                if self.include_lint_checks {\n+                    tcx.sess.span_err(span, &msg);\n+                } else {\n+                    tcx.sess.delay_span_bug(span, &msg)\n+                }\n                 PatKind::Wild\n             }\n             ty::Adt(adt_def, substs) if adt_def.is_enum() => {\n@@ -340,7 +353,12 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 // These are not allowed and will error elsewhere anyway.\n                 ty::Dynamic(..) => {\n                     self.saw_const_match_error.set(true);\n-                    tcx.sess.span_err(span, &format!(\"`{}` cannot be used in patterns\", cv.ty));\n+                    let msg = format!(\"`{}` cannot be used in patterns\", cv.ty);\n+                    if self.include_lint_checks {\n+                        tcx.sess.span_err(span, &msg);\n+                    } else {\n+                        tcx.sess.delay_span_bug(span, &msg)\n+                    }\n                     PatKind::Wild\n                 }\n                 // `&str` and `&[u8]` are represented as `ConstValue::Slice`, let's keep using this\n@@ -427,7 +445,12 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             }\n             _ => {\n                 self.saw_const_match_error.set(true);\n-                tcx.sess.span_err(span, &format!(\"`{}` cannot be used in patterns\", cv.ty));\n+                let msg = format!(\"`{}` cannot be used in patterns\", cv.ty);\n+                if self.include_lint_checks {\n+                    tcx.sess.span_err(span, &msg);\n+                } else {\n+                    tcx.sess.delay_span_bug(span, &msg)\n+                }\n                 PatKind::Wild\n             }\n         };"}, {"sha": "ab297f54dff3ea243372e3be3e7f4beb8dbc7d98", "filename": "src/test/ui/consts/const_in_pattern/cross-crate-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -12,15 +12,13 @@ fn main() {\n     match None {\n         consts::SOME => panic!(),\n         //~^ must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| must be annotated with `#[derive(PartialEq, Eq)]`\n \n         _ => {}\n     }\n \n     match None {\n         <Defaulted as consts::AssocConst>::SOME  => panic!(),\n         //~^ must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| must be annotated with `#[derive(PartialEq, Eq)]`\n \n         _ => {}\n     }"}, {"sha": "a8066a88c35a6675d706ce29a9edfe7a7a8b0a29", "filename": "src/test/ui/consts/const_in_pattern/cross-crate-fail.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -5,22 +5,10 @@ LL |         consts::SOME => panic!(),\n    |         ^^^^^^^^^^^^\n \n error: to use a constant of type `CustomEq` in a pattern, `CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/cross-crate-fail.rs:21:9\n+  --> $DIR/cross-crate-fail.rs:20:9\n    |\n LL |         <Defaulted as consts::AssocConst>::SOME  => panic!(),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: to use a constant of type `CustomEq` in a pattern, `CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/cross-crate-fail.rs:13:9\n-   |\n-LL |         consts::SOME => panic!(),\n-   |         ^^^^^^^^^^^^\n-\n-error: to use a constant of type `CustomEq` in a pattern, `CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/cross-crate-fail.rs:21:9\n-   |\n-LL |         <Defaulted as consts::AssocConst>::SOME  => panic!(),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "fc80d51c72daa80c48f5c4c7fbdc7bcc30883f70", "filename": "src/test/ui/consts/const_in_pattern/no-eq-branch-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -20,7 +20,6 @@ fn main() {\n     match Foo::Qux(NoEq) {\n         BAR_BAZ => panic!(),\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n         _ => {}\n     }\n }"}, {"sha": "e505dad69be072f8b014abd77f21173dc8a54f45", "filename": "src/test/ui/consts/const_in_pattern/no-eq-branch-fail.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -4,11 +4,5 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n LL |         BAR_BAZ => panic!(),\n    |         ^^^^^^^\n \n-error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/no-eq-branch-fail.rs:21:9\n-   |\n-LL |         BAR_BAZ => panic!(),\n-   |         ^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "a8216901c027f2f057dd416da6961430727c9aae", "filename": "src/test/ui/consts/const_in_pattern/reject_non_partial_eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -27,7 +27,6 @@ fn main() {\n     match None {\n         NO_PARTIAL_EQ_NONE => println!(\"NO_PARTIAL_EQ_NONE\"),\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n         _ => panic!(\"whoops\"),\n     }\n }"}, {"sha": "8462c32ea809b401eb3056eb62ca27b45faefec5", "filename": "src/test/ui/consts/const_in_pattern/reject_non_partial_eq.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -4,11 +4,5 @@ error: to use a constant of type `Option<NoPartialEq>` in a pattern, `Option<NoP\n LL |         NO_PARTIAL_EQ_NONE => println!(\"NO_PARTIAL_EQ_NONE\"),\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: to use a constant of type `Option<NoPartialEq>` in a pattern, `Option<NoPartialEq>` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_partial_eq.rs:28:9\n-   |\n-LL |         NO_PARTIAL_EQ_NONE => println!(\"NO_PARTIAL_EQ_NONE\"),\n-   |         ^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "7a8169bec45beadbcd6d6ed6ab72b61f87055ceb", "filename": "src/test/ui/consts/const_in_pattern/reject_non_structural.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -39,51 +39,41 @@ fn main() {\n     const ENUM: Derive<NoDerive> = Derive::Some(NoDerive);\n     match Derive::Some(NoDerive) { ENUM => dbg!(ENUM), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-    //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n \n     const FIELD: OND = TrivialEq(Some(NoDerive)).0;\n     match Some(NoDerive) { FIELD => dbg!(FIELD), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-    //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n \n     const NO_DERIVE_SOME: OND = Some(NoDerive);\n     const INDIRECT: OND = NO_DERIVE_SOME;\n     match Some(NoDerive) {INDIRECT => dbg!(INDIRECT), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-    //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n \n     const TUPLE: (OND, OND) = (None, Some(NoDerive));\n     match (None, Some(NoDerive)) { TUPLE => dbg!(TUPLE), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-    //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n \n     const TYPE_ASCRIPTION: OND = Some(NoDerive): OND;\n     match Some(NoDerive) { TYPE_ASCRIPTION => dbg!(TYPE_ASCRIPTION), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-    //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n \n     const ARRAY: [OND; 2] = [None, Some(NoDerive)];\n     match [None, Some(NoDerive)] { ARRAY => dbg!(ARRAY), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-    //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n \n     const REPEAT: [OND; 2] = [Some(NoDerive); 2];\n     match [Some(NoDerive); 2] { REPEAT => dbg!(REPEAT), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n     //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-    //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-    //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n \n     trait Trait: Sized { const ASSOC: Option<Self>; }\n     impl Trait for NoDerive { const ASSOC: Option<NoDerive> = Some(NoDerive); }\n     match Some(NoDerive) { NoDerive::ASSOC => dbg!(NoDerive::ASSOC), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-    //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n \n     const BLOCK: OND = { NoDerive; Some(NoDerive) };\n     match Some(NoDerive) { BLOCK => dbg!(BLOCK), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-    //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n \n     const ADDR_OF: &OND = &Some(NoDerive);\n     match &Some(NoDerive) { ADDR_OF => dbg!(ADDR_OF), _ => panic!(\"whoops\"), };"}, {"sha": "56405a55d699d83770ec8af3293b47199052c724", "filename": "src/test/ui/consts/const_in_pattern/reject_non_structural.stderr", "status": "modified", "additions": 11, "deletions": 71, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -5,61 +5,61 @@ LL |     match Derive::Some(NoDerive) { ENUM => dbg!(ENUM), _ => panic!(\"whoops\"\n    |                                    ^^^^\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:45:28\n+  --> $DIR/reject_non_structural.rs:44:28\n    |\n LL |     match Some(NoDerive) { FIELD => dbg!(FIELD), _ => panic!(\"whoops\"), };\n    |                            ^^^^^\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:51:27\n+  --> $DIR/reject_non_structural.rs:49:27\n    |\n LL |     match Some(NoDerive) {INDIRECT => dbg!(INDIRECT), _ => panic!(\"whoops\"), };\n    |                           ^^^^^^^^\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:56:36\n+  --> $DIR/reject_non_structural.rs:53:36\n    |\n LL |     match (None, Some(NoDerive)) { TUPLE => dbg!(TUPLE), _ => panic!(\"whoops\"), };\n    |                                    ^^^^^\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:61:28\n+  --> $DIR/reject_non_structural.rs:57:28\n    |\n LL |     match Some(NoDerive) { TYPE_ASCRIPTION => dbg!(TYPE_ASCRIPTION), _ => panic!(\"whoops\"), };\n    |                            ^^^^^^^^^^^^^^^\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:66:36\n+  --> $DIR/reject_non_structural.rs:61:36\n    |\n LL |     match [None, Some(NoDerive)] { ARRAY => dbg!(ARRAY), _ => panic!(\"whoops\"), };\n    |                                    ^^^^^\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:71:33\n+  --> $DIR/reject_non_structural.rs:65:33\n    |\n LL |     match [Some(NoDerive); 2] { REPEAT => dbg!(REPEAT), _ => panic!(\"whoops\"), };\n    |                                 ^^^^^^\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:71:33\n+  --> $DIR/reject_non_structural.rs:65:33\n    |\n LL |     match [Some(NoDerive); 2] { REPEAT => dbg!(REPEAT), _ => panic!(\"whoops\"), };\n    |                                 ^^^^^^\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:79:28\n+  --> $DIR/reject_non_structural.rs:71:28\n    |\n LL |     match Some(NoDerive) { NoDerive::ASSOC => dbg!(NoDerive::ASSOC), _ => panic!(\"whoops\"), };\n    |                            ^^^^^^^^^^^^^^^\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:84:28\n+  --> $DIR/reject_non_structural.rs:75:28\n    |\n LL |     match Some(NoDerive) { BLOCK => dbg!(BLOCK), _ => panic!(\"whoops\"), };\n    |                            ^^^^^\n \n warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:89:29\n+  --> $DIR/reject_non_structural.rs:79:29\n    |\n LL |     match &Some(NoDerive) { ADDR_OF => dbg!(ADDR_OF), _ => panic!(\"whoops\"), };\n    |                             ^^^^^^^\n@@ -72,65 +72,5 @@ LL | #![warn(indirect_structural_match)]\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n \n-error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:40:36\n-   |\n-LL |     match Derive::Some(NoDerive) { ENUM => dbg!(ENUM), _ => panic!(\"whoops\"), };\n-   |                                    ^^^^\n-\n-error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:45:28\n-   |\n-LL |     match Some(NoDerive) { FIELD => dbg!(FIELD), _ => panic!(\"whoops\"), };\n-   |                            ^^^^^\n-\n-error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:51:27\n-   |\n-LL |     match Some(NoDerive) {INDIRECT => dbg!(INDIRECT), _ => panic!(\"whoops\"), };\n-   |                           ^^^^^^^^\n-\n-error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:56:36\n-   |\n-LL |     match (None, Some(NoDerive)) { TUPLE => dbg!(TUPLE), _ => panic!(\"whoops\"), };\n-   |                                    ^^^^^\n-\n-error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:61:28\n-   |\n-LL |     match Some(NoDerive) { TYPE_ASCRIPTION => dbg!(TYPE_ASCRIPTION), _ => panic!(\"whoops\"), };\n-   |                            ^^^^^^^^^^^^^^^\n-\n-error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:66:36\n-   |\n-LL |     match [None, Some(NoDerive)] { ARRAY => dbg!(ARRAY), _ => panic!(\"whoops\"), };\n-   |                                    ^^^^^\n-\n-error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:71:33\n-   |\n-LL |     match [Some(NoDerive); 2] { REPEAT => dbg!(REPEAT), _ => panic!(\"whoops\"), };\n-   |                                 ^^^^^^\n-\n-error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:71:33\n-   |\n-LL |     match [Some(NoDerive); 2] { REPEAT => dbg!(REPEAT), _ => panic!(\"whoops\"), };\n-   |                                 ^^^^^^\n-\n-error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:79:28\n-   |\n-LL |     match Some(NoDerive) { NoDerive::ASSOC => dbg!(NoDerive::ASSOC), _ => panic!(\"whoops\"), };\n-   |                            ^^^^^^^^^^^^^^^\n-\n-error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:84:28\n-   |\n-LL |     match Some(NoDerive) { BLOCK => dbg!(BLOCK), _ => panic!(\"whoops\"), };\n-   |                            ^^^^^\n-\n-error: aborting due to 20 previous errors; 1 warning emitted\n+error: aborting due to 10 previous errors; 1 warning emitted\n "}, {"sha": "97d161c59ec2a8fd8e7308d20111dad6a2b8f3e2", "filename": "src/test/ui/match/issue-70972-dyn-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -5,7 +5,6 @@ fn main() {\n     match a {\n         F => panic!(),\n         //~^ ERROR `&dyn Send` cannot be used in patterns\n-        //~| ERROR `&dyn Send` cannot be used in patterns\n         _ => {}\n     }\n }"}, {"sha": "7581070ebc1726b64189ae39b522703c0492448e", "filename": "src/test/ui/match/issue-70972-dyn-trait.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -4,11 +4,5 @@ error: `&dyn Send` cannot be used in patterns\n LL |         F => panic!(),\n    |         ^\n \n-error: `&dyn Send` cannot be used in patterns\n-  --> $DIR/issue-70972-dyn-trait.rs:6:9\n-   |\n-LL |         F => panic!(),\n-   |         ^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "427f4cd8c780cf91067b4383443d8ee4e4367289", "filename": "src/test/ui/pattern/issue-71042-opaquely-typed-constant-used-in-pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -5,7 +5,6 @@ fn main() {\n     const C: impl Copy = 0;\n     match C {\n         C => {} //~ ERROR: `impl Copy` cannot be used in patterns\n-        //~^ ERROR: `impl Copy` cannot be used in patterns\n         _ => {}\n     }\n }"}, {"sha": "c22e6eb944394ae149813be24bf76adccdf637ef", "filename": "src/test/ui/pattern/issue-71042-opaquely-typed-constant-used-in-pattern.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -4,11 +4,5 @@ error: `impl Copy` cannot be used in patterns\n LL |         C => {}\n    |         ^\n \n-error: `impl Copy` cannot be used in patterns\n-  --> $DIR/issue-71042-opaquely-typed-constant-used-in-pattern.rs:7:9\n-   |\n-LL |         C => {}\n-   |         ^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "4a8a09493798eb33ae463005dfef96d95b74ecbe", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-embedded.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -21,7 +21,6 @@ fn main() {\n     match WRAP_DIRECT_INLINE {\n         WRAP_DIRECT_INLINE => { panic!(\"WRAP_DIRECT_INLINE matched itself\"); }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n         _ => { println!(\"WRAP_DIRECT_INLINE did not match itself\"); }\n     }\n }"}, {"sha": "c73a6cf1326b3e3a7401deec42407cebeeb144f8", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-embedded.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-embedded.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -4,11 +4,5 @@ error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be ann\n LL |         WRAP_DIRECT_INLINE => { panic!(\"WRAP_DIRECT_INLINE matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/cant-hide-behind-direct-struct-embedded.rs:22:9\n-   |\n-LL |         WRAP_DIRECT_INLINE => { panic!(\"WRAP_DIRECT_INLINE matched itself\"); }\n-   |         ^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "93022a23dbfb8d5b74868f529e320e5eb9c5ad99", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -21,7 +21,6 @@ fn main() {\n     match WRAP_DIRECT_PARAM {\n         WRAP_DIRECT_PARAM => { panic!(\"WRAP_DIRECT_PARAM matched itself\"); }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n         _ => { println!(\"WRAP_DIRECT_PARAM did not match itself\"); }\n     }\n }"}, {"sha": "6fdf9db89b8dc4a74c007e6089bbe434394a39eb", "filename": "src/test/ui/rfc1445/cant-hide-behind-direct-struct-param.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-direct-struct-param.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -4,11 +4,5 @@ error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be ann\n LL |         WRAP_DIRECT_PARAM => { panic!(\"WRAP_DIRECT_PARAM matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/cant-hide-behind-direct-struct-param.rs:22:9\n-   |\n-LL |         WRAP_DIRECT_PARAM => { panic!(\"WRAP_DIRECT_PARAM matched itself\"); }\n-   |         ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "1cca27520618d531e7ce2f964320e1c3f9ad1162", "filename": "src/test/ui/rfc1445/match-forbidden-without-eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -12,7 +12,6 @@ fn main() {\n     match y {\n         FOO => { }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n         _ => { }\n     }\n "}, {"sha": "02fa23981894a07a307a9e87bd856b2768864883", "filename": "src/test/ui/rfc1445/match-forbidden-without-eq.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-forbidden-without-eq.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -5,7 +5,7 @@ LL |         FOO => { }\n    |         ^^^\n \n warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-forbidden-without-eq.rs:21:9\n+  --> $DIR/match-forbidden-without-eq.rs:20:9\n    |\n LL |         f32::INFINITY => { }\n    |         ^^^^^^^^^^^^^\n@@ -14,20 +14,14 @@ LL |         f32::INFINITY => { }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n-error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/match-forbidden-without-eq.rs:13:9\n-   |\n-LL |         FOO => { }\n-   |         ^^^\n-\n warning: floating-point types cannot be used in patterns\n-  --> $DIR/match-forbidden-without-eq.rs:21:9\n+  --> $DIR/match-forbidden-without-eq.rs:20:9\n    |\n LL |         f32::INFINITY => { }\n    |         ^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #41620 <https://github.com/rust-lang/rust/issues/41620>\n \n-error: aborting due to 2 previous errors; 2 warnings emitted\n+error: aborting due to previous error; 2 warnings emitted\n "}, {"sha": "151a475c9190644e6423056229902d45b842e4f6", "filename": "src/test/ui/rfc1445/match-nonempty-array-forbidden-without-eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -15,6 +15,5 @@ fn main() {\n     match [B(1)] {\n         FOO => { }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n     }\n }"}, {"sha": "371f8a0aa1d7745e6e47ed08873335bbe4a1d9ed", "filename": "src/test/ui/rfc1445/match-nonempty-array-forbidden-without-eq.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-nonempty-array-forbidden-without-eq.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -4,11 +4,5 @@ error: to use a constant of type `B` in a pattern, `B` must be annotated with `#\n LL |         FOO => { }\n    |         ^^^\n \n-error: to use a constant of type `B` in a pattern, `B` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/match-nonempty-array-forbidden-without-eq.rs:16:9\n-   |\n-LL |         FOO => { }\n-   |         ^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "6b7d94603b567d889aff97f257d49b29d09c257c", "filename": "src/test/ui/rfc1445/match-requires-both-partialeq-and-eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -16,7 +16,6 @@ fn main() {\n     match y {\n         FOO => { }\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n-        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n         _ => { }\n     }\n }"}, {"sha": "4157cf65283e3d24ae23c88e23d5c9b9692f0716", "filename": "src/test/ui/rfc1445/match-requires-both-partialeq-and-eq.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fmatch-requires-both-partialeq-and-eq.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -4,11 +4,5 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n LL |         FOO => { }\n    |         ^^^\n \n-error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/match-requires-both-partialeq-and-eq.rs:17:9\n-   |\n-LL |         FOO => { }\n-   |         ^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "d50835608fad1d03c74cd21ff4fabeda7aaeb691", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -13,7 +13,6 @@ fn leak_free_test() {\n     match todo!() {\n         LEAK_FREE => (),\n         //~^ `impl Send` cannot be used in patterns\n-        //~| `impl Send` cannot be used in patterns\n         _ => (),\n     }\n }"}, {"sha": "889c4fd4b040556184b8dca4d8019f5486144b22", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -4,11 +4,5 @@ error: `impl Send` cannot be used in patterns\n LL |         LEAK_FREE => (),\n    |         ^^^^^^^^^\n \n-error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match-no-leak.rs:14:9\n-   |\n-LL |         LEAK_FREE => (),\n-   |         ^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "a3ff4ad1d47054f238203ed5d2474497714540fd", "filename": "src/test/ui/type-alias-impl-trait/structural-match.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -14,7 +14,6 @@ fn test() {\n     match todo!() {\n         VALUE => (),\n         //~^ `impl Send` cannot be used in patterns\n-        //~| `impl Send` cannot be used in patterns\n         _ => (),\n     }\n }"}, {"sha": "262fd0726137e63c9547b43ea4977c99070bd147", "filename": "src/test/ui/type-alias-impl-trait/structural-match.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -4,11 +4,5 @@ error: `impl Send` cannot be used in patterns\n LL |         VALUE => (),\n    |         ^^^^^\n \n-error: `impl Send` cannot be used in patterns\n-  --> $DIR/structural-match.rs:15:9\n-   |\n-LL |         VALUE => (),\n-   |         ^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "e7cb248a201acb8d0dffa58ca3a1cee2803d7613", "filename": "src/test/ui/union/union-const-pat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Funion%2Funion-const-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Funion%2Funion-const-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-pat.rs?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -8,7 +8,6 @@ const C: U = U { a: 10 };\n fn main() {\n     match C {\n         C => {} //~ ERROR cannot use unions in constant patterns\n-                //~| ERROR cannot use unions in constant patterns\n         _ => {}\n     }\n }"}, {"sha": "dc87f4de5219f445a8f25fabd598bcaab18fb592", "filename": "src/test/ui/union/union-const-pat.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Funion%2Funion-const-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/177d0cef48879c7aea8d7dc5064407c454d36124/src%2Ftest%2Fui%2Funion%2Funion-const-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-pat.stderr?ref=177d0cef48879c7aea8d7dc5064407c454d36124", "patch": "@@ -4,11 +4,5 @@ error: cannot use unions in constant patterns\n LL |         C => {}\n    |         ^\n \n-error: cannot use unions in constant patterns\n-  --> $DIR/union-const-pat.rs:10:9\n-   |\n-LL |         C => {}\n-   |         ^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}