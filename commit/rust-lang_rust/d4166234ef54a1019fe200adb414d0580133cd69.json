{"sha": "d4166234ef54a1019fe200adb414d0580133cd69", "node_id": "C_kwDOAAsO6NoAKGQ0MTY2MjM0ZWY1NGExMDE5ZmUyMDBhZGI0MTRkMDU4MDEzM2NkNjk", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-02-19T14:32:24Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-02-19T15:44:51Z"}, "message": "Adjust block-local impl item visibility rendering", "tree": {"sha": "55e6e38d5e53fc5af1b96efd5da8a19601dfb062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55e6e38d5e53fc5af1b96efd5da8a19601dfb062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4166234ef54a1019fe200adb414d0580133cd69", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmPyQ/MACgkQ4laYqTBY\nYXEeig/9GGsm8jyC4n0HIyrRIjwTzkJ8w+R9pqCGO4Jlvs6QT1WWS65z0X187kmH\nxATe40QDRw+ww/znSSrzjNiBB2PPg4jmUz02GyHsdZOlJEPLNbA+M63Zf0uetRnB\nLDGaLFweJ5M8B3f0RmNATLKTZ++XsHdzXzrHnB0kF7wIhaR2gKg+oadyhf6A8Arj\n7XWreWss8JbDj030BzUwZMg+qUhqCEkJsp7+ClF9xaNXBo6DWrhDiZFzaMvNluH9\nh/sYTwvAsbfoUldgWMMmn5GzY3nOTMaDJHC0rjLqCK5rKClQqnVRz1mDWcDyk/y6\n8q7Qd4QNWEp6sqBqb8KBxc7Fj1TSs+VkKxP+EJD5I6RQwSZOm+JR7xypl+gRscCU\nLKJjXInseRmQf7MEIUBPmdWNmkNRAepDSctBSUC0Z6GqU0HJpt8afqoSu64Ntvz9\n28Cp9UXZAIIigEX7BdtI8L/fJ9uJ5wV3qFw/wttDGoGrODY4cfgucAhgcK3raruK\nlshKEyeE1IYCPolVZKxddajGAUCuA58Gzbszpa5MYKh8ECamOsubZ90+hpSBGnNI\njBggMlnTwFaVPSl8gw5rZV//r/IO3X2a61v7w9EnlPAE01z+GOjhgF3mvoJvGyD0\ndk9rYrzkB7eC9Y96QL3lZGFz5ia8dBP9AAUaLK2XPGTgMveoaiM=\n=XqHQ\n-----END PGP SIGNATURE-----", "payload": "tree 55e6e38d5e53fc5af1b96efd5da8a19601dfb062\nparent 83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1676817144 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1676821491 +0900\n\nAdjust block-local impl item visibility rendering\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4166234ef54a1019fe200adb414d0580133cd69", "html_url": "https://github.com/rust-lang/rust/commit/d4166234ef54a1019fe200adb414d0580133cd69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4166234ef54a1019fe200adb414d0580133cd69/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa", "html_url": "https://github.com/rust-lang/rust/commit/83e24fec98f1fbecb29ea34bfd2bc6e0f32d25aa"}], "stats": {"total": 225, "additions": 216, "deletions": 9}, "files": [{"sha": "66bf2a2900e87e9ccec3c1190851f06826e11ff8", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d4166234ef54a1019fe200adb414d0580133cd69/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4166234ef54a1019fe200adb414d0580133cd69/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=d4166234ef54a1019fe200adb414d0580133cd69", "patch": "@@ -17,15 +17,23 @@ use hir_ty::{\n };\n \n use crate::{\n-    Adt, Const, ConstParam, Enum, Field, Function, GenericParam, HasCrate, HasVisibility,\n-    LifetimeParam, Macro, Module, Static, Struct, Trait, TyBuilder, Type, TypeAlias,\n-    TypeOrConstParam, TypeParam, Union, Variant,\n+    Adt, AsAssocItem, AssocItemContainer, Const, ConstParam, Enum, Field, Function, GenericParam,\n+    HasCrate, HasVisibility, LifetimeParam, Macro, Module, Static, Struct, Trait, TyBuilder, Type,\n+    TypeAlias, TypeOrConstParam, TypeParam, Union, Variant,\n };\n \n impl HirDisplay for Function {\n     fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n-        let data = f.db.function_data(self.id);\n-        write_visibility(self.module(f.db).id, self.visibility(f.db), f)?;\n+        let db = f.db;\n+        let data = db.function_data(self.id);\n+        let container = self.as_assoc_item(db).map(|it| it.container(db));\n+        let mut module = self.module(db);\n+        if let Some(AssocItemContainer::Impl(_)) = container {\n+            // Block-local impls are \"hoisted\" to the nearest (non-block) module.\n+            module = module.nearest_non_block_module(db);\n+        }\n+        let module_id = module.id;\n+        write_visibility(module_id, self.visibility(db), f)?;\n         if data.has_default_kw() {\n             f.write_str(\"default \")?;\n         }\n@@ -35,7 +43,7 @@ impl HirDisplay for Function {\n         if data.has_async_kw() {\n             f.write_str(\"async \")?;\n         }\n-        if self.is_unsafe_to_call(f.db) {\n+        if self.is_unsafe_to_call(db) {\n             f.write_str(\"unsafe \")?;\n         }\n         if let Some(abi) = &data.abi {\n@@ -442,8 +450,15 @@ fn write_where_clause(def: GenericDefId, f: &mut HirFormatter<'_>) -> Result<(),\n \n impl HirDisplay for Const {\n     fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n-        write_visibility(self.module(f.db).id, self.visibility(f.db), f)?;\n-        let data = f.db.const_data(self.id);\n+        let db = f.db;\n+        let container = self.as_assoc_item(db).map(|it| it.container(db));\n+        let mut module = self.module(db);\n+        if let Some(AssocItemContainer::Impl(_)) = container {\n+            // Block-local impls are \"hoisted\" to the nearest (non-block) module.\n+            module = module.nearest_non_block_module(db);\n+        }\n+        write_visibility(module.id, self.visibility(db), f)?;\n+        let data = db.const_data(self.id);\n         f.write_str(\"const \")?;\n         match &data.name {\n             Some(name) => write!(f, \"{name}: \")?,"}, {"sha": "4db0e20098c34256a90f5834d6797c2b5d0fb4ea", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4166234ef54a1019fe200adb414d0580133cd69/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4166234ef54a1019fe200adb414d0580133cd69/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=d4166234ef54a1019fe200adb414d0580133cd69", "patch": "@@ -46,7 +46,7 @@ use hir_def::{\n     item_tree::ItemTreeNode,\n     lang_item::{LangItem, LangItemTarget},\n     layout::{Layout, LayoutError, ReprOptions},\n-    nameres::{self, diagnostics::DefDiagnostic},\n+    nameres::{self, diagnostics::DefDiagnostic, ModuleOrigin},\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n     src::HasSource as _,\n@@ -488,6 +488,20 @@ impl Module {\n         Some(Module { id: def_map.module_id(parent_id) })\n     }\n \n+    /// Finds nearest non-block ancestor `Module` (`self` included).\n+    fn nearest_non_block_module(self, db: &dyn HirDatabase) -> Module {\n+        let mut id = self.id;\n+        loop {\n+            let def_map = id.def_map(db.upcast());\n+            let origin = def_map[id.local_id].origin;\n+            if matches!(origin, ModuleOrigin::BlockExpr { .. }) {\n+                id = id.containing_module(db.upcast()).expect(\"block without parent module\")\n+            } else {\n+                return Module { id };\n+            }\n+        }\n+    }\n+\n     pub fn path_to_root(self, db: &dyn HirDatabase) -> Vec<Module> {\n         let mut res = vec![self];\n         let mut curr = self;"}, {"sha": "c199d1040af7e8b2b473dcebb9d88913036dd1fc", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/d4166234ef54a1019fe200adb414d0580133cd69/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4166234ef54a1019fe200adb414d0580133cd69/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=d4166234ef54a1019fe200adb414d0580133cd69", "patch": "@@ -5647,3 +5647,181 @@ fn main() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn assoc_fn_in_block_local_impl() {\n+    check(\n+        r#\"\n+struct S;\n+mod m {\n+    const _: () = {\n+        impl crate::S {\n+            pub(crate) fn foo() {}\n+        }\n+    };\n+}\n+fn test() {\n+    S::foo$0();\n+}\n+\"#,\n+        expect![[r#\"\n+            *foo*\n+\n+            ```rust\n+            test::S\n+            ```\n+\n+            ```rust\n+            pub(crate) fn foo()\n+            ```\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+struct S;\n+mod m {\n+    const _: () = {\n+        const _: () = {\n+            impl crate::S {\n+                pub(crate) fn foo() {}\n+            }\n+        };\n+    };\n+}\n+fn test() {\n+    S::foo$0();\n+}\n+\"#,\n+        expect![[r#\"\n+            *foo*\n+\n+            ```rust\n+            test::S\n+            ```\n+\n+            ```rust\n+            pub(crate) fn foo()\n+            ```\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+struct S;\n+mod m {\n+    mod inner {\n+        const _: () = {\n+            impl crate::S {\n+                pub(super) fn foo() {}\n+            }\n+        };\n+    }\n+\n+    fn test() {\n+        crate::S::foo$0();\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            *foo*\n+\n+            ```rust\n+            test::S\n+            ```\n+\n+            ```rust\n+            pub(super) fn foo()\n+            ```\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn assoc_const_in_block_local_impl() {\n+    check(\n+        r#\"\n+struct S;\n+mod m {\n+    const _: () = {\n+        impl crate::S {\n+            pub(crate) const A: () = ();\n+        }\n+    };\n+}\n+fn test() {\n+    S::A$0;\n+}\n+\"#,\n+        expect![[r#\"\n+            *A*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            pub(crate) const A: () = ()\n+            ```\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+struct S;\n+mod m {\n+    const _: () = {\n+        const _: () = {\n+            impl crate::S {\n+                pub(crate) const A: () = ();\n+            }\n+        };\n+    };\n+}\n+fn test() {\n+    S::A$0;\n+}\n+\"#,\n+        expect![[r#\"\n+            *A*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            pub(crate) const A: () = ()\n+            ```\n+        \"#]],\n+    );\n+\n+    check(\n+        r#\"\n+struct S;\n+mod m {\n+    mod inner {\n+        const _: () = {\n+            impl crate::S {\n+                pub(super) const A: () = ();\n+            }\n+        };\n+    }\n+\n+    fn test() {\n+        crate::S::A$0;\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            *A*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            pub(super) const A: () = ()\n+            ```\n+        \"#]],\n+    );\n+}"}]}