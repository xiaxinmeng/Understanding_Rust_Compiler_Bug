{"sha": "9d8bf44409b5892525264f0b67179fa42e57c2f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOGJmNDQ0MDliNTg5MjUyNTI2NGYwYjY3MTc5ZmE0MmU1N2MyZjA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-16T00:10:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-16T00:10:22Z"}, "message": "Rollup merge of #77780 - calebcartwright:cast-expr-attr-span, r=oli-obk\n\nrustc_parse: fix spans on cast and range exprs with attrs\n\nCurrently the span for cast and range expressions does not include the span of attributes associated to the lhs which is causing some issues for us in rustfmt.\n\n```rust\nfn foo() -> i64 {\n    #[attr]\n    1u64 as i64\n}\n\nfn bar() -> Range<i32> {\n    #[attr]\n    1..2\n}\n```\n\nThis corrects the span for cast and range expressions to fully include the span of child nodes", "tree": {"sha": "d234dac2207ca9631ed85875dff961611a3fc761", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d234dac2207ca9631ed85875dff961611a3fc761"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d8bf44409b5892525264f0b67179fa42e57c2f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfiOTuCRBK7hj4Ov3rIwAAdHIIADR45qGMvPPdOrKNhrvAyz8F\n1VNnEg4t469qEF/o5HO1Ffh1NszAqMi9EF5MRg/p9XDpFmI5LQPROxzIMiCGUpcp\npUg5La5jkWdjPgy2/Xv+W2CHqbJnjj5idcd5q0Xo7L37xp+Pnw4xjJ0arr4JBCSe\n5pxJJ+YKfNGVhS2pq8erpDAJ38AuMHRgYaaGIKMi509GA4Zy09OVshqIS54qlN2Q\nuvncW1+/Z9IJ1fqFoDNj5jsqAIdWVzidwYNDmt0KRmoFOoKCj56OIkv6AeEhEvFp\nsFPhc4voAJh4q16UqigXKL3Cg5187UFE43Wr83oiZYANxiCiD1ydOnO1KZNNXGo=\n=0e0O\n-----END PGP SIGNATURE-----\n", "payload": "tree d234dac2207ca9631ed85875dff961611a3fc761\nparent 71b0ea62354686553d180ad6f192c234c97501f2\nparent 4e82da4a48d4cf86521608c6f1cf137a5765910b\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602807022 +0200\ncommitter GitHub <noreply@github.com> 1602807022 +0200\n\nRollup merge of #77780 - calebcartwright:cast-expr-attr-span, r=oli-obk\n\nrustc_parse: fix spans on cast and range exprs with attrs\n\nCurrently the span for cast and range expressions does not include the span of attributes associated to the lhs which is causing some issues for us in rustfmt.\n\n```rust\nfn foo() -> i64 {\n    #[attr]\n    1u64 as i64\n}\n\nfn bar() -> Range<i32> {\n    #[attr]\n    1..2\n}\n```\n\nThis corrects the span for cast and range expressions to fully include the span of child nodes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d8bf44409b5892525264f0b67179fa42e57c2f0", "html_url": "https://github.com/rust-lang/rust/commit/9d8bf44409b5892525264f0b67179fa42e57c2f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d8bf44409b5892525264f0b67179fa42e57c2f0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b0ea62354686553d180ad6f192c234c97501f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b0ea62354686553d180ad6f192c234c97501f2", "html_url": "https://github.com/rust-lang/rust/commit/71b0ea62354686553d180ad6f192c234c97501f2"}, {"sha": "4e82da4a48d4cf86521608c6f1cf137a5765910b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e82da4a48d4cf86521608c6f1cf137a5765910b", "html_url": "https://github.com/rust-lang/rust/commit/4e82da4a48d4cf86521608c6f1cf137a5765910b"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "17cbaf65420f6e0a1ab440c9a240509d13a7f961", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9d8bf44409b5892525264f0b67179fa42e57c2f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8bf44409b5892525264f0b67179fa42e57c2f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=9d8bf44409b5892525264f0b67179fa42e57c2f0", "patch": "@@ -246,11 +246,7 @@ impl<'a> Parser<'a> {\n                 this.parse_assoc_expr_with(prec + prec_adjustment, LhsExpr::NotYetParsed)\n             })?;\n \n-            // Make sure that the span of the parent node is larger than the span of lhs and rhs,\n-            // including the attributes.\n-            let lhs_span =\n-                lhs.attrs.iter().find(|a| a.style == AttrStyle::Outer).map_or(lhs_span, |a| a.span);\n-            let span = lhs_span.to(rhs.span);\n+            let span = self.mk_expr_sp(&lhs, lhs_span, rhs.span);\n             lhs = match op {\n                 AssocOp::Add\n                 | AssocOp::Subtract\n@@ -411,7 +407,7 @@ impl<'a> Parser<'a> {\n             None\n         };\n         let rhs_span = rhs.as_ref().map_or(cur_op_span, |x| x.span);\n-        let span = lhs.span.to(rhs_span);\n+        let span = self.mk_expr_sp(&lhs, lhs.span, rhs_span);\n         let limits =\n             if op == AssocOp::DotDot { RangeLimits::HalfOpen } else { RangeLimits::Closed };\n         Ok(self.mk_expr(span, self.mk_range(Some(lhs), rhs, limits)?, AttrVec::new()))\n@@ -571,7 +567,11 @@ impl<'a> Parser<'a> {\n         expr_kind: fn(P<Expr>, P<Ty>) -> ExprKind,\n     ) -> PResult<'a, P<Expr>> {\n         let mk_expr = |this: &mut Self, rhs: P<Ty>| {\n-            this.mk_expr(lhs_span.to(rhs.span), expr_kind(lhs, rhs), AttrVec::new())\n+            this.mk_expr(\n+                this.mk_expr_sp(&lhs, lhs_span, rhs.span),\n+                expr_kind(lhs, rhs),\n+                AttrVec::new(),\n+            )\n         };\n \n         // Save the state of the parser before parsing type normally, in case there is a\n@@ -2324,4 +2324,14 @@ impl<'a> Parser<'a> {\n     pub(super) fn mk_expr_err(&self, span: Span) -> P<Expr> {\n         self.mk_expr(span, ExprKind::Err, AttrVec::new())\n     }\n+\n+    /// Create expression span ensuring the span of the parent node\n+    /// is larger than the span of lhs and rhs, including the attributes.\n+    fn mk_expr_sp(&self, lhs: &P<Expr>, lhs_span: Span, rhs_span: Span) -> Span {\n+        lhs.attrs\n+            .iter()\n+            .find(|a| a.style == AttrStyle::Outer)\n+            .map_or(lhs_span, |a| a.span)\n+            .to(rhs_span)\n+    }\n }"}]}