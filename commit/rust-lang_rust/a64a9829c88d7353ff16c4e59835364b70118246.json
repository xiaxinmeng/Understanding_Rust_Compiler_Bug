{"sha": "a64a9829c88d7353ff16c4e59835364b70118246", "node_id": "C_kwDOAAsO6NoAKGE2NGE5ODI5Yzg4ZDczNTNmZjE2YzRlNTk4MzUzNjRiNzAxMTgyNDY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-08T05:37:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-08T05:37:31Z"}, "message": "Rollup merge of #97819 - compiler-errors:use-import, r=wesleywiser\n\nRecover `import` instead of `use` in item\n\nWhen we definitely don't have a macro invocation (i.e. when we don't have `import ::`), then it's more productive to parse `import` as if it was incorrectly mistaken for `use`.\n\nNot sure if this needs to be a verbose suggestion, but it renders strangely when it's not verbose:\n```\nerror: expected item, found `import`\n --> /home/michael/test.rs:1:1\n  |\n1 | import std::{io::{self, Write}, rc::Rc};\n  | ^^^^^^ help: items are imported using the `use` keyword: `use`\n```\n\nHappy to change it to `span_suggestion` instead of `span_suggestion_verbose` though.\n\nFixes #97788", "tree": {"sha": "e3fda54c3b3316ddbb62e93afe829e1aaa36f153", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3fda54c3b3316ddbb62e93afe829e1aaa36f153"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a64a9829c88d7353ff16c4e59835364b70118246", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJioDWbCRBK7hj4Ov3rIwAAJDsIAI4Wmm1kMJfRS23qcKfLUNTH\nMA7YvvO81oqrM6DmdDrp3leGZ9+cyqVCwwsip6wN+hDR9pWW3a2US2/8na8XA8Nu\nTLg83gyz0wYWf30+Fs7/D3CacFWpw4WajzYV+rwu5FT6I2Kp5PUneGHSy5Tcc5cQ\nWqJrGlmaw3fdUCMYx1Q4rwE1bG7jhYYPPHksY8TdJipe6ItatH4jRPQ2G88UHmOe\nsoA7E3NFi6OGB+JJ4z1FKGkotupd7I7oNbjfFY4JpX/ILs3kGwaZgMn07cvFqgw/\nM+UH++tniJx7B5/WxYlV68NHHULd9ut+VStJbmovhQpsMm8sNMBXw+O8Do/qwBI=\n=PO0/\n-----END PGP SIGNATURE-----\n", "payload": "tree e3fda54c3b3316ddbb62e93afe829e1aaa36f153\nparent d380b457d86512590bd05d2aabda088d88bb2bf3\nparent b7ed8601084e58e6919d62c3b32d81c1766ce576\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654666651 +0200\ncommitter GitHub <noreply@github.com> 1654666651 +0200\n\nRollup merge of #97819 - compiler-errors:use-import, r=wesleywiser\n\nRecover `import` instead of `use` in item\n\nWhen we definitely don't have a macro invocation (i.e. when we don't have `import ::`), then it's more productive to parse `import` as if it was incorrectly mistaken for `use`.\n\nNot sure if this needs to be a verbose suggestion, but it renders strangely when it's not verbose:\n```\nerror: expected item, found `import`\n --> /home/michael/test.rs:1:1\n  |\n1 | import std::{io::{self, Write}, rc::Rc};\n  | ^^^^^^ help: items are imported using the `use` keyword: `use`\n```\n\nHappy to change it to `span_suggestion` instead of `span_suggestion_verbose` though.\n\nFixes #97788\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a64a9829c88d7353ff16c4e59835364b70118246", "html_url": "https://github.com/rust-lang/rust/commit/a64a9829c88d7353ff16c4e59835364b70118246", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a64a9829c88d7353ff16c4e59835364b70118246/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d380b457d86512590bd05d2aabda088d88bb2bf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d380b457d86512590bd05d2aabda088d88bb2bf3", "html_url": "https://github.com/rust-lang/rust/commit/d380b457d86512590bd05d2aabda088d88bb2bf3"}, {"sha": "b7ed8601084e58e6919d62c3b32d81c1766ce576", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ed8601084e58e6919d62c3b32d81c1766ce576", "html_url": "https://github.com/rust-lang/rust/commit/b7ed8601084e58e6919d62c3b32d81c1766ce576"}], "stats": {"total": 113, "additions": 93, "deletions": 20}, "files": [{"sha": "48c3c467becc8648702d64b7229a0328aed9c33c", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 49, "deletions": 20, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a64a9829c88d7353ff16c4e59835364b70118246/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64a9829c88d7353ff16c4e59835364b70118246/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=a64a9829c88d7353ff16c4e59835364b70118246", "patch": "@@ -204,25 +204,7 @@ impl<'a> Parser<'a> {\n         let mut def = || mem::replace(def, Defaultness::Final);\n \n         let info = if self.eat_keyword(kw::Use) {\n-            // USE ITEM\n-            let tree = self.parse_use_tree()?;\n-\n-            // If wildcard or glob-like brace syntax doesn't have `;`,\n-            // the user may not know `*` or `{}` should be the last.\n-            if let Err(mut e) = self.expect_semi() {\n-                match tree.kind {\n-                    UseTreeKind::Glob => {\n-                        e.note(\"the wildcard token must be last on the path\");\n-                    }\n-                    UseTreeKind::Nested(..) => {\n-                        e.note(\"glob-like brace syntax must be last on the path\");\n-                    }\n-                    _ => (),\n-                }\n-                return Err(e);\n-            }\n-\n-            (Ident::empty(), ItemKind::Use(tree))\n+            self.parse_use_item()?\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n             let (ident, sig, generics, body) = self.parse_fn(attrs, fn_parse_mode, lo, vis)?;\n@@ -288,7 +270,12 @@ impl<'a> Parser<'a> {\n         } else if let IsMacroRulesItem::Yes { has_bang } = self.is_macro_rules_item() {\n             // MACRO_RULES ITEM\n             self.parse_item_macro_rules(vis, has_bang)?\n-        } else if vis.kind.is_pub() && self.isnt_macro_invocation() {\n+        } else if self.isnt_macro_invocation()\n+            && (self.token.is_ident_named(Symbol::intern(\"import\"))\n+                || self.token.is_ident_named(Symbol::intern(\"using\")))\n+        {\n+            return self.recover_import_as_use();\n+        } else if self.isnt_macro_invocation() && vis.kind.is_pub() {\n             self.recover_missing_kw_before_item()?;\n             return Ok(None);\n         } else if macros_allowed && self.check_path() {\n@@ -300,6 +287,48 @@ impl<'a> Parser<'a> {\n         Ok(Some(info))\n     }\n \n+    fn recover_import_as_use(&mut self) -> PResult<'a, Option<(Ident, ItemKind)>> {\n+        let span = self.token.span;\n+        let token_name = super::token_descr(&self.token);\n+        let snapshot = self.create_snapshot_for_diagnostic();\n+        self.bump();\n+        match self.parse_use_item() {\n+            Ok(u) => {\n+                self.struct_span_err(span, format!(\"expected item, found {token_name}\"))\n+                    .span_suggestion_short(\n+                        span,\n+                        \"items are imported using the `use` keyword\",\n+                        \"use\".to_owned(),\n+                        Applicability::MachineApplicable,\n+                    )\n+                    .emit();\n+                Ok(Some(u))\n+            }\n+            Err(e) => {\n+                e.cancel();\n+                self.restore_snapshot(snapshot);\n+                Ok(None)\n+            }\n+        }\n+    }\n+\n+    fn parse_use_item(&mut self) -> PResult<'a, (Ident, ItemKind)> {\n+        let tree = self.parse_use_tree()?;\n+        if let Err(mut e) = self.expect_semi() {\n+            match tree.kind {\n+                UseTreeKind::Glob => {\n+                    e.note(\"the wildcard token must be last on the path\");\n+                }\n+                UseTreeKind::Nested(..) => {\n+                    e.note(\"glob-like brace syntax must be last on the path\");\n+                }\n+                _ => (),\n+            }\n+            return Err(e);\n+        }\n+        Ok((Ident::empty(), ItemKind::Use(tree)))\n+    }\n+\n     /// When parsing a statement, would the start of a path be an item?\n     pub(super) fn is_path_start_item(&mut self) -> bool {\n         self.is_kw_followed_by_ident(kw::Union) // no: `union::b`, yes: `union U { .. }`"}, {"sha": "87d453e1565c5249a967abf95c59e1c1cac5b5e3", "filename": "src/test/ui/did_you_mean/use_instead_of_import.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a64a9829c88d7353ff16c4e59835364b70118246/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a64a9829c88d7353ff16c4e59835364b70118246/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.fixed?ref=a64a9829c88d7353ff16c4e59835364b70118246", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+use std::{\n+    //~^ ERROR expected item, found `import`\n+    io::Write,\n+    rc::Rc,\n+};\n+\n+pub use std::io;\n+//~^ ERROR expected item, found `using`\n+\n+fn main() {\n+    let x = Rc::new(1);\n+    let _ = write!(io::stdout(), \"{:?}\", x);\n+}"}, {"sha": "59e83732328d9fc73baf33ce32a3178c5578bd0e", "filename": "src/test/ui/did_you_mean/use_instead_of_import.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a64a9829c88d7353ff16c4e59835364b70118246/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64a9829c88d7353ff16c4e59835364b70118246/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.rs?ref=a64a9829c88d7353ff16c4e59835364b70118246", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+\n+import std::{\n+    //~^ ERROR expected item, found `import`\n+    io::Write,\n+    rc::Rc,\n+};\n+\n+pub using std::io;\n+//~^ ERROR expected item, found `using`\n+\n+fn main() {\n+    let x = Rc::new(1);\n+    let _ = write!(io::stdout(), \"{:?}\", x);\n+}"}, {"sha": "b22954af80f0600704d7a5a50b378ac50689f9ee", "filename": "src/test/ui/did_you_mean/use_instead_of_import.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a64a9829c88d7353ff16c4e59835364b70118246/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a64a9829c88d7353ff16c4e59835364b70118246/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fuse_instead_of_import.stderr?ref=a64a9829c88d7353ff16c4e59835364b70118246", "patch": "@@ -0,0 +1,14 @@\n+error: expected item, found `import`\n+  --> $DIR/use_instead_of_import.rs:3:1\n+   |\n+LL | import std::{\n+   | ^^^^^^ help: items are imported using the `use` keyword\n+\n+error: expected item, found `using`\n+  --> $DIR/use_instead_of_import.rs:9:5\n+   |\n+LL | pub using std::io;\n+   |     ^^^^^ help: items are imported using the `use` keyword\n+\n+error: aborting due to 2 previous errors\n+"}]}