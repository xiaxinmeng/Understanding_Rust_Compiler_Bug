{"sha": "a138e9d625bf83c45d3835b12d7689b730dc4e9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMzhlOWQ2MjViZjgzYzQ1ZDM4MzViMTJkNzY4OWI3MzBkYzRlOWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-28T23:30:53Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-10T21:12:07Z"}, "message": "expand: Get rid of `resolve_macro_path`\n\nIt was used to choose whether to apply derive markers like `#[rustc_copy_clone_marker]` or not,\nbut it was called before all the data required for resolution is available, so it could work incorrectly in some corner cases (like user-defined derives name `Copy` or `Eq`).\nDelay the decision about markers until the proper resolution results are available instead.", "tree": {"sha": "408540b0a11f8f3f63e86892b9d40e31aa393b3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/408540b0a11f8f3f63e86892b9d40e31aa393b3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a138e9d625bf83c45d3835b12d7689b730dc4e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a138e9d625bf83c45d3835b12d7689b730dc4e9a", "html_url": "https://github.com/rust-lang/rust/commit/a138e9d625bf83c45d3835b12d7689b730dc4e9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a138e9d625bf83c45d3835b12d7689b730dc4e9a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62a1f5dbc0bbcf875b21dce643ae8b2ae971c74e", "url": "https://api.github.com/repos/rust-lang/rust/commits/62a1f5dbc0bbcf875b21dce643ae8b2ae971c74e", "html_url": "https://github.com/rust-lang/rust/commit/62a1f5dbc0bbcf875b21dce643ae8b2ae971c74e"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "61300e3ee3cee21b7fb29f06ade81f0db9c2a67b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a138e9d625bf83c45d3835b12d7689b730dc4e9a/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a138e9d625bf83c45d3835b12d7689b730dc4e9a/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=a138e9d625bf83c45d3835b12d7689b730dc4e9a", "patch": "@@ -242,13 +242,6 @@ impl<'a> base::Resolver for Resolver<'a> {\n         Ok(Some(ext))\n     }\n \n-    fn resolve_macro_path(&mut self, path: &ast::Path, kind: MacroKind, invoc_id: Mark,\n-                          derives_in_scope: Vec<ast::Path>, force: bool)\n-                          -> Result<Lrc<SyntaxExtension>, Determinacy> {\n-        let parent_scope = self.invoc_parent_scope(invoc_id, derives_in_scope);\n-        Ok(self.resolve_macro_to_res(path, kind, &parent_scope, false, force)?.1)\n-    }\n-\n     fn check_unused_macros(&self) {\n         for (&node_id, &span) in self.unused_macros.iter() {\n             self.session.buffer_lint("}, {"sha": "267046655ffdc4a2301eca844bc5790f13f5ddda", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a138e9d625bf83c45d3835b12d7689b730dc4e9a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a138e9d625bf83c45d3835b12d7689b730dc4e9a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=a138e9d625bf83c45d3835b12d7689b730dc4e9a", "patch": "@@ -680,9 +680,6 @@ pub trait Resolver {\n \n     fn resolve_macro_invocation(&mut self, invoc: &Invocation, invoc_id: Mark, force: bool)\n                                 -> Result<Option<Lrc<SyntaxExtension>>, Determinacy>;\n-    fn resolve_macro_path(&mut self, path: &ast::Path, kind: MacroKind, invoc_id: Mark,\n-                          derives_in_scope: Vec<ast::Path>, force: bool)\n-                          -> Result<Lrc<SyntaxExtension>, Determinacy>;\n \n     fn check_unused_macros(&self);\n }"}, {"sha": "bb7d7352e055af821e7fedac52620e641e6a1e86", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a138e9d625bf83c45d3835b12d7689b730dc4e9a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a138e9d625bf83c45d3835b12d7689b730dc4e9a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a138e9d625bf83c45d3835b12d7689b730dc4e9a", "patch": "@@ -208,6 +208,7 @@ pub enum InvocationKind {\n     Derive {\n         path: Path,\n         item: Annotatable,\n+        item_with_markers: Annotatable,\n     },\n }\n \n@@ -362,19 +363,15 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n                     derives.reserve(traits.len());\n                     invocations.reserve(traits.len());\n-                    for path in &traits {\n+                    for path in traits {\n                         let mark = Mark::fresh(self.cx.current_expansion.mark);\n                         derives.push(mark);\n-                        let item = match self.cx.resolver.resolve_macro_path(\n-                                path, MacroKind::Derive, Mark::root(), Vec::new(), false) {\n-                            Ok(ext) => match ext.kind {\n-                                SyntaxExtensionKind::LegacyDerive(..) => item_with_markers.clone(),\n-                                _ => item.clone(),\n-                            },\n-                            _ => item.clone(),\n-                        };\n                         invocations.push(Invocation {\n-                            kind: InvocationKind::Derive { path: path.clone(), item },\n+                            kind: InvocationKind::Derive {\n+                                path,\n+                                item: item.clone(),\n+                                item_with_markers: item_with_markers.clone(),\n+                            },\n                             fragment_kind: invoc.fragment_kind,\n                             expansion_data: ExpansionData {\n                                 mark,\n@@ -737,7 +734,10 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                            ext: &SyntaxExtension)\n                            -> Option<AstFragment> {\n         let (path, item) = match invoc.kind {\n-            InvocationKind::Derive { path, item } => (path, item),\n+            InvocationKind::Derive { path, item, item_with_markers } => match ext.kind {\n+                SyntaxExtensionKind::LegacyDerive(..) => (path, item_with_markers),\n+                _ => (path, item),\n+            }\n             _ => unreachable!(),\n         };\n         if !item.derive_allowed() {"}]}