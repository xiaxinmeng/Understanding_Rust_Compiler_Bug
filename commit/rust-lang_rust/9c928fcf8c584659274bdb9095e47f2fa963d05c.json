{"sha": "9c928fcf8c584659274bdb9095e47f2fa963d05c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljOTI4ZmNmOGM1ODQ2NTkyNzRiZGI5MDk1ZTQ3ZjJmYTk2M2QwNWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-02-26T01:14:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-02-26T01:14:48Z"}, "message": "rustc: Make iter_structural_ty() not use the \"variants\" field in the tag info", "tree": {"sha": "ca5f4977d6b15c11eeafb2bd29c3a29525bf4c31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca5f4977d6b15c11eeafb2bd29c3a29525bf4c31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c928fcf8c584659274bdb9095e47f2fa963d05c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c928fcf8c584659274bdb9095e47f2fa963d05c", "html_url": "https://github.com/rust-lang/rust/commit/9c928fcf8c584659274bdb9095e47f2fa963d05c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c928fcf8c584659274bdb9095e47f2fa963d05c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5081a6a825f23b45920cf72896076039f30386d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5081a6a825f23b45920cf72896076039f30386d", "html_url": "https://github.com/rust-lang/rust/commit/b5081a6a825f23b45920cf72896076039f30386d"}], "stats": {"total": 104, "additions": 42, "deletions": 62}, "files": [{"sha": "a56421ba39ab0ebf0540da548910040d0cc71566", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 42, "deletions": 62, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/9c928fcf8c584659274bdb9095e47f2fa963d05c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c928fcf8c584659274bdb9095e47f2fa963d05c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9c928fcf8c584659274bdb9095e47f2fa963d05c", "patch": "@@ -1457,13 +1457,11 @@ fn type_of_variant(@crate_ctxt cx, &ast.variant v) -> TypeRef {\n     ret T_struct(lltys);\n }\n \n-// Returns the number of variants in a tag.\n-fn tag_variant_count(@crate_ctxt cx, ast.def_id id) -> uint {\n+// Returns the variants in a tag.\n+fn tag_variants(@crate_ctxt cx, ast.def_id id) -> vec[ast.variant] {\n     check (cx.items.contains_key(id));\n     alt (cx.items.get(id).node) {\n-        case (ast.item_tag(_, ?variants, _, _)) {\n-            ret _vec.len[ast.variant](variants);\n-        }\n+        case (ast.item_tag(_, ?variants, _, _)) { ret variants; }\n     }\n     fail;   // not reached\n }\n@@ -1519,21 +1517,9 @@ fn iter_structural_ty(@block_ctxt cx,\n         case (ty.ty_tag(?tid, ?tps)) {\n             check (cx.fcx.ccx.tags.contains_key(tid));\n             auto info = cx.fcx.ccx.tags.get(tid);\n-            auto n_variants = tag_variant_count(cx.fcx.ccx, tid);\n-\n-            // Look up the tag in the typechecked AST.\n-            check (cx.fcx.ccx.items.contains_key(tid));\n-            auto tag_item = cx.fcx.ccx.items.get(tid);\n-            let vec[ast.variant] variants = vec();  // FIXME: typestate bug\n-            alt (tag_item.node) {\n-                case (ast.item_tag(_, ?vs, _, _)) {\n-                    variants = vs;\n-                }\n-                case (_) {\n-                    log \"trans: ty_tag doesn't actually refer to a tag\";\n-                    fail;\n-                }\n-            }\n+\n+            auto variants = tag_variants(cx.fcx.ccx, tid);\n+            auto n_variants = _vec.len[ast.variant](variants);\n \n             auto lldiscrim_ptr = cx.build.GEP(v, vec(C_int(0), C_int(0)));\n             auto llunion_ptr = cx.build.GEP(v, vec(C_int(0), C_int(1)));\n@@ -1548,55 +1534,49 @@ fn iter_structural_ty(@block_ctxt cx,\n             auto next_cx = new_sub_block_ctxt(cx, \"tag-iter-next\");\n \n             auto i = 0u;\n-            for (tup(ast.def_id,arity) variant in info.variants) {\n+            for (ast.variant variant in variants) {\n                 auto variant_cx = new_sub_block_ctxt(cx, \"tag-iter-variant-\" +\n                                                      _uint.to_str(i, 10u));\n                 llvm.LLVMAddCase(llswitch, C_int(i as int), variant_cx.llbb);\n \n-                alt (variant._1) {\n-                    case (n_ary) {\n-                        let vec[ValueRef] vals = vec(C_int(0), C_int(1),\n-                                                     C_int(i as int));\n-                        auto llvar = variant_cx.build.GEP(v, vals);\n-                        auto llvarty = type_of_variant(cx.fcx.ccx,\n-                                                       variants.(i));\n-\n-                        auto fn_ty = ty.ann_to_type(variants.(i).ann);\n-                        alt (fn_ty.struct) {\n-                            case (ty.ty_fn(_, ?args, _)) {\n-                                auto llvarp = variant_cx.build.\n-                                    TruncOrBitCast(llunion_ptr,\n-                                                   T_ptr(llvarty));\n-\n-                                auto j = 0u;\n-                                for (ty.arg a in args) {\n-                                    auto v = vec(C_int(0),\n-                                                 C_int(j as int));\n-                                    auto llfldp =\n-                                        variant_cx.build.GEP(llvarp, v);\n-\n-                                    auto ty_subst = ty.substitute_ty_params(\n-                                        info.ty_params, tps, a.ty);\n-\n-                                    auto llfld =\n-                                        load_scalar_or_boxed(variant_cx,\n-                                                             llfldp,\n-                                                             ty_subst);\n-\n-                                    auto res = f(variant_cx, llfld, ty_subst);\n-                                    variant_cx = res.bcx;\n-                                    j += 1u;\n-                                }\n+                if (_vec.len[ast.variant_arg](variant.args) > 0u) {\n+                    // N-ary variant.\n+                    let vec[ValueRef] vals = vec(C_int(0), C_int(1),\n+                                                 C_int(i as int));\n+                    auto llvar = variant_cx.build.GEP(v, vals);\n+                    auto llvarty = type_of_variant(cx.fcx.ccx, variants.(i));\n+\n+                    auto fn_ty = ty.ann_to_type(variants.(i).ann);\n+                    alt (fn_ty.struct) {\n+                        case (ty.ty_fn(_, ?args, _)) {\n+                            auto llvarp = variant_cx.build.\n+                                TruncOrBitCast(llunion_ptr, T_ptr(llvarty));\n+\n+                            auto j = 0u;\n+                            for (ty.arg a in args) {\n+                                auto v = vec(C_int(0), C_int(j as int));\n+                                auto llfldp = variant_cx.build.GEP(llvarp, v);\n+\n+                                auto ty_subst = ty.substitute_ty_params(\n+                                    info.ty_params, tps, a.ty);\n+\n+                                auto llfld =\n+                                    load_scalar_or_boxed(variant_cx,\n+                                                         llfldp,\n+                                                         ty_subst);\n+\n+                                auto res = f(variant_cx, llfld, ty_subst);\n+                                variant_cx = res.bcx;\n+                                j += 1u;\n                             }\n-                            case (_) { fail; }\n                         }\n-\n-                        variant_cx.build.Br(next_cx.llbb);\n-                    }\n-                    case (nullary) {\n-                        // Nothing to do.\n-                        variant_cx.build.Br(next_cx.llbb);\n+                        case (_) { fail; }\n                     }\n+\n+                    variant_cx.build.Br(next_cx.llbb);\n+                } else {\n+                    // Nullary variant; nothing to do.\n+                    variant_cx.build.Br(next_cx.llbb);\n                 }\n \n                 i += 1u;"}]}