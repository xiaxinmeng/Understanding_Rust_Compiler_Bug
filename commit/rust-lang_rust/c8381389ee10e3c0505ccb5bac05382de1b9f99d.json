{"sha": "c8381389ee10e3c0505ccb5bac05382de1b9f99d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MzgxMzg5ZWUxMGUzYzA1MDVjY2I1YmFjMDUzODJkZTFiOWY5OWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-09T03:15:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-09T03:15:34Z"}, "message": "Auto merge of #86160 - JohnTitor:rollup-8ark9x7, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #85676 (Fix documentation style inconsistencies for IP addresses)\n - #85715 (Document `From` impls in string.rs)\n - #85791 (Add `Ipv6Addr::is_unicast`)\n - #85957 (Display defaults on const params- rustdoc )\n - #85982 (Enable rustdoc to document safe wasm intrinsics)\n - #86121 (Forwarding implementation for Seek trait's stream_position method)\n - #86124 (Include macro name in 'local ambiguity' error)\n - #86128 (Refactor: Extract render_summary from render_impl.)\n - #86142 (Simplify proc_macro code using Bound::cloned().)\n - #86158 (Update books)\n - #86159 (Update cargo)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "803eab2ca047060b033973af85d031498d6c6e04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/803eab2ca047060b033973af85d031498d6c6e04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8381389ee10e3c0505ccb5bac05382de1b9f99d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8381389ee10e3c0505ccb5bac05382de1b9f99d", "html_url": "https://github.com/rust-lang/rust/commit/c8381389ee10e3c0505ccb5bac05382de1b9f99d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8381389ee10e3c0505ccb5bac05382de1b9f99d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed597e7e19d0fe716d9f81b1e840a5abbfd7c28d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed597e7e19d0fe716d9f81b1e840a5abbfd7c28d", "html_url": "https://github.com/rust-lang/rust/commit/ed597e7e19d0fe716d9f81b1e840a5abbfd7c28d"}, {"sha": "d8376f486566be409d8e6dab4f6cb7de1982c601", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8376f486566be409d8e6dab4f6cb7de1982c601", "html_url": "https://github.com/rust-lang/rust/commit/d8376f486566be409d8e6dab4f6cb7de1982c601"}], "stats": {"total": 408, "additions": 264, "deletions": 144}, "files": [{"sha": "efed41de23a89ebf23b7f0c86841db93167d20f5", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -1,6 +1,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(destructuring_assignment)]\n+#![feature(format_args_capture)]\n #![feature(iter_zip)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]"}, {"sha": "a7434d73abe68ea7ec514b8650eee802313ce095", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -85,6 +85,7 @@ use smallvec::{smallvec, SmallVec};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_span::symbol::Ident;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::mem;\n@@ -615,7 +616,11 @@ fn inner_parse_loop<'root, 'tt>(\n \n /// Use the given sequence of token trees (`ms`) as a matcher. Match the token\n /// stream from the given `parser` against it and return the match.\n-pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> NamedParseResult {\n+pub(super) fn parse_tt(\n+    parser: &mut Cow<'_, Parser<'_>>,\n+    ms: &[TokenTree],\n+    macro_name: Ident,\n+) -> NamedParseResult {\n     // A queue of possible matcher positions. We initialize it with the matcher position in which\n     // the \"dot\" is before the first token of the first token tree in `ms`. `inner_parse_loop` then\n     // processes all of these possible matcher positions and produces possible next positions into\n@@ -711,7 +716,7 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n             return Error(\n                 parser.token.span,\n                 format!(\n-                    \"local ambiguity: multiple parsing options: {}\",\n+                    \"local ambiguity when calling macro `{macro_name}`: multiple parsing options: {}\",\n                     match next_items.len() {\n                         0 => format!(\"built-in NTs {}.\", nts),\n                         1 => format!(\"built-in NTs {} or 1 other option.\", nts),"}, {"sha": "abad190b072ab3081cc8ce064bdd659c147e55c8", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -245,7 +245,7 @@ fn generic_extension<'cx>(\n         // are not recorded. On the first `Success(..)`ful matcher, the spans are merged.\n         let mut gated_spans_snapshot = mem::take(&mut *sess.gated_spans.spans.borrow_mut());\n \n-        match parse_tt(&mut Cow::Borrowed(&parser), lhs_tt) {\n+        match parse_tt(&mut Cow::Borrowed(&parser), lhs_tt, name) {\n             Success(named_matches) => {\n                 // The matcher was `Success(..)`ful.\n                 // Merge the gated spans from parsing the matcher with the pre-existing ones.\n@@ -338,7 +338,7 @@ fn generic_extension<'cx>(\n                 _ => continue,\n             };\n             if let Success(_) =\n-                parse_tt(&mut Cow::Borrowed(&parser_from_cx(sess, arg.clone())), lhs_tt)\n+                parse_tt(&mut Cow::Borrowed(&parser_from_cx(sess, arg.clone())), lhs_tt, name)\n             {\n                 if comma_span.is_dummy() {\n                     err.note(\"you might be missing a comma\");\n@@ -432,7 +432,7 @@ pub fn compile_declarative_macro(\n     ];\n \n     let parser = Parser::new(&sess.parse_sess, body, true, rustc_parse::MACRO_ARGUMENTS);\n-    let argument_map = match parse_tt(&mut Cow::Borrowed(&parser), &argument_gram) {\n+    let argument_map = match parse_tt(&mut Cow::Borrowed(&parser), &argument_gram, def.ident) {\n         Success(m) => m,\n         Failure(token, msg) => {\n             let s = parse_failure_msg(&token);"}, {"sha": "ee3ac3b62d9ec7ed5d56b03004ad24a21a634700", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -2771,7 +2771,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             }\n         } else if tcx.sess.check_name(attr, sym::target_feature) {\n             if !tcx.is_closure(id) && tcx.fn_sig(id).unsafety() == hir::Unsafety::Normal {\n-                if tcx.sess.target.is_like_wasm {\n+                if tcx.sess.target.is_like_wasm || tcx.sess.opts.actually_rustdoc {\n                     // The `#[target_feature]` attribute is allowed on\n                     // WebAssembly targets on all functions, including safe\n                     // ones. Other targets require that `#[target_feature]` is\n@@ -2785,6 +2785,10 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                     // deterministic trap. There is no undefined behavior when\n                     // executing WebAssembly so `#[target_feature]` is allowed\n                     // on safe functions (but again, only for WebAssembly)\n+                    //\n+                    // Note that this is also allowed if `actually_rustdoc` so\n+                    // if a target is documenting some wasm-specific code then\n+                    // it's not spuriously denied.\n                 } else if !tcx.features().target_feature_11 {\n                     let mut err = feature_err(\n                         &tcx.sess.parse_sess,"}, {"sha": "93f5fe45cd6aa28de9313f4ca0da20410800a1b1", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -2491,6 +2491,9 @@ impl AsRef<[u8]> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<&str> for String {\n+    /// Converts a `&str` into a [`String`].\n+    ///\n+    /// The result is allocated on the heap.\n     #[inline]\n     fn from(s: &str) -> String {\n         s.to_owned()\n@@ -2500,7 +2503,7 @@ impl From<&str> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_mut_str_for_string\", since = \"1.44.0\")]\n impl From<&mut str> for String {\n-    /// Converts a `&mut str` into a `String`.\n+    /// Converts a `&mut str` into a [`String`].\n     ///\n     /// The result is allocated on the heap.\n     #[inline]\n@@ -2512,6 +2515,9 @@ impl From<&mut str> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_ref_string\", since = \"1.35.0\")]\n impl From<&String> for String {\n+    /// Converts a `&String` into a [`String`].\n+    ///\n+    /// This clones `s` and returns the clone.\n     #[inline]\n     fn from(s: &String) -> String {\n         s.clone()\n@@ -2522,7 +2528,7 @@ impl From<&String> for String {\n #[cfg(not(test))]\n #[stable(feature = \"string_from_box\", since = \"1.18.0\")]\n impl From<Box<str>> for String {\n-    /// Converts the given boxed `str` slice to a `String`.\n+    /// Converts the given boxed `str` slice to a [`String`].\n     /// It is notable that the `str` slice is owned.\n     ///\n     /// # Examples\n@@ -2544,7 +2550,7 @@ impl From<Box<str>> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"box_from_str\", since = \"1.20.0\")]\n impl From<String> for Box<str> {\n-    /// Converts the given `String` to a boxed `str` slice that is owned.\n+    /// Converts the given [`String`] to a boxed `str` slice that is owned.\n     ///\n     /// # Examples\n     ///\n@@ -2565,6 +2571,22 @@ impl From<String> for Box<str> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"string_from_cow_str\", since = \"1.14.0\")]\n impl<'a> From<Cow<'a, str>> for String {\n+    /// Converts a clone-on-write string to an owned\n+    /// instance of [`String`].\n+    ///\n+    /// This extracts the owned string,\n+    /// clones the string if it is not already owned.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::borrow::Cow;\n+    /// // If the string is not owned...\n+    /// let cow: Cow<str> = Cow::Borrowed(\"eggplant\");\n+    /// // It will allocate on the heap and copy the string.\n+    /// let owned: String = String::from(cow);\n+    /// assert_eq!(&owned[..], \"eggplant\");\n+    /// ```\n     fn from(s: Cow<'a, str>) -> String {\n         s.into_owned()\n     }\n@@ -2573,7 +2595,7 @@ impl<'a> From<Cow<'a, str>> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<&'a str> for Cow<'a, str> {\n-    /// Converts a string slice into a Borrowed variant.\n+    /// Converts a string slice into a [`Borrowed`] variant.\n     /// No heap allocation is performed, and the string\n     /// is not copied.\n     ///\n@@ -2583,6 +2605,8 @@ impl<'a> From<&'a str> for Cow<'a, str> {\n     /// # use std::borrow::Cow;\n     /// assert_eq!(Cow::from(\"eggplant\"), Cow::Borrowed(\"eggplant\"));\n     /// ```\n+    ///\n+    /// [`Borrowed`]: crate::borrow::Cow::Borrowed\n     #[inline]\n     fn from(s: &'a str) -> Cow<'a, str> {\n         Cow::Borrowed(s)\n@@ -2592,7 +2616,7 @@ impl<'a> From<&'a str> for Cow<'a, str> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<String> for Cow<'a, str> {\n-    /// Converts a String into an Owned variant.\n+    /// Converts a [`String`] into an [`Owned`] variant.\n     /// No heap allocation is performed, and the string\n     /// is not copied.\n     ///\n@@ -2604,6 +2628,8 @@ impl<'a> From<String> for Cow<'a, str> {\n     /// let s2 = \"eggplant\".to_string();\n     /// assert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));\n     /// ```\n+    ///\n+    /// [`Owned`]: crate::borrow::Cow::Owned\n     #[inline]\n     fn from(s: String) -> Cow<'a, str> {\n         Cow::Owned(s)\n@@ -2613,7 +2639,7 @@ impl<'a> From<String> for Cow<'a, str> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"cow_from_string_ref\", since = \"1.28.0\")]\n impl<'a> From<&'a String> for Cow<'a, str> {\n-    /// Converts a String reference into a Borrowed variant.\n+    /// Converts a [`String`] reference into a [`Borrowed`] variant.\n     /// No heap allocation is performed, and the string\n     /// is not copied.\n     ///\n@@ -2624,6 +2650,8 @@ impl<'a> From<&'a String> for Cow<'a, str> {\n     /// let s = \"eggplant\".to_string();\n     /// assert_eq!(Cow::from(&s), Cow::Borrowed(\"eggplant\"));\n     /// ```\n+    ///\n+    /// [`Borrowed`]: crate::borrow::Cow::Borrowed\n     #[inline]\n     fn from(s: &'a String) -> Cow<'a, str> {\n         Cow::Borrowed(s.as_str())\n@@ -2656,7 +2684,7 @@ impl<'a> FromIterator<String> for Cow<'a, str> {\n \n #[stable(feature = \"from_string_for_vec_u8\", since = \"1.14.0\")]\n impl From<String> for Vec<u8> {\n-    /// Converts the given `String` to a vector `Vec` that holds values of type `u8`.\n+    /// Converts the given [`String`] to a vector [`Vec`] that holds values of type [`u8`].\n     ///\n     /// # Examples\n     ///\n@@ -2802,6 +2830,14 @@ impl FusedIterator for Drain<'_> {}\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_char_for_string\", since = \"1.46.0\")]\n impl From<char> for String {\n+    /// Allocates an owned [`String`] from a single character.\n+    ///\n+    /// # Example\n+    /// ```rust\n+    /// let c: char = 'a';\n+    /// let s: String = String::from(c);\n+    /// assert_eq!(\"a\", &s[..]);\n+    /// ```\n     #[inline]\n     fn from(c: char) -> Self {\n         c.to_string()"}, {"sha": "26fbf50e2dfdf903f940495dc28a30d3adddc774", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -31,6 +31,7 @@\n #![feature(restricted_std)]\n #![feature(rustc_attrs)]\n #![feature(min_specialization)]\n+#![feature(bound_cloned)]\n #![recursion_limit = \"256\"]\n \n #[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n@@ -43,7 +44,7 @@ mod diagnostic;\n pub use diagnostic::{Diagnostic, Level, MultiSpan};\n \n use std::cmp::Ordering;\n-use std::ops::{Bound, RangeBounds};\n+use std::ops::RangeBounds;\n use std::path::PathBuf;\n use std::str::FromStr;\n use std::{error, fmt, iter, mem};\n@@ -1162,16 +1163,7 @@ impl Literal {\n     // was 'c' or whether it was '\\u{63}'.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn subspan<R: RangeBounds<usize>>(&self, range: R) -> Option<Span> {\n-        // HACK(eddyb) something akin to `Option::cloned`, but for `Bound<&T>`.\n-        fn cloned_bound<T: Clone>(bound: Bound<&T>) -> Bound<T> {\n-            match bound {\n-                Bound::Included(x) => Bound::Included(x.clone()),\n-                Bound::Excluded(x) => Bound::Excluded(x.clone()),\n-                Bound::Unbounded => Bound::Unbounded,\n-            }\n-        }\n-\n-        self.0.subspan(cloned_bound(range.start_bound()), cloned_bound(range.end_bound())).map(Span)\n+        self.0.subspan(range.start_bound().cloned(), range.end_bound().cloned()).map(Span)\n     }\n }\n "}, {"sha": "7a2a49ba7d7076b4998e1e3eae1af7c89479cd01", "filename": "library/std/src/io/impls.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -87,6 +87,11 @@ impl<S: Seek + ?Sized> Seek for &mut S {\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n         (**self).seek(pos)\n     }\n+\n+    #[inline]\n+    fn stream_position(&mut self) -> io::Result<u64> {\n+        (**self).stream_position()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<B: BufRead + ?Sized> BufRead for &mut B {\n@@ -186,6 +191,11 @@ impl<S: Seek + ?Sized> Seek for Box<S> {\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n         (**self).seek(pos)\n     }\n+\n+    #[inline]\n+    fn stream_position(&mut self) -> io::Result<u64> {\n+        (**self).stream_position()\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<B: BufRead + ?Sized> BufRead for Box<B> {"}, {"sha": "2b6d0d7d5daa74aa2fb5694913ad3a53c222ccb7", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 55, "deletions": 27, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -314,7 +314,7 @@ impl Ipv4Addr {\n         Ipv4Addr { inner: c::in_addr { s_addr: u32::from_ne_bytes([a, b, c, d]) } }\n     }\n \n-    /// An IPv4 address with the address pointing to localhost: 127.0.0.1.\n+    /// An IPv4 address with the address pointing to localhost: `127.0.0.1`\n     ///\n     /// # Examples\n     ///\n@@ -327,7 +327,7 @@ impl Ipv4Addr {\n     #[stable(feature = \"ip_constructors\", since = \"1.30.0\")]\n     pub const LOCALHOST: Self = Ipv4Addr::new(127, 0, 0, 1);\n \n-    /// An IPv4 address representing an unspecified address: 0.0.0.0\n+    /// An IPv4 address representing an unspecified address: `0.0.0.0`\n     ///\n     /// This corresponds to the constant `INADDR_ANY` in other languages.\n     ///\n@@ -343,7 +343,7 @@ impl Ipv4Addr {\n     #[stable(feature = \"ip_constructors\", since = \"1.30.0\")]\n     pub const UNSPECIFIED: Self = Ipv4Addr::new(0, 0, 0, 0);\n \n-    /// An IPv4 address representing the broadcast address: 255.255.255.255\n+    /// An IPv4 address representing the broadcast address: `255.255.255.255`\n     ///\n     /// # Examples\n     ///\n@@ -374,7 +374,7 @@ impl Ipv4Addr {\n         self.inner.s_addr.to_ne_bytes()\n     }\n \n-    /// Returns [`true`] for the special 'unspecified' address (0.0.0.0).\n+    /// Returns [`true`] for the special 'unspecified' address (`0.0.0.0`).\n     ///\n     /// This property is defined in _UNIX Network Programming, Second Edition_,\n     /// W. Richard Stevens, p. 891; see also [ip7].\n@@ -396,7 +396,7 @@ impl Ipv4Addr {\n         self.inner.s_addr == 0\n     }\n \n-    /// Returns [`true`] if this is a loopback address (127.0.0.0/8).\n+    /// Returns [`true`] if this is a loopback address (`127.0.0.0/8`).\n     ///\n     /// This property is defined by [IETF RFC 1122].\n     ///\n@@ -421,9 +421,9 @@ impl Ipv4Addr {\n     ///\n     /// The private address ranges are defined in [IETF RFC 1918] and include:\n     ///\n-    ///  - 10.0.0.0/8\n-    ///  - 172.16.0.0/12\n-    ///  - 192.168.0.0/16\n+    ///  - `10.0.0.0/8`\n+    ///  - `172.16.0.0/12`\n+    ///  - `192.168.0.0/16`\n     ///\n     /// [IETF RFC 1918]: https://tools.ietf.org/html/rfc1918\n     ///\n@@ -452,7 +452,7 @@ impl Ipv4Addr {\n         }\n     }\n \n-    /// Returns [`true`] if the address is link-local (169.254.0.0/16).\n+    /// Returns [`true`] if the address is link-local (`169.254.0.0/16`).\n     ///\n     /// This property is defined by [IETF RFC 3927].\n     ///\n@@ -485,7 +485,7 @@ impl Ipv4Addr {\n     /// - the broadcast address (see [`Ipv4Addr::is_broadcast()`])\n     /// - addresses used for documentation (see [`Ipv4Addr::is_documentation()`])\n     /// - the unspecified address (see [`Ipv4Addr::is_unspecified()`]), and the whole\n-    ///   0.0.0.0/8 block\n+    ///   `0.0.0.0/8` block\n     /// - addresses reserved for future protocols (see\n     /// [`Ipv4Addr::is_ietf_protocol_assignment()`], except\n     /// `192.0.0.9/32` and `192.0.0.10/32` which are globally routable\n@@ -682,9 +682,9 @@ impl Ipv4Addr {\n         self.octets()[0] & 240 == 240 && !self.is_broadcast()\n     }\n \n-    /// Returns [`true`] if this is a multicast address (224.0.0.0/4).\n+    /// Returns [`true`] if this is a multicast address (`224.0.0.0/4`).\n     ///\n-    /// Multicast addresses have a most significant octet between 224 and 239,\n+    /// Multicast addresses have a most significant octet between `224` and `239`,\n     /// and is defined by [IETF RFC 5771].\n     ///\n     /// [IETF RFC 5771]: https://tools.ietf.org/html/rfc5771\n@@ -705,9 +705,9 @@ impl Ipv4Addr {\n         self.octets()[0] >= 224 && self.octets()[0] <= 239\n     }\n \n-    /// Returns [`true`] if this is a broadcast address (255.255.255.255).\n+    /// Returns [`true`] if this is a broadcast address (`255.255.255.255`).\n     ///\n-    /// A broadcast address has all octets set to 255 as defined in [IETF RFC 919].\n+    /// A broadcast address has all octets set to `255` as defined in [IETF RFC 919].\n     ///\n     /// [IETF RFC 919]: https://tools.ietf.org/html/rfc919\n     ///\n@@ -730,9 +730,9 @@ impl Ipv4Addr {\n     ///\n     /// This is defined in [IETF RFC 5737]:\n     ///\n-    /// - 192.0.2.0/24 (TEST-NET-1)\n-    /// - 198.51.100.0/24 (TEST-NET-2)\n-    /// - 203.0.113.0/24 (TEST-NET-3)\n+    /// - `192.0.2.0/24` (TEST-NET-1)\n+    /// - `198.51.100.0/24` (TEST-NET-2)\n+    /// - `203.0.113.0/24` (TEST-NET-3)\n     ///\n     /// [IETF RFC 5737]: https://tools.ietf.org/html/rfc5737\n     ///\n@@ -760,7 +760,7 @@ impl Ipv4Addr {\n \n     /// Converts this address to an IPv4-compatible [`IPv6` address].\n     ///\n-    /// a.b.c.d becomes ::a.b.c.d\n+    /// `a.b.c.d` becomes `::a.b.c.d`\n     ///\n     /// This isn't typically the method you want; these addresses don't typically\n     /// function on modern systems. Use `to_ipv6_mapped` instead.\n@@ -774,7 +774,7 @@ impl Ipv4Addr {\n     ///\n     /// assert_eq!(\n     ///     Ipv4Addr::new(192, 0, 2, 255).to_ipv6_compatible(),\n-    ///     Ipv6Addr::new(0, 0, 0, 0, 0, 0, 49152, 767)\n+    ///     Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0xc000, 0x2ff)\n     /// );\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n@@ -789,7 +789,7 @@ impl Ipv4Addr {\n \n     /// Converts this address to an IPv4-mapped [`IPv6` address].\n     ///\n-    /// a.b.c.d becomes ::ffff:a.b.c.d\n+    /// `a.b.c.d` becomes `::ffff:a.b.c.d`\n     ///\n     /// [`IPv6` address]: Ipv6Addr\n     ///\n@@ -799,7 +799,7 @@ impl Ipv4Addr {\n     /// use std::net::{Ipv4Addr, Ipv6Addr};\n     ///\n     /// assert_eq!(Ipv4Addr::new(192, 0, 2, 255).to_ipv6_mapped(),\n-    ///            Ipv6Addr::new(0, 0, 0, 0, 0, 65535, 49152, 767));\n+    ///            Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc000, 0x2ff));\n     /// ```\n     #[rustc_const_stable(feature = \"const_ipv4\", since = \"1.50.0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1172,7 +1172,7 @@ impl Ipv6Addr {\n         ]\n     }\n \n-    /// Returns [`true`] for the special 'unspecified' address (::).\n+    /// Returns [`true`] for the special 'unspecified' address (`::`).\n     ///\n     /// This property is defined in [IETF RFC 4291].\n     ///\n@@ -1267,6 +1267,34 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n     }\n \n+    /// Returns [`true`] if this is a unicast address, as defined by [IETF RFC 4291].\n+    /// Any address that is not a [multicast address] (`ff00::/8`) is unicast.\n+    ///\n+    /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    /// [multicast address]: Ipv6Addr::is_multicast\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// // The unspecified and loopback addresses are unicast.\n+    /// assert_eq!(Ipv6Addr::UNSPECIFIED.is_unicast(), true);\n+    /// assert_eq!(Ipv6Addr::LOCALHOST.is_unicast(), true);\n+    ///\n+    /// // Any address that is not a multicast address (`ff00::/8`) is unicast.\n+    /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_unicast(), true);\n+    /// assert_eq!(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0).is_unicast(), false);\n+    /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n+    #[inline]\n+    pub const fn is_unicast(&self) -> bool {\n+        !self.is_multicast()\n+    }\n+\n     /// Returns `true` if the address is a unicast address with link-local scope,\n     /// as defined in [RFC 4291].\n     ///\n@@ -1318,7 +1346,7 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }\n \n-    /// Returns [`true`] if this is a deprecated unicast site-local address (fec0::/10). The\n+    /// Returns [`true`] if this is a deprecated unicast site-local address (`fec0::/10`). The\n     /// unicast site-local address format is defined in [RFC 4291 section 2.5.7] as:\n     ///\n     /// ```no_rust\n@@ -1347,7 +1375,7 @@ impl Ipv6Addr {\n     ///\n     /// # Warning\n     ///\n-    /// As per [RFC 3879], the whole `FEC0::/10` prefix is\n+    /// As per [RFC 3879], the whole `fec0::/10` prefix is\n     /// deprecated. New software must not support site-local\n     /// addresses.\n     ///\n@@ -1417,7 +1445,7 @@ impl Ipv6Addr {\n     #[unstable(feature = \"ip\", issue = \"27709\")]\n     #[inline]\n     pub const fn is_unicast_global(&self) -> bool {\n-        !self.is_multicast()\n+        self.is_unicast()\n             && !self.is_loopback()\n             && !self.is_unicast_link_local()\n             && !self.is_unique_local()\n@@ -1460,7 +1488,7 @@ impl Ipv6Addr {\n         }\n     }\n \n-    /// Returns [`true`] if this is a multicast address (ff00::/8).\n+    /// Returns [`true`] if this is a multicast address (`ff00::/8`).\n     ///\n     /// This property is defined by [IETF RFC 4291].\n     ///\n@@ -1517,7 +1545,7 @@ impl Ipv6Addr {\n     /// Converts this address to an [`IPv4` address]. Returns [`None`] if this address is\n     /// neither IPv4-compatible or IPv4-mapped.\n     ///\n-    /// ::a.b.c.d and ::ffff:a.b.c.d become a.b.c.d\n+    /// `::a.b.c.d` and `::ffff:a.b.c.d` become `a.b.c.d`\n     ///\n     /// [`IPv4` address]: Ipv4Addr\n     ///"}, {"sha": "8f598e2af6c25b4a7ee88ef6a8196d9b8ea50ca8", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -1 +1 @@\n-Subproject commit 9c68af3ce6ccca2395e1868addef26a0542e9ddd\n+Subproject commit 8f598e2af6c25b4a7ee88ef6a8196d9b8ea50ca8"}, {"sha": "c8da5bfd1c7c71d90ef1646f5e0a9f6609d5c78a", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -1 +1 @@\n-Subproject commit 50de7f0682adc5d95ce858fe6318d19b4b951553\n+Subproject commit c8da5bfd1c7c71d90ef1646f5e0a9f6609d5c78a"}, {"sha": "a3f63ea1046e32c45859b3340634a2f793d591e4", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -664,7 +664,10 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     }\n                 }\n                 GenericParamDefKind::Lifetime => {}\n-                GenericParamDefKind::Const { .. } => {}\n+                GenericParamDefKind::Const { ref mut default, .. } => {\n+                    // We never want something like `impl<const N: usize = 10>`\n+                    default.take();\n+                }\n             }\n         }\n "}, {"sha": "d1c18821ea644f9defcf73b72029c422141b0a53", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -445,11 +445,15 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n                     },\n                 )\n             }\n-            ty::GenericParamDefKind::Const { .. } => (\n+            ty::GenericParamDefKind::Const { has_default, .. } => (\n                 self.name,\n                 GenericParamDefKind::Const {\n                     did: self.def_id,\n                     ty: cx.tcx.type_of(self.def_id).clean(cx),\n+                    default: match has_default {\n+                        true => Some(cx.tcx.const_param_default(self.def_id).to_string()),\n+                        false => None,\n+                    },\n                 },\n             ),\n         };\n@@ -487,12 +491,15 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n                     synthetic,\n                 },\n             ),\n-            hir::GenericParamKind::Const { ref ty, default: _ } => (\n+            hir::GenericParamKind::Const { ref ty, default } => (\n                 self.name.ident().name,\n                 GenericParamDefKind::Const {\n                     did: cx.tcx.hir().local_def_id(self.hir_id).to_def_id(),\n                     ty: ty.clean(cx),\n-                    // FIXME(const_generics_defaults): add `default` field here for docs\n+                    default: default.map(|ct| {\n+                        let def_id = cx.tcx.hir().local_def_id(ct.hir_id);\n+                        ty::Const::from_anon_const(cx.tcx, def_id).to_string()\n+                    }),\n                 },\n             ),\n         };"}, {"sha": "6a7c3f8caa49fdd80a8a4382eb0bdb3ed0b45330", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -1220,6 +1220,7 @@ crate enum GenericParamDefKind {\n     Const {\n         did: DefId,\n         ty: Type,\n+        default: Option<String>,\n     },\n }\n "}, {"sha": "918a5cb5094305c4c9b68bb6b6425495c75c58b6", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -177,12 +177,22 @@ impl clean::GenericParamDef {\n \n                 Ok(())\n             }\n-            clean::GenericParamDefKind::Const { ref ty, .. } => {\n+            clean::GenericParamDefKind::Const { ref ty, ref default, .. } => {\n                 if f.alternate() {\n-                    write!(f, \"const {}: {:#}\", self.name, ty.print(cx))\n+                    write!(f, \"const {}: {:#}\", self.name, ty.print(cx))?;\n                 } else {\n-                    write!(f, \"const {}:&nbsp;{}\", self.name, ty.print(cx))\n+                    write!(f, \"const {}:&nbsp;{}\", self.name, ty.print(cx))?;\n                 }\n+\n+                if let Some(default) = default {\n+                    if f.alternate() {\n+                        write!(f, \" = {:#}\", default)?;\n+                    } else {\n+                        write!(f, \"&nbsp;=&nbsp;{}\", default)?;\n+                    }\n+                }\n+\n+                Ok(())\n             }\n         })\n     }"}, {"sha": "2e940a31c2aff0e540cb487e08c6d5c4a76115a7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 86, "deletions": 78, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -1286,7 +1286,6 @@ fn render_impl(\n     // in documentation pages for trait with automatic implementations like \"Send\" and \"Sync\".\n     aliases: &[String],\n ) {\n-    let tcx = cx.tcx();\n     let cache = cx.cache();\n     let traits = &cache.traits;\n     let trait_ = i.trait_did_full(cache).map(|did| &traits[&did]);\n@@ -1558,94 +1557,34 @@ fn render_impl(\n             );\n         }\n     }\n-    let toggled = !impl_items.is_empty() || !default_impl_items.is_empty();\n-    let open_details = |close_tags: &mut String, is_collapsed: bool| {\n+    if render_mode == RenderMode::Normal {\n+        let is_implementing_trait = i.inner_impl().trait_.is_some();\n+        let toggled = !impl_items.is_empty() || !default_impl_items.is_empty();\n         if toggled {\n             close_tags.insert_str(0, \"</details>\");\n-            if is_collapsed {\n-                \"<details class=\\\"rustdoc-toggle implementors-toggle\\\"><summary>\"\n+            if is_implementing_trait {\n+                write!(w, \"<details class=\\\"rustdoc-toggle implementors-toggle\\\">\");\n             } else {\n-                \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open><summary>\"\n+                write!(w, \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\");\n             }\n-        } else {\n-            \"\"\n         }\n-    };\n-    if render_mode == RenderMode::Normal {\n-        let is_implementing_trait;\n-        let id = cx.derive_id(match i.inner_impl().trait_ {\n-            Some(ref t) => {\n-                is_implementing_trait = true;\n-                if is_on_foreign_type {\n-                    get_id_for_impl_on_foreign_type(&i.inner_impl().for_, t, cx)\n-                } else {\n-                    format!(\"impl-{}\", small_url_encode(format!(\"{:#}\", t.print(cx))))\n-                }\n-            }\n-            None => {\n-                is_implementing_trait = false;\n-                \"impl\".to_string()\n-            }\n-        });\n-        let aliases = if aliases.is_empty() {\n-            String::new()\n-        } else {\n-            format!(\" data-aliases=\\\"{}\\\"\", aliases.join(\",\"))\n-        };\n-        if let Some(use_absolute) = use_absolute {\n-            write!(\n-                w,\n-                \"{}<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\\\n-                     <code class=\\\"in-band\\\">\",\n-                open_details(&mut close_tags, is_implementing_trait),\n-                id,\n-                aliases\n-            );\n-            write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n-            if show_def_docs {\n-                for it in &i.inner_impl().items {\n-                    if let clean::TypedefItem(ref tydef, _) = *it.kind {\n-                        w.write_str(\"<span class=\\\"where fmt-newline\\\">  \");\n-                        assoc_type(\n-                            w,\n-                            it,\n-                            &[],\n-                            Some(&tydef.type_),\n-                            AssocItemLink::Anchor(None),\n-                            \"\",\n-                            cx,\n-                        );\n-                        w.write_str(\";</span>\");\n-                    }\n-                }\n-            }\n-            w.write_str(\"</code>\");\n-        } else {\n-            write!(\n-                w,\n-                \"{}<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\\\n-                     <code class=\\\"in-band\\\">{}</code>\",\n-                open_details(&mut close_tags, is_implementing_trait),\n-                id,\n-                aliases,\n-                i.inner_impl().print(false, cx)\n-            );\n+        if toggled {\n+            write!(w, \"<summary>\")\n         }\n-        write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n-        render_stability_since_raw(\n+        render_impl_summary(\n             w,\n-            i.impl_item.stable_since(tcx).as_deref(),\n-            i.impl_item.const_stable_since(tcx).as_deref(),\n+            cx,\n+            i,\n             outer_version,\n             outer_const_version,\n+            show_def_docs,\n+            use_absolute,\n+            is_on_foreign_type,\n+            aliases,\n         );\n-        write_srclink(cx, &i.impl_item, w);\n-        if !toggled {\n-            w.write_str(\"</div>\");\n-        } else {\n-            w.write_str(\"</div></summary>\");\n+        if toggled {\n+            write!(w, \"</summary>\")\n         }\n-\n         if trait_.is_some() {\n             if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n                 write!(w, \"<div class=\\\"item-info\\\">{}</div>\", portability);\n@@ -1678,6 +1617,75 @@ fn render_impl(\n     w.write_str(&close_tags);\n }\n \n+fn render_impl_summary(\n+    w: &mut Buffer,\n+    cx: &Context<'_>,\n+    i: &Impl,\n+    outer_version: Option<&str>,\n+    outer_const_version: Option<&str>,\n+    show_def_docs: bool,\n+    use_absolute: Option<bool>,\n+    is_on_foreign_type: bool,\n+    // This argument is used to reference same type with different paths to avoid duplication\n+    // in documentation pages for trait with automatic implementations like \"Send\" and \"Sync\".\n+    aliases: &[String],\n+) {\n+    let tcx = cx.tcx();\n+    let id = cx.derive_id(match i.inner_impl().trait_ {\n+        Some(ref t) => {\n+            if is_on_foreign_type {\n+                get_id_for_impl_on_foreign_type(&i.inner_impl().for_, t, cx)\n+            } else {\n+                format!(\"impl-{}\", small_url_encode(format!(\"{:#}\", t.print(cx))))\n+            }\n+        }\n+        None => \"impl\".to_string(),\n+    });\n+    let aliases = if aliases.is_empty() {\n+        String::new()\n+    } else {\n+        format!(\" data-aliases=\\\"{}\\\"\", aliases.join(\",\"))\n+    };\n+    if let Some(use_absolute) = use_absolute {\n+        write!(\n+            w,\n+            \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\\\n+                     <code class=\\\"in-band\\\">\",\n+            id, aliases\n+        );\n+        write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n+        if show_def_docs {\n+            for it in &i.inner_impl().items {\n+                if let clean::TypedefItem(ref tydef, _) = *it.kind {\n+                    w.write_str(\"<span class=\\\"where fmt-newline\\\">  \");\n+                    assoc_type(w, it, &[], Some(&tydef.type_), AssocItemLink::Anchor(None), \"\", cx);\n+                    w.write_str(\";</span>\");\n+                }\n+            }\n+        }\n+        w.write_str(\"</code>\");\n+    } else {\n+        write!(\n+            w,\n+            \"<div id=\\\"{}\\\" class=\\\"impl has-srclink\\\"{}>\\\n+                     <code class=\\\"in-band\\\">{}</code>\",\n+            id,\n+            aliases,\n+            i.inner_impl().print(false, cx)\n+        );\n+    }\n+    write!(w, \"<a href=\\\"#{}\\\" class=\\\"anchor\\\"></a>\", id);\n+    render_stability_since_raw(\n+        w,\n+        i.impl_item.stable_since(tcx).as_deref(),\n+        i.impl_item.const_stable_since(tcx).as_deref(),\n+        outer_version,\n+        outer_const_version,\n+    );\n+    write_srclink(cx, &i.impl_item, w);\n+    w.write_str(\"</div>\");\n+}\n+\n fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer) {\n     let parentlen = cx.current.len() - if it.is_mod() { 1 } else { 0 };\n "}, {"sha": "7086dd8c4d25832c2ceee26ff955f727bf6c9fb9", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -317,7 +317,9 @@ impl FromWithTcx<clean::GenericParamDefKind> for GenericParamDefKind {\n                 bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n                 default: default.map(|x| x.into_tcx(tcx)),\n             },\n-            Const { did: _, ty } => GenericParamDefKind::Const(ty.into_tcx(tcx)),\n+            Const { did: _, ty, default } => {\n+                GenericParamDefKind::Const { ty: ty.into_tcx(tcx), default }\n+            }\n         }\n     }\n }"}, {"sha": "0d84bf250c9e3016705e26f6526e548b9ef9118e", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -234,7 +234,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                     )\n                 })\n                 .collect(),\n-            format_version: 5,\n+            format_version: 6,\n         };\n         let mut p = self.out_path.clone();\n         p.push(output.index.get(&output.root).unwrap().name.clone().unwrap());"}, {"sha": "6d9a5cb515a480420aa521320303988678c8f408", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -324,7 +324,7 @@ pub struct GenericParamDef {\n pub enum GenericParamDefKind {\n     Lifetime,\n     Type { bounds: Vec<GenericBound>, default: Option<Type> },\n-    Const(Type),\n+    Const { ty: Type, default: Option<String> },\n }\n \n #[derive(Clone, Debug, Serialize, Deserialize, PartialEq)]"}, {"sha": "80b15ace0ee950d1b1df93246a5b7ccbcc6cc0c9", "filename": "src/test/rustdoc-ui/wasm-safe.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Ftest%2Frustdoc-ui%2Fwasm-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Ftest%2Frustdoc-ui%2Fwasm-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fwasm-safe.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+\n+#![feature(wasm_target_feature)]\n+\n+#[cfg(any(target_arch = \"wasm32\", doc))]\n+#[target_feature(enable = \"simd128\")]\n+pub fn foo() {}"}, {"sha": "efe35bf7aa4422e1b274ba49e09d8a5ae930bc08", "filename": "src/test/rustdoc/const-generics/const-generic-defaults.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -0,0 +1,6 @@\n+#![crate_name = \"foo\"]\n+#![feature(const_generics_defaults)]\n+\n+// @has foo/struct.Foo.html '//pre[@class=\"rust struct\"]' \\\n+//      'pub struct Foo<const M: usize = 10_usize, const N: usize = M, T = i32>(_);'\n+pub struct Foo<const M: usize = 10, const N: usize = M, T = i32>(T);"}, {"sha": "68b278fd3c88685c217711f147c56b5ca589433a", "filename": "src/test/ui/macros/local-ambiguity-multiple-parsing-options.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8381389ee10e3c0505ccb5bac05382de1b9f99d/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.stderr?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -1,10 +1,10 @@\n-error: local ambiguity: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n+error: local ambiguity when calling macro `ambiguity`: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n   --> $DIR/local-ambiguity-multiple-parsing-options.rs:7:12\n    |\n LL | ambiguity!(error);\n    |            ^^^^^\n \n-error: local ambiguity: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n+error: local ambiguity when calling macro `ambiguity`: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n   --> $DIR/local-ambiguity-multiple-parsing-options.rs:8:12\n    |\n LL | ambiguity!(error);"}, {"sha": "aa8b09297bb3156b849e73db48af4cd050492fe6", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=c8381389ee10e3c0505ccb5bac05382de1b9f99d", "patch": "@@ -1 +1 @@\n-Subproject commit 0cecbd67323ca14a7eb6505900d0d7307b00355b\n+Subproject commit aa8b09297bb3156b849e73db48af4cd050492fe6"}]}