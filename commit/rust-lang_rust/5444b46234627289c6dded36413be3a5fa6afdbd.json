{"sha": "5444b46234627289c6dded36413be3a5fa6afdbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NDRiNDYyMzQ2MjcyODljNmRkZWQzNjQxM2JlM2E1ZmE2YWZkYmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-29T08:45:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-29T08:45:09Z"}, "message": "Merge commit '0969bc6dde001e01e7e1f58c8ccd7750f8a49ae1' into sync_cg_clif-2021-03-29", "tree": {"sha": "cd40d2a6d1c21e0e000e04c1e21e1dcec6f1f931", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd40d2a6d1c21e0e000e04c1e21e1dcec6f1f931"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5444b46234627289c6dded36413be3a5fa6afdbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5444b46234627289c6dded36413be3a5fa6afdbd", "html_url": "https://github.com/rust-lang/rust/commit/5444b46234627289c6dded36413be3a5fa6afdbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5444b46234627289c6dded36413be3a5fa6afdbd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4103089f40a163f6d143f06359cba7043da29b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4103089f40a163f6d143f06359cba7043da29b", "html_url": "https://github.com/rust-lang/rust/commit/cc4103089f40a163f6d143f06359cba7043da29b"}, {"sha": "0969bc6dde001e01e7e1f58c8ccd7750f8a49ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0969bc6dde001e01e7e1f58c8ccd7750f8a49ae1", "html_url": "https://github.com/rust-lang/rust/commit/0969bc6dde001e01e7e1f58c8ccd7750f8a49ae1"}], "stats": {"total": 1371, "additions": 878, "deletions": 493}, "files": [{"sha": "8c94a0aa5e6ebe7beba14d52e5ed817053529f8e", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/bootstrap_rustc.yml", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cc4103089f40a163f6d143f06359cba7043da29b/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fbootstrap_rustc.yml", "raw_url": "https://github.com/rust-lang/rust/raw/cc4103089f40a163f6d143f06359cba7043da29b/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fbootstrap_rustc.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fbootstrap_rustc.yml?ref=cc4103089f40a163f6d143f06359cba7043da29b", "patch": "@@ -1,44 +0,0 @@\n-name: Bootstrap rustc using cg_clif\n-\n-on:\n-  - push\n-\n-jobs:\n-  bootstrap_rustc:\n-    runs-on: ubuntu-latest\n-\n-    steps:\n-    - uses: actions/checkout@v2\n-\n-    - name: Cache cargo installed crates\n-      uses: actions/cache@v2\n-      with:\n-        path: ~/.cargo/bin\n-        key: ${{ runner.os }}-cargo-installed-crates\n-\n-    - name: Cache cargo registry and index\n-      uses: actions/cache@v2\n-      with:\n-        path: |\n-            ~/.cargo/registry\n-            ~/.cargo/git\n-        key: ${{ runner.os }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}\n-\n-    - name: Cache cargo target dir\n-      uses: actions/cache@v2\n-      with:\n-        path: target\n-        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n-\n-    - name: Prepare dependencies\n-      run: |\n-        git config --global user.email \"user@example.com\"\n-        git config --global user.name \"User\"\n-        ./prepare.sh\n-\n-    - name: Test\n-      run: |\n-        # Enable backtraces for easier debugging\n-        export RUST_BACKTRACE=1\n-\n-        ./scripts/test_bootstrap.sh"}, {"sha": "2ac516381cf7af9fe8c097fea65951fbe3c8040d", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/main.yml", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -7,11 +7,18 @@ on:\n jobs:\n   build:\n     runs-on: ${{ matrix.os }}\n+    timeout-minutes: 60\n \n     strategy:\n       fail-fast: false\n       matrix:\n-        os: [ubuntu-latest, macos-latest]\n+        include:\n+          - os: ubuntu-latest\n+          - os: macos-latest\n+          # cross-compile from Linux to Windows using mingw\n+          - os: ubuntu-latest\n+            env:\n+              TARGET_TRIPLE: x86_64-pc-windows-gnu\n \n     steps:\n     - uses: actions/checkout@v2\n@@ -36,13 +43,21 @@ jobs:\n         path: target\n         key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n \n+    - name: Install MinGW toolchain and wine\n+      if: matrix.os == 'ubuntu-latest' && matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n+      run: |\n+        sudo apt-get install -y gcc-mingw-w64-x86-64 wine-stable\n+        rustup target add x86_64-pc-windows-gnu\n+\n     - name: Prepare dependencies\n       run: |\n         git config --global user.email \"user@example.com\"\n         git config --global user.name \"User\"\n         ./prepare.sh\n \n     - name: Test\n+      env:\n+        TARGET_TRIPLE: ${{ matrix.env.TARGET_TRIPLE }}\n       run: |\n         # Enable backtraces for easier debugging\n         export RUST_BACKTRACE=1\n@@ -51,12 +66,16 @@ jobs:\n         export COMPILE_RUNS=2\n         export RUN_RUNS=2\n \n+        # Enable extra checks\n+        export CG_CLIF_ENABLE_VERIFIER=1\n+\n         ./test.sh\n \n     - name: Package prebuilt cg_clif\n       run: tar cvfJ cg_clif.tar.xz build\n \n     - name: Upload prebuilt cg_clif\n+      if: matrix.env.TARGET_TRIPLE != 'x86_64-pc-windows-gnu'\n       uses: actions/upload-artifact@v2\n       with:\n         name: cg_clif-${{ runner.os }}"}, {"sha": "e01a92598bab745b4df24ef41bb5e50ccfef4701", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/rustc.yml", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -0,0 +1,82 @@\n+name: Various rustc tests\n+\n+on:\n+  - push\n+\n+jobs:\n+  bootstrap_rustc:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+\n+    - name: Cache cargo installed crates\n+      uses: actions/cache@v2\n+      with:\n+        path: ~/.cargo/bin\n+        key: ${{ runner.os }}-cargo-installed-crates\n+\n+    - name: Cache cargo registry and index\n+      uses: actions/cache@v2\n+      with:\n+        path: |\n+            ~/.cargo/registry\n+            ~/.cargo/git\n+        key: ${{ runner.os }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}\n+\n+    - name: Cache cargo target dir\n+      uses: actions/cache@v2\n+      with:\n+        path: target\n+        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n+\n+    - name: Prepare dependencies\n+      run: |\n+        git config --global user.email \"user@example.com\"\n+        git config --global user.name \"User\"\n+        ./prepare.sh\n+\n+    - name: Test\n+      run: |\n+        # Enable backtraces for easier debugging\n+        export RUST_BACKTRACE=1\n+\n+        ./scripts/test_bootstrap.sh\n+  rustc_test_suite:\n+    runs-on: ubuntu-latest\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+\n+    - name: Cache cargo installed crates\n+      uses: actions/cache@v2\n+      with:\n+        path: ~/.cargo/bin\n+        key: ${{ runner.os }}-cargo-installed-crates\n+\n+    - name: Cache cargo registry and index\n+      uses: actions/cache@v2\n+      with:\n+        path: |\n+            ~/.cargo/registry\n+            ~/.cargo/git\n+        key: ${{ runner.os }}-cargo-registry-and-index-${{ hashFiles('**/Cargo.lock') }}\n+\n+    - name: Cache cargo target dir\n+      uses: actions/cache@v2\n+      with:\n+        path: target\n+        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n+\n+    - name: Prepare dependencies\n+      run: |\n+        git config --global user.email \"user@example.com\"\n+        git config --global user.name \"User\"\n+        ./prepare.sh\n+\n+    - name: Test\n+      run: |\n+        # Enable backtraces for easier debugging\n+        export RUST_BACKTRACE=1\n+\n+        ./scripts/test_rustc_tests.sh"}, {"sha": "0cd576e160f86724a703bd954acb0efe3abca756", "filename": "compiler/rustc_codegen_cranelift/.vscode/settings.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2F.vscode%2Fsettings.json", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2F.vscode%2Fsettings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.vscode%2Fsettings.json?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -2,7 +2,7 @@\n     // source for rustc_* is not included in the rust-src component; disable the errors about this\n     \"rust-analyzer.diagnostics.disabled\": [\"unresolved-extern-crate\", \"macro-error\"],\n     \"rust-analyzer.assist.importMergeBehavior\": \"last\",\n-    \"rust-analyzer.cargo.loadOutDirsFromCheck\": true,\n+    \"rust-analyzer.cargo.runBuildScripts\": true,\n     \"rust-analyzer.linkedProjects\": [\n         \"./Cargo.toml\",\n         //\"./build_sysroot/sysroot_src/src/libstd/Cargo.toml\","}, {"sha": "3cb67032aaa24b9ae68ca5254439904710a2819c", "filename": "compiler/rustc_codegen_cranelift/Cargo.lock", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.lock?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -39,16 +39,16 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.72.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.72.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n dependencies = [\n  \"byteorder\",\n  \"cranelift-bforest\",\n@@ -65,27 +65,27 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.72.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.72.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.72.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.72.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -95,8 +95,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-jit\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.72.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -113,8 +113,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.72.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -125,17 +125,17 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.72.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"target-lexicon\",\n ]\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.70.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#cdb60ec5a9df087262ae8960a31067e88cd80058\"\n+version = \"0.72.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#8e43e96410a14143d368273cf1e708f8094bb8e0\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -240,6 +240,15 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"memmap2\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"04e3e85b970d650e2ae6d70592474087051c11c54da7f7b4949725c5735fbcc6\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n [[package]]\n name = \"object\"\n version = \"0.23.0\"\n@@ -310,6 +319,7 @@ dependencies = [\n  \"gimli\",\n  \"indexmap\",\n  \"libloading\",\n+ \"memmap2\",\n  \"object\",\n  \"smallvec\",\n  \"target-lexicon\","}, {"sha": "59542c414fa85de5eb7508af3a66b6c8f9e6eae1", "filename": "compiler/rustc_codegen_cranelift/Cargo.toml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.toml?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -16,12 +16,13 @@ cranelift-jit = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch\n cranelift-object = { git = \"https://github.com/bytecodealliance/wasmtime/\", branch = \"main\" }\n target-lexicon = \"0.11.0\"\n gimli = { version = \"0.23.0\", default-features = false, features = [\"write\"]}\n-object = { version = \"0.23.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n+object = { version = \"0.23.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n \n ar = { git = \"https://github.com/bjorn3/rust-ar.git\", branch = \"do_not_remove_cg_clif_ranlib\" }\n indexmap = \"1.0.2\"\n libloading = { version = \"0.6.0\", optional = true }\n smallvec = \"1.6.1\"\n+memmap2 = \"0.2.1\"\n \n # Uncomment to use local checkout of cranelift\n #[patch.\"https://github.com/bytecodealliance/wasmtime/\"]\n@@ -75,3 +76,6 @@ debug = false\n [profile.release.package.syn]\n opt-level = 0\n debug = false\n+\n+[package.metadata.rust-analyzer]\n+rustc_private = true"}, {"sha": "ffe1d9a1e65806b1f3b28381296d265881c1ce75", "filename": "compiler/rustc_codegen_cranelift/Readme.md", "status": "modified", "additions": 21, "deletions": 55, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2FReadme.md", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2FReadme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FReadme.md?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -34,70 +34,19 @@ rustc_codegen_cranelift can be used as a near-drop-in replacement for `cargo bui\n \n Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`prepare.sh` and `build.sh` or `test.sh`).\n \n-### Cargo\n-\n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo.sh run\n-```\n-\n-This should build and run your project with rustc_codegen_cranelift instead of the usual LLVM backend.\n-\n-### Rustc\n-\n-> You should prefer using the Cargo method.\n-\n-```bash\n-$ $cg_clif_dir/build/bin/cg_clif my_crate.rs\n-```\n-\n-### Jit mode\n-\n-In jit mode cg_clif will immediately execute your code without creating an executable file.\n-\n-> This requires all dependencies to be available as dynamic library.\n-> The jit mode will probably need cargo integration to make this possible.\n-\n-```bash\n-$ $cg_clif_dir/build/cargo.sh jit\n-```\n-\n-or\n-\n-```bash\n-$ $cg_clif_dir/build/bin/cg_clif -Cllvm-args=mode=jit -Cprefer-dynamic my_crate.rs\n-```\n-\n-There is also an experimental lazy jit mode. In this mode functions are only compiled once they are\n-first called. It currently does not work with multi-threaded programs. When a not yet compiled\n-function is called from another thread than the main thread, you will get an ICE.\n-\n-```bash\n-$ $cg_clif_dir/build/cargo.sh lazy-jit\n+$ $cg_clif_dir/build/cargo.sh build\n ```\n \n-### Shell\n-\n-These are a few functions that allow you to easily run rust code from the shell using cg_clif as jit.\n-\n-```bash\n-function jit_naked() {\n-    echo \"$@\" | $cg_clif_dir/build/bin/cg_clif - -Cllvm-args=mode=jit -Cprefer-dynamic\n-}\n-\n-function jit() {\n-    jit_naked \"fn main() { $@ }\"\n-}\n+This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend.\n \n-function jit_calc() {\n-    jit 'println!(\"0x{:x}\", ' $@ ');';\n-}\n-```\n+For additional ways to use rustc_codegen_cranelift like the JIT mode see [usage.md](docs/usage.md).\n \n ## Env vars\n \n-[see env_vars.md](docs/env_vars.md)\n+See [env_vars.md](docs/env_vars.md) for all env vars used by rustc_codegen_cranelift.\n \n ## Not yet supported\n \n@@ -106,3 +55,20 @@ function jit_calc() {\n       `llvm_asm!` will remain unimplemented forever. `asm!` doesn't yet support reg classes. You\n       have to specify specific registers instead.\n * SIMD ([tracked here](https://github.com/bjorn3/rustc_codegen_cranelift/issues/171), some basic things work)\n+\n+## License\n+\n+Licensed under either of\n+\n+  * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or\n+    http://www.apache.org/licenses/LICENSE-2.0)\n+  * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n+    http://opensource.org/licenses/MIT)\n+\n+at your option.\n+\n+### Contribution\n+\n+Unless you explicitly state otherwise, any contribution intentionally submitted\n+for inclusion in the work by you shall be dual licensed as above, without any\n+additional terms or conditions."}, {"sha": "76bc1884334afe4ea539ca65be6b5f8c32f5203d", "filename": "compiler/rustc_codegen_cranelift/build.sh", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fbuild.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fbuild.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild.sh?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -55,6 +55,7 @@ ln target/$CHANNEL/*rustc_codegen_cranelift* \"$target_dir\"/lib\n ln rust-toolchain scripts/config.sh scripts/cargo.sh \"$target_dir\"\n \n mkdir -p \"$target_dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n+mkdir -p \"$target_dir/lib/rustlib/$HOST_TRIPLE/lib/\"\n if [[ \"$TARGET_TRIPLE\" == \"x86_64-pc-windows-gnu\" ]]; then\n     cp $(rustc --print sysroot)/lib/rustlib/$TARGET_TRIPLE/lib/*.o \"$target_dir/lib/rustlib/$TARGET_TRIPLE/lib/\"\n fi\n@@ -64,12 +65,18 @@ case \"$build_sysroot\" in\n         ;;\n     \"llvm\")\n         cp -r $(rustc --print sysroot)/lib/rustlib/$TARGET_TRIPLE/lib \"$target_dir/lib/rustlib/$TARGET_TRIPLE/\"\n+        if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n+            cp -r $(rustc --print sysroot)/lib/rustlib/$HOST_TRIPLE/lib \"$target_dir/lib/rustlib/$HOST_TRIPLE/\"\n+        fi\n         ;;\n     \"clif\")\n         echo \"[BUILD] sysroot\"\n         dir=$(pwd)\n         cd \"$target_dir\"\n         time \"$dir/build_sysroot/build_sysroot.sh\"\n+        if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n+            time TARGET_TRIPLE=\"$HOST_TRIPLE\" \"$dir/build_sysroot/build_sysroot.sh\"\n+        fi\n         cp lib/rustlib/*/lib/libstd-* lib/\n         ;;\n     *)"}, {"sha": "09c5d7590ab864cc14604bde034da57cf041f3d7", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/Cargo.lock", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -16,9 +16,9 @@ dependencies = [\n \n [[package]]\n name = \"adler\"\n-version = \"0.2.3\"\n+version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ee2a4ec343196209d6594e19543ae87a39f96d5534d7174822a3ad825dd6ed7e\"\n+checksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-core\",\n@@ -110,9 +110,9 @@ dependencies = [\n \n [[package]]\n name = \"hashbrown\"\n-version = \"0.9.1\"\n+version = \"0.11.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d7afe4a420e3fe79967a00898cc1f4db7c8a49a9333a29f8a4bd76a253d5cd04\"\n+checksum = \"ab5ef0d4909ef3724cc8cce6ccc8572c5c817592e9285f5464f8e86f8bd3726e\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\",\n@@ -132,18 +132,18 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.86\"\n+version = \"0.2.91\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b7282d924be3275cec7f6756ff4121987bc6481325397dde6ba3e7802b1a8b1c\"\n+checksum = \"8916b1f6ca17130ec6568feccee27c156ad12037880833a3b842a823236502e7\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n [[package]]\n name = \"miniz_oxide\"\n-version = \"0.4.3\"\n+version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0f2d26ec3309788e423cfbf68ad1800f061638098d76a83681af979dc4eda19d\"\n+checksum = \"a92518e98c078586bc6c934028adcca4c92a53d6a958196de835170a01d84e4b\"\n dependencies = [\n  \"adler\",\n  \"autocfg\","}, {"sha": "0354304e55bf77477039d6737749d845128ac80c", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/build_sysroot.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fbuild_sysroot.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fbuild_sysroot.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2Fbuild_sysroot.sh?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -28,7 +28,7 @@ export __CARGO_DEFAULT_LIB_METADATA=\"cg_clif\"\n if [[ \"$1\" != \"--debug\" ]]; then\n     sysroot_channel='release'\n     # FIXME Enable incremental again once rust-lang/rust#74946 is fixed\n-    CARGO_INCREMENTAL=0 RUSTFLAGS=\"$RUSTFLAGS -Zmir-opt-level=2\" cargo build --target \"$TARGET_TRIPLE\" --release\n+    CARGO_INCREMENTAL=0 RUSTFLAGS=\"$RUSTFLAGS -Zmir-opt-level=3\" cargo build --target \"$TARGET_TRIPLE\" --release\n else\n     sysroot_channel='debug'\n     cargo build --target \"$TARGET_TRIPLE\""}, {"sha": "f7fde1b4f3a873bbfc694a4bdaeb8cd5fe03fdb3", "filename": "compiler/rustc_codegen_cranelift/docs/env_vars.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fenv_vars.md", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fenv_vars.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fenv_vars.md?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -8,5 +8,8 @@\n     to make it possible to use incremental mode for all analyses performed by rustc without caching\n     object files when their content should have been changed by a change to cg_clif.</dd>\n     <dt>CG_CLIF_DISPLAY_CG_TIME</dt>\n-    <dd>If \"1\", display the time it took to perform codegen for a crate</dd>\n+    <dd>If \"1\", display the time it took to perform codegen for a crate.</dd>\n+    <dt>CG_CLIF_ENABLE_VERIFIER</dt>\n+    <dd>Enable the Cranelift ir verifier for all compilation passes. If not set it will only run once\n+    before passing the clif ir to Cranelift for compilation.</dt>\n </dl>"}, {"sha": "3eee3b554e3b62ccd06db4acbb819c5c760983e4", "filename": "compiler/rustc_codegen_cranelift/docs/usage.md", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -0,0 +1,66 @@\n+# Usage\n+\n+rustc_codegen_cranelift can be used as a near-drop-in replacement for `cargo build` or `cargo run` for existing projects.\n+\n+Assuming `$cg_clif_dir` is the directory you cloned this repo into and you followed the instructions (`prepare.sh` and `build.sh` or `test.sh`).\n+\n+## Cargo\n+\n+In the directory with your project (where you can do the usual `cargo build`), run:\n+\n+```bash\n+$ $cg_clif_dir/build/cargo.sh build\n+```\n+\n+This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend.\n+\n+## Rustc\n+\n+> You should prefer using the Cargo method.\n+\n+```bash\n+$ $cg_clif_dir/build/bin/cg_clif my_crate.rs\n+```\n+\n+## Jit mode\n+\n+In jit mode cg_clif will immediately execute your code without creating an executable file.\n+\n+> This requires all dependencies to be available as dynamic library.\n+> The jit mode will probably need cargo integration to make this possible.\n+\n+```bash\n+$ $cg_clif_dir/build/cargo.sh jit\n+```\n+\n+or\n+\n+```bash\n+$ $cg_clif_dir/build/bin/cg_clif -Cllvm-args=mode=jit -Cprefer-dynamic my_crate.rs\n+```\n+\n+There is also an experimental lazy jit mode. In this mode functions are only compiled once they are\n+first called. It currently does not work with multi-threaded programs. When a not yet compiled\n+function is called from another thread than the main thread, you will get an ICE.\n+\n+```bash\n+$ $cg_clif_dir/build/cargo.sh lazy-jit\n+```\n+\n+## Shell\n+\n+These are a few functions that allow you to easily run rust code from the shell using cg_clif as jit.\n+\n+```bash\n+function jit_naked() {\n+    echo \"$@\" | $cg_clif_dir/build/bin/cg_clif - -Cllvm-args=mode=jit -Cprefer-dynamic\n+}\n+\n+function jit() {\n+    jit_naked \"fn main() { $@ }\"\n+}\n+\n+function jit_calc() {\n+    jit 'println!(\"0x{:x}\", ' $@ ');';\n+}\n+```"}, {"sha": "c4834c804087199822e4552a19874744235992ef", "filename": "compiler/rustc_codegen_cranelift/example/mini_core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -621,6 +621,7 @@ struct PanicLocation {\n }\n \n #[no_mangle]\n+#[cfg(not(windows))]\n pub fn get_tls() -> u8 {\n     #[thread_local]\n     static A: u8 = 42;"}, {"sha": "ea37ca98b59a79c160036bea3dffec96ea517117", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -1,7 +1,4 @@\n-#![feature(\n-    no_core, start, lang_items, box_syntax, never_type, linkage,\n-    extern_types, thread_local\n-)]\n+#![feature(no_core, lang_items, box_syntax, never_type, linkage, extern_types, thread_local)]\n #![no_core]\n #![allow(dead_code, non_camel_case_types)]\n \n@@ -239,7 +236,7 @@ fn main() {\n \n     assert_eq!(((|()| 42u8) as fn(()) -> u8)(()), 42);\n \n-    #[cfg(not(jit))]\n+    #[cfg(not(any(jit, windows)))]\n     {\n         extern {\n             #[linkage = \"extern_weak\"]\n@@ -292,7 +289,7 @@ fn main() {\n \n     from_decimal_string();\n \n-    #[cfg(not(jit))]\n+    #[cfg(not(any(jit, windows)))]\n     test_tls();\n \n     #[cfg(all(not(jit), target_os = \"linux\"))]"}, {"sha": "64c097261c908bf6909aec2789646e998552f4ee", "filename": "compiler/rustc_codegen_cranelift/prepare.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fprepare.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fprepare.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fprepare.sh?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -1,7 +1,6 @@\n #!/usr/bin/env bash\n set -e\n \n-rustup component add rust-src rustc-dev llvm-tools-preview\n ./build_sysroot/prepare_sysroot_src.sh\n cargo install hyperfine || echo \"Skipping hyperfine install\"\n "}, {"sha": "2917fc7ee396dfed8a04634a10b48dc4ccb4a926", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -1 +1,3 @@\n-nightly-2021-03-05\n+[toolchain]\n+channel = \"nightly-2021-03-29\"\n+components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "1daa5a78f7bd25e6396d21b3e92d7fe336171f83", "filename": "compiler/rustc_codegen_cranelift/scripts/cargo.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo.sh?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -4,7 +4,7 @@ dir=$(dirname \"$0\")\n source \"$dir/config.sh\"\n \n # read nightly compiler from rust-toolchain file\n-TOOLCHAIN=$(cat \"$dir/rust-toolchain\")\n+TOOLCHAIN=$(cat \"$dir/rust-toolchain\" | grep channel | sed \"s/channel = \\\"\\(.*\\)\\\"/\\1/\")\n \n cmd=$1\n shift || true"}, {"sha": "99b302ee1d94b3cf044132fccd3401031b9c2c42", "filename": "compiler/rustc_codegen_cranelift/scripts/config.sh", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fconfig.sh?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -2,15 +2,7 @@\n \n set -e\n \n-unamestr=$(uname)\n-if [[ \"$unamestr\" == 'Linux' || \"$unamestr\" == 'FreeBSD' ]]; then\n-   dylib_ext='so'\n-elif [[ \"$unamestr\" == 'Darwin' ]]; then\n-   dylib_ext='dylib'\n-else\n-   echo \"Unsupported os\"\n-   exit 1\n-fi\n+dylib=$(echo \"\" | rustc --print file-names --crate-type dylib --crate-name rustc_codegen_cranelift -)\n \n if echo \"$RUSTC_WRAPPER\" | grep sccache; then\n echo\n@@ -24,10 +16,10 @@ dir=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\"; pwd)\n export RUSTC=$dir\"/bin/cg_clif\"\n \n export RUSTDOCFLAGS=$linker' -Cpanic=abort -Zpanic-abort-tests '\\\n-'-Zcodegen-backend='$dir'/lib/librustc_codegen_cranelift.'$dylib_ext' --sysroot '$dir\n+'-Zcodegen-backend='$dir'/lib/'$dylib' --sysroot '$dir\n \n # FIXME fix `#[linkage = \"extern_weak\"]` without this\n-if [[ \"$unamestr\" == 'Darwin' ]]; then\n+if [[ \"$(uname)\" == 'Darwin' ]]; then\n    export RUSTFLAGS=\"$RUSTFLAGS -Clink-arg=-undefined -Clink-arg=dynamic_lookup\"\n fi\n "}, {"sha": "fa7557653d879a161e77afdaddb0dc1822fc374f", "filename": "compiler/rustc_codegen_cranelift/scripts/rustup.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustup.sh?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -8,7 +8,7 @@ case $1 in\n \n         echo \"=> Installing new nightly\"\n         rustup toolchain install --profile minimal \"nightly-${TOOLCHAIN}\" # Sanity check to see if the nightly exists\n-        echo \"nightly-${TOOLCHAIN}\" > rust-toolchain\n+        sed -i \"s/\\\"nightly-.*\\\"/\\\"nightly-${TOOLCHAIN}\\\"/\" rust-toolchain\n         rustup component add rustfmt || true\n \n         echo \"=> Uninstalling all old nighlies\""}, {"sha": "e8bedf625f79684574d2f94c7bd1f350a623e479", "filename": "compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -0,0 +1,68 @@\n+#!/bin/bash\n+set -e\n+\n+./build.sh\n+source build/config.sh\n+\n+echo \"[SETUP] Rust fork\"\n+git clone https://github.com/rust-lang/rust.git || true\n+pushd rust\n+git fetch\n+git checkout -- .\n+git checkout \"$(rustc -V | cut -d' ' -f3 | tr -d '(')\"\n+\n+git apply - <<EOF\n+diff --git a/Cargo.toml b/Cargo.toml\n+index 5bd1147cad5..10d68a2ff14 100644\n+--- a/Cargo.toml\n++++ b/Cargo.toml\n+@@ -111,5 +111,7 @@ rustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }\n+ rustc-std-workspace-alloc = { path = 'library/rustc-std-workspace-alloc' }\n+ rustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }\n+\n++compiler_builtins = { path = \"../build_sysroot/compiler-builtins\" }\n++\n+ [patch.\"https://github.com/rust-lang/rust-clippy\"]\n+ clippy_lints = { path = \"src/tools/clippy/clippy_lints\" }\n+diff --git a/compiler/rustc_data_structures/Cargo.toml b/compiler/rustc_data_structures/Cargo.toml\n+index 23e689fcae7..5f077b765b6 100644\n+--- a/compiler/rustc_data_structures/Cargo.toml\n++++ b/compiler/rustc_data_structures/Cargo.toml\n+@@ -32,7 +32,6 @@ tempfile = \"3.0.5\"\n+\n+ [dependencies.parking_lot]\n+ version = \"0.11\"\n+-features = [\"nightly\"]\n+\n+ [target.'cfg(windows)'.dependencies]\n+ winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\"] }\n+diff --git a/library/alloc/Cargo.toml b/library/alloc/Cargo.toml\n+index d95b5b7f17f..00b6f0e3635 100644\n+--- a/library/alloc/Cargo.toml\n++++ b/library/alloc/Cargo.toml\n+@@ -8,7 +8,7 @@ edition = \"2018\"\n+\n+ [dependencies]\n+ core = { path = \"../core\" }\n+-compiler_builtins = { version = \"0.1.39\", features = ['rustc-dep-of-std'] }\n++compiler_builtins = { version = \"0.1.39\", features = ['rustc-dep-of-std', 'no-asm'] }\n+\n+ [dev-dependencies]\n+ rand = \"0.7\"\n+EOF\n+\n+cat > config.toml <<EOF\n+[llvm]\n+ninja = false\n+\n+[build]\n+rustc = \"$(pwd)/../build/bin/cg_clif\"\n+cargo = \"$(rustup which cargo)\"\n+full-bootstrap = true\n+local-rebuild = true\n+\n+[rust]\n+codegen-backends = [\"cranelift\"]\n+deny-warnings = false\n+EOF\n+popd"}, {"sha": "791d457993de3a3d42ad77c2e9a843ea719b4d39", "filename": "compiler/rustc_codegen_cranelift/scripts/test_bootstrap.sh", "status": "modified", "additions": 1, "deletions": 61, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_bootstrap.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_bootstrap.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_bootstrap.sh?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -3,70 +3,10 @@ set -e\n \n cd \"$(dirname \"$0\")/../\"\n \n-./build.sh\n-source build/config.sh\n+source ./scripts/setup_rust_fork.sh\n \n echo \"[TEST] Bootstrap of rustc\"\n-git clone https://github.com/rust-lang/rust.git || true\n pushd rust\n-git fetch\n-git checkout -- .\n-git checkout \"$(rustc -V | cut -d' ' -f3 | tr -d '(')\"\n-\n-git apply - <<EOF\n-diff --git a/Cargo.toml b/Cargo.toml\n-index 5bd1147cad5..10d68a2ff14 100644\n---- a/Cargo.toml\n-+++ b/Cargo.toml\n-@@ -111,5 +111,7 @@ rustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }\n- rustc-std-workspace-alloc = { path = 'library/rustc-std-workspace-alloc' }\n- rustc-std-workspace-std = { path = 'library/rustc-std-workspace-std' }\n- \n-+compiler_builtins = { path = \"../build_sysroot/compiler-builtins\" }\n-+\n- [patch.\"https://github.com/rust-lang/rust-clippy\"]\n- clippy_lints = { path = \"src/tools/clippy/clippy_lints\" }\n-diff --git a/compiler/rustc_data_structures/Cargo.toml b/compiler/rustc_data_structures/Cargo.toml\n-index 23e689fcae7..5f077b765b6 100644\n---- a/compiler/rustc_data_structures/Cargo.toml\n-+++ b/compiler/rustc_data_structures/Cargo.toml\n-@@ -32,7 +32,6 @@ tempfile = \"3.0.5\"\n-\n- [dependencies.parking_lot]\n- version = \"0.11\"\n--features = [\"nightly\"]\n-\n- [target.'cfg(windows)'.dependencies]\n- winapi = { version = \"0.3\", features = [\"fileapi\", \"psapi\"] }\n-diff --git a/library/alloc/Cargo.toml b/library/alloc/Cargo.toml\n-index d95b5b7f17f..00b6f0e3635 100644\n---- a/library/alloc/Cargo.toml\n-+++ b/library/alloc/Cargo.toml\n-@@ -8,7 +8,7 @@ edition = \"2018\"\n- \n- [dependencies]\n- core = { path = \"../core\" }\n--compiler_builtins = { version = \"0.1.39\", features = ['rustc-dep-of-std'] }\n-+compiler_builtins = { version = \"0.1.39\", features = ['rustc-dep-of-std', 'no-asm'] }\n- \n- [dev-dependencies]\n- rand = \"0.7\"\n-EOF\n-\n-cat > config.toml <<EOF\n-[llvm]\n-ninja = false\n-\n-[build]\n-rustc = \"$(pwd)/../build/bin/cg_clif\"\n-cargo = \"$(rustup which cargo)\"\n-full-bootstrap = true\n-local-rebuild = true\n-\n-[rust]\n-codegen-backends = [\"cranelift\"]\n-EOF\n-\n rm -r compiler/rustc_codegen_cranelift/{Cargo.*,src}\n cp ../Cargo.* compiler/rustc_codegen_cranelift/\n cp -r ../src compiler/rustc_codegen_cranelift/src"}, {"sha": "fbc3feceec7ac56e4f208458296bdbe0dc2cac6d", "filename": "compiler/rustc_codegen_cranelift/scripts/test_rustc_tests.sh", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -0,0 +1,87 @@\n+#!/bin/bash\n+set -e\n+\n+cd $(dirname \"$0\")/../\n+\n+source ./scripts/setup_rust_fork.sh\n+\n+echo \"[TEST] Test suite of rustc\"\n+pushd rust\n+\n+cargo install ripgrep\n+\n+rm -r src/test/ui/{extern/,panics/,unsized-locals/,thinlto/,simd*,*lto*.rs,linkage*,unwind-*.rs} || true\n+for test in $(rg --files-with-matches \"asm!|catch_unwind|should_panic|lto\" src/test/ui); do\n+  rm $test\n+done\n+\n+for test in $(rg -i --files-with-matches \"//(\\[\\w+\\])?~|// error-pattern:|// build-fail|// run-fail|-Cllvm-args\" src/test/ui); do\n+  rm $test\n+done\n+\n+git checkout -- src/test/ui/issues/auxiliary/issue-3136-a.rs # contains //~ERROR, but shouldn't be removed\n+\n+# these all depend on unwinding support\n+rm src/test/ui/backtrace.rs\n+rm src/test/ui/array-slice-vec/box-of-array-of-drop-*.rs\n+rm src/test/ui/array-slice-vec/slice-panic-*.rs\n+rm src/test/ui/array-slice-vec/nested-vec-3.rs\n+rm src/test/ui/cleanup-rvalue-temp-during-incomplete-alloc.rs\n+rm src/test/ui/issues/issue-26655.rs\n+rm src/test/ui/issues/issue-29485.rs\n+rm src/test/ui/issues/issue-30018-panic.rs\n+rm src/test/ui/multi-panic.rs\n+rm src/test/ui/sepcomp/sepcomp-unwind.rs\n+rm src/test/ui/structs-enums/unit-like-struct-drop-run.rs\n+rm src/test/ui/terminate-in-initializer.rs\n+rm src/test/ui/threads-sendsync/task-stderr.rs\n+rm src/test/ui/numbers-arithmetic/int-abs-overflow.rs\n+rm src/test/ui/drop/drop-trait-enum.rs\n+rm src/test/ui/numbers-arithmetic/issue-8460.rs\n+\n+rm src/test/ui/issues/issue-28950.rs # depends on stack size optimizations\n+rm src/test/ui/init-large-type.rs # same\n+rm src/test/ui/sse2.rs # cpuid not supported, so sse2 not detected\n+rm src/test/ui/issues/issue-33992.rs # unsupported linkages\n+rm src/test/ui/issues/issue-51947.rs # same\n+rm src/test/ui/numbers-arithmetic/saturating-float-casts.rs # intrinsic gives different but valid result\n+rm src/test/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n+rm src/test/ui/mir/mir_raw_fat_ptr.rs # same\n+rm src/test/ui/async-await/async-fn-size-moved-locals.rs # -Cpanic=abort shrinks some generator by one byte\n+rm src/test/ui/async-await/async-fn-size-uninit-locals.rs # same\n+rm src/test/ui/generator/size-moved-locals.rs # same\n+rm src/test/ui/fn/dyn-fn-alignment.rs # wants a 256 byte alignment\n+rm src/test/ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs # \"Cannot run dynamic test fn out-of-process\"\n+rm src/test/ui/intrinsics/intrinsic-nearby.rs # unimplemented nearbyintf32 and nearbyintf64 intrinsics\n+\n+rm src/test/incremental/hashes/inline_asm.rs # inline asm\n+rm src/test/incremental/issue-72386.rs # same\n+rm src/test/incremental/change_crate_dep_kind.rs # requires -Cpanic=unwind\n+rm src/test/incremental/issue-49482.rs # same\n+rm src/test/incremental/issue-54059.rs # same\n+rm src/test/incremental/lto.rs # requires lto\n+\n+rm src/test/pretty/asm.rs # inline asm\n+rm src/test/pretty/raw-str-nonexpr.rs # same\n+\n+rm -r src/test/run-pass-valgrind/unsized-locals\n+\n+rm src/test/ui/json-bom-plus-crlf-multifile.rs # differing warning\n+rm src/test/ui/json-bom-plus-crlf.rs # same\n+rm src/test/ui/type-alias-impl-trait/cross_crate_ice*.rs # requires removed aux dep\n+\n+rm src/test/ui/allocator/no_std-alloc-error-handler-default.rs # missing rust_oom definition\n+rm src/test/ui/cfg/cfg-panic.rs\n+rm src/test/ui/default-alloc-error-hook.rs\n+rm -r src/test/ui/hygiene/\n+\n+rm -r src/test/ui/polymorphization/ # polymorphization not yet supported\n+rm src/test/codegen-units/polymorphization/unused_type_parameters.rs # same\n+\n+rm -r src/test/run-make/fmt-write-bloat/ # tests an optimization\n+rm src/test/ui/abi/mir/mir_codegen_calls_variadic.rs # requires float varargs\n+rm src/test/ui/abi/variadic-ffi.rs # requires callee side vararg support\n+\n+echo \"[TEST] rustc test suite\"\n+RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 src/test/{codegen-units,run-make,run-pass-valgrind,ui}\n+popd"}, {"sha": "3afcea8f06bd6c257b6ec97077d17ee7496ed565", "filename": "compiler/rustc_codegen_cranelift/scripts/tests.sh", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -71,14 +71,20 @@ function base_sysroot_tests() {\n     echo \"[AOT] mod_bench\"\n     $MY_RUSTC example/mod_bench.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/mod_bench\n+}\n \n+function extended_sysroot_tests() {\n     pushd rand\n-    rm -r ./target || true\n-    ../build/cargo.sh test --workspace\n+    cargo clean\n+    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+        echo \"[TEST] rust-random/rand\"\n+        ../build/cargo.sh test --workspace\n+    else\n+        echo \"[AOT] rust-random/rand\"\n+        ../build/cargo.sh build --workspace --target $TARGET_TRIPLE --tests\n+    fi\n     popd\n-}\n \n-function extended_sysroot_tests() {\n     pushd simple-raytracer\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n@@ -92,27 +98,40 @@ function extended_sysroot_tests() {\n     else\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n         echo \"[COMPILE] ebobby/simple-raytracer\"\n-        ../cargo.sh build\n+        ../build/cargo.sh build --target $TARGET_TRIPLE\n         echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n     fi\n     popd\n \n     pushd build_sysroot/sysroot_src/library/core/tests\n     echo \"[TEST] libcore\"\n-    rm -r ./target || true\n-    ../../../../../build/cargo.sh test\n+    cargo clean\n+    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+        ../../../../../build/cargo.sh test\n+    else\n+        ../../../../../build/cargo.sh build --target $TARGET_TRIPLE --tests\n+    fi\n     popd\n \n     pushd regex\n     echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n-    ../build/cargo.sh clean\n+    cargo clean\n     # Make sure `[codegen mono items] start` doesn't poison the diff\n-    ../build/cargo.sh build --example shootout-regex-dna\n-    cat examples/regexdna-input.txt | ../build/cargo.sh run --example shootout-regex-dna | grep -v \"Spawned thread\" > res.txt\n-    diff -u res.txt examples/regexdna-output.txt\n+    ../build/cargo.sh build --example shootout-regex-dna --target $TARGET_TRIPLE\n+    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+        cat examples/regexdna-input.txt \\\n+            | ../build/cargo.sh run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n+            | grep -v \"Spawned thread\" > res.txt\n+        diff -u res.txt examples/regexdna-output.txt\n+    fi\n \n-    echo \"[TEST] rust-lang/regex tests\"\n-    ../build/cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n+    if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n+        echo \"[TEST] rust-lang/regex tests\"\n+        ../build/cargo.sh test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n+    else\n+        echo \"[AOT] rust-lang/regex tests\"\n+        ../build/cargo.sh build --tests --target $TARGET_TRIPLE\n+    fi\n     popd\n }\n "}, {"sha": "5fbaed7283a6781400a2ca0628cc731ae49edb8e", "filename": "compiler/rustc_codegen_cranelift/src/abi/comments.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fcomments.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -11,9 +11,11 @@ use cranelift_codegen::entity::EntityRef;\n use crate::prelude::*;\n \n pub(super) fn add_args_header_comment(fx: &mut FunctionCx<'_, '_, '_>) {\n-    fx.add_global_comment(\n-        \"kind  loc.idx   param    pass mode                            ty\".to_string(),\n-    );\n+    if fx.clif_comments.enabled() {\n+        fx.add_global_comment(\n+            \"kind  loc.idx   param    pass mode                            ty\".to_string(),\n+        );\n+    }\n }\n \n pub(super) fn add_arg_comment<'tcx>(\n@@ -25,6 +27,10 @@ pub(super) fn add_arg_comment<'tcx>(\n     arg_abi_mode: PassMode,\n     arg_layout: TyAndLayout<'tcx>,\n ) {\n+    if !fx.clif_comments.enabled() {\n+        return;\n+    }\n+\n     let local = if let Some(local) = local {\n         Cow::Owned(format!(\"{:?}\", local))\n     } else {\n@@ -59,17 +65,22 @@ pub(super) fn add_arg_comment<'tcx>(\n }\n \n pub(super) fn add_locals_header_comment(fx: &mut FunctionCx<'_, '_, '_>) {\n-    fx.add_global_comment(String::new());\n-    fx.add_global_comment(\n-        \"kind  local ty                              size align (abi,pref)\".to_string(),\n-    );\n+    if fx.clif_comments.enabled() {\n+        fx.add_global_comment(String::new());\n+        fx.add_global_comment(\n+            \"kind  local ty                              size align (abi,pref)\".to_string(),\n+        );\n+    }\n }\n \n pub(super) fn add_local_place_comments<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     place: CPlace<'tcx>,\n     local: Local,\n ) {\n+    if !fx.clif_comments.enabled() {\n+        return;\n+    }\n     let TyAndLayout { ty, layout } = place.layout();\n     let rustc_target::abi::Layout { size, align, abi: _, variants: _, fields: _, largest_niche: _ } =\n         layout;\n@@ -90,7 +101,7 @@ pub(super) fn add_local_place_comments<'tcx>(\n             } else {\n                 Cow::Borrowed(\"\")\n             };\n-            match ptr.base_and_offset() {\n+            match ptr.debug_base_and_offset() {\n                 (crate::pointer::PointerBase::Addr(addr), offset) => {\n                     (\"reuse\", format!(\"storage={}{}{}\", addr, offset, meta).into())\n                 }"}, {"sha": "0e7829eaa26acd3c5946edb9d25b06f0b28a7789", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -1,6 +1,5 @@\n //! Handling of everything related to the calling convention. Also fills `fx.local_map`.\n \n-#[cfg(debug_assertions)]\n mod comments;\n mod pass_mode;\n mod returning;\n@@ -75,8 +74,9 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         let func_id = import_function(self.tcx, self.cx.module, inst);\n         let func_ref = self.cx.module.declare_func_in_func(func_id, &mut self.bcx.func);\n \n-        #[cfg(debug_assertions)]\n-        self.add_comment(func_ref, format!(\"{:?}\", inst));\n+        if self.clif_comments.enabled() {\n+            self.add_comment(func_ref, format!(\"{:?}\", inst));\n+        }\n \n         func_ref\n     }\n@@ -92,8 +92,7 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         let func_id = self.cx.module.declare_function(&name, Linkage::Import, &sig).unwrap();\n         let func_ref = self.cx.module.declare_func_in_func(func_id, &mut self.bcx.func);\n         let call_inst = self.bcx.ins().call(func_ref, args);\n-        #[cfg(debug_assertions)]\n-        {\n+        if self.clif_comments.enabled() {\n             self.add_comment(call_inst, format!(\"easy_call {}\", name));\n         }\n         let results = self.bcx.inst_results(call_inst);\n@@ -149,7 +148,6 @@ fn make_local_place<'tcx>(\n         CPlace::new_stack_slot(fx, layout)\n     };\n \n-    #[cfg(debug_assertions)]\n     self::comments::add_local_place_comments(fx, place, local);\n \n     place\n@@ -163,7 +161,6 @@ pub(crate) fn codegen_fn_prelude<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, start_\n \n     let ssa_analyzed = crate::analyze::analyze(fx);\n \n-    #[cfg(debug_assertions)]\n     self::comments::add_args_header_comment(fx);\n \n     let mut block_params_iter = fx.bcx.func.dfg.block_params(start_block).to_vec().into_iter();\n@@ -228,7 +225,6 @@ pub(crate) fn codegen_fn_prelude<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, start_\n     fx.fn_abi = Some(fn_abi);\n     assert!(block_params_iter.next().is_none(), \"arg_value left behind\");\n \n-    #[cfg(debug_assertions)]\n     self::comments::add_locals_header_comment(fx);\n \n     for (local, arg_kind, ty) in func_params {\n@@ -256,7 +252,6 @@ pub(crate) fn codegen_fn_prelude<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, start_\n                         CPlace::for_ptr(addr, val.layout())\n                     };\n \n-                    #[cfg(debug_assertions)]\n                     self::comments::add_local_place_comments(fx, place, local);\n \n                     assert_eq!(fx.local_map.push(place), local);\n@@ -392,8 +387,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     let (func_ref, first_arg) = match instance {\n         // Trait object call\n         Some(Instance { def: InstanceDef::Virtual(_, idx), .. }) => {\n-            #[cfg(debug_assertions)]\n-            {\n+            if fx.clif_comments.enabled() {\n                 let nop_inst = fx.bcx.ins().nop();\n                 fx.add_comment(\n                     nop_inst,\n@@ -414,8 +408,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n         // Indirect call\n         None => {\n-            #[cfg(debug_assertions)]\n-            {\n+            if fx.clif_comments.enabled() {\n                 let nop_inst = fx.bcx.ins().nop();\n                 fx.add_comment(nop_inst, \"indirect call\");\n             }\n@@ -477,10 +470,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     // FIXME find a cleaner way to support varargs\n     if fn_sig.c_variadic {\n         if !matches!(fn_sig.abi, Abi::C { .. }) {\n-            fx.tcx.sess.span_fatal(\n-                span,\n-                &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi),\n-            );\n+            fx.tcx.sess.span_fatal(span, &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi));\n         }\n         let sig_ref = fx.bcx.func.dfg.call_signature(call_inst).unwrap();\n         let abi_params = call_args"}, {"sha": "7c275965199e056567512a0b71118943b80838cc", "filename": "compiler/rustc_codegen_cranelift/src/abi/pass_mode.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fpass_mode.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -208,7 +208,7 @@ pub(super) fn from_casted_value<'tcx>(\n     });\n     let ptr = Pointer::new(fx.bcx.ins().stack_addr(pointer_ty(fx.tcx), stack_slot, 0));\n     let mut offset = 0;\n-    let mut block_params_iter = block_params.into_iter().copied();\n+    let mut block_params_iter = block_params.iter().copied();\n     for param in abi_params {\n         let val = ptr.offset_i64(fx, offset).store(\n             fx,\n@@ -248,8 +248,8 @@ pub(super) fn adjust_arg_for_abi<'tcx>(\n /// as necessary.\n pub(super) fn cvalue_for_param<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    #[cfg_attr(not(debug_assertions), allow(unused_variables))] local: Option<mir::Local>,\n-    #[cfg_attr(not(debug_assertions), allow(unused_variables))] local_field: Option<usize>,\n+    local: Option<mir::Local>,\n+    local_field: Option<usize>,\n     arg_abi: &ArgAbi<'tcx, Ty<'tcx>>,\n     block_params_iter: &mut impl Iterator<Item = Value>,\n ) -> Option<CValue<'tcx>> {\n@@ -263,7 +263,6 @@ pub(super) fn cvalue_for_param<'tcx>(\n         })\n         .collect::<SmallVec<[_; 2]>>();\n \n-    #[cfg(debug_assertions)]\n     crate::abi::comments::add_arg_comment(\n         fx,\n         \"arg\","}, {"sha": "e1c53224b4f841751bba96f80a37b99fbcdd9e93", "filename": "compiler/rustc_codegen_cranelift/src/abi/returning.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -84,10 +84,6 @@ pub(super) fn codegen_return_param<'tcx>(\n         }\n     };\n \n-    #[cfg(not(debug_assertions))]\n-    let _ = ret_param;\n-\n-    #[cfg(debug_assertions)]\n     crate::abi::comments::add_arg_comment(\n         fx,\n         \"ret\",\n@@ -146,7 +142,7 @@ pub(super) fn codegen_with_call_return_arg<'tcx, T>(\n                 let results = fx\n                     .bcx\n                     .inst_results(call_inst)\n-                    .into_iter()\n+                    .iter()\n                     .copied()\n                     .collect::<SmallVec<[Value; 2]>>();\n                 let result ="}, {"sha": "f60645a9f97bc9eed7559924b480ff6d2de29427", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -3,6 +3,7 @@\n \n use crate::prelude::*;\n \n+use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_span::symbol::sym;\n \n@@ -92,7 +93,7 @@ fn codegen_inner(\n             bcx.finalize();\n         }\n         module\n-            .define_function(func_id, &mut ctx, &mut cranelift_codegen::binemit::NullTrapSink {})\n+            .define_function(func_id, &mut ctx, &mut NullTrapSink {}, &mut NullStackMapSink {})\n             .unwrap();\n         unwind_context.add_function(func_id, &ctx, module.isa());\n     }\n@@ -132,7 +133,7 @@ fn codegen_inner(\n         bcx.finalize();\n     }\n     module\n-        .define_function(func_id, &mut ctx, &mut cranelift_codegen::binemit::NullTrapSink {})\n+        .define_function(func_id, &mut ctx, &mut NullTrapSink {}, &mut NullStackMapSink {})\n         .unwrap();\n     unwind_context.add_function(func_id, &ctx, module.isa());\n }"}, {"sha": "b34a29c25b92e7a56b1259bd23eca71b5ff33485", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 28, "deletions": 35, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -1,17 +1,14 @@\n //! Codegen of a single function\n \n+use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiExt;\n use rustc_target::abi::call::FnAbi;\n \n use crate::prelude::*;\n \n-pub(crate) fn codegen_fn<'tcx>(\n-    cx: &mut crate::CodegenCx<'_, 'tcx>,\n-    instance: Instance<'tcx>,\n-    linkage: Linkage,\n-) {\n+pub(crate) fn codegen_fn<'tcx>(cx: &mut crate::CodegenCx<'_, 'tcx>, instance: Instance<'tcx>) {\n     let tcx = cx.tcx;\n \n     let _inst_guard =\n@@ -23,7 +20,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     // Declare function\n     let name = tcx.symbol_name(instance).name.to_string();\n     let sig = get_function_sig(tcx, cx.module.isa().triple(), instance);\n-    let func_id = cx.module.declare_function(&name, linkage, &sig).unwrap();\n+    let func_id = cx.module.declare_function(&name, Linkage::Local, &sig).unwrap();\n \n     cx.cached_context.clear();\n \n@@ -131,7 +128,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     let module = &mut cx.module;\n     tcx.sess.time(\"define function\", || {\n         module\n-            .define_function(func_id, context, &mut cranelift_codegen::binemit::NullTrapSink {})\n+            .define_function(func_id, context, &mut NullTrapSink {}, &mut NullStackMapSink {})\n             .unwrap()\n     });\n \n@@ -219,8 +216,7 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, '_>) {\n             codegen_stmt(fx, block, stmt);\n         }\n \n-        #[cfg(debug_assertions)]\n-        {\n+        if fx.clif_comments.enabled() {\n             let mut terminator_head = \"\\n\".to_string();\n             bb_data.terminator().kind.fmt_head(&mut terminator_head).unwrap();\n             let inst = fx.bcx.func.layout.last_inst(block).unwrap();\n@@ -433,12 +429,14 @@ fn codegen_stmt<'tcx>(\n \n     fx.set_debug_loc(stmt.source_info);\n \n-    #[cfg(false_debug_assertions)]\n+    #[cfg(disabled)]\n     match &stmt.kind {\n         StatementKind::StorageLive(..) | StatementKind::StorageDead(..) => {} // Those are not very useful\n         _ => {\n-            let inst = fx.bcx.func.layout.last_inst(cur_block).unwrap();\n-            fx.add_comment(inst, format!(\"{:?}\", stmt));\n+            if fx.clif_comments.enabled() {\n+                let inst = fx.bcx.func.layout.last_inst(cur_block).unwrap();\n+                fx.add_comment(inst, format!(\"{:?}\", stmt));\n+            }\n         }\n     }\n \n@@ -464,16 +462,16 @@ fn codegen_stmt<'tcx>(\n                     let val = crate::constant::codegen_tls_ref(fx, def_id, lval.layout());\n                     lval.write_cvalue(fx, val);\n                 }\n-                Rvalue::BinaryOp(bin_op, box (ref lhs, ref rhs)) => {\n-                    let lhs = codegen_operand(fx, lhs);\n-                    let rhs = codegen_operand(fx, rhs);\n+                Rvalue::BinaryOp(bin_op, ref lhs_rhs) => {\n+                    let lhs = codegen_operand(fx, &lhs_rhs.0);\n+                    let rhs = codegen_operand(fx, &lhs_rhs.1);\n \n                     let res = crate::num::codegen_binop(fx, bin_op, lhs, rhs);\n                     lval.write_cvalue(fx, res);\n                 }\n-                Rvalue::CheckedBinaryOp(bin_op, box (ref lhs, ref rhs)) => {\n-                    let lhs = codegen_operand(fx, lhs);\n-                    let rhs = codegen_operand(fx, rhs);\n+                Rvalue::CheckedBinaryOp(bin_op, ref lhs_rhs) => {\n+                    let lhs = codegen_operand(fx, &lhs_rhs.0);\n+                    let rhs = codegen_operand(fx, &lhs_rhs.1);\n \n                     let res = if !fx.tcx.sess.overflow_checks() {\n                         let val =\n@@ -659,7 +657,9 @@ fn codegen_stmt<'tcx>(\n                         .val\n                         .try_to_bits(fx.tcx.data_layout.pointer_size)\n                         .unwrap();\n-                    if fx.clif_type(operand.layout().ty) == Some(types::I8) {\n+                    if operand.layout().size.bytes() == 0 {\n+                        // Do nothing for ZST's\n+                    } else if fx.clif_type(operand.layout().ty) == Some(types::I8) {\n                         let times = fx.bcx.ins().iconst(fx.pointer_type, times as i64);\n                         // FIXME use emit_small_memset where possible\n                         let addr = lval.to_ptr().get_addr(fx);\n@@ -832,25 +832,18 @@ fn codegen_stmt<'tcx>(\n             }\n         }\n         StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),\n-        StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n-          src,\n-          dst,\n-          count,\n-        }) => {\n-            let dst = codegen_operand(fx, dst);\n+        StatementKind::CopyNonOverlapping(inner) => {\n+            let dst = codegen_operand(fx, &inner.dst);\n             let pointee = dst\n-              .layout()\n-              .pointee_info_at(fx, rustc_target::abi::Size::ZERO)\n-              .expect(\"Expected pointer\");\n+                .layout()\n+                .pointee_info_at(fx, rustc_target::abi::Size::ZERO)\n+                .expect(\"Expected pointer\");\n             let dst = dst.load_scalar(fx);\n-            let src = codegen_operand(fx, src).load_scalar(fx);\n-            let count = codegen_operand(fx, count).load_scalar(fx);\n+            let src = codegen_operand(fx, &inner.src).load_scalar(fx);\n+            let count = codegen_operand(fx, &inner.count).load_scalar(fx);\n             let elem_size: u64 = pointee.size.bytes();\n-            let bytes = if elem_size != 1 {\n-               fx.bcx.ins().imul_imm(count, elem_size as i64)\n-            } else {\n-               count\n-            };\n+            let bytes =\n+                if elem_size != 1 { fx.bcx.ins().imul_imm(count, elem_size as i64) } else { count };\n             fx.bcx.call_memcpy(fx.cx.module.target_config(), dst, src, bytes);\n         }\n     }"}, {"sha": "ffe1922ab9056dc3c82a303e21d8d147b7243a2c", "filename": "compiler/rustc_codegen_cranelift/src/codegen_i128.rs", "status": "modified", "additions": 70, "deletions": 19, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -32,18 +32,56 @@ pub(crate) fn maybe_codegen<'tcx>(\n         BinOp::Add | BinOp::Sub if !checked => None,\n         BinOp::Mul if !checked => {\n             let val_ty = if is_signed { fx.tcx.types.i128 } else { fx.tcx.types.u128 };\n-            Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n+            if fx.tcx.sess.target.is_like_windows {\n+                let ret_place = CPlace::new_stack_slot(fx, lhs.layout());\n+                let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n+                let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n+                assert!(lhs_extra.is_none());\n+                assert!(rhs_extra.is_none());\n+                let args =\n+                    [ret_place.to_ptr().get_addr(fx), lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)];\n+                fx.lib_call(\n+                    \"__multi3\",\n+                    vec![\n+                        AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n+                        AbiParam::new(pointer_ty(fx.tcx)),\n+                        AbiParam::new(pointer_ty(fx.tcx)),\n+                    ],\n+                    vec![],\n+                    &args,\n+                );\n+                Some(ret_place.to_cvalue(fx))\n+            } else {\n+                Some(fx.easy_call(\"__multi3\", &[lhs, rhs], val_ty))\n+            }\n         }\n         BinOp::Add | BinOp::Sub | BinOp::Mul => {\n             assert!(checked);\n             let out_ty = fx.tcx.mk_tup([lhs.layout().ty, fx.tcx.types.bool].iter());\n             let out_place = CPlace::new_stack_slot(fx, fx.layout_of(out_ty));\n-            let param_types = vec![\n-                AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n-                AbiParam::new(types::I128),\n-                AbiParam::new(types::I128),\n-            ];\n-            let args = [out_place.to_ptr().get_addr(fx), lhs.load_scalar(fx), rhs.load_scalar(fx)];\n+            let (param_types, args) = if fx.tcx.sess.target.is_like_windows {\n+                let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n+                let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n+                assert!(lhs_extra.is_none());\n+                assert!(rhs_extra.is_none());\n+                (\n+                    vec![\n+                        AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n+                        AbiParam::new(pointer_ty(fx.tcx)),\n+                        AbiParam::new(pointer_ty(fx.tcx)),\n+                    ],\n+                    [out_place.to_ptr().get_addr(fx), lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)],\n+                )\n+            } else {\n+                (\n+                    vec![\n+                        AbiParam::special(pointer_ty(fx.tcx), ArgumentPurpose::StructReturn),\n+                        AbiParam::new(types::I128),\n+                        AbiParam::new(types::I128),\n+                    ],\n+                    [out_place.to_ptr().get_addr(fx), lhs.load_scalar(fx), rhs.load_scalar(fx)],\n+                )\n+            };\n             let name = match (bin_op, is_signed) {\n                 (BinOp::Add, false) => \"__rust_u128_addo\",\n                 (BinOp::Add, true) => \"__rust_i128_addo\",\n@@ -57,20 +95,33 @@ pub(crate) fn maybe_codegen<'tcx>(\n             Some(out_place.to_cvalue(fx))\n         }\n         BinOp::Offset => unreachable!(\"offset should only be used on pointers, not 128bit ints\"),\n-        BinOp::Div => {\n+        BinOp::Div | BinOp::Rem => {\n             assert!(!checked);\n-            if is_signed {\n-                Some(fx.easy_call(\"__divti3\", &[lhs, rhs], fx.tcx.types.i128))\n-            } else {\n-                Some(fx.easy_call(\"__udivti3\", &[lhs, rhs], fx.tcx.types.u128))\n-            }\n-        }\n-        BinOp::Rem => {\n-            assert!(!checked);\n-            if is_signed {\n-                Some(fx.easy_call(\"__modti3\", &[lhs, rhs], fx.tcx.types.i128))\n+            let name = match (bin_op, is_signed) {\n+                (BinOp::Div, false) => \"__udivti3\",\n+                (BinOp::Div, true) => \"__divti3\",\n+                (BinOp::Rem, false) => \"__umodti3\",\n+                (BinOp::Rem, true) => \"__modti3\",\n+                _ => unreachable!(),\n+            };\n+            if fx.tcx.sess.target.is_like_windows {\n+                let (lhs_ptr, lhs_extra) = lhs.force_stack(fx);\n+                let (rhs_ptr, rhs_extra) = rhs.force_stack(fx);\n+                assert!(lhs_extra.is_none());\n+                assert!(rhs_extra.is_none());\n+                let args = [lhs_ptr.get_addr(fx), rhs_ptr.get_addr(fx)];\n+                let ret = fx.lib_call(\n+                    name,\n+                    vec![AbiParam::new(pointer_ty(fx.tcx)), AbiParam::new(pointer_ty(fx.tcx))],\n+                    vec![AbiParam::new(types::I64X2)],\n+                    &args,\n+                )[0];\n+                // FIXME use bitcast instead of store to get from i64x2 to i128\n+                let ret_place = CPlace::new_stack_slot(fx, lhs.layout());\n+                ret_place.to_ptr().store(fx, ret, MemFlags::trusted());\n+                Some(ret_place.to_cvalue(fx))\n             } else {\n-                Some(fx.easy_call(\"__umodti3\", &[lhs, rhs], fx.tcx.types.u128))\n+                Some(fx.easy_call(name, &[lhs, rhs], lhs.layout().ty))\n             }\n         }\n         BinOp::Lt | BinOp::Le | BinOp::Eq | BinOp::Ge | BinOp::Gt | BinOp::Ne => {"}, {"sha": "b5874f62535cab275ff566754c398196b32b36e0", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -361,8 +361,7 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         let _ = self.cx.module.define_data(msg_id, &data_ctx);\n \n         let local_msg_id = self.cx.module.declare_data_in_func(msg_id, self.bcx.func);\n-        #[cfg(debug_assertions)]\n-        {\n+        if self.clif_comments.enabled() {\n             self.add_comment(local_msg_id, msg);\n         }\n         self.bcx.ins().global_value(self.pointer_type, local_msg_id)"}, {"sha": "177f850afb398ef6c90e8d1e161920ec56d846e0", "filename": "compiler/rustc_codegen_cranelift/src/compiler_builtins.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcompiler_builtins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcompiler_builtins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcompiler_builtins.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -0,0 +1,41 @@\n+macro builtin_functions($register:ident; $(fn $name:ident($($arg_name:ident: $arg_ty:ty),*) -> $ret_ty:ty;)*) {\n+    #[cfg(feature = \"jit\")]\n+    #[allow(improper_ctypes)]\n+    extern \"C\" {\n+        $(fn $name($($arg_name: $arg_ty),*) -> $ret_ty;)*\n+    }\n+\n+    #[cfg(feature = \"jit\")]\n+    pub(crate) fn $register(builder: &mut cranelift_jit::JITBuilder) {\n+        for &(name, val) in &[$((stringify!($name), $name as *const u8)),*] {\n+            builder.symbol(name, val);\n+        }\n+    }\n+}\n+\n+builtin_functions! {\n+    register_functions_for_jit;\n+\n+    // integers\n+    fn __multi3(a: i128, b: i128) -> i128;\n+    fn __udivti3(n: u128, d: u128) -> u128;\n+    fn __divti3(n: i128, d: i128) -> i128;\n+    fn __umodti3(n: u128, d: u128) -> u128;\n+    fn __modti3(n: i128, d: i128) -> i128;\n+    fn __rust_u128_addo(a: u128, b: u128) -> (u128, bool);\n+    fn __rust_i128_addo(a: i128, b: i128) -> (i128, bool);\n+    fn __rust_u128_subo(a: u128, b: u128) -> (u128, bool);\n+    fn __rust_i128_subo(a: i128, b: i128) -> (i128, bool);\n+    fn __rust_u128_mulo(a: u128, b: u128) -> (u128, bool);\n+    fn __rust_i128_mulo(a: i128, b: i128) -> (i128, bool);\n+\n+    // floats\n+    fn __floattisf(i: i128) -> f32;\n+    fn __floattidf(i: i128) -> f64;\n+    fn __floatuntisf(i: u128) -> f32;\n+    fn __floatuntidf(i: u128) -> f64;\n+    fn __fixsfti(f: f32) -> i128;\n+    fn __fixdfti(f: f64) -> i128;\n+    fn __fixunssfti(f: f32) -> u128;\n+    fn __fixunsdfti(f: f64) -> u128;\n+}"}, {"sha": "fcd41c844659d0bb937d2d70c044b9abcb08ca00", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -85,8 +85,9 @@ pub(crate) fn codegen_tls_ref<'tcx>(\n ) -> CValue<'tcx> {\n     let data_id = data_id_for_static(fx.tcx, fx.cx.module, def_id, false);\n     let local_data_id = fx.cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-    #[cfg(debug_assertions)]\n-    fx.add_comment(local_data_id, format!(\"tls {:?}\", def_id));\n+    if fx.clif_comments.enabled() {\n+        fx.add_comment(local_data_id, format!(\"tls {:?}\", def_id));\n+    }\n     let tls_ptr = fx.bcx.ins().tls_value(fx.pointer_type, local_data_id);\n     CValue::by_val(tls_ptr, layout)\n }\n@@ -98,8 +99,9 @@ fn codegen_static_ref<'tcx>(\n ) -> CPlace<'tcx> {\n     let data_id = data_id_for_static(fx.tcx, fx.cx.module, def_id, false);\n     let local_data_id = fx.cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-    #[cfg(debug_assertions)]\n-    fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n+    if fx.clif_comments.enabled() {\n+        fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n+    }\n     let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);\n     assert!(!layout.is_unsized(), \"unsized statics aren't supported\");\n     assert!(\n@@ -122,7 +124,9 @@ pub(crate) fn codegen_constant<'tcx>(\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) if fx.tcx.is_static(def.did) => {\n+        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+            if fx.tcx.is_static(def.did) =>\n+        {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n@@ -183,8 +187,9 @@ pub(crate) fn codegen_const_value<'tcx>(\n                                 data_id_for_alloc_id(fx.cx.module, ptr.alloc_id, alloc.mutability);\n                             let local_data_id =\n                                 fx.cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-                            #[cfg(debug_assertions)]\n-                            fx.add_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n+                            if fx.clif_comments.enabled() {\n+                                fx.add_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n+                            }\n                             fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n                         }\n                         Some(GlobalAlloc::Function(instance)) => {\n@@ -199,8 +204,9 @@ pub(crate) fn codegen_const_value<'tcx>(\n                             let data_id = data_id_for_static(fx.tcx, fx.cx.module, def_id, false);\n                             let local_data_id =\n                                 fx.cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-                            #[cfg(debug_assertions)]\n-                            fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n+                            if fx.clif_comments.enabled() {\n+                                fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n+                            }\n                             fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n                         }\n                         None => bug!(\"missing allocation {:?}\", ptr.alloc_id),\n@@ -241,8 +247,9 @@ fn pointer_for_allocation<'tcx>(\n     let data_id = data_id_for_alloc_id(fx.cx.module, alloc_id, alloc.mutability);\n \n     let local_data_id = fx.cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-    #[cfg(debug_assertions)]\n-    fx.add_comment(local_data_id, format!(\"{:?}\", alloc_id));\n+    if fx.clif_comments.enabled() {\n+        fx.add_comment(local_data_id, format!(\"{:?}\", alloc_id));\n+    }\n     let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);\n     crate::pointer::Pointer::new(global_ptr)\n }"}, {"sha": "8578ab33ced680bb50340819c7aa2939ff6b9bef", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/line_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fline_info.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -39,11 +39,11 @@ fn osstr_as_utf8_bytes(path: &OsStr) -> &[u8] {\n     #[cfg(unix)]\n     {\n         use std::os::unix::ffi::OsStrExt;\n-        return path.as_bytes();\n+        path.as_bytes()\n     }\n     #[cfg(not(unix))]\n     {\n-        return path.to_str().unwrap().as_bytes();\n+        path.to_str().unwrap().as_bytes()\n     }\n }\n "}, {"sha": "ed3bdedddced505b5d47c1b2c678bdda14bbe7d0", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -119,11 +119,10 @@ fn module_codegen(\n         tcx.sess.opts.debuginfo != DebugInfo::None,\n     );\n     super::predefine_mono_items(&mut cx, &mono_items);\n-    for (mono_item, (linkage, visibility)) in mono_items {\n-        let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+    for (mono_item, _) in mono_items {\n         match mono_item {\n             MonoItem::Fn(inst) => {\n-                cx.tcx.sess.time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, inst, linkage));\n+                cx.tcx.sess.time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, inst));\n             }\n             MonoItem::Static(def_id) => {\n                 crate::constant::codegen_static(&mut cx.constants_cx, def_id)\n@@ -163,6 +162,21 @@ pub(super) fn run_aot(\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n ) -> Box<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)> {\n+    use rustc_span::symbol::sym;\n+\n+    let crate_attrs = tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n+    let subsystem = tcx.sess.first_attr_value_str_by_name(crate_attrs, sym::windows_subsystem);\n+    let windows_subsystem = subsystem.map(|subsystem| {\n+        if subsystem != sym::windows && subsystem != sym::console {\n+            tcx.sess.fatal(&format!(\n+                \"invalid windows subsystem `{}`, only \\\n+                                    `windows` and `console` are allowed\",\n+                subsystem\n+            ));\n+        }\n+        subsystem.to_string()\n+    });\n+\n     let mut work_products = FxHashMap::default();\n \n     let cgus = if tcx.sess.opts.output_types.should_codegen() {\n@@ -280,7 +294,7 @@ pub(super) fn run_aot(\n             allocator_module,\n             metadata_module,\n             metadata,\n-            windows_subsystem: None, // Windows is not yet supported\n+            windows_subsystem,\n             linker_info: LinkerInfo::new(tcx),\n             crate_info: CrateInfo::new(tcx),\n         },"}, {"sha": "dbe1ff083f0db24d12f9846c5cdf7147a4866bd1", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 59, "deletions": 30, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -5,8 +5,10 @@ use std::cell::RefCell;\n use std::ffi::CString;\n use std::os::raw::{c_char, c_int};\n \n+use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_codegen_ssa::CrateInfo;\n use rustc_middle::mir::mono::MonoItem;\n+use rustc_session::config::EntryFnType;\n \n use cranelift_jit::{JITBuilder, JITModule};\n \n@@ -28,20 +30,11 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     let mut jit_builder =\n         JITBuilder::with_isa(crate::build_isa(tcx.sess), cranelift_module::default_libcall_names());\n     jit_builder.hotswap(matches!(backend_config.codegen_mode, CodegenMode::JitLazy));\n+    crate::compiler_builtins::register_functions_for_jit(&mut jit_builder);\n     jit_builder.symbols(imported_symbols);\n     let mut jit_module = JITModule::new(jit_builder);\n     assert_eq!(pointer_ty(tcx), jit_module.target_config().pointer_type());\n \n-    let sig = Signature {\n-        params: vec![\n-            AbiParam::new(jit_module.target_config().pointer_type()),\n-            AbiParam::new(jit_module.target_config().pointer_type()),\n-        ],\n-        returns: vec![AbiParam::new(jit_module.target_config().pointer_type() /*isize*/)],\n-        call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n-    };\n-    let main_func_id = jit_module.declare_function(\"main\", Linkage::Import, &sig).unwrap();\n-\n     let (_, cgus) = tcx.collect_and_partition_mono_items(LOCAL_CRATE);\n     let mono_items = cgus\n         .iter()\n@@ -55,15 +48,12 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n \n     super::time(tcx, \"codegen mono items\", || {\n         super::predefine_mono_items(&mut cx, &mono_items);\n-        for (mono_item, (linkage, visibility)) in mono_items {\n-            let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+        for (mono_item, _) in mono_items {\n             match mono_item {\n                 MonoItem::Fn(inst) => match backend_config.codegen_mode {\n                     CodegenMode::Aot => unreachable!(),\n                     CodegenMode::Jit => {\n-                        cx.tcx\n-                            .sess\n-                            .time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, inst, linkage));\n+                        cx.tcx.sess.time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, inst));\n                     }\n                     CodegenMode::JitLazy => codegen_shim(&mut cx, inst),\n                 },\n@@ -86,24 +76,17 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n         tcx.sess.fatal(\"Inline asm is not supported in JIT mode\");\n     }\n \n-    crate::main_shim::maybe_create_entry_wrapper(tcx, &mut jit_module, &mut unwind_context);\n     crate::allocator::codegen(tcx, &mut jit_module, &mut unwind_context);\n \n     tcx.sess.abort_if_errors();\n \n     jit_module.finalize_definitions();\n-\n     let _unwind_register_guard = unsafe { unwind_context.register_jit(&jit_module) };\n \n-    let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n-\n     println!(\n         \"Rustc codegen cranelift will JIT run the executable, because -Cllvm-args=mode=jit was passed\"\n     );\n \n-    let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n-        unsafe { ::std::mem::transmute(finalized_main) };\n-\n     let args = ::std::env::var(\"CG_CLIF_JIT_ARGS\").unwrap_or_else(|_| String::new());\n     let args = std::iter::once(&*tcx.crate_name(LOCAL_CRATE).as_str().to_string())\n         .chain(args.split(' '))\n@@ -118,12 +101,58 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     BACKEND_CONFIG.with(|tls_backend_config| {\n         assert!(tls_backend_config.borrow_mut().replace(backend_config).is_none())\n     });\n-    CURRENT_MODULE\n-        .with(|current_module| assert!(current_module.borrow_mut().replace(jit_module).is_none()));\n \n-    let ret = f(args.len() as c_int, argv.as_ptr());\n+    let (main_def_id, entry_ty) = tcx.entry_fn(LOCAL_CRATE).unwrap();\n+    let instance = Instance::mono(tcx, main_def_id.to_def_id()).polymorphize(tcx);\n+\n+    match entry_ty {\n+        EntryFnType::Main => {\n+            // FIXME set program arguments somehow\n \n-    std::process::exit(ret);\n+            let main_sig = Signature {\n+                params: vec![],\n+                returns: vec![],\n+                call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n+            };\n+            let main_func_id = jit_module\n+                .declare_function(tcx.symbol_name(instance).name, Linkage::Import, &main_sig)\n+                .unwrap();\n+            let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n+\n+            CURRENT_MODULE.with(|current_module| {\n+                assert!(current_module.borrow_mut().replace(jit_module).is_none())\n+            });\n+\n+            let f: extern \"C\" fn() = unsafe { ::std::mem::transmute(finalized_main) };\n+            f();\n+            std::process::exit(0);\n+        }\n+        EntryFnType::Start => {\n+            let start_sig = Signature {\n+                params: vec![\n+                    AbiParam::new(jit_module.target_config().pointer_type()),\n+                    AbiParam::new(jit_module.target_config().pointer_type()),\n+                ],\n+                returns: vec![AbiParam::new(\n+                    jit_module.target_config().pointer_type(), /*isize*/\n+                )],\n+                call_conv: CallConv::triple_default(&crate::target_triple(tcx.sess)),\n+            };\n+            let start_func_id = jit_module\n+                .declare_function(tcx.symbol_name(instance).name, Linkage::Import, &start_sig)\n+                .unwrap();\n+            let finalized_start: *const u8 = jit_module.get_finalized_function(start_func_id);\n+\n+            CURRENT_MODULE.with(|current_module| {\n+                assert!(current_module.borrow_mut().replace(jit_module).is_none())\n+            });\n+\n+            let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n+                unsafe { ::std::mem::transmute(finalized_start) };\n+            let ret = f(args.len() as c_int, argv.as_ptr());\n+            std::process::exit(ret);\n+        }\n+    }\n }\n \n #[no_mangle]\n@@ -144,8 +173,7 @@ extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>) -> *const u8\n             jit_module.prepare_for_function_redefine(func_id).unwrap();\n \n             let mut cx = crate::CodegenCx::new(tcx, backend_config, jit_module, false);\n-            tcx.sess\n-                .time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, instance, Linkage::Export));\n+            tcx.sess.time(\"codegen fn\", || crate::base::codegen_fn(&mut cx, instance));\n \n             let (global_asm, _debug_context, unwind_context) = cx.finalize();\n             assert!(global_asm.is_empty());\n@@ -220,7 +248,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n     imported_symbols\n }\n \n-pub(super) fn codegen_shim<'tcx>(cx: &mut CodegenCx<'_, 'tcx>, inst: Instance<'tcx>) {\n+fn codegen_shim<'tcx>(cx: &mut CodegenCx<'_, 'tcx>, inst: Instance<'tcx>) {\n     let tcx = cx.tcx;\n \n     let pointer_type = cx.module.target_config().pointer_type();\n@@ -267,7 +295,8 @@ pub(super) fn codegen_shim<'tcx>(cx: &mut CodegenCx<'_, 'tcx>, inst: Instance<'t\n         .define_function(\n             func_id,\n             &mut Context::for_function(trampoline),\n-            &mut cranelift_codegen::binemit::NullTrapSink {},\n+            &mut NullTrapSink {},\n+            &mut NullStackMapSink {},\n         )\n         .unwrap();\n }"}, {"sha": "d49182a07b79e5d6074d7e1d6e016c3498a9544d", "filename": "compiler/rustc_codegen_cranelift/src/driver/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -44,13 +44,19 @@ fn predefine_mono_items<'tcx>(\n     mono_items: &[(MonoItem<'tcx>, (RLinkage, Visibility))],\n ) {\n     cx.tcx.sess.time(\"predefine functions\", || {\n+        let is_compiler_builtins = cx.tcx.is_compiler_builtins(LOCAL_CRATE);\n         for &(mono_item, (linkage, visibility)) in mono_items {\n             match mono_item {\n                 MonoItem::Fn(instance) => {\n                     let name = cx.tcx.symbol_name(instance).name.to_string();\n                     let _inst_guard = crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, name));\n                     let sig = get_function_sig(cx.tcx, cx.module.isa().triple(), instance);\n-                    let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n+                    let linkage = crate::linkage::get_clif_linkage(\n+                        mono_item,\n+                        linkage,\n+                        visibility,\n+                        is_compiler_builtins,\n+                    );\n                     cx.module.declare_function(&name, linkage, &sig).unwrap();\n                 }\n                 MonoItem::Static(_) | MonoItem::GlobalAsm(_) => {}"}, {"sha": "1fb5e86aed7df4d74400ede3062e23cd6c7265d4", "filename": "compiler/rustc_codegen_cranelift/src/inline_asm.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Finline_asm.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -20,6 +20,10 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n     if template.is_empty() {\n         // Black box\n         return;\n+    } else if template[0] == InlineAsmTemplatePiece::String(\"int $$0x29\".to_string()) {\n+        let true_ = fx.bcx.ins().iconst(types::I32, 1);\n+        fx.bcx.ins().trapnz(true_, TrapCode::User(1));\n+        return;\n     }\n \n     let mut slot_size = Size::from_bytes(0);\n@@ -193,8 +197,9 @@ fn call_inline_asm<'tcx>(\n         offset: None,\n         size: u32::try_from(slot_size.bytes()).unwrap(),\n     });\n-    #[cfg(debug_assertions)]\n-    fx.add_comment(stack_slot, \"inline asm scratch slot\");\n+    if fx.clif_comments.enabled() {\n+        fx.add_comment(stack_slot, \"inline asm scratch slot\");\n+    }\n \n     let inline_asm_func = fx\n         .cx\n@@ -210,8 +215,9 @@ fn call_inline_asm<'tcx>(\n         )\n         .unwrap();\n     let inline_asm_func = fx.cx.module.declare_func_in_func(inline_asm_func, &mut fx.bcx.func);\n-    #[cfg(debug_assertions)]\n-    fx.add_comment(inline_asm_func, asm_name);\n+    if fx.clif_comments.enabled() {\n+        fx.add_comment(inline_asm_func, asm_name);\n+    }\n \n     for (_reg, offset, value) in inputs {\n         fx.bcx.ins().stack_store(value, stack_slot, i32::try_from(offset.bytes()).unwrap());"}, {"sha": "c7ce32b385e9434a29fd4410e2b8b308112d867c", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -88,7 +88,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let idx_bytes = match idx_const {\n                     ConstValue::ByRef { alloc, offset } => {\n                         let ptr = Pointer::new(AllocId(0 /* dummy */), offset);\n-                        let size = Size::from_bytes(4 * u64::from(ret_lane_count) /* size_of([u32; ret_lane_count]) */);\n+                        let size = Size::from_bytes(4 * ret_lane_count /* size_of([u32; ret_lane_count]) */);\n                         alloc.get_bytes(fx, ptr, size).unwrap()\n                     }\n                     _ => unreachable!(\"{:?}\", idx_const),"}, {"sha": "720d2a1253445e07b2fac3f48b31d89af64a1b6c", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -1,13 +1,4 @@\n-#![feature(\n-    rustc_private,\n-    decl_macro,\n-    type_alias_impl_trait,\n-    associated_type_bounds,\n-    never_type,\n-    try_blocks,\n-    box_patterns,\n-    hash_drain_filter\n-)]\n+#![feature(rustc_private, decl_macro, never_type, hash_drain_filter)]\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n #![warn(unreachable_pub)]\n@@ -57,6 +48,7 @@ mod base;\n mod cast;\n mod codegen_i128;\n mod common;\n+mod compiler_builtins;\n mod constant;\n mod debuginfo;\n mod discriminant;\n@@ -224,8 +216,10 @@ pub struct CraneliftCodegenBackend {\n \n impl CodegenBackend for CraneliftCodegenBackend {\n     fn init(&self, sess: &Session) {\n-        if sess.lto() != rustc_session::config::Lto::No && sess.opts.cg.embed_bitcode {\n-            sess.warn(\"LTO is not supported. You may get a linker error.\");\n+        use rustc_session::config::Lto;\n+        match sess.lto() {\n+            Lto::No | Lto::ThinLocal => {}\n+            Lto::Thin | Lto::Fat => sess.warn(\"LTO is not supported. You may get a linker error.\"),\n         }\n     }\n \n@@ -240,9 +234,9 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         vec![]\n     }\n \n-    fn codegen_crate<'tcx>(\n+    fn codegen_crate(\n         &self,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n@@ -252,9 +246,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             BackendConfig::from_opts(&tcx.sess.opts.cg.llvm_args)\n                 .unwrap_or_else(|err| tcx.sess.fatal(&err))\n         };\n-        let res = driver::codegen_crate(tcx, metadata, need_metadata_module, config);\n-\n-        res\n+        driver::codegen_crate(tcx, metadata, need_metadata_module, config)\n     }\n \n     fn join_codegen(\n@@ -300,9 +292,9 @@ fn build_isa(sess: &Session) -> Box<dyn isa::TargetIsa + 'static> {\n     let mut flags_builder = settings::builder();\n     flags_builder.enable(\"is_pic\").unwrap();\n     flags_builder.set(\"enable_probestack\", \"false\").unwrap(); // __cranelift_probestack is not provided\n-    flags_builder\n-        .set(\"enable_verifier\", if cfg!(debug_assertions) { \"true\" } else { \"false\" })\n-        .unwrap();\n+    let enable_verifier =\n+        cfg!(debug_assertions) || std::env::var(\"CG_CLIF_ENABLE_VERIFIER\").is_ok();\n+    flags_builder.set(\"enable_verifier\", if enable_verifier { \"true\" } else { \"false\" }).unwrap();\n \n     let tls_model = match target_triple.binary_format {\n         BinaryFormat::Elf => \"elf_gd\",\n@@ -314,18 +306,17 @@ fn build_isa(sess: &Session) -> Box<dyn isa::TargetIsa + 'static> {\n \n     flags_builder.set(\"enable_simd\", \"true\").unwrap();\n \n+    flags_builder.set(\"enable_llvm_abi_extensions\", \"true\").unwrap();\n+\n     use rustc_session::config::OptLevel;\n     match sess.opts.optimize {\n         OptLevel::No => {\n             flags_builder.set(\"opt_level\", \"none\").unwrap();\n         }\n         OptLevel::Less | OptLevel::Default => {}\n-        OptLevel::Aggressive => {\n+        OptLevel::Size | OptLevel::SizeMin | OptLevel::Aggressive => {\n             flags_builder.set(\"opt_level\", \"speed_and_size\").unwrap();\n         }\n-        OptLevel::Size | OptLevel::SizeMin => {\n-            sess.warn(\"Optimizing for size is not supported. Just ignoring the request\");\n-        }\n     }\n \n     let flags = settings::Flags::new(flags_builder);"}, {"sha": "a564a59f7251061cd8a9363136db637220f6afbf", "filename": "compiler/rustc_codegen_cranelift/src/linkage.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flinkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flinkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flinkage.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -6,8 +6,10 @@ pub(crate) fn get_clif_linkage(\n     mono_item: MonoItem<'_>,\n     linkage: RLinkage,\n     visibility: Visibility,\n+    is_compiler_builtins: bool,\n ) -> Linkage {\n     match (linkage, visibility) {\n+        (RLinkage::External, Visibility::Default) if is_compiler_builtins => Linkage::Hidden,\n         (RLinkage::External, Visibility::Default) => Linkage::Export,\n         (RLinkage::Internal, Visibility::Default) => Linkage::Local,\n         (RLinkage::External, Visibility::Hidden) => Linkage::Hidden,"}, {"sha": "a6266f507765fdf663f9ab1b4525d12115a00cfd", "filename": "compiler/rustc_codegen_cranelift/src/main_shim.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmain_shim.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -1,3 +1,4 @@\n+use cranelift_codegen::binemit::{NullStackMapSink, NullTrapSink};\n use rustc_hir::LangItem;\n use rustc_session::config::EntryFnType;\n \n@@ -100,12 +101,8 @@ pub(crate) fn maybe_create_entry_wrapper(\n             bcx.seal_all_blocks();\n             bcx.finalize();\n         }\n-        m.define_function(\n-            cmain_func_id,\n-            &mut ctx,\n-            &mut cranelift_codegen::binemit::NullTrapSink {},\n-        )\n-        .unwrap();\n+        m.define_function(cmain_func_id, &mut ctx, &mut NullTrapSink {}, &mut NullStackMapSink {})\n+            .unwrap();\n         unwind_context.add_function(cmain_func_id, &ctx, m.isa());\n     }\n }"}, {"sha": "c5189c972cd2ef79776ebe2231c588d7e785538a", "filename": "compiler/rustc_codegen_cranelift/src/metadata.rs", "status": "modified", "additions": 44, "deletions": 26, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -1,11 +1,11 @@\n //! Reading and writing of the rustc metadata for rlibs and dylibs\n \n-use std::convert::TryFrom;\n use std::fs::File;\n+use std::ops::Deref;\n use std::path::Path;\n \n use rustc_codegen_ssa::METADATA_FILENAME;\n-use rustc_data_structures::owning_ref::OwningRef;\n+use rustc_data_structures::owning_ref::{OwningRef, StableAddress};\n use rustc_data_structures::rustc_erase_owner;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader};\n@@ -17,38 +17,56 @@ use crate::backend::WriteMetadata;\n \n pub(crate) struct CraneliftMetadataLoader;\n \n+struct StableMmap(memmap2::Mmap);\n+\n+impl Deref for StableMmap {\n+    type Target = [u8];\n+\n+    fn deref(&self) -> &[u8] {\n+        &*self.0\n+    }\n+}\n+\n+unsafe impl StableAddress for StableMmap {}\n+\n+fn load_metadata_with(\n+    path: &Path,\n+    f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n+) -> Result<MetadataRef, String> {\n+    let file = File::open(path).map_err(|e| format!(\"{:?}\", e))?;\n+    let data = unsafe { memmap2::MmapOptions::new().map_copy_read_only(&file) }\n+        .map_err(|e| format!(\"{:?}\", e))?;\n+    let metadata = OwningRef::new(StableMmap(data)).try_map(f)?;\n+    return Ok(rustc_erase_owner!(metadata.map_owner_box()));\n+}\n+\n impl MetadataLoader for CraneliftMetadataLoader {\n     fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n-        let mut archive = ar::Archive::new(File::open(path).map_err(|e| format!(\"{:?}\", e))?);\n-        // Iterate over all entries in the archive:\n-        while let Some(entry_result) = archive.next_entry() {\n-            let mut entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n-            if entry.header().identifier() == METADATA_FILENAME.as_bytes() {\n-                let mut buf = Vec::with_capacity(\n-                    usize::try_from(entry.header().size())\n-                        .expect(\"Rlib metadata file too big to load into memory.\"),\n-                );\n-                ::std::io::copy(&mut entry, &mut buf).map_err(|e| format!(\"{:?}\", e))?;\n-                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n-                return Ok(rustc_erase_owner!(buf.map_owner_box()));\n+        load_metadata_with(path, |data| {\n+            let archive = object::read::archive::ArchiveFile::parse(&*data)\n+                .map_err(|e| format!(\"{:?}\", e))?;\n+\n+            for entry_result in archive.members() {\n+                let entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n+                if entry.name() == METADATA_FILENAME.as_bytes() {\n+                    return Ok(entry.data());\n+                }\n             }\n-        }\n \n-        Err(\"couldn't find metadata entry\".to_string())\n+            Err(\"couldn't find metadata entry\".to_string())\n+        })\n     }\n \n     fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n         use object::{Object, ObjectSection};\n-        let file = std::fs::read(path).map_err(|e| format!(\"read:{:?}\", e))?;\n-        let file = object::File::parse(&file).map_err(|e| format!(\"parse: {:?}\", e))?;\n-        let buf = file\n-            .section_by_name(\".rustc\")\n-            .ok_or(\"no .rustc section\")?\n-            .data()\n-            .map_err(|e| format!(\"failed to read .rustc section: {:?}\", e))?\n-            .to_owned();\n-        let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf);\n-        Ok(rustc_erase_owner!(buf.map_owner_box()))\n+\n+        load_metadata_with(path, |data| {\n+            let file = object::File::parse(&data).map_err(|e| format!(\"parse: {:?}\", e))?;\n+            file.section_by_name(\".rustc\")\n+                .ok_or(\"no .rustc section\")?\n+                .data()\n+                .map_err(|e| format!(\"failed to read .rustc section: {:?}\", e))\n+        })\n     }\n }\n "}, {"sha": "2ebf30da2d8ba930e973995dac9bc173eea636da", "filename": "compiler/rustc_codegen_cranelift/src/num.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -166,13 +166,11 @@ pub(crate) fn codegen_int_binop<'tcx>(\n         BinOp::Shl => {\n             let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n             let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n             fx.bcx.ins().ishl(lhs, actual_shift)\n         }\n         BinOp::Shr => {\n             let lhs_ty = fx.bcx.func.dfg.value_type(lhs);\n             let actual_shift = fx.bcx.ins().band_imm(rhs, i64::from(lhs_ty.bits() - 1));\n-            let actual_shift = clif_intcast(fx, actual_shift, types::I8, false);\n             if signed {\n                 fx.bcx.ins().sshr(lhs, actual_shift)\n             } else {\n@@ -387,7 +385,7 @@ pub(crate) fn codegen_ptr_binop<'tcx>(\n                 let lhs = in_lhs.load_scalar(fx);\n                 let rhs = in_rhs.load_scalar(fx);\n \n-                return codegen_compare_bin_op(fx, bin_op, false, lhs, rhs);\n+                codegen_compare_bin_op(fx, bin_op, false, lhs, rhs)\n             }\n             BinOp::Offset => {\n                 let pointee_ty = in_lhs.layout().ty.builtin_deref(true).unwrap().ty;\n@@ -396,10 +394,10 @@ pub(crate) fn codegen_ptr_binop<'tcx>(\n                 let ptr_diff = fx.bcx.ins().imul_imm(offset, pointee_size as i64);\n                 let base_val = base.load_scalar(fx);\n                 let res = fx.bcx.ins().iadd(base_val, ptr_diff);\n-                return CValue::by_val(res, base.layout());\n+                CValue::by_val(res, base.layout())\n             }\n             _ => unreachable!(\"{:?}({:?}, {:?})\", bin_op, in_lhs, in_rhs),\n-        };\n+        }\n     } else {\n         let (lhs_ptr, lhs_extra) = in_lhs.load_scalar_pair(fx);\n         let (rhs_ptr, rhs_extra) = in_rhs.load_scalar_pair(fx);"}, {"sha": "8bb02a3e5585482b4e88a0135524f494a74ff184", "filename": "compiler/rustc_codegen_cranelift/src/optimize/stack2reg.rs", "status": "modified", "additions": 47, "deletions": 42, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Foptimize%2Fstack2reg.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -181,7 +181,6 @@ impl<'a> OptimizeContext<'a> {\n \n pub(super) fn optimize_function(\n     ctx: &mut Context,\n-    #[cfg_attr(not(debug_assertions), allow(unused_variables))]\n     clif_comments: &mut crate::pretty_clif::CommentWriter,\n ) {\n     combine_stack_addr_with_load_store(&mut ctx.func);\n@@ -192,8 +191,7 @@ pub(super) fn optimize_function(\n \n     remove_unused_stack_addr_and_stack_load(&mut opt_ctx);\n \n-    #[cfg(debug_assertions)]\n-    {\n+    if clif_comments.enabled() {\n         for (&OrdStackSlot(stack_slot), usage) in &opt_ctx.stack_slot_usage_map {\n             clif_comments.add_comment(stack_slot, format!(\"used by: {:?}\", usage));\n         }\n@@ -209,25 +207,27 @@ pub(super) fn optimize_function(\n         for load in users.stack_load.clone().into_iter() {\n             let potential_stores = users.potential_stores_for_load(&opt_ctx.ctx, load);\n \n-            #[cfg(debug_assertions)]\n-            for &store in &potential_stores {\n-                clif_comments.add_comment(\n-                    load,\n-                    format!(\n-                        \"Potential store -> load forwarding {} -> {} ({:?}, {:?})\",\n-                        opt_ctx.ctx.func.dfg.display_inst(store, None),\n-                        opt_ctx.ctx.func.dfg.display_inst(load, None),\n-                        spatial_overlap(&opt_ctx.ctx.func, store, load),\n-                        temporal_order(&opt_ctx.ctx, store, load),\n-                    ),\n-                );\n+            if clif_comments.enabled() {\n+                for &store in &potential_stores {\n+                    clif_comments.add_comment(\n+                        load,\n+                        format!(\n+                            \"Potential store -> load forwarding {} -> {} ({:?}, {:?})\",\n+                            opt_ctx.ctx.func.dfg.display_inst(store, None),\n+                            opt_ctx.ctx.func.dfg.display_inst(load, None),\n+                            spatial_overlap(&opt_ctx.ctx.func, store, load),\n+                            temporal_order(&opt_ctx.ctx, store, load),\n+                        ),\n+                    );\n+                }\n             }\n \n             match *potential_stores {\n                 [] => {\n-                    #[cfg(debug_assertions)]\n-                    clif_comments\n-                        .add_comment(load, \"[BUG?] Reading uninitialized memory\".to_string());\n+                    if clif_comments.enabled() {\n+                        clif_comments\n+                            .add_comment(load, \"[BUG?] Reading uninitialized memory\".to_string());\n+                    }\n                 }\n                 [store]\n                     if spatial_overlap(&opt_ctx.ctx.func, store, load) == SpatialOverlap::Full\n@@ -237,9 +237,12 @@ pub(super) fn optimize_function(\n                     // Only one store could have been the origin of the value.\n                     let stored_value = opt_ctx.ctx.func.dfg.inst_args(store)[0];\n \n-                    #[cfg(debug_assertions)]\n-                    clif_comments\n-                        .add_comment(load, format!(\"Store to load forward {} -> {}\", store, load));\n+                    if clif_comments.enabled() {\n+                        clif_comments.add_comment(\n+                            load,\n+                            format!(\"Store to load forward {} -> {}\", store, load),\n+                        );\n+                    }\n \n                     users.change_load_to_alias(&mut opt_ctx.ctx.func, load, stored_value);\n                 }\n@@ -250,33 +253,35 @@ pub(super) fn optimize_function(\n         for store in users.stack_store.clone().into_iter() {\n             let potential_loads = users.potential_loads_of_store(&opt_ctx.ctx, store);\n \n-            #[cfg(debug_assertions)]\n-            for &load in &potential_loads {\n-                clif_comments.add_comment(\n-                    store,\n-                    format!(\n-                        \"Potential load from store {} <- {} ({:?}, {:?})\",\n-                        opt_ctx.ctx.func.dfg.display_inst(load, None),\n-                        opt_ctx.ctx.func.dfg.display_inst(store, None),\n-                        spatial_overlap(&opt_ctx.ctx.func, store, load),\n-                        temporal_order(&opt_ctx.ctx, store, load),\n-                    ),\n-                );\n+            if clif_comments.enabled() {\n+                for &load in &potential_loads {\n+                    clif_comments.add_comment(\n+                        store,\n+                        format!(\n+                            \"Potential load from store {} <- {} ({:?}, {:?})\",\n+                            opt_ctx.ctx.func.dfg.display_inst(load, None),\n+                            opt_ctx.ctx.func.dfg.display_inst(store, None),\n+                            spatial_overlap(&opt_ctx.ctx.func, store, load),\n+                            temporal_order(&opt_ctx.ctx, store, load),\n+                        ),\n+                    );\n+                }\n             }\n \n             if potential_loads.is_empty() {\n                 // Never loaded; can safely remove all stores and the stack slot.\n                 // FIXME also remove stores when there is always a next store before a load.\n \n-                #[cfg(debug_assertions)]\n-                clif_comments.add_comment(\n-                    store,\n-                    format!(\n-                        \"Remove dead stack store {} of {}\",\n-                        opt_ctx.ctx.func.dfg.display_inst(store, None),\n-                        stack_slot.0\n-                    ),\n-                );\n+                if clif_comments.enabled() {\n+                    clif_comments.add_comment(\n+                        store,\n+                        format!(\n+                            \"Remove dead stack store {} of {}\",\n+                            opt_ctx.ctx.func.dfg.display_inst(store, None),\n+                            stack_slot.0\n+                        ),\n+                    );\n+                }\n \n                 users.remove_dead_store(&mut opt_ctx.ctx.func, store);\n             }"}, {"sha": "31d827f83bfab94543e32a1ffbe0f3918b6d62fd", "filename": "compiler/rustc_codegen_cranelift/src/pointer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpointer.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -39,8 +39,7 @@ impl Pointer {\n         Pointer { base: PointerBase::Dangling(align), offset: Offset32::new(0) }\n     }\n \n-    #[cfg(debug_assertions)]\n-    pub(crate) fn base_and_offset(self) -> (PointerBase, Offset32) {\n+    pub(crate) fn debug_base_and_offset(self) -> (PointerBase, Offset32) {\n         (self.base, self.offset)\n     }\n "}, {"sha": "d22ea3772eee7b24457c1bac4b550ea2d3e3a769", "filename": "compiler/rustc_codegen_cranelift/src/pretty_clif.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -69,13 +69,15 @@ use crate::prelude::*;\n \n #[derive(Debug)]\n pub(crate) struct CommentWriter {\n+    enabled: bool,\n     global_comments: Vec<String>,\n     entity_comments: FxHashMap<AnyEntity, String>,\n }\n \n impl CommentWriter {\n     pub(crate) fn new<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> Self {\n-        let global_comments = if cfg!(debug_assertions) {\n+        let enabled = should_write_ir(tcx);\n+        let global_comments = if enabled {\n             vec![\n                 format!(\"symbol {}\", tcx.symbol_name(instance).name),\n                 format!(\"instance {:?}\", instance),\n@@ -86,13 +88,17 @@ impl CommentWriter {\n             vec![]\n         };\n \n-        CommentWriter { global_comments, entity_comments: FxHashMap::default() }\n+        CommentWriter { enabled, global_comments, entity_comments: FxHashMap::default() }\n     }\n }\n \n-#[cfg(debug_assertions)]\n impl CommentWriter {\n+    pub(crate) fn enabled(&self) -> bool {\n+        self.enabled\n+    }\n+\n     pub(crate) fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n+        debug_assert!(self.enabled);\n         self.global_comments.push(comment.into());\n     }\n \n@@ -101,6 +107,8 @@ impl CommentWriter {\n         entity: E,\n         comment: S,\n     ) {\n+        debug_assert!(self.enabled);\n+\n         use std::collections::hash_map::Entry;\n         match self.entity_comments.entry(entity.into()) {\n             Entry::Occupied(mut occ) => {\n@@ -179,7 +187,6 @@ impl FuncWriter for &'_ CommentWriter {\n     }\n }\n \n-#[cfg(debug_assertions)]\n impl FunctionCx<'_, '_, '_> {\n     pub(crate) fn add_global_comment<S: Into<String>>(&mut self, comment: S) {\n         self.clif_comments.add_global_comment(comment);\n@@ -198,8 +205,8 @@ pub(crate) fn should_write_ir(tcx: TyCtxt<'_>) -> bool {\n     tcx.sess.opts.output_types.contains_key(&OutputType::LlvmAssembly)\n }\n \n-pub(crate) fn write_ir_file<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+pub(crate) fn write_ir_file(\n+    tcx: TyCtxt<'_>,\n     name: &str,\n     write: impl FnOnce(&mut dyn Write) -> std::io::Result<()>,\n ) {\n@@ -217,10 +224,7 @@ pub(crate) fn write_ir_file<'tcx>(\n \n     let clif_file_name = clif_output_dir.join(name);\n \n-    let res: std::io::Result<()> = try {\n-        let mut file = std::fs::File::create(clif_file_name)?;\n-        write(&mut file)?;\n-    };\n+    let res = std::fs::File::create(clif_file_name).and_then(|mut file| write(&mut file));\n     if let Err(err) = res {\n         tcx.sess.warn(&format!(\"error writing ir file: {}\", err));\n     }"}, {"sha": "1ab0703e981e73f7f5724b5e5e085696474cc8a4", "filename": "compiler/rustc_codegen_cranelift/src/trap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Ftrap.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -17,8 +17,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, '_>, msg: &str) {\n         )\n         .unwrap();\n     let puts = fx.cx.module.declare_func_in_func(puts, &mut fx.bcx.func);\n-    #[cfg(debug_assertions)]\n-    {\n+    if fx.clif_comments.enabled() {\n         fx.add_comment(puts, \"puts\");\n     }\n "}, {"sha": "b97d39009847a01cfb9f0dd09c02b39a8b8045b4", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5444b46234627289c6dded36413be3a5fa6afdbd/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=5444b46234627289c6dded36413be3a5fa6afdbd", "patch": "@@ -2,7 +2,6 @@\n \n use crate::prelude::*;\n \n-use cranelift_codegen::entity::EntityRef;\n use cranelift_codegen::ir::immediates::Offset32;\n \n fn codegen_field<'tcx>(\n@@ -414,7 +413,7 @@ impl<'tcx> CPlace<'tcx> {\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n         from: CValue<'tcx>,\n-        #[cfg_attr(not(debug_assertions), allow(unused_variables))] method: &'static str,\n+        method: &'static str,\n     ) {\n         fn transmute_value<'tcx>(\n             fx: &mut FunctionCx<'_, '_, 'tcx>,\n@@ -462,8 +461,7 @@ impl<'tcx> CPlace<'tcx> {\n \n         assert_eq!(self.layout().size, from.layout().size);\n \n-        #[cfg(debug_assertions)]\n-        {\n+        if fx.clif_comments.enabled() {\n             use cranelift_codegen::cursor::{Cursor, CursorPosition};\n             let cur_block = match fx.bcx.cursor().position() {\n                 CursorPosition::After(block) => block,\n@@ -707,6 +705,19 @@ pub(crate) fn assert_assignable<'tcx>(\n             }\n             // dyn for<'r> Trait<'r> -> dyn Trait<'_> is allowed\n         }\n+        (&ty::Adt(adt_def_a, substs_a), &ty::Adt(adt_def_b, substs_b))\n+            if adt_def_a.did == adt_def_b.did =>\n+        {\n+            let mut types_a = substs_a.types();\n+            let mut types_b = substs_b.types();\n+            loop {\n+                match (types_a.next(), types_b.next()) {\n+                    (Some(a), Some(b)) => assert_assignable(fx, a, b),\n+                    (None, None) => return,\n+                    (Some(_), None) | (None, Some(_)) => panic!(\"{:#?}/{:#?}\", from_ty, to_ty),\n+                }\n+            }\n+        }\n         _ => {\n             assert_eq!(\n                 from_ty, to_ty,"}]}