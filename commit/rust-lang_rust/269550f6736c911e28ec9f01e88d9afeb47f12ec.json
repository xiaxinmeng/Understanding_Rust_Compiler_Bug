{"sha": "269550f6736c911e28ec9f01e88d9afeb47f12ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2OTU1MGY2NzM2YzkxMWUyOGVjOWYwMWU4OGQ5YWZlYjQ3ZjEyZWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-09T04:10:04Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-09T04:10:43Z"}, "message": "build: Use clang to compile the runtime if available", "tree": {"sha": "2b0298d7d807d5786a900791acd45fe1f87c0f65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b0298d7d807d5786a900791acd45fe1f87c0f65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/269550f6736c911e28ec9f01e88d9afeb47f12ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/269550f6736c911e28ec9f01e88d9afeb47f12ec", "html_url": "https://github.com/rust-lang/rust/commit/269550f6736c911e28ec9f01e88d9afeb47f12ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/269550f6736c911e28ec9f01e88d9afeb47f12ec/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7641142ce2a444f96f11ddbb16c08b2d3e19c1c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7641142ce2a444f96f11ddbb16c08b2d3e19c1c3", "html_url": "https://github.com/rust-lang/rust/commit/7641142ce2a444f96f11ddbb16c08b2d3e19c1c3"}], "stats": {"total": 123, "additions": 74, "deletions": 49}, "files": [{"sha": "f24de59c1d17cef47da2890d6b83e97e30dd6c02", "filename": "configure", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/269550f6736c911e28ec9f01e88d9afeb47f12ec/configure", "raw_url": "https://github.com/rust-lang/rust/raw/269550f6736c911e28ec9f01e88d9afeb47f12ec/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=269550f6736c911e28ec9f01e88d9afeb47f12ec", "patch": "@@ -194,12 +194,13 @@ putvar CFG_CPUTYPE\n putvar CFG_CONFIGURE_ARGS\n \n step_msg \"looking for build programs\"\n-probe_need CFG_GCC          gcc\n probe_need CFG_GIT          git\n probe_need CFG_PERL         perl\n probe_need CFG_PYTHON       python\n probe_need CFG_CURL         curl\n \n+probe CFG_CLANG            clang\n+probe CFG_GCC              gcc\n probe CFG_LLVM_CONFIG      llvm-config\n probe CFG_VALGRIND         valgrind\n probe CFG_OCAMLC           ocamlc\n@@ -211,6 +212,11 @@ probe CFG_MAKEINFO         makeinfo\n probe CFG_TEXI2PDF         texi2pdf\n probe CFG_TEX              tex\n \n+if [ -z \"$CFG_CLANG\" -a -z \"$CFG_GCC\" ]\n+then\n+    err \"either clang or gcc is required\"\n+fi\n+\n # Valgrind is only reliable on Linux. On Windows it doesn't work at all, and\n # on the Mac the dynamic linker causes Valgrind to emit a huge stream of\n # errors."}, {"sha": "0b01f17a8c4f2aa0c6fe1b0d7ca96aa27af413bb", "filename": "mk/platform.mk", "status": "modified", "additions": 49, "deletions": 30, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=269550f6736c911e28ec9f01e88d9afeb47f12ec", "patch": "@@ -1,6 +1,6 @@\n \n-CFG_GCC_CFLAGS := -fno-strict-aliasing\n-CFG_GCC_LINK_FLAGS :=\n+CFG_GCCISH_CFLAGS := -fno-strict-aliasing\n+CFG_GCCISH_LINK_FLAGS :=\n \n # On Darwin, we need to run dsymutil so the debugging information ends\n # up in the right place.  On other platforms, it automatically gets\n@@ -9,11 +9,11 @@ CFG_DSYMUTIL := true\n \n ifeq ($(CFG_OSTYPE), FreeBSD)\n   CFG_LIB_NAME=lib$(1).so\n-  CFG_GCC_CFLAGS += -fPIC -march=i686 -I/usr/local/include -O2\n-  CFG_GCC_LINK_FLAGS += -shared -fPIC -lpthread -lrt\n+  CFG_GCCISH_CFLAGS += -fPIC -march=i686 -I/usr/local/include -O2\n+  CFG_GCCISH_LINK_FLAGS += -shared -fPIC -lpthread -lrt\n   ifeq ($(CFG_CPUTYPE), x86_64)\n-    CFG_GCC_CFLAGS += -m32\n-    CFG_GCC_LINK_FLAGS += -m32\n+    CFG_GCCISH_CFLAGS += -m32\n+    CFG_GCCISH_LINK_FLAGS += -m32\n   endif\n   CFG_UNIXY := 1\n   CFG_LDENV := LD_LIBRARY_PATH\n@@ -22,14 +22,14 @@ endif\n \n ifeq ($(CFG_OSTYPE), Linux)\n   CFG_LIB_NAME=lib$(1).so\n-  CFG_GCC_CFLAGS += -fPIC -march=i686 -O2\n-  CFG_GCC_LINK_FLAGS += -shared -fPIC -ldl -lpthread -lrt\n-  CFG_GCC_DEF_FLAG := -Wl,--export-dynamic,--dynamic-list=\n-  CFG_GCC_PRE_LIB_FLAGS := -Wl,-whole-archive\n-  CFG_GCC_POST_LIB_FLAGS := -Wl,-no-whole-archive\n+  CFG_GCCISH_CFLAGS += -fPIC -march=i686 -O2\n+  CFG_GCCISH_LINK_FLAGS += -shared -fPIC -ldl -lpthread -lrt\n+  CFG_GCCISH_DEF_FLAG := -Wl,--export-dynamic,--dynamic-list=\n+  CFG_GCCISH_PRE_LIB_FLAGS := -Wl,-whole-archive\n+  CFG_GCCISH_POST_LIB_FLAGS := -Wl,-no-whole-archive\n   ifeq ($(CFG_CPUTYPE), x86_64)\n-    CFG_GCC_CFLAGS += -m32\n-    CFG_GCC_LINK_FLAGS += -m32\n+    CFG_GCCISH_CFLAGS += -m32\n+    CFG_GCCISH_LINK_FLAGS += -m32\n   endif\n   CFG_UNIXY := 1\n   CFG_LDENV := LD_LIBRARY_PATH\n@@ -40,16 +40,21 @@ ifeq ($(CFG_OSTYPE), Darwin)\n   CFG_LIB_NAME=lib$(1).dylib\n   CFG_UNIXY := 1\n   CFG_LDENV := DYLD_LIBRARY_PATH\n-  CFG_GCC_LINK_FLAGS += -dynamiclib -lpthread\n-  CFG_GCC_DEF_FLAG := -Wl,-exported_symbols_list,\n+  CFG_GCCISH_LINK_FLAGS += -dynamiclib -lpthread\n+  CFG_GCCISH_DEF_FLAG := -Wl,-exported_symbols_list,\n   # Darwin has a very blurry notion of \"64 bit\", and claims it's running\n   # \"on an i386\" when the whole userspace is 64-bit and the compiler\n   # emits 64-bit binaries by default. So we just force -m32 here. Smarter\n   # approaches welcome!\n   #\n   # NB: Currently GCC's optimizer breaks rustrt (task-comm-1 hangs) on Darwin.\n   CFG_GCC_CFLAGS += -m32 -O0\n-  CFG_GCC_LINK_FLAGS += -m32\n+  CFG_CLANG_CFLAGS += -m32 -O2\n+  ifeq ($(CFG_CPUTYPE), x86_64)\n+    CFG_GCCISH_CFLAGS += -arch i386\n+    CFG_GCCISH_LINK_FLAGS += -arch i386\n+  endif\n+  CFG_GCCISH_LINK_FLAGS += -m32\n   CFG_DSYMUTIL := dsymutil\n   CFG_DEF_SUFFIX := .darwin.def\n endif\n@@ -85,8 +90,8 @@ ifdef CFG_WINDOWSY\n   ifdef CFG_FLEXLINK\n     CFG_BOOT_NATIVE := 1\n   endif\n-  CFG_GCC_CFLAGS += -march=i686 -O2\n-  CFG_GCC_LINK_FLAGS += -shared -fPIC\n+  CFG_GCCISH_CFLAGS += -march=i686 -O2\n+  CFG_GCCISH_LINK_FLAGS += -shared -fPIC\n   CFG_DEF_SUFFIX := .def\n endif\n \n@@ -112,16 +117,16 @@ ifdef CFG_UNIXY\n     CFG_RUN_TEST=PATH=$(CFG_LDPATH):$(call CFG_TESTLIB,$(1)) $(1)\n \n     CFG_INFO := $(info cfg: mingw-cross)\n-    CFG_GCC_CROSS := i586-mingw32msvc-\n+    CFG_GCCISH_CROSS := i586-mingw32msvc-\n     CFG_BOOT_FLAGS += -t win32-x86-pe\n     ifdef CFG_VALGRIND\n       CFG_VALGRIND += wine\n     endif\n-    CFG_GCC_CFLAGS := -march=i686\n-    CFG_GCC_LINK_FLAGS := -shared\n+    CFG_GCCISH_CFLAGS := -march=i686\n+    CFG_GCCISH_LINK_FLAGS := -shared\n     ifeq ($(CFG_CPUTYPE), x86_64)\n-      CFG_GCC_CFLAGS += -m32\n-      CFG_GCC_LINK_FLAGS += -m32\n+      CFG_GCCISH_CFLAGS += -m32\n+      CFG_GCCISH_LINK_FLAGS += -m32\n     endif\n   endif\n   ifdef CFG_VALGRIND\n@@ -132,14 +137,28 @@ ifdef CFG_UNIXY\n   endif\n endif\n \n+ifdef CFG_CLANG\n+  CFG_INFO := $(info cfg: using clang)\n+  CFG_GCCISH_CFLAGS += -Wall -Werror -fno-rtti -fno-exceptions -g\n+  CFG_GCCISH_LINK_FLAGS += -g\n+  CFG_COMPILE_C = $(CFG_GCCISH_CROSS)clang++ $(CFG_GCCISH_CFLAGS) \\\n+    $(CFG_CLANG_CFLAGS) -c -o $(1) $(2)\n+  CFG_DEPEND_C = $(CFG_GCCISH_CROSS)clang++ $(CFG_GCCISH_CFLAGS) -MT \"$(1)\" \\\n+    -MM $(2)\n+  CFG_LINK_C = $(CFG_GCCISH_CROSS)clang++ $(CFG_GCCISH_LINK_FLAGS) -o $(1) \\\n+    $(CFG_GCCISH_DEF_FLAG)$(3) $(2)\n+else\n ifdef CFG_GCC\n   CFG_INFO := $(info cfg: using gcc)\n-  CFG_GCC_CFLAGS += -Wall -Werror -fno-rtti -fno-exceptions -g\n-  CFG_GCC_LINK_FLAGS += -g\n-  CFG_COMPILE_C = $(CFG_GCC_CROSS)g++ $(CFG_GCC_CFLAGS) -c -o $(1) $(2)\n-  CFG_DEPEND_C = $(CFG_GCC_CROSS)g++ $(CFG_GCC_CFLAGS) -MT \"$(1)\" -MM $(2)\n-  CFG_LINK_C = $(CFG_GCC_CROSS)g++ $(CFG_GCC_LINK_FLAGS) -o $(1) \\\n-               $(CFG_GCC_DEF_FLAG)$(3) $(2)\n+  CFG_GCCISH_CFLAGS += -Wall -Werror -fno-rtti -fno-exceptions -g\n+  CFG_GCCISH_LINK_FLAGS += -g\n+  CFG_COMPILE_C = $(CFG_GCCISH_CROSS)g++ $(CFG_GCCISH_CFLAGS) \\\n+    $(CFG_GCC_CFLAGS) -c -o $(1) $(2)\n+  CFG_DEPEND_C = $(CFG_GCCISH_CROSS)g++ $(CFG_GCCISH_CFLAGS) -MT \"$(1)\" \\\n+    -MM $(2)\n+  CFG_LINK_C = $(CFG_GCCISH_CROSS)g++ $(CFG_GCCISH_LINK_FLAGS) -o $(1) \\\n+               $(CFG_GCCISH_DEF_FLAG)$(3) $(2)\n else\n-  CFG_ERR := $(error please try on a system with gcc)\n+  CFG_ERR := $(error please try on a system with gcc or clang)\n+endif\n endif"}, {"sha": "173d811e8c50f3d06e2d95db316b1c9852384ecf", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=269550f6736c911e28ec9f01e88d9afeb47f12ec", "patch": "@@ -64,7 +64,7 @@ RUNTIME_HDR := rt/globals.h \\\n RUNTIME_DEF := rt/rustrt$(CFG_DEF_SUFFIX)\n RUNTIME_INCS := -I $(S)src/rt/isaac -I $(S)src/rt/uthash\n RUNTIME_OBJS := $(RUNTIME_CS:.cpp=.o)\n-RUNTIME_LIBS := $(CFG_GCC_POST_LIB_FLAGS)\n+RUNTIME_LIBS := $(CFG_GCCISH_POST_LIB_FLAGS)\n \n \n rt/%.o: rt/%.cpp $(MKFILES)"}, {"sha": "7d09bf167231fdc2a93defed4f340d9dcc6f2810", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=269550f6736c911e28ec9f01e88d9afeb47f12ec", "patch": "@@ -29,8 +29,8 @@ rustllvm/$(CFG_RUSTLLVM): rustllvm/rustllvmbits.a $(RUSTLLVM_OBJS_OBJS) \\\n                           $(MKFILES) $(RUSTLLVM_HDR) $(RUSTLLVM_DEF)\n \t@$(call E, link: $@)\n \t$(Q)$(call CFG_LINK_C,$@,$(RUSTLLVM_OBJS_OBJS) \\\n-\t  $(CFG_GCC_PRE_LIB_FLAGS) $(CFG_LLVM_LIBS) \\\n-          $(CFG_GCC_POST_LIB_FLAGS) rustllvm/rustllvmbits.a \\\n+\t  $(CFG_GCCISH_PRE_LIB_FLAGS) $(CFG_LLVM_LIBS) \\\n+          $(CFG_GCCISH_POST_LIB_FLAGS) rustllvm/rustllvmbits.a \\\n \t  $(CFG_LLVM_LIBS) \\\n           $(CFG_LLVM_LDFLAGS),$(RUSTLLVM_DEF))\n "}, {"sha": "ab63b181f08053cfc1ce44ed42ebe97b672684ed", "filename": "mk/stage1.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Fstage1.mk", "raw_url": "https://github.com/rust-lang/rust/raw/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Fstage1.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage1.mk?ref=269550f6736c911e28ec9f01e88d9afeb47f12ec", "patch": "@@ -6,8 +6,8 @@ stage1/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n \n stage1/$(CFG_STDLIB): stage1/std.o stage1/glue.o\n \t@$(call E, link: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n-\t\t-Lstage1 -Lrt -lrustrt\n+\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage1/glue.o $(CFG_GCCISH_LINK_FLAGS) \\\n+        -o $@ $< -Lstage1 -Lrt -lrustrt\n \n stage1/rustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ0)\n \t@$(call E, compile: $@)\n@@ -30,11 +30,11 @@ stage1/intrinsics.bc:\t$(INTRINSICS_BC)\n \n stage1/%.o: stage1/%.s\n \t@$(call E, assemble [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n+\t$(Q)gcc $(CFG_GCCISH_CFLAGS) -o $@ -c $<\n \n stage1/%$(X): stage1/%.o  $(SREQ0)\n \t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o -o $@ $< \\\n+\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage1/glue.o -o $@ $< \\\n       -Lstage1 -Lrustllvm -Lrt -lrustrt -lrustllvm -lstd -lm\n \t@# dsymutil sometimes fails or prints a warning, but the\n \t@# program still runs.  Since it simplifies debugging other"}, {"sha": "f2eba3b0f1441194e453ef993e8a71a26269a216", "filename": "mk/stage2.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Fstage2.mk", "raw_url": "https://github.com/rust-lang/rust/raw/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Fstage2.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage2.mk?ref=269550f6736c911e28ec9f01e88d9afeb47f12ec", "patch": "@@ -6,8 +6,8 @@ stage2/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n \n stage2/$(CFG_STDLIB): stage2/std.o stage2/glue.o\n \t@$(call E, link: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage2/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n-\t\t-Lstage2 -Lrt -lrustrt\n+\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage2/glue.o $(CFG_GCCISH_LINK_FLAGS) -o \\\n+        $@ $< -Lstage2 -Lrt -lrustrt\n \n stage2/rustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ1)\n \t@$(call E, compile: $@)\n@@ -30,11 +30,11 @@ stage2/intrinsics.bc:\t$(INTRINSICS_BC)\n \n stage2/%.o: stage2/%.s\n \t@$(call E, assemble [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n+\t$(Q)gcc $(CFG_GCCISH_CFLAGS) -o $@ -c $<\n \n stage2/%$(X): stage2/%.o  $(SREQ1)\n \t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage2/glue.o -o $@ $< \\\n+\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage2/glue.o -o $@ $< \\\n       -Lstage2 -Lrustllvm -Lrt -lrustrt -lrustllvm -lstd -lm\n \t@# dsymutil sometimes fails or prints a warning, but the\n \t@# program still runs.  Since it simplifies debugging other"}, {"sha": "0c119d1d42a78c88d2464770694150a3398f2457", "filename": "mk/stage3.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Fstage3.mk", "raw_url": "https://github.com/rust-lang/rust/raw/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Fstage3.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage3.mk?ref=269550f6736c911e28ec9f01e88d9afeb47f12ec", "patch": "@@ -6,8 +6,8 @@ stage3/std.o: $(STDLIB_CRATE) $(STDLIB_INPUTS) \\\n \n stage3/$(CFG_STDLIB): stage3/std.o stage3/glue.o\n \t@$(call E, link: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage3/glue.o $(CFG_GCC_LINK_FLAGS) -o $@ $< \\\n-\t\t-Lstage3 -Lrt -lrustrt\n+\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage3/glue.o $(CFG_GCCISH_LINK_FLAGS) -o \\\n+        $@ $< -Lstage3 -Lrt -lrustrt\n \n stage3/rustc.o: $(COMPILER_CRATE) $(COMPILER_INPUTS) $(SREQ2)\n \t@$(call E, compile: $@)\n@@ -30,11 +30,11 @@ stage3/intrinsics.bc:\t$(INTRINSICS_BC)\n \n stage3/%.o: stage3/%.s\n \t@$(call E, assemble [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) -o $@ -c $<\n+\t$(Q)gcc $(CFG_GCCISH_CFLAGS) -o $@ -c $<\n \n stage3/%$(X): stage3/%.o  $(SREQ2)\n \t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage3/glue.o -o $@ $< \\\n+\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage3/glue.o -o $@ $< \\\n       -Lstage3 -Lrustllvm -Lrt -lrustrt -lrustllvm -lstd -lm\n \t@# dsymutil sometimes fails or prints a warning, but the\n \t@# program still runs.  Since it simplifies debugging other"}, {"sha": "48af58c1754d4488b008d40be9ac8b875dcb7b91", "filename": "mk/tests.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/269550f6736c911e28ec9f01e88d9afeb47f12ec/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=269550f6736c911e28ec9f01e88d9afeb47f12ec", "patch": "@@ -185,7 +185,7 @@ compile-check: tidy \\\n \n %.stage0$(X): %.stage0.o  $(SREQ0)\n \t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage1/glue.o -o $@ $< \\\n+\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage1/glue.o -o $@ $< \\\n       -Lstage1 -Lrt -lrustrt -lstd -lm\n \t@# dsymutil sometimes fails or prints a warning, but the\n \t@# program still runs.  Since it simplifies debugging other\n@@ -194,7 +194,7 @@ compile-check: tidy \\\n \n %.stage1$(X): %.stage1.o $(SREQ1)\n \t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage2/glue.o -o $@ $< \\\n+\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage2/glue.o -o $@ $< \\\n       -Lstage2 -Lrt -lrustrt -lstd -lm\n \t@# dsymutil sometimes fails or prints a warning, but the\n \t@# program still runs.  Since it simplifies debugging other\n@@ -203,7 +203,7 @@ compile-check: tidy \\\n \n %.stage2$(X): %.stage2.o $(SREQ2)\n \t@$(call E, link [gcc]: $@)\n-\t$(Q)gcc $(CFG_GCC_CFLAGS) stage3/glue.o -o $@ $< \\\n+\t$(Q)gcc $(CFG_GCCISH_CFLAGS) stage3/glue.o -o $@ $< \\\n       -Lstage3 -Lrt -lrustrt -lstd -lm\n \t@# dsymutil sometimes fails or prints a warning, but the\n \t@# program still runs.  Since it simplifies debugging other"}]}