{"sha": "95ce42b34608518c250ed84a7b058f4a59c4a54b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1Y2U0MmIzNDYwODUxOGMyNTBlZDg0YTdiMDU4ZjRhNTljNGE1NGI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-16T00:13:03Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-16T00:14:02Z"}, "message": "rustc: Instantiate self regions in impls", "tree": {"sha": "9279d13bbec0a4121a17d540182e54704484f0bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9279d13bbec0a4121a17d540182e54704484f0bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95ce42b34608518c250ed84a7b058f4a59c4a54b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95ce42b34608518c250ed84a7b058f4a59c4a54b", "html_url": "https://github.com/rust-lang/rust/commit/95ce42b34608518c250ed84a7b058f4a59c4a54b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95ce42b34608518c250ed84a7b058f4a59c4a54b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcf44f8cc1b6f4b53e806a3280b0dcd599767416", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf44f8cc1b6f4b53e806a3280b0dcd599767416", "html_url": "https://github.com/rust-lang/rust/commit/bcf44f8cc1b6f4b53e806a3280b0dcd599767416"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "3a26f01fe9e2090f9888c301481e31b5298f9f40", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/95ce42b34608518c250ed84a7b058f4a59c4a54b/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95ce42b34608518c250ed84a7b058f4a59c4a54b/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=95ce42b34608518c250ed84a7b058f4a59c4a54b", "patch": "@@ -1458,21 +1458,20 @@ type pat_ctxt = {\n     pat_region: ty::region\n };\n \n-fn instantiate_self_regions(pcx: pat_ctxt, args: [ty::t]) -> [ty::t] {\n-    vec::map(args, {|arg_ty|\n-        if ty::type_has_rptrs(arg_ty) {\n-            ty::fold_ty(pcx.fcx.ccx.tcx, ty::fm_rptr({|r|\n-                alt r {\n-                    ty::re_inferred | ty::re_caller(_) | ty::re_self(_) {\n-                        pcx.pat_region\n-                    }\n-                    _ { r }\n-                }\n-            }), arg_ty)\n-        } else {\n-            arg_ty\n-        }\n-    })\n+// Replaces self, caller, or inferred regions in the given type with the given\n+// region.\n+fn instantiate_self_regions(tcx: ty::ctxt, region: ty::region, &&ty: ty::t)\n+        -> ty::t {\n+    if ty::type_has_rptrs(ty) {\n+        ty::fold_ty(tcx, ty::fm_rptr({|r|\n+            alt r {\n+                ty::re_inferred | ty::re_caller(_) | ty::re_self(_) { region }\n+                _ { r }\n+            }\n+        }), ty)\n+    } else {\n+        ty\n+    }\n }\n \n // Replaces all region variables in the given type with \"inferred regions\".\n@@ -1504,7 +1503,10 @@ fn check_pat_variant(pcx: pat_ctxt, pat: @ast::pat, path: @ast::path,\n         // Get the number of arguments in this enum variant.\n         let arg_types = variant_arg_types(pcx.fcx.ccx, pat.span,\n                                           v_def_ids.var, expected_tps);\n-        arg_types = instantiate_self_regions(pcx, arg_types);\n+        arg_types = vec::map(arg_types,\n+                             bind instantiate_self_regions(pcx.fcx.ccx.tcx,\n+                                                           pcx.pat_region,\n+                                                           _));\n         let subpats_len = subpats.len(), arg_len = arg_types.len();\n         if arg_len > 0u {\n             // N-ary variant.\n@@ -3239,7 +3241,10 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n         check_fn(ccx, ast::proto_bare, decl, body, dtor_id, none);\n       }\n       ast::item_impl(tps, _, ty, ms) {\n-        ccx.self_infos += [self_impl(ast_ty_to_ty(ccx.tcx, m_check, ty))];\n+        let self_ty = ast_ty_to_ty(ccx.tcx, m_check, ty);\n+        let self_region = ty::re_self({crate: ast::local_crate, node: it.id});\n+        self_ty = instantiate_self_regions(ccx.tcx, self_region, self_ty);\n+        ccx.self_infos += [self_impl(self_ty)];\n         for m in ms { check_method(ccx, m); }\n         vec::pop(ccx.self_infos);\n       }"}]}