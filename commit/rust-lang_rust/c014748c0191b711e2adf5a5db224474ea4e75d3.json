{"sha": "c014748c0191b711e2adf5a5db224474ea4e75d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMTQ3NDhjMDE5MWI3MTFlMmFkZjVhNWRiMjI0NDc0ZWE0ZTc1ZDM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-04T01:52:49Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-04T01:52:49Z"}, "message": "Remove dead implicit-destinations logic from IL.", "tree": {"sha": "6c48001fb6c568ff409c73c3d6998dd292b31800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c48001fb6c568ff409c73c3d6998dd292b31800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c014748c0191b711e2adf5a5db224474ea4e75d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c014748c0191b711e2adf5a5db224474ea4e75d3", "html_url": "https://github.com/rust-lang/rust/commit/c014748c0191b711e2adf5a5db224474ea4e75d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c014748c0191b711e2adf5a5db224474ea4e75d3/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6277b462e938d9df8b75126244817d2e28dab80a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6277b462e938d9df8b75126244817d2e28dab80a", "html_url": "https://github.com/rust-lang/rust/commit/6277b462e938d9df8b75126244817d2e28dab80a"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "3d25657b3ed94887e327aea6556ccd8b86da6421", "filename": "src/boot/be/elf.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c014748c0191b711e2adf5a5db224474ea4e75d3/src%2Fboot%2Fbe%2Felf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/c014748c0191b711e2adf5a5db224474ea4e75d3/src%2Fboot%2Fbe%2Felf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Felf.ml?ref=c014748c0191b711e2adf5a5db224474ea4e75d3", "patch": "@@ -1123,14 +1123,14 @@ let elf32_linux_x86_file\n     let plt_frag =\n       let (reg, _, _) = X86.get_next_pc_thunk in\n \n-        Il.emit_full e (Some plt_entry_fixup) [] Il.Dead;\n+        Il.emit_full e (Some plt_entry_fixup) Il.Dead;\n \n         Abi.load_fixup_addr e reg got_plt_section_fixup Il.CodeTy;\n \n         Il.emit e (Il.jmp Il.JMP (got_code_cell reg (2+i)));\n \n         Il.emit_full e (Some jump_slot_initial_target_fixup)\n-          [] (Il.Push (X86.immi (Int64.of_int i)));\n+          (Il.Push (X86.immi (Int64.of_int i)));\n \n         Il.emit e (Il.jmp Il.JMP (Il.direct_code_ptr plt0_fixup));\n         X86.frags_of_emitted_quads sess e"}, {"sha": "24f2ae31cd4efd5a686a65c364a24fd8566b453e", "filename": "src/boot/be/il.ml", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c014748c0191b711e2adf5a5db224474ea4e75d3/src%2Fboot%2Fbe%2Fil.ml", "raw_url": "https://github.com/rust-lang/rust/raw/c014748c0191b711e2adf5a5db224474ea4e75d3/src%2Fboot%2Fbe%2Fil.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fil.ml?ref=c014748c0191b711e2adf5a5db224474ea4e75d3", "patch": "@@ -227,7 +227,6 @@ type quad' =\n \n type quad =\n     { quad_fixup: fixup option;\n-      quad_implicits: label list;\n       quad_body: quad'; }\n \n type quads = quad array ;;\n@@ -703,13 +702,11 @@ type emitter = { mutable emit_pc: int;\n \n \n let badq = { quad_fixup = None;\n-             quad_implicits = [];\n              quad_body = End }\n ;;\n \n \n let deadq = { quad_fixup = None;\n-              quad_implicits = [];\n               quad_body = Dead }\n ;;\n \n@@ -828,21 +825,18 @@ let is_mov uop =\n \n let mk_quad (q':quad') : quad =\n   { quad_body = q';\n-    quad_implicits = [];\n     quad_fixup = None }\n ;;\n \n let emit_full\n     (e:emitter)\n     (fix:fixup option)\n-    (implicits:label list)\n     (q':quad')\n     : unit =\n   let fixup = ref fix in\n   let emit_quad_bottom q' =\n     grow_if_necessary e;\n     e.emit_quads.(e.emit_pc) <- { quad_body = q';\n-                                  quad_implicits = implicits;\n                                   quad_fixup = (!fixup) };\n     fixup := None;\n     e.emit_pc <- e.emit_pc + 1\n@@ -1050,7 +1044,7 @@ let emit_full\n ;;\n \n let emit (e:emitter) (q':quad') : unit =\n-  emit_full e None [] q'\n+  emit_full e None q'\n ;;\n \n let patch_jump (e:emitter) (jmp:int) (targ:int) : unit ="}, {"sha": "da3c85504ce863cb758fd11f1f41176bc5190c41", "filename": "src/boot/be/macho.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c014748c0191b711e2adf5a5db224474ea4e75d3/src%2Fboot%2Fbe%2Fmacho.ml", "raw_url": "https://github.com/rust-lang/rust/raw/c014748c0191b711e2adf5a5db224474ea4e75d3/src%2Fboot%2Fbe%2Fmacho.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fmacho.ml?ref=c014748c0191b711e2adf5a5db224474ea4e75d3", "patch": "@@ -961,7 +961,7 @@ let emit_file\n     let edx_pointee =\n       Il.Mem ((Il.RegIn (edx, None)), Il.ScalarTy (Il.AddrTy Il.OpaqueTy))\n     in\n-      Il.emit_full e (Some start_fixup) [] Il.Dead;\n+      Il.emit_full e (Some start_fixup) Il.Dead;\n \n       (* zero marks the bottom of the frame chain. *)\n       Il.emit e (Il.Push (X86.imm (Asm.IMM 0L)));"}, {"sha": "3da474b4255f8729791eadaf179e54537cd7d27c", "filename": "src/boot/be/ra.ml", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c014748c0191b711e2adf5a5db224474ea4e75d3/src%2Fboot%2Fbe%2Fra.ml", "raw_url": "https://github.com/rust-lang/rust/raw/c014748c0191b711e2adf5a5db224474ea4e75d3/src%2Fboot%2Fbe%2Fra.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fra.ml?ref=c014748c0191b711e2adf5a5db224474ea4e75d3", "patch": "@@ -131,12 +131,9 @@ let kill_redundant_moves (cx:ctxt) : unit =\n ;;\n \n let quad_jump_target_labels (q:quad) : Il.label list =\n-  let explicits =\n-    match q.Il.quad_body with\n-        Il.Jmp { Il.jmp_targ = Il.CodeLabel lab } -> [ lab ]\n-      | _ -> []\n-  in\n-    explicits @ q.quad_implicits;\n+  match q.Il.quad_body with\n+      Il.Jmp { Il.jmp_targ = Il.CodeLabel lab } -> [ lab ]\n+    | _ -> []\n ;;\n \n let quad_used_vregs (q:quad) : Il.vreg list ="}, {"sha": "ac567df0069ade176aaf260585df3643127fdad4", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c014748c0191b711e2adf5a5db224474ea4e75d3/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/c014748c0191b711e2adf5a5db224474ea4e75d3/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=c014748c0191b711e2adf5a5db224474ea4e75d3", "patch": "@@ -564,7 +564,7 @@ let emit_get_next_pc_thunk (e:Il.emitter) : unit =\n   let rty = Il.ScalarTy sty in\n   let deref_esp = Il.Mem (Il.RegIn (Il.Hreg esp, None), rty) in\n   let eax = (Il.Reg (Il.Hreg eax, sty)) in\n-    Il.emit_full e (Some get_next_pc_thunk_fixup) []\n+    Il.emit_full e (Some get_next_pc_thunk_fixup)\n       (Il.umov eax (Il.Cell deref_esp));\n     Il.emit e Il.Ret;\n ;;\n@@ -756,7 +756,7 @@ let crawl_stack_calling_glue\n   let pop x = emit (Il.Pop x) in\n   let add x y = emit (Il.binary Il.ADD (rc x) (ro x) (ro y)) in\n   let codefix fix = Il.CodePtr (Il.ImmPtr (fix, Il.CodeTy)) in\n-  let mark fix = Il.emit_full e (Some fix) [] Il.Dead in\n+  let mark fix = Il.emit_full e (Some fix) Il.Dead in\n \n   let repeat_jmp_fix = new_fixup \"repeat jump\" in\n   let skip_jmp_fix = new_fixup \"skip jump\" in\n@@ -822,7 +822,7 @@ let sweep_gc_chain\n   let edi_n = word_n (Il.Hreg edi) in\n   let ecx_n = word_n (Il.Hreg ecx) in\n   let codefix fix = Il.CodePtr (Il.ImmPtr (fix, Il.CodeTy)) in\n-  let mark fix = Il.emit_full e (Some fix) [] Il.Dead in\n+  let mark fix = Il.emit_full e (Some fix) Il.Dead in\n   let repeat_jmp_fix = new_fixup \"repeat jump\" in\n   let skip_jmp_fix = new_fixup \"skip jump\" in\n   let exit_jmp_fix = new_fixup \"exit jump\" in\n@@ -1592,7 +1592,7 @@ let objfile_start\n   let emit = Il.emit e in\n   let mov dst src = emit (Il.umov dst src) in\n   let push_pos32 = push_pos32 e in\n-    Il.emit_full e (Some start_fixup) [] Il.Dead;\n+    Il.emit_full e (Some start_fixup) Il.Dead;\n     save_callee_saves e;\n     mov (rc ebp) (ro esp);\n "}]}