{"sha": "639a3ffadcfec5165d434cbbf320678f69b01a5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOWEzZmZhZGNmZWM1MTY1ZDQzNGNiYmYzMjA2NzhmNjliMDFhNWI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-26T12:00:07Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-26T21:47:53Z"}, "message": "add user_ty.projs support to `AscribeUserType`.", "tree": {"sha": "e6b6825f32bfa97b8bcade106be71229c0f71d31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6b6825f32bfa97b8bcade106be71229c0f71d31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/639a3ffadcfec5165d434cbbf320678f69b01a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/639a3ffadcfec5165d434cbbf320678f69b01a5b", "html_url": "https://github.com/rust-lang/rust/commit/639a3ffadcfec5165d434cbbf320678f69b01a5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/639a3ffadcfec5165d434cbbf320678f69b01a5b/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82ab668a556abc1843e10bb0da2a307d2442e1e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/82ab668a556abc1843e10bb0da2a307d2442e1e2", "html_url": "https://github.com/rust-lang/rust/commit/82ab668a556abc1843e10bb0da2a307d2442e1e2"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "23445781eb2f3ddf9f252a1ef4ad7a6d240ac5ef", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/639a3ffadcfec5165d434cbbf320678f69b01a5b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639a3ffadcfec5165d434cbbf320678f69b01a5b/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=639a3ffadcfec5165d434cbbf320678f69b01a5b", "patch": "@@ -11,6 +11,7 @@\n use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, QueryResponse};\n use traits::query::Fallible;\n use hir::def_id::DefId;\n+use mir::ProjectionKind;\n use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use ty::subst::UserSubsts;\n \n@@ -20,6 +21,7 @@ pub struct AscribeUserType<'tcx> {\n     pub variance: ty::Variance,\n     pub def_id: DefId,\n     pub user_substs: UserSubsts<'tcx>,\n+    pub projs: &'tcx ty::List<ProjectionKind<'tcx>>,\n }\n \n impl<'tcx> AscribeUserType<'tcx> {\n@@ -28,8 +30,9 @@ impl<'tcx> AscribeUserType<'tcx> {\n         variance: ty::Variance,\n         def_id: DefId,\n         user_substs: UserSubsts<'tcx>,\n+        projs: &'tcx ty::List<ProjectionKind<'tcx>>,\n     ) -> Self {\n-        AscribeUserType { mir_ty, variance, def_id, user_substs }\n+        AscribeUserType { mir_ty, variance, def_id, user_substs, projs }\n     }\n }\n \n@@ -59,19 +62,19 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for AscribeUserType<'tcx>\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for AscribeUserType<'tcx> {\n-        mir_ty, variance, def_id, user_substs\n+        mir_ty, variance, def_id, user_substs, projs\n     }\n }\n \n BraceStructLiftImpl! {\n     impl<'a, 'tcx> Lift<'tcx> for AscribeUserType<'a> {\n         type Lifted = AscribeUserType<'tcx>;\n-        mir_ty, variance, def_id, user_substs\n+        mir_ty, variance, def_id, user_substs, projs\n     }\n }\n \n impl_stable_hash_for! {\n     struct AscribeUserType<'tcx> {\n-        mir_ty, variance, def_id, user_substs\n+        mir_ty, variance, def_id, user_substs, projs\n     }\n }"}, {"sha": "953fe0c9521e6753f7ddb64e11b1c52fb458c1b9", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/639a3ffadcfec5165d434cbbf320678f69b01a5b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639a3ffadcfec5165d434cbbf320678f69b01a5b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=639a3ffadcfec5165d434cbbf320678f69b01a5b", "patch": "@@ -1013,12 +1013,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 ) = self.infcx\n                     .instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_substs);\n \n-                // FIXME: add user_ty.projs support to `AscribeUserType`.\n+                let projs = self.infcx.tcx.intern_projs(&user_ty.projs);\n                 self.fully_perform_op(\n                     locations,\n                     category,\n                     self.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n-                        a, v, def_id, user_substs,\n+                        a, v, def_id, user_substs, projs,\n                     )),\n                 )?;\n             }"}, {"sha": "2ed02a4cdab1e1a71d642439b3cae7c6ee940d56", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/639a3ffadcfec5165d434cbbf320678f69b01a5b/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/639a3ffadcfec5165d434cbbf320678f69b01a5b/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=639a3ffadcfec5165d434cbbf320678f69b01a5b", "patch": "@@ -12,6 +12,8 @@ use rustc::infer::at::ToTrace;\n use rustc::infer::canonical::{Canonical, QueryResponse};\n use rustc::infer::InferCtxt;\n use rustc::hir::def_id::DefId;\n+use rustc::mir::ProjectionKind;\n+use rustc::mir::tcx::PlaceTy;\n use rustc::traits::query::type_op::ascribe_user_type::AscribeUserType;\n use rustc::traits::query::type_op::eq::Eq;\n use rustc::traits::query::type_op::normalize::Normalize;\n@@ -58,22 +60,23 @@ fn type_op_ascribe_user_type<'tcx>(\n                     variance,\n                     def_id,\n                     user_substs,\n+                    projs,\n                 },\n             ) = key.into_parts();\n \n             debug!(\n                 \"type_op_ascribe_user_type(\\\n-                 mir_ty={:?}, variance={:?}, def_id={:?}, user_substs={:?}\\\n+                 mir_ty={:?}, variance={:?}, def_id={:?}, user_substs={:?}, projs={:?}\\\n                  )\",\n-                mir_ty, variance, def_id, user_substs,\n+                mir_ty, variance, def_id, user_substs, projs,\n             );\n \n             let mut cx = AscribeUserTypeCx {\n                 infcx,\n                 param_env,\n                 fulfill_cx,\n             };\n-            cx.relate_mir_and_user_ty(mir_ty, variance, def_id, user_substs)?;\n+            cx.relate_mir_and_user_ty(mir_ty, variance, def_id, user_substs, projs)?;\n \n             Ok(())\n         })\n@@ -134,17 +137,30 @@ impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n         variance: Variance,\n         def_id: DefId,\n         user_substs: UserSubsts<'tcx>,\n+        projs: &[ProjectionKind<'tcx>],\n     ) -> Result<(), NoSolution> {\n         let UserSubsts {\n             substs,\n             user_self_ty,\n         } = user_substs;\n \n-        let ty = self.tcx().type_of(def_id);\n+        let tcx = self.tcx();\n+\n+        let ty = tcx.type_of(def_id);\n         let ty = self.subst(ty, substs);\n         debug!(\"relate_type_and_user_type: ty of def-id is {:?}\", ty);\n         let ty = self.normalize(ty);\n \n+        let mut projected_ty = PlaceTy::from_ty(ty);\n+        for proj in projs {\n+            projected_ty = projected_ty.projection_ty_core(\n+                tcx, proj, |this, field, &()| {\n+                    let ty = this.field_ty(tcx, field);\n+                    self.normalize(ty)\n+                });\n+        }\n+        let ty = projected_ty.to_ty(tcx);\n+\n         self.relate(mir_ty, variance, ty)?;\n \n         if let Some(UserSelfTy {"}]}