{"sha": "44c6370e6a8c159c49062d61e51d75b2b52c6954", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YzYzNzBlNmE4YzE1OWM0OTA2MmQ2MWU1MWQ3NWIyYjUyYzY5NTQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-15T11:18:20Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-15T11:18:32Z"}, "message": "Move local numbering into ast_map.rs\n\nThis further simplifies the alias pass, which is sorely needed.", "tree": {"sha": "1fa800c34202972a4afd68d691d0c77e89a7ab47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fa800c34202972a4afd68d691d0c77e89a7ab47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44c6370e6a8c159c49062d61e51d75b2b52c6954", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44c6370e6a8c159c49062d61e51d75b2b52c6954", "html_url": "https://github.com/rust-lang/rust/commit/44c6370e6a8c159c49062d61e51d75b2b52c6954", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44c6370e6a8c159c49062d61e51d75b2b52c6954/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cda74deee3bdd1e373502cf3298ac552da2b863", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cda74deee3bdd1e373502cf3298ac552da2b863", "html_url": "https://github.com/rust-lang/rust/commit/1cda74deee3bdd1e373502cf3298ac552da2b863"}], "stats": {"total": 115, "additions": 67, "deletions": 48}, "files": [{"sha": "74d9370d4aac7f8841ff664d58cb7030aa5139df", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 25, "deletions": 31, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/44c6370e6a8c159c49062d61e51d75b2b52c6954/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c6370e6a8c159c49062d61e51d75b2b52c6954/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=44c6370e6a8c159c49062d61e51d75b2b52c6954", "patch": "@@ -17,35 +17,32 @@ tag copied { not_allowed; copied; not_copied; }\n \n type binding = @{node_id: node_id,\n                  span: span,\n-                 local_id: uint,\n                  root_var: option::t<node_id>,\n+                 local_id: uint,\n                  unsafe_tys: [ty::t],\n                  mutable ok: valid,\n                  mutable copied: copied};\n type scope = {bs: [binding], ret_style: ast::ret_style};\n \n fn mk_binding(cx: ctx, id: node_id, span: span, root_var: option::t<node_id>,\n               unsafe: [ty::t]) -> binding {\n-    ret @{node_id: id, span: span, local_id: cx.next_local,\n-          root_var: root_var, unsafe_tys: unsafe,\n-          mutable ok: valid, mutable copied: not_copied};\n+    ret @{node_id: id, span: span, root_var: root_var,\n+          local_id: local_id_of_node(cx, id),\n+          unsafe_tys: unsafe, mutable ok: valid,\n+          mutable copied: not_copied};\n }\n \n tag local_info { local(uint); }\n \n type copy_map = std::map::hashmap<node_id, ()>;\n \n type ctx = {tcx: ty::ctxt,\n-            local_map: std::map::hashmap<node_id, local_info>,\n-            mutable next_local: uint,\n             copy_map: copy_map};\n \n fn check_crate(tcx: ty::ctxt, crate: @ast::crate) -> copy_map {\n     // Stores information about object fields and function\n     // arguments that's otherwise not easily available.\n     let cx = @{tcx: tcx,\n-               local_map: std::map::new_int_hash(),\n-               mutable next_local: 0u,\n                copy_map: std::map::new_int_hash()};\n     let v = @{visit_fn: bind visit_fn(cx, _, _, _, _, _, _, _),\n               visit_expr: bind visit_expr(cx, _, _, _),\n@@ -133,13 +130,6 @@ fn visit_expr(cx: @ctx, ex: @ast::expr, sc: scope, v: vt<scope>) {\n     if !handled { visit::visit_expr(ex, sc, v); }\n }\n \n-fn register_locals(cx: ctx, pat: @ast::pat) {\n-    for each pat in ast_util::pat_bindings(pat) {\n-        cx.local_map.insert(pat.id, local(cx.next_local));\n-        cx.next_local += 1u;\n-    }\n-}\n-\n fn visit_decl(cx: @ctx, d: @ast::decl, sc: scope, v: vt<scope>) {\n     visit::visit_decl(d, sc, v);\n     alt d.node {\n@@ -154,7 +144,6 @@ fn visit_decl(cx: @ctx, d: @ast::decl, sc: scope, v: vt<scope>) {\n               }\n               none. { }\n             }\n-            register_locals(*cx, loc.node.pat);\n         }\n       }\n       _ { }\n@@ -200,14 +189,17 @@ fn check_call(cx: ctx, f: @ast::expr, args: [@ast::expr]) -> [binding] {\n             }\n         }\n         let root_var = path_def_id(cx, root.ex);\n-        let new_bnd = mk_binding(cx, arg.id, arg.span, root_var,\n-                                 inner_mut(root.ds));\n-        new_bnd.copied = alt arg_t.mode {\n-          ast::by_move. { copied }\n-          ast::by_ref. { ret_ref ? not_allowed : not_copied }\n-          ast::by_mut_ref. { not_allowed }\n-        };\n-        bindings += [new_bnd];\n+        bindings += [@{node_id: arg.id,\n+                       span: arg.span,\n+                       root_var: root_var,\n+                       local_id: 0u,\n+                       unsafe_tys: inner_mut(root.ds),\n+                       mutable ok: valid,\n+                       mutable copied: alt arg_t.mode {\n+                         ast::by_move. { copied }\n+                         ast::by_ref. { ret_ref ? not_allowed : not_copied }\n+                         ast::by_mut_ref. { not_allowed }\n+                       }}];\n         i += 1u;\n     }\n     let f_may_close =\n@@ -283,7 +275,7 @@ fn check_ret_ref(cx: ctx, sc: scope, mut: bool, expr: @ast::expr) {\n         let cur_node = did.node;\n         while true {\n             alt cx.tcx.items.find(cur_node) {\n-              some(ast_map::node_arg(arg)) {\n+              some(ast_map::node_arg(arg, _)) {\n                 if arg.mode == ast::by_move {\n                     bad = some(\"move-mode parameter\");\n                 }\n@@ -358,7 +350,6 @@ fn check_alt(cx: ctx, input: @ast::expr, arms: [ast::arm], sc: scope,\n             new_bs += [mk_binding(cx, info.id, info.span, root_var,\n                                   copy info.unsafe)];\n         }\n-        register_locals(cx, a.pats[0]);\n         visit::visit_arm(a, {bs: new_bs with sc}, v);\n     }\n }\n@@ -373,7 +364,6 @@ fn check_for_each(cx: ctx, local: @ast::local, call: @ast::expr,\n             new_bs += [mk_binding(cx, proot.id, proot.span, none,\n                                   inner_mut(proot.ds))];\n         }\n-        register_locals(cx, local.node.pat);\n         visit::visit_block(blk, {bs: new_bs with sc}, v);\n       }\n     }\n@@ -401,17 +391,15 @@ fn check_for(cx: ctx, local: @ast::local, seq: @ast::expr, blk: ast::blk,\n         new_bs += [mk_binding(cx, proot.id, proot.span, root_var,\n                               inner_mut(proot.ds))];\n     }\n-    register_locals(cx, local.node.pat);\n     visit::visit_block(blk, {bs: new_bs with sc}, v);\n }\n \n fn check_var(cx: ctx, ex: @ast::expr, p: ast::path, id: ast::node_id,\n              assign: bool, sc: scope) {\n     let def = cx.tcx.def_map.get(id);\n-    if !def_is_local(def, true) { ret; }\n+    if !def_is_local(def, false) { ret; }\n     let my_defnum = ast_util::def_id_of_def(def).node;\n-    let my_local_id =\n-        alt cx.local_map.find(my_defnum) { some(local(id)) { id } _ { 0u } };\n+    let my_local_id = local_id_of_node(cx, my_defnum);\n     let var_t = ty::expr_ty(cx.tcx, ex);\n     for b in sc.bs {\n         // excludes variables introduced since the alias was made\n@@ -557,6 +545,12 @@ fn def_is_local(d: ast::def, objfields_count: bool) -> bool {\n         };\n }\n \n+fn local_id_of_node(cx: ctx, id: node_id) -> uint {\n+    alt cx.tcx.items.get(id) {\n+      ast_map::node_arg(_, id) | ast_map::node_local(id) { id }\n+    }\n+}\n+\n // Heuristic, somewhat random way to decide whether to warn when inserting an\n // implicit copy.\n fn copy_is_expensive(tcx: ty::ctxt, ty: ty::t) -> bool {"}, {"sha": "ce8c983c0f9b75ab9ee770ee365a21efe2922a44", "filename": "src/comp/middle/ast_map.rs", "status": "modified", "additions": 42, "deletions": 17, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/44c6370e6a8c159c49062d61e51d75b2b52c6954/src%2Fcomp%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44c6370e6a8c159c49062d61e51d75b2b52c6954/src%2Fcomp%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fast_map.rs?ref=44c6370e6a8c159c49062d61e51d75b2b52c6954", "patch": "@@ -1,5 +1,6 @@\n import std::{smallintmap, option};\n import syntax::ast::*;\n+import syntax::ast_util;\n import syntax::{visit, codemap};\n import visit::vt;\n \n@@ -8,46 +9,70 @@ tag ast_node {\n     node_obj_ctor(@item);\n     node_native_item(@native_item);\n     node_expr(@expr);\n-    node_arg(arg);\n+    // Locals are numbered, because the alias analysis needs to know in which\n+    // order they are introduced.\n+    node_arg(arg, uint);\n+    node_local(uint);\n }\n \n type map = std::map::hashmap<node_id, ast_node>;\n+type ctx = @{map: map, mutable local_id: uint};\n \n fn map_crate(c: crate) -> map {\n     // FIXME: This is using an adapter to convert the smallintmap\n     // interface to the hashmap interface. It would be better to just\n     // convert everything to use the smallintmap.\n-    let map = new_smallintmap_int_adapter::<ast_node>();\n+    let cx = @{map: new_smallintmap_int_adapter::<ast_node>(),\n+               mutable local_id: 0u};\n \n     let v_map = visit::mk_simple_visitor\n-        (@{visit_item: bind map_item(map, _),\n-           visit_native_item: bind map_native_item(map, _),\n-           visit_expr: bind map_expr(map, _),\n-           visit_fn: bind map_fn(map, _, _, _, _, _)\n-               with *visit::default_simple_visitor()});\n+        (@{visit_item: bind map_item(cx, _),\n+           visit_native_item: bind map_native_item(cx, _),\n+           visit_expr: bind map_expr(cx, _),\n+           visit_fn: bind map_fn(cx, _, _, _, _, _),\n+           visit_local: bind map_local(cx, _),\n+           visit_arm: bind map_arm(cx, _)\n+           with *visit::default_simple_visitor()});\n     visit::visit_crate(c, (), v_map);\n-    ret map;\n+    ret cx.map;\n }\n \n-fn map_fn(map: map, f: _fn, _tp: [ty_param], _sp: codemap::span,\n+fn map_fn(cx: ctx, f: _fn, _tp: [ty_param], _sp: codemap::span,\n           _name: fn_ident, _id: node_id) {\n-    for a in f.decl.inputs { map.insert(a.id, node_arg(a)); }\n+    for a in f.decl.inputs {\n+        cx.map.insert(a.id, node_arg(a, cx.local_id));\n+        cx.local_id += 1u;\n+    }\n+}\n+\n+fn map_local(cx: ctx, loc: @local) {\n+    for each p in ast_util::pat_bindings(loc.node.pat) {\n+        cx.map.insert(p.id, node_local(cx.local_id));\n+        cx.local_id += 1u;\n+    }\n+}\n+\n+fn map_arm(cx: ctx, arm: arm) {\n+    for each p in ast_util::pat_bindings(arm.pats[0]) {\n+        cx.map.insert(p.id, node_local(cx.local_id));\n+        cx.local_id += 1u;\n+    }\n }\n \n-fn map_item(map: map, i: @item) {\n-    map.insert(i.id, node_item(i));\n+fn map_item(cx: ctx, i: @item) {\n+    cx.map.insert(i.id, node_item(i));\n     alt i.node {\n-      item_obj(_, _, ctor_id) { map.insert(ctor_id, node_obj_ctor(i)); }\n+      item_obj(_, _, ctor_id) { cx.map.insert(ctor_id, node_obj_ctor(i)); }\n       _ { }\n     }\n }\n \n-fn map_native_item(map: map, i: @native_item) {\n-    map.insert(i.id, node_native_item(i));\n+fn map_native_item(cx: ctx, i: @native_item) {\n+    cx.map.insert(i.id, node_native_item(i));\n }\n \n-fn map_expr(map: map, ex: @expr) {\n-    map.insert(ex.id, node_expr(ex));\n+fn map_expr(cx: ctx, ex: @expr) {\n+    cx.map.insert(ex.id, node_expr(ex));\n }\n \n fn new_smallintmap_int_adapter<@V>() -> std::map::hashmap<int, V> {"}]}