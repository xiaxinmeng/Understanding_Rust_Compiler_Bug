{"sha": "0bd96671f0312fdc1eb07885835e58d258f1f927", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZDk2NjcxZjAzMTJmZGMxZWIwNzg4NTgzNWU1OGQyNThmMWY5Mjc=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-01-27T13:30:34Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-01-27T13:30:34Z"}, "message": "Fixed infinite loop issues and added some improved logging.", "tree": {"sha": "c7b84ec484a76d20b29bf162d5a02476fc19bbf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7b84ec484a76d20b29bf162d5a02476fc19bbf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bd96671f0312fdc1eb07885835e58d258f1f927", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlpsfvoACgkQAXYLT59T\n8VRvYA/+PMpKZoUkugifzIiEWA72AAkXWRyCc6icPL+2JxldNjKHSuXbdH6LJDyD\nvvJyTWPjo6UsKI0EFrdpMAlhv2scz6mTwsfHpVh44rFS5+XEmcDSpwQiUPn9gg/3\nht0kqDeNlzUOgi52RfLgYxNX19kHULDGfJkyhtkI3hDHKVKMjh1bMF/Up6Qesnx9\nLvAUO1r/nAktxz4d01yVwu0Np+oZBsjaOKLuEr0TbS2+Q8xaPXeIx5drS7TqElqC\nKQvydwO4c8FzjlUJ68hQXrbMLLefMVSlV00BZjW3RSg5q56udtIL2EgYY4JzhW/D\nsOuUzr6qAjjXAsVNhL8ZZ5O0E+nY08NptkabGypqmkwaHUkJ5PcVh2w4CwIdDP4g\nt4rV8t5pmiFbAhKNqtYwU0lhLKQAe0Ubpv4kqhCbr40aY7n7g+B9T3fO45i1hhxu\nQzVvxxOW8IVUWr6Eb2Fq4IVYK2RDalcdij4vWwXgWFoeVgjbtd4oSqWYxCDxQMbK\nIt/DUSDw6p0bRCmIEQVNpTXh1RTfrzkaSJQ/f5CuEV2pQH7YdM3MqQLnKEDPJp0O\nPnCrBd6KXbXSpGxpVP8F75Use62Zw7DzRSf299JsX+DcW1Pqwwad/OZCTwLQoVjp\nsXf9Nm7DZ1g2i9MyJgaWb3U6o4r9yOF9ZQmujVNmcoEeix7GRO0=\n=YAgx\n-----END PGP SIGNATURE-----", "payload": "tree c7b84ec484a76d20b29bf162d5a02476fc19bbf1\nparent 0c467d5d0924e705c8a4b84b250e127c62222239\nauthor David Wood <david@davidtw.co> 1517059834 +0000\ncommitter David Wood <david@davidtw.co> 1517059834 +0000\n\nFixed infinite loop issues and added some improved logging.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd96671f0312fdc1eb07885835e58d258f1f927", "html_url": "https://github.com/rust-lang/rust/commit/0bd96671f0312fdc1eb07885835e58d258f1f927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bd96671f0312fdc1eb07885835e58d258f1f927/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c467d5d0924e705c8a4b84b250e127c62222239", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c467d5d0924e705c8a4b84b250e127c62222239", "html_url": "https://github.com/rust-lang/rust/commit/0c467d5d0924e705c8a4b84b250e127c62222239"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "a6a7f9e20b3a925fa9a236881fd045d0f37080ec", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0bd96671f0312fdc1eb07885835e58d258f1f927/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bd96671f0312fdc1eb07885835e58d258f1f927/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=0bd96671f0312fdc1eb07885835e58d258f1f927", "patch": "@@ -638,25 +638,33 @@ impl CodeMap {\n     fn find_width_of_character_at_span(&self, sp: Span, forwards: bool) -> u32 {\n         // Disregard malformed spans and assume a one-byte wide character.\n         if sp.lo() >= sp.hi() {\n+            debug!(\"find_width_of_character_at_span: early return malformed span\");\n             return 1;\n         }\n \n         let local_begin = self.lookup_byte_offset(sp.lo());\n         let local_end = self.lookup_byte_offset(sp.hi());\n+        debug!(\"find_width_of_character_at_span: local_begin=`{:?}`, local_end=`{:?}`\",\n+               local_begin, local_end);\n \n         let start_index = local_begin.pos.to_usize();\n         let end_index = local_end.pos.to_usize();\n+        debug!(\"find_width_of_character_at_span: start_index=`{:?}`, end_index=`{:?}`\",\n+               start_index, end_index);\n \n         // Disregard indexes that are at the start or end of their spans, they can't fit bigger\n         // characters.\n         if (!forwards && end_index == usize::min_value()) ||\n             (forwards && start_index == usize::max_value()) {\n+            debug!(\"find_width_of_character_at_span: start or end of span, cannot be multibyte\");\n             return 1;\n         }\n \n         let source_len = (local_begin.fm.end_pos - local_begin.fm.start_pos).to_usize();\n+        debug!(\"find_width_of_character_at_span: source_len=`{:?}`\", source_len);\n         // Ensure indexes are also not malformed.\n         if start_index > end_index || end_index > source_len {\n+            debug!(\"find_width_of_character_at_span: source indexes are malformed\");\n             return 1;\n         }\n \n@@ -671,16 +679,22 @@ impl CodeMap {\n         } else {\n             return 1;\n         };\n-        debug!(\"DTW start {:?} end {:?}\", start_index, end_index);\n-        debug!(\"DTW snippet {:?}\", snippet);\n+        debug!(\"find_width_of_character_at_span: snippet=`{:?}`\", snippet);\n+\n+        let file_start_pos = local_begin.fm.start_pos.to_usize();\n+        let file_end_pos = local_begin.fm.end_pos.to_usize();\n+        debug!(\"find_width_of_character_at_span: file_start_pos=`{:?}` file_end_pos=`{:?}`\",\n+               file_start_pos, file_end_pos);\n \n         let mut target = if forwards { end_index + 1 } else { end_index - 1 };\n-        debug!(\"DTW initial target {:?}\", target);\n-        while !snippet.is_char_boundary(target - start_index) {\n+        debug!(\"find_width_of_character_at_span: initial target=`{:?}`\", target);\n+\n+        while !snippet.is_char_boundary(target - start_index)\n+                && target >= file_start_pos && target <= file_end_pos {\n             target = if forwards { target + 1 } else { target - 1 };\n-            debug!(\"DTW update target {:?}\", target);\n+            debug!(\"find_width_of_character_at_span: target=`{:?}`\", target);\n         }\n-        debug!(\"DTW final target {:?}\", target);\n+        debug!(\"find_width_of_character_at_span: final target=`{:?}`\", target);\n \n         if forwards {\n             (target - end_index) as u32"}]}