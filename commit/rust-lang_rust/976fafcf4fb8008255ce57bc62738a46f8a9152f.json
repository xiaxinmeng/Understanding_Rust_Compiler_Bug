{"sha": "976fafcf4fb8008255ce57bc62738a46f8a9152f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NmZhZmNmNGZiODAwODI1NWNlNTdiYzYyNzM4YTQ2ZjhhOTE1MmY=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-13T16:40:10Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-02-15T23:22:56Z"}, "message": "Fix wasm tests", "tree": {"sha": "ed8e609f4ff7fd3ae26a333bee8cf8e78509c502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed8e609f4ff7fd3ae26a333bee8cf8e78509c502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/976fafcf4fb8008255ce57bc62738a46f8a9152f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/976fafcf4fb8008255ce57bc62738a46f8a9152f", "html_url": "https://github.com/rust-lang/rust/commit/976fafcf4fb8008255ce57bc62738a46f8a9152f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/976fafcf4fb8008255ce57bc62738a46f8a9152f/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d5702e437e051333dcf1005fcce140c5c96f759", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5702e437e051333dcf1005fcce140c5c96f759", "html_url": "https://github.com/rust-lang/rust/commit/8d5702e437e051333dcf1005fcce140c5c96f759"}], "stats": {"total": 119, "additions": 100, "deletions": 19}, "files": [{"sha": "75104dc50e45cb131d39954a62b52f0ffa91af79", "filename": "crates/core_simd/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmacros.rs?ref=976fafcf4fb8008255ce57bc62738a46f8a9152f", "patch": "@@ -143,7 +143,7 @@ macro_rules! impl_vector {\n \n         impl <const LANES: usize> From<$name<LANES>> for [$type; LANES] {\n             fn from(vector: $name<LANES>) -> Self {\n-                vector.0\n+                vector.to_array()\n             }\n         }\n "}, {"sha": "618a75250bdad5f40dd8264e680650a9b9d3d9e1", "filename": "crates/core_simd/tests/float.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Fcore_simd%2Ftests%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Fcore_simd%2Ftests%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Ffloat.rs?ref=976fafcf4fb8008255ce57bc62738a46f8a9152f", "patch": "@@ -1,6 +1,3 @@\n-#[cfg(target_arch = \"wasm32\")]\n-wasm_bindgen_test_configure!(run_in_browser);\n-\n macro_rules! impl_op_test {\n     { unary, $vector:ty, $scalar:ty, $trait:ident :: $fn:ident } => {\n         test_helpers::test_lanes! {"}, {"sha": "336126283563038775adaa1032fb6ba9f46047c9", "filename": "crates/core_simd/tests/integer.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Fcore_simd%2Ftests%2Finteger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Fcore_simd%2Ftests%2Finteger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Finteger.rs?ref=976fafcf4fb8008255ce57bc62738a46f8a9152f", "patch": "@@ -1,6 +1,3 @@\n-#[cfg(target_arch = \"wasm32\")]\n-wasm_bindgen_test_configure!(run_in_browser);\n-\n macro_rules! impl_unary_op_test {\n     { $vector:ty, $scalar:ty, $trait:ident :: $fn:ident, $scalar_fn:expr } => {\n         test_helpers::test_lanes! {"}, {"sha": "c9f6397b23b92a93a58791dc5f006e458f54ace7", "filename": "crates/test_helpers/Cargo.toml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Ftest_helpers%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Ftest_helpers%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2FCargo.toml?ref=976fafcf4fb8008255ce57bc62738a46f8a9152f", "patch": "@@ -5,5 +5,7 @@ authors = [\"Caleb Zulawski <caleb.zulawski@gmail.com>\"]\n edition = \"2018\"\n publish = false\n \n-[dependencies]\n-proptest = \"0.10\"\n+[dependencies.proptest]\n+version = \"0.10\"\n+default-features = false\n+features = [\"alloc\"]"}, {"sha": "3953d0bbea5e2beb8bcf71722bdaba6c2d59b2da", "filename": "crates/test_helpers/src/array.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Ftest_helpers%2Fsrc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Ftest_helpers%2Fsrc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Farray.rs?ref=976fafcf4fb8008255ce57bc62738a46f8a9152f", "patch": "@@ -18,7 +18,7 @@ pub struct UniformArrayStrategy<S, T> {\n }\n \n impl<S, T> UniformArrayStrategy<S, T> {\n-    pub fn new(strategy: S) -> Self {\n+    pub const fn new(strategy: S) -> Self {\n         Self {\n             strategy,\n             _marker: PhantomData,"}, {"sha": "e1832bf637799efb5a77169641a88e3f2c161192", "filename": "crates/test_helpers/src/lib.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Flib.rs?ref=976fafcf4fb8008255ce57bc62738a46f8a9152f", "patch": "@@ -1,5 +1,8 @@\n pub mod array;\n \n+#[cfg(target_arch = \"wasm32\")]\n+pub mod wasm;\n+\n #[macro_use]\n pub mod biteq;\n \n@@ -23,17 +26,47 @@ impl_num! { i8 }\n impl_num! { i16 }\n impl_num! { i32 }\n impl_num! { i64 }\n-impl_num! { i128 }\n impl_num! { isize }\n impl_num! { u8 }\n impl_num! { u16 }\n impl_num! { u32 }\n impl_num! { u64 }\n-impl_num! { u128 }\n impl_num! { usize }\n impl_num! { f32 }\n impl_num! { f64 }\n \n+#[cfg(not(target_arch = \"wasm32\"))]\n+impl DefaultStrategy for u128 {\n+    type Strategy = proptest::num::u128::Any;\n+    fn default_strategy() -> Self::Strategy {\n+        proptest::num::u128::ANY\n+    }\n+}\n+\n+#[cfg(not(target_arch = \"wasm32\"))]\n+impl DefaultStrategy for i128 {\n+    type Strategy = proptest::num::i128::Any;\n+    fn default_strategy() -> Self::Strategy {\n+        proptest::num::i128::ANY\n+    }\n+}\n+\n+#[cfg(target_arch = \"wasm32\")]\n+impl DefaultStrategy for u128 {\n+    type Strategy = crate::wasm::u128::Any;\n+    fn default_strategy() -> Self::Strategy {\n+        crate::wasm::u128::ANY\n+    }\n+}\n+\n+#[cfg(target_arch = \"wasm32\")]\n+impl DefaultStrategy for i128 {\n+    type Strategy = crate::wasm::i128::Any;\n+    fn default_strategy() -> Self::Strategy {\n+        crate::wasm::i128::ANY\n+    }\n+}\n+\n impl<T: core::fmt::Debug + DefaultStrategy, const LANES: usize> DefaultStrategy for [T; LANES] {\n     type Strategy = crate::array::UniformArrayStrategy<T::Strategy, Self>;\n     fn default_strategy() -> Self::Strategy {\n@@ -200,44 +233,47 @@ macro_rules! test_lanes {\n \n                 fn implementation<const $lanes: usize>() $body\n \n+                #[cfg(target_arch = \"wasm32\")]\n+                wasm_bindgen_test::wasm_bindgen_test_configure!(run_in_browser);\n+\n                 #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n                 fn lanes_1() {\n                     implementation::<1>();\n                 }\n \n                 #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n                 fn lanes_2() {\n                     implementation::<2>();\n                 }\n \n                 #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n                 fn lanes_4() {\n                     implementation::<4>();\n                 }\n \n                 #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n                 fn lanes_8() {\n                     implementation::<8>();\n                 }\n \n                 #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n                 fn lanes_16() {\n                     implementation::<16>();\n                 }\n \n                 #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n                 fn lanes_32() {\n                     implementation::<32>();\n                 }\n \n                 #[test]\n-                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+                #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test::wasm_bindgen_test)]\n                 fn lanes_64() {\n                     implementation::<64>();\n                 }"}, {"sha": "02cb9264d7c7b050b240f999cc6b3ce91c8d5e59", "filename": "crates/test_helpers/src/wasm.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Ftest_helpers%2Fsrc%2Fwasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976fafcf4fb8008255ce57bc62738a46f8a9152f/crates%2Ftest_helpers%2Fsrc%2Fwasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Fwasm.rs?ref=976fafcf4fb8008255ce57bc62738a46f8a9152f", "patch": "@@ -0,0 +1,49 @@\n+macro_rules! impl_num {\n+    { $name:ident } => {\n+        pub(crate) mod $name {\n+            type InnerStrategy = crate::array::UniformArrayStrategy<proptest::num::u64::Any, [u64; 2]>;\n+            use proptest::strategy::{Strategy, ValueTree, NewTree};\n+\n+\n+            #[must_use = \"strategies do nothing unless used\"]\n+            #[derive(Clone, Copy, Debug)]\n+            pub struct Any {\n+                strategy: InnerStrategy,\n+            }\n+\n+            pub struct BinarySearch {\n+                inner: <InnerStrategy as Strategy>::Tree,\n+            }\n+\n+            impl ValueTree for BinarySearch {\n+                type Value = $name;\n+\n+                fn current(&self) -> $name {\n+                    unsafe { core::mem::transmute(self.inner.current()) }\n+                }\n+\n+                fn simplify(&mut self) -> bool {\n+                    self.inner.simplify()\n+                }\n+\n+                fn complicate(&mut self) -> bool {\n+                    self.inner.complicate()\n+                }\n+            }\n+\n+            impl Strategy for Any {\n+                type Tree = BinarySearch;\n+                type Value = $name;\n+\n+                fn new_tree(&self, runner: &mut proptest::test_runner::TestRunner) -> NewTree<Self> {\n+                    Ok(BinarySearch { inner: self.strategy.new_tree(runner)? })\n+                }\n+            }\n+\n+            pub const ANY: Any = Any { strategy: InnerStrategy::new(proptest::num::u64::ANY) };\n+        }\n+    }\n+}\n+\n+impl_num! { u128 }\n+impl_num! { i128 }"}]}