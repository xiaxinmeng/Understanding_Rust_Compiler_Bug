{"sha": "2fc2e12687ba7e48aef1c1d8efc6588a90e24010", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYzJlMTI2ODdiYTdlNDhhZWYxYzFkOGVmYzY1ODhhOTBlMjQwMTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-21T22:23:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-21T22:23:06Z"}, "message": "rollup merge of #24222: lambda/rename-soft-link-to-symlink\n\nImplement [RFC #1048][rfc].\n\nOn Windows, when you create a symbolic link you must specify whether it\npoints to a directory or a file, even if it is created dangling, while\non Unix, the same symbolic link could point to a directory, a file, or\nnothing at all.  Furthermore, on Windows special privilege is necessary\nto use a symbolic link, while on Unix, you can generally create a\nsymbolic link in any directory you have write privileges to.\n\nThis means that it is unlikely to be able to use symbolic links purely\nportably; anyone who uses them will need to think about the cross\nplatform implications.  This means that using platform-specific APIs\nwill make it easier to see where code will need to differ between the\nplatforms, rather than trying to provide some kind of compatibility\nwrapper.\n\nFurthermore, `soft_link` has no precedence in any other API, so to avoid\nconfusion, move back to the more standard `symlink` terminology.\n\nCreate a `std::os::unix::symlink` for the Unix version that is\ndestination type agnostic, as well as `std::os::windows::{symlink_file,\nsymlink_dir}` for Windows.\n\nBecause this is a stable API, leave a compatibility wrapper in\n`std::fs::soft_link`, which calls `symlink` on Unix and `symlink_file`\non Windows, preserving the existing behavior of `soft_link`.\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/1048", "tree": {"sha": "91d1d6a4c12e4510cac10de16e0b74d59bd24f0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91d1d6a4c12e4510cac10de16e0b74d59bd24f0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fc2e12687ba7e48aef1c1d8efc6588a90e24010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc2e12687ba7e48aef1c1d8efc6588a90e24010", "html_url": "https://github.com/rust-lang/rust/commit/2fc2e12687ba7e48aef1c1d8efc6588a90e24010", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fc2e12687ba7e48aef1c1d8efc6588a90e24010/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75f35657b309fba4d4dee5c32516bcd08a41b1b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/75f35657b309fba4d4dee5c32516bcd08a41b1b6", "html_url": "https://github.com/rust-lang/rust/commit/75f35657b309fba4d4dee5c32516bcd08a41b1b6"}, {"sha": "3cc84efcdd5727c0749d766d8abd79d8077f9cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc84efcdd5727c0749d766d8abd79d8077f9cec", "html_url": "https://github.com/rust-lang/rust/commit/3cc84efcdd5727c0749d766d8abd79d8077f9cec"}], "stats": {"total": 112, "additions": 104, "deletions": 8}, "files": [{"sha": "b5dfbf796d3bce212ab4c1053710a8334f27a32a", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2e12687ba7e48aef1c1d8efc6588a90e24010/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2e12687ba7e48aef1c1d8efc6588a90e24010/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=2fc2e12687ba7e48aef1c1d8efc6588a90e24010", "patch": "@@ -706,7 +706,7 @@ pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// Given a path, query the file system to get information about a file,\n /// directory, etc.\n ///\n-/// This function will traverse soft links to query information about the\n+/// This function will traverse symbolic links to query information about the\n /// destination file.\n ///\n /// # Examples\n@@ -820,9 +820,13 @@ pub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n     fs_imp::link(src.as_ref(), dst.as_ref())\n }\n \n-/// Creates a new soft link on the filesystem.\n+/// Creates a new symbolic link on the filesystem.\n ///\n-/// The `dst` path will be a soft link pointing to the `src` path.\n+/// The `dst` path will be a symbolic link pointing to the `src` path.\n+/// On Windows, this will be a file symlink, not a directory symlink;\n+/// for this reason, the platform-specific `std::os::unix::fs::symlink`\n+/// and `std::os::windows::fs::{symlink_file, symlink_dir}` should be\n+/// used instead to make the intent explicit.\n ///\n /// # Examples\n ///\n@@ -834,17 +838,20 @@ pub fn hard_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<(\n /// # Ok(())\n /// # }\n /// ```\n+#[deprecated(since = \"1.0.0\",\n+             reason = \"replaced with std::os::unix::fs::symlink and \\\n+                       std::os::windows::fs::{symlink_file, symlink_dir}\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn soft_link<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()> {\n     fs_imp::symlink(src.as_ref(), dst.as_ref())\n }\n \n-/// Reads a soft link, returning the file that the link points to.\n+/// Reads a symbolic link, returning the file that the link points to.\n ///\n /// # Errors\n ///\n /// This function will return an error on failure. Failure conditions include\n-/// reading a file that does not exist or reading a file that is not a soft\n+/// reading a file that does not exist or reading a file that is not a symbolic\n /// link.\n ///\n /// # Examples\n@@ -937,8 +944,8 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// Removes a directory at this path, after removing all its contents. Use\n /// carefully!\n ///\n-/// This function does **not** follow soft links and it will simply remove the\n-/// soft link itself.\n+/// This function does **not** follow symbolic links and it will simply remove the\n+/// symbolic link itself.\n ///\n /// # Errors\n ///"}, {"sha": "9504fe636978859d6b103d9317dd41cababe9a3b", "filename": "src/libstd/sys/unix/ext.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2e12687ba7e48aef1c1d8efc6588a90e24010/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2e12687ba7e48aef1c1d8efc6588a90e24010/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext.rs?ref=2fc2e12687ba7e48aef1c1d8efc6588a90e24010", "patch": "@@ -189,8 +189,12 @@ pub mod ffi {\n #[unstable(feature = \"fs_ext\",\n            reason = \"may want a more useful mode abstraction\")]\n pub mod fs {\n+    use sys;\n     use sys_common::{FromInner, AsInner, AsInnerMut};\n     use fs::{Permissions, OpenOptions};\n+    use path::Path;\n+    use convert::AsRef;\n+    use io;\n \n     /// Unix-specific extensions to `Permissions`\n     pub trait PermissionsExt {\n@@ -220,6 +224,36 @@ pub mod fs {\n             self.as_inner_mut().mode(mode); self\n         }\n     }\n+\n+    /// Creates a new symbolic link on the filesystem.\n+    ///\n+    /// The `dst` path will be a symbolic link pointing to the `src` path.\n+    ///\n+    /// # Note\n+    ///\n+    /// On Windows, you must specify whether a symbolic link points to a file\n+    /// or directory.  Use `os::windows::fs::symlink_file` to create a\n+    /// symbolic link to a file, or `os::windows::fs::symlink_dir` to create a\n+    /// symbolic link to a directory.  Additionally, the process must have\n+    /// `SeCreateSymbolicLinkPrivilege` in order to be able to create a\n+    /// symbolic link.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(fs_ext)]\n+    /// use std::os::unix::fs;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// try!(fs::symlink(\"a.txt\", \"b.txt\"));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n+    {\n+        sys::fs2::symlink(src.as_ref(), dst.as_ref())\n+    }\n+\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "331bfbfff36f9bbe169e077e599782ced061e3fd", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2e12687ba7e48aef1c1d8efc6588a90e24010/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2e12687ba7e48aef1c1d8efc6588a90e24010/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=2fc2e12687ba7e48aef1c1d8efc6588a90e24010", "patch": "@@ -54,6 +54,8 @@ pub const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: usize = 16 * 1024;\n pub const FSCTL_GET_REPARSE_POINT: libc::DWORD = 0x900a8;\n pub const IO_REPARSE_TAG_SYMLINK: libc::DWORD = 0xa000000c;\n \n+pub const SYMBOLIC_LINK_FLAG_DIRECTORY: libc::DWORD = 0x1;\n+\n // Note that these are not actually HANDLEs, just values to pass to GetStdHandle\n pub const STD_INPUT_HANDLE: libc::DWORD = -10i32 as libc::DWORD;\n pub const STD_OUTPUT_HANDLE: libc::DWORD = -11i32 as libc::DWORD;"}, {"sha": "eac6496870eabcd2f79720e8c647a20df9b7ff6d", "filename": "src/libstd/sys/windows/ext.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2e12687ba7e48aef1c1d8efc6588a90e24010/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2e12687ba7e48aef1c1d8efc6588a90e24010/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext.rs?ref=2fc2e12687ba7e48aef1c1d8efc6588a90e24010", "patch": "@@ -191,7 +191,11 @@ pub mod ffi {\n #[unstable(feature = \"fs_ext\", reason = \"may require more thought/methods\")]\n pub mod fs {\n     use fs::OpenOptions;\n+    use sys;\n     use sys_common::AsInnerMut;\n+    use path::Path;\n+    use convert::AsRef;\n+    use io;\n \n     /// Windows-specific extensions to `OpenOptions`\n     pub trait OpenOptionsExt {\n@@ -235,6 +239,50 @@ pub mod fs {\n             self.as_inner_mut().share_mode(access); self\n         }\n     }\n+\n+    /// Creates a new file symbolic link on the filesystem.\n+    ///\n+    /// The `dst` path will be a file symbolic link pointing to the `src`\n+    /// path.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```ignore\n+    /// #![feature(fs_ext)]\n+    /// use std::os::windows::fs;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// try!(fs::symlink_file(\"a.txt\", \"b.txt\"));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q)\n+                                                        -> io::Result<()>\n+    {\n+        sys::fs2::symlink_inner(src.as_ref(), dst.as_ref(), false)\n+    }\n+\n+    /// Creates a new directory symlink on the filesystem.\n+    ///\n+    /// The `dst` path will be a directory symbolic link pointing to the `src`\n+    /// path.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```ignore\n+    /// #![feature(fs_ext)]\n+    /// use std::os::windows::fs;\n+    ///\n+    /// # fn foo() -> std::io::Result<()> {\n+    /// try!(fs::symlink_file(\"a\", \"b\"));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    pub fn symlink_dir<P: AsRef<Path>, Q: AsRef<Path>> (src: P, dst: Q)\n+                                                        -> io::Result<()>\n+    {\n+        sys::fs2::symlink_inner(src.as_ref(), dst.as_ref(), true)\n+    }\n }\n \n /// A prelude for conveniently writing platform-specific code."}, {"sha": "07612d125e172ab8ea20db404107826ba92e5413", "filename": "src/libstd/sys/windows/fs2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fc2e12687ba7e48aef1c1d8efc6588a90e24010/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc2e12687ba7e48aef1c1d8efc6588a90e24010/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs2.rs?ref=2fc2e12687ba7e48aef1c1d8efc6588a90e24010", "patch": "@@ -412,11 +412,16 @@ pub fn readlink(p: &Path) -> io::Result<PathBuf> {\n }\n \n pub fn symlink(src: &Path, dst: &Path) -> io::Result<()> {\n+    symlink_inner(src, dst, false)\n+}\n+\n+pub fn symlink_inner(src: &Path, dst: &Path, dir: bool) -> io::Result<()> {\n     use sys::c::compat::kernel32::CreateSymbolicLinkW;\n     let src = to_utf16(src);\n     let dst = to_utf16(dst);\n+    let flags = if dir { c::SYMBOLIC_LINK_FLAG_DIRECTORY } else { 0 };\n     try!(cvt(unsafe {\n-        CreateSymbolicLinkW(dst.as_ptr(), src.as_ptr(), 0) as libc::BOOL\n+        CreateSymbolicLinkW(dst.as_ptr(), src.as_ptr(), flags) as libc::BOOL\n     }));\n     Ok(())\n }"}]}