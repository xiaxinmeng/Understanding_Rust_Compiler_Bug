{"sha": "2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd", "node_id": "C_kwDOAAsO6NoAKDJlMDgxZGI5MmFhM2VlMGE0NTYzYmMyOGNlMDFiZGFkNWIxYjJlZmQ", "commit": {"author": {"name": "The Atelier", "email": "workingjubilee@gmail.com", "date": "2022-07-21T00:23:46Z"}, "committer": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2022-07-21T00:55:47Z"}, "message": "Fix doctest imports using as_crate feature\n\nWithin core, `use self::` does not work to import these items.\nAnd because core is not core_simd, neither does the existing `use`.\nSo, use this quirky hack instead, switching the import on a feature.", "tree": {"sha": "209d0571222268a8a282c94c6e83736ef44a942f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/209d0571222268a8a282c94c6e83736ef44a942f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd", "html_url": "https://github.com/rust-lang/rust/commit/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbf31f9c78ad35ad1ef8fa91146e31cb447662b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf31f9c78ad35ad1ef8fa91146e31cb447662b9", "html_url": "https://github.com/rust-lang/rust/commit/bbf31f9c78ad35ad1ef8fa91146e31cb447662b9"}], "stats": {"total": 77, "additions": 57, "deletions": 20}, "files": [{"sha": "8a29cf15696ed12cfabf780d58005781b92ec64b", "filename": "crates/core_simd/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd/crates%2Fcore_simd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd/crates%2Fcore_simd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2FCargo.toml?ref=2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd", "patch": "@@ -9,7 +9,8 @@ categories = [\"hardware-support\", \"no-std\"]\n license = \"MIT OR Apache-2.0\"\n \n [features]\n-default = []\n+default = [\"as_crate\"]\n+as_crate = []\n std = []\n generic_const_exprs = []\n "}, {"sha": "d6022327055602a31afae2c0ec69de9ba5e2db21", "filename": "crates/core_simd/src/elements/float.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd/crates%2Fcore_simd%2Fsrc%2Felements%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd/crates%2Fcore_simd%2Fsrc%2Felements%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Felements%2Ffloat.rs?ref=2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd", "patch": "@@ -113,7 +113,9 @@ pub trait SimdFloat: Copy + Sealed {\n     ///\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::f32x2;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{f32x2, SimdFloat};\n     /// let v = f32x2::from_array([1., 2.]);\n     /// assert_eq!(v.reduce_sum(), 3.);\n     /// ```\n@@ -125,7 +127,9 @@ pub trait SimdFloat: Copy + Sealed {\n     ///\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::f32x2;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{f32x2, SimdFloat};\n     /// let v = f32x2::from_array([3., 4.]);\n     /// assert_eq!(v.reduce_product(), 12.);\n     /// ```\n@@ -142,7 +146,9 @@ pub trait SimdFloat: Copy + Sealed {\n     ///\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::f32x2;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{f32x2, SimdFloat};\n     /// let v = f32x2::from_array([1., 2.]);\n     /// assert_eq!(v.reduce_max(), 2.);\n     ///\n@@ -167,7 +173,9 @@ pub trait SimdFloat: Copy + Sealed {\n     ///\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::f32x2;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{f32x2, SimdFloat};\n     /// let v = f32x2::from_array([3., 7.]);\n     /// assert_eq!(v.reduce_min(), 3.);\n     ///"}, {"sha": "9b8c37ed466ecd3fc877f853218b0d3c76e653c6", "filename": "crates/core_simd/src/elements/int.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd/crates%2Fcore_simd%2Fsrc%2Felements%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd/crates%2Fcore_simd%2Fsrc%2Felements%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Felements%2Fint.rs?ref=2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd", "patch": "@@ -16,7 +16,9 @@ pub trait SimdInt: Copy + Sealed {\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::Simd;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Simd, SimdInt};\n     /// use core::i32::{MIN, MAX};\n     /// let x = Simd::from_array([MIN, 0, 1, MAX]);\n     /// let max = Simd::splat(MAX);\n@@ -32,7 +34,9 @@ pub trait SimdInt: Copy + Sealed {\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::Simd;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Simd, SimdInt};\n     /// use core::i32::{MIN, MAX};\n     /// let x = Simd::from_array([MIN, -2, -1, MAX]);\n     /// let max = Simd::splat(MAX);\n@@ -48,7 +52,9 @@ pub trait SimdInt: Copy + Sealed {\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::Simd;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Simd, SimdInt};\n     /// use core::i32::{MIN, MAX};\n     /// let xs = Simd::from_array([MIN, MIN +1, -5, 0]);\n     /// assert_eq!(xs.abs(), Simd::from_array([MIN, MAX, 5, 0]));\n@@ -61,7 +67,9 @@ pub trait SimdInt: Copy + Sealed {\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::Simd;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Simd, SimdInt};\n     /// use core::i32::{MIN, MAX};\n     /// let xs = Simd::from_array([MIN, -2, 0, 3]);\n     /// let unsat = xs.abs();\n@@ -77,7 +85,9 @@ pub trait SimdInt: Copy + Sealed {\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::Simd;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Simd, SimdInt};\n     /// use core::i32::{MIN, MAX};\n     /// let x = Simd::from_array([MIN, -2, 3, MAX]);\n     /// let unsat = -x;\n@@ -105,7 +115,9 @@ pub trait SimdInt: Copy + Sealed {\n     ///\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::i32x4;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{i32x4, SimdInt};\n     /// let v = i32x4::from_array([1, 2, 3, 4]);\n     /// assert_eq!(v.reduce_sum(), 10);\n     ///\n@@ -121,7 +133,9 @@ pub trait SimdInt: Copy + Sealed {\n     ///\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::i32x4;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{i32x4, SimdInt};\n     /// let v = i32x4::from_array([1, 2, 3, 4]);\n     /// assert_eq!(v.reduce_product(), 24);\n     ///\n@@ -137,7 +151,9 @@ pub trait SimdInt: Copy + Sealed {\n     ///\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::i32x4;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{i32x4, SimdInt};\n     /// let v = i32x4::from_array([1, 2, 3, 4]);\n     /// assert_eq!(v.reduce_max(), 4);\n     /// ```\n@@ -149,7 +165,9 @@ pub trait SimdInt: Copy + Sealed {\n     ///\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::i32x4;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{i32x4, SimdInt};\n     /// let v = i32x4::from_array([1, 2, 3, 4]);\n     /// assert_eq!(v.reduce_min(), 1);\n     /// ```"}, {"sha": "21e7e76eb3de57b021add8b8b123330c4e09f295", "filename": "crates/core_simd/src/elements/uint.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd/crates%2Fcore_simd%2Fsrc%2Felements%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd/crates%2Fcore_simd%2Fsrc%2Felements%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Felements%2Fuint.rs?ref=2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd", "patch": "@@ -11,7 +11,9 @@ pub trait SimdUint: Copy + Sealed {\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::Simd;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Simd, SimdUint};\n     /// use core::u32::MAX;\n     /// let x = Simd::from_array([2, 1, 0, MAX]);\n     /// let max = Simd::splat(MAX);\n@@ -27,7 +29,9 @@ pub trait SimdUint: Copy + Sealed {\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::Simd;\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Simd, SimdUint};\n     /// use core::u32::MAX;\n     /// let x = Simd::from_array([2, 1, 0, MAX]);\n     /// let max = Simd::splat(MAX);"}, {"sha": "8661be938d5bb28a67600af5ae2a681f297d6709", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=2e081db92aa3ee0a4563bc28ce01bdad5b1b2efd", "patch": "@@ -173,7 +173,7 @@ where\n     ///\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core::simd::{Simd, u32x4};\n+    /// # use core::simd::u32x4;\n     /// let source = vec![1, 2, 3, 4, 5, 6];\n     /// let v = u32x4::from_slice(&source);\n     /// assert_eq!(v.as_array(), &[1, 2, 3, 4]);\n@@ -332,7 +332,9 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core_simd::simd::{Simd, SimdPartialOrd, Mask};\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Simd, SimdPartialOrd, Mask};\n     /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 5]);\n     /// let alt = Simd::from_array([-5, -4, -3, -2]);\n@@ -389,7 +391,9 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core_simd::simd::{Simd, Mask};\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Simd, Mask};\n     /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 0]);\n     /// let vals = Simd::from_array([-27, 82, -41, 124]);\n@@ -423,7 +427,9 @@ where\n     /// # Examples\n     /// ```\n     /// # #![feature(portable_simd)]\n-    /// # use core_simd::simd::{Simd, SimdPartialOrd, Mask};\n+    /// # #[cfg(feature = \"as_crate\")] use core_simd::simd;\n+    /// # #[cfg(not(feature = \"as_crate\"))] use core::simd;\n+    /// # use simd::{Simd, SimdPartialOrd, Mask};\n     /// let mut vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n     /// let idxs = Simd::from_array([9, 3, 0, 0]);\n     /// let vals = Simd::from_array([-27, 82, -41, 124]);"}]}