{"sha": "a4e0e6bbf5835afc69ab5df383097a1d7b8293c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZTBlNmJiZjU4MzVhZmM2OWFiNWRmMzgzMDk3YTFkN2I4MjkzYzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-05T22:56:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-12T17:29:47Z"}, "message": "avoid \"type must be known here\" errors if tainted", "tree": {"sha": "f0938b71e60c7ff85234bec3e5640c4d5ba097ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0938b71e60c7ff85234bec3e5640c4d5ba097ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4e0e6bbf5835afc69ab5df383097a1d7b8293c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e0e6bbf5835afc69ab5df383097a1d7b8293c5", "html_url": "https://github.com/rust-lang/rust/commit/a4e0e6bbf5835afc69ab5df383097a1d7b8293c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4e0e6bbf5835afc69ab5df383097a1d7b8293c5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccaa2f855e34028ff9be745ecc9803e720d34b5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccaa2f855e34028ff9be745ecc9803e720d34b5e", "html_url": "https://github.com/rust-lang/rust/commit/ccaa2f855e34028ff9be745ecc9803e720d34b5e"}], "stats": {"total": 75, "additions": 72, "deletions": 3}, "files": [{"sha": "31458eac9ef1816a0d93959774f35d6744e33387", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a4e0e6bbf5835afc69ab5df383097a1d7b8293c5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e0e6bbf5835afc69ab5df383097a1d7b8293c5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a4e0e6bbf5835afc69ab5df383097a1d7b8293c5", "patch": "@@ -4800,9 +4800,11 @@ fn structurally_resolve_type_or_else<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n \n         // If not, error.\n         if alternative.is_ty_var() || alternative.references_error() {\n-            fcx.type_error_message(sp, |_actual| {\n-                \"the type of this value must be known in this context\".to_string()\n-            }, ty, None);\n+            if !fcx.infcx().is_tainted_by_errors() {\n+                fcx.type_error_message(sp, |_actual| {\n+                    \"the type of this value must be known in this context\".to_string()\n+                }, ty, None);\n+            }\n             demand::suptype(fcx, sp, fcx.tcx().types.err, ty);\n             ty = fcx.tcx().types.err;\n         } else {"}, {"sha": "2d78382fea3eed4e00f91cbb1b98909950c40e31", "filename": "src/test/compile-fail/issue-31997.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a4e0e6bbf5835afc69ab5df383097a1d7b8293c5/src%2Ftest%2Fcompile-fail%2Fissue-31997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4e0e6bbf5835afc69ab5df383097a1d7b8293c5/src%2Ftest%2Fcompile-fail%2Fissue-31997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31997.rs?ref=a4e0e6bbf5835afc69ab5df383097a1d7b8293c5", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for this example from #31997 -- main goal is to\n+// emit as minimal and precise an error set as possible. Ideally, we'd\n+// only emit the E0433 error below, but right now we emit two.\n+\n+use std::io::prelude::*;\n+// use std::collections::HashMap;\n+use std::io;\n+\n+#[derive(Debug)]\n+struct Instance {\n+    name: String,\n+    start: Option<String>,\n+    end: Option<String>,\n+}\n+\n+fn main() {\n+    let input = io::stdin();\n+    let mut input = input.lock();\n+\n+    let mut map = HashMap::new();\n+    //~^ ERROR E0433\n+    //~| ERROR E0425\n+\n+    for line in input.lines() {\n+        let line = line.unwrap();\n+        println!(\"process: {}\", line);\n+        let mut parts = line.splitn(2, \":\");\n+        let _logfile = parts.next().unwrap();\n+        let rest = parts.next().unwrap();\n+        let mut parts = line.split(\" [-] \");\n+\n+        let stamp = parts.next().unwrap();\n+\n+        let rest = parts.next().unwrap();\n+        let words = rest.split_whitespace().collect::<Vec<_>>();\n+\n+        let instance = words.iter().find(|a| a.starts_with(\"i-\")).unwrap();\n+        let name = words[1].to_owned();\n+        let mut entry = map.entry(instance.to_owned()).or_insert(Instance {\n+            name: name,\n+            start: None,\n+            end: None,\n+        });\n+\n+        if rest.contains(\"terminating\") {\n+            assert!(entry.end.is_none());\n+            entry.end = Some(stamp.to_string());\n+        }\n+        if rest.contains(\"waiting for\") {\n+            assert!(entry.start.is_none());\n+            entry.start = Some(stamp.to_string());\n+        }\n+\n+    }\n+\n+    println!(\"{:?}\", map);\n+}"}]}