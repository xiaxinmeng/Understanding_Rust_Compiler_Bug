{"sha": "c89a13179ea1d8431868508d79d57ab3c6ce0ac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OWExMzE3OWVhMWQ4NDMxODY4NTA4ZDc5ZDU3YWIzYzZjZTBhYzc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-07T01:49:26Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-07T02:09:19Z"}, "message": "compiletest: uniformly normalize paths, so they all work on all platforms.", "tree": {"sha": "b418419a1fad894bb20069c0b147b3a45b23501a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b418419a1fad894bb20069c0b147b3a45b23501a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c89a13179ea1d8431868508d79d57ab3c6ce0ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c89a13179ea1d8431868508d79d57ab3c6ce0ac7", "html_url": "https://github.com/rust-lang/rust/commit/c89a13179ea1d8431868508d79d57ab3c6ce0ac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c89a13179ea1d8431868508d79d57ab3c6ce0ac7/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb1c67dde4ef2936b4f9b39cf4963584608d3c12", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb1c67dde4ef2936b4f9b39cf4963584608d3c12", "html_url": "https://github.com/rust-lang/rust/commit/bb1c67dde4ef2936b4f9b39cf4963584608d3c12"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "0e4946736fb7c61a1b8b6ebcfae6ea5db8b88ddc", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c89a13179ea1d8431868508d79d57ab3c6ce0ac7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c89a13179ea1d8431868508d79d57ab3c6ce0ac7/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=c89a13179ea1d8431868508d79d57ab3c6ce0ac7", "patch": "@@ -3154,42 +3154,40 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn normalize_output(&self, output: &str, custom_rules: &[(String, String)]) -> String {\n-        let parent_dir = self.testpaths.file.parent().unwrap();\n         let cflags = self.props.compile_flags.join(\" \");\n         let json = cflags.contains(\"--error-format json\")\n             || cflags.contains(\"--error-format pretty-json\")\n             || cflags.contains(\"--error-format=json\")\n             || cflags.contains(\"--error-format=pretty-json\");\n-        let parent_dir_str = if json {\n-            parent_dir.display().to_string().replace(\"\\\\\", \"\\\\\\\\\")\n-        } else {\n-            parent_dir.display().to_string()\n+\n+        let mut normalized = output.to_string();\n+\n+        let mut normalize_path = |from: &Path, to: &str| {\n+            let mut from = from.display().to_string();\n+            if json {\n+                from = from.replace(\"\\\\\", \"\\\\\\\\\");\n+            }\n+            normalized = normalized.replace(&from, to);\n         };\n \n-        let mut normalized = output.replace(&parent_dir_str, \"$DIR\");\n+        let parent_dir = self.testpaths.file.parent().unwrap();\n+        normalize_path(parent_dir, \"$DIR\");\n \n         // Paths into the libstd/libcore\n         let src_dir = self.config.src_base.parent().unwrap().parent().unwrap();\n-        let src_dir_str = if json {\n-            src_dir.display().to_string().replace(\"\\\\\", \"\\\\\\\\\")\n-        } else {\n-            src_dir.display().to_string()\n-        };\n-        normalized = normalized.replace(&src_dir_str, \"$SRC_DIR\");\n+        normalize_path(src_dir, \"$SRC_DIR\");\n \n         // Paths into the build directory\n         let test_build_dir = &self.config.build_base;\n         let parent_build_dir = test_build_dir.parent().unwrap().parent().unwrap().parent().unwrap();\n \n         // eg. /home/user/rust/build/x86_64-unknown-linux-gnu/test/ui\n-        normalized = normalized.replace(test_build_dir.to_str().unwrap(), \"$TEST_BUILD_DIR\");\n+        normalize_path(test_build_dir, \"$TEST_BUILD_DIR\");\n         // eg. /home/user/rust/build\n-        normalized = normalized.replace(&parent_build_dir.to_str().unwrap(), \"$BUILD_DIR\");\n+        normalize_path(parent_build_dir, \"$BUILD_DIR\");\n \n         // Paths into lib directory.\n-        let mut lib_dir = parent_build_dir.parent().unwrap().to_path_buf();\n-        lib_dir.push(\"lib\");\n-        normalized = normalized.replace(&lib_dir.to_str().unwrap(), \"$LIB_DIR\");\n+        normalize_path(&parent_build_dir.parent().unwrap().join(\"lib\"), \"$LIB_DIR\");\n \n         if json {\n             // escaped newlines in json strings should be readable"}]}