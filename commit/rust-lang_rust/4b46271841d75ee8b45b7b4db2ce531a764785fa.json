{"sha": "4b46271841d75ee8b45b7b4db2ce531a764785fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNDYyNzE4NDFkNzVlZThiNDViN2I0ZGIyY2U1MzFhNzY0Nzg1ZmE=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-03-13T00:14:13Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-03-13T00:17:08Z"}, "message": "Remove a couple of Rc's from RegionInferenceContext", "tree": {"sha": "ba655ce20db1175117fe8e8cbbea3c4b4c79d14a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba655ce20db1175117fe8e8cbbea3c4b4c79d14a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b46271841d75ee8b45b7b4db2ce531a764785fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b46271841d75ee8b45b7b4db2ce531a764785fa", "html_url": "https://github.com/rust-lang/rust/commit/4b46271841d75ee8b45b7b4db2ce531a764785fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b46271841d75ee8b45b7b4db2ce531a764785fa/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54b7d21f59a363e53eb1c31d76b40af2ff99321c", "url": "https://api.github.com/repos/rust-lang/rust/commits/54b7d21f59a363e53eb1c31d76b40af2ff99321c", "html_url": "https://github.com/rust-lang/rust/commit/54b7d21f59a363e53eb1c31d76b40af2ff99321c"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "8dc6ee7ea3b16b1fa0cbfdc2f76b9bbd8bbb31cb", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4b46271841d75ee8b45b7b4db2ce531a764785fa/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b46271841d75ee8b45b7b4db2ce531a764785fa/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4b46271841d75ee8b45b7b4db2ce531a764785fa", "patch": "@@ -73,6 +73,24 @@ crate use place_ext::PlaceExt;\n crate use places_conflict::{places_conflict, PlaceConflictBias};\n crate use region_infer::RegionInferenceContext;\n \n+/// An owned immutable value.\n+#[derive(Debug)]\n+struct Frozen<T>(T);\n+\n+impl<T> Frozen<T> {\n+    pub fn freeze(val: T) -> Self {\n+        Frozen(val)\n+    }\n+}\n+\n+impl<T> std::ops::Deref for Frozen<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &self.0\n+    }\n+}\n+\n // FIXME(eddyb) perhaps move this somewhere more centrally.\n #[derive(Debug)]\n crate struct Upvar {\n@@ -1577,11 +1595,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 mpi,\n             );\n         } // Only query longest prefix with a MovePath, not further\n-        // ancestors; dataflow recurs on children when parents\n-        // move (to support partial (re)inits).\n-        //\n-        // (I.e., querying parents breaks scenario 7; but may want\n-        // to do such a query based on partial-init feature-gate.)\n+          // ancestors; dataflow recurs on children when parents\n+          // move (to support partial (re)inits).\n+          //\n+          // (I.e., querying parents breaks scenario 7; but may want\n+          // to do such a query based on partial-init feature-gate.)\n     }\n \n     /// Subslices correspond to multiple move paths, so we iterate through the"}, {"sha": "43744d782192a6e3fcb8aec99dbdb3b1c99be73c", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b46271841d75ee8b45b7b4db2ce531a764785fa/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b46271841d75ee8b45b7b4db2ce531a764785fa/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=4b46271841d75ee8b45b7b4db2ce531a764785fa", "patch": "@@ -31,6 +31,7 @@ use crate::borrow_check::{\n     },\n     type_check::{free_region_relations::UniversalRegionRelations, Locations},\n     universal_regions::UniversalRegions,\n+    Frozen,\n };\n \n mod dump_mir;\n@@ -54,12 +55,12 @@ pub struct RegionInferenceContext<'tcx> {\n     liveness_constraints: LivenessValues<RegionVid>,\n \n     /// The outlives constraints computed by the type-check.\n-    constraints: Rc<OutlivesConstraintSet>,\n+    constraints: Frozen<OutlivesConstraintSet>,\n \n     /// The constraint-set, but in graph form, making it easy to traverse\n     /// the constraints adjacent to a particular region. Used to construct\n     /// the SCC (see `constraint_sccs`) and for error reporting.\n-    constraint_graph: Rc<NormalConstraintGraph>,\n+    constraint_graph: Frozen<NormalConstraintGraph>,\n \n     /// The SCC computed from `constraints` and the constraint\n     /// graph. We have an edge from SCC A to SCC B if `A: B`. Used to\n@@ -263,8 +264,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .map(|info| RegionDefinition::new(info.universe, info.origin))\n             .collect();\n \n-        let constraints = Rc::new(outlives_constraints); // freeze constraints\n-        let constraint_graph = Rc::new(constraints.graph(definitions.len()));\n+        let constraints = Frozen::freeze(outlives_constraints);\n+        let constraint_graph = Frozen::freeze(constraints.graph(definitions.len()));\n         let fr_static = universal_regions.fr_static;\n         let constraint_sccs = Rc::new(constraints.compute_sccs(&constraint_graph, fr_static));\n "}]}