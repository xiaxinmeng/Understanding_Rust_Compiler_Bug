{"sha": "3bf775e80feb8cf04c67d37dd2aa826ba4fa6111", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZjc3NWU4MGZlYjhjZjA0YzY3ZDM3ZGQyYWE4MjZiYTRmYTYxMTE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-23T02:35:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-23T02:35:48Z"}, "message": "Pass outptr as in rustboot. Probably need to revisit this ABI. Also disgusting hack employed. Please remove.", "tree": {"sha": "dfd757a6c178367ef459b2dc5fb5d4224867b95d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfd757a6c178367ef459b2dc5fb5d4224867b95d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf775e80feb8cf04c67d37dd2aa826ba4fa6111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf775e80feb8cf04c67d37dd2aa826ba4fa6111", "html_url": "https://github.com/rust-lang/rust/commit/3bf775e80feb8cf04c67d37dd2aa826ba4fa6111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf775e80feb8cf04c67d37dd2aa826ba4fa6111/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2f07c60564dc1dce5151cb45423371915f5f87b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2f07c60564dc1dce5151cb45423371915f5f87b", "html_url": "https://github.com/rust-lang/rust/commit/b2f07c60564dc1dce5151cb45423371915f5f87b"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "07fcce04d2a9d3b5a289792a5d84d0740256f114", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3bf775e80feb8cf04c67d37dd2aa826ba4fa6111/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf775e80feb8cf04c67d37dd2aa826ba4fa6111/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3bf775e80feb8cf04c67d37dd2aa826ba4fa6111", "patch": "@@ -657,21 +657,24 @@ fn trans_if(@block_ctxt cx, &ast.expr cond,\n // (that is represented as an alloca, hence needs a 'load' to be\n // used as an rval).\n \n-fn trans_lval(@block_ctxt cx, &ast.expr e) -> tup(result, bool) {\n+fn trans_lval(@block_ctxt cx, &ast.expr e)\n+    -> tup(result, bool, ast.def_id) {\n     alt (e.node) {\n         case (ast.expr_name(?n, ?dopt, _)) {\n             alt (dopt) {\n                 case (some[ast.def](?def)) {\n                     alt (def) {\n                         case (ast.def_arg(?did)) {\n-                            ret tup(res(cx, cx.fcx.llargs.get(did)), false);\n+                            ret tup(res(cx, cx.fcx.llargs.get(did)),\n+                                    false, did);\n                         }\n                         case (ast.def_local(?did)) {\n-                            ret tup(res(cx, cx.fcx.lllocals.get(did)), true);\n+                            ret tup(res(cx, cx.fcx.lllocals.get(did)),\n+                                    true, did);\n                         }\n                         case (ast.def_fn(?did)) {\n                             ret tup(res(cx, cx.fcx.tcx.fn_ids.get(did)),\n-                                    false);\n+                                    false, did);\n                         }\n                         case (_) {\n                             cx.fcx.tcx.sess.unimpl(\"def variant in trans\");\n@@ -751,8 +754,18 @@ fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n         case (ast.expr_call(?f, ?args, _)) {\n             auto f_res = trans_lval(cx, *f);\n             check (! f_res._1);\n+\n+            // FIXME: Revolting hack to get the type of the outptr. Can get a\n+            // variety of other ways; will wait until we have a typechecker\n+            // perhaps to pick a more tasteful one.\n+            auto outptr = cx.fcx.lloutptr;\n+            alt (cx.fcx.tcx.items.get(f_res._2).node) {\n+                case (ast.item_fn(_, ?ff, _)) {\n+                    outptr = cx.build.Alloca(type_of(cx.fcx.tcx, ff.output));\n+                }\n+            }\n             auto args_res = trans_exprs(f_res._0.bcx, args);\n-            auto llargs = vec(cx.fcx.lloutptr,\n+            auto llargs = vec(outptr,\n                               cx.fcx.lltaskptr);\n             llargs += args_res._1;\n             ret res(args_res._0,"}]}