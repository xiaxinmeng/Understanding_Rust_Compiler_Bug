{"sha": "d88c03c0f1082d01294ef8cf5d14194d5d1284fa", "node_id": "C_kwDOAAsO6NoAKGQ4OGMwM2MwZjEwODJkMDEyOTRlZjhjZjVkMTQxOTRkNWQxMjg0ZmE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-28T02:12:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-28T02:12:10Z"}, "message": "Rollup merge of #95016 - janpaul123:patch-1, r=dtolnay\n\nDocs: make Vec::from_raw_parts documentation less strict\n\nThis is my first PR; be gentle!\n\nIn https://users.rust-lang.org/t/why-does-vec-from-raw-parts-require-same-size-and-not-same-size-capacity/73036/2?u=janpaul123 it was suggested to me that I should make a PR to make the documentation of `Vec::from_raw_parts` less strict, since we don't require `T` to have the same size, just `size_of::<T>() * capacity` to be the same, since that is what results in `Layout::size` being the same in `dealloc`, which is really what matters.\n\nAlso in https://users.rust-lang.org/t/why-does-vec-from-raw-parts-require-same-size-and-not-same-size-capacity/73036/8?u=janpaul123 it was suggested that it's better to use `slice::from_raw_parts`, which I think is useful advise that could also be mentioned in the docs, so I added that too.\n\nLet me know what you think! :)", "tree": {"sha": "91b2749c2c48105b5eea3f9b5222d444352e0271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91b2749c2c48105b5eea3f9b5222d444352e0271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d88c03c0f1082d01294ef8cf5d14194d5d1284fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQRl7CRBK7hj4Ov3rIwAAWf4IAI+qMvmM3a20MQXJC0JBkeUG\nKGf9GRyC8V/ELn3CfBnnC1wL/BjqpNM2lCOrrzjhW0sl2xkUecPggm4++LKrEoiE\nYovX/tvX436hXeYeJQ4pI4yf5b6Ho28n37MfrxcWoIvsfxWJe3rowIlOx7vj+5pM\nJAgEtJmRVGM1JYb8wJvlia94aeFR9F0wMhIH/E27olb8qU9fC6JgIFHY5C8KHZn3\nNQEWmt5fxcwLeXT41MjBJdoGuQBYnSdjZPHkSgyVcxfHWy1dnog8Az4HuiZNOklJ\nKjrKB0JIlSnK0sbUVjN5umB6/JfEIJXJwuDke2vpc+YRaeUsbL9ukATTJRR+Y+s=\n=aL9c\n-----END PGP SIGNATURE-----\n", "payload": "tree 91b2749c2c48105b5eea3f9b5222d444352e0271\nparent 6ed1a67b3805bdea306ee055e035e298f92a10e4\nparent 80340f62fee46c1ac5ea787e4dcbe553c6abd41a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648433530 +0200\ncommitter GitHub <noreply@github.com> 1648433530 +0200\n\nRollup merge of #95016 - janpaul123:patch-1, r=dtolnay\n\nDocs: make Vec::from_raw_parts documentation less strict\n\nThis is my first PR; be gentle!\n\nIn https://users.rust-lang.org/t/why-does-vec-from-raw-parts-require-same-size-and-not-same-size-capacity/73036/2?u=janpaul123 it was suggested to me that I should make a PR to make the documentation of `Vec::from_raw_parts` less strict, since we don't require `T` to have the same size, just `size_of::<T>() * capacity` to be the same, since that is what results in `Layout::size` being the same in `dealloc`, which is really what matters.\n\nAlso in https://users.rust-lang.org/t/why-does-vec-from-raw-parts-require-same-size-and-not-same-size-capacity/73036/8?u=janpaul123 it was suggested that it's better to use `slice::from_raw_parts`, which I think is useful advise that could also be mentioned in the docs, so I added that too.\n\nLet me know what you think! :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d88c03c0f1082d01294ef8cf5d14194d5d1284fa", "html_url": "https://github.com/rust-lang/rust/commit/d88c03c0f1082d01294ef8cf5d14194d5d1284fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d88c03c0f1082d01294ef8cf5d14194d5d1284fa/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ed1a67b3805bdea306ee055e035e298f92a10e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed1a67b3805bdea306ee055e035e298f92a10e4", "html_url": "https://github.com/rust-lang/rust/commit/6ed1a67b3805bdea306ee055e035e298f92a10e4"}, {"sha": "80340f62fee46c1ac5ea787e4dcbe553c6abd41a", "url": "https://api.github.com/repos/rust-lang/rust/commits/80340f62fee46c1ac5ea787e4dcbe553c6abd41a", "html_url": "https://github.com/rust-lang/rust/commit/80340f62fee46c1ac5ea787e4dcbe553c6abd41a"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "0bfd82101a700e62ba1ec56b51199ec55a7d0e9b", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d88c03c0f1082d01294ef8cf5d14194d5d1284fa/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d88c03c0f1082d01294ef8cf5d14194d5d1284fa/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=d88c03c0f1082d01294ef8cf5d14194d5d1284fa", "patch": "@@ -479,20 +479,24 @@ impl<T> Vec<T> {\n     ///\n     /// * `ptr` needs to have been previously allocated via [`String`]/`Vec<T>`\n     ///   (at least, it's highly likely to be incorrect if it wasn't).\n-    /// * `T` needs to have the same size and alignment as what `ptr` was allocated with.\n+    /// * `T` needs to have the same alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n     ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n     ///   allocated and deallocated with the same layout.)\n+    /// * The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n+    ///   to be the same size as the pointer was allocated with. (Because similar to\n+    ///   alignment, [`dealloc`] must be called with the same layout `size`.)\n     /// * `length` needs to be less than or equal to `capacity`.\n-    /// * `capacity` needs to be the capacity that the pointer was allocated with.\n     ///\n     /// Violating these may cause problems like corrupting the allocator's\n     /// internal data structures. For example it is **not** safe\n     /// to build a `Vec<u8>` from a pointer to a C `char` array with length `size_t`.\n     /// It's also not safe to build one from a `Vec<u16>` and its length, because\n     /// the allocator cares about the alignment, and these two types have different\n     /// alignments. The buffer was allocated with alignment 2 (for `u16`), but after\n-    /// turning it into a `Vec<u8>` it'll be deallocated with alignment 1.\n+    /// turning it into a `Vec<u8>` it'll be deallocated with alignment 1. To avoid\n+    /// these issues, it is often preferable to do casting/transmuting using\n+    /// [`slice::from_raw_parts`] instead.\n     ///\n     /// The ownership of `ptr` is effectively transferred to the\n     /// `Vec<T>` which may then deallocate, reallocate or change the"}]}