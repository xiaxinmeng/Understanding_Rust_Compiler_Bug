{"sha": "3590f4cf5745b609fbdbb8b4249f93a3df81c80e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OTBmNGNmNTc0NWI2MDlmYmRiYjhiNDI0OWY5M2EzZGY4MWM4MGU=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-01T22:23:55Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:41:32Z"}, "message": "Work around more LLVM limitations", "tree": {"sha": "1cd1595f73f3607aeadb643b24161d798b8c9233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd1595f73f3607aeadb643b24161d798b8c9233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3590f4cf5745b609fbdbb8b4249f93a3df81c80e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3590f4cf5745b609fbdbb8b4249f93a3df81c80e", "html_url": "https://github.com/rust-lang/rust/commit/3590f4cf5745b609fbdbb8b4249f93a3df81c80e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3590f4cf5745b609fbdbb8b4249f93a3df81c80e/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5", "html_url": "https://github.com/rust-lang/rust/commit/19a0d14b5c5bc9d2f9a9c305a00844ad2b0d62f5"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "861a756a2ef295b21c6cd3de1253c1ad74f3dc8d", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/3590f4cf5745b609fbdbb8b4249f93a3df81c80e/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3590f4cf5745b609fbdbb8b4249f93a3df81c80e/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=3590f4cf5745b609fbdbb8b4249f93a3df81c80e", "patch": "@@ -409,7 +409,7 @@ fn reg_to_llvm(reg: InlineAsmRegOrRegClass) -> String {\n             InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::freg) => \"f\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg) => \"r\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd) => \"Q\",\n-            InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_byte) => \"r\",\n+            InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_byte) => \"q\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::xmm_reg)\n             | InlineAsmRegClass::X86(X86InlineAsmRegClass::ymm_reg) => \"x\",\n             InlineAsmRegClass::X86(X86InlineAsmRegClass::zmm_reg) => \"v\",\n@@ -558,6 +558,31 @@ fn llvm_fixup_input(\n             let indices: Vec<_> = (0..count * 2).map(|x| bx.const_i32(x as i32)).collect();\n             bx.shuffle_vector(value, bx.const_undef(vec_ty), bx.const_vector(&indices))\n         }\n+        (InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd), Abi::Scalar(s))\n+            if s.value == Primitive::F64 =>\n+        {\n+            bx.bitcast(value, bx.cx.type_i64())\n+        }\n+        (\n+            InlineAsmRegClass::X86(X86InlineAsmRegClass::xmm_reg | X86InlineAsmRegClass::zmm_reg),\n+            Abi::Vector { .. },\n+        ) if layout.size.bytes() == 64 => bx.bitcast(value, bx.cx.type_vector(bx.cx.type_f64(), 8)),\n+        (\n+            InlineAsmRegClass::Arm(\n+                ArmInlineAsmRegClass::sreg_low16\n+                | ArmInlineAsmRegClass::dreg_low8\n+                | ArmInlineAsmRegClass::qreg_low4\n+                | ArmInlineAsmRegClass::dreg\n+                | ArmInlineAsmRegClass::qreg,\n+            ),\n+            Abi::Scalar(s),\n+        ) => {\n+            if let Primitive::Int(Integer::I32, _) = s.value {\n+                bx.bitcast(value, bx.cx.type_f32())\n+            } else {\n+                value\n+            }\n+        }\n         _ => value,\n     }\n }\n@@ -593,6 +618,31 @@ fn llvm_fixup_output(\n             let indices: Vec<_> = (0..*count).map(|x| bx.const_i32(x as i32)).collect();\n             bx.shuffle_vector(value, bx.const_undef(vec_ty), bx.const_vector(&indices))\n         }\n+        (InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd), Abi::Scalar(s))\n+            if s.value == Primitive::F64 =>\n+        {\n+            bx.bitcast(value, bx.cx.type_f64())\n+        }\n+        (\n+            InlineAsmRegClass::X86(X86InlineAsmRegClass::xmm_reg | X86InlineAsmRegClass::zmm_reg),\n+            Abi::Vector { .. },\n+        ) if layout.size.bytes() == 64 => bx.bitcast(value, layout.llvm_type(bx.cx)),\n+        (\n+            InlineAsmRegClass::Arm(\n+                ArmInlineAsmRegClass::sreg_low16\n+                | ArmInlineAsmRegClass::dreg_low8\n+                | ArmInlineAsmRegClass::qreg_low4\n+                | ArmInlineAsmRegClass::dreg\n+                | ArmInlineAsmRegClass::qreg,\n+            ),\n+            Abi::Scalar(s),\n+        ) => {\n+            if let Primitive::Int(Integer::I32, _) = s.value {\n+                bx.bitcast(value, bx.cx.type_i32())\n+            } else {\n+                value\n+            }\n+        }\n         _ => value,\n     }\n }\n@@ -623,6 +673,31 @@ fn llvm_fixup_output_type(\n             let elem_ty = llvm_asm_scalar_type(cx, element);\n             cx.type_vector(elem_ty, count * 2)\n         }\n+        (InlineAsmRegClass::X86(X86InlineAsmRegClass::reg_abcd), Abi::Scalar(s))\n+            if s.value == Primitive::F64 =>\n+        {\n+            cx.type_i64()\n+        }\n+        (\n+            InlineAsmRegClass::X86(X86InlineAsmRegClass::xmm_reg | X86InlineAsmRegClass::zmm_reg),\n+            Abi::Vector { .. },\n+        ) if layout.size.bytes() == 64 => cx.type_vector(cx.type_f64(), 8),\n+        (\n+            InlineAsmRegClass::Arm(\n+                ArmInlineAsmRegClass::sreg_low16\n+                | ArmInlineAsmRegClass::dreg_low8\n+                | ArmInlineAsmRegClass::qreg_low4\n+                | ArmInlineAsmRegClass::dreg\n+                | ArmInlineAsmRegClass::qreg,\n+            ),\n+            Abi::Scalar(s),\n+        ) => {\n+            if let Primitive::Int(Integer::I32, _) = s.value {\n+                cx.type_f32()\n+            } else {\n+                layout.llvm_type(cx)\n+            }\n+        }\n         _ => layout.llvm_type(cx),\n     }\n }"}]}