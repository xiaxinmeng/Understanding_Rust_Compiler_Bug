{"sha": "f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YmFhZDJiNWVhZTBkYmU4YzU5NzY4ZDUxYzI2ODFhMmNmN2M5ZjE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-13T22:08:13Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-14T15:05:45Z"}, "message": "rustc_metadata: Remove resolutions for extern crate items from `CStore`\n\nUse a more traditional scheme with providing them as a resolver output", "tree": {"sha": "35b38e8b52a843fe8ba8b18d9d0713a510629c69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b38e8b52a843fe8ba8b18d9d0713a510629c69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "html_url": "https://github.com/rust-lang/rust/commit/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e843d867e62a06330e63b419ccd50c178dae40aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e843d867e62a06330e63b419ccd50c178dae40aa", "html_url": "https://github.com/rust-lang/rust/commit/e843d867e62a06330e63b419ccd50c178dae40aa"}], "stats": {"total": 39, "additions": 16, "deletions": 23}, "files": [{"sha": "2170a288c922bac2d84a27e2c041fdaf9694116c", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "patch": "@@ -214,7 +214,6 @@ pub trait CrateStore {\n     fn crate_is_private_dep_untracked(&self, cnum: CrateNum) -> bool;\n     fn crate_disambiguator_untracked(&self, cnum: CrateNum) -> CrateDisambiguator;\n     fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n-    fn extern_mod_stmt_cnum_untracked(&self, emod_id: ast::NodeId) -> Option<CrateNum>;\n     fn item_generics_cloned_untracked(&self, def: DefId, sess: &Session) -> ty::Generics;\n     fn postorder_cnums_untracked(&self) -> Vec<CrateNum>;\n "}, {"sha": "256194cfb00ef79a0fff741d532d50eaa68707a0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "patch": "@@ -43,7 +43,7 @@ use crate::ty::subst::{UserSubsts, GenericArgKind};\n use crate::ty::{BoundVar, BindingMode};\n use crate::ty::CanonicalPolyFnSig;\n use crate::util::common::ErrorReported;\n-use crate::util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap, ItemLocalSet};\n+use crate::util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap, ItemLocalSet, NodeMap};\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n use crate::util::profiling::SelfProfilerRef;\n \n@@ -1051,6 +1051,9 @@ pub struct GlobalCtxt<'tcx> {\n     /// Common consts, pre-interned for your convenience.\n     pub consts: CommonConsts<'tcx>,\n \n+    /// Resolutions of `extern crate` items produced by resolver.\n+    extern_crate_map: NodeMap<CrateNum>,\n+\n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n     trait_map: FxHashMap<DefIndex,\n@@ -1274,6 +1277,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             types: common_types,\n             lifetimes: common_lifetimes,\n             consts: common_consts,\n+            extern_crate_map: resolutions.extern_crate_map,\n             trait_map,\n             export_map: resolutions.export_map.into_iter().map(|(k, v)| {\n                 let exports: Vec<_> = v.into_iter().map(|e| {\n@@ -2951,7 +2955,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     };\n     providers.extern_mod_stmt_cnum = |tcx, id| {\n         let id = tcx.hir().as_local_node_id(id).unwrap();\n-        tcx.cstore.extern_mod_stmt_cnum_untracked(id)\n+        tcx.extern_crate_map.get(&id).cloned()\n     };\n     providers.all_crate_nums = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "00b5fa23047eb165f6ae075a169b0a64536beccf", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "patch": "@@ -28,7 +28,7 @@ use crate::ty::subst::{Subst, InternalSubsts, SubstsRef};\n use crate::ty::util::{IntTypeExt, Discr};\n use crate::ty::walk::TypeWalker;\n use crate::util::captures::Captures;\n-use crate::util::nodemap::{NodeSet, DefIdMap, FxHashMap};\n+use crate::util::nodemap::{NodeMap, NodeSet, DefIdMap, FxHashMap};\n use arena::SyncDroplessArena;\n use crate::session::DataTypeKind;\n \n@@ -121,6 +121,7 @@ mod sty;\n \n #[derive(Clone)]\n pub struct Resolutions {\n+    pub extern_crate_map: NodeMap<CrateNum>,\n     pub trait_map: TraitMap,\n     pub maybe_unused_trait_imports: NodeSet,\n     pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,"}, {"sha": "56c7d6adb19c587eee2c4d01d028e888be36b21e", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "patch": "@@ -169,6 +169,7 @@ impl ExpansionResult {\n         ExpansionResult {\n             defs: Steal::new(resolver.definitions),\n             resolutions: Steal::new(Resolutions {\n+                extern_crate_map: resolver.extern_crate_map,\n                 export_map: resolver.export_map,\n                 trait_map: resolver.trait_map,\n                 glob_map: resolver.glob_map,\n@@ -187,6 +188,7 @@ impl ExpansionResult {\n         ExpansionResult {\n             defs: Steal::new(resolver.definitions.clone()),\n             resolutions: Steal::new(Resolutions {\n+                extern_crate_map: resolver.extern_crate_map.clone(),\n                 export_map: resolver.export_map.clone(),\n                 trait_map: resolver.trait_map.clone(),\n                 glob_map: resolver.glob_map.clone(),"}, {"sha": "9850121d2ce5d782e6f1742c1e104cd588d02f41", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "patch": "@@ -1004,7 +1004,6 @@ impl<'a> CrateLoader<'a> {\n                     },\n                     &mut FxHashSet::default(),\n                 );\n-                self.cstore.add_extern_mod_stmt_cnum(item.id, cnum);\n                 cnum\n             }\n             _ => bug!(),"}, {"sha": "a5a458e49a38e5f398c4e3ef45801b670047af0f", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::map::definitions::DefPathTable;\n use rustc::middle::cstore::{CrateSource, DepKind, ExternCrate, MetadataLoader};\n use rustc::mir::interpret::AllocDecodingState;\n use rustc_index::vec::IndexVec;\n-use rustc::util::nodemap::{FxHashMap, NodeMap};\n+use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::sync::{Lrc, RwLock, Lock, MetadataRef, AtomicCell};\n use syntax::ast;\n use syntax::ext::base::SyntaxExtension;\n@@ -96,8 +96,6 @@ pub struct CrateMetadata {\n \n pub struct CStore {\n     metas: RwLock<IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>>,\n-    /// Map from NodeId's of local extern crate statements to crate numbers\n-    extern_mod_crate_map: Lock<NodeMap<CrateNum>>,\n     crate metadata_loader: Box<dyn MetadataLoader + Sync>,\n }\n \n@@ -114,7 +112,6 @@ impl CStore {\n             // corresponding `CrateNum`. This first entry will always remain\n             // `None`.\n             metas: RwLock::new(IndexVec::from_elem_n(None, 1)),\n-            extern_mod_crate_map: Default::default(),\n             metadata_loader,\n         }\n     }\n@@ -178,12 +175,4 @@ impl CStore {\n         }\n         return ordering\n     }\n-\n-    crate fn add_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId, cnum: CrateNum) {\n-        self.extern_mod_crate_map.borrow_mut().insert(emod_id, cnum);\n-    }\n-\n-    crate fn do_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum> {\n-        self.extern_mod_crate_map.borrow().get(&emod_id).cloned()\n-    }\n }"}, {"sha": "fd011265da7cb72d3527bf71c86bb4ae262b1b9e", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "patch": "@@ -538,11 +538,6 @@ impl CrateStore for cstore::CStore {\n         result\n     }\n \n-    fn extern_mod_stmt_cnum_untracked(&self, emod_id: ast::NodeId) -> Option<CrateNum>\n-    {\n-        self.do_extern_mod_stmt_cnum(emod_id)\n-    }\n-\n     fn postorder_cnums_untracked(&self) -> Vec<CrateNum> {\n         self.do_postorder_cnums_untracked()\n     }"}, {"sha": "1f86aafbddff57339e24f69c512f68e03c39a9db", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "patch": "@@ -617,6 +617,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     let crate_id = self.r.crate_loader.process_extern_crate(\n                         item, &self.r.definitions\n                     );\n+                    self.r.extern_crate_map.insert(item.id, crate_id);\n                     self.r.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n                 };\n "}, {"sha": "5f77bcfeb7ffc689bcda8a4e391a2c5e52f8d297", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f5baad2b5eae0dbe8c59768d51c2681a2cf7c9f1", "patch": "@@ -26,7 +26,7 @@ use rustc::session::Session;\n use rustc::lint;\n use rustc::hir::def::{self, DefKind, PartialRes, CtorKind, CtorOf, NonMacroAttrKind, ExportMap};\n use rustc::hir::def::Namespace::*;\n-use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n+use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, CrateNum, DefId};\n use rustc::hir::{TraitMap, GlobMap};\n use rustc::ty::{self, DefIdTree};\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n@@ -855,6 +855,8 @@ pub struct Resolver<'a> {\n     /// Resolutions for labels (node IDs of their corresponding blocks or loops).\n     label_res_map: NodeMap<NodeId>,\n \n+    /// `CrateNum` resolutions of `extern crate` items.\n+    pub extern_crate_map: NodeMap<CrateNum>,\n     pub export_map: ExportMap<NodeId>,\n     pub trait_map: TraitMap,\n \n@@ -1155,6 +1157,7 @@ impl<'a> Resolver<'a> {\n             partial_res_map: Default::default(),\n             import_res_map: Default::default(),\n             label_res_map: Default::default(),\n+            extern_crate_map: Default::default(),\n             export_map: FxHashMap::default(),\n             trait_map: Default::default(),\n             empty_module,"}]}