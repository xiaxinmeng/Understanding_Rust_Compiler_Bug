{"sha": "514813148b68d86a0dd9b5ebea9ec4fc415fdac0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNDgxMzE0OGI2OGQ4NmEwZGQ5YjVlYmVhOWVjNGZjNDE1ZmRhYzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-19T03:16:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-19T03:23:05Z"}, "message": "rustc: Store the lhs and rhs of receive exprs in left to right order\n\nWith the changing of receive semantics the parser has been putting the rhs\nexpression in the first argument of expr_recv and the lhs in the second, and\nall subsequent passes have been referring to them backwords (but still doing\nthe right thing because they were assuming that lhs was the port and rhs was\nthe receiver).\n\nThis makes all code agree on what lhs and rhs mean for receive expressions.", "tree": {"sha": "a0a59ac42d7565aaf1d49aa8fbeb62479373c1ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0a59ac42d7565aaf1d49aa8fbeb62479373c1ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/514813148b68d86a0dd9b5ebea9ec4fc415fdac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/514813148b68d86a0dd9b5ebea9ec4fc415fdac0", "html_url": "https://github.com/rust-lang/rust/commit/514813148b68d86a0dd9b5ebea9ec4fc415fdac0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "364cd5763c118eb7bc73a36c7eefcd842f506f8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/364cd5763c118eb7bc73a36c7eefcd842f506f8f", "html_url": "https://github.com/rust-lang/rust/commit/364cd5763c118eb7bc73a36c7eefcd842f506f8f"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "e986ab482d024a2f285a1da292cab2063a61ddaf", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=514813148b68d86a0dd9b5ebea9ec4fc415fdac0", "patch": "@@ -1201,7 +1201,7 @@ fn parse_assign_expr(&parser p) -> @ast::expr {\n             p.bump();\n             auto rhs = parse_expr(p);\n             ret @spanned(lo, rhs.span.hi,\n-                         ast::expr_recv(rhs, lhs, p.get_ann()));\n+                         ast::expr_recv(lhs, rhs, p.get_ann()));\n         }\n         case (token::DARROW) {\n             p.bump();"}, {"sha": "f0c477f8fea42454dcd67bfae0cd9d73975a642d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=514813148b68d86a0dd9b5ebea9ec4fc415fdac0", "patch": "@@ -6429,30 +6429,30 @@ fn trans_send(&@block_ctxt cx, &@ast::expr lhs, &@ast::expr rhs,\n fn trans_recv(&@block_ctxt cx, &@ast::expr lhs, &@ast::expr rhs,\n               &ast::ann ann) -> result {\n     auto bcx = cx;\n-    auto data = trans_lval(bcx, lhs);\n+    auto data = trans_lval(bcx, rhs);\n     assert (data.is_mem);\n     bcx = data.res.bcx;\n     auto unit_ty = node_ann_type(bcx.fcx.lcx.ccx, ann);\n     // FIXME: calculate copy init-ness in typestate.\n \n-    ret recv_val(bcx, data.res.val, rhs, unit_ty, DROP_EXISTING);\n+    ret recv_val(bcx, data.res.val, lhs, unit_ty, DROP_EXISTING);\n }\n \n-fn recv_val(&@block_ctxt cx, ValueRef lhs, &@ast::expr rhs, &ty::t unit_ty,\n+fn recv_val(&@block_ctxt cx, ValueRef to, &@ast::expr from, &ty::t unit_ty,\n             copy_action action) -> result {\n     auto bcx = cx;\n-    auto prt = trans_expr(bcx, rhs);\n+    auto prt = trans_expr(bcx, from);\n     bcx = prt.bcx;\n-    auto lldataptr = bcx.build.PointerCast(lhs, T_ptr(T_ptr(T_i8())));\n+    auto lldataptr = bcx.build.PointerCast(to, T_ptr(T_ptr(T_i8())));\n     auto llportptr = bcx.build.PointerCast(prt.val, T_opaque_port_ptr());\n     bcx.build.Call(bcx.fcx.lcx.ccx.upcalls.recv,\n                    [bcx.fcx.lltaskptr, lldataptr, llportptr]);\n-    auto data_load = load_if_immediate(bcx, lhs, unit_ty);\n-    auto cp = copy_val(bcx, action, lhs, data_load, unit_ty);\n+    auto data_load = load_if_immediate(bcx, to, unit_ty);\n+    auto cp = copy_val(bcx, action, to, data_load, unit_ty);\n     bcx = cp.bcx;\n     // TODO: Any cleanup need to be done here?\n \n-    ret res(bcx, lhs);\n+    ret res(bcx, to);\n }\n \n "}, {"sha": "30e11ddad830ae9b81f8340fac41ead6093a6d22", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=514813148b68d86a0dd9b5ebea9ec4fc415fdac0", "patch": "@@ -387,12 +387,12 @@ fn find_pre_post_expr(&fn_ctxt fcx, @expr e) {\n             }\n         }\n         case (expr_recv(?lhs, ?rhs, ?a)) {\n-            alt (lhs.node) {\n-                case (expr_path(?p, ?a_lhs)) {\n-                    gen_if_local(fcx, lhs, rhs, a, a_lhs, p);\n+            alt (rhs.node) {\n+                case (expr_path(?p, ?a_rhs)) {\n+                    gen_if_local(fcx, rhs, lhs, a, a_rhs, p);\n                 }\n                 case (_) {\n-                    // doesn't check that lhs is an lval, but\n+                    // doesn't check that rhs is an lval, but\n                     // that's probably ok\n \n                     find_pre_post_exprs(fcx, [lhs, rhs], a);"}, {"sha": "07f3890b82d80e93e7a987bbd6b9c1bc2137fd90", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=514813148b68d86a0dd9b5ebea9ec4fc415fdac0", "patch": "@@ -447,31 +447,31 @@ fn find_pre_post_state_expr(&fn_ctxt fcx, &prestate pres, @expr e) -> bool {\n         }\n         case (expr_recv(?lhs, ?rhs, ?a)) {\n             extend_prestate_ann(fcx.ccx, a, pres);\n-            alt (lhs.node) {\n-                case (expr_path(?p, ?a_lhs)) {\n+            alt (rhs.node) {\n+                case (expr_path(?p, ?a_rhs)) {\n                     // receive to local var\n \n-                    changed = pure_exp(fcx.ccx, a_lhs, pres) || changed;\n+                    changed = pure_exp(fcx.ccx, a_rhs, pres) || changed;\n                     changed =\n-                        find_pre_post_state_expr(fcx, pres, rhs) || changed;\n+                        find_pre_post_state_expr(fcx, pres, lhs) || changed;\n                     changed =\n                         extend_poststate_ann(fcx.ccx, a,\n-                                             expr_poststate(fcx.ccx, rhs)) ||\n+                                             expr_poststate(fcx.ccx, lhs)) ||\n                             changed;\n-                    changed = gen_if_local(fcx, a_lhs, a, p) || changed;\n+                    changed = gen_if_local(fcx, a_rhs, a, p) || changed;\n                 }\n                 case (_) {\n                     // receive to something that must already have been init'd\n \n                     changed =\n-                        find_pre_post_state_expr(fcx, pres, lhs) || changed;\n+                        find_pre_post_state_expr(fcx, pres, rhs) || changed;\n                     changed =\n                         find_pre_post_state_expr(fcx,\n-                                                 expr_poststate(fcx.ccx, lhs),\n-                                                 rhs) || changed;\n+                                                 expr_poststate(fcx.ccx, rhs),\n+                                                 lhs) || changed;\n                     changed =\n                         extend_poststate_ann(fcx.ccx, a,\n-                                             expr_poststate(fcx.ccx, rhs)) ||\n+                                             expr_poststate(fcx.ccx, lhs)) ||\n                             changed;\n                 }\n             }"}, {"sha": "acd38539396544622d99dcf9048d0330ac3d3869", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=514813148b68d86a0dd9b5ebea9ec4fc415fdac0", "patch": "@@ -1705,9 +1705,9 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) {\n             require_impure(fcx.ccx.tcx.sess, fcx.purity, expr.span);\n             check_expr(fcx, lhs);\n             check_expr(fcx, rhs);\n-            auto item_t = expr_ty(fcx.ccx.tcx, lhs);\n+            auto item_t = expr_ty(fcx.ccx.tcx, rhs);\n             auto port_t = ty::mk_port(fcx.ccx.tcx, item_t);\n-            demand::simple(fcx, expr.span, port_t, expr_ty(fcx.ccx.tcx, rhs));\n+            demand::simple(fcx, expr.span, port_t, expr_ty(fcx.ccx.tcx, lhs));\n             write::ty_only_fixup(fcx, a.id, item_t);\n         }\n         case (ast::expr_if(?cond, ?thn, ?elsopt, ?a)) {"}, {"sha": "7117bb7a18c17d91d959f4c49cb836ef4993a142", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514813148b68d86a0dd9b5ebea9ec4fc415fdac0/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=514813148b68d86a0dd9b5ebea9ec4fc415fdac0", "patch": "@@ -750,10 +750,10 @@ fn print_expr(&ps s, &@ast::expr expr) {\n             print_expr(s, rhs);\n         }\n         case (ast::expr_recv(?lhs, ?rhs, _)) {\n-            print_expr(s, rhs);\n+            print_expr(s, lhs);\n             space(s.s);\n             word_space(s, \"|>\");\n-            print_expr(s, lhs);\n+            print_expr(s, rhs);\n         }\n         case (ast::expr_field(?expr, ?id, _)) {\n             print_expr(s, expr);"}]}