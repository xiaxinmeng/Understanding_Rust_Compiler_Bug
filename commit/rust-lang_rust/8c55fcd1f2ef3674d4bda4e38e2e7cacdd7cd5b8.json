{"sha": "8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNTVmY2QxZjJlZjM2NzRkNGJkYTRlMzhlMmU3Y2FjZGQ3Y2Q1Yjg=", "commit": {"author": {"name": "Yuri Kunde Schlesner", "email": "yuriks@yuriks.net", "date": "2014-05-12T05:31:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-13T02:52:29Z"}, "message": "Add `stat` method to `std::io::fs::File` to stat without a Path.\n\nThe `FileStat` struct contained a `path` field, which was filled by the\n`stat` and `lstat` function. Since this field isn't in fact returned by\nthe operating system (it was copied from the paths passed to the\nfunctions) it was removed, as in the `fstat` case we aren't working with\na `Path`, but directly with a fd.\n\nIf your code used the `path` field of `FileStat` you will now have to\nmanually store the path passed to `stat` along with the returned struct.\n\n[breaking-change]", "tree": {"sha": "26e430f86234c4be047df9369327942a4d0861c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e430f86234c4be047df9369327942a4d0861c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8", "html_url": "https://github.com/rust-lang/rust/commit/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/comments", "author": {"login": "yuriks", "id": 341401, "node_id": "MDQ6VXNlcjM0MTQwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/341401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yuriks", "html_url": "https://github.com/yuriks", "followers_url": "https://api.github.com/users/yuriks/followers", "following_url": "https://api.github.com/users/yuriks/following{/other_user}", "gists_url": "https://api.github.com/users/yuriks/gists{/gist_id}", "starred_url": "https://api.github.com/users/yuriks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yuriks/subscriptions", "organizations_url": "https://api.github.com/users/yuriks/orgs", "repos_url": "https://api.github.com/users/yuriks/repos", "events_url": "https://api.github.com/users/yuriks/events{/privacy}", "received_events_url": "https://api.github.com/users/yuriks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f096516d2b5e0ac1a634742a11520dff4b59014b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f096516d2b5e0ac1a634742a11520dff4b59014b", "html_url": "https://github.com/rust-lang/rust/commit/f096516d2b5e0ac1a634742a11520dff4b59014b"}], "stats": {"total": 77, "additions": 55, "deletions": 22}, "files": [{"sha": "c2b69483fa1e0d4e206f5de4ddb10216a155478b", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8", "patch": "@@ -166,6 +166,14 @@ impl rtio::RtioFileStream for FileDesc {\n             libc::ftruncate(self.fd(), offset as libc::off_t)\n         }))\n     }\n+\n+    fn fstat(&mut self) -> IoResult<io::FileStat> {\n+        let mut stat: libc::stat = unsafe { mem::uninit() };\n+        match retry(|| unsafe { libc::fstat(self.fd(), &mut stat) }) {\n+            0 => Ok(mkstat(&stat)),\n+            _ => Err(super::last_error()),\n+        }\n+    }\n }\n \n impl rtio::RtioPipe for FileDesc {\n@@ -317,6 +325,10 @@ impl rtio::RtioFileStream for CFile {\n     fn truncate(&mut self, offset: i64) -> Result<(), IoError> {\n         self.flush().and_then(|()| self.fd.truncate(offset))\n     }\n+\n+    fn fstat(&mut self) -> IoResult<io::FileStat> {\n+        self.flush().and_then(|()| self.fd.fstat())\n+    }\n }\n \n impl Drop for CFile {\n@@ -455,9 +467,7 @@ pub fn link(src: &CString, dst: &CString) -> IoResult<()> {\n     }))\n }\n \n-fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n-    let path = unsafe { CString::new(path.with_ref(|p| p), false) };\n-\n+fn mkstat(stat: &libc::stat) -> io::FileStat {\n     // FileStat times are in milliseconds\n     fn mktime(secs: u64, nsecs: u64) -> u64 { secs * 1000 + nsecs / 1000000 }\n \n@@ -481,7 +491,6 @@ fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n     fn gen(_stat: &libc::stat) -> u64 { 0 }\n \n     io::FileStat {\n-        path: Path::new(path),\n         size: stat.st_size as u64,\n         kind: kind,\n         perm: unsafe {\n@@ -508,15 +517,15 @@ fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n pub fn stat(p: &CString) -> IoResult<io::FileStat> {\n     let mut stat: libc::stat = unsafe { mem::uninit() };\n     match retry(|| unsafe { libc::stat(p.with_ref(|p| p), &mut stat) }) {\n-        0 => Ok(mkstat(&stat, p)),\n+        0 => Ok(mkstat(&stat)),\n         _ => Err(super::last_error()),\n     }\n }\n \n pub fn lstat(p: &CString) -> IoResult<io::FileStat> {\n     let mut stat: libc::stat = unsafe { mem::uninit() };\n     match retry(|| unsafe { libc::lstat(p.with_ref(|p| p), &mut stat) }) {\n-        0 => Ok(mkstat(&stat, p)),\n+        0 => Ok(mkstat(&stat)),\n         _ => Err(super::last_error()),\n     }\n }"}, {"sha": "d721e1d67f1b99bf9d85f79c50c6868b144f3251", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8", "patch": "@@ -197,6 +197,14 @@ impl rtio::RtioFileStream for FileDesc {\n         let _ = self.seek(orig_pos as i64, io::SeekSet);\n         return ret;\n     }\n+\n+    fn fstat(&mut self) -> IoResult<io::FileStat> {\n+        let mut stat: libc::stat = unsafe { mem::uninit() };\n+        match unsafe { libc::fstat(self.fd(), &mut stat) } {\n+            0 => Ok(mkstat(&stat)),\n+            _ => Err(super::last_error()),\n+        }\n+    }\n }\n \n impl rtio::RtioPipe for FileDesc {\n@@ -471,8 +479,7 @@ pub fn link(src: &CString, dst: &CString) -> IoResult<()> {\n     }))\n }\n \n-fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n-    let path = unsafe { CString::new(path.with_ref(|p| p), false) };\n+fn mkstat(stat: &libc::stat) -> io::FileStat {\n     let kind = match (stat.st_mode as c_int) & libc::S_IFMT {\n         libc::S_IFREG => io::TypeFile,\n         libc::S_IFDIR => io::TypeDirectory,\n@@ -483,7 +490,6 @@ fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n     };\n \n     io::FileStat {\n-        path: Path::new(path),\n         size: stat.st_size as u64,\n         kind: kind,\n         perm: unsafe {\n@@ -511,7 +517,7 @@ pub fn stat(p: &CString) -> IoResult<io::FileStat> {\n     let mut stat: libc::stat = unsafe { mem::uninit() };\n     as_utf16_p(p.as_str().unwrap(), |up| {\n         match unsafe { libc::wstat(up, &mut stat) } {\n-            0 => Ok(mkstat(&stat, p)),\n+            0 => Ok(mkstat(&stat)),\n             _ => Err(super::last_error()),\n         }\n     })"}, {"sha": "06271e61ce7a0f9f72d4361a835ee4e3584a62da", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8", "patch": "@@ -70,6 +70,12 @@ impl FsRequest {\n         }).map(|req| req.mkstat())\n     }\n \n+    pub fn fstat(loop_: &Loop, fd: c_int) -> Result<FileStat, UvError> {\n+        execute(|req, cb| unsafe {\n+            uvll::uv_fs_fstat(loop_.handle, req, fd, cb)\n+        }).map(|req| req.mkstat())\n+    }\n+\n     pub fn write(loop_: &Loop, fd: c_int, buf: &[u8], offset: i64)\n         -> Result<(), UvError>\n     {\n@@ -262,8 +268,6 @@ impl FsRequest {\n     }\n \n     pub fn mkstat(&self) -> FileStat {\n-        let path = unsafe { uvll::get_path_from_fs_req(self.req) };\n-        let path = unsafe { Path::new(CString::new(path, false)) };\n         let stat = self.get_stat();\n         fn to_msec(stat: uvll::uv_timespec_t) -> u64 {\n             // Be sure to cast to u64 first to prevent overflowing if the tv_sec\n@@ -279,7 +283,6 @@ impl FsRequest {\n             _ => io::TypeUnknown,\n         };\n         FileStat {\n-            path: path,\n             size: stat.st_size as u64,\n             kind: kind,\n             perm: unsafe {\n@@ -463,6 +466,11 @@ impl rtio::RtioFileStream for FileWatcher {\n         let r = FsRequest::truncate(&self.loop_, self.fd, offset);\n         r.map_err(uv_error_to_io_error)\n     }\n+\n+    fn fstat(&mut self) -> Result<FileStat, IoError> {\n+        let _m = self.fire_homing_missile();\n+        FsRequest::fstat(&self.loop_, self.fd).map_err(uv_error_to_io_error)\n+    }\n }\n \n #[cfg(test)]\n@@ -537,6 +545,10 @@ mod test {\n         assert!(result.is_ok());\n         assert_eq!(result.unwrap().size, 5);\n \n+        let result = FsRequest::fstat(l(), file.fd);\n+        assert!(result.is_ok());\n+        assert_eq!(result.unwrap().size, 5);\n+\n         fn free<T>(_: T) {}\n         free(file);\n "}, {"sha": "a497ffd40a0707b6bbe648c31d1ef458163db046", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8", "patch": "@@ -214,6 +214,11 @@ impl File {\n     pub fn eof(&self) -> bool {\n         self.last_nread == 0\n     }\n+\n+    /// Queries information about the underlying file.\n+    pub fn stat(&mut self) -> IoResult<FileStat> {\n+        self.fd.fstat()\n+    }\n }\n \n /// Unlink a file from the underlying filesystem.\n@@ -887,9 +892,12 @@ mod test {\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_stat_correct_on_is_file.txt\");\n         {\n-            let mut fs = File::open_mode(filename, Open, ReadWrite);\n+            let mut fs = check!(File::open_mode(filename, Open, ReadWrite));\n             let msg = \"hw\";\n             fs.write(msg.as_bytes()).unwrap();\n+\n+            let fstat_res = check!(fs.stat());\n+            assert_eq!(fstat_res.kind, io::TypeFile);\n         }\n         let stat_res_fn = check!(stat(filename));\n         assert_eq!(stat_res_fn.kind, io::TypeFile);\n@@ -1228,23 +1236,23 @@ mod test {\n         check!(file.fsync());\n \n         // Do some simple things with truncation\n-        assert_eq!(check!(stat(&path)).size, 3);\n+        assert_eq!(check!(file.stat()).size, 3);\n         check!(file.truncate(10));\n-        assert_eq!(check!(stat(&path)).size, 10);\n+        assert_eq!(check!(file.stat()).size, 10);\n         check!(file.write(bytes!(\"bar\")));\n         check!(file.fsync());\n-        assert_eq!(check!(stat(&path)).size, 10);\n+        assert_eq!(check!(file.stat()).size, 10);\n         assert_eq!(check!(File::open(&path).read_to_end()),\n                    (Vec::from_slice(bytes!(\"foobar\", 0, 0, 0, 0))));\n \n         // Truncate to a smaller length, don't seek, and then write something.\n         // Ensure that the intermediate zeroes are all filled in (we're seeked\n         // past the end of the file).\n         check!(file.truncate(2));\n-        assert_eq!(check!(stat(&path)).size, 2);\n+        assert_eq!(check!(file.stat()).size, 2);\n         check!(file.write(bytes!(\"wut\")));\n         check!(file.fsync());\n-        assert_eq!(check!(stat(&path)).size, 9);\n+        assert_eq!(check!(file.stat()).size, 9);\n         assert_eq!(check!(File::open(&path).read_to_end()),\n                    (Vec::from_slice(bytes!(\"fo\", 0, 0, 0, 0, \"wut\"))));\n         drop(file);"}, {"sha": "363525425902d0d641b62acac1fcf00205f78442", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8", "patch": "@@ -228,7 +228,6 @@ use ops::{BitOr, BitAnd, Sub};\n use option::{Option, Some, None};\n use os;\n use owned::Box;\n-use path::Path;\n use result::{Ok, Err, Result};\n use slice::{Vector, MutableVector, ImmutableVector};\n use str::{StrSlice, StrAllocating};\n@@ -1516,8 +1515,6 @@ pub enum FileType {\n /// ```\n #[deriving(Hash)]\n pub struct FileStat {\n-    /// The path that this stat structure is describing\n-    pub path: Path,\n     /// The size of the file, in bytes\n     pub size: u64,\n     /// The kind of file this path points to (directory, file, pipe, etc.)"}, {"sha": "d23d327d558815a55ead009cd33a48f4d67f9da8", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=8c55fcd1f2ef3674d4bda4e38e2e7cacdd7cd5b8", "patch": "@@ -269,6 +269,7 @@ pub trait RtioFileStream {\n     fn fsync(&mut self) -> IoResult<()>;\n     fn datasync(&mut self) -> IoResult<()>;\n     fn truncate(&mut self, offset: i64) -> IoResult<()>;\n+    fn fstat(&mut self) -> IoResult<FileStat>;\n }\n \n pub trait RtioProcess {"}]}