{"sha": "862c0dd85153aea02ae284a87cb88e9c0de715a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MmMwZGQ4NTE1M2FlYTAyYWUyODRhODdjYjg4ZTljMGRlNzE1YTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-02T14:57:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-12T04:38:40Z"}, "message": "make `RegionValues` generic over its domain\n\nWe used to store one value per RegionVid; we will soon be storing one\nvalue per SCC.", "tree": {"sha": "cac9010abc7367c553cf6051c813b237ecf2cf78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cac9010abc7367c553cf6051c813b237ecf2cf78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/862c0dd85153aea02ae284a87cb88e9c0de715a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/862c0dd85153aea02ae284a87cb88e9c0de715a2", "html_url": "https://github.com/rust-lang/rust/commit/862c0dd85153aea02ae284a87cb88e9c0de715a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/862c0dd85153aea02ae284a87cb88e9c0de715a2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0052ddd8aec0701aa8444ad780fa4ebb123301ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/0052ddd8aec0701aa8444ad780fa4ebb123301ff", "html_url": "https://github.com/rust-lang/rust/commit/0052ddd8aec0701aa8444ad780fa4ebb123301ff"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "221da10e8e85bd5efbf5b32d9499734966d8fb41", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/862c0dd85153aea02ae284a87cb88e9c0de715a2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/862c0dd85153aea02ae284a87cb88e9c0de715a2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=862c0dd85153aea02ae284a87cb88e9c0de715a2", "patch": "@@ -53,11 +53,11 @@ pub struct RegionInferenceContext<'tcx> {\n     /// regions, these start out empty and steadily grow, though for\n     /// each universally quantified region R they start out containing\n     /// the entire CFG and `end(R)`.\n-    liveness_constraints: RegionValues,\n+    liveness_constraints: RegionValues<RegionVid>,\n \n     /// The final inferred values of the inference variables; `None`\n     /// until `solve` is invoked.\n-    inferred_values: Option<RegionValues>,\n+    inferred_values: Option<RegionValues<RegionVid>>,\n \n     /// The constraints we have accumulated and used during solving.\n     constraints: ConstraintSet,\n@@ -394,7 +394,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         self.inferred_values = Some(inferred_values);\n     }\n \n-    fn compute_region_values(&self, _mir: &Mir<'tcx>) -> RegionValues {\n+    fn compute_region_values(&self, _mir: &Mir<'tcx>) -> RegionValues<RegionVid> {\n         debug!(\"compute_region_values()\");\n         debug!(\"compute_region_values: constraints={:#?}\", {\n             let mut constraints: Vec<_> = self.constraints.iter().collect();"}, {"sha": "bb4fa73ebb0d18a5309303107e9ea23e338bc67c", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/862c0dd85153aea02ae284a87cb88e9c0de715a2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/862c0dd85153aea02ae284a87cb88e9c0de715a2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=862c0dd85153aea02ae284a87cb88e9c0de715a2", "patch": "@@ -179,12 +179,12 @@ impl ToElementIndex for RegionElementIndex {\n /// variable. The columns consist of either universal regions or\n /// points in the CFG.\n #[derive(Clone)]\n-pub(super) struct RegionValues {\n+pub(super) struct RegionValues<N: Idx> {\n     elements: Rc<RegionValueElements>,\n-    matrix: SparseBitMatrix<RegionVid, RegionElementIndex>,\n+    matrix: SparseBitMatrix<N, RegionElementIndex>,\n }\n \n-impl RegionValues {\n+impl<N: Idx> RegionValues<N> {\n     /// Creates a new set of \"region values\" that tracks causal information.\n     /// Each of the regions in num_region_variables will be initialized with an\n     /// empty set of points and no causal information.\n@@ -197,35 +197,35 @@ impl RegionValues {\n         Self {\n             elements: elements.clone(),\n             matrix: SparseBitMatrix::new(\n-                RegionVid::new(num_region_variables),\n+                N::new(num_region_variables),\n                 RegionElementIndex::new(elements.num_elements()),\n             ),\n         }\n     }\n \n     /// Adds the given element to the value for the given region. Returns true if\n     /// the element is newly added (i.e., was not already present).\n-    pub(super) fn add_element<E: ToElementIndex>(&mut self, r: RegionVid, elem: E) -> bool {\n+    pub(super) fn add_element<E: ToElementIndex>(&mut self, r: N, elem: E) -> bool {\n         let i = self.elements.index(elem);\n         debug!(\"add(r={:?}, elem={:?})\", r, elem);\n         self.matrix.add(r, i)\n     }\n \n     /// Add all elements in `r_from` to `r_to` (because e.g. `r_to:\n     /// r_from`).\n-    pub(super) fn add_region(&mut self, r_to: RegionVid, r_from: RegionVid) -> bool {\n+    pub(super) fn add_region(&mut self, r_to: N, r_from: N) -> bool {\n         self.matrix.merge(r_from, r_to)\n     }\n \n     /// True if the region `r` contains the given element.\n-    pub(super) fn contains<E: ToElementIndex>(&self, r: RegionVid, elem: E) -> bool {\n+    pub(super) fn contains<E: ToElementIndex>(&self, r: N, elem: E) -> bool {\n         let i = self.elements.index(elem);\n         self.matrix.contains(r, i)\n     }\n \n     /// True if `sup_region` contains all the CFG points that\n     /// `sub_region` contains. Ignores universal regions.\n-    pub(super) fn contains_points(&self, sup_region: RegionVid, sub_region: RegionVid) -> bool {\n+    pub(super) fn contains_points(&self, sup_region: N, sub_region: N) -> bool {\n         // This could be done faster by comparing the bitsets. But I\n         // am lazy.\n         self.element_indices_contained_in(sub_region)\n@@ -238,15 +238,15 @@ impl RegionValues {\n     /// `elements_contained_in`.\n     pub(super) fn element_indices_contained_in<'a>(\n         &'a self,\n-        r: RegionVid,\n+        r: N,\n     ) -> impl Iterator<Item = RegionElementIndex> + 'a {\n         self.matrix.iter(r).map(move |i| i)\n     }\n \n     /// Returns just the universal regions that are contained in a given region's value.\n     pub(super) fn universal_regions_outlived_by<'a>(\n         &'a self,\n-        r: RegionVid,\n+        r: N,\n     ) -> impl Iterator<Item = RegionVid> + 'a {\n         self.element_indices_contained_in(r)\n             .map(move |i| self.elements.to_universal_region(i))\n@@ -257,14 +257,14 @@ impl RegionValues {\n     /// Returns all the elements contained in a given region's value.\n     pub(super) fn elements_contained_in<'a>(\n         &'a self,\n-        r: RegionVid,\n+        r: N,\n     ) -> impl Iterator<Item = RegionElement> + 'a {\n         self.element_indices_contained_in(r)\n             .map(move |r| self.elements.to_element(r))\n     }\n \n     /// Returns a \"pretty\" string value of the region. Meant for debugging.\n-    pub(super) fn region_value_str(&self, r: RegionVid) -> String {\n+    pub(super) fn region_value_str(&self, r: N) -> String {\n         let mut result = String::new();\n         result.push_str(\"{\");\n "}]}