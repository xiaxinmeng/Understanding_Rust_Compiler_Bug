{"sha": "9337d4fde89ded13243d67bec0b03f7fc553cbf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMzdkNGZkZTg5ZGVkMTMyNDNkNjdiZWMwYjAzZjdmYzU1M2NiZjk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-09T23:00:33Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-09T23:00:33Z"}, "message": "Print closure signatures when reporting placeholder errors", "tree": {"sha": "8b5b8cad42966fd1ac5746c0f1fe9e623e662435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b5b8cad42966fd1ac5746c0f1fe9e623e662435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9337d4fde89ded13243d67bec0b03f7fc553cbf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9337d4fde89ded13243d67bec0b03f7fc553cbf9", "html_url": "https://github.com/rust-lang/rust/commit/9337d4fde89ded13243d67bec0b03f7fc553cbf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9337d4fde89ded13243d67bec0b03f7fc553cbf9/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94c11dfe78c9c2e81ababe51b04231db4c90d07f", "url": "https://api.github.com/repos/rust-lang/rust/commits/94c11dfe78c9c2e81ababe51b04231db4c90d07f", "html_url": "https://github.com/rust-lang/rust/commit/94c11dfe78c9c2e81ababe51b04231db4c90d07f"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "46986d8d58b64b5607528b9cb71fd7e86170fd4d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9337d4fde89ded13243d67bec0b03f7fc553cbf9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9337d4fde89ded13243d67bec0b03f7fc553cbf9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=9337d4fde89ded13243d67bec0b03f7fc553cbf9", "patch": "@@ -386,12 +386,38 @@ impl NiceRegionError<'me, 'tcx> {\n             let mut note = if same_self_type {\n                 let mut self_ty = expected_trait_ref.map(|tr| tr.self_ty());\n                 self_ty.highlight.maybe_highlighting_region(vid, actual_has_vid);\n-                format!(\n-                    \"{}`{}` must implement `{}`\",\n-                    if leading_ellipsis { \"...\" } else { \"\" },\n-                    self_ty,\n-                    expected_trait_ref.map(|tr| tr.print_only_trait_path()),\n-                )\n+\n+                if self_ty.value.is_closure()\n+                    && self\n+                        .tcx()\n+                        .fn_trait_kind_from_lang_item(expected_trait_ref.value.def_id)\n+                        .is_some()\n+                {\n+                    let closure_sig = self_ty.map(|closure| {\n+                        if let ty::Closure(_, substs) = closure.kind() {\n+                            self.tcx().signature_unclosure(\n+                                substs.as_closure().sig(),\n+                                rustc_hir::Unsafety::Normal,\n+                            )\n+                        } else {\n+                            bug!(\"type is not longer closure\");\n+                        }\n+                    });\n+\n+                    format!(\n+                        \"{}closure with signature `{}` must implement `{}`\",\n+                        if leading_ellipsis { \"...\" } else { \"\" },\n+                        closure_sig,\n+                        expected_trait_ref.map(|tr| tr.print_only_trait_path()),\n+                    )\n+                } else {\n+                    format!(\n+                        \"{}`{}` must implement `{}`\",\n+                        if leading_ellipsis { \"...\" } else { \"\" },\n+                        self_ty,\n+                        expected_trait_ref.map(|tr| tr.print_only_trait_path()),\n+                    )\n+                }\n             } else if passive_voice {\n                 format!(\n                     \"{}`{}` would have to be implemented for the type `{}`\","}, {"sha": "2ab49ec61cf597ef187b72d897312e9ffd112962", "filename": "src/test/ui/issues/issue-57843.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9337d4fde89ded13243d67bec0b03f7fc553cbf9/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9337d4fde89ded13243d67bec0b03f7fc553cbf9/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57843.stderr?ref=9337d4fde89ded13243d67bec0b03f7fc553cbf9", "patch": "@@ -4,7 +4,7 @@ error: implementation of `FnOnce` is not general enough\n LL |     Foo(Box::new(|_| ()));\n    |         ^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: `[closure@$DIR/issue-57843.rs:25:18: 25:24]` must implement `FnOnce<(&'1 bool,)>`, for any lifetime `'1`...\n+   = note: closure with signature `fn(&'2 bool)` must implement `FnOnce<(&'1 bool,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 bool,)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error"}, {"sha": "3c0439fb660e501c7bde75e61c948e1c41f1255d", "filename": "src/test/ui/lifetimes/issue-79187.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9337d4fde89ded13243d67bec0b03f7fc553cbf9/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9337d4fde89ded13243d67bec0b03f7fc553cbf9/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-79187.stderr?ref=9337d4fde89ded13243d67bec0b03f7fc553cbf9", "patch": "@@ -4,7 +4,7 @@ error: implementation of `FnOnce` is not general enough\n LL |     thing(f);\n    |     ^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: `[closure@$DIR/issue-79187.rs:4:13: 4:19]` must implement `FnOnce<(&'1 u32,)>`, for any lifetime `'1`...\n+   = note: closure with signature `fn(&'2 u32)` must implement `FnOnce<(&'1 u32,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 u32,)>`, for some specific lifetime `'2`\n \n error: aborting due to previous error"}, {"sha": "a5409582288f2ac6c716dc3102027d38b5ef6313", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9337d4fde89ded13243d67bec0b03f7fc553cbf9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9337d4fde89ded13243d67bec0b03f7fc553cbf9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.nll.stderr?ref=9337d4fde89ded13243d67bec0b03f7fc553cbf9", "patch": "@@ -30,7 +30,7 @@ error: implementation of `FnOnce` is not general enough\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: `[closure@$DIR/issue-57611-trait-alias.rs:25:9: 25:14]` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error: aborting due to 4 previous errors"}, {"sha": "91c9d459ad8ce5ccdcb27d44bdb93cfe32f3f12c", "filename": "src/test/ui/type-alias-impl-trait/issue-57611-trait-alias.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9337d4fde89ded13243d67bec0b03f7fc553cbf9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9337d4fde89ded13243d67bec0b03f7fc553cbf9/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57611-trait-alias.stderr?ref=9337d4fde89ded13243d67bec0b03f7fc553cbf9", "patch": "@@ -4,7 +4,7 @@ error: implementation of `FnOnce` is not general enough\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: `[closure@$DIR/issue-57611-trait-alias.rs:25:9: 25:14]` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: closure with signature `fn(&'2 X) -> &X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error[E0308]: mismatched types\n@@ -27,7 +27,7 @@ error: implementation of `FnOnce` is not general enough\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: `[closure@$DIR/issue-57611-trait-alias.rs:25:9: 25:14]` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error[E0308]: mismatched types\n@@ -50,7 +50,7 @@ error: implementation of `FnOnce` is not general enough\n LL |     type Bar = impl Baz<Self, Self>;\n    |                ^^^^^^^^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n    |\n-   = note: `[closure@$DIR/issue-57611-trait-alias.rs:25:9: 25:14]` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n+   = note: closure with signature `fn(&'2 X) -> &'2 X` must implement `FnOnce<(&'1 X,)>`, for any lifetime `'1`...\n    = note: ...but it actually implements `FnOnce<(&'2 X,)>`, for some specific lifetime `'2`\n \n error: aborting due to 5 previous errors"}]}