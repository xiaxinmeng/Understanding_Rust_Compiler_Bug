{"sha": "af6cf85b9815644c77c77cdd141d476efc426d99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNmNmODViOTgxNTY0NGM3N2M3N2NkZDE0MWQ0NzZlZmM0MjZkOTk=", "commit": {"author": {"name": "Ivan Petkov", "email": "ivanppetkov@gmail.com", "date": "2015-03-17T02:44:13Z"}, "committer": {"name": "Ivan Petkov", "email": "ivanppetkov@gmail.com", "date": "2015-03-18T21:07:22Z"}, "message": "[rustdoc] Fix source hyperlinks in docs\n\n* rustdoc was doubly appending the file name to the path of where to\n  generate the source files, meanwhile, the [src] hyperlinks were not\n* Added a flag to rustdoc::html::render::clean_srcpath to ignore the\n  last path component, i.e. the file name itself to prevent the issue\n* This also avoids creating directories with the same name as source\n  files, and it makes sure the link to `main.css` is correct as well.\n* Added regression tests to ensure the rustdoc heirarchy of rendered\n  source files remains consistent\n\nFixes #23192", "tree": {"sha": "13376adb1a2c2a291699e6139cbc3d686e57658f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13376adb1a2c2a291699e6139cbc3d686e57658f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af6cf85b9815644c77c77cdd141d476efc426d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af6cf85b9815644c77c77cdd141d476efc426d99", "html_url": "https://github.com/rust-lang/rust/commit/af6cf85b9815644c77c77cdd141d476efc426d99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af6cf85b9815644c77c77cdd141d476efc426d99/comments", "author": {"login": "ipetkov", "id": 1638690, "node_id": "MDQ6VXNlcjE2Mzg2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1638690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipetkov", "html_url": "https://github.com/ipetkov", "followers_url": "https://api.github.com/users/ipetkov/followers", "following_url": "https://api.github.com/users/ipetkov/following{/other_user}", "gists_url": "https://api.github.com/users/ipetkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipetkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipetkov/subscriptions", "organizations_url": "https://api.github.com/users/ipetkov/orgs", "repos_url": "https://api.github.com/users/ipetkov/repos", "events_url": "https://api.github.com/users/ipetkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ipetkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ipetkov", "id": 1638690, "node_id": "MDQ6VXNlcjE2Mzg2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1638690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipetkov", "html_url": "https://github.com/ipetkov", "followers_url": "https://api.github.com/users/ipetkov/followers", "following_url": "https://api.github.com/users/ipetkov/following{/other_user}", "gists_url": "https://api.github.com/users/ipetkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipetkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipetkov/subscriptions", "organizations_url": "https://api.github.com/users/ipetkov/orgs", "repos_url": "https://api.github.com/users/ipetkov/repos", "events_url": "https://api.github.com/users/ipetkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ipetkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94a95067e017252d4928a4292a6aeef66902e694", "url": "https://api.github.com/repos/rust-lang/rust/commits/94a95067e017252d4928a4292a6aeef66902e694", "html_url": "https://github.com/rust-lang/rust/commit/94a95067e017252d4928a4292a6aeef66902e694"}], "stats": {"total": 104, "additions": 99, "deletions": 5}, "files": [{"sha": "81daac7b90f0d018fb86ed71288a9f088ce8fffe", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/af6cf85b9815644c77c77cdd141d476efc426d99/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6cf85b9815644c77c77cdd141d476efc426d99/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=af6cf85b9815644c77c77cdd141d476efc426d99", "patch": "@@ -692,16 +692,23 @@ fn shortty(item: &clean::Item) -> ItemType {\n \n /// Takes a path to a source file and cleans the path to it. This canonicalizes\n /// things like \"..\" to components which preserve the \"top down\" hierarchy of a\n-/// static HTML tree.\n+/// static HTML tree. Each component in the cleaned path will be passed as an\n+/// argument to `f`. The very last component of the path (ie the file name) will\n+/// be passed to `f` if `keep_filename` is true, and ignored otherwise.\n // FIXME (#9639): The closure should deal with &[u8] instead of &str\n // FIXME (#9639): This is too conservative, rejecting non-UTF-8 paths\n-fn clean_srcpath<F>(src_root: &Path, p: &Path, mut f: F) where\n+fn clean_srcpath<F>(src_root: &Path, p: &Path, keep_filename: bool, mut f: F) where\n     F: FnMut(&str),\n {\n     // make it relative, if possible\n     let p = p.relative_from(src_root).unwrap_or(p);\n \n-    for c in p.iter().map(|x| x.to_str().unwrap()) {\n+    let mut iter = p.iter().map(|x| x.to_str().unwrap()).peekable();\n+    while let Some(c) = iter.next() {\n+        if !keep_filename && iter.peek().is_none() {\n+            break;\n+        }\n+\n         if \"..\" == c {\n             f(\"up\");\n         } else {\n@@ -803,7 +810,7 @@ impl<'a> SourceCollector<'a> {\n         // Create the intermediate directories\n         let mut cur = self.dst.clone();\n         let mut root_path = String::from_str(\"../../\");\n-        clean_srcpath(&self.cx.src_root, &p, |component| {\n+        clean_srcpath(&self.cx.src_root, &p, false, |component| {\n             cur.push(component);\n             mkdir(&cur).unwrap();\n             root_path.push_str(\"../\");\n@@ -1368,7 +1375,7 @@ impl<'a> Item<'a> {\n         if ast_util::is_local(self.item.def_id) {\n             let mut path = Vec::new();\n             clean_srcpath(&cx.src_root, Path::new(&self.item.source.filename),\n-                          |component| {\n+                          true, |component| {\n                 path.push(component.to_string());\n             });\n             let href = if self.item.source.loline == self.item.source.hiline {"}, {"sha": "419603e82f715dbe4f24a9f2e54abda97d9461e1", "filename": "src/test/run-make/rustdoc-src-links/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af6cf85b9815644c77c77cdd141d476efc426d99/src%2Ftest%2Frun-make%2Frustdoc-src-links%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/af6cf85b9815644c77c77cdd141d476efc426d99/src%2Ftest%2Frun-make%2Frustdoc-src-links%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-src-links%2FMakefile?ref=af6cf85b9815644c77c77cdd141d476efc426d99", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+all:\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n+\t$(HTMLDOCCK) $(TMPDIR)/doc foo.rs\n+\t$(HTMLDOCCK) $(TMPDIR)/doc qux/mod.rs"}, {"sha": "9a964f11252520a9486c3232d46c9f98a36665fa", "filename": "src/test/run-make/rustdoc-src-links/foo.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/af6cf85b9815644c77c77cdd141d476efc426d99/src%2Ftest%2Frun-make%2Frustdoc-src-links%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6cf85b9815644c77c77cdd141d476efc426d99/src%2Ftest%2Frun-make%2Frustdoc-src-links%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-src-links%2Ffoo.rs?ref=af6cf85b9815644c77c77cdd141d476efc426d99", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+//! Dox\n+// @has src/foo/foo.rs.html\n+// @has foo/index.html '//a/@href' '../src/foo/foo.rs.html'\n+\n+pub mod qux;\n+\n+// @has foo/bar/index.html '//a/@href' '../../src/foo/foo.rs.html'\n+pub mod bar {\n+\n+    /// Dox\n+    // @has foo/bar/baz/index.html '//a/@href' '../../../src/foo/foo.rs.html'\n+    pub mod baz {\n+        /// Dox\n+        // @has foo/bar/baz/fn.baz.html '//a/@href' '../../../src/foo/foo.rs.html'\n+        pub fn baz() { }\n+    }\n+\n+    /// Dox\n+    // @has foo/bar/trait.Foobar.html '//a/@href' '../../src/foo/foo.rs.html'\n+    pub trait Foobar { fn dummy(&self) { } }\n+\n+    // @has foo/bar/struct.Foo.html '//a/@href' '../../src/foo/foo.rs.html'\n+    pub struct Foo { x: i32, y: u32 }\n+\n+    // @has foo/bar/fn.prawns.html '//a/@href' '../../src/foo/foo.rs.html'\n+    pub fn prawns((a, b): (i32, u32), Foo { x, y }: Foo) { }\n+}\n+\n+/// Dox\n+// @has foo/fn.modfn.html '//a/@href' '../src/foo/foo.rs.html'\n+pub fn modfn() { }"}, {"sha": "9b1563d32ac716b25ea7213b6122907aca847675", "filename": "src/test/run-make/rustdoc-src-links/qux/mod.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/af6cf85b9815644c77c77cdd141d476efc426d99/src%2Ftest%2Frun-make%2Frustdoc-src-links%2Fqux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6cf85b9815644c77c77cdd141d476efc426d99/src%2Ftest%2Frun-make%2Frustdoc-src-links%2Fqux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-src-links%2Fqux%2Fmod.rs?ref=af6cf85b9815644c77c77cdd141d476efc426d99", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Dox\n+// @has src/foo/qux/mod.rs.html\n+// @has foo/qux/index.html '//a/@href' '../../src/foo/qux/mod.rs.html'\n+\n+// @has foo/qux/bar/index.html '//a/@href' '../../../src/foo/qux/mod.rs.html'\n+pub mod bar {\n+\n+    /// Dox\n+    // @has foo/qux/bar/baz/index.html '//a/@href' '../../../../src/foo/qux/mod.rs.html'\n+    pub mod baz {\n+        /// Dox\n+        // @has foo/qux/bar/baz/fn.baz.html '//a/@href' '../../../../src/foo/qux/mod.rs.html'\n+        pub fn baz() { }\n+    }\n+\n+    /// Dox\n+    // @has foo/qux/bar/trait.Foobar.html '//a/@href' '../../../src/foo/qux/mod.rs.html'\n+    pub trait Foobar { fn dummy(&self) { } }\n+\n+    // @has foo/qux/bar/struct.Foo.html '//a/@href' '../../../src/foo/qux/mod.rs.html'\n+    pub struct Foo { x: i32, y: u32 }\n+\n+    // @has foo/qux/bar/fn.prawns.html '//a/@href' '../../../src/foo/qux/mod.rs.html'\n+    pub fn prawns((a, b): (i32, u32), Foo { x, y }: Foo) { }\n+}\n+\n+/// Dox\n+// @has foo/qux/fn.modfn.html '//a/@href' '../../src/foo/qux/mod.rs.html'\n+pub fn modfn() { }"}]}