{"sha": "5fd4b84e20315dcdb0bf05bff8512cc9f78d7380", "node_id": "C_kwDOAAsO6NoAKDVmZDRiODRlMjAzMTVkY2RiMGJmMDViZmY4NTEyY2M5Zjc4ZDczODA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-02T12:56:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-02T12:57:20Z"}, "message": "forward verbosity to cargo setup", "tree": {"sha": "0bd02bca965a3048aa41e4741c2a201276f6130c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bd02bca965a3048aa41e4741c2a201276f6130c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fd4b84e20315dcdb0bf05bff8512cc9f78d7380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd4b84e20315dcdb0bf05bff8512cc9f78d7380", "html_url": "https://github.com/rust-lang/rust/commit/5fd4b84e20315dcdb0bf05bff8512cc9f78d7380", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fd4b84e20315dcdb0bf05bff8512cc9f78d7380/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a12a13b588d54b6992bc74131aa4868357dd716", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a12a13b588d54b6992bc74131aa4868357dd716", "html_url": "https://github.com/rust-lang/rust/commit/4a12a13b588d54b6992bc74131aa4868357dd716"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "91945ad39f50b2381bf68bf7a4255e5c6b586919", "filename": "src/tools/miri/cargo-miri/src/phases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5fd4b84e20315dcdb0bf05bff8512cc9f78d7380/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd4b84e20315dcdb0bf05bff8512cc9f78d7380/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs?ref=5fd4b84e20315dcdb0bf05bff8512cc9f78d7380", "patch": "@@ -94,7 +94,7 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     let target = target.as_ref().unwrap_or(host);\n \n     // We always setup.\n-    setup(&subcommand, target, &rustc_version);\n+    setup(&subcommand, target, &rustc_version, verbose);\n \n     // Invoke actual cargo for the job, but with different flags.\n     // We re-use `cargo test` and `cargo run`, which makes target and binary handling very easy but"}, {"sha": "a696546954f90b9b3450aeb4610784cd1139742d", "filename": "src/tools/miri/cargo-miri/src/setup.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5fd4b84e20315dcdb0bf05bff8512cc9f78d7380/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd4b84e20315dcdb0bf05bff8512cc9f78d7380/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs?ref=5fd4b84e20315dcdb0bf05bff8512cc9f78d7380", "patch": "@@ -13,7 +13,7 @@ use crate::util::*;\n /// Performs the setup required to make `cargo miri` work: Getting a custom-built libstd. Then sets\n /// `MIRI_SYSROOT`. Skipped if `MIRI_SYSROOT` is already set, in which case we expect the user has\n /// done all this already.\n-pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta) {\n+pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta, verbose: usize) {\n     let only_setup = matches!(subcommand, MiriCommand::Setup);\n     let ask_user = !only_setup;\n     let print_sysroot = only_setup && has_arg_flag(\"--print-sysroot\"); // whether we just print the sysroot path\n@@ -100,7 +100,10 @@ pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta\n         command.env(\"RUSTC_WRAPPER\", \"\");\n \n         if only_setup && !print_sysroot {\n-            // Forward output.\n+            // Forward output. Even make it verbose, if requested.\n+            for _ in 0..verbose {\n+                command.arg(\"-v\");\n+            }\n         } else {\n             // Supress output.\n             command.stdout(process::Stdio::null());"}]}