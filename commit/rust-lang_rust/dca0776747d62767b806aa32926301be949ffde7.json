{"sha": "dca0776747d62767b806aa32926301be949ffde7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYTA3NzY3NDdkNjI3NjdiODA2YWEzMjkyNjMwMWJlOTQ5ZmZkZTc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-22T16:44:56Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-22T16:44:56Z"}, "message": "Incorporate review comments (mostly fixing indentation)\n\nPrevious commit was r=nmatsakis", "tree": {"sha": "3cb0ba8ca9ddabefcfec59c56257efa33b1efd99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb0ba8ca9ddabefcfec59c56257efa33b1efd99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dca0776747d62767b806aa32926301be949ffde7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dca0776747d62767b806aa32926301be949ffde7", "html_url": "https://github.com/rust-lang/rust/commit/dca0776747d62767b806aa32926301be949ffde7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dca0776747d62767b806aa32926301be949ffde7/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd66e7549b72575d5d7e06c0173e702e28cdfba7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd66e7549b72575d5d7e06c0173e702e28cdfba7", "html_url": "https://github.com/rust-lang/rust/commit/dd66e7549b72575d5d7e06c0173e702e28cdfba7"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "2ed72a68f1bdb96cd9bc5c89b9805139fce16f4a", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dca0776747d62767b806aa32926301be949ffde7/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca0776747d62767b806aa32926301be949ffde7/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=dca0776747d62767b806aa32926301be949ffde7", "patch": "@@ -502,9 +502,9 @@ fn visit_expr(expr: @expr, &&self: @IrMaps, vt: vt<@IrMaps>) {\n       }\n       expr_fn(_, _, _, cap_clause) |\n       expr_fn_block(_, _, cap_clause) => {\n-          // Interesting control flow (for loops can contain labeled\n-          // breaks or continues)\n-          self.add_live_node_for_node(expr.id, ExprNode(expr.span));\n+        // Interesting control flow (for loops can contain labeled\n+        // breaks or continues)\n+        self.add_live_node_for_node(expr.id, ExprNode(expr.span));\n \n         // Make a live_node for each captured variable, with the span\n         // being the location that the variable is used.  This results\n@@ -596,7 +596,7 @@ struct Liveness {\n     users: ~[mut users],\n     // The list of node IDs for the nested loop scopes\n     // we're in.\n-    mut loop_scope: @DVec<node_id>,\n+    loop_scope: DVec<node_id>,\n     // mappings from loop node ID to LiveNode\n     // (\"break\" label should map to loop node ID,\n     // it probably doesn't now)\n@@ -778,10 +778,10 @@ impl Liveness {\n             Some(_) => // Refers to a labeled loop. Use the results of resolve\n                       // to find with one\n                 match self.tcx.def_map.find(id) {\n-                  Some(def_label(loop_id)) => loop_id,\n-                  _ => self.tcx.sess.span_bug(sp, ~\"Label on break/loop \\\n-                                                 doesn't refer to a loop\")\n-            },\n+                    Some(def_label(loop_id)) => loop_id,\n+                    _ => self.tcx.sess.span_bug(sp, ~\"Label on break/loop \\\n+                                                    doesn't refer to a loop\")\n+                },\n             None =>\n                 // Vanilla 'break' or 'loop', so use the enclosing\n                 // loop scope\n@@ -1024,7 +1024,7 @@ impl Liveness {\n     }\n \n     fn propagate_through_expr(expr: @expr, succ: LiveNode) -> LiveNode {\n-      debug!(\"propagate_through_expr: %s\",\n+        debug!(\"propagate_through_expr: %s\",\n              expr_to_str(expr, self.tcx.sess.intr()));\n \n         match expr.node {\n@@ -1039,7 +1039,7 @@ impl Liveness {\n           }\n \n           expr_fn(_, _, blk, _) | expr_fn_block(_, blk, _) => {\n-            debug!(\"%s is an expr_fn or expr_fn_block\",\n+              debug!(\"%s is an expr_fn or expr_fn_block\",\n                    expr_to_str(expr, self.tcx.sess.intr()));\n \n               /*"}, {"sha": "59a733433bf22b09d6fad00f115b8137d250f6f9", "filename": "src/rustc/middle/trans/controlflow.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dca0776747d62767b806aa32926301be949ffde7/src%2Frustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca0776747d62767b806aa32926301be949ffde7/src%2Frustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=dca0776747d62767b806aa32926301be949ffde7", "patch": "@@ -113,7 +113,6 @@ fn trans_while(bcx: block, cond: @ast::expr, body: ast::blk)\n     //    |           body_bcx_out --+\n     // next_bcx\n \n-    // tjc: while should have labels...\n     let loop_bcx = loop_scope_block(bcx, next_bcx, None, ~\"`while`\",\n                                     body.info());\n     let cond_bcx_in = scope_block(loop_bcx, cond.info(), ~\"while loop cond\");\n@@ -214,11 +213,11 @@ fn trans_break_cont(bcx: block, opt_label: Option<ident>, to_end: bool)\n         match unwind.kind {\n           block_scope({loop_break: Some(brk), loop_label: l, _}) => {\n               // If we're looking for a labeled loop, check the label...\n-            target = if to_end {\n-                brk\n-            } else {\n-                unwind\n-            };\n+              target = if to_end {\n+                  brk\n+              } else {\n+                  unwind\n+              };\n               match opt_label {\n                   Some(desired) => match l {\n                       Some(actual) if actual == desired => break,"}, {"sha": "cc542e9f36636d8cca71262ed4770a42e36afcfb", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dca0776747d62767b806aa32926301be949ffde7/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca0776747d62767b806aa32926301be949ffde7/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=dca0776747d62767b806aa32926301be949ffde7", "patch": "@@ -2550,22 +2550,21 @@ fn may_break(cx: ty::ctxt, id: ast::node_id, b: ast::blk) -> bool {\n     // inside the loop?\n     (loop_query(b, |e| {\n         match e {\n-          ast::expr_break(_) => true,\n-          _ => false\n+            ast::expr_break(_) => true,\n+            _ => false\n         }\n     })) ||\n    // Second: is there a labeled break with label\n    // <id> nested anywhere inside the loop?\n-   (block_query(b, |e| {\n-       match e.node {\n-           ast::expr_break(Some(_)) =>\n-               match cx.def_map.find(e.id) {\n-                 Some(ast::def_label(loop_id)) if id == loop_id => true,\n-                 _ => false,\n-              },\n-           _ => false\n-       }\n-   }))\n+    (block_query(b, |e| {\n+        match e.node {\n+            ast::expr_break(Some(_)) =>\n+                match cx.def_map.find(e.id) {\n+                    Some(ast::def_label(loop_id)) if id == loop_id => true,\n+                    _ => false,\n+                },\n+            _ => false\n+        }}))\n }\n \n fn check_bounds_are_used(ccx: @crate_ctxt,"}]}