{"sha": "dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f", "node_id": "C_kwDOAAsO6NoAKGRhZTZkYzZiOTdiY2M3Njc1YjI4Zjk1NmQ4YWZmMmUyN2VkZTFhNGY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-12T04:22:00Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-15T04:30:32Z"}, "message": "Fix `try wrapping expression in variant` suggestion with struct field shorthand", "tree": {"sha": "4e45fc6a4273fd21f07292862a335501d2ec0c63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e45fc6a4273fd21f07292862a335501d2ec0c63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f", "html_url": "https://github.com/rust-lang/rust/commit/dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de9b573eedaaa6d6e7c00c986cccbee802f9287b", "url": "https://api.github.com/repos/rust-lang/rust/commits/de9b573eedaaa6d6e7c00c986cccbee802f9287b", "html_url": "https://github.com/rust-lang/rust/commit/de9b573eedaaa6d6e7c00c986cccbee802f9287b"}], "stats": {"total": 126, "additions": 92, "deletions": 34}, "files": [{"sha": "4898109fa38c4ba03fb80b8d0021b8c3c8d0cf47", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 62, "deletions": 25, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f", "patch": "@@ -338,31 +338,68 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 })\n                 .collect();\n \n-            if let [variant] = &compatible_variants[..] {\n-                // Just a single matching variant.\n-                err.multipart_suggestion(\n-                    &format!(\"try wrapping the expression in `{}`\", variant),\n-                    vec![\n-                        (expr.span.shrink_to_lo(), format!(\"{}(\", variant)),\n-                        (expr.span.shrink_to_hi(), \")\".to_string()),\n-                    ],\n-                    Applicability::MaybeIncorrect,\n-                );\n-            } else if compatible_variants.len() > 1 {\n-                // More than one matching variant.\n-                err.multipart_suggestions(\n-                    &format!(\n-                        \"try wrapping the expression in a variant of `{}`\",\n-                        self.tcx.def_path_str(expected_adt.did)\n-                    ),\n-                    compatible_variants.into_iter().map(|variant| {\n-                        vec![\n-                            (expr.span.shrink_to_lo(), format!(\"{}(\", variant)),\n-                            (expr.span.shrink_to_hi(), \")\".to_string()),\n-                        ]\n-                    }),\n-                    Applicability::MaybeIncorrect,\n-                );\n+            if self.is_hir_id_from_struct_pattern_shorthand_field(expr.hir_id, expr.span) {\n+                if let Ok(code) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n+                    match &compatible_variants[..] {\n+                        [] => { /* No variants to format */ }\n+                        [variant] => {\n+                            // Just a single matching variant.\n+                            err.span_suggestion_verbose(\n+                                expr.span,\n+                                &format!(\"try wrapping the expression in `{}`\", variant),\n+                                format!(\"{}: {}({})\", code, variant, code),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                        _ => {\n+                            // More than one matching variant.\n+                            err.span_suggestions(\n+                                expr.span,\n+                                &format!(\n+                                    \"try wrapping the expression in a variant of `{}`\",\n+                                    self.tcx.def_path_str(expected_adt.did)\n+                                ),\n+                                compatible_variants\n+                                    .into_iter()\n+                                    .map(|variant| format!(\"{}: {}({})\", code, variant, code)),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                    }\n+                } else {\n+                    /* Can't format this without a snippet */\n+                }\n+            } else {\n+                match &compatible_variants[..] {\n+                    [] => { /* No variants to format */ }\n+                    [variant] => {\n+                        // Just a single matching variant.\n+                        err.multipart_suggestion_verbose(\n+                            &format!(\"try wrapping the expression in `{}`\", variant),\n+                            vec![\n+                                (expr.span.shrink_to_lo(), format!(\"{}(\", variant)),\n+                                (expr.span.shrink_to_hi(), \")\".to_string()),\n+                            ],\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                    _ => {\n+                        // More than one matching variant.\n+                        err.multipart_suggestions(\n+                            &format!(\n+                                \"try wrapping the expression in a variant of `{}`\",\n+                                self.tcx.def_path_str(expected_adt.did)\n+                            ),\n+                            compatible_variants.into_iter().map(|variant| {\n+                                vec![\n+                                    (expr.span.shrink_to_lo(), format!(\"{}(\", variant)),\n+                                    (expr.span.shrink_to_hi(), \")\".to_string()),\n+                                ]\n+                            }),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n             }\n         }\n     }"}, {"sha": "a70dda8386f087ef1ab460614255b8780035228a", "filename": "src/test/ui/did_you_mean/compatible-variants.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs?ref=dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f", "patch": "@@ -3,6 +3,10 @@ enum Hey<A, B> {\n     B(B),\n }\n \n+struct Foo {\n+    bar: Option<i32>,\n+}\n+\n fn f() {}\n \n fn a() -> Option<()> {\n@@ -40,4 +44,8 @@ fn main() {\n     let _: Hey<i32, bool> = false;\n     //~^ ERROR mismatched types\n     //~| HELP try wrapping\n+    let bar = 1i32;\n+    let _ = Foo { bar };\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n }"}, {"sha": "1d4448764c19c04a2e8bc3e8c2196efd306d3446", "filename": "src/test/ui/did_you_mean/compatible-variants.stderr", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr?ref=dae6dc6b97bcc7675b28f956d8aff2e27ede1a4f", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:9:5\n+  --> $DIR/compatible-variants.rs:13:5\n    |\n LL |   fn a() -> Option<()> {\n    |             ---------- expected `Option<()>` because of return type\n@@ -21,7 +21,7 @@ LL +     Some(())\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:17:5\n+  --> $DIR/compatible-variants.rs:21:5\n    |\n LL | fn b() -> Result<(), ()> {\n    |           -------------- expected `Result<(), ()>` because of return type\n@@ -37,7 +37,7 @@ LL +     Ok(())\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:23:25\n+  --> $DIR/compatible-variants.rs:27:25\n    |\n LL |     let _: Option<()> = while false {};\n    |            ----------   ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n@@ -52,7 +52,7 @@ LL |     let _: Option<()> = Some(while false {});\n    |                         +++++              +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:27:9\n+  --> $DIR/compatible-variants.rs:31:9\n    |\n LL |         while false {}\n    |         ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n@@ -69,7 +69,7 @@ LL +         Some(())\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:31:31\n+  --> $DIR/compatible-variants.rs:35:31\n    |\n LL |     let _: Result<i32, i32> = 1;\n    |            ----------------   ^ expected enum `Result`, found integer\n@@ -86,7 +86,7 @@ LL |     let _: Result<i32, i32> = Err(1);\n    |                               ++++ +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:34:26\n+  --> $DIR/compatible-variants.rs:38:26\n    |\n LL |     let _: Option<i32> = 1;\n    |            -----------   ^ expected enum `Option`, found integer\n@@ -101,7 +101,7 @@ LL |     let _: Option<i32> = Some(1);\n    |                          +++++ +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:37:28\n+  --> $DIR/compatible-variants.rs:41:28\n    |\n LL |     let _: Hey<i32, i32> = 1;\n    |            -------------   ^ expected enum `Hey`, found integer\n@@ -118,7 +118,7 @@ LL |     let _: Hey<i32, i32> = Hey::B(1);\n    |                            +++++++ +\n \n error[E0308]: mismatched types\n-  --> $DIR/compatible-variants.rs:40:29\n+  --> $DIR/compatible-variants.rs:44:29\n    |\n LL |     let _: Hey<i32, bool> = false;\n    |            --------------   ^^^^^ expected enum `Hey`, found `bool`\n@@ -132,6 +132,19 @@ help: try wrapping the expression in `Hey::B`\n LL |     let _: Hey<i32, bool> = Hey::B(false);\n    |                             +++++++     +\n \n-error: aborting due to 8 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:48:19\n+   |\n+LL |     let _ = Foo { bar };\n+   |                   ^^^ expected enum `Option`, found `i32`\n+   |\n+   = note: expected enum `Option<i32>`\n+              found type `i32`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     let _ = Foo { bar: Some(bar) };\n+   |                   ~~~~~~~~~~~~~~\n+\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}