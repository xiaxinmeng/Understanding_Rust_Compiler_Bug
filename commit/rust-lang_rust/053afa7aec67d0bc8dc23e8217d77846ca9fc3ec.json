{"sha": "053afa7aec67d0bc8dc23e8217d77846ca9fc3ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1M2FmYTdhZWM2N2QwYmM4ZGMyM2U4MjE3ZDc3ODQ2Y2E5ZmMzZWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-06T02:23:46Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-21T23:12:55Z"}, "message": "Do not complain about unused code when used in `impl` `Self` type", "tree": {"sha": "533abd69f8c3b72b7a92974033ea0a0edcc61f7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/533abd69f8c3b72b7a92974033ea0a0edcc61f7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/053afa7aec67d0bc8dc23e8217d77846ca9fc3ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/053afa7aec67d0bc8dc23e8217d77846ca9fc3ec", "html_url": "https://github.com/rust-lang/rust/commit/053afa7aec67d0bc8dc23e8217d77846ca9fc3ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/053afa7aec67d0bc8dc23e8217d77846ca9fc3ec/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1", "html_url": "https://github.com/rust-lang/rust/commit/7b0085a613e69cb69fc9e4eb5d422fa4a39d5de1"}], "stats": {"total": 86, "additions": 66, "deletions": 20}, "files": [{"sha": "d4805a7c7832252731a46186446e7c35298d4a43", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/053afa7aec67d0bc8dc23e8217d77846ca9fc3ec/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053afa7aec67d0bc8dc23e8217d77846ca9fc3ec/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=053afa7aec67d0bc8dc23e8217d77846ca9fc3ec", "patch": "@@ -30,10 +30,11 @@ fn should_explore(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n         Some(Node::Item(..)) |\n         Some(Node::ImplItem(..)) |\n         Some(Node::ForeignItem(..)) |\n-        Some(Node::TraitItem(..)) =>\n-            true,\n-        _ =>\n-            false\n+        Some(Node::TraitItem(..)) |\n+        Some(Node::Variant(..)) |\n+        Some(Node::AnonConst(..)) |\n+        Some(Node::Pat(..)) => true,\n+        _ => false\n     }\n }\n \n@@ -75,7 +76,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                 self.check_def_id(res.def_id());\n             }\n             _ if self.in_pat => {},\n-            Res::PrimTy(..) | Res::SelfTy(..) | Res::SelfCtor(..) |\n+            Res::PrimTy(..) | Res::SelfCtor(..) |\n             Res::Local(..) => {}\n             Res::Def(DefKind::Ctor(CtorOf::Variant, ..), ctor_def_id) => {\n                 let variant_id = self.tcx.parent(ctor_def_id).unwrap();\n@@ -92,6 +93,14 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                     self.check_def_id(variant_id);\n                 }\n             }\n+            Res::SelfTy(t, i) => {\n+                if let Some(t) = t {\n+                    self.check_def_id(t);\n+                }\n+                if let Some(i) = i {\n+                    self.check_def_id(i);\n+                }\n+            }\n             Res::ToolMod | Res::NonMacroAttr(..) | Res::Err => {}\n             _ => {\n                 self.check_def_id(res.def_id());\n@@ -271,7 +280,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n                 let res = self.tables.qpath_res(path, pat.hir_id);\n                 self.handle_field_pattern_match(pat, res, fields);\n             }\n-            PatKind::Path(ref qpath @ hir::QPath::TypeRelative(..)) => {\n+            PatKind::Path(ref qpath) => {\n                 let res = self.tables.qpath_res(qpath, pat.hir_id);\n                 self.handle_res(res);\n             }\n@@ -298,6 +307,11 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n         }\n         intravisit::walk_ty(self, ty);\n     }\n+\n+    fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n+        self.live_symbols.insert(c.hir_id);\n+        intravisit::walk_anon_const(self, c);\n+    }\n }\n \n fn has_allow_dead_code_or_lang_attr("}, {"sha": "010464adf5bce7c441462453bb5301eab4b0209c", "filename": "src/test/ui/derive-uninhabited-enum-38885.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/053afa7aec67d0bc8dc23e8217d77846ca9fc3ec/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053afa7aec67d0bc8dc23e8217d77846ca9fc3ec/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.rs?ref=053afa7aec67d0bc8dc23e8217d77846ca9fc3ec", "patch": "@@ -5,12 +5,15 @@\n // when deriving Debug on an empty enum\n \n #[derive(Debug)]\n-enum Void {} //~ WARN never used\n+enum Void {}\n \n #[derive(Debug)]\n-enum Foo { //~ WARN never used\n+enum Foo {\n     Bar(u8),\n-    Void(Void),\n+    Void(Void), //~ WARN never used\n }\n \n-fn main() {}\n+fn main() {\n+    let x = Foo::Bar(42);\n+    println!(\"{:?}\", x);\n+}"}, {"sha": "a3ed6798a7039cf00974a8f724c5bbba079fb95c", "filename": "src/test/ui/derive-uninhabited-enum-38885.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/053afa7aec67d0bc8dc23e8217d77846ca9fc3ec/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/053afa7aec67d0bc8dc23e8217d77846ca9fc3ec/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderive-uninhabited-enum-38885.stderr?ref=053afa7aec67d0bc8dc23e8217d77846ca9fc3ec", "patch": "@@ -1,14 +1,8 @@\n-warning: enum is never used: `Void`\n-  --> $DIR/derive-uninhabited-enum-38885.rs:8:1\n+warning: variant is never constructed: `Void`\n+  --> $DIR/derive-uninhabited-enum-38885.rs:13:5\n    |\n-LL | enum Void {}\n-   | ^^^^^^^^^\n+LL |     Void(Void),\n+   |     ^^^^^^^^^^\n    |\n    = note: `-W dead-code` implied by `-W unused`\n \n-warning: enum is never used: `Foo`\n-  --> $DIR/derive-uninhabited-enum-38885.rs:11:1\n-   |\n-LL | enum Foo {\n-   | ^^^^^^^^\n-"}, {"sha": "1a7b3f43cda145ef9e6941f7860138479b9605a8", "filename": "src/test/ui/lint/lint-dead-code-const-and-self.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/053afa7aec67d0bc8dc23e8217d77846ca9fc3ec/src%2Ftest%2Fui%2Flint%2Flint-dead-code-const-and-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053afa7aec67d0bc8dc23e8217d77846ca9fc3ec/src%2Ftest%2Fui%2Flint%2Flint-dead-code-const-and-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-dead-code-const-and-self.rs?ref=053afa7aec67d0bc8dc23e8217d77846ca9fc3ec", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+\n+#![deny(dead_code)]\n+\n+const TLC: usize = 4;\n+\n+trait Tr { fn doit(&self); }\n+\n+impl Tr for [usize; TLC] {\n+    fn doit(&self) {\n+        println!(\"called 4\");\n+    }\n+}\n+\n+struct X;\n+struct Y;\n+struct Z;\n+\n+trait Foo<T> {\n+    type Ty;\n+    fn foo() -> Self::Ty;\n+}\n+\n+impl Foo<Y> for X {\n+    type Ty = Z;\n+    fn foo() -> Self::Ty {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {\n+    let s = [0,1,2,3];\n+    s.doit();\n+    X::foo();\n+}"}]}