{"sha": "2b2d699b35d69375def80fe51c6a8c3bfbe53828", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMmQ2OTliMzVkNjkzNzVkZWY4MGZlNTFjNmE4YzNiZmJlNTM4Mjg=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-01-07T17:08:46Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-01-07T17:18:58Z"}, "message": "Report progress for cargo metadata and output-dir", "tree": {"sha": "1c10b2986017fc1e756d2bce75250546cce9310b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c10b2986017fc1e756d2bce75250546cce9310b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b2d699b35d69375def80fe51c6a8c3bfbe53828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2d699b35d69375def80fe51c6a8c3bfbe53828", "html_url": "https://github.com/rust-lang/rust/commit/2b2d699b35d69375def80fe51c6a8c3bfbe53828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b2d699b35d69375def80fe51c6a8c3bfbe53828/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54eb87de0363cfba1d7104b8d37898fc120c029b", "url": "https://api.github.com/repos/rust-lang/rust/commits/54eb87de0363cfba1d7104b8d37898fc120c029b", "html_url": "https://github.com/rust-lang/rust/commit/54eb87de0363cfba1d7104b8d37898fc120c029b"}], "stats": {"total": 95, "additions": 77, "deletions": 18}, "files": [{"sha": "2ee4e88b2e0003b94dc085250cf8264e51eef5f3", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2b2d699b35d69375def80fe51c6a8c3bfbe53828/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2d699b35d69375def80fe51c6a8c3bfbe53828/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=2b2d699b35d69375def80fe51c6a8c3bfbe53828", "patch": "@@ -3,9 +3,10 @@\n use std::{\n     convert::TryInto,\n     ffi::OsStr,\n+    io::BufReader,\n     ops,\n     path::{Path, PathBuf},\n-    process::Command,\n+    process::{Command, Stdio},\n };\n \n use anyhow::{Context, Result};\n@@ -15,6 +16,7 @@ use cargo_metadata::{BuildScript, CargoOpt, Message, MetadataCommand, PackageId}\n use itertools::Itertools;\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::FxHashMap;\n+use stdx::JodChild;\n \n use crate::cfg_flag::CfgFlag;\n use crate::utf8_stdout;\n@@ -171,6 +173,7 @@ impl CargoWorkspace {\n     pub fn from_cargo_metadata(\n         cargo_toml: &AbsPath,\n         config: &CargoConfig,\n+        progress: &dyn Fn(String),\n     ) -> Result<CargoWorkspace> {\n         let mut meta = MetadataCommand::new();\n         meta.cargo_path(toolchain::cargo());\n@@ -220,6 +223,9 @@ impl CargoWorkspace {\n             meta.other_options(vec![String::from(\"--filter-platform\"), target]);\n         }\n \n+        // FIXME: Currently MetadataCommand is not based on parse_stream,\n+        // So we just report it as a whole\n+        progress(\"metadata\".to_string());\n         let mut meta = meta.exec().with_context(|| {\n             let cwd: Option<AbsPathBuf> =\n                 std::env::current_dir().ok().and_then(|p| p.try_into().ok());\n@@ -243,7 +249,7 @@ impl CargoWorkspace {\n         let mut envs = FxHashMap::default();\n         let mut proc_macro_dylib_paths = FxHashMap::default();\n         if config.load_out_dirs_from_check {\n-            let resources = load_extern_resources(cargo_toml, config)?;\n+            let resources = load_extern_resources(cargo_toml, config, progress)?;\n             out_dir_by_id = resources.out_dirs;\n             cfgs = resources.cfgs;\n             envs = resources.env;\n@@ -368,6 +374,7 @@ pub(crate) struct ExternResources {\n pub(crate) fn load_extern_resources(\n     cargo_toml: &Path,\n     cargo_features: &CargoConfig,\n+    progress: &dyn Fn(String),\n ) -> Result<ExternResources> {\n     let mut cmd = Command::new(toolchain::cargo());\n     cmd.args(&[\"check\", \"--message-format=json\", \"--manifest-path\"]).arg(cargo_toml);\n@@ -395,11 +402,14 @@ pub(crate) fn load_extern_resources(\n         }\n     }\n \n-    let output = cmd.output()?;\n+    cmd.stdout(Stdio::piped()).stderr(Stdio::null()).stdin(Stdio::null());\n \n-    let mut res = ExternResources::default();\n+    let mut child = cmd.spawn().map(JodChild)?;\n+    let child_stdout = child.stdout.take().unwrap();\n+    let stdout = BufReader::new(child_stdout);\n \n-    for message in cargo_metadata::Message::parse_stream(output.stdout.as_slice()) {\n+    let mut res = ExternResources::default();\n+    for message in cargo_metadata::Message::parse_stream(stdout) {\n         if let Ok(message) = message {\n             match message {\n                 Message::BuildScriptExecuted(BuildScript {\n@@ -432,6 +442,8 @@ pub(crate) fn load_extern_resources(\n                     res.env.insert(package_id, env);\n                 }\n                 Message::CompilerArtifact(message) => {\n+                    progress(format!(\"metadata {}\", message.target.name));\n+\n                     if message.target.kind.contains(&\"proc-macro\".to_string()) {\n                         let package_id = message.package_id;\n                         // Skip rmeta file\n@@ -442,7 +454,9 @@ pub(crate) fn load_extern_resources(\n                         }\n                     }\n                 }\n-                Message::CompilerMessage(_) => (),\n+                Message::CompilerMessage(message) => {\n+                    progress(message.target.name.clone());\n+                }\n                 Message::Unknown => (),\n                 Message::BuildFinished(_) => {}\n                 Message::TextLine(_) => {}"}, {"sha": "06a0be284a0d2ffba8b64a0eef5048906a92f26b", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2b2d699b35d69375def80fe51c6a8c3bfbe53828/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2d699b35d69375def80fe51c6a8c3bfbe53828/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=2b2d699b35d69375def80fe51c6a8c3bfbe53828", "patch": "@@ -64,7 +64,11 @@ impl fmt::Debug for ProjectWorkspace {\n }\n \n impl ProjectWorkspace {\n-    pub fn load(manifest: ProjectManifest, config: &CargoConfig) -> Result<ProjectWorkspace> {\n+    pub fn load(\n+        manifest: ProjectManifest,\n+        config: &CargoConfig,\n+        progress: &dyn Fn(String),\n+    ) -> Result<ProjectWorkspace> {\n         let res = match manifest {\n             ProjectManifest::ProjectJson(project_json) => {\n                 let file = fs::read_to_string(&project_json).with_context(|| {\n@@ -84,15 +88,14 @@ impl ProjectWorkspace {\n                     cmd\n                 })?;\n \n-                let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, config).with_context(\n-                    || {\n+                let cargo = CargoWorkspace::from_cargo_metadata(&cargo_toml, config, progress)\n+                    .with_context(|| {\n                         format!(\n                             \"Failed to read Cargo metadata from Cargo.toml file {}, {}\",\n                             cargo_toml.display(),\n                             cargo_version\n                         )\n-                    },\n-                )?;\n+                    })?;\n                 let sysroot = if config.no_sysroot {\n                     Sysroot::default()\n                 } else {\n@@ -105,9 +108,12 @@ impl ProjectWorkspace {\n                 };\n \n                 let rustc = if let Some(rustc_dir) = &config.rustc_source {\n-                    Some(CargoWorkspace::from_cargo_metadata(&rustc_dir, config).with_context(\n-                        || format!(\"Failed to read Cargo metadata for Rust sources\"),\n-                    )?)\n+                    Some(\n+                        CargoWorkspace::from_cargo_metadata(&rustc_dir, config, progress)\n+                            .with_context(|| {\n+                                format!(\"Failed to read Cargo metadata for Rust sources\")\n+                            })?,\n+                    )\n                 } else {\n                     None\n                 };"}, {"sha": "31a16ca46476a85ee4271b82528dcfcf17655c8a", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b2d699b35d69375def80fe51c6a8c3bfbe53828/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2d699b35d69375def80fe51c6a8c3bfbe53828/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=2b2d699b35d69375def80fe51c6a8c3bfbe53828", "patch": "@@ -21,6 +21,7 @@ pub fn load_cargo(\n     let ws = ProjectWorkspace::load(\n         root,\n         &CargoConfig { load_out_dirs_from_check, ..Default::default() },\n+        &|_| {},\n     )?;\n \n     let (sender, receiver) = unbounded();"}, {"sha": "22ee96775cbb689c5ba11761f1c98aae3deef974", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b2d699b35d69375def80fe51c6a8c3bfbe53828/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2d699b35d69375def80fe51c6a8c3bfbe53828/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=2b2d699b35d69375def80fe51c6a8c3bfbe53828", "patch": "@@ -22,6 +22,7 @@ use crate::{\n     global_state::{file_id_to_url, url_to_file_id, GlobalState, Status},\n     handlers, lsp_ext,\n     lsp_utils::{apply_document_changes, is_canceled, notification_is, Progress},\n+    reload::ProjectWorkspaceProgress,\n     Result,\n };\n \n@@ -63,6 +64,7 @@ pub(crate) enum Task {\n     Diagnostics(Vec<(FileId, Vec<lsp_types::Diagnostic>)>),\n     Workspaces(Vec<anyhow::Result<ProjectWorkspace>>),\n     PrimeCaches(PrimeCachesProgress),\n+    FetchWorkspace(ProjectWorkspaceProgress),\n }\n \n impl fmt::Debug for Event {\n@@ -216,6 +218,16 @@ impl GlobalState {\n                             }\n                             PrimeCachesProgress::Finished => prime_caches_progress.push(progress),\n                         },\n+                        Task::FetchWorkspace(progress) => {\n+                            let (state, msg) = match progress {\n+                                ProjectWorkspaceProgress::Begin => (Progress::Begin, None),\n+                                ProjectWorkspaceProgress::Report(msg) => {\n+                                    (Progress::Report, Some(msg))\n+                                }\n+                                ProjectWorkspaceProgress::End => (Progress::End, None),\n+                            };\n+                            self.report_progress(\"fetching\", state, msg, None);\n+                        }\n                     }\n                     // Coalesce multiple task events into one loop turn\n                     task = match self.task_pool.receiver.try_recv() {"}, {"sha": "f4e084741b652710d0775e2a7be8e8a7f109c0a7", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2b2d699b35d69375def80fe51c6a8c3bfbe53828/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2d699b35d69375def80fe51c6a8c3bfbe53828/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=2b2d699b35d69375def80fe51c6a8c3bfbe53828", "patch": "@@ -15,6 +15,13 @@ use crate::{\n };\n use lsp_ext::StatusParams;\n \n+#[derive(Debug)]\n+pub(crate) enum ProjectWorkspaceProgress {\n+    Begin,\n+    Report(String),\n+    End,\n+}\n+\n impl GlobalState {\n     pub(crate) fn update_configuration(&mut self, config: Config) {\n         let _p = profile::span(\"GlobalState::update_configuration\");\n@@ -93,23 +100,42 @@ impl GlobalState {\n     }\n     pub(crate) fn fetch_workspaces(&mut self) {\n         log::info!(\"will fetch workspaces\");\n-        self.task_pool.handle.spawn({\n+\n+        self.task_pool.handle.spawn_with_sender({\n             let linked_projects = self.config.linked_projects();\n             let cargo_config = self.config.cargo();\n-            move || {\n+\n+            move |sender| {\n+                let progress = {\n+                    let sender = sender.clone();\n+                    move |msg| {\n+                        sender\n+                            .send(Task::FetchWorkspace(ProjectWorkspaceProgress::Report(msg)))\n+                            .unwrap()\n+                    }\n+                };\n+\n+                sender.send(Task::FetchWorkspace(ProjectWorkspaceProgress::Begin)).unwrap();\n+\n                 let workspaces = linked_projects\n                     .iter()\n                     .map(|project| match project {\n                         LinkedProject::ProjectManifest(manifest) => {\n-                            project_model::ProjectWorkspace::load(manifest.clone(), &cargo_config)\n+                            project_model::ProjectWorkspace::load(\n+                                manifest.clone(),\n+                                &cargo_config,\n+                                &progress,\n+                            )\n                         }\n                         LinkedProject::InlineJsonProject(it) => {\n                             project_model::ProjectWorkspace::load_inline(it.clone())\n                         }\n                     })\n                     .collect::<Vec<_>>();\n+\n+                sender.send(Task::FetchWorkspace(ProjectWorkspaceProgress::End)).unwrap();\n                 log::info!(\"did fetch workspaces {:?}\", workspaces);\n-                Task::Workspaces(workspaces)\n+                sender.send(Task::Workspaces(workspaces)).unwrap()\n             }\n         });\n     }"}]}