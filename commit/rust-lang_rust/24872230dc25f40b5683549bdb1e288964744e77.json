{"sha": "24872230dc25f40b5683549bdb1e288964744e77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ODcyMjMwZGMyNWY0MGI1NjgzNTQ5YmRiMWUyODg5NjQ3NDRlNzc=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-14T21:42:29Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-15T13:01:07Z"}, "message": "Check that access mode flags only use the first two bits", "tree": {"sha": "4235a605c6ffa4114cb15a3cc2971a3746056dea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4235a605c6ffa4114cb15a3cc2971a3746056dea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24872230dc25f40b5683549bdb1e288964744e77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24872230dc25f40b5683549bdb1e288964744e77", "html_url": "https://github.com/rust-lang/rust/commit/24872230dc25f40b5683549bdb1e288964744e77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24872230dc25f40b5683549bdb1e288964744e77/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f76f8ce63bc160b127356c01624bbc8442844c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/f76f8ce63bc160b127356c01624bbc8442844c22", "html_url": "https://github.com/rust-lang/rust/commit/f76f8ce63bc160b127356c01624bbc8442844c22"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "c3dc5e60f0b4b4e3f7deec6b632090351b8bbfd9", "filename": "src/shims/fs.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/24872230dc25f40b5683549bdb1e288964744e77/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24872230dc25f40b5683549bdb1e288964744e77/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=24872230dc25f40b5683549bdb1e288964744e77", "patch": "@@ -43,15 +43,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let mut options = OpenOptions::new();\n \n-        // The first two bits of the flag correspond to the access mode of the file in linux. This\n-        // is done this way because `O_RDONLY` is zero in several platforms.\n+        let o_rdonly = this.eval_libc_i32(\"O_RDONLY\")?;\n+        let o_wronly = this.eval_libc_i32(\"O_WRONLY\")?;\n+        let o_rdwr = this.eval_libc_i32(\"O_RDWR\")?;\n+        // The first two bits of the flag correspond to the access mode in linux, macOS and\n+        // windows. We need to check that in fact the access mode flags for the current platform\n+        // only use these two bits, otherwise we are in an unsupported platform and should error.\n+        if (o_rdonly | o_wronly | o_rdwr) & !0b11 != 0 {\n+            throw_unsup_format!(\"Access mode flags on this platform are unsupported\");\n+        }\n+        // Now we check the access mode\n         let access_mode = flag & 0b11;\n \n-        if access_mode == this.eval_libc_i32(\"O_RDONLY\")? {\n+        if access_mode == o_rdonly {\n             options.read(true);\n-        } else if access_mode == this.eval_libc_i32(\"O_WRONLY\")? {\n+        } else if access_mode == o_wronly {\n             options.write(true);\n-        } else if access_mode == this.eval_libc_i32(\"O_RDWR\")? {\n+        } else if access_mode == o_rdwr {\n             options.read(true).write(true);\n         } else {\n             throw_unsup_format!(\"Unsupported access mode {:#x}\", access_mode);\n@@ -124,8 +132,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // `FD_CLOEXEC` value without checking if the flag is set for the file because `std`\n             // always sets this flag when opening a file. However we still need to check that the\n             // file itself is open.\n-            this.get_handle_and(fd, |_| Ok(0))?;\n-            this.eval_libc_i32(\"FD_CLOEXEC\")\n+            let fd_cloexec = this.eval_libc_i32(\"FD_CLOEXEC\")?;\n+            this.get_handle_and(fd, |_| Ok(fd_cloexec))\n         } else {\n             throw_unsup_format!(\"The {:#x} command is not supported for `fcntl`)\", cmd);\n         }"}]}