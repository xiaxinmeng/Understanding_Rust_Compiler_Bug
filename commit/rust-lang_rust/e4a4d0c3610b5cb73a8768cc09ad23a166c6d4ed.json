{"sha": "e4a4d0c3610b5cb73a8768cc09ad23a166c6d4ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0YTRkMGMzNjEwYjVjYjczYTg3NjhjYzA5YWQyM2ExNjZjNmQ0ZWQ=", "commit": {"author": {"name": "Theemathas Chirananthavat", "email": "theemathas@gmail.com", "date": "2016-12-30T03:43:22Z"}, "committer": {"name": "Theemathas Chirananthavat", "email": "theemathas@gmail.com", "date": "2017-01-06T01:41:01Z"}, "message": "Implement the forget_ref lint.", "tree": {"sha": "7e524391921450598240c86f6d76bdfd4d9bab8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e524391921450598240c86f6d76bdfd4d9bab8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4a4d0c3610b5cb73a8768cc09ad23a166c6d4ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a4d0c3610b5cb73a8768cc09ad23a166c6d4ed", "html_url": "https://github.com/rust-lang/rust/commit/e4a4d0c3610b5cb73a8768cc09ad23a166c6d4ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4a4d0c3610b5cb73a8768cc09ad23a166c6d4ed/comments", "author": {"login": "theemathas", "id": 6120103, "node_id": "MDQ6VXNlcjYxMjAxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/6120103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theemathas", "html_url": "https://github.com/theemathas", "followers_url": "https://api.github.com/users/theemathas/followers", "following_url": "https://api.github.com/users/theemathas/following{/other_user}", "gists_url": "https://api.github.com/users/theemathas/gists{/gist_id}", "starred_url": "https://api.github.com/users/theemathas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theemathas/subscriptions", "organizations_url": "https://api.github.com/users/theemathas/orgs", "repos_url": "https://api.github.com/users/theemathas/repos", "events_url": "https://api.github.com/users/theemathas/events{/privacy}", "received_events_url": "https://api.github.com/users/theemathas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theemathas", "id": 6120103, "node_id": "MDQ6VXNlcjYxMjAxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/6120103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theemathas", "html_url": "https://github.com/theemathas", "followers_url": "https://api.github.com/users/theemathas/followers", "following_url": "https://api.github.com/users/theemathas/following{/other_user}", "gists_url": "https://api.github.com/users/theemathas/gists{/gist_id}", "starred_url": "https://api.github.com/users/theemathas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theemathas/subscriptions", "organizations_url": "https://api.github.com/users/theemathas/orgs", "repos_url": "https://api.github.com/users/theemathas/repos", "events_url": "https://api.github.com/users/theemathas/events{/privacy}", "received_events_url": "https://api.github.com/users/theemathas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55d20ff46ac73154b33a1e543e250fa32c32789", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55d20ff46ac73154b33a1e543e250fa32c32789", "html_url": "https://github.com/rust-lang/rust/commit/f55d20ff46ac73154b33a1e543e250fa32c32789"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "3950cdb6acf95d37358ce350fe47b1f1b7336940", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "renamed", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e4a4d0c3610b5cb73a8768cc09ad23a166c6d4ed/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a4d0c3610b5cb73a8768cc09ad23a166c6d4ed/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=e4a4d0c3610b5cb73a8768cc09ad23a166c6d4ed", "patch": "@@ -25,12 +25,32 @@ declare_lint! {\n     \"calls to `std::mem::drop` with a reference instead of an owned value\"\n }\n \n+/// **What it does:** Checks for calls to `std::mem::forget` with a reference\n+/// instead of an owned value.\n+///\n+/// **Why is this bad?** Calling `forget` on a reference will only forget the\n+/// reference itself, which is a no-op. It will not forget the underlying referenced\n+/// value, which is likely what was intended.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x = Box::new(1);\n+/// std::mem::forget(&x) // Should have been forget(x), x will still be dropped\n+/// ```\n+declare_lint! {\n+    pub FORGET_REF,\n+    Warn,\n+    \"calls to `std::mem::forget` with a reference instead of an owned value\"\n+}\n+\n #[allow(missing_copy_implementations)]\n pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(DROP_REF)\n+        lint_array!(DROP_REF, FORGET_REF)\n     }\n }\n \n@@ -39,17 +59,29 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if_let_chain!{[\n             let ExprCall(ref path, ref args) = expr.node,\n             let ExprPath(ref qpath) = path.node,\n-            match_def_path(cx, cx.tcx.tables().qpath_def(qpath, path.id).def_id(), &paths::DROP),\n             args.len() == 1,\n         ], {\n+            let def_id = cx.tcx.tables().qpath_def(qpath, path.id).def_id();\n+            let lint;\n+            let msg;\n+            if match_def_path(cx, def_id, &paths::DROP) {\n+                lint = DROP_REF;\n+                msg = \"call to `std::mem::drop` with a reference argument. \\\n+                       Dropping a reference does nothing\";\n+            } else if match_def_path(cx, def_id, &paths::MEM_FORGET) {\n+                lint = FORGET_REF;\n+                msg = \"call to `std::mem::forget` with a reference argument. \\\n+                       Forgetting a reference does nothing\";\n+            } else {\n+                return;\n+            }\n             let arg = &args[0];\n             let arg_ty = cx.tcx.tables().expr_ty(arg);\n             if let ty::TyRef(..) = arg_ty.sty {\n                 span_note_and_lint(cx,\n-                                   DROP_REF,\n+                                   lint,\n                                    expr.span,\n-                                   \"call to `std::mem::drop` with a reference argument. \\\n-                                   Dropping a reference does nothing\",\n+                                   msg,\n                                    arg.span,\n                                    &format!(\"argument has type {}\", arg_ty.sty));\n             }", "previous_filename": "clippy_lints/src/drop_ref.rs"}, {"sha": "f362ff12a85c43f00ffc52bdefee9046d1fc5c05", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4a4d0c3610b5cb73a8768cc09ad23a166c6d4ed/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4a4d0c3610b5cb73a8768cc09ad23a166c6d4ed/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e4a4d0c3610b5cb73a8768cc09ad23a166c6d4ed", "patch": "@@ -72,7 +72,7 @@ pub mod cyclomatic_complexity;\n pub mod derive;\n pub mod doc;\n pub mod double_parens;\n-pub mod drop_ref;\n+pub mod drop_forget_ref;\n pub mod entry;\n pub mod enum_clike;\n pub mod enum_glob_use;\n@@ -259,7 +259,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box non_expressive_names::NonExpressiveNames {\n         max_single_char_names: conf.max_single_char_names,\n     });\n-    reg.register_late_lint_pass(box drop_ref::Pass);\n+    reg.register_late_lint_pass(box drop_forget_ref::Pass);\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n     reg.register_late_lint_pass(box types::InvalidUpcastComparisons);\n     reg.register_late_lint_pass(box regex::Pass::default());\n@@ -360,7 +360,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n         doc::DOC_MARKDOWN,\n         double_parens::DOUBLE_PARENS,\n-        drop_ref::DROP_REF,\n+        drop_forget_ref::DROP_REF,\n+        drop_forget_ref::FORGET_REF,\n         entry::MAP_ENTRY,\n         enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n         enum_variants::ENUM_VARIANT_NAMES,"}]}