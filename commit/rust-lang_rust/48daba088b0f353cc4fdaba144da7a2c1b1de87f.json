{"sha": "48daba088b0f353cc4fdaba144da7a2c1b1de87f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZGFiYTA4OGIwZjM1M2NjNGZkYWJhMTQ0ZGE3YTJjMWIxZGU4N2Y=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-10-24T15:24:29Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-10-24T17:07:47Z"}, "message": "regex: Escaped literals can end ranges", "tree": {"sha": "a8199cb09a26454ec55cde8606f3ce44f14f1d6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8199cb09a26454ec55cde8606f3ce44f14f1d6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48daba088b0f353cc4fdaba144da7a2c1b1de87f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48daba088b0f353cc4fdaba144da7a2c1b1de87f", "html_url": "https://github.com/rust-lang/rust/commit/48daba088b0f353cc4fdaba144da7a2c1b1de87f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48daba088b0f353cc4fdaba144da7a2c1b1de87f/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2e47d6eb5425cd860137d632c1b8688e5e74241", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e47d6eb5425cd860137d632c1b8688e5e74241", "html_url": "https://github.com/rust-lang/rust/commit/e2e47d6eb5425cd860137d632c1b8688e5e74241"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "b7313ff6c1a1f17adac333795f4a59e2e7d9a2e6", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/48daba088b0f353cc4fdaba144da7a2c1b1de87f/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48daba088b0f353cc4fdaba144da7a2c1b1de87f/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=48daba088b0f353cc4fdaba144da7a2c1b1de87f", "patch": "@@ -375,15 +375,15 @@ impl<'a> Parser<'a> {\n         let mut alts: Vec<Ast> = vec!();\n \n         if self.peek_is(1, ']') {\n-            try!(self.expect(']'))\n+            try!(self.expect(']'));\n             ranges.push((']', ']'))\n         }\n         while self.peek_is(1, '-') {\n-            try!(self.expect('-'))\n+            try!(self.expect('-'));\n             ranges.push(('-', '-'))\n         }\n         loop {\n-            try!(self.noteof(\"a closing ']' or a non-empty character class)\"))\n+            try!(self.noteof(\"a closing ']' or a non-empty character class)\"));\n             let mut c = self.cur();\n             match c {\n                 '[' =>\n@@ -428,12 +428,23 @@ impl<'a> Parser<'a> {\n                     }\n                     return Ok(())\n                 }\n+                _ => {}\n             }\n \n             if self.peek_is(1, '-') && !self.peek_is(2, ']') {\n-                try!(self.expect('-'))\n-                try!(self.noteof(\"not a ']'\"))\n-                let c2 = self.cur();\n+                try!(self.expect('-'));\n+                // The regex can't end here.\n+                try!(self.noteof(\"not a ']'\"));\n+                // End the range with a single character or character escape.\n+                let mut c2 = self.cur();\n+                if c2 == '\\\\' {\n+                    match try!(self.parse_escape()) {\n+                        Literal(c3, _) => c2 = c3, // allow literal escapes below\n+                        ast =>\n+                            return self.err(format!(\"Expected a literal, but got {}.\",\n+                                                    ast).as_slice()),\n+                    }\n+                }\n                 if c2 < c {\n                     return self.err(format!(\"Invalid character class \\\n                                              range '{}-{}'\","}, {"sha": "4f4137265c0311730e7aaf0907e445352f6f8a53", "filename": "src/libregex/test/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/48daba088b0f353cc4fdaba144da7a2c1b1de87f/src%2Flibregex%2Ftest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48daba088b0f353cc4fdaba144da7a2c1b1de87f/src%2Flibregex%2Ftest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Ftest%2Ftests.rs?ref=48daba088b0f353cc4fdaba144da7a2c1b1de87f", "patch": "@@ -53,6 +53,13 @@ fn quoted_bracket_set() {\n     assert_eq!(ms, vec![(0, 1), (1, 2)]);\n }\n \n+#[test]\n+fn range_ends_with_escape() {\n+    let re = regex!(r\"([\\[-\\x{5d}])\");\n+    let ms = re.find_iter(\"[]\").collect::<Vec<(uint, uint)>>();\n+    assert_eq!(ms, vec![(0, 1), (1, 2)]);\n+}\n+\n macro_rules! replace(\n     ($name:ident, $which:ident, $re:expr,\n      $search:expr, $replace:expr, $result:expr) => (\n@@ -124,6 +131,10 @@ noparse!(fail_double_neg, \"(?-i-i)\")\n noparse!(fail_neg_empty, \"(?i-)\")\n noparse!(fail_empty_group, \"()\")\n noparse!(fail_dupe_named, \"(?P<a>.)(?P<a>.)\")\n+noparse!(fail_range_end_no_class, \"[a-[:lower:]]\")\n+noparse!(fail_range_end_no_begin, r\"[a-\\A]\")\n+noparse!(fail_range_end_no_end, r\"[a-\\z]\")\n+noparse!(fail_range_end_no_boundary, r\"[a-\\b]\")\n \n macro_rules! mat(\n     ($name:ident, $re:expr, $text:expr, $($loc:tt)+) => ("}]}