{"sha": "c29aadd9cf85d43249748228e858ae75d8edb768", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOWFhZGQ5Y2Y4NWQ0MzI0OTc0ODIyOGU4NThhZTc1ZDhlZGI3Njg=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-07-10T17:54:48Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-07-31T19:47:36Z"}, "message": "Provide a suggestion when trying to destructure a `Vec` as a slice", "tree": {"sha": "1631ce63401395ed62bf906b3e6ba8cc0e999902", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1631ce63401395ed62bf906b3e6ba8cc0e999902"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c29aadd9cf85d43249748228e858ae75d8edb768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c29aadd9cf85d43249748228e858ae75d8edb768", "html_url": "https://github.com/rust-lang/rust/commit/c29aadd9cf85d43249748228e858ae75d8edb768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c29aadd9cf85d43249748228e858ae75d8edb768/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "337181e07d3cd33c0aec2f17c12279bc9afca88f", "url": "https://api.github.com/repos/rust-lang/rust/commits/337181e07d3cd33c0aec2f17c12279bc9afca88f", "html_url": "https://github.com/rust-lang/rust/commit/337181e07d3cd33c0aec2f17c12279bc9afca88f"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "db77d155a2bae1bebf17736745f2b8ea6cb155ee", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c29aadd9cf85d43249748228e858ae75d8edb768/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29aadd9cf85d43249748228e858ae75d8edb768/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=c29aadd9cf85d43249748228e858ae75d8edb768", "patch": "@@ -16,6 +16,7 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Ident;\n use rustc_span::{BytePos, DUMMY_SP};\n+use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n use ty::VariantDef;\n \n@@ -1769,7 +1770,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // The expected type must be an array or slice, but was neither, so error.\n             _ => {\n                 if !expected.references_error() {\n-                    self.error_expected_array_or_slice(span, expected);\n+                    self.error_expected_array_or_slice(span, expected, ti);\n                 }\n                 let err = self.tcx.ty_error();\n                 (err, Some(err), err)\n@@ -1882,7 +1883,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         .emit();\n     }\n \n-    fn error_expected_array_or_slice(&self, span: Span, expected_ty: Ty<'tcx>) {\n+    fn error_expected_array_or_slice(&self, span: Span, expected_ty: Ty<'tcx>, ti: TopInfo<'tcx>) {\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n             span,\n@@ -1894,6 +1895,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if let ty::Array(..) | ty::Slice(..) = ty.kind() {\n                 err.help(\"the semantics of slice patterns changed recently; see issue #62254\");\n             }\n+        } else if Autoderef::new(&self.infcx, self.param_env, self.body_id, span, expected_ty, span)\n+            .any(|(ty, _)| matches!(ty.kind(), ty::Slice(..)))\n+        {\n+            if let (Some(span), true) = (ti.span, ti.origin_expr) {\n+                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider slicing here\",\n+                        format!(\"{}[..]\", snippet),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n         }\n         err.span_label(span, format!(\"pattern cannot match with input type `{}`\", expected_ty));\n         err.emit();"}, {"sha": "4eab2df30801e4e0ef5b40d123a43a07e8ef009f", "filename": "src/test/ui/suggestions/match-ergonomics.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29aadd9cf85d43249748228e858ae75d8edb768/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c29aadd9cf85d43249748228e858ae75d8edb768/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr?ref=c29aadd9cf85d43249748228e858ae75d8edb768", "patch": "@@ -15,12 +15,16 @@ LL |         [&v] => {},\n error[E0529]: expected an array or slice, found `Vec<i32>`\n   --> $DIR/match-ergonomics.rs:8:9\n    |\n+LL |     match x {\n+   |           - help: consider slicing here: `x[..]`\n LL |         [&v] => {},\n    |         ^^^^ pattern cannot match with input type `Vec<i32>`\n \n error[E0529]: expected an array or slice, found `Vec<i32>`\n   --> $DIR/match-ergonomics.rs:20:9\n    |\n+LL |     match x {\n+   |           - help: consider slicing here: `x[..]`\n LL |         [v] => {},\n    |         ^^^ pattern cannot match with input type `Vec<i32>`\n "}, {"sha": "1f010ae32a5ce97370ff05c73fbe7f060c5b2cb0", "filename": "src/test/ui/suggestions/pattern-slice-vec.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c29aadd9cf85d43249748228e858ae75d8edb768/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29aadd9cf85d43249748228e858ae75d8edb768/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.rs?ref=c29aadd9cf85d43249748228e858ae75d8edb768", "patch": "@@ -0,0 +1,20 @@\n+// Regression test for #87017.\n+\n+fn main() {\n+    fn foo() -> Vec<i32> { vec![1, 2, 3] }\n+\n+    if let [_, _, _] = foo() {}\n+    //~^ ERROR: expected an array or slice\n+    //~| HELP: consider slicing here\n+    if let [] = &foo() {}\n+    //~^ ERROR: expected an array or slice\n+    //~| HELP: consider slicing here\n+\n+    let v = vec![];\n+    match &v {\n+    //~^ HELP: consider slicing here\n+        [5] => {}\n+        //~^ ERROR: expected an array or slice\n+        _ => {}\n+    }\n+}"}, {"sha": "a6337cc66bf4c9909a3e8350304f756d899bec9e", "filename": "src/test/ui/suggestions/pattern-slice-vec.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c29aadd9cf85d43249748228e858ae75d8edb768/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c29aadd9cf85d43249748228e858ae75d8edb768/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpattern-slice-vec.stderr?ref=c29aadd9cf85d43249748228e858ae75d8edb768", "patch": "@@ -0,0 +1,28 @@\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/pattern-slice-vec.rs:6:12\n+   |\n+LL |     if let [_, _, _] = foo() {}\n+   |            ^^^^^^^^^   ----- help: consider slicing here: `foo()[..]`\n+   |            |\n+   |            pattern cannot match with input type `Vec<i32>`\n+\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/pattern-slice-vec.rs:9:12\n+   |\n+LL |     if let [] = &foo() {}\n+   |            ^^   ------ help: consider slicing here: `&foo()[..]`\n+   |            |\n+   |            pattern cannot match with input type `Vec<i32>`\n+\n+error[E0529]: expected an array or slice, found `Vec<_>`\n+  --> $DIR/pattern-slice-vec.rs:16:9\n+   |\n+LL |     match &v {\n+   |           -- help: consider slicing here: `&v[..]`\n+LL |\n+LL |         [5] => {}\n+   |         ^^^ pattern cannot match with input type `Vec<_>`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0529`."}]}