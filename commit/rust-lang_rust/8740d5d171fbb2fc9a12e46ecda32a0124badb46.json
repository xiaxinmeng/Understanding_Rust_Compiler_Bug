{"sha": "8740d5d171fbb2fc9a12e46ecda32a0124badb46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDBkNWQxNzFmYmIyZmM5YTEyZTQ2ZWNkYTMyYTAxMjRiYWRiNDY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-03-18T19:08:32Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-03-18T19:08:32Z"}, "message": "Add benchmarks for [u8]::make_ascii_uppercase", "tree": {"sha": "d92e5ee282528cf204a8320d484ffae84e470ea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d92e5ee282528cf204a8320d484ffae84e470ea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8740d5d171fbb2fc9a12e46ecda32a0124badb46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8740d5d171fbb2fc9a12e46ecda32a0124badb46", "html_url": "https://github.com/rust-lang/rust/commit/8740d5d171fbb2fc9a12e46ecda32a0124badb46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8740d5d171fbb2fc9a12e46ecda32a0124badb46/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f88167f89fffe321590c5148f21b7d51d44388d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f88167f89fffe321590c5148f21b7d51d44388d", "html_url": "https://github.com/rust-lang/rust/commit/0f88167f89fffe321590c5148f21b7d51d44388d"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "43242ca3f364ef08a5f999a4b48b9b6491517b8b", "filename": "src/libcore/benches/ascii_case.rs", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/8740d5d171fbb2fc9a12e46ecda32a0124badb46/src%2Flibcore%2Fbenches%2Fascii_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8740d5d171fbb2fc9a12e46ecda32a0124badb46/src%2Flibcore%2Fbenches%2Fascii_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii_case.rs?ref=8740d5d171fbb2fc9a12e46ecda32a0124badb46", "patch": "@@ -0,0 +1,172 @@\n+// Lower-case ASCII 'a' is the first byte that has its highest bit set after wrap-adding 0x1F:\n+//\n+//     b'a' + 0x1F == 0x80 == 0b1000_0000\n+//     b'z' + 0x1F == 0x98 == 0b10011000\n+//\n+// Lower-case ASCII 'z' is the last byte that has its highest bit unset after wrap-adding 0x05:\n+//\n+//     b'a' + 0x05 == 0x66 == 0b0110_0110\n+//     b'z' + 0x05 == 0x7F == 0b0111_1111\n+//\n+// \u2026 except for 0xFB to 0xFF, but those are in the range of bytes that have the highest bit\n+// unset again after adding 0x1F.\n+//\n+// So `(byte + 0x1f) & !(byte + 5)` has its highest bit set\n+// iff `byte` is a lower-case ASCII letter.\n+//\n+// Lower-case ASCII letters all have the 0x20 bit set.\n+// (Two positions right of 0x80, the highest bit.)\n+// Unsetting that bit produces the same letter, in upper-case.\n+//\n+// Therefore:\n+fn branchless_to_ascii_upper_case(byte: u8) -> u8 {\n+    byte &\n+    !(\n+        (\n+            byte.wrapping_add(0x1f) &\n+            !byte.wrapping_add(0x05) &\n+            0x80\n+        ) >> 2\n+    )\n+}\n+\n+\n+macro_rules! benches {\n+    ($( fn $name: ident($arg: ident: &mut [u8]) $body: block )+) => {\n+        benches!(mod short SHORT $($name $arg $body)+);\n+        benches!(mod medium MEDIUM $($name $arg $body)+);\n+        benches!(mod long LONG $($name $arg $body)+);\n+    };\n+\n+    (mod $mod_name: ident $input: ident $($name: ident $arg: ident $body: block)+) => {\n+        mod $mod_name {\n+            use super::*;\n+\n+            $(\n+                #[bench]\n+                fn $name(bencher: &mut Bencher) {\n+                    bencher.bytes = $input.len() as u64;\n+                    bencher.iter(|| {\n+                        let mut vec = $input.as_bytes().to_vec();\n+                        {\n+                            let $arg = &mut vec[..];\n+                            $body\n+                        }\n+                        vec\n+                    })\n+                }\n+            )+\n+        }\n+    }\n+}\n+\n+use test::black_box;\n+use test::Bencher;\n+\n+benches! {\n+    fn bench00_alloc_only(_bytes: &mut [u8]) {}\n+\n+    fn bench01_black_box_read_each_byte(bytes: &mut [u8]) {\n+        for byte in bytes {\n+            black_box(*byte);\n+        }\n+    }\n+\n+    fn bench02_lookup(bytes: &mut [u8]) {\n+        for byte in bytes {\n+            *byte = ASCII_UPPERCASE_MAP[*byte as usize]\n+        }\n+    }\n+\n+    fn bench03_branch_and_subtract(bytes: &mut [u8]) {\n+        for byte in bytes {\n+            *byte = if b'a' <= *byte && *byte <= b'z' {\n+                *byte - b'a' + b'A'\n+            } else {\n+                *byte\n+            }\n+        }\n+    }\n+\n+    fn bench04_branch_and_mask(bytes: &mut [u8]) {\n+        for byte in bytes {\n+            *byte = if b'a' <= *byte && *byte <= b'z' {\n+                *byte & !0x20\n+            } else {\n+                *byte\n+            }\n+        }\n+    }\n+\n+    fn bench05_branchless(bytes: &mut [u8]) {\n+        for byte in bytes {\n+            *byte = branchless_to_ascii_upper_case(*byte)\n+        }\n+    }\n+\n+    fn bench06_libcore(bytes: &mut [u8]) {\n+        bytes.make_ascii_uppercase()\n+    }\n+}\n+\n+macro_rules! repeat {\n+    ($s: expr) => { concat!($s, $s, $s, $s, $s, $s, $s, $s, $s, $s) }\n+}\n+\n+const SHORT: &'static str = \"Alice's\";\n+const MEDIUM: &'static str = \"Alice's Adventures in Wonderland\";\n+const LONG: &'static str = repeat!(r#\"\n+    La Guida di Bragia, a Ballad Opera for the Marionette Theatre (around 1850)\n+    Alice's Adventures in Wonderland (1865)\n+    Phantasmagoria and Other Poems (1869)\n+    Through the Looking-Glass, and What Alice Found There (includes \"Jabberwocky\" and \"The Walrus and the Carpenter\") (1871)\n+    The Hunting of the Snark (1876)\n+    Rhyme? And Reason? (1883) \u2013 shares some contents with the 1869 collection, including the long poem \"Phantasmagoria\"\n+    A Tangled Tale (1885)\n+    Sylvie and Bruno (1889)\n+    Sylvie and Bruno Concluded (1893)\n+    Pillow Problems (1893)\n+    What the Tortoise Said to Achilles (1895)\n+    Three Sunsets and Other Poems (1898)\n+    The Manlet (1903)[106]\n+\"#);\n+\n+const ASCII_UPPERCASE_MAP: [u8; 256] = [\n+    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n+    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n+    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n+    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,\n+    b' ', b'!', b'\"', b'#', b'$', b'%', b'&', b'\\'',\n+    b'(', b')', b'*', b'+', b',', b'-', b'.', b'/',\n+    b'0', b'1', b'2', b'3', b'4', b'5', b'6', b'7',\n+    b'8', b'9', b':', b';', b'<', b'=', b'>', b'?',\n+    b'@', b'A', b'B', b'C', b'D', b'E', b'F', b'G',\n+    b'H', b'I', b'J', b'K', b'L', b'M', b'N', b'O',\n+    b'P', b'Q', b'R', b'S', b'T', b'U', b'V', b'W',\n+    b'X', b'Y', b'Z', b'[', b'\\\\', b']', b'^', b'_',\n+    b'`',\n+\n+          b'A', b'B', b'C', b'D', b'E', b'F', b'G',\n+    b'H', b'I', b'J', b'K', b'L', b'M', b'N', b'O',\n+    b'P', b'Q', b'R', b'S', b'T', b'U', b'V', b'W',\n+    b'X', b'Y', b'Z',\n+\n+                      b'{', b'|', b'}', b'~', 0x7f,\n+    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,\n+    0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,\n+    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,\n+    0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,\n+    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,\n+    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,\n+    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,\n+    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,\n+    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,\n+    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,\n+    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,\n+    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,\n+    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,\n+    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,\n+    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,\n+    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,\n+];\n+"}, {"sha": "b72d035b0ce94c42faf0f383955c40c450bdc4b1", "filename": "src/libcore/benches/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8740d5d171fbb2fc9a12e46ecda32a0124badb46/src%2Flibcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8740d5d171fbb2fc9a12e46ecda32a0124badb46/src%2Flibcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Flib.rs?ref=8740d5d171fbb2fc9a12e46ecda32a0124badb46", "patch": "@@ -5,6 +5,7 @@ extern crate core;\n extern crate test;\n \n mod any;\n+mod ascii_case;\n mod char;\n mod hash;\n mod iter;"}]}