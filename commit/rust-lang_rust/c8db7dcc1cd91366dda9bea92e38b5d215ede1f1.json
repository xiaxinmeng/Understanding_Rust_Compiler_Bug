{"sha": "c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZGI3ZGNjMWNkOTEzNjZkZGE5YmVhOTJlMzhiNWQyMTVlZGUxZjE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-29T01:16:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-29T01:16:21Z"}, "message": "Rollup merge of #69551 - matthiaskrgr:len_zero, r=Mark-Simulacrum\n\nuse is_empty() instead of len() == x  to determine if structs are empty.", "tree": {"sha": "30b13312973df647f11481151c9fc7bea077479a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30b13312973df647f11481151c9fc7bea077479a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWbtlCRBK7hj4Ov3rIwAAdHIIAGoDHA/65L2DnvhK/lJxXhij\nVWNCFaz+0LSyx5eHjembUasBXN+TxnmsFswP2PhLL20P/4yfyNLpDqR64QOY4PEl\nJHirDgCiQiFa6NHJNpelK/ds4eSVrnFCAXOxHj3uwJrSXVDTe4HEiYfN9goM1Nzk\n7PSk3yrtS1O3+EZxiSCgfQPU7324xAyAIqNjcjCvrlzBNtK8uvQV+pet/8bz6cjM\ncTS1b6LS/l4HCzMEz3wHtp/JarcY3GAImOH8FXB23pfh4941UVCE0Qxh7WSqp7Dy\n/4lhS9nmsjvUFU7yHQWvnN6ruN9VisQB77riOD/bSq3gowQA9HKhhT3xiByrT94=\n=iRuD\n-----END PGP SIGNATURE-----\n", "payload": "tree 30b13312973df647f11481151c9fc7bea077479a\nparent ba2df27525ab535aa600cd25fda4aa7f0f13a2aa\nparent 1622b6ef7372c40381914facf8794d851fcd9eb1\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582938981 +0100\ncommitter GitHub <noreply@github.com> 1582938981 +0100\n\nRollup merge of #69551 - matthiaskrgr:len_zero, r=Mark-Simulacrum\n\nuse is_empty() instead of len() == x  to determine if structs are empty.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "html_url": "https://github.com/rust-lang/rust/commit/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2df27525ab535aa600cd25fda4aa7f0f13a2aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2df27525ab535aa600cd25fda4aa7f0f13a2aa", "html_url": "https://github.com/rust-lang/rust/commit/ba2df27525ab535aa600cd25fda4aa7f0f13a2aa"}, {"sha": "1622b6ef7372c40381914facf8794d851fcd9eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1622b6ef7372c40381914facf8794d851fcd9eb1", "html_url": "https://github.com/rust-lang/rust/commit/1622b6ef7372c40381914facf8794d851fcd9eb1"}], "stats": {"total": 152, "additions": 76, "deletions": 76}, "files": [{"sha": "9a4561f286997423f077bc0b589387d9cf4a35b7", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -3823,7 +3823,7 @@ where\n         // The last index of self.v is already checked and found to match\n         // by the last iteration, so we start searching a new match\n         // one index to the left.\n-        let remainder = if self.v.len() == 0 { &[] } else { &self.v[..(self.v.len() - 1)] };\n+        let remainder = if self.v.is_empty() { &[] } else { &self.v[..(self.v.len() - 1)] };\n         let idx = remainder.iter().rposition(|x| (self.pred)(x)).map(|idx| idx + 1).unwrap_or(0);\n         if idx == 0 {\n             self.finished = true;\n@@ -4033,7 +4033,7 @@ where\n             return None;\n         }\n \n-        let idx_opt = if self.v.len() == 0 {\n+        let idx_opt = if self.v.is_empty() {\n             None\n         } else {\n             // work around borrowck limitations"}, {"sha": "16920947c800b445610c7b5f31b4b2c0a4362daf", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -250,7 +250,7 @@ impl<'tcx> Arena<'tcx> {\n \n     #[inline]\n     pub fn alloc_slice<T: Copy>(&self, value: &[T]) -> &mut [T] {\n-        if value.len() == 0 {\n+        if value.is_empty() {\n             return &mut [];\n         }\n         self.dropless.alloc_slice(value)"}, {"sha": "33902fe913a9c9129010786c025ec84da6b8687b", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -809,7 +809,7 @@ impl DepGraph {\n             dep_node\n         );\n \n-        if unlikely!(diagnostics.len() > 0) {\n+        if unlikely!(!diagnostics.is_empty()) {\n             self.emit_diagnostics(tcx, data, dep_node_index, prev_dep_node_index, diagnostics);\n         }\n "}, {"sha": "2cb8388aca63fec2de88bde08472d1526f8e5005", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -19,7 +19,7 @@ use smallvec::SmallVec;\n use std::cmp::Ord;\n \n fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n-    debug_assert!(ich::IGNORED_ATTRIBUTES.len() > 0);\n+    debug_assert!(!ich::IGNORED_ATTRIBUTES.is_empty());\n     ich::IGNORED_ATTRIBUTES.iter().map(|&s| s).collect()\n }\n "}, {"sha": "889c8f3aca05eb88abae55b263089b9f0be967d5", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -14,7 +14,7 @@ impl<'ctx> rustc_target::HashStableContext for StableHashingContext<'ctx> {}\n \n impl<'a> HashStable<StableHashingContext<'a>> for [ast::Attribute] {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        if self.len() == 0 {\n+        if self.is_empty() {\n             self.len().hash_stable(hcx, hasher);\n             return;\n         }"}, {"sha": "28e197b2a7fc19182ac6c15f3eeac39676fa6ce5", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -171,7 +171,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             // Skip the last, which is just the environment of the constant.  The stacktrace\n             // is sometimes empty because we create \"fake\" eval contexts in CTFE to do work\n             // on constant values.\n-            if self.stacktrace.len() > 0 {\n+            if !self.stacktrace.is_empty() {\n                 for frame_info in &self.stacktrace[..self.stacktrace.len() - 1] {\n                     err.span_label(frame_info.call_site, frame_info.to_string());\n                 }"}, {"sha": "a415c72d0ba46623310490ee30f24ef62902bac0", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -2219,7 +2219,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                 });\n                 let region = if print_region {\n                     let mut region = region.to_string();\n-                    if region.len() > 0 {\n+                    if !region.is_empty() {\n                         region.push(' ');\n                     }\n                     region"}, {"sha": "befae4195f3b33513c4efa03a43e9d543bedbd42", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -2473,7 +2473,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // FIXME consider asking the input slice to be sorted to avoid\n         // re-interning permutations, in which case that would be asserted\n         // here.\n-        if preds.len() == 0 {\n+        if preds.is_empty() {\n             // The macro-generated method below asserts we don't intern an empty slice.\n             List::empty()\n         } else {\n@@ -2482,31 +2482,31 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {\n-        if ts.len() == 0 { List::empty() } else { self._intern_type_list(ts) }\n+        if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }\n     }\n \n     pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {\n-        if ts.len() == 0 { List::empty() } else { self._intern_substs(ts) }\n+        if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }\n     }\n \n     pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {\n-        if ps.len() == 0 { List::empty() } else { self._intern_projs(ps) }\n+        if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }\n     }\n \n     pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {\n-        if ts.len() == 0 { List::empty() } else { self._intern_place_elems(ts) }\n+        if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }\n     }\n \n     pub fn intern_canonical_var_infos(self, ts: &[CanonicalVarInfo]) -> CanonicalVarInfos<'tcx> {\n-        if ts.len() == 0 { List::empty() } else { self._intern_canonical_var_infos(ts) }\n+        if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }\n     }\n \n     pub fn intern_clauses(self, ts: &[Clause<'tcx>]) -> Clauses<'tcx> {\n-        if ts.len() == 0 { List::empty() } else { self._intern_clauses(ts) }\n+        if ts.is_empty() { List::empty() } else { self._intern_clauses(ts) }\n     }\n \n     pub fn intern_goals(self, ts: &[Goal<'tcx>]) -> Goals<'tcx> {\n-        if ts.len() == 0 { List::empty() } else { self._intern_goals(ts) }\n+        if ts.is_empty() { List::empty() } else { self._intern_goals(ts) }\n     }\n \n     pub fn mk_fn_sig<I>("}, {"sha": "f65822aba4c9ecab6d7c49f74e2fd9ebff502785", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -314,7 +314,7 @@ impl<'tcx> Instance<'tcx> {\n     ) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n         let fn_sig = tcx.fn_sig(def_id);\n-        let is_vtable_shim = fn_sig.inputs().skip_binder().len() > 0\n+        let is_vtable_shim = !fn_sig.inputs().skip_binder().is_empty()\n             && fn_sig.input(0).skip_binder().is_param(0)\n             && tcx.generics_of(def_id).has_self;\n         if is_vtable_shim {"}, {"sha": "cb98ff4c9e5cb44e461cfe0b94759871e930f7c2", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -798,7 +798,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     // (Typechecking will reject discriminant-sizing attrs.)\n \n                     let v = present_first.unwrap();\n-                    let kind = if def.is_enum() || variants[v].len() == 0 {\n+                    let kind = if def.is_enum() || variants[v].is_empty() {\n                         StructKind::AlwaysSized\n                     } else {\n                         let param_env = tcx.param_env(def.did);"}, {"sha": "4c7046781c1006d571e2606eb95c1ae5cab96a05", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -698,7 +698,7 @@ impl<T: Copy> List<T> {\n     fn from_arena<'tcx>(arena: &'tcx Arena<'tcx>, slice: &[T]) -> &'tcx List<T> {\n         assert!(!mem::needs_drop::<T>());\n         assert!(mem::size_of::<T>() != 0);\n-        assert!(slice.len() != 0);\n+        assert!(!slice.is_empty());\n \n         // Align up the size of the len (usize) field\n         let align = mem::align_of::<T>();"}, {"sha": "248874dbe46f5028cbc9ce729c52d2f5cecd5ad3", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -229,7 +229,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         err.span_label(data.span, \"only `Fn` traits may use parentheses\");\n                         if let Ok(snippet) = self.sess.source_map().span_to_snippet(data.span) {\n                             // Do not suggest going from `Trait()` to `Trait<>`\n-                            if data.inputs.len() > 0 {\n+                            if !data.inputs.is_empty() {\n                                 if let Some(split) = snippet.find('(') {\n                                     let trait_name = &snippet[0..split];\n                                     let args = &snippet[split + 1..snippet.len() - 1];"}, {"sha": "76e1e7c175b0153ac6dc55314f22a99836926c90", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -791,7 +791,7 @@ impl<'a> PrintState<'a> for State<'a> {\n                     s.print_generic_arg(generic_arg)\n                 });\n \n-                let mut comma = data.args.len() != 0;\n+                let mut comma = !data.args.is_empty();\n \n                 for constraint in data.constraints.iter() {\n                     if comma {"}, {"sha": "1f1c8b8d21e391e851fa12b0352a989f26ce8d13", "filename": "src/librustc_builtin_macros/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_builtin_macros%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_builtin_macros%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fconcat.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -49,7 +49,7 @@ pub fn expand_concat(\n             }\n         }\n     }\n-    if missing_literal.len() > 0 {\n+    if !missing_literal.is_empty() {\n         let mut err = cx.struct_span_err(missing_literal, \"expected a literal\");\n         err.note(\"only literals (like `\\\"foo\\\"`, `42` and `3.14`) can be passed to `concat!()`\");\n         err.emit();"}, {"sha": "0684662b2bfe15cbd322844be4b6ab2c6570e1f3", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -1096,7 +1096,7 @@ pub fn expand_preparsed_format_args(\n         cx.str_pieces.push(s);\n     }\n \n-    if cx.invalid_refs.len() >= 1 {\n+    if !cx.invalid_refs.is_empty() {\n         cx.report_invalid_references(numbered_position_args);\n     }\n "}, {"sha": "a39c25f6693c1cb56ed2aa05314b2e07957f2037", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -237,7 +237,7 @@ fn fat_lto(\n     let module: ModuleCodegen<ModuleLlvm> = match costliest_module {\n         Some((_cost, i)) => in_memory.remove(i),\n         None => {\n-            assert!(serialized_modules.len() > 0, \"must have at least one serialized module\");\n+            assert!(!serialized_modules.is_empty(), \"must have at least one serialized module\");\n             let (buffer, name) = serialized_modules.remove(0);\n             info!(\"no in-memory regular modules to choose from, parsing {:?}\", name);\n             ModuleCodegen {"}, {"sha": "0081a75a4da11b13b558c939a91f8d94b20fc8a8", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -61,7 +61,7 @@ unsafe fn configure_llvm(sess: &Session) {\n     let sess_args = cg_opts.chain(tg_opts);\n \n     let user_specified_args: FxHashSet<_> =\n-        sess_args.clone().map(|s| llvm_arg_to_arg_name(s)).filter(|s| s.len() > 0).collect();\n+        sess_args.clone().map(|s| llvm_arg_to_arg_name(s)).filter(|s| !s.is_empty()).collect();\n \n     {\n         // This adds the given argument to LLVM. Unless `force` is true"}, {"sha": "90601521b19f1f65f2ddd83096879082b1816bd1", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -1524,12 +1524,12 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n     for &(cnum, _) in deps.iter().rev() {\n         if let Some(missing) = info.missing_lang_items.get(&cnum) {\n             end_with.extend(missing.iter().cloned());\n-            if end_with.len() > 0 && group_end.is_none() {\n+            if !end_with.is_empty() && group_end.is_none() {\n                 group_end = Some(cnum);\n             }\n         }\n         end_with.retain(|item| info.lang_item_to_crate.get(item) != Some(&cnum));\n-        if end_with.len() == 0 && group_end.is_some() {\n+        if end_with.is_empty() && group_end.is_some() {\n             group_start = Some(cnum);\n             break;\n         }"}, {"sha": "2cdbb204696c7b8719d346c319416cd490b0c827", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -1244,11 +1244,11 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         while !codegen_done\n             || running > 0\n             || (!codegen_aborted\n-                && (work_items.len() > 0\n-                    || needs_fat_lto.len() > 0\n-                    || needs_thin_lto.len() > 0\n-                    || lto_import_only_modules.len() > 0\n-                    || main_thread_worker_state != MainThreadWorkerState::Idle))\n+                && !(work_items.is_empty()\n+                    && needs_fat_lto.is_empty()\n+                    && needs_thin_lto.is_empty()\n+                    && lto_import_only_modules.is_empty()\n+                    && main_thread_worker_state == MainThreadWorkerState::Idle))\n         {\n             // While there are still CGUs to be codegened, the coordinator has\n             // to decide how to utilize the compiler processes implicit Token:\n@@ -1289,7 +1289,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                 // Perform the serial work here of figuring out what we're\n                 // going to LTO and then push a bunch of work items onto our\n                 // queue to do LTO\n-                if work_items.len() == 0\n+                if work_items.is_empty()\n                     && running == 0\n                     && main_thread_worker_state == MainThreadWorkerState::Idle\n                 {\n@@ -1354,7 +1354,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n \n             // Spin up what work we can, only doing this while we've got available\n             // parallelism slots and work left to spawn.\n-            while !codegen_aborted && work_items.len() > 0 && running < tokens.len() {\n+            while !codegen_aborted && !work_items.is_empty() && running < tokens.len() {\n                 let (item, _) = work_items.pop().unwrap();\n \n                 maybe_start_llvm_timer(prof, cgcx.config(item.module_kind()), &mut llvm_start_time);"}, {"sha": "a70314c35c07c9cee94c035162425c6b3fe39fd8", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -425,7 +425,7 @@ impl SelfProfiler {\n             }\n \n             // Warn about any unknown event names\n-            if unknown_events.len() > 0 {\n+            if !unknown_events.is_empty() {\n                 unknown_events.sort();\n                 unknown_events.dedup();\n "}, {"sha": "2d7ff191c77a5a40127d4a999d9d49e05f875ce4", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -231,7 +231,7 @@ pub trait Emitter {\n                ].contains(&sugg.style)\n             {\n                 let substitution = &sugg.substitutions[0].parts[0].snippet.trim();\n-                let msg = if substitution.len() == 0 || sugg.style.hide_inline() {\n+                let msg = if substitution.is_empty() || sugg.style.hide_inline() {\n                     // This substitution is only removal OR we explicitly don't want to show the\n                     // code inline (`hide_inline`). Therefore, we don't show the substitution.\n                     format!(\"help: {}\", sugg.msg)"}, {"sha": "0660590a72570b040602d2b14acd21472b4832cd", "filename": "src/librustc_errors/snippet.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_errors%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_errors%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fsnippet.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -152,7 +152,7 @@ impl Annotation {\n             //       |\n             //\n             // Note that this would be the complete output users would see.\n-            label.len() > 0\n+            !label.is_empty()\n         } else {\n             false\n         }"}, {"sha": "f77faf3d4ab5987db5e998620d1d8d8e41b87c19", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -421,7 +421,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         for _ in num_universes_in_query..num_universes_in_response {\n             universe_map.push(self.create_next_universe());\n         }\n-        assert!(universe_map.len() >= 1); // always have the root universe\n+        assert!(!universe_map.is_empty()); // always have the root universe\n         assert_eq!(universe_map[ty::UniverseIndex::ROOT.as_usize()], ty::UniverseIndex::ROOT);\n \n         // Every canonical query result includes values for each of"}, {"sha": "3f9fa6459b37f613bf0a7eee10d7594b97d32dd3", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -587,7 +587,7 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n \n         // skip no-op cases known to be satisfied\n         if let VerifyBound::AllBounds(ref bs) = verify.bound {\n-            if bs.len() == 0 {\n+            if bs.is_empty() {\n                 return;\n             }\n         }"}, {"sha": "a2fe0236aecbd596ca8db25cf364840261e1b0ed", "filename": "src/librustc_infer/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -440,7 +440,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// going to help).\n     pub fn report_overflow_error_cycle(&self, cycle: &[PredicateObligation<'tcx>]) -> ! {\n         let cycle = self.resolve_vars_if_possible(&cycle.to_owned());\n-        assert!(cycle.len() > 0);\n+        assert!(!cycle.is_empty());\n \n         debug!(\"report_overflow_error_cycle: cycle={:?}\", cycle);\n "}, {"sha": "925665763cbe559c011c62a9183650cffeac063f", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -2157,7 +2157,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 debug!(\"builtin_bound: nested={:?}\", nested);\n                 candidates\n                     .vec\n-                    .push(BuiltinCandidate { has_nested: nested.skip_binder().len() > 0 });\n+                    .push(BuiltinCandidate { has_nested: !nested.skip_binder().is_empty() });\n             }\n             BuiltinImplConditions::None => {}\n             BuiltinImplConditions::Ambiguous => {"}, {"sha": "8e1947e52ca32fc1d4c30834a3bb5cc1b42ef35a", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -375,7 +375,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         }\n \n         let prev = self.cur;\n-        if specs.len() > 0 {\n+        if !specs.is_empty() {\n             self.cur = self.sets.list.len() as u32;\n             self.sets.list.push(LintSet::Node { specs: specs, parent: prev });\n         }"}, {"sha": "9e71839dbfde6a7540e2d5ba869e43befc06de5b", "filename": "src/librustc_metadata/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_metadata%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_metadata%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdependency_format.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -339,7 +339,7 @@ fn activate_injected_dep(\n // there's only going to be one allocator in the output.\n fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n     let sess = &tcx.sess;\n-    if list.len() == 0 {\n+    if list.is_empty() {\n         return;\n     }\n     let mut panic_runtime = None;"}, {"sha": "7a3f09ac80b3d99a24721e8609a8aff386981a13", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -264,7 +264,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     #[inline(always)]\n     pub fn cur_frame(&self) -> usize {\n-        assert!(self.stack.len() > 0);\n+        assert!(!self.stack.is_empty());\n         self.stack.len() - 1\n     }\n \n@@ -505,7 +505,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         return_place: Option<PlaceTy<'tcx, M::PointerTag>>,\n         return_to_block: StackPopCleanup,\n     ) -> InterpResult<'tcx> {\n-        if self.stack.len() > 0 {\n+        if !self.stack.is_empty() {\n             info!(\"PAUSING({}) {}\", self.cur_frame(), self.frame().instance);\n         }\n         ::log_settings::settings().indentation += 1;\n@@ -698,7 +698,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         }\n \n-        if self.stack.len() > 0 {\n+        if !self.stack.is_empty() {\n             info!(\n                 \"CONTINUING({}) {} (unwinding = {})\",\n                 self.cur_frame(),"}, {"sha": "8f2f2094b1e38892ad23a3cfd95136164fddb5ed", "filename": "src/librustc_mir/transform/uninhabited_enum_branching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -28,7 +28,7 @@ fn get_switched_on_type<'tcx>(\n \n     // Only bother checking blocks which terminate by switching on a local.\n     if let Some(local) = get_discriminant_local(&terminator.kind) {\n-        let stmt_before_term = (block_data.statements.len() > 0)\n+        let stmt_before_term = (!block_data.statements.is_empty())\n             .then(|| &block_data.statements[block_data.statements.len() - 1].kind);\n \n         if let Some(StatementKind::Assign(box (l, Rvalue::Discriminant(place)))) = stmt_before_term"}, {"sha": "83483aeb6a4b45c4ddd1ca2dc14ac659c222f94b", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -369,7 +369,7 @@ where\n \n     fn open_drop_for_adt(&mut self, adt: &'tcx ty::AdtDef, substs: SubstsRef<'tcx>) -> BasicBlock {\n         debug!(\"open_drop_for_adt({:?}, {:?}, {:?})\", self, adt, substs);\n-        if adt.variants.len() == 0 {\n+        if adt.variants.is_empty() {\n             return self.elaborator.patch().new_block(BasicBlockData {\n                 statements: vec![],\n                 terminator: Some(Terminator {"}, {"sha": "473692a43f3e95937765a74ad5df13ccfa2d36db", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -37,7 +37,7 @@ impl<'tcx> MirPatch<'tcx> {\n         let mut resume_stmt_block = None;\n         for (bb, block) in body.basic_blocks().iter_enumerated() {\n             if let TerminatorKind::Resume = block.terminator().kind {\n-                if block.statements.len() > 0 {\n+                if !block.statements.is_empty() {\n                     assert!(resume_stmt_block.is_none());\n                     resume_stmt_block = Some(bb);\n                 } else {"}, {"sha": "bb61e56a2c51dee0f611a55151be6de3465b4291", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -1438,7 +1438,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let target_blocks: Vec<_> = target_candidates\n                 .into_iter()\n                 .map(|mut candidates| {\n-                    if candidates.len() != 0 {\n+                    if !candidates.is_empty() {\n                         let candidate_start = this.cfg.start_new_block();\n                         this.match_candidates(\n                             span,"}, {"sha": "9f450f8fc7b773874e126c464650715b5fbf6336", "filename": "src/librustc_mir_build/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Ftest.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -222,7 +222,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             TestKind::SwitchInt { switch_ty, ref options, indices: _ } => {\n                 let target_blocks = make_target_blocks(self);\n                 let terminator = if switch_ty.kind == ty::Bool {\n-                    assert!(options.len() > 0 && options.len() <= 2);\n+                    assert!(!options.is_empty() && options.len() <= 2);\n                     if let [first_bb, second_bb] = *target_blocks {\n                         let (true_bb, false_bb) = match options[0] {\n                             1 => (first_bb, second_bb),"}, {"sha": "e87dde8863cc857fd20fe536161008e6c4898509", "filename": "src/librustc_parse/lexer/tokentrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -141,7 +141,7 @@ impl<'a> TokenTreesReader<'a> {\n                             self.last_delim_empty_block_spans.insert(delim, empty_block_span);\n                         }\n \n-                        if self.open_braces.len() == 0 {\n+                        if self.open_braces.is_empty() {\n                             // Clear up these spans to avoid suggesting them as we've found\n                             // properly matched delimiters so far for an entire block.\n                             self.matching_delim_spans.clear();"}, {"sha": "c60330864defdea55b3d14b5304d3ede4e9376c9", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -371,7 +371,7 @@ fn prepend_attrs(\n     span: rustc_span::Span,\n ) -> Option<tokenstream::TokenStream> {\n     let tokens = tokens?;\n-    if attrs.len() == 0 {\n+    if attrs.is_empty() {\n         return Some(tokens.clone());\n     }\n     let mut builder = tokenstream::TokenStreamBuilder::new();"}, {"sha": "1db920625e3cf10d158950cba05c11782ed9d5ed", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -469,7 +469,7 @@ impl<'a> Parser<'a> {\n         // FIXME: we would like to report this in ast_validation instead, but we currently do not\n         // preserve ordering of generic parameters with respect to associated type binding, so we\n         // lose that information after parsing.\n-        if misplaced_assoc_ty_constraints.len() > 0 {\n+        if !misplaced_assoc_ty_constraints.is_empty() {\n             let mut err = self.struct_span_err(\n                 args_lo.to(self.prev_span),\n                 \"associated type bindings must be declared after generic parameters\","}, {"sha": "74154cb3df41551af956aee14afb368c8a2c2aed", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -158,7 +158,7 @@ fn calc_unused_spans(\n             }\n         }\n         ast::UseTreeKind::Nested(ref nested) => {\n-            if nested.len() == 0 {\n+            if nested.is_empty() {\n                 return UnusedSpanResult::FlatUnused(use_tree.span, full_span);\n             }\n "}, {"sha": "3926849e7cad11d45b0c131639cbfd0e50fe4770", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -1478,7 +1478,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             }\n         });\n \n-        if reexports.len() > 0 {\n+        if !reexports.is_empty() {\n             if let Some(def_id) = module.def_id() {\n                 self.r.export_map.insert(def_id, reexports);\n             }"}, {"sha": "c062b7dbe64dfae5af95291df55380b8ab461844", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -1017,7 +1017,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             trait_items\n                 .iter()\n                 .filter_map(|item| match &item.kind {\n-                    AssocItemKind::TyAlias(_, _, bounds, _) if bounds.len() == 0 => {\n+                    AssocItemKind::TyAlias(_, _, bounds, _) if bounds.is_empty() => {\n                         Some(item.ident)\n                     }\n                     _ => None,"}, {"sha": "cef8898a07c5a131b88bcf1f1d13bedf46c92f6c", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -354,7 +354,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         let mut has_self_arg = None;\n         if let PathSource::Expr(parent) = source {\n             match &parent?.kind {\n-                ExprKind::Call(_, args) if args.len() > 0 => {\n+                ExprKind::Call(_, args) if !args.is_empty() => {\n                     let mut expr_kind = &args[0].kind;\n                     loop {\n                         match expr_kind {"}, {"sha": "db4412a18a35b84c85cfa7fe56ae9255c011e091", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -1129,7 +1129,7 @@ pub fn parse_error_format(\n         // Conservatively require that the `--json` argument is coupled with\n         // `--error-format=json`. This means that `--json` is specified we\n         // should actually be emitting JSON blobs.\n-        _ if matches.opt_strs(\"json\").len() > 0 => {\n+        _ if !matches.opt_strs(\"json\").is_empty() => {\n             early_error(\n                 ErrorOutputType::default(),\n                 \"using `--json` requires also using `--error-format=json`\","}, {"sha": "a361267b59e363ae2830aab9d147376d51047077", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -1205,7 +1205,7 @@ impl SourceFile {\n     /// number. If the source_file is empty or the position is located before the\n     /// first line, `None` is returned.\n     pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {\n-        if self.lines.len() == 0 {\n+        if self.lines.is_empty() {\n             return None;\n         }\n "}, {"sha": "2f854c045e50ecf870e8dce8e621b5da7d0870aa", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -92,7 +92,7 @@ fn dropck_outlives<'tcx>(\n                 // information and will just decrease the speed at which we can emit these errors\n                 // (since we'll be printing for just that much longer for the often enormous types\n                 // that result here).\n-                if result.overflows.len() >= 1 {\n+                if !result.overflows.is_empty() {\n                     break;\n                 }\n "}, {"sha": "a4213173d368beaf579eb31bd7e2449c71a25eee", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -1761,7 +1761,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         potential_assoc_types: Vec<Span>,\n         trait_bounds: &[hir::PolyTraitRef<'_>],\n     ) {\n-        if !associated_types.values().any(|v| v.len() > 0) {\n+        if !associated_types.values().any(|v| !v.is_empty()) {\n             return;\n         }\n         let tcx = self.tcx();"}, {"sha": "efd59f017abc21e14c7b5d371a17ee6656e4ad3b", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -529,7 +529,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .lookup_op_method(fn_sig.output(), &[other_ty], Op::Binary(op, is_assign))\n                 .is_ok()\n             {\n-                let (variable_snippet, applicability) = if fn_sig.inputs().len() > 0 {\n+                let (variable_snippet, applicability) = if !fn_sig.inputs().is_empty() {\n                     (\n                         format!(\"{}( /* arguments */ )\", source_map.span_to_snippet(span).unwrap()),\n                         Applicability::HasPlaceholders,"}, {"sha": "d5cc19f986f45ae5b88f60580ed5bcbfaf71f3a3", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -342,7 +342,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             });\n         }\n \n-        if pat_adjustments.len() > 0 {\n+        if !pat_adjustments.is_empty() {\n             debug!(\"default binding mode is now {:?}\", def_bm);\n             self.inh.tables.borrow_mut().pat_adjustments_mut().insert(pat.hir_id, pat_adjustments);\n         }\n@@ -1004,7 +1004,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .filter(|ident| !used_fields.contains_key(&ident))\n             .collect::<Vec<_>>();\n \n-        if inexistent_fields.len() > 0 && !variant.recovered {\n+        if !inexistent_fields.is_empty() && !variant.recovered {\n             self.error_inexistent_fields(\n                 kind_name,\n                 &inexistent_fields,\n@@ -1035,7 +1035,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if etc {\n                 tcx.sess.struct_span_err(span, \"`..` cannot be used in union patterns\").emit();\n             }\n-        } else if !etc && unmentioned_fields.len() > 0 {\n+        } else if !etc && !unmentioned_fields.is_empty() {\n             self.error_unmentioned_fields(span, &unmentioned_fields, variant);\n         }\n         no_field_errors"}, {"sha": "d75a49a2f8261145e750e27795b885f3a387fda0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -2499,7 +2499,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     // purpose functions as they wouldn't have the right target features\n     // enabled. For that reason we also forbid #[inline(always)] as it can't be\n     // respected.\n-    if codegen_fn_attrs.target_features.len() > 0 {\n+    if !codegen_fn_attrs.target_features.is_empty() {\n         if codegen_fn_attrs.inline == InlineAttr::Always {\n             if let Some(span) = inline_span {\n                 tcx.sess.span_err("}, {"sha": "8be6bf8f0d38a9fd06e69047de5a7ff7438f56ab", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -398,7 +398,7 @@ impl Clean<Lifetime> for hir::GenericParam<'_> {\n     fn clean(&self, _: &DocContext<'_>) -> Lifetime {\n         match self.kind {\n             hir::GenericParamKind::Lifetime { .. } => {\n-                if self.bounds.len() > 0 {\n+                if !self.bounds.is_empty() {\n                     let mut bounds = self.bounds.iter().map(|bound| match bound {\n                         hir::GenericBound::Outlives(lt) => lt,\n                         _ => panic!(),\n@@ -607,7 +607,7 @@ impl Clean<GenericParamDef> for hir::GenericParam<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> GenericParamDef {\n         let (name, kind) = match self.kind {\n             hir::GenericParamKind::Lifetime { .. } => {\n-                let name = if self.bounds.len() > 0 {\n+                let name = if !self.bounds.is_empty() {\n                     let mut bounds = self.bounds.iter().map(|bound| match bound {\n                         hir::GenericBound::Outlives(lt) => lt,\n                         _ => panic!(),"}, {"sha": "ee685c90a629b25443920f982ceb6fa5b0395455", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -201,7 +201,7 @@ impl Item {\n                 classes.push(\"deprecated\");\n             }\n \n-            if classes.len() != 0 { Some(classes.join(\" \")) } else { None }\n+            if !classes.is_empty() { Some(classes.join(\" \")) } else { None }\n         })\n     }\n "}, {"sha": "54d5a2efc8ad1c8421b52ef817cc52efd3573ef4", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -2783,7 +2783,7 @@ fn assoc_type(\n \n fn render_stability_since_raw(w: &mut Buffer, ver: Option<&str>, containing_ver: Option<&str>) {\n     if let Some(v) = ver {\n-        if containing_ver != ver && v.len() > 0 {\n+        if containing_ver != ver && !v.is_empty() {\n             write!(w, \"<span class='since' title='Stable since Rust version {0}'>{0}</span>\", v)\n         }\n     }\n@@ -3143,7 +3143,7 @@ fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n             .filter_map(|attr| attr.meta_item().and_then(|mi| render_attribute(mi)))\n             .collect();\n \n-        if display.len() > 0 { Some(format!(\"{}({})\", path, display.join(\", \"))) } else { None }\n+        if !display.is_empty() { Some(format!(\"{}({})\", path, display.join(\", \"))) } else { None }\n     } else {\n         None\n     }\n@@ -3178,7 +3178,7 @@ fn render_attributes(w: &mut Buffer, it: &clean::Item, top: bool) {\n             attrs.push_str(&format!(\"#[{}]\\n\", s));\n         }\n     }\n-    if attrs.len() > 0 {\n+    if !attrs.is_empty() {\n         write!(\n             w,\n             \"<span class=\\\"docblock attributes{}\\\">{}</span>\","}, {"sha": "a8a571e7c54910182178f7183868671b0f117645", "filename": "src/librustdoc/theme.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustdoc%2Ftheme.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibrustdoc%2Ftheme.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftheme.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -191,7 +191,7 @@ fn build_rule(v: &[u8], positions: &[usize]) -> String {\n             .replace(\"{\", \"\")\n             .replace(\"}\", \"\")\n             .split(' ')\n-            .filter(|s| s.len() > 0)\n+            .filter(|s| !s.is_empty())\n             .collect::<Vec<&str>>()\n             .join(\" \"),\n     )"}, {"sha": "97db0ff3791d728f00fa24312607c7f0409ca157", "filename": "src/libstd/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibstd%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibstd%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbacktrace.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -304,7 +304,7 @@ impl Backtrace {\n         // If no frames came out assume that this is an unsupported platform\n         // since `backtrace` doesn't provide a way of learning this right now,\n         // and this should be a good enough approximation.\n-        let inner = if frames.len() == 0 {\n+        let inner = if frames.is_empty() {\n             Inner::Unsupported\n         } else {\n             Inner::Captured(Mutex::new(Capture {"}, {"sha": "9ebc991d638cb5de8249c0b718a5adc28a112f2f", "filename": "src/libtest/formatters/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibtest%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8db7dcc1cd91366dda9bea92e38b5d215ede1f1/src%2Flibtest%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fformatters%2Fjson.rs?ref=c8db7dcc1cd91366dda9bea92e38b5d215ede1f1", "patch": "@@ -80,7 +80,7 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n         state: &ConsoleTestState,\n     ) -> io::Result<()> {\n         let display_stdout = state.options.display_output || *result != TestResult::TrOk;\n-        let stdout = if display_stdout && stdout.len() > 0 {\n+        let stdout = if display_stdout && !stdout.is_empty() {\n             Some(String::from_utf8_lossy(stdout))\n         } else {\n             None"}]}