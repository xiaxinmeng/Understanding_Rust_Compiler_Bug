{"sha": "64c21ed19594b323e72605ba8c5dd4c6eee433f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0YzIxZWQxOTU5NGIzMjNlNzI2MDViYThjNWRkNGM2ZWVlNDMzZjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T14:39:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T14:43:03Z"}, "message": "Switch type aliases to new sources", "tree": {"sha": "6b48928149607fa6396357af29abfb4eb3d4d791", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b48928149607fa6396357af29abfb4eb3d4d791"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64c21ed19594b323e72605ba8c5dd4c6eee433f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64c21ed19594b323e72605ba8c5dd4c6eee433f6", "html_url": "https://github.com/rust-lang/rust/commit/64c21ed19594b323e72605ba8c5dd4c6eee433f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64c21ed19594b323e72605ba8c5dd4c6eee433f6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7a36b54431ca5b746af53549a1b6e142570c7f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a36b54431ca5b746af53549a1b6e142570c7f4", "html_url": "https://github.com/rust-lang/rust/commit/b7a36b54431ca5b746af53549a1b6e142570c7f4"}], "stats": {"total": 235, "additions": 162, "deletions": 73}, "files": [{"sha": "b8d48a500c97b23eb1fecf67a728cd8a4cd5a4e5", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=64c21ed19594b323e72605ba8c5dd4c6eee433f6", "patch": "@@ -13,7 +13,7 @@ use hir_def::{\n     traits::TraitData,\n     type_ref::{Mutability, TypeRef},\n     AssocItemId, CrateModuleId, FunctionContainerId, HasModule, ImplId, LocalEnumVariantId,\n-    LocalStructFieldId, Lookup, ModuleId, UnionId,\n+    LocalStructFieldId, Lookup, ModuleId, TypeAliasContainerId, UnionId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -954,30 +954,34 @@ pub struct TypeAlias {\n \n impl TypeAlias {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.lookup(db).module(db) }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n         Some(self.module(db).krate())\n     }\n \n-    /// The containing impl block, if this is a method.\n+    /// The containing impl block, if this is a type alias.\n     pub fn impl_block(self, db: &impl DefDatabase) -> Option<ImplBlock> {\n-        ImplBlock::containing(db, self.into())\n+        match self.container(db) {\n+            Some(Container::ImplBlock(it)) => Some(it),\n+            _ => None,\n+        }\n     }\n \n-    /// The containing trait, if this is a trait method definition.\n+    /// The containing trait, if this is a trait type alias definition.\n     pub fn parent_trait(self, db: &impl DefDatabase) -> Option<Trait> {\n-        db.trait_items_index(self.module(db).id).get_parent_trait(self.id.into()).map(Trait::from)\n+        match self.container(db) {\n+            Some(Container::Trait(it)) => Some(it),\n+            _ => None,\n+        }\n     }\n \n     pub fn container(self, db: &impl DefDatabase) -> Option<Container> {\n-        if let Some(impl_block) = self.impl_block(db) {\n-            Some(impl_block.into())\n-        } else if let Some(trait_) = self.parent_trait(db) {\n-            Some(trait_.into())\n-        } else {\n-            None\n+        match self.id.lookup(db).container {\n+            TypeAliasContainerId::TraitId(it) => Some(Container::Trait(it.into())),\n+            TypeAliasContainerId::ImplId(it) => Some(Container::ImplBlock(it.into())),\n+            TypeAliasContainerId::ModuleId(_) => None,\n         }\n     }\n "}, {"sha": "04675e08efc2c641e528dcc3c58c13050ca716b6", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=64c21ed19594b323e72605ba8c5dd4c6eee433f6", "patch": "@@ -138,7 +138,7 @@ impl HasSource for Trait {\n impl HasSource for TypeAlias {\n     type Ast = ast::TypeAliasDef;\n     fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::TypeAliasDef> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for MacroDef {"}, {"sha": "f5fdaafa3785d9176571dc95267aeb17344d1cbf", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 71, "deletions": 41, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=64c21ed19594b323e72605ba8c5dd4c6eee433f6", "patch": "@@ -4,7 +4,7 @@ use hir_def::{ModuleId, StructId, StructOrUnionId, UnionId};\n use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n-    match_ast, AstPtr,\n+    match_ast, AstPtr, SyntaxNode,\n };\n \n use crate::{\n@@ -52,48 +52,27 @@ impl FromSource for Trait {\n impl FromSource for Function {\n     type Ast = ast::FnDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n-        // FIXME: this doesn't try to handle nested declarations\n-        for container in src.value.syntax().ancestors() {\n-            let res = match_ast! {\n-                match container {\n-                    ast::TraitDef(it) => {\n-                        let c = Trait::from_source(db, src.with_value(it))?;\n-                        c.items(db)\n-                            .into_iter()\n-                            .filter_map(|it| match it {\n-                                AssocItem::Function(it) => Some(it),\n-                                _ => None\n-                            })\n-                            .find(|it| same_source(&it.source(db), &src))?\n-                    },\n-                    ast::ImplBlock(it) => {\n-                        let c = ImplBlock::from_source(db, src.with_value(it))?;\n-                        c.items(db)\n-                            .into_iter()\n-                            .filter_map(|it| match it {\n-                                AssocItem::Function(it) => Some(it),\n-                                _ => None\n-                            })\n-                            .find(|it| same_source(&it.source(db), &src))?\n-\n-                     },\n-                    _ => { continue },\n-                }\n-            };\n-            return Some(res);\n-        }\n-\n-        let module_source = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n-        let c = Module::from_definition(db, src.with_value(module_source))?;\n-        let res = c\n-            .declarations(db)\n+        let items = match Container::find(db, src.as_ref().map(|it| it.syntax()))? {\n+            Container::Trait(it) => it.items(db),\n+            Container::ImplBlock(it) => it.items(db),\n+            Container::Module(m) => {\n+                return m\n+                    .declarations(db)\n+                    .into_iter()\n+                    .filter_map(|it| match it {\n+                        ModuleDef::Function(it) => Some(it),\n+                        _ => None,\n+                    })\n+                    .find(|it| same_source(&it.source(db), &src))\n+            }\n+        };\n+        items\n             .into_iter()\n             .filter_map(|it| match it {\n-                ModuleDef::Function(it) => Some(it),\n+                AssocItem::Function(it) => Some(it),\n                 _ => None,\n             })\n-            .find(|it| same_source(&it.source(db), &src));\n-        res\n+            .find(|it| same_source(&it.source(db), &src))\n     }\n }\n \n@@ -114,8 +93,27 @@ impl FromSource for Static {\n impl FromSource for TypeAlias {\n     type Ast = ast::TypeAliasDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: Source<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(TypeAlias { id })\n+        let items = match Container::find(db, src.as_ref().map(|it| it.syntax()))? {\n+            Container::Trait(it) => it.items(db),\n+            Container::ImplBlock(it) => it.items(db),\n+            Container::Module(m) => {\n+                return m\n+                    .declarations(db)\n+                    .into_iter()\n+                    .filter_map(|it| match it {\n+                        ModuleDef::TypeAlias(it) => Some(it),\n+                        _ => None,\n+                    })\n+                    .find(|it| same_source(&it.source(db), &src))\n+            }\n+        };\n+        items\n+            .into_iter()\n+            .filter_map(|it| match it {\n+                AssocItem::TypeAlias(it) => Some(it),\n+                _ => None,\n+            })\n+            .find(|it| same_source(&it.source(db), &src))\n     }\n }\n \n@@ -258,6 +256,38 @@ where\n     Some(DEF::from_ast(ctx, &src.value))\n }\n \n+enum Container {\n+    Trait(Trait),\n+    ImplBlock(ImplBlock),\n+    Module(Module),\n+}\n+\n+impl Container {\n+    fn find(db: &impl DefDatabase, src: Source<&SyntaxNode>) -> Option<Container> {\n+        // FIXME: this doesn't try to handle nested declarations\n+        for container in src.value.ancestors() {\n+            let res = match_ast! {\n+                match container {\n+                    ast::TraitDef(it) => {\n+                        let c = Trait::from_source(db, src.with_value(it))?;\n+                        Container::Trait(c)\n+                    },\n+                    ast::ImplBlock(it) => {\n+                        let c = ImplBlock::from_source(db, src.with_value(it))?;\n+                        Container::ImplBlock(c)\n+                     },\n+                    _ => { continue },\n+                }\n+            };\n+            return Some(res);\n+        }\n+\n+        let module_source = ModuleSource::from_child_node(db, src);\n+        let c = Module::from_definition(db, src.with_value(module_source))?;\n+        Some(Container::Module(c))\n+    }\n+}\n+\n /// XXX: AST Nodes and SyntaxNodes have identity equality semantics: nodes are\n /// equal if they point to exactly the same object.\n ///"}, {"sha": "d6d32fb8c17b13af5ef1437d88ab22087d4c361c", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=64c21ed19594b323e72605ba8c5dd4c6eee433f6", "patch": "@@ -14,13 +14,13 @@ use crate::{\n         CrateDefMap,\n     },\n     traits::{TraitData, TraitItemsIndex},\n-    DefWithBodyId, EnumId, FunctionLoc, ImplId, ItemLoc, ModuleId, StructOrUnionId, TraitId,\n+    DefWithBodyId, EnumId, ImplId, ItemLoc, ModuleId, StructOrUnionId, TraitId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n-    fn intern_function(&self, loc: FunctionLoc) -> crate::FunctionId;\n+    fn intern_function(&self, loc: crate::FunctionLoc) -> crate::FunctionId;\n     #[salsa::interned]\n     fn intern_struct_or_union(&self, loc: ItemLoc<ast::StructDef>) -> crate::StructOrUnionId;\n     #[salsa::interned]\n@@ -32,7 +32,7 @@ pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_trait(&self, loc: ItemLoc<ast::TraitDef>) -> crate::TraitId;\n     #[salsa::interned]\n-    fn intern_type_alias(&self, loc: ItemLoc<ast::TypeAliasDef>) -> crate::TypeAliasId;\n+    fn intern_type_alias(&self, loc: crate::TypeAliasLoc) -> crate::TypeAliasId;\n     #[salsa::interned]\n     fn intern_impl(&self, loc: ItemLoc<ast::ImplBlock>) -> crate::ImplId;\n }"}, {"sha": "17a5d5f43626d25a6dce6782de07ce0559cc60ee", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=64c21ed19594b323e72605ba8c5dd4c6eee433f6", "patch": "@@ -72,7 +72,7 @@ impl GenericParams {\n                 let self_param = TypeRef::Path(name::SELF_TYPE.into());\n                 generics.fill_bounds(&it.source(db).value, self_param);\n             }\n-            GenericDefId::TypeAliasId(it) => generics.fill(&it.source(db).value, start),\n+            GenericDefId::TypeAliasId(it) => generics.fill(&it.lookup(db).source(db).value, start),\n             // Note that we don't add `Self` here: in `impl`s, `Self` is not a\n             // type-parameter, but rather is a type-alias for impl's target\n             // type, so this is handled by the resolver."}, {"sha": "703e4d503b86b2889f24e89044f698630296185f", "filename": "crates/ra_hir_def/src/impls.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir_def%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir_def%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fimpls.rs?ref=64c21ed19594b323e72605ba8c5dd4c6eee433f6", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::ast;\n \n use crate::{\n     db::DefDatabase2, type_ref::TypeRef, AssocItemId, AstItemDef, ConstId, FunctionContainerId,\n-    FunctionLoc, ImplId, Intern, LocationCtx, TypeAliasId,\n+    FunctionLoc, ImplId, Intern, LocationCtx, TypeAliasContainerId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -36,18 +36,23 @@ impl ImplData {\n                 .impl_items()\n                 .map(|item_node| match item_node {\n                     ast::ImplItem::FnDef(it) => {\n-                        let func_id = FunctionLoc {\n+                        let def = FunctionLoc {\n                             container: FunctionContainerId::ImplId(id),\n                             ast_id: AstId::new(src.file_id, items.ast_id(&it)),\n                         }\n                         .intern(db);\n-                        func_id.into()\n+                        def.into()\n                     }\n                     ast::ImplItem::ConstDef(it) => {\n                         ConstId::from_ast_id(ctx, items.ast_id(&it)).into()\n                     }\n                     ast::ImplItem::TypeAliasDef(it) => {\n-                        TypeAliasId::from_ast_id(ctx, items.ast_id(&it)).into()\n+                        let def = TypeAliasLoc {\n+                            container: TypeAliasContainerId::ImplId(id),\n+                            ast_id: AstId::new(src.file_id, items.ast_id(&it)),\n+                        }\n+                        .intern(db);\n+                        def.into()\n                     }\n                 })\n                 .collect()"}, {"sha": "6052370b4d4ad325042f7c8d0247877ef5466cf7", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=64c21ed19594b323e72605ba8c5dd4c6eee433f6", "patch": "@@ -332,15 +332,34 @@ impl AstItemDef<ast::TraitDef> for TraitId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TypeAliasId(salsa::InternId);\n impl_intern_key!(TypeAliasId);\n-impl AstItemDef<ast::TypeAliasDef> for TypeAliasId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::TypeAliasDef>) -> Self {\n-        db.intern_type_alias(loc)\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct TypeAliasLoc {\n+    pub container: TypeAliasContainerId,\n+    pub ast_id: AstId<ast::TypeAliasDef>,\n+}\n+\n+impl Intern for TypeAliasLoc {\n+    type ID = TypeAliasId;\n+    fn intern(self, db: &impl db::DefDatabase2) -> TypeAliasId {\n+        db.intern_type_alias(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::TypeAliasDef> {\n-        db.lookup_intern_type_alias(self)\n+}\n+\n+impl Lookup for TypeAliasId {\n+    type Data = TypeAliasLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase2) -> TypeAliasLoc {\n+        db.lookup_intern_type_alias(*self)\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum TypeAliasContainerId {\n+    ModuleId(ModuleId),\n+    ImplId(ImplId),\n+    TraitId(TraitId),\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ImplId(salsa::InternId);\n impl_intern_key!(ImplId);\n@@ -476,6 +495,16 @@ impl HasModule for FunctionLoc {\n     }\n }\n \n+impl HasModule for TypeAliasLoc {\n+    fn module(&self, db: &impl db::DefDatabase2) -> ModuleId {\n+        match self.container {\n+            TypeAliasContainerId::ModuleId(it) => it,\n+            TypeAliasContainerId::ImplId(it) => it.module(db),\n+            TypeAliasContainerId::TraitId(it) => it.module(db),\n+        }\n+    }\n+}\n+\n pub trait HasSource {\n     type Value;\n     fn source(&self, db: &impl db::DefDatabase2) -> Source<Self::Value>;\n@@ -489,3 +518,12 @@ impl HasSource for FunctionLoc {\n         Source::new(self.ast_id.file_id(), node)\n     }\n }\n+\n+impl HasSource for TypeAliasLoc {\n+    type Value = ast::TypeAliasDef;\n+\n+    fn source(&self, db: &impl db::DefDatabase2) -> Source<ast::TypeAliasDef> {\n+        let node = self.ast_id.to_node(db);\n+        Source::new(self.ast_id.file_id(), node)\n+    }\n+}"}, {"sha": "060185b619254465879adee70a3dec9815dce77b", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=64c21ed19594b323e72605ba8c5dd4c6eee433f6", "patch": "@@ -21,7 +21,7 @@ use crate::{\n     path::{Path, PathKind},\n     AdtId, AstId, AstItemDef, ConstId, CrateModuleId, EnumId, EnumVariantId, FunctionContainerId,\n     FunctionLoc, ImplId, Intern, LocationCtx, ModuleDefId, ModuleId, StaticId, StructId,\n-    StructOrUnionId, TraitId, TypeAliasId, UnionId,\n+    StructOrUnionId, TraitId, TypeAliasContainerId, TypeAliasLoc, UnionId,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase2, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -673,13 +673,13 @@ where\n         let name = def.name.clone();\n         let def: PerNs = match def.kind {\n             raw::DefKind::Function(ast_id) => {\n-                let f = FunctionLoc {\n+                let def = FunctionLoc {\n                     container: FunctionContainerId::ModuleId(module),\n                     ast_id: AstId::new(self.file_id, ast_id),\n                 }\n                 .intern(self.def_collector.db);\n \n-                PerNs::values(f.into())\n+                PerNs::values(def.into())\n             }\n             raw::DefKind::Struct(ast_id) => {\n                 let id = StructOrUnionId::from_ast_id(ctx, ast_id).into();\n@@ -698,7 +698,13 @@ where\n             }\n             raw::DefKind::Trait(ast_id) => PerNs::types(TraitId::from_ast_id(ctx, ast_id).into()),\n             raw::DefKind::TypeAlias(ast_id) => {\n-                PerNs::types(TypeAliasId::from_ast_id(ctx, ast_id).into())\n+                let def = TypeAliasLoc {\n+                    container: TypeAliasContainerId::ModuleId(module),\n+                    ast_id: AstId::new(self.file_id, ast_id),\n+                }\n+                .intern(self.def_collector.db);\n+\n+                PerNs::types(def.into())\n             }\n         };\n         let resolution = Resolution { def, import: None };"}, {"sha": "228524a574744399a30474100430560ef5569ec4", "filename": "crates/ra_hir_def/src/traits.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir_def%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64c21ed19594b323e72605ba8c5dd4c6eee433f6/crates%2Fra_hir_def%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftraits.rs?ref=64c21ed19594b323e72605ba8c5dd4c6eee433f6", "patch": "@@ -12,7 +12,7 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     db::DefDatabase2, AssocItemId, AstItemDef, ConstId, FunctionContainerId, FunctionLoc, Intern,\n-    LocationCtx, ModuleDefId, ModuleId, TraitId, TypeAliasId,\n+    LocationCtx, ModuleDefId, ModuleId, TraitId, TypeAliasContainerId, TypeAliasLoc,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -41,7 +41,12 @@ impl TraitData {\n                     .intern(db)\n                     .into(),\n                     ast::ImplItem::ConstDef(it) => ConstId::from_ast(ctx, &it).into(),\n-                    ast::ImplItem::TypeAliasDef(it) => TypeAliasId::from_ast(ctx, &it).into(),\n+                    ast::ImplItem::TypeAliasDef(it) => TypeAliasLoc {\n+                        container: TypeAliasContainerId::TraitId(tr),\n+                        ast_id: AstId::new(src.file_id, ast_id_map.ast_id(&it)),\n+                    }\n+                    .intern(db)\n+                    .into(),\n                 })\n                 .collect()\n         } else {\n@@ -65,6 +70,7 @@ impl TraitItemsIndex {\n                 for item in db.trait_data(tr).items.iter() {\n                     match item {\n                         AssocItemId::FunctionId(_) => (),\n+                        AssocItemId::TypeAliasId(_) => (),\n                         _ => {\n                             let prev = index.traits_by_def.insert(*item, tr);\n                             assert!(prev.is_none());"}]}