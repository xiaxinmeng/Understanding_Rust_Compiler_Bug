{"sha": "861996e13820a2e401df60756a373606b50948e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MTk5NmUxMzgyMGEyZTQwMWRmNjA3NTZhMzczNjA2YjUwOTQ4ZTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-17T04:15:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-17T04:15:18Z"}, "message": "Auto merge of #71230 - Dylan-DPC:rollup-rofigbv, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #70578 (Add long error explanation for E0657)\n - #70910 (Hides default fns inside Fuse impl to avoid exposing it to any crate)\n - #71164 (reword Miri validity errors: undefined -> uninitialized)\n - #71182 (Add some regression tests)\n - #71206 (Miri error messages: avoid try terminology)\n - #71220 (Dogfood or_patterns in the standard library)\n - #71225 (Fix typo in Default trait docs: Provides -> Provide)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7b70bbcac40629669a01366657b05d910289c77b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b70bbcac40629669a01366657b05d910289c77b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/861996e13820a2e401df60756a373606b50948e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/861996e13820a2e401df60756a373606b50948e5", "html_url": "https://github.com/rust-lang/rust/commit/861996e13820a2e401df60756a373606b50948e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/861996e13820a2e401df60756a373606b50948e5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "318726b301db2a0718d05f166d3d6c578273189c", "url": "https://api.github.com/repos/rust-lang/rust/commits/318726b301db2a0718d05f166d3d6c578273189c", "html_url": "https://github.com/rust-lang/rust/commit/318726b301db2a0718d05f166d3d6c578273189c"}, {"sha": "65243a8f7c03425c399d990d0802e4506bbcd754", "url": "https://api.github.com/repos/rust-lang/rust/commits/65243a8f7c03425c399d990d0802e4506bbcd754", "html_url": "https://github.com/rust-lang/rust/commit/65243a8f7c03425c399d990d0802e4506bbcd754"}], "stats": {"total": 610, "additions": 513, "deletions": 97}, "files": [{"sha": "38196b2d4b4c5cae4258a37961cf65f5506ce1c8", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -2058,12 +2058,7 @@ where\n         (Excluded(s), Excluded(e)) if s == e => {\n             panic!(\"range start and end are equal and excluded in BTreeMap\")\n         }\n-        (Included(s), Included(e))\n-        | (Included(s), Excluded(e))\n-        | (Excluded(s), Included(e))\n-        | (Excluded(s), Excluded(e))\n-            if s > e =>\n-        {\n+        (Included(s) | Excluded(s), Included(e) | Excluded(e)) if s > e => {\n             panic!(\"range start is greater than range end in BTreeMap\")\n         }\n         _ => {}"}, {"sha": "a2071844d5dac4b5ff44091232938a00dcd61622", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -103,6 +103,7 @@\n #![feature(new_uninit)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n+#![feature(or_patterns)]\n #![feature(pattern)]\n #![feature(ptr_internals)]\n #![feature(ptr_offset_from)]"}, {"sha": "335969b3ef04e46c125985430fdd819c9c496cef", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -858,7 +858,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn le(&self, other: &Rhs) -> bool {\n-        matches!(self.partial_cmp(other), Some(Less) | Some(Equal))\n+        matches!(self.partial_cmp(other), Some(Less | Equal))\n     }\n \n     /// This method tests greater than (for `self` and `other`) and is used by the `>` operator.\n@@ -895,7 +895,7 @@ pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn ge(&self, other: &Rhs) -> bool {\n-        matches!(self.partial_cmp(other), Some(Greater) | Some(Equal))\n+        matches!(self.partial_cmp(other), Some(Greater | Equal))\n     }\n }\n "}, {"sha": "06402a05d2687e29319a00e7c5ddb240462d6d6c", "filename": "src/libcore/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -54,7 +54,7 @@\n ///\n /// ## How can I implement `Default`?\n ///\n-/// Provides an implementation for the `default()` method that returns the value of\n+/// Provide an implementation for the `default()` method that returns the value of\n /// your type that should be the default:\n ///\n /// ```"}, {"sha": "502fc2e631502a2c5637a482c746a6ab95b58b05", "filename": "src/libcore/iter/adapters/fuse.rs", "status": "modified", "additions": 244, "deletions": 63, "changes": 307, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Ffuse.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -44,13 +44,213 @@ macro_rules! fuse {\n     };\n }\n \n+// NOTE: for `I: FusedIterator`, we assume that the iterator is always `Some`.\n+// Implementing this as a directly-expanded macro helps codegen performance.\n+macro_rules! unchecked {\n+    ($self:ident) => {\n+        match $self {\n+            Fuse { iter: Some(iter) } => iter,\n+            // SAFETY: the specialized iterator never sets `None`\n+            Fuse { iter: None } => unsafe { intrinsics::unreachable() },\n+        }\n+    };\n+}\n+\n+// Any implementation here is made internal to avoid exposing default fns outside this trait\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> Iterator for Fuse<I>\n where\n     I: Iterator,\n {\n     type Item = <I as Iterator>::Item;\n \n+    #[inline]\n+    fn next(&mut self) -> Option<Self::Item> {\n+        FuseImpl::next(self)\n+    }\n+\n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<I::Item> {\n+        FuseImpl::nth(self, n)\n+    }\n+\n+    #[inline]\n+    fn last(self) -> Option<Self::Item> {\n+        FuseImpl::last(self)\n+    }\n+\n+    #[inline]\n+    fn count(self) -> usize {\n+        FuseImpl::count(self)\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        FuseImpl::size_hint(self)\n+    }\n+\n+    #[inline]\n+    fn try_fold<Acc, Fold, R>(&mut self, acc: Acc, fold: Fold) -> R\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+    {\n+        FuseImpl::try_fold(self, acc, fold)\n+    }\n+\n+    #[inline]\n+    fn fold<Acc, Fold>(self, acc: Acc, fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        FuseImpl::fold(self, acc, fold)\n+    }\n+\n+    #[inline]\n+    fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n+    where\n+        P: FnMut(&Self::Item) -> bool,\n+    {\n+        FuseImpl::find(self, predicate)\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I> DoubleEndedIterator for Fuse<I>\n+where\n+    I: DoubleEndedIterator,\n+{\n+    #[inline]\n+    fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n+        FuseImpl::next_back(self)\n+    }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n+        FuseImpl::nth_back(self, n)\n+    }\n+\n+    #[inline]\n+    fn try_rfold<Acc, Fold, R>(&mut self, acc: Acc, fold: Fold) -> R\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+    {\n+        FuseImpl::try_rfold(self, acc, fold)\n+    }\n+\n+    #[inline]\n+    fn rfold<Acc, Fold>(self, acc: Acc, fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        FuseImpl::rfold(self, acc, fold)\n+    }\n+\n+    #[inline]\n+    fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n+    where\n+        P: FnMut(&Self::Item) -> bool,\n+    {\n+        FuseImpl::rfind(self, predicate)\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<I> ExactSizeIterator for Fuse<I>\n+where\n+    I: ExactSizeIterator,\n+{\n+    fn len(&self) -> usize {\n+        FuseImpl::len(self)\n+    }\n+\n+    fn is_empty(&self) -> bool {\n+        FuseImpl::is_empty(self)\n+    }\n+}\n+\n+unsafe impl<I> TrustedRandomAccess for Fuse<I>\n+where\n+    I: TrustedRandomAccess,\n+{\n+    unsafe fn get_unchecked(&mut self, i: usize) -> I::Item {\n+        match self.iter {\n+            Some(ref mut iter) => iter.get_unchecked(i),\n+            // SAFETY: the caller asserts there is an item at `i`, so we're not exhausted.\n+            None => intrinsics::unreachable(),\n+        }\n+    }\n+\n+    fn may_have_side_effect() -> bool {\n+        I::may_have_side_effect()\n+    }\n+}\n+\n+// Fuse specialization trait\n+#[doc(hidden)]\n+trait FuseImpl<I> {\n+    type Item;\n+\n+    // Functions specific to any normal Iterators\n+    fn next(&mut self) -> Option<Self::Item>;\n+    fn nth(&mut self, n: usize) -> Option<Self::Item>;\n+    fn last(self) -> Option<Self::Item>;\n+    fn count(self) -> usize;\n+    fn size_hint(&self) -> (usize, Option<usize>);\n+    fn try_fold<Acc, Fold, R>(&mut self, acc: Acc, fold: Fold) -> R\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>;\n+    fn fold<Acc, Fold>(self, acc: Acc, fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> Acc;\n+    fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n+    where\n+        P: FnMut(&Self::Item) -> bool;\n+\n+    // Functions specific to DoubleEndedIterators\n+    fn next_back(&mut self) -> Option<Self::Item>\n+    where\n+        I: DoubleEndedIterator;\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item>\n+    where\n+        I: DoubleEndedIterator;\n+    fn try_rfold<Acc, Fold, R>(&mut self, acc: Acc, fold: Fold) -> R\n+    where\n+        Self: Sized,\n+        Fold: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Ok = Acc>,\n+        I: DoubleEndedIterator;\n+    fn rfold<Acc, Fold>(self, acc: Acc, fold: Fold) -> Acc\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> Acc,\n+        I: DoubleEndedIterator;\n+    fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n+    where\n+        P: FnMut(&Self::Item) -> bool,\n+        I: DoubleEndedIterator;\n+\n+    // Functions specific to ExactSizeIterator\n+    fn len(&self) -> usize\n+    where\n+        I: ExactSizeIterator;\n+    fn is_empty(&self) -> bool\n+    where\n+        I: ExactSizeIterator;\n+}\n+\n+// General Fuse impl\n+#[doc(hidden)]\n+impl<I> FuseImpl<I> for Fuse<I>\n+where\n+    I: Iterator,\n+{\n+    type Item = <I as Iterator>::Item;\n+\n     #[inline]\n     default fn next(&mut self) -> Option<<I as Iterator>::Item> {\n         fuse!(self.iter.next())\n@@ -117,20 +317,20 @@ where\n     {\n         fuse!(self.iter.find(predicate))\n     }\n-}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> DoubleEndedIterator for Fuse<I>\n-where\n-    I: DoubleEndedIterator,\n-{\n     #[inline]\n-    default fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n+    default fn next_back(&mut self) -> Option<<I as Iterator>::Item>\n+    where\n+        I: DoubleEndedIterator,\n+    {\n         fuse!(self.iter.next_back())\n     }\n \n     #[inline]\n-    default fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n+    default fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item>\n+    where\n+        I: DoubleEndedIterator,\n+    {\n         fuse!(self.iter.nth_back(n))\n     }\n \n@@ -140,6 +340,7 @@ where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Ok = Acc>,\n+        I: DoubleEndedIterator,\n     {\n         if let Some(ref mut iter) = self.iter {\n             acc = iter.try_rfold(acc, fold)?;\n@@ -152,6 +353,7 @@ where\n     default fn rfold<Acc, Fold>(self, mut acc: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n+        I: DoubleEndedIterator,\n     {\n         if let Some(iter) = self.iter {\n             acc = iter.rfold(acc, fold);\n@@ -163,45 +365,36 @@ where\n     default fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         P: FnMut(&Self::Item) -> bool,\n+        I: DoubleEndedIterator,\n     {\n         fuse!(self.iter.rfind(predicate))\n     }\n-}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> ExactSizeIterator for Fuse<I>\n-where\n-    I: ExactSizeIterator,\n-{\n-    default fn len(&self) -> usize {\n+    #[inline]\n+    default fn len(&self) -> usize\n+    where\n+        I: ExactSizeIterator,\n+    {\n         match self.iter {\n             Some(ref iter) => iter.len(),\n             None => 0,\n         }\n     }\n \n-    default fn is_empty(&self) -> bool {\n+    #[inline]\n+    default fn is_empty(&self) -> bool\n+    where\n+        I: ExactSizeIterator,\n+    {\n         match self.iter {\n             Some(ref iter) => iter.is_empty(),\n             None => true,\n         }\n     }\n }\n \n-// NOTE: for `I: FusedIterator`, we assume that the iterator is always `Some`.\n-// Implementing this as a directly-expanded macro helps codegen performance.\n-macro_rules! unchecked {\n-    ($self:ident) => {\n-        match $self {\n-            Fuse { iter: Some(iter) } => iter,\n-            // SAFETY: the specialized iterator never sets `None`\n-            Fuse { iter: None } => unsafe { intrinsics::unreachable() },\n-        }\n-    };\n-}\n-\n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<I> Iterator for Fuse<I>\n+#[doc(hidden)]\n+impl<I> FuseImpl<I> for Fuse<I>\n where\n     I: FusedIterator,\n {\n@@ -255,20 +448,20 @@ where\n     {\n         unchecked!(self).find(predicate)\n     }\n-}\n \n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<I> DoubleEndedIterator for Fuse<I>\n-where\n-    I: DoubleEndedIterator + FusedIterator,\n-{\n     #[inline]\n-    fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n+    fn next_back(&mut self) -> Option<<I as Iterator>::Item>\n+    where\n+        I: DoubleEndedIterator,\n+    {\n         unchecked!(self).next_back()\n     }\n \n     #[inline]\n-    fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> {\n+    fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item>\n+    where\n+        I: DoubleEndedIterator,\n+    {\n         unchecked!(self).nth_back(n)\n     }\n \n@@ -278,6 +471,7 @@ where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Ok = Acc>,\n+        I: DoubleEndedIterator,\n     {\n         unchecked!(self).try_rfold(init, fold)\n     }\n@@ -286,6 +480,7 @@ where\n     fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc\n     where\n         Fold: FnMut(Acc, Self::Item) -> Acc,\n+        I: DoubleEndedIterator,\n     {\n         unchecked!(self).rfold(init, fold)\n     }\n@@ -294,38 +489,24 @@ where\n     fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n     where\n         P: FnMut(&Self::Item) -> bool,\n+        I: DoubleEndedIterator,\n     {\n         unchecked!(self).rfind(predicate)\n     }\n-}\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I> ExactSizeIterator for Fuse<I>\n-where\n-    I: ExactSizeIterator + FusedIterator,\n-{\n-    fn len(&self) -> usize {\n+    #[inline]\n+    fn len(&self) -> usize\n+    where\n+        I: ExactSizeIterator,\n+    {\n         unchecked!(self).len()\n     }\n \n-    fn is_empty(&self) -> bool {\n+    #[inline]\n+    fn is_empty(&self) -> bool\n+    where\n+        I: ExactSizeIterator,\n+    {\n         unchecked!(self).is_empty()\n     }\n }\n-\n-unsafe impl<I> TrustedRandomAccess for Fuse<I>\n-where\n-    I: TrustedRandomAccess,\n-{\n-    unsafe fn get_unchecked(&mut self, i: usize) -> I::Item {\n-        match self.iter {\n-            Some(ref mut iter) => iter.get_unchecked(i),\n-            // SAFETY: the caller asserts there is an item at `i`, so we're not exhausted.\n-            None => intrinsics::unreachable(),\n-        }\n-    }\n-\n-    fn may_have_side_effect() -> bool {\n-        I::may_have_side_effect()\n-    }\n-}"}, {"sha": "34ca79154b68f7caae9d57166df2957316638f14", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -3109,7 +3109,7 @@ pub trait Iterator {\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n     {\n-        matches!(self.partial_cmp(other), Some(Ordering::Less) | Some(Ordering::Equal))\n+        matches!(self.partial_cmp(other), Some(Ordering::Less | Ordering::Equal))\n     }\n \n     /// Determines if the elements of this `Iterator` are lexicographically\n@@ -3149,7 +3149,7 @@ pub trait Iterator {\n         Self::Item: PartialOrd<I::Item>,\n         Self: Sized,\n     {\n-        matches!(self.partial_cmp(other), Some(Ordering::Greater) | Some(Ordering::Equal))\n+        matches!(self.partial_cmp(other), Some(Ordering::Greater | Ordering::Equal))\n     }\n \n     /// Checks if the elements of this iterator are sorted."}, {"sha": "1c7bce3fac583d0e4ad948921504cac61faa7077", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -105,6 +105,7 @@\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]\n #![feature(optin_builtin_traits)]\n+#![feature(or_patterns)]\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]"}, {"sha": "2766843155a0e7fb2c52622f81017ff29362ad4a", "filename": "src/libcore/num/dec2flt/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fparse.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -54,7 +54,7 @@ pub fn parse_decimal(s: &str) -> ParseResult<'_> {\n \n     match s.first() {\n         None => Valid(Decimal::new(integral, b\"\", 0)),\n-        Some(&b'e') | Some(&b'E') => {\n+        Some(&b'e' | &b'E') => {\n             if integral.is_empty() {\n                 return Invalid; // No digits before 'e'\n             }\n@@ -70,7 +70,7 @@ pub fn parse_decimal(s: &str) -> ParseResult<'_> {\n \n             match s.first() {\n                 None => Valid(Decimal::new(integral, fractional, 0)),\n-                Some(&b'e') | Some(&b'E') => parse_exp(integral, fractional, &s[1..]),\n+                Some(&b'e' | &b'E') => parse_exp(integral, fractional, &s[1..]),\n                 _ => Invalid, // Trailing junk after fractional part\n             }\n         }"}, {"sha": "9adea94e87d1071646c9e4325c1c5c8db5e48fcd", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -422,14 +422,14 @@ fn determine_sign(sign: Sign, decoded: &FullDecoded, negative: bool) -> &'static\n                 \"+\"\n             }\n         }\n-        (_, Sign::Minus) | (_, Sign::MinusRaw) => {\n+        (_, Sign::Minus | Sign::MinusRaw) => {\n             if negative {\n                 \"-\"\n             } else {\n                 \"\"\n             }\n         }\n-        (_, Sign::MinusPlus) | (_, Sign::MinusPlusRaw) => {\n+        (_, Sign::MinusPlus | Sign::MinusPlusRaw) => {\n             if negative {\n                 \"-\"\n             } else {"}, {"sha": "225ede851b4d93a4eb960cda277a5fe6dc3586f9", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -366,6 +366,7 @@ E0644: include_str!(\"./error_codes/E0644.md\"),\n E0646: include_str!(\"./error_codes/E0646.md\"),\n E0647: include_str!(\"./error_codes/E0647.md\"),\n E0648: include_str!(\"./error_codes/E0648.md\"),\n+E0657: include_str!(\"./error_codes/E0657.md\"),\n E0658: include_str!(\"./error_codes/E0658.md\"),\n E0659: include_str!(\"./error_codes/E0659.md\"),\n E0660: include_str!(\"./error_codes/E0660.md\"),\n@@ -597,7 +598,6 @@ E0751: include_str!(\"./error_codes/E0751.md\"),\n            // used in argument position\n     E0640, // infer outlives requirements\n //  E0645, // trait aliases not finished\n-    E0657, // `impl Trait` can only capture lifetimes bound at the fn level\n     E0667, // `impl Trait` in projections\n     E0687, // in-band lifetimes cannot be used in `fn`/`Fn` syntax\n     E0688, // in-band lifetimes cannot be mixed with explicit lifetime binders"}, {"sha": "7fe48c51147904dae4b9e7d1df4b17e82dfa3852", "filename": "src/librustc_error_codes/error_codes/E0657.md", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibrustc_error_codes%2Ferror_codes%2FE0657.md", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibrustc_error_codes%2Ferror_codes%2FE0657.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0657.md?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -0,0 +1,57 @@\n+A lifetime bound on a trait implementation was captured at an incorrect place.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0657\n+trait Id<T> {}\n+trait Lt<'a> {}\n+\n+impl<'a> Lt<'a> for () {}\n+impl<T> Id<T> for T {}\n+\n+fn free_fn_capture_hrtb_in_impl_trait()\n+    -> Box<for<'a> Id<impl Lt<'a>>> // error!\n+{\n+    Box::new(())\n+}\n+\n+struct Foo;\n+impl Foo {\n+    fn impl_fn_capture_hrtb_in_impl_trait()\n+        -> Box<for<'a> Id<impl Lt<'a>>> // error!\n+    {\n+        Box::new(())\n+    }\n+}\n+```\n+\n+Here, you have used the inappropriate lifetime in the `impl Trait`,\n+The `impl Trait` can only capture lifetimes bound at the fn or impl\n+level.\n+\n+To fix this we have to define the lifetime at the function or impl\n+level and use that lifetime in the `impl Trait`. For example you can\n+define the lifetime at the function:\n+\n+```\n+trait Id<T> {}\n+trait Lt<'a> {}\n+\n+impl<'a> Lt<'a> for () {}\n+impl<T> Id<T> for T {}\n+\n+fn free_fn_capture_hrtb_in_impl_trait<'b>()\n+    -> Box<for<'a> Id<impl Lt<'b>>> // ok!\n+{\n+    Box::new(())\n+}\n+\n+struct Foo;\n+impl Foo {\n+    fn impl_fn_capture_hrtb_in_impl_trait<'b>()\n+        -> Box<for<'a> Id<impl Lt<'b>>> // ok!\n+    {\n+        Box::new(())\n+    }\n+}\n+```"}, {"sha": "f058d17a9bf284472a495b97a0e58c7a7034422e", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -305,7 +305,7 @@ impl fmt::Debug for InvalidProgramInfo<'_> {\n             Layout(ref err) => write!(f, \"{}\", err),\n             TransmuteSizeDiff(from_ty, to_ty) => write!(\n                 f,\n-                \"tried to transmute from {:?} to {:?}, but their sizes differed\",\n+                \"transmuting `{}` to `{}` is not possible, because these types do not have the same size\",\n                 from_ty, to_ty\n             ),\n         }\n@@ -431,7 +431,7 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n                 \"using uninitialized data, but this operation requires initialized memory\"\n             ),\n             DeadLocal => write!(f, \"accessing a dead local variable\"),\n-            ReadFromReturnPlace => write!(f, \"tried to read from the return place\"),\n+            ReadFromReturnPlace => write!(f, \"reading from return place\"),\n         }\n     }\n }\n@@ -462,9 +462,9 @@ impl fmt::Debug for UnsupportedOpInfo {\n         match self {\n             Unsupported(ref msg) => write!(f, \"{}\", msg),\n             ReadForeignStatic(did) => {\n-                write!(f, \"tried to read from foreign (extern) static {:?}\", did)\n+                write!(f, \"cannot read from foreign (extern) static {:?}\", did)\n             }\n-            NoMirFor(did) => write!(f, \"could not load MIR for {:?}\", did),\n+            NoMirFor(did) => write!(f, \"no MIR body is available for {:?}\", did),\n             ReadPointerAsBytes => write!(f, \"unable to turn pointer into raw bytes\",),\n             ReadBytesAsPointer => write!(f, \"unable to turn bytes into a pointer\"),\n         }"}, {"sha": "83b8d58e0befc80c013f116210607a4c8ea3124e", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -322,7 +322,11 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n         let value = self.ecx.read_immediate(value)?;\n         // Handle wide pointers.\n         // Check metadata early, for better diagnostics\n-        let place = try_validation!(self.ecx.ref_to_mplace(value), \"undefined pointer\", self.path);\n+        let place = try_validation!(\n+            self.ecx.ref_to_mplace(value),\n+            format_args!(\"uninitialized {}\", kind),\n+            self.path\n+        );\n         if place.layout.is_unsized() {\n             self.check_wide_ptr_meta(place.meta, place.layout)?;\n         }\n@@ -334,7 +338,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                     format_args!(\"invalid {} metadata: {}\", kind, msg),\n                     self.path\n                 ),\n-                _ => bug!(\"Unexpected error during ptr size_and_align_of: {}\", err),\n+                _ => bug!(\"unexpected error during ptr size_and_align_of: {}\", err),\n             },\n         };\n         let (size, align) = size_and_align\n@@ -477,10 +481,11 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n             }\n             ty::RawPtr(..) => {\n                 // We are conservative with undef for integers, but try to\n-                // actually enforce our current rules for raw pointers.\n+                // actually enforce the strict rules for raw pointers (mostly because\n+                // that lets us re-use `ref_to_mplace`).\n                 let place = try_validation!(\n                     self.ecx.ref_to_mplace(self.ecx.read_immediate(value)?),\n-                    \"undefined pointer\",\n+                    \"uninitialized raw pointer\",\n                     self.path\n                 );\n                 if place.layout.is_unsized() {\n@@ -776,14 +781,14 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                         // For some errors we might be able to provide extra information\n                         match err.kind {\n                             err_ub!(InvalidUndefBytes(Some(ptr))) => {\n-                                // Some byte was undefined, determine which\n+                                // Some byte was uninitialized, determine which\n                                 // element that byte belongs to so we can\n                                 // provide an index.\n                                 let i = usize::try_from(ptr.offset.bytes() / layout.size.bytes())\n                                     .unwrap();\n                                 self.path.push(PathElem::ArrayElem(i));\n \n-                                throw_validation_failure!(\"undefined bytes\", self.path)\n+                                throw_validation_failure!(\"uninitialized bytes\", self.path)\n                             }\n                             // Other errors shouldn't be possible\n                             _ => return Err(err),"}, {"sha": "59d845c619b84a2fee42ee49d1b52aaecf777ea9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -285,6 +285,7 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n+#![feature(or_patterns)]\n #![feature(panic_info_message)]\n #![feature(panic_internals)]\n #![feature(panic_unwind)]"}, {"sha": "75f5621fa127e210783ae1a154cb749291dafdfd", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -260,7 +260,7 @@ impl<T> Packet<T> {\n         let state = match self.state.load(Ordering::SeqCst) {\n             // Each of these states means that no further activity will happen\n             // with regard to abortion selection\n-            s @ EMPTY | s @ DATA | s @ DISCONNECTED => s,\n+            s @ (EMPTY | DATA | DISCONNECTED) => s,\n \n             // If we've got a blocked thread, then use an atomic to gain ownership\n             // of it (may fail)"}, {"sha": "26b4faebd861420957431d3c117ee90eedd53336", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -205,7 +205,7 @@ impl<T> Packet<T> {\n             // Messages which actually popped from the queue shouldn't count as\n             // a steal, so offset the decrement here (we already have our\n             // \"steal\" factored into the channel count above).\n-            data @ Ok(..) | data @ Err(Upgraded(..)) => unsafe {\n+            data @ (Ok(..) | Err(Upgraded(..))) => unsafe {\n                 *self.queue.consumer_addition().steals.get() -= 1;\n                 data\n             },"}, {"sha": "f2e097222bd7d5d203386628a8e92ae114b5188c", "filename": "src/test/ui/asm/issue-54067.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fasm%2Fissue-54067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fasm%2Fissue-54067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fissue-54067.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// ignore-emscripten no llvm_asm! support\n+\n+#![feature(llvm_asm)]\n+\n+pub fn boot(addr: Option<u32>) {\n+    unsafe {\n+        llvm_asm!(\"mov sp, $0\"::\"r\" (addr));\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "387966a5064fa58d329a8653f780fb0f5c450e86", "filename": "src/test/ui/async-await/issues/auxiliary/issue_67893.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fauxiliary%2Fissue_67893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fauxiliary%2Fissue_67893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fauxiliary%2Fissue_67893.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -0,0 +1,10 @@\n+// edition:2018\n+\n+use std::sync::{Arc, Mutex};\n+\n+pub async fn f(_: ()) {}\n+\n+pub async fn run() {\n+    let x: Arc<Mutex<()>> = unimplemented!();\n+    f(*x.lock().unwrap()).await;\n+}"}, {"sha": "d52303ac1cec65fbaef99bd2bc9d2bbdaed2ae40", "filename": "src/test/ui/async-await/issues/issue-67893.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -0,0 +1,13 @@\n+// aux-build: issue_67893.rs\n+// edition:2018\n+// dont-check-compiler-stderr\n+// FIXME(#71222): Add above flag because of the difference of stderrs on some env.\n+\n+extern crate issue_67893;\n+\n+fn g(_: impl Send) {}\n+\n+fn main() {\n+    g(issue_67893::run())\n+    //~^ ERROR: `std::sync::MutexGuard<'_, ()>` cannot be sent between threads safely\n+}"}, {"sha": "8907b0c160f88ef91ac90654e2ec694083a94290", "filename": "src/test/ui/consts/const-eval/ub-int-array.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -0,0 +1,65 @@\n+#![feature(const_transmute)]\n+#![allow(const_err)] // make sure we cannot allow away the errors tested here\n+\n+//! Test the \"array of int\" fast path in validity checking, and in particular whether it\n+//! points at the right array element.\n+\n+use std::mem;\n+\n+#[repr(C)]\n+union MaybeUninit<T: Copy> {\n+    uninit: (),\n+    init: T,\n+}\n+\n+const UNINIT_INT_0: [u32; 3] = unsafe {\n+//~^ ERROR it is undefined behavior to use this value\n+//~| type validation failed: encountered uninitialized bytes at [0]\n+    [\n+        MaybeUninit { uninit: () }.init,\n+        1,\n+        2,\n+    ]\n+};\n+const UNINIT_INT_1: [u32; 3] = unsafe {\n+//~^ ERROR it is undefined behavior to use this value\n+//~| type validation failed: encountered uninitialized bytes at [1]\n+    mem::transmute(\n+        [\n+            0u8,\n+            0u8,\n+            0u8,\n+            0u8,\n+            1u8,\n+            MaybeUninit { uninit: () }.init,\n+            1u8,\n+            1u8,\n+            2u8,\n+            2u8,\n+            MaybeUninit { uninit: () }.init,\n+            2u8,\n+        ]\n+    )\n+};\n+const UNINIT_INT_2: [u32; 3] = unsafe {\n+//~^ ERROR it is undefined behavior to use this value\n+//~| type validation failed: encountered uninitialized bytes at [2]\n+    mem::transmute(\n+        [\n+            0u8,\n+            0u8,\n+            0u8,\n+            0u8,\n+            1u8,\n+            1u8,\n+            1u8,\n+            1u8,\n+            2u8,\n+            2u8,\n+            2u8,\n+            MaybeUninit { uninit: () }.init,\n+        ]\n+    )\n+};\n+\n+fn main() {}"}, {"sha": "b4a3c63b5a103f71f74a04249a2da36b0f548a06", "filename": "src/test/ui/consts/const-eval/ub-int-array.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-int-array.stderr?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -0,0 +1,45 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-int-array.rs:15:1\n+   |\n+LL | / const UNINIT_INT_0: [u32; 3] = unsafe {\n+LL | |\n+LL | |\n+LL | |     [\n+...  |\n+LL | |     ]\n+LL | | };\n+   | |__^ type validation failed: encountered uninitialized bytes at [0]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-int-array.rs:24:1\n+   |\n+LL | / const UNINIT_INT_1: [u32; 3] = unsafe {\n+LL | |\n+LL | |\n+LL | |     mem::transmute(\n+...  |\n+LL | |     )\n+LL | | };\n+   | |__^ type validation failed: encountered uninitialized bytes at [1]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-int-array.rs:44:1\n+   |\n+LL | / const UNINIT_INT_2: [u32; 3] = unsafe {\n+LL | |\n+LL | |\n+LL | |     mem::transmute(\n+...  |\n+LL | |     )\n+LL | | };\n+   | |__^ type validation failed: encountered uninitialized bytes at [2]\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "10f4c8c03330ebdaa9498752c70161c9499b5c83", "filename": "src/test/ui/consts/const-eval/ub-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -6,11 +6,11 @@ use std::mem;\n \n const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n //~^ ERROR it is undefined behavior to use this value\n-//~^^ type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n+//~| type validation failed: encountered an unaligned reference (required 2 byte alignment but found 1)\n \n const UNALIGNED_BOX: Box<u16> = unsafe { mem::transmute(&[0u8; 4]) };\n //~^ ERROR it is undefined behavior to use this value\n-//~^^ type validation failed: encountered an unaligned box (required 2 byte alignment but found 1)\n+//~| type validation failed: encountered an unaligned box (required 2 byte alignment but found 1)\n \n const NULL: &u16 = unsafe { mem::transmute(0usize) };\n //~^ ERROR it is undefined behavior to use this value"}, {"sha": "f12753e5dcacc38b80a4e9db6480a995bf94f5dd", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -62,7 +62,7 @@ LL | |\n LL | |     let uninit_len = MaybeUninit::<usize> { uninit: () };\n LL | |     mem::transmute((42, uninit_len))\n LL | | };\n-   | |__^ type validation failed: encountered undefined pointer\n+   | |__^ type validation failed: encountered uninitialized reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -130,7 +130,7 @@ LL | |\n LL | |     let uninit_len = MaybeUninit::<usize> { uninit: () };\n LL | |     mem::transmute((42, uninit_len))\n LL | | };\n-   | |__^ type validation failed: encountered undefined pointer\n+   | |__^ type validation failed: encountered uninitialized raw pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "2545167aa02f7a7f413c09fd39b93af4b5c997c6", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -27,7 +27,7 @@ LL | |         unsafe { UNION.field3 },\n ...  |\n LL | |     a: 42,\n LL | | };\n-   | |__^ type validation failed: encountered undefined bytes at .b[1]\n+   | |__^ type validation failed: encountered uninitialized bytes at .b[1]\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "b4970c82adb3e2ff86df94281b8ceb9ee11716e8", "filename": "src/test/ui/consts/transmute-size-mismatch-before-typeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftransmute-size-mismatch-before-typeck.stderr?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const ZST: &[u8] = unsafe { std::mem::transmute(1usize) };\n    | ----------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n    |                             |\n-   |                             tried to transmute from usize to &[u8], but their sizes differed\n+   |                             transmuting `usize` to `&[u8]` is not possible, because these types do not have the same size\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "df76b45a5891f9e5a18b702205c503fb789c672f", "filename": "src/test/ui/error-codes/E0657.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -12,3 +12,4 @@ LL |         -> Box<for<'a> Id<impl Lt<'a>>>\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0657`."}, {"sha": "141136d25b215032aab173247f4a50aee10af02c", "filename": "src/test/ui/intrinsics/issue-28575.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -0,0 +1,9 @@\n+#![feature(intrinsics)]\n+\n+extern \"C\" {\n+    pub static FOO: extern \"rust-intrinsic\" fn();\n+}\n+\n+fn main() {\n+    FOO() //~ ERROR: use of extern static is unsafe\n+}"}, {"sha": "66369decf42246583fdbaea38c32f0d5ff13cc21", "filename": "src/test/ui/intrinsics/issue-28575.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fissue-28575.stderr?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: use of extern static is unsafe and requires unsafe function or block\n+  --> $DIR/issue-28575.rs:8:5\n+   |\n+LL |     FOO()\n+   |     ^^^ use of extern static\n+   |\n+   = note: extern statics are not controlled by the Rust type system: invalid data, aliasing violations or data races will cause undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "6ca04f8606038db04e45e674366b688de6bbc481", "filename": "src/test/ui/static/auxiliary/issue_24843.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fstatic%2Fauxiliary%2Fissue_24843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fstatic%2Fauxiliary%2Fissue_24843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fauxiliary%2Fissue_24843.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -0,0 +1 @@\n+pub static TEST_STR: &'static str = \"Hello world\";"}, {"sha": "0b3397e210d70c99033d46dcc84ac7771f3bc03f", "filename": "src/test/ui/static/issue-24843.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fstatic%2Fissue-24843.rs", "raw_url": "https://github.com/rust-lang/rust/raw/861996e13820a2e401df60756a373606b50948e5/src%2Ftest%2Fui%2Fstatic%2Fissue-24843.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fissue-24843.rs?ref=861996e13820a2e401df60756a373606b50948e5", "patch": "@@ -0,0 +1,8 @@\n+// aux-build: issue_24843.rs\n+// check-pass\n+\n+extern crate issue_24843;\n+\n+static _TEST_STR_2: &'static str = &issue_24843::TEST_STR;\n+\n+fn main() {}"}]}