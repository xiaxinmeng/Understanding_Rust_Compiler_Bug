{"sha": "2d4b4b856a691578e6962406d6ca34b3b7582edf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNGI0Yjg1NmE2OTE1NzhlNjk2MjQwNmQ2Y2EzNGIzYjc1ODJlZGY=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-07-02T20:40:20Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-07-02T20:44:55Z"}, "message": "Format expressions with binary and unary operators", "tree": {"sha": "a90069e620eb692637ab482708571004d7c26275", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a90069e620eb692637ab482708571004d7c26275"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d4b4b856a691578e6962406d6ca34b3b7582edf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4b4b856a691578e6962406d6ca34b3b7582edf", "html_url": "https://github.com/rust-lang/rust/commit/2d4b4b856a691578e6962406d6ca34b3b7582edf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d4b4b856a691578e6962406d6ca34b3b7582edf/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f16cf1272a80eb28808a1434385755aecfb818f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f16cf1272a80eb28808a1434385755aecfb818f5", "html_url": "https://github.com/rust-lang/rust/commit/f16cf1272a80eb28808a1434385755aecfb818f5"}], "stats": {"total": 130, "additions": 104, "deletions": 26}, "files": [{"sha": "2f97fa7e97a416bd6655202f162b38a088fe356e", "filename": "src/expr.rs", "status": "modified", "additions": 76, "deletions": 19, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b4b856a691578e6962406d6ca34b3b7582edf/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b4b856a691578e6962406d6ca34b3b7582edf/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2d4b4b856a691578e6962406d6ca34b3b7582edf", "patch": "@@ -11,7 +11,7 @@\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic};\n use string::{StringFormat, rewrite_string};\n-use utils::span_after;\n+use utils::{span_after, make_indent};\n \n use syntax::{ast, ptr};\n use syntax::codemap::{Pos, Span, BytePos};\n@@ -24,35 +24,37 @@ impl Rewrite for ast::Expr {\n             ast::Expr_::ExprLit(ref l) => {\n                 match l.node {\n                     ast::Lit_::LitStr(ref is, _) => {\n-                        let result = rewrite_string_lit(context, &is, l.span, width, offset);\n-                        debug!(\"string lit: `{:?}`\", result);\n-                        return result;\n+                        rewrite_string_lit(context, &is, l.span, width, offset)\n                     }\n-                    _ => {}\n+                    _ => context.codemap.span_to_snippet(self.span).ok()\n                 }\n             }\n             ast::Expr_::ExprCall(ref callee, ref args) => {\n-                return rewrite_call(context, callee, args, self.span, width, offset);\n+                rewrite_call(context, callee, args, self.span, width, offset)\n             }\n             ast::Expr_::ExprParen(ref subexpr) => {\n-                return rewrite_paren(context, subexpr, width, offset);\n+                rewrite_paren(context, subexpr, width, offset)\n+            }\n+            ast::Expr_::ExprBinary(ref op, ref lhs, ref rhs) => {\n+                rewrite_binary_op(context, op, lhs, rhs, width, offset)\n+            }\n+            ast::Expr_::ExprUnary(ref op, ref subexpr) => {\n+                rewrite_unary_op(context, op, subexpr, width, offset)\n             }\n             ast::Expr_::ExprStruct(ref path, ref fields, ref base) => {\n-                return rewrite_struct_lit(context,\n-                                          path,\n-                                          fields,\n-                                          base.as_ref().map(|e| &**e),\n-                                          self.span,\n-                                          width,\n-                                          offset);\n+                rewrite_struct_lit(context,\n+                                   path,\n+                                   fields,\n+                                   base.as_ref().map(|e| &**e),\n+                                   self.span,\n+                                   width,\n+                                   offset)\n             }\n             ast::Expr_::ExprTup(ref items) => {\n-                return rewrite_tuple_lit(context, items, self.span, width, offset);\n+                rewrite_tuple_lit(context, items, self.span, width, offset)\n             }\n-            _ => {}\n+            _ => context.codemap.span_to_snippet(self.span).ok()\n         }\n-\n-        context.codemap.span_to_snippet(self.span).ok()\n     }\n }\n \n@@ -235,7 +237,7 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n                      span: Span,\n                      width: usize,\n                      offset: usize)\n-    -> Option<String> {\n+                     -> Option<String> {\n     let indent = offset + 1;\n \n     let items = itemize_list(context.codemap,\n@@ -272,3 +274,58 @@ fn rewrite_tuple_lit(context: &RewriteContext,\n \n     Some(format!(\"({})\", write_list(&items, &fmt)))\n }\n+\n+fn rewrite_binary_op(context: &RewriteContext,\n+                     op: &ast::BinOp,\n+                     lhs: &ast::Expr,\n+                     rhs: &ast::Expr,\n+                     width: usize,\n+                     offset: usize)\n+                     -> Option<String> {\n+    // FIXME: format comments between operands and operator\n+\n+    let operator_str = context.codemap.span_to_snippet(op.span).unwrap();\n+\n+    // 1 = space between lhs expr and operator\n+    let mut result = try_opt!(lhs.rewrite(context, width - 1 - operator_str.len(), offset));\n+\n+    result.push(' ');\n+    result.push_str(&operator_str);\n+\n+    let remaining_width = match result.rfind('\\n') {\n+        Some(idx) => (context.config.max_width + idx).checked_sub(result.len()).unwrap_or(0),\n+        None => width.checked_sub(result.len()).unwrap_or(0)\n+    };\n+\n+    // Get \"full width\" rhs and see if it fits on the current line. This\n+    // usually works fairly well since it tends to place operands of\n+    // operations with high precendence close together.\n+    let rhs_result = try_opt!(rhs.rewrite(context, width, offset));\n+\n+    if rhs_result.len() > remaining_width {\n+        result.push('\\n');\n+        result.push_str(&make_indent(offset));\n+    } else {\n+        result.push(' ');\n+    };\n+\n+    result.push_str(&rhs_result);\n+    Some(result)\n+}\n+\n+fn rewrite_unary_op(context: &RewriteContext,\n+                    op: &ast::UnOp,\n+                    expr: &ast::Expr,\n+                    width: usize,\n+                    offset: usize)\n+                    -> Option<String> {\n+    // For some reason, an UnOp is not spanned like BinOp!\n+    let operator_str = match *op {\n+        ast::UnOp::UnUniq => \"&\",\n+        ast::UnOp::UnDeref => \"*\",\n+        ast::UnOp::UnNot => \"!\",\n+        ast::UnOp::UnNeg => \"-\"\n+    };\n+\n+    Some(format!(\"{}{}\", operator_str, try_opt!(expr.rewrite(context, width - 1, offset))))\n+}"}, {"sha": "d7013a312f1b35f6593263c6bcef64243fec886c", "filename": "tests/source/expr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b4b856a691578e6962406d6ca34b3b7582edf/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b4b856a691578e6962406d6ca34b3b7582edf/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=2d4b4b856a691578e6962406d6ca34b3b7582edf", "patch": "@@ -0,0 +1,14 @@\n+// Test expressions\n+\n+fn foo() -> bool {\n+    let very_long_variable_name = ( a +  first +   simple + test   );\n+    let very_long_variable_name = (a + first + simple + test + AAAAAAAAAAAAA + BBBBBBBBBBBBBBBBB + b + c);\n+\n+    let some_val = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa * bbbb / (bbbbbb -\n+        function_call(x, *very_long_pointer, y))\n+    + 1000;\n+\n+some_ridiculously_loooooooooooooooooooooong_function(10000 * 30000000000 + 40000 / 1002200000000\n+                                                     - 50000 * sqrt(-1),\n+                                                     trivial_value)\n+}"}, {"sha": "c565c94b2ac9764913af60c7be307141541d3e50", "filename": "tests/target/expr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d4b4b856a691578e6962406d6ca34b3b7582edf/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d4b4b856a691578e6962406d6ca34b3b7582edf/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=2d4b4b856a691578e6962406d6ca34b3b7582edf", "patch": "@@ -0,0 +1,14 @@\n+// Test expressions\n+\n+fn foo() -> bool {\n+    let very_long_variable_name = (a + first + simple + test);\n+    let very_long_variable_name = (a + first + simple + test + AAAAAAAAAAAAA + BBBBBBBBBBBBBBBBB +\n+                                   b + c);\n+\n+    let some_val = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa * bbbb /\n+                   (bbbbbb - function_call(x, *very_long_pointer, y)) + 1000;\n+\n+    some_ridiculously_loooooooooooooooooooooong_function(10000 * 30000000000 +\n+                                                         40000 / 1002200000000 - 50000 * sqrt(-1),\n+                                                         trivial_value)\n+}"}, {"sha": "9816988357582a4d9d407f892a7f74bff97baaad", "filename": "tests/target/paren.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f16cf1272a80eb28808a1434385755aecfb818f5/tests%2Ftarget%2Fparen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f16cf1272a80eb28808a1434385755aecfb818f5/tests%2Ftarget%2Fparen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fparen.rs?ref=f16cf1272a80eb28808a1434385755aecfb818f5", "patch": "@@ -1,7 +0,0 @@\n-// Test parenthesis\n-\n-fn foo() {\n-    let very_long_variable_name = (a + first + simple + test);\n-    let very_long_variable_name = (a + first + simple + test + AAAAAAAAAAAAA + BBBBBBBBBBBBBBBBBB +\n-                                   b + c);\n-}"}]}