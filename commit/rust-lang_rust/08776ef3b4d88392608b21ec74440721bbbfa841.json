{"sha": "08776ef3b4d88392608b21ec74440721bbbfa841", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4Nzc2ZWYzYjRkODgzOTI2MDhiMjFlYzc0NDQwNzIxYmJiZmE4NDE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2020-06-08T01:31:25Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2020-06-08T01:42:43Z"}, "message": "Support module-level rustfmt::skip in sub-modules", "tree": {"sha": "d35ef74b625a315acf7e0865a07f07ec4423ca8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d35ef74b625a315acf7e0865a07f07ec4423ca8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08776ef3b4d88392608b21ec74440721bbbfa841", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEvad8glYxF0mBkb3vPBMiIxeGBCYFAl7dl5MACgkQPBMiIxeG\nBCZJVBAAvduLRnZz/4yYLzjyQ6M7x16gMxPd3G7kCjTQvJPXe2eabUi/RMMtmIUA\nQFPY9JXdA1FkI1ek8L6CX/uUHa8dPZSYURDRG0ggeCFiQdzXZegKoi1XW+c+bud2\n3IdUFyxyO2ssiMS8HlEHvMyOBm4etZov7gpuX8dKoD9ls2sTgpkagBd0+9IhIMI9\n+ns77vOtrxsu6Huzusawkt/CBgfJq+fylNNWh5jez7iDU660pnoQ1D5XWgjLqLDr\nw17lYG/Z0MNQYojat84eQp5iJH6K+jMChNshU+IxvOF/8IgCDQalFcdOcOpvcRMQ\n5AjHMmI6vOF1zVlYLbiUjF4rN2azVbmkdHh2riinhuxBlrd3ZN/Kmf3sRu0zZSpc\n5D3ltzjH4SuzSa1h8PaxAXO82U7BTfAXkqYQ/x5qip7mQ7aiPcc1hzTf9iqyS1yE\nOqy0dnHDvMrmyr4hFvyF9SionR3aEDEByGTOg+SmsGKVKorCMZ6kmUJjGuTTEbDJ\nNvHEB8je478/9af5zkLsM6FLyzGlQks96bwTBBDQEUbsiR+JUOI20ldCy4wkIM9G\nUd1vuOM41/DHhu9cY3jWRTd96Ifc8maIm70lBg3I/D0NvGcUrF3ZlsI0xqj9vegx\no7kekj8k/dqsel39gro0Io6ojtq+yTeiHa37yPPo/ZbN08vetjg=\n=Hnkw\n-----END PGP SIGNATURE-----", "payload": "tree d35ef74b625a315acf7e0865a07f07ec4423ca8a\nparent aedff61f7ac4fc2b287ff76d33f2584e1f63a3af\nauthor topecongiro <seuchida@gmail.com> 1591579885 +0900\ncommitter topecongiro <seuchida@gmail.com> 1591580563 +0900\n\nSupport module-level rustfmt::skip in sub-modules\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08776ef3b4d88392608b21ec74440721bbbfa841", "html_url": "https://github.com/rust-lang/rust/commit/08776ef3b4d88392608b21ec74440721bbbfa841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08776ef3b4d88392608b21ec74440721bbbfa841/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aedff61f7ac4fc2b287ff76d33f2584e1f63a3af", "url": "https://api.github.com/repos/rust-lang/rust/commits/aedff61f7ac4fc2b287ff76d33f2584e1f63a3af", "html_url": "https://github.com/rust-lang/rust/commit/aedff61f7ac4fc2b287ff76d33f2584e1f63a3af"}], "stats": {"total": 92, "additions": 11, "deletions": 81}, "files": [{"sha": "915401c4682d6551eb9b58154c60b52ae0d9f240", "filename": "src/modules.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/08776ef3b4d88392608b21ec74440721bbbfa841/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08776ef3b4d88392608b21ec74440721bbbfa841/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=08776ef3b4d88392608b21ec74440721bbbfa841", "patch": "@@ -252,7 +252,8 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 return Ok(None);\n             }\n             return match Parser::parse_file_as_module(self.parse_sess, &path, sub_mod.inner) {\n-                Some(m) => Ok(Some(SubModKind::External(\n+                Some((_, ref attrs)) if contains_skip(attrs) => Ok(None),\n+                Some((m, _)) => Ok(Some(SubModKind::External(\n                     path,\n                     DirectoryOwnership::Owned { relative: None },\n                     Cow::Owned(m),\n@@ -290,10 +291,11 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                     }\n                 }\n                 match Parser::parse_file_as_module(self.parse_sess, &path, sub_mod.inner) {\n-                    Some(m) if outside_mods_empty => {\n+                    Some((_, ref attrs)) if contains_skip(attrs) => Ok(None),\n+                    Some((m, _)) if outside_mods_empty => {\n                         Ok(Some(SubModKind::External(path, ownership, Cow::Owned(m))))\n                     }\n-                    Some(m) => {\n+                    Some((m, _)) => {\n                         mods_outside_ast.push((path.clone(), ownership, Cow::Owned(m)));\n                         if should_insert {\n                             mods_outside_ast.push((path, ownership, sub_mod.clone()));\n@@ -377,7 +379,8 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             }\n             let m = match Parser::parse_file_as_module(self.parse_sess, &actual_path, sub_mod.inner)\n             {\n-                Some(m) => m,\n+                Some((_, ref attrs)) if contains_skip(attrs) => continue,\n+                Some((m, _)) => m,\n                 None => continue,\n             };\n "}, {"sha": "831554829e24782979dc2fe3d200f2396f7121cd", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 4, "deletions": 77, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/08776ef3b4d88392608b21ec74440721bbbfa841/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08776ef3b4d88392608b21ec74440721bbbfa841/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=08776ef3b4d88392608b21ec74440721bbbfa841", "patch": "@@ -3,7 +3,7 @@ use std::path::{Path, PathBuf};\n \n use rustc_ast::ast;\n use rustc_ast::token::{DelimToken, TokenKind};\n-use rustc_errors::{Diagnostic, PResult};\n+use rustc_errors::Diagnostic;\n use rustc_parse::{new_parser_from_file, parser::Parser as RawParser};\n use rustc_span::{symbol::kw, Span};\n \n@@ -102,91 +102,18 @@ impl<'a> Parser<'a> {\n         rustc_expand::module::submod_path_from_attr(attrs, path)\n     }\n \n-    // FIXME(topecongiro) Use the method from libsyntax[1] once it become public.\n-    //\n-    // [1] https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/attr.rs\n-    fn parse_inner_attrs(parser: &mut RawParser<'a>) -> PResult<'a, Vec<ast::Attribute>> {\n-        let mut attrs: Vec<ast::Attribute> = vec![];\n-        loop {\n-            match parser.token.kind {\n-                TokenKind::Pound => {\n-                    // Don't even try to parse if it's not an inner attribute.\n-                    if !parser.look_ahead(1, |t| t == &TokenKind::Not) {\n-                        break;\n-                    }\n-\n-                    let attr = parser.parse_attribute(true)?;\n-                    assert_eq!(attr.style, ast::AttrStyle::Inner);\n-                    attrs.push(attr);\n-                }\n-                TokenKind::DocComment(s) => {\n-                    // we need to get the position of this token before we bump.\n-                    let attr = rustc_ast::attr::mk_doc_comment(\n-                        rustc_ast::util::comments::doc_comment_style(&s.as_str()),\n-                        s,\n-                        parser.token.span,\n-                    );\n-                    if attr.style == ast::AttrStyle::Inner {\n-                        attrs.push(attr);\n-                        parser.bump();\n-                    } else {\n-                        break;\n-                    }\n-                }\n-                _ => break,\n-            }\n-        }\n-        Ok(attrs)\n-    }\n-\n-    fn parse_mod_items(parser: &mut RawParser<'a>, span: Span) -> PResult<'a, ast::Mod> {\n-        let mut items = vec![];\n-        while let Some(item) = parser.parse_item()? {\n-            items.push(item);\n-        }\n-\n-        // Handle extern mods that are empty files/files with only comments.\n-        if items.is_empty() {\n-            parser.parse_mod(&TokenKind::Eof)?;\n-        }\n-\n-        let hi = if parser.token.span.is_dummy() {\n-            span\n-        } else {\n-            parser.prev_token.span\n-        };\n-\n-        Ok(ast::Mod {\n-            inner: span.to(hi),\n-            items,\n-            inline: false,\n-        })\n-    }\n-\n     pub(crate) fn parse_file_as_module(\n         sess: &'a ParseSess,\n         path: &Path,\n         span: Span,\n-    ) -> Option<ast::Mod> {\n+    ) -> Option<(ast::Mod, Vec<ast::Attribute>)> {\n         let result = catch_unwind(AssertUnwindSafe(|| {\n             let mut parser = new_parser_from_file(sess.inner(), &path, Some(span));\n-\n-            let lo = parser.token.span;\n-            // FIXME(topecongiro) Format inner attributes (#3606).\n-            match Parser::parse_inner_attrs(&mut parser) {\n-                Ok(_attrs) => (),\n+            match parser.parse_mod(&TokenKind::Eof) {\n+                Ok(result) => Some(result),\n                 Err(mut e) => {\n                     e.cancel();\n                     sess.reset_errors();\n-                    return None;\n-                }\n-            }\n-\n-            match Parser::parse_mod_items(&mut parser, lo) {\n-                Ok(m) => Some(m),\n-                Err(mut db) => {\n-                    db.cancel();\n-                    sess.reset_errors();\n                     None\n                 }\n             }"}]}