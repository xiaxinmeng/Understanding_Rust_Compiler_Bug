{"sha": "39c5e863378270c25ef75f3ae53d908565bc2619", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YzVlODYzMzc4MjcwYzI1ZWY3NWYzYWU1M2Q5MDg1NjViYzI2MTk=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-04T16:06:24Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-03-04T16:06:24Z"}, "message": "When checking if two empty hir blocks are equal also check to see if the tokens used are the same as well", "tree": {"sha": "b5876b902362809145dd858fefd24a3128d8c3b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5876b902362809145dd858fefd24a3128d8c3b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39c5e863378270c25ef75f3ae53d908565bc2619", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmBBBbIACgkQ2lnoZDo37QZ6NQEAwUDOFf92RyglMKE39f3QT/dI\nV4C850hp2eMLy70VmdQBALCZ7wkKSYwd2W14CO6aDoGhNi/tRei2+u4kiTAtjJQA\n=0Sli\n-----END PGP SIGNATURE-----", "payload": "tree b5876b902362809145dd858fefd24a3128d8c3b9\nparent ff51964102db6fbf73cd2e111d441bf8202ea205\nauthor Jason Newcomb <jsnewcomb@pm.me> 1614873984 -0500\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1614873984 -0500\n\nWhen checking if two empty hir blocks are equal also check to see if the tokens used are the same as well\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39c5e863378270c25ef75f3ae53d908565bc2619", "html_url": "https://github.com/rust-lang/rust/commit/39c5e863378270c25ef75f3ae53d908565bc2619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39c5e863378270c25ef75f3ae53d908565bc2619/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff51964102db6fbf73cd2e111d441bf8202ea205", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff51964102db6fbf73cd2e111d441bf8202ea205", "html_url": "https://github.com/rust-lang/rust/commit/ff51964102db6fbf73cd2e111d441bf8202ea205"}], "stats": {"total": 138, "additions": 130, "deletions": 8}, "files": [{"sha": "e28ad27d9a6f8d9f97b88b761defca6766733536", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 75, "deletions": 6, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/39c5e863378270c25ef75f3ae53d908565bc2619/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c5e863378270c25ef75f3ae53d908565bc2619/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=39c5e863378270c25ef75f3ae53d908565bc2619", "patch": "@@ -1,5 +1,5 @@\n use crate::consts::{constant_context, constant_simple};\n-use crate::differing_macro_contexts;\n+use crate::{differing_macro_contexts, snippet_opt};\n use rustc_ast::ast::InlineAsmTemplatePiece;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -9,6 +9,7 @@ use rustc_hir::{\n     GenericArg, GenericArgs, Guard, HirId, InlineAsmOperand, Lifetime, LifetimeName, ParamName, Pat, PatKind, Path,\n     PathSegment, QPath, Stmt, StmtKind, Ty, TyKind, TypeBinding,\n };\n+use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::LateContext;\n use rustc_middle::ich::StableHashingContextProvider;\n use rustc_middle::ty::TypeckResults;\n@@ -110,8 +111,54 @@ impl HirEqInterExpr<'_, '_, '_> {\n \n     /// Checks whether two blocks are the same.\n     fn eq_block(&mut self, left: &Block<'_>, right: &Block<'_>) -> bool {\n-        over(&left.stmts, &right.stmts, |l, r| self.eq_stmt(l, r))\n-            && both(&left.expr, &right.expr, |l, r| self.eq_expr(l, r))\n+        match (left.stmts, left.expr, right.stmts, right.expr) {\n+            ([], None, [], None) => {\n+                // For empty blocks, check to see if the tokens are equal. This will catch the case where a macro\n+                // expanded to nothing, or the cfg attribute was used.\n+                let (left, right) = match (\n+                    snippet_opt(self.inner.cx, left.span),\n+                    snippet_opt(self.inner.cx, right.span),\n+                ) {\n+                    (Some(left), Some(right)) => (left, right),\n+                    _ => return true,\n+                };\n+                let mut left_pos = 0;\n+                let left = tokenize(&left)\n+                    .map(|t| {\n+                        let end = left_pos + t.len;\n+                        let s = &left[left_pos..end];\n+                        left_pos = end;\n+                        (t, s)\n+                    })\n+                    .filter(|(t, _)| {\n+                        !matches!(\n+                            t.kind,\n+                            TokenKind::LineComment { .. } | TokenKind::BlockComment { .. } | TokenKind::Whitespace\n+                        )\n+                    })\n+                    .map(|(_, s)| s);\n+                let mut right_pos = 0;\n+                let right = tokenize(&right)\n+                    .map(|t| {\n+                        let end = right_pos + t.len;\n+                        let s = &right[right_pos..end];\n+                        right_pos = end;\n+                        (t, s)\n+                    })\n+                    .filter(|(t, _)| {\n+                        !matches!(\n+                            t.kind,\n+                            TokenKind::LineComment { .. } | TokenKind::BlockComment { .. } | TokenKind::Whitespace\n+                        )\n+                    })\n+                    .map(|(_, s)| s);\n+                left.eq(right)\n+            },\n+            _ => {\n+                over(&left.stmts, &right.stmts, |l, r| self.eq_stmt(l, r))\n+                    && both(&left.expr, &right.expr, |l, r| self.eq_expr(l, r))\n+            },\n+        }\n     }\n \n     #[allow(clippy::similar_names)]\n@@ -131,7 +178,10 @@ impl HirEqInterExpr<'_, '_, '_> {\n             }\n         }\n \n-        let is_eq = match (&reduce_exprkind(&left.kind), &reduce_exprkind(&right.kind)) {\n+        let is_eq = match (\n+            &reduce_exprkind(self.inner.cx, &left.kind),\n+            &reduce_exprkind(self.inner.cx, &right.kind),\n+        ) {\n             (&ExprKind::AddrOf(lb, l_mut, ref le), &ExprKind::AddrOf(rb, r_mut, ref re)) => {\n                 lb == rb && l_mut == r_mut && self.eq_expr(le, re)\n             },\n@@ -360,11 +410,30 @@ impl HirEqInterExpr<'_, '_, '_> {\n }\n \n /// Some simple reductions like `{ return }` => `return`\n-fn reduce_exprkind<'hir>(kind: &'hir ExprKind<'hir>) -> &ExprKind<'hir> {\n+fn reduce_exprkind<'hir>(cx: &LateContext<'_>, kind: &'hir ExprKind<'hir>) -> &'hir ExprKind<'hir> {\n     if let ExprKind::Block(block, _) = kind {\n         match (block.stmts, block.expr) {\n+            // From an `if let` expression without an `else` block. The arm for the implicit wild pattern is an empty\n+            // block with an empty span.\n+            ([], None) if block.span.is_empty() => &ExprKind::Tup(&[]),\n             // `{}` => `()`\n-            ([], None) => &ExprKind::Tup(&[]),\n+            ([], None) => match snippet_opt(cx, block.span) {\n+                // Don't reduce if there are any tokens contained in the braces\n+                Some(snip)\n+                    if tokenize(&snip)\n+                        .map(|t| t.kind)\n+                        .filter(|t| {\n+                            !matches!(\n+                                t,\n+                                TokenKind::LineComment { .. } | TokenKind::BlockComment { .. } | TokenKind::Whitespace\n+                            )\n+                        })\n+                        .ne([TokenKind::OpenBrace, TokenKind::CloseBrace].iter().cloned()) =>\n+                {\n+                    kind\n+                },\n+                _ => &ExprKind::Tup(&[]),\n+            },\n             ([], Some(expr)) => match expr.kind {\n                 // `{ return .. }` => `return ..`\n                 ExprKind::Ret(..) => &expr.kind,"}, {"sha": "0395079901cb3e809c2882376815c10ba5af6073", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39c5e863378270c25ef75f3ae53d908565bc2619/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c5e863378270c25ef75f3ae53d908565bc2619/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=39c5e863378270c25ef75f3ae53d908565bc2619", "patch": "@@ -14,6 +14,7 @@ extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_hir_pretty;\n extern crate rustc_infer;\n+extern crate rustc_lexer;\n extern crate rustc_lint;\n extern crate rustc_middle;\n extern crate rustc_mir;"}, {"sha": "da4e3020d5b83d6f20c9788b67d7901fa7c95a51", "filename": "tests/ui/match_same_arms2.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/39c5e863378270c25ef75f3ae53d908565bc2619/tests%2Fui%2Fmatch_same_arms2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39c5e863378270c25ef75f3ae53d908565bc2619/tests%2Fui%2Fmatch_same_arms2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.rs?ref=39c5e863378270c25ef75f3ae53d908565bc2619", "patch": "@@ -120,6 +120,35 @@ fn match_same_arms() {\n         },\n     }\n \n+    // False positive #1390\n+    macro_rules! empty {\n+        ($e:expr) => {};\n+    }\n+    match 0 {\n+        0 => {\n+            empty!(0);\n+        },\n+        1 => {\n+            empty!(1);\n+        },\n+        x => {\n+            empty!(x);\n+        },\n+    };\n+\n+    // still lint if the tokens are the same\n+    match 0 {\n+        0 => {\n+            empty!(0);\n+        },\n+        1 => {\n+            empty!(0);\n+        },\n+        x => {\n+            empty!(x);\n+        },\n+    }\n+\n     match_expr_like_matches_macro_priority();\n }\n "}, {"sha": "95f9494cdc99e9f82f202a00698a7e2592571e70", "filename": "tests/ui/match_same_arms2.stderr", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39c5e863378270c25ef75f3ae53d908565bc2619/tests%2Fui%2Fmatch_same_arms2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39c5e863378270c25ef75f3ae53d908565bc2619/tests%2Fui%2Fmatch_same_arms2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.stderr?ref=39c5e863378270c25ef75f3ae53d908565bc2619", "patch": "@@ -141,8 +141,31 @@ LL |         Ok(3) => println!(\"ok\"),\n    |         ^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms2.rs:144:14\n+   |\n+LL |           1 => {\n+   |  ______________^\n+LL | |             empty!(0);\n+LL | |         },\n+   | |_________^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms2.rs:141:14\n+   |\n+LL |           0 => {\n+   |  ______________^\n+LL | |             empty!(0);\n+LL | |         },\n+   | |_________^\n+help: consider refactoring into `0 | 1`\n+  --> $DIR/match_same_arms2.rs:141:9\n+   |\n+LL |         0 => {\n+   |         ^\n+\n error: match expression looks like `matches!` macro\n-  --> $DIR/match_same_arms2.rs:133:16\n+  --> $DIR/match_same_arms2.rs:162:16\n    |\n LL |       let _ans = match x {\n    |  ________________^\n@@ -154,5 +177,5 @@ LL | |     };\n    |\n    = note: `-D clippy::match-like-matches-macro` implied by `-D warnings`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}]}