{"sha": "2f8126fcace3c5e7db01c755b91eb45a9c632cfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmODEyNmZjYWNlM2M1ZTdkYjAxYzc1NWI5MWViNDVhOWM2MzJjZmQ=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-10T03:44:02Z"}, "committer": {"name": "Veetaha", "email": "veetaha2@gmail.com", "date": "2020-06-18T11:50:17Z"}, "message": "Migrate flycheck to fully-lsp-compatible progress reports (introduce ra_progress crate)", "tree": {"sha": "1908ce82c4ef5229e81ecbaeff8ea4f1a0ef7bb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1908ce82c4ef5229e81ecbaeff8ea4f1a0ef7bb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f8126fcace3c5e7db01c755b91eb45a9c632cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8126fcace3c5e7db01c755b91eb45a9c632cfd", "html_url": "https://github.com/rust-lang/rust/commit/2f8126fcace3c5e7db01c755b91eb45a9c632cfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0262dba97ef114bd7664a4e32be21caef2d63f0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0262dba97ef114bd7664a4e32be21caef2d63f0a", "html_url": "https://github.com/rust-lang/rust/commit/0262dba97ef114bd7664a4e32be21caef2d63f0a"}], "stats": {"total": 326, "additions": 225, "deletions": 101}, "files": [{"sha": "6704467d9338cdbcd000d0b592a8310ec79d8588", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=2f8126fcace3c5e7db01c755b91eb45a9c632cfd", "patch": "@@ -241,8 +241,11 @@ impl Analysis {\n         self.with_db(|db| status::status(&*db))\n     }\n \n-    pub fn prime_caches(&self, files: Vec<FileId>) -> Cancelable<()> {\n-        self.with_db(|db| prime_caches::prime_caches(db, files))\n+    pub fn prime_caches<P>(&self, files: Vec<FileId>, report_progress: P) -> Cancelable<()>\n+    where\n+        P: FnMut(usize) + std::panic::UnwindSafe,\n+    {\n+        self.with_db(|db| prime_caches::prime_caches(db, files, report_progress))\n     }\n \n     /// Gets the text of the source file."}, {"sha": "f605959898b613652c0ddd31b20bd7ca30a0d877", "filename": "crates/ra_ide/src/prime_caches.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fprime_caches.rs?ref=2f8126fcace3c5e7db01c755b91eb45a9c632cfd", "patch": "@@ -5,8 +5,13 @@\n \n use crate::{FileId, RootDatabase};\n \n-pub(crate) fn prime_caches(db: &RootDatabase, files: Vec<FileId>) {\n-    for file in files {\n+pub(crate) fn prime_caches(\n+    db: &RootDatabase,\n+    files: Vec<FileId>,\n+    mut report_progress: impl FnMut(usize),\n+) {\n+    for (i, file) in files.into_iter().enumerate() {\n         let _ = crate::syntax_highlighting::highlight(db, file, None, false);\n+        report_progress(i);\n     }\n }"}, {"sha": "590836c1eef1dd921fe4ac3111c8985978012846", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 37, "deletions": 96, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=2f8126fcace3c5e7db01c755b91eb45a9c632cfd", "patch": "@@ -4,6 +4,8 @@\n mod handlers;\n mod subscriptions;\n pub(crate) mod pending_requests;\n+mod progress;\n+mod lsp_utils;\n \n use std::{\n     borrow::Cow,\n@@ -44,6 +46,9 @@ use crate::{\n     },\n     Result,\n };\n+pub use lsp_utils::show_message;\n+use lsp_utils::{is_canceled, notification_cast, notification_is, notification_new, request_new};\n+use progress::{IsDone, PrimeCachesProgressNotifier, WorkspaceAnalysisProgressNotifier};\n \n #[derive(Debug)]\n pub struct LspError {\n@@ -90,6 +95,7 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n     }\n \n     let mut loop_state = LoopState::default();\n+\n     let mut global_state = {\n         let workspaces = {\n             if config.linked_projects.is_empty() && config.notifications.cargo_toml_not_found {\n@@ -164,6 +170,12 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n     };\n \n     loop_state.roots_total = global_state.vfs.read().n_roots();\n+    loop_state.roots_scanned = 0;\n+    loop_state.roots_progress = Some(WorkspaceAnalysisProgressNotifier::begin(\n+        connection.sender.clone(),\n+        loop_state.next_request_id(),\n+        loop_state.roots_total,\n+    ));\n \n     let pool = ThreadPool::default();\n     let (task_sender, task_receiver) = unbounded::<Task>();\n@@ -271,7 +283,7 @@ struct LoopState {\n     pending_requests: PendingRequests,\n     subscriptions: Subscriptions,\n     workspace_loaded: bool,\n-    roots_progress_reported: Option<usize>,\n+    roots_progress: Option<WorkspaceAnalysisProgressNotifier>,\n     roots_scanned: usize,\n     roots_total: usize,\n     configuration_request_id: Option<RequestId>,\n@@ -372,7 +384,7 @@ fn loop_turn(\n     }\n \n     if show_progress {\n-        send_startup_progress(&connection.sender, loop_state);\n+        send_workspace_analisys_progress(loop_state);\n     }\n \n     if state_changed && loop_state.workspace_loaded {\n@@ -385,7 +397,22 @@ fn loop_turn(\n         pool.execute({\n             let subs = loop_state.subscriptions.subscriptions();\n             let snap = global_state.snapshot();\n-            move || snap.analysis().prime_caches(subs).unwrap_or_else(|_: Canceled| ())\n+\n+            let total = subs.len();\n+\n+            let mut progress = PrimeCachesProgressNotifier::begin(\n+                connection.sender.clone(),\n+                loop_state.next_request_id(),\n+                total,\n+            );\n+\n+            move || {\n+                snap.analysis()\n+                    .prime_caches(subs, move |i| {\n+                        progress.report(i + 1);\n+                    })\n+                    .unwrap_or_else(|_: Canceled| ());\n+            }\n         });\n     }\n \n@@ -744,55 +771,12 @@ fn on_diagnostic_task(task: DiagnosticTask, msg_sender: &Sender<Message>, state:\n     }\n }\n \n-fn send_startup_progress(sender: &Sender<Message>, loop_state: &mut LoopState) {\n-    let total: usize = loop_state.roots_total;\n-    let prev = loop_state.roots_progress_reported;\n-    let progress = loop_state.roots_scanned;\n-    loop_state.roots_progress_reported = Some(progress);\n-\n-    match (prev, loop_state.workspace_loaded) {\n-        (None, false) => {\n-            let work_done_progress_create = request_new::<lsp_types::request::WorkDoneProgressCreate>(\n-                loop_state.next_request_id(),\n-                WorkDoneProgressCreateParams {\n-                    token: lsp_types::ProgressToken::String(\"rustAnalyzer/startup\".into()),\n-                },\n-            );\n-            sender.send(work_done_progress_create.into()).unwrap();\n-            send_startup_progress_notif(\n-                sender,\n-                WorkDoneProgress::Begin(WorkDoneProgressBegin {\n-                    title: \"rust-analyzer\".into(),\n-                    cancellable: None,\n-                    message: Some(format!(\"{}/{} packages\", progress, total)),\n-                    percentage: Some(100.0 * progress as f64 / total as f64),\n-                }),\n-            );\n+fn send_workspace_analisys_progress(loop_state: &mut LoopState) {\n+    if let Some(progress) = &mut loop_state.roots_progress {\n+        if loop_state.workspace_loaded || progress.report(loop_state.roots_scanned) == IsDone(true)\n+        {\n+            loop_state.roots_progress = None;\n         }\n-        (Some(prev), false) if progress != prev => send_startup_progress_notif(\n-            sender,\n-            WorkDoneProgress::Report(WorkDoneProgressReport {\n-                cancellable: None,\n-                message: Some(format!(\"{}/{} packages\", progress, total)),\n-                percentage: Some(100.0 * progress as f64 / total as f64),\n-            }),\n-        ),\n-        (_, true) => send_startup_progress_notif(\n-            sender,\n-            WorkDoneProgress::End(WorkDoneProgressEnd {\n-                message: Some(format!(\"rust-analyzer loaded, {} packages\", progress)),\n-            }),\n-        ),\n-        _ => {}\n-    }\n-\n-    fn send_startup_progress_notif(sender: &Sender<Message>, work_done_progress: WorkDoneProgress) {\n-        let notif =\n-            notification_new::<lsp_types::notification::Progress>(lsp_types::ProgressParams {\n-                token: lsp_types::ProgressToken::String(\"rustAnalyzer/startup\".into()),\n-                value: lsp_types::ProgressParamsValue::WorkDone(work_done_progress),\n-            });\n-        sender.send(notif.into()).unwrap();\n     }\n }\n \n@@ -918,7 +902,7 @@ where\n                 }\n             }\n             Err(e) => {\n-                if is_canceled(&e) {\n+                if is_canceled(&*e) {\n                     Response::new_err(\n                         id,\n                         ErrorCode::ContentModified as i32,\n@@ -945,7 +929,7 @@ fn update_file_notifications_on_threadpool(\n             for file_id in subscriptions {\n                 match handlers::publish_diagnostics(&world, file_id) {\n                     Err(e) => {\n-                        if !is_canceled(&e) {\n+                        if !is_canceled(&*e) {\n                             log::error!(\"failed to compute diagnostics: {:?}\", e);\n                         }\n                     }\n@@ -958,49 +942,6 @@ fn update_file_notifications_on_threadpool(\n     }\n }\n \n-pub fn show_message(\n-    typ: lsp_types::MessageType,\n-    message: impl Into<String>,\n-    sender: &Sender<Message>,\n-) {\n-    let message = message.into();\n-    let params = lsp_types::ShowMessageParams { typ, message };\n-    let not = notification_new::<lsp_types::notification::ShowMessage>(params);\n-    sender.send(not.into()).unwrap();\n-}\n-\n-fn is_canceled(e: &Box<dyn std::error::Error + Send + Sync>) -> bool {\n-    e.downcast_ref::<Canceled>().is_some()\n-}\n-\n-fn notification_is<N: lsp_types::notification::Notification>(notification: &Notification) -> bool {\n-    notification.method == N::METHOD\n-}\n-\n-fn notification_cast<N>(notification: Notification) -> std::result::Result<N::Params, Notification>\n-where\n-    N: lsp_types::notification::Notification,\n-    N::Params: DeserializeOwned,\n-{\n-    notification.extract(N::METHOD)\n-}\n-\n-fn notification_new<N>(params: N::Params) -> Notification\n-where\n-    N: lsp_types::notification::Notification,\n-    N::Params: Serialize,\n-{\n-    Notification::new(N::METHOD.to_string(), params)\n-}\n-\n-fn request_new<R>(id: RequestId, params: R::Params) -> Request\n-where\n-    R: lsp_types::request::Request,\n-    R::Params: Serialize,\n-{\n-    Request::new(id, R::METHOD.to_string(), params)\n-}\n-\n #[cfg(test)]\n mod tests {\n     use std::borrow::Cow;"}, {"sha": "fc008cba5060433c43e0c682f8d0784e4f836f5e", "filename": "crates/rust-analyzer/src/main_loop/lsp_utils.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Flsp_utils.rs?ref=2f8126fcace3c5e7db01c755b91eb45a9c632cfd", "patch": "@@ -0,0 +1,46 @@\n+use crossbeam_channel::Sender;\n+use lsp_server::{Message, Notification, Request, RequestId};\n+use ra_db::Canceled;\n+use serde::{de::DeserializeOwned, Serialize};\n+use std::error::Error;\n+\n+pub fn show_message(typ: lsp_types::MessageType, message: impl Into<String>, sender: &Sender<Message>) {\n+    let message = message.into();\n+    let params = lsp_types::ShowMessageParams { typ, message };\n+    let not = notification_new::<lsp_types::notification::ShowMessage>(params);\n+    sender.send(not.into()).unwrap();\n+}\n+\n+pub(crate) fn is_canceled(e: &(dyn Error + 'static)) -> bool {\n+    e.downcast_ref::<Canceled>().is_some()\n+}\n+\n+pub(crate) fn notification_is<N: lsp_types::notification::Notification>(\n+    notification: &Notification,\n+) -> bool {\n+    notification.method == N::METHOD\n+}\n+\n+pub(crate) fn notification_cast<N>(notification: Notification) -> Result<N::Params, Notification>\n+where\n+    N: lsp_types::notification::Notification,\n+    N::Params: DeserializeOwned,\n+{\n+    notification.extract(N::METHOD)\n+}\n+\n+pub(crate) fn notification_new<N>(params: N::Params) -> Notification\n+where\n+    N: lsp_types::notification::Notification,\n+    N::Params: Serialize,\n+{\n+    Notification::new(N::METHOD.to_string(), params)\n+}\n+\n+pub(crate) fn request_new<R>(id: RequestId, params: R::Params) -> Request\n+where\n+    R: lsp_types::request::Request,\n+    R::Params: Serialize,\n+{\n+    Request::new(id, R::METHOD.to_string(), params)\n+}"}, {"sha": "610e026ca28695f4bf39cea168cd470f31ee4fc1", "filename": "crates/rust-analyzer/src/main_loop/progress.rs", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fprogress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fprogress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fprogress.rs?ref=2f8126fcace3c5e7db01c755b91eb45a9c632cfd", "patch": "@@ -0,0 +1,129 @@\n+use super::lsp_utils::{notification_new, request_new};\n+use crossbeam_channel::Sender;\n+use lsp_server::{Message, RequestId};\n+use lsp_types::{\n+    WorkDoneProgress, WorkDoneProgressBegin, WorkDoneProgressCreateParams, WorkDoneProgressEnd,\n+    WorkDoneProgressReport,\n+};\n+\n+const PRIME_CACHES_PROGRESS_TOKEN: &str = \"rustAnalyzer/primeCaches\";\n+const WORKSPACE_ANALYSIS_PROGRESS_TOKEN: &str = \"rustAnalyzer/workspaceAnalysis\";\n+\n+#[derive(Debug)]\n+pub(crate) struct PrimeCachesProgressNotifier(ProgressNotifier);\n+\n+impl Drop for PrimeCachesProgressNotifier {\n+    fn drop(&mut self) {\n+        self.0.end(\"done priming caches\".to_owned());\n+    }\n+}\n+\n+impl PrimeCachesProgressNotifier {\n+    pub(crate) fn begin(sender: Sender<Message>, req_id: RequestId, total: usize) -> Self {\n+        let me = Self(ProgressNotifier {\n+            sender,\n+            processed: 0,\n+            total,\n+            token: PRIME_CACHES_PROGRESS_TOKEN,\n+            label: \"priming caches\",\n+        });\n+        me.0.begin(req_id);\n+        me\n+    }\n+\n+    pub(crate) fn report(&mut self, processed: usize) -> IsDone {\n+        self.0.report(processed)\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub(crate) struct WorkspaceAnalysisProgressNotifier(ProgressNotifier);\n+\n+impl Drop for WorkspaceAnalysisProgressNotifier {\n+    fn drop(&mut self) {\n+        self.0.end(\"done analyzing workspace\".to_owned());\n+    }\n+}\n+\n+impl WorkspaceAnalysisProgressNotifier {\n+    pub(crate) fn begin(sender: Sender<Message>, req_id: RequestId, total: usize) -> Self {\n+        let me = Self(ProgressNotifier {\n+            sender,\n+            total,\n+            processed: 0,\n+            token: WORKSPACE_ANALYSIS_PROGRESS_TOKEN,\n+            label: \"analyzing packages\",\n+        });\n+        me.0.begin(req_id);\n+        me\n+    }\n+\n+    pub(crate) fn report(&mut self, processed: usize) -> IsDone {\n+        self.0.report(processed)\n+    }\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub struct IsDone(pub bool);\n+\n+#[derive(Debug)]\n+struct ProgressNotifier {\n+    sender: Sender<Message>,\n+    token: &'static str,\n+    label: &'static str,\n+    processed: usize,\n+    total: usize,\n+}\n+\n+impl ProgressNotifier {\n+    fn begin(&self, req_id: RequestId) {\n+        let create_req = request_new::<lsp_types::request::WorkDoneProgressCreate>(\n+            req_id,\n+            WorkDoneProgressCreateParams {\n+                token: lsp_types::ProgressToken::String(self.token.to_owned()),\n+            },\n+        );\n+        self.sender.send(create_req.into()).unwrap();\n+        self.send_notification(WorkDoneProgress::Begin(WorkDoneProgressBegin {\n+            cancellable: None,\n+            title: \"rust-analyzer\".to_owned(),\n+            percentage: Some(self.percentage()),\n+            message: Some(self.create_progress_message()),\n+        }));\n+    }\n+\n+    fn report(&mut self, processed: usize) -> IsDone {\n+        if self.processed != processed {\n+            self.processed = processed;\n+\n+            self.send_notification(WorkDoneProgress::Report(WorkDoneProgressReport {\n+                cancellable: None,\n+                percentage: Some(self.percentage()),\n+                message: Some(self.create_progress_message()),\n+            }));\n+        }\n+        IsDone(processed >= self.total)\n+    }\n+\n+    fn end(&mut self, message: String) {\n+        self.send_notification(WorkDoneProgress::End(WorkDoneProgressEnd {\n+            message: Some(message),\n+        }));\n+    }\n+\n+    fn send_notification(&self, progress: WorkDoneProgress) {\n+        let notif = notification_new::<lsp_types::notification::Progress>(lsp_types::ProgressParams {\n+            token: lsp_types::ProgressToken::String(self.token.to_owned()),\n+            value: lsp_types::ProgressParamsValue::WorkDone(progress),\n+        });\n+        self.sender.send(notif.into()).unwrap();\n+    }\n+\n+    fn create_progress_message(&self) -> String {\n+        format!(\"{} ({}/{})\", self.label, self.processed, self.total)\n+    }\n+\n+    fn percentage(&self) -> f64 {\n+        (100 * self.processed) as f64 / self.total as f64\n+    }\n+}"}, {"sha": "e5f69835aaf8322fe3c2096c4c379ece07866f84", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f8126fcace3c5e7db01c755b91eb45a9c632cfd/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=2f8126fcace3c5e7db01c755b91eb45a9c632cfd", "patch": "@@ -212,7 +212,7 @@ impl Server {\n                     ProgressParams {\n                         token: lsp_types::ProgressToken::String(ref token),\n                         value: ProgressParamsValue::WorkDone(WorkDoneProgress::End(_)),\n-                    } if token == \"rustAnalyzer/startup\" => true,\n+                    } if token == \"rustAnalyzer/workspaceAnalysis\" => true,\n                     _ => false,\n                 }\n             }"}]}