{"sha": "20946e697010f886cb9aec2390e083439b274123", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOTQ2ZTY5NzAxMGY4ODZjYjlhZWMyMzkwZTA4MzQzOWIyNzQxMjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-14T00:11:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-02T21:13:22Z"}, "message": "start going back to an i386 build", "tree": {"sha": "7458b1e536a7e7a32e136c9dbc9b5540af25df7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7458b1e536a7e7a32e136c9dbc9b5540af25df7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20946e697010f886cb9aec2390e083439b274123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20946e697010f886cb9aec2390e083439b274123", "html_url": "https://github.com/rust-lang/rust/commit/20946e697010f886cb9aec2390e083439b274123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20946e697010f886cb9aec2390e083439b274123/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8011e3fabb38e5bbc40038b540459595cce7a995", "url": "https://api.github.com/repos/rust-lang/rust/commits/8011e3fabb38e5bbc40038b540459595cce7a995", "html_url": "https://github.com/rust-lang/rust/commit/8011e3fabb38e5bbc40038b540459595cce7a995"}], "stats": {"total": 130, "additions": 69, "deletions": 61}, "files": [{"sha": "227dc87b6cbbbd892a92baea60b891196bf94585", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20946e697010f886cb9aec2390e083439b274123/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/20946e697010f886cb9aec2390e083439b274123/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=20946e697010f886cb9aec2390e083439b274123", "patch": "@@ -50,9 +50,7 @@ include config.mk\n OUR_MKFILES := Makefile config.mk $(wildcard $(CFG_SRC_DIR)/mk/*.mk)\n 3RDPARTY_MKFILES := $(CFG_SRC_DIR)/src/rt/libuv/Makefile \\\n                     $(wildcard $(CFG_SRC_DIR)/src/rt/libuv/*.mk)\n-GEN_MKFILES := $(wildcard $(CFG_SRC_DIR)/mk/libuv/mac/*) \\\n-               $(wildcard $(CFG_SRC_DIR)/mk/libuv/unix/*) \\\n-               $(wildcard $(CFG_SRC_DIR)/mk/libuv/win/*) \\\n+GEN_MKFILES := $(wildcard $(CFG_SRC_DIR)/mk/libuv/*/*/*) \\\n                $(wildcard $(CFG_SRC_DIR)/mk/libuv/mac/src/rt/libuv/*) \\\n                $(wildcard $(CFG_SRC_DIR)/mk/libuv/mac/src/rt/libuv/*) \\\n                $(wildcard $(CFG_SRC_DIR)/mk/libuv/mac/src/rt/libuv/*)"}, {"sha": "20706bbdc9dc2e10100d1692a1aac7b1f42a0dc0", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20946e697010f886cb9aec2390e083439b274123/configure", "raw_url": "https://github.com/rust-lang/rust/raw/20946e697010f886cb9aec2390e083439b274123/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=20946e697010f886cb9aec2390e083439b274123", "patch": "@@ -391,7 +391,7 @@ step_msg \"making directories\"\n for i in \\\n     doc doc/std \\\n     nd nd/std \\\n-    rt rt/isaac rt/bigint rt/sync rt/test rt/arch/i386 \\\n+    rt rt/isaac rt/bigint rt/sync rt/test rt/arch/i386 rt/arch/x86_64 \\\n     rt/libuv rt/libuv/src/ares rt/libuv/src/eio rt/libuv/src/ev \\\n     rustllvm dl \\\n     test/run-pass test/run-fail test/compile-fail \\"}, {"sha": "84bb33200f5b5af566e71ba29197aa07375d84d6", "filename": "mk/libuv/x86_64/mac/src/rt/libuv/run-benchmarks.target.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20946e697010f886cb9aec2390e083439b274123/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/20946e697010f886cb9aec2390e083439b274123/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-benchmarks.target.mk?ref=20946e697010f886cb9aec2390e083439b274123", "patch": "@@ -9,7 +9,7 @@ CFLAGS_Default := -fasm-blocks \\\n \t-mpascal-strings \\\n \t-Os \\\n \t-gdwarf-2 \\\n-\t-arch i386\n+\t-arch x86_64\n \n # Flags passed to only C files.\n CFLAGS_C_Default := \n@@ -68,7 +68,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := -arch i386 \\\n+LDFLAGS_Default := -arch x86_64 \\\n \t-L$(builddir)\n \n LIBS := -framework Carbon \\"}, {"sha": "4222c11b975285d51c2cddee340de670f748b671", "filename": "mk/libuv/x86_64/mac/src/rt/libuv/run-tests.target.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20946e697010f886cb9aec2390e083439b274123/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/20946e697010f886cb9aec2390e083439b274123/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Frun-tests.target.mk?ref=20946e697010f886cb9aec2390e083439b274123", "patch": "@@ -12,7 +12,7 @@ CFLAGS_Default := -fasm-blocks \\\n \t-mpascal-strings \\\n \t-Os \\\n \t-gdwarf-2 \\\n-\t-arch i386\n+\t-arch x86_64\n \n # Flags passed to only C files.\n CFLAGS_C_Default := \n@@ -104,7 +104,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := -arch i386 \\\n+LDFLAGS_Default := -arch x86_64 \\\n \t-L$(builddir)\n \n LIBS := -framework Carbon \\"}, {"sha": "1bb681f0ff9e5c70e0b88b63f621c5dc4f6b3d67", "filename": "mk/libuv/x86_64/mac/src/rt/libuv/uv.target.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20946e697010f886cb9aec2390e083439b274123/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/20946e697010f886cb9aec2390e083439b274123/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Fx86_64%2Fmac%2Fsrc%2Frt%2Flibuv%2Fuv.target.mk?ref=20946e697010f886cb9aec2390e083439b274123", "patch": "@@ -15,7 +15,7 @@ CFLAGS_Default := -fasm-blocks \\\n \t-mpascal-strings \\\n \t-Os \\\n \t-gdwarf-2 \\\n-\t-arch i386\n+\t-arch x86_64\n \n # Flags passed to only C files.\n CFLAGS_C_Default := \n@@ -120,7 +120,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n \n # End of this set of suffix rules\n ### Rules for final target.\n-LDFLAGS_Default := -arch i386 \\\n+LDFLAGS_Default := -arch x86_64 \\\n \t-L$(builddir)\n \n LIBS := -lm"}, {"sha": "312ea3bc566f678df5ddb8fd37ac7a74fc02e958", "filename": "mk/platform.mk", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20946e697010f886cb9aec2390e083439b274123/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/20946e697010f886cb9aec2390e083439b274123/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=20946e697010f886cb9aec2390e083439b274123", "patch": "@@ -66,13 +66,13 @@ ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n   # approaches welcome!\n   #\n   # NB: Currently GCC's optimizer breaks rustrt (task-comm-1 hangs) on Darwin.\n-  CFG_GCC_CFLAGS += -m64 #NDM\n-  CFG_CLANG_CFLAGS += -m64 #NDM\n+  CFG_GCC_CFLAGS += -m32\n+  CFG_CLANG_CFLAGS += -m32\n   ifeq ($(CFG_CPUTYPE), x86_64)\n-    CFG_GCCISH_CFLAGS += -arch x86_64 #NDM\n-    CFG_GCCISH_LINK_FLAGS += -arch x86_64 #NDM\n+    CFG_GCCISH_CFLAGS += -arch i386\n+    CFG_GCCISH_LINK_FLAGS += -arch i386\n   endif\n-  CFG_GCCISH_LINK_FLAGS += -m64\n+  CFG_GCCISH_LINK_FLAGS += -m32\n   CFG_DSYMUTIL := dsymutil\n   CFG_DEF_SUFFIX := .darwin.def\n   # Mac requires this flag to make rpath work"}, {"sha": "09b6dc202622127c7a795faa41152263924d28a6", "filename": "mk/rt.mk", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/20946e697010f886cb9aec2390e083439b274123/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/20946e697010f886cb9aec2390e083439b274123/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=20946e697010f886cb9aec2390e083439b274123", "patch": "@@ -32,8 +32,8 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/memory_region.cpp \\\n               rt/test/rust_test_harness.cpp \\\n               rt/test/rust_test_runtime.cpp \\\n-              rt/test/rust_test_util.cpp #NDM\n-#NDM              rt/arch/i386/context.cpp\n+              rt/test/rust_test_util.cpp \\\n+              rt/arch/i386/context.cpp\n \n RUNTIME_LL :=\n \n@@ -76,25 +76,30 @@ RUNTIME_HDR := rt/globals.h \\\n                rt/test/rust_test_harness.h \\\n                rt/test/rust_test_runtime.h \\\n                rt/test/rust_test_util.h \\\n+<<<<<<< HEAD\n                rt/arch/i386/context.h\n+=======\n+\t           rt/arch/i386/context.h\n+>>>>>>> start going back to an i386 build\n \n ifeq ($(CFG_WINDOWSY), 1)\n   LIBUV_OSTYPE := win\n-  LIBUV_ARCH := x86_64 #NDM\n+  LIBUV_ARCH := i386\n   LIBUV_LIB := rt/libuv/Default/obj.target/src/rt/libuv/libuv.a\n else ifeq ($(CFG_OSTYPE), apple-darwin)\n   LIBUV_OSTYPE := mac\n-  LIBUV_ARCH := x86_64 #NDM\n+  LIBUV_ARCH := i386\n   LIBUV_LIB := rt/libuv/Default/libuv.a\n else\n   LIBUV_OSTYPE := unix\n-  LIBUV_ARCH := x86_64 #NDM\n+  LIBUV_ARCH := i386\n   LIBUV_LIB := rt/libuv/Default/obj.target/src/rt/libuv/libuv.a\n endif\n \n RUNTIME_DEF := rt/rustrt$(CFG_DEF_SUFFIX)\n RUNTIME_INCS := -I $(S)src/rt/isaac -I $(S)src/rt/uthash \\\n-                -I $(S)src/rt/arch/i386 -I $(S)src/rt/libuv/include\n+                -I $(S)src/rt/arch/x86_64 \\\n+\t\t\t\t-I $(S)src/rt/libuv/include\n RUNTIME_OBJS := $(RUNTIME_CS:.cpp=.o) $(RUNTIME_LL:.ll=.o) $(RUNTIME_S:.S=.o)\n RUNTIME_LIBS := $(LIBUV_LIB)\n "}, {"sha": "5de63976edfe1f2d850de3c5d34d96806517190e", "filename": "src/etc/gyp-uv", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/20946e697010f886cb9aec2390e083439b274123/src%2Fetc%2Fgyp-uv", "raw_url": "https://github.com/rust-lang/rust/raw/20946e697010f886cb9aec2390e083439b274123/src%2Fetc%2Fgyp-uv", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgyp-uv?ref=20946e697010f886cb9aec2390e083439b274123", "patch": "@@ -40,14 +40,17 @@ do\n \n     # Comment out the gyp auto regeneration\n     for os in mac unix win; do\n-        sed -i \".save\" \\\n+        sed -i \"\" \\\n             -e 's/^\\(Makefile: $(srcdir)\\/src\\/rt\\/libuv\\/uv\\.gyp\\)/#\\1/' \\\n             mk/libuv/$ARCH/$os/Makefile\n \n-        sed -i \".save\" \\\n+        sed -i \"\" \\\n             -e 's/^\\(\t$(call do_cmd,regen_makefile)\\)/#\\1/' \\\n             mk/libuv/$ARCH/$os/Makefile\n-\n-        rm mk/libuv/$ARCH/$os/Makefile.save\n     done\n done\n+\n+# On Mac, GYP hardcodes a -arch i386 into the output. Fix that.\n+sed -i \"\" \\\n+    -e 's/-arch i386/-arch x86_64/' \\\n+    mk/libuv/x86_64/mac/src/rt/libuv/*.mk"}, {"sha": "66b4fd9d3a76142ebd55bf4b70e61be4f3926281", "filename": "src/rt/arch/x86_64/_context.S", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/20946e697010f886cb9aec2390e083439b274123/src%2Frt%2Farch%2Fx86_64%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/20946e697010f886cb9aec2390e083439b274123/src%2Frt%2Farch%2Fx86_64%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2F_context.S?ref=20946e697010f886cb9aec2390e083439b274123", "patch": "@@ -54,44 +54,44 @@ swap_registers:\n         // jump back into the old code.\n         \n         // Save instruction pointer:\n-        popl %rax\n-        movl %rax, 104(%rdi)\n+        pop %rax\n+        mov %rax, 104(%rdi)\n \n         // Save non-volatile integer registers:\n         //   (including RSP)\n-        movl %rbx,   0(%rdi)\n-        movl %rsp,   8(%rdi)\n-        movl %rbp,  16(%rdi)\n-        movl %r12,  24(%rdi)\n-        movl %r13,  32(%rdi)\n-        movl %r14,  40(%rdi)\n-        movl %r15,  48(%rdi)\n+        mov %rbx,   0(%rdi)\n+        mov %rsp,   8(%rdi)\n+        mov %rbp,  16(%rdi)\n+        mov %r12,  24(%rdi)\n+        mov %r13,  32(%rdi)\n+        mov %r14,  40(%rdi)\n+        mov %r15,  48(%rdi)\n \n         // Save non-volatile XMM registers:\n-        movl %xmm0, 56(%rdi)\n-        movl %xmm1, 64(%rdi)\n-        movl %xmm2, 72(%rdi)\n-        movl %xmm3, 80(%rdi)\n-        movl %xmm4, 88(%rdi)\n-        movl %xmm5, 96(%rdi)\n+        movapd %xmm0, 56(%rdi)\n+        movapd %xmm1, 64(%rdi)\n+        movapd %xmm2, 72(%rdi)\n+        movapd %xmm3, 80(%rdi)\n+        movapd %xmm4, 88(%rdi)\n+        movapd %xmm5, 96(%rdi)\n \n         // Restore non-volatile integer registers:\n         //   (including RSP)\n-        movl  0(%rsi), %rbx\n-        movl  8(%rsi), %rsp\n-        movl 16(%rsi), %rbp\n-        movl 24(%rsi), %r12\n-        movl 32(%rsi), %r13\n-        movl 40(%rsi), %r14\n-        movl 48(%rsi), %r15\n+        mov  0(%rsi), %rbx\n+        mov  8(%rsi), %rsp\n+        mov 16(%rsi), %rbp\n+        mov 24(%rsi), %r12\n+        mov 32(%rsi), %r13\n+        mov 40(%rsi), %r14\n+        mov 48(%rsi), %r15\n \n         // Restore non-volatile XMM registers:\n-        movl 56(%rsi), %xmm0\n-        movl 64(%rsi), %xmm1\n-        movl 72(%rsi), %xmm2\n-        movl 80(%rsi), %xmm3\n-        movl 88(%rsi), %xmm4\n-        movl 96(%rsi), %xmm5\n+        movapd 56(%rsi), %xmm0\n+        movapd 64(%rsi), %xmm1\n+        movapd 72(%rsi), %xmm2\n+        movapd 80(%rsi), %xmm3\n+        movapd 88(%rsi), %xmm4\n+        movapd 96(%rsi), %xmm5\n \n         // Jump to the instruction pointer\n         // found in regs:"}, {"sha": "60edf114b0a26cdcc8f24860d622117395da9e99", "filename": "src/rt/arch/x86_64/ccall.S", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20946e697010f886cb9aec2390e083439b274123/src%2Frt%2Farch%2Fx86_64%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/20946e697010f886cb9aec2390e083439b274123/src%2Frt%2Farch%2Fx86_64%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fccall.S?ref=20946e697010f886cb9aec2390e083439b274123", "patch": "@@ -11,11 +11,11 @@ _upcall_call_c_stack:\n .globl upcall_call_c_stack\n upcall_call_c_stack:\n #endif\n-    pushl %rbp\n-    movl %rsp,%rbp          // save rsp\n-    movl %rsi,%rsp          // switch stack\n-    calll *%rdi\n-    movl %rbp,%rsp          // would like to use \"leave\" but it's slower\n-    popl %rbp\n+    push %rbp\n+    mov %rsp,%rbp          // save rsp\n+    mov %rsi,%rsp          // switch stack\n+    call *%rdi\n+    mov %rbp,%rsp          // would like to use \"leave\" but it's slower\n+    pop %rbp\n     ret\n "}, {"sha": "0190261c7d3c02f66aef77b3160657f0ec550b9f", "filename": "src/rt/arch/x86_64/context.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20946e697010f886cb9aec2390e083439b274123/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/20946e697010f886cb9aec2390e083439b274123/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fcontext.cpp?ref=20946e697010f886cb9aec2390e083439b274123", "patch": "@@ -33,6 +33,6 @@ void context::call(void *f, void *arg, void *stack) {\n   *--sp = (uint64_t)arg;\n   *--sp = 0xdeadbeef;\n \n-  regs.regs[1] = (uint64_t)sp;\n+  regs.regs[RSP] = (uint64_t)sp;\n   regs.ip = (uint64_t)f;\n }"}, {"sha": "4341365fd5b086aa095defc62ff9b80ba27dfd1d", "filename": "src/rt/arch/x86_64/context.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20946e697010f886cb9aec2390e083439b274123/src%2Frt%2Farch%2Fx86_64%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/20946e697010f886cb9aec2390e083439b274123/src%2Frt%2Farch%2Fx86_64%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fcontext.h?ref=20946e697010f886cb9aec2390e083439b274123", "patch": "@@ -27,6 +27,8 @@ struct registers_t {\n \n class context {\n public:\n+  static const int RSP = 1;\n+\n   registers_t regs;\n \n   context();\n@@ -42,7 +44,7 @@ class context {\n   // function being called causes the task to fail, then we have to avoid\n   // leaking space on the C stack.\n   inline void *alloc_stack(size_t nbytes) {\n-    uint32_t bot = regs.esp;\n+    uint32_t bot = regs.regs[RSP];\n     uint32_t top = align_down(bot - nbytes);\n \n #ifdef HAVE_VALGRIND"}]}