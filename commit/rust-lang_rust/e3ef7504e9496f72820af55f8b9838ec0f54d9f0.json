{"sha": "e3ef7504e9496f72820af55f8b9838ec0f54d9f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZWY3NTA0ZTk0OTZmNzI4MjBhZjU1ZjhiOTgzOGVjMGY1NGQ5ZjA=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-22T01:41:52Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-06-22T01:41:52Z"}, "message": "Fix merge fallout", "tree": {"sha": "c83787522504ead0db25ae7fe11c214af9730df1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c83787522504ead0db25ae7fe11c214af9730df1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3ef7504e9496f72820af55f8b9838ec0f54d9f0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ef7504e9496f72820af55f8b9838ec0f54d9f0", "html_url": "https://github.com/rust-lang/rust/commit/e3ef7504e9496f72820af55f8b9838ec0f54d9f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/comments", "author": null, "committer": null, "parents": [{"sha": "fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4", "html_url": "https://github.com/rust-lang/rust/commit/fb6dc957d6fcd64f01fbaf43ed9b059ae695e5b4"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "4526af2da0f49a4b39d98c4d16f24cc7d3b061b2", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=e3ef7504e9496f72820af55f8b9838ec0f54d9f0", "patch": "@@ -92,7 +92,6 @@ impl FnType {\n \n     pub fn build_shim_ret(&self, bcx: block, arg_tys: &[Type], ret_def: bool,\n                           llargbundle: ValueRef, llretval: ValueRef) {\n-        for vec::eachi(self.attrs) |i, a| {\n         for self.attrs.iter().enumerate().advance |(i, a)| {\n             match *a {\n                 option::Some(attr) => {"}, {"sha": "8131fd009eedf23a0a71ffc409a340d70e14e74e", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=e3ef7504e9496f72820af55f8b9838ec0f54d9f0", "patch": "@@ -64,7 +64,7 @@ impl ABIInfo for X86_ABIInfo {\n         } else if !ret_def {\n             ret_ty = LLVMType {\n                 cast: false,\n-                ty: T_void()\n+                ty: Type::void()\n             };\n         }\n "}, {"sha": "4ab9cd6c95713542ed399194ef4beceab5ed9c8d", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=e3ef7504e9496f72820af55f8b9838ec0f54d9f0", "patch": "@@ -300,12 +300,11 @@ pub fn build_closure(bcx0: block,\n         let ret_true = match bcx.fcx.loop_ret {\n             Some((_, retptr)) => retptr,\n             None => match bcx.fcx.llretptr {\n-                None => C_null(T_ptr(T_nil())),\n-                Some(retptr) => retptr,\n+                None => C_null(Type::nil().ptr_to()),\n+                Some(retptr) => PointerCast(bcx, retptr, Type::nil().ptr_to()),\n             }\n         };\n-        let ret_casted = PointerCast(bcx, ret_true, Type::nil().ptr_to());\n-        let ret_datum = Datum {val: ret_casted, ty: ty::mk_nil(),\n+        let ret_datum = Datum {val: ret_true, ty: ty::mk_nil(),\n                                mode: ByRef(ZeroMem)};\n         env_vals.push(EnvValue {action: EnvRef,\n                                 datum: ret_datum});"}, {"sha": "3e3fdf686e34c186b1c5268d4fdf46d7793cc9d9", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=e3ef7504e9496f72820af55f8b9838ec0f54d9f0", "patch": "@@ -370,7 +370,6 @@ pub fn make_visit_glue(bcx: block, v: ValueRef, t: ty::t) {\n pub fn make_free_glue(bcx: block, v: ValueRef, t: ty::t) {\n     // NB: v0 is an *alias* of type t here, not a direct value.\n     let _icx = push_ctxt(\"make_free_glue\");\n-    let ccx = bcx.ccx();\n     let bcx = match ty::get(t).sty {\n       ty::ty_box(body_mt) => {\n         let v = Load(bcx, v);"}, {"sha": "ac5f53c243ef87ef17c8b44b9c1c605838cfdd1e", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=e3ef7504e9496f72820af55f8b9838ec0f54d9f0", "patch": "@@ -61,7 +61,6 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n \n     assert!(real_substs.tps.iter().all(|t| !ty::type_needs_infer(*t)));\n     let _icx = push_ctxt(\"monomorphic_fn\");\n-    let _icx = ccx.insn_ctxt(\"monomorphic_fn\");\n     let mut must_cast = false;\n     let substs = vec::map(real_substs.tps, |t| {\n         match normalize_for_monomorphization(ccx.tcx, *t) {"}, {"sha": "448ded6b70f2ab1215243f921ffc47a4554bff63", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ef7504e9496f72820af55f8b9838ec0f54d9f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=e3ef7504e9496f72820af55f8b9838ec0f54d9f0", "patch": "@@ -339,5 +339,5 @@ pub fn llvm_type_name(cx: &CrateContext,\n \n pub fn type_of_dtor(ccx: &mut CrateContext, self_ty: ty::t) -> Type {\n     let self_ty = type_of(ccx, self_ty).ptr_to();\n-    Type::func([self_ty], Type::void())\n+    Type::func([self_ty], &Type::void())\n }"}]}