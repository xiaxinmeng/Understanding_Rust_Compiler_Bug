{"sha": "1ec980d225fff2346a1a631a7ffc88b37e9e18af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYzk4MGQyMjVmZmYyMzQ2YTFhNjMxYTdmZmM4OGIzN2U5ZTE4YWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-27T00:16:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-27T00:16:45Z"}, "message": "Auto merge of #77247 - jonas-schievink:rollup-r6ehh8h, r=jonas-schievink\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #76917 (Add missing code examples on HashMap types)\n - #77107 (Enable const propagation into operands at mir_opt_level=2)\n - #77129 (Update cargo)\n - #77167 (Fix FIXME in core::num test: Check sign of zero in min/max tests.)\n - #77184 (Rust vec bench import specific rand::RngCore)\n - #77208 (Late link args order)\n - #77209 (Fix documentation highlighting in ty::BorrowKind)\n - #77231 (Move helper function for `missing_const_for_fn` out of rustc to clippy)\n - #77235 (pretty-print-reparse hack: Rename some variables for clarity)\n - #77243 (Test more attributes in test issue-75930-derive-cfg.rs)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "02b1a89eec28e551a9ea59cd072f66e4f733bf73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b1a89eec28e551a9ea59cd072f66e4f733bf73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec980d225fff2346a1a631a7ffc88b37e9e18af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec980d225fff2346a1a631a7ffc88b37e9e18af", "html_url": "https://github.com/rust-lang/rust/commit/1ec980d225fff2346a1a631a7ffc88b37e9e18af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec980d225fff2346a1a631a7ffc88b37e9e18af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "623fb90b5a1f324e0ec44085116bf858cef19a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/623fb90b5a1f324e0ec44085116bf858cef19a00", "html_url": "https://github.com/rust-lang/rust/commit/623fb90b5a1f324e0ec44085116bf858cef19a00"}, {"sha": "b7c05a3f69622f61d1694052d4437fdaf3c14e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c05a3f69622f61d1694052d4437fdaf3c14e54", "html_url": "https://github.com/rust-lang/rust/commit/b7c05a3f69622f61d1694052d4437fdaf3c14e54"}], "stats": {"total": 2009, "additions": 1852, "deletions": 157}, "files": [{"sha": "87d539f748c6b86f071e7e0508f54c655a9ae854", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -1333,9 +1333,6 @@ fn add_late_link_args(\n     crate_type: CrateType,\n     codegen_results: &CodegenResults,\n ) {\n-    if let Some(args) = sess.target.target.options.late_link_args.get(&flavor) {\n-        cmd.args(args);\n-    }\n     let any_dynamic_crate = crate_type == CrateType::Dylib\n         || codegen_results.crate_info.dependency_formats.iter().any(|(ty, list)| {\n             *ty == crate_type && list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n@@ -1349,6 +1346,9 @@ fn add_late_link_args(\n             cmd.args(args);\n         }\n     }\n+    if let Some(args) = sess.target.target.options.late_link_args.get(&flavor) {\n+        cmd.args(args);\n+    }\n }\n \n /// Add arbitrary \"post-link\" args defined by the target spec."}, {"sha": "d6cf68a900ce0c46ea104db722ef9032398cf4ed", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -682,25 +682,31 @@ pub enum BorrowKind {\n     /// implicit closure bindings. It is needed when the closure\n     /// is borrowing or mutating a mutable referent, e.g.:\n     ///\n-    ///    let x: &mut isize = ...;\n-    ///    let y = || *x += 5;\n+    /// ```\n+    /// let x: &mut isize = ...;\n+    /// let y = || *x += 5;\n+    /// ```\n     ///\n     /// If we were to try to translate this closure into a more explicit\n     /// form, we'd encounter an error with the code as written:\n     ///\n-    ///    struct Env { x: & &mut isize }\n-    ///    let x: &mut isize = ...;\n-    ///    let y = (&mut Env { &x }, fn_ptr);  // Closure is pair of env and fn\n-    ///    fn fn_ptr(env: &mut Env) { **env.x += 5; }\n+    /// ```\n+    /// struct Env { x: & &mut isize }\n+    /// let x: &mut isize = ...;\n+    /// let y = (&mut Env { &x }, fn_ptr);  // Closure is pair of env and fn\n+    /// fn fn_ptr(env: &mut Env) { **env.x += 5; }\n+    /// ```\n     ///\n     /// This is then illegal because you cannot mutate a `&mut` found\n     /// in an aliasable location. To solve, you'd have to translate with\n     /// an `&mut` borrow:\n     ///\n-    ///    struct Env { x: & &mut isize }\n-    ///    let x: &mut isize = ...;\n-    ///    let y = (&mut Env { &mut x }, fn_ptr); // changed from &x to &mut x\n-    ///    fn fn_ptr(env: &mut Env) { **env.x += 5; }\n+    /// ```\n+    /// struct Env { x: & &mut isize }\n+    /// let x: &mut isize = ...;\n+    /// let y = (&mut Env { &mut x }, fn_ptr); // changed from &x to &mut x\n+    /// fn fn_ptr(env: &mut Env) { **env.x += 5; }\n+    /// ```\n     ///\n     /// Now the assignment to `**env.x` is legal, but creating a\n     /// mutable pointer to `x` is not because `x` is not mutable. We"}, {"sha": "0f04ead94dd33e480f0ce0c59e10e84e99850f17", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -1046,9 +1046,9 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n     fn visit_operand(&mut self, operand: &mut Operand<'tcx>, location: Location) {\n         self.super_operand(operand, location);\n \n-        // Only const prop copies and moves on `mir_opt_level=3` as doing so\n-        // currently increases compile time.\n-        if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 3 {\n+        // Only const prop copies and moves on `mir_opt_level=2` as doing so\n+        // currently slightly increases compile time in some cases.\n+        if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n             self.propagate_operand(operand)\n         }\n     }\n@@ -1246,8 +1246,8 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             | TerminatorKind::InlineAsm { .. } => {}\n             // Every argument in our function calls have already been propagated in `visit_operand`.\n             //\n-            // NOTE: because LLVM codegen gives performance regressions with it, so this is gated\n-            // on `mir_opt_level=3`.\n+            // NOTE: because LLVM codegen gives slight performance regressions with it, so this is\n+            // gated on `mir_opt_level=2`.\n             TerminatorKind::Call { .. } => {}\n         }\n "}, {"sha": "850cafcf89811c32091393e7dba612fc2b0784b1", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -36,7 +36,6 @@ pub mod match_branches;\n pub mod no_landing_pads;\n pub mod nrvo;\n pub mod promote_consts;\n-pub mod qualify_min_const_fn;\n pub mod remove_noop_landing_pads;\n pub mod remove_unneeded_drops;\n pub mod required_consts;"}, {"sha": "d59dd4016a9f95609b22a7f56e70dd40518540d9", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -7,7 +7,7 @@\n #![feature(or_patterns)]\n \n use rustc_ast as ast;\n-use rustc_ast::token::{self, DelimToken, Nonterminal, Token, TokenKind};\n+use rustc_ast::token::{self, Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{self, Spacing, TokenStream, TokenTree};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n@@ -299,7 +299,7 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n     // FIXME(#43081): Avoid this pretty-print + reparse hack\n     let source = pprust::nonterminal_to_string(nt);\n     let filename = FileName::macro_expansion_source_code(&source);\n-    let tokens_for_real = parse_stream_from_source_str(filename, source, sess, Some(span));\n+    let reparsed_tokens = parse_stream_from_source_str(filename, source, sess, Some(span));\n \n     // During early phases of the compiler the AST could get modified\n     // directly (e.g., attributes added or removed) and the internal cache\n@@ -325,17 +325,17 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n     // modifications, including adding/removing typically non-semantic\n     // tokens such as extra braces and commas, don't happen.\n     if let Some(tokens) = tokens {\n-        if tokenstream_probably_equal_for_proc_macro(&tokens, &tokens_for_real, sess) {\n+        if tokenstream_probably_equal_for_proc_macro(&tokens, &reparsed_tokens, sess) {\n             return tokens;\n         }\n         info!(\n             \"cached tokens found, but they're not \\\"probably equal\\\", \\\n                 going with stringified version\"\n         );\n         info!(\"cached tokens: {:?}\", tokens);\n-        info!(\"reparsed tokens: {:?}\", tokens_for_real);\n+        info!(\"reparsed tokens: {:?}\", reparsed_tokens);\n     }\n-    tokens_for_real\n+    reparsed_tokens\n }\n \n // See comments in `Nonterminal::to_tokenstream` for why we care about\n@@ -344,8 +344,8 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n // This is otherwise the same as `eq_unspanned`, only recursing with a\n // different method.\n pub fn tokenstream_probably_equal_for_proc_macro(\n-    first: &TokenStream,\n-    other: &TokenStream,\n+    tokens: &TokenStream,\n+    reparsed_tokens: &TokenStream,\n     sess: &ParseSess,\n ) -> bool {\n     // When checking for `probably_eq`, we ignore certain tokens that aren't\n@@ -359,9 +359,6 @@ pub fn tokenstream_probably_equal_for_proc_macro(\n                 // The pretty printer tends to add trailing commas to\n                 // everything, and in particular, after struct fields.\n                 | token::Comma\n-                // The pretty printer emits `NoDelim` as whitespace.\n-                | token::OpenDelim(DelimToken::NoDelim)\n-                | token::CloseDelim(DelimToken::NoDelim)\n                 // The pretty printer collapses many semicolons into one.\n                 | token::Semi\n                 // We don't preserve leading `|` tokens in patterns, so\n@@ -460,10 +457,11 @@ pub fn tokenstream_probably_equal_for_proc_macro(\n \n     // Break tokens after we expand any nonterminals, so that we break tokens\n     // that are produced as a result of nonterminal expansion.\n-    let t1 = first.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n-    let t2 = other.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n+    let tokens = tokens.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n+    let reparsed_tokens =\n+        reparsed_tokens.trees().filter(semantic_tree).flat_map(expand_nt).flat_map(break_tokens);\n \n-    t1.eq_by(t2, |t1, t2| tokentree_probably_equal_for_proc_macro(&t1, &t2, sess))\n+    tokens.eq_by(reparsed_tokens, |t, rt| tokentree_probably_equal_for_proc_macro(&t, &rt, sess))\n }\n \n // See comments in `Nonterminal::to_tokenstream` for why we care about\n@@ -472,16 +470,20 @@ pub fn tokenstream_probably_equal_for_proc_macro(\n // This is otherwise the same as `eq_unspanned`, only recursing with a\n // different method.\n pub fn tokentree_probably_equal_for_proc_macro(\n-    first: &TokenTree,\n-    other: &TokenTree,\n+    token: &TokenTree,\n+    reparsed_token: &TokenTree,\n     sess: &ParseSess,\n ) -> bool {\n-    match (first, other) {\n-        (TokenTree::Token(token), TokenTree::Token(token2)) => {\n-            token_probably_equal_for_proc_macro(token, token2)\n+    match (token, reparsed_token) {\n+        (TokenTree::Token(token), TokenTree::Token(reparsed_token)) => {\n+            token_probably_equal_for_proc_macro(token, reparsed_token)\n         }\n-        (TokenTree::Delimited(_, delim, tts), TokenTree::Delimited(_, delim2, tts2)) => {\n-            delim == delim2 && tokenstream_probably_equal_for_proc_macro(&tts, &tts2, sess)\n+        (\n+            TokenTree::Delimited(_, delim, tokens),\n+            TokenTree::Delimited(_, reparsed_delim, reparsed_tokens),\n+        ) => {\n+            delim == reparsed_delim\n+                && tokenstream_probably_equal_for_proc_macro(tokens, reparsed_tokens, sess)\n         }\n         _ => false,\n     }"}, {"sha": "0234ff55f011823cc070e818d3812eee84b83107", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -23,6 +23,7 @@ pub fn opts() -> TargetOptions {\n         \"-lmsvcrt\".to_string(),\n         \"-lmingwex\".to_string(),\n         \"-lmingw32\".to_string(),\n+        \"-lgcc\".to_string(), // alas, mingw* libraries above depend on libgcc\n         // mingw's msvcrt is a weird hybrid import library and static library.\n         // And it seems that the linker fails to use import symbols from msvcrt\n         // that are required from functions in msvcrt in certain cases. For example\n@@ -41,8 +42,6 @@ pub fn opts() -> TargetOptions {\n         // the shared libgcc_s-dw2-1.dll. This is required to support\n         // unwinding across DLL boundaries.\n         \"-lgcc_s\".to_string(),\n-        \"-lgcc\".to_string(),\n-        \"-lkernel32\".to_string(),\n     ];\n     late_link_args_dynamic.insert(LinkerFlavor::Gcc, dynamic_unwind_libs.clone());\n     late_link_args_dynamic.insert(LinkerFlavor::Lld(LldFlavor::Ld), dynamic_unwind_libs);\n@@ -54,10 +53,6 @@ pub fn opts() -> TargetOptions {\n         // boundaries when unwinding across FFI boundaries.\n         \"-lgcc_eh\".to_string(),\n         \"-l:libpthread.a\".to_string(),\n-        \"-lgcc\".to_string(),\n-        // libpthread depends on libmsvcrt, so we need to link it *again*.\n-        \"-lmsvcrt\".to_string(),\n-        \"-lkernel32\".to_string(),\n     ];\n     late_link_args_static.insert(LinkerFlavor::Gcc, static_unwind_libs.clone());\n     late_link_args_static.insert(LinkerFlavor::Lld(LldFlavor::Ld), static_unwind_libs);"}, {"sha": "789ae3a20eabf4ff4857597fd7c0a9e9046dbfaa", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -1,4 +1,4 @@\n-use rand::prelude::*;\n+use rand::RngCore;\n use std::iter::{repeat, FromIterator};\n use test::{black_box, Bencher};\n "}, {"sha": "378c8af344b591b0d82631237391c06dc1a6ab90", "filename": "library/core/tests/num/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fmod.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -634,14 +634,18 @@ assume_usize_width! {\n macro_rules! test_float {\n     ($modname: ident, $fty: ty, $inf: expr, $neginf: expr, $nan: expr) => {\n         mod $modname {\n-            // FIXME(nagisa): these tests should test for sign of -0.0\n             #[test]\n             fn min() {\n                 assert_eq!((0.0 as $fty).min(0.0), 0.0);\n+                assert!((0.0 as $fty).min(0.0).is_sign_positive());\n                 assert_eq!((-0.0 as $fty).min(-0.0), -0.0);\n+                assert!((-0.0 as $fty).min(-0.0).is_sign_negative());\n                 assert_eq!((9.0 as $fty).min(9.0), 9.0);\n                 assert_eq!((-9.0 as $fty).min(0.0), -9.0);\n                 assert_eq!((0.0 as $fty).min(9.0), 0.0);\n+                assert!((0.0 as $fty).min(9.0).is_sign_positive());\n+                assert_eq!((-0.0 as $fty).min(9.0), -0.0);\n+                assert!((-0.0 as $fty).min(9.0).is_sign_negative());\n                 assert_eq!((-0.0 as $fty).min(-9.0), -9.0);\n                 assert_eq!(($inf as $fty).min(9.0), 9.0);\n                 assert_eq!((9.0 as $fty).min($inf), 9.0);\n@@ -660,11 +664,19 @@ macro_rules! test_float {\n             #[test]\n             fn max() {\n                 assert_eq!((0.0 as $fty).max(0.0), 0.0);\n+                assert!((0.0 as $fty).max(0.0).is_sign_positive());\n                 assert_eq!((-0.0 as $fty).max(-0.0), -0.0);\n+                assert!((-0.0 as $fty).max(-0.0).is_sign_negative());\n                 assert_eq!((9.0 as $fty).max(9.0), 9.0);\n                 assert_eq!((-9.0 as $fty).max(0.0), 0.0);\n+                assert!((-9.0 as $fty).max(0.0).is_sign_positive());\n+                assert_eq!((-9.0 as $fty).max(-0.0), -0.0);\n+                assert!((-9.0 as $fty).max(-0.0).is_sign_negative());\n                 assert_eq!((0.0 as $fty).max(9.0), 9.0);\n+                assert_eq!((0.0 as $fty).max(-9.0), 0.0);\n+                assert!((0.0 as $fty).max(-9.0).is_sign_positive());\n                 assert_eq!((-0.0 as $fty).max(-9.0), -0.0);\n+                assert!((-0.0 as $fty).max(-9.0).is_sign_negative());\n                 assert_eq!(($inf as $fty).max(9.0), $inf);\n                 assert_eq!((9.0 as $fty).max($inf), $inf);\n                 assert_eq!(($inf as $fty).max(-9.0), $inf);"}, {"sha": "1bb835e1eada1db802ac8244fd4c1378a27abecf", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 106, "deletions": 1, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -1102,6 +1102,16 @@ where\n /// documentation for more.\n ///\n /// [`iter`]: HashMap::iter\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.iter();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a, V: 'a> {\n     base: base::Iter<'a, K, V>,\n@@ -1129,6 +1139,16 @@ impl<K: Debug, V: Debug> fmt::Debug for Iter<'_, K, V> {\n /// documentation for more.\n ///\n /// [`iter_mut`]: HashMap::iter_mut\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.iter_mut();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     base: base::IterMut<'a, K, V>,\n@@ -1148,6 +1168,16 @@ impl<'a, K, V> IterMut<'a, K, V> {\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.into_iter();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n     base: base::IntoIter<K, V>,\n@@ -1167,6 +1197,16 @@ impl<K, V> IntoIter<K, V> {\n /// documentation for more.\n ///\n /// [`keys`]: HashMap::keys\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_keys = map.keys();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -1194,6 +1234,16 @@ impl<K: Debug, V> fmt::Debug for Keys<'_, K, V> {\n /// documentation for more.\n ///\n /// [`values`]: HashMap::values\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_values = map.values();\n+/// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -1221,6 +1271,16 @@ impl<K, V: Debug> fmt::Debug for Values<'_, K, V> {\n /// documentation for more.\n ///\n /// [`drain`]: HashMap::drain\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.drain();\n+/// ```\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, K: 'a, V: 'a> {\n     base: base::Drain<'a, K, V>,\n@@ -1239,6 +1299,18 @@ impl<'a, K, V> Drain<'a, K, V> {\n /// This `struct` is created by the [`drain_filter`] method on [`HashMap`].\n ///\n /// [`drain_filter`]: HashMap::drain_filter\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(hash_drain_filter)]\n+///\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter = map.drain_filter(|_k, v| *v % 2 == 0);\n+/// ```\n #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n pub struct DrainFilter<'a, K, V, F>\n where\n@@ -1253,6 +1325,16 @@ where\n /// documentation for more.\n ///\n /// [`values_mut`]: HashMap::values_mut\n+///\n+/// # Example\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_values = map.values_mut();\n+/// ```\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n@@ -1264,6 +1346,18 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n /// See its documentation for more.\n ///\n /// [`into_keys`]: HashMap::into_keys\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(map_into_keys_values)]\n+///\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_keys = map.into_keys();\n+/// ```\n #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n pub struct IntoKeys<K, V> {\n     inner: IntoIter<K, V>,\n@@ -1275,6 +1369,18 @@ pub struct IntoKeys<K, V> {\n /// See its documentation for more.\n ///\n /// [`into_values`]: HashMap::into_values\n+///\n+/// # Example\n+///\n+/// ```\n+/// #![feature(map_into_keys_values)]\n+///\n+/// use std::collections::HashMap;\n+///\n+/// let mut map = HashMap::new();\n+/// map.insert(\"a\", 1);\n+/// let iter_keys = map.into_values();\n+/// ```\n #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n pub struct IntoValues<K, V> {\n     inner: IntoIter<K, V>,\n@@ -1285,7 +1391,6 @@ pub struct IntoValues<K, V> {\n /// See the [`HashMap::raw_entry_mut`] docs for usage examples.\n ///\n /// [`HashMap::raw_entry_mut`]: HashMap::raw_entry_mut\n-\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawEntryBuilderMut<'a, K: 'a, V: 'a, S: 'a> {\n     map: &'a mut HashMap<K, V, S>,"}, {"sha": "a051d23bac0ae8935a4bb35dbe87f2fa4a10b173", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -1,29 +1,65 @@\n // check-pass\n-// compile-flags: -Z span-debug\n+// compile-flags: -Z span-debug --error-format human\n // aux-build:test-macros.rs\n \n // Regression test for issue #75930\n // Tests that we cfg-strip all targets before invoking\n // a derive macro\n+// We need '--error-format human' to stop compiletest from\n+// trying to interpret proc-macro output as JSON messages\n+// (a pretty-printed struct may cause a line to start with '{' )\n+// FIXME: We currently lose spans here (see issue #43081)\n \n #[macro_use]\n extern crate test_macros;\n \n+#[print_helper(a)]\n+#[cfg_attr(not(FALSE), allow(dead_code))]\n+#[print_attr]\n #[derive(Print)]\n+#[print_helper(b)]\n struct Foo<#[cfg(FALSE)] A, B> {\n     #[cfg(FALSE)] first: String,\n-    second: bool,\n+    #[cfg_attr(FALSE, deny(warnings))] second: bool,\n     third: [u8; {\n         #[cfg(FALSE)] struct Bar;\n         #[cfg(not(FALSE))] struct Inner;\n         #[cfg(FALSE)] let a = 25;\n         match true {\n             #[cfg(FALSE)] true => {},\n-            false => {},\n+            #[cfg_attr(not(FALSE), allow(warnings))] false => {},\n             _ => {}\n         };\n+\n+        #[print_helper(should_be_removed)]\n+        fn removed_fn() {\n+            #![cfg(FALSE)]\n+        }\n+\n+        #[print_helper(c)] #[cfg(not(FALSE))] fn kept_fn() {\n+            #![cfg(not(FALSE))]\n+            let my_val = true;\n+        }\n+\n+        enum TupleEnum {\n+            Foo(\n+                #[cfg(FALSE)] u8,\n+                #[cfg(FALSE)] bool,\n+                #[cfg(not(FALSE))] i32,\n+                #[cfg(FALSE)] String, u8\n+            )\n+        }\n+\n+        struct TupleStruct(\n+            #[cfg(FALSE)] String,\n+            #[cfg(not(FALSE))] i32,\n+            #[cfg(FALSE)] bool,\n+            u8\n+        );\n+\n         0\n     }],\n+    #[print_helper(d)]\n     fourth: B\n }\n "}, {"sha": "f3daa56a49c454e5c4bc33daf8c3efa75b0c822c", "filename": "src/test/ui/proc-macro/issue-75930-derive-cfg.stdout", "status": "modified", "additions": 1613, "deletions": 3, "changes": 1616, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75930-derive-cfg.stdout?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -1,13 +1,1288 @@\n-PRINT-DERIVE INPUT (DISPLAY): struct Foo < B >\n+PRINT-ATTR INPUT (DISPLAY): #[allow(dead_code)] #[derive(Print)] #[print_helper(b)] #[print_helper(a)]\n+struct Foo < #[cfg(FALSE)] A, B >\n+{\n+    #[cfg(FALSE)] first : String, #[cfg_attr(FALSE, deny(warnings))] second :\n+    bool, third :\n+    [u8 ;\n+     {\n+         #[cfg(FALSE)] struct Bar ; #[cfg(not(FALSE))] struct Inner ;\n+         #[cfg(FALSE)] let a = 25 ; match true\n+         {\n+             #[cfg(FALSE)] true => { },\n+             #[cfg_attr(not(FALSE), allow(warnings))] false => { }, _ => { }\n+         } ; #[print_helper(should_be_removed)] fn removed_fn()\n+         { # ! [cfg(FALSE)] } #[print_helper(c)] #[cfg(not(FALSE))] fn\n+         kept_fn() { # ! [cfg(not(FALSE))] let my_val = true ; } enum\n+         TupleEnum\n+         {\n+             Foo(#[cfg(FALSE)] u8, #[cfg(FALSE)] bool, #[cfg(not(FALSE))] i32,\n+                 #[cfg(FALSE)] String, u8)\n+         } struct\n+         TupleStruct(#[cfg(FALSE)] String, #[cfg(not(FALSE))] i32,\n+                     #[cfg(FALSE)] bool, u8) ; 0\n+     }], #[print_helper(d)] fourth : B\n+}\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/issue-75930-derive-cfg.rs:17:24: 17:40 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"allow\",\n+                span: $DIR/issue-75930-derive-cfg.rs:17:24: 17:29 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"dead_code\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:17:30: 17:39 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:17:29: 17:40 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75930-derive-cfg.rs:17:24: 17:40 (#0),\n+    },\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/issue-75930-derive-cfg.rs:19:1: 19:17 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"derive\",\n+                span: $DIR/issue-75930-derive-cfg.rs:19:3: 19:9 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"Print\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:19:10: 19:15 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:19:9: 19:16 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75930-derive-cfg.rs:19:1: 19:17 (#0),\n+    },\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/issue-75930-derive-cfg.rs:20:1: 20:19 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"print_helper\",\n+                span: $DIR/issue-75930-derive-cfg.rs:20:3: 20:15 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"b\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:20:16: 20:17 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:20:15: 20:18 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75930-derive-cfg.rs:20:1: 20:19 (#0),\n+    },\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/issue-75930-derive-cfg.rs:16:1: 16:19 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"print_helper\",\n+                span: $DIR/issue-75930-derive-cfg.rs:16:3: 16:15 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"a\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:16:16: 16:17 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:16:15: 16:18 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75930-derive-cfg.rs:16:1: 16:19 (#0),\n+    },\n+    Ident {\n+        ident: \"struct\",\n+        span: $DIR/issue-75930-derive-cfg.rs:21:1: 21:7 (#0),\n+    },\n+    Ident {\n+        ident: \"Foo\",\n+        span: $DIR/issue-75930-derive-cfg.rs:21:8: 21:11 (#0),\n+    },\n+    Punct {\n+        ch: '<',\n+        spacing: Joint,\n+        span: $DIR/issue-75930-derive-cfg.rs:21:11: 21:12 (#0),\n+    },\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/issue-75930-derive-cfg.rs:21:12: 21:13 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"cfg\",\n+                span: $DIR/issue-75930-derive-cfg.rs:21:14: 21:17 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"FALSE\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:21:18: 21:23 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:21:17: 21:24 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75930-derive-cfg.rs:21:13: 21:25 (#0),\n+    },\n+    Ident {\n+        ident: \"A\",\n+        span: $DIR/issue-75930-derive-cfg.rs:21:26: 21:27 (#0),\n+    },\n+    Punct {\n+        ch: ',',\n+        spacing: Alone,\n+        span: $DIR/issue-75930-derive-cfg.rs:21:27: 21:28 (#0),\n+    },\n+    Ident {\n+        ident: \"B\",\n+        span: $DIR/issue-75930-derive-cfg.rs:21:29: 21:30 (#0),\n+    },\n+    Punct {\n+        ch: '>',\n+        spacing: Alone,\n+        span: $DIR/issue-75930-derive-cfg.rs:21:30: 21:31 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/issue-75930-derive-cfg.rs:22:5: 22:6 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"cfg\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:22:7: 22:10 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"FALSE\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:22:11: 22:16 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/issue-75930-derive-cfg.rs:22:10: 22:17 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:22:6: 22:18 (#0),\n+            },\n+            Ident {\n+                ident: \"first\",\n+                span: $DIR/issue-75930-derive-cfg.rs:22:19: 22:24 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/issue-75930-derive-cfg.rs:22:24: 22:25 (#0),\n+            },\n+            Ident {\n+                ident: \"String\",\n+                span: $DIR/issue-75930-derive-cfg.rs:22:26: 22:32 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/issue-75930-derive-cfg.rs:22:32: 22:33 (#0),\n+            },\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/issue-75930-derive-cfg.rs:23:5: 23:6 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"cfg_attr\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:23:7: 23:15 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"FALSE\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:23:16: 23:21 (#0),\n+                            },\n+                            Punct {\n+                                ch: ',',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:23:21: 23:22 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"deny\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:23:23: 23:27 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Parenthesis,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"warnings\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:23:28: 23:36 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:23:27: 23:37 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/issue-75930-derive-cfg.rs:23:15: 23:38 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:23:6: 23:39 (#0),\n+            },\n+            Ident {\n+                ident: \"second\",\n+                span: $DIR/issue-75930-derive-cfg.rs:23:40: 23:46 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/issue-75930-derive-cfg.rs:23:46: 23:47 (#0),\n+            },\n+            Ident {\n+                ident: \"bool\",\n+                span: $DIR/issue-75930-derive-cfg.rs:23:48: 23:52 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/issue-75930-derive-cfg.rs:23:52: 23:53 (#0),\n+            },\n+            Ident {\n+                ident: \"third\",\n+                span: $DIR/issue-75930-derive-cfg.rs:24:5: 24:10 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/issue-75930-derive-cfg.rs:24:10: 24:11 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"u8\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:24:13: 24:15 (#0),\n+                    },\n+                    Punct {\n+                        ch: ';',\n+                        spacing: Alone,\n+                        span: $DIR/issue-75930-derive-cfg.rs:24:15: 24:16 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Brace,\n+                        stream: TokenStream [\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:25:9: 25:10 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"cfg\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:25:11: 25:14 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"FALSE\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:25:15: 25:20 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:25:14: 25:21 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:25:10: 25:22 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"struct\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:25:23: 25:29 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"Bar\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:25:30: 25:33 (#0),\n+                            },\n+                            Punct {\n+                                ch: ';',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:25:33: 25:34 (#0),\n+                            },\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:26:9: 26:10 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"cfg\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:26:11: 26:14 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"not\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:26:15: 26:18 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"FALSE\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:26:19: 26:24 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:26:18: 26:25 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:26:14: 26:26 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:26:10: 26:27 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"struct\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:26:28: 26:34 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"Inner\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:26:35: 26:40 (#0),\n+                            },\n+                            Punct {\n+                                ch: ';',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:26:40: 26:41 (#0),\n+                            },\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:27:9: 27:10 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"cfg\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:27:11: 27:14 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"FALSE\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:27:15: 27:20 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:27:14: 27:21 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:27:10: 27:22 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"let\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:27:23: 27:26 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"a\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:27:27: 27:28 (#0),\n+                            },\n+                            Punct {\n+                                ch: '=',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:27:29: 27:30 (#0),\n+                            },\n+                            Literal {\n+                                kind: Integer,\n+                                symbol: \"25\",\n+                                suffix: None,\n+                                span: $DIR/issue-75930-derive-cfg.rs:27:31: 27:33 (#0),\n+                            },\n+                            Punct {\n+                                ch: ';',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:27:33: 27:34 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"match\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:28:9: 28:14 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"true\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:28:15: 28:19 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Brace,\n+                                stream: TokenStream [\n+                                    Punct {\n+                                        ch: '#',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:29:13: 29:14 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Bracket,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"cfg\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:29:15: 29:18 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"FALSE\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:29:19: 29:24 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:29:18: 29:25 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:29:14: 29:26 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"true\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:29:27: 29:31 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '=',\n+                                        spacing: Joint,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:29:32: 29:34 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '>',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:29:32: 29:34 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Brace,\n+                                        stream: TokenStream [],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:29:35: 29:37 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ',',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:29:37: 29:38 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '#',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:30:13: 30:14 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Bracket,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"cfg_attr\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:30:15: 30:23 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"not\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:30:24: 30:27 (#0),\n+                                                    },\n+                                                    Group {\n+                                                        delimiter: Parenthesis,\n+                                                        stream: TokenStream [\n+                                                            Ident {\n+                                                                ident: \"FALSE\",\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:30:28: 30:33 (#0),\n+                                                            },\n+                                                        ],\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:30:27: 30:34 (#0),\n+                                                    },\n+                                                    Punct {\n+                                                        ch: ',',\n+                                                        spacing: Alone,\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:30:34: 30:35 (#0),\n+                                                    },\n+                                                    Ident {\n+                                                        ident: \"allow\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:30:36: 30:41 (#0),\n+                                                    },\n+                                                    Group {\n+                                                        delimiter: Parenthesis,\n+                                                        stream: TokenStream [\n+                                                            Ident {\n+                                                                ident: \"warnings\",\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:30:42: 30:50 (#0),\n+                                                            },\n+                                                        ],\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:30:41: 30:51 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:30:23: 30:52 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:30:14: 30:53 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"false\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:30:54: 30:59 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '=',\n+                                        spacing: Joint,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:30:60: 30:62 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '>',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:30:60: 30:62 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Brace,\n+                                        stream: TokenStream [],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:30:63: 30:65 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ',',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:30:65: 30:66 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"_\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:31:13: 31:14 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '=',\n+                                        spacing: Joint,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:31:15: 31:17 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '>',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:31:15: 31:17 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Brace,\n+                                        stream: TokenStream [],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:31:18: 31:20 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:28:20: 32:10 (#0),\n+                            },\n+                            Punct {\n+                                ch: ';',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:32:10: 32:11 (#0),\n+                            },\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:34:9: 34:10 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"print_helper\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:34:11: 34:23 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"should_be_removed\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:34:24: 34:41 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:34:23: 34:42 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:34:10: 34:43 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"fn\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:35:9: 35:11 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"removed_fn\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:35:12: 35:22 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Parenthesis,\n+                                stream: TokenStream [],\n+                                span: $DIR/issue-75930-derive-cfg.rs:35:22: 35:24 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Brace,\n+                                stream: TokenStream [\n+                                    Punct {\n+                                        ch: '#',\n+                                        spacing: Joint,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:36:13: 36:14 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '!',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:36:14: 36:15 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Bracket,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"cfg\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:36:16: 36:19 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"FALSE\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:36:20: 36:25 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:36:19: 36:26 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:36:15: 36:27 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:35:25: 37:10 (#0),\n+                            },\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:39:9: 39:10 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"print_helper\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:39:11: 39:23 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"c\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:39:24: 39:25 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:39:23: 39:26 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:39:10: 39:27 (#0),\n+                            },\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:39:28: 39:29 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"cfg\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:39:30: 39:33 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"not\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:39:34: 39:37 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"FALSE\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:39:38: 39:43 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:39:37: 39:44 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:39:33: 39:45 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:39:29: 39:46 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"fn\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:39:47: 39:49 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"kept_fn\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:39:50: 39:57 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Parenthesis,\n+                                stream: TokenStream [],\n+                                span: $DIR/issue-75930-derive-cfg.rs:39:57: 39:59 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Brace,\n+                                stream: TokenStream [\n+                                    Punct {\n+                                        ch: '#',\n+                                        spacing: Joint,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:40:13: 40:14 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '!',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:40:14: 40:15 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Bracket,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"cfg\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:40:16: 40:19 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"not\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:40:20: 40:23 (#0),\n+                                                    },\n+                                                    Group {\n+                                                        delimiter: Parenthesis,\n+                                                        stream: TokenStream [\n+                                                            Ident {\n+                                                                ident: \"FALSE\",\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:40:24: 40:29 (#0),\n+                                                            },\n+                                                        ],\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:40:23: 40:30 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:40:19: 40:31 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:40:15: 40:32 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"let\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:41:13: 41:16 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"my_val\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:41:17: 41:23 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '=',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:41:24: 41:25 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"true\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:41:26: 41:30 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ';',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:41:30: 41:31 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:39:60: 42:10 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"enum\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:44:9: 44:13 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"TupleEnum\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:44:14: 44:23 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Brace,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"Foo\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:45:13: 45:16 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Punct {\n+                                                ch: '#',\n+                                                spacing: Alone,\n+                                                span: $DIR/issue-75930-derive-cfg.rs:46:17: 46:18 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Bracket,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"cfg\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:46:19: 46:22 (#0),\n+                                                    },\n+                                                    Group {\n+                                                        delimiter: Parenthesis,\n+                                                        stream: TokenStream [\n+                                                            Ident {\n+                                                                ident: \"FALSE\",\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:46:23: 46:28 (#0),\n+                                                            },\n+                                                        ],\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:46:22: 46:29 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:46:18: 46:30 (#0),\n+                                            },\n+                                            Ident {\n+                                                ident: \"u8\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:46:31: 46:33 (#0),\n+                                            },\n+                                            Punct {\n+                                                ch: ',',\n+                                                spacing: Alone,\n+                                                span: $DIR/issue-75930-derive-cfg.rs:46:33: 46:34 (#0),\n+                                            },\n+                                            Punct {\n+                                                ch: '#',\n+                                                spacing: Alone,\n+                                                span: $DIR/issue-75930-derive-cfg.rs:47:17: 47:18 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Bracket,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"cfg\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:47:19: 47:22 (#0),\n+                                                    },\n+                                                    Group {\n+                                                        delimiter: Parenthesis,\n+                                                        stream: TokenStream [\n+                                                            Ident {\n+                                                                ident: \"FALSE\",\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:47:23: 47:28 (#0),\n+                                                            },\n+                                                        ],\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:47:22: 47:29 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:47:18: 47:30 (#0),\n+                                            },\n+                                            Ident {\n+                                                ident: \"bool\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:47:31: 47:35 (#0),\n+                                            },\n+                                            Punct {\n+                                                ch: ',',\n+                                                spacing: Alone,\n+                                                span: $DIR/issue-75930-derive-cfg.rs:47:35: 47:36 (#0),\n+                                            },\n+                                            Punct {\n+                                                ch: '#',\n+                                                spacing: Alone,\n+                                                span: $DIR/issue-75930-derive-cfg.rs:48:17: 48:18 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Bracket,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"cfg\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:48:19: 48:22 (#0),\n+                                                    },\n+                                                    Group {\n+                                                        delimiter: Parenthesis,\n+                                                        stream: TokenStream [\n+                                                            Ident {\n+                                                                ident: \"not\",\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:48:23: 48:26 (#0),\n+                                                            },\n+                                                            Group {\n+                                                                delimiter: Parenthesis,\n+                                                                stream: TokenStream [\n+                                                                    Ident {\n+                                                                        ident: \"FALSE\",\n+                                                                        span: $DIR/issue-75930-derive-cfg.rs:48:27: 48:32 (#0),\n+                                                                    },\n+                                                                ],\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:48:26: 48:33 (#0),\n+                                                            },\n+                                                        ],\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:48:22: 48:34 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:48:18: 48:35 (#0),\n+                                            },\n+                                            Ident {\n+                                                ident: \"i32\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:48:36: 48:39 (#0),\n+                                            },\n+                                            Punct {\n+                                                ch: ',',\n+                                                spacing: Alone,\n+                                                span: $DIR/issue-75930-derive-cfg.rs:48:39: 48:40 (#0),\n+                                            },\n+                                            Punct {\n+                                                ch: '#',\n+                                                spacing: Alone,\n+                                                span: $DIR/issue-75930-derive-cfg.rs:49:17: 49:18 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Bracket,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"cfg\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:49:19: 49:22 (#0),\n+                                                    },\n+                                                    Group {\n+                                                        delimiter: Parenthesis,\n+                                                        stream: TokenStream [\n+                                                            Ident {\n+                                                                ident: \"FALSE\",\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:49:23: 49:28 (#0),\n+                                                            },\n+                                                        ],\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:49:22: 49:29 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:49:18: 49:30 (#0),\n+                                            },\n+                                            Ident {\n+                                                ident: \"String\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:49:31: 49:37 (#0),\n+                                            },\n+                                            Punct {\n+                                                ch: ',',\n+                                                spacing: Alone,\n+                                                span: $DIR/issue-75930-derive-cfg.rs:49:37: 49:38 (#0),\n+                                            },\n+                                            Ident {\n+                                                ident: \"u8\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:49:39: 49:41 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:45:16: 50:14 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:44:24: 51:10 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"struct\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:53:9: 53:15 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"TupleStruct\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:53:16: 53:27 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Parenthesis,\n+                                stream: TokenStream [\n+                                    Punct {\n+                                        ch: '#',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:54:13: 54:14 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Bracket,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"cfg\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:54:15: 54:18 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"FALSE\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:54:19: 54:24 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:54:18: 54:25 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:54:14: 54:26 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"String\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:54:27: 54:33 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ',',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:54:33: 54:34 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '#',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:55:13: 55:14 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Bracket,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"cfg\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:55:15: 55:18 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"not\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:55:19: 55:22 (#0),\n+                                                    },\n+                                                    Group {\n+                                                        delimiter: Parenthesis,\n+                                                        stream: TokenStream [\n+                                                            Ident {\n+                                                                ident: \"FALSE\",\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:55:23: 55:28 (#0),\n+                                                            },\n+                                                        ],\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:55:22: 55:29 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:55:18: 55:30 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:55:14: 55:31 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"i32\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:55:32: 55:35 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ',',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:55:35: 55:36 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '#',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:56:13: 56:14 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Bracket,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"cfg\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:56:15: 56:18 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"FALSE\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:56:19: 56:24 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:56:18: 56:25 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:56:14: 56:26 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"bool\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:56:27: 56:31 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ',',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:56:31: 56:32 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"u8\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:57:13: 57:15 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:53:27: 58:10 (#0),\n+                            },\n+                            Punct {\n+                                ch: ';',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:58:10: 58:11 (#0),\n+                            },\n+                            Literal {\n+                                kind: Integer,\n+                                symbol: \"0\",\n+                                suffix: None,\n+                                span: $DIR/issue-75930-derive-cfg.rs:60:9: 60:10 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/issue-75930-derive-cfg.rs:24:17: 61:6 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:24:12: 61:7 (#0),\n+            },\n+            Punct {\n+                ch: ',',\n+                spacing: Alone,\n+                span: $DIR/issue-75930-derive-cfg.rs:61:7: 61:8 (#0),\n+            },\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/issue-75930-derive-cfg.rs:62:5: 62:6 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_helper\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:62:7: 62:19 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"d\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:62:20: 62:21 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/issue-75930-derive-cfg.rs:62:19: 62:22 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:62:6: 62:23 (#0),\n+            },\n+            Ident {\n+                ident: \"fourth\",\n+                span: $DIR/issue-75930-derive-cfg.rs:63:5: 63:11 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/issue-75930-derive-cfg.rs:63:11: 63:12 (#0),\n+            },\n+            Ident {\n+                ident: \"B\",\n+                span: $DIR/issue-75930-derive-cfg.rs:63:13: 63:14 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75930-derive-cfg.rs:21:32: 64:2 (#0),\n+    },\n+]\n+PRINT-DERIVE INPUT (DISPLAY): #[allow(dead_code)] #[print_helper(b)] #[print_helper(a)] struct Foo < B >\n {\n     second : bool, third :\n     [u8 ;\n      {\n          #[cfg(not(FALSE))] struct Inner ; match true\n-         { false => { } _ => { } } ; 0\n-     }], fourth : B,\n+         { #[allow(warnings)] false => { } _ => { } } ; #[print_helper(c)]\n+         #[cfg(not(FALSE))] fn kept_fn()\n+         { # ! [cfg(not(FALSE))] let my_val = true ; } enum TupleEnum\n+         { Foo(#[cfg(not(FALSE))] i32, u8), } struct\n+         TupleStruct(#[cfg(not(FALSE))] i32, u8) ; 0\n+     }], #[print_helper(d)] fourth : B,\n }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"allow\",\n+                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"dead_code\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"print_helper\",\n+                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"b\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+    },\n+    Punct {\n+        ch: '#',\n+        spacing: Alone,\n+        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+    },\n+    Group {\n+        delimiter: Bracket,\n+        stream: TokenStream [\n+            Ident {\n+                ident: \"print_helper\",\n+                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"a\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+    },\n     Ident {\n         ident: \"struct\",\n         span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n@@ -134,6 +1409,31 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n                             Group {\n                                 delimiter: Brace,\n                                 stream: TokenStream [\n+                                    Punct {\n+                                        ch: '#',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Bracket,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"allow\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"warnings\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n                                     Ident {\n                                         ident: \"false\",\n                                         span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n@@ -180,6 +1480,291 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n                                 spacing: Alone,\n                                 span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n                             },\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"print_helper\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"c\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Punct {\n+                                ch: '#',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Bracket,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"cfg\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"not\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"FALSE\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"fn\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"kept_fn\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Parenthesis,\n+                                stream: TokenStream [],\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Brace,\n+                                stream: TokenStream [\n+                                    Punct {\n+                                        ch: '#',\n+                                        spacing: Joint,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '!',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Bracket,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"cfg\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"not\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                    },\n+                                                    Group {\n+                                                        delimiter: Parenthesis,\n+                                                        stream: TokenStream [\n+                                                            Ident {\n+                                                                ident: \"FALSE\",\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                            },\n+                                                        ],\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"let\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"my_val\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: '=',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"true\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ';',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"enum\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"TupleEnum\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Brace,\n+                                stream: TokenStream [\n+                                    Ident {\n+                                        ident: \"Foo\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Parenthesis,\n+                                        stream: TokenStream [\n+                                            Punct {\n+                                                ch: '#',\n+                                                spacing: Alone,\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Bracket,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"cfg\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                    },\n+                                                    Group {\n+                                                        delimiter: Parenthesis,\n+                                                        stream: TokenStream [\n+                                                            Ident {\n+                                                                ident: \"not\",\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                            },\n+                                                            Group {\n+                                                                delimiter: Parenthesis,\n+                                                                stream: TokenStream [\n+                                                                    Ident {\n+                                                                        ident: \"FALSE\",\n+                                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                                    },\n+                                                                ],\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                            },\n+                                                        ],\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                            Ident {\n+                                                ident: \"i32\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                            Punct {\n+                                                ch: ',',\n+                                                spacing: Alone,\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                            Ident {\n+                                                ident: \"u8\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ',',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"struct\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Ident {\n+                                ident: \"TupleStruct\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Group {\n+                                delimiter: Parenthesis,\n+                                stream: TokenStream [\n+                                    Punct {\n+                                        ch: '#',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Group {\n+                                        delimiter: Bracket,\n+                                        stream: TokenStream [\n+                                            Ident {\n+                                                ident: \"cfg\",\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                            Group {\n+                                                delimiter: Parenthesis,\n+                                                stream: TokenStream [\n+                                                    Ident {\n+                                                        ident: \"not\",\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                    },\n+                                                    Group {\n+                                                        delimiter: Parenthesis,\n+                                                        stream: TokenStream [\n+                                                            Ident {\n+                                                                ident: \"FALSE\",\n+                                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                            },\n+                                                        ],\n+                                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                                    },\n+                                                ],\n+                                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                            },\n+                                        ],\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"i32\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Punct {\n+                                        ch: ',',\n+                                        spacing: Alone,\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                    Ident {\n+                                        ident: \"u8\",\n+                                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                                    },\n+                                ],\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                            Punct {\n+                                ch: ';',\n+                                spacing: Alone,\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n                             Literal {\n                                 kind: Integer,\n                                 symbol: \"0\",\n@@ -197,6 +1782,31 @@ PRINT-DERIVE INPUT (DEBUG): TokenStream [\n                 spacing: Alone,\n                 span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n             },\n+            Punct {\n+                ch: '#',\n+                spacing: Alone,\n+                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+            },\n+            Group {\n+                delimiter: Bracket,\n+                stream: TokenStream [\n+                    Ident {\n+                        ident: \"print_helper\",\n+                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                    },\n+                    Group {\n+                        delimiter: Parenthesis,\n+                        stream: TokenStream [\n+                            Ident {\n+                                ident: \"d\",\n+                                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                            },\n+                        ],\n+                        span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),\n+            },\n             Ident {\n                 ident: \"fourth\",\n                 span: $DIR/issue-75930-derive-cfg.rs:1:1: 1:1 (#0),"}, {"sha": "05c611ae3c4255b7a2bcf4fcfa65b20286a07839", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -1 +1 @@\n-Subproject commit 8777a6b1e8834899f51b7e09cc9b8d85b2417110\n+Subproject commit 05c611ae3c4255b7a2bcf4fcfa65b20286a07839"}, {"sha": "c3ff34e6e1eedd86002c0fc3151c5208c1ff471b", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -6,6 +6,7 @@\n #![feature(concat_idents)]\n #![feature(crate_visibility_modifier)]\n #![feature(drain_filter)]\n+#![feature(in_band_lifetimes)]\n #![feature(or_patterns)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "e5f7cc51111203756298c993bc47be8e4bc4ff3f", "filename": "src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n-use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n+use crate::utils::qualify_min_const_fn::is_min_const_fn;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::Span;\n use rustc_typeck::hir_ty_to_ty;"}, {"sha": "96d9905027b628e2f2c14ba8f0d20f2b2d77869f", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -20,6 +20,7 @@ pub mod paths;\n pub mod ptr;\n pub mod sugg;\n pub mod usage;\n+pub mod qualify_min_const_fn;\n \n pub use self::attrs::*;\n pub use self::diagnostics::*;"}, {"sha": "6809b1fa88d35fa68f6e82597f18e64ba40c1cc3", "filename": "src/tools/clippy/clippy_lints/src/utils/qualify_min_const_fn.rs", "status": "renamed", "additions": 29, "deletions": 101, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/1ec980d225fff2346a1a631a7ffc88b37e9e18af/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec980d225fff2346a1a631a7ffc88b37e9e18af/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fqualify_min_const_fn.rs?ref=1ec980d225fff2346a1a631a7ffc88b37e9e18af", "patch": "@@ -3,22 +3,14 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, adjustment::PointerCast, Ty, TyCtxt};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym};\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use std::borrow::Cow;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -> McfResult {\n-    // Prevent const trait methods from being annotated as `stable`.\n-    if tcx.features().staged_api {\n-        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-        if crate::const_eval::is_parent_const_impl_raw(tcx, hir_id) {\n-            return Err((body.span, \"trait methods cannot be stable const fn\".into()));\n-        }\n-    }\n-\n     let mut current = def_id;\n     loop {\n         let predicates = tcx.predicates_of(current);\n@@ -32,27 +24,20 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n                 | ty::PredicateAtom::ConstEquate(..)\n                 | ty::PredicateAtom::TypeWellFormedFromEnv(..) => continue,\n                 ty::PredicateAtom::ObjectSafe(_) => {\n-                    bug!(\"object safe predicate on function: {:#?}\", predicate)\n+                    panic!(\"object safe predicate on function: {:#?}\", predicate)\n                 }\n                 ty::PredicateAtom::ClosureKind(..) => {\n-                    bug!(\"closure kind predicate on function: {:#?}\", predicate)\n+                    panic!(\"closure kind predicate on function: {:#?}\", predicate)\n                 }\n                 ty::PredicateAtom::Subtype(_) => {\n-                    bug!(\"subtype predicate on function: {:#?}\", predicate)\n+                    panic!(\"subtype predicate on function: {:#?}\", predicate)\n                 }\n-                ty::PredicateAtom::Trait(pred, constness) => {\n+                ty::PredicateAtom::Trait(pred, _) => {\n                     if Some(pred.def_id()) == tcx.lang_items().sized_trait() {\n                         continue;\n                     }\n                     match pred.self_ty().kind() {\n                         ty::Param(ref p) => {\n-                            // Allow `T: ?const Trait`\n-                            if constness == hir::Constness::NotConst\n-                                && feature_allowed(tcx, def_id, sym::const_trait_bound_opt_out)\n-                            {\n-                                continue;\n-                            }\n-\n                             let generics = tcx.generics_of(current);\n                             let def = generics.type_param(p, tcx);\n                             let span = tcx.def_span(def.def_id);\n@@ -77,26 +62,25 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n     }\n \n     for local in &body.local_decls {\n-        check_ty(tcx, local.ty, local.source_info.span, def_id)?;\n+        check_ty(tcx, local.ty, local.source_info.span)?;\n     }\n     // impl trait is gone in MIR, so check the return type manually\n     check_ty(\n         tcx,\n         tcx.fn_sig(def_id).output().skip_binder(),\n         body.local_decls.iter().next().unwrap().source_info.span,\n-        def_id,\n     )?;\n \n     for bb in body.basic_blocks() {\n-        check_terminator(tcx, body, def_id, bb.terminator())?;\n+        check_terminator(tcx, body, bb.terminator())?;\n         for stmt in &bb.statements {\n             check_statement(tcx, body, def_id, stmt)?;\n         }\n     }\n     Ok(())\n }\n \n-fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span, fn_def_id: DefId) -> McfResult {\n+fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n     for arg in ty.walk() {\n         let ty = match arg.unpack() {\n             GenericArgKind::Type(ty) => ty,\n@@ -108,15 +92,11 @@ fn check_ty(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span, fn_def_id: DefId) -> Mc\n \n         match ty.kind() {\n             ty::Ref(_, _, hir::Mutability::Mut) => {\n-                if !feature_allowed(tcx, fn_def_id, sym::const_mut_refs) {\n                     return Err((span, \"mutable references in const fn are unstable\".into()));\n-                }\n             }\n             ty::Opaque(..) => return Err((span, \"`impl Trait` in const fn is unstable\".into())),\n             ty::FnPtr(..) => {\n-                if !tcx.const_fn_is_allowed_fn_ptr(fn_def_id) {\n                     return Err((span, \"function pointers in const fn are unstable\".into()));\n-                }\n             }\n             ty::Dynamic(preds, _) => {\n                 for pred in preds.iter() {\n@@ -161,12 +141,12 @@ fn check_rvalue(\n             Err((span, \"cannot access thread local storage in const fn\".into()))\n         }\n         Rvalue::Repeat(operand, _) | Rvalue::Use(operand) => {\n-            check_operand(tcx, operand, span, def_id, body)\n+            check_operand(tcx, operand, span, body)\n         }\n         Rvalue::Len(place)\n         | Rvalue::Discriminant(place)\n         | Rvalue::Ref(_, _, place)\n-        | Rvalue::AddressOf(_, place) => check_place(tcx, *place, span, def_id, body),\n+        | Rvalue::AddressOf(_, place) => check_place(tcx, *place, span,  body),\n         Rvalue::Cast(CastKind::Misc, operand, cast_ty) => {\n             use rustc_middle::ty::cast::CastTy;\n             let cast_in = CastTy::from_ty(operand.ty(body, tcx)).expect(\"bad input type for cast\");\n@@ -175,14 +155,14 @@ fn check_rvalue(\n                 (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n                     Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n                 }\n-                _ => check_operand(tcx, operand, span, def_id, body),\n+                _ => check_operand(tcx, operand, span, body),\n             }\n         }\n         Rvalue::Cast(\n             CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n             operand,\n             _,\n-        ) => check_operand(tcx, operand, span, def_id, body),\n+        ) => check_operand(tcx, operand, span, body),\n         Rvalue::Cast(\n             CastKind::Pointer(\n                 PointerCast::UnsafeFnPointer\n@@ -204,7 +184,7 @@ fn check_rvalue(\n             };\n             let unsized_ty = tcx.struct_tail_erasing_lifetimes(pointee_ty, tcx.param_env(def_id));\n             if let ty::Slice(_) | ty::Str = unsized_ty.kind() {\n-                check_operand(tcx, op, span, def_id, body)?;\n+                check_operand(tcx, op, span, body)?;\n                 // Casting/coercing things to slices is fine.\n                 Ok(())\n             } else {\n@@ -214,8 +194,8 @@ fn check_rvalue(\n         }\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {\n-            check_operand(tcx, lhs, span, def_id, body)?;\n-            check_operand(tcx, rhs, span, def_id, body)?;\n+            check_operand(tcx, lhs, span, body)?;\n+            check_operand(tcx, rhs, span, body)?;\n             let ty = lhs.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() || ty.is_char() {\n                 Ok(())\n@@ -230,14 +210,14 @@ fn check_rvalue(\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(body, tcx);\n             if ty.is_integral() || ty.is_bool() {\n-                check_operand(tcx, operand, span, def_id, body)\n+                check_operand(tcx, operand, span, body)\n             } else {\n                 Err((span, \"only int and `bool` operations are stable in const fn\".into()))\n             }\n         }\n         Rvalue::Aggregate(_, operands) => {\n             for operand in operands {\n-                check_operand(tcx, operand, span, def_id, body)?;\n+                check_operand(tcx, operand, span, body)?;\n             }\n             Ok(())\n         }\n@@ -253,15 +233,15 @@ fn check_statement(\n     let span = statement.source_info.span;\n     match &statement.kind {\n         StatementKind::Assign(box (place, rval)) => {\n-            check_place(tcx, *place, span, def_id, body)?;\n+            check_place(tcx, *place, span,  body)?;\n             check_rvalue(tcx, body, def_id, rval, span)\n         }\n \n-        StatementKind::FakeRead(_, place) => check_place(tcx, **place, span, def_id, body),\n+        StatementKind::FakeRead(_, place) => check_place(tcx, **place, span, body),\n \n         // just an assignment\n         StatementKind::SetDiscriminant { place, .. } => {\n-            check_place(tcx, **place, span, def_id, body)\n+            check_place(tcx, **place, span,  body)\n         }\n \n         StatementKind::LlvmInlineAsm { .. } => {\n@@ -282,11 +262,10 @@ fn check_operand(\n     tcx: TyCtxt<'tcx>,\n     operand: &Operand<'tcx>,\n     span: Span,\n-    def_id: DefId,\n     body: &Body<'tcx>,\n ) -> McfResult {\n     match operand {\n-        Operand::Move(place) | Operand::Copy(place) => check_place(tcx, *place, span, def_id, body),\n+        Operand::Move(place) | Operand::Copy(place) => check_place(tcx, *place, span, body),\n         Operand::Constant(c) => match c.check_static_ptr(tcx) {\n             Some(_) => Err((span, \"cannot access `static` items in const fn\".into())),\n             None => Ok(()),\n@@ -298,7 +277,6 @@ fn check_place(\n     tcx: TyCtxt<'tcx>,\n     place: Place<'tcx>,\n     span: Span,\n-    def_id: DefId,\n     body: &Body<'tcx>,\n ) -> McfResult {\n     let mut cursor = place.projection.as_ref();\n@@ -310,9 +288,7 @@ fn check_place(\n                 if let Some(def) = base_ty.ty_adt_def() {\n                     // No union field accesses in `const fn`\n                     if def.is_union() {\n-                        if !feature_allowed(tcx, def_id, sym::const_fn_union) {\n                             return Err((span, \"accessing union fields is unstable\".into()));\n-                        }\n                     }\n                 }\n             }\n@@ -327,48 +303,9 @@ fn check_place(\n     Ok(())\n }\n \n-/// Returns `true` if the given feature gate is allowed within the function with the given `DefId`.\n-fn feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bool {\n-    // All features require that the corresponding gate be enabled,\n-    // even if the function has `#[allow_internal_unstable(the_gate)]`.\n-    if !tcx.features().enabled(feature_gate) {\n-        return false;\n-    }\n-\n-    // If this crate is not using stability attributes, or this function is not claiming to be a\n-    // stable `const fn`, that is all that is required.\n-    if !tcx.features().staged_api || tcx.has_attr(def_id, sym::rustc_const_unstable) {\n-        return true;\n-    }\n-\n-    // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n-    // opt-in via `allow_internal_unstable`.\n-    super::check_consts::allow_internal_unstable(tcx, def_id, feature_gate)\n-}\n-\n-/// Returns `true` if the given library feature gate is allowed within the function with the given `DefId`.\n-pub fn lib_feature_allowed(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bool {\n-    // All features require that the corresponding gate be enabled,\n-    // even if the function has `#[allow_internal_unstable(the_gate)]`.\n-    if !tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == feature_gate) {\n-        return false;\n-    }\n-\n-    // If this crate is not using stability attributes, or this function is not claiming to be a\n-    // stable `const fn`, that is all that is required.\n-    if !tcx.features().staged_api || tcx.has_attr(def_id, sym::rustc_const_unstable) {\n-        return true;\n-    }\n-\n-    // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n-    // opt-in via `allow_internal_unstable`.\n-    super::check_consts::allow_internal_unstable(tcx, def_id, feature_gate)\n-}\n-\n fn check_terminator(\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n-    def_id: DefId,\n     terminator: &Terminator<'tcx>,\n ) -> McfResult {\n     let span = terminator.source_info.span;\n@@ -380,14 +317,14 @@ fn check_terminator(\n         | TerminatorKind::Resume\n         | TerminatorKind::Unreachable => Ok(()),\n \n-        TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span, def_id, body),\n+        TerminatorKind::Drop { place, .. } => check_place(tcx, *place, span,  body),\n         TerminatorKind::DropAndReplace { place, value, .. } => {\n-            check_place(tcx, *place, span, def_id, body)?;\n-            check_operand(tcx, value, span, def_id, body)\n+            check_place(tcx, *place, span,  body)?;\n+            check_operand(tcx, value, span, body)\n         }\n \n         TerminatorKind::SwitchInt { discr, switch_ty: _, values: _, targets: _ } => {\n-            check_operand(tcx, discr, span, def_id, body)\n+            check_operand(tcx, discr, span, body)\n         }\n \n         TerminatorKind::Abort => Err((span, \"abort is not stable in const fn\".into())),\n@@ -405,15 +342,7 @@ fn check_terminator(\n         } => {\n             let fn_ty = func.ty(body, tcx);\n             if let ty::FnDef(fn_def_id, _) = *fn_ty.kind() {\n-                // Allow unstable const if we opt in by using #[allow_internal_unstable]\n-                // on function or macro declaration.\n-                if !crate::const_eval::is_min_const_fn(tcx, fn_def_id)\n-                    && !crate::const_eval::is_unstable_const_fn(tcx, fn_def_id)\n-                        .map(|feature| {\n-                            span.allows_unstable(feature)\n-                                || lib_feature_allowed(tcx, def_id, feature)\n-                        })\n-                        .unwrap_or(false)\n+                if !rustc_mir::const_eval::is_min_const_fn(tcx, fn_def_id)\n                 {\n                     return Err((\n                         span,\n@@ -432,18 +361,17 @@ fn check_terminator(\n                 // transmutes in const fn before we add more hacks to this.\n                 if tcx.fn_sig(fn_def_id).abi() == RustIntrinsic\n                     && tcx.item_name(fn_def_id) == sym::transmute\n-                    && !feature_allowed(tcx, def_id, sym::const_fn_transmute)\n                 {\n                     return Err((\n                         span,\n                         \"can only call `transmute` from const items, not `const fn`\".into(),\n                     ));\n                 }\n \n-                check_operand(tcx, func, span, fn_def_id, body)?;\n+                check_operand(tcx, func, span, body)?;\n \n                 for arg in args {\n-                    check_operand(tcx, arg, span, fn_def_id, body)?;\n+                    check_operand(tcx, arg, span, body)?;\n                 }\n                 Ok(())\n             } else {\n@@ -452,7 +380,7 @@ fn check_terminator(\n         }\n \n         TerminatorKind::Assert { cond, expected: _, msg: _, target: _, cleanup: _ } => {\n-            check_operand(tcx, cond, span, def_id, body)\n+            check_operand(tcx, cond, span, body)\n         }\n \n         TerminatorKind::InlineAsm { .. } => {", "previous_filename": "compiler/rustc_mir/src/transform/qualify_min_const_fn.rs"}]}