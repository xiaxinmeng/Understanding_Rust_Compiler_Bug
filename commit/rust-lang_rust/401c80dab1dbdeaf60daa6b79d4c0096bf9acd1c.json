{"sha": "401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMWM4MGRhYjFkYmRlYWY2MGRhYTZiNzlkNGMwMDk2YmY5YWNkMWM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-10-19T19:54:19Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-10-20T23:04:48Z"}, "message": "save-analysis: don't recompute crate name", "tree": {"sha": "3f4b7ef32d6fd8ef3a7cb20564a38be1bc2903c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f4b7ef32d6fd8ef3a7cb20564a38be1bc2903c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "html_url": "https://github.com/rust-lang/rust/commit/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aec91734e0c12b8e36158566ad512a663111c9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aec91734e0c12b8e36158566ad512a663111c9f", "html_url": "https://github.com/rust-lang/rust/commit/7aec91734e0c12b8e36158566ad512a663111c9f"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "573634414932bb7ef708f6a40f8cb9d79959240a", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "patch": "@@ -102,12 +102,12 @@ pub const INITIAL_DISCRIMINANT_VALUE: Disr = 0;\n \n /// The complete set of all analyses described in this module. This is\n /// produced by the driver and fed to trans and later passes.\n-pub struct CrateAnalysis {\n+pub struct CrateAnalysis<'a> {\n     pub export_map: ExportMap,\n     pub exported_items: middle::privacy::ExportedItems,\n     pub public_items: middle::privacy::PublicItems,\n     pub reachable: NodeSet,\n-    pub name: String,\n+    pub name: &'a str,\n     pub glob_map: Option<GlobMap>,\n }\n "}, {"sha": "c086737b6406a15bed0dbedee7011bf61a7a66da", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "patch": "@@ -143,7 +143,7 @@ pub fn compile_input(sess: Session,\n         phase_3_run_analysis_passes(&sess,\n                                     ast_map,\n                                     &arenas,\n-                                    id,\n+                                    &id,\n                                     control.make_glob_map,\n                                     |tcx, analysis| {\n \n@@ -155,7 +155,8 @@ pub fn compile_input(sess: Session,\n                                                                tcx.map.krate(),\n                                                                &analysis,\n                                                                tcx,\n-                                                               &lcx);\n+                                                               &lcx,\n+                                                               &id);\n                 (control.after_analysis.callback)(state);\n \n                 tcx.sess.abort_if_errors();\n@@ -279,7 +280,7 @@ pub struct CompileState<'a, 'ast: 'a, 'tcx: 'a> {\n     pub expanded_crate: Option<&'a ast::Crate>,\n     pub hir_crate: Option<&'a hir::Crate>,\n     pub ast_map: Option<&'a hir_map::Map<'ast>>,\n-    pub analysis: Option<&'a ty::CrateAnalysis>,\n+    pub analysis: Option<&'a ty::CrateAnalysis<'a>>,\n     pub tcx: Option<&'a ty::ctxt<'tcx>>,\n     pub lcx: Option<&'a LoweringContext<'a>>,\n     pub trans: Option<&'a trans::CrateTranslation>,\n@@ -358,14 +359,16 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n                             hir_crate: &'a hir::Crate,\n                             analysis: &'a ty::CrateAnalysis,\n                             tcx: &'a ty::ctxt<'tcx>,\n-                            lcx: &'a LoweringContext<'a>)\n+                            lcx: &'a LoweringContext<'a>,\n+                            crate_name: &'a str)\n                             -> CompileState<'a, 'ast, 'tcx> {\n         CompileState {\n             analysis: Some(analysis),\n             tcx: Some(tcx),\n             krate: Some(krate),\n             hir_crate: Some(hir_crate),\n             lcx: Some(lcx),\n+            crate_name: Some(crate_name),\n             .. CompileState::empty(input, session, out_dir)\n         }\n     }\n@@ -661,7 +664,7 @@ pub fn make_map<'ast>(sess: &Session,\n pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                                                ast_map: front::map::Map<'tcx>,\n                                                arenas: &'tcx ty::CtxtArenas<'tcx>,\n-                                               name: String,\n+                                               name: &str,\n                                                make_glob_map: resolve::MakeGlobMap,\n                                                f: F)\n                                                -> R"}, {"sha": "ce40d9b53ff0a66ff864fcf94a7ddc9338b21f8f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "patch": "@@ -399,6 +399,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                                             state.lcx.unwrap(),\n                                             state.krate.unwrap(),\n                                             state.analysis.unwrap(),\n+                                            state.crate_name.unwrap(),\n                                             state.out_dir));\n             };\n             control.make_glob_map = resolve::MakeGlobMap::Yes;"}, {"sha": "8407939bebc58b93c23ca69a27b0cc5af18f8286", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "patch": "@@ -158,7 +158,7 @@ impl PpSourceMode {\n                                                sess: &'tcx Session,\n                                                ast_map: &hir_map::Map<'tcx>,\n                                                arenas: &'tcx ty::CtxtArenas<'tcx>,\n-                                               id: String,\n+                                               id: &str,\n                                                payload: B,\n                                                f: F) -> A where\n         F: FnOnce(&HirPrinterSupport, B, &hir::Crate) -> A,\n@@ -713,7 +713,7 @@ pub fn pretty_print_input(sess: Session,\n         (PpmHir(s), None) => {\n             let out: &mut Write = &mut out;\n             s.call_with_pp_support_hir(\n-                &sess, &ast_map.unwrap(), &arenas, id, box out, |annotation, out, krate| {\n+                &sess, &ast_map.unwrap(), &arenas, &id, box out, |annotation, out, krate| {\n                     debug!(\"pretty printing source code {:?}\", s);\n                     let sess = annotation.sess();\n                     pprust_hir::print_crate(sess.codemap(),\n@@ -732,7 +732,7 @@ pub fn pretty_print_input(sess: Session,\n             s.call_with_pp_support_hir(&sess,\n                                        &ast_map.unwrap(),\n                                        &arenas,\n-                                       id,\n+                                       &id,\n                                        (out,uii),\n                                        |annotation, (out,uii), _| {\n                 debug!(\"pretty printing source code {:?}\", s);\n@@ -780,7 +780,7 @@ pub fn pretty_print_input(sess: Session,\n                     driver::phase_3_run_analysis_passes(&sess,\n                                                         ast_map,\n                                                         &arenas,\n-                                                        id,\n+                                                        &id,\n                                                         resolve::MakeGlobMap::No,\n                                                         |tcx, _| {\n                         print_flowgraph(variants, tcx, code, mode, out)"}, {"sha": "f2f8c13880a7eb13deb4b9ea294a1e3902f9811f", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "patch": "@@ -184,9 +184,9 @@ pub fn find_crate_name(sess: Option<&Session>,\n }\n \n pub fn build_link_meta(sess: &Session, krate: &hir::Crate,\n-                       name: String) -> LinkMeta {\n+                       name: &str) -> LinkMeta {\n     let r = LinkMeta {\n-        crate_name: name,\n+        crate_name: name.to_owned(),\n         crate_hash: Svh::calculate(&sess.opts.cg.metadata, krate),\n     };\n     info!(\"{:?}\", r);"}, {"sha": "8a5b8f4eb56ebdf414c0ed849fcbae5e54ca36c7", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "patch": "@@ -66,7 +66,7 @@ pub struct DumpCsvVisitor<'l, 'tcx: 'l> {\n     save_ctxt: SaveContext<'l, 'tcx>,\n     sess: &'l Session,\n     tcx: &'l ty::ctxt<'tcx>,\n-    analysis: &'l ty::CrateAnalysis,\n+    analysis: &'l ty::CrateAnalysis<'l>,\n \n     span: SpanUtils<'l>,\n     fmt: FmtStrs<'l, 'tcx>,\n@@ -77,7 +77,7 @@ pub struct DumpCsvVisitor<'l, 'tcx: 'l> {\n impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n     pub fn new(tcx: &'l ty::ctxt<'tcx>,\n                lcx: &'l LoweringContext<'l>,\n-               analysis: &'l ty::CrateAnalysis,\n+               analysis: &'l ty::CrateAnalysis<'l>,\n                output_file: Box<File>)\n                -> DumpCsvVisitor<'l, 'tcx> {\n         let span_utils = SpanUtils::new(&tcx.sess);"}, {"sha": "af9f3e4896d2c8b3cbacf9323bbb73d6a5259972", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "patch": "@@ -20,7 +20,6 @@ use rustc_front;\n use rustc::front::map::NodeItem;\n use rustc_front::{hir, lowering};\n \n-use syntax::attr;\n use syntax::ast::{self, NodeId};\n use syntax::ast_util;\n use syntax::codemap::*;\n@@ -714,19 +713,13 @@ pub fn process_crate<'l, 'tcx>(tcx: &'l ty::ctxt<'tcx>,\n                                lcx: &'l lowering::LoweringContext<'l>,\n                                krate: &ast::Crate,\n                                analysis: &ty::CrateAnalysis,\n+                               cratename: &str,\n                                odir: Option<&Path>) {\n     if generated_code(krate.span) {\n         return;\n     }\n \n     assert!(analysis.glob_map.is_some());\n-    let cratename = match attr::find_crate_name(&krate.attrs) {\n-        Some(name) => name.to_string(),\n-        None => {\n-            info!(\"Could not find crate name, using 'unknown_crate'\");\n-            String::from(\"unknown_crate\")\n-        }\n-    };\n \n     info!(\"Dumping crate {}\", cratename);\n \n@@ -751,7 +744,7 @@ pub fn process_crate<'l, 'tcx>(tcx: &'l ty::ctxt<'tcx>,\n     }\n \n     // Create output file.\n-    let mut out_name = cratename.clone();\n+    let mut out_name = cratename.to_owned();\n     out_name.push_str(\".csv\");\n     root_path.push(&out_name);\n     let output_file = match File::create(&root_path) {\n@@ -765,7 +758,7 @@ pub fn process_crate<'l, 'tcx>(tcx: &'l ty::ctxt<'tcx>,\n \n     let mut visitor = dump_csv::DumpCsvVisitor::new(tcx, lcx, analysis, output_file);\n \n-    visitor.dump_crate_info(&cratename, krate);\n+    visitor.dump_crate_info(cratename, krate);\n     visit::walk_crate(&mut visitor, krate);\n }\n "}, {"sha": "4955951d36e84afe7711445c5374d161cd9a439f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "patch": "@@ -143,7 +143,7 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n     driver::phase_3_run_analysis_passes(&sess,\n                                         hir_map,\n                                         &arenas,\n-                                        name,\n+                                        &name,\n                                         resolve::MakeGlobMap::No,\n                                         |tcx, analysis| {\n         let ty::CrateAnalysis { exported_items, public_items, .. } = analysis;"}, {"sha": "f4031a3aaae1cc3621f02558d54cdbfed45feca7", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=401c80dab1dbdeaf60daa6b79d4c0096bf9acd1c", "patch": "@@ -229,7 +229,7 @@ fn compile_program(input: &str, sysroot: PathBuf)\n         let ast_map = driver::make_map(&sess, &mut hir_forest);\n \n         driver::phase_3_run_analysis_passes(\n-            &sess, ast_map, &arenas, id, MakeGlobMap::No, |tcx, analysis| {\n+            &sess, ast_map, &arenas, &id, MakeGlobMap::No, |tcx, analysis| {\n \n             let trans = driver::phase_4_translate_to_llvm(tcx, analysis);\n "}]}