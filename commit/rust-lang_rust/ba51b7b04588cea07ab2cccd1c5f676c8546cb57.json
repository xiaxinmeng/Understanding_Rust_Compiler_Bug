{"sha": "ba51b7b04588cea07ab2cccd1c5f676c8546cb57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNTFiN2IwNDU4OGNlYTA3YWIyY2NjZDFjNWY2NzZjODU0NmNiNTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-20T12:16:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-20T12:16:26Z"}, "message": "Merge #4533\n\n4533: More snippets r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "0eb3b895a9f37fea9d056151a4ec63fab120ada3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eb3b895a9f37fea9d056151a4ec63fab120ada3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba51b7b04588cea07ab2cccd1c5f676c8546cb57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexR+aCRBK7hj4Ov3rIwAAdHIIAIMEtUya73a7d5x+Zqs8vc8A\npZL17GTcw77l/mHoMriiVN/fu6RunrvR5qJoES4hMx0SQoCoSMXBNpxWLa3xbvft\nbj6nuVGr2MZ12CsXLE+zy2/vB7B7v0UuXUuyBdxkO+3IbZyOYVr9A1rvSsaotyrN\nLtmloD1nbhY17uyOTRy6onlWyBbcA5Qzm9J9oGBoRRGpqUdBxdqe5L0Z+XxWpMro\ncSYTXLU/S03Qzv73dqIaaRonzRCfc6LCpfldA7IYWjTjRJA58qOm+I4oNAsq9A9H\nlyslh3eF/bdEDSbMIlwtdiF8i6x1JnfjccFVlW4a76VvFR9HylrGxybvXcbZl3Y=\n=klCM\n-----END PGP SIGNATURE-----\n", "payload": "tree 0eb3b895a9f37fea9d056151a4ec63fab120ada3\nparent 75c7695e86f967ec87f072a3a26fc23239de0a7e\nparent ba3a58d1b2d76bae2ac84923d12918a32ad680f6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589976986 +0000\ncommitter GitHub <noreply@github.com> 1589976986 +0000\n\nMerge #4533\n\n4533: More snippets r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba51b7b04588cea07ab2cccd1c5f676c8546cb57", "html_url": "https://github.com/rust-lang/rust/commit/ba51b7b04588cea07ab2cccd1c5f676c8546cb57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75c7695e86f967ec87f072a3a26fc23239de0a7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/75c7695e86f967ec87f072a3a26fc23239de0a7e", "html_url": "https://github.com/rust-lang/rust/commit/75c7695e86f967ec87f072a3a26fc23239de0a7e"}, {"sha": "ba3a58d1b2d76bae2ac84923d12918a32ad680f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3a58d1b2d76bae2ac84923d12918a32ad680f6", "html_url": "https://github.com/rust-lang/rust/commit/ba3a58d1b2d76bae2ac84923d12918a32ad680f6"}], "stats": {"total": 284, "additions": 124, "deletions": 160}, "files": [{"sha": "fbe459c9cad455fea95132293cceaea72b3a929d", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=ba51b7b04588cea07ab2cccd1c5f676c8546cb57", "patch": "@@ -68,7 +68,6 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n     acc.add(AssistId(\"change_visibility\"), \"Change visibility to pub(crate)\", target, |edit| {\n         edit.insert(offset, \"pub(crate) \");\n-        edit.set_cursor(offset);\n     })\n }\n \n@@ -92,7 +91,6 @@ fn change_vis(acc: &mut Assists, vis: ast::Visibility) -> Option<()> {\n             target,\n             |edit| {\n                 edit.replace(vis.syntax().text_range(), \"pub(crate)\");\n-                edit.set_cursor(vis.syntax().text_range().start())\n             },\n         );\n     }\n@@ -104,7 +102,6 @@ fn change_vis(acc: &mut Assists, vis: ast::Visibility) -> Option<()> {\n             target,\n             |edit| {\n                 edit.replace(vis.syntax().text_range(), \"pub\");\n-                edit.set_cursor(vis.syntax().text_range().start());\n             },\n         );\n     }\n@@ -122,15 +119,15 @@ mod tests {\n     #[test]\n     fn change_visibility_adds_pub_crate_to_items() {\n         check_assist(change_visibility, \"<|>fn foo() {}\", \"<|>pub(crate) fn foo() {}\");\n-        check_assist(change_visibility, \"f<|>n foo() {}\", \"<|>pub(crate) fn foo() {}\");\n+        check_assist(change_visibility, \"f<|>n foo() {}\", \"pub(crate) f<|>n foo() {}\");\n         check_assist(change_visibility, \"<|>struct Foo {}\", \"<|>pub(crate) struct Foo {}\");\n         check_assist(change_visibility, \"<|>mod foo {}\", \"<|>pub(crate) mod foo {}\");\n         check_assist(change_visibility, \"<|>trait Foo {}\", \"<|>pub(crate) trait Foo {}\");\n-        check_assist(change_visibility, \"m<|>od {}\", \"<|>pub(crate) mod {}\");\n+        check_assist(change_visibility, \"m<|>od {}\", \"pub(crate) m<|>od {}\");\n         check_assist(\n             change_visibility,\n             \"unsafe f<|>n foo() {}\",\n-            \"<|>pub(crate) unsafe fn foo() {}\",\n+            \"pub(crate) unsafe f<|>n foo() {}\",\n         );\n     }\n "}, {"sha": "cc303285b35d77d2d235676bc9e287f1265e8115", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 77, "deletions": 116, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=ba51b7b04588cea07ab2cccd1c5f676c8546cb57", "patch": "@@ -6,7 +6,10 @@ use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, make, AstNode, MatchArm, NameOwner, Pat};\n use test_utils::mark;\n \n-use crate::{utils::FamousDefs, AssistContext, AssistId, Assists};\n+use crate::{\n+    utils::{render_snippet, Cursor, FamousDefs},\n+    AssistContext, AssistId, Assists,\n+};\n \n // Assist: fill_match_arms\n //\n@@ -27,7 +30,7 @@ use crate::{utils::FamousDefs, AssistContext, AssistId, Assists};\n //\n // fn handle(action: Action) {\n //     match action {\n-//         Action::Move { distance } => {}\n+//         $0Action::Move { distance } => {}\n //         Action::Stop => {}\n //     }\n // }\n@@ -100,10 +103,23 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     }\n \n     let target = match_expr.syntax().text_range();\n-    acc.add(AssistId(\"fill_match_arms\"), \"Fill match arms\", target, |edit| {\n-        let new_arm_list = match_arm_list.remove_placeholder().append_arms(missing_arms);\n-        edit.set_cursor(expr.syntax().text_range().start());\n-        edit.replace_ast(match_arm_list, new_arm_list);\n+    acc.add(AssistId(\"fill_match_arms\"), \"Fill match arms\", target, |builder| {\n+        let new_arm_list = match_arm_list.remove_placeholder();\n+        let n_old_arms = new_arm_list.arms().count();\n+        let new_arm_list = new_arm_list.append_arms(missing_arms);\n+        let first_new_arm = new_arm_list.arms().nth(n_old_arms);\n+        let old_range = match_arm_list.syntax().text_range();\n+        match (first_new_arm, ctx.config.snippet_cap) {\n+            (Some(first_new_arm), Some(cap)) => {\n+                let snippet = render_snippet(\n+                    cap,\n+                    new_arm_list.syntax(),\n+                    Cursor::Before(first_new_arm.syntax()),\n+                );\n+                builder.replace_snippet(cap, old_range, snippet);\n+            }\n+            _ => builder.replace(old_range, new_arm_list.to_string()),\n+        }\n     })\n }\n \n@@ -226,27 +242,27 @@ mod tests {\n             r#\"\n             enum A {\n                 As,\n-                Bs{x:i32, y:Option<i32>},\n+                Bs { x: i32, y: Option<i32> },\n                 Cs(i32, Option<i32>),\n             }\n             fn main() {\n                 match A::As<|> {\n-                    A::Bs{x,y:Some(_)} => {}\n+                    A::Bs { x, y: Some(_) } => {}\n                     A::Cs(_, Some(_)) => {}\n                 }\n             }\n             \"#,\n             r#\"\n             enum A {\n                 As,\n-                Bs{x:i32, y:Option<i32>},\n+                Bs { x: i32, y: Option<i32> },\n                 Cs(i32, Option<i32>),\n             }\n             fn main() {\n-                match <|>A::As {\n-                    A::Bs{x,y:Some(_)} => {}\n+                match A::As {\n+                    A::Bs { x, y: Some(_) } => {}\n                     A::Cs(_, Some(_)) => {}\n-                    A::As => {}\n+                    $0A::As => {}\n                 }\n             }\n             \"#,\n@@ -276,9 +292,9 @@ mod tests {\n                 Cs(Option<i32>),\n             }\n             fn main() {\n-                match <|>A::As {\n+                match A::As {\n                     A::Cs(_) | A::Bs => {}\n-                    A::As => {}\n+                    $0A::As => {}\n                 }\n             }\n             \"#,\n@@ -322,11 +338,11 @@ mod tests {\n                 Ys,\n             }\n             fn main() {\n-                match <|>A::As {\n+                match A::As {\n                     A::Bs if 0 < 1 => {}\n                     A::Ds(_value) => { let x = 1; }\n                     A::Es(B::Xs) => (),\n-                    A::As => {}\n+                    $0A::As => {}\n                     A::Cs => {}\n                 }\n             }\n@@ -344,7 +360,7 @@ mod tests {\n                 Bs,\n                 Cs(String),\n                 Ds(String, String),\n-                Es{ x: usize, y: usize }\n+                Es { x: usize, y: usize }\n             }\n \n             fn main() {\n@@ -358,13 +374,13 @@ mod tests {\n                 Bs,\n                 Cs(String),\n                 Ds(String, String),\n-                Es{ x: usize, y: usize }\n+                Es { x: usize, y: usize }\n             }\n \n             fn main() {\n                 let a = A::As;\n-                match <|>a {\n-                    A::As => {}\n+                match a {\n+                    $0A::As => {}\n                     A::Bs => {}\n                     A::Cs(_) => {}\n                     A::Ds(_, _) => {}\n@@ -380,14 +396,8 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n-            enum B {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n+            enum B { One, Two }\n \n             fn main() {\n                 let a = A::One;\n@@ -396,20 +406,14 @@ mod tests {\n             }\n             \"#,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n-            enum B {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n+            enum B { One, Two }\n \n             fn main() {\n                 let a = A::One;\n                 let b = B::One;\n-                match <|>(a, b) {\n-                    (A::One, B::One) => {}\n+                match (a, b) {\n+                    $0(A::One, B::One) => {}\n                     (A::One, B::Two) => {}\n                     (A::Two, B::One) => {}\n                     (A::Two, B::Two) => {}\n@@ -424,14 +428,8 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n-            enum B {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n+            enum B { One, Two }\n \n             fn main() {\n                 let a = A::One;\n@@ -440,20 +438,14 @@ mod tests {\n             }\n             \"#,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n-            enum B {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n+            enum B { One, Two }\n \n             fn main() {\n                 let a = A::One;\n                 let b = B::One;\n-                match <|>(&a, &b) {\n-                    (A::One, B::One) => {}\n+                match (&a, &b) {\n+                    $0(A::One, B::One) => {}\n                     (A::One, B::Two) => {}\n                     (A::Two, B::One) => {}\n                     (A::Two, B::Two) => {}\n@@ -468,14 +460,8 @@ mod tests {\n         check_assist_not_applicable(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n-            enum B {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n+            enum B { One, Two }\n \n             fn main() {\n                 let a = A::One;\n@@ -493,14 +479,8 @@ mod tests {\n         check_assist_not_applicable(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n-            enum B {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n+            enum B { One, Two }\n \n             fn main() {\n                 let a = A::One;\n@@ -524,10 +504,7 @@ mod tests {\n         check_assist_not_applicable(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n \n             fn main() {\n                 let a = A::One;\n@@ -543,23 +520,19 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                As,\n-            }\n+            enum A { As }\n \n             fn foo(a: &A) {\n                 match a<|> {\n                 }\n             }\n             \"#,\n             r#\"\n-            enum A {\n-                As,\n-            }\n+            enum A { As }\n \n             fn foo(a: &A) {\n-                match <|>a {\n-                    A::As => {}\n+                match a {\n+                    $0A::As => {}\n                 }\n             }\n             \"#,\n@@ -569,7 +542,7 @@ mod tests {\n             fill_match_arms,\n             r#\"\n             enum A {\n-                Es{ x: usize, y: usize }\n+                Es { x: usize, y: usize }\n             }\n \n             fn foo(a: &mut A) {\n@@ -579,12 +552,12 @@ mod tests {\n             \"#,\n             r#\"\n             enum A {\n-                Es{ x: usize, y: usize }\n+                Es { x: usize, y: usize }\n             }\n \n             fn foo(a: &mut A) {\n-                match <|>a {\n-                    A::Es { x, y } => {}\n+                match a {\n+                    $0A::Es { x, y } => {}\n                 }\n             }\n             \"#,\n@@ -623,8 +596,8 @@ mod tests {\n             enum E { X, Y }\n \n             fn main() {\n-                match <|>E::X {\n-                    E::X => {}\n+                match E::X {\n+                    $0E::X => {}\n                     E::Y => {}\n                 }\n             }\n@@ -651,8 +624,8 @@ mod tests {\n             use foo::E::X;\n \n             fn main() {\n-                match <|>X {\n-                    X => {}\n+                match X {\n+                    $0X => {}\n                     foo::E::Y => {}\n                 }\n             }\n@@ -665,10 +638,7 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n             fn foo(a: A) {\n                 match a {\n                     // foo bar baz<|>\n@@ -678,16 +648,13 @@ mod tests {\n             }\n             \"#,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n             fn foo(a: A) {\n-                match <|>a {\n+                match a {\n                     // foo bar baz\n                     A::One => {}\n                     // This is where the rest should be\n-                    A::Two => {}\n+                    $0A::Two => {}\n                 }\n             }\n             \"#,\n@@ -699,25 +666,19 @@ mod tests {\n         check_assist(\n             fill_match_arms,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n             fn foo(a: A) {\n                 match a {\n                     // foo bar baz<|>\n                 }\n             }\n             \"#,\n             r#\"\n-            enum A {\n-                One,\n-                Two,\n-            }\n+            enum A { One, Two }\n             fn foo(a: A) {\n-                match <|>a {\n+                match a {\n                     // foo bar baz\n-                    A::One => {}\n+                    $0A::One => {}\n                     A::Two => {}\n                 }\n             }\n@@ -740,8 +701,8 @@ mod tests {\n             r#\"\n             enum A { One, Two, }\n             fn foo(a: A) {\n-                match <|>a {\n-                    A::One => {}\n+                match a {\n+                    $0A::One => {}\n                     A::Two => {}\n                 }\n             }\n@@ -765,8 +726,8 @@ fn foo(opt: Option<i32>) {\n             before,\n             r#\"\n fn foo(opt: Option<i32>) {\n-    match <|>opt {\n-        Some(_) => {}\n+    match opt {\n+        $0Some(_) => {}\n         None => {}\n     }\n }"}, {"sha": "9ec42f568c5957ca17ba21992a03fab4f522f5f6", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=ba51b7b04588cea07ab2cccd1c5f676c8546cb57", "patch": "@@ -25,7 +25,7 @@ use crate::{AssistContext, AssistId, Assists};\n // ->\n // ```\n // mod m {\n-//     pub(crate) fn frobnicate() {}\n+//     $0pub(crate) fn frobnicate() {}\n // }\n // fn main() {\n //     m::frobnicate() {}\n@@ -62,10 +62,12 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n         Some(name) => format!(\"Change visibility of {} to {}\", name, missing_visibility),\n     };\n \n-    acc.add(AssistId(\"fix_visibility\"), assist_label, target, |edit| {\n-        edit.set_file(target_file);\n-        edit.insert(offset, format!(\"{} \", missing_visibility));\n-        edit.set_cursor(offset);\n+    acc.add(AssistId(\"fix_visibility\"), assist_label, target, |builder| {\n+        builder.set_file(target_file);\n+        match ctx.config.snippet_cap {\n+            Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n+            None => builder.insert(offset, format!(\"{} \", missing_visibility)),\n+        }\n     })\n }\n \n@@ -103,10 +105,12 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n     let assist_label =\n         format!(\"Change visibility of {}.{} to {}\", parent_name, target_name, missing_visibility);\n \n-    acc.add(AssistId(\"fix_visibility\"), assist_label, target, |edit| {\n-        edit.set_file(target_file);\n-        edit.insert(offset, format!(\"{} \", missing_visibility));\n-        edit.set_cursor(offset)\n+    acc.add(AssistId(\"fix_visibility\"), assist_label, target, |builder| {\n+        builder.set_file(target_file);\n+        match ctx.config.snippet_cap {\n+            Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n+            None => builder.insert(offset, format!(\"{} \", missing_visibility)),\n+        }\n     })\n }\n \n@@ -196,7 +200,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { fn foo() {} }\n               fn main() { foo::foo<|>() } \",\n-            r\"mod foo { <|>pub(crate) fn foo() {} }\n+            r\"mod foo { $0pub(crate) fn foo() {} }\n               fn main() { foo::foo() } \",\n         );\n         check_assist_not_applicable(\n@@ -212,7 +216,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { struct Foo; }\n               fn main() { foo::Foo<|> } \",\n-            r\"mod foo { <|>pub(crate) struct Foo; }\n+            r\"mod foo { $0pub(crate) struct Foo; }\n               fn main() { foo::Foo } \",\n         );\n         check_assist_not_applicable(\n@@ -224,7 +228,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { enum Foo; }\n               fn main() { foo::Foo<|> } \",\n-            r\"mod foo { <|>pub(crate) enum Foo; }\n+            r\"mod foo { $0pub(crate) enum Foo; }\n               fn main() { foo::Foo } \",\n         );\n         check_assist_not_applicable(\n@@ -236,7 +240,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { union Foo; }\n               fn main() { foo::Foo<|> } \",\n-            r\"mod foo { <|>pub(crate) union Foo; }\n+            r\"mod foo { $0pub(crate) union Foo; }\n               fn main() { foo::Foo } \",\n         );\n         check_assist_not_applicable(\n@@ -258,7 +262,7 @@ mod tests {\n               //- /foo.rs\n               struct Foo;\n               \",\n-            r\"<|>pub(crate) struct Foo;\n+            r\"$0pub(crate) struct Foo;\n \n \",\n         );\n@@ -270,7 +274,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { pub struct Foo { bar: (), } }\n               fn main() { foo::Foo { <|>bar: () }; } \",\n-            r\"mod foo { pub struct Foo { <|>pub(crate) bar: (), } }\n+            r\"mod foo { pub struct Foo { $0pub(crate) bar: (), } }\n               fn main() { foo::Foo { bar: () }; } \",\n         );\n         check_assist(\n@@ -281,7 +285,7 @@ mod tests {\n               //- /foo.rs\n               pub struct Foo { bar: () }\n               \",\n-            r\"pub struct Foo { <|>pub(crate) bar: () }\n+            r\"pub struct Foo { $0pub(crate) bar: () }\n \n \",\n         );\n@@ -307,7 +311,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { pub enum Foo { Bar { bar: () } } }\n               fn main() { foo::Foo::Bar { <|>bar: () }; } \",\n-            r\"mod foo { pub enum Foo { Bar { <|>pub(crate) bar: () } } }\n+            r\"mod foo { pub enum Foo { Bar { $0pub(crate) bar: () } } }\n               fn main() { foo::Foo::Bar { bar: () }; } \",\n         );\n         check_assist(\n@@ -318,7 +322,7 @@ mod tests {\n               //- /foo.rs\n               pub enum Foo { Bar { bar: () } }\n               \",\n-            r\"pub enum Foo { Bar { <|>pub(crate) bar: () } }\n+            r\"pub enum Foo { Bar { $0pub(crate) bar: () } }\n \n \",\n         );\n@@ -346,7 +350,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { pub union Foo { bar: (), } }\n               fn main() { foo::Foo { <|>bar: () }; } \",\n-            r\"mod foo { pub union Foo { <|>pub(crate) bar: (), } }\n+            r\"mod foo { pub union Foo { $0pub(crate) bar: (), } }\n               fn main() { foo::Foo { bar: () }; } \",\n         );\n         check_assist(\n@@ -357,7 +361,7 @@ mod tests {\n               //- /foo.rs\n               pub union Foo { bar: () }\n               \",\n-            r\"pub union Foo { <|>pub(crate) bar: () }\n+            r\"pub union Foo { $0pub(crate) bar: () }\n \n \",\n         );\n@@ -383,7 +387,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { const FOO: () = (); }\n               fn main() { foo::FOO<|> } \",\n-            r\"mod foo { <|>pub(crate) const FOO: () = (); }\n+            r\"mod foo { $0pub(crate) const FOO: () = (); }\n               fn main() { foo::FOO } \",\n         );\n         check_assist_not_applicable(\n@@ -399,7 +403,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { static FOO: () = (); }\n               fn main() { foo::FOO<|> } \",\n-            r\"mod foo { <|>pub(crate) static FOO: () = (); }\n+            r\"mod foo { $0pub(crate) static FOO: () = (); }\n               fn main() { foo::FOO } \",\n         );\n         check_assist_not_applicable(\n@@ -415,7 +419,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { trait Foo { fn foo(&self) {} } }\n               fn main() { let x: &dyn foo::<|>Foo; } \",\n-            r\"mod foo { <|>pub(crate) trait Foo { fn foo(&self) {} } }\n+            r\"mod foo { $0pub(crate) trait Foo { fn foo(&self) {} } }\n               fn main() { let x: &dyn foo::Foo; } \",\n         );\n         check_assist_not_applicable(\n@@ -431,7 +435,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { type Foo = (); }\n               fn main() { let x: foo::Foo<|>; } \",\n-            r\"mod foo { <|>pub(crate) type Foo = (); }\n+            r\"mod foo { $0pub(crate) type Foo = (); }\n               fn main() { let x: foo::Foo; } \",\n         );\n         check_assist_not_applicable(\n@@ -447,7 +451,7 @@ mod tests {\n             fix_visibility,\n             r\"mod foo { mod bar { fn bar() {} } }\n               fn main() { foo::bar<|>::bar(); } \",\n-            r\"mod foo { <|>pub(crate) mod bar { fn bar() {} } }\n+            r\"mod foo { $0pub(crate) mod bar { fn bar() {} } }\n               fn main() { foo::bar::bar(); } \",\n         );\n \n@@ -463,7 +467,7 @@ mod tests {\n                 pub fn baz() {}\n             }\n             \",\n-            r\"<|>pub(crate) mod bar {\n+            r\"$0pub(crate) mod bar {\n     pub fn baz() {}\n }\n \n@@ -493,7 +497,7 @@ mod tests {\n             pub fn baz() {}\n             }\n             \",\n-            r\"<|>pub(crate) mod bar;\n+            r\"$0pub(crate) mod bar;\n \",\n         );\n     }\n@@ -510,7 +514,7 @@ mod tests {\n               mod bar {\n                   pub fn baz() {}\n               }\",\n-            r\"<|>pub(crate) mod bar {\n+            r\"$0pub(crate) mod bar {\n     pub fn baz() {}\n }\n \",\n@@ -525,7 +529,7 @@ mod tests {\n               foo::Bar<|>\n               //- /lib.rs crate:foo\n               struct Bar;\",\n-            r\"<|>pub struct Bar;\n+            r\"$0pub struct Bar;\n \",\n         )\n     }\n@@ -545,7 +549,7 @@ mod tests {\n             \",\n             r\"\n             mod foo {\n-                <|>pub(crate) use bar::Baz;\n+                $0pub(crate) use bar::Baz;\n                 mod bar { pub(super) struct Baz; }\n             }\n             foo::Baz"}, {"sha": "b76182d7927320f311790edee9d4bd43e2b30a44", "filename": "crates/ra_assists/src/handlers/unwrap_block.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Funwrap_block.rs?ref=ba51b7b04588cea07ab2cccd1c5f676c8546cb57", "patch": "@@ -1,8 +1,10 @@\n-use crate::{AssistContext, AssistId, Assists};\n-\n-use ast::{ElseBranch, Expr, LoopBodyOwner};\n use ra_fmt::unwrap_trivial_block;\n-use ra_syntax::{ast, match_ast, AstNode, TextRange, T};\n+use ra_syntax::{\n+    ast::{self, ElseBranch, Expr, LoopBodyOwner},\n+    match_ast, AstNode, TextRange, T,\n+};\n+\n+use crate::{AssistContext, AssistId, Assists};\n \n // Assist: unwrap_block\n //"}, {"sha": "3e6654c17588ab4412750ae9ba0334dfd2115251", "filename": "crates/ra_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=ba51b7b04588cea07ab2cccd1c5f676c8546cb57", "patch": "@@ -336,7 +336,7 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        Action::Move { distance } => {}\n+        $0Action::Move { distance } => {}\n         Action::Stop => {}\n     }\n }\n@@ -358,7 +358,7 @@ fn main() {\n \"#####,\n         r#####\"\n mod m {\n-    pub(crate) fn frobnicate() {}\n+    $0pub(crate) fn frobnicate() {}\n }\n fn main() {\n     m::frobnicate() {}"}, {"sha": "51807ffdac583565d1074f91543991605c21ba21", "filename": "docs/user/assists.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/ba51b7b04588cea07ab2cccd1c5f676c8546cb57/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=ba51b7b04588cea07ab2cccd1c5f676c8546cb57", "patch": "@@ -325,7 +325,7 @@ enum Action { Move { distance: u32 }, Stop }\n \n fn handle(action: Action) {\n     match action {\n-        Action::Move { distance } => {}\n+        $0Action::Move { distance } => {}\n         Action::Stop => {}\n     }\n }\n@@ -346,7 +346,7 @@ fn main() {\n \n // AFTER\n mod m {\n-    pub(crate) fn frobnicate() {}\n+    $0pub(crate) fn frobnicate() {}\n }\n fn main() {\n     m::frobnicate() {}"}]}