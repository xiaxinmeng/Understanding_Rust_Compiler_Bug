{"sha": "dab685dd87ba99f6c0f005f2ce7b0a3c10dada22", "node_id": "C_kwDOAAsO6NoAKGRhYjY4NWRkODdiYTk5ZjZjMGYwMDVmMmNlN2IwYTNjMTBkYWRhMjI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-03T10:47:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-03T10:47:33Z"}, "message": "De-magic number parser::Output encoding", "tree": {"sha": "52002638363187e82a089a8829e8eb09b4edbd13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52002638363187e82a089a8829e8eb09b4edbd13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab685dd87ba99f6c0f005f2ce7b0a3c10dada22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab685dd87ba99f6c0f005f2ce7b0a3c10dada22", "html_url": "https://github.com/rust-lang/rust/commit/dab685dd87ba99f6c0f005f2ce7b0a3c10dada22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab685dd87ba99f6c0f005f2ce7b0a3c10dada22/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfe82cda48dbccc4c4eb52b515e83ec4bb12464b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe82cda48dbccc4c4eb52b515e83ec4bb12464b", "html_url": "https://github.com/rust-lang/rust/commit/bfe82cda48dbccc4c4eb52b515e83ec4bb12464b"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "3de6c0aba86efa77bdc7e1a2f43e0dec9bd975dd", "filename": "crates/parser/src/output.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/dab685dd87ba99f6c0f005f2ce7b0a3c10dada22/crates%2Fparser%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab685dd87ba99f6c0f005f2ce7b0a3c10dada22/crates%2Fparser%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Foutput.rs?ref=dab685dd87ba99f6c0f005f2ce7b0a3c10dada22", "patch": "@@ -31,47 +31,70 @@ pub enum Step<'a> {\n }\n \n impl Output {\n+    const EVENT_MASK: u32 = 0b1;\n+    const TAG_MASK: u32 = 0x0000_00F0;\n+    const N_INPUT_TOKEN_MASK: u32 = 0x0000_FF00;\n+    const KIND_MASK: u32 = 0xFFFF_0000;\n+\n+    const ERROR_SHIFT: u32 = Self::EVENT_MASK.trailing_ones();\n+    const TAG_SHIFT: u32 = Self::TAG_MASK.trailing_zeros();\n+    const N_INPUT_TOKEN_SHIFT: u32 = Self::N_INPUT_TOKEN_MASK.trailing_zeros();\n+    const KIND_SHIFT: u32 = Self::KIND_MASK.trailing_zeros();\n+\n+    const TOKEN_EVENT: u8 = 0;\n+    const ENTER_EVENT: u8 = 1;\n+    const EXIT_EVENT: u8 = 2;\n+\n     pub fn iter(&self) -> impl Iterator<Item = Step<'_>> {\n         self.event.iter().map(|&event| {\n-            if event & 0b1 == 0 {\n-                return Step::Error { msg: self.error[(event as usize) >> 1].as_str() };\n+            if event & Self::EVENT_MASK == 0 {\n+                return Step::Error {\n+                    msg: self.error[(event as usize) >> Self::ERROR_SHIFT].as_str(),\n+                };\n             }\n-            let tag = ((event & 0x0000_00F0) >> 4) as u8;\n+            let tag = ((event & Self::TAG_MASK) >> Self::TAG_SHIFT) as u8;\n             match tag {\n-                0 => {\n-                    let kind: SyntaxKind = (((event & 0xFFFF_0000) >> 16) as u16).into();\n-                    let n_input_tokens = ((event & 0x0000_FF00) >> 8) as u8;\n+                Self::TOKEN_EVENT => {\n+                    let kind: SyntaxKind =\n+                        (((event & Self::KIND_MASK) >> Self::KIND_SHIFT) as u16).into();\n+                    let n_input_tokens =\n+                        ((event & Self::N_INPUT_TOKEN_MASK) >> Self::N_INPUT_TOKEN_SHIFT) as u8;\n                     Step::Token { kind, n_input_tokens }\n                 }\n-                1 => {\n-                    let kind: SyntaxKind = (((event & 0xFFFF_0000) >> 16) as u16).into();\n+                Self::ENTER_EVENT => {\n+                    let kind: SyntaxKind =\n+                        (((event & Self::KIND_MASK) >> Self::KIND_SHIFT) as u16).into();\n                     Step::Enter { kind }\n                 }\n-                2 => Step::Exit,\n+                Self::EXIT_EVENT => Step::Exit,\n                 _ => unreachable!(),\n             }\n         })\n     }\n \n     pub(crate) fn token(&mut self, kind: SyntaxKind, n_tokens: u8) {\n-        let e = ((kind as u16 as u32) << 16) | ((n_tokens as u32) << 8) | 1;\n+        let e = ((kind as u16 as u32) << Self::KIND_SHIFT)\n+            | ((n_tokens as u32) << Self::N_INPUT_TOKEN_SHIFT)\n+            | Self::EVENT_MASK;\n         self.event.push(e)\n     }\n \n     pub(crate) fn enter_node(&mut self, kind: SyntaxKind) {\n-        let e = ((kind as u16 as u32) << 16) | (1 << 4) | 1;\n+        let e = ((kind as u16 as u32) << Self::KIND_SHIFT)\n+            | ((Self::ENTER_EVENT as u32) << Self::TAG_SHIFT)\n+            | Self::EVENT_MASK;\n         self.event.push(e)\n     }\n \n     pub(crate) fn leave_node(&mut self) {\n-        let e = 2 << 4 | 1;\n+        let e = (Self::EXIT_EVENT as u32) << Self::TAG_SHIFT | Self::EVENT_MASK;\n         self.event.push(e)\n     }\n \n     pub(crate) fn error(&mut self, error: String) {\n         let idx = self.error.len();\n         self.error.push(error);\n-        let e = (idx as u32) << 1;\n+        let e = (idx as u32) << Self::ERROR_SHIFT;\n         self.event.push(e);\n     }\n }"}]}