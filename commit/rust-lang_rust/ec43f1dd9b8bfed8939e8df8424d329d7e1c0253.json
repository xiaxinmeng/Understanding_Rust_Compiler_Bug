{"sha": "ec43f1dd9b8bfed8939e8df8424d329d7e1c0253", "node_id": "C_kwDOAAsO6NoAKGVjNDNmMWRkOWI4YmZlZDg5MzllOGRmODQyNGQzMjlkN2UxYzAyNTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-03T19:32:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-03T19:32:09Z"}, "message": "Auto merge of #2533 - saethlin:windows-rng, r=ChrisDenton\n\nSupport BCRYPT_RNG_ALG_HANDLE rust-lang/rust#101325\n\nI haven't tested this on a Windows host, brace for CI...", "tree": {"sha": "7d935147831c51db288961e8bae8be97395539e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d935147831c51db288961e8bae8be97395539e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec43f1dd9b8bfed8939e8df8424d329d7e1c0253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec43f1dd9b8bfed8939e8df8424d329d7e1c0253", "html_url": "https://github.com/rust-lang/rust/commit/ec43f1dd9b8bfed8939e8df8424d329d7e1c0253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec43f1dd9b8bfed8939e8df8424d329d7e1c0253/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90731796c5b91d0699215270ad8872eaa4b0515d", "url": "https://api.github.com/repos/rust-lang/rust/commits/90731796c5b91d0699215270ad8872eaa4b0515d", "html_url": "https://github.com/rust-lang/rust/commit/90731796c5b91d0699215270ad8872eaa4b0515d"}, {"sha": "ee1c1e6d7850cc5ff366b5e1855918e0fc1d80b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1c1e6d7850cc5ff366b5e1855918e0fc1d80b5", "html_url": "https://github.com/rust-lang/rust/commit/ee1c1e6d7850cc5ff366b5e1855918e0fc1d80b5"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "5ce9544acc7b98de6b555c0758745a04babd4012", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec43f1dd9b8bfed8939e8df8424d329d7e1c0253/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/ec43f1dd9b8bfed8939e8df8424d329d7e1c0253/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=ec43f1dd9b8bfed8939e8df8424d329d7e1c0253", "patch": "@@ -1 +1 @@\n-8c6ce6b91b172f77c795a74bfeaf74b865146b3f\n+47d1cdb0bcac8e417071ce1929d261efe2399ae2"}, {"sha": "05014a3331dad3ad79fac1e9547c4c47164b4585", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ec43f1dd9b8bfed8939e8df8424d329d7e1c0253/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec43f1dd9b8bfed8939e8df8424d329d7e1c0253/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=ec43f1dd9b8bfed8939e8df8424d329d7e1c0253", "patch": "@@ -288,19 +288,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let [algorithm, ptr, len, flags] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let algorithm = this.read_scalar(algorithm)?;\n+                let algorithm = algorithm.to_machine_usize(this)?;\n                 let ptr = this.read_pointer(ptr)?;\n                 let len = this.read_scalar(len)?.to_u32()?;\n                 let flags = this.read_scalar(flags)?.to_u32()?;\n-                if flags != 2 {\n-                    //      ^ BCRYPT_USE_SYSTEM_PREFERRED_RNG\n-                    throw_unsup_format!(\n-                        \"BCryptGenRandom is supported only with the BCRYPT_USE_SYSTEM_PREFERRED_RNG flag\"\n-                    );\n-                }\n-                if algorithm.to_machine_usize(this)? != 0 {\n-                    throw_unsup_format!(\n-                        \"BCryptGenRandom algorithm must be NULL when the flag is BCRYPT_USE_SYSTEM_PREFERRED_RNG\"\n-                    );\n+                match flags {\n+                    0 => {\n+                        // BCRYPT_RNG_ALG_HANDLE\n+                        if algorithm != 0x81 {\n+                            throw_unsup_format!(\n+                                \"BCryptGenRandom algorithm must be BCRYPT_RNG_ALG_HANDLE when the flag is 0\"\n+                            );\n+                        }\n+                    }\n+                    2 => {\n+                        // BCRYPT_USE_SYSTEM_PREFERRED_RNG\n+                        if algorithm != 0 {\n+                            throw_unsup_format!(\n+                                \"BCryptGenRandom algorithm must be NULL when the flag is BCRYPT_USE_SYSTEM_PREFERRED_RNG\"\n+                            );\n+                        }\n+                    }\n+                    _ => {\n+                        throw_unsup_format!(\n+                            \"BCryptGenRandom is only supported with BCRYPT_USE_SYSTEM_PREFERRED_RNG or BCRYPT_RNG_ALG_HANDLE\"\n+                        );\n+                    }\n                 }\n                 this.gen_random(ptr, len.into())?;\n                 this.write_null(dest)?; // STATUS_SUCCESS"}]}