{"sha": "282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4MmYzZDk5YTVhZDg1YWNiYzU4YzAzYjVkZmNkYWJmNjQ5YzBjODU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-14T05:14:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-25T03:59:53Z"}, "message": "Test fixes and rebase problems\n\nNote that this removes a number of run-pass tests which are exercising behavior\nof the old runtime. This functionality no longer exists and is thoroughly tested\ninside of libgreen and libnative. There isn't really the notion of \"starting the\nruntime\" any more. The major notion now is \"bootstrapping the initial task\".", "tree": {"sha": "ec391a6b37f99ba63cadb50757040e92f432c1b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec391a6b37f99ba63cadb50757040e92f432c1b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "html_url": "https://github.com/rust-lang/rust/commit/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39dbcd7b012da733f378b0fadf1e7d2519dc0d0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/39dbcd7b012da733f378b0fadf1e7d2519dc0d0c", "html_url": "https://github.com/rust-lang/rust/commit/39dbcd7b012da733f378b0fadf1e7d2519dc0d0c"}], "stats": {"total": 241, "additions": 134, "deletions": 107}, "files": [{"sha": "f1b18e8f64b0a41356080b9a22d1a079ba09571b", "filename": "Makefile.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -280,9 +280,15 @@ define CHECK_FOR_OLD_GLOB_MATCHES_EXCEPT\n endef\n \n # Same interface as above, but deletes rather than just listing the files.\n+ifdef VERBOSE\n define REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT\n   $(Q)MATCHES=\"$(filter-out %$(3),$(wildcard $(1)/$(2)))\"; if [ -n \"$$MATCHES\" ] ; then echo \"warning: removing previous\" \\'$(2)\\' \"libraries:\" $$MATCHES; rm $$MATCHES ; fi\n endef\n+else\n+define REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT\n+  $(Q)MATCHES=\"$(filter-out %$(3),$(wildcard $(1)/$(2)))\"; if [ -n \"$$MATCHES\" ] ; then rm $$MATCHES ; fi\n+endef\n+endif\n \n # We use a different strategy for LIST_ALL_OLD_GLOB_MATCHES_EXCEPT\n # than in the macros above because it needs the result of running the"}, {"sha": "db8488f792f9eee7772b4e0dddd3b19063fef3ee", "filename": "mk/target.mk", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -161,16 +161,13 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)):\t\t\\\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_GLOB_$(2)),$$(notdir $$@))\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_RGLOB_$(2)),$$(notdir $$@))\n \n-# NOTE: after the next snapshot remove these '-L' flags\n $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X_$(3)):\t\t\t\\\n \t\t$$(DRIVER_CRATE)\t\t\t\t\\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n+\t\t$$(SREQ$(1)_T_$(2)_H_$(3)) \\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)) \\\n \t\t| $$(TBIN$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) --cfg rustc -o $$@ $$< \\\n-\t\t-L $$(UV_SUPPORT_DIR_$(2)) \\\n-\t\t-L $$(dir $$(LIBUV_LIB_$(2)))\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) --cfg rustc -o $$@ $$<\n ifdef CFG_ENABLE_PAX_FLAGS\n \t@$$(call E, apply PaX flags: $$@)\n \t@\"$(CFG_PAXCTL)\" -cm \"$$@\""}, {"sha": "89b6f06abfc7f979aba79cb1c25dd6b815bf8351", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -16,7 +16,7 @@\n extern mod extra;\n \n use std::os;\n-use std::rt;\n+use std::io;\n use std::io::fs;\n \n use extra::getopts;\n@@ -234,7 +234,7 @@ pub fn run_tests(config: &config) {\n     // sadly osx needs some file descriptor limits raised for running tests in\n     // parallel (especially when we have lots and lots of child processes).\n     // For context, see #8904\n-    rt::test::prepare_for_lots_of_tests();\n+    io::test::raise_fd_limit();\n     let res = test::run_tests_console(&opts, tests);\n     if !res { fail!(\"Some tests failed\"); }\n }"}, {"sha": "073322b0815a2251abe558383c738555e0b49b7b", "filename": "src/etc/licenseck.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Fetc%2Flicenseck.py", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Fetc%2Flicenseck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flicenseck.py?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -76,9 +76,9 @@\n     \"rt/isaac/randport.cpp\", # public domain\n     \"rt/isaac/rand.h\", # public domain\n     \"rt/isaac/standard.h\", # public domain\n-    \"libstd/rt/mpsc_queue.rs\", # BSD\n-    \"libstd/rt/spsc_queue.rs\", # BSD\n-    \"libstd/rt/mpmc_bounded_queue.rs\", # BSD\n+    \"libstd/sync/mpsc_queue.rs\", # BSD\n+    \"libstd/sync/spsc_queue.rs\", # BSD\n+    \"libstd/sync/mpmc_bounded_queue.rs\", # BSD\n ]\n \n def check_license(name, contents):"}, {"sha": "57e2a0bfe16edcb3078b6e8f97b43a92c7cf317e", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -17,6 +17,7 @@\n //! This can be optionally linked in to rust programs in order to provide M:N\n //! functionality inside of 1:1 programs.\n \n+#[pkgid = \"green#0.9-pre\"];\n #[link(name = \"green\",\n        package_id = \"green\",\n        vers = \"0.9-pre\",\n@@ -30,17 +31,16 @@\n // NB this does *not* include globs, please keep it that way.\n #[feature(macro_rules)];\n \n-use std::cast;\n use std::os;\n-use std::rt::thread::Thread;\n-use std::rt;\n use std::rt::crate_map;\n use std::rt::rtio;\n-use std::sync::deque;\n+use std::rt::thread::Thread;\n+use std::rt;\n use std::sync::atomics::{SeqCst, AtomicUint, INIT_ATOMIC_UINT};\n+use std::sync::deque;\n use std::task::TaskOpts;\n-use std::vec;\n use std::util;\n+use std::vec;\n use stdtask = std::rt::task;\n \n use sched::{Shutdown, Scheduler, SchedHandle, TaskFromFriend, NewNeighbor};\n@@ -58,9 +58,9 @@ pub mod sleeper_list;\n pub mod stack;\n pub mod task;\n \n-#[cfg(stage0)]\n #[lang = \"start\"]\n pub fn lang_start(main: *u8, argc: int, argv: **u8) -> int {\n+    use std::cast;\n     do start(argc, argv) {\n         let main: extern \"Rust\" fn() = unsafe { cast::transmute(main) };\n         main();\n@@ -103,7 +103,15 @@ pub fn start(argc: int, argv: **u8, main: proc()) -> int {\n /// have returned.\n pub fn run(main: proc()) -> int {\n     let mut pool = SchedPool::new(PoolConfig::new());\n-    pool.spawn(TaskOpts::new(), main);\n+    let (port, chan) = Chan::new();\n+    let mut opts = TaskOpts::new();\n+    opts.notify_chan = Some(chan);\n+    pool.spawn(opts, main);\n+    do pool.spawn(TaskOpts::new()) {\n+        if port.recv().is_err() {\n+            os::set_exit_status(rt::DEFAULT_ERROR_CODE);\n+        }\n+    }\n     unsafe { stdtask::wait_for_completion(); }\n     pool.shutdown();\n     os::get_exit_status()"}, {"sha": "44b66a7804de25ab836f6090ce324b5cdb32e72a", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -14,6 +14,7 @@\n //! runtime. In addition, all I/O provided by this crate is the thread blocking\n //! version of I/O.\n \n+#[pkgid = \"native#0.9-pre\"];\n #[link(name = \"native\",\n        package_id = \"native\",\n        vers = \"0.9-pre\",\n@@ -24,6 +25,7 @@\n #[crate_type = \"rlib\"];\n #[crate_type = \"dylib\"];\n \n+// Allow check-stage0-native for now\n #[cfg(stage0, test)] extern mod green;\n \n // NB this crate explicitly does *not* allow glob imports, please seriously"}, {"sha": "d7be06724a09a768b3b12664f15f47e2b967d28e", "filename": "src/librustuv/homing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibrustuv%2Fhoming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibrustuv%2Fhoming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fhoming.rs?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -31,6 +31,8 @@\n //! This enqueueing is done with a concurrent queue from libstd, and the\n //! signalling is achieved with an async handle.\n \n+#[allow(dead_code)];\n+\n use std::rt::local::Local;\n use std::rt::rtio::LocalIo;\n use std::rt::task::{Task, BlockedTask};"}, {"sha": "b36bdf62775b48e29f7b436eb57dfbf6c7cb4b34", "filename": "src/librustuv/queue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibrustuv%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibrustuv%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fqueue.rs?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -18,6 +18,8 @@\n //! event loop alive we use uv_ref and uv_unref in order to control when the\n //! async handle is active or not.\n \n+#[allow(dead_code)];\n+\n use std::cast;\n use std::libc::{c_void, c_int};\n use std::rt::task::BlockedTask;"}, {"sha": "e273aedf7cc7441e72009663d07e14d9c2ae4230", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -113,3 +113,82 @@ fn base_port() -> u16 {\n \n     return final_base;\n }\n+\n+pub fn raise_fd_limit() {\n+    unsafe { darwin_fd_limit::raise_fd_limit() }\n+}\n+\n+#[cfg(target_os=\"macos\")]\n+#[allow(non_camel_case_types)]\n+mod darwin_fd_limit {\n+    /*!\n+     * darwin_fd_limit exists to work around an issue where launchctl on Mac OS X defaults the\n+     * rlimit maxfiles to 256/unlimited. The default soft limit of 256 ends up being far too low\n+     * for our multithreaded scheduler testing, depending on the number of cores available.\n+     *\n+     * This fixes issue #7772.\n+     */\n+\n+    use libc;\n+    type rlim_t = libc::uint64_t;\n+    struct rlimit {\n+        rlim_cur: rlim_t,\n+        rlim_max: rlim_t\n+    }\n+    #[nolink]\n+    extern {\n+        // name probably doesn't need to be mut, but the C function doesn't specify const\n+        fn sysctl(name: *mut libc::c_int, namelen: libc::c_uint,\n+                  oldp: *mut libc::c_void, oldlenp: *mut libc::size_t,\n+                  newp: *mut libc::c_void, newlen: libc::size_t) -> libc::c_int;\n+        fn getrlimit(resource: libc::c_int, rlp: *mut rlimit) -> libc::c_int;\n+        fn setrlimit(resource: libc::c_int, rlp: *rlimit) -> libc::c_int;\n+    }\n+    static CTL_KERN: libc::c_int = 1;\n+    static KERN_MAXFILESPERPROC: libc::c_int = 29;\n+    static RLIMIT_NOFILE: libc::c_int = 8;\n+\n+    pub unsafe fn raise_fd_limit() {\n+        // The strategy here is to fetch the current resource limits, read the kern.maxfilesperproc\n+        // sysctl value, and bump the soft resource limit for maxfiles up to the sysctl value.\n+        use ptr::{to_unsafe_ptr, to_mut_unsafe_ptr, mut_null};\n+        use mem::size_of_val;\n+        use os::last_os_error;\n+\n+        // Fetch the kern.maxfilesperproc value\n+        let mut mib: [libc::c_int, ..2] = [CTL_KERN, KERN_MAXFILESPERPROC];\n+        let mut maxfiles: libc::c_int = 0;\n+        let mut size: libc::size_t = size_of_val(&maxfiles) as libc::size_t;\n+        if sysctl(to_mut_unsafe_ptr(&mut mib[0]), 2,\n+                  to_mut_unsafe_ptr(&mut maxfiles) as *mut libc::c_void,\n+                  to_mut_unsafe_ptr(&mut size),\n+                  mut_null(), 0) != 0 {\n+            let err = last_os_error();\n+            error!(\"raise_fd_limit: error calling sysctl: {}\", err);\n+            return;\n+        }\n+\n+        // Fetch the current resource limits\n+        let mut rlim = rlimit{rlim_cur: 0, rlim_max: 0};\n+        if getrlimit(RLIMIT_NOFILE, to_mut_unsafe_ptr(&mut rlim)) != 0 {\n+            let err = last_os_error();\n+            error!(\"raise_fd_limit: error calling getrlimit: {}\", err);\n+            return;\n+        }\n+\n+        // Bump the soft limit to the smaller of kern.maxfilesperproc and the hard limit\n+        rlim.rlim_cur = ::cmp::min(maxfiles as rlim_t, rlim.rlim_max);\n+\n+        // Set our newly-increased resource limit\n+        if setrlimit(RLIMIT_NOFILE, to_unsafe_ptr(&rlim)) != 0 {\n+            let err = last_os_error();\n+            error!(\"raise_fd_limit: error calling setrlimit: {}\", err);\n+            return;\n+        }\n+    }\n+}\n+\n+#[cfg(not(target_os=\"macos\"))]\n+mod darwin_fd_limit {\n+    pub unsafe fn raise_fd_limit() {}\n+}"}, {"sha": "c0e1086483d78a43038ceb0ed161303437a78269", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -38,8 +38,13 @@ use task::{TaskResult, TaskOpts};\n use unstable::finally::Finally;\n use unstable::mutex::{Mutex, MUTEX_INIT};\n \n-#[cfg(stage0)] pub use rt::unwind::begin_unwind;\n+#[cfg(stage0)]\n+pub use rt::unwind::begin_unwind;\n \n+// These two statics are used as bookeeping to keep track of the rust runtime's\n+// count of threads. In 1:1 contexts, this is used to know when to return from\n+// the main function, and in M:N contexts this is used to know when to shut down\n+// the pool of schedulers.\n static mut TASK_COUNT: AtomicUint = INIT_ATOMIC_UINT;\n static mut TASK_LOCK: Mutex = MUTEX_INIT;\n \n@@ -181,10 +186,15 @@ impl Task {\n         // Cleanup the dynamic borrowck debugging info\n         borrowck::clear_task_borrow_list();\n \n-        // TODO: dox\n+        // Here we must unsafely borrow the task in order to not remove it from\n+        // TLS. When collecting failure, we may attempt to send on a channel (or\n+        // just run aribitrary code), so we must be sure to still have a local\n+        // task in TLS.\n         unsafe {\n             let me: *mut Task = Local::unsafe_borrow();\n             (*me).death.collect_failure((*me).unwinder.result());\n+\n+            // see comments on these statics for why they're used\n             if TASK_COUNT.fetch_sub(1, SeqCst) == 1 {\n                 TASK_LOCK.lock();\n                 TASK_LOCK.signal();\n@@ -386,6 +396,10 @@ impl Drop for Death {\n     }\n }\n \n+/// The main function of all rust executables will by default use this function.\n+/// This function will *block* the OS thread (hence the `unsafe`) waiting for\n+/// all known tasks to complete. Once this function has returned, it is\n+/// guaranteed that no more user-defined code is still running.\n pub unsafe fn wait_for_completion() {\n     TASK_LOCK.lock();\n     while TASK_COUNT.load(SeqCst) > 0 {"}, {"sha": "b405104c09a25cccfeb8269713990dae255cd140", "filename": "src/libstd/sync/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibstd%2Fsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibstd%2Fsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Farc.rs?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -32,7 +32,7 @@ use vec;\n /// An atomically reference counted pointer.\n ///\n /// Enforces no shared-memory safety.\n-#[unsafe_no_drop_flag]\n+//#[unsafe_no_drop_flag] FIXME: #9758\n pub struct UnsafeArc<T> {\n     priv data: *mut ArcData<T>,\n }"}, {"sha": "aa7e0d0eced8d3877618ae19fdc3d6b474a2d498", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -606,7 +606,6 @@ impl AstBuilder for @ExtCtxt {\n             ~[\n                 self.ident_of(\"std\"),\n                 self.ident_of(\"rt\"),\n-                self.ident_of(\"task\"),\n                 self.ident_of(\"begin_unwind\"),\n             ],\n             ~["}, {"sha": "6e3d9629da043b88befd8963236c86181a63171b", "filename": "src/test/run-pass/core-rt-smoke.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39dbcd7b012da733f378b0fadf1e7d2519dc0d0c/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39dbcd7b012da733f378b0fadf1e7d2519dc0d0c/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-rt-smoke.rs?ref=39dbcd7b012da733f378b0fadf1e7d2519dc0d0c", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-fast\n-\n-// A simple test of starting the runtime manually\n-\n-#[start]\n-fn start(argc: int, argv: **u8) -> int {\n-    do std::rt::start(argc, argv) {\n-        info!(\"creating my own runtime is joy\");\n-    }\n-}"}, {"sha": "d3b6d6059849df97227c93cf64188d4ff82ee3ad", "filename": "src/test/run-pass/native-print-no-uv.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39dbcd7b012da733f378b0fadf1e7d2519dc0d0c/src%2Ftest%2Frun-pass%2Fnative-print-no-uv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39dbcd7b012da733f378b0fadf1e7d2519dc0d0c/src%2Ftest%2Frun-pass%2Fnative-print-no-uv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-print-no-uv.rs?ref=39dbcd7b012da733f378b0fadf1e7d2519dc0d0c", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-fast\n-\n-#[no_uv];\n-\n-fn main() {\n-    println!(\"hello\");\n-}"}, {"sha": "a9a26c2fbb14a60d09170dbc8626530caa8912bb", "filename": "src/test/run-pass/rt-run-twice.rs", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39dbcd7b012da733f378b0fadf1e7d2519dc0d0c/src%2Ftest%2Frun-pass%2Frt-run-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39dbcd7b012da733f378b0fadf1e7d2519dc0d0c/src%2Ftest%2Frun-pass%2Frt-run-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-run-twice.rs?ref=39dbcd7b012da733f378b0fadf1e7d2519dc0d0c", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-fast make-check does not like `#[start]`\n-\n-use std::rt;\n-\n-#[start]\n-fn start(argc: int, argv: **u8) -> int {\n-    do rt::start(argc, argv) {\n-        println(\"First invocation\");\n-    };\n-\n-    do rt::start(argc, argv) {\n-        println(\"Second invocation\");\n-    };\n-\n-    0\n-}"}, {"sha": "47a723ce6e14dc35511ea2aaa50ebaa9fbab7df3", "filename": "src/test/run-pass/rt-start-main-thread.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/39dbcd7b012da733f378b0fadf1e7d2519dc0d0c/src%2Ftest%2Frun-pass%2Frt-start-main-thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39dbcd7b012da733f378b0fadf1e7d2519dc0d0c/src%2Ftest%2Frun-pass%2Frt-start-main-thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-start-main-thread.rs?ref=39dbcd7b012da733f378b0fadf1e7d2519dc0d0c", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-fast\n-\n-#[start]\n-fn start(argc: int, argv: **u8) -> int {\n-    do std::rt::start_on_main_thread(argc, argv) {\n-        info!(\"running on main thread\");\n-        do spawn {\n-            info!(\"running on another thread\");\n-        }\n-    }\n-}"}, {"sha": "f8094f9fdb9e87abb42bd51a93f02db9019bf7d4", "filename": "src/test/run-pass/spawning-with-debug.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -17,6 +17,5 @@ use std::task;\n \n fn main() {\n     let mut t = task::task();\n-    t.sched_mode(task::SingleThreaded);\n     t.spawn(proc() ());\n }"}, {"sha": "56ce5397efb13072f39de8b495a880df601e6076", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/282f3d99a5ad85acbc58c03b5dfcdabf649c0c85/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=282f3d99a5ad85acbc58c03b5dfcdabf649c0c85", "patch": "@@ -10,6 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-fast\n+\n #[allow(unused_imports)];\n \n #[no_std];\n@@ -25,4 +27,5 @@ mod baz {\n     pub use x = std::str;\n }\n \n-pub fn main() { }\n+#[start]\n+pub fn start(_: int, _: **u8) -> int { 3 }"}]}