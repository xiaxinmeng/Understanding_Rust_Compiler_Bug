{"sha": "8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "node_id": "C_kwDOAAsO6NoAKDhmYjE5NGM4NmYxMDBhNDQzYjZlNjM3ZjBmZjhlNGMwMTQ4YTRmMDU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-23T03:28:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-23T03:28:23Z"}, "message": "Rollup merge of #89920 - hudson-ayers:location-detail-control, r=davidtwco\n\nImplement -Z location-detail flag\n\nThis PR implements the `-Z location-detail` flag as described in https://github.com/rust-lang/rfcs/pull/2091 .\n\n`-Z location-detail=val` controls what location details are tracked when using `caller_location`. This allows users to control what location details are printed as part of panic messages, by allowing them to exclude any combination of filenames, line numbers, and column numbers. This option is intended to provide users with a way to mitigate the size impact of `#[track_caller]`.\n\nSome measurements of the savings of this approach on an embedded binary can be found here: https://github.com/rust-lang/rust/issues/70579#issuecomment-942556822 .\n\nCloses #70580 (unless people want to leave that open as a place for discussion of further improvements).\n\nThis is my first real PR to rust, so any help correcting mistakes / understanding side effects / improving my tests is appreciated :)\n\nI have one question: RFC 2091 specified this as a debugging option (I think that is what -Z implies?). Does that mean this can never be stabilized without a separate MCP? If so, do I need to submit an MCP now, or is the initial RFC specifying this option sufficient for this to be merged as is, and then an MCP would be needed for eventual stabilization?", "tree": {"sha": "76015e6752a50bd4f0a78e47587a707c85d1fa13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76015e6752a50bd4f0a78e47587a707c85d1fa13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhc4FYCRBK7hj4Ov3rIwAAXo4IAKgmAcjcPMQ9wJLcNXt7I2lD\nJ3TXrVWVNzGy2A+gY3eg8y2ddlm2Wrg5el9KTVpy1q+B8QBJzxAqpBv6TYQ4ImUh\nJfINQ0MHR4sBzmR5VQkYXOPVpB8jyGvjZmh15Ko3M0l1ufNAtXr7trwb7co0nFfF\nX4gntObfIkOsOs1jPMtgukFPOP9ZWENOXYr/D+/RcDTTTPNifUdy2GxSSPlc35nT\n4f/pTEPm7H7NjvLNmP16cbdZnmF/AAB6NX9UReEyHwSQ+hdzAqUDjt+3vntu3U7F\nThFWyur6yJwnt042cGOgiY9viLII493h4b72qmdFOf3RYkFHp74UB1sx/5hz074=\n=y8PC\n-----END PGP SIGNATURE-----\n", "payload": "tree 76015e6752a50bd4f0a78e47587a707c85d1fa13\nparent 736e8ebd1ca703c7de40806a727559bef836d3f7\nparent b802629311ee9873978e91f185657fd6ae3cba28\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634959703 +0200\ncommitter GitHub <noreply@github.com> 1634959703 +0200\n\nRollup merge of #89920 - hudson-ayers:location-detail-control, r=davidtwco\n\nImplement -Z location-detail flag\n\nThis PR implements the `-Z location-detail` flag as described in https://github.com/rust-lang/rfcs/pull/2091 .\n\n`-Z location-detail=val` controls what location details are tracked when using `caller_location`. This allows users to control what location details are printed as part of panic messages, by allowing them to exclude any combination of filenames, line numbers, and column numbers. This option is intended to provide users with a way to mitigate the size impact of `#[track_caller]`.\n\nSome measurements of the savings of this approach on an embedded binary can be found here: https://github.com/rust-lang/rust/issues/70579#issuecomment-942556822 .\n\nCloses #70580 (unless people want to leave that open as a place for discussion of further improvements).\n\nThis is my first real PR to rust, so any help correcting mistakes / understanding side effects / improving my tests is appreciated :)\n\nI have one question: RFC 2091 specified this as a debugging option (I think that is what -Z implies?). Does that mean this can never be stabilized without a separate MCP? If so, do I need to submit an MCP now, or is the initial RFC specifying this option sufficient for this to be merged as is, and then an MCP would be needed for eventual stabilization?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "html_url": "https://github.com/rust-lang/rust/commit/8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "736e8ebd1ca703c7de40806a727559bef836d3f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/736e8ebd1ca703c7de40806a727559bef836d3f7", "html_url": "https://github.com/rust-lang/rust/commit/736e8ebd1ca703c7de40806a727559bef836d3f7"}, {"sha": "b802629311ee9873978e91f185657fd6ae3cba28", "url": "https://api.github.com/repos/rust-lang/rust/commits/b802629311ee9873978e91f185657fd6ae3cba28", "html_url": "https://github.com/rust-lang/rust/commit/b802629311ee9873978e91f185657fd6ae3cba28"}], "stats": {"total": 141, "additions": 135, "deletions": 6}, "files": [{"sha": "b5e97ec8fe0f466e94fbd39520bda32633831dda", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -80,10 +80,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         line: u32,\n         col: u32,\n     ) -> MPlaceTy<'tcx, M::PointerTag> {\n-        let file =\n-            self.allocate_str(&filename.as_str(), MemoryKind::CallerLocation, Mutability::Not);\n-        let line = Scalar::from_u32(line);\n-        let col = Scalar::from_u32(col);\n+        let loc_details = &self.tcx.sess.opts.debugging_opts.location_detail;\n+        let file = if loc_details.file {\n+            self.allocate_str(&filename.as_str(), MemoryKind::CallerLocation, Mutability::Not)\n+        } else {\n+            // FIXME: This creates a new allocation each time. It might be preferable to\n+            // perform this allocation only once, and re-use the `MPlaceTy`.\n+            // See https://github.com/rust-lang/rust/pull/89920#discussion_r730012398\n+            self.allocate_str(\"<redacted>\", MemoryKind::CallerLocation, Mutability::Not)\n+        };\n+        let line = if loc_details.line { Scalar::from_u32(line) } else { Scalar::from_u32(0) };\n+        let col = if loc_details.column { Scalar::from_u32(col) } else { Scalar::from_u32(0) };\n \n         // Allocate memory for `CallerLocation` struct.\n         let loc_ty = self"}, {"sha": "dab4d485e2d0b22d2c20c8e1e31a1dfd35e7ce26", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -5,7 +5,9 @@ use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_session::config::InstrumentCoverage;\n use rustc_session::config::Strip;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n-use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n+use rustc_session::config::{\n+    rustc_optgroups, ErrorOutputType, ExternLocation, LocationDetail, Options, Passes,\n+};\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n use rustc_session::config::{\n     Externs, OutputType, OutputTypes, SymbolManglingVersion, WasiExecModel,\n@@ -733,6 +735,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(instrument_mcount, true);\n     tracked!(link_only, true);\n     tracked!(llvm_plugins, vec![String::from(\"plugin_name\")]);\n+    tracked!(location_detail, LocationDetail { file: true, line: false, column: false });\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);\n     tracked!(mir_opt_level, Some(4));"}, {"sha": "299dfed9d5dcea7845f2898b3cb612e1ddc96d80", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -174,6 +174,20 @@ impl LinkerPluginLto {\n     }\n }\n \n+/// The different settings that can be enabled via the `-Z location-detail` flag.\n+#[derive(Clone, PartialEq, Hash, Debug)]\n+pub struct LocationDetail {\n+    pub file: bool,\n+    pub line: bool,\n+    pub column: bool,\n+}\n+\n+impl LocationDetail {\n+    pub fn all() -> Self {\n+        Self { file: true, line: true, column: true }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Hash, Debug)]\n pub enum SwitchWithOptPath {\n     Enabled(Option<PathBuf>),\n@@ -2422,7 +2436,7 @@ crate mod dep_tracking {\n     use super::LdImpl;\n     use super::{\n         CFGuard, CrateType, DebugInfo, ErrorOutputType, InstrumentCoverage, LinkerPluginLto,\n-        LtoCli, OptLevel, OutputType, OutputTypes, Passes, SourceFileHashAlgorithm,\n+        LocationDetail, LtoCli, OptLevel, OutputType, OutputTypes, Passes, SourceFileHashAlgorithm,\n         SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n     };\n     use crate::lint;\n@@ -2513,6 +2527,7 @@ crate mod dep_tracking {\n         Option<LdImpl>,\n         OutputType,\n         RealFileName,\n+        LocationDetail,\n     );\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)"}, {"sha": "782055b9a77da2a68c5a90a24497dd06d3d7ddf5", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -368,6 +368,8 @@ mod desc {\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, `fat`, or omitted\";\n     pub const parse_linker_plugin_lto: &str =\n         \"either a boolean (`yes`, `no`, `on`, `off`, etc), or the path to the linker plugin\";\n+    pub const parse_location_detail: &str =\n+        \"comma seperated list of location details to track: `file`, `line`, or `column`\";\n     pub const parse_switch_with_opt_path: &str =\n         \"an optional path to the profiling data output directory\";\n     pub const parse_merge_functions: &str = \"one of: `disabled`, `trampolines`, or `aliases`\";\n@@ -484,6 +486,25 @@ mod parse {\n         }\n     }\n \n+    crate fn parse_location_detail(ld: &mut LocationDetail, v: Option<&str>) -> bool {\n+        if let Some(v) = v {\n+            ld.line = false;\n+            ld.file = false;\n+            ld.column = false;\n+            for s in v.split(',') {\n+                match s {\n+                    \"file\" => ld.file = true,\n+                    \"line\" => ld.line = true,\n+                    \"column\" => ld.column = true,\n+                    _ => return false,\n+                }\n+            }\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n     crate fn parse_opt_comma_list(slot: &mut Option<Vec<String>>, v: Option<&str>) -> bool {\n         match v {\n             Some(s) => {\n@@ -1152,6 +1173,9 @@ options! {\n         \"a list LLVM plugins to enable (space separated)\"),\n     llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],\n         \"generate JSON tracing data file from LLVM data (default: no)\"),\n+    location_detail: LocationDetail = (LocationDetail::all(), parse_location_detail, [TRACKED],\n+        \"comma seperated list of location details to be tracked when using caller_location \\\n+        valid options are `file`, `line`, and `column` (default: all)\"),\n     ls: bool = (false, parse_bool, [UNTRACKED],\n         \"list the symbols defined by a library crate (default: no)\"),\n     macro_backtrace: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "08d937cc28200fc266785d350720c229ff72f2ed", "filename": "src/doc/unstable-book/src/compiler-flags/location-detail.md", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Flocation-detail.md", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Flocation-detail.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Flocation-detail.md?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -0,0 +1,43 @@\n+# `location-detail`\n+\n+The tracking issue for this feature is: [#70580](https://github.com/rust-lang/rust/issues/70580).\n+\n+------------------------\n+\n+Option `-Z location-detail=val` controls what location details are tracked when\n+using `caller_location`. This allows users to control what location details\n+are printed as part of panic messages, by allowing them to exclude any combination\n+of filenames, line numbers, and column numbers. This option is intended to provide\n+users with a way to mitigate the size impact of `#[track_caller]`.\n+\n+This option supports a comma separated list of location details to be included. Valid options\n+within this list are:\n+\n+- `file` - the filename of the panic will be included in the panic output\n+- `line` - the source line of the panic will be included in the panic output\n+- `column` - the source column of the panic will be included in the panic output\n+\n+Any combination of these three options are supported. If this option is not specified,\n+all three are included by default.\n+\n+An example of a panic output when using `-Z location-detail=line`:\n+```text\n+panicked at 'Process blink had a fault', <redacted>:323:0\n+```\n+\n+The code size savings from this option are two-fold. First, the `&'static str` values\n+for each path to a file containing a panic are removed from the binary. For projects\n+with deep directory structures and many files with panics, this can add up. This category\n+of savings can only be realized by excluding filenames from the panic output. Second,\n+savings can be realized by allowing multiple panics to be fused into a single panicking\n+branch. It is often the case that within a single file, multiple panics with the same\n+panic message exist -- e.g. two calls to `Option::unwrap()` in a single line, or\n+two calls to `Result::expect()` on adjacent lines. If column and line information\n+are included in the `Location` struct passed to the panic handler, these branches cannot\n+be fused, as the output is different depending on which panic occurs. However if line\n+and column information is identical for all panics, these branches can be fused, which\n+can lead to substantial code size savings, especially for small embedded binaries with\n+many panics.\n+\n+The savings from this option are amplified when combined with the use of `-Zbuild-std`, as\n+otherwise paths for panics within the standard library are still included in your binary."}, {"sha": "673e638ca0d6beb2e750c9a256789388a6010b0b", "filename": "src/test/ui/panics/location-detail-panic-no-column.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-column.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-column.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-column.rs?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -0,0 +1,7 @@\n+// run-fail\n+// check-run-results\n+// compile-flags: -Zlocation-detail=line,file\n+\n+fn main() {\n+    panic!(\"column-redacted\");\n+}"}, {"sha": "9f35623fba392b39e3d4abd1c11a507f5612529d", "filename": "src/test/ui/panics/location-detail-panic-no-column.run.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-column.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-column.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-column.run.stderr?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -0,0 +1,2 @@\n+thread 'main' panicked at 'column-redacted', $DIR/location-detail-panic-no-column.rs:6:0\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "0e5d52cfd1534c356d8e8e69c994212d0b98b651", "filename": "src/test/ui/panics/location-detail-panic-no-file.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-file.rs?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -0,0 +1,7 @@\n+// run-fail\n+// check-run-results\n+// compile-flags: -Zlocation-detail=line,column\n+\n+fn main() {\n+    panic!(\"file-redacted\");\n+}"}, {"sha": "1e07e3a07afd5ba8dbf403b5ba7f4170c2aadc63", "filename": "src/test/ui/panics/location-detail-panic-no-file.run.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-file.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-file.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-file.run.stderr?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -0,0 +1,2 @@\n+thread 'main' panicked at 'file-redacted', <redacted>:6:5\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "57f6d0ebcb9fac09f38a18bdc855924a9393bf8c", "filename": "src/test/ui/panics/location-detail-panic-no-line.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-line.rs?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -0,0 +1,7 @@\n+// run-fail\n+// check-run-results\n+// compile-flags: -Zlocation-detail=file,column\n+\n+fn main() {\n+    panic!(\"line-redacted\");\n+}"}, {"sha": "cc3f1624c49abdab8d5c0c5e5e954034099ce257", "filename": "src/test/ui/panics/location-detail-panic-no-line.run.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-line.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-line.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-panic-no-line.run.stderr?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -0,0 +1,2 @@\n+thread 'main' panicked at 'line-redacted', $DIR/location-detail-panic-no-line.rs:0:5\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "d7f96f058e082edd95b0cb5f78ce14fc2ef6ed7a", "filename": "src/test/ui/panics/location-detail-unwrap-no-file.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.rs?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -0,0 +1,8 @@\n+// run-fail\n+// check-run-results\n+// compile-flags: -Zlocation-detail=line,column\n+\n+fn main() {\n+    let opt: Option<u32> = None;\n+    opt.unwrap();\n+}"}, {"sha": "f8f84b5c49a22a03b90bd1f53fc39918f90ec913", "filename": "src/test/ui/panics/location-detail-unwrap-no-file.run.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fb194c86f100a443b6e637f0ff8e4c0148a4f05/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Flocation-detail-unwrap-no-file.run.stderr?ref=8fb194c86f100a443b6e637f0ff8e4c0148a4f05", "patch": "@@ -0,0 +1,2 @@\n+thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', <redacted>:7:9\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}]}