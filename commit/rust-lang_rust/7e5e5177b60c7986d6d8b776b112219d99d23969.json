{"sha": "7e5e5177b60c7986d6d8b776b112219d99d23969", "node_id": "C_kwDOAAsO6NoAKDdlNWU1MTc3YjYwYzc5ODZkNmQ4Yjc3NmIxMTIyMTlkOTlkMjM5Njk", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2022-09-26T18:29:28Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2022-09-26T18:29:28Z"}, "message": "Generate `From` impls manually", "tree": {"sha": "478480b020825fbc37a900ab9322ff1c4339bd2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/478480b020825fbc37a900ab9322ff1c4339bd2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e5e5177b60c7986d6d8b776b112219d99d23969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5e5177b60c7986d6d8b776b112219d99d23969", "html_url": "https://github.com/rust-lang/rust/commit/7e5e5177b60c7986d6d8b776b112219d99d23969", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e5e5177b60c7986d6d8b776b112219d99d23969/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a8d84b4a39098014dcfeb9925d76fbac15a1bc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8d84b4a39098014dcfeb9925d76fbac15a1bc3", "html_url": "https://github.com/rust-lang/rust/commit/3a8d84b4a39098014dcfeb9925d76fbac15a1bc3"}], "stats": {"total": 631, "additions": 30, "deletions": 601}, "files": [{"sha": "449402e5f5b30af4f6e69e3b26c27aa234a2b93c", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 0, "deletions": 567, "changes": 567, "blob_url": "https://github.com/rust-lang/rust/blob/7e5e5177b60c7986d6d8b776b112219d99d23969/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5e5177b60c7986d6d8b776b112219d99d23969/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=7e5e5177b60c7986d6d8b776b112219d99d23969", "patch": "@@ -3894,12 +3894,6 @@ impl AstNode for AnyHasArgList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl From<CallExpr> for AnyHasArgList {\n-    fn from(node: CallExpr) -> AnyHasArgList { AnyHasArgList::new(node) }\n-}\n-impl From<MethodCallExpr> for AnyHasArgList {\n-    fn from(node: MethodCallExpr) -> AnyHasArgList { AnyHasArgList::new(node) }\n-}\n impl AnyHasAttrs {\n     #[inline]\n     pub fn new<T: ast::HasAttrs>(node: T) -> AnyHasAttrs {\n@@ -3984,207 +3978,6 @@ impl AstNode for AnyHasAttrs {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl From<MacroCall> for AnyHasAttrs {\n-    fn from(node: MacroCall) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<SourceFile> for AnyHasAttrs {\n-    fn from(node: SourceFile) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Const> for AnyHasAttrs {\n-    fn from(node: Const) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Enum> for AnyHasAttrs {\n-    fn from(node: Enum) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<ExternBlock> for AnyHasAttrs {\n-    fn from(node: ExternBlock) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<ExternCrate> for AnyHasAttrs {\n-    fn from(node: ExternCrate) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Fn> for AnyHasAttrs {\n-    fn from(node: Fn) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Impl> for AnyHasAttrs {\n-    fn from(node: Impl) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<MacroRules> for AnyHasAttrs {\n-    fn from(node: MacroRules) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<MacroDef> for AnyHasAttrs {\n-    fn from(node: MacroDef) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Module> for AnyHasAttrs {\n-    fn from(node: Module) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Static> for AnyHasAttrs {\n-    fn from(node: Static) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Struct> for AnyHasAttrs {\n-    fn from(node: Struct) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Trait> for AnyHasAttrs {\n-    fn from(node: Trait) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<TypeAlias> for AnyHasAttrs {\n-    fn from(node: TypeAlias) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Union> for AnyHasAttrs {\n-    fn from(node: Union) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Use> for AnyHasAttrs {\n-    fn from(node: Use) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<ItemList> for AnyHasAttrs {\n-    fn from(node: ItemList) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<BlockExpr> for AnyHasAttrs {\n-    fn from(node: BlockExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<SelfParam> for AnyHasAttrs {\n-    fn from(node: SelfParam) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Param> for AnyHasAttrs {\n-    fn from(node: Param) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<RecordField> for AnyHasAttrs {\n-    fn from(node: RecordField) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<TupleField> for AnyHasAttrs {\n-    fn from(node: TupleField) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Variant> for AnyHasAttrs {\n-    fn from(node: Variant) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<AssocItemList> for AnyHasAttrs {\n-    fn from(node: AssocItemList) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<ExternItemList> for AnyHasAttrs {\n-    fn from(node: ExternItemList) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<ConstParam> for AnyHasAttrs {\n-    fn from(node: ConstParam) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<LifetimeParam> for AnyHasAttrs {\n-    fn from(node: LifetimeParam) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<TypeParam> for AnyHasAttrs {\n-    fn from(node: TypeParam) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<LetStmt> for AnyHasAttrs {\n-    fn from(node: LetStmt) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<ArrayExpr> for AnyHasAttrs {\n-    fn from(node: ArrayExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<AwaitExpr> for AnyHasAttrs {\n-    fn from(node: AwaitExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<BinExpr> for AnyHasAttrs {\n-    fn from(node: BinExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<BoxExpr> for AnyHasAttrs {\n-    fn from(node: BoxExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<BreakExpr> for AnyHasAttrs {\n-    fn from(node: BreakExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<CallExpr> for AnyHasAttrs {\n-    fn from(node: CallExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<CastExpr> for AnyHasAttrs {\n-    fn from(node: CastExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<ClosureExpr> for AnyHasAttrs {\n-    fn from(node: ClosureExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<ContinueExpr> for AnyHasAttrs {\n-    fn from(node: ContinueExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<FieldExpr> for AnyHasAttrs {\n-    fn from(node: FieldExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<ForExpr> for AnyHasAttrs {\n-    fn from(node: ForExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<IfExpr> for AnyHasAttrs {\n-    fn from(node: IfExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<IndexExpr> for AnyHasAttrs {\n-    fn from(node: IndexExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<Literal> for AnyHasAttrs {\n-    fn from(node: Literal) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<LoopExpr> for AnyHasAttrs {\n-    fn from(node: LoopExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<MatchExpr> for AnyHasAttrs {\n-    fn from(node: MatchExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<MethodCallExpr> for AnyHasAttrs {\n-    fn from(node: MethodCallExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<ParenExpr> for AnyHasAttrs {\n-    fn from(node: ParenExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<PathExpr> for AnyHasAttrs {\n-    fn from(node: PathExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<PrefixExpr> for AnyHasAttrs {\n-    fn from(node: PrefixExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<RangeExpr> for AnyHasAttrs {\n-    fn from(node: RangeExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<RefExpr> for AnyHasAttrs {\n-    fn from(node: RefExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<ReturnExpr> for AnyHasAttrs {\n-    fn from(node: ReturnExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<TryExpr> for AnyHasAttrs {\n-    fn from(node: TryExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<TupleExpr> for AnyHasAttrs {\n-    fn from(node: TupleExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<WhileExpr> for AnyHasAttrs {\n-    fn from(node: WhileExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<YieldExpr> for AnyHasAttrs {\n-    fn from(node: YieldExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<LetExpr> for AnyHasAttrs {\n-    fn from(node: LetExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<UnderscoreExpr> for AnyHasAttrs {\n-    fn from(node: UnderscoreExpr) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<StmtList> for AnyHasAttrs {\n-    fn from(node: StmtList) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<RecordExprFieldList> for AnyHasAttrs {\n-    fn from(node: RecordExprFieldList) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<RecordExprField> for AnyHasAttrs {\n-    fn from(node: RecordExprField) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<MatchArmList> for AnyHasAttrs {\n-    fn from(node: MatchArmList) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<MatchArm> for AnyHasAttrs {\n-    fn from(node: MatchArm) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<IdentPat> for AnyHasAttrs {\n-    fn from(node: IdentPat) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<RestPat> for AnyHasAttrs {\n-    fn from(node: RestPat) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n-impl From<RecordPatField> for AnyHasAttrs {\n-    fn from(node: RecordPatField) -> AnyHasAttrs { AnyHasAttrs::new(node) }\n-}\n impl AnyHasDocComments {\n     #[inline]\n     pub fn new<T: ast::HasDocComments>(node: T) -> AnyHasDocComments {\n@@ -4222,66 +4015,6 @@ impl AstNode for AnyHasDocComments {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl From<MacroCall> for AnyHasDocComments {\n-    fn from(node: MacroCall) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<SourceFile> for AnyHasDocComments {\n-    fn from(node: SourceFile) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<Const> for AnyHasDocComments {\n-    fn from(node: Const) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<Enum> for AnyHasDocComments {\n-    fn from(node: Enum) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<ExternBlock> for AnyHasDocComments {\n-    fn from(node: ExternBlock) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<ExternCrate> for AnyHasDocComments {\n-    fn from(node: ExternCrate) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<Fn> for AnyHasDocComments {\n-    fn from(node: Fn) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<Impl> for AnyHasDocComments {\n-    fn from(node: Impl) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<MacroRules> for AnyHasDocComments {\n-    fn from(node: MacroRules) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<MacroDef> for AnyHasDocComments {\n-    fn from(node: MacroDef) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<Module> for AnyHasDocComments {\n-    fn from(node: Module) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<Static> for AnyHasDocComments {\n-    fn from(node: Static) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<Struct> for AnyHasDocComments {\n-    fn from(node: Struct) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<Trait> for AnyHasDocComments {\n-    fn from(node: Trait) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<TypeAlias> for AnyHasDocComments {\n-    fn from(node: TypeAlias) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<Union> for AnyHasDocComments {\n-    fn from(node: Union) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<Use> for AnyHasDocComments {\n-    fn from(node: Use) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<RecordField> for AnyHasDocComments {\n-    fn from(node: RecordField) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<TupleField> for AnyHasDocComments {\n-    fn from(node: TupleField) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n-impl From<Variant> for AnyHasDocComments {\n-    fn from(node: Variant) -> AnyHasDocComments { AnyHasDocComments::new(node) }\n-}\n impl AnyHasGenericParams {\n     #[inline]\n     pub fn new<T: ast::HasGenericParams>(node: T) -> AnyHasGenericParams {\n@@ -4297,27 +4030,6 @@ impl AstNode for AnyHasGenericParams {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl From<Enum> for AnyHasGenericParams {\n-    fn from(node: Enum) -> AnyHasGenericParams { AnyHasGenericParams::new(node) }\n-}\n-impl From<Fn> for AnyHasGenericParams {\n-    fn from(node: Fn) -> AnyHasGenericParams { AnyHasGenericParams::new(node) }\n-}\n-impl From<Impl> for AnyHasGenericParams {\n-    fn from(node: Impl) -> AnyHasGenericParams { AnyHasGenericParams::new(node) }\n-}\n-impl From<Struct> for AnyHasGenericParams {\n-    fn from(node: Struct) -> AnyHasGenericParams { AnyHasGenericParams::new(node) }\n-}\n-impl From<Trait> for AnyHasGenericParams {\n-    fn from(node: Trait) -> AnyHasGenericParams { AnyHasGenericParams::new(node) }\n-}\n-impl From<TypeAlias> for AnyHasGenericParams {\n-    fn from(node: TypeAlias) -> AnyHasGenericParams { AnyHasGenericParams::new(node) }\n-}\n-impl From<Union> for AnyHasGenericParams {\n-    fn from(node: Union) -> AnyHasGenericParams { AnyHasGenericParams::new(node) }\n-}\n impl AnyHasLoopBody {\n     #[inline]\n     pub fn new<T: ast::HasLoopBody>(node: T) -> AnyHasLoopBody {\n@@ -4331,15 +4043,6 @@ impl AstNode for AnyHasLoopBody {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl From<ForExpr> for AnyHasLoopBody {\n-    fn from(node: ForExpr) -> AnyHasLoopBody { AnyHasLoopBody::new(node) }\n-}\n-impl From<LoopExpr> for AnyHasLoopBody {\n-    fn from(node: LoopExpr) -> AnyHasLoopBody { AnyHasLoopBody::new(node) }\n-}\n-impl From<WhileExpr> for AnyHasLoopBody {\n-    fn from(node: WhileExpr) -> AnyHasLoopBody { AnyHasLoopBody::new(node) }\n-}\n impl AnyHasModuleItem {\n     #[inline]\n     pub fn new<T: ast::HasModuleItem>(node: T) -> AnyHasModuleItem {\n@@ -4353,15 +4056,6 @@ impl AstNode for AnyHasModuleItem {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl From<MacroItems> for AnyHasModuleItem {\n-    fn from(node: MacroItems) -> AnyHasModuleItem { AnyHasModuleItem::new(node) }\n-}\n-impl From<SourceFile> for AnyHasModuleItem {\n-    fn from(node: SourceFile) -> AnyHasModuleItem { AnyHasModuleItem::new(node) }\n-}\n-impl From<ItemList> for AnyHasModuleItem {\n-    fn from(node: ItemList) -> AnyHasModuleItem { AnyHasModuleItem::new(node) }\n-}\n impl AnyHasName {\n     #[inline]\n     pub fn new<T: ast::HasName>(node: T) -> AnyHasName {\n@@ -4397,60 +4091,6 @@ impl AstNode for AnyHasName {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl From<Const> for AnyHasName {\n-    fn from(node: Const) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<Enum> for AnyHasName {\n-    fn from(node: Enum) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<Fn> for AnyHasName {\n-    fn from(node: Fn) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<MacroRules> for AnyHasName {\n-    fn from(node: MacroRules) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<MacroDef> for AnyHasName {\n-    fn from(node: MacroDef) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<Module> for AnyHasName {\n-    fn from(node: Module) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<Static> for AnyHasName {\n-    fn from(node: Static) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<Struct> for AnyHasName {\n-    fn from(node: Struct) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<Trait> for AnyHasName {\n-    fn from(node: Trait) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<TypeAlias> for AnyHasName {\n-    fn from(node: TypeAlias) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<Union> for AnyHasName {\n-    fn from(node: Union) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<Rename> for AnyHasName {\n-    fn from(node: Rename) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<SelfParam> for AnyHasName {\n-    fn from(node: SelfParam) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<RecordField> for AnyHasName {\n-    fn from(node: RecordField) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<Variant> for AnyHasName {\n-    fn from(node: Variant) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<ConstParam> for AnyHasName {\n-    fn from(node: ConstParam) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<TypeParam> for AnyHasName {\n-    fn from(node: TypeParam) -> AnyHasName { AnyHasName::new(node) }\n-}\n-impl From<IdentPat> for AnyHasName {\n-    fn from(node: IdentPat) -> AnyHasName { AnyHasName::new(node) }\n-}\n impl AnyHasTypeBounds {\n     #[inline]\n     pub fn new<T: ast::HasTypeBounds>(node: T) -> AnyHasTypeBounds {\n@@ -4469,24 +4109,6 @@ impl AstNode for AnyHasTypeBounds {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl From<AssocTypeArg> for AnyHasTypeBounds {\n-    fn from(node: AssocTypeArg) -> AnyHasTypeBounds { AnyHasTypeBounds::new(node) }\n-}\n-impl From<Trait> for AnyHasTypeBounds {\n-    fn from(node: Trait) -> AnyHasTypeBounds { AnyHasTypeBounds::new(node) }\n-}\n-impl From<TypeAlias> for AnyHasTypeBounds {\n-    fn from(node: TypeAlias) -> AnyHasTypeBounds { AnyHasTypeBounds::new(node) }\n-}\n-impl From<LifetimeParam> for AnyHasTypeBounds {\n-    fn from(node: LifetimeParam) -> AnyHasTypeBounds { AnyHasTypeBounds::new(node) }\n-}\n-impl From<TypeParam> for AnyHasTypeBounds {\n-    fn from(node: TypeParam) -> AnyHasTypeBounds { AnyHasTypeBounds::new(node) }\n-}\n-impl From<WherePred> for AnyHasTypeBounds {\n-    fn from(node: WherePred) -> AnyHasTypeBounds { AnyHasTypeBounds::new(node) }\n-}\n impl AnyHasVisibility {\n     #[inline]\n     pub fn new<T: ast::HasVisibility>(node: T) -> AnyHasVisibility {\n@@ -4521,195 +4143,6 @@ impl AstNode for AnyHasVisibility {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl From<Const> for AnyHasVisibility {\n-    fn from(node: Const) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<Enum> for AnyHasVisibility {\n-    fn from(node: Enum) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<ExternCrate> for AnyHasVisibility {\n-    fn from(node: ExternCrate) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<Fn> for AnyHasVisibility {\n-    fn from(node: Fn) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<Impl> for AnyHasVisibility {\n-    fn from(node: Impl) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<MacroRules> for AnyHasVisibility {\n-    fn from(node: MacroRules) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<MacroDef> for AnyHasVisibility {\n-    fn from(node: MacroDef) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<Module> for AnyHasVisibility {\n-    fn from(node: Module) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<Static> for AnyHasVisibility {\n-    fn from(node: Static) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<Struct> for AnyHasVisibility {\n-    fn from(node: Struct) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<Trait> for AnyHasVisibility {\n-    fn from(node: Trait) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<TypeAlias> for AnyHasVisibility {\n-    fn from(node: TypeAlias) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<Union> for AnyHasVisibility {\n-    fn from(node: Union) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<Use> for AnyHasVisibility {\n-    fn from(node: Use) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<RecordField> for AnyHasVisibility {\n-    fn from(node: RecordField) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<TupleField> for AnyHasVisibility {\n-    fn from(node: TupleField) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<Variant> for AnyHasVisibility {\n-    fn from(node: Variant) -> AnyHasVisibility { AnyHasVisibility::new(node) }\n-}\n-impl From<Item> for AnyHasAttrs {\n-    fn from(node: Item) -> AnyHasAttrs {\n-        match node {\n-            Item::Const(it) => AnyHasAttrs::new(it),\n-            Item::Enum(it) => AnyHasAttrs::new(it),\n-            Item::ExternBlock(it) => AnyHasAttrs::new(it),\n-            Item::ExternCrate(it) => AnyHasAttrs::new(it),\n-            Item::Fn(it) => AnyHasAttrs::new(it),\n-            Item::Impl(it) => AnyHasAttrs::new(it),\n-            Item::MacroCall(it) => AnyHasAttrs::new(it),\n-            Item::MacroRules(it) => AnyHasAttrs::new(it),\n-            Item::MacroDef(it) => AnyHasAttrs::new(it),\n-            Item::Module(it) => AnyHasAttrs::new(it),\n-            Item::Static(it) => AnyHasAttrs::new(it),\n-            Item::Struct(it) => AnyHasAttrs::new(it),\n-            Item::Trait(it) => AnyHasAttrs::new(it),\n-            Item::TypeAlias(it) => AnyHasAttrs::new(it),\n-            Item::Union(it) => AnyHasAttrs::new(it),\n-            Item::Use(it) => AnyHasAttrs::new(it),\n-        }\n-    }\n-}\n-impl From<Adt> for AnyHasAttrs {\n-    fn from(node: Adt) -> AnyHasAttrs {\n-        match node {\n-            Adt::Enum(it) => AnyHasAttrs::new(it),\n-            Adt::Struct(it) => AnyHasAttrs::new(it),\n-            Adt::Union(it) => AnyHasAttrs::new(it),\n-        }\n-    }\n-}\n-impl From<AssocItem> for AnyHasAttrs {\n-    fn from(node: AssocItem) -> AnyHasAttrs {\n-        match node {\n-            AssocItem::Const(it) => AnyHasAttrs::new(it),\n-            AssocItem::Fn(it) => AnyHasAttrs::new(it),\n-            AssocItem::MacroCall(it) => AnyHasAttrs::new(it),\n-            AssocItem::TypeAlias(it) => AnyHasAttrs::new(it),\n-        }\n-    }\n-}\n-impl From<ExternItem> for AnyHasAttrs {\n-    fn from(node: ExternItem) -> AnyHasAttrs {\n-        match node {\n-            ExternItem::Fn(it) => AnyHasAttrs::new(it),\n-            ExternItem::MacroCall(it) => AnyHasAttrs::new(it),\n-            ExternItem::Static(it) => AnyHasAttrs::new(it),\n-            ExternItem::TypeAlias(it) => AnyHasAttrs::new(it),\n-        }\n-    }\n-}\n-impl From<GenericParam> for AnyHasAttrs {\n-    fn from(node: GenericParam) -> AnyHasAttrs {\n-        match node {\n-            GenericParam::ConstParam(it) => AnyHasAttrs::new(it),\n-            GenericParam::LifetimeParam(it) => AnyHasAttrs::new(it),\n-            GenericParam::TypeParam(it) => AnyHasAttrs::new(it),\n-        }\n-    }\n-}\n-impl From<Item> for AnyHasDocComments {\n-    fn from(node: Item) -> AnyHasDocComments {\n-        match node {\n-            Item::Const(it) => AnyHasDocComments::new(it),\n-            Item::Enum(it) => AnyHasDocComments::new(it),\n-            Item::ExternBlock(it) => AnyHasDocComments::new(it),\n-            Item::ExternCrate(it) => AnyHasDocComments::new(it),\n-            Item::Fn(it) => AnyHasDocComments::new(it),\n-            Item::Impl(it) => AnyHasDocComments::new(it),\n-            Item::MacroCall(it) => AnyHasDocComments::new(it),\n-            Item::MacroRules(it) => AnyHasDocComments::new(it),\n-            Item::MacroDef(it) => AnyHasDocComments::new(it),\n-            Item::Module(it) => AnyHasDocComments::new(it),\n-            Item::Static(it) => AnyHasDocComments::new(it),\n-            Item::Struct(it) => AnyHasDocComments::new(it),\n-            Item::Trait(it) => AnyHasDocComments::new(it),\n-            Item::TypeAlias(it) => AnyHasDocComments::new(it),\n-            Item::Union(it) => AnyHasDocComments::new(it),\n-            Item::Use(it) => AnyHasDocComments::new(it),\n-        }\n-    }\n-}\n-impl From<Adt> for AnyHasDocComments {\n-    fn from(node: Adt) -> AnyHasDocComments {\n-        match node {\n-            Adt::Enum(it) => AnyHasDocComments::new(it),\n-            Adt::Struct(it) => AnyHasDocComments::new(it),\n-            Adt::Union(it) => AnyHasDocComments::new(it),\n-        }\n-    }\n-}\n-impl From<AssocItem> for AnyHasDocComments {\n-    fn from(node: AssocItem) -> AnyHasDocComments {\n-        match node {\n-            AssocItem::Const(it) => AnyHasDocComments::new(it),\n-            AssocItem::Fn(it) => AnyHasDocComments::new(it),\n-            AssocItem::MacroCall(it) => AnyHasDocComments::new(it),\n-            AssocItem::TypeAlias(it) => AnyHasDocComments::new(it),\n-        }\n-    }\n-}\n-impl From<ExternItem> for AnyHasDocComments {\n-    fn from(node: ExternItem) -> AnyHasDocComments {\n-        match node {\n-            ExternItem::Fn(it) => AnyHasDocComments::new(it),\n-            ExternItem::MacroCall(it) => AnyHasDocComments::new(it),\n-            ExternItem::Static(it) => AnyHasDocComments::new(it),\n-            ExternItem::TypeAlias(it) => AnyHasDocComments::new(it),\n-        }\n-    }\n-}\n-impl From<Adt> for AnyHasGenericParams {\n-    fn from(node: Adt) -> AnyHasGenericParams {\n-        match node {\n-            Adt::Enum(it) => AnyHasGenericParams::new(it),\n-            Adt::Struct(it) => AnyHasGenericParams::new(it),\n-            Adt::Union(it) => AnyHasGenericParams::new(it),\n-        }\n-    }\n-}\n-impl From<Adt> for AnyHasName {\n-    fn from(node: Adt) -> AnyHasName {\n-        match node {\n-            Adt::Enum(it) => AnyHasName::new(it),\n-            Adt::Struct(it) => AnyHasName::new(it),\n-            Adt::Union(it) => AnyHasName::new(it),\n-        }\n-    }\n-}\n-impl From<Adt> for AnyHasVisibility {\n-    fn from(node: Adt) -> AnyHasVisibility {\n-        match node {\n-            Adt::Enum(it) => AnyHasVisibility::new(it),\n-            Adt::Struct(it) => AnyHasVisibility::new(it),\n-            Adt::Union(it) => AnyHasVisibility::new(it),\n-        }\n-    }\n-}\n impl std::fmt::Display for GenericArg {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "fe82aa907222f7d4e97d03c69cd91d420c276c3c", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7e5e5177b60c7986d6d8b776b112219d99d23969/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5e5177b60c7986d6d8b776b112219d99d23969/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=7e5e5177b60c7986d6d8b776b112219d99d23969", "patch": "@@ -873,3 +873,33 @@ impl ast::MatchGuard {\n         support::child(&self.syntax)\n     }\n }\n+\n+impl From<ast::Item> for ast::AnyHasAttrs {\n+    fn from(node: ast::Item) -> Self {\n+        Self::new(node)\n+    }\n+}\n+\n+impl From<ast::AssocItem> for ast::AnyHasAttrs {\n+    fn from(node: ast::AssocItem) -> Self {\n+        Self::new(node)\n+    }\n+}\n+\n+impl From<ast::Variant> for ast::AnyHasAttrs {\n+    fn from(node: ast::Variant) -> Self {\n+        Self::new(node)\n+    }\n+}\n+\n+impl From<ast::RecordField> for ast::AnyHasAttrs {\n+    fn from(node: ast::RecordField) -> Self {\n+        Self::new(node)\n+    }\n+}\n+\n+impl From<ast::TupleField> for ast::AnyHasAttrs {\n+    fn from(node: ast::TupleField) -> Self {\n+        Self::new(node)\n+    }\n+}"}, {"sha": "70b54843dbaab5d6f328d18546e8cac979fd25f6", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7e5e5177b60c7986d6d8b776b112219d99d23969/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e5e5177b60c7986d6d8b776b112219d99d23969/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=7e5e5177b60c7986d6d8b776b112219d99d23969", "patch": "@@ -229,7 +229,6 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n                 .iter()\n                 .map(|name| format_ident!(\"{}\", to_upper_snake_case(&name.name.to_string())))\n                 .collect();\n-            let node_names: Vec<_> = nodes.iter().map(|n| format_ident!(\"{}\", n.name)).collect();\n \n             (\n                 quote! {\n@@ -260,43 +259,11 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n                             &self.syntax\n                         }\n                     }\n-\n-                    #(\n-                        impl From<#node_names> for #name {\n-                            fn from(node: #node_names) -> #name {\n-                                #name::new(node)\n-                            }\n-                        }\n-                    )*\n                 },\n             )\n         })\n         .unzip();\n \n-    let any_enum_boilerplate_impls: Vec<_> = grammar\n-        .enums\n-        .iter()\n-        .flat_map(|en| en.traits.iter().map(move |t| (t, en)))\n-        .sorted_by_key(|(k, _)| *k)\n-        .map(|(target_name, en)| {\n-            let target_name = format_ident!(\"Any{}\", target_name);\n-            let enum_name = format_ident!(\"{}\", en.name);\n-            let variants: Vec<_> = en.variants.iter().map(|var| format_ident!(\"{}\", var)).collect();\n-\n-            quote! {\n-                impl From<#enum_name> for #target_name {\n-                    fn from(node: #enum_name) -> #target_name {\n-                        match node {\n-                            #(\n-                                #enum_name::#variants(it) => #target_name::new(it),\n-                            )*\n-                        }\n-                    }\n-                }\n-            }\n-        })\n-        .collect();\n-\n     let enum_names = grammar.enums.iter().map(|it| &it.name);\n     let node_names = grammar.nodes.iter().map(|it| &it.name);\n \n@@ -338,7 +305,6 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n         #(#node_boilerplate_impls)*\n         #(#enum_boilerplate_impls)*\n         #(#any_node_boilerplate_impls)*\n-        #(#any_enum_boilerplate_impls)*\n         #(#display_impls)*\n     };\n "}]}