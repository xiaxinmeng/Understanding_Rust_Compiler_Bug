{"sha": "b915eb32fafd465ed02b27f1ba03c2d9b35dc87d", "node_id": "C_kwDOAAsO6NoAKGI5MTVlYjMyZmFmZDQ2NWVkMDJiMjdmMWJhMDNjMmQ5YjM1ZGM4N2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T07:50:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T07:50:27Z"}, "message": "Auto merge of #14427 - davidbarsky:davidbarsky/allow-subsequent-workspaces-to-have-proc-macros, r=Veykril\n\nfix: allow new, subsequent `rust-project.json`-based workspaces to get proc macro expansion\n\nAs detailed in https://github.com/rust-lang/rust-analyzer/issues/14417#issuecomment-1485336174, `rust-project.json` workspaces added after the initial `rust-project.json`-based workspace was already indexed by rust-analyzer would not receive procedural macro expansion despite `config.expand_proc_macros` returning true. To fix this issue:\n1. I changed `reload.rs` to check which workspaces are newly added.\n2. Spawned new procedural macro expansion servers based on the _new_ workspaces.\n    1. This is to prevent spawning duplicate procedural macro expansion servers for already existing workspaces. While the overall memory usage of duplicate procedural macro servers is minimal, this is more about the _principle_ of not leaking processes \ud83d\ude05.\n3. Launched procedural macro expansion if any workspaces are `rust-project.json`-based _or_ `same_workspaces` is true. `same_workspaces` being true (and reachable) indicates that that build scripts have finished building (in Cargo-based projects), while the build scripts in `rust-project.json`-based projects have _already been built_ by the build system that produced the `rust-project.json`.\n\nI couldn't really think of structuring this code in a better way without engaging with https://github.com/rust-lang/rust-analyzer/issues/7444.", "tree": {"sha": "fc4d55ba8496bb408fb5586b6f674b4ffb28c10b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc4d55ba8496bb408fb5586b6f674b4ffb28c10b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b915eb32fafd465ed02b27f1ba03c2d9b35dc87d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b915eb32fafd465ed02b27f1ba03c2d9b35dc87d", "html_url": "https://github.com/rust-lang/rust/commit/b915eb32fafd465ed02b27f1ba03c2d9b35dc87d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b915eb32fafd465ed02b27f1ba03c2d9b35dc87d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef7756cb9edbba752cc2602834f70e0cec5937dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef7756cb9edbba752cc2602834f70e0cec5937dc", "html_url": "https://github.com/rust-lang/rust/commit/ef7756cb9edbba752cc2602834f70e0cec5937dc"}, {"sha": "25c59b8e92da205d14a94c0c86c2c729b3e66f1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c59b8e92da205d14a94c0c86c2c729b3e66f1c", "html_url": "https://github.com/rust-lang/rust/commit/25c59b8e92da205d14a94c0c86c2c729b3e66f1c"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "3a8c0c385a4846698b079d329d734cf7eb86d02d", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b915eb32fafd465ed02b27f1ba03c2d9b35dc87d/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b915eb32fafd465ed02b27f1ba03c2d9b35dc87d/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=b915eb32fafd465ed02b27f1ba03c2d9b35dc87d", "patch": "@@ -17,7 +17,7 @@ use vfs::{file_set::FileSet, AbsPathBuf, AnchoredPath, FileId, VfsPath};\n \n // Map from crate id to the name of the crate and path of the proc-macro. If the value is `None`,\n // then the crate for the proc-macro hasn't been build yet as the build data is missing.\n-pub type ProcMacroPaths = FxHashMap<CrateId, Option<(Option<String>, AbsPathBuf)>>;\n+pub type ProcMacroPaths = FxHashMap<CrateId, Result<(Option<String>, AbsPathBuf), String>>;\n pub type ProcMacros = FxHashMap<CrateId, ProcMacroLoadResult>;\n \n /// Files are grouped into source roots. A source root is a directory on the"}, {"sha": "a6f1453582b51f400fdcbcdfdb3e04f6d7797e36", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b915eb32fafd465ed02b27f1ba03c2d9b35dc87d/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b915eb32fafd465ed02b27f1ba03c2d9b35dc87d/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=b915eb32fafd465ed02b27f1ba03c2d9b35dc87d", "patch": "@@ -667,6 +667,14 @@ impl ProjectWorkspace {\n             _ => false,\n         }\n     }\n+\n+    /// Returns `true` if the project workspace is [`Json`].\n+    ///\n+    /// [`Json`]: ProjectWorkspace::Json\n+    #[must_use]\n+    pub fn is_json(&self) -> bool {\n+        matches!(self, Self::Json { .. })\n+    }\n }\n \n fn project_json_to_crate_graph(\n@@ -678,7 +686,7 @@ fn project_json_to_crate_graph(\n     target_layout: TargetLayoutLoadResult,\n ) -> (CrateGraph, ProcMacroPaths) {\n     let mut crate_graph = CrateGraph::default();\n-    let mut proc_macros = FxHashMap::default();\n+    let mut proc_macros: ProcMacroPaths = FxHashMap::default();\n     let sysroot_deps = sysroot.as_ref().map(|sysroot| {\n         sysroot_to_crate_graph(\n             &mut crate_graph,\n@@ -730,13 +738,11 @@ fn project_json_to_crate_graph(\n             );\n             if krate.is_proc_macro {\n                 if let Some(path) = krate.proc_macro_dylib_path.clone() {\n-                    proc_macros.insert(\n-                        crate_graph_crate_id,\n-                        Some((\n-                            krate.display_name.as_ref().map(|it| it.canonical_name().to_owned()),\n-                            path,\n-                        )),\n-                    );\n+                    let node = Ok((\n+                        krate.display_name.as_ref().map(|it| it.canonical_name().to_owned()),\n+                        path,\n+                    ));\n+                    proc_macros.insert(crate_graph_crate_id, node);\n                 }\n             }\n             (crate_id, crate_graph_crate_id)\n@@ -1180,8 +1186,8 @@ fn add_target_crate_root(\n     );\n     if is_proc_macro {\n         let proc_macro = match build_data.as_ref().map(|it| it.proc_macro_dylib_path.as_ref()) {\n-            Some(it) => it.cloned().map(|path| Some((Some(cargo_name.to_owned()), path))),\n-            None => Some(None),\n+            Some(it) => it.cloned().map(|path| Ok((Some(cargo_name.to_owned()), path))),\n+            None => Some(Err(\"crate has not yet been build\".to_owned())),\n         };\n         if let Some(proc_macro) = proc_macro {\n             proc_macros.insert(crate_id, proc_macro);"}, {"sha": "f644bdc7b18579daea7d9f3a0fd3bb4cc4dd2ea5", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b915eb32fafd465ed02b27f1ba03c2d9b35dc87d/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b915eb32fafd465ed02b27f1ba03c2d9b35dc87d/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=b915eb32fafd465ed02b27f1ba03c2d9b35dc87d", "patch": "@@ -102,7 +102,7 @@ pub fn load_workspace(\n                 (\n                     crate_id,\n                     path.map_or_else(\n-                        || Err(\"proc macro crate is missing dylib\".to_owned()),\n+                        |_| Err(\"proc macro crate is missing dylib\".to_owned()),\n                         |(_, path)| load_proc_macro(proc_macro_server, &path, &[]),\n                     ),\n                 )"}, {"sha": "c6bd3f0d9cc54adb810ede2fef5b3906839d7020", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b915eb32fafd465ed02b27f1ba03c2d9b35dc87d/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b915eb32fafd465ed02b27f1ba03c2d9b35dc87d/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=b915eb32fafd465ed02b27f1ba03c2d9b35dc87d", "patch": "@@ -251,7 +251,7 @@ impl GlobalState {\n                     (\n                         crate_id,\n                         res.map_or_else(\n-                            || Err(\"proc macro crate is missing dylib\".to_owned()),\n+                            |_| Err(\"proc macro crate is missing dylib\".to_owned()),\n                             |(crate_name, path)| {\n                                 progress(path.display().to_string());\n                                 load_proc_macro(\n@@ -370,7 +370,7 @@ impl GlobalState {\n         let files_config = self.config.files();\n         let project_folders = ProjectFolders::new(&self.workspaces, &files_config.exclude);\n \n-        if self.proc_macro_clients.is_empty() {\n+        if self.proc_macro_clients.is_empty() || !same_workspaces {\n             if let Some((path, path_manually_set)) = self.config.proc_macro_srv() {\n                 tracing::info!(\"Spawning proc-macro servers\");\n                 self.proc_macro_clients = self\n@@ -448,19 +448,8 @@ impl GlobalState {\n         };\n         let mut change = Change::new();\n \n-        if same_workspaces {\n-            if self.config.expand_proc_macros() {\n-                self.fetch_proc_macros_queue.request_op(cause, proc_macro_paths);\n-            }\n-        } else {\n-            // Set up errors for proc-macros upfront that we haven't run build scripts yet\n-            let mut proc_macros = FxHashMap::default();\n-            for paths in proc_macro_paths {\n-                proc_macros.extend(paths.into_iter().map(move |(crate_id, _)| {\n-                    (crate_id, Err(\"crate has not yet been build\".to_owned()))\n-                }));\n-            }\n-            change.set_proc_macros(proc_macros);\n+        if self.config.expand_proc_macros() {\n+            self.fetch_proc_macros_queue.request_op(cause, proc_macro_paths);\n         }\n         change.set_crate_graph(crate_graph);\n         self.analysis_host.apply_change(change);"}]}