{"sha": "955fcad75808a66576f72680fa9698753d975ed2", "node_id": "C_kwDOAAsO6NoAKDk1NWZjYWQ3NTgwOGE2NjU3NmY3MjY4MGZhOTY5ODc1M2Q5NzVlZDI", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-08-03T05:02:46Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-08-03T05:02:46Z"}, "message": "Add bound_impl_subject and bound_return_ty", "tree": {"sha": "3dbcd79f714a848e5217d8cd8d76cf255bc819e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dbcd79f714a848e5217d8cd8d76cf255bc819e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/955fcad75808a66576f72680fa9698753d975ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/955fcad75808a66576f72680fa9698753d975ed2", "html_url": "https://github.com/rust-lang/rust/commit/955fcad75808a66576f72680fa9698753d975ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/955fcad75808a66576f72680fa9698753d975ed2/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96a69dce2c2831417c9019d941f50466cd8f2c0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/96a69dce2c2831417c9019d941f50466cd8f2c0a", "html_url": "https://github.com/rust-lang/rust/commit/96a69dce2c2831417c9019d941f50466cd8f2c0a"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "936044fbe24b260455760eeb9ea52f26eac5dbae", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=955fcad75808a66576f72680fa9698753d975ed2", "patch": "@@ -13,7 +13,7 @@ use rustc_middle::mir::pretty::display_allocation;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, subst::Subst, EarlyBinder, TyCtxt};\n+use rustc_middle::ty::{self, subst::Subst, TyCtxt};\n use rustc_span::source_map::Span;\n use rustc_target::abi::{self, Abi};\n use std::borrow::Cow;\n@@ -45,7 +45,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n         \"Unexpected DefKind: {:?}\",\n         ecx.tcx.def_kind(cid.instance.def_id())\n     );\n-    let layout = ecx.layout_of(EarlyBinder(body.return_ty()).subst(tcx, cid.instance.substs))?;\n+    let layout = ecx.layout_of(body.bound_return_ty().subst(tcx, cid.instance.substs))?;\n     assert!(!layout.is_unsized());\n     let ret = ecx.allocate(layout, MemoryKind::Stack)?;\n "}, {"sha": "7ab71f9009d04a3320c5ea642c00512ac890a01a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=955fcad75808a66576f72680fa9698753d975ed2", "patch": "@@ -431,6 +431,12 @@ impl<'tcx> Body<'tcx> {\n         self.local_decls[RETURN_PLACE].ty\n     }\n \n+    /// Returns the return type; it always return first element from `local_decls` array.\n+    #[inline]\n+    pub fn bound_return_ty(&self) -> ty::EarlyBinder<Ty<'tcx>> {\n+        ty::EarlyBinder(self.local_decls[RETURN_PLACE].ty)\n+    }\n+\n     /// Gets the location of the terminator for the given block.\n     #[inline]\n     pub fn terminator_loc(&self, bb: BasicBlock) -> Location {"}, {"sha": "591bb7831b5b6375ab98b17f28ecfb389dc26e5a", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=955fcad75808a66576f72680fa9698753d975ed2", "patch": "@@ -694,6 +694,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> ty::EarlyBinder<ty::generics::GenericPredicates<'tcx>> {\n         ty::EarlyBinder(self.explicit_predicates_of(def_id))\n     }\n+\n+    pub fn bound_impl_subject(self, def_id: DefId) -> ty::EarlyBinder<ty::ImplSubject<'tcx>> {\n+        ty::EarlyBinder(self.impl_subject(def_id))\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {"}, {"sha": "fbc0a767f0766a494bba2746c91dfb84c3f079a9", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=955fcad75808a66576f72680fa9698753d975ed2", "patch": "@@ -18,9 +18,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{\n-    self, ConstKind, EarlyBinder, Instance, ParamEnv, Ty, TyCtxt, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeVisitable};\n use rustc_span::{def_id::DefId, Span};\n use rustc_target::abi::{self, HasDataLayout, Size, TargetDataLayout};\n use rustc_target::spec::abi::Abi as CallAbi;\n@@ -387,7 +385,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         );\n \n         let ret_layout = ecx\n-            .layout_of(EarlyBinder(body.return_ty()).subst(tcx, substs))\n+            .layout_of(body.bound_return_ty().subst(tcx, substs))\n             .ok()\n             // Don't bother allocating memory for large values.\n             // I don't know how return types can seem to be unsized but this happens in the"}, {"sha": "c2ea55af48a1e781e0ea83a6dab425a5d68d764d", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=955fcad75808a66576f72680fa9698753d975ed2", "patch": "@@ -23,8 +23,7 @@ use rustc_middle::mir::{\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{\n-    self, ConstInt, ConstKind, EarlyBinder, Instance, ParamEnv, ScalarInt, Ty, TyCtxt,\n-    TypeVisitable,\n+    self, ConstInt, ConstKind, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeVisitable,\n };\n use rustc_session::lint;\n use rustc_span::Span;\n@@ -196,7 +195,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         );\n \n         let ret_layout = ecx\n-            .layout_of(EarlyBinder(body.return_ty()).subst(tcx, substs))\n+            .layout_of(body.bound_return_ty().subst(tcx, substs))\n             .ok()\n             // Don't bother allocating memory for large values.\n             // I don't know how return types can seem to be unsized but this happens in the"}, {"sha": "adf47ece69d99aa37d981c504bdf4058832712ce", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=955fcad75808a66576f72680fa9698753d975ed2", "patch": "@@ -32,7 +32,7 @@ use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::visit::{MaxUniverse, TypeVisitable};\n-use rustc_middle::ty::{self, EarlyBinder, Term, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Term, ToPredicate, Ty, TyCtxt};\n use rustc_span::symbol::sym;\n \n use std::collections::BTreeMap;\n@@ -2005,16 +2005,16 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     let substs = obligation.predicate.substs.rebase_onto(tcx, trait_def_id, substs);\n     let substs =\n         translate_substs(selcx.infcx(), param_env, impl_def_id, substs, assoc_ty.defining_node);\n-    let ty = tcx.type_of(assoc_ty.item.def_id);\n+    let ty = tcx.bound_type_of(assoc_ty.item.def_id);\n     let is_const = matches!(tcx.def_kind(assoc_ty.item.def_id), DefKind::AssocConst);\n-    let term: ty::Term<'tcx> = if is_const {\n+    let term: ty::EarlyBinder<ty::Term<'tcx>> = if is_const {\n         let identity_substs =\n             crate::traits::InternalSubsts::identity_for_item(tcx, assoc_ty.item.def_id);\n         let did = ty::WithOptConstParam::unknown(assoc_ty.item.def_id);\n         let kind = ty::ConstKind::Unevaluated(ty::Unevaluated::new(did, identity_substs));\n-        tcx.mk_const(ty::ConstS { ty, kind }).into()\n+        ty.map_bound(|ty| tcx.mk_const(ty::ConstS { ty, kind }).into())\n     } else {\n-        ty.into()\n+        ty.map_bound(|ty| ty.into())\n     };\n     if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {\n         let err = tcx.ty_error_with_message(\n@@ -2024,7 +2024,7 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n         Progress { term: err.into(), obligations: nested }\n     } else {\n         assoc_ty_own_obligations(selcx, obligation, &mut nested);\n-        Progress { term: EarlyBinder(term).subst(tcx, substs), obligations: nested }\n+        Progress { term: term.subst(tcx, substs), obligations: nested }\n     }\n }\n "}, {"sha": "d25006016629c907bf0d0f60d489900610ac3dd8", "filename": "compiler/rustc_trait_selection/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Futil.rs?ref=955fcad75808a66576f72680fa9698753d975ed2", "patch": "@@ -6,7 +6,7 @@ use smallvec::SmallVec;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, Subst, SubstsRef};\n-use rustc_middle::ty::{self, EarlyBinder, ImplSubject, ToPredicate, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, ImplSubject, ToPredicate, Ty, TyCtxt, TypeVisitable};\n \n use super::{Normalized, Obligation, ObligationCause, PredicateObligation, SelectionContext};\n pub use rustc_infer::traits::{self, util::*};\n@@ -200,8 +200,8 @@ pub fn impl_subject_and_oblig<'a, 'tcx>(\n     impl_def_id: DefId,\n     impl_substs: SubstsRef<'tcx>,\n ) -> (ImplSubject<'tcx>, impl Iterator<Item = PredicateObligation<'tcx>>) {\n-    let subject = selcx.tcx().impl_subject(impl_def_id);\n-    let subject = EarlyBinder(subject).subst(selcx.tcx(), impl_substs);\n+    let subject = selcx.tcx().bound_impl_subject(impl_def_id);\n+    let subject = subject.subst(selcx.tcx(), impl_substs);\n     let Normalized { value: subject, obligations: normalization_obligations1 } =\n         super::normalize(selcx, param_env, ObligationCause::dummy(), subject);\n "}, {"sha": "db0d45b86fc03dacfb09fb51fdf0e15327b6fb94", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/955fcad75808a66576f72680fa9698753d975ed2/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=955fcad75808a66576f72680fa9698753d975ed2", "patch": "@@ -2,9 +2,7 @@ use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::Subst;\n-use rustc_middle::ty::{\n-    self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n-};\n+use rustc_middle::ty::{self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt};\n use rustc_trait_selection::traits;\n \n fn sized_constraint_for_ty<'tcx>("}]}