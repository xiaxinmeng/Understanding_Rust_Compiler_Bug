{"sha": "0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NDg1MTdmYWYxZTJjZjM3YzhiNjc3MGNiZDAxODBhODE2ZWQ5YTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-03T22:55:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-03T22:55:28Z"}, "message": "Auto merge of #39463 - alexcrichton:update-bootstrap, r=alexcrichton\n\nBump version, upgrade bootstrap\n\nThis commit updates the version number to 1.17.0 as we're not on that version of\nthe nightly compiler, and at the same time this updates src/stage0.txt to\nbootstrap from freshly minted beta compiler and beta Cargo.", "tree": {"sha": "72112e627a4cd04f53203220fbfc101c9e12b7b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72112e627a4cd04f53203220fbfc101c9e12b7b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "html_url": "https://github.com/rust-lang/rust/commit/0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86d9ed6c82c6745fec46b9ecf2fa91be7924dd16", "url": "https://api.github.com/repos/rust-lang/rust/commits/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16", "html_url": "https://github.com/rust-lang/rust/commit/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16"}, {"sha": "626e754473da96a670c917b9cbefd1c1ea888a9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/626e754473da96a670c917b9cbefd1c1ea888a9c", "html_url": "https://github.com/rust-lang/rust/commit/626e754473da96a670c917b9cbefd1c1ea888a9c"}], "stats": {"total": 605, "additions": 111, "deletions": 494}, "files": [{"sha": "320ba44ed805db394078476a72ee6c08079d3146", "filename": "mk/crates.mk", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -54,7 +54,7 @@ TARGET_CRATES := libc std term \\\n                  compiler_builtins core alloc \\\n                  std_unicode rustc_bitflags \\\n \t\t alloc_system alloc_jemalloc \\\n-\t\t panic_abort panic_unwind unwind rustc_i128\n+\t\t panic_abort panic_unwind unwind\n RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_driver \\\n                 rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n                 rustc_data_structures rustc_platform_intrinsics rustc_errors \\\n@@ -92,25 +92,24 @@ DEPS_getopts := std\n DEPS_graphviz := std\n DEPS_log := std\n DEPS_num := std\n-DEPS_serialize := std log rustc_i128\n+DEPS_serialize := std log\n DEPS_term := std\n DEPS_test := std getopts term native:rust_test_helpers\n-DEPS_rustc_i128 = std\n \n DEPS_syntax := std term serialize log arena libc rustc_bitflags std_unicode rustc_errors \\\n-\t\t\tsyntax_pos rustc_data_structures rustc_i128\n+\t\t\tsyntax_pos rustc_data_structures\n DEPS_syntax_ext := syntax syntax_pos rustc_errors fmt_macros proc_macro\n DEPS_proc_macro := syntax syntax_pos rustc_plugin log\n DEPS_syntax_pos := serialize\n DEPS_proc_macro_plugin := syntax syntax_pos rustc_plugin\n \n-DEPS_rustc_const_math := std syntax log serialize rustc_i128\n+DEPS_rustc_const_math := std syntax log serialize\n DEPS_rustc_const_eval := rustc_const_math rustc syntax log serialize \\\n-\t\t\t     rustc_back graphviz syntax_pos rustc_i128\n+\t\t\t     rustc_back graphviz syntax_pos\n \n DEPS_rustc := syntax fmt_macros flate arena serialize getopts \\\n               log graphviz rustc_llvm rustc_back rustc_data_structures\\\n-\t      rustc_const_math syntax_pos rustc_errors rustc_i128\n+\t      rustc_const_math syntax_pos rustc_errors\n DEPS_rustc_back := std syntax flate log libc\n DEPS_rustc_borrowck := rustc log graphviz syntax syntax_pos rustc_errors rustc_mir\n DEPS_rustc_data_structures := std log serialize libc\n@@ -121,20 +120,19 @@ DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_bo\n                      rustc_passes rustc_save_analysis rustc_const_eval \\\n                      rustc_incremental syntax_pos rustc_errors proc_macro rustc_data_structures\n DEPS_rustc_errors := log libc serialize syntax_pos\n-DEPS_rustc_lint := rustc log syntax syntax_pos rustc_const_eval rustc_i128\n+DEPS_rustc_lint := rustc log syntax syntax_pos rustc_const_eval\n DEPS_rustc_llvm := native:rustllvm libc std rustc_bitflags\n DEPS_proc_macro := std syntax\n DEPS_rustc_metadata := rustc syntax syntax_pos rustc_errors rustc_const_math \\\n-\t\t\tproc_macro syntax_ext rustc_i128\n+\t\t\tproc_macro syntax_ext\n DEPS_rustc_passes := syntax syntax_pos rustc core rustc_const_eval rustc_errors\n-DEPS_rustc_mir := rustc syntax syntax_pos rustc_const_math rustc_const_eval rustc_bitflags \\\n-\t\t\t\t\trustc_i128\n+DEPS_rustc_mir := rustc syntax syntax_pos rustc_const_math rustc_const_eval rustc_bitflags\n DEPS_rustc_resolve := arena rustc log syntax syntax_pos rustc_errors\n DEPS_rustc_platform_intrinsics := std\n DEPS_rustc_plugin := rustc rustc_metadata syntax syntax_pos rustc_errors\n DEPS_rustc_privacy := rustc log syntax syntax_pos\n DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back \\\n-                    log syntax serialize rustc_llvm rustc_platform_intrinsics rustc_i128 \\\n+                    log syntax serialize rustc_llvm rustc_platform_intrinsics \\\n                     rustc_const_math rustc_const_eval rustc_incremental rustc_errors syntax_pos\n DEPS_rustc_incremental := rustc syntax_pos serialize rustc_data_structures\n DEPS_rustc_save_analysis := rustc log syntax syntax_pos serialize\n@@ -162,7 +160,6 @@ ONLY_RLIB_alloc := 1\n ONLY_RLIB_rand := 1\n ONLY_RLIB_collections := 1\n ONLY_RLIB_std_unicode := 1\n-ONLY_RLIB_rustc_i128 := 1\n ONLY_RLIB_rustc_bitflags := 1\n ONLY_RLIB_alloc_system := 1\n ONLY_RLIB_alloc_jemalloc := 1"}, {"sha": "6b409eebc74c8f6972206ac6860846abd2755387", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -13,7 +13,7 @@\n ######################################################################\n \n # The version number\n-CFG_RELEASE_NUM=1.16.0\n+CFG_RELEASE_NUM=1.17.0\n \n # An optional number to put after the label, e.g. '.2' -> '-beta.2'\n # NB Make sure it starts with a dot to conform to semver pre-release"}, {"sha": "95b963f6a78ebc8e72e7131d354f835a5841956e", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -248,7 +248,6 @@ dependencies = [\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_i128 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -308,7 +307,6 @@ dependencies = [\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_i128 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -317,7 +315,6 @@ dependencies = [\n name = \"rustc_const_math\"\n version = \"0.0.0\"\n dependencies = [\n- \"rustc_i128 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n@@ -327,7 +324,6 @@ name = \"rustc_data_structures\"\n version = \"0.0.0\"\n dependencies = [\n  \"log 0.0.0\",\n- \"rustc_i128 0.0.0\",\n  \"serialize 0.0.0\",\n ]\n \n@@ -370,10 +366,6 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n-[[package]]\n-name = \"rustc_i128\"\n-version = \"0.0.0\"\n-\n [[package]]\n name = \"rustc_incremental\"\n version = \"0.0.0\"\n@@ -395,7 +387,6 @@ dependencies = [\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n- \"rustc_i128 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -421,7 +412,6 @@ dependencies = [\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_i128 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -440,7 +430,6 @@ dependencies = [\n  \"rustc_const_eval 0.0.0\",\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n- \"rustc_i128 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]\n@@ -519,7 +508,6 @@ dependencies = [\n  \"rustc_const_math 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_i128 0.0.0\",\n  \"rustc_incremental 0.0.0\",\n  \"rustc_llvm 0.0.0\",\n  \"rustc_platform_intrinsics 0.0.0\",\n@@ -571,9 +559,6 @@ dependencies = [\n [[package]]\n name = \"serialize\"\n version = \"0.0.0\"\n-dependencies = [\n- \"rustc_i128 0.0.0\",\n-]\n \n [[package]]\n name = \"std\"\n@@ -618,7 +603,6 @@ dependencies = [\n  \"rustc_bitflags 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n- \"rustc_i128 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n ]"}, {"sha": "82d361fb0e853064ffa317b66e582f36f87b6660", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -293,7 +293,6 @@ impl<T: ?Sized> Box<T> {\n     }\n }\n \n-#[cfg(not(stage0))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<#[may_dangle] T: ?Sized> Drop for Box<T> {\n     fn drop(&mut self) {"}, {"sha": "51e6f2f8bd7a6d16f359e19abd9afb95cdb71a58", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -143,14 +143,6 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n     }\n }\n \n-#[cfg(not(test))]\n-#[cfg(stage0)]\n-#[lang = \"exchange_free\"]\n-#[inline]\n-unsafe fn exchange_free(ptr: *mut u8, old_size: usize, align: usize) {\n-    deallocate(ptr, old_size, align);\n-}\n-\n #[cfg(not(test))]\n #[lang = \"box_free\"]\n #[inline]"}, {"sha": "b2a615456aa59d4d2f33ed1b85df50ce55ffc9a0", "filename": "src/libcompiler_builtins/lib.rs", "status": "modified", "additions": 57, "deletions": 136, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcompiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcompiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -20,7 +20,6 @@\n #![feature(staged_api, core_intrinsics, repr_simd,\n            i128_type, core_float, abi_unadjusted, associated_consts)]\n #![allow(non_camel_case_types, unused_variables, unused_imports)]\n-#![cfg_attr(stage0, allow(dead_code))]\n \n #[cfg(any(target_pointer_width=\"32\", target_pointer_width=\"16\", target_os=\"windows\",\n           target_arch=\"mips64\"))]\n@@ -32,17 +31,6 @@ pub mod reimpls {\n     use core::intrinsics::unchecked_rem;\n     use core::ptr;\n \n-    // C API is expected to tolerate some amount of size mismatch in ABI. Hopefully the amount of\n-    // handling is sufficient for bootstrapping.\n-    #[cfg(stage0)]\n-    type u128_ = u64;\n-    #[cfg(stage0)]\n-    type i128_ = i64;\n-    #[cfg(not(stage0))]\n-    type u128_ = u128;\n-    #[cfg(not(stage0))]\n-    type i128_ = i128;\n-\n     macro_rules! ashl {\n         ($a:expr, $b:expr, $ty:ty) => {{\n             let (a, b) = ($a, $b);\n@@ -63,8 +51,8 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__ashlti3\"]\n-    pub extern \"C\" fn shl(a: u128_, b: u128_) -> u128_ {\n-        ashl!(a, b, u128_)\n+    pub extern \"C\" fn shl(a: u128, b: u128) -> u128 {\n+        ashl!(a, b, u128)\n     }\n \n     macro_rules! ashr {\n@@ -88,8 +76,8 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__ashrti3\"]\n-    pub extern \"C\" fn shr(a: i128_, b: i128_) -> i128_ {\n-        ashr!(a, b, i128_)\n+    pub extern \"C\" fn shr(a: i128, b: i128) -> i128 {\n+        ashr!(a, b, i128)\n     }\n \n     macro_rules! lshr {\n@@ -111,22 +99,11 @@ pub mod reimpls {\n \n \n     #[export_name=\"__lshrti3\"]\n-    pub extern \"C\" fn lshr(a: u128_, b: u128_) -> u128_ {\n-        lshr!(a, b, u128_)\n-    }\n-\n-    #[cfg(stage0)]\n-    pub extern \"C\" fn u128_div_mod(n: u128_, d: u128_, rem: *mut u128_) -> u128_ {\n-        unsafe {\n-        if !rem.is_null() {\n-            *rem = unchecked_rem(n, d);\n-        }\n-        unchecked_div(n, d)\n-        }\n+    pub extern \"C\" fn lshr(a: u128, b: u128) -> u128 {\n+        lshr!(a, b, u128)\n     }\n \n-    #[cfg(not(stage0))]\n-    pub extern \"C\" fn u128_div_mod(n: u128_, d: u128_, rem: *mut u128_) -> u128_ {\n+    pub extern \"C\" fn u128_div_mod(n: u128, d: u128, rem: *mut u128) -> u128 {\n         // Translated from Figure 3-40 of The PowerPC Compiler Writer's Guide\n         unsafe {\n         // special cases, X is unknown, K != 0\n@@ -291,36 +268,30 @@ pub mod reimpls {\n         }\n     }\n \n-    fn i128_mod(a: i128_, b: i128_) -> i128_ {\n+    fn i128_mod(a: i128, b: i128) -> i128 {\n         let b = b.uabs();\n         let sa = a.signum();\n         let a = a.uabs();\n         unsafe {\n             let mut r = ::core::mem::zeroed();\n             u128_div_mod(a, b, &mut r);\n-            if sa == -1 { (r as i128_).unchecked_neg() } else { r as i128_ }\n+            if sa == -1 { (r as i128).unchecked_neg() } else { r as i128 }\n         }\n     }\n \n-    fn i128_div(a: i128_, b: i128_) -> i128_ {\n+    fn i128_div(a: i128, b: i128) -> i128 {\n         let sa = a.signum();\n         let sb = b.signum();\n         let a = a.uabs();\n         let b = b.uabs();\n         let sr = sa.wrapping_mul(sb); // sign of quotient\n         (if sr == -1 {\n-            (u128_div_mod(a, b, ptr::null_mut()) as i128_).unchecked_neg()\n+            (u128_div_mod(a, b, ptr::null_mut()) as i128).unchecked_neg()\n         } else {\n-            u128_div_mod(a, b, ptr::null_mut()) as i128_\n+            u128_div_mod(a, b, ptr::null_mut()) as i128\n         })\n     }\n \n-    #[cfg(stage0)]\n-    #[export_name=\"__udivti3\"]\n-    pub extern \"C\" fn u128_div(a: u128_, b: u128_) -> u128_ {\n-        (a / b)\n-    }\n-\n     macro_rules! mulo {\n         ($a:expr, $b:expr, $o: expr, $ty: ty) => {{\n             let (a, b, overflow) = ($a, $b, $o);\n@@ -367,35 +338,6 @@ pub mod reimpls {\n         fn high(self) -> Self::HighHalf;\n         fn from_parts(low: Self::LowHalf, high: Self::HighHalf) -> Self;\n     }\n-    impl LargeInt for u64 {\n-        type LowHalf = u32;\n-        type HighHalf = u32;\n-\n-        fn low(self) -> u32 {\n-            self as u32\n-        }\n-        fn high(self) -> u32 {\n-            (self.wrapping_shr(32)) as u32\n-        }\n-        fn from_parts(low: u32, high: u32) -> u64 {\n-            low as u64 | (high as u64).wrapping_shl(32)\n-        }\n-    }\n-    impl LargeInt for i64 {\n-        type LowHalf = u32;\n-        type HighHalf = i32;\n-\n-        fn low(self) -> u32 {\n-            self as u32\n-        }\n-        fn high(self) -> i32 {\n-            self.wrapping_shr(32) as i32\n-        }\n-        fn from_parts(low: u32, high: i32) -> i64 {\n-            u64::from_parts(low, high as u32) as i64\n-        }\n-    }\n-    #[cfg(not(stage0))]\n     impl LargeInt for u128 {\n         type LowHalf = u64;\n         type HighHalf = u64;\n@@ -410,7 +352,6 @@ pub mod reimpls {\n             (high as u128).wrapping_shl(64) | low as u128\n         }\n     }\n-    #[cfg(not(stage0))]\n     impl LargeInt for i128 {\n         type LowHalf = u64;\n         type HighHalf = i64;\n@@ -455,47 +396,31 @@ pub mod reimpls {\n         }}\n     }\n \n-    #[cfg(stage0)]\n     #[export_name=\"__multi3\"]\n-    pub extern \"C\" fn u128_mul(a: i128_, b: i128_) -> i128_ {\n-        ((a as i64).wrapping_mul(b as i64) as i128_)\n-    }\n-\n-    #[cfg(not(stage0))]\n-    #[export_name=\"__multi3\"]\n-    pub extern \"C\" fn u128_mul(a: i128_, b: i128_) -> i128_ {\n-        mul!(a, b, i128_, i64)\n+    pub extern \"C\" fn u128_mul(a: i128, b: i128) -> i128 {\n+        mul!(a, b, i128, i64)\n     }\n \n     trait AbsExt: Sized {\n-        fn uabs(self) -> u128_ {\n-            self.iabs() as u128_\n-        }\n-        fn iabs(self) -> i128_;\n-    }\n-\n-    #[cfg(stage0)]\n-    impl AbsExt for i128_ {\n-        fn iabs(self) -> i128_ {\n-            let s = self >> 63;\n-            ((self ^ s).wrapping_sub(s))\n+        fn uabs(self) -> u128 {\n+            self.iabs() as u128\n         }\n+        fn iabs(self) -> i128;\n     }\n \n-    #[cfg(not(stage0))]\n-    impl AbsExt for i128_ {\n-        fn iabs(self) -> i128_ {\n+    impl AbsExt for i128 {\n+        fn iabs(self) -> i128 {\n             let s = self >> 127;\n             ((self ^ s).wrapping_sub(s))\n         }\n     }\n \n     trait NegExt: Sized {\n-        fn unchecked_neg(self) -> i128_;\n+        fn unchecked_neg(self) -> i128;\n     }\n \n-    impl NegExt for i128_ {\n-        fn unchecked_neg(self) -> i128_ {\n+    impl NegExt for i128 {\n+        fn unchecked_neg(self) -> i128 {\n             (!self).wrapping_add(1)\n         }\n     }\n@@ -551,9 +476,9 @@ pub mod reimpls {\n             let exponent = $from.get_exponent();\n             let mantissa_fraction = repr & <$fromty as FloatStuff>::MANTISSA_MASK;\n             let mantissa = mantissa_fraction | <$fromty as FloatStuff>::MANTISSA_LEAD_BIT;\n-            if sign == -1.0 || exponent < 0 { return 0 as u128_; }\n+            if sign == -1.0 || exponent < 0 { return 0 as u128; }\n             if exponent > ::core::mem::size_of::<$outty>() as i32 * 8 {\n-                return !(0 as u128_);\n+                return !(0 as u128);\n             }\n             (if exponent < (<$fromty as FloatStuff>::MANTISSA_BITS) as i32 {\n                 (mantissa as $outty)\n@@ -576,7 +501,7 @@ pub mod reimpls {\n             let mantissa_fraction = repr & <$fromty as FloatStuff>::MANTISSA_MASK;\n             let mantissa = mantissa_fraction | <$fromty as FloatStuff>::MANTISSA_LEAD_BIT;\n \n-            if exponent < 0 { return 0 as i128_; }\n+            if exponent < 0 { return 0 as i128; }\n             if exponent > ::core::mem::size_of::<$outty>() as i32 * 8 {\n                 let ret = if sign > 0.0 { <$outty>::max_value() } else { <$outty>::min_value() };\n                 return ret\n@@ -595,23 +520,23 @@ pub mod reimpls {\n     }\n \n \n-    fn i128_as_f64(a: i128_) -> f64 {\n+    fn i128_as_f64(a: i128) -> f64 {\n         match a.signum() {\n             1 => u128_as_f64(a.uabs()),\n             0 => 0.0,\n             _ => -u128_as_f64(a.uabs()),\n         }\n     }\n \n-    fn i128_as_f32(a: i128_) -> f32 {\n+    fn i128_as_f32(a: i128) -> f32 {\n         match a.signum() {\n             1 => u128_as_f32(a.uabs()),\n             0 => 0.0,\n             _ => -u128_as_f32(a.uabs()),\n         }\n     }\n \n-    fn u128_as_f64(mut a: u128_) -> f64 {\n+    fn u128_as_f64(mut a: u128) -> f64 {\n         use ::core::f64::MANTISSA_DIGITS;\n         if a == 0 { return 0.0; }\n         let sd = 128u32.wrapping_sub(a.leading_zeros());\n@@ -620,15 +545,15 @@ pub mod reimpls {\n         const MD2 : u32 = MANTISSA_DIGITS + 2;\n \n         // SNAP: replace this with !0u128\n-        let negn :u128_ = !0;\n+        let negn :u128 = !0;\n \n         if sd > MANTISSA_DIGITS {\n             a = match sd {\n                 MD1 => a.wrapping_shl(1),\n                 MD2 => a,\n                 _ => a.wrapping_shr(sd.wrapping_sub(MANTISSA_DIGITS + 2)) |\n                      (if (a & (negn.wrapping_shr(128 + MANTISSA_DIGITS + 2)\n-                                   .wrapping_sub(sd as u128_))) == 0 { 0 } else { 1 })\n+                                   .wrapping_sub(sd as u128))) == 0 { 0 } else { 1 })\n             };\n             a |= if (a & 4) == 0 { 0 } else { 1 };\n             a = a.wrapping_add(1);\n@@ -646,7 +571,7 @@ pub mod reimpls {\n         }\n     }\n \n-    fn u128_as_f32(mut a: u128_) -> f32 {\n+    fn u128_as_f32(mut a: u128) -> f32 {\n         use ::core::f32::MANTISSA_DIGITS;\n         if a == 0 { return 0.0; }\n         let sd = 128u32.wrapping_sub(a.leading_zeros());\n@@ -655,15 +580,15 @@ pub mod reimpls {\n         const MD2 : u32 = MANTISSA_DIGITS + 2;\n \n         // SNAP: replace this with !0u128\n-        let negn :u128_ = !0;\n+        let negn :u128 = !0;\n \n         if sd > MANTISSA_DIGITS {\n             a = match sd {\n                 MD1 => a.wrapping_shl(1),\n                 MD2 => a,\n                 _ => a.wrapping_shr(sd.wrapping_sub(MANTISSA_DIGITS + 2)) |\n                      (if (a & (negn.wrapping_shr(128 + MANTISSA_DIGITS + 2)\n-                                   .wrapping_sub(sd as u128_))) == 0 { 0 } else { 1 })\n+                                   .wrapping_sub(sd as u128))) == 0 { 0 } else { 1 })\n             };\n             a |= if (a & 4) == 0 { 0 } else { 1 };\n             a = a.wrapping_add(1);\n@@ -684,36 +609,36 @@ pub mod reimpls {\n \n     macro_rules! why_are_abi_strings_checked_by_parser { ($cret:ty, $conv:expr, $unadj:tt) => {\n     mod imp {\n-        use super::{i128_, u128_, LargeInt, FloatStuff, NegExt, AbsExt};\n+        use super::{LargeInt, FloatStuff, NegExt, AbsExt};\n         use super::{i128_as_f64, i128_as_f32, u128_as_f64, u128_as_f32,\n                     i128_div, i128_mod, u128_div_mod, unchecked_div, ptr};\n         // For x64\n         // rdx:rcx, r9:r8, stack -> rdx:rax\n         // aka.\n         // define i128 @__muloti4(i128, i128, i32*)\n         #[export_name=\"__muloti4\"]\n-        pub unsafe extern $unadj fn i128_mul_oflow(a: i128_, b: i128_, o: *mut i32) -> i128_ {\n-            mulo!(a, b, o, i128_)\n+        pub unsafe extern $unadj fn i128_mul_oflow(a: i128, b: i128, o: *mut i32) -> i128 {\n+            mulo!(a, b, o, i128)\n         }\n \n         // For x64\n         // rdx:rax -> xmm0\n         // aka.\n         // define double @__muloti4(i128)\n         #[export_name=\"__floattidf\"]\n-        pub extern $unadj fn i128_as_f64_(a: i128_) -> f64 {\n+        pub extern $unadj fn i128_as_f64_(a: i128) -> f64 {\n             i128_as_f64(a)\n         }\n         #[export_name=\"__floattisf\"]\n-        pub extern $unadj fn i128_as_f32_(a: i128_) -> f32 {\n+        pub extern $unadj fn i128_as_f32_(a: i128) -> f32 {\n             i128_as_f32(a)\n         }\n         #[export_name=\"__floatuntidf\"]\n-        pub extern $unadj fn u128_as_f64_(a: u128_) -> f64 {\n+        pub extern $unadj fn u128_as_f64_(a: u128) -> f64 {\n             u128_as_f64(a)\n         }\n         #[export_name=\"__floatuntisf\"]\n-        pub extern $unadj fn u128_as_f32_(a: u128_) -> f32 {\n+        pub extern $unadj fn u128_as_f32_(a: u128) -> f32 {\n             u128_as_f32(a)\n         }\n \n@@ -722,23 +647,23 @@ pub mod reimpls {\n         // aka.\n         // define i128 @stuff(double)\n         #[export_name=\"__fixunsdfti\"]\n-        pub extern $unadj fn f64_as_u128(a: f64) -> u128_ {\n-            float_as_unsigned!(a, f64, u128_)\n+        pub extern $unadj fn f64_as_u128(a: f64) -> u128 {\n+            float_as_unsigned!(a, f64, u128)\n         }\n \n         #[export_name=\"__fixunssfti\"]\n-        pub extern \"unadjusted\" fn f32_as_u128(a: f32) -> u128_ {\n-            float_as_unsigned!(a, f32, u128_)\n+        pub extern \"unadjusted\" fn f32_as_u128(a: f32) -> u128 {\n+            float_as_unsigned!(a, f32, u128)\n         }\n \n         #[export_name=\"__fixdfti\"]\n-        pub extern \"unadjusted\" fn f64_as_i128(a: f64) -> i128_ {\n-            float_as_signed!(a, f64, i128_)\n+        pub extern \"unadjusted\" fn f64_as_i128(a: f64) -> i128 {\n+            float_as_signed!(a, f64, i128)\n         }\n \n         #[export_name=\"__fixsfti\"]\n-        pub extern \"unadjusted\" fn f32_as_i128(a: f32) -> i128_ {\n-            float_as_signed!(a, f32, i128_)\n+        pub extern \"unadjusted\" fn f32_as_i128(a: f32) -> i128 {\n+            float_as_signed!(a, f32, i128)\n         }\n \n         #[repr(simd)]\n@@ -751,19 +676,19 @@ pub mod reimpls {\n         //\n         // That almost matches the C ABI, so we simply use the C ABI\n         #[export_name=\"__udivmodti4\"]\n-        pub extern \"C\" fn u128_div_mod_(n: u128_, d: u128_, rem: *mut u128_) -> $cret {\n+        pub extern \"C\" fn u128_div_mod_(n: u128, d: u128, rem: *mut u128) -> $cret {\n             let x = u128_div_mod(n, d, rem);\n             ($conv)(x)\n         }\n \n         #[export_name=\"__udivti3\"]\n-        pub extern \"C\" fn u128_div_(a: u128_, b: u128_) -> $cret {\n+        pub extern \"C\" fn u128_div_(a: u128, b: u128) -> $cret {\n             let x = u128_div_mod(a, b, ptr::null_mut());\n             ($conv)(x)\n         }\n \n         #[export_name=\"__umodti3\"]\n-        pub extern \"C\" fn u128_mod_(a: u128_, b: u128_) -> $cret {\n+        pub extern \"C\" fn u128_mod_(a: u128, b: u128) -> $cret {\n             unsafe {\n                 let mut r = ::core::mem::zeroed();\n                 u128_div_mod(a, b, &mut r);\n@@ -772,30 +697,26 @@ pub mod reimpls {\n         }\n \n         #[export_name=\"__divti3\"]\n-        pub extern \"C\" fn i128_div_(a: i128_, b: i128_) -> $cret {\n+        pub extern \"C\" fn i128_div_(a: i128, b: i128) -> $cret {\n             let x = i128_div(a, b);\n-            ($conv)(x as u128_)\n+            ($conv)(x as u128)\n         }\n \n         #[export_name=\"__modti3\"]\n-        pub extern \"C\" fn i128_mod_(a: i128_, b: i128_) -> $cret {\n+        pub extern \"C\" fn i128_mod_(a: i128, b: i128) -> $cret {\n             let x = i128_mod(a, b);\n-            ($conv)(x as u128_)\n+            ($conv)(x as u128)\n         }\n     }\n     } }\n \n     // LLVM expectations for ABI on windows x64 are pure madness.\n-    #[cfg(not(stage0))]\n     #[cfg(all(windows, target_pointer_width=\"64\"))]\n     why_are_abi_strings_checked_by_parser!(u64x2,\n-                                           |i: u128_| u64x2(i.low(), i.high()),\n+                                           |i: u128| u64x2(i.low(), i.high()),\n                                            \"unadjusted\");\n \n-    #[cfg(not(stage0))]\n     #[cfg(not(all(windows, target_pointer_width=\"64\")))]\n-    why_are_abi_strings_checked_by_parser!(u128_, |i|{ i }, \"C\");\n-\n-    #[cfg(not(stage0))]\n+    why_are_abi_strings_checked_by_parser!(u128, |i|{ i }, \"C\");\n     pub use self::imp::*;\n }"}, {"sha": "8dbbc5928f45ab9f56e3e3905b2e9e5d6606a35b", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -153,15 +153,13 @@ clone_impl! { i8 }\n clone_impl! { i16 }\n clone_impl! { i32 }\n clone_impl! { i64 }\n-#[cfg(not(stage0))]\n clone_impl! { i128 }\n \n clone_impl! { usize }\n clone_impl! { u8 }\n clone_impl! { u16 }\n clone_impl! { u32 }\n clone_impl! { u64 }\n-#[cfg(not(stage0))]\n clone_impl! { u128 }\n \n clone_impl! { f32 }"}, {"sha": "cc066099cf8b010167489451110c7fcb7feb6ab0", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -679,10 +679,8 @@ mod impls {\n     }\n \n     partial_eq_impl! {\n-        bool char usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64\n+        bool char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64\n     }\n-    #[cfg(not(stage0))]\n-    partial_eq_impl! { u128 i128 }\n \n     macro_rules! eq_impl {\n         ($($t:ty)*) => ($(\n@@ -691,9 +689,7 @@ mod impls {\n         )*)\n     }\n \n-    eq_impl! { () bool char usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-    #[cfg(not(stage0))]\n-    eq_impl! { u128 i128 }\n+    eq_impl! { () bool char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n     macro_rules! partial_ord_impl {\n         ($($t:ty)*) => ($(\n@@ -782,9 +778,7 @@ mod impls {\n         }\n     }\n \n-    ord_impl! { char usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-    #[cfg(not(stage0))]\n-    ord_impl! { u128 i128 }\n+    ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n     #[unstable(feature = \"never_type_impls\", issue = \"35121\")]\n     impl PartialEq for ! {"}, {"sha": "0d7c1672fbcd29718109220e18075c08f99c7c11", "filename": "src/libcore/default.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -144,15 +144,13 @@ default_impl! { u8, 0 }\n default_impl! { u16, 0 }\n default_impl! { u32, 0 }\n default_impl! { u64, 0 }\n-#[cfg(not(stage0))]\n default_impl! { u128, 0 }\n \n default_impl! { isize, 0 }\n default_impl! { i8, 0 }\n default_impl! { i16, 0 }\n default_impl! { i32, 0 }\n default_impl! { i64, 0 }\n-#[cfg(not(stage0))]\n default_impl! { i128, 0 }\n \n default_impl! { f32, 0.0f32 }"}, {"sha": "a324a4aed25766da158a71c31bbf098a75462791", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -30,7 +30,6 @@ trait Int: Zero + PartialEq + PartialOrd + Div<Output=Self> + Rem<Output=Self> +\n     fn to_u16(&self) -> u16;\n     fn to_u32(&self) -> u32;\n     fn to_u64(&self) -> u64;\n-    #[cfg(not(stage0))]\n     fn to_u128(&self) -> u128;\n }\n \n@@ -41,13 +40,10 @@ macro_rules! doit {\n         fn to_u16(&self) -> u16 { *self as u16 }\n         fn to_u32(&self) -> u32 { *self as u32 }\n         fn to_u64(&self) -> u64 { *self as u64 }\n-        #[cfg(not(stage0))]\n         fn to_u128(&self) -> u128 { *self as u128 }\n     })*)\n }\n-doit! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n-#[cfg(not(stage0))]\n-doit! { i128 u128 }\n+doit! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n \n /// A type that represents a specific radix\n #[doc(hidden)]\n@@ -188,7 +184,6 @@ integer! { i8, u8 }\n integer! { i16, u16 }\n integer! { i32, u32 }\n integer! { i64, u64 }\n-#[cfg(not(stage0))]\n integer! { i128, u128 }\n \n const DEC_DIGITS_LUT: &'static[u8] =\n@@ -265,7 +260,6 @@ macro_rules! impl_Display {\n \n impl_Display!(i8, u8, i16, u16, i32, u32: to_u32);\n impl_Display!(i64, u64: to_u64);\n-#[cfg(not(stage0))]\n impl_Display!(i128, u128: to_u128);\n #[cfg(target_pointer_width = \"16\")]\n impl_Display!(isize, usize: to_u16);"}, {"sha": "f0d8d1a321917a23a6d69bf21d659421f5a3bc8e", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -186,7 +186,6 @@ pub trait Hasher {\n     fn write_u64(&mut self, i: u64) {\n         self.write(&unsafe { mem::transmute::<_, [u8; 8]>(i) })\n     }\n-    #[cfg(not(stage0))]\n     /// Writes a single `u128` into this hasher.\n     #[inline]\n     #[unstable(feature = \"i128\", issue = \"35118\")]\n@@ -227,7 +226,6 @@ pub trait Hasher {\n     fn write_i64(&mut self, i: i64) {\n         self.write_u64(i as u64)\n     }\n-    #[cfg(not(stage0))]\n     /// Writes a single `i128` into this hasher.\n     #[inline]\n     #[unstable(feature = \"i128\", issue = \"35118\")]\n@@ -376,9 +374,6 @@ mod impls {\n         (i32, write_i32),\n         (i64, write_i64),\n         (isize, write_isize),\n-    }\n-    #[cfg(not(stage0))]\n-    impl_write! {\n         (u128, write_u128),\n         (i128, write_i128),\n     }"}, {"sha": "687c477f19e4c744aff29905f0fd43973fd6cb3d", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -242,7 +242,6 @@ step_impl_signed!(i64);\n // assume here that it is less than 64-bits.\n #[cfg(not(target_pointer_width = \"64\"))]\n step_impl_no_between!(u64 i64);\n-#[cfg(not(stage0))]\n step_impl_no_between!(u128 i128);\n \n /// An adapter for stepping range iterators by a custom amount."}, {"sha": "3d124a8aa8b75275cdc59844a945cc250576e5a6", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -89,7 +89,7 @@\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(never_type)]\n-#![cfg_attr(not(stage0), feature(i128_type))]\n+#![feature(i128_type)]\n #![feature(prelude_import)]\n \n #[prelude_import]\n@@ -119,19 +119,13 @@ mod uint_macros;\n #[path = \"num/i16.rs\"]   pub mod i16;\n #[path = \"num/i32.rs\"]   pub mod i32;\n #[path = \"num/i64.rs\"]   pub mod i64;\n-\n-// SNAP\n-#[cfg(not(stage0))]\n #[path = \"num/i128.rs\"]   pub mod i128;\n \n #[path = \"num/usize.rs\"] pub mod usize;\n #[path = \"num/u8.rs\"]    pub mod u8;\n #[path = \"num/u16.rs\"]   pub mod u16;\n #[path = \"num/u32.rs\"]   pub mod u32;\n #[path = \"num/u64.rs\"]   pub mod u64;\n-\n-// SNAP\n-#[cfg(not(stage0))]\n #[path = \"num/u128.rs\"]   pub mod u128;\n \n #[path = \"num/f32.rs\"]   pub mod f32;"}, {"sha": "d7382501bc325b4e8e6ed4465b5d78003db04c08", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -30,9 +30,7 @@ unsafe impl Zeroable for i32 {}\n unsafe impl Zeroable for u32 {}\n unsafe impl Zeroable for i64 {}\n unsafe impl Zeroable for u64 {}\n-#[cfg(not(stage0))]\n unsafe impl Zeroable for i128 {}\n-#[cfg(not(stage0))]\n unsafe impl Zeroable for u128 {}\n \n /// A wrapper type for raw pointers and integers that will never be"}, {"sha": "e907eae18bcbbca4d176639da26aa3eff86e3227", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 75, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -144,9 +144,7 @@ macro_rules! zero_one_impl {\n         }\n     )*)\n }\n-zero_one_impl! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-#[cfg(not(stage0))]\n-zero_one_impl! { u128 i128 }\n+zero_one_impl! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n \n macro_rules! zero_one_impl_float {\n     ($($t:ty)*) => ($(\n@@ -1300,8 +1298,6 @@ impl i64 {\n         intrinsics::mul_with_overflow }\n }\n \n-// SNAP\n-#[cfg(not(stage0))]\n #[lang = \"i128\"]\n impl i128 {\n     int_impl! { i128, u128, 128,\n@@ -2342,8 +2338,6 @@ impl u64 {\n         intrinsics::mul_with_overflow }\n }\n \n-// SNAP\n-#[cfg(not(stage0))]\n #[lang = \"u128\"]\n impl u128 {\n     uint_impl! { u128, 128,\n@@ -2568,9 +2562,7 @@ macro_rules! from_str_radix_int_impl {\n         }\n     )*}\n }\n-from_str_radix_int_impl! { isize i8 i16 i32 i64 usize u8 u16 u32 u64 }\n-#[cfg(not(stage0))]\n-from_str_radix_int_impl! { u128 i128 }\n+from_str_radix_int_impl! { isize i8 i16 i32 i64 i128 usize u8 u16 u32 u64 u128 }\n \n /// The error type returned when a checked integral type conversion fails.\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n@@ -2614,50 +2606,17 @@ macro_rules! same_sign_try_from_int_impl {\n     )*}\n }\n \n-#[cfg(stage0)]\n-same_sign_try_from_int_impl!(u64, u8, u8, u16, u32, u64, usize);\n-#[cfg(stage0)]\n-same_sign_try_from_int_impl!(i64, i8, i8, i16, i32, i64, isize);\n-#[cfg(stage0)]\n-same_sign_try_from_int_impl!(u64, u16, u8, u16, u32, u64, usize);\n-#[cfg(stage0)]\n-same_sign_try_from_int_impl!(i64, i16, i8, i16, i32, i64, isize);\n-#[cfg(stage0)]\n-same_sign_try_from_int_impl!(u64, u32, u8, u16, u32, u64, usize);\n-#[cfg(stage0)]\n-same_sign_try_from_int_impl!(i64, i32, i8, i16, i32, i64, isize);\n-#[cfg(stage0)]\n-same_sign_try_from_int_impl!(u64, u64, u8, u16, u32, u64, usize);\n-#[cfg(stage0)]\n-same_sign_try_from_int_impl!(i64, i64, i8, i16, i32, i64, isize);\n-#[cfg(stage0)]\n-same_sign_try_from_int_impl!(u64, usize, u8, u16, u32, u64, usize);\n-#[cfg(stage0)]\n-same_sign_try_from_int_impl!(i64, isize, i8, i16, i32, i64, isize);\n-\n-#[cfg(not(stage0))]\n same_sign_try_from_int_impl!(u128, u8, u8, u16, u32, u64, u128, usize);\n-#[cfg(not(stage0))]\n same_sign_try_from_int_impl!(i128, i8, i8, i16, i32, i64, i128, isize);\n-#[cfg(not(stage0))]\n same_sign_try_from_int_impl!(u128, u16, u8, u16, u32, u64, u128, usize);\n-#[cfg(not(stage0))]\n same_sign_try_from_int_impl!(i128, i16, i8, i16, i32, i64, i128, isize);\n-#[cfg(not(stage0))]\n same_sign_try_from_int_impl!(u128, u32, u8, u16, u32, u64, u128, usize);\n-#[cfg(not(stage0))]\n same_sign_try_from_int_impl!(i128, i32, i8, i16, i32, i64, i128, isize);\n-#[cfg(not(stage0))]\n same_sign_try_from_int_impl!(u128, u64, u8, u16, u32, u64, u128, usize);\n-#[cfg(not(stage0))]\n same_sign_try_from_int_impl!(i128, i64, i8, i16, i32, i64, i128, isize);\n-#[cfg(not(stage0))]\n same_sign_try_from_int_impl!(u128, u128, u8, u16, u32, u64, u128, usize);\n-#[cfg(not(stage0))]\n same_sign_try_from_int_impl!(i128, i128, i8, i16, i32, i64, i128, isize);\n-#[cfg(not(stage0))]\n same_sign_try_from_int_impl!(u128, usize, u8, u16, u32, u64, u128, usize);\n-#[cfg(not(stage0))]\n same_sign_try_from_int_impl!(i128, isize, i8, i16, i32, i64, i128, isize);\n \n macro_rules! cross_sign_from_int_impl {\n@@ -2692,28 +2651,11 @@ macro_rules! cross_sign_from_int_impl {\n     )*}\n }\n \n-#[cfg(stage0)]\n-cross_sign_from_int_impl!(u8, i8, i16, i32, i64, isize);\n-#[cfg(stage0)]\n-cross_sign_from_int_impl!(u16, i8, i16, i32, i64, isize);\n-#[cfg(stage0)]\n-cross_sign_from_int_impl!(u32, i8, i16, i32, i64, isize);\n-#[cfg(stage0)]\n-cross_sign_from_int_impl!(u64, i8, i16, i32, i64, isize);\n-#[cfg(stage0)]\n-cross_sign_from_int_impl!(usize, i8, i16, i32, i64, isize);\n-\n-#[cfg(not(stage0))]\n cross_sign_from_int_impl!(u8, i8, i16, i32, i64, i128, isize);\n-#[cfg(not(stage0))]\n cross_sign_from_int_impl!(u16, i8, i16, i32, i64, i128, isize);\n-#[cfg(not(stage0))]\n cross_sign_from_int_impl!(u32, i8, i16, i32, i64, i128, isize);\n-#[cfg(not(stage0))]\n cross_sign_from_int_impl!(u64, i8, i16, i32, i64, i128, isize);\n-#[cfg(not(stage0))]\n cross_sign_from_int_impl!(u128, i8, i16, i32, i64, i128, isize);\n-#[cfg(not(stage0))]\n cross_sign_from_int_impl!(usize, i8, i16, i32, i64, i128, isize);\n \n #[doc(hidden)]\n@@ -2742,9 +2684,7 @@ macro_rules! doit {\n         }\n     })*)\n }\n-doit! { i8 i16 i32 i64 isize u8 u16 u32 u64 usize }\n-#[cfg(not(stage0))]\n-doit! { i128 u128 }\n+doit! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n \n fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n     use self::IntErrorKind::*;\n@@ -2878,50 +2818,38 @@ macro_rules! impl_from {\n impl_from! { u8, u16 }\n impl_from! { u8, u32 }\n impl_from! { u8, u64 }\n-#[cfg(not(stage0))]\n impl_from! { u8, u128 }\n impl_from! { u8, usize }\n impl_from! { u16, u32 }\n impl_from! { u16, u64 }\n-#[cfg(not(stage0))]\n impl_from! { u16, u128 }\n impl_from! { u32, u64 }\n-#[cfg(not(stage0))]\n impl_from! { u32, u128 }\n-#[cfg(not(stage0))]\n impl_from! { u64, u128 }\n \n // Signed -> Signed\n impl_from! { i8, i16 }\n impl_from! { i8, i32 }\n impl_from! { i8, i64 }\n-#[cfg(not(stage0))]\n impl_from! { i8, i128 }\n impl_from! { i8, isize }\n impl_from! { i16, i32 }\n impl_from! { i16, i64 }\n-#[cfg(not(stage0))]\n impl_from! { i16, i128 }\n impl_from! { i32, i64 }\n-#[cfg(not(stage0))]\n impl_from! { i32, i128 }\n-#[cfg(not(stage0))]\n impl_from! { i64, i128 }\n \n // Unsigned -> Signed\n impl_from! { u8, i16 }\n impl_from! { u8, i32 }\n impl_from! { u8, i64 }\n-#[cfg(not(stage0))]\n impl_from! { u8, i128 }\n impl_from! { u16, i32 }\n impl_from! { u16, i64 }\n-#[cfg(not(stage0))]\n impl_from! { u16, i128 }\n impl_from! { u32, i64 }\n-#[cfg(not(stage0))]\n impl_from! { u32, i128 }\n-#[cfg(not(stage0))]\n impl_from! { u64, i128 }\n \n // Note: integers can only be represented with full precision in a float if"}, {"sha": "50007c7d9b01a6a0f8270dbe5bc9299c795b30c5", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -297,9 +297,7 @@ macro_rules! wrapping_impl {\n     )*)\n }\n \n-wrapping_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-#[cfg(not(stage0))]\n-wrapping_impl! { u128 i128 }\n+wrapping_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n mod shift_max {\n     #![allow(non_upper_case_globals)]"}, {"sha": "566fb89365a51ae3f42cca5dc13a24eca0f616c1", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 22, "deletions": 74, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -267,9 +267,7 @@ macro_rules! add_impl {\n     )*)\n }\n \n-add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-#[cfg(not(stage0))]\n-add_impl! { u128 i128 }\n+add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The `Sub` trait is used to specify the functionality of `-`.\n ///\n@@ -342,9 +340,7 @@ macro_rules! sub_impl {\n     )*)\n }\n \n-sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-#[cfg(not(stage0))]\n-sub_impl! { u128 i128 }\n+sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The `Mul` trait is used to specify the functionality of `*`.\n ///\n@@ -466,9 +462,7 @@ macro_rules! mul_impl {\n     )*)\n }\n \n-mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-#[cfg(not(stage0))]\n-mul_impl! { u128 i128 }\n+mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The `Div` trait is used to specify the functionality of `/`.\n ///\n@@ -597,9 +591,7 @@ macro_rules! div_impl_integer {\n     )*)\n }\n \n-div_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-#[cfg(not(stage0))]\n-div_impl_integer! { u128 i128 }\n+div_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n macro_rules! div_impl_float {\n     ($($t:ty)*) => ($(\n@@ -678,9 +670,7 @@ macro_rules! rem_impl_integer {\n     )*)\n }\n \n-rem_impl_integer! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-#[cfg(not(stage0))]\n-rem_impl_integer! { u128 i128 }\n+rem_impl_integer! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n \n macro_rules! rem_impl_float {\n@@ -776,9 +766,7 @@ macro_rules! neg_impl_unsigned {\n }\n \n // neg_impl_unsigned! { usize u8 u16 u32 u64 }\n-neg_impl_numeric! { isize i8 i16 i32 i64 f32 f64 }\n-#[cfg(not(stage0))]\n-neg_impl_numeric! { i128 }\n+neg_impl_numeric! { isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The `Not` trait is used to specify the functionality of unary `!`.\n ///\n@@ -836,9 +824,7 @@ macro_rules! not_impl {\n     )*)\n }\n \n-not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-#[cfg(not(stage0))]\n-not_impl! { u128 i128 }\n+not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The `BitAnd` trait is used to specify the functionality of `&`.\n ///\n@@ -921,9 +907,7 @@ macro_rules! bitand_impl {\n     )*)\n }\n \n-bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-#[cfg(not(stage0))]\n-bitand_impl! { u128 i128 }\n+bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The `BitOr` trait is used to specify the functionality of `|`.\n ///\n@@ -1006,9 +990,7 @@ macro_rules! bitor_impl {\n     )*)\n }\n \n-bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-#[cfg(not(stage0))]\n-bitor_impl! { u128 i128 }\n+bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The `BitXor` trait is used to specify the functionality of `^`.\n ///\n@@ -1094,9 +1076,7 @@ macro_rules! bitxor_impl {\n     )*)\n }\n \n-bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-#[cfg(not(stage0))]\n-bitxor_impl! { u128 i128 }\n+bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The `Shl` trait is used to specify the functionality of `<<`.\n ///\n@@ -1187,23 +1167,19 @@ macro_rules! shl_impl_all {\n         shl_impl! { $t, u16 }\n         shl_impl! { $t, u32 }\n         shl_impl! { $t, u64 }\n-        #[cfg(not(stage0))]\n         shl_impl! { $t, u128 }\n         shl_impl! { $t, usize }\n \n         shl_impl! { $t, i8 }\n         shl_impl! { $t, i16 }\n         shl_impl! { $t, i32 }\n         shl_impl! { $t, i64 }\n-        #[cfg(not(stage0))]\n         shl_impl! { $t, i128 }\n         shl_impl! { $t, isize }\n     )*)\n }\n \n-shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-#[cfg(not(stage0))]\n-shl_impl_all! { u128 i128 }\n+shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n \n /// The `Shr` trait is used to specify the functionality of `>>`.\n ///\n@@ -1294,23 +1270,19 @@ macro_rules! shr_impl_all {\n         shr_impl! { $t, u16 }\n         shr_impl! { $t, u32 }\n         shr_impl! { $t, u64 }\n-        #[cfg(not(stage0))]\n         shr_impl! { $t, u128 }\n         shr_impl! { $t, usize }\n \n         shr_impl! { $t, i8 }\n         shr_impl! { $t, i16 }\n         shr_impl! { $t, i32 }\n         shr_impl! { $t, i64 }\n-        #[cfg(not(stage0))]\n         shr_impl! { $t, i128 }\n         shr_impl! { $t, isize }\n     )*)\n }\n \n-shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-#[cfg(not(stage0))]\n-shr_impl_all! { u128 i128 }\n+shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n \n /// The `AddAssign` trait is used to specify the functionality of `+=`.\n ///\n@@ -1366,9 +1338,7 @@ macro_rules! add_assign_impl {\n     )+)\n }\n \n-add_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-#[cfg(not(stage0))]\n-add_assign_impl! { u128 i128 }\n+add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The `SubAssign` trait is used to specify the functionality of `-=`.\n ///\n@@ -1424,9 +1394,7 @@ macro_rules! sub_assign_impl {\n     )+)\n }\n \n-sub_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-#[cfg(not(stage0))]\n-sub_assign_impl! { u128 i128 }\n+sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The `MulAssign` trait is used to specify the functionality of `*=`.\n ///\n@@ -1471,9 +1439,7 @@ macro_rules! mul_assign_impl {\n     )+)\n }\n \n-mul_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-#[cfg(not(stage0))]\n-mul_assign_impl! { u128 i128 }\n+mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The `DivAssign` trait is used to specify the functionality of `/=`.\n ///\n@@ -1517,9 +1483,7 @@ macro_rules! div_assign_impl {\n     )+)\n }\n \n-div_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-#[cfg(not(stage0))]\n-div_assign_impl! { u128 i128 }\n+div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The `RemAssign` trait is used to specify the functionality of `%=`.\n ///\n@@ -1563,9 +1527,7 @@ macro_rules! rem_assign_impl {\n     )+)\n }\n \n-rem_assign_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n-#[cfg(not(stage0))]\n-rem_assign_impl! { u128 i128 }\n+rem_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n \n /// The `BitAndAssign` trait is used to specify the functionality of `&=`.\n ///\n@@ -1651,9 +1613,7 @@ macro_rules! bitand_assign_impl {\n     )+)\n }\n \n-bitand_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-#[cfg(not(stage0))]\n-bitand_assign_impl! { u128 i128 }\n+bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The `BitOrAssign` trait is used to specify the functionality of `|=`.\n ///\n@@ -1697,9 +1657,7 @@ macro_rules! bitor_assign_impl {\n     )+)\n }\n \n-bitor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-#[cfg(not(stage0))]\n-bitor_assign_impl! { u128 i128 }\n+bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The `BitXorAssign` trait is used to specify the functionality of `^=`.\n ///\n@@ -1743,9 +1701,7 @@ macro_rules! bitxor_assign_impl {\n     )+)\n }\n \n-bitxor_assign_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n-#[cfg(not(stage0))]\n-bitxor_assign_impl! { u128 i128 }\n+bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n /// The `ShlAssign` trait is used to specify the functionality of `<<=`.\n ///\n@@ -1798,23 +1754,19 @@ macro_rules! shl_assign_impl_all {\n         shl_assign_impl! { $t, u16 }\n         shl_assign_impl! { $t, u32 }\n         shl_assign_impl! { $t, u64 }\n-        #[cfg(not(stage0))]\n         shl_assign_impl! { $t, u128 }\n         shl_assign_impl! { $t, usize }\n \n         shl_assign_impl! { $t, i8 }\n         shl_assign_impl! { $t, i16 }\n         shl_assign_impl! { $t, i32 }\n         shl_assign_impl! { $t, i64 }\n-        #[cfg(not(stage0))]\n         shl_assign_impl! { $t, i128 }\n         shl_assign_impl! { $t, isize }\n     )*)\n }\n \n-shl_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-#[cfg(not(stage0))]\n-shl_assign_impl_all! { u128 i128 }\n+shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n \n /// The `ShrAssign` trait is used to specify the functionality of `>>=`.\n ///\n@@ -1867,23 +1819,19 @@ macro_rules! shr_assign_impl_all {\n         shr_assign_impl! { $t, u16 }\n         shr_assign_impl! { $t, u32 }\n         shr_assign_impl! { $t, u64 }\n-        #[cfg(not(stage0))]\n         shr_assign_impl! { $t, u128 }\n         shr_assign_impl! { $t, usize }\n \n         shr_assign_impl! { $t, i8 }\n         shr_assign_impl! { $t, i16 }\n         shr_assign_impl! { $t, i32 }\n         shr_assign_impl! { $t, i64 }\n-        #[cfg(not(stage0))]\n         shr_assign_impl! { $t, i128 }\n         shr_assign_impl! { $t, isize }\n     )*)\n }\n \n-shr_assign_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n-#[cfg(not(stage0))]\n-shr_assign_impl_all! { u128 i128 }\n+shr_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n \n /// The `Index` trait is used to specify the functionality of indexing operations\n /// like `container[index]` when used in an immutable context."}, {"sha": "5d53c60ad7fdc1072620abf156c939ae5dce7619", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -19,7 +19,6 @@ rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n-rustc_i128 = { path = \"../librustc_i128\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "5c0ec8de7ecd266d8eeb9b4469baa0be127cc1d8", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -30,6 +30,7 @@\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(field_init_shorthand)]\n+#![feature(i128_type)]\n #![feature(libc)]\n #![feature(loop_break_value)]\n #![feature(nonzero)]\n@@ -60,9 +61,6 @@ extern crate syntax_pos;\n \n extern crate serialize as rustc_serialize; // used by deriving\n \n-// SNAP:\n-extern crate rustc_i128;\n-\n #[macro_use]\n mod macros;\n "}, {"sha": "b5efd2cfc686af457f4fc3f0b5aa9bc679a0cacd", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -20,7 +20,6 @@ use ty::{self, Ty, TyCtxt, TypeFoldable};\n use syntax::ast::{FloatTy, IntTy, UintTy};\n use syntax::attr;\n use syntax_pos::DUMMY_SP;\n-use rustc_i128::u128;\n use rustc_const_math::ConstInt;\n \n use std::cmp;"}, {"sha": "780b2c16a32ecefc5bd556d2a88b6409b9246554", "filename": "src/librustc_const_eval/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_eval%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_eval%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2FCargo.toml?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -19,4 +19,3 @@ rustc_errors = { path = \"../librustc_errors\" }\n syntax = { path = \"../libsyntax\" }\n graphviz = { path = \"../libgraphviz\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rustc_i128 = { path = \"../librustc_i128\" }"}, {"sha": "e2e76cdfb6ebd8f3ad07f0f75afef738450c10c4", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -37,8 +37,6 @@ use std::cmp::Ordering;\n use rustc_const_math::*;\n use rustc_errors::DiagnosticBuilder;\n \n-use rustc_i128::{i128, u128};\n-\n macro_rules! math {\n     ($e:expr, $op:expr) => {\n         match $op {"}, {"sha": "198e49daabc63f74422d86778f4dd143ee4f39f9", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -29,6 +29,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(const_fn)]\n+#![feature(i128_type)]\n \n extern crate arena;\n #[macro_use] extern crate syntax;\n@@ -41,8 +42,6 @@ extern crate rustc_errors;\n extern crate graphviz;\n extern crate syntax_pos;\n \n-extern crate rustc_i128;\n-\n // NB: This module needs to be declared first so diagnostics are\n // registered before they are used.\n pub mod diagnostics;"}, {"sha": "e74c1ef693ce010c568c6db36db8585a4eb59c6c", "filename": "src/librustc_const_math/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_math%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_math%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2FCargo.toml?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -11,4 +11,3 @@ crate-type = [\"dylib\"]\n [dependencies]\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n-rustc_i128 = { path = \"../librustc_i128\" }"}, {"sha": "3618bfa20811fc2e3622e8b93fbf3d409919afa1", "filename": "src/librustc_const_math/int.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_math%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_math%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fint.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -11,7 +11,6 @@\n use std::cmp::Ordering;\n use syntax::attr::IntType;\n use syntax::ast::{IntTy, UintTy};\n-use rustc_i128::{i128, u128};\n \n use super::is::*;\n use super::us::*;\n@@ -54,7 +53,6 @@ macro_rules! bounds {\n \n mod ubounds {\n     #![allow(dead_code)]\n-    use rustc_i128::{u128, i128};\n     bounds!{u128: 0,\n         i8 I8MIN I8MAX i16 I16MIN I16MAX i32 I32MIN I32MAX i64 I64MIN I64MAX i128 I128MIN I128MAX\n         u8 U8MIN U8MAX u16 U16MIN U16MAX u32 U32MIN U32MAX u64 U64MIN U64MAX u128 U128MIN U128MAX\n@@ -65,12 +63,6 @@ mod ubounds {\n \n mod ibounds {\n     #![allow(dead_code)]\n-    use rustc_i128::i128;\n-    #[cfg(stage0)]\n-    pub const U64MIN: i128 = 0;\n-    #[cfg(stage0)]\n-    pub const U64MAX: i128 = i128::max_value();\n-    #[cfg(not(stage0))]\n     bounds!(i128, u64 U64MIN U64MAX);\n \n     pub const U128MIN: i128 = 0;\n@@ -483,10 +475,7 @@ derive_binop!(BitAnd, bitand);\n derive_binop!(BitOr, bitor);\n derive_binop!(BitXor, bitxor);\n \n-#[cfg(not(stage0))]\n const I128_MIN: i128 = ::std::i128::MIN;\n-#[cfg(stage0)]\n-const I128_MIN: i128 = ::std::i64::MIN;\n \n fn check_division(\n     lhs: ConstInt,"}, {"sha": "8f28ba14c6aef6b5dac21a4c8e11cdf3449d5013", "filename": "src/librustc_const_math/is.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_math%2Fis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_math%2Fis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fis.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -10,7 +10,6 @@\n \n use syntax::ast;\n use super::err::*;\n-use rustc_i128::i128;\n \n /// Depending on the target only one variant is ever used in a compilation.\n /// Anything else is an error. This invariant is checked at several locations"}, {"sha": "13764ce5bbbfd2027f50cda905102dd6abf4b351", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -26,13 +26,11 @@\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(const_fn)]\n-#![cfg_attr(not(stage0), feature(i128))]\n+#![feature(i128)]\n+#![feature(i128_type)]\n \n extern crate syntax;\n \n-// SNAP: remove use of this crate\n-extern crate rustc_i128;\n-\n extern crate serialize as rustc_serialize; // used by deriving\n \n mod float;"}, {"sha": "76443f584abacc370b46f4be96480305c86465e4", "filename": "src/librustc_const_math/us.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_math%2Fus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_const_math%2Fus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fus.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -10,7 +10,6 @@\n \n use syntax::ast;\n use super::err::*;\n-use rustc_i128::u128;\n \n /// Depending on the target only one variant is ever used in a compilation.\n /// Anything else is an error. This invariant is checked at several locations"}, {"sha": "e2e16059d98718c534335bf277927d4cb35c7853", "filename": "src/librustc_data_structures/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2FCargo.toml?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -11,4 +11,3 @@ crate-type = [\"dylib\"]\n [dependencies]\n log = { path = \"../liblog\" }\n serialize = { path = \"../libserialize\" }\n-rustc_i128 = { path = \"../librustc_i128\" }"}, {"sha": "cf6bf1cf1d4834bb00087658b565b58995f2ce17", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -36,6 +36,7 @@\n #![feature(untagged_unions)]\n #![feature(associated_consts)]\n #![feature(unsize)]\n+#![feature(i128_type)]\n \n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(test, feature(test))]\n@@ -47,8 +48,6 @@ extern crate serialize as rustc_serialize; // used by deriving\n #[cfg(unix)]\n extern crate libc;\n \n-extern crate rustc_i128;\n-\n pub use rustc_serialize::hex::ToHex;\n \n pub mod array_vec;"}, {"sha": "231c01c9ab78d8d99b55fccfddd9d29b152de220", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -13,7 +13,6 @@ use std::marker::PhantomData;\n use std::mem;\n use blake2b::Blake2bHasher;\n use rustc_serialize::leb128;\n-use rustc_i128::{u128,i128};\n \n fn write_unsigned_leb128_to_buf(buf: &mut [u8; 16], value: u64) -> usize {\n     leb128::write_unsigned_leb128_to(value as u128, |i, v| buf[i] = v)"}, {"sha": "6fd67637db7e6f27fdbc9c77e64a649ef9cda858", "filename": "src/librustc_i128/Cargo.toml", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/src%2Flibrustc_i128%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/src%2Flibrustc_i128%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_i128%2FCargo.toml?ref=86d9ed6c82c6745fec46b9ecf2fa91be7924dd16", "patch": "@@ -1,8 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-name = \"rustc_i128\"\n-version = \"0.0.0\"\n-\n-[lib]\n-name = \"rustc_i128\"\n-path = \"lib.rs\""}, {"sha": "80f550c7f50e2089bd2388c1f593fa2a3499466f", "filename": "src/librustc_i128/lib.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/src%2Flibrustc_i128%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d9ed6c82c6745fec46b9ecf2fa91be7924dd16/src%2Flibrustc_i128%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_i128%2Flib.rs?ref=86d9ed6c82c6745fec46b9ecf2fa91be7924dd16", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-#![allow(non_camel_case_types)]\n-#![cfg_attr(not(stage0), feature(i128_type))]\n-#![no_std]\n-#![crate_type=\"rlib\"]\n-#![crate_name=\"rustc_i128\"]\n-\n-#[cfg(stage0)]\n-pub type i128 = i64;\n-#[cfg(stage0)]\n-pub type u128 = u64;\n-\n-#[cfg(not(stage0))]\n-pub type i128 = int::_i128;\n-#[cfg(not(stage0))]\n-pub type u128 = int::_u128;\n-#[cfg(not(stage0))]\n-mod int {\n-    pub type _i128 = i128;\n-    pub type _u128 = u128;\n-}"}, {"sha": "4d5c0d7ba0ae1130f253a8e05113c9078ed202e3", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -14,6 +14,5 @@ log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n-rustc_i128 = { path = \"../librustc_i128\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "d1ad3730aa2b3b716ba6eae742ec1401aa7010cb", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -31,6 +31,7 @@\n #![cfg_attr(test, feature(test))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(i128_type)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n@@ -46,8 +47,6 @@ extern crate rustc_back;\n extern crate rustc_const_eval;\n extern crate syntax_pos;\n \n-extern crate rustc_i128;\n-\n pub use rustc::lint;\n pub use rustc::middle;\n pub use rustc::session;"}, {"sha": "2c3d71cd8de1d691b0fda1ffcf048835a70c9f1f", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -33,8 +33,6 @@ use syntax::codemap;\n \n use rustc::hir;\n \n-use rustc_i128::{i128, u128};\n-\n declare_lint! {\n     UNUSED_COMPARISONS,\n     Warn,"}, {"sha": "6f7f03ca216b9a3c83543c1448358e278f962285", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -18,7 +18,6 @@ rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n-rustc_i128 = { path = \"../librustc_i128\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_ext = { path = \"../libsyntax_ext\" }"}, {"sha": "f4a35ea5fd0cf396c38bee213e5aee611d270cd5", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -42,7 +42,6 @@ use syntax::attr;\n use syntax::ast;\n use syntax::codemap;\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP};\n-use rustc_i128::{u128, i128};\n \n pub struct DecodeContext<'a, 'tcx: 'a> {\n     opaque: opaque::Decoder<'a>,"}, {"sha": "69e1bbd77662b8700ff88e94a46beee7fd1bd2a6", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -43,8 +43,6 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::intravisit::{Visitor, NestedVisitorMap};\n use rustc::hir::intravisit;\n \n-use rustc_i128::{u128, i128};\n-\n use super::index_builder::{FromId, IndexBuilder, Untracked};\n \n pub struct EncodeContext<'a, 'tcx: 'a> {"}, {"sha": "2fbdb8c0de676dec7f7921e3037e9c6410811c0f", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -20,6 +20,7 @@\n #![feature(box_patterns)]\n #![feature(conservative_impl_trait)]\n #![feature(core_intrinsics)]\n+#![feature(i128_type)]\n #![feature(proc_macro_internals)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n@@ -44,7 +45,6 @@ extern crate rustc_back;\n extern crate rustc_const_math;\n extern crate rustc_data_structures;\n extern crate rustc_llvm;\n-extern crate rustc_i128;\n \n mod diagnostics;\n "}, {"sha": "d13628e9ce7a3c0787997ae62a42ce5e4e8694ef", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -28,8 +28,6 @@ use syntax_pos::{self, Span};\n \n use std::marker::PhantomData;\n \n-use rustc_i128::u128;\n-\n pub fn rustc_version() -> String {\n     format!(\"rustc {}\",\n             option_env!(\"CFG_VERSION\").unwrap_or(\"unknown version\"))"}, {"sha": "531be0b6ae9f5f620528982f7edf7f829b7f7bb0", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -16,6 +16,5 @@ rustc_const_eval = { path = \"../librustc_const_eval\" }\n rustc_const_math = { path = \"../librustc_const_math\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_bitflags = { path = \"../librustc_bitflags\" }\n-rustc_i128 = { path = \"../librustc_i128\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "b1e1e75912da33f1605d4f2e904ee96aa25f9351", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -15,7 +15,6 @@ use std;\n use rustc_const_math::{ConstMathErr, Op};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_i128::i128;\n \n use build::{BlockAnd, BlockAndExtension, Builder};\n use build::expr::category::{Category, RvalueFunc};"}, {"sha": "61ba9d90fef388bbc6f0a5564f7a1ee5f54c835d", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -22,6 +22,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n #![feature(associated_consts)]\n #![feature(box_patterns)]\n+#![feature(i128_type)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n@@ -40,8 +41,6 @@ extern crate syntax_pos;\n extern crate rustc_const_math;\n extern crate rustc_const_eval;\n \n-extern crate rustc_i128;\n-\n pub mod diagnostics;\n \n pub mod build;"}, {"sha": "fa48a63b6b8f5865350fd879a18523de28c22fc4", "filename": "src/librustc_trans/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_trans%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_trans%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2FCargo.toml?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -21,7 +21,6 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_incremental = { path = \"../librustc_incremental\" }\n rustc_llvm = { path = \"../librustc_llvm\" }\n-rustc_i128 = { path = \"../librustc_i128\" }\n rustc_platform_intrinsics = { path = \"../librustc_platform_intrinsics\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "01b2aeef004db6f3f16a7be771fe13369379b18e", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -40,8 +40,6 @@ use syntax::ast;\n use syntax::symbol::InternedString;\n use syntax_pos::Span;\n \n-use rustc_i128::u128;\n-\n pub use context::{CrateContext, SharedCrateContext};\n \n pub fn type_is_fat_ptr<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n@@ -399,13 +397,6 @@ fn is_const_integral(v: ValueRef) -> bool {\n }\n \n #[inline]\n-#[cfg(stage0)]\n-fn hi_lo_to_u128(lo: u64, _: u64) -> u128 {\n-    lo as u128\n-}\n-\n-#[inline]\n-#[cfg(not(stage0))]\n fn hi_lo_to_u128(lo: u64, hi: u64) -> u128 {\n     ((hi as u128) << 64) | (lo as u128)\n }"}, {"sha": "37f63e7499689f1cee16ccc3324584bffbd962a0", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -33,8 +33,6 @@ use builder::Builder;\n use rustc::session::Session;\n use syntax_pos::Span;\n \n-use rustc_i128::u128;\n-\n use std::cmp::Ordering;\n use std::iter;\n "}, {"sha": "21c92cb4a4ad2329b5f06f558012a9db69fa1a05", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -29,6 +29,7 @@\n #![feature(const_fn)]\n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n+#![feature(i128_type)]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n@@ -53,7 +54,6 @@ extern crate rustc_const_eval;\n #[macro_use]\n #[no_link]\n extern crate rustc_bitflags;\n-extern crate rustc_i128;\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "3d5e1694355b3f2fd40592581c827ba9ff026728", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -43,8 +43,6 @@ use std::ptr;\n use super::operand::{OperandRef, OperandValue};\n use super::MirContext;\n \n-use rustc_i128::{u128, i128};\n-\n /// A sized constant rvalue.\n /// The LLVM type might not be the same for a single Rust type,\n /// e.g. each enum variant would have its own LLVM struct type."}, {"sha": "a896c4a634c3660fef9501949ca8178114ae9274", "filename": "src/libserialize/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibserialize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibserialize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2FCargo.toml?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -7,6 +7,3 @@ version = \"0.0.0\"\n name = \"serialize\"\n path = \"lib.rs\"\n crate-type = [\"dylib\", \"rlib\"]\n-\n-[dependencies]\n-rustc_i128 = { path = \"../librustc_i128\" }"}, {"sha": "07417565e314ff533dd49b4088dd83f8c75e4408", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -211,8 +211,6 @@ use std::string;\n use std::{char, f64, fmt, str};\n use std;\n \n-use rustc_i128::{i128, u128};\n-\n use Encodable;\n \n /// Represents a json value"}, {"sha": "a9638717c66fa47dc860adafdf9434d7ab6848a4", "filename": "src/libserialize/leb128.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibserialize%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibserialize%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fleb128.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc_i128::{i128, u128};\n-\n #[inline]\n fn write_to_vec(vec: &mut Vec<u8>, position: usize, byte: u8) {\n     if position == vec.len() {"}, {"sha": "2b31e2f4108063a7b7f88b1a370317ff3434e2a3", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -30,14 +30,13 @@ Core encoding and decoding interfaces.\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core_intrinsics)]\n+#![feature(i128_type)]\n #![feature(specialization)]\n #![feature(staged_api)]\n #![cfg_attr(test, feature(test))]\n \n extern crate collections;\n \n-extern crate rustc_i128;\n-\n pub use self::serialize::{Decoder, Encoder, Decodable, Encodable};\n \n pub use self::serialize::{SpecializationError, SpecializedEncoder, SpecializedDecoder};"}, {"sha": "9c3db64d4d8639a66f3f4ceebdde0e710aec531e", "filename": "src/libserialize/opaque.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibserialize%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibserialize%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fopaque.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -13,8 +13,6 @@ use std::borrow::Cow;\n use std::io::{self, Write};\n use serialize;\n \n-use rustc_i128::{i128, u128};\n-\n // -----------------------------------------------------------------------------\n // Encoder\n // -----------------------------------------------------------------------------"}, {"sha": "ba39fcdec6f882bd9fc20abae88ae79f76e9e96a", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -20,7 +20,6 @@ use std::path;\n use std::rc::Rc;\n use std::cell::{Cell, RefCell};\n use std::sync::Arc;\n-use rustc_i128::{i128, u128};\n \n pub trait Encoder {\n     type Error;\n@@ -333,14 +332,12 @@ impl Decodable for u64 {\n     }\n }\n \n-#[cfg(not(stage0))]\n impl Encodable for u128 {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_u128(*self)\n     }\n }\n \n-#[cfg(not(stage0))]\n impl Decodable for u128 {\n     fn decode<D: Decoder>(d: &mut D) -> Result<u128, D::Error> {\n         d.read_u128()\n@@ -407,14 +404,12 @@ impl Decodable for i64 {\n     }\n }\n \n-#[cfg(not(stage0))]\n impl Encodable for i128 {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_i128(*self)\n     }\n }\n \n-#[cfg(not(stage0))]\n impl Decodable for i128 {\n     fn decode<D: Decoder>(d: &mut D) -> Result<i128, D::Error> {\n         d.read_i128()"}, {"sha": "181694dead03c1d9ca0de6c5578de3c46afaa202", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -399,7 +399,6 @@ pub use core::i32;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::i64;\n #[unstable(feature = \"i128\", issue = \"35118\")]\n-#[cfg(not(stage0))]\n pub use core::i128;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::usize;\n@@ -430,7 +429,6 @@ pub use core_collections::vec;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use std_unicode::char;\n #[unstable(feature = \"i128\", issue = \"35118\")]\n-#[cfg(not(stage0))]\n pub use core::u128;\n \n pub mod f32;"}, {"sha": "0b38f5450b63faf09251971ad20926318130c2ff", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -15,4 +15,3 @@ rustc_bitflags = { path = \"../librustc_bitflags\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_i128 = { path = \"../librustc_i128\" }"}, {"sha": "09fb369cd3568b8f1a4d01507d7606b33f998bce", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -33,8 +33,6 @@ use std::u32;\n \n use serialize::{self, Encodable, Decodable, Encoder, Decoder};\n \n-use rustc_i128::{u128, i128};\n-\n /// An identifier contains a Name (index into the interner\n /// table) and a SyntaxContext to track renaming and\n /// macro expansion per Flatt et al., \"Macros That Work Together\""}, {"sha": "f8d4eff80b2d19f7eeb95fb62bdcc8be080688ee", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -16,7 +16,6 @@ use codemap::{dummy_spanned, respan, Spanned};\n use ext::base::ExtCtxt;\n use ptr::P;\n use symbol::{Symbol, keywords};\n-use rustc_i128::u128;\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {"}, {"sha": "6c46f90f3d4b95abdd791772314e5c8155218d8c", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -41,7 +41,6 @@ pub mod rt {\n     pub use parse::new_parser_from_tts;\n     pub use syntax_pos::{BytePos, Span, DUMMY_SP};\n     pub use codemap::{dummy_spanned};\n-    use rustc_i128::{u128};\n \n     pub trait ToTokens {\n         fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree>;"}, {"sha": "25be9e91a6ac92a70cedb6573d161c42e631df25", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -33,6 +33,7 @@\n #![feature(unicode)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(specialization)]\n+#![feature(i128_type)]\n \n extern crate serialize;\n #[macro_use] extern crate log;\n@@ -42,8 +43,6 @@ pub extern crate rustc_errors as errors;\n extern crate syntax_pos;\n extern crate rustc_data_structures;\n \n-extern crate rustc_i128;\n-\n extern crate serialize as rustc_serialize; // used by deriving\n \n // A variant of 'try!' that panics on an Err. This is used as a crutch on the"}, {"sha": "20e80afc115f5676ffc746377dd6920f2f2ae7ec", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -28,8 +28,6 @@ use std::path::{Path, PathBuf};\n use std::rc::Rc;\n use std::str;\n \n-use rustc_i128::u128;\n-\n pub type PResult<'a, T> = Result<T, DiagnosticBuilder<'a>>;\n \n #[macro_use]"}, {"sha": "fd7c56f136f48fe48b1e22ae02a2046dd23e933b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -65,8 +65,6 @@ use std::path::{Path, PathBuf};\n use std::rc::Rc;\n use std::slice;\n \n-use rustc_i128::u128;\n-\n bitflags! {\n     flags Restrictions: u8 {\n         const RESTRICTION_STMT_EXPR         = 1 << 0,"}, {"sha": "ffdd3b2e93e2e18985e4f1349bf0bd610efb4f8e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -29,8 +29,6 @@ use std_inject;\n use symbol::{Symbol, keywords};\n use tokenstream::{self, TokenTree};\n \n-use rustc_i128::i128;\n-\n use std::ascii;\n use std::io::{self, Write, Read};\n use std::iter;"}, {"sha": "cda9a5a96432b9e308c9add87f2a1f0b216a07cd", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0648517faf1e2cf37c8b6770cbd0180a816ed9a0/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=0648517faf1e2cf37c8b6770cbd0180a816ed9a0", "patch": "@@ -12,5 +12,5 @@\n # tarball for a stable release you'll likely see `1.x.0-$date` where `1.x.0` was\n # released on `$date`\n \n-rustc: beta-2016-12-20\n+rustc: beta-2017-02-01\n cargo: bfee18f73287687c543bda8c35e4e33808792715"}]}