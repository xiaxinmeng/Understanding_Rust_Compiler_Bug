{"sha": "57e82878c0c18d920b5fb0df11bff6aa2e2abca5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZTgyODc4YzBjMThkOTIwYjVmYjBkZjExYmZmNmFhMmUyYWJjYTU=", "commit": {"author": {"name": "12101111", "email": "w12101111@gmail.com", "date": "2019-09-13T18:40:20Z"}, "committer": {"name": "12101111", "email": "w12101111@gmail.com", "date": "2019-09-13T18:40:20Z"}, "message": "fix #64430", "tree": {"sha": "fff05e7a0885fc68f45c8b9060d59c3fb017f708", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fff05e7a0885fc68f45c8b9060d59c3fb017f708"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57e82878c0c18d920b5fb0df11bff6aa2e2abca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57e82878c0c18d920b5fb0df11bff6aa2e2abca5", "html_url": "https://github.com/rust-lang/rust/commit/57e82878c0c18d920b5fb0df11bff6aa2e2abca5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57e82878c0c18d920b5fb0df11bff6aa2e2abca5/comments", "author": {"login": "12101111", "id": 8438475, "node_id": "MDQ6VXNlcjg0Mzg0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/8438475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/12101111", "html_url": "https://github.com/12101111", "followers_url": "https://api.github.com/users/12101111/followers", "following_url": "https://api.github.com/users/12101111/following{/other_user}", "gists_url": "https://api.github.com/users/12101111/gists{/gist_id}", "starred_url": "https://api.github.com/users/12101111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/12101111/subscriptions", "organizations_url": "https://api.github.com/users/12101111/orgs", "repos_url": "https://api.github.com/users/12101111/repos", "events_url": "https://api.github.com/users/12101111/events{/privacy}", "received_events_url": "https://api.github.com/users/12101111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "12101111", "id": 8438475, "node_id": "MDQ6VXNlcjg0Mzg0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/8438475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/12101111", "html_url": "https://github.com/12101111", "followers_url": "https://api.github.com/users/12101111/followers", "following_url": "https://api.github.com/users/12101111/following{/other_user}", "gists_url": "https://api.github.com/users/12101111/gists{/gist_id}", "starred_url": "https://api.github.com/users/12101111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/12101111/subscriptions", "organizations_url": "https://api.github.com/users/12101111/orgs", "repos_url": "https://api.github.com/users/12101111/repos", "events_url": "https://api.github.com/users/12101111/events{/privacy}", "received_events_url": "https://api.github.com/users/12101111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28e85d7ae78b05f30ab9c2b2f51c2dd96858b4b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/28e85d7ae78b05f30ab9c2b2f51c2dd96858b4b2", "html_url": "https://github.com/rust-lang/rust/commit/28e85d7ae78b05f30ab9c2b2f51c2dd96858b4b2"}], "stats": {"total": 47, "additions": 21, "deletions": 26}, "files": [{"sha": "25d921b7cea4ce3e537b51a45ad231b06a8a158d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57e82878c0c18d920b5fb0df11bff6aa2e2abca5/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e82878c0c18d920b5fb0df11bff6aa2e2abca5/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=57e82878c0c18d920b5fb0df11bff6aa2e2abca5", "patch": "@@ -2396,9 +2396,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_lang_item(self, ty: Ty<'tcx>, item: lang_items::LangItem)  -> Ty<'tcx> {\n-        let def_id = self.require_lang_item(item, None);\n-        self.mk_generic_adt(def_id, ty)\n+    pub fn mk_lang_item(self, ty: Ty<'tcx>, item: lang_items::LangItem)  -> Option<Ty<'tcx>> {\n+        let def_id = self.lang_items().require(item).ok()?;\n+        Some(self.mk_generic_adt(def_id, ty))\n     }\n \n     #[inline]"}, {"sha": "56bd903040ab43548007350392a1dc2bb500e47d", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/57e82878c0c18d920b5fb0df11bff6aa2e2abca5/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e82878c0c18d920b5fb0df11bff6aa2e2abca5/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=57e82878c0c18d920b5fb0df11bff6aa2e2abca5", "patch": "@@ -813,18 +813,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         error: MethodError<'tcx>\n     ) {\n         let rcvr = &args[0];\n-        let try_alt_rcvr = |err: &mut DiagnosticBuilder<'_>, new_rcvr_t| {\n-            if let Ok(pick) = self.lookup_probe(\n-                span,\n-                segment.ident,\n-                new_rcvr_t,\n-                rcvr,\n-                probe::ProbeScope::AllTraits,\n-            ) {\n-                err.span_label(\n-                    pick.item.ident.span,\n-                    &format!(\"the method is available for `{}` here\", new_rcvr_t),\n-                );\n+        let try_alt_rcvr = |err: &mut DiagnosticBuilder<'_>, rcvr_t, lang_item| {\n+            if let Some(new_rcvr_t) = self.tcx.mk_lang_item(rcvr_t, lang_item) {\n+                if let Ok(pick) = self.lookup_probe(\n+                    span,\n+                    segment.ident,\n+                    new_rcvr_t,\n+                    rcvr,\n+                    probe::ProbeScope::AllTraits,\n+                ) {\n+                    err.span_label(\n+                        pick.item.ident.span,\n+                        &format!(\"the method is available for `{}` here\", new_rcvr_t),\n+                    );\n+                }\n             }\n         };\n \n@@ -840,17 +842,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Try alternative arbitrary self types that could fulfill this call.\n                 // FIXME: probe for all types that *could* be arbitrary self-types, not\n                 // just this whitelist.\n-                let box_rcvr_t = self.tcx.mk_box(rcvr_t);\n-                try_alt_rcvr(&mut err, box_rcvr_t);\n-                let pin_rcvr_t = self.tcx.mk_lang_item(\n-                    rcvr_t,\n-                    lang_items::PinTypeLangItem,\n-                );\n-                try_alt_rcvr(&mut err, pin_rcvr_t);\n-                let arc_rcvr_t = self.tcx.mk_lang_item(rcvr_t, lang_items::Arc);\n-                try_alt_rcvr(&mut err, arc_rcvr_t);\n-                let rc_rcvr_t = self.tcx.mk_lang_item(rcvr_t, lang_items::Rc);\n-                try_alt_rcvr(&mut err, rc_rcvr_t);\n+                try_alt_rcvr(&mut err, rcvr_t, lang_items::OwnedBoxLangItem);\n+                try_alt_rcvr(&mut err, rcvr_t, lang_items::PinTypeLangItem);\n+                try_alt_rcvr(&mut err, rcvr_t, lang_items::Arc);\n+                try_alt_rcvr(&mut err, rcvr_t, lang_items::Rc);\n             }\n             err.emit();\n         }"}]}