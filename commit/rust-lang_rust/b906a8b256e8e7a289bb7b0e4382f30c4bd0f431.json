{"sha": "b906a8b256e8e7a289bb7b0e4382f30c4bd0f431", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MDZhOGIyNTZlOGU3YTI4OWJiN2IwZTQzODJmMzBjNGJkMGY0MzE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-17T15:46:26Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-18T23:18:02Z"}, "message": "std::str: remove .as_mut_buf & rewrite/simplify `.push_char`.\n\n`.as_mut_buf` was used exactly once, in `.push_char` which could be\nwritten in a simpler way, using the `&mut ~[u8]` that it already\nretrieved. In the rare situation when someone really needs\n`.as_mut_buf`-like functionality (getting a `*mut u8`), they can go via\n`str::raw::as_owned_vec`.", "tree": {"sha": "2b05006e2479b7597f7fad5eba61e9904ec602cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b05006e2479b7597f7fad5eba61e9904ec602cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b906a8b256e8e7a289bb7b0e4382f30c4bd0f431", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b906a8b256e8e7a289bb7b0e4382f30c4bd0f431", "html_url": "https://github.com/rust-lang/rust/commit/b906a8b256e8e7a289bb7b0e4382f30c4bd0f431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b906a8b256e8e7a289bb7b0e4382f30c4bd0f431/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ac2aa523f03c386669f569bc89019deb0c0ecd", "url": "https://api.github.com/repos/rust-lang/rust/commits/17ac2aa523f03c386669f569bc89019deb0c0ecd", "html_url": "https://github.com/rust-lang/rust/commit/17ac2aa523f03c386669f569bc89019deb0c0ecd"}], "stats": {"total": 29, "additions": 6, "deletions": 23}, "files": [{"sha": "78a09d459def21359f4a41f01db95f1ede21f5af", "filename": "src/libstd/str.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b906a8b256e8e7a289bb7b0e4382f30c4bd0f431/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b906a8b256e8e7a289bb7b0e4382f30c4bd0f431/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b906a8b256e8e7a289bb7b0e4382f30c4bd0f431", "patch": "@@ -2555,14 +2555,6 @@ pub trait OwnedStr {\n     /// The buffer does not have a null terminator.\n     fn into_bytes(self) -> ~[u8];\n \n-    /// Work with the mutable byte buffer and length of a slice.\n-    ///\n-    /// The buffer does not have a null terminator.\n-    ///\n-    /// The caller must make sure any mutations to this buffer keep the string\n-    /// valid UTF-8!\n-    fn as_mut_buf<T>(&mut self, f: |*mut u8, uint| -> T) -> T;\n-\n     /// Sets the length of a string\n     ///\n     /// This will explicitly set the size of the string, without actually\n@@ -2591,16 +2583,15 @@ impl OwnedStr for ~str {\n         let cur_len = self.len();\n         // may use up to 4 bytes.\n         unsafe {\n-            raw::as_owned_vec(self).reserve_additional(4);\n+            let v = raw::as_owned_vec(self);\n+            v.reserve_additional(4);\n \n             // Attempt to not use an intermediate buffer by just pushing bytes\n             // directly onto this string.\n-            let used = self.as_mut_buf(|buf, _| {\n-                vec::raw::mut_buf_as_slice(buf.offset(cur_len as int), 4, |slc| {\n-                    c.encode_utf8(slc)\n-                })\n-            });\n-            self.set_len(cur_len + used);\n+            let write_ptr = v.as_mut_ptr().offset(cur_len as int);\n+            let used = vec::raw::mut_buf_as_slice(write_ptr, 4, |slc| c.encode_utf8(slc));\n+\n+            v.set_len(cur_len + used);\n         }\n     }\n \n@@ -2668,14 +2659,6 @@ impl OwnedStr for ~str {\n         unsafe { cast::transmute(self) }\n     }\n \n-    #[inline]\n-    fn as_mut_buf<T>(&mut self, f: |*mut u8, uint| -> T) -> T {\n-        unsafe {\n-            let v = raw::as_owned_vec(self);\n-            f(v.as_mut_ptr(), v.len())\n-        }\n-    }\n-\n     #[inline]\n     unsafe fn set_len(&mut self, new_len: uint) {\n         raw::as_owned_vec(self).set_len(new_len)"}]}