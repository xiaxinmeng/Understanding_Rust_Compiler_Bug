{"sha": "fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYTMzNzhlM2ZjZjI3OWExOTQwOWVmMzY4Y2U5YmQ1YjU3YmZkNjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-01-09T10:56:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-03-26T10:52:55Z"}, "message": "introduce `negative_impls` feature gate and document\n\nThey used to be covered by `optin_builtin_traits` but negative impls\nare now applicable to all traits, not just auto traits.\n\nThis also adds docs in the unstable book for the current state of auto traits.", "tree": {"sha": "7fb3ae6e92d79b4c068d1e6f0d1d2dc45de49733", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fb3ae6e92d79b4c068d1e6f0d1d2dc45de49733"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "html_url": "https://github.com/rust-lang/rust/commit/fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65071708f8fe72dd2103c6eace0eb6802a6acf03", "url": "https://api.github.com/repos/rust-lang/rust/commits/65071708f8fe72dd2103c6eace0eb6802a6acf03", "html_url": "https://github.com/rust-lang/rust/commit/65071708f8fe72dd2103c6eace0eb6802a6acf03"}], "stats": {"total": 441, "additions": 330, "deletions": 111}, "files": [{"sha": "3cf9351b6304bb8d8d53cff9eed1bdf7d573d7c8", "filename": "src/doc/unstable-book/src/language-features/negative-impls.md", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnegative-impls.md", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnegative-impls.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnegative-impls.md?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -0,0 +1,57 @@\n+# `negative_impls`\n+\n+The tracking issue for this feature is [#13231] \n+\n+[#13231]: https://github.com/rust-lang/rust/issues/13231\n+\n+----\n+\n+With the feature gate `negative_impls`, you can write negative impls as well as positive ones:\n+\n+```rust\n+#![feature(negative_impls)]\n+trait DerefMut { }\n+impl<T: ?Sized> !DerefMut for &T { }\n+```\n+\n+Negative impls indicate a semver guarantee that the given trait will not be implemented for the given types. Negative impls play an additional purpose for auto traits, described below.\n+\n+Negative impls have the following characteristics:\n+\n+* They do not have any items.\n+* They must obey the orphan rules as if they were a positive impl.\n+* They cannot \"overlap\" with any positive impls.\n+\n+## Semver interaction\n+\n+It is a breaking change to remove a negative impl. Negative impls are a commitment not to implement the given trait for the named types.\n+\n+## Orphan and overlap rules\n+\n+Negative impls must obey the same orphan rules as a positive impl. This implies you cannot add a negative impl for types defined in upstream crates and so forth.\n+\n+Similarly, negative impls cannot overlap with positive impls, again using the same \"overlap\" check that we ordinarily use to determine if two impls overlap. (Note that positive impls typically cannot overlap with one another either, except as permitted by specialization.)\n+\n+## Interaction with auto traits\n+\n+Declaring a negative impl `impl !SomeAutoTrait for SomeType` for an\n+auto-trait serves two purposes:\n+\n+* as with any trait, it declares that `SomeType` will never implement `SomeAutoTrait`;\n+* it disables the automatic `SomeType: SomeAutoTrait` impl that would otherwise have been generated.\n+\n+Note that, at present, there is no way to indicate that a given type\n+does not implement an auto trait *but that it may do so in the\n+future*. For ordinary types, this is done by simply not declaring any\n+impl at all, but that is not an option for auto traits. A workaround\n+is that one could embed a marker type as one of the fields, where the\n+marker type is `!AutoTrait`.\n+\n+## Immediate uses\n+\n+Negative impls are used to declare that `&T: !DerefMut`  and `&mut T: !Clone`, as required to fix the soundness of `Pin` described in [#66544](https://github.com/rust-lang/rust/issues/66544).\n+\n+This serves two purposes:\n+\n+* For proving the correctness of unsafe code, we can use that impl as evidence that no `DerefMut` or `Clone` impl exists.\n+* It prevents downstream crates from creating such impls."}, {"sha": "6f0f0cfd33e4dad6f788336f392be53259a22e61", "filename": "src/doc/unstable-book/src/language-features/optin-builtin-traits.md", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Foptin-builtin-traits.md?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -10,7 +10,8 @@ The `optin_builtin_traits` feature gate allows you to define auto traits.\n \n Auto traits, like [`Send`] or [`Sync`] in the standard library, are marker traits\n that are automatically implemented for every type, unless the type, or a type it contains, \n-has explicitly opted out via a negative impl. \n+has explicitly opted out via a negative impl. (Negative impls are separately controlled\n+by the `negative_impls` feature.)\n \n [`Send`]: https://doc.rust-lang.org/std/marker/trait.Send.html\n [`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n@@ -22,6 +23,7 @@ impl !Trait for Type\n Example:\n \n ```rust\n+#![feature(negative_impls)]\n #![feature(optin_builtin_traits)]\n \n auto trait Valid {}\n@@ -43,3 +45,63 @@ fn main() {\n     // must_be_valid( MaybeValid(False) );\n }\n ```\n+\n+## Automatic trait implementations\n+\n+When a type is declared as an `auto trait`, we will automatically\n+create impls for every struct/enum/union, unless an explicit impl is\n+provided. These automatic impls contain a where clause for each field\n+of the form `T: AutoTrait`, where `T` is the type of the field and\n+`AutoTrait` is the auto trait in question. As an example, consider the\n+struct `List` and the auto trait `Send`:\n+\n+```rust\n+struct List<T> {\n+  data: T,\n+  next: Option<Box<List<T>>>,\n+}\n+```\n+\n+Presuming that there is no explicit impl of `Send` for `List`, the\n+compiler will supply an automatic impl of the form:\n+\n+```rust\n+struct List<T> {\n+  data: T,\n+  next: Option<Box<List<T>>>,\n+}\n+\n+unsafe impl<T> Send for List<T>\n+where\n+  T: Send, // from the field `data`\n+  Option<Box<List<T>>>: Send, // from the field `next`\n+{ }\n+```\n+\n+Explicit impls may be either positive or negative. They take the form:\n+\n+```rust,ignore\n+impl<...> AutoTrait for StructName<..> { }\n+impl<...> !AutoTrait for StructName<..> { }\n+```\n+\n+## Coinduction: Auto traits permit cyclic matching\n+\n+Unlike ordinary trait matching, auto traits are **coinductive**. This\n+means, in short, that cycles which occur in trait matching are\n+considered ok. As an example, consider the recursive struct `List`\n+introduced in the previous section. In attempting to determine whether\n+`List: Send`, we would wind up in a cycle: to apply the impl, we must\n+show that `Option<Box<List>>: Send`, which will in turn require\n+`Box<List>: Send` and then finally `List: Send` again. Under ordinary\n+trait matching, this cycle would be an error, but for an auto trait it\n+is considered a successful match.\n+\n+## Items\n+\n+Auto traits cannot have any trait items, such as methods or associated types. This ensures that we can generate default implementations.\n+\n+## Supertraits\n+\n+Auto traits cannot have supertraits. This is for soundness reasons, as the interaction of coinduction with implied bounds is difficult to reconcile.\n+"}, {"sha": "5857b79d5eeebae5123fc30c362d489a6293afca", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -99,6 +99,7 @@\n #![feature(internal_uninit_const)]\n #![feature(lang_items)]\n #![feature(libc)]\n+#![cfg_attr(not(bootstrap), feature(negative_impls))]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n #![feature(pattern)]"}, {"sha": "0bee16f98bd5e742e1bc703d40ad4148437aa996", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -98,6 +98,7 @@\n #![feature(is_sorted)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n+#![cfg_attr(not(bootstrap), feature(negative_impls))]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(exhaustive_patterns)]"}, {"sha": "a975ce93bb1a3f966199a568e5631869f8827437", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -24,6 +24,7 @@\n #![feature(decl_macro)]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n+#![cfg_attr(not(bootstrap), feature(negative_impls))]\n #![feature(optin_builtin_traits)]\n #![feature(rustc_attrs)]\n #![cfg_attr(bootstrap, feature(specialization))]"}, {"sha": "a0d7b064d0ccf7b51ec019678f2fb4e25ce27153", "filename": "src/librustc_ast_passes/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibrustc_ast_passes%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Ffeature_gate.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -286,8 +286,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                         start,\n                         i.span,\n                         \"`#[start]` functions are experimental \\\n-                                       and their signature may change \\\n-                                       over time\"\n+                         and their signature may change \\\n+                         over time\"\n                     );\n                 }\n                 if attr::contains_name(&i.attrs[..], sym::main) {\n@@ -296,8 +296,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                         main,\n                         i.span,\n                         \"declaration of a non-standard `#[main]` \\\n-                                        function may change over time, for now \\\n-                                        a top-level `fn main()` is required\"\n+                         function may change over time, for now \\\n+                         a top-level `fn main()` is required\"\n                     );\n                 }\n             }\n@@ -341,7 +341,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 if let ast::ImplPolarity::Negative(span) = polarity {\n                     gate_feature_post!(\n                         &self,\n-                        optin_builtin_traits,\n+                        negative_impls,\n                         span.to(of_trait.as_ref().map(|t| t.path.span).unwrap_or(span)),\n                         \"negative trait bounds are not yet fully implemented; \\\n                          use marker types for now\""}, {"sha": "6157c46f80cf9dfc4d59179e4622d15957bfe5ed", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -802,13 +802,13 @@ impl HandlerInner {\n                     ));\n                     self.failure(&format!(\n                         \"For more information about an error, try \\\n-                                           `rustc --explain {}`.\",\n+                         `rustc --explain {}`.\",\n                         &error_codes[0]\n                     ));\n                 } else {\n                     self.failure(&format!(\n                         \"For more information about this error, try \\\n-                                           `rustc --explain {}`.\",\n+                         `rustc --explain {}`.\",\n                         &error_codes[0]\n                     ));\n                 }"}, {"sha": "293f86d459749b40b5b2fe03afa7440164c7329c", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -152,6 +152,9 @@ declare_features! (\n     /// Allows features specific to OIBIT (auto traits).\n     (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n \n+    /// Allow negative trait implementations.\n+    (active, negative_impls, \"1.0.0\", Some(13231), None),\n+\n     /// Allows using `box` in patterns (RFC 469).\n     (active, box_patterns, \"1.0.0\", Some(29641), None),\n "}, {"sha": "7a1aea15753b3150f467076488976c0a80f000ce", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 36, "deletions": 7, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -9,6 +9,7 @@\n #![feature(const_if_match)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n+#![cfg_attr(not(bootstrap), feature(negative_impls))]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]\n #![feature(specialization)]\n@@ -305,7 +306,11 @@ impl Span {\n \n     /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n     pub fn substitute_dummy(self, other: Span) -> Span {\n-        if self.is_dummy() { other } else { self }\n+        if self.is_dummy() {\n+            other\n+        } else {\n+            self\n+        }\n     }\n \n     /// Returns `true` if `self` fully encloses `other`.\n@@ -336,21 +341,33 @@ impl Span {\n     pub fn trim_start(self, other: Span) -> Option<Span> {\n         let span = self.data();\n         let other = other.data();\n-        if span.hi > other.hi { Some(span.with_lo(cmp::max(span.lo, other.hi))) } else { None }\n+        if span.hi > other.hi {\n+            Some(span.with_lo(cmp::max(span.lo, other.hi)))\n+        } else {\n+            None\n+        }\n     }\n \n     /// Returns the source span -- this is either the supplied span, or the span for\n     /// the macro callsite that expanded to it.\n     pub fn source_callsite(self) -> Span {\n         let expn_data = self.ctxt().outer_expn_data();\n-        if !expn_data.is_root() { expn_data.call_site.source_callsite() } else { self }\n+        if !expn_data.is_root() {\n+            expn_data.call_site.source_callsite()\n+        } else {\n+            self\n+        }\n     }\n \n     /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,\n     /// if any.\n     pub fn parent(self) -> Option<Span> {\n         let expn_data = self.ctxt().outer_expn_data();\n-        if !expn_data.is_root() { Some(expn_data.call_site) } else { None }\n+        if !expn_data.is_root() {\n+            Some(expn_data.call_site)\n+        } else {\n+            None\n+        }\n     }\n \n     /// Edition of the crate from which this span came.\n@@ -376,10 +393,18 @@ impl Span {\n     pub fn source_callee(self) -> Option<ExpnData> {\n         fn source_callee(expn_data: ExpnData) -> ExpnData {\n             let next_expn_data = expn_data.call_site.ctxt().outer_expn_data();\n-            if !next_expn_data.is_root() { source_callee(next_expn_data) } else { expn_data }\n+            if !next_expn_data.is_root() {\n+                source_callee(next_expn_data)\n+            } else {\n+                expn_data\n+            }\n         }\n         let expn_data = self.ctxt().outer_expn_data();\n-        if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }\n+        if !expn_data.is_root() {\n+            Some(source_callee(expn_data))\n+        } else {\n+            None\n+        }\n     }\n \n     /// Checks if a span is \"internal\" to a macro in which `#[unstable]`\n@@ -1199,7 +1224,11 @@ impl SourceFile {\n \n         let line_index = lookup_line(&self.lines[..], pos);\n         assert!(line_index < self.lines.len() as isize);\n-        if line_index >= 0 { Some(line_index as usize) } else { None }\n+        if line_index >= 0 {\n+            Some(line_index as usize)\n+        } else {\n+            None\n+        }\n     }\n \n     pub fn line_bounds(&self, line_index: usize) -> (BytePos, BytePos) {"}, {"sha": "bb41629ef094d16e51ebe9758ac292b2df6fa155", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -473,6 +473,7 @@ symbols! {\n         needs_drop,\n         needs_panic_runtime,\n         negate_unsigned,\n+        negative_impls,\n         never,\n         never_type,\n         never_type_fallback,"}, {"sha": "d41105270549e898b7057a04e548eb352e6ce3ac", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -278,6 +278,7 @@\n #![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]\n #![feature(needs_panic_runtime)]\n+#![cfg_attr(not(bootstrap), feature(negative_impls))]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]"}, {"sha": "df1a7946afb119c3cf89fac4bcbd8322d907ce90", "filename": "src/test/pretty/trait-polarity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fpretty%2Ftrait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fpretty%2Ftrait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Ftrait-polarity.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // pp-exact\n "}, {"sha": "665aa38b11ebac0562081b386ac13ebea3846041", "filename": "src/test/rustdoc/empty-section.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Frustdoc%2Fempty-section.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Frustdoc%2Fempty-section.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-section.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n pub struct Foo;\n "}, {"sha": "a68db9c70ad2daa6eec4d6ccf1818f4b0941bd89", "filename": "src/test/rustdoc/impl-parts-crosscrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,7 +1,7 @@\n // aux-build:rustdoc-impl-parts-crosscrate.rs\n // ignore-cross-compile\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n extern crate rustdoc_impl_parts_crosscrate;\n "}, {"sha": "68baca9a04e9aaed63e472caaaa9b62b60967f25", "filename": "src/test/rustdoc/impl-parts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,3 +1,4 @@\n+#![feature(negative_impls)]\n #![feature(optin_builtin_traits)]\n \n pub auto trait AnOibit {}"}, {"sha": "8c001db06c5bf40406ddcbcb619459993d9fe54e", "filename": "src/test/rustdoc/issue-55321.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Frustdoc%2Fissue-55321.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-55321.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // @has issue_55321/struct.A.html\n // @has - '//*[@id=\"implementations-list\"]/*[@class=\"impl\"]//code' \"impl !Send for A\""}, {"sha": "cb46d1778d9243257b7fcbc9fff13a3c051f3fdf", "filename": "src/test/rustdoc/negative-impl-sidebar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl-sidebar.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![crate_name = \"foo\"]\n \n pub struct Foo;"}, {"sha": "d76aac6906c46d3cac0fc85f1456f9226cbe5a7c", "filename": "src/test/rustdoc/negative-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Frustdoc%2Fnegative-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Frustdoc%2Fnegative-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fnegative-impl.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // @matches negative_impl/struct.Alpha.html '//pre' \"pub struct Alpha\"\n pub struct Alpha;"}, {"sha": "af83f14bbda5d6b4b34522a264a1b16c19820bda", "filename": "src/test/ui/async-await/issue-64130-1-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n // edition:2018\n \n // This tests the the specialized async-await-specific error when futures don't implement an"}, {"sha": "2362831d8b8f6c25042587538efdf0852fd76551", "filename": "src/test/ui/async-await/issue-64130-2-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n // edition:2018\n \n // This tests the the specialized async-await-specific error when futures don't implement an"}, {"sha": "b819970d59d50d07e10885179dc2c30bccc9b45b", "filename": "src/test/ui/async-await/issue-64130-3-other.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n // edition:2018\n \n // This tests the the unspecialized async-await-specific error when futures don't implement an"}, {"sha": "6456e7abd745dc67cbd805eedc2e74b6cef15c65", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl std::future::Future`\n-  --> $DIR/issue-64130-3-other.rs:23:5\n+  --> $DIR/issue-64130-3-other.rs:24:5\n    |\n LL | fn is_qux<T: Qux>(t: T) { }\n    |    ------    --- required by this bound in `is_qux`\n@@ -13,7 +13,7 @@ LL |     is_qux(bar());\n    = help: the following implementations were found:\n              <Foo as Qux>\n note: future does not implement `Qux` as this value is used across an await\n-  --> $DIR/issue-64130-3-other.rs:17:5\n+  --> $DIR/issue-64130-3-other.rs:18:5\n    |\n LL |     let x = Foo;\n    |         - has type `Foo`"}, {"sha": "7753e2eceb543774d69feeca6981d26d22d8c9ef", "filename": "src/test/ui/codemap_tests/empty_span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n fn main() {\n     struct Foo;\n "}, {"sha": "24b878927530c3727ff831f88a37a16272516b98", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![feature(marker_trait_attr)]\n \n #[marker]"}, {"sha": "4115ba34e17b2fca9f504336b254eeba2014dd6f", "filename": "src/test/ui/coherence/coherence-default-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait MySafeTrait {}\n "}, {"sha": "b08ccb087d91c0a9c137b73f333858dfa15c9e28", "filename": "src/test/ui/coherence/coherence-default-trait-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-default-trait-impl.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,11 +1,11 @@\n error[E0199]: implementing the trait `MySafeTrait` is not unsafe\n-  --> $DIR/coherence-default-trait-impl.rs:7:1\n+  --> $DIR/coherence-default-trait-impl.rs:8:1\n    |\n LL | unsafe impl MySafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0200]: the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n-  --> $DIR/coherence-default-trait-impl.rs:12:1\n+  --> $DIR/coherence-default-trait-impl.rs:13:1\n    |\n LL | impl MyUnsafeTrait for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a9c8d20a79d75f59fe79d2a75de34f5bc642bbe9", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // Test for issue #56934 - that it is impossible to redundantly\n // implement an auto-trait for a trait object type that contains it."}, {"sha": "23db5328a728b87d9bc101b9124e46780aa7f4da", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,17 +1,17 @@\n error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:14:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:15:1\n    |\n LL | impl !Marker1 for dyn Object + Marker2 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n \n error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:16:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:17:1\n    |\n LL | impl !Marker2 for dyn Object + Marker2 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:22:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:23:1\n    |\n LL | impl !Send for dyn Marker2 {}\n    | ^^^^^^^^^^^^^^^-----------\n@@ -22,13 +22,13 @@ LL | impl !Send for dyn Marker2 {}\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:26:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:27:1\n    |\n LL | impl !Send for dyn Object {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:27:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:28:1\n    |\n LL | impl !Send for dyn Object + Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type"}, {"sha": "c565f9c83e89ef3e575b499c178a634d06cfacee", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // Test for issue #56934 - that it is impossible to redundantly\n // implement an auto-trait for a trait object type that contains it."}, {"sha": "141ab7771f325501a202316aa121f3451684d36d", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,17 +1,17 @@\n error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:14:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:15:1\n    |\n LL | impl Marker1 for dyn Object + Marker2 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n \n error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:16:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:17:1\n    |\n LL | impl Marker2 for dyn Object + Marker2 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:22:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:23:1\n    |\n LL | unsafe impl Send for dyn Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^-----------\n@@ -22,13 +22,13 @@ LL | unsafe impl Send for dyn Marker2 {}\n    = note: define and implement a trait or new type instead\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:26:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:27:1\n    |\n LL | unsafe impl Send for dyn Object {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n-  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:27:1\n+  --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:28:1\n    |\n LL | unsafe impl Send for dyn Object + Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type"}, {"sha": "a86ca0e5eacdc00df8a8c49583020017fa94e7a9", "filename": "src/test/ui/coherence/coherence-impls-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-copy.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Copy;\n "}, {"sha": "e00cb9a7c5b5104e4d6dd71ad5f17b346ff3a348", "filename": "src/test/ui/coherence/coherence-impls-send.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-send.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,9 +1,9 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Copy;\n \n enum TestE {\n-  A\n+    A,\n }\n \n struct MyType;\n@@ -26,5 +26,4 @@ unsafe impl Send for &'static [NotSync] {}\n //~^ ERROR conflicting implementations of trait\n //~| ERROR only traits defined in the current crate\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "231b96ad42efb7a40dc6c29931843cc484815587", "filename": "src/test/ui/coherence/coherence-impls-sized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impls-sized.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Copy;\n "}, {"sha": "b87e162aca0963f2b0eca3dafb5359591954f1b7", "filename": "src/test/ui/coherence/coherence-negative-impls-safe-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe-rpass.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n "}, {"sha": "4821aa6b5ad3d22df7cda92e30955d487f8a7013", "filename": "src/test/ui/coherence/coherence-negative-impls-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-negative-impls-safe.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n "}, {"sha": "3beac04c7e8291d43fa4e48f8710043f07381b01", "filename": "src/test/ui/coherence/coherence-orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n // aux-build:coherence_orphan_lib.rs\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n extern crate coherence_orphan_lib as lib;\n "}, {"sha": "041bbe8fdcf6920359867157ca5826a42961d334", "filename": "src/test/ui/error-codes/E0198.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ferror-codes%2FE0198.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ferror-codes%2FE0198.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0198.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n struct Foo;\n "}, {"sha": "2421bf0a55f6595016002034af2001396969bec5", "filename": "src/test/ui/error-codes/E0199.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ferror-codes%2FE0199.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ferror-codes%2FE0199.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0199.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n struct Foo;\n "}, {"sha": "683fd6db6f29d58a5e527310c42585097ff9ff50", "filename": "src/test/ui/feature-gate-negative_impls.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ffeature-gate-negative_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ffeature-gate-negative_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-negative_impls.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -0,0 +1,3 @@\n+trait MyTrait {}\n+impl !MyTrait for u32 {} //~ ERROR negative trait bounds are not yet fully implemented\n+fn main() {}"}, {"sha": "922048996bd1000543080d9a977167dbb771e641", "filename": "src/test/ui/feature-gate-negative_impls.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ffeature-gate-negative_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ffeature-gate-negative_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-negative_impls.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: negative trait bounds are not yet fully implemented; use marker types for now\n+  --> $DIR/feature-gate-negative_impls.rs:2:6\n+   |\n+LL | impl !MyTrait for u32 {}\n+   |      ^^^^^^^^\n+   |\n+   = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n+   = help: add `#![feature(negative_impls)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "e9090b78c78a1bbb6654368523ee3f12773292fb", "filename": "src/test/ui/feature-gates/feature-gate-optin-builtin-traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-optin-builtin-traits.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -14,7 +14,7 @@ LL | impl !AutoDummyTrait for DummyStruct {}\n    |      ^^^^^^^^^^^^^^^\n    |\n    = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n-   = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable\n+   = help: add `#![feature(negative_impls)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "794369a8dc02b7ab6d02ebfb1da665ea0fc76de2", "filename": "src/test/ui/generator/auto-trait-regions.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:45:24\n+  --> $DIR/auto-trait-regions.rs:46:24\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                        ^^^^                - temporary value is freed at the end of this statement\n@@ -12,7 +12,7 @@ LL |         assert_foo(a);\n    = note: consider using a `let` binding to create a longer lived value\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:45:35\n+  --> $DIR/auto-trait-regions.rs:46:35\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                                   ^^^^     - temporary value is freed at the end of this statement\n@@ -25,13 +25,13 @@ LL |         assert_foo(a);\n    = note: consider using a `let` binding to create a longer lived value\n \n error: higher-ranked subtype error\n-  --> $DIR/auto-trait-regions.rs:30:5\n+  --> $DIR/auto-trait-regions.rs:31:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^\n \n error: higher-ranked subtype error\n-  --> $DIR/auto-trait-regions.rs:49:5\n+  --> $DIR/auto-trait-regions.rs:50:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^"}, {"sha": "1e77d8058a72b6ec9576871e8eaa1700ed4f0796", "filename": "src/test/ui/generator/auto-trait-regions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,6 @@\n #![feature(generators)]\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait Foo {}\n "}, {"sha": "5ec462e10465f8c3f2205bb0f75caa9e1dd10378", "filename": "src/test/ui/generator/auto-trait-regions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:30:5\n+  --> $DIR/auto-trait-regions.rs:31:5\n    |\n LL | auto trait Foo {}\n    | ----------------- trait `Foo` defined here\n@@ -11,7 +11,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:30:5\n+  --> $DIR/auto-trait-regions.rs:31:5\n    |\n LL | auto trait Foo {}\n    | ----------------- trait `Foo` defined here\n@@ -23,7 +23,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'1 OnlyFooIfStaticRef`, for some specific lifetime `'1`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:49:5\n+  --> $DIR/auto-trait-regions.rs:50:5\n    |\n LL | auto trait Foo {}\n    | ----------------- trait `Foo` defined here\n@@ -35,7 +35,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:49:5\n+  --> $DIR/auto-trait-regions.rs:50:5\n    |\n LL | auto trait Foo {}\n    | ----------------- trait `Foo` defined here"}, {"sha": "6f278d76bb18b7a1fc6849f872ef298c27252bb8", "filename": "src/test/ui/issues/issue-17718-static-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-sync.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Sync;\n "}, {"sha": "7f6b9e3fba79fc1703d571295d205bb1aa4d86af", "filename": "src/test/ui/issues/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,6 +1,7 @@\n //~ ERROR\n \n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n unsafe auto trait Trait {\n     type Output; //~ ERROR E0380"}, {"sha": "48ce09aaa34dab455295b3a818e6c39a5c8199f0", "filename": "src/test/ui/issues/issue-23080-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080-2.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080-2.rs:6:10\n+  --> $DIR/issue-23080-2.rs:7:10\n    |\n LL | unsafe auto trait Trait {\n    |                   ----- auto trait cannot have items"}, {"sha": "035db82ba5de0df26ec58513fda41d04993525f8", "filename": "src/test/ui/issues/issue-23080.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n unsafe auto trait Trait {\n     fn method(&self) { //~ ERROR E0380"}, {"sha": "73ecb1c362e1767941666d9f25c736271f4b915b", "filename": "src/test/ui/issues/issue-23080.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23080.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n error[E0380]: auto traits cannot have methods or associated items\n-  --> $DIR/issue-23080.rs:4:8\n+  --> $DIR/issue-23080.rs:5:8\n    |\n LL | unsafe auto trait Trait {\n    |                   ----- auto trait cannot have items"}, {"sha": "035f904b15bb34a571d1afc0a394369531201c5c", "filename": "src/test/ui/issues/issue-29516.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-29516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-29516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29516.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,6 @@\n // check-pass\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait NotSame {}\n "}, {"sha": "5984a256a3086a7823c3049db56b03b938590872", "filename": "src/test/ui/issues/issue-33140-hack-boundaries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33140-hack-boundaries.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![allow(order_dependent_trait_objects)]\n \n // Check that the issue #33140 hack does not allow unintended things."}, {"sha": "502859c041353cf37afb813090a19f68fe87c8a0", "filename": "src/test/ui/mut/mutable-enum-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,7 +1,7 @@\n // Tests that an `&` pointer to something inherently mutable is itself\n // to be considered mutable.\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Sync;\n "}, {"sha": "84c8db4053e4f76dc892ac6e01af6cfeef047e94", "filename": "src/test/ui/never_type/auto-traits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fnever_type%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fnever_type%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fauto-traits.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n \n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![feature(never_type)]\n \n fn main() {"}, {"sha": "bd560649b990e8b5e8dd3857fb5ba24925c0aef7", "filename": "src/test/ui/no_send-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fno_send-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fno_send-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-enum.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n "}, {"sha": "75a363f9f763907a46559d9f11329ebdec175921", "filename": "src/test/ui/no_send-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fno_send-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fno_send-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-struct.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n "}, {"sha": "44bf1913e7aac4a696f592972ae2c0cfd3fbd7d7", "filename": "src/test/ui/no_share-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fno_share-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fno_share-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-enum.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Sync;\n "}, {"sha": "7d8a36a76f274ed74fc877c351e476fc7e0afcb7", "filename": "src/test/ui/no_share-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fno_share-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fno_share-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-struct.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Sync;\n "}, {"sha": "0a2836d691f5f03154e7199ce16e5e99b5ecebe3", "filename": "src/test/ui/parser/trait-object-bad-parens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![allow(bare_trait_objects)]\n \n auto trait Auto {}"}, {"sha": "74e484eebee1fba6157ff8c06648c6a1df2ac8e9", "filename": "src/test/ui/parser/trait-object-bad-parens.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-bad-parens.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,23 +1,23 @@\n error[E0178]: expected a path on the left-hand side of `+`, not `((Auto))`\n-  --> $DIR/trait-object-bad-parens.rs:7:16\n+  --> $DIR/trait-object-bad-parens.rs:8:16\n    |\n LL |     let _: Box<((Auto)) + Auto>;\n    |                ^^^^^^^^^^^^^^^ expected a path\n \n error[E0178]: expected a path on the left-hand side of `+`, not `(Auto + Auto)`\n-  --> $DIR/trait-object-bad-parens.rs:9:16\n+  --> $DIR/trait-object-bad-parens.rs:10:16\n    |\n LL |     let _: Box<(Auto + Auto) + Auto>;\n    |                ^^^^^^^^^^^^^^^^^^^^ expected a path\n \n error[E0178]: expected a path on the left-hand side of `+`, not `(Auto)`\n-  --> $DIR/trait-object-bad-parens.rs:11:16\n+  --> $DIR/trait-object-bad-parens.rs:12:16\n    |\n LL |     let _: Box<(Auto +) + Auto>;\n    |                ^^^^^^^^^^^^^^^ expected a path\n \n error[E0178]: expected a path on the left-hand side of `+`, not `(dyn Auto)`\n-  --> $DIR/trait-object-bad-parens.rs:13:16\n+  --> $DIR/trait-object-bad-parens.rs:14:16\n    |\n LL |     let _: Box<(dyn Auto) + Auto>;\n    |                ^^^^^^^^^^^^^^^^^ expected a path"}, {"sha": "8bbf1ab5d1f30d68e5690f40b8aea03176317b07", "filename": "src/test/ui/privacy/privacy-sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-sanity.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n pub trait Tr {\n     fn f();"}, {"sha": "cd3d609ca3ea6bd6816f2eacd890724adbb40b20", "filename": "src/test/ui/privacy/private-in-public-non-principal-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n #[allow(private_in_public)]\n mod m {"}, {"sha": "7850694aab2078088a7f7840a1716da6730df80c", "filename": "src/test/ui/privacy/private-in-public-non-principal-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n error: trait `m::PrivNonPrincipal` is private\n-  --> $DIR/private-in-public-non-principal-2.rs:11:5\n+  --> $DIR/private-in-public-non-principal-2.rs:12:5\n    |\n LL |     m::leak_dyn_nonprincipal();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ private trait"}, {"sha": "aa946f5c0ac05aa5b3707cc0156c2000382a9976", "filename": "src/test/ui/privacy/private-in-public-non-principal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n pub trait PubPrincipal {}\n auto trait PrivNonPrincipal {}"}, {"sha": "05131135d490f3a89d9a007730592d5ea0c333b1", "filename": "src/test/ui/privacy/private-in-public-non-principal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n warning: private trait `PrivNonPrincipal` in public interface (error E0445)\n-  --> $DIR/private-in-public-non-principal.rs:6:1\n+  --> $DIR/private-in-public-non-principal.rs:7:1\n    |\n LL | pub fn leak_dyn_nonprincipal() -> Box<dyn PubPrincipal + PrivNonPrincipal> { loop {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ LL |         pub fn check_doc_lint() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/private-in-public-non-principal.rs:10:8\n+  --> $DIR/private-in-public-non-principal.rs:11:8\n    |\n LL | #[deny(missing_docs)]\n    |        ^^^^^^^^^^^^"}, {"sha": "8134333c58f7305bc366d7dd83ed1ae9d78a4ebc", "filename": "src/test/ui/specialization/defaultimpl/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![feature(specialization)]\n \n struct S;"}, {"sha": "dff2b28bf003c5f600f4ea40f42a0ec47d88005c", "filename": "src/test/ui/specialization/specialization-overlap-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-overlap-negative.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![feature(specialization)]\n \n trait MyTrait {}"}, {"sha": "4a733fb3c497ea03f5add6a41f4cf7186fd50796", "filename": "src/test/ui/specialization/specialization-polarity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,6 +1,7 @@\n // Make sure specialization cannot change impl polarity\n \n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![feature(specialization)]\n \n auto trait Foo {}"}, {"sha": "30655d87d55000d08f8207028c2438b3f84892ee", "filename": "src/test/ui/specialization/specialization-polarity.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-polarity.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,13 +1,13 @@\n error[E0748]: found both positive and negative implementation of trait `Foo` for type `u8`:\n-  --> $DIR/specialization-polarity.rs:9:1\n+  --> $DIR/specialization-polarity.rs:10:1\n    |\n LL | impl<T> Foo for T {}\n    | ----------------- positive implementation here\n LL | impl !Foo for u8 {}\n    | ^^^^^^^^^^^^^^^^ negative implementation here\n \n error[E0748]: found both positive and negative implementation of trait `Bar` for type `u8`:\n-  --> $DIR/specialization-polarity.rs:14:1\n+  --> $DIR/specialization-polarity.rs:15:1\n    |\n LL | impl<T> !Bar for T {}\n    | ------------------ negative implementation here"}, {"sha": "1c37106f13db0445a329ae658cf9c7cec814fef8", "filename": "src/test/ui/syntax-trait-polarity-feature-gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity-feature-gate.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -5,7 +5,7 @@ LL | impl !Send for TestType {}\n    |      ^^^^^\n    |\n    = note: see issue #13231 <https://github.com/rust-lang/rust/issues/13231> for more information\n-   = help: add `#![feature(optin_builtin_traits)]` to the crate attributes to enable\n+   = help: add `#![feature(negative_impls)]` to the crate attributes to enable\n \n error: aborting due to previous error\n "}, {"sha": "ed2947493b02c528d86bd43734b5433169211987", "filename": "src/test/ui/syntax-trait-polarity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fsyntax-trait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Fsyntax-trait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n "}, {"sha": "15fdddc5f3f5c3b779de91a6e2df28ade5d9bee8", "filename": "src/test/ui/traits/auto-traits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fauto-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fauto-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fauto-traits.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,6 +1,7 @@\n // run-pass\n #![allow(unused_doc_comments)]\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait Auto {}\n unsafe auto trait AutoUnsafe {}"}, {"sha": "681f26438e69500be9f375070a3c48a91cacf8e5", "filename": "src/test/ui/traits/negative-impls/auxiliary/foreign_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,6 +1,6 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n-pub trait ForeignTrait { }\n+pub trait ForeignTrait {}\n \n-impl ForeignTrait for u32 { }\n+impl ForeignTrait for u32 {}\n impl !ForeignTrait for String {}"}, {"sha": "4bdad5dc591c57a87c2d4cd5433c6d3409f473e9", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -3,7 +3,7 @@\n // errors are not reported. This way, we make sure that, for each function, different\n // typeck phases are involved and all errors are reported.\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n "}, {"sha": "010dbf24664037008911504a4e58bd171bc86e43", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-rpass.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(unused_variables)]\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::marker::Send;\n "}, {"sha": "2d50bc83ec304f2a1847298744ca511f5f462bf3", "filename": "src/test/ui/traits/negative-impls/negative-default-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![feature(specialization)]\n \n trait MyTrait {"}, {"sha": "043273e624189115383d23d15a87e76639111188", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n #![feature(specialization)]\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // Negative impl for u32 cannot \"specialize\" the base impl.\n trait MyTrait {"}, {"sha": "ac0fac10eef50a532155d378e84cf1cdf8420fb0", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n #![feature(specialization)]\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // Negative impl for u32 cannot \"specialize\" the base impl.\n trait MyTrait {}"}, {"sha": "5fc6be9b300079fb9737d0d0518677a00b5fe36e", "filename": "src/test/ui/traits/negative-impls/no-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n trait MyTrait {\n     type Foo;"}, {"sha": "eac4c24d5d3d0f8a0fb84c4c9175e91a2e5069ee", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n #![feature(specialization)]\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n trait MyTrait {}\n "}, {"sha": "db72aaf18034f3a6ec177f7f1cd52c8ff85255a7", "filename": "src/test/ui/traits/negative-impls/rely-on-negative-impl-in-coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // aux-build: foreign_trait.rs\n "}, {"sha": "e326d3ab3f3cb705a0834a756346288cb28b93ce", "filename": "src/test/ui/traits/negative-impls/typeck-negative-impls-builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Ftypeck-negative-impls-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Ftypeck-negative-impls-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Ftypeck-negative-impls-builtin.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n #![allow(dead_code)]\n \n struct TestType;"}, {"sha": "4106f56d64ac6c36672083611abe0b04e72c7ed9", "filename": "src/test/ui/traits/overlap-not-permitted-for-builtin-trait.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foverlap-not-permitted-for-builtin-trait.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,11 +1,10 @@\n #![allow(dead_code)]\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n // Overlapping negative impls for `MyStruct` are not permitted:\n struct MyStruct;\n impl !Send for MyStruct {}\n impl !Send for MyStruct {}\n //~^ ERROR conflicting implementations of trait\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "00823d13b3696be2360c9a2d931c4f0277b48ced", "filename": "src/test/ui/traits/overlap-permitted-for-marker-traits.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Foverlap-permitted-for-marker-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Foverlap-permitted-for-marker-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Foverlap-permitted-for-marker-traits.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -0,0 +1,28 @@\n+// run-pass\n+// Tests for RFC 1268: we allow overlapping impls of marker traits,\n+// that is, traits without items. In this case, a type `T` is\n+// `MyMarker` if it is either `Debug` or `Display`.\n+\n+#![feature(marker_trait_attr)]\n+#![feature(negative_impls)]\n+\n+use std::fmt::{Debug, Display};\n+\n+#[marker]\n+trait MyMarker {}\n+\n+impl<T: Debug> MyMarker for T {}\n+impl<T: Display> MyMarker for T {}\n+\n+fn foo<T: MyMarker>(t: T) -> T {\n+    t\n+}\n+\n+fn main() {\n+    // Debug && Display:\n+    assert_eq!(1, foo(1));\n+    assert_eq!(2.0, foo(2.0));\n+\n+    // Debug && !Display:\n+    assert_eq!(vec![1], foo(vec![1]));\n+}"}, {"sha": "c809f9e89f934688b1f38ae5791eaf5280437859", "filename": "src/test/ui/traits/syntax-trait-polarity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fsyntax-trait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Fsyntax-trait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsyntax-trait-polarity.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n struct TestType;\n "}, {"sha": "571f934fc5bc720d74139729b4609ea4e835b794", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -3,6 +3,7 @@\n // to be synthesized.\n \n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait Magic: Copy {} //~ ERROR E0568\n "}, {"sha": "f44986da0e2302e9eaf1d12bb0753d6d40eff529", "filename": "src/test/ui/traits/traits-inductive-overflow-supertrait-oibit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-inductive-overflow-supertrait-oibit.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,13 +1,13 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:7:19\n+  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:8:19\n    |\n LL | auto trait Magic: Copy {}\n    |            -----  ^^^^ help: remove the super traits\n    |            |\n    |            auto trait cannot have super traits\n \n error[E0277]: the trait bound `NoClone: std::marker::Copy` is not satisfied\n-  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:15:23\n+  --> $DIR/traits-inductive-overflow-supertrait-oibit.rs:16:23\n    |\n LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n    |    ----    ----- required by this bound in `copy`"}, {"sha": "8824a6d2767f74cc76ade01e05d7e42276651799", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait Magic : Sized where Option<Self> : Magic {} //~ ERROR E0568\n impl<T:Magic> Magic for T {}"}, {"sha": "63b3300f6dbf4d1ed641bd9dbbbba9fcdfdd8e94", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits-2.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:3:20\n+  --> $DIR/typeck-auto-trait-no-supertraits-2.rs:4:20\n    |\n LL | auto trait Magic : Sized where Option<Self> : Magic {}\n    |            -----   ^^^^^ help: remove the super traits"}, {"sha": "edbca9151248672a02a63bfb50170fb44ee57c6a", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -23,6 +23,7 @@\n // }\n \n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait Magic: Copy {} //~ ERROR E0568\n impl<T:Magic> Magic for T {}"}, {"sha": "796638fc54dce7651c5f8583988d2223a4b223c4", "filename": "src/test/ui/typeck/typeck-auto-trait-no-supertraits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-auto-trait-no-supertraits.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n error[E0568]: auto traits cannot have super traits\n-  --> $DIR/typeck-auto-trait-no-supertraits.rs:27:19\n+  --> $DIR/typeck-auto-trait-no-supertraits.rs:28:19\n    |\n LL | auto trait Magic: Copy {}\n    |            -----  ^^^^ help: remove the super traits"}, {"sha": "71ac2b466c10a191ee0dfff89bdc9970a25ae475", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait MyTrait {}\n "}, {"sha": "23401ca308676d85bc5df1b209ceb9eba619f7ff", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types-2.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied in `(MyS2, MyS)`\n-  --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:16:5\n+  --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:17:5\n    |\n LL | fn is_mytrait<T: MyTrait>() {}\n    |    ----------    ------- required by this bound in `is_mytrait`"}, {"sha": "6483b9213dc5303f4dfb68caf1339a7a3b2aa39d", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait MyTrait {}\n "}, {"sha": "a30b29a3893cc79052dd573d2ec7e4c36a8fb22d", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-constituent-types.rs:20:18\n+  --> $DIR/typeck-default-trait-impl-constituent-types.rs:21:18\n    |\n LL | fn is_mytrait<T: MyTrait>() {}\n    |    ----------    ------- required by this bound in `is_mytrait`"}, {"sha": "772ac322032ec49743dcd6af0ee9750383edc854", "filename": "src/test/ui/typeck/typeck-default-trait-impl-cross-crate-coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-cross-crate-coherence.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -3,7 +3,7 @@\n // Test that we do not consider associated types to be sendable without\n // some applicable trait bound (and we don't ICE).\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n extern crate tdticc_coherence_lib as lib;\n "}, {"sha": "3a2fc39d409d9b4b9b4d61459b0d9326daa414d0", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n struct MySendable {\n    t: *mut u8"}, {"sha": "2734b761e61b7c3f58221801646d37a81a86e811", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,4 @@\n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n struct Managed;\n impl !Send for Managed {}"}, {"sha": "47cab60625dce59c6b2593b99cef0c2343f26763", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,4 +1,5 @@\n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait MyTrait {}\n "}, {"sha": "e31bb81074469052e2bae83ac86b1a88f3db774c", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `ThisImplsUnsafeTrait: MyTrait` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-negation.rs:21:19\n+  --> $DIR/typeck-default-trait-impl-negation.rs:22:19\n    |\n LL | fn is_my_trait<T: MyTrait>() {}\n    |    -----------    ------- required by this bound in `is_my_trait`\n@@ -11,7 +11,7 @@ LL |     is_my_trait::<ThisImplsUnsafeTrait>();\n              <ThisImplsUnsafeTrait as MyTrait>\n \n error[E0277]: the trait bound `ThisImplsTrait: MyUnsafeTrait` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-negation.rs:24:26\n+  --> $DIR/typeck-default-trait-impl-negation.rs:25:26\n    |\n LL | fn is_my_unsafe_trait<T: MyUnsafeTrait>() {}\n    |    ------------------    ------------- required by this bound in `is_my_unsafe_trait`"}, {"sha": "614a5ff55b1ed0e95d03d85849c955d87e01bc7d", "filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -4,6 +4,7 @@\n // impls whose types unify.\n \n #![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n auto trait Defaulted { }\n impl<'a,T:Signed> Defaulted for &'a T { }"}, {"sha": "0d256094c60e02d740915295327c6fa63b548748", "filename": "src/test/ui/typeck/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-precedence.stderr?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `u32: Signed` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-precedence.rs:18:5\n+  --> $DIR/typeck-default-trait-impl-precedence.rs:19:5\n    |\n LL | fn is_defaulted<T:Defaulted>() { }\n    |    ------------   --------- required by this bound in `is_defaulted`"}, {"sha": "dc5ddf515630289810c5cf8058c3d144a8856a57", "filename": "src/test/ui/typeck/typeck-unsafe-always-share.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fda3378e3fcf279a19409ef368ce9bd5b57bfd62/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.rs?ref=fda3378e3fcf279a19409ef368ce9bd5b57bfd62", "patch": "@@ -1,6 +1,6 @@\n // Verify that UnsafeCell is *always* !Sync regardless if `T` is sync.\n \n-#![feature(optin_builtin_traits)]\n+#![feature(negative_impls)]\n \n use std::cell::UnsafeCell;\n use std::marker::Sync;"}]}