{"sha": "d75f768c13752dfa5ea9189a0b4dfb9b460993e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NWY3NjhjMTM3NTJkZmE1ZWE5MTg5YTBiNGRmYjliNDYwOTkzZTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-07T16:34:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-07T18:44:43Z"}, "message": "Minor", "tree": {"sha": "505920066c3abdefe6bd46edc2ef90e5911d58b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/505920066c3abdefe6bd46edc2ef90e5911d58b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d75f768c13752dfa5ea9189a0b4dfb9b460993e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d75f768c13752dfa5ea9189a0b4dfb9b460993e6", "html_url": "https://github.com/rust-lang/rust/commit/d75f768c13752dfa5ea9189a0b4dfb9b460993e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d75f768c13752dfa5ea9189a0b4dfb9b460993e6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3eb8787452a04400784ba8fed38303232595695", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3eb8787452a04400784ba8fed38303232595695", "html_url": "https://github.com/rust-lang/rust/commit/a3eb8787452a04400784ba8fed38303232595695"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "b3e345082bf6fa8c2a5e39ffd3082d59c792888d", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d75f768c13752dfa5ea9189a0b4dfb9b460993e6/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d75f768c13752dfa5ea9189a0b4dfb9b460993e6/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=d75f768c13752dfa5ea9189a0b4dfb9b460993e6", "patch": "@@ -58,11 +58,12 @@ impl GenericParams {\n             GenericDefId::TraitId(it) => {\n                 // traits get the Self type as an implicit first type parameter\n                 generics.params.alloc(GenericParamData { name: name::SELF_TYPE, default: None });\n-                generics.fill(&it.source(db).value);\n                 // add super traits as bounds on Self\n                 // i.e., trait Foo: Bar is equivalent to trait Foo where Self: Bar\n                 let self_param = TypeRef::Path(name::SELF_TYPE.into());\n                 generics.fill_bounds(&it.source(db).value, self_param);\n+\n+                generics.fill(&it.source(db).value);\n             }\n             GenericDefId::TypeAliasId(it) => generics.fill(&it.lookup(db).source(db).value),\n             // Note that we don't add `Self` here: in `impl`s, `Self` is not a\n@@ -75,7 +76,7 @@ impl GenericParams {\n         generics\n     }\n \n-    fn fill(&mut self, node: &impl TypeParamsOwner) {\n+    fn fill(&mut self, node: &dyn TypeParamsOwner) {\n         if let Some(params) = node.type_param_list() {\n             self.fill_params(params)\n         }\n@@ -84,7 +85,7 @@ impl GenericParams {\n         }\n     }\n \n-    fn fill_bounds(&mut self, node: &impl ast::TypeBoundsOwner, type_ref: TypeRef) {\n+    fn fill_bounds(&mut self, node: &dyn ast::TypeBoundsOwner, type_ref: TypeRef) {\n         for bound in\n             node.type_bound_list().iter().flat_map(|type_bound_list| type_bound_list.bounds())\n         {"}]}