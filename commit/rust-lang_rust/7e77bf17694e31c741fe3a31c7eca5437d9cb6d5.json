{"sha": "7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNzdiZjE3Njk0ZTMxYzc0MWZlM2EzMWM3ZWNhNTQzN2Q5Y2I2ZDU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-10-28T22:22:49Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-10-29T17:34:17Z"}, "message": "librustc: Implement the `proc` type as sugar for `~once fn` and `proc`\nnotation for closures, and disable the feature gate for `once fn` if\nused with the `~` sigil.", "tree": {"sha": "07fbf75c901955bc5b527929785e544829da92b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07fbf75c901955bc5b527929785e544829da92b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "html_url": "https://github.com/rust-lang/rust/commit/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6650c87a3800264a043b7f129e6a4841c4cc3f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6650c87a3800264a043b7f129e6a4841c4cc3f7", "html_url": "https://github.com/rust-lang/rust/commit/e6650c87a3800264a043b7f129e6a4841c4cc3f7"}], "stats": {"total": 324, "additions": 252, "deletions": 72}, "files": [{"sha": "f8123d7b05cafe0880487d37fa77b5e5dc61e80f", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -48,7 +48,7 @@ pub fn run(lib_path: &str,\n            input: Option<~str>) -> Result {\n \n     let env = env + target_env(lib_path, prog);\n-    let mut proc = run::Process::new(prog, args, run::ProcessOptions {\n+    let mut process = run::Process::new(prog, args, run::ProcessOptions {\n         env: Some(env),\n         dir: None,\n         in_fd: None,\n@@ -57,9 +57,9 @@ pub fn run(lib_path: &str,\n     });\n \n     for input in input.iter() {\n-        proc.input().write(input.as_bytes());\n+        process.input().write(input.as_bytes());\n     }\n-    let output = proc.finish_with_output();\n+    let output = process.finish_with_output();\n \n     Result {\n         status: output.status,"}, {"sha": "c17d6cabfed4f924f8f233e992a960596034eaca", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -132,7 +132,8 @@ impl Visitor<()> for Context {\n \n     fn visit_ty(&mut self, t: &ast::Ty, _: ()) {\n         match t.node {\n-            ast::ty_closure(closure) if closure.onceness == ast::Once => {\n+            ast::ty_closure(closure) if closure.onceness == ast::Once &&\n+                    closure.sigil != ast::OwnedSigil => {\n                 self.gate_feature(\"once_fns\", t.span,\n                                   \"once functions are \\\n                                    experimental and likely to be removed\");"}, {"sha": "77dec4ede10802e53daa8f9062f9435922a74a02", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -656,7 +656,7 @@ impl<'self> CheckLoanCtxt<'self> {\n \n     fn check_move_out_from_expr(&self, expr: @ast::Expr) {\n         match expr.node {\n-            ast::ExprFnBlock(*) => {\n+            ast::ExprFnBlock(*) | ast::ExprProc(*) => {\n                 // moves due to capture clauses are checked\n                 // in `check_loans_in_fn`, so that we can\n                 // give a better error message"}, {"sha": "dd161b189da27c59d809ebe273d22223a68f950c", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -307,7 +307,7 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n           this.pop_repeating_id(body.id);\n       }\n \n-      ast::ExprFnBlock(*) => {\n+      ast::ExprFnBlock(*) | ast::ExprProc(*) => {\n           gather_moves::gather_captures(this.bccx, this.move_data, ex);\n           visit::walk_expr(this, ex, ());\n       }"}, {"sha": "fce318f173e09e7f91eb0b32be3a46321a444f57", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -409,6 +409,7 @@ impl CFGBuilder {\n             ast::ExprInlineAsm(*) |\n             ast::ExprSelf |\n             ast::ExprFnBlock(*) |\n+            ast::ExprProc(*) |\n             ast::ExprLit(*) |\n             ast::ExprPath(*) => {\n                 self.straightline(expr, pred, [])"}, {"sha": "a6aab151e5ad95c9142b8de5550701a805555847", "filename": "src/librustc/middle/check_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_loop.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -49,7 +49,7 @@ impl Visitor<Context> for CheckLoopVisitor {\n               ExprLoop(ref b, _) => {\n                 self.visit_block(b, Context { in_loop: true,.. cx });\n               }\n-              ExprFnBlock(_, ref b) => {\n+              ExprFnBlock(_, ref b) | ExprProc(_, ref b) => {\n                 self.visit_block(b, Context { in_loop: false, can_ret: false });\n               }\n               ExprBreak(_) => {"}, {"sha": "299aa65897e6d48770c734456221dd901a9380fd", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -431,7 +431,8 @@ impl<'self, O:DataFlowOperator> PropagationContext<'self, O> {\n         self.merge_with_entry_set(expr.id, in_out);\n \n         match expr.node {\n-            ast::ExprFnBlock(ref decl, ref body) => {\n+            ast::ExprFnBlock(ref decl, ref body) |\n+            ast::ExprProc(ref decl, ref body) => {\n                 if self.dfcx.oper.walk_closures() {\n                     // In the absence of once fns, we must assume that\n                     // every function body will execute more than"}, {"sha": "7b0bb80eb28c275a52c213ec7aec36234d62d502", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -47,7 +47,7 @@ impl Visitor<int> for CollectFreevarsVisitor {\n     fn visit_expr(&mut self, expr:@ast::Expr, depth:int) {\n \n             match expr.node {\n-              ast::ExprFnBlock(*) => {\n+              ast::ExprFnBlock(*) | ast::ExprProc(*) => {\n                 visit::walk_expr(self, expr, depth + 1)\n               }\n               ast::ExprPath(*) | ast::ExprSelf => {"}, {"sha": "a370da2893a50d4179775257fc34facf2c91f30b", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -485,7 +485,7 @@ fn visit_expr(v: &mut LivenessVisitor, expr: @Expr, this: @mut IrMaps) {\n         }\n         visit::walk_expr(v, expr, this);\n       }\n-      ExprFnBlock(*) => {\n+      ExprFnBlock(*) | ExprProc(*) => {\n         // Interesting control flow (for loops can contain labeled\n         // breaks or continues)\n         this.add_live_node_for_node(expr.id, ExprNode(expr.span));\n@@ -1023,8 +1023,8 @@ impl Liveness {\n               self.propagate_through_expr(e, succ)\n           }\n \n-          ExprFnBlock(_, ref blk) => {\n-              debug!(\"{} is an expr_fn_block\",\n+          ExprFnBlock(_, ref blk) | ExprProc(_, ref blk) => {\n+              debug!(\"{} is an ExprFnBlock or ExprProc\",\n                    expr_to_str(expr, self.tcx.sess.intr()));\n \n               /*\n@@ -1498,7 +1498,8 @@ fn check_expr(this: &mut Liveness, expr: @Expr) {\n       ExprCast(*) | ExprUnary(*) | ExprRet(*) | ExprBreak(*) |\n       ExprAgain(*) | ExprLit(_) | ExprBlock(*) |\n       ExprMac(*) | ExprAddrOf(*) | ExprStruct(*) | ExprRepeat(*) |\n-      ExprParen(*) | ExprFnBlock(*) | ExprPath(*) | ExprSelf(*) => {\n+      ExprParen(*) | ExprFnBlock(*) | ExprProc(*) | ExprPath(*) |\n+      ExprSelf(*) => {\n         visit::walk_expr(this, expr, ());\n       }\n       ExprForLoop(*) => fail!(\"non-desugared expr_for_loop\")"}, {"sha": "bd2f69a1d03e6f2283eab0760c366d3f0f8a2cf2", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -424,7 +424,7 @@ impl mem_categorization_ctxt {\n \n           ast::ExprAddrOf(*) | ast::ExprCall(*) |\n           ast::ExprAssign(*) | ast::ExprAssignOp(*) |\n-          ast::ExprFnBlock(*) | ast::ExprRet(*) |\n+          ast::ExprFnBlock(*) | ast::ExprProc(*) | ast::ExprRet(*) |\n           ast::ExprDoBody(*) | ast::ExprUnary(*) |\n           ast::ExprMethodCall(*) | ast::ExprCast(*) | ast::ExprVstore(*) |\n           ast::ExprVec(*) | ast::ExprTup(*) | ast::ExprIf(*) |"}, {"sha": "36a47578e270021c5c88217e4df0157575c69355", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -555,7 +555,8 @@ impl VisitContext {\n                 self.use_expr(base, comp_mode);\n             }\n \n-            ExprFnBlock(ref decl, ref body) => {\n+            ExprFnBlock(ref decl, ref body) |\n+            ExprProc(ref decl, ref body) => {\n                 for a in decl.inputs.iter() {\n                     self.use_pat(a.pat);\n                 }"}, {"sha": "8c5deeb94d58ea37b7514f1777c242f6e966aedf", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -5043,7 +5043,8 @@ impl Resolver {\n                 visit::walk_expr(self, expr, ());\n             }\n \n-            ExprFnBlock(ref fn_decl, ref block) => {\n+            ExprFnBlock(ref fn_decl, ref block) |\n+            ExprProc(ref fn_decl, ref block) => {\n                 self.resolve_function(FunctionRibKind(expr.id, block.id),\n                                       Some(fn_decl),\n                                       NoTypeParameters,"}, {"sha": "cea39c8e3d252e89ab5b9a2fd61ddcba16e5c386", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -569,7 +569,8 @@ pub fn create_function_debug_context(cx: &mut CrateContext,\n         }\n         ast_map::node_expr(ref expr) => {\n             match expr.node {\n-                ast::ExprFnBlock(ref fn_decl, ref top_level_block) => {\n+                ast::ExprFnBlock(ref fn_decl, ref top_level_block) |\n+                ast::ExprProc(ref fn_decl, ref top_level_block) => {\n                     let name = format!(\"fn{}\", token::gensym(\"fn\"));\n                     let name = token::str_to_ident(name);\n                     (name, fn_decl,\n@@ -2579,7 +2580,8 @@ fn populate_scope_map(cx: &mut CrateContext,\n                 }\n             }\n \n-            ast::ExprFnBlock(ast::fn_decl { inputs: ref inputs, _ }, ref block) => {\n+            ast::ExprFnBlock(ast::fn_decl { inputs: ref inputs, _ }, ref block) |\n+            ast::ExprProc(ast::fn_decl { inputs: ref inputs, _ }, ref block) => {\n                 do with_new_scope(cx, block.span, scope_stack, scope_map) |cx,\n                                                                            scope_stack,\n                                                                            scope_map| {"}, {"sha": "ca1bd2d8a957fdbd74e9fc146cd762894285d3e3", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -717,10 +717,11 @@ fn trans_rvalue_dps_unadjusted(bcx: @mut Block, expr: &ast::Expr,\n         ast::ExprVec(*) | ast::ExprRepeat(*) => {\n             return tvec::trans_fixed_vstore(bcx, expr, expr, dest);\n         }\n-        ast::ExprFnBlock(ref decl, ref body) => {\n+        ast::ExprFnBlock(ref decl, ref body) |\n+        ast::ExprProc(ref decl, ref body) => {\n             let expr_ty = expr_ty(bcx, expr);\n             let sigil = ty::ty_closure_sigil(expr_ty);\n-            debug!(\"translating fn_block {} with type {}\",\n+            debug!(\"translating block function {} with type {}\",\n                    expr_to_str(expr, tcx.sess.intr()),\n                    expr_ty.repr(tcx));\n             return closure::trans_expr_fn(bcx, sigil, decl, body,"}, {"sha": "fbfac3b75187d9716e270f6b478e6c1892588c23", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -3263,6 +3263,7 @@ pub fn expr_kind(tcx: ctxt,\n         ast::ExprIf(*) |\n         ast::ExprMatch(*) |\n         ast::ExprFnBlock(*) |\n+        ast::ExprProc(*) |\n         ast::ExprDoBody(*) |\n         ast::ExprBlock(*) |\n         ast::ExprRepeat(*) |"}, {"sha": "ab6ed65d542f0f4eee0fda787962ee8b14dbbb3c", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -1408,6 +1408,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n             for (i, arg) in args.iter().enumerate() {\n                 let is_block = match arg.node {\n                     ast::ExprFnBlock(*) |\n+                    ast::ExprProc(*) |\n                     ast::ExprDoBody(*) => true,\n                     _ => false\n                 };\n@@ -2592,6 +2593,15 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         check_expr_fn(fcx, expr, None,\n                       decl, body, Vanilla, expected);\n       }\n+      ast::ExprProc(ref decl, ref body) => {\n+        check_expr_fn(fcx,\n+                      expr,\n+                      Some(ast::OwnedSigil),\n+                      decl,\n+                      body,\n+                      Vanilla,\n+                      expected);\n+      }\n       ast::ExprDoBody(b) => {\n         let expected_sty = unpack_expected(fcx,\n                                            expected,"}, {"sha": "c0aa669d920ab4bd3f826b49bda78b6b93fe6afc", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -427,7 +427,7 @@ fn visit_expr(rcx: &mut Rcx, expr: @ast::Expr) {\n             visit::walk_expr(rcx, expr, ());\n         }\n \n-        ast::ExprFnBlock(*) => {\n+        ast::ExprFnBlock(*) | ast::ExprProc(*) => {\n             check_expr_fn_block(rcx, expr);\n         }\n \n@@ -457,7 +457,7 @@ fn check_expr_fn_block(rcx: &mut Rcx,\n                        expr: @ast::Expr) {\n     let tcx = rcx.fcx.tcx();\n     match expr.node {\n-        ast::ExprFnBlock(_, ref body) => {\n+        ast::ExprFnBlock(_, ref body) | ast::ExprProc(_, ref body) => {\n             let function_type = rcx.resolve_node_type(expr.id);\n             match ty::get(function_type).sty {\n                 ty::ty_closure(\n@@ -1027,6 +1027,7 @@ pub mod guarantor {\n             ast::ExprIf(*) |\n             ast::ExprMatch(*) |\n             ast::ExprFnBlock(*) |\n+            ast::ExprProc(*) |\n             ast::ExprDoBody(*) |\n             ast::ExprBlock(*) |\n             ast::ExprRepeat(*) |"}, {"sha": "1d724e22de91034107ec718827057671e22dafa1", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -245,7 +245,7 @@ fn visit_expr(e: @ast::Expr, wbcx: &mut WbCtxt) {\n     }\n \n     match e.node {\n-        ast::ExprFnBlock(ref decl, _) => {\n+        ast::ExprFnBlock(ref decl, _) | ast::ExprProc(ref decl, _) => {\n             for input in decl.inputs.iter() {\n                 let _ = resolve_type_vars_for_node(wbcx, e.span, input.id);\n             }"}, {"sha": "2f8c1f6f97d5915be098c357e13bfb66bc5326a3", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -337,7 +337,14 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n     }\n     fn closure_to_str(cx: ctxt, cty: &ty::ClosureTy) -> ~str\n     {\n-        let mut s = cty.sigil.to_str();\n+        let is_proc =\n+            (cty.sigil, cty.onceness) == (ast::OwnedSigil, ast::Once);\n+\n+        let mut s = if is_proc {\n+            ~\"\"\n+        } else {\n+            cty.sigil.to_str()\n+        };\n \n         match (cty.sigil, cty.region) {\n             (ast::ManagedSigil, ty::re_static) |\n@@ -356,15 +363,19 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n             }\n         };\n \n-        match cty.onceness {\n-            ast::Many => {}\n-            ast::Once => {\n-                s.push_str(cty.onceness.to_str());\n-                s.push_char(' ');\n-            }\n-        };\n+        if is_proc {\n+            s.push_str(\"proc\");\n+        } else {\n+            match cty.onceness {\n+                ast::Many => {}\n+                ast::Once => {\n+                    s.push_str(cty.onceness.to_str());\n+                    s.push_char(' ');\n+                }\n+            };\n \n-        s.push_str(\"fn\");\n+            s.push_str(\"fn\");\n+        }\n \n         if !cty.bounds.is_empty() {\n             s.push_str(\":\");"}, {"sha": "0fa454b94d066695289a942174ca07e7b8e1164a", "filename": "src/libstd/rt/io/native/process.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibstd%2Frt%2Fio%2Fnative%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibstd%2Frt%2Fio%2Fnative%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnative%2Fprocess.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -649,23 +649,25 @@ fn waitpid(pid: pid_t) -> int {\n \n         unsafe {\n \n-            let proc = OpenProcess(SYNCHRONIZE | PROCESS_QUERY_INFORMATION, FALSE, pid as DWORD);\n-            if proc.is_null() {\n+            let process = OpenProcess(SYNCHRONIZE | PROCESS_QUERY_INFORMATION,\n+                                      FALSE,\n+                                      pid as DWORD);\n+            if process.is_null() {\n                 fail!(\"failure in OpenProcess: {}\", os::last_os_error());\n             }\n \n             loop {\n                 let mut status = 0;\n-                if GetExitCodeProcess(proc, &mut status) == FALSE {\n-                    CloseHandle(proc);\n+                if GetExitCodeProcess(process, &mut status) == FALSE {\n+                    CloseHandle(process);\n                     fail!(\"failure in GetExitCodeProcess: {}\", os::last_os_error());\n                 }\n                 if status != STILL_ACTIVE {\n-                    CloseHandle(proc);\n+                    CloseHandle(process);\n                     return status as int;\n                 }\n-                if WaitForSingleObject(proc, INFINITE) == WAIT_FAILED {\n-                    CloseHandle(proc);\n+                if WaitForSingleObject(process, INFINITE) == WAIT_FAILED {\n+                    CloseHandle(process);\n                     fail!(\"failure in WaitForSingleObject: {}\", os::last_os_error());\n                 }\n             }"}, {"sha": "9e6fdf2ba4c9a6ca5a0bc955e090248fb260c677", "filename": "src/libstd/run.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -413,7 +413,7 @@ mod tests {\n         let pipe_out = os::pipe();\n         let pipe_err = os::pipe();\n \n-        let mut proc = run::Process::new(\"cat\", [], run::ProcessOptions {\n+        let mut process = run::Process::new(\"cat\", [], run::ProcessOptions {\n             dir: None,\n             env: None,\n             in_fd: Some(pipe_in.input),\n@@ -430,7 +430,7 @@ mod tests {\n         }\n         let actual = readclose(pipe_out.input);\n         readclose(pipe_err.input);\n-        proc.finish();\n+        process.finish();\n \n         assert_eq!(~\"test\", actual);\n     }"}, {"sha": "cf72455a83a06e03361937c7a4a470abc0ceea56", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -537,6 +537,7 @@ pub enum Expr_ {\n     ExprLoop(Block, Option<Ident>),\n     ExprMatch(@Expr, ~[Arm]),\n     ExprFnBlock(fn_decl, Block),\n+    ExprProc(fn_decl, Block),\n     ExprDoBody(@Expr),\n     ExprBlock(Block),\n "}, {"sha": "d579e7dd2c7e4b264960205debe8b7f005aaefbd", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -786,6 +786,9 @@ pub fn noop_fold_expr<T:ast_fold>(e: @ast::Expr, folder: &T) -> @ast::Expr {\n                 folder.fold_block(body)\n             )\n         }\n+        ExprProc(ref decl, ref body) => {\n+            ExprProc(fold_fn_decl(decl, folder), folder.fold_block(body))\n+        }\n         ExprBlock(ref blk) => ExprBlock(folder.fold_block(blk)),\n         ExprAssign(el, er) => {\n             ExprAssign(folder.fold_expr(el), folder.fold_expr(er))"}, {"sha": "716fb5040f687145b0032a6e26587e3fbc3e86b6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -27,7 +27,7 @@ use ast::{ExprAssign, ExprAssignOp, ExprBinary, ExprBlock};\n use ast::{ExprBreak, ExprCall, ExprCast, ExprDoBody};\n use ast::{ExprField, ExprFnBlock, ExprIf, ExprIndex};\n use ast::{ExprLit, ExprLogLevel, ExprLoop, ExprMac};\n-use ast::{ExprMethodCall, ExprParen, ExprPath, ExprRepeat};\n+use ast::{ExprMethodCall, ExprParen, ExprPath, ExprProc, ExprRepeat};\n use ast::{ExprRet, ExprSelf, ExprStruct, ExprTup, ExprUnary};\n use ast::{ExprVec, ExprVstore, ExprVstoreMutBox};\n use ast::{ExprVstoreSlice, ExprVstoreBox};\n@@ -814,6 +814,21 @@ impl Parser {\n         });\n     }\n \n+    // Parses a procedure type (`proc`). The initial `proc` keyword must\n+    // already have been parsed.\n+    pub fn parse_proc_type(&self) -> ty_ {\n+        let (decl, lifetimes) = self.parse_ty_fn_decl();\n+        ty_closure(@TyClosure {\n+            sigil: OwnedSigil,\n+            region: None,\n+            purity: impure_fn,\n+            onceness: Once,\n+            bounds: None,\n+            decl: decl,\n+            lifetimes: lifetimes,\n+        })\n+    }\n+\n     // parse a ty_closure type\n     pub fn parse_ty_closure(&self,\n                             sigil: ast::Sigil,\n@@ -1123,6 +1138,8 @@ impl Parser {\n             let e = self.parse_expr();\n             self.expect(&token::RPAREN);\n             ty_typeof(e)\n+        } else if self.eat_keyword(keywords::Proc) {\n+            self.parse_proc_type()\n         } else if *self.token == token::MOD_SEP\n             || is_ident_or_path(self.token) {\n             // NAMED TYPE\n@@ -1672,6 +1689,19 @@ impl Parser {\n                                  ExprBlock(blk));\n         } else if token::is_bar(&*self.token) {\n             return self.parse_lambda_expr();\n+        } else if self.eat_keyword(keywords::Proc) {\n+            let decl = self.parse_proc_decl();\n+            let body = self.parse_expr();\n+            let fakeblock = ast::Block {\n+                view_items: ~[],\n+                stmts: ~[],\n+                expr: Some(body),\n+                id: ast::DUMMY_NODE_ID,\n+                rules: DefaultBlock,\n+                span: body.span,\n+            };\n+\n+            return self.mk_expr(lo, body.span.hi, ExprProc(decl, fakeblock));\n         } else if self.eat_keyword(keywords::Self) {\n             ex = ExprSelf;\n             hi = self.span.hi;\n@@ -3616,6 +3646,31 @@ impl Parser {\n         }\n     }\n \n+    // Parses the `(arg, arg) -> return_type` header on a procedure.\n+    fn parse_proc_decl(&self) -> fn_decl {\n+        let inputs =\n+            self.parse_unspanned_seq(&token::LPAREN,\n+                                     &token::RPAREN,\n+                                     seq_sep_trailing_allowed(token::COMMA),\n+                                     |p| p.parse_fn_block_arg());\n+\n+        let output = if self.eat(&token::RARROW) {\n+            self.parse_ty(false)\n+        } else {\n+            Ty {\n+                id: ast::DUMMY_NODE_ID,\n+                node: ty_infer,\n+                span: *self.span,\n+            }\n+        };\n+\n+        ast::fn_decl {\n+            inputs: inputs,\n+            output: output,\n+            cf: return_val,\n+        }\n+    }\n+\n     // parse the name and optional generic types of a function header.\n     fn parse_fn_header(&self) -> (Ident, ast::Generics) {\n         let id = self.parse_ident();"}, {"sha": "3d8fa1b672811e682bbc952db9f6e4588dac6c4f", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -486,14 +486,15 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n         \"while\",              // 62\n         \"in\",                 // 63\n         \"continue\",           // 64\n-\n-        \"be\",                 // 65\n-        \"pure\",               // 66\n-        \"yield\",              // 67\n-        \"typeof\",             // 68\n-        \"alignof\",            // 69\n-        \"offsetof\",           // 70\n-        \"sizeof\",             // 71\n+        \"proc\",               // 65\n+\n+        \"be\",                 // 66\n+        \"pure\",               // 67\n+        \"yield\",              // 68\n+        \"typeof\",             // 69\n+        \"alignof\",            // 70\n+        \"offsetof\",           // 71\n+        \"sizeof\",             // 72\n     ];\n \n     @interner::StrInterner::prefill(init_vec)\n@@ -502,9 +503,9 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n static SELF_KEYWORD_NAME: uint = 8;\n static STATIC_KEYWORD_NAME: uint = 27;\n static STRICT_KEYWORD_START: uint = 32;\n-static STRICT_KEYWORD_FINAL: uint = 64;\n-static RESERVED_KEYWORD_START: uint = 65;\n-static RESERVED_KEYWORD_FINAL: uint = 71;\n+static STRICT_KEYWORD_FINAL: uint = 65;\n+static RESERVED_KEYWORD_START: uint = 66;\n+static RESERVED_KEYWORD_FINAL: uint = 72;\n \n // if an interner exists in TLS, return it. Otherwise, prepare a\n // fresh one.\n@@ -645,6 +646,7 @@ pub mod keywords {\n         Use,\n         While,\n         Continue,\n+        Proc,\n \n         // Reserved keywords\n         Alignof,\n@@ -694,14 +696,15 @@ pub mod keywords {\n                 Use => Ident { name: 61, ctxt: 0 },\n                 While => Ident { name: 62, ctxt: 0 },\n                 Continue => Ident { name: 64, ctxt: 0 },\n-\n-                Alignof => Ident { name: 69, ctxt: 0 },\n-                Be => Ident { name: 65, ctxt: 0 },\n-                Offsetof => Ident { name: 70, ctxt: 0 },\n-                Pure => Ident { name: 66, ctxt: 0 },\n-                Sizeof => Ident { name: 71, ctxt: 0 },\n-                Typeof => Ident { name: 68, ctxt: 0 },\n-                Yield => Ident { name: 67, ctxt: 0 },\n+                Proc => Ident { name: 65, ctxt: 0 },\n+\n+                Alignof => Ident { name: 70, ctxt: 0 },\n+                Be => Ident { name: 66, ctxt: 0 },\n+                Offsetof => Ident { name: 71, ctxt: 0 },\n+                Pure => Ident { name: 67, ctxt: 0 },\n+                Sizeof => Ident { name: 72, ctxt: 0 },\n+                Typeof => Ident { name: 69, ctxt: 0 },\n+                Yield => Ident { name: 68, ctxt: 0 },\n             }\n         }\n     }"}, {"sha": "33bdcdd1b03057df14652245d0658f31d4da35be", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -1350,6 +1350,33 @@ pub fn print_expr(s: @ps, expr: &ast::Expr) {\n         // empty box to satisfy the close.\n         ibox(s, 0);\n       }\n+      ast::ExprProc(ref decl, ref body) => {\n+        // in do/for blocks we don't want to show an empty\n+        // argument list, but at this point we don't know which\n+        // we are inside.\n+        //\n+        // if !decl.inputs.is_empty() {\n+        print_proc_args(s, decl);\n+        space(s.s);\n+        // }\n+        assert!(body.stmts.is_empty());\n+        assert!(body.expr.is_some());\n+        // we extract the block, so as not to create another set of boxes\n+        match body.expr.unwrap().node {\n+            ast::ExprBlock(ref blk) => {\n+                print_block_unclosed(s, blk);\n+            }\n+            _ => {\n+                // this is a bare expression\n+                print_expr(s, body.expr.unwrap());\n+                end(s); // need to close a box\n+            }\n+        }\n+        // a box will be closed by print_expr, but we didn't want an overall\n+        // wrapper so we closed the corresponding opening. so create an\n+        // empty box to satisfy the close.\n+        ibox(s, 0);\n+      }\n       ast::ExprDoBody(body) => {\n         print_expr(s, body);\n       }\n@@ -1777,6 +1804,24 @@ pub fn print_fn_block_args(s: @ps, decl: &ast::fn_decl) {\n     maybe_print_comment(s, decl.output.span.lo);\n }\n \n+pub fn print_proc_args(s: @ps, decl: &ast::fn_decl) {\n+    word(s.s, \"proc\");\n+    word(s.s, \"(\");\n+    print_fn_args(s, decl, None);\n+    word(s.s, \")\");\n+\n+    match decl.output.node {\n+        ast::ty_infer => {}\n+        _ => {\n+            space_if_not_bol(s);\n+            word_space(s, \"->\");\n+            print_type(s, &decl.output);\n+        }\n+    }\n+\n+    maybe_print_comment(s, decl.output.span.lo);\n+}\n+\n pub fn print_bounds(s: @ps, bounds: &OptVec<ast::TyParamBound>,\n                     print_colon_anyway: bool) {\n     if !bounds.is_empty() {\n@@ -1968,12 +2013,16 @@ pub fn print_ty_fn(s: @ps,\n \n     // Duplicates the logic in `print_fn_header_info()`.  This is because that\n     // function prints the sigil in the wrong place.  That should be fixed.\n-    print_extern_opt_abis(s, opt_abis);\n-    print_opt_sigil(s, opt_sigil);\n-    print_opt_lifetime(s, opt_region);\n-    print_purity(s, purity);\n-    print_onceness(s, onceness);\n-    word(s.s, \"fn\");\n+    if opt_sigil == Some(ast::OwnedSigil) && onceness == ast::Once {\n+        word(s.s, \"proc\");\n+    } else {\n+        print_extern_opt_abis(s, opt_abis);\n+        print_opt_sigil(s, opt_sigil);\n+        print_opt_lifetime(s, opt_region);\n+        print_purity(s, purity);\n+        print_onceness(s, onceness);\n+        word(s.s, \"fn\");\n+    }\n     match id { Some(id) => { word(s.s, \" \"); print_ident(s, id); } _ => () }\n     do opt_bounds.as_ref().map |bounds| { print_bounds(s, bounds, true); };\n     match generics { Some(g) => print_generics(s, g), _ => () }"}, {"sha": "09ee87d17014808e382196d7d5dd75f127fce008", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -560,6 +560,14 @@ pub fn walk_expr<E:Clone, V:Visitor<E>>(visitor: &mut V, expression: @Expr, env:\n                              expression.id,\n                              env.clone())\n         }\n+        ExprProc(ref function_declaration, ref body) => {\n+            visitor.visit_fn(&fk_fn_block,\n+                             function_declaration,\n+                             body,\n+                             expression.span,\n+                             expression.id,\n+                             env.clone())\n+        }\n         ExprBlock(ref block) => visitor.visit_block(block, env.clone()),\n         ExprAssign(left_hand_expression, right_hand_expression) => {\n             visitor.visit_expr(right_hand_expression, env.clone());"}, {"sha": "c765ebe9643bcc830f22417406715c2f7a885778", "filename": "src/test/run-pass/closure-reform.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-reform.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -0,0 +1,27 @@\n+/* Any copyright is dedicated to the Public Domain.\n+ * http://creativecommons.org/publicdomain/zero/1.0/ */\n+\n+fn call_it(f: proc(~str) -> ~str) {\n+    println(f(~\"Fred\"))\n+}\n+\n+pub fn main() {\n+    let greeting = ~\"Hi \";\n+    do call_it |s| {\n+        greeting + s\n+    }\n+\n+    let greeting = ~\"Hello \";\n+    call_it(proc(s) {\n+        greeting + s\n+    });\n+\n+    let greeting = ~\"Goodbye \";\n+    call_it(proc(s) greeting + s);\n+\n+    let greeting = ~\"How's life, \";\n+    call_it(proc(s: ~str) -> ~str {\n+        greeting + s\n+    });\n+}\n+"}, {"sha": "aee4c7e40bcb42e17779b7b83261418d436f706e", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e77bf17694e31c741fe3a31c7eca5437d9cb6d5/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=7e77bf17694e31c741fe3a31c7eca5437d9cb6d5", "patch": "@@ -64,14 +64,14 @@ fn test_destroy_actually_kills(force: bool) {\n         use std::libc::consts::os::extra::{FALSE, PROCESS_QUERY_INFORMATION, STILL_ACTIVE };\n \n         unsafe {\n-            let proc = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, pid as DWORD);\n-            if proc.is_null() {\n+            let process = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, pid as DWORD);\n+            if process.is_null() {\n                 return false;\n             }\n-            // proc will be non-null if the process is alive, or if it died recently\n+            // process will be non-null if the process is alive, or if it died recently\n             let mut status = 0;\n-            GetExitCodeProcess(proc, &mut status);\n-            CloseHandle(proc);\n+            GetExitCodeProcess(process, &mut status);\n+            CloseHandle(process);\n             return status == STILL_ACTIVE;\n         }\n     }"}]}