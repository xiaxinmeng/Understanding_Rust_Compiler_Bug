{"sha": "336624735c696fe3c15b64db83f19e9ce4665d06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNjYyNDczNWM2OTZmZTNjMTViNjRkYjgzZjE5ZTljZTQ2NjVkMDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-24T01:20:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-24T01:20:09Z"}, "message": "Auto merge of #44766 - sunjay:lift_generics, r=nikomatsakis\n\nMove Generics from MethodSig to TraitItem and ImplItem\n\nAs part of `rust-impl-period/WG-compiler-traits`, we want to \"lift\" `Generics` from `MethodSig` into `TraitItem` and `ImplItem`. This is in preparation for adding associated type generics. (https://github.com/rust-lang/rust/issues/44265#issuecomment-331172238)\n\nCurrently this change is only made in the AST. In the future, it may also impact the HIR. (Still discussing)\n\nTo understand this PR, it's probably best to start from the changes to `ast.rs` and then work your way to the other files to understand the far reaching effects of this change.\n\nr? @nikomatsakis", "tree": {"sha": "2f141291475025b0200376e3695fc7e3c4d372b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f141291475025b0200376e3695fc7e3c4d372b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/336624735c696fe3c15b64db83f19e9ce4665d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/336624735c696fe3c15b64db83f19e9ce4665d06", "html_url": "https://github.com/rust-lang/rust/commit/336624735c696fe3c15b64db83f19e9ce4665d06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/336624735c696fe3c15b64db83f19e9ce4665d06/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c053db233d69519b548e5b8ed7192d0783e582a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c053db233d69519b548e5b8ed7192d0783e582a", "html_url": "https://github.com/rust-lang/rust/commit/4c053db233d69519b548e5b8ed7192d0783e582a"}, {"sha": "4b0f004e3ddd4421153fd3a0a85343652aa864ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b0f004e3ddd4421153fd3a0a85343652aa864ce", "html_url": "https://github.com/rust-lang/rust/commit/4b0f004e3ddd4421153fd3a0a85343652aa864ce"}], "stats": {"total": 232, "additions": 107, "deletions": 125}, "files": [{"sha": "d99d7cd897b9fe2ea3aa3b9c46f9184880c3bc0c", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -780,9 +780,7 @@ pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'\n         FnKind::ItemFn(_, generics, ..) => {\n             visitor.visit_generics(generics);\n         }\n-        FnKind::Method(_, sig, ..) => {\n-            visitor.visit_generics(&sig.generics);\n-        }\n+        FnKind::Method(..) |\n         FnKind::Closure(_) => {}\n     }\n }\n@@ -802,6 +800,7 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem) {\n     visitor.visit_name(trait_item.span, trait_item.name);\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n+    visitor.visit_generics(&trait_item.generics);\n     match trait_item.node {\n         TraitItemKind::Const(ref ty, default) => {\n             visitor.visit_id(trait_item.id);\n@@ -810,7 +809,6 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n         }\n         TraitItemKind::Method(ref sig, TraitMethod::Required(ref names)) => {\n             visitor.visit_id(trait_item.id);\n-            visitor.visit_generics(&sig.generics);\n             visitor.visit_fn_decl(&sig.decl);\n             for name in names {\n                 visitor.visit_name(name.span, name.node);\n@@ -852,6 +850,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n         ref vis,\n         ref defaultness,\n         ref attrs,\n+        ref generics,\n         ref node,\n         span\n     } = *impl_item;\n@@ -860,6 +859,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     visitor.visit_vis(vis);\n     visitor.visit_defaultness(defaultness);\n     walk_list!(visitor, visit_attribute, attrs);\n+    visitor.visit_generics(generics);\n     match *node {\n         ImplItemKind::Const(ref ty, body) => {\n             visitor.visit_id(impl_item.id);"}, {"sha": "0a9b44784b4f596a5aaf3e8ad485a10c2cf3b1fa", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -1539,6 +1539,7 @@ impl<'a> LoweringContext<'a> {\n                 hir_id,\n                 name: this.lower_ident(i.ident),\n                 attrs: this.lower_attrs(&i.attrs),\n+                generics: this.lower_generics(&i.generics),\n                 node: match i.node {\n                     TraitItemKind::Const(ref ty, ref default) => {\n                         hir::TraitItemKind::Const(this.lower_ty(ty),\n@@ -1603,6 +1604,7 @@ impl<'a> LoweringContext<'a> {\n                 hir_id,\n                 name: this.lower_ident(i.ident),\n                 attrs: this.lower_attrs(&i.attrs),\n+                generics: this.lower_generics(&i.generics),\n                 vis: this.lower_visibility(&i.vis, None),\n                 defaultness: this.lower_defaultness(i.defaultness, true /* [1] */),\n                 node: match i.node {\n@@ -1729,7 +1731,6 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_method_sig(&mut self, sig: &MethodSig) -> hir::MethodSig {\n         hir::MethodSig {\n-            generics: self.lower_generics(&sig.generics),\n             abi: sig.abi,\n             unsafety: self.lower_unsafety(sig.unsafety),\n             constness: self.lower_constness(sig.constness),"}, {"sha": "fb3fc8a2da4f3ed00ac5aea67fa24e33dfabc588", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -1295,7 +1295,6 @@ pub struct MethodSig {\n     pub constness: Constness,\n     pub abi: Abi,\n     pub decl: P<FnDecl>,\n-    pub generics: Generics,\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n@@ -1316,6 +1315,7 @@ pub struct TraitItem {\n     pub name: Name,\n     pub hir_id: HirId,\n     pub attrs: HirVec<Attribute>,\n+    pub generics: Generics,\n     pub node: TraitItemKind,\n     pub span: Span,\n }\n@@ -1360,6 +1360,7 @@ pub struct ImplItem {\n     pub vis: Visibility,\n     pub defaultness: Defaultness,\n     pub attrs: HirVec<Attribute>,\n+    pub generics: Generics,\n     pub node: ImplItemKind,\n     pub span: Span,\n }"}, {"sha": "b461487355007e68f11c4e19f884c6f222f37683", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -880,6 +880,7 @@ impl<'a> State<'a> {\n     pub fn print_method_sig(&mut self,\n                             name: ast::Name,\n                             m: &hir::MethodSig,\n+                            generics: &hir::Generics,\n                             vis: &hir::Visibility,\n                             arg_names: &[Spanned<ast::Name>],\n                             body_id: Option<hir::BodyId>)\n@@ -889,7 +890,7 @@ impl<'a> State<'a> {\n                       m.constness,\n                       m.abi,\n                       Some(name),\n-                      &m.generics,\n+                      generics,\n                       vis,\n                       arg_names,\n                       body_id)\n@@ -905,12 +906,14 @@ impl<'a> State<'a> {\n                 self.print_associated_const(ti.name, &ty, default, &hir::Inherited)?;\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref arg_names)) => {\n-                self.print_method_sig(ti.name, sig, &hir::Inherited, arg_names, None)?;\n+                self.print_method_sig(ti.name, sig, &ti.generics, &hir::Inherited, arg_names,\n+                    None)?;\n                 self.s.word(\";\")?;\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n                 self.head(\"\")?;\n-                self.print_method_sig(ti.name, sig, &hir::Inherited, &[], Some(body))?;\n+                self.print_method_sig(ti.name, sig, &ti.generics, &hir::Inherited, &[],\n+                    Some(body))?;\n                 self.nbsp()?;\n                 self.end()?; // need to close a box\n                 self.end()?; // need to close a box\n@@ -938,7 +941,7 @@ impl<'a> State<'a> {\n             }\n             hir::ImplItemKind::Method(ref sig, body) => {\n                 self.head(\"\")?;\n-                self.print_method_sig(ii.name, sig, &ii.vis, &[], Some(body))?;\n+                self.print_method_sig(ii.name, sig, &ii.generics, &ii.vis, &[], Some(body))?;\n                 self.nbsp()?;\n                 self.end()?; // need to close a box\n                 self.end()?; // need to close a box"}, {"sha": "994f0bd16b1f85094756bdebacdd07cd6cc94ecc", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -232,8 +232,7 @@ impl_stable_hash_for!(struct hir::MethodSig {\n     unsafety,\n     constness,\n     abi,\n-    decl,\n-    generics\n+    decl\n });\n \n impl_stable_hash_for!(struct hir::TypeBinding {\n@@ -709,13 +708,15 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::TraitItem {\n             hir_id: _,\n             name,\n             ref attrs,\n+            ref generics,\n             ref node,\n             span\n         } = *self;\n \n         hcx.hash_hir_item_like(attrs, |hcx| {\n             name.hash_stable(hcx, hasher);\n             attrs.hash_stable(hcx, hasher);\n+            generics.hash_stable(hcx, hasher);\n             node.hash_stable(hcx, hasher);\n             span.hash_stable(hcx, hasher);\n         });\n@@ -744,6 +745,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::ImplItem {\n             ref vis,\n             defaultness,\n             ref attrs,\n+            ref generics,\n             ref node,\n             span\n         } = *self;\n@@ -753,6 +755,7 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::ImplItem {\n             vis.hash_stable(hcx, hasher);\n             defaultness.hash_stable(hcx, hasher);\n             attrs.hash_stable(hcx, hasher);\n+            generics.hash_stable(hcx, hasher);\n             node.hash_stable(hcx, hasher);\n             span.hash_stable(hcx, hasher);\n         });"}, {"sha": "2037bc01a5bc94a5bfe513a48f1b865e5fb3b0b9", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -58,11 +58,10 @@ fn item_might_be_inlined(item: &hir::Item) -> bool {\n }\n \n fn method_might_be_inlined<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                     sig: &hir::MethodSig,\n                                      impl_item: &hir::ImplItem,\n                                      impl_src: DefId) -> bool {\n     if attr::requests_inline(&impl_item.attrs) ||\n-        generics_require_inlining(&sig.generics) {\n+        generics_require_inlining(&impl_item.generics) {\n         return true\n     }\n     if let Some(impl_node_id) = tcx.hir.as_local_node_id(impl_src) {\n@@ -176,8 +175,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             Some(hir_map::NodeImplItem(impl_item)) => {\n                 match impl_item.node {\n                     hir::ImplItemKind::Const(..) => true,\n-                    hir::ImplItemKind::Method(ref sig, _) => {\n-                        if generics_require_inlining(&sig.generics) ||\n+                    hir::ImplItemKind::Method(..) => {\n+                        if generics_require_inlining(&impl_item.generics) ||\n                                 attr::requests_inline(&impl_item.attrs) {\n                             true\n                         } else {\n@@ -293,9 +292,9 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     hir::ImplItemKind::Const(_, body) => {\n                         self.visit_nested_body(body);\n                     }\n-                    hir::ImplItemKind::Method(ref sig, body) => {\n+                    hir::ImplItemKind::Method(_, body) => {\n                         let did = self.tcx.hir.get_parent_did(search_item);\n-                        if method_might_be_inlined(self.tcx, sig, impl_item, did) {\n+                        if method_might_be_inlined(self.tcx, impl_item, did) {\n                             self.visit_nested_body(body)\n                         }\n                     }"}, {"sha": "dc912f1c1b6165a918fdb708f4b330e258053f60", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -412,7 +412,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         if let hir::TraitItemKind::Method(ref sig, _) = trait_item.node {\n             self.visit_early_late(\n                 Some(self.hir_map.get_parent(trait_item.id)),\n-                &sig.decl, &sig.generics,\n+                &sig.decl, &trait_item.generics,\n                 |this| intravisit::walk_trait_item(this, trait_item))\n         } else {\n             intravisit::walk_trait_item(self, trait_item);\n@@ -423,7 +423,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {\n             self.visit_early_late(\n                 Some(self.hir_map.get_parent(impl_item.id)),\n-                &sig.decl, &sig.generics,\n+                &sig.decl, &impl_item.generics,\n                 |this| intravisit::walk_impl_item(this, impl_item))\n         } else {\n             intravisit::walk_impl_item(self, impl_item);"}, {"sha": "0799c4f719012680ab9b240d7bd432116a8980fb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -718,12 +718,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n                 _: Span,\n                 node_id: NodeId) {\n         let rib_kind = match function_kind {\n-            FnKind::ItemFn(_, generics, ..) => {\n-                self.visit_generics(generics);\n+            FnKind::ItemFn(..) => {\n                 ItemRibKind\n             }\n             FnKind::Method(_, sig, _, _) => {\n-                self.visit_generics(&sig.generics);\n                 MethodRibKind(!sig.decl.has_self())\n             }\n             FnKind::Closure(_) => ClosureRibKind(node_id),\n@@ -1880,7 +1878,7 @@ impl<'a> Resolver<'a> {\n                                 }\n                                 TraitItemKind::Method(ref sig, _) => {\n                                     let type_parameters =\n-                                        HasTypeParameters(&sig.generics,\n+                                        HasTypeParameters(&trait_item.generics,\n                                                           MethodRibKind(!sig.decl.has_self()));\n                                     this.with_type_parameter_rib(type_parameters, |this| {\n                                         visit::walk_trait_item(this, trait_item)\n@@ -2099,7 +2097,7 @@ impl<'a> Resolver<'a> {\n                                         // We also need a new scope for the method-\n                                         // specific type parameters.\n                                         let type_parameters =\n-                                            HasTypeParameters(&sig.generics,\n+                                            HasTypeParameters(&impl_item.generics,\n                                                             MethodRibKind(!sig.decl.has_self()));\n                                         this.with_type_parameter_rib(type_parameters, |this| {\n                                             visit::walk_impl_item(this, impl_item);"}, {"sha": "c57d5305d807a16af394b9d79f0006906eb8de8a", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -354,23 +354,24 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                       body: Option<&'l ast::Block>,\n                       id: ast::NodeId,\n                       name: ast::Ident,\n+                      generics: &'l ast::Generics,\n                       vis: ast::Visibility,\n                       span: Span) {\n         debug!(\"process_method: {}:{}\", id, name);\n \n         if let Some(mut method_data) = self.save_ctxt.get_method_data(id, name.name, span) {\n \n-            let sig_str = ::make_signature(&sig.decl, &sig.generics);\n+            let sig_str = ::make_signature(&sig.decl, &generics);\n             if body.is_some() {\n                 self.nest_tables(id, |v| {\n                     v.process_formals(&sig.decl.inputs, &method_data.qualname)\n                 });\n             }\n \n-            self.process_generic_params(&sig.generics, span, &method_data.qualname, id);\n+            self.process_generic_params(&generics, span, &method_data.qualname, id);\n \n             method_data.value = sig_str;\n-            method_data.sig = sig::method_signature(id, name, sig, &self.save_ctxt);\n+            method_data.sig = sig::method_signature(id, name, generics, sig, &self.save_ctxt);\n             self.dumper.dump_def(vis == ast::Visibility::Public, method_data);\n         }\n \n@@ -1007,6 +1008,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                                     body.as_ref().map(|x| &**x),\n                                     trait_item.id,\n                                     trait_item.ident,\n+                                    &trait_item.generics,\n                                     ast::Visibility::Public,\n                                     trait_item.span);\n             }\n@@ -1066,6 +1068,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                                     Some(body),\n                                     impl_item.id,\n                                     impl_item.ident,\n+                                    &impl_item.generics,\n                                     impl_item.vis.clone(),\n                                     impl_item.span);\n             }"}, {"sha": "88f574d513bd8f7395607b3e87abc3698884948a", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -77,13 +77,14 @@ pub fn variant_signature(variant: &ast::Variant, scx: &SaveContext) -> Option<Si\n \n pub fn method_signature(id: NodeId,\n                         ident: ast::Ident,\n+                        generics: &ast::Generics,\n                         m: &ast::MethodSig,\n                         scx: &SaveContext)\n                         -> Option<Signature> {\n     if !scx.config.signatures {\n         return None;\n     }\n-    make_method_signature(id, ident, m, scx).ok()\n+    make_method_signature(id, ident, generics, m, scx).ok()\n }\n \n pub fn assoc_const_signature(id: NodeId,\n@@ -895,6 +896,7 @@ fn make_assoc_const_signature(id: NodeId,\n \n fn make_method_signature(id: NodeId,\n                          ident: ast::Ident,\n+                         generics: &ast::Generics,\n                          m: &ast::MethodSig,\n                          scx: &SaveContext)\n                          -> Result {\n@@ -915,7 +917,7 @@ fn make_method_signature(id: NodeId,\n \n     let mut sig = name_and_generics(text,\n                                     0,\n-                                    &m.generics,\n+                                    generics,\n                                     id,\n                                     ident,\n                                     scx)?;"}, {"sha": "554a858bcc17342f4d67f63383e702cd1f0dc87d", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -568,15 +568,11 @@ fn compare_number_of_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let num_trait_m_type_params = trait_m_generics.types.len();\n     if num_impl_m_type_params != num_trait_m_type_params {\n         let impl_m_node_id = tcx.hir.as_local_node_id(impl_m.def_id).unwrap();\n-        let span = match tcx.hir.expect_impl_item(impl_m_node_id).node {\n-            ImplItemKind::Method(ref impl_m_sig, _) => {\n-                if impl_m_sig.generics.is_parameterized() {\n-                    impl_m_sig.generics.span\n-                } else {\n-                    impl_m_span\n-                }\n-            }\n-            _ => bug!(\"{:?} is not a method\", impl_m),\n+        let impl_m_item = tcx.hir.expect_impl_item(impl_m_node_id);\n+        let span = if impl_m_item.generics.is_parameterized() {\n+            impl_m_item.generics.span\n+        } else {\n+            impl_m_span\n         };\n \n         let mut err = struct_span_err!(tcx.sess,"}, {"sha": "68ba1b4c44c81f61b35a6d6be0c3b0f478711d11", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 38, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -261,19 +261,9 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let item_node_id = tcx.hir.as_local_node_id(item_def_id).unwrap();\n     let ast_generics = match tcx.hir.get(item_node_id) {\n-        NodeTraitItem(item) => {\n-            match item.node {\n-                TraitItemKind::Method(ref sig, _) => &sig.generics,\n-                _ => return result\n-            }\n-        }\n+        NodeTraitItem(item) => &item.generics,\n \n-        NodeImplItem(item) => {\n-            match item.node {\n-                ImplItemKind::Method(ref sig, _) => &sig.generics,\n-                _ => return result\n-            }\n-        }\n+        NodeImplItem(item) => &item.generics,\n \n         NodeItem(item) => {\n             match item.node {\n@@ -818,12 +808,12 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     match node {\n         hir_map::NodeTraitItem(item) => match item.node {\n             hir::TraitItemKind::Method(ref sig, _) =>\n-                has_late_bound_regions(tcx, &sig.generics, &sig.decl),\n+                has_late_bound_regions(tcx, &item.generics, &sig.decl),\n             _ => None,\n         },\n         hir_map::NodeImplItem(item) => match item.node {\n             hir::ImplItemKind::Method(ref sig, _) =>\n-                has_late_bound_regions(tcx, &sig.generics, &sig.decl),\n+                has_late_bound_regions(tcx, &item.generics, &sig.decl),\n             _ => None,\n         },\n         hir_map::NodeForeignItem(item) => match item.node {\n@@ -881,19 +871,9 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let no_generics = hir::Generics::empty();\n     let ast_generics = match node {\n-        NodeTraitItem(item) => {\n-            match item.node {\n-                TraitItemKind::Method(ref sig, _) => &sig.generics,\n-                _ => &no_generics\n-            }\n-        }\n+        NodeTraitItem(item) => &item.generics,\n \n-        NodeImplItem(item) => {\n-            match item.node {\n-                ImplItemKind::Method(ref sig, _) => &sig.generics,\n-                _ => &no_generics\n-            }\n-        }\n+        NodeImplItem(item) => &item.generics,\n \n         NodeItem(item) => {\n             match item.node {\n@@ -1353,19 +1333,9 @@ fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let icx = ItemCtxt::new(tcx, def_id);\n     let no_generics = hir::Generics::empty();\n     let ast_generics = match node {\n-        NodeTraitItem(item) => {\n-            match item.node {\n-                TraitItemKind::Method(ref sig, _) => &sig.generics,\n-                _ => &no_generics\n-            }\n-        }\n+        NodeTraitItem(item) => &item.generics,\n \n-        NodeImplItem(item) => {\n-            match item.node {\n-                ImplItemKind::Method(ref sig, _) => &sig.generics,\n-                _ => &no_generics\n-            }\n-        }\n+        NodeImplItem(item) => &item.generics,\n \n         NodeItem(item) => {\n             match item.node {"}, {"sha": "4e8bf5f91092bef3142886b267d4bf0b2ab607d0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -1141,13 +1141,13 @@ pub struct Method {\n     pub abi: Abi,\n }\n \n-impl<'a> Clean<Method> for (&'a hir::MethodSig, hir::BodyId) {\n+impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId) {\n     fn clean(&self, cx: &DocContext) -> Method {\n         Method {\n-            generics: self.0.generics.clean(cx),\n+            generics: self.1.clean(cx),\n             unsafety: self.0.unsafety,\n             constness: self.0.constness,\n-            decl: (&*self.0.decl, self.1).clean(cx),\n+            decl: (&*self.0.decl, self.2).clean(cx),\n             abi: self.0.abi\n         }\n     }\n@@ -1380,13 +1380,13 @@ impl Clean<Item> for hir::TraitItem {\n                                     default.map(|e| print_const_expr(cx, e)))\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n-                MethodItem((sig, body).clean(cx))\n+                MethodItem((sig, &self.generics, body).clean(cx))\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref names)) => {\n                 TyMethodItem(TyMethod {\n                     unsafety: sig.unsafety.clone(),\n                     decl: (&*sig.decl, &names[..]).clean(cx),\n-                    generics: sig.generics.clean(cx),\n+                    generics: self.generics.clean(cx),\n                     abi: sig.abi\n                 })\n             }\n@@ -1415,7 +1415,7 @@ impl Clean<Item> for hir::ImplItem {\n                                     Some(print_const_expr(cx, expr)))\n             }\n             hir::ImplItemKind::Method(ref sig, body) => {\n-                MethodItem((sig, body).clean(cx))\n+                MethodItem((sig, &self.generics, body).clean(cx))\n             }\n             hir::ImplItemKind::Type(ref ty) => TypedefItem(Typedef {\n                 type_: ty.clean(cx),"}, {"sha": "b985ac78056a498e1d4059564ee7091a17597740", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -1178,7 +1178,6 @@ pub struct MethodSig {\n     pub constness: Spanned<Constness>,\n     pub abi: Abi,\n     pub decl: P<FnDecl>,\n-    pub generics: Generics,\n }\n \n /// Represents an item declaration within a trait declaration,\n@@ -1190,6 +1189,7 @@ pub struct TraitItem {\n     pub id: NodeId,\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n+    pub generics: Generics,\n     pub node: TraitItemKind,\n     pub span: Span,\n     /// See `Item::tokens` for what this is\n@@ -1211,6 +1211,7 @@ pub struct ImplItem {\n     pub vis: Visibility,\n     pub defaultness: Defaultness,\n     pub attrs: Vec<Attribute>,\n+    pub generics: Generics,\n     pub node: ImplItemKind,\n     pub span: Span,\n     /// See `Item::tokens` for what this is"}, {"sha": "2f5b386346bc8a4d91287ae1926e152f6e0f38d2", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -32,6 +32,7 @@ pub fn placeholder(kind: ExpansionKind, id: ast::NodeId) -> Expansion {\n \n     let ident = keywords::Invalid.ident();\n     let attrs = Vec::new();\n+    let generics = ast::Generics::default();\n     let vis = ast::Visibility::Inherited;\n     let span = DUMMY_SP;\n     let expr_placeholder = || P(ast::Expr {\n@@ -49,12 +50,12 @@ pub fn placeholder(kind: ExpansionKind, id: ast::NodeId) -> Expansion {\n             tokens: None,\n         }))),\n         ExpansionKind::TraitItems => Expansion::TraitItems(SmallVector::one(ast::TraitItem {\n-            id, span, ident, attrs,\n+            id, span, ident, attrs, generics,\n             node: ast::TraitItemKind::Macro(mac_placeholder()),\n             tokens: None,\n         })),\n         ExpansionKind::ImplItems => Expansion::ImplItems(SmallVector::one(ast::ImplItem {\n-            id, span, ident, vis, attrs,\n+            id, span, ident, vis, attrs, generics,\n             node: ast::ImplItemKind::Macro(mac_placeholder()),\n             defaultness: ast::Defaultness::Final,\n             tokens: None,"}, {"sha": "326f8cef6b3ea3e6b52b7b60ca65b9961f3c3169", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -1526,7 +1526,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 span: Span,\n                 _node_id: NodeId) {\n         // check for const fn declarations\n-        if let FnKind::ItemFn(_, _, _, Spanned { node: ast::Constness::Const, .. }, _, _, _) =\n+        if let FnKind::ItemFn(_, _, Spanned { node: ast::Constness::Const, .. }, _, _, _) =\n             fn_kind {\n             gate_feature_post!(&self, const_fn, span, \"const fn is unstable\");\n         }\n@@ -1536,7 +1536,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         // point.\n \n         match fn_kind {\n-            FnKind::ItemFn(_, _, _, _, abi, _, _) |\n+            FnKind::ItemFn(_, _, _, abi, _, _) |\n             FnKind::Method(_, &ast::MethodSig { abi, .. }, _, _) => {\n                 self.check_abi(abi, span);\n             }"}, {"sha": "518386a2ad29ce60ae774c8cdb6c599ae590202e", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -943,6 +943,7 @@ pub fn noop_fold_trait_item<T: Folder>(i: TraitItem, folder: &mut T)\n         id: folder.new_id(i.id),\n         ident: folder.fold_ident(i.ident),\n         attrs: fold_attrs(i.attrs, folder),\n+        generics: folder.fold_generics(i.generics),\n         node: match i.node {\n             TraitItemKind::Const(ty, default) => {\n                 TraitItemKind::Const(folder.fold_ty(ty),\n@@ -972,6 +973,7 @@ pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T)\n         vis: folder.fold_vis(i.vis),\n         ident: folder.fold_ident(i.ident),\n         attrs: fold_attrs(i.attrs, folder),\n+        generics: folder.fold_generics(i.generics),\n         defaultness: i.defaultness,\n         node: match i.node  {\n             ast::ImplItemKind::Const(ty, expr) => {\n@@ -1074,7 +1076,6 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T) -> For\n \n pub fn noop_fold_method_sig<T: Folder>(sig: MethodSig, folder: &mut T) -> MethodSig {\n     MethodSig {\n-        generics: folder.fold_generics(sig.generics),\n         abi: sig.abi,\n         unsafety: sig.unsafety,\n         constness: sig.constness,"}, {"sha": "07fa2a4d1a77c00119ba50053c8997d98efce860", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -1287,10 +1287,10 @@ impl<'a> Parser<'a> {\n                          mut attrs: Vec<Attribute>) -> PResult<'a, TraitItem> {\n         let lo = self.span;\n \n-        let (name, node) = if self.eat_keyword(keywords::Type) {\n+        let (name, node, generics) = if self.eat_keyword(keywords::Type) {\n             let TyParam {ident, bounds, default, ..} = self.parse_ty_param(vec![])?;\n             self.expect(&token::Semi)?;\n-            (ident, TraitItemKind::Type(bounds, default))\n+            (ident, TraitItemKind::Type(bounds, default), ast::Generics::default())\n         } else if self.is_const_item() {\n             self.expect_keyword(keywords::Const)?;\n             let ident = self.parse_ident()?;\n@@ -1305,7 +1305,7 @@ impl<'a> Parser<'a> {\n                 self.expect(&token::Semi)?;\n                 None\n             };\n-            (ident, TraitItemKind::Const(ty, default))\n+            (ident, TraitItemKind::Const(ty, default), ast::Generics::default())\n         } else if self.token.is_path_start() {\n             // trait item macro.\n             // code copied from parse_macro_use_or_failure... abstraction!\n@@ -1328,7 +1328,7 @@ impl<'a> Parser<'a> {\n             }\n \n             let mac = respan(lo.to(self.prev_span), Mac_ { path: pth, tts: tts });\n-            (keywords::Invalid.ident(), ast::TraitItemKind::Macro(mac))\n+            (keywords::Invalid.ident(), ast::TraitItemKind::Macro(mac), ast::Generics::default())\n         } else {\n             let (constness, unsafety, abi) = self.parse_fn_front_matter()?;\n \n@@ -1341,13 +1341,12 @@ impl<'a> Parser<'a> {\n                 // definition...\n                 p.parse_arg_general(false)\n             })?;\n-\n             generics.where_clause = self.parse_where_clause()?;\n+\n             let sig = ast::MethodSig {\n                 unsafety,\n                 constness,\n                 decl: d,\n-                generics,\n                 abi,\n             };\n \n@@ -1370,13 +1369,14 @@ impl<'a> Parser<'a> {\n                     return Err(self.fatal(&format!(\"expected `;` or `{{`, found `{}`\", token_str)));\n                 }\n             };\n-            (ident, ast::TraitItemKind::Method(sig, body))\n+            (ident, ast::TraitItemKind::Method(sig, body), generics)\n         };\n \n         Ok(TraitItem {\n             id: ast::DUMMY_NODE_ID,\n             ident: name,\n             attrs,\n+            generics,\n             node,\n             span: lo.to(self.prev_span),\n             tokens: None,\n@@ -4901,12 +4901,12 @@ impl<'a> Parser<'a> {\n         let lo = self.span;\n         let vis = self.parse_visibility(false)?;\n         let defaultness = self.parse_defaultness()?;\n-        let (name, node) = if self.eat_keyword(keywords::Type) {\n+        let (name, node, generics) = if self.eat_keyword(keywords::Type) {\n             let name = self.parse_ident()?;\n             self.expect(&token::Eq)?;\n             let typ = self.parse_ty()?;\n             self.expect(&token::Semi)?;\n-            (name, ast::ImplItemKind::Type(typ))\n+            (name, ast::ImplItemKind::Type(typ), ast::Generics::default())\n         } else if self.is_const_item() {\n             self.expect_keyword(keywords::Const)?;\n             let name = self.parse_ident()?;\n@@ -4915,11 +4915,11 @@ impl<'a> Parser<'a> {\n             self.expect(&token::Eq)?;\n             let expr = self.parse_expr()?;\n             self.expect(&token::Semi)?;\n-            (name, ast::ImplItemKind::Const(typ, expr))\n+            (name, ast::ImplItemKind::Const(typ, expr), ast::Generics::default())\n         } else {\n-            let (name, inner_attrs, node) = self.parse_impl_method(&vis, at_end)?;\n+            let (name, inner_attrs, generics, node) = self.parse_impl_method(&vis, at_end)?;\n             attrs.extend(inner_attrs);\n-            (name, node)\n+            (name, node, generics)\n         };\n \n         Ok(ImplItem {\n@@ -4929,6 +4929,7 @@ impl<'a> Parser<'a> {\n             vis,\n             defaultness,\n             attrs,\n+            generics,\n             node,\n             tokens: None,\n         })\n@@ -4986,7 +4987,8 @@ impl<'a> Parser<'a> {\n \n     /// Parse a method or a macro invocation in a trait impl.\n     fn parse_impl_method(&mut self, vis: &Visibility, at_end: &mut bool)\n-                         -> PResult<'a, (Ident, Vec<ast::Attribute>, ast::ImplItemKind)> {\n+                         -> PResult<'a, (Ident, Vec<ast::Attribute>, ast::Generics,\n+                             ast::ImplItemKind)> {\n         // code copied from parse_macro_use_or_failure... abstraction!\n         if self.token.is_path_start() {\n             // Method macro.\n@@ -5013,7 +5015,8 @@ impl<'a> Parser<'a> {\n             }\n \n             let mac = respan(lo.to(self.prev_span), Mac_ { path: pth, tts: tts });\n-            Ok((keywords::Invalid.ident(), vec![], ast::ImplItemKind::Macro(mac)))\n+            Ok((keywords::Invalid.ident(), vec![], ast::Generics::default(),\n+                ast::ImplItemKind::Macro(mac)))\n         } else {\n             let (constness, unsafety, abi) = self.parse_fn_front_matter()?;\n             let ident = self.parse_ident()?;\n@@ -5022,8 +5025,7 @@ impl<'a> Parser<'a> {\n             generics.where_clause = self.parse_where_clause()?;\n             *at_end = true;\n             let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-            Ok((ident, inner_attrs, ast::ImplItemKind::Method(ast::MethodSig {\n-                generics,\n+            Ok((ident, inner_attrs, generics, ast::ImplItemKind::Method(ast::MethodSig {\n                 abi,\n                 unsafety,\n                 constness,"}, {"sha": "b9a7fa04a0611fa131c24c4d5f57e0af94a622f3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -1525,6 +1525,7 @@ impl<'a> State<'a> {\n \n     pub fn print_method_sig(&mut self,\n                             ident: ast::Ident,\n+                            generics: &ast::Generics,\n                             m: &ast::MethodSig,\n                             vis: &ast::Visibility)\n                             -> io::Result<()> {\n@@ -1533,7 +1534,7 @@ impl<'a> State<'a> {\n                       m.constness.node,\n                       m.abi,\n                       Some(ident),\n-                      &m.generics,\n+                      &generics,\n                       vis)\n     }\n \n@@ -1553,7 +1554,7 @@ impl<'a> State<'a> {\n                 if body.is_some() {\n                     self.head(\"\")?;\n                 }\n-                self.print_method_sig(ti.ident, sig, &ast::Visibility::Inherited)?;\n+                self.print_method_sig(ti.ident, &ti.generics, sig, &ast::Visibility::Inherited)?;\n                 if let Some(ref body) = *body {\n                     self.nbsp()?;\n                     self.print_block_with_attrs(body, &ti.attrs)?;\n@@ -1592,7 +1593,7 @@ impl<'a> State<'a> {\n             }\n             ast::ImplItemKind::Method(ref sig, ref body) => {\n                 self.head(\"\")?;\n-                self.print_method_sig(ii.ident, sig, &ii.vis)?;\n+                self.print_method_sig(ii.ident, &ii.generics, sig, &ii.vis)?;\n                 self.nbsp()?;\n                 self.print_block_with_attrs(body, &ii.attrs)?;\n             }"}, {"sha": "078a63cba20b84ff072e715d60b09649af867143", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -31,7 +31,7 @@ use codemap::Spanned;\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    ItemFn(Ident, &'a Generics, Unsafety, Spanned<Constness>, Abi, &'a Visibility, &'a Block),\n+    ItemFn(Ident, Unsafety, Spanned<Constness>, Abi, &'a Visibility, &'a Block),\n \n     /// fn foo(&self)\n     Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a Block),\n@@ -247,7 +247,8 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_expr(expr);\n         }\n         ItemKind::Fn(ref declaration, unsafety, constness, abi, ref generics, ref body) => {\n-            visitor.visit_fn(FnKind::ItemFn(item.ident, generics, unsafety,\n+            visitor.visit_generics(generics);\n+            visitor.visit_fn(FnKind::ItemFn(item.ident, unsafety,\n                                             constness, abi, &item.vis, body),\n                              declaration,\n                              item.span,\n@@ -538,13 +539,11 @@ pub fn walk_fn<'a, V>(visitor: &mut V, kind: FnKind<'a>, declaration: &'a FnDecl\n     where V: Visitor<'a>,\n {\n     match kind {\n-        FnKind::ItemFn(_, generics, _, _, _, _, body) => {\n-            visitor.visit_generics(generics);\n+        FnKind::ItemFn(_, _, _, _, _, body) => {\n             walk_fn_decl(visitor, declaration);\n             visitor.visit_block(body);\n         }\n-        FnKind::Method(_, sig, _, body) => {\n-            visitor.visit_generics(&sig.generics);\n+        FnKind::Method(_, _, _, body) => {\n             walk_fn_decl(visitor, declaration);\n             visitor.visit_block(body);\n         }\n@@ -558,13 +557,13 @@ pub fn walk_fn<'a, V>(visitor: &mut V, kind: FnKind<'a>, declaration: &'a FnDecl\n pub fn walk_trait_item<'a, V: Visitor<'a>>(visitor: &mut V, trait_item: &'a TraitItem) {\n     visitor.visit_ident(trait_item.span, trait_item.ident);\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n+    visitor.visit_generics(&trait_item.generics);\n     match trait_item.node {\n         TraitItemKind::Const(ref ty, ref default) => {\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, default);\n         }\n         TraitItemKind::Method(ref sig, None) => {\n-            visitor.visit_generics(&sig.generics);\n             walk_fn_decl(visitor, &sig.decl);\n         }\n         TraitItemKind::Method(ref sig, Some(ref body)) => {\n@@ -585,6 +584,7 @@ pub fn walk_impl_item<'a, V: Visitor<'a>>(visitor: &mut V, impl_item: &'a ImplIt\n     visitor.visit_vis(&impl_item.vis);\n     visitor.visit_ident(impl_item.span, impl_item.ident);\n     walk_list!(visitor, visit_attribute, &impl_item.attrs);\n+    visitor.visit_generics(&impl_item.generics);\n     match impl_item.node {\n         ImplItemKind::Const(ref ty, ref expr) => {\n             visitor.visit_ty(ty);"}, {"sha": "18897047538f17576b0b3de49e6e89720377cfa9", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -506,6 +506,7 @@ impl<'a> TraitDef<'a> {\n                 vis: ast::Visibility::Inherited,\n                 defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n+                generics: Generics::default(),\n                 node: ast::ImplItemKind::Type(type_def.to_ty(cx, self.span, type_ident, generics)),\n                 tokens: None,\n             }\n@@ -921,12 +922,12 @@ impl<'a> MethodDef<'a> {\n         ast::ImplItem {\n             id: ast::DUMMY_NODE_ID,\n             attrs: self.attributes.clone(),\n+            generics: fn_generics,\n             span: trait_.span,\n             vis: ast::Visibility::Inherited,\n             defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n             node: ast::ImplItemKind::Method(ast::MethodSig {\n-                                                generics: fn_generics,\n                                                 abi,\n                                                 unsafety,\n                                                 constness:"}, {"sha": "9351a4b05f15144a75c04fd6f023c6b5d0769ffa", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -370,9 +370,7 @@ impl Foo {\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    // FIXME(michaelwoerister): This is curious but an unused lifetime parameter doesn't seem to\n-    // show up in any of the derived data structures.\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n@@ -395,7 +393,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOfItem\",\n+        except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOfItem,TypeckTables\",\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n@@ -441,7 +439,8 @@ impl Foo {\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,\\\n+                                        TypeOfItem,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n@@ -462,7 +461,7 @@ impl Foo {\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem,TypeckTables\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]"}, {"sha": "9dd420c14586d5add18cde7756c6af237e51d04a", "filename": "src/tools/toolstate.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/336624735c696fe3c15b64db83f19e9ce4665d06/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=336624735c696fe3c15b64db83f19e9ce4665d06", "patch": "@@ -26,10 +26,10 @@\n miri = \"Broken\"\n \n # ping @Manishearth @llogiq @mcarton @oli-obk\n-clippy = \"Compiling\"\n+clippy = \"Broken\"\n \n # ping @nrc\n-rls = \"Testing\"\n+rls = \"Broken\"\n \n # ping @nrc\n-rustfmt = \"Testing\"\n+rustfmt = \"Broken\""}]}