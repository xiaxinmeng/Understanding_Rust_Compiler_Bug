{"sha": "a7cc5d40683b9351c35a627b05886f43fdec684f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3Y2M1ZDQwNjgzYjkzNTFjMzVhNjI3YjA1ODg2ZjQzZmRlYzY4NGY=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-06-15T13:26:02Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-08-16T18:27:54Z"}, "message": "Also simplify if the closure body is an index expression", "tree": {"sha": "c511cda433d8d36f0a012a27496fabc5ebeeda9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c511cda433d8d36f0a012a27496fabc5ebeeda9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7cc5d40683b9351c35a627b05886f43fdec684f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7cc5d40683b9351c35a627b05886f43fdec684f", "html_url": "https://github.com/rust-lang/rust/commit/a7cc5d40683b9351c35a627b05886f43fdec684f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7cc5d40683b9351c35a627b05886f43fdec684f/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "848af393103d769458a206547ea4506fd0229304", "url": "https://api.github.com/repos/rust-lang/rust/commits/848af393103d769458a206547ea4506fd0229304", "html_url": "https://github.com/rust-lang/rust/commit/848af393103d769458a206547ea4506fd0229304"}], "stats": {"total": 198, "additions": 116, "deletions": 82}, "files": [{"sha": "ed8eaba75d1a2dfffbffab94a296992121a89239", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7cc5d40683b9351c35a627b05886f43fdec684f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cc5d40683b9351c35a627b05886f43fdec684f/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a7cc5d40683b9351c35a627b05886f43fdec684f", "patch": "@@ -2753,6 +2753,16 @@ fn lint_lazy_eval<'a, 'tcx>(\n             // Closures returning literals can be unconditionally simplified\n             hir::ExprKind::Lit(_) => true,\n \n+            hir::ExprKind::Index(ref object, ref index) => {\n+                // arguments are not being indexed into\n+                if !expr_uses_argument(object, params) {\n+                    // arguments are not used as index\n+                    !expr_uses_argument(index, params)\n+                } else {\n+                    false\n+                }\n+            },\n+\n             // Reading fields can be simplified if the object is not an argument of the closure\n             hir::ExprKind::Field(ref object, _) => !expr_uses_argument(object, params),\n "}, {"sha": "c806cf8dce4d25a0e02c3d15d2e49f269a13c64c", "filename": "tests/ui/unnecessary_lazy_eval.fixed", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a7cc5d40683b9351c35a627b05886f43fdec684f/tests%2Fui%2Funnecessary_lazy_eval.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a7cc5d40683b9351c35a627b05886f43fdec684f/tests%2Fui%2Funnecessary_lazy_eval.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.fixed?ref=a7cc5d40683b9351c35a627b05886f43fdec684f", "patch": "@@ -3,15 +3,15 @@\n #![allow(clippy::redundant_closure)]\n #![allow(clippy::bind_instead_of_map)]\n \n-struct Deep(Option<u32>);\n+struct Deep(Option<usize>);\n \n #[derive(Copy, Clone)]\n struct SomeStruct {\n-    some_field: u32,\n+    some_field: usize,\n }\n \n impl SomeStruct {\n-    fn return_some_field(&self) -> u32 {\n+    fn return_some_field(&self) -> usize {\n         self.some_field\n     }\n }\n@@ -22,6 +22,7 @@ fn some_call<T: Default>() -> T {\n \n fn main() {\n     let astronomers_pi = 10;\n+    let ext_arr: [usize; 1] = [2];\n     let ext_str = SomeStruct { some_field: 10 };\n \n     // Should lint - Option\n@@ -30,19 +31,21 @@ fn main() {\n     let _ = opt.unwrap_or(2);\n     let _ = opt.unwrap_or(astronomers_pi);\n     let _ = opt.unwrap_or(ext_str.some_field);\n+    let _ = opt.unwrap_or(ext_arr[0]);\n     let _ = opt.and(ext_opt);\n     let _ = opt.or(ext_opt);\n     let _ = opt.or(None);\n     let _ = opt.get_or_insert(2);\n     let _ = opt.ok_or(2);\n+    let _ = opt.ok_or(ext_arr[0]);\n \n     // Cases when unwrap is not called on a simple variable\n     let _ = Some(10).unwrap_or(2);\n     let _ = Some(10).and(ext_opt);\n-    let _: Option<u32> = None.or(ext_opt);\n+    let _: Option<usize> = None.or(ext_opt);\n     let _ = None.get_or_insert(2);\n-    let _: Result<u32, u32> = None.ok_or(2);\n-    let _: Option<u32> = None.or(None);\n+    let _: Result<usize, usize> = None.ok_or(2);\n+    let _: Option<usize> = None.or(None);\n \n     let mut deep = Deep(Some(42));\n     let _ = deep.0.unwrap_or(2);\n@@ -55,51 +58,54 @@ fn main() {\n     let _ = opt.unwrap_or_else(|| ext_str.return_some_field());\n     let _ = opt.or_else(some_call);\n     let _ = opt.or_else(|| some_call());\n-    let _: Result<u32, u32> = opt.ok_or_else(|| some_call());\n-    let _: Result<u32, u32> = opt.ok_or_else(some_call);\n+    let _: Result<usize, usize> = opt.ok_or_else(|| some_call());\n+    let _: Result<usize, usize> = opt.ok_or_else(some_call);\n     let _ = deep.0.get_or_insert_with(|| some_call());\n     let _ = deep.0.or_else(some_call);\n     let _ = deep.0.or_else(|| some_call());\n \n     // These are handled by bind_instead_of_map\n-    let _: Option<u32> = None.or_else(|| Some(3));\n+    let _ = Some(10).and_then(|idx| Some(ext_arr[idx]));\n+    let _ = Some(10).and_then(|idx| Some(idx));\n+    let _: Option<usize> = None.or_else(|| Some(3));\n     let _ = deep.0.or_else(|| Some(3));\n     let _ = opt.or_else(|| Some(3));\n \n     // Should lint - Result\n-    let res: Result<u32, u32> = Err(5);\n-    let res2: Result<u32, SomeStruct> = Err(SomeStruct { some_field: 5 });\n+    let res: Result<usize, usize> = Err(5);\n+    let res2: Result<usize, SomeStruct> = Err(SomeStruct { some_field: 5 });\n \n     let _ = res2.unwrap_or(2);\n     let _ = res2.unwrap_or(astronomers_pi);\n     let _ = res2.unwrap_or(ext_str.some_field);\n \n     // Should not lint - Result\n     let _ = res.unwrap_or_else(|err| err);\n+    let _ = res.unwrap_or_else(|err| ext_arr[err]);\n     let _ = res2.unwrap_or_else(|err| err.some_field);\n     let _ = res2.unwrap_or_else(|err| err.return_some_field());\n     let _ = res2.unwrap_or_else(|_| ext_str.return_some_field());\n \n-    let _: Result<u32, u32> = res.and_then(|x| Ok(x));\n-    let _: Result<u32, u32> = res.and_then(|x| Err(x));\n+    let _: Result<usize, usize> = res.and_then(|x| Ok(x));\n+    let _: Result<usize, usize> = res.and_then(|x| Err(x));\n \n-    let _: Result<u32, u32> = res.or_else(|err| Ok(err));\n-    let _: Result<u32, u32> = res.or_else(|err| Err(err));\n+    let _: Result<usize, usize> = res.or_else(|err| Ok(err));\n+    let _: Result<usize, usize> = res.or_else(|err| Err(err));\n \n     // These are handled by bind_instead_of_map\n-    let _: Result<u32, u32> = res.and_then(|_| Ok(2));\n-    let _: Result<u32, u32> = res.and_then(|_| Ok(astronomers_pi));\n-    let _: Result<u32, u32> = res.and_then(|_| Ok(ext_str.some_field));\n+    let _: Result<usize, usize> = res.and_then(|_| Ok(2));\n+    let _: Result<usize, usize> = res.and_then(|_| Ok(astronomers_pi));\n+    let _: Result<usize, usize> = res.and_then(|_| Ok(ext_str.some_field));\n \n-    let _: Result<u32, u32> = res.and_then(|_| Err(2));\n-    let _: Result<u32, u32> = res.and_then(|_| Err(astronomers_pi));\n-    let _: Result<u32, u32> = res.and_then(|_| Err(ext_str.some_field));\n+    let _: Result<usize, usize> = res.and_then(|_| Err(2));\n+    let _: Result<usize, usize> = res.and_then(|_| Err(astronomers_pi));\n+    let _: Result<usize, usize> = res.and_then(|_| Err(ext_str.some_field));\n \n-    let _: Result<u32, u32> = res.or_else(|_| Ok(2));\n-    let _: Result<u32, u32> = res.or_else(|_| Ok(astronomers_pi));\n-    let _: Result<u32, u32> = res.or_else(|_| Ok(ext_str.some_field));\n+    let _: Result<usize, usize> = res.or_else(|_| Ok(2));\n+    let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n+    let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n \n-    let _: Result<u32, u32> = res.or_else(|_| Err(2));\n-    let _: Result<u32, u32> = res.or_else(|_| Err(astronomers_pi));\n-    let _: Result<u32, u32> = res.or_else(|_| Err(ext_str.some_field));\n+    let _: Result<usize, usize> = res.or_else(|_| Err(2));\n+    let _: Result<usize, usize> = res.or_else(|_| Err(astronomers_pi));\n+    let _: Result<usize, usize> = res.or_else(|_| Err(ext_str.some_field));\n }"}, {"sha": "dfc6d3ba57356b193c4723bbac209d7593389680", "filename": "tests/ui/unnecessary_lazy_eval.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a7cc5d40683b9351c35a627b05886f43fdec684f/tests%2Fui%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7cc5d40683b9351c35a627b05886f43fdec684f/tests%2Fui%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.rs?ref=a7cc5d40683b9351c35a627b05886f43fdec684f", "patch": "@@ -3,15 +3,15 @@\n #![allow(clippy::redundant_closure)]\n #![allow(clippy::bind_instead_of_map)]\n \n-struct Deep(Option<u32>);\n+struct Deep(Option<usize>);\n \n #[derive(Copy, Clone)]\n struct SomeStruct {\n-    some_field: u32,\n+    some_field: usize,\n }\n \n impl SomeStruct {\n-    fn return_some_field(&self) -> u32 {\n+    fn return_some_field(&self) -> usize {\n         self.some_field\n     }\n }\n@@ -22,6 +22,7 @@ fn some_call<T: Default>() -> T {\n \n fn main() {\n     let astronomers_pi = 10;\n+    let ext_arr: [usize; 1] = [2];\n     let ext_str = SomeStruct { some_field: 10 };\n \n     // Should lint - Option\n@@ -30,19 +31,21 @@ fn main() {\n     let _ = opt.unwrap_or_else(|| 2);\n     let _ = opt.unwrap_or_else(|| astronomers_pi);\n     let _ = opt.unwrap_or_else(|| ext_str.some_field);\n+    let _ = opt.unwrap_or_else(|| ext_arr[0]);\n     let _ = opt.and_then(|_| ext_opt);\n     let _ = opt.or_else(|| ext_opt);\n     let _ = opt.or_else(|| None);\n     let _ = opt.get_or_insert_with(|| 2);\n     let _ = opt.ok_or_else(|| 2);\n+    let _ = opt.ok_or_else(|| ext_arr[0]);\n \n     // Cases when unwrap is not called on a simple variable\n     let _ = Some(10).unwrap_or_else(|| 2);\n     let _ = Some(10).and_then(|_| ext_opt);\n-    let _: Option<u32> = None.or_else(|| ext_opt);\n+    let _: Option<usize> = None.or_else(|| ext_opt);\n     let _ = None.get_or_insert_with(|| 2);\n-    let _: Result<u32, u32> = None.ok_or_else(|| 2);\n-    let _: Option<u32> = None.or_else(|| None);\n+    let _: Result<usize, usize> = None.ok_or_else(|| 2);\n+    let _: Option<usize> = None.or_else(|| None);\n \n     let mut deep = Deep(Some(42));\n     let _ = deep.0.unwrap_or_else(|| 2);\n@@ -55,51 +58,54 @@ fn main() {\n     let _ = opt.unwrap_or_else(|| ext_str.return_some_field());\n     let _ = opt.or_else(some_call);\n     let _ = opt.or_else(|| some_call());\n-    let _: Result<u32, u32> = opt.ok_or_else(|| some_call());\n-    let _: Result<u32, u32> = opt.ok_or_else(some_call);\n+    let _: Result<usize, usize> = opt.ok_or_else(|| some_call());\n+    let _: Result<usize, usize> = opt.ok_or_else(some_call);\n     let _ = deep.0.get_or_insert_with(|| some_call());\n     let _ = deep.0.or_else(some_call);\n     let _ = deep.0.or_else(|| some_call());\n \n     // These are handled by bind_instead_of_map\n-    let _: Option<u32> = None.or_else(|| Some(3));\n+    let _ = Some(10).and_then(|idx| Some(ext_arr[idx]));\n+    let _ = Some(10).and_then(|idx| Some(idx));\n+    let _: Option<usize> = None.or_else(|| Some(3));\n     let _ = deep.0.or_else(|| Some(3));\n     let _ = opt.or_else(|| Some(3));\n \n     // Should lint - Result\n-    let res: Result<u32, u32> = Err(5);\n-    let res2: Result<u32, SomeStruct> = Err(SomeStruct { some_field: 5 });\n+    let res: Result<usize, usize> = Err(5);\n+    let res2: Result<usize, SomeStruct> = Err(SomeStruct { some_field: 5 });\n \n     let _ = res2.unwrap_or_else(|_| 2);\n     let _ = res2.unwrap_or_else(|_| astronomers_pi);\n     let _ = res2.unwrap_or_else(|_| ext_str.some_field);\n \n     // Should not lint - Result\n     let _ = res.unwrap_or_else(|err| err);\n+    let _ = res.unwrap_or_else(|err| ext_arr[err]);\n     let _ = res2.unwrap_or_else(|err| err.some_field);\n     let _ = res2.unwrap_or_else(|err| err.return_some_field());\n     let _ = res2.unwrap_or_else(|_| ext_str.return_some_field());\n \n-    let _: Result<u32, u32> = res.and_then(|x| Ok(x));\n-    let _: Result<u32, u32> = res.and_then(|x| Err(x));\n+    let _: Result<usize, usize> = res.and_then(|x| Ok(x));\n+    let _: Result<usize, usize> = res.and_then(|x| Err(x));\n \n-    let _: Result<u32, u32> = res.or_else(|err| Ok(err));\n-    let _: Result<u32, u32> = res.or_else(|err| Err(err));\n+    let _: Result<usize, usize> = res.or_else(|err| Ok(err));\n+    let _: Result<usize, usize> = res.or_else(|err| Err(err));\n \n     // These are handled by bind_instead_of_map\n-    let _: Result<u32, u32> = res.and_then(|_| Ok(2));\n-    let _: Result<u32, u32> = res.and_then(|_| Ok(astronomers_pi));\n-    let _: Result<u32, u32> = res.and_then(|_| Ok(ext_str.some_field));\n+    let _: Result<usize, usize> = res.and_then(|_| Ok(2));\n+    let _: Result<usize, usize> = res.and_then(|_| Ok(astronomers_pi));\n+    let _: Result<usize, usize> = res.and_then(|_| Ok(ext_str.some_field));\n \n-    let _: Result<u32, u32> = res.and_then(|_| Err(2));\n-    let _: Result<u32, u32> = res.and_then(|_| Err(astronomers_pi));\n-    let _: Result<u32, u32> = res.and_then(|_| Err(ext_str.some_field));\n+    let _: Result<usize, usize> = res.and_then(|_| Err(2));\n+    let _: Result<usize, usize> = res.and_then(|_| Err(astronomers_pi));\n+    let _: Result<usize, usize> = res.and_then(|_| Err(ext_str.some_field));\n \n-    let _: Result<u32, u32> = res.or_else(|_| Ok(2));\n-    let _: Result<u32, u32> = res.or_else(|_| Ok(astronomers_pi));\n-    let _: Result<u32, u32> = res.or_else(|_| Ok(ext_str.some_field));\n+    let _: Result<usize, usize> = res.or_else(|_| Ok(2));\n+    let _: Result<usize, usize> = res.or_else(|_| Ok(astronomers_pi));\n+    let _: Result<usize, usize> = res.or_else(|_| Ok(ext_str.some_field));\n \n-    let _: Result<u32, u32> = res.or_else(|_| Err(2));\n-    let _: Result<u32, u32> = res.or_else(|_| Err(astronomers_pi));\n-    let _: Result<u32, u32> = res.or_else(|_| Err(ext_str.some_field));\n+    let _: Result<usize, usize> = res.or_else(|_| Err(2));\n+    let _: Result<usize, usize> = res.or_else(|_| Err(astronomers_pi));\n+    let _: Result<usize, usize> = res.or_else(|_| Err(ext_str.some_field));\n }"}, {"sha": "1559181754058590f35189d0a6889cf14bb4f87c", "filename": "tests/ui/unnecessary_lazy_eval.stderr", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a7cc5d40683b9351c35a627b05886f43fdec684f/tests%2Fui%2Funnecessary_lazy_eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7cc5d40683b9351c35a627b05886f43fdec684f/tests%2Fui%2Funnecessary_lazy_eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_lazy_eval.stderr?ref=a7cc5d40683b9351c35a627b05886f43fdec684f", "patch": "@@ -1,133 +1,145 @@\n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:30:13\n+  --> $DIR/unnecessary_lazy_eval.rs:31:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `opt.unwrap_or(2)`\n    |\n    = note: `-D clippy::unnecessary-lazy-evaluation` implied by `-D warnings`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:31:13\n+  --> $DIR/unnecessary_lazy_eval.rs:32:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| astronomers_pi);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `opt.unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:32:13\n+  --> $DIR/unnecessary_lazy_eval.rs:33:13\n    |\n LL |     let _ = opt.unwrap_or_else(|| ext_str.some_field);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `opt.unwrap_or(ext_str.some_field)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:33:13\n+  --> $DIR/unnecessary_lazy_eval.rs:34:13\n+   |\n+LL |     let _ = opt.unwrap_or_else(|| ext_arr[0]);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `opt.unwrap_or(ext_arr[0])`\n+\n+error: unnecessary closure used to substitute value for `Option::None`\n+  --> $DIR/unnecessary_lazy_eval.rs:35:13\n    |\n LL |     let _ = opt.and_then(|_| ext_opt);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `and` instead: `opt.and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:34:13\n+  --> $DIR/unnecessary_lazy_eval.rs:36:13\n    |\n LL |     let _ = opt.or_else(|| ext_opt);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `opt.or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:35:13\n+  --> $DIR/unnecessary_lazy_eval.rs:37:13\n    |\n LL |     let _ = opt.or_else(|| None);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `opt.or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:36:13\n+  --> $DIR/unnecessary_lazy_eval.rs:38:13\n    |\n LL |     let _ = opt.get_or_insert_with(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `get_or_insert` instead: `opt.get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:37:13\n+  --> $DIR/unnecessary_lazy_eval.rs:39:13\n    |\n LL |     let _ = opt.ok_or_else(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^ help: Use `ok_or` instead: `opt.ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n   --> $DIR/unnecessary_lazy_eval.rs:40:13\n    |\n+LL |     let _ = opt.ok_or_else(|| ext_arr[0]);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `ok_or` instead: `opt.ok_or(ext_arr[0])`\n+\n+error: unnecessary closure used to substitute value for `Option::None`\n+  --> $DIR/unnecessary_lazy_eval.rs:43:13\n+   |\n LL |     let _ = Some(10).unwrap_or_else(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `Some(10).unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:41:13\n+  --> $DIR/unnecessary_lazy_eval.rs:44:13\n    |\n LL |     let _ = Some(10).and_then(|_| ext_opt);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `and` instead: `Some(10).and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:42:26\n+  --> $DIR/unnecessary_lazy_eval.rs:45:28\n    |\n-LL |     let _: Option<u32> = None.or_else(|| ext_opt);\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `None.or(ext_opt)`\n+LL |     let _: Option<usize> = None.or_else(|| ext_opt);\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `None.or(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:43:13\n+  --> $DIR/unnecessary_lazy_eval.rs:46:13\n    |\n LL |     let _ = None.get_or_insert_with(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `get_or_insert` instead: `None.get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:44:31\n+  --> $DIR/unnecessary_lazy_eval.rs:47:35\n    |\n-LL |     let _: Result<u32, u32> = None.ok_or_else(|| 2);\n-   |                               ^^^^^^^^^^^^^^^^^^^^^ help: Use `ok_or` instead: `None.ok_or(2)`\n+LL |     let _: Result<usize, usize> = None.ok_or_else(|| 2);\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^ help: Use `ok_or` instead: `None.ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:45:26\n+  --> $DIR/unnecessary_lazy_eval.rs:48:28\n    |\n-LL |     let _: Option<u32> = None.or_else(|| None);\n-   |                          ^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `None.or(None)`\n+LL |     let _: Option<usize> = None.or_else(|| None);\n+   |                            ^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `None.or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:48:13\n+  --> $DIR/unnecessary_lazy_eval.rs:51:13\n    |\n LL |     let _ = deep.0.unwrap_or_else(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `deep.0.unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:49:13\n+  --> $DIR/unnecessary_lazy_eval.rs:52:13\n    |\n LL |     let _ = deep.0.and_then(|_| ext_opt);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `and` instead: `deep.0.and(ext_opt)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:50:13\n+  --> $DIR/unnecessary_lazy_eval.rs:53:13\n    |\n LL |     let _ = deep.0.or_else(|| None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: Use `or` instead: `deep.0.or(None)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:51:13\n+  --> $DIR/unnecessary_lazy_eval.rs:54:13\n    |\n LL |     let _ = deep.0.get_or_insert_with(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `get_or_insert` instead: `deep.0.get_or_insert(2)`\n \n error: unnecessary closure used to substitute value for `Option::None`\n-  --> $DIR/unnecessary_lazy_eval.rs:52:13\n+  --> $DIR/unnecessary_lazy_eval.rs:55:13\n    |\n LL |     let _ = deep.0.ok_or_else(|| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: Use `ok_or` instead: `deep.0.ok_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:73:13\n+  --> $DIR/unnecessary_lazy_eval.rs:78:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| 2);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `res2.unwrap_or(2)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:74:13\n+  --> $DIR/unnecessary_lazy_eval.rs:79:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| astronomers_pi);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `res2.unwrap_or(astronomers_pi)`\n \n error: unnecessary closure used to substitute value for `Result::Err`\n-  --> $DIR/unnecessary_lazy_eval.rs:75:13\n+  --> $DIR/unnecessary_lazy_eval.rs:80:13\n    |\n LL |     let _ = res2.unwrap_or_else(|_| ext_str.some_field);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: Use `unwrap_or` instead: `res2.unwrap_or(ext_str.some_field)`\n@@ -140,5 +152,5 @@ LL | #![warn(clippy::unnecessary_lazy_eval)]\n    |\n    = note: `-D clippy::unknown-clippy-lints` implied by `-D warnings`\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 25 previous errors\n "}]}