{"sha": "b3e46a9763d86a1681ddaaf0e60ce537302b9c92", "node_id": "C_kwDOAAsO6NoAKGIzZTQ2YTk3NjNkODZhMTY4MWRkYWFmMGU2MGNlNTM3MzAyYjljOTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-28T08:40:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-28T08:40:25Z"}, "message": "Auto merge of #95396 - TaKO8Ki:suggest-replacing-field-when-using-the-same-type, r=compiler-errors\n\nSuggest replacing a field when using the same type\n\ncloses #89166", "tree": {"sha": "a3a16f9cf571ccdb2966c8bdc57acc308bd92fc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3a16f9cf571ccdb2966c8bdc57acc308bd92fc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3e46a9763d86a1681ddaaf0e60ce537302b9c92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3e46a9763d86a1681ddaaf0e60ce537302b9c92", "html_url": "https://github.com/rust-lang/rust/commit/b3e46a9763d86a1681ddaaf0e60ce537302b9c92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3e46a9763d86a1681ddaaf0e60ce537302b9c92/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13c9fc38c94969ce4b91615bc803d923be8e0f51", "url": "https://api.github.com/repos/rust-lang/rust/commits/13c9fc38c94969ce4b91615bc803d923be8e0f51", "html_url": "https://github.com/rust-lang/rust/commit/13c9fc38c94969ce4b91615bc803d923be8e0f51"}, {"sha": "c26cfd1c5347091eb72c545b71c682f972cec1f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c26cfd1c5347091eb72c545b71c682f972cec1f1", "html_url": "https://github.com/rust-lang/rust/commit/c26cfd1c5347091eb72c545b71c682f972cec1f1"}], "stats": {"total": 181, "additions": 159, "deletions": 22}, "files": [{"sha": "d66230acb8bda7bf45d5a392b6d1d8c700b02526", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b3e46a9763d86a1681ddaaf0e60ce537302b9c92/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3e46a9763d86a1681ddaaf0e60ce537302b9c92/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=b3e46a9763d86a1681ddaaf0e60ce537302b9c92", "patch": "@@ -1258,7 +1258,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.field_ty(span, f, substs)\n                         })\n                         .unwrap_or_else(|| {\n-                            inexistent_fields.push(field.ident);\n+                            inexistent_fields.push(field);\n                             no_field_errors = false;\n                             tcx.ty_error()\n                         })\n@@ -1276,13 +1276,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .collect::<Vec<_>>();\n \n         let inexistent_fields_err = if !(inexistent_fields.is_empty() || variant.is_recovered())\n-            && !inexistent_fields.iter().any(|field| field.name == kw::Underscore)\n+            && !inexistent_fields.iter().any(|field| field.ident.name == kw::Underscore)\n         {\n             Some(self.error_inexistent_fields(\n                 adt.variant_descr(),\n                 &inexistent_fields,\n                 &mut unmentioned_fields,\n                 variant,\n+                substs,\n             ))\n         } else {\n             None\n@@ -1448,28 +1449,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn error_inexistent_fields(\n         &self,\n         kind_name: &str,\n-        inexistent_fields: &[Ident],\n-        unmentioned_fields: &mut Vec<(&ty::FieldDef, Ident)>,\n+        inexistent_fields: &[&hir::PatField<'tcx>],\n+        unmentioned_fields: &mut Vec<(&'tcx ty::FieldDef, Ident)>,\n         variant: &ty::VariantDef,\n+        substs: &'tcx ty::List<ty::subst::GenericArg<'tcx>>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         let tcx = self.tcx;\n         let (field_names, t, plural) = if inexistent_fields.len() == 1 {\n-            (format!(\"a field named `{}`\", inexistent_fields[0]), \"this\", \"\")\n+            (format!(\"a field named `{}`\", inexistent_fields[0].ident), \"this\", \"\")\n         } else {\n             (\n                 format!(\n                     \"fields named {}\",\n                     inexistent_fields\n                         .iter()\n-                        .map(|ident| format!(\"`{}`\", ident))\n+                        .map(|field| format!(\"`{}`\", field.ident))\n                         .collect::<Vec<String>>()\n                         .join(\", \")\n                 ),\n                 \"these\",\n                 \"s\",\n             )\n         };\n-        let spans = inexistent_fields.iter().map(|ident| ident.span).collect::<Vec<_>>();\n+        let spans = inexistent_fields.iter().map(|field| field.ident.span).collect::<Vec<_>>();\n         let mut err = struct_span_err!(\n             tcx.sess,\n             spans,\n@@ -1479,9 +1481,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             tcx.def_path_str(variant.def_id),\n             field_names\n         );\n-        if let Some(ident) = inexistent_fields.last() {\n+        if let Some(pat_field) = inexistent_fields.last() {\n             err.span_label(\n-                ident.span,\n+                pat_field.ident.span,\n                 format!(\n                     \"{} `{}` does not have {} field{}\",\n                     kind_name,\n@@ -1494,10 +1496,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             if unmentioned_fields.len() == 1 {\n                 let input =\n                     unmentioned_fields.iter().map(|(_, field)| field.name).collect::<Vec<_>>();\n-                let suggested_name = find_best_match_for_name(&input, ident.name, None);\n+                let suggested_name = find_best_match_for_name(&input, pat_field.ident.name, None);\n                 if let Some(suggested_name) = suggested_name {\n                     err.span_suggestion(\n-                        ident.span,\n+                        pat_field.ident.span,\n                         \"a field with a similar name exists\",\n                         suggested_name.to_string(),\n                         Applicability::MaybeIncorrect,\n@@ -1513,17 +1515,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         unmentioned_fields.retain(|&(_, x)| x.name != suggested_name);\n                     }\n                 } else if inexistent_fields.len() == 1 {\n-                    let unmentioned_field = unmentioned_fields[0].1.name;\n-                    err.span_suggestion_short(\n-                        ident.span,\n-                        &format!(\n-                            \"`{}` has a field named `{}`\",\n-                            tcx.def_path_str(variant.def_id),\n-                            unmentioned_field\n-                        ),\n-                        unmentioned_field.to_string(),\n-                        Applicability::MaybeIncorrect,\n-                    );\n+                    match pat_field.pat.kind {\n+                        PatKind::Lit(expr)\n+                            if !self.can_coerce(\n+                                self.typeck_results.borrow().expr_ty(expr),\n+                                self.field_ty(\n+                                    unmentioned_fields[0].1.span,\n+                                    unmentioned_fields[0].0,\n+                                    substs,\n+                                ),\n+                            ) => {}\n+                        _ => {\n+                            let unmentioned_field = unmentioned_fields[0].1.name;\n+                            err.span_suggestion_short(\n+                                pat_field.ident.span,\n+                                &format!(\n+                                    \"`{}` has a field named `{}`\",\n+                                    tcx.def_path_str(variant.def_id),\n+                                    unmentioned_field\n+                                ),\n+                                unmentioned_field.to_string(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                    }\n                 }\n             }\n         }"}, {"sha": "dd2fe79731eac4b9cd9028d660aebe880640291b", "filename": "src/test/ui/structs/suggest-replacing-field-when-specifying-same-type.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b3e46a9763d86a1681ddaaf0e60ce537302b9c92/src%2Ftest%2Fui%2Fstructs%2Fsuggest-replacing-field-when-specifying-same-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3e46a9763d86a1681ddaaf0e60ce537302b9c92/src%2Ftest%2Fui%2Fstructs%2Fsuggest-replacing-field-when-specifying-same-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fsuggest-replacing-field-when-specifying-same-type.rs?ref=b3e46a9763d86a1681ddaaf0e60ce537302b9c92", "patch": "@@ -0,0 +1,28 @@\n+enum Foo {\n+    Bar { a: u8, b: i8, c: u8 },\n+    Baz { a: f32 },\n+    None,\n+}\n+\n+fn main() {\n+    let foo = Foo::None;\n+    match foo {\n+        Foo::Bar { a, aa: 1, c } => (),\n+        //~^ ERROR variant `Foo::Bar` does not have a field named `aa` [E0026]\n+        //~| ERROR pattern does not mention field `b` [E0027]\n+        Foo::Baz { bb: 1.0 } => (),\n+        //~^ ERROR variant `Foo::Baz` does not have a field named `bb` [E0026]\n+        //~| ERROR pattern does not mention field `a` [E0027]\n+        _ => (),\n+    }\n+\n+    match foo {\n+        Foo::Bar { a, aa: \"\", c } => (),\n+        //~^ ERROR variant `Foo::Bar` does not have a field named `aa` [E0026]\n+        //~| ERROR pattern does not mention field `b` [E0027]\n+        Foo::Baz { bb: \"\" } => (),\n+        //~^ ERROR variant `Foo::Baz` does not have a field named `bb` [E0026]\n+        //~| pattern does not mention field `a` [E0027]\n+        _ => (),\n+    }\n+}"}, {"sha": "e8503f540c288da0b2848b7a08d6f2c9f40525d6", "filename": "src/test/ui/structs/suggest-replacing-field-when-specifying-same-type.stderr", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/b3e46a9763d86a1681ddaaf0e60ce537302b9c92/src%2Ftest%2Fui%2Fstructs%2Fsuggest-replacing-field-when-specifying-same-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b3e46a9763d86a1681ddaaf0e60ce537302b9c92/src%2Ftest%2Fui%2Fstructs%2Fsuggest-replacing-field-when-specifying-same-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fsuggest-replacing-field-when-specifying-same-type.stderr?ref=b3e46a9763d86a1681ddaaf0e60ce537302b9c92", "patch": "@@ -0,0 +1,94 @@\n+error[E0026]: variant `Foo::Bar` does not have a field named `aa`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:10:23\n+   |\n+LL |         Foo::Bar { a, aa: 1, c } => (),\n+   |                       ^^\n+   |                       |\n+   |                       variant `Foo::Bar` does not have this field\n+   |                       help: `Foo::Bar` has a field named `b`\n+\n+error[E0027]: pattern does not mention field `b`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:10:9\n+   |\n+LL |         Foo::Bar { a, aa: 1, c } => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ missing field `b`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |         Foo::Bar { a, aa: 1, c, b } => (),\n+   |                               ~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |         Foo::Bar { a, aa: 1, c, .. } => (),\n+   |                               ~~~~~~\n+\n+error[E0026]: variant `Foo::Baz` does not have a field named `bb`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:13:20\n+   |\n+LL |         Foo::Baz { bb: 1.0 } => (),\n+   |                    ^^\n+   |                    |\n+   |                    variant `Foo::Baz` does not have this field\n+   |                    help: `Foo::Baz` has a field named `a`\n+\n+error[E0027]: pattern does not mention field `a`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:13:9\n+   |\n+LL |         Foo::Baz { bb: 1.0 } => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^ missing field `a`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |         Foo::Baz { bb: 1.0, a } => (),\n+   |                           ~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |         Foo::Baz { bb: 1.0, .. } => (),\n+   |                           ~~~~~~\n+\n+error[E0026]: variant `Foo::Bar` does not have a field named `aa`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:20:23\n+   |\n+LL |         Foo::Bar { a, aa: \"\", c } => (),\n+   |                       ^^ variant `Foo::Bar` does not have this field\n+\n+error[E0027]: pattern does not mention field `b`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:20:9\n+   |\n+LL |         Foo::Bar { a, aa: \"\", c } => (),\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `b`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |         Foo::Bar { a, aa: \"\", c, b } => (),\n+   |                                ~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |         Foo::Bar { a, aa: \"\", c, .. } => (),\n+   |                                ~~~~~~\n+\n+error[E0026]: variant `Foo::Baz` does not have a field named `bb`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:23:20\n+   |\n+LL |         Foo::Baz { bb: \"\" } => (),\n+   |                    ^^ variant `Foo::Baz` does not have this field\n+\n+error[E0027]: pattern does not mention field `a`\n+  --> $DIR/suggest-replacing-field-when-specifying-same-type.rs:23:9\n+   |\n+LL |         Foo::Baz { bb: \"\" } => (),\n+   |         ^^^^^^^^^^^^^^^^^^^ missing field `a`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |         Foo::Baz { bb: \"\", a } => (),\n+   |                          ~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |         Foo::Baz { bb: \"\", .. } => (),\n+   |                          ~~~~~~\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0026, E0027.\n+For more information about an error, try `rustc --explain E0026`."}]}