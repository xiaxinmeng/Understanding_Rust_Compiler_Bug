{"sha": "cba5f6bd01bc3ba692c355ca82212db069cd800c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYTVmNmJkMDFiYzNiYTY5MmMzNTVjYTgyMjEyZGIwNjljZDgwMGM=", "commit": {"author": {"name": "Martin Hoffmann", "email": "hn@nvnc.de", "date": "2017-12-05T17:07:28Z"}, "committer": {"name": "Martin Hoffmann", "email": "hn@nvnc.de", "date": "2017-12-05T17:07:28Z"}, "message": "Rewrite Borrow's trait documentation.", "tree": {"sha": "111f813ef821019d470e35dd1542c06dcd414303", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/111f813ef821019d470e35dd1542c06dcd414303"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cba5f6bd01bc3ba692c355ca82212db069cd800c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cba5f6bd01bc3ba692c355ca82212db069cd800c", "html_url": "https://github.com/rust-lang/rust/commit/cba5f6bd01bc3ba692c355ca82212db069cd800c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cba5f6bd01bc3ba692c355ca82212db069cd800c/comments", "author": {"login": "partim", "id": 1318494, "node_id": "MDQ6VXNlcjEzMTg0OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1318494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/partim", "html_url": "https://github.com/partim", "followers_url": "https://api.github.com/users/partim/followers", "following_url": "https://api.github.com/users/partim/following{/other_user}", "gists_url": "https://api.github.com/users/partim/gists{/gist_id}", "starred_url": "https://api.github.com/users/partim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/partim/subscriptions", "organizations_url": "https://api.github.com/users/partim/orgs", "repos_url": "https://api.github.com/users/partim/repos", "events_url": "https://api.github.com/users/partim/events{/privacy}", "received_events_url": "https://api.github.com/users/partim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "partim", "id": 1318494, "node_id": "MDQ6VXNlcjEzMTg0OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1318494?v=4", "gravatar_id": "", "url": "https://api.github.com/users/partim", "html_url": "https://github.com/partim", "followers_url": "https://api.github.com/users/partim/followers", "following_url": "https://api.github.com/users/partim/following{/other_user}", "gists_url": "https://api.github.com/users/partim/gists{/gist_id}", "starred_url": "https://api.github.com/users/partim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/partim/subscriptions", "organizations_url": "https://api.github.com/users/partim/orgs", "repos_url": "https://api.github.com/users/partim/repos", "events_url": "https://api.github.com/users/partim/events{/privacy}", "received_events_url": "https://api.github.com/users/partim/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd9ecfdfd01c0954172a002cc806174a077b9e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9ecfdfd01c0954172a002cc806174a077b9e3d", "html_url": "https://github.com/rust-lang/rust/commit/fd9ecfdfd01c0954172a002cc806174a077b9e3d"}], "stats": {"total": 147, "additions": 132, "deletions": 15}, "files": [{"sha": "76f6215fae659d11a510afc862840ced299f6a85", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 132, "deletions": 15, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/cba5f6bd01bc3ba692c355ca82212db069cd800c/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cba5f6bd01bc3ba692c355ca82212db069cd800c/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=cba5f6bd01bc3ba692c355ca82212db069cd800c", "patch": "@@ -12,26 +12,143 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-/// A trait for borrowing data.\n+// impl Borrow<str> for String\n+// impl<T> Borrow<T> for Arc<T>\n+// impl<K> HashSet<K> { fn get<Q>(&self, q: &Q) where K: Borrow<Q> }\n+\n+/// A trait identifying how borrowed data behaves.\n+///\n+/// If a type implements this trait, it signals that a reference to it behaves\n+/// exactly like a reference to `Borrowed`. As a consequence, if a trait is\n+/// implemented both by `Self` and `Borrowed`, all trait methods that\n+/// take a `&self` argument must produce the same result in both\n+/// implementations.\n+///\n+/// As a consequence, this trait should only be implemented for types managing\n+/// a value of another type without modifying its behavior. Examples are\n+/// smart pointers such as [`Box`] or [`Rc`] as well the owned version of\n+/// slices such as [`Vec`].\n+///\n+/// A relaxed version that allows providing a reference to some other type\n+/// without any further promises is available through [`AsRef`].\n+///\n+/// When writing generic code, a use of `Borrow` should always be justified\n+/// by additional trait bounds, making it clear that the two types need to\n+/// behave identically in a certain context. If the code should merely be\n+/// able to operate on any type that can produce a reference to a given type,\n+/// you should use [`AsRef`] instead.\n+///\n+/// The companion trait [`BorrowMut`] provides the same guarantees for\n+/// mutable references.\n+///\n+/// [`Box`]: ../boxed/struct.Box.html\n+/// [`Rc`]: ../rc/struct.Rc.html\n+/// [`Vec`]: ../vec/struct.Vec.html\n+/// [`AsRef`]: ../convert/trait.AsRef.html\n+/// [`BorrowMut`]: trait.BorrowMut.html\n+///\n+/// # Examples\n+///\n+/// As a data collection, [`HashMap`] owns both keys and values. If the key\u2019s\n+/// actual data is wrapped in a managing type of some kind, it should,\n+/// however, still be possible to search for a value using a reference to the\n+/// key\u2019s data. For instance, if the key is a string, then it is likely\n+/// stored with the hash map as a [`String`], while it should be possible\n+/// to search using a [`&str`][`str`]. Thus, `insert` needs to operate on a\n+/// string while `get` needs to be able to use a `&str`.\n+///\n+/// Slightly simplified, the relevant parts of `HashMap` look like this:\n+///\n+/// ```\n+/// use std::borrow::Borrow;\n+/// use std::hash::Hash;\n+///\n+/// pub struct HashMap<K, V> {\n+///     # marker: ::std::marker::PhantomData<(K, V)>,\n+///     // fields omitted\n+/// }\n+///\n+/// impl<K, V> HashMap<K, V> {\n+///     pub fn insert(&self, key: K, value: V) -> Option<V>\n+///         where K: Hash + Eq\n+///     {\n+///         # unimplemented!()\n+///         // ...\n+///     }\n+///\n+///     pub fn get<Q>(&self, k: &Q) -> Option<&V>\n+///         where K: Borrow<Q>,\n+///               Q: Hash + Eq + ?Sized\n+///     {\n+///         # unimplemented!()\n+///         // ...\n+///     }\n+/// }\n+/// ```\n+///\n+/// The entire hash map is generic over the stored type for the key, `K`.\n+/// When inserting a value, the map is given such a `K` and needs to find\n+/// the correct hash bucket and check if the key is already present based\n+/// on that `K` value. It therefore requires `K: Hash + Eq`.\n+///\n+/// In order to search for a value based on the key\u2019s data, the `get` method\n+/// is generic over some type `Q`. Technically, it needs to convert that `Q`\n+/// into a `K` in order to use `K`\u2019s [`Hash`] implementation to be able to\n+/// arrive at the same hash value as during insertion in order to look into\n+/// the right hash bucket. Since `K` is some kind of owned value, this likely\n+/// would involve cloning and isn\u2019t really practical.\n+///\n+/// Instead, `get` relies on `Q`\u2019s implementation of `Hash` and uses `Borrow`\n+/// to indicate that `K`\u2019s implementation of `Hash` must produce the same\n+/// result as `Q`\u2019s by demanding that `K: Borrow<Q>`. \n+///\n+/// As a consequence, the hash map breaks if a `K` wrapping a `Q` value\n+/// produces a different hash than `Q`. For instance, image you have a\n+/// type that wraps a string but compares ASCII letters case-insensitive:\n+/// \n+/// ```\n+/// use std::ascii::AsciiExt;\n+///\n+/// pub struct CIString(String);\n+///\n+/// impl PartialEq for CIString {\n+///     fn eq(&self, other: &Self) -> bool {\n+///         self.0.eq_ignore_ascii_case(&other.0)\n+///     }\n+/// }\n ///\n-/// In general, there may be several ways to \"borrow\" a piece of data.  The\n-/// typical ways of borrowing a type `T` are `&T` (a shared borrow) and `&mut T`\n-/// (a mutable borrow). But types like `Vec<T>` provide additional kinds of\n-/// borrows: the borrowed slices `&[T]` and `&mut [T]`.\n+/// impl Eq for CIString { }\n+/// ```\n ///\n-/// When writing generic code, it is often desirable to abstract over all ways\n-/// of borrowing data from a given type. That is the role of the `Borrow`\n-/// trait: if `T: Borrow<U>`, then `&U` can be borrowed from `&T`.  A given\n-/// type can be borrowed as multiple different types. In particular, `Vec<T>:\n-/// Borrow<Vec<T>>` and `Vec<T>: Borrow<[T]>`.\n+/// Because two equal values need to produce the same hash value, the\n+/// implementation of `Hash` need to reflect that, too:\n ///\n-/// If you are implementing `Borrow` and both `Self` and `Borrowed` implement\n-/// `Hash`, `Eq`, and/or `Ord`, they must produce the same result.\n+/// ```\n+/// # use std::ascii::AsciiExt;\n+/// # use std::hash::{Hash, Hasher};\n+/// # pub struct CIString(String);\n+/// impl Hash for CIString {\n+///     fn hash<H: Hasher>(&self, state: &mut H) {\n+///         for c in self.0.as_bytes() {\n+///             c.to_ascii_lowercase().hash(state)\n+///         }\n+///     }\n+/// }\n+/// ```\n ///\n-/// `Borrow` is very similar to, but different than, `AsRef`. See\n-/// [the book][book] for more.\n+/// Can `CIString` implement `Borrow<str>`? It certainly can provide a\n+/// reference to a string slice via its contained owned string. But because\n+/// its `Hash` implementation differs, it cannot fulfill the guarantee for\n+/// `Borrow` that all common trait implementations must behave the same way\n+/// and must not, in fact, implement `Borrow<str>`. If it wants to allow\n+/// others access to the underlying `str`, it can do that via `AsRef<str>`\n+/// which doesn\u2019t carry any such restrictions.\n ///\n-/// [book]: ../../book/first-edition/borrow-and-asref.html\n+/// [`Hash`]: ../hash/trait.Hash.html\n+/// [`HashMap`]: ../collections/struct.HashMap.html\n+/// [`String`]: ../string/struct.String.html\n+/// [`str`]: ../primitive.str.html\n+/// \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Borrow<Borrowed: ?Sized> {\n     /// Immutably borrows from an owned value."}]}