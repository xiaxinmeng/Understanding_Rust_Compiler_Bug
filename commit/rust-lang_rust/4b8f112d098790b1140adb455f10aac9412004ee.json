{"sha": "4b8f112d098790b1140adb455f10aac9412004ee", "node_id": "C_kwDOAAsO6NoAKDRiOGYxMTJkMDk4NzkwYjExNDBhZGI0NTVmMTBhYWM5NDEyMDA0ZWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-13T18:33:44Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-13T19:06:22Z"}, "message": "Use is_str instead of string kind comparison", "tree": {"sha": "15cf8ba5c62e1c85fede90b9c45db9461aab5029", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15cf8ba5c62e1c85fede90b9c45db9461aab5029"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b8f112d098790b1140adb455f10aac9412004ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b8f112d098790b1140adb455f10aac9412004ee", "html_url": "https://github.com/rust-lang/rust/commit/4b8f112d098790b1140adb455f10aac9412004ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b8f112d098790b1140adb455f10aac9412004ee/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3077fbc090049d9ac3c6299e5e3c08da09f2e08", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3077fbc090049d9ac3c6299e5e3c08da09f2e08", "html_url": "https://github.com/rust-lang/rust/commit/b3077fbc090049d9ac3c6299e5e3c08da09f2e08"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "a22285058d48e73e1b20f0bafcb41ef55872294e", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b8f112d098790b1140adb455f10aac9412004ee/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8f112d098790b1140adb455f10aac9412004ee/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=4b8f112d098790b1140adb455f10aac9412004ee", "patch": "@@ -33,7 +33,7 @@ pub(super) fn check<'tcx>(\n                     if (method_name.ident.name == sym::as_str || method_name.ident.name == sym::as_ref) && {\n                         let arg_type = cx.typeck_results().expr_ty(receiver);\n                         let base_type = arg_type.peel_refs();\n-                        *base_type.kind() == ty::Str || is_type_lang_item(cx, base_type, hir::LangItem::String)\n+                        base_type.is_str() || is_type_lang_item(cx, base_type, hir::LangItem::String)\n                     } {\n                         receiver\n                     } else {\n@@ -54,7 +54,7 @@ pub(super) fn check<'tcx>(\n             return false;\n         }\n         if let ty::Ref(_, ty, ..) = arg_ty.kind() {\n-            if *ty.kind() == ty::Str && can_be_static_str(cx, arg) {\n+            if ty.is_str() && can_be_static_str(cx, arg) {\n                 return false;\n             }\n         };"}, {"sha": "afdb8ce94ac43a1196929eaf41ed0dbaa90a572d", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b8f112d098790b1140adb455f10aac9412004ee/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8f112d098790b1140adb455f10aac9412004ee/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=4b8f112d098790b1140adb455f10aac9412004ee", "patch": "@@ -8,7 +8,6 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::PatKind;\n use rustc_lint::LateContext;\n-use rustc_middle::ty;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n \n@@ -108,7 +107,7 @@ pub(super) fn check<'tcx>(\n             if is_type_lang_item(cx, self_ty, hir::LangItem::String) {\n                 true\n             } else {\n-                *self_ty.kind() == ty::Str\n+                self_ty.is_str()\n             }\n         };\n         if_chain! {"}, {"sha": "4d704ec39ebb15941fcab6fe6981490ba7b98e1c", "filename": "clippy_lints/src/methods/single_char_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b8f112d098790b1140adb455f10aac9412004ee/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8f112d098790b1140adb455f10aac9412004ee/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs?ref=4b8f112d098790b1140adb455f10aac9412004ee", "patch": "@@ -47,7 +47,7 @@ pub(super) fn check(\n     for &(method, pos) in &PATTERN_METHODS {\n         if_chain! {\n             if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty_adjusted(receiver).kind();\n-            if *ty.kind() == ty::Str;\n+            if ty.is_str();\n             if method_name.as_str() == method && args.len() > pos;\n             let arg = &args[pos];\n             let mut applicability = Applicability::MachineApplicable;"}, {"sha": "2c20c6d752d700686b016e3c54dc81df7655a7fc", "filename": "clippy_lints/src/methods/string_extend_chars.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b8f112d098790b1140adb455f10aac9412004ee/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8f112d098790b1140adb455f10aac9412004ee/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs?ref=4b8f112d098790b1140adb455f10aac9412004ee", "patch": "@@ -5,7 +5,6 @@ use clippy_utils::ty::is_type_lang_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_middle::ty;\n \n use super::STRING_EXTEND_CHARS;\n \n@@ -17,7 +16,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n     if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n         let target = &arglists[0].0;\n         let self_ty = cx.typeck_results().expr_ty(target).peel_refs();\n-        let ref_str = if *self_ty.kind() == ty::Str {\n+        let ref_str = if self_ty.is_str() {\n             if matches!(target.kind, hir::ExprKind::Index(..)) {\n                 \"&\"\n             } else {"}, {"sha": "b2f4b310915a6fa5b40549c86363fd97b966e84e", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b8f112d098790b1140adb455f10aac9412004ee/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8f112d098790b1140adb455f10aac9412004ee/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=4b8f112d098790b1140adb455f10aac9412004ee", "patch": "@@ -190,7 +190,7 @@ impl<'tcx> LateLintPass<'tcx> for StringAdd {\n             },\n             ExprKind::Index(target, _idx) => {\n                 let e_ty = cx.typeck_results().expr_ty(target).peel_refs();\n-                if matches!(e_ty.kind(), ty::Str) || is_type_lang_item(cx, e_ty, LangItem::String) {\n+                if e_ty.is_str() || is_type_lang_item(cx, e_ty, LangItem::String) {\n                     span_lint(\n                         cx,\n                         STRING_SLICE,\n@@ -407,7 +407,7 @@ impl<'tcx> LateLintPass<'tcx> for StrToString {\n             if path.ident.name == sym::to_string;\n             let ty = cx.typeck_results().expr_ty(self_arg);\n             if let ty::Ref(_, ty, ..) = ty.kind();\n-            if *ty.kind() == ty::Str;\n+            if ty.is_str();\n             then {\n                 span_lint_and_help(\n                     cx,"}, {"sha": "426c7253806e394ca362cfb49d40375955afa897", "filename": "clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b8f112d098790b1140adb455f10aac9412004ee/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8f112d098790b1140adb455f10aac9412004ee/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=4b8f112d098790b1140adb455f10aac9412004ee", "patch": "@@ -22,7 +22,8 @@ pub(super) fn check<'tcx>(\n \n     if let (ty::Ref(_, ty_from, from_mutbl), ty::Ref(_, ty_to, to_mutbl)) = (&from_ty.kind(), &to_ty.kind()) {\n         if_chain! {\n-            if let (&ty::Slice(slice_ty), &ty::Str) = (&ty_from.kind(), &ty_to.kind());\n+            if let ty::Slice(slice_ty) = *ty_from.kind();\n+            if ty_to.is_str();\n             if let ty::Uint(ty::UintTy::U8) = slice_ty.kind();\n             if from_mutbl == to_mutbl;\n             then {"}, {"sha": "f293a7a3baeeb94c8706115527917831a66c59f5", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b8f112d098790b1140adb455f10aac9412004ee/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b8f112d098790b1140adb455f10aac9412004ee/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=4b8f112d098790b1140adb455f10aac9412004ee", "patch": "@@ -346,7 +346,7 @@ pub fn is_non_aggregate_primitive_type(ty: Ty<'_>) -> bool {\n pub fn is_recursively_primitive_type(ty: Ty<'_>) -> bool {\n     match *ty.kind() {\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => true,\n-        ty::Ref(_, inner, _) if *inner.kind() == ty::Str => true,\n+        ty::Ref(_, inner, _) if inner.is_str() => true,\n         ty::Array(inner_type, _) | ty::Slice(inner_type) => is_recursively_primitive_type(inner_type),\n         ty::Tuple(inner_types) => inner_types.iter().all(is_recursively_primitive_type),\n         _ => false,"}]}