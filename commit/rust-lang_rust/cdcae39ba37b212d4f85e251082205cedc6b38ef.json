{"sha": "cdcae39ba37b212d4f85e251082205cedc6b38ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkY2FlMzliYTM3YjIxMmQ0Zjg1ZTI1MTA4MjIwNWNlZGM2YjM4ZWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-08T05:51:00Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-08T05:51:00Z"}, "message": "syntax: Remove some more implicit copies", "tree": {"sha": "63654831459b9b964818231083ccf81fb4c5092b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63654831459b9b964818231083ccf81fb4c5092b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdcae39ba37b212d4f85e251082205cedc6b38ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdcae39ba37b212d4f85e251082205cedc6b38ef", "html_url": "https://github.com/rust-lang/rust/commit/cdcae39ba37b212d4f85e251082205cedc6b38ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdcae39ba37b212d4f85e251082205cedc6b38ef/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd85239119ffba1c57a493603d63deed9be60521", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd85239119ffba1c57a493603d63deed9be60521", "html_url": "https://github.com/rust-lang/rust/commit/fd85239119ffba1c57a493603d63deed9be60521"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "0680194ea6b4b079c50b19b28643dd66359bc5fd", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cdcae39ba37b212d4f85e251082205cedc6b38ef/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdcae39ba37b212d4f85e251082205cedc6b38ef/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=cdcae39ba37b212d4f85e251082205cedc6b38ef", "patch": "@@ -34,8 +34,9 @@ fn expand_col(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n fn expand_file(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                _body: ast::mac_body) -> @ast::expr {\n     get_mac_args(cx, sp, arg, 0u, option::some(0u), \"file\");\n-    let loc = codemap::lookup_char_pos(cx.codemap(), sp.lo);\n-    ret make_new_lit(cx, sp, ast::lit_str(loc.file.name));\n+    let { file: @{ name: filename, _ }, _ } =\n+        codemap::lookup_char_pos(cx.codemap(), sp.lo);\n+    ret make_new_lit(cx, sp, ast::lit_str(filename));\n }\n \n fn expand_stringify(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n@@ -66,12 +67,15 @@ fn expand_include_str(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n \n     let file = expr_to_str(cx, args[0], \"#include_str requires a string\");\n \n-    alt io::read_whole_file_str(res_rel_file(cx, sp, file)) {\n-      result::ok(src) { ret make_new_lit(cx, sp, ast::lit_str(src)); }\n+    let res = io::read_whole_file_str(res_rel_file(cx, sp, file));\n+    alt res {\n+      result::ok(_) { /* Continue. */ }\n       result::err(e) {\n-        cx.parse_sess().span_diagnostic.handler().fatal(e)\n+        cx.parse_sess().span_diagnostic.handler().fatal(e);\n       }\n     }\n+\n+    ret make_new_lit(cx, sp, ast::lit_str(result::unwrap(res)));\n }\n \n fn expand_include_bin(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n@@ -93,7 +97,7 @@ fn expand_include_bin(cx: ext_ctxt, sp: codemap::span, arg: ast::mac_arg,\n     }\n }\n \n-fn res_rel_file(cx: ext_ctxt, sp: codemap::span, arg: path) -> path {\n+fn res_rel_file(cx: ext_ctxt, sp: codemap::span, +arg: path) -> path {\n     // NB: relative paths are resolved relative to the compilation unit\n     if !path::path_is_absolute(arg) {\n         let cu = codemap::span_to_filename(sp, cx.codemap());"}, {"sha": "65f7de6ea160867237bc89f789f8b0e526a24681", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cdcae39ba37b212d4f85e251082205cedc6b38ef/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdcae39ba37b212d4f85e251082205cedc6b38ef/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=cdcae39ba37b212d4f85e251082205cedc6b38ef", "patch": "@@ -46,14 +46,11 @@ fn parse_crate_from_crate_file(input: str, cfg: ast::crate_cfg,\n     let lo = p.span.lo;\n     let prefix = path::dirname(p.reader.filemap.name);\n     let leading_attrs = p.parse_inner_attrs_and_next();\n-    let crate_attrs = leading_attrs.inner;\n-    let first_cdir_attr = leading_attrs.next;\n+    let { inner: crate_attrs, next: first_cdir_attr } = leading_attrs;\n     let cdirs = p.parse_crate_directives(token::EOF, first_cdir_attr);\n     sess.chpos = p.reader.chpos;\n     sess.byte_pos = sess.byte_pos + p.reader.pos;\n-    let cx =\n-        @{sess: sess,\n-          cfg: p.cfg};\n+    let cx = @{sess: sess, cfg: /* FIXME: bad */ copy p.cfg};\n     let (companionmod, _) = path::splitext(path::basename(input));\n     let (m, attrs) = eval::eval_crate_directives_to_mod(\n         cx, cdirs, prefix, option::some(companionmod));\n@@ -63,7 +60,7 @@ fn parse_crate_from_crate_file(input: str, cfg: ast::crate_cfg,\n                           {directives: cdirs,\n                            module: m,\n                            attrs: crate_attrs + attrs,\n-                           config: p.cfg});\n+                           config: /* FIXME: bad */ copy p.cfg});\n }\n \n fn parse_crate_from_source_file(input: str, cfg: ast::crate_cfg,\n@@ -131,7 +128,7 @@ fn next_node_id(sess: parse_sess) -> node_id {\n }\n \n fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n-                              name: str, ss: codemap::file_substr,\n+                              +name: str, +ss: codemap::file_substr,\n                               source: @str) -> parser {\n     let ftype = parser::SOURCE_FILE;\n     let filemap = codemap::new_filemap_w_substr\n@@ -143,20 +140,17 @@ fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n     ret parser(sess, cfg, rdr, ftype);\n }\n \n-fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n+fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, +path: str,\n                         ftype: parser::file_type) ->\n    parser {\n-    let src = alt io::read_whole_file_str(path) {\n-      result::ok(src) {\n-        // FIXME: This copy is unfortunate (#2319)\n-        @src\n-      }\n-      result::err(e) {\n-        sess.span_diagnostic.handler().fatal(e)\n-      }\n-    };\n-    let filemap = codemap::new_filemap(path, src,\n-                                       sess.chpos, sess.byte_pos);\n+    let res = io::read_whole_file_str(path);\n+    alt res {\n+      result::ok(_) { /* Continue. */ }\n+      result::err(e) { sess.span_diagnostic.handler().fatal(e); }\n+    }\n+    // FIXME: This copy is unfortunate (#2319).\n+    let src = @copy result::unwrap(res);\n+    let filemap = codemap::new_filemap(path, src, sess.chpos, sess.byte_pos);\n     sess.cm.files.push(filemap);\n     let itr = @interner::mk(str::hash, str::eq);\n     let rdr = lexer::new_reader(sess.span_diagnostic, filemap, itr);"}]}