{"sha": "c9d9616e825fecd4301beaf7bcd9115d5d7d393f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZDk2MTZlODI1ZmVjZDQzMDFiZWFmN2JjZDkxMTVkNWQ3ZDM5M2Y=", "commit": {"author": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-08-24T15:50:21Z"}, "committer": {"name": "Pascal Hertleif", "email": "pascal@technocreatives.com", "date": "2019-08-25T09:07:16Z"}, "message": "Introduce and use `Feature` type for feature gates\n\nThis replaces the ad-hoc tuples used in the different feature gate files\nand unifies their content into a common type, leading to more readable\nmatches and other good stuff that comes from having named fields. It\nalso contains the description of each feature as extracted from the doc\ncomment.", "tree": {"sha": "b467b634be48058b9a492b5a9df202a15b7e6bd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b467b634be48058b9a492b5a9df202a15b7e6bd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9d9616e825fecd4301beaf7bcd9115d5d7d393f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d9616e825fecd4301beaf7bcd9115d5d7d393f", "html_url": "https://github.com/rust-lang/rust/commit/c9d9616e825fecd4301beaf7bcd9115d5d7d393f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9d9616e825fecd4301beaf7bcd9115d5d7d393f/comments", "author": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killercup", "id": 20063, "node_id": "MDQ6VXNlcjIwMDYz", "avatar_url": "https://avatars.githubusercontent.com/u/20063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killercup", "html_url": "https://github.com/killercup", "followers_url": "https://api.github.com/users/killercup/followers", "following_url": "https://api.github.com/users/killercup/following{/other_user}", "gists_url": "https://api.github.com/users/killercup/gists{/gist_id}", "starred_url": "https://api.github.com/users/killercup/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killercup/subscriptions", "organizations_url": "https://api.github.com/users/killercup/orgs", "repos_url": "https://api.github.com/users/killercup/repos", "events_url": "https://api.github.com/users/killercup/events{/privacy}", "received_events_url": "https://api.github.com/users/killercup/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9619a4202bd013f1be2776c328937ddd643e7b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9619a4202bd013f1be2776c328937ddd643e7b7", "html_url": "https://github.com/rust-lang/rust/commit/c9619a4202bd013f1be2776c328937ddd643e7b7"}], "stats": {"total": 121, "additions": 98, "deletions": 23}, "files": [{"sha": "6c0b271c6c5e909dec9d18bcdef3796c6fd27d17", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9616e825fecd4301beaf7bcd9115d5d7d393f/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9616e825fecd4301beaf7bcd9115d5d7d393f/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=c9d9616e825fecd4301beaf7bcd9115d5d7d393f", "patch": "@@ -1,14 +1,24 @@\n //! List of the accepted feature gates.\n \n-use crate::symbol::{Symbol, sym};\n+use crate::symbol::sym;\n+use super::{State, Feature};\n \n macro_rules! declare_features {\n     ($(\n         $(#[doc = $doc:tt])* (accepted, $feature:ident, $ver:expr, $issue:expr, None),\n     )+) => {\n         /// Those language feature has since been Accepted (it was once Active)\n-        pub const ACCEPTED_FEATURES: &[(Symbol, &str, Option<u32>, Option<&str>)] = &[\n-            $((sym::$feature, $ver, $issue, None)),+\n+        pub const ACCEPTED_FEATURES: &[Feature] = &[\n+            $(\n+                Feature {\n+                    state: State::Accepted,\n+                    name: sym::$feature,\n+                    since: $ver,\n+                    issue: $issue,\n+                    edition: None,\n+                    description: concat!($($doc,)*),\n+                }\n+            ),+\n         ];\n     }\n }"}, {"sha": "c947b09fdcb57822b6363976ff90bc6567202c7d", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9616e825fecd4301beaf7bcd9115d5d7d393f/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9616e825fecd4301beaf7bcd9115d5d7d393f/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=c9d9616e825fecd4301beaf7bcd9115d5d7d393f", "patch": "@@ -65,6 +65,16 @@ macro_rules! declare_features {\n     };\n }\n \n+impl Feature {\n+    /// Set this feature in `Features`. Panics if called on a non-active feature.\n+    pub fn set(&self, features: &mut Features, span: Span) {\n+        match self.state {\n+            State::Active { set } => set(features, span),\n+            _ => panic!(\"Called `set` on feature `{}` which is not `active`\", self.name)\n+        }\n+    }\n+}\n+\n // If you change this, please modify `src/doc/unstable-book` as well.\n //\n // Don't ever remove anything from this list; move them to `removed.rs`."}, {"sha": "344e5fd6e46c23814781157031c38df07035b9fd", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9616e825fecd4301beaf7bcd9115d5d7d393f/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9616e825fecd4301beaf7bcd9115d5d7d393f/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=c9d9616e825fecd4301beaf7bcd9115d5d7d393f", "patch": "@@ -1,4 +1,4 @@\n-use super::active::{ACTIVE_FEATURES, Features};\n+use super::{active::{ACTIVE_FEATURES, Features}, Feature, State as FeatureState};\n use super::accepted::ACCEPTED_FEATURES;\n use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n use super::builtin_attrs::{AttributeGate, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n@@ -127,17 +127,16 @@ pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features:\n }\n \n fn find_lang_feature_issue(feature: Symbol) -> Option<u32> {\n-    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.0 == feature) {\n-        let issue = info.2;\n+    if let Some(info) = ACTIVE_FEATURES.iter().find(|t| t.name == feature) {\n         // FIXME (#28244): enforce that active features have issue numbers\n-        // assert!(issue.is_some())\n-        issue\n+        // assert!(info.issue.is_some())\n+        info.issue\n     } else {\n         // search in Accepted, Removed, or Stable Removed features\n         let found = ACCEPTED_FEATURES.iter().chain(REMOVED_FEATURES).chain(STABLE_REMOVED_FEATURES)\n-            .find(|t| t.0 == feature);\n+            .find(|t| t.name == feature);\n         match found {\n-            Some(&(_, _, issue, _)) => issue,\n+            Some(&Feature { issue, .. }) => issue,\n             None => panic!(\"Feature `{}` is not declared anywhere\", feature),\n         }\n     }\n@@ -829,14 +828,18 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                 continue;\n             }\n \n-            let removed = REMOVED_FEATURES.iter().find(|f| name == f.0);\n-            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.0);\n-            if let Some((.., reason)) = removed.or(stable_removed) {\n-                feature_removed(span_handler, mi.span(), *reason);\n-                continue;\n+            let removed = REMOVED_FEATURES.iter().find(|f| name == f.name);\n+            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.name);\n+            if let Some(Feature { state, .. }) = removed.or(stable_removed) {\n+                if let FeatureState::Removed { reason }\n+                | FeatureState::Stabilized { reason } = state\n+                {\n+                    feature_removed(span_handler, mi.span(), *reason);\n+                    continue;\n+                }\n             }\n \n-            if let Some((_, since, ..)) = ACCEPTED_FEATURES.iter().find(|f| name == f.0) {\n+            if let Some(Feature { since, .. }) = ACCEPTED_FEATURES.iter().find(|f| name == f.name) {\n                 let since = Some(Symbol::intern(since));\n                 features.declared_lang_features.push((name, mi.span(), since));\n                 continue;\n@@ -851,8 +854,8 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                 }\n             }\n \n-            if let Some((.., set)) = ACTIVE_FEATURES.iter().find(|f| name == f.0) {\n-                set(&mut features, mi.span());\n+            if let Some(f) = ACTIVE_FEATURES.iter().find(|f| name == f.name) {\n+                f.set(&mut features, mi.span());\n                 features.declared_lang_features.push((name, mi.span(), None));\n                 continue;\n             }"}, {"sha": "1e41667ea411ec9f495459c440516a6820debcd8", "filename": "src/libsyntax/feature_gate/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9616e825fecd4301beaf7bcd9115d5d7d393f/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9616e825fecd4301beaf7bcd9115d5d7d393f/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs?ref=c9d9616e825fecd4301beaf7bcd9115d5d7d393f", "patch": "@@ -18,6 +18,39 @@ mod active;\n mod builtin_attrs;\n mod check;\n \n+use std::fmt;\n+use crate::{edition::Edition, symbol::Symbol};\n+use syntax_pos::Span;\n+\n+#[derive(Clone, Copy)]\n+pub enum State {\n+    Accepted,\n+    Active { set: fn(&mut Features, Span) },\n+    Removed { reason: Option<&'static str> },\n+    Stabilized { reason: Option<&'static str> },\n+}\n+\n+impl fmt::Debug for State {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            State::Accepted { .. } => write!(f, \"accepted\"),\n+            State::Active { .. } => write!(f, \"active\"),\n+            State::Removed { .. } => write!(f, \"removed\"),\n+            State::Stabilized { .. } => write!(f, \"stabilized\"),\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone)]\n+pub struct Feature {\n+    state: State,\n+    name: Symbol,\n+    since: &'static str,\n+    issue: Option<u32>,\n+    edition: Option<Edition>,\n+    description: &'static str,\n+}\n+\n pub use active::{Features, INCOMPLETE_FEATURES};\n pub use builtin_attrs::{\n     AttributeGate, AttributeType, GatedCfg,"}, {"sha": "ad7d69b3e7372e61441e6c8cc5f159c064cfdc4d", "filename": "src/libsyntax/feature_gate/removed.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c9d9616e825fecd4301beaf7bcd9115d5d7d393f/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d9616e825fecd4301beaf7bcd9115d5d7d393f/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs?ref=c9d9616e825fecd4301beaf7bcd9115d5d7d393f", "patch": "@@ -1,23 +1,42 @@\n //! List of the removed feature gates.\n \n-use crate::symbol::{Symbol, sym};\n+use crate::symbol::sym;\n+use super::{State, Feature};\n \n macro_rules! declare_features {\n     ($(\n         $(#[doc = $doc:tt])* (removed, $feature:ident, $ver:expr, $issue:expr, None, $reason:expr),\n     )+) => {\n         /// Represents unstable features which have since been removed (it was once Active)\n-        pub const REMOVED_FEATURES: &[(Symbol, &str, Option<u32>, Option<&str>)] = &[\n-            $((sym::$feature, $ver, $issue, $reason)),+\n+        pub const REMOVED_FEATURES: &[Feature] = &[\n+            $(\n+                Feature {\n+                    state: State::Removed { reason: $reason },\n+                    name: sym::$feature,\n+                    since: $ver,\n+                    issue: $issue,\n+                    edition: None,\n+                    description: concat!($($doc,)*),\n+                }\n+            ),+\n         ];\n     };\n \n     ($(\n         $(#[doc = $doc:tt])* (stable_removed, $feature:ident, $ver:expr, $issue:expr, None),\n     )+) => {\n         /// Represents stable features which have since been removed (it was once Accepted)\n-        pub const STABLE_REMOVED_FEATURES: &[(Symbol, &str, Option<u32>, Option<&str>)] = &[\n-            $((sym::$feature, $ver, $issue, None)),+\n+        pub const STABLE_REMOVED_FEATURES: &[Feature] = &[\n+            $(\n+                Feature {\n+                    state: State::Stabilized { reason: None },\n+                    name: sym::$feature,\n+                    since: $ver,\n+                    issue: $issue,\n+                    edition: None,\n+                    description: concat!($($doc,)*),\n+                }\n+            ),+\n         ];\n     };\n }"}]}