{"sha": "7cfdef6de19a0aaddcc3018baf1031ae54c419f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZmRlZjZkZTE5YTBhYWRkY2MzMDE4YmFmMTAzMWFlNTRjNDE5ZjY=", "commit": {"author": {"name": "nahuakang", "email": "kangnahua@gmail.com", "date": "2021-02-21T16:10:07Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-02T09:14:20Z"}, "message": "Move MinifyingSugg into manual_memcpy", "tree": {"sha": "f28c2e995ac1e62e8f6caa8e059d4844a6820ce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f28c2e995ac1e62e8f6caa8e059d4844a6820ce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cfdef6de19a0aaddcc3018baf1031ae54c419f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cfdef6de19a0aaddcc3018baf1031ae54c419f6", "html_url": "https://github.com/rust-lang/rust/commit/7cfdef6de19a0aaddcc3018baf1031ae54c419f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cfdef6de19a0aaddcc3018baf1031ae54c419f6/comments", "author": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7158c944a4f033f6feb57fbcdbf3453333d892b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7158c944a4f033f6feb57fbcdbf3453333d892b7", "html_url": "https://github.com/rust-lang/rust/commit/7158c944a4f033f6feb57fbcdbf3453333d892b7"}], "stats": {"total": 145, "additions": 72, "deletions": 73}, "files": [{"sha": "13a434aa210d6efaf19f57af968b42a3ac864a7e", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7cfdef6de19a0aaddcc3018baf1031ae54c419f6/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfdef6de19a0aaddcc3018baf1031ae54c419f6/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=7cfdef6de19a0aaddcc3018baf1031ae54c419f6", "patch": "@@ -1,4 +1,4 @@\n-use super::{get_span_of_entire_for_loop, IncrementVisitor, InitializeVisitor, MinifyingSugg};\n+use super::{get_span_of_entire_for_loop, IncrementVisitor, InitializeVisitor};\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n     get_enclosing_block, higher, is_type_diagnostic_item, path_to_local, snippet, span_lint_and_sugg, sugg,\n@@ -194,6 +194,76 @@ fn build_manual_memcpy_suggestion<'tcx>(\n     )\n }\n \n+/// a wrapper of `Sugg`. Besides what `Sugg` do, this removes unnecessary `0`;\n+/// and also, it avoids subtracting a variable from the same one by replacing it with `0`.\n+/// it exists for the convenience of the overloaded operators while normal functions can do the\n+/// same.\n+#[derive(Clone)]\n+struct MinifyingSugg<'a>(Sugg<'a>);\n+\n+impl<'a> MinifyingSugg<'a> {\n+    fn as_str(&self) -> &str {\n+        let Sugg::NonParen(s) | Sugg::MaybeParen(s) | Sugg::BinOp(_, s) = &self.0;\n+        s.as_ref()\n+    }\n+\n+    fn into_sugg(self) -> Sugg<'a> {\n+        self.0\n+    }\n+}\n+\n+impl<'a> From<Sugg<'a>> for MinifyingSugg<'a> {\n+    fn from(sugg: Sugg<'a>) -> Self {\n+        Self(sugg)\n+    }\n+}\n+\n+impl std::ops::Add for &MinifyingSugg<'static> {\n+    type Output = MinifyingSugg<'static>;\n+    fn add(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n+        match (self.as_str(), rhs.as_str()) {\n+            (\"0\", _) => rhs.clone(),\n+            (_, \"0\") => self.clone(),\n+            (_, _) => (&self.0 + &rhs.0).into(),\n+        }\n+    }\n+}\n+\n+impl std::ops::Sub for &MinifyingSugg<'static> {\n+    type Output = MinifyingSugg<'static>;\n+    fn sub(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n+        match (self.as_str(), rhs.as_str()) {\n+            (_, \"0\") => self.clone(),\n+            (\"0\", _) => (-rhs.0.clone()).into(),\n+            (x, y) if x == y => sugg::ZERO.into(),\n+            (_, _) => (&self.0 - &rhs.0).into(),\n+        }\n+    }\n+}\n+\n+impl std::ops::Add<&MinifyingSugg<'static>> for MinifyingSugg<'static> {\n+    type Output = MinifyingSugg<'static>;\n+    fn add(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n+        match (self.as_str(), rhs.as_str()) {\n+            (\"0\", _) => rhs.clone(),\n+            (_, \"0\") => self,\n+            (_, _) => (self.0 + &rhs.0).into(),\n+        }\n+    }\n+}\n+\n+impl std::ops::Sub<&MinifyingSugg<'static>> for MinifyingSugg<'static> {\n+    type Output = MinifyingSugg<'static>;\n+    fn sub(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n+        match (self.as_str(), rhs.as_str()) {\n+            (_, \"0\") => self,\n+            (\"0\", _) => (-rhs.0.clone()).into(),\n+            (x, y) if x == y => sugg::ZERO.into(),\n+            (_, _) => (self.0 - &rhs.0).into(),\n+        }\n+    }\n+}\n+\n /// a wrapper around `MinifyingSugg`, which carries a operator like currying\n /// so that the suggested code become more efficient (e.g. `foo + -bar` `foo - bar`).\n struct Offset {"}, {"sha": "c0191e43dea96ff010fe4a83e646429eb19b8d4d", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 1, "deletions": 72, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7cfdef6de19a0aaddcc3018baf1031ae54c419f6/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cfdef6de19a0aaddcc3018baf1031ae54c419f6/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=7cfdef6de19a0aaddcc3018baf1031ae54c419f6", "patch": "@@ -15,8 +15,7 @@ mod utils;\n mod while_let_loop;\n mod while_let_on_iterator;\n \n-use crate::utils::sugg::Sugg;\n-use crate::utils::{higher, sugg};\n+use crate::utils::higher;\n use rustc_hir::{Expr, ExprKind, LoopSource, Pat};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -596,73 +595,3 @@ fn check_for_loop<'tcx>(\n     same_item_push::detect_same_item_push(cx, pat, arg, body, expr);\n     manual_flatten::check_manual_flatten(cx, pat, arg, body, span);\n }\n-\n-/// a wrapper of `Sugg`. Besides what `Sugg` do, this removes unnecessary `0`;\n-/// and also, it avoids subtracting a variable from the same one by replacing it with `0`.\n-/// it exists for the convenience of the overloaded operators while normal functions can do the\n-/// same.\n-#[derive(Clone)]\n-struct MinifyingSugg<'a>(Sugg<'a>);\n-\n-impl<'a> MinifyingSugg<'a> {\n-    fn as_str(&self) -> &str {\n-        let Sugg::NonParen(s) | Sugg::MaybeParen(s) | Sugg::BinOp(_, s) = &self.0;\n-        s.as_ref()\n-    }\n-\n-    fn into_sugg(self) -> Sugg<'a> {\n-        self.0\n-    }\n-}\n-\n-impl<'a> From<Sugg<'a>> for MinifyingSugg<'a> {\n-    fn from(sugg: Sugg<'a>) -> Self {\n-        Self(sugg)\n-    }\n-}\n-\n-impl std::ops::Add for &MinifyingSugg<'static> {\n-    type Output = MinifyingSugg<'static>;\n-    fn add(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n-        match (self.as_str(), rhs.as_str()) {\n-            (\"0\", _) => rhs.clone(),\n-            (_, \"0\") => self.clone(),\n-            (_, _) => (&self.0 + &rhs.0).into(),\n-        }\n-    }\n-}\n-\n-impl std::ops::Sub for &MinifyingSugg<'static> {\n-    type Output = MinifyingSugg<'static>;\n-    fn sub(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n-        match (self.as_str(), rhs.as_str()) {\n-            (_, \"0\") => self.clone(),\n-            (\"0\", _) => (-rhs.0.clone()).into(),\n-            (x, y) if x == y => sugg::ZERO.into(),\n-            (_, _) => (&self.0 - &rhs.0).into(),\n-        }\n-    }\n-}\n-\n-impl std::ops::Add<&MinifyingSugg<'static>> for MinifyingSugg<'static> {\n-    type Output = MinifyingSugg<'static>;\n-    fn add(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n-        match (self.as_str(), rhs.as_str()) {\n-            (\"0\", _) => rhs.clone(),\n-            (_, \"0\") => self,\n-            (_, _) => (self.0 + &rhs.0).into(),\n-        }\n-    }\n-}\n-\n-impl std::ops::Sub<&MinifyingSugg<'static>> for MinifyingSugg<'static> {\n-    type Output = MinifyingSugg<'static>;\n-    fn sub(self, rhs: &MinifyingSugg<'static>) -> MinifyingSugg<'static> {\n-        match (self.as_str(), rhs.as_str()) {\n-            (_, \"0\") => self,\n-            (\"0\", _) => (-rhs.0.clone()).into(),\n-            (x, y) if x == y => sugg::ZERO.into(),\n-            (_, _) => (self.0 - &rhs.0).into(),\n-        }\n-    }\n-}"}]}