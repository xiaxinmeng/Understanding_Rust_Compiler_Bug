{"sha": "f023f8209040554839dc7bc91d9f796a5ff7f247", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMjNmODIwOTA0MDU1NDgzOWRjN2JjOTFkOWY3OTZhNWZmN2YyNDc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-17T23:58:00Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-08-18T00:15:46Z"}, "message": "Track arguments in typestate\n\nAdd the infrastructure for arguments -- as well as local vars --\nto be deinitialized with move-mode calls. Address Issue #819", "tree": {"sha": "f1e38fd1de2bf83e851a8236ac55a9fbd1abb1ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1e38fd1de2bf83e851a8236ac55a9fbd1abb1ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f023f8209040554839dc7bc91d9f796a5ff7f247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f023f8209040554839dc7bc91d9f796a5ff7f247", "html_url": "https://github.com/rust-lang/rust/commit/f023f8209040554839dc7bc91d9f796a5ff7f247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f023f8209040554839dc7bc91d9f796a5ff7f247/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69d4838169a0794e29fae396684937126d29e1f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/69d4838169a0794e29fae396684937126d29e1f5", "html_url": "https://github.com/rust-lang/rust/commit/69d4838169a0794e29fae396684937126d29e1f5"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "44d48c5037ce36ebdd232b9e819fe6de7a6ff1c4", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f023f8209040554839dc7bc91d9f796a5ff7f247/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f023f8209040554839dc7bc91d9f796a5ff7f247/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=f023f8209040554839dc7bc91d9f796a5ff7f247", "patch": "@@ -109,6 +109,14 @@ fn mk_fn_info(ccx: &crate_ctxt, f: &_fn, tp: &[ty_param], f_sp: &span,\n         next = add_constraint(cx.tcx, sc, next, res_map);\n     }\n \n+    /* Need to add constraints for args too, b/c they\n+    can be deinitialized */\n+    for a:arg in f.decl.inputs {\n+        next = add_constraint(cx.tcx, respan(f_sp,\n+                                             ninit(a.id, a.ident)),\n+                              next, res_map);\n+    }\n+\n     /* add the special i_diverge and i_return constraints\n     (see the type definition for auxiliary::fn_info for an explanation) */\n \n@@ -127,7 +135,8 @@ fn mk_fn_info(ccx: &crate_ctxt, f: &_fn, tp: &[ty_param], f_sp: &span,\n         {constrs: res_map,\n          num_constraints:\n          // add 2 to account for the i_return and i_diverge constraints\n-             vec::len(*cx.cs) + vec::len(f.decl.constraints) + 2u,\n+             vec::len(*cx.cs) + vec::len(f.decl.constraints)\n+                 + vec::len(f.decl.inputs) + 2u,\n          cf: f.decl.cf,\n          i_return: ninit(id, name),\n          i_diverge: ninit(diverges_id, diverges_name),"}, {"sha": "af6614d8debaa96f1983a2809a703eccd63d3d95", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f023f8209040554839dc7bc91d9f796a5ff7f247/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f023f8209040554839dc7bc91d9f796a5ff7f247/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=f023f8209040554839dc7bc91d9f796a5ff7f247", "patch": "@@ -303,10 +303,11 @@ fn handle_update(fcx: &fn_ctxt, parent: &@expr, lhs: &@expr, rhs: &@expr,\n     }\n }\n \n+/* FIXME: Can't deinitialize an upvar -- tests for that? */\n fn handle_var(fcx: &fn_ctxt, rslt: &pre_and_post, id: node_id, name: ident) {\n     let df = node_id_to_def_upvar_strict(fcx, id);\n     alt df {\n-      def_local(d_id) {\n+      def_local(d_id) | def_arg(d_id) {\n         let i = bit_num(fcx, ninit(d_id.node, name));\n         use_var(fcx, d_id.node);\n         require_and_preserve(i, rslt);\n@@ -318,12 +319,12 @@ fn handle_var(fcx: &fn_ctxt, rslt: &pre_and_post, id: node_id, name: ident) {\n fn forget_args_moved_in(fcx: &fn_ctxt, parent: &@expr,\n                         modes: &[ty::mode],\n                         operands: &[@expr]) {\n-    let i = 0;\n+    let i = 0u;\n     for mode: ty::mode in modes {\n         if mode == ty::mo_move {\n             forget_in_postcond(fcx, parent.id, operands.(i).id);\n         }\n-        i += 1;\n+        i += 1u;\n     }\n }\n \n@@ -672,10 +673,12 @@ fn find_pre_post_block(fcx: &fn_ctxt, b: blk) {\n     let nv = num_constraints(fcx.enclosing);\n     fn do_one_(fcx: fn_ctxt, s: &@stmt) {\n         find_pre_post_stmt(fcx, *s);\n-        log \"pre_post for stmt:\";\n-        log_stmt(*s);\n-        log \"is:\";\n-        log_pp(stmt_pp(fcx.ccx, *s));\n+/*\n+        log_err \"pre_post for stmt:\";\n+        log_stmt_err(*s);\n+        log_err \"is:\";\n+        log_pp_err(stmt_pp(fcx.ccx, *s));\n+*/\n     }\n     for s: @stmt in b.node.stmts { do_one_(fcx, s); }\n     fn do_inner_(fcx: fn_ctxt, e: &@expr) { find_pre_post_expr(fcx, e); }"}, {"sha": "b39093d29d8f89f353508662793f9470efc04efc", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f023f8209040554839dc7bc91d9f796a5ff7f247/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f023f8209040554839dc7bc91d9f796a5ff7f247/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=f023f8209040554839dc7bc91d9f796a5ff7f247", "patch": "@@ -165,6 +165,7 @@ fn find_pre_post_state_call(fcx: &fn_ctxt, pres: &prestate, a: &@expr,\n                             id: node_id, ops: &[init_op], bs: &[@expr],\n                             cf: controlflow) -> bool {\n     let changed = find_pre_post_state_expr(fcx, pres, a);\n+    // FIXME: This could be a typestate constraint\n     if vec::len(bs) != vec::len(ops) {\n         fcx.ccx.tcx.sess.span_bug(a.span,\n                                   #fmt(\"mismatched arg lengths: \\\n@@ -605,6 +606,7 @@ fn find_pre_post_state_expr(fcx: &fn_ctxt, pres: &prestate, e: @expr) ->\n fn find_pre_post_state_stmt(fcx: &fn_ctxt, pres: &prestate, s: @stmt)\n     -> bool {\n     let stmt_ann = stmt_to_ann(fcx.ccx, *s);\n+\n /*\n     log_err (\"[\" + fcx.name + \"]\");\n     log_err \"*At beginning: stmt = \";\n@@ -727,8 +729,13 @@ fn find_pre_post_state_fn(fcx: &fn_ctxt, f: &_fn) -> bool {\n     // This ensures that intersect works correctly.\n     kill_all_prestate(fcx, f.body.node.id);\n \n-    // Instantiate any constraints on the arguments so we can use them\n+    // Arguments start out initialized\n     let block_pre = block_prestate(fcx.ccx, f.body);\n+    for a:arg in f.decl.inputs {\n+        set_in_prestate_constr(fcx, ninit(a.id, a.ident), block_pre);\n+    }\n+\n+    // Instantiate any constraints on the arguments so we can use them\n     let tsc;\n     for c: @constr in f.decl.constraints {\n         tsc = ast_constr_to_ts_constr(fcx.ccx.tcx, f.decl.inputs, c);"}, {"sha": "212fa50a5061654a1c8d6b704e962191a07cd228", "filename": "src/test/compile-fail/use-after-send.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f023f8209040554839dc7bc91d9f796a5ff7f247/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f023f8209040554839dc7bc91d9f796a5ff7f247/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs?ref=f023f8209040554839dc7bc91d9f796a5ff7f247", "patch": "@@ -0,0 +1,18 @@\n+// error-pattern: Unsatisfied precondition constraint\n+fn send<~T>(ch : _chan<T>, data : -T) {\n+    log ch;\n+    log data;\n+    fail;\n+}\n+type _chan<T> = int;\n+\n+// Tests that \"log message;\" is flagged as using\n+// message after the send deinitializes it\n+fn test00_start(ch: _chan<int>, message: int, count: int) {\n+    send(ch, message);\n+    log message;\n+}\n+\n+fn main() {\n+    fail;\n+}\n\\ No newline at end of file"}]}