{"sha": "093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5M2VjNzBiMWU0ZGEzZDgxNGExMzdmNWFlYTZmNGZmNzVhZDMzOTk=", "commit": {"author": {"name": "roblabla", "email": "unfiltered@roblab.la", "date": "2019-10-24T15:29:29Z"}, "committer": {"name": "roblabla", "email": "unfiltered@roblab.la", "date": "2019-10-25T13:01:25Z"}, "message": "Add new EFIAPI ABI\n\nAdds a new ABI for the EFIAPI calls. This ABI should reflect the latest\nversion of the UEFI specification at the time of commit (UEFI spec 2.8,\nURL below). The specification says that for x86_64, we should follow the\nwin64 ABI, while on all other supported platforms (ia32, itanium, arm,\narm64 and risc-v), we should follow the C ABI.\n\nTo simplify the implementation, we will simply follow the C ABI on all\nplatforms except x86_64, even those technically unsupported by the UEFI\nspecification.\n\nhttps://uefi.org/sites/default/files/resources/UEFI_Spec_2_8_final.pdf", "tree": {"sha": "22b3526af7282f81e0efd18de1afe3cc7121a824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22b3526af7282f81e0efd18de1afe3cc7121a824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "html_url": "https://github.com/rust-lang/rust/commit/093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/comments", "author": {"login": "roblabla", "id": 1069318, "node_id": "MDQ6VXNlcjEwNjkzMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1069318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roblabla", "html_url": "https://github.com/roblabla", "followers_url": "https://api.github.com/users/roblabla/followers", "following_url": "https://api.github.com/users/roblabla/following{/other_user}", "gists_url": "https://api.github.com/users/roblabla/gists{/gist_id}", "starred_url": "https://api.github.com/users/roblabla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roblabla/subscriptions", "organizations_url": "https://api.github.com/users/roblabla/orgs", "repos_url": "https://api.github.com/users/roblabla/repos", "events_url": "https://api.github.com/users/roblabla/events{/privacy}", "received_events_url": "https://api.github.com/users/roblabla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roblabla", "id": 1069318, "node_id": "MDQ6VXNlcjEwNjkzMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1069318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roblabla", "html_url": "https://github.com/roblabla", "followers_url": "https://api.github.com/users/roblabla/followers", "following_url": "https://api.github.com/users/roblabla/following{/other_user}", "gists_url": "https://api.github.com/users/roblabla/gists{/gist_id}", "starred_url": "https://api.github.com/users/roblabla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roblabla/subscriptions", "organizations_url": "https://api.github.com/users/roblabla/orgs", "repos_url": "https://api.github.com/users/roblabla/repos", "events_url": "https://api.github.com/users/roblabla/events{/privacy}", "received_events_url": "https://api.github.com/users/roblabla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e0007f829661e57d008d2e908c95f6e84b04b25", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0007f829661e57d008d2e908c95f6e84b04b25", "html_url": "https://github.com/rust-lang/rust/commit/8e0007f829661e57d008d2e908c95f6e84b04b25"}], "stats": {"total": 254, "additions": 182, "deletions": 72}, "files": [{"sha": "aad3cd95506b596445dae1376eced3024d0250cf", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "patch": "@@ -80,6 +80,7 @@ impl_stable_hash_for!(enum ::rustc_target::spec::abi::Abi {\n     Msp430Interrupt,\n     X86Interrupt,\n     AmdGpuKernel,\n+    EfiApi,\n     Rust,\n     C,\n     System,"}, {"sha": "e82232ac10f7bbc1f15f6eb9b1687629666b9606", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "patch": "@@ -2596,6 +2596,7 @@ where\n \n             // It's the ABI's job to select this, not ours.\n             System => bug!(\"system abi should be selected elsewhere\"),\n+            EfiApi => bug!(\"eficall abi should be selected elsewhere\"),\n \n             Stdcall => Conv::X86Stdcall,\n             Fastcall => Conv::X86Fastcall,"}, {"sha": "3a24d30966f638be5c3e6ba824c29e923e716e3a", "filename": "src/librustc_target/spec/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibrustc_target%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibrustc_target%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fabi.rs?ref=093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "patch": "@@ -21,6 +21,7 @@ pub enum Abi {\n     Msp430Interrupt,\n     X86Interrupt,\n     AmdGpuKernel,\n+    EfiApi,\n \n     // Multiplatform / generic ABIs\n     Rust,\n@@ -58,6 +59,7 @@ const AbiDatas: &[AbiData] = &[\n     AbiData {abi: Abi::Msp430Interrupt, name: \"msp430-interrupt\", generic: false },\n     AbiData {abi: Abi::X86Interrupt, name: \"x86-interrupt\", generic: false },\n     AbiData {abi: Abi::AmdGpuKernel, name: \"amdgpu-kernel\", generic: false },\n+    AbiData {abi: Abi::EfiApi, name: \"efiapi\", generic: false },\n \n     // Cross-platform ABIs\n     AbiData {abi: Abi::Rust, name: \"Rust\", generic: true },"}, {"sha": "e27220cc2f8a46636d95406b1f44903e0f550803", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "patch": "@@ -905,6 +905,13 @@ impl Target {\n                     abi\n                 }\n             },\n+            Abi::EfiApi => {\n+                if self.arch != \"x86_64\" {\n+                    Abi::Win64\n+                } else {\n+                    Abi::C\n+                }\n+            },\n             abi => abi\n         }\n     }"}, {"sha": "5ca2695fe35ad77f72ee359e2b473f72e5c78e70", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "patch": "@@ -531,6 +531,9 @@ declare_features! (\n     /// Non-object safe trait objects safe to use but cannot be created in safe rust\n     (active, object_safe_for_dispatch, \"1.40.0\", Some(43561), None),\n \n+    /// Allows using the `efiapi` ABI.\n+    (active, abi_efiapi, \"1.40.0\", Some(1), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "e68675a9b8e93f247cd203983b3050ab5badc41e", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "patch": "@@ -234,6 +234,10 @@ impl<'a> PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, abi_amdgpu_kernel, span,\n                                    \"amdgpu-kernel ABI is experimental and subject to change\");\n             },\n+            Abi::EfiApi => {\n+                gate_feature_post!(&self, abi_efiapi, span,\n+                                   \"efiapi ABI is experimental and subject to change\");\n+            },\n             // Stable\n             Abi::Cdecl |\n             Abi::Stdcall |"}, {"sha": "8ba161f55c1fff6b759185db0976df8a07c67490", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "patch": "@@ -110,6 +110,7 @@ symbols! {\n         aarch64_target_feature,\n         abi,\n         abi_amdgpu_kernel,\n+        abi_efiapi,\n         abi_msp430_interrupt,\n         abi_ptx,\n         abi_sysv64,"}, {"sha": "471f572375abc0d2ccc79a004cbd3dab3d7eb195", "filename": "src/test/codegen/abi-efiapi.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs?ref=093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "patch": "@@ -0,0 +1,20 @@\n+// Checks if the correct annotation for the efiapi ABI is passed to llvm.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+#![feature(abi_efiapi)]\n+\n+// CHECK: define win64 i64 @has_efiapi\n+#[no_mangle]\n+#[cfg(target_arch = \"x86_64\")]\n+pub extern \"efiapi\" fn has_efiapi(a: i64) -> i64 {\n+    a * 2\n+}\n+\n+// CHECK: define c i64 @has_efiapi\n+#[no_mangle]\n+#[cfg(not(target_arch = \"x86_64\"))]\n+pub extern \"efiapi\" fn has_efiapi(a: i64) -> i64 {\n+    a * 2\n+}"}, {"sha": "fc2a0b5950e7dd8c42e79863062d7b907f3a7726", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "e89dc4d5a05a572207d8f683b5f74124277edaf8", "filename": "src/test/ui/feature-gates/feature-gate-abi.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs?ref=093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "patch": "@@ -7,6 +7,7 @@\n // gate-test-abi_ptx\n // gate-test-abi_x86_interrupt\n // gate-test-abi_amdgpu_kernel\n+// gate-test-abi_efiapi\n \n // Functions\n extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n@@ -20,6 +21,7 @@ extern \"ptx-kernel\" fn f6() {} //~ ERROR PTX ABIs are experimental and subject t\n extern \"x86-interrupt\" fn f7() {} //~ ERROR x86-interrupt ABI is experimental\n extern \"thiscall\" fn f8() {} //~ ERROR thiscall is experimental and subject to change\n extern \"amdgpu-kernel\" fn f9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+extern \"efiapi\" fn f10() {} //~ ERROR efiapi ABI is experimental and subject to change\n \n // Methods in trait definition\n trait Tr {\n@@ -34,6 +36,7 @@ trait Tr {\n     extern \"x86-interrupt\" fn m7(); //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn m8(); //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn m9(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+    extern \"efiapi\" fn m10(); //~ ERROR efiapi ABI is experimental and subject to change\n \n     extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn dm4() {} //~ ERROR rust-call ABI is subject to change\n@@ -42,6 +45,7 @@ trait Tr {\n     extern \"x86-interrupt\" fn dm7() {} //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn dm8() {} //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn dm9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+    extern \"efiapi\" fn dm10() {} //~ ERROR efiapi ABI is experimental and subject to change\n }\n \n struct S;\n@@ -59,6 +63,7 @@ impl Tr for S {\n     extern \"x86-interrupt\" fn m7() {} //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn m8() {} //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn m9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+    extern \"efiapi\" fn m10() {} //~ ERROR efiapi ABI is experimental and subject to change\n }\n \n // Methods in inherent impl\n@@ -74,6 +79,7 @@ impl S {\n     extern \"x86-interrupt\" fn im7() {} //~ ERROR x86-interrupt ABI is experimental\n     extern \"thiscall\" fn im8() {} //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn im9() {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+    extern \"efiapi\" fn im10() {} //~ ERROR efiapi ABI is experimental and subject to change\n }\n \n // Function pointer types\n@@ -86,6 +92,7 @@ type A6 = extern \"ptx-kernel\" fn (); //~ ERROR PTX ABIs are experimental and sub\n type A7 = extern \"x86-interrupt\" fn(); //~ ERROR x86-interrupt ABI is experimental\n type A8 = extern \"thiscall\" fn(); //~ ERROR thiscall is experimental and subject to change\n type A9 = extern \"amdgpu-kernel\" fn(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+type A10 = extern \"efiapi\" fn(); //~ ERROR efiapi ABI is experimental and subject to change\n \n // Foreign modules\n extern \"rust-intrinsic\" {} //~ ERROR intrinsics are subject to change\n@@ -97,5 +104,6 @@ extern \"ptx-kernel\" {} //~ ERROR PTX ABIs are experimental and subject to change\n extern \"x86-interrupt\" {} //~ ERROR x86-interrupt ABI is experimental\n extern \"thiscall\" {} //~ ERROR thiscall is experimental and subject to change\n extern \"amdgpu-kernel\" {} //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n+extern \"efiapi\" {} //~ ERROR efiapi ABI is experimental and subject to change\n \n fn main() {}"}, {"sha": "22b6ee4cd150493bf4a75bbadf19259d4c6fc8bb", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 133, "deletions": 70, "changes": 203, "blob_url": "https://github.com/rust-lang/rust/blob/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "patch": "@@ -1,13 +1,13 @@\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:12:1\n+  --> $DIR/feature-gate-abi.rs:13:1\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:14:1\n+  --> $DIR/feature-gate-abi.rs:15:1\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,15 +16,15 @@ LL | extern \"platform-intrinsic\" fn f2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:16:1\n+  --> $DIR/feature-gate-abi.rs:17:1\n    |\n LL | extern \"vectorcall\" fn f3() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:17:1\n+  --> $DIR/feature-gate-abi.rs:18:1\n    |\n LL | extern \"rust-call\" fn f4() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,7 +33,7 @@ LL | extern \"rust-call\" fn f4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:18:1\n+  --> $DIR/feature-gate-abi.rs:19:1\n    |\n LL | extern \"msp430-interrupt\" fn f5() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ LL | extern \"msp430-interrupt\" fn f5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:19:1\n+  --> $DIR/feature-gate-abi.rs:20:1\n    |\n LL | extern \"ptx-kernel\" fn f6() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -51,7 +51,7 @@ LL | extern \"ptx-kernel\" fn f6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:20:1\n+  --> $DIR/feature-gate-abi.rs:21:1\n    |\n LL | extern \"x86-interrupt\" fn f7() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,32 +60,41 @@ LL | extern \"x86-interrupt\" fn f7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:21:1\n+  --> $DIR/feature-gate-abi.rs:22:1\n    |\n LL | extern \"thiscall\" fn f8() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:22:1\n+  --> $DIR/feature-gate-abi.rs:23:1\n    |\n LL | extern \"amdgpu-kernel\" fn f9() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:24:1\n+   |\n+LL | extern \"efiapi\" fn f10() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/1\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:26:5\n+  --> $DIR/feature-gate-abi.rs:28:5\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:28:5\n+  --> $DIR/feature-gate-abi.rs:30:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -94,15 +103,15 @@ LL |     extern \"platform-intrinsic\" fn m2();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:30:5\n+  --> $DIR/feature-gate-abi.rs:32:5\n    |\n LL |     extern \"vectorcall\" fn m3();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:31:5\n+  --> $DIR/feature-gate-abi.rs:33:5\n    |\n LL |     extern \"rust-call\" fn m4();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -111,7 +120,7 @@ LL |     extern \"rust-call\" fn m4();\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:32:5\n+  --> $DIR/feature-gate-abi.rs:34:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +129,7 @@ LL |     extern \"msp430-interrupt\" fn m5();\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:33:5\n+  --> $DIR/feature-gate-abi.rs:35:5\n    |\n LL |     extern \"ptx-kernel\" fn m6();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -129,7 +138,7 @@ LL |     extern \"ptx-kernel\" fn m6();\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:34:5\n+  --> $DIR/feature-gate-abi.rs:36:5\n    |\n LL |     extern \"x86-interrupt\" fn m7();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -138,32 +147,41 @@ LL |     extern \"x86-interrupt\" fn m7();\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:35:5\n+  --> $DIR/feature-gate-abi.rs:37:5\n    |\n LL |     extern \"thiscall\" fn m8();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:36:5\n+  --> $DIR/feature-gate-abi.rs:38:5\n    |\n LL |     extern \"amdgpu-kernel\" fn m9();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:39:5\n+   |\n+LL |     extern \"efiapi\" fn m10();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/1\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:38:5\n+  --> $DIR/feature-gate-abi.rs:41:5\n    |\n LL |     extern \"vectorcall\" fn dm3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:39:5\n+  --> $DIR/feature-gate-abi.rs:42:5\n    |\n LL |     extern \"rust-call\" fn dm4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -172,7 +190,7 @@ LL |     extern \"rust-call\" fn dm4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:40:5\n+  --> $DIR/feature-gate-abi.rs:43:5\n    |\n LL |     extern \"msp430-interrupt\" fn dm5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -181,7 +199,7 @@ LL |     extern \"msp430-interrupt\" fn dm5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:41:5\n+  --> $DIR/feature-gate-abi.rs:44:5\n    |\n LL |     extern \"ptx-kernel\" fn dm6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -190,7 +208,7 @@ LL |     extern \"ptx-kernel\" fn dm6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:42:5\n+  --> $DIR/feature-gate-abi.rs:45:5\n    |\n LL |     extern \"x86-interrupt\" fn dm7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -199,32 +217,41 @@ LL |     extern \"x86-interrupt\" fn dm7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:43:5\n+  --> $DIR/feature-gate-abi.rs:46:5\n    |\n LL |     extern \"thiscall\" fn dm8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:44:5\n+  --> $DIR/feature-gate-abi.rs:47:5\n    |\n LL |     extern \"amdgpu-kernel\" fn dm9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:48:5\n+   |\n+LL |     extern \"efiapi\" fn dm10() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/1\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:51:5\n+  --> $DIR/feature-gate-abi.rs:55:5\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:53:5\n+  --> $DIR/feature-gate-abi.rs:57:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -233,15 +260,15 @@ LL |     extern \"platform-intrinsic\" fn m2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:55:5\n+  --> $DIR/feature-gate-abi.rs:59:5\n    |\n LL |     extern \"vectorcall\" fn m3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:56:5\n+  --> $DIR/feature-gate-abi.rs:60:5\n    |\n LL |     extern \"rust-call\" fn m4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -250,7 +277,7 @@ LL |     extern \"rust-call\" fn m4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:57:5\n+  --> $DIR/feature-gate-abi.rs:61:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -259,7 +286,7 @@ LL |     extern \"msp430-interrupt\" fn m5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:58:5\n+  --> $DIR/feature-gate-abi.rs:62:5\n    |\n LL |     extern \"ptx-kernel\" fn m6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -268,7 +295,7 @@ LL |     extern \"ptx-kernel\" fn m6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:59:5\n+  --> $DIR/feature-gate-abi.rs:63:5\n    |\n LL |     extern \"x86-interrupt\" fn m7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -277,32 +304,41 @@ LL |     extern \"x86-interrupt\" fn m7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:60:5\n+  --> $DIR/feature-gate-abi.rs:64:5\n    |\n LL |     extern \"thiscall\" fn m8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:61:5\n+  --> $DIR/feature-gate-abi.rs:65:5\n    |\n LL |     extern \"amdgpu-kernel\" fn m9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n-error[E0658]: intrinsics are subject to change\n+error[E0658]: efiapi ABI is experimental and subject to change\n   --> $DIR/feature-gate-abi.rs:66:5\n    |\n+LL |     extern \"efiapi\" fn m10() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/1\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n+error[E0658]: intrinsics are subject to change\n+  --> $DIR/feature-gate-abi.rs:71:5\n+   |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:68:5\n+  --> $DIR/feature-gate-abi.rs:73:5\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -311,15 +347,15 @@ LL |     extern \"platform-intrinsic\" fn im2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:70:5\n+  --> $DIR/feature-gate-abi.rs:75:5\n    |\n LL |     extern \"vectorcall\" fn im3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:71:5\n+  --> $DIR/feature-gate-abi.rs:76:5\n    |\n LL |     extern \"rust-call\" fn im4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -328,7 +364,7 @@ LL |     extern \"rust-call\" fn im4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:72:5\n+  --> $DIR/feature-gate-abi.rs:77:5\n    |\n LL |     extern \"msp430-interrupt\" fn im5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -337,7 +373,7 @@ LL |     extern \"msp430-interrupt\" fn im5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:73:5\n+  --> $DIR/feature-gate-abi.rs:78:5\n    |\n LL |     extern \"ptx-kernel\" fn im6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -346,7 +382,7 @@ LL |     extern \"ptx-kernel\" fn im6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:74:5\n+  --> $DIR/feature-gate-abi.rs:79:5\n    |\n LL |     extern \"x86-interrupt\" fn im7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -355,32 +391,41 @@ LL |     extern \"x86-interrupt\" fn im7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:75:5\n+  --> $DIR/feature-gate-abi.rs:80:5\n    |\n LL |     extern \"thiscall\" fn im8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:76:5\n+  --> $DIR/feature-gate-abi.rs:81:5\n    |\n LL |     extern \"amdgpu-kernel\" fn im9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:82:5\n+   |\n+LL |     extern \"efiapi\" fn im10() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/1\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:80:11\n+  --> $DIR/feature-gate-abi.rs:86:11\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:81:11\n+  --> $DIR/feature-gate-abi.rs:87:11\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -389,15 +434,15 @@ LL | type A2 = extern \"platform-intrinsic\" fn();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:82:11\n+  --> $DIR/feature-gate-abi.rs:88:11\n    |\n LL | type A3 = extern \"vectorcall\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:83:11\n+  --> $DIR/feature-gate-abi.rs:89:11\n    |\n LL | type A4 = extern \"rust-call\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -406,7 +451,7 @@ LL | type A4 = extern \"rust-call\" fn();\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:84:11\n+  --> $DIR/feature-gate-abi.rs:90:11\n    |\n LL | type A5 = extern \"msp430-interrupt\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -415,7 +460,7 @@ LL | type A5 = extern \"msp430-interrupt\" fn();\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:85:11\n+  --> $DIR/feature-gate-abi.rs:91:11\n    |\n LL | type A6 = extern \"ptx-kernel\" fn ();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -424,7 +469,7 @@ LL | type A6 = extern \"ptx-kernel\" fn ();\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:86:11\n+  --> $DIR/feature-gate-abi.rs:92:11\n    |\n LL | type A7 = extern \"x86-interrupt\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -433,32 +478,41 @@ LL | type A7 = extern \"x86-interrupt\" fn();\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:87:11\n+  --> $DIR/feature-gate-abi.rs:93:11\n    |\n LL | type A8 = extern \"thiscall\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:88:11\n+  --> $DIR/feature-gate-abi.rs:94:11\n    |\n LL | type A9 = extern \"amdgpu-kernel\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:95:12\n+   |\n+LL | type A10 = extern \"efiapi\" fn();\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/1\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:91:1\n+  --> $DIR/feature-gate-abi.rs:98:1\n    |\n LL | extern \"rust-intrinsic\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:92:1\n+  --> $DIR/feature-gate-abi.rs:99:1\n    |\n LL | extern \"platform-intrinsic\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -467,15 +521,15 @@ LL | extern \"platform-intrinsic\" {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:93:1\n+  --> $DIR/feature-gate-abi.rs:100:1\n    |\n LL | extern \"vectorcall\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:94:1\n+  --> $DIR/feature-gate-abi.rs:101:1\n    |\n LL | extern \"rust-call\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n@@ -484,7 +538,7 @@ LL | extern \"rust-call\" {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:95:1\n+  --> $DIR/feature-gate-abi.rs:102:1\n    |\n LL | extern \"msp430-interrupt\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -493,7 +547,7 @@ LL | extern \"msp430-interrupt\" {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:96:1\n+  --> $DIR/feature-gate-abi.rs:103:1\n    |\n LL | extern \"ptx-kernel\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n@@ -502,7 +556,7 @@ LL | extern \"ptx-kernel\" {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:97:1\n+  --> $DIR/feature-gate-abi.rs:104:1\n    |\n LL | extern \"x86-interrupt\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -511,70 +565,79 @@ LL | extern \"x86-interrupt\" {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:98:1\n+  --> $DIR/feature-gate-abi.rs:105:1\n    |\n LL | extern \"thiscall\" {}\n    | ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:99:1\n+  --> $DIR/feature-gate-abi.rs:106:1\n    |\n LL | extern \"amdgpu-kernel\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n+error[E0658]: efiapi ABI is experimental and subject to change\n+  --> $DIR/feature-gate-abi.rs:107:1\n+   |\n+LL | extern \"efiapi\" {}\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/1\n+   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n+\n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:26:32\n+  --> $DIR/feature-gate-abi.rs:28:32\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |                                ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:28:36\n+  --> $DIR/feature-gate-abi.rs:30:36\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |                                    ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:12:33\n+  --> $DIR/feature-gate-abi.rs:13:33\n    |\n LL | extern \"rust-intrinsic\" fn f1() {}\n    |                                 ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:14:37\n+  --> $DIR/feature-gate-abi.rs:15:37\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:51:37\n+  --> $DIR/feature-gate-abi.rs:55:37\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |                                     ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:53:41\n+  --> $DIR/feature-gate-abi.rs:57:41\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |                                         ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:66:38\n+  --> $DIR/feature-gate-abi.rs:71:38\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |                                      ^^\n \n error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n-  --> $DIR/feature-gate-abi.rs:68:42\n+  --> $DIR/feature-gate-abi.rs:73:42\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |                                          ^^\n \n-error: aborting due to 69 previous errors\n+error: aborting due to 76 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "b20226f87e8f8e1f761b823b2a73d7506b3e6793", "filename": "src/test/ui/parser/issue-8537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/093ec70b1e4da3d814a137f5aea6f4ff75ad3399/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr?ref=093ec70b1e4da3d814a137f5aea6f4ff75ad3399", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `invalid-ab_isize`\n LL |   \"invalid-ab_isize\"\n    |   ^^^^^^^^^^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}]}