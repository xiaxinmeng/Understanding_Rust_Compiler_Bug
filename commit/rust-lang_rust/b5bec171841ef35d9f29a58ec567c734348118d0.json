{"sha": "b5bec171841ef35d9f29a58ec567c734348118d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YmVjMTcxODQxZWYzNWQ5ZjI5YTU4ZWM1NjdjNzM0MzQ4MTE4ZDA=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-07-07T09:13:46Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-07-07T09:14:14Z"}, "message": "Add docs to new methods", "tree": {"sha": "ad245cd99a81a3bb139c05fe9c78b327603e7cbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad245cd99a81a3bb139c05fe9c78b327603e7cbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5bec171841ef35d9f29a58ec567c734348118d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5bec171841ef35d9f29a58ec567c734348118d0", "html_url": "https://github.com/rust-lang/rust/commit/b5bec171841ef35d9f29a58ec567c734348118d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5bec171841ef35d9f29a58ec567c734348118d0/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e33dce9c2d549f0c32f7940ffccd0f0de8af74e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e33dce9c2d549f0c32f7940ffccd0f0de8af74e", "html_url": "https://github.com/rust-lang/rust/commit/6e33dce9c2d549f0c32f7940ffccd0f0de8af74e"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "ef101c56ab578716525fb042b72eb0b056988728", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b5bec171841ef35d9f29a58ec567c734348118d0/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5bec171841ef35d9f29a58ec567c734348118d0/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=b5bec171841ef35d9f29a58ec567c734348118d0", "patch": "@@ -255,7 +255,7 @@ impl SelfProfilerRef {\n     /// Start profiling with some event filter for a given event. Profiling continues until the\n     /// TimingGuard returned from this call is dropped.\n     #[inline(always)]\n-    pub fn generic_activity_with_event(&self, event_id: EventId) -> TimingGuard<'_> {\n+    pub fn generic_activity_with_event_id(&self, event_id: EventId) -> TimingGuard<'_> {\n         self.exec(EventFilter::GENERIC_ACTIVITIES, |profiler| {\n             TimingGuard::start(profiler, profiler.generic_activity_event_kind, event_id)\n         })\n@@ -390,7 +390,11 @@ impl SelfProfilerRef {\n         }\n     }\n \n-    pub fn get_or_alloc_cached_string(&self, s: &'static str) -> Option<StringId> {\n+    /// Gets a `StringId` for the given string. This method makes sure that\n+    /// any strings going through it will only be allocated once in the\n+    /// profiling data.\n+    /// Returns `None` if the self-profiling is not enabled.\n+    pub fn get_or_alloc_cached_string(&self, s: &str) -> Option<StringId> {\n         self.profiler.as_ref().map(|p| p.get_or_alloc_cached_string(s))\n     }\n "}, {"sha": "c8a46e974f305e4f6f900746953e2859118c95b1", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5bec171841ef35d9f29a58ec567c734348118d0/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5bec171841ef35d9f29a58ec567c734348118d0/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=b5bec171841ef35d9f29a58ec567c734348118d0", "patch": "@@ -39,6 +39,7 @@ pub struct DepGraph<K: DepKind> {\n     /// The cached event id for profiling node interning. This saves us\n     /// from having to look up the event id every time we intern a node\n     /// which may incur too much overhead.\n+    /// This will be None if self-profiling is disabled.\n     node_intern_event_id: Option<EventId>,\n }\n \n@@ -265,7 +266,7 @@ impl<K: DepKind> DepGraph<K> {\n             // Get timer for profiling `DepNode` interning\n             let node_intern_timer = self\n                 .node_intern_event_id\n-                .map(|eid| dcx.profiler().generic_activity_with_event(eid));\n+                .map(|eid| dcx.profiler().generic_activity_with_event_id(eid));\n             // Intern the new `DepNode`.\n             let (dep_node_index, prev_and_color) = data.current.intern_node(\n                 dcx.profiler(),"}]}