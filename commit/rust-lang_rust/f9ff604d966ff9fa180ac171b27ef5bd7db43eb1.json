{"sha": "f9ff604d966ff9fa180ac171b27ef5bd7db43eb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZmY2MDRkOTY2ZmY5ZmExODBhYzE3MWIyN2VmNWJkN2RiNDNlYjE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-16T18:48:09Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-10-18T16:31:38Z"}, "message": "Make dylib metadata write backend agnostic", "tree": {"sha": "c89de6bce1d43a809b644e072b94518c9ecc14a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c89de6bce1d43a809b644e072b94518c9ecc14a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1", "html_url": "https://github.com/rust-lang/rust/commit/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8243a370d21a6d7b69c8d7fc11d2f2fc3e939297", "url": "https://api.github.com/repos/rust-lang/rust/commits/8243a370d21a6d7b69c8d7fc11d2f2fc3e939297", "html_url": "https://github.com/rust-lang/rust/commit/8243a370d21a6d7b69c8d7fc11d2f2fc3e939297"}], "stats": {"total": 95, "additions": 75, "deletions": 20}, "files": [{"sha": "d67181bd56284466b05c1c1ad3f48fa3b1c6cc54", "filename": "Cargo.lock", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f9ff604d966ff9fa180ac171b27ef5bd7db43eb1", "patch": "@@ -155,6 +155,17 @@ dependencies = [\n  \"target-lexicon 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"cranelift-object\"\n+version = \"0.46.1\"\n+source = \"git+https://github.com/CraneStation/cranelift.git#387593d6c94d291e614c08d7a03f77b40efa451d\"\n+dependencies = [\n+ \"cranelift-codegen 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-module 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"object 0.14.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"target-lexicon 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"cranelift-simplejit\"\n version = \"0.46.1\"\n@@ -332,8 +343,10 @@ name = \"object\"\n version = \"0.14.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"goblin 0.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scroll 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"uuid 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -411,6 +424,7 @@ dependencies = [\n  \"cranelift 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-faerie 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-module 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-object 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-simplejit 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"faerie 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gimli 0.19.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -594,6 +608,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cranelift-frontend 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n \"checksum cranelift-module 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n \"checksum cranelift-native 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n+\"checksum cranelift-object 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n \"checksum cranelift-simplejit 0.46.1 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n \"checksum crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n \"checksum errno 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c2a071601ed01b988f896ab14b95e67335d1eeb50190932a1320f7fe3cadc84e\""}, {"sha": "f3b9e84378867d37fee20dbf827c710b38902c3b", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=f9ff604d966ff9fa180ac171b27ef5bd7db43eb1", "patch": "@@ -14,6 +14,7 @@ crate-type = [\"dylib\"]\n cranelift = { git = \"https://github.com/CraneStation/cranelift.git\" }\n cranelift-module = { git = \"https://github.com/CraneStation/cranelift.git\" }\n cranelift-faerie = { git = \"https://github.com/CraneStation/cranelift.git\" }\n+cranelift-object = { git = \"https://github.com/CraneStation/cranelift.git\" }\n target-lexicon = \"0.8.1\"\n faerie = \"0.11.0\"\n \n@@ -28,14 +29,15 @@ libloading = \"0.5.1\"\n [dependencies.object]\n version = \"0.14.0\"\n default-features = false\n-features = [\"compression\", \"read\", \"std\"] # We don't need WASM support\n+features = [\"compression\", \"read\", \"std\", \"write\"] # We don't need WASM support\n \n # Uncomment to use local checkout of cranelift\n #[patch.\"https://github.com/CraneStation/cranelift.git\"]\n #cranelift = { path = \"../cranelift/cranelift-umbrella\" }\n #cranelift-module = { path = \"../cranelift/cranelift-module\" }\n #cranelift-simplejit = { path = \"../cranelift/cranelift-simplejit\" }\n #cranelift-faerie = { path = \"../cranelift/cranelift-faerie\" }\n+#cranelift-object = { path = \"../cranelift/cranelift-object\" }\n \n #[patch.crates-io]\n #gimli = { path = \"../\" }"}, {"sha": "f070e95f535e0ad23f5bae21fdb15f78c836b273", "filename": "src/backend.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1/src%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1/src%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbackend.rs?ref=f9ff604d966ff9fa180ac171b27ef5bd7db43eb1", "patch": "@@ -0,0 +1,48 @@\n+pub trait Product {\n+    fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>, is_like_osx: bool);\n+}\n+\n+impl Product for faerie::Artifact {\n+    fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>, is_like_osx: bool) {\n+        self\n+            .declare(\".rustc\", faerie::Decl::section(faerie::SectionKind::Data))\n+            .unwrap();\n+        self\n+            .define_with_symbols(\".rustc\", data, {\n+                let mut map = std::collections::BTreeMap::new();\n+                // FIXME implement faerie elf backend section custom symbols\n+                // For MachO this is necessary to prevent the linker from throwing away the .rustc section,\n+                // but for ELF it isn't.\n+                if is_like_osx {\n+                    map.insert(\n+                        symbol_name,\n+                        0,\n+                    );\n+                }\n+                map\n+            })\n+            .unwrap();\n+    }\n+}\n+\n+impl Product for object::write::Object {\n+    fn add_rustc_section(&mut self, symbol_name: String, data: Vec<u8>, is_like_osx: bool) {\n+        let segment = self.segment_name(object::write::StandardSegment::Data).to_vec();\n+        let section_id = self.add_section(segment, b\".rustc\".to_vec(), object::SectionKind::Data);\n+        let offset = self.append_section_data(section_id, &data, 1);\n+        // FIXME implement faerie elf backend section custom symbols\n+        // For MachO this is necessary to prevent the linker from throwing away the .rustc section,\n+        // but for ELF it isn't.\n+        if is_like_osx {\n+            self.add_symbol(object::write::Symbol {\n+                name: symbol_name.into_bytes(),\n+                value: offset,\n+                size: data.len() as u64,\n+                kind: object::SymbolKind::Data,\n+                scope: object::SymbolScope::Compilation,\n+                weak: false,\n+                section: Some(section_id),\n+            });\n+        }\n+    }\n+}"}, {"sha": "7e68f10ede03f59c7c362e8ed69ddb21f2e2f98f", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f9ff604d966ff9fa180ac171b27ef5bd7db43eb1", "patch": "@@ -35,6 +35,7 @@ mod allocator;\n mod analyze;\n mod archive;\n mod base;\n+mod backend;\n mod cast;\n mod codegen_i128;\n mod common;"}, {"sha": "76c86e73853f033f27a5ced2adb14d7c14a9cf8c", "filename": "src/metadata.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1/src%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9ff604d966ff9fa180ac171b27ef5bd7db43eb1/src%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmetadata.rs?ref=f9ff604d966ff9fa180ac171b27ef5bd7db43eb1", "patch": "@@ -9,6 +9,8 @@ use rustc_data_structures::owning_ref::{self, OwningRef};\n use rustc_data_structures::rustc_erase_owner;\n use rustc_target::spec::Target;\n \n+use crate::backend::Product;\n+\n pub struct CraneliftMetadataLoader;\n \n impl MetadataLoader for CraneliftMetadataLoader {\n@@ -51,7 +53,7 @@ impl MetadataLoader for CraneliftMetadataLoader {\n }\n \n // Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n-pub fn write_metadata(tcx: TyCtxt<'_>, artifact: &mut faerie::Artifact) -> EncodedMetadata {\n+pub fn write_metadata<P: Product>(tcx: TyCtxt<'_>, product: &mut P) -> EncodedMetadata {\n     use flate2::write::DeflateEncoder;\n     use flate2::Compression;\n     use std::io::Write;\n@@ -95,24 +97,11 @@ pub fn write_metadata(tcx: TyCtxt<'_>, artifact: &mut faerie::Artifact) -> Encod\n         .write_all(&metadata.raw_data)\n         .unwrap();\n \n-    artifact\n-        .declare(\".rustc\", faerie::Decl::section(faerie::SectionKind::Data))\n-        .unwrap();\n-    artifact\n-        .define_with_symbols(\".rustc\", compressed, {\n-            let mut map = std::collections::BTreeMap::new();\n-            // FIXME implement faerie elf backend section custom symbols\n-            // For MachO this is necessary to prevent the linker from throwing away the .rustc section,\n-            // but for ELF it isn't.\n-            if tcx.sess.target.target.options.is_like_osx {\n-                map.insert(\n-                    rustc::middle::exported_symbols::metadata_symbol_name(tcx),\n-                    0,\n-                );\n-            }\n-            map\n-        })\n-        .unwrap();\n+    product.add_rustc_section(\n+        rustc::middle::exported_symbols::metadata_symbol_name(tcx),\n+        compressed,\n+        tcx.sess.target.target.options.is_like_osx,\n+    );\n \n     metadata\n }"}]}