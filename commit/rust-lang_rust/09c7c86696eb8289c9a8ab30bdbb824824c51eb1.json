{"sha": "09c7c86696eb8289c9a8ab30bdbb824824c51eb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YzdjODY2OTZlYjgyODljOWE4YWIzMGJkYmI4MjQ4MjRjNTFlYjE=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-07-21T20:28:05Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-07-21T20:44:37Z"}, "message": "Resolve types on the server", "tree": {"sha": "d72cc0adb850d0d20774b3b2cffa148f686bc964", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d72cc0adb850d0d20774b3b2cffa148f686bc964"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09c7c86696eb8289c9a8ab30bdbb824824c51eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09c7c86696eb8289c9a8ab30bdbb824824c51eb1", "html_url": "https://github.com/rust-lang/rust/commit/09c7c86696eb8289c9a8ab30bdbb824824c51eb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09c7c86696eb8289c9a8ab30bdbb824824c51eb1/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24784c60df583d1807faa889a84312df1d2e3b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/24784c60df583d1807faa889a84312df1d2e3b22", "html_url": "https://github.com/rust-lang/rust/commit/24784c60df583d1807faa889a84312df1d2e3b22"}], "stats": {"total": 163, "additions": 84, "deletions": 79}, "files": [{"sha": "7d49ebcf461ab3b5b9f3bfde71b59020ea4cc071", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "modified", "additions": 73, "deletions": 53, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/09c7c86696eb8289c9a8ab30bdbb824824c51eb1/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c7c86696eb8289c9a8ab30bdbb824824c51eb1/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=09c7c86696eb8289c9a8ab30bdbb824824c51eb1", "patch": "@@ -1,3 +1,6 @@\n+use crate::{db::RootDatabase, FileId};\n+use hir::{HirDisplay, Ty};\n+use ra_syntax::ast::Pat;\n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n     ast::{self, PatKind, TypeAscriptionOwner},\n@@ -15,63 +18,101 @@ pub struct InlayHint {\n     pub range: TextRange,\n     pub text: SmolStr,\n     pub inlay_kind: InlayKind,\n+    pub inlay_type_string: String,\n }\n \n-pub(crate) fn inlay_hints(file: &SourceFile) -> Vec<InlayHint> {\n-    file.syntax().descendants().map(|node| get_inlay_hints(&node)).flatten().collect()\n+pub(crate) fn inlay_hints(db: &RootDatabase, file_id: FileId, file: &SourceFile) -> Vec<InlayHint> {\n+    file.syntax()\n+        .descendants()\n+        .map(|node| get_inlay_hints(db, file_id, &node).unwrap_or_default())\n+        .flatten()\n+        .collect()\n }\n \n-fn get_inlay_hints(node: &SyntaxNode) -> Vec<InlayHint> {\n+fn get_inlay_hints(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    node: &SyntaxNode,\n+) -> Option<Vec<InlayHint>> {\n     visitor()\n         .visit(|let_statement: ast::LetStmt| {\n             let let_syntax = let_statement.syntax();\n \n             if let_statement.ascribed_type().is_some() {\n-                return Vec::new();\n+                return None;\n             }\n \n-            let pat_range = match let_statement.pat().map(|pat| pat.kind()) {\n-                Some(PatKind::BindPat(bind_pat)) => bind_pat.syntax().text_range(),\n-                Some(PatKind::TuplePat(tuple_pat)) => tuple_pat.syntax().text_range(),\n-                _ => return Vec::new(),\n+            let let_pat = let_statement.pat()?;\n+            let inlay_type_string = get_node_displayable_type(db, file_id, let_syntax, &let_pat)?\n+                .display(db)\n+                .to_string();;\n+\n+            let pat_range = match let_pat.kind() {\n+                PatKind::BindPat(bind_pat) => bind_pat.syntax().text_range(),\n+                PatKind::TuplePat(tuple_pat) => tuple_pat.syntax().text_range(),\n+                _ => return None,\n             };\n \n-            vec![InlayHint {\n+            Some(vec![InlayHint {\n                 range: pat_range,\n                 text: let_syntax.text().to_smol_string(),\n                 inlay_kind: InlayKind::LetBinding,\n-            }]\n+                inlay_type_string,\n+            }])\n         })\n-        .visit(|closure_parameter: ast::LambdaExpr| {\n-            if let Some(param_list) = closure_parameter.param_list() {\n+        .visit(|closure_parameter: ast::LambdaExpr| match closure_parameter.param_list() {\n+            Some(param_list) => Some(\n                 param_list\n                     .params()\n                     .filter(|closure_param| closure_param.ascribed_type().is_none())\n-                    .map(|closure_param| {\n+                    .filter_map(|closure_param| {\n                         let closure_param_syntax = closure_param.syntax();\n-                        InlayHint {\n+                        let inlay_type_string = get_node_displayable_type(\n+                            db,\n+                            file_id,\n+                            closure_param_syntax,\n+                            &closure_param.pat()?,\n+                        )?\n+                        .display(db)\n+                        .to_string();\n+                        Some(InlayHint {\n                             range: closure_param_syntax.text_range(),\n                             text: closure_param_syntax.text().to_smol_string(),\n                             inlay_kind: InlayKind::ClosureParameter,\n-                        }\n+                            inlay_type_string,\n+                        })\n                     })\n-                    .collect()\n-            } else {\n-                Vec::new()\n-            }\n+                    .collect(),\n+            ),\n+            None => None,\n         })\n-        .accept(&node)\n-        .unwrap_or_default()\n+        .accept(&node)?\n+}\n+\n+fn get_node_displayable_type(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    node_syntax: &SyntaxNode,\n+    node_pat: &Pat,\n+) -> Option<Ty> {\n+    let analyzer = hir::SourceAnalyzer::new(db, file_id, node_syntax, None);\n+    analyzer.type_of_pat(db, node_pat).and_then(|resolved_type| {\n+        if let Ty::Apply(_) = resolved_type {\n+            Some(resolved_type)\n+        } else {\n+            None\n+        }\n+    })\n }\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n+    use crate::mock_analysis::single_file;\n     use insta::assert_debug_snapshot_matches;\n \n     #[test]\n     fn test_inlay_hints() {\n-        let file = SourceFile::parse(\n+        let (analysis, file_id) = single_file(\n             r#\"\n struct OuterStruct {}\n \n@@ -99,66 +140,45 @@ fn main() {\n     let (x, c) = (42, 'a');\n     let test = (42, 'a');\n }\n-\n \"#,\n-        )\n-        .ok()\n-        .unwrap();\n-        assert_debug_snapshot_matches!(inlay_hints(&file), @r#\"[\n+        );\n+\n+        assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n         range: [71; 75),\n         text: \"let test = 54;\",\n         inlay_kind: LetBinding,\n-    },\n-    InlayHint {\n-        range: [90; 94),\n-        text: \"let test = InnerStruct {};\",\n-        inlay_kind: LetBinding,\n+        inlay_type_string: \"i32\",\n     },\n     InlayHint {\n         range: [121; 125),\n         text: \"let test = OuterStruct {};\",\n         inlay_kind: LetBinding,\n-    },\n-    InlayHint {\n-        range: [152; 156),\n-        text: \"let test = vec![222];\",\n-        inlay_kind: LetBinding,\n-    },\n-    InlayHint {\n-        range: [178; 186),\n-        text: \"let mut test = Vec::new();\",\n-        inlay_kind: LetBinding,\n-    },\n-    InlayHint {\n-        range: [229; 233),\n-        text: \"let test = test.into_iter().map(|i| i * i).collect::<Vec<_>>();\",\n-        inlay_kind: LetBinding,\n-    },\n-    InlayHint {\n-        range: [258; 259),\n-        text: \"i\",\n-        inlay_kind: ClosureParameter,\n+        inlay_type_string: \"OuterStruct\",\n     },\n     InlayHint {\n         range: [297; 305),\n         text: \"let mut test = 33;\",\n         inlay_kind: LetBinding,\n+        inlay_type_string: \"i32\",\n     },\n     InlayHint {\n         range: [417; 426),\n         text: \"let i_squared = i * i;\",\n         inlay_kind: LetBinding,\n+        inlay_type_string: \"u32\",\n     },\n     InlayHint {\n         range: [496; 502),\n         text: \"let (x, c) = (42, \\'a\\');\",\n         inlay_kind: LetBinding,\n+        inlay_type_string: \"(i32, char)\",\n     },\n     InlayHint {\n         range: [524; 528),\n         text: \"let test = (42, \\'a\\');\",\n         inlay_kind: LetBinding,\n+        inlay_type_string: \"(i32, char)\",\n     },\n ]\"#\n         );"}, {"sha": "16ffb03ce929b40f7ecc1e97f202bcbdb2f59906", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09c7c86696eb8289c9a8ab30bdbb824824c51eb1/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c7c86696eb8289c9a8ab30bdbb824824c51eb1/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=09c7c86696eb8289c9a8ab30bdbb824824c51eb1", "patch": "@@ -400,7 +400,7 @@ impl Analysis {\n \n     /// Returns a list of the places in the file where type hints can be displayed.\n     pub fn inlay_hints(&self, file_id: FileId) -> Cancelable<Vec<InlayHint>> {\n-        self.with_db(|db| inlay_hints::inlay_hints(&db.parse(file_id).tree()))\n+        self.with_db(|db| inlay_hints::inlay_hints(db, file_id, &db.parse(file_id).tree()))\n     }\n \n     /// Returns the set of folding ranges."}, {"sha": "e5d2ff832b03c807a1585e41a2e5d746475a9c5f", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/09c7c86696eb8289c9a8ab30bdbb824824c51eb1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c7c86696eb8289c9a8ab30bdbb824824c51eb1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=09c7c86696eb8289c9a8ab30bdbb824824c51eb1", "patch": "@@ -9,8 +9,7 @@ use lsp_types::{\n     TextDocumentIdentifier, TextEdit, WorkspaceEdit,\n };\n use ra_ide_api::{\n-    AssistId, Cancelable, FileId, FilePosition, FileRange, FoldKind, InlayKind, Query,\n-    RunnableKind, Severity,\n+    AssistId, Cancelable, FileId, FilePosition, FileRange, FoldKind, Query, RunnableKind, Severity,\n };\n use ra_prof::profile;\n use ra_syntax::{AstNode, SyntaxKind, TextRange, TextUnit};\n@@ -750,29 +749,15 @@ pub fn handle_code_lens(\n             }),\n     );\n \n-    lenses.extend(\n-        analysis\n-            .inlay_hints(file_id)\n-            .into_iter()\n-            .filter(|hint| hint.inlay_kind == InlayKind::LetBinding)\n-            .filter_map(|inlay_hint| {\n-                let resolved_type = analysis\n-                    .type_of(FileRange { range: inlay_hint.range, file_id })\n-                    .ok()\n-                    .and_then(std::convert::identity)\n-                    .filter(|resolved_type| \"{unknown}\" != resolved_type);\n-                resolved_type.map(|resolved_type| (resolved_type, inlay_hint.range))\n-            })\n-            .map(|(resolved_type, range)| CodeLens {\n-                range: range.conv_with(&line_index),\n-                command: Some(Command {\n-                    title: resolved_type,\n-                    command: String::new(),\n-                    arguments: None,\n-                }),\n-                data: None,\n-            }),\n-    );\n+    lenses.extend(analysis.inlay_hints(file_id)?.into_iter().map(|inlay_hint| CodeLens {\n+        range: inlay_hint.range.conv_with(&line_index),\n+        command: Some(Command {\n+            title: inlay_hint.inlay_type_string,\n+            command: String::new(),\n+            arguments: None,\n+        }),\n+        data: None,\n+    }));\n     Ok(Some(lenses))\n }\n "}]}