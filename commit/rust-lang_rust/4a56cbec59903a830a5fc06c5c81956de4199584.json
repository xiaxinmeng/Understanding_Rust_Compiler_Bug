{"sha": "4a56cbec59903a830a5fc06c5c81956de4199584", "node_id": "C_kwDOAAsO6NoAKDRhNTZjYmVjNTk5MDNhODMwYTVmYzA2YzVjODE5NTZkZTQxOTk1ODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-01T08:57:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-01T08:57:46Z"}, "message": "Auto merge of #94402 - erikdesjardins:revert-coldland, r=nagisa\n\nRevert \"Auto merge of #92419 - erikdesjardins:coldland, r=nagisa\"\n\nShould fix (untested) #94390\n\nReopens #46515, #87055\n\nr? `@ehuss`", "tree": {"sha": "6365b76a9af58b44aa39e77a49184c946578e4eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6365b76a9af58b44aa39e77a49184c946578e4eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a56cbec59903a830a5fc06c5c81956de4199584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a56cbec59903a830a5fc06c5c81956de4199584", "html_url": "https://github.com/rust-lang/rust/commit/4a56cbec59903a830a5fc06c5c81956de4199584", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a56cbec59903a830a5fc06c5c81956de4199584/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "html_url": "https://github.com/rust-lang/rust/commit/6e5a6ffb14fc47051b0a23410c681ad6e4af045f"}, {"sha": "0c784337494223441d53129688bd777ae8df7992", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c784337494223441d53129688bd777ae8df7992", "html_url": "https://github.com/rust-lang/rust/commit/0c784337494223441d53129688bd777ae8df7992"}], "stats": {"total": 118, "additions": 31, "deletions": 87}, "files": [{"sha": "974e59b65ec91c2565d4b53b9ef4b8ccdd8cd483", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=4a56cbec59903a830a5fc06c5c81956de4199584", "patch": "@@ -1403,7 +1403,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         self.cx\n     }\n \n-    fn apply_attrs_to_cleanup_callsite(&mut self, _llret: RValue<'gcc>) {\n+    fn do_not_inline(&mut self, _llret: RValue<'gcc>) {\n         unimplemented!();\n     }\n "}, {"sha": "6c1d4ce8f3c2b78d03ebb4db6b046e76cce329fb", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=4a56cbec59903a830a5fc06c5c81956de4199584", "patch": "@@ -23,7 +23,6 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::Span;\n use rustc_target::abi::{self, call::FnAbi, Align, Size, WrappingRange};\n use rustc_target::spec::{HasTargetSpec, Target};\n-use smallvec::SmallVec;\n use std::borrow::Cow;\n use std::ffi::CStr;\n use std::iter;\n@@ -1179,19 +1178,9 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe { llvm::LLVMBuildZExt(self.llbuilder, val, dest_ty, UNNAMED) }\n     }\n \n-    fn apply_attrs_to_cleanup_callsite(&mut self, llret: &'ll Value) {\n-        let mut attrs = SmallVec::<[_; 2]>::new();\n-\n-        // Cleanup is always the cold path.\n-        attrs.push(llvm::AttributeKind::Cold.create_attr(self.llcx));\n-\n-        // In LLVM versions with deferred inlining (currently, system LLVM < 14),\n-        // inlining drop glue can lead to exponential size blowup, see #41696 and #92110.\n-        if !llvm_util::is_rust_llvm() && llvm_util::get_version() < (14, 0, 0) {\n-            attrs.push(llvm::AttributeKind::NoInline.create_attr(self.llcx));\n-        }\n-\n-        attributes::apply_to_callsite(llret, llvm::AttributePlace::Function, &attrs);\n+    fn do_not_inline(&mut self, llret: &'ll Value) {\n+        let noinline = llvm::AttributeKind::NoInline.create_attr(self.llcx);\n+        attributes::apply_to_callsite(llret, llvm::AttributePlace::Function, &[noinline]);\n     }\n }\n "}, {"sha": "50a9349f46a2359c8d79d0f7ed1ce837ad036453", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=4a56cbec59903a830a5fc06c5c81956de4199584", "patch": "@@ -1933,8 +1933,6 @@ extern \"C\" {\n     pub fn LLVMRustVersionMinor() -> u32;\n     pub fn LLVMRustVersionPatch() -> u32;\n \n-    pub fn LLVMRustIsRustLLVM() -> bool;\n-\n     /// Add LLVM module flags.\n     ///\n     /// In order for Rust-C LTO to work, module flags must be compatible with Clang. What"}, {"sha": "6c974eb9c0b1ef71ab61f475bdd8d2bf5e22eb9e", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=4a56cbec59903a830a5fc06c5c81956de4199584", "patch": "@@ -257,12 +257,6 @@ pub fn get_version() -> (u32, u32, u32) {\n     }\n }\n \n-/// Returns `true` if this LLVM is Rust's bundled LLVM (and not system LLVM).\n-pub fn is_rust_llvm() -> bool {\n-    // Can be called without initializing LLVM\n-    unsafe { llvm::LLVMRustIsRustLLVM() }\n-}\n-\n pub fn print_passes() {\n     // Can be called without initializing LLVM\n     unsafe {"}, {"sha": "a87daa8d6b80bfdce7f110728e54c07d3cbd7f3b", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=4a56cbec59903a830a5fc06c5c81956de4199584", "patch": "@@ -166,7 +166,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n                 bx.invoke(fn_ty, fn_ptr, &llargs, ret_llbb, unwind_block, self.funclet(fx));\n             bx.apply_attrs_callsite(&fn_abi, invokeret);\n             if fx.mir[self.bb].is_cleanup {\n-                bx.apply_attrs_to_cleanup_callsite(invokeret);\n+                bx.do_not_inline(invokeret);\n             }\n \n             if let Some((ret_dest, target)) = destination {\n@@ -178,7 +178,11 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             let llret = bx.call(fn_ty, fn_ptr, &llargs, self.funclet(fx));\n             bx.apply_attrs_callsite(&fn_abi, llret);\n             if fx.mir[self.bb].is_cleanup {\n-                bx.apply_attrs_to_cleanup_callsite(llret);\n+                // Cleanup is always the cold path. Don't inline\n+                // drop glue. Also, when there is a deeply-nested\n+                // struct, there are \"symmetry\" issues that cause\n+                // exponential inlining - see issue #41696.\n+                bx.do_not_inline(llret);\n             }\n \n             if let Some((ret_dest, target)) = destination {\n@@ -1444,7 +1448,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             let llret = bx.call(fn_ty, fn_ptr, &[], None);\n             bx.apply_attrs_callsite(&fn_abi, llret);\n-            bx.apply_attrs_to_cleanup_callsite(llret);\n+            bx.do_not_inline(llret);\n \n             bx.unreachable();\n "}, {"sha": "37f2bfd3c4fbd01c5e256a92d69b66b61bb26c46", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=4a56cbec59903a830a5fc06c5c81956de4199584", "patch": "@@ -479,5 +479,5 @@ pub trait BuilderMethods<'a, 'tcx>:\n     ) -> Self::Value;\n     fn zext(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n \n-    fn apply_attrs_to_cleanup_callsite(&mut self, llret: Self::Value);\n+    fn do_not_inline(&mut self, llret: Self::Value);\n }"}, {"sha": "be3c1b02a05ae3bdcae199588b7448aabd4e4b98", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4a56cbec59903a830a5fc06c5c81956de4199584/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=4a56cbec59903a830a5fc06c5c81956de4199584", "patch": "@@ -694,14 +694,6 @@ extern \"C\" uint32_t LLVMRustVersionMinor() { return LLVM_VERSION_MINOR; }\n \n extern \"C\" uint32_t LLVMRustVersionMajor() { return LLVM_VERSION_MAJOR; }\n \n-extern \"C\" bool LLVMRustIsRustLLVM() {\n-#ifdef LLVM_RUSTLLVM\n-  return true;\n-#else\n-  return false;\n-#endif\n-}\n-\n extern \"C\" void LLVMRustAddModuleFlag(\n     LLVMModuleRef M,\n     Module::ModFlagBehavior MergeBehavior,"}, {"sha": "aa00b7936541e5fbfbca919f5a8503952b774629", "filename": "src/test/codegen/unwind-landingpad-cold.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/src%2Ftest%2Fcodegen%2Funwind-landingpad-cold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/src%2Ftest%2Fcodegen%2Funwind-landingpad-cold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-landingpad-cold.rs?ref=6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "patch": "@@ -1,15 +0,0 @@\n-// no-system-llvm: needs #92110\n-// compile-flags: -Cno-prepopulate-passes\n-#![crate_type = \"lib\"]\n-\n-// This test checks that drop calls in unwind landing pads\n-// get the `cold` attribute.\n-\n-// CHECK-LABEL: @check_cold\n-// CHECK: {{(call|invoke) void .+}}drop_in_place{{.+}} [[ATTRIBUTES:#[0-9]+]]\n-// CHECK: attributes [[ATTRIBUTES]] = { cold }\n-#[no_mangle]\n-pub fn check_cold(f: fn(), x: Box<u32>) {\n-    // this may unwind\n-    f();\n-}"}, {"sha": "ce78d075dd0f4838bb61cc17f21c376400a4caeb", "filename": "src/test/codegen/unwind-landingpad-inline.rs", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/src%2Ftest%2Fcodegen%2Funwind-landingpad-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e5a6ffb14fc47051b0a23410c681ad6e4af045f/src%2Ftest%2Fcodegen%2Funwind-landingpad-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-landingpad-inline.rs?ref=6e5a6ffb14fc47051b0a23410c681ad6e4af045f", "patch": "@@ -1,37 +0,0 @@\n-// no-system-llvm: needs #92110 + patch for Rust alloc/dealloc functions\n-// compile-flags: -Copt-level=3\n-#![crate_type = \"lib\"]\n-\n-// This test checks that we can inline drop_in_place in\n-// unwind landing pads.\n-\n-// Without inlining, the box pointers escape via the call to drop_in_place,\n-// and LLVM will not optimize out the pointer comparison.\n-// With inlining, everything should be optimized out.\n-// See https://github.com/rust-lang/rust/issues/46515\n-// CHECK-LABEL: @check_no_escape_in_landingpad\n-// CHECK: start:\n-// CHECK-NEXT: ret void\n-#[no_mangle]\n-pub fn check_no_escape_in_landingpad(f: fn()) {\n-    let x = &*Box::new(0);\n-    let y = &*Box::new(0);\n-\n-    if x as *const _ == y as *const _ {\n-        f();\n-    }\n-}\n-\n-// Without inlining, the compiler can't tell that\n-// dropping an empty string (in a landing pad) does nothing.\n-// With inlining, the landing pad should be optimized out.\n-// See https://github.com/rust-lang/rust/issues/87055\n-// CHECK-LABEL: @check_eliminate_noop_drop\n-// CHECK: start:\n-// CHECK-NEXT: call void %g()\n-// CHECK-NEXT: ret void\n-#[no_mangle]\n-pub fn check_eliminate_noop_drop(g: fn()) {\n-    let _var = String::new();\n-    g();\n-}"}, {"sha": "18409014bdede3769de714f70f23edab682ac60d", "filename": "src/test/codegen/vec-shrink-panik.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4a56cbec59903a830a5fc06c5c81956de4199584/src%2Ftest%2Fcodegen%2Fvec-shrink-panik.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a56cbec59903a830a5fc06c5c81956de4199584/src%2Ftest%2Fcodegen%2Fvec-shrink-panik.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-shrink-panik.rs?ref=4a56cbec59903a830a5fc06c5c81956de4199584", "patch": "@@ -16,13 +16,32 @@ pub fn shrink_to_fit(vec: &mut Vec<u32>) {\n // CHECK-LABEL: @issue71861\n #[no_mangle]\n pub fn issue71861(vec: Vec<u32>) -> Box<[u32]> {\n+    // CHECK-NOT: panic\n+\n+    // Call to panic_no_unwind in case of double-panic is expected,\n+    // but other panics are not.\n+    // CHECK: cleanup\n+    // CHECK-NEXT: ; call core::panicking::panic_no_unwind\n+    // CHECK-NEXT: panic_no_unwind\n+\n     // CHECK-NOT: panic\n     vec.into_boxed_slice()\n }\n \n // CHECK-LABEL: @issue75636\n #[no_mangle]\n pub fn issue75636<'a>(iter: &[&'a str]) -> Box<[&'a str]> {\n+    // CHECK-NOT: panic\n+\n+    // Call to panic_no_unwind in case of double-panic is expected,\n+    // but other panics are not.\n+    // CHECK: cleanup\n+    // CHECK-NEXT: ; call core::panicking::panic_no_unwind\n+    // CHECK-NEXT: panic_no_unwind\n+\n     // CHECK-NOT: panic\n     iter.iter().copied().collect()\n }\n+\n+// CHECK: ; core::panicking::panic_no_unwind\n+// CHECK: declare void @{{.*}}panic_no_unwind"}]}