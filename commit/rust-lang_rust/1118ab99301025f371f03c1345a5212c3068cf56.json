{"sha": "1118ab99301025f371f03c1345a5212c3068cf56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMThhYjk5MzAxMDI1ZjM3MWYwM2MxMzQ1YTUyMTJjMzA2OGNmNTY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-02T22:31:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-02T22:31:04Z"}, "message": "Rollup merge of #75377 - canova:map_debug_impl, r=dtolnay\n\nFix Debug implementations of some of the HashMap and BTreeMap iterator types\n\nHashMap's `ValuesMut`, BTreeMaps `ValuesMut`, IntoValues and `IntoKeys` structs were printing both keys and values on their Debug implementations. But they are iterators over either keys or values. Irrelevant values should not be visible. With this PR, they only show relevant fields.\nThis fixes #75297.\n\n[Here's an example code.](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=0c79356ed860e347a0c1a205616f93b7) This prints this on nightly:\n```\nValuesMut { inner: IterMut { range: [(1, \"hello\"), (2, \"goodbye\")], length: 2 } }\nIntoKeys { inner: [(1, \"hello\"), (2, \"goodbye\")] }\nIntoValues { inner: [(1, \"hello\"), (2, \"goodbye\")] }\n[(2, \"goodbye\"), (1, \"hello\")]\n```\n\nAfter the patch this example prints these instead:\n```\n[\"hello\", \"goodbye\"]\n[\"hello\", \"goodbye\"]\n[1, 2]\n[\"hello\", \"goodbye\"]\n```\n\nI didn't add test cases for them, since I couldn't see any tests for Debug implementations anywhere. But please let me know if I should add it to a specific place.\n\nr? @dtolnay", "tree": {"sha": "37ad4f9a8a33347ac47a652ff3f1d11e882a2d46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37ad4f9a8a33347ac47a652ff3f1d11e882a2d46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1118ab99301025f371f03c1345a5212c3068cf56", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfd6opCRBK7hj4Ov3rIwAAdHIIAHYdXTlKsbTPnagomUS64pFS\npezeRit8658IIzAU8uNcym09pyzoW7m6dfnxy+u9HsiAmcsAH099GeNTZMvL5HGt\nXjwAAKfLvtrst0HvHjdegiXb3sK22ZhiGNmGjHkfFFmLwPGSn24x/6aCFUPk0y1t\nAy+B6CEj8IowDkRbOfTuwhYVCsRWuJqB25dC/kL2IGz3fml2CkfFE6FlVmCHz7kg\nBB4XUReS457wVilmR4EHIXnVdqK0G+Gco9NH8yI0thil91MJ7OFztJX047wDnjeL\n3GRyvc0BpHYwCXHOKTY5ThScrRpeXZkYpwuJAeIeW6nKLJ5cj+/HRKSxgX3liZ0=\n=fISI\n-----END PGP SIGNATURE-----\n", "payload": "tree 37ad4f9a8a33347ac47a652ff3f1d11e882a2d46\nparent 8876ffc9235dade728e1fbc4be4c85415fdd0bcd\nparent 8faf550e5f7211188bc9560ae459c155fb1aafdf\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601677864 +0200\ncommitter GitHub <noreply@github.com> 1601677864 +0200\n\nRollup merge of #75377 - canova:map_debug_impl, r=dtolnay\n\nFix Debug implementations of some of the HashMap and BTreeMap iterator types\n\nHashMap's `ValuesMut`, BTreeMaps `ValuesMut`, IntoValues and `IntoKeys` structs were printing both keys and values on their Debug implementations. But they are iterators over either keys or values. Irrelevant values should not be visible. With this PR, they only show relevant fields.\nThis fixes #75297.\n\n[Here's an example code.](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=0c79356ed860e347a0c1a205616f93b7) This prints this on nightly:\n```\nValuesMut { inner: IterMut { range: [(1, \"hello\"), (2, \"goodbye\")], length: 2 } }\nIntoKeys { inner: [(1, \"hello\"), (2, \"goodbye\")] }\nIntoValues { inner: [(1, \"hello\"), (2, \"goodbye\")] }\n[(2, \"goodbye\"), (1, \"hello\")]\n```\n\nAfter the patch this example prints these instead:\n```\n[\"hello\", \"goodbye\"]\n[\"hello\", \"goodbye\"]\n[1, 2]\n[\"hello\", \"goodbye\"]\n```\n\nI didn't add test cases for them, since I couldn't see any tests for Debug implementations anywhere. But please let me know if I should add it to a specific place.\n\nr? @dtolnay\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1118ab99301025f371f03c1345a5212c3068cf56", "html_url": "https://github.com/rust-lang/rust/commit/1118ab99301025f371f03c1345a5212c3068cf56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1118ab99301025f371f03c1345a5212c3068cf56/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8876ffc9235dade728e1fbc4be4c85415fdd0bcd", "html_url": "https://github.com/rust-lang/rust/commit/8876ffc9235dade728e1fbc4be4c85415fdd0bcd"}, {"sha": "8faf550e5f7211188bc9560ae459c155fb1aafdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8faf550e5f7211188bc9560ae459c155fb1aafdf", "html_url": "https://github.com/rust-lang/rust/commit/8faf550e5f7211188bc9560ae459c155fb1aafdf"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "2b244a04d22231cb49bb143be1d165b025fd8227", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 51, "deletions": 7, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1118ab99301025f371f03c1345a5212c3068cf56/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1118ab99301025f371f03c1345a5212c3068cf56/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=1118ab99301025f371f03c1345a5212c3068cf56", "patch": "@@ -297,14 +297,23 @@ pub struct IntoIter<K, V> {\n     length: usize,\n }\n \n-#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IntoIter<K, V> {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+impl<K, V> IntoIter<K, V> {\n+    /// Returns an iterator of references over the remaining items.\n+    #[inline]\n+    pub(super) fn iter(&self) -> Iter<'_, K, V> {\n         let range = Range {\n             front: self.front.as_ref().map(|f| f.reborrow()),\n             back: self.back.as_ref().map(|b| b.reborrow()),\n         };\n-        f.debug_list().entries(range).finish()\n+\n+        Iter { range: range, length: self.length }\n+    }\n+}\n+\n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IntoIter<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().entries(self.iter()).finish()\n     }\n }\n \n@@ -351,35 +360,53 @@ impl<K, V: fmt::Debug> fmt::Debug for Values<'_, K, V> {\n ///\n /// [`values_mut`]: BTreeMap::values_mut\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n-#[derive(Debug)]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n }\n \n+#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n+impl<K, V: fmt::Debug> fmt::Debug for ValuesMut<'_, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().entries(self.inner.iter().map(|(_, val)| val)).finish()\n+    }\n+}\n+\n /// An owning iterator over the keys of a `BTreeMap`.\n ///\n /// This `struct` is created by the [`into_keys`] method on [`BTreeMap`].\n /// See its documentation for more.\n ///\n /// [`into_keys`]: BTreeMap::into_keys\n #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n-#[derive(Debug)]\n pub struct IntoKeys<K, V> {\n     inner: IntoIter<K, V>,\n }\n \n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K: fmt::Debug, V> fmt::Debug for IntoKeys<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().entries(self.inner.iter().map(|(key, _)| key)).finish()\n+    }\n+}\n+\n /// An owning iterator over the values of a `BTreeMap`.\n ///\n /// This `struct` is created by the [`into_values`] method on [`BTreeMap`].\n /// See its documentation for more.\n ///\n /// [`into_values`]: BTreeMap::into_values\n #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n-#[derive(Debug)]\n pub struct IntoValues<K, V> {\n     inner: IntoIter<K, V>,\n }\n \n+#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+impl<K, V: fmt::Debug> fmt::Debug for IntoValues<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().entries(self.inner.iter().map(|(_, val)| val)).finish()\n+    }\n+}\n+\n /// An iterator over a sub-range of entries in a `BTreeMap`.\n ///\n /// This `struct` is created by the [`range`] method on [`BTreeMap`]. See its\n@@ -1465,6 +1492,14 @@ impl<K, V> ExactSizeIterator for IterMut<'_, K, V> {\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<K, V> FusedIterator for IterMut<'_, K, V> {}\n \n+impl<'a, K, V> IterMut<'a, K, V> {\n+    /// Returns an iterator of references over the remaining items.\n+    #[inline]\n+    pub(super) fn iter(&self) -> Iter<'_, K, V> {\n+        Iter { range: self.range.iter(), length: self.length }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V> IntoIterator for BTreeMap<K, V> {\n     type Item = (K, V);\n@@ -1949,6 +1984,15 @@ impl<'a, K, V> RangeMut<'a, K, V> {\n     unsafe fn next_unchecked(&mut self) -> (&'a K, &'a mut V) {\n         unsafe { unwrap_unchecked(self.front.as_mut()).next_unchecked() }\n     }\n+\n+    /// Returns an iterator of references over the remaining items.\n+    #[inline]\n+    pub(super) fn iter(&self) -> Range<'_, K, V> {\n+        Range {\n+            front: self.front.as_ref().map(|f| f.reborrow()),\n+            back: self.back.as_ref().map(|b| b.reborrow()),\n+        }\n+    }\n }\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]"}, {"sha": "f12cefffbf662c1bcbde1def4377b624739eb995", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1118ab99301025f371f03c1345a5212c3068cf56/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1118ab99301025f371f03c1345a5212c3068cf56/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=1118ab99301025f371f03c1345a5212c3068cf56", "patch": "@@ -2042,13 +2042,9 @@ impl<K, V> ExactSizeIterator for ValuesMut<'_, K, V> {\n impl<K, V> FusedIterator for ValuesMut<'_, K, V> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<K, V> fmt::Debug for ValuesMut<'_, K, V>\n-where\n-    K: fmt::Debug,\n-    V: fmt::Debug,\n-{\n+impl<K, V: fmt::Debug> fmt::Debug for ValuesMut<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_list().entries(self.inner.iter()).finish()\n+        f.debug_list().entries(self.inner.iter().map(|(_, val)| val)).finish()\n     }\n }\n \n@@ -2076,7 +2072,7 @@ impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n impl<K, V> FusedIterator for IntoKeys<K, V> {}\n \n #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n-impl<K: Debug, V: Debug> fmt::Debug for IntoKeys<K, V> {\n+impl<K: Debug, V> fmt::Debug for IntoKeys<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(k, _)| k)).finish()\n     }\n@@ -2106,7 +2102,7 @@ impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n impl<K, V> FusedIterator for IntoValues<K, V> {}\n \n #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n-impl<K: Debug, V: Debug> fmt::Debug for IntoValues<K, V> {\n+impl<K, V: Debug> fmt::Debug for IntoValues<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(_, v)| v)).finish()\n     }"}]}