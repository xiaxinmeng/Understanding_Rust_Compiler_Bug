{"sha": "45bcb10204b3e2e04521a895c3f4216b5eb641ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YmNiMTAyMDRiM2UyZTA0NTIxYTg5NWMzZjQyMTZiNWViNjQxY2U=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-11-21T19:49:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-29T20:09:10Z"}, "message": "Forbid item macros from occuring where statement macros might occur, and allow item macros to look like statement/expr macros.", "tree": {"sha": "78ca5a668886865b3e04170906762da199a97609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78ca5a668886865b3e04170906762da199a97609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45bcb10204b3e2e04521a895c3f4216b5eb641ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45bcb10204b3e2e04521a895c3f4216b5eb641ce", "html_url": "https://github.com/rust-lang/rust/commit/45bcb10204b3e2e04521a895c3f4216b5eb641ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45bcb10204b3e2e04521a895c3f4216b5eb641ce/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f707f42c847814f60776a3b608c3016b00d7457", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f707f42c847814f60776a3b608c3016b00d7457", "html_url": "https://github.com/rust-lang/rust/commit/0f707f42c847814f60776a3b608c3016b00d7457"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "6c029347b9c3dda030494f41e7dafe409d0313f2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/45bcb10204b3e2e04521a895c3f4216b5eb641ce/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45bcb10204b3e2e04521a895c3f4216b5eb641ce/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=45bcb10204b3e2e04521a895c3f4216b5eb641ce", "patch": "@@ -2253,7 +2253,8 @@ impl Parser {\n \n             let item_attrs = vec::append(first_item_attrs, item_attrs);\n \n-            match self.parse_item_or_view_item(item_attrs, true, false) {\n+            match self.parse_item_or_view_item(item_attrs,\n+                                               true, false, false) {\n               iovi_item(i) => {\n                 let mut hi = i.span.hi;\n                 let decl = @spanned(lo, hi, decl_item(i));\n@@ -2333,7 +2334,7 @@ impl Parser {\n \n         let {attrs_remaining, view_items, items: items, _} =\n             self.parse_items_and_view_items(first_item_attrs,\n-                                            IMPORTS_AND_ITEMS_ALLOWED);\n+                                            IMPORTS_AND_ITEMS_ALLOWED, false);\n \n         for items.each |item| {\n             let decl = @spanned(item.span.lo, item.span.hi, decl_item(*item));\n@@ -2968,7 +2969,8 @@ impl Parser {\n         // Shouldn't be any view items since we've already parsed an item attr\n         let {attrs_remaining, view_items, items: starting_items, _} =\n             self.parse_items_and_view_items(first_item_attrs,\n-                                            VIEW_ITEMS_AND_ITEMS_ALLOWED);\n+                                            VIEW_ITEMS_AND_ITEMS_ALLOWED,\n+                                            true);\n         let mut items: ~[@item] = move starting_items;\n \n         let mut first = true;\n@@ -2980,7 +2982,7 @@ impl Parser {\n             }\n             debug!(\"parse_mod_items: parse_item_or_view_item(attrs=%?)\",\n                    attrs);\n-            match self.parse_item_or_view_item(attrs, true, false) {\n+            match self.parse_item_or_view_item(attrs, true, false, true) {\n               iovi_item(item) => items.push(item),\n               iovi_view_item(view_item) => {\n                 self.span_fatal(view_item.span, ~\"view items must be \\\n@@ -3168,7 +3170,8 @@ impl Parser {\n         // Shouldn't be any view items since we've already parsed an item attr\n         let {attrs_remaining, view_items, items: _, foreign_items} =\n             self.parse_items_and_view_items(first_item_attrs,\n-                                        VIEW_ITEMS_AND_FOREIGN_ITEMS_ALLOWED);\n+                                         VIEW_ITEMS_AND_FOREIGN_ITEMS_ALLOWED,\n+                                            true);\n \n         let mut items: ~[@foreign_item] = move foreign_items;\n         let mut initial_attrs = attrs_remaining;\n@@ -3472,7 +3475,8 @@ impl Parser {\n     }\n \n     fn parse_item_or_view_item(+attrs: ~[attribute], items_allowed: bool,\n-                               foreign_items_allowed: bool)\n+                               foreign_items_allowed: bool,\n+                               macros_allowed: bool)\n                             -> item_or_view_item {\n         assert items_allowed != foreign_items_allowed;\n \n@@ -3581,20 +3585,22 @@ impl Parser {\n                 vis: visibility,\n                 span: mk_sp(lo, self.last_span.hi)\n             });\n-        } else if items_allowed && (!self.is_any_keyword(copy self.token)\n+        } else if macros_allowed && !self.is_any_keyword(copy self.token)\n                 && self.look_ahead(1) == token::NOT\n-                && is_plain_ident(self.look_ahead(2))) {\n+                && (is_plain_ident(self.look_ahead(2))\n+                    || self.look_ahead(2) == token::LPAREN\n+                    || self.look_ahead(2) == token::LBRACE) {\n             // item macro.\n             let pth = self.parse_path_without_tps();\n             self.expect(token::NOT);\n \n             // a 'special' identifier (like what `macro_rules!` uses)\n             // is optional. We should eventually unify invoc syntax\n             // and remove this.\n-            let id = if self.token == token::LPAREN {\n-                token::special_idents::invalid // no special identifier\n-            } else {\n+            let id = if is_plain_ident(self.token) {\n                 self.parse_ident()\n+            } else {\n+                token::special_idents::invalid // no special identifier\n             };\n             let tts = match self.token {\n               token::LPAREN | token::LBRACE => {\n@@ -3624,7 +3630,7 @@ impl Parser {\n     }\n \n     fn parse_item(+attrs: ~[attribute]) -> Option<@ast::item> {\n-        match self.parse_item_or_view_item(attrs, true, false) {\n+        match self.parse_item_or_view_item(attrs, true, false, true) {\n             iovi_none =>\n                 None,\n             iovi_view_item(_) =>\n@@ -3762,7 +3768,8 @@ impl Parser {\n     }\n \n     fn parse_items_and_view_items(+first_item_attrs: ~[attribute],\n-                                  mode: view_item_parse_mode)\n+                                  mode: view_item_parse_mode,\n+                                  macros_allowed: bool)\n                                -> {attrs_remaining: ~[attribute],\n                                    view_items: ~[@view_item],\n                                    items: ~[@item],\n@@ -3789,7 +3796,8 @@ impl Parser {\n         let (view_items, items, foreign_items) = (DVec(), DVec(), DVec());\n         loop {\n             match self.parse_item_or_view_item(attrs, items_allowed,\n-                                               foreign_items_allowed) {\n+                                               foreign_items_allowed,\n+                                               macros_allowed) {\n                 iovi_none =>\n                     break,\n                 iovi_view_item(view_item) => {"}]}