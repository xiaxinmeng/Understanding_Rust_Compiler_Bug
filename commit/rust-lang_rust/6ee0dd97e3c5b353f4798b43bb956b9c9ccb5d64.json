{"sha": "6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64", "node_id": "C_kwDOAAsO6NoAKDZlZTBkZDk3ZTNjNWIzNTNmNDc5OGI0M2JiOTU2YjljOWNjYjVkNjQ", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-19T20:27:57Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-11-19T21:16:42Z"}, "message": "Add unstable `type_ascribe` macro\n\nThis macro serves as a placeholder for future type ascription syntax to\nmake sure that the semantic implementation keeps working.", "tree": {"sha": "382e6991d4a7c7a24502d283a7083994e5d43d44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/382e6991d4a7c7a24502d283a7083994e5d43d44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgbSfWKRQb2tiqhuHtakDJeupmrF\nChDbM0msU+PXaBOk8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQOGzAAe21zvkFUVhWig3EtEAbIsk30Q6lmCsL4BvSjmRncT3hFAPNicAqaoe9CWQls\nI08ITClWsrfXfaFsmRIAE=\n-----END SSH SIGNATURE-----", "payload": "tree 382e6991d4a7c7a24502d283a7083994e5d43d44\nparent 2a434286a96d61e9f55a3144004beec48206bb29\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1668889677 +0100\ncommitter Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1668892602 +0100\n\nAdd unstable `type_ascribe` macro\n\nThis macro serves as a placeholder for future type ascription syntax to\nmake sure that the semantic implementation keeps working.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64", "html_url": "https://github.com/rust-lang/rust/commit/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a434286a96d61e9f55a3144004beec48206bb29", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a434286a96d61e9f55a3144004beec48206bb29", "html_url": "https://github.com/rust-lang/rust/commit/2a434286a96d61e9f55a3144004beec48206bb29"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "75cfac723848502729b868cc6bdb96f2018252af", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64", "patch": "@@ -45,6 +45,7 @@ mod log_syntax;\n mod source_util;\n mod test;\n mod trace_macros;\n+mod type_ascribe;\n mod util;\n \n pub mod asm;\n@@ -92,6 +93,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n         unreachable: edition_panic::expand_unreachable,\n         stringify: source_util::expand_stringify,\n         trace_macros: trace_macros::expand_trace_macros,\n+        type_ascribe: type_ascribe::expand_type_ascribe,\n     }\n \n     register_attr! {"}, {"sha": "72b85af1486384f61f5c2651ac40d054002020d1", "filename": "compiler/rustc_builtin_macros/src/type_ascribe.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/compiler%2Frustc_builtin_macros%2Fsrc%2Ftype_ascribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/compiler%2Frustc_builtin_macros%2Fsrc%2Ftype_ascribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftype_ascribe.rs?ref=6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64", "patch": "@@ -0,0 +1,35 @@\n+use rustc_ast::ptr::P;\n+use rustc_ast::tokenstream::TokenStream;\n+use rustc_ast::{token, Expr, ExprKind, Ty};\n+use rustc_errors::PResult;\n+use rustc_expand::base::{self, DummyResult, ExtCtxt, MacEager};\n+use rustc_span::Span;\n+\n+pub fn expand_type_ascribe(\n+    cx: &mut ExtCtxt<'_>,\n+    span: Span,\n+    tts: TokenStream,\n+) -> Box<dyn base::MacResult + 'static> {\n+    let (expr, ty) = match parse_ascribe(cx, tts) {\n+        Ok(parsed) => parsed,\n+        Err(mut err) => {\n+            err.emit();\n+            return DummyResult::any(span);\n+        }\n+    };\n+\n+    let asc_expr = cx.expr(span, ExprKind::Type(expr, ty));\n+\n+    return MacEager::expr(asc_expr);\n+}\n+\n+fn parse_ascribe<'a>(cx: &mut ExtCtxt<'a>, stream: TokenStream) -> PResult<'a, (P<Expr>, P<Ty>)> {\n+    let mut parser = cx.new_parser_from_tts(stream);\n+\n+    let expr = parser.parse_expr()?;\n+    parser.expect(&token::Comma)?;\n+\n+    let ty = parser.parse_ty()?;\n+\n+    Ok((expr, ty))\n+}"}, {"sha": "5bf11b1a3f432878a3266624aebb6c66a6c953fc", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64", "patch": "@@ -1485,6 +1485,7 @@ symbols! {\n         ty,\n         type_alias_enum_variants,\n         type_alias_impl_trait,\n+        type_ascribe,\n         type_ascription,\n         type_changing_struct_update,\n         type_id,"}, {"sha": "0cd9426209fd2e83a82027e4bc8206812d25353d", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64", "patch": "@@ -1546,6 +1546,29 @@ pub(crate) mod builtin {\n         /* compiler built-in */\n     }\n \n+    /// Unstable placeholder for type ascription.\n+    #[rustc_builtin_macro]\n+    #[unstable(\n+        feature = \"type_ascription\",\n+        issue = \"23416\",\n+        reason = \"placeholder syntax for type ascription\"\n+    )]\n+    #[cfg(not(bootstrap))]\n+    pub macro type_ascribe($expr:expr, $ty:ty) {\n+        /* compiler built-in */\n+    }\n+\n+    /// Unstable placeholder for type ascription.\n+    #[unstable(\n+        feature = \"type_ascription\",\n+        issue = \"23416\",\n+        reason = \"placeholder syntax for type ascription\"\n+    )]\n+    #[cfg(bootstrap)]\n+    pub macro type_ascribe($expr:expr, $ty:ty) {\n+        $expr: $ty\n+    }\n+\n     /// Unstable implementation detail of the `rustc` compiler, do not use.\n     #[rustc_builtin_macro]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "a28d14b14a8e6d8794f88656cdce2bcaad158a92", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64", "patch": "@@ -98,3 +98,10 @@ pub use crate::macros::builtin::cfg_accessible;\n     reason = \"`cfg_eval` is a recently implemented feature\"\n )]\n pub use crate::macros::builtin::cfg_eval;\n+\n+#[unstable(\n+    feature = \"type_ascription\",\n+    issue = \"23416\",\n+    reason = \"placeholder syntax for type ascription\"\n+)]\n+pub use crate::macros::builtin::type_ascribe;"}, {"sha": "4ab4229598ecceb4d662b3a64a74e92f589a2995", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=6ee0dd97e3c5b353f4798b43bb956b9c9ccb5d64", "patch": "@@ -85,6 +85,14 @@ pub use core::prelude::v1::cfg_accessible;\n )]\n pub use core::prelude::v1::cfg_eval;\n \n+// Do not `doc(no_inline)` either.\n+#[unstable(\n+    feature = \"type_ascription\",\n+    issue = \"23416\",\n+    reason = \"placeholder syntax for type ascription\"\n+)]\n+pub use core::prelude::v1::type_ascribe;\n+\n // The file so far is equivalent to src/libcore/prelude/v1.rs,\n // and below to src/liballoc/prelude.rs.\n // Those files are duplicated rather than using glob imports"}]}