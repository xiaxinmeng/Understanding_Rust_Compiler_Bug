{"sha": "a8a69ec15dce8bed5827d02e92cdb9fe2857b829", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YTY5ZWMxNWRjZThiZWQ1ODI3ZDAyZTkyY2RiOWZlMjg1N2I4Mjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-26T09:56:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-26T09:56:03Z"}, "message": "auto merge of #9464 : bmaxa/rust/master, r=cmr\n\nI have tried this fix and it seems to work either with single or multiple trait inheritance.\r\n\r\ntrait Base:Base2 + Base3{\r\nfn foo(&self);\r\n}\r\n\r\ntrait Base2 {\r\nfn baz(&self);\r\n}\r\n\r\ntrait Base3{\r\nfn root(&self);\r\n}\r\n\r\ntrait Super: Base{\r\nfn bar(&self);\r\n}\r\n\r\nstruct X;\r\n\r\nimpl Base for X {\r\nfn foo(&self) {\r\nprintln(\"base foo\");\r\n}\r\n\r\n}\r\nimpl Base2 for X {\r\nfn baz(&self) {\r\nprintln(\"base2 baz\");\r\n}\r\n\r\n}\r\nimpl Base3 for X {\r\nfn root(&self) {\r\nprintln(\"base3 root\");\r\n}\r\n\r\n}\r\nimpl Super for X {\r\nfn bar(&self) {\r\nprintln(\"super bar\");\r\n}\r\n}\r\n\r\nfn main() {\r\nlet n = X;\r\nlet s = &n as &Super;\r\ns.bar();\r\ns.foo(); // super bar\r\ns.baz();\r\ns.root();\r\n}\r\n\r\nbmaxa@maxa:~/examples/rust$ rustc error.rs\r\nbmaxa@maxa:~/examples/rust$ ./error \r\nsuper bar\r\nbase foo\r\nbase2 baz\r\nbase3 root", "tree": {"sha": "983b168964d34754854dbefdff38e62943bdeb05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/983b168964d34754854dbefdff38e62943bdeb05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8a69ec15dce8bed5827d02e92cdb9fe2857b829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a69ec15dce8bed5827d02e92cdb9fe2857b829", "html_url": "https://github.com/rust-lang/rust/commit/a8a69ec15dce8bed5827d02e92cdb9fe2857b829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8a69ec15dce8bed5827d02e92cdb9fe2857b829/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a268a1c4bb3867e4f8b050e07fd216e561b50521", "url": "https://api.github.com/repos/rust-lang/rust/commits/a268a1c4bb3867e4f8b050e07fd216e561b50521", "html_url": "https://github.com/rust-lang/rust/commit/a268a1c4bb3867e4f8b050e07fd216e561b50521"}, {"sha": "56d415aa60b41e171890cb76a323cb95d617b077", "url": "https://api.github.com/repos/rust-lang/rust/commits/56d415aa60b41e171890cb76a323cb95d617b077", "html_url": "https://github.com/rust-lang/rust/commit/56d415aa60b41e171890cb76a323cb95d617b077"}], "stats": {"total": 72, "additions": 66, "deletions": 6}, "files": [{"sha": "60712769de5b89164e599fa98648114d18556bc7", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a8a69ec15dce8bed5827d02e92cdb9fe2857b829/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a69ec15dce8bed5827d02e92cdb9fe2857b829/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=a8a69ec15dce8bed5827d02e92cdb9fe2857b829", "patch": "@@ -372,7 +372,7 @@ impl<'self> LookupContext<'self> {\n     // to a trait and its supertraits.\n     fn get_method_index(&self,\n                         trait_ref: @TraitRef,\n-                        subtrait_id: ast::DefId,\n+                        subtrait: @TraitRef,\n                         n_method: uint) -> uint {\n         let tcx = self.tcx();\n \n@@ -382,15 +382,14 @@ impl<'self> LookupContext<'self> {\n         // we find the trait the method came from, counting up the\n         // methods from them.\n         let mut method_count = 0;\n-        do ty::each_bound_trait_and_supertraits(tcx, &[trait_ref])\n+        do ty::each_bound_trait_and_supertraits(tcx, &[subtrait])\n             |bound_ref| {\n-            if bound_ref.def_id == subtrait_id { false }\n+            if bound_ref.def_id == trait_ref.def_id { false }\n                 else {\n                 method_count += ty::trait_methods(tcx, bound_ref.def_id).len();\n                 true\n             }\n         };\n-\n         return method_count + n_method;\n     }\n \n@@ -418,9 +417,9 @@ impl<'self> LookupContext<'self> {\n         let trait_ref = @TraitRef { def_id: did, substs: rcvr_substs.clone() };\n \n         do self.push_inherent_candidates_from_bounds_inner(&[trait_ref])\n-            |trait_ref, m, method_num, _bound_num| {\n+            |new_trait_ref, m, method_num, _bound_num| {\n             let vtable_index =\n-                self.get_method_index(trait_ref, trait_ref.def_id, method_num);\n+                self.get_method_index(new_trait_ref, trait_ref, method_num);\n             // We need to fix up the transformed self type.\n             let transformed_self_ty =\n                 self.construct_transformed_self_ty_for_object("}, {"sha": "e60f8d4c88895fdc52d2eee4efe75e7c64a9dda6", "filename": "src/test/run-pass/issue-9394-inherited-trait-calls.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a8a69ec15dce8bed5827d02e92cdb9fe2857b829/src%2Ftest%2Frun-pass%2Fissue-9394-inherited-trait-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8a69ec15dce8bed5827d02e92cdb9fe2857b829/src%2Ftest%2Frun-pass%2Fissue-9394-inherited-trait-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9394-inherited-trait-calls.rs?ref=a8a69ec15dce8bed5827d02e92cdb9fe2857b829", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Base: Base2 + Base3{\n+    fn foo(&self) -> ~str;\n+}\n+\n+trait Base2: Base3{\n+    fn baz(&self) -> ~str;\n+}\n+\n+trait Base3{\n+    fn root(&self) -> ~str;\n+}\n+\n+trait Super: Base{\n+    fn bar(&self) -> ~str;\n+}\n+\n+struct X;\n+\n+impl Base for X {\n+    fn foo(&self) -> ~str{\n+        ~\"base foo\"\n+    }\n+\n+}\n+\n+impl Base2 for X {\n+    fn baz(&self) -> ~str{\n+        ~\"base2 baz\"\n+    }\n+}\n+\n+impl Base3 for X {\n+    fn root(&self) -> ~str{\n+        ~\"base3 root\"\n+    }\n+}\n+\n+impl Super for X {\n+    fn bar(&self) -> ~str{\n+        ~\"super bar\"\n+    }\n+}\n+\n+pub fn main() {\n+    let n = X;\n+    let s = &n as &Super;\n+    assert_eq!(s.bar(),~\"super bar\");\n+    assert_eq!(s.foo(),~\"base foo\");\n+    assert_eq!(s.baz(),~\"base2 baz\");\n+    assert_eq!(s.root(),~\"base3 root\");\n+}"}]}