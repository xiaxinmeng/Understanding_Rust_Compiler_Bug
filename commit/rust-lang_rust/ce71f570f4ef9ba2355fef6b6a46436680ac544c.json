{"sha": "ce71f570f4ef9ba2355fef6b6a46436680ac544c", "node_id": "C_kwDOAAsO6NoAKGNlNzFmNTcwZjRlZjliYTIzNTVmZWY2YjZhNDY0MzY2ODBhYzU0NGM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-05-06T00:09:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-06T00:09:33Z"}, "message": "Rollup merge of #111246 - lcnr:no-escaping-bound-vars, r=compiler-errors\n\nforbid escaping bound vars in combine\n\nremoves the `CollectAllMismatches` in favor of a slightly more manual approach.\n\nr? types cc ``@estebank``", "tree": {"sha": "8c7f843c5b5f8406ab1dfd713450088daabda37d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c7f843c5b5f8406ab1dfd713450088daabda37d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce71f570f4ef9ba2355fef6b6a46436680ac544c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVZq9CRBK7hj4Ov3rIwAA4kcIACqVRNB9JdU72WjslIIsED71\nHXvL1p5qkFM7+X3n8BZNaErSj8UoQwKLLT46VRYMlbfkU8C2D4EUwYkRMyPGdtfF\nXGt9hta6NtQylgbIPs9jCuxOql8AfTB+bpgQ9r7cNsImaD+bFrLigmTAZBbsM9UE\n3r1pMitJ0TeNIkbXah9QocUkRexBcT8xpBUX+O8r0AcbboejP1wlIHZktJBOD8N9\n6i7ed6KRWU9Pj2e7yxBIzglqycVfmfkwhrDJ+F+u//MrP68SaJ/ZYYaTVaOtgdLG\nPrpWawFO72/RpG/jX0JdPkoK03Gb9upquxCdHsBy1NzA2a/7b/VXYbWf2SO7GGA=\n=YIIs\n-----END PGP SIGNATURE-----\n", "payload": "tree 8c7f843c5b5f8406ab1dfd713450088daabda37d\nparent bc4a1198fcebc460814e9edd6e492ef99389ccd7\nparent 6691c4cdad06db87eb9fd31183e8b46bbfd741e3\nauthor Yuki Okushi <jtitor@2k36.org> 1683331773 +0900\ncommitter GitHub <noreply@github.com> 1683331773 +0900\n\nRollup merge of #111246 - lcnr:no-escaping-bound-vars, r=compiler-errors\n\nforbid escaping bound vars in combine\n\nremoves the `CollectAllMismatches` in favor of a slightly more manual approach.\n\nr? types cc ``@estebank``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce71f570f4ef9ba2355fef6b6a46436680ac544c", "html_url": "https://github.com/rust-lang/rust/commit/ce71f570f4ef9ba2355fef6b6a46436680ac544c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce71f570f4ef9ba2355fef6b6a46436680ac544c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc4a1198fcebc460814e9edd6e492ef99389ccd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4a1198fcebc460814e9edd6e492ef99389ccd7", "html_url": "https://github.com/rust-lang/rust/commit/bc4a1198fcebc460814e9edd6e492ef99389ccd7"}, {"sha": "6691c4cdad06db87eb9fd31183e8b46bbfd741e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6691c4cdad06db87eb9fd31183e8b46bbfd741e3", "html_url": "https://github.com/rust-lang/rust/commit/6691c4cdad06db87eb9fd31183e8b46bbfd741e3"}], "stats": {"total": 177, "additions": 46, "deletions": 131}, "files": [{"sha": "2a51439b0a973d8e791bd722cc2058e86d58242a", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ce71f570f4ef9ba2355fef6b6a46436680ac544c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce71f570f4ef9ba2355fef6b6a46436680ac544c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=ce71f570f4ef9ba2355fef6b6a46436680ac544c", "patch": "@@ -73,6 +73,8 @@ impl<'tcx> InferCtxt<'tcx> {\n         R: ObligationEmittingRelation<'tcx>,\n     {\n         let a_is_expected = relation.a_is_expected();\n+        debug_assert!(!a.has_escaping_bound_vars());\n+        debug_assert!(!b.has_escaping_bound_vars());\n \n         match (a.kind(), b.kind()) {\n             // Relate integral variables to other types\n@@ -163,6 +165,8 @@ impl<'tcx> InferCtxt<'tcx> {\n         R: ObligationEmittingRelation<'tcx>,\n     {\n         debug!(\"{}.consts({:?}, {:?})\", relation.tag(), a, b);\n+        debug_assert!(!a.has_escaping_bound_vars());\n+        debug_assert!(!b.has_escaping_bound_vars());\n         if a == b {\n             return Ok(a);\n         }\n@@ -238,22 +242,12 @@ impl<'tcx> InferCtxt<'tcx> {\n             (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n                 return self.unify_const_variable(vid, a);\n             }\n-            (ty::ConstKind::Unevaluated(..), _) if self.tcx.lazy_normalization() => {\n-                // FIXME(#59490): Need to remove the leak check to accommodate\n-                // escaping bound variables here.\n-                if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n-                    relation.register_const_equate_obligation(a, b);\n-                }\n+            (ty::ConstKind::Unevaluated(..), _) | (_, ty::ConstKind::Unevaluated(..))\n+                if self.tcx.lazy_normalization() =>\n+            {\n+                relation.register_const_equate_obligation(a, b);\n                 return Ok(b);\n             }\n-            (_, ty::ConstKind::Unevaluated(..)) if self.tcx.lazy_normalization() => {\n-                // FIXME(#59490): Need to remove the leak check to accommodate\n-                // escaping bound variables here.\n-                if !a.has_escaping_bound_vars() && !b.has_escaping_bound_vars() {\n-                    relation.register_const_equate_obligation(a, b);\n-                }\n-                return Ok(a);\n-            }\n             _ => {}\n         }\n "}, {"sha": "7e1dba4ed2626da668a5b97471ac9858477ec44e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/method_chain.rs", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/bc4a1198fcebc460814e9edd6e492ef99389ccd7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4a1198fcebc460814e9edd6e492ef99389ccd7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmethod_chain.rs?ref=bc4a1198fcebc460814e9edd6e492ef99389ccd7", "patch": "@@ -1,102 +0,0 @@\n-use crate::infer::InferCtxt;\n-\n-use rustc_infer::infer::ObligationEmittingRelation;\n-use rustc_infer::traits::PredicateObligations;\n-use rustc_middle::ty::error::TypeError;\n-use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n-\n-pub struct CollectAllMismatches<'a, 'tcx> {\n-    pub infcx: &'a InferCtxt<'tcx>,\n-    pub param_env: ty::ParamEnv<'tcx>,\n-    pub errors: Vec<TypeError<'tcx>>,\n-}\n-\n-impl<'a, 'tcx> TypeRelation<'tcx> for CollectAllMismatches<'a, 'tcx> {\n-    fn tag(&self) -> &'static str {\n-        \"CollectAllMismatches\"\n-    }\n-\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.infcx.tcx\n-    }\n-\n-    fn param_env(&self) -> ty::ParamEnv<'tcx> {\n-        self.param_env\n-    }\n-\n-    fn a_is_expected(&self) -> bool {\n-        true\n-    }\n-\n-    fn relate_with_variance<T: Relate<'tcx>>(\n-        &mut self,\n-        _: ty::Variance,\n-        _: ty::VarianceDiagInfo<'tcx>,\n-        a: T,\n-        b: T,\n-    ) -> RelateResult<'tcx, T> {\n-        self.relate(a, b)\n-    }\n-\n-    fn regions(\n-        &mut self,\n-        a: ty::Region<'tcx>,\n-        _b: ty::Region<'tcx>,\n-    ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n-        Ok(a)\n-    }\n-\n-    fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        self.infcx.probe(|_| {\n-            if a.is_ty_var() || b.is_ty_var() {\n-                Ok(a)\n-            } else {\n-                self.infcx.super_combine_tys(self, a, b).or_else(|e| {\n-                    self.errors.push(e);\n-                    Ok(a)\n-                })\n-            }\n-        })\n-    }\n-\n-    fn consts(\n-        &mut self,\n-        a: ty::Const<'tcx>,\n-        b: ty::Const<'tcx>,\n-    ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n-        self.infcx.probe(|_| {\n-            if a.is_ct_infer() || b.is_ct_infer() {\n-                Ok(a)\n-            } else {\n-                relate::super_relate_consts(self, a, b) // could do something similar here for constants!\n-            }\n-        })\n-    }\n-\n-    fn binders<T: Relate<'tcx>>(\n-        &mut self,\n-        a: ty::Binder<'tcx, T>,\n-        b: ty::Binder<'tcx, T>,\n-    ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {\n-        Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))\n-    }\n-}\n-\n-impl<'tcx> ObligationEmittingRelation<'tcx> for CollectAllMismatches<'_, 'tcx> {\n-    fn alias_relate_direction(&self) -> ty::AliasRelationDirection {\n-        // FIXME(deferred_projection_equality): We really should get rid of this relation.\n-        ty::AliasRelationDirection::Equate\n-    }\n-\n-    fn register_obligations(&mut self, _obligations: PredicateObligations<'tcx>) {\n-        // FIXME(deferred_projection_equality)\n-    }\n-\n-    fn register_predicates(\n-        &mut self,\n-        _obligations: impl IntoIterator<Item: ty::ToPredicate<'tcx>>,\n-    ) {\n-        // FIXME(deferred_projection_equality)\n-    }\n-}"}, {"sha": "afb64da8b61738966ee1171e5b2f96c8e004c054", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce71f570f4ef9ba2355fef6b6a46436680ac544c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce71f570f4ef9ba2355fef6b6a46436680ac544c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ce71f570f4ef9ba2355fef6b6a46436680ac544c", "patch": "@@ -1,5 +1,4 @@\n mod ambiguity;\n-pub mod method_chain;\n pub mod on_unimplemented;\n pub mod suggestions;\n \n@@ -559,6 +558,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             suggest_increasing_limit,\n             |err| {\n                 self.note_obligation_cause_code(\n+                    obligation.cause.body_id,\n                     err,\n                     predicate,\n                     obligation.param_env,\n@@ -1431,6 +1431,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 | ObligationCauseCode::ExprItemObligation(..) = code\n                 {\n                     self.note_obligation_cause_code(\n+                        error.obligation.cause.body_id,\n                         &mut diag,\n                         error.obligation.predicate,\n                         error.obligation.param_env,\n@@ -2544,6 +2545,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         // message, and fall back to regular note otherwise.\n         if !self.maybe_note_obligation_cause_for_async_await(err, obligation) {\n             self.note_obligation_cause_code(\n+                obligation.cause.body_id,\n                 err,\n                 obligation.predicate,\n                 obligation.param_env,"}, {"sha": "164540cc16fe6fec0c96aa840c44ff407260cdb9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ce71f570f4ef9ba2355fef6b6a46436680ac544c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce71f570f4ef9ba2355fef6b6a46436680ac544c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ce71f570f4ef9ba2355fef6b6a46436680ac544c", "patch": "@@ -25,10 +25,9 @@ use rustc_hir::{AsyncGeneratorKind, GeneratorKind, Node};\n use rustc_hir::{Expr, HirId};\n use rustc_infer::infer::error_reporting::TypeErrCtxt;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::{InferOk, LateBoundRegionConversionTime};\n+use rustc_infer::infer::{DefineOpaqueTypes, InferOk, LateBoundRegionConversionTime};\n use rustc_middle::hir::map;\n use rustc_middle::ty::error::TypeError::{self, Sorts};\n-use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{\n     self, suggest_arbitrary_trait_bound, suggest_constraining_type_param, AdtKind,\n     GeneratorDiagnosticData, GeneratorInteriorTypeCause, Infer, InferTy, InternalSubsts,\n@@ -39,9 +38,9 @@ use rustc_span::def_id::LocalDefId;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{BytePos, DesugaringKind, ExpnKind, MacroKind, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n+use std::iter;\n use std::ops::Deref;\n \n-use super::method_chain::CollectAllMismatches;\n use super::InferCtxtPrivExt;\n use crate::infer::InferCtxtExt as _;\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n@@ -319,6 +318,7 @@ pub trait TypeErrCtxtExt<'tcx> {\n \n     fn note_obligation_cause_code<T>(\n         &self,\n+        body_id: LocalDefId,\n         err: &mut Diagnostic,\n         predicate: T,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -359,8 +359,9 @@ pub trait TypeErrCtxtExt<'tcx> {\n     );\n     fn note_function_argument_obligation(\n         &self,\n-        arg_hir_id: HirId,\n+        body_id: LocalDefId,\n         err: &mut Diagnostic,\n+        arg_hir_id: HirId,\n         parent_code: &ObligationCauseCode<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         predicate: ty::Predicate<'tcx>,\n@@ -2742,6 +2743,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         // bound that introduced the obligation (e.g. `T: Send`).\n         debug!(?next_code);\n         self.note_obligation_cause_code(\n+            obligation.cause.body_id,\n             err,\n             obligation.predicate,\n             obligation.param_env,\n@@ -2753,6 +2755,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n     fn note_obligation_cause_code<T>(\n         &self,\n+        body_id: LocalDefId,\n         err: &mut Diagnostic,\n         predicate: T,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -3152,6 +3155,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     // #74711: avoid a stack overflow\n                     ensure_sufficient_stack(|| {\n                         self.note_obligation_cause_code(\n+                            body_id,\n                             err,\n                             parent_predicate,\n                             param_env,\n@@ -3163,6 +3167,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 } else {\n                     ensure_sufficient_stack(|| {\n                         self.note_obligation_cause_code(\n+                            body_id,\n                             err,\n                             parent_predicate,\n                             param_env,\n@@ -3292,6 +3297,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // #74711: avoid a stack overflow\n                 ensure_sufficient_stack(|| {\n                     self.note_obligation_cause_code(\n+                        body_id,\n                         err,\n                         parent_predicate,\n                         param_env,\n@@ -3307,6 +3313,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // #74711: avoid a stack overflow\n                 ensure_sufficient_stack(|| {\n                     self.note_obligation_cause_code(\n+                        body_id,\n                         err,\n                         parent_predicate,\n                         param_env,\n@@ -3323,15 +3330,17 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 ..\n             } => {\n                 self.note_function_argument_obligation(\n-                    arg_hir_id,\n+                    body_id,\n                     err,\n+                    arg_hir_id,\n                     parent_code,\n                     param_env,\n                     predicate,\n                     call_hir_id,\n                 );\n                 ensure_sufficient_stack(|| {\n                     self.note_obligation_cause_code(\n+                        body_id,\n                         err,\n                         predicate,\n                         param_env,\n@@ -3553,8 +3562,9 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     }\n     fn note_function_argument_obligation(\n         &self,\n-        arg_hir_id: HirId,\n+        body_id: LocalDefId,\n         err: &mut Diagnostic,\n+        arg_hir_id: HirId,\n         parent_code: &ObligationCauseCode<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         failed_pred: ty::Predicate<'tcx>,\n@@ -3587,7 +3597,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             // to an associated type (as seen from `trait_pred`) in the predicate. Like in\n             // trait_pred `S: Sum<<Self as Iterator>::Item>` and predicate `i32: Sum<&()>`\n             let mut type_diffs = vec![];\n-\n             if let ObligationCauseCode::ExprBindingObligation(def_id, _, _, idx) = parent_code.deref()\n                 && let Some(node_substs) = typeck_results.node_substs_opt(call_hir_id)\n                 && let where_clauses = self.tcx.predicates_of(def_id).instantiate(self.tcx, node_substs)\n@@ -3596,14 +3605,26 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 if let Some(where_pred) = where_pred.to_opt_poly_trait_pred()\n                     && let Some(failed_pred) = failed_pred.to_opt_poly_trait_pred()\n                 {\n-                    let mut c = CollectAllMismatches {\n-                        infcx: self.infcx,\n-                        param_env,\n-                        errors: vec![],\n+                    let where_pred = self.instantiate_binder_with_placeholders(where_pred);\n+                    let failed_pred = self.instantiate_binder_with_fresh_vars(\n+                        expr.span,\n+                        LateBoundRegionConversionTime::FnCall,\n+                        failed_pred\n+                    );\n+\n+                    let zipped =\n+                        iter::zip(where_pred.trait_ref.substs, failed_pred.trait_ref.substs);\n+                    for (expected, actual) in zipped {\n+                        self.probe(|_| {\n+                            match self\n+                                .at(&ObligationCause::misc(expr.span, body_id), param_env)\n+                                .eq(DefineOpaqueTypes::No, expected, actual)\n+                            {\n+                                Ok(_) => (), // We ignore nested obligations here for now.\n+                                Err(err) => type_diffs.push(err),\n+                            }\n+                        })\n                     };\n-                    if let Ok(_) = c.relate(where_pred, failed_pred) {\n-                        type_diffs = c.errors;\n-                    }\n                 } else if let Some(where_pred) = where_pred.to_opt_poly_projection_pred()\n                     && let Some(failed_pred) = failed_pred.to_opt_poly_projection_pred()\n                     && let Some(found) = failed_pred.skip_binder().term.ty()"}]}