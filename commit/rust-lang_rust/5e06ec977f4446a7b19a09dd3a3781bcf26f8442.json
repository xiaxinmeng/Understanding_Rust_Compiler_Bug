{"sha": "5e06ec977f4446a7b19a09dd3a3781bcf26f8442", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMDZlYzk3N2Y0NDQ2YTdiMTlhMDlkZDNhMzc4MWJjZjI2Zjg0NDI=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-02-27T20:29:31Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-02T18:28:14Z"}, "message": "Rewrite expand_syntax_ext to avoid a mysterious memory leak", "tree": {"sha": "7aa9620fa069db8f7a40d60841c15b6ae3e66d06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aa9620fa069db8f7a40d60841c15b6ae3e66d06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e06ec977f4446a7b19a09dd3a3781bcf26f8442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e06ec977f4446a7b19a09dd3a3781bcf26f8442", "html_url": "https://github.com/rust-lang/rust/commit/5e06ec977f4446a7b19a09dd3a3781bcf26f8442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e06ec977f4446a7b19a09dd3a3781bcf26f8442/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe5de6bfffee3c277f540517b5766547f34e81c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe5de6bfffee3c277f540517b5766547f34e81c7", "html_url": "https://github.com/rust-lang/rust/commit/fe5de6bfffee3c277f540517b5766547f34e81c7"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "7a7a863c6c94b53f3bc7957469c7930e4dd6437c", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5e06ec977f4446a7b19a09dd3a3781bcf26f8442/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e06ec977f4446a7b19a09dd3a3781bcf26f8442/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=5e06ec977f4446a7b19a09dd3a3781bcf26f8442", "patch": "@@ -656,10 +656,8 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n                                            some(token.COMMA),\n                                            pf, p);\n             hi = es.span;\n-            ex = ast.expr_ext(pth, es.node, none[@ast.expr],\n-                              none[@ast.expr], ast.ann_none);\n-            // FIXME: Here is probably not the right place for this\n-            ex = expand_syntax_ext(p, @spanned(lo, hi, ex)).node;\n+            ex = expand_syntax_ext(p, es.span, pth, es.node,\n+                                   none[@ast.expr]);\n         }\n \n         case (token.FAIL) {\n@@ -748,24 +746,23 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n  * rust crates. At the moment we have neither.\n  */\n \n-impure fn expand_syntax_ext(parser p, @ast.expr ext) -> @ast.expr {\n-    check (ast.is_ext_expr(ext));\n-    alt (ext.node) {\n-        case (ast.expr_ext(?path, ?args, ?body, _, ?ann)) {\n-            check (_vec.len[ast.ident](path.node.idents) > 0u);\n-            auto extname = path.node.idents.(0);\n-            if (_str.eq(extname, \"fmt\")) {\n-                auto expanded = extfmt.expand_syntax_ext(args, body);\n-                auto newexpr = ast.expr_ext(path, args, body,\n-                                            some[@ast.expr](expanded), ann);\n-\n-                ret @spanned(ext.span, ext.span, newexpr);\n-            } else {\n-                p.err(\"unknown syntax extension\");\n-            }\n-        }\n+impure fn expand_syntax_ext(parser p, ast.span sp,\n+                     &ast.path path, vec[@ast.expr] args,\n+                     option.t[@ast.expr] body) -> ast.expr_ {\n+\n+    check (_vec.len[ast.ident](path.node.idents) > 0u);\n+    auto extname = path.node.idents.(0);\n+    if (_str.eq(extname, \"fmt\")) {\n+        auto expanded = extfmt.expand_syntax_ext(args, body);\n+        auto newexpr = ast.expr_ext(path, args, body,\n+                                    some[@ast.expr](expanded),\n+                                    ast.ann_none);\n+\n+        ret newexpr;\n+    } else {\n+        p.err(\"unknown syntax extension\");\n+        fail;\n     }\n-    fail;\n }\n \n impure fn extend_expr_by_ident(parser p, span lo, span hi,"}]}