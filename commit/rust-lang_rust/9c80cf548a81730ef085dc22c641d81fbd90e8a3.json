{"sha": "9c80cf548a81730ef085dc22c641d81fbd90e8a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljODBjZjU0OGE4MTczMGVmMDg1ZGMyMmM2NDFkODFmYmQ5MGU4YTM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-04-27T02:13:38Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-15T03:10:45Z"}, "message": "rustc: Remove ty::arg", "tree": {"sha": "749b2ee549dba54555c29361d2df80d1963a6fed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/749b2ee549dba54555c29361d2df80d1963a6fed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c80cf548a81730ef085dc22c641d81fbd90e8a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c80cf548a81730ef085dc22c641d81fbd90e8a3", "html_url": "https://github.com/rust-lang/rust/commit/9c80cf548a81730ef085dc22c641d81fbd90e8a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c80cf548a81730ef085dc22c641d81fbd90e8a3/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "191fdda46a5f57779733422a63c7b9a0020e40f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/191fdda46a5f57779733422a63c7b9a0020e40f9", "html_url": "https://github.com/rust-lang/rust/commit/191fdda46a5f57779733422a63c7b9a0020e40f9"}], "stats": {"total": 483, "additions": 181, "deletions": 302}, "files": [{"sha": "f2d04aca3331ae8dc05555c6414c349a312f8ebe", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -653,7 +653,7 @@ pub fn get_enum_variants(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n                                 item, tcx, cdata);\n         let name = item_name(intr, item);\n         let arg_tys = match ty::get(ctor_ty).sty {\n-          ty::ty_bare_fn(ref f) => f.sig.inputs.map(|a| a.ty),\n+          ty::ty_bare_fn(ref f) => copy f.sig.inputs,\n           _ => ~[], // Nullary enum variant.\n         };\n         match variant_disr_val(item) {"}, {"sha": "5c82894c1509341fba066ef4e70c27d2054d257e", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -126,12 +126,6 @@ pub fn parse_trait_ref_data(data: @~[u8], crate_num: int, pos: uint, tcx: ty::ct\n     parse_trait_ref(st, conv)\n }\n \n-pub fn parse_arg_data(data: @~[u8], crate_num: int, pos: uint, tcx: ty::ctxt,\n-                      conv: conv_did) -> ty::arg {\n-    let st = parse_state_from_data(data, crate_num, pos, tcx);\n-    parse_arg(st, conv)\n-}\n-\n fn parse_path(st: @mut PState) -> @ast::Path {\n     let mut idents: ~[ast::ident] = ~[];\n     fn is_last(c: char) -> bool { return c == '(' || c == ':'; }\n@@ -471,12 +465,6 @@ fn parse_onceness(c: char) -> ast::Onceness {\n     }\n }\n \n-fn parse_arg(st: @mut PState, conv: conv_did) -> ty::arg {\n-    ty::arg {\n-        ty: parse_ty(st, conv)\n-    }\n-}\n-\n fn parse_closure_ty(st: @mut PState, conv: conv_did) -> ty::ClosureTy {\n     let sigil = parse_sigil(st);\n     let purity = parse_purity(next(st));\n@@ -505,9 +493,9 @@ fn parse_bare_fn_ty(st: @mut PState, conv: conv_did) -> ty::BareFnTy {\n \n fn parse_sig(st: @mut PState, conv: conv_did) -> ty::FnSig {\n     assert!((next(st) == '['));\n-    let mut inputs: ~[ty::arg] = ~[];\n+    let mut inputs = ~[];\n     while peek(st) != ']' {\n-        inputs.push(ty::arg { ty: parse_ty(st, conv) });\n+        inputs.push(parse_ty(st, conv));\n     }\n     st.pos += 1u; // eat the ']'\n     let ret_ty = parse_ty(st, conv);"}, {"sha": "2cb95e1a2fc00b263e385a91f647fb7fb0590975", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -344,10 +344,6 @@ fn enc_sigil(w: @io::Writer, sigil: Sigil) {\n     }\n }\n \n-pub fn enc_arg(w: @io::Writer, cx: @ctxt, arg: ty::arg) {\n-    enc_ty(w, cx, arg.ty);\n-}\n-\n fn enc_purity(w: @io::Writer, p: purity) {\n     match p {\n       pure_fn => w.write_char('p'),\n@@ -389,8 +385,8 @@ fn enc_closure_ty(w: @io::Writer, cx: @ctxt, ft: &ty::ClosureTy) {\n \n fn enc_fn_sig(w: @io::Writer, cx: @ctxt, fsig: &ty::FnSig) {\n     w.write_char('[');\n-    for fsig.inputs.each |arg| {\n-        enc_arg(w, cx, *arg);\n+    for fsig.inputs.each |ty| {\n+        enc_ty(w, cx, *ty);\n     }\n     w.write_char(']');\n     enc_ty(w, cx, fsig.output);"}, {"sha": "c0d1b3a7507a98b539543ca09bf5e308dc6b3e85", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -526,8 +526,8 @@ fn encode_method_map_entry(ecx: @e::EncodeContext,\n                            ebml_w: &mut writer::Encoder,\n                            mme: method_map_entry) {\n     do ebml_w.emit_struct(\"method_map_entry\", 3) |ebml_w| {\n-        do ebml_w.emit_struct_field(\"self_arg\", 0u) |ebml_w| {\n-            ebml_w.emit_arg(ecx, mme.self_arg);\n+        do ebml_w.emit_struct_field(\"self_ty\", 0u) |ebml_w| {\n+            ebml_w.emit_ty(ecx, mme.self_ty);\n         }\n         do ebml_w.emit_struct_field(\"explicit_self\", 2u) |ebml_w| {\n             mme.explicit_self.encode(ebml_w);\n@@ -546,8 +546,8 @@ impl read_method_map_entry_helper for reader::Decoder {\n                              -> method_map_entry {\n         do self.read_struct(\"method_map_entry\", 3) |this| {\n             method_map_entry {\n-                self_arg: this.read_struct_field(\"self_arg\", 0, |this| {\n-                    this.read_arg(xcx)\n+                self_ty: this.read_struct_field(\"self_ty\", 0u, |this| {\n+                    this.read_ty(xcx)\n                 }),\n                 explicit_self: this.read_struct_field(\"explicit_self\",\n                                                       2,\n@@ -712,7 +712,6 @@ impl get_ty_str_ctxt for e::EncodeContext {\n }\n \n trait ebml_writer_helpers {\n-    fn emit_arg(&mut self, ecx: @e::EncodeContext, arg: ty::arg);\n     fn emit_ty(&mut self, ecx: @e::EncodeContext, ty: ty::t);\n     fn emit_vstore(&mut self, ecx: @e::EncodeContext, vstore: ty::vstore);\n     fn emit_tys(&mut self, ecx: @e::EncodeContext, tys: &[ty::t]);\n@@ -737,12 +736,6 @@ impl ebml_writer_helpers for writer::Encoder {\n         }\n     }\n \n-    fn emit_arg(&mut self, ecx: @e::EncodeContext, arg: ty::arg) {\n-        do self.emit_opaque |this| {\n-            tyencode::enc_arg(this.writer, ecx.ty_str_ctxt(), arg);\n-        }\n-    }\n-\n     fn emit_tys(&mut self, ecx: @e::EncodeContext, tys: &[ty::t]) {\n         do self.emit_from_vec(tys) |this, ty| {\n             this.emit_ty(ecx, *ty)\n@@ -943,7 +936,6 @@ impl doc_decoder_helpers for ebml::Doc {\n }\n \n trait ebml_decoder_decoder_helpers {\n-    fn read_arg(&mut self, xcx: @ExtendedDecodeContext) -> ty::arg;\n     fn read_ty(&mut self, xcx: @ExtendedDecodeContext) -> ty::t;\n     fn read_tys(&mut self, xcx: @ExtendedDecodeContext) -> ~[ty::t];\n     fn read_type_param_def(&mut self, xcx: @ExtendedDecodeContext)\n@@ -958,17 +950,6 @@ trait ebml_decoder_decoder_helpers {\n }\n \n impl ebml_decoder_decoder_helpers for reader::Decoder {\n-    fn read_arg(&mut self, xcx: @ExtendedDecodeContext) -> ty::arg {\n-        do self.read_opaque |this, doc| {\n-            tydecode::parse_arg_data(\n-                doc.data,\n-                xcx.dcx.cdata.cnum,\n-                doc.start,\n-                xcx.dcx.tcx,\n-                |s, a| this.convert_def_id(xcx, s, a))\n-        }\n-    }\n-\n     fn read_ty(&mut self, xcx: @ExtendedDecodeContext) -> ty::t {\n         // Note: regions types embed local node ids.  In principle, we\n         // should translate these node ids into the new decode"}, {"sha": "9211939cd2af7297f256bfa6296f61c912700c12", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -32,12 +32,9 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n     let outputs = do ia.outputs.map |&(c, out)| {\n         constraints.push(copy *c);\n \n-        let aoutty = ty::arg {\n-            ty: expr_ty(bcx, out)\n-        };\n         aoutputs.push(unpack_result!(bcx, {\n             callee::trans_arg_expr(bcx,\n-                                   aoutty,\n+                                   expr_ty(bcx, out),\n                                    ty::ByCopy,\n                                    out,\n                                    &mut cleanups,\n@@ -50,13 +47,9 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n             _ => fail!(\"Expression must be addr of\")\n         };\n \n-        let outty = ty::arg {\n-            ty: expr_ty(bcx, e)\n-        };\n-\n         unpack_result!(bcx, {\n             callee::trans_arg_expr(bcx,\n-                                   outty,\n+                                   expr_ty(bcx, e),\n                                    ty::ByCopy,\n                                    e,\n                                    &mut cleanups,\n@@ -75,13 +68,9 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n     let inputs = do ia.inputs.map |&(c, in)| {\n         constraints.push(copy *c);\n \n-        let inty = ty::arg {\n-            ty: expr_ty(bcx, in)\n-        };\n-\n         unpack_result!(bcx, {\n             callee::trans_arg_expr(bcx,\n-                                   inty,\n+                                   expr_ty(bcx, in),\n                                    ty::ByCopy,\n                                    in,\n                                    &mut cleanups,"}, {"sha": "6956df5750972add800956307786342dbbd5047c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -1701,7 +1701,7 @@ pub fn copy_args_to_allocas(fcx: fn_ctxt,\n                             bcx: block,\n                             args: &[ast::arg],\n                             raw_llargs: &[ValueRef],\n-                            arg_tys: &[ty::arg]) -> block {\n+                            arg_tys: &[ty::t]) -> block {\n     let _icx = fcx.insn_ctxt(\"copy_args_to_allocas\");\n     let mut bcx = bcx;\n \n@@ -1720,7 +1720,7 @@ pub fn copy_args_to_allocas(fcx: fn_ctxt,\n     }\n \n     for uint::range(0, arg_tys.len()) |arg_n| {\n-        let arg_ty = &arg_tys[arg_n];\n+        let arg_ty = arg_tys[arg_n];\n         let raw_llarg = raw_llargs[arg_n];\n         let arg_id = args[arg_n].id;\n \n@@ -1732,15 +1732,15 @@ pub fn copy_args_to_allocas(fcx: fn_ctxt,\n         // This alloca should be optimized away by LLVM's mem-to-reg pass in\n         // the event it's not truly needed.\n         // only by value if immediate:\n-        let llarg = if datum::appropriate_mode(arg_ty.ty).is_by_value() {\n-            let alloc = alloc_ty(bcx, arg_ty.ty);\n+        let llarg = if datum::appropriate_mode(arg_ty).is_by_value() {\n+            let alloc = alloc_ty(bcx, arg_ty);\n             Store(bcx, raw_llarg, alloc);\n             alloc\n         } else {\n             raw_llarg\n         };\n \n-        add_clean(bcx, llarg, arg_ty.ty);\n+        add_clean(bcx, llarg, arg_ty);\n \n         bcx = _match::bind_irrefutable_pat(bcx,\n                                           args[arg_n].pat,\n@@ -1987,7 +1987,7 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n             Some(&local_mem(x)) => x,\n             _ => fail!(\"trans_enum_variant: how do we know this works?\"),\n         };\n-        let arg_ty = arg_tys[i].ty;\n+        let arg_ty = arg_tys[i];\n         memcpy_ty(bcx, lldestptr, llarg, arg_ty);\n     }\n     build_return(bcx);\n@@ -2061,7 +2061,7 @@ pub fn trans_tuple_struct(ccx: @CrateContext,\n                                    local_mem\")\n             }\n         };\n-        let arg_ty = arg_tys[i].ty;\n+        let arg_ty = arg_tys[i];\n         memcpy_ty(bcx, lldestptr, llarg, arg_ty);\n     }\n "}, {"sha": "dc81a9805887b1c4d440997458a4b9333db1be4b", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -674,7 +674,7 @@ pub enum AutorefArg {\n // temp_cleanups: cleanups that should run only if failure occurs before the\n // call takes place:\n pub fn trans_arg_expr(bcx: block,\n-                      formal_ty: ty::arg,\n+                      formal_arg_ty: ty::t,\n                       self_mode: ty::SelfMode,\n                       arg_expr: @ast::expr,\n                       temp_cleanups: &mut ~[ValueRef],\n@@ -683,9 +683,9 @@ pub fn trans_arg_expr(bcx: block,\n     let _icx = bcx.insn_ctxt(\"trans_arg_expr\");\n     let ccx = bcx.ccx();\n \n-    debug!(\"trans_arg_expr(formal_ty=(%s), self_mode=%?, arg_expr=%s, \\\n+    debug!(\"trans_arg_expr(formal_arg_ty=(%s), self_mode=%?, arg_expr=%s, \\\n             ret_flag=%?)\",\n-           formal_ty.ty.repr(bcx.tcx()),\n+           formal_arg_ty.repr(bcx.tcx()),\n            self_mode,\n            arg_expr.repr(bcx.tcx()),\n            ret_flag.map(|v| bcx.val_str(*v)));\n@@ -734,9 +734,9 @@ pub fn trans_arg_expr(bcx: block,\n         // \"undef\" value, as such a value should never\n         // be inspected. It's important for the value\n         // to have type lldestty (the callee's expected type).\n-        let llformal_ty = type_of::type_of(ccx, formal_ty.ty);\n+        let llformal_arg_ty = type_of::type_of(ccx, formal_arg_ty);\n         unsafe {\n-            val = llvm::LLVMGetUndef(llformal_ty);\n+            val = llvm::LLVMGetUndef(llformal_arg_ty);\n         }\n     } else {\n         // FIXME(#3548) use the adjustments table\n@@ -784,16 +784,16 @@ pub fn trans_arg_expr(bcx: block,\n             }\n         }\n \n-        if formal_ty.ty != arg_datum.ty {\n+        if formal_arg_ty != arg_datum.ty {\n             // this could happen due to e.g. subtyping\n-            let llformal_ty = type_of::type_of_explicit_arg(ccx, &formal_ty);\n-            let llformal_ty = match self_mode {\n-                ty::ByRef => T_ptr(llformal_ty),\n-                ty::ByCopy => llformal_ty,\n+            let llformal_arg_ty = type_of::type_of_explicit_arg(ccx, &formal_arg_ty);\n+            let llformal_arg_ty = match self_mode {\n+                ty::ByRef => T_ptr(llformal_arg_ty),\n+                ty::ByCopy => llformal_arg_ty,\n             };\n             debug!(\"casting actual type (%s) to match formal (%s)\",\n-                   bcx.val_str(val), bcx.llty_str(llformal_ty));\n-            val = PointerCast(bcx, val, llformal_ty);\n+                   bcx.val_str(val), bcx.llty_str(llformal_arg_ty));\n+            val = PointerCast(bcx, val, llformal_arg_ty);\n         }\n     }\n "}, {"sha": "d8252a449ba0dba12c49e5b696d18be5a8f14c99", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -785,7 +785,7 @@ fn create_ty(cx: @CrateContext, t: ty::t, span: span)\n             cx.sess.span_bug(span, \"debuginfo for rptr NYI\")\n         },\n         ty::ty_bare_fn(ref barefnty) => {\n-            let inputs = do barefnty.sig.inputs.map |a| { a.ty };\n+            let inputs = barefnty.sig.inputs.map(|a| *a);\n             let output = barefnty.sig.output;\n             create_fn_ty(cx, t, inputs, output, span)\n         },"}, {"sha": "e5bbe50007e8176dbd871412a350fbd26c7e3256", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -29,7 +29,7 @@ use middle::trans::machine;\n use middle::trans::type_of::*;\n use middle::trans::type_of;\n use middle::ty;\n-use middle::ty::{FnSig, arg};\n+use middle::ty::FnSig;\n use util::ppaux::ty_to_str;\n \n use syntax::codemap::span;\n@@ -94,7 +94,7 @@ fn foreign_signature(ccx: @CrateContext, fn_sig: &ty::FnSig)\n      * values by pointer like we do.\n      */\n \n-    let llarg_tys = fn_sig.inputs.map(|arg| type_of(ccx, arg.ty));\n+    let llarg_tys = fn_sig.inputs.map(|arg_ty| type_of(ccx, *arg_ty));\n     let llret_ty = type_of::type_of(ccx, fn_sig.output);\n     LlvmSignature {\n         llarg_tys: llarg_tys,\n@@ -820,7 +820,7 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n                 region: ty::re_bound(ty::br_anon(0)),\n                 sig: FnSig {\n                     bound_lifetime_names: opt_vec::Empty,\n-                    inputs: ~[ arg { ty: star_u8 } ],\n+                    inputs: ~[ star_u8 ],\n                     output: ty::mk_nil()\n                 }\n             });"}, {"sha": "1bc509459ccee9e9865adef9b09661491cfef142", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -25,7 +25,6 @@ use middle::trans::inline;\n use middle::trans::monomorphize;\n use middle::trans::type_of::*;\n use middle::ty;\n-use middle::ty::arg;\n use middle::typeck;\n use util::common::indenter;\n use util::ppaux::Repr;\n@@ -155,12 +154,10 @@ pub fn trans_self_arg(bcx: block,\n     let mut temp_cleanups = ~[];\n \n     // Compute the type of self.\n-    let self_arg = arg {\n-        ty: monomorphize_type(bcx, mentry.self_arg.ty)\n-    };\n+    let self_ty = monomorphize_type(bcx, mentry.self_ty);\n \n     let result = trans_arg_expr(bcx,\n-                                self_arg,\n+                                self_ty,\n                                 mentry.self_mode,\n                                 base,\n                                 &mut temp_cleanups,"}, {"sha": "ff112a18fa087933bfa7a7906eed57e9cc2cd860", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -284,13 +284,8 @@ pub impl Reflector {\n                 let sym = mangle_internal_name_by_path_and_seq(ccx,\n                                                                sub_path,\n                                                                \"get_disr\");\n-                let args = [\n-                    ty::arg {\n-                        ty: opaqueptrty\n-                    }\n-                ];\n \n-                let llfty = type_of_fn(ccx, args, ty::mk_int());\n+                let llfty = type_of_fn(ccx, [opaqueptrty], ty::mk_int());\n                 let llfdecl = decl_internal_cdecl_fn(ccx.llmod, sym, llfty);\n                 let arg = unsafe {\n                     llvm::LLVMGetParam(llfdecl, first_real_arg as c_uint)\n@@ -357,7 +352,7 @@ pub impl Reflector {\n             let modeval = 5u;   // \"by copy\"\n             let extra = ~[self.c_uint(i),\n                          self.c_uint(modeval),\n-                         self.c_tydesc(arg.ty)];\n+                         self.c_tydesc(*arg)];\n             self.visit(~\"fn_input\", extra);\n         }\n         let extra = ~[self.c_uint(retval),"}, {"sha": "dfbebd90c298b5746e2660baf18bd3d3218c0b08", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -19,21 +19,21 @@ use util::ppaux;\n \n use syntax::ast;\n \n-pub fn arg_is_indirect(_: @CrateContext, arg: &ty::arg) -> bool {\n-    !ty::type_is_immediate(arg.ty)\n+pub fn arg_is_indirect(_: @CrateContext, arg_ty: &ty::t) -> bool {\n+    !ty::type_is_immediate(*arg_ty)\n }\n \n-pub fn type_of_explicit_arg(ccx: @CrateContext, arg: &ty::arg) -> TypeRef {\n-    let llty = type_of(ccx, arg.ty);\n-    if arg_is_indirect(ccx, arg) {T_ptr(llty)} else {llty}\n+pub fn type_of_explicit_arg(ccx: @CrateContext, arg_ty: &ty::t) -> TypeRef {\n+    let llty = type_of(ccx, *arg_ty);\n+    if arg_is_indirect(ccx, arg_ty) {T_ptr(llty)} else {llty}\n }\n \n pub fn type_of_explicit_args(ccx: @CrateContext,\n-                             inputs: &[ty::arg]) -> ~[TypeRef] {\n-    inputs.map(|arg| type_of_explicit_arg(ccx, arg))\n+                             inputs: &[ty::t]) -> ~[TypeRef] {\n+    inputs.map(|arg_ty| type_of_explicit_arg(ccx, arg_ty))\n }\n \n-pub fn type_of_fn(cx: @CrateContext, inputs: &[ty::arg], output: ty::t)\n+pub fn type_of_fn(cx: @CrateContext, inputs: &[ty::t], output: ty::t)\n                -> TypeRef {\n     unsafe {\n         let mut atys: ~[TypeRef] = ~[];"}, {"sha": "4a8adfba11c3177b0b521370b8fbec7c8d0d862e", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -78,7 +78,7 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n         ty::ty_bare_fn(ty::BareFnTy {sig: ref sig, _}) |\n         ty::ty_closure(ty::ClosureTy {sig: ref sig, _}) => {\n             for sig.inputs.each |arg| {\n-                type_needs(cx, use_repr, arg.ty);\n+                type_needs(cx, use_repr, *arg);\n             }\n         }\n         _ => ()\n@@ -331,17 +331,16 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n         node_type_needs(cx, use_tydesc, val.id);\n       }\n       expr_call(f, _, _) => {\n-          for ty::ty_fn_args(ty::node_id_to_type(cx.ccx.tcx, f.id))).each |a| {\n-              type_needs(cx, use_repr, a.ty);\n+          for ty::ty_fn_args(ty::node_id_to_type(cx.ccx.tcx, f.id)).each |a| {\n+              type_needs(cx, use_repr, *a);\n           }\n       }\n       expr_method_call(rcvr, _, _, _, _) => {\n         let base_ty = ty::node_id_to_type(cx.ccx.tcx, rcvr.id);\n         type_needs(cx, use_repr, ty::type_autoderef(cx.ccx.tcx, base_ty));\n \n-        for ty::ty_fn_args(ty::node_id_to_type(cx.ccx.tcx,\n-                                               e.callee_id)).each |a| {\n-            type_needs(cx, use_repr, a.ty);\n+        for ty::ty_fn_args(ty::node_id_to_type(cx.ccx.tcx, e.callee_id)).each |a| {\n+            type_needs(cx, use_repr, *a);\n         }\n         mark_for_method_call(cx, e.id, e.callee_id);\n       }"}, {"sha": "d9f9aac5d2251376aa8465d5857f5252a563ccf1", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -47,11 +47,6 @@ use syntax;\n \n // Data types\n \n-#[deriving(Eq, IterBytes)]\n-pub struct arg {\n-    ty: t\n-}\n-\n #[deriving(Eq)]\n pub struct field {\n     ident: ast::ident,\n@@ -392,7 +387,7 @@ pub struct ClosureTy {\n #[deriving(Eq)]\n pub struct FnSig {\n     bound_lifetime_names: OptVec<ast::ident>,\n-    inputs: ~[arg],\n+    inputs: ~[t],\n     output: t\n }\n \n@@ -1107,14 +1102,14 @@ fn mk_t(cx: ctxt, st: sty) -> t {\n       }\n       &ty_tup(ref ts) => for ts.each |tt| { flags |= get(*tt).flags; },\n       &ty_bare_fn(ref f) => {\n-        for f.sig.inputs.each |a| { flags |= get(a.ty).flags; }\n+        for f.sig.inputs.each |a| { flags |= get(*a).flags; }\n          flags |= get(f.sig.output).flags;\n          // T -> _|_ is *not* _|_ !\n          flags &= !(has_ty_bot as uint);\n       }\n       &ty_closure(ref f) => {\n         flags |= rflags(f.region);\n-        for f.sig.inputs.each |a| { flags |= get(a.ty).flags; }\n+        for f.sig.inputs.each |a| { flags |= get(*a).flags; }\n         flags |= get(f.sig.output).flags;\n         // T -> _|_ is *not* _|_ !\n         flags &= !(has_ty_bot as uint);\n@@ -1298,7 +1293,7 @@ pub fn mk_bare_fn(cx: ctxt, fty: BareFnTy) -> t {\n }\n \n pub fn mk_ctor_fn(cx: ctxt, input_tys: &[ty::t], output: ty::t) -> t {\n-    let input_args = input_tys.map(|t| arg { ty: *t });\n+    let input_args = input_tys.map(|t| *t);\n     mk_bare_fn(cx,\n                BareFnTy {\n                    purity: ast::pure_fn,\n@@ -1372,11 +1367,11 @@ pub fn maybe_walk_ty(ty: t, f: &fn(t) -> bool) {\n       }\n       ty_tup(ref ts) => { for ts.each |tt| { maybe_walk_ty(*tt, f); } }\n       ty_bare_fn(ref ft) => {\n-        for ft.sig.inputs.each |a| { maybe_walk_ty(a.ty, f); }\n+        for ft.sig.inputs.each |a| { maybe_walk_ty(*a, f); }\n         maybe_walk_ty(ft.sig.output, f);\n       }\n       ty_closure(ref ft) => {\n-        for ft.sig.inputs.each |a| { maybe_walk_ty(a.ty, f); }\n+        for ft.sig.inputs.each |a| { maybe_walk_ty(*a, f); }\n         maybe_walk_ty(ft.sig.output, f);\n       }\n     }\n@@ -1387,11 +1382,7 @@ pub fn fold_sty_to_ty(tcx: ty::ctxt, sty: &sty, foldop: &fn(t) -> t) -> t {\n }\n \n pub fn fold_sig(sig: &FnSig, fldop: &fn(t) -> t) -> FnSig {\n-    let args = do sig.inputs.map |arg| {\n-        arg {\n-            ty: fldop(arg.ty)\n-        }\n-    };\n+    let args = sig.inputs.map(|arg| fldop(*arg)); \n \n     FnSig {\n         bound_lifetime_names: copy sig.bound_lifetime_names,\n@@ -2999,7 +2990,7 @@ pub fn ty_fn_sig(fty: t) -> FnSig {\n }\n \n // Type accessors for substructures of types\n-pub fn ty_fn_args(fty: t) -> ~[arg] {\n+pub fn ty_fn_args(fty: t) -> ~[t] {\n     match get(fty).sty {\n         ty_bare_fn(ref f) => copy f.sig.inputs,\n         ty_closure(ref f) => copy f.sig.inputs,\n@@ -3103,7 +3094,7 @@ pub fn replace_closure_return_type(tcx: ctxt, fn_type: t, ret_type: t) -> t {\n \n // Returns a vec of all the input and output types of fty.\n pub fn tys_in_fn_sig(sig: &FnSig) -> ~[t] {\n-    vec::append_one(sig.inputs.map(|a| a.ty), sig.output)\n+    vec::append_one(sig.inputs.map(|a| *a), sig.output)\n }\n \n // Type accessors for AST nodes\n@@ -4061,7 +4052,7 @@ pub fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[VariantInfo] {\n                         let ctor_ty = node_id_to_type(cx, variant.node.id);\n                         let arg_tys = {\n                             if args.len() > 0u {\n-                                ty_fn_args(ctor_ty).map(|a| a.ty)\n+                                ty_fn_args(ctor_ty).map(|a| *a)\n                             } else {\n                                 ~[]\n                             }"}, {"sha": "ffd4d0948cd172c0e20881f133034ceeb43554f3", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -53,7 +53,7 @@\n  */\n \n use middle::const_eval;\n-use middle::ty::{arg, substs};\n+use middle::ty::{substs};\n use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n use middle::typeck::rscope::in_binding_rscope;\n@@ -501,16 +501,12 @@ pub fn ty_of_arg<AC:AstConv,\n                  this: &AC,\n                  rscope: &RS,\n                  a: ast::arg,\n-                 expected_ty: Option<ty::arg>)\n-                 -> ty::arg {\n-    let ty = match a.ty.node {\n-        ast::ty_infer if expected_ty.is_some() => expected_ty.get().ty,\n+                 expected_ty: Option<ty::t>)\n+                 -> ty::t {\n+    match a.ty.node {\n+        ast::ty_infer if expected_ty.is_some() => expected_ty.get(),\n         ast::ty_infer => this.ty_infer(a.ty.span),\n         _ => ast_ty_to_ty(this, rscope, a.ty),\n-    };\n-\n-    arg {\n-        ty: ty\n     }\n }\n "}, {"sha": "cb517ab8318271d747ab01a50c76f11746acebd4", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -1053,9 +1053,7 @@ pub impl<'self> LookupContext<'self> {\n         self.fcx.write_ty(self.callee_id, fty);\n         self.fcx.write_substs(self.callee_id, all_substs);\n         method_map_entry {\n-            self_arg: arg {\n-                ty: candidate.rcvr_ty,\n-            },\n+            self_ty: candidate.rcvr_ty,\n             self_mode: self_mode,\n             explicit_self: candidate.method_ty.self_ty,\n             origin: candidate.origin,"}, {"sha": "edc60d9c4431d329674d6e05470312fb4b8868c4", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 90, "deletions": 112, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -81,7 +81,7 @@ use middle::pat_util::pat_id_map;\n use middle::pat_util;\n use middle::ty::{FnSig, VariantInfo_};\n use middle::ty::{ty_param_bounds_and_ty, ty_param_substs_and_ty};\n-use middle::ty::{substs, arg, param_ty};\n+use middle::ty::{substs, param_ty};\n use middle::ty;\n use middle::typeck::astconv::AstConv;\n use middle::typeck::astconv::{ast_region_to_region, ast_ty_to_ty};\n@@ -352,7 +352,7 @@ pub fn check_fn(ccx: @mut CrateCtxt,\n \n     relate_free_regions(tcx, opt_self_info.map(|s| s.self_ty), &fn_sig);\n \n-    let arg_tys = fn_sig.inputs.map(|a| a.ty);\n+    let arg_tys = fn_sig.inputs.map(|a| *a);\n     let ret_ty = fn_sig.output;\n \n     debug!(\"check_fn(arg_tys=%?, ret_ty=%?, opt_self_ty=%?)\",\n@@ -1192,7 +1192,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n     fn check_argument_types(\n         fcx: @mut FnCtxt,\n         sp: span,\n-        fn_inputs: &[ty::arg],\n+        fn_inputs: &[ty::t],\n         callee_expr: @ast::expr,\n         args: &[@ast::expr],\n         sugar: ast::CallSugar,\n@@ -1211,7 +1211,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let supplied_arg_count = args.len();\n         let expected_arg_count = fn_inputs.len();\n         let formal_tys = if expected_arg_count == supplied_arg_count {\n-            fn_inputs.map(|a| a.ty)\n+            fn_inputs.map(|a| *a)\n         } else {\n             let suffix = match sugar {\n                 ast::NoSugar => \"\",\n@@ -1287,8 +1287,8 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         }\n     }\n \n-    fn err_args(len: uint) -> ~[ty::arg] {\n-        vec::from_fn(len, |_| ty::arg { ty: ty::mk_err() })\n+    fn err_args(len: uint) -> ~[ty::t] {\n+        vec::from_fn(len, |_| ty::mk_err())\n     }\n \n     // A generic function for checking assignment expressions\n@@ -1701,11 +1701,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         let fty = if error_happened {\n             fty_sig = FnSig {\n                 bound_lifetime_names: opt_vec::Empty,\n-                inputs: fn_ty.sig.inputs.map(|_| {\n-                    arg {\n-                        ty: ty::mk_err()\n-                    }\n-                }),\n+                inputs: fn_ty.sig.inputs.map(|_| ty::mk_err()),\n                 output: ty::mk_err()\n             };\n             ty::mk_err()\n@@ -3132,24 +3128,23 @@ pub fn check_enum_variants(ccx: @mut CrateCtxt,\n             }\n             disr_vals.push(*disr_val);\n             let ctor_ty = ty::node_id_to_type(ccx.tcx, v.node.id);\n-            let arg_tys;\n \n             let this_disr_val = *disr_val;\n             *disr_val += 1;\n \n-            match v.node.kind {\n+            let arg_tys = match v.node.kind {\n                 ast::tuple_variant_kind(ref args) if args.len() > 0u => {\n-                    arg_tys = Some(ty::ty_fn_args(ctor_ty).map(|a| a.ty));\n+                    Some(ty::ty_fn_args(ctor_ty).map(|a| *a))\n                 }\n                 ast::tuple_variant_kind(_) => {\n-                    arg_tys = Some(~[]);\n+                    Some(~[])\n                 }\n                 ast::struct_variant_kind(_) => {\n-                    arg_tys = Some(ty::lookup_struct_fields(\n+                    Some(ty::lookup_struct_fields(\n                         ccx.tcx, local_def(v.node.id)).map(|cf|\n-                            ty::node_id_to_type(ccx.tcx, cf.id.node)));\n+                            ty::node_id_to_type(ccx.tcx, cf.id.node)))\n                 }\n-            }\n+            };\n \n             match arg_tys {\n                 None => {}\n@@ -3454,27 +3449,20 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n     fn param(ccx: @mut CrateCtxt, n: uint) -> ty::t {\n         ty::mk_param(ccx.tcx, n, local_def(0))\n     }\n-    fn arg(ty: ty::t) -> ty::arg {\n-        arg {\n-            ty: ty\n-        }\n-    }\n \n     let tcx = ccx.tcx;\n     let (n_tps, inputs, output) = match *ccx.tcx.sess.str_of(it.ident) {\n       ~\"size_of\" |\n       ~\"pref_align_of\" | ~\"min_align_of\" => (1u, ~[], ty::mk_uint()),\n       ~\"init\" => (1u, ~[], param(ccx, 0u)),\n       ~\"uninit\" => (1u, ~[], param(ccx, 0u)),\n-      ~\"forget\" => (1u, ~[arg(param(ccx, 0u))], ty::mk_nil()),\n-      ~\"transmute\" => (2, ~[ arg(param(ccx, 0)) ], param(ccx, 1)),\n+      ~\"forget\" => (1u, ~[ param(ccx, 0) ], ty::mk_nil()),\n+      ~\"transmute\" => (2, ~[ param(ccx, 0) ], param(ccx, 1)),\n       ~\"move_val\" | ~\"move_val_init\" => {\n           (1u,\n            ~[\n-            arg(ty::mk_mut_rptr(tcx,\n-                                ty::re_bound(ty::br_anon(0)),\n-                                param(ccx, 0))),\n-               arg(param(ccx, 0u))\n+              ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)), param(ccx, 0)),\n+              param(ccx, 0u)\n             ],\n          ty::mk_nil())\n       }\n@@ -3483,30 +3471,26 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n       ~\"atomic_cxchg\"    | ~\"atomic_cxchg_acq\"| ~\"atomic_cxchg_rel\" => {\n         (0,\n          ~[\n-            arg(ty::mk_mut_rptr(tcx,\n-                                ty::re_bound(ty::br_anon(0)),\n-                                ty::mk_int())),\n-               arg(ty::mk_int()),\n-               arg(ty::mk_int())\n+            ty::mk_mut_rptr(tcx,\n+                            ty::re_bound(ty::br_anon(0)),\n+                            ty::mk_int()),\n+            ty::mk_int(),\n+            ty::mk_int()\n          ],\n          ty::mk_int())\n       }\n       ~\"atomic_load\"     | ~\"atomic_load_acq\" => {\n         (0,\n          ~[\n-            arg(ty::mk_imm_rptr(tcx,\n-                            ty::re_bound(ty::br_anon(0)),\n-                            ty::mk_int()))\n+            ty::mk_imm_rptr(tcx, ty::re_bound(ty::br_anon(0)), ty::mk_int())\n          ],\n         ty::mk_int())\n       }\n       ~\"atomic_store\"    | ~\"atomic_store_rel\" => {\n         (0,\n          ~[\n-            arg(ty::mk_mut_rptr(tcx,\n-                                ty::re_bound(ty::br_anon(0)),\n-                                ty::mk_int())),\n-            arg(ty::mk_int())\n+            ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)), ty::mk_int()),\n+            ty::mk_int()\n          ],\n          ty::mk_nil())\n       }\n@@ -3515,10 +3499,8 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n       ~\"atomic_xchg_rel\" | ~\"atomic_xadd_rel\" | ~\"atomic_xsub_rel\" => {\n         (0,\n          ~[\n-            arg(ty::mk_mut_rptr(tcx,\n-                                ty::re_bound(ty::br_anon(0)),\n-                                ty::mk_int())),\n-            arg(ty::mk_int())\n+            ty::mk_mut_rptr(tcx, ty::re_bound(ty::br_anon(0)), ty::mk_int()),\n+            ty::mk_int()\n          ],\n          ty::mk_int())\n       }\n@@ -3536,7 +3518,7 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n             ty: tydesc_ty,\n             mutbl: ast::m_imm\n         });\n-        (0, ~[ arg(td_ptr), arg(visitor_object_ty) ], ty::mk_nil())\n+        (0, ~[ td_ptr, visitor_object_ty ], ty::mk_nil())\n       }\n       ~\"frame_address\" => {\n         let fty = ty::mk_closure(ccx.tcx, ty::ClosureTy {\n@@ -3546,118 +3528,114 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n             region: ty::re_bound(ty::br_anon(0)),\n             sig: ty::FnSig {\n                 bound_lifetime_names: opt_vec::Empty,\n-                inputs: ~[\n-                    arg {\n-                        ty: ty::mk_imm_ptr(ccx.tcx,\n-                                           ty::mk_mach_uint(ast::ty_u8))\n-                    }\n-                ],\n+                inputs: ~[ty::mk_imm_ptr(ccx.tcx, ty::mk_mach_uint(ast::ty_u8))],\n                 output: ty::mk_nil()\n             }\n         });\n-        (0u, ~[ arg(fty) ], ty::mk_nil())\n+        (0u, ~[fty], ty::mk_nil())\n       }\n       ~\"morestack_addr\" => {\n         (0u, ~[], ty::mk_nil_ptr(ccx.tcx))\n       }\n       ~\"memmove32\" => {\n         (0,\n          ~[\n-            arg(ty::mk_ptr(tcx, ty::mt {\n+            ty::mk_ptr(tcx, ty::mt {\n                 ty: ty::mk_u8(),\n                 mutbl: ast::m_mutbl\n-            })),\n-            arg(ty::mk_ptr(tcx, ty::mt {\n+            }),\n+            ty::mk_ptr(tcx, ty::mt {\n                 ty: ty::mk_u8(),\n                 mutbl: ast::m_imm\n-            })),\n-            arg(ty::mk_u32())\n+            }),\n+            ty::mk_u32()\n          ],\n          ty::mk_nil())\n       }\n       ~\"memmove64\" => {\n         (0,\n-         ~[arg(ty::mk_ptr(tcx, ty::mt {\n-            ty: ty::mk_u8(),\n-            mutbl: ast::m_mutbl\n-           })),\n-           arg(ty::mk_ptr(tcx, ty::mt {\n-            ty: ty::mk_u8(),\n-            mutbl: ast::m_imm\n-           })),\n-           arg(ty::mk_u64())\n+         ~[\n+            ty::mk_ptr(tcx, ty::mt {\n+                ty: ty::mk_u8(),\n+                mutbl: ast::m_mutbl\n+            }),\n+            ty::mk_ptr(tcx, ty::mt {\n+                ty: ty::mk_u8(),\n+                mutbl: ast::m_imm\n+            }),\n+            ty::mk_u64()\n          ],\n          ty::mk_nil())\n       }\n-        ~\"sqrtf32\" => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n-        ~\"sqrtf64\" => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),\n+        ~\"sqrtf32\" => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n+        ~\"sqrtf64\" => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n         ~\"powif32\" => {\n            (0,\n-            ~[ arg(ty::mk_f32()), arg(ty::mk_i32()) ],\n+            ~[ ty::mk_f32(), ty::mk_i32() ],\n             ty::mk_f32())\n         }\n         ~\"powif64\" => {\n            (0,\n-            ~[ arg(ty::mk_f64()), arg(ty::mk_i32()) ],\n+            ~[ ty::mk_f64(), ty::mk_i32() ],\n             ty::mk_f64())\n         }\n-        ~\"sinf32\" => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n-        ~\"sinf64\" => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),\n-        ~\"cosf32\" => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n-        ~\"cosf64\" => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),\n+        ~\"sinf32\" => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n+        ~\"sinf64\" => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n+        ~\"cosf32\" => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n+        ~\"cosf64\" => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n         ~\"powf32\" => {\n            (0,\n-            ~[ arg(ty::mk_f32()), arg(ty::mk_f32()) ],\n+            ~[ ty::mk_f32(), ty::mk_f32() ],\n             ty::mk_f32())\n         }\n         ~\"powf64\" => {\n            (0,\n-            ~[ arg(ty::mk_f64()), arg(ty::mk_f64()) ],\n+            ~[ ty::mk_f64(), ty::mk_f64() ],\n             ty::mk_f64())\n         }\n-        ~\"expf32\"   => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n-        ~\"expf64\"   => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),\n-        ~\"exp2f32\"  => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n-        ~\"exp2f64\"  => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),\n-        ~\"logf32\"   => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n-        ~\"logf64\"   => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),\n-        ~\"log10f32\" => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n-        ~\"log10f64\" => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),\n-        ~\"log2f32\"  => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n-        ~\"log2f64\"  => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),\n+        ~\"expf32\"   => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n+        ~\"expf64\"   => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n+        ~\"exp2f32\"  => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n+        ~\"exp2f64\"  => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n+        ~\"logf32\"   => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n+        ~\"logf64\"   => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n+        ~\"log10f32\" => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n+        ~\"log10f64\" => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n+        ~\"log2f32\"  => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n+        ~\"log2f64\"  => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n         ~\"fmaf32\" => {\n             (0,\n-             ~[ arg(ty::mk_f32()), arg(ty::mk_f32()), arg(ty::mk_f32()) ],\n+             ~[ ty::mk_f32(), ty::mk_f32(), ty::mk_f32() ],\n              ty::mk_f32())\n         }\n         ~\"fmaf64\" => {\n             (0,\n-             ~[ arg(ty::mk_f64()), arg(ty::mk_f64()), arg(ty::mk_f64()) ],\n+             ~[ ty::mk_f64(), ty::mk_f64(), ty::mk_f64() ],\n              ty::mk_f64())\n         }\n-        ~\"fabsf32\"  => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n-        ~\"fabsf64\"  => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),\n-        ~\"floorf32\" => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n-        ~\"floorf64\" => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),\n-        ~\"ceilf32\"  => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n-        ~\"ceilf64\"  => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),\n-        ~\"truncf32\" => (0, ~[ arg(ty::mk_f32()) ], ty::mk_f32()),\n-        ~\"truncf64\" => (0, ~[ arg(ty::mk_f64()) ], ty::mk_f64()),\n-        ~\"ctpop8\"   => (0, ~[ arg(ty::mk_i8())  ], ty::mk_i8()),\n-        ~\"ctpop16\"  => (0, ~[ arg(ty::mk_i16()) ], ty::mk_i16()),\n-        ~\"ctpop32\"  => (0, ~[ arg(ty::mk_i32()) ], ty::mk_i32()),\n-        ~\"ctpop64\"  => (0, ~[ arg(ty::mk_i64()) ], ty::mk_i64()),\n-        ~\"ctlz8\"    => (0, ~[ arg(ty::mk_i8())  ], ty::mk_i8()),\n-        ~\"ctlz16\"   => (0, ~[ arg(ty::mk_i16()) ], ty::mk_i16()),\n-        ~\"ctlz32\"   => (0, ~[ arg(ty::mk_i32()) ], ty::mk_i32()),\n-        ~\"ctlz64\"   => (0, ~[ arg(ty::mk_i64()) ], ty::mk_i64()),\n-        ~\"cttz8\"    => (0, ~[ arg(ty::mk_i8())  ], ty::mk_i8()),\n-        ~\"cttz16\"   => (0, ~[ arg(ty::mk_i16()) ], ty::mk_i16()),\n-        ~\"cttz32\"   => (0, ~[ arg(ty::mk_i32()) ], ty::mk_i32()),\n-        ~\"cttz64\"   => (0, ~[ arg(ty::mk_i64()) ], ty::mk_i64()),\n-        ~\"bswap16\"  => (0, ~[ arg(ty::mk_i16()) ], ty::mk_i16()),\n-        ~\"bswap32\"  => (0, ~[ arg(ty::mk_i32()) ], ty::mk_i32()),\n-        ~\"bswap64\"  => (0, ~[ arg(ty::mk_i64()) ], ty::mk_i64()),\n+        ~\"fabsf32\"  => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n+        ~\"fabsf64\"  => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n+        ~\"floorf32\" => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n+        ~\"floorf64\" => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n+        ~\"ceilf32\"  => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n+        ~\"ceilf64\"  => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n+        ~\"truncf32\" => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n+        ~\"truncf64\" => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n+        ~\"ctpop8\"   => (0, ~[ ty::mk_i8()  ], ty::mk_i8()),\n+        ~\"ctpop16\"  => (0, ~[ ty::mk_i16() ], ty::mk_i16()),\n+        ~\"ctpop32\"  => (0, ~[ ty::mk_i32() ], ty::mk_i32()),\n+        ~\"ctpop64\"  => (0, ~[ ty::mk_i64() ], ty::mk_i64()),\n+        ~\"ctlz8\"    => (0, ~[ ty::mk_i8()  ], ty::mk_i8()),\n+        ~\"ctlz16\"   => (0, ~[ ty::mk_i16() ], ty::mk_i16()),\n+        ~\"ctlz32\"   => (0, ~[ ty::mk_i32() ], ty::mk_i32()),\n+        ~\"ctlz64\"   => (0, ~[ ty::mk_i64() ], ty::mk_i64()),\n+        ~\"cttz8\"    => (0, ~[ ty::mk_i8()  ], ty::mk_i8()),\n+        ~\"cttz16\"   => (0, ~[ ty::mk_i16() ], ty::mk_i16()),\n+        ~\"cttz32\"   => (0, ~[ ty::mk_i32() ], ty::mk_i32()),\n+        ~\"cttz64\"   => (0, ~[ ty::mk_i64() ], ty::mk_i64()),\n+        ~\"bswap16\"  => (0, ~[ ty::mk_i16() ], ty::mk_i16()),\n+        ~\"bswap32\"  => (0, ~[ ty::mk_i32() ], ty::mk_i32()),\n+        ~\"bswap64\"  => (0, ~[ ty::mk_i64() ], ty::mk_i64()),\n         ref other => {\n             tcx.sess.span_err(it.span,\n                               ~\"unrecognized intrinsic function: `\" +"}, {"sha": "87b105e3c7d4d94e1d399a13b55dc9c29025eb75", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -258,7 +258,7 @@ pub fn relate_free_regions(\n \n     let mut all_tys = ~[];\n     for fn_sig.inputs.each |arg| {\n-        all_tys.push(arg.ty);\n+        all_tys.push(*arg);\n     }\n     for self_ty.each |&t| {\n         all_tys.push(t);"}, {"sha": "394d00bef2d44c08909f4d1e88d3ce274dd0877a", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -13,7 +13,6 @@\n // substitutions.\n \n use middle::pat_util;\n-use middle::ty::arg;\n use middle::ty;\n use middle::typeck::check::{FnCtxt, SelfInfo};\n use middle::typeck::infer::{force_all, resolve_all, resolve_region};\n@@ -63,14 +62,9 @@ fn resolve_method_map_entry(fcx: @mut FnCtxt, sp: span, id: ast::node_id) {\n     match fcx.inh.method_map.find(&id) {\n         None => {}\n         Some(mme) => {\n-            for resolve_type_vars_in_type(fcx, sp, mme.self_arg.ty).each |t| {\n+            for resolve_type_vars_in_type(fcx, sp, mme.self_ty).each |t| {\n                 let method_map = fcx.ccx.method_map;\n-                let new_entry = method_map_entry {\n-                    self_arg: arg {\n-                        ty: *t\n-                    },\n-                    ..*mme\n-                };\n+                let new_entry = method_map_entry { self_ty: *t, ..*mme };\n                 debug!(\"writeback::resolve_method_map_entry(id=%?, \\\n                         new_entry=%?)\",\n                        id, new_entry);"}, {"sha": "deea46cea1a31a78cd1e54d20b041bd825e0f7c6", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -576,14 +576,10 @@ pub fn compare_impl_method(tcx: ty::ctxt,\n     // represent the self argument (unless this is a static method).\n     // This argument will have the *transformed* self type.\n     for trait_m.transformed_self_ty.each |&t| {\n-        trait_fn_args.push(ty::arg {\n-            ty: t\n-        });\n+        trait_fn_args.push(t);\n     }\n     for impl_m.transformed_self_ty.each |&t| {\n-        impl_fn_args.push(ty::arg {\n-            ty: t\n-        });\n+        impl_fn_args.push(t);\n     }\n \n     // Add in the normal arguments."}, {"sha": "fcd2c6ffe592ef97f59f143238770ab6c39383f1", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -55,7 +55,7 @@\n // now.\n \n use middle::ty::{FloatVar, FnSig, IntVar, TyVar};\n-use middle::ty::{IntType, UintType, arg, substs};\n+use middle::ty::{IntType, UintType, substs};\n use middle::ty;\n use middle::typeck::infer::glb::Glb;\n use middle::typeck::infer::lub::Lub;\n@@ -95,7 +95,7 @@ pub trait Combine {\n                    b: &ty::ClosureTy) -> cres<ty::ClosureTy>;\n     fn fn_sigs(&self, a: &ty::FnSig, b: &ty::FnSig) -> cres<ty::FnSig>;\n     fn flds(&self, a: ty::field, b: ty::field) -> cres<ty::field>;\n-    fn args(&self, a: ty::arg, b: ty::arg) -> cres<ty::arg>;\n+    fn args(&self, a: ty::t, b: ty::t) -> cres<ty::t>;\n     fn sigils(&self, p1: ast::Sigil, p2: ast::Sigil) -> cres<ast::Sigil>;\n     fn purities(&self, a: purity, b: purity) -> cres<purity>;\n     fn abis(&self, a: AbiSet, b: AbiSet) -> cres<AbiSet>;\n@@ -311,12 +311,9 @@ pub fn super_flds<C:Combine>(\n     }\n }\n \n-pub fn super_args<C:Combine>(this: &C, a: ty::arg, b: ty::arg)\n-                             -> cres<ty::arg> {\n-    do this.contratys(a.ty, b.ty).chain |t| {\n-        Ok(arg {\n-            ty: t\n-        })\n+pub fn super_args<C:Combine>(this: &C, a: ty::t, b: ty::t) -> cres<ty::t> {\n+    do this.contratys(a, b).chain |t| {\n+        Ok(t)\n     }\n }\n \n@@ -407,10 +404,7 @@ pub fn super_bare_fn_tys<C:Combine>(\n pub fn super_fn_sigs<C:Combine>(\n     this: &C, a_f: &ty::FnSig, b_f: &ty::FnSig) -> cres<ty::FnSig>\n {\n-    fn argvecs<C:Combine>(this: &C,\n-                          a_args: &[ty::arg],\n-                          b_args: &[ty::arg]) -> cres<~[ty::arg]>\n-    {\n+    fn argvecs<C:Combine>(this: &C, a_args: &[ty::t], b_args: &[ty::t]) -> cres<~[ty::t]> {\n         if vec::same_length(a_args, b_args) {\n             map_vec2(a_args, b_args, |a, b| this.args(*a, *b))\n         } else {"}, {"sha": "42e42ddb1e7635867285858d9520738ecabcf158", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -153,7 +153,7 @@ impl Combine for Glb {\n         super_trait_stores(self, vk, a, b)\n     }\n \n-    fn args(&self, a: ty::arg, b: ty::arg) -> cres<ty::arg> {\n+    fn args(&self, a: ty::t, b: ty::t) -> cres<ty::t> {\n         super_args(self, a, b)\n     }\n "}, {"sha": "20a051f053185d5b13e339aae1fe055c3de29b81", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -236,7 +236,7 @@ impl Combine for Lub {\n         super_trait_stores(self, vk, a, b)\n     }\n \n-    fn args(&self, a: ty::arg, b: ty::arg) -> cres<ty::arg> {\n+    fn args(&self, a: ty::t, b: ty::t) -> cres<ty::t> {\n         super_args(self, a, b)\n     }\n "}, {"sha": "ca083bc2d86d9f75c984c2db3dddeacbc924e401", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -245,7 +245,7 @@ impl Combine for Sub {\n         super_trait_stores(self, vk, a, b)\n     }\n \n-    fn args(&self, a: ty::arg, b: ty::arg) -> cres<ty::arg> {\n+    fn args(&self, a: ty::t, b: ty::t) -> cres<ty::t> {\n         super_args(self, a, b)\n     }\n "}, {"sha": "d9088c064939b432ca0adfc8031c4f4ad08896c8", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -31,7 +31,7 @@ impl InferStr for ty::t {\n impl InferStr for FnSig {\n     fn inf_str(&self, cx: &InferCtxt) -> ~str {\n         fmt!(\"(%s) -> %s\",\n-             str::connect(self.inputs.map(|a| a.ty.inf_str(cx)), \", \"),\n+             str::connect(self.inputs.map(|a| a.inf_str(cx)), \", \"),\n              self.output.inf_str(cx))\n     }\n }"}, {"sha": "19bd2dd16ab18aea41f2aff2c5b173b02dcb4b3f", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -118,7 +118,7 @@ pub struct method_param {\n pub struct method_map_entry {\n     // the type of the self parameter, which is not reflected in the fn type\n     // (FIXME #3446)\n-    self_arg: ty::arg,\n+    self_ty: ty::t,\n \n     // the mode of `self`\n     self_mode: ty::SelfMode,\n@@ -351,22 +351,15 @@ fn check_start_fn_ty(ccx: @mut CrateCtxt,\n                 _ => ()\n             }\n \n-            fn arg(ty: ty::t) -> ty::arg {\n-                ty::arg {\n-                    ty: ty\n-                }\n-            }\n-\n             let se_ty = ty::mk_bare_fn(tcx, ty::BareFnTy {\n                 purity: ast::impure_fn,\n                 abis: abi::AbiSet::Rust(),\n                 sig: ty::FnSig {\n                     bound_lifetime_names: opt_vec::Empty,\n                     inputs: ~[\n-                        arg(ty::mk_int()),\n-                        arg(ty::mk_imm_ptr(tcx,\n-                                           ty::mk_imm_ptr(tcx, ty::mk_u8()))),\n-                        arg(ty::mk_imm_ptr(tcx, ty::mk_u8()))\n+                        ty::mk_int(),\n+                        ty::mk_imm_ptr(tcx, ty::mk_imm_ptr(tcx, ty::mk_u8())),\n+                        ty::mk_imm_ptr(tcx, ty::mk_u8())\n                     ],\n                     output: ty::mk_int()\n                 }"}, {"sha": "713d2360b63d3fef9ebfd00f78f5862fdbfdc9b2", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c80cf548a81730ef085dc22c641d81fbd90e8a3/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=9c80cf548a81730ef085dc22c641d81fbd90e8a3", "patch": "@@ -281,7 +281,7 @@ pub fn tys_to_str(cx: ctxt, ts: &[t]) -> ~str {\n \n pub fn fn_sig_to_str(cx: ctxt, typ: &ty::FnSig) -> ~str {\n     fmt!(\"fn%s -> %s\",\n-         tys_to_str(cx, typ.inputs.map(|a| a.ty)),\n+         tys_to_str(cx, typ.inputs.map(|a| *a)),\n          ty_to_str(cx, typ.output))\n }\n \n@@ -290,8 +290,8 @@ pub fn trait_ref_to_str(cx: ctxt, trait_ref: &ty::TraitRef) -> ~str {\n }\n \n pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n-    fn fn_input_to_str(cx: ctxt, input: ty::arg) -> ~str {\n-        ty_to_str(cx, input.ty)\n+    fn fn_input_to_str(cx: ctxt, input: ty::t) -> ~str {\n+        ty_to_str(cx, input)\n     }\n     fn bare_fn_to_str(cx: ctxt,\n                       purity: ast::purity,\n@@ -685,18 +685,12 @@ impl Repr for typeck::method_map_entry {\n         fmt!(\"method_map_entry {self_arg: %s, \\\n               explicit_self: %s, \\\n               origin: %s}\",\n-             self.self_arg.repr(tcx),\n+             self.self_ty.repr(tcx),\n              self.explicit_self.repr(tcx),\n              self.origin.repr(tcx))\n     }\n }\n \n-impl Repr for ty::arg {\n-    fn repr(&self, tcx: ctxt) -> ~str {\n-        fmt!(\"(%s)\", self.ty.repr(tcx))\n-    }\n-}\n-\n impl Repr for typeck::method_origin {\n     fn repr(&self, tcx: ctxt) -> ~str {\n         match self {"}]}