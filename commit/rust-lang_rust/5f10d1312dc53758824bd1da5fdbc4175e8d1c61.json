{"sha": "5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "node_id": "C_kwDOAAsO6NoAKDVmMTBkMTMxMmRjNTM3NTg4MjRiZDFkYTVmZGJjNDE3NWU4ZDFjNjE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-19T12:43:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-19T12:43:17Z"}, "message": "Rollup merge of #96086 - jsgf:remove-extern-location, r=davidtwco\n\nRemove `--extern-location` and all associated code\n\n`--extern-location` was an experiment to investigate the best way to\ngenerate useful diagnostics for unused dependency warnings by enabling a\nbuild system to identify the corresponding build config.\n\nWhile I did successfully use this, I've since been convinced the\nalternative `--json unused-externs` mechanism is the way to go, and\nthere's no point in having two mechanisms with basically the same\nfunctionality.\n\nThis effectively reverts https://github.com/rust-lang/rust/pull/72603", "tree": {"sha": "575022972881a8172fb26587a838905f446ad306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/575022972881a8172fb26587a838905f446ad306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiXq5mCRBK7hj4Ov3rIwAA34gIABpkmemD1gEFHdnsLTnYE3+f\nHzvlFrWEw26v91FhZ0SvNxodVBMwJJ4yjAJdbTzrm49SxOU3a79o4idkK5bI+5tz\n7X/mDQzi+6Ig7aKEKEbUBkOK3W7ApO7pOh47ofxr6mz9RktQRUoE6c0AlbNZGBHI\nxgr3LEpr0qo1XP9KLkyraingzR1DfImkI6GqWdxW+ZietwsKvmFFwKwCrn6ihhZn\nhWaPSPK7PARq64KQUcubHh06JQBoWnGOAcztJdukCQJF2OI4Uc8rrvfKkTkn2qRD\n/ZHx8G0O4ZHmCN1rbbK5NEJRGRRIhcjJWS1aj9DSmW3Xj4BfHs/y5juc2y5HsSQ=\n=0N6R\n-----END PGP SIGNATURE-----\n", "payload": "tree 575022972881a8172fb26587a838905f446ad306\nparent 9a2d14c39a177d04ff1100f7b34de95492d7b868\nparent 1be1157d7551d3664b6f55d5eea85fb08b86761b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650372197 +0200\ncommitter GitHub <noreply@github.com> 1650372197 +0200\n\nRollup merge of #96086 - jsgf:remove-extern-location, r=davidtwco\n\nRemove `--extern-location` and all associated code\n\n`--extern-location` was an experiment to investigate the best way to\ngenerate useful diagnostics for unused dependency warnings by enabling a\nbuild system to identify the corresponding build config.\n\nWhile I did successfully use this, I've since been convinced the\nalternative `--json unused-externs` mechanism is the way to go, and\nthere's no point in having two mechanisms with basically the same\nfunctionality.\n\nThis effectively reverts https://github.com/rust-lang/rust/pull/72603\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "html_url": "https://github.com/rust-lang/rust/commit/5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a2d14c39a177d04ff1100f7b34de95492d7b868", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2d14c39a177d04ff1100f7b34de95492d7b868", "html_url": "https://github.com/rust-lang/rust/commit/9a2d14c39a177d04ff1100f7b34de95492d7b868"}, {"sha": "1be1157d7551d3664b6f55d5eea85fb08b86761b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be1157d7551d3664b6f55d5eea85fb08b86761b", "html_url": "https://github.com/rust-lang/rust/commit/1be1157d7551d3664b6f55d5eea85fb08b86761b"}], "stats": {"total": 523, "additions": 6, "deletions": 517}, "files": [{"sha": "e3a9eb349368a27230e873bd737a02cf9674654d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -3934,7 +3934,6 @@ dependencies = [\n  \"rustc_infer\",\n  \"rustc_middle\",\n  \"rustc_parse_format\",\n- \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\","}, {"sha": "cd17726c78588dae3ac87503de5ba14dd192a8c1", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -1,12 +1,11 @@\n use crate::snippet::Style;\n use crate::{\n     CodeSuggestion, DiagnosticMessage, Level, MultiSpan, Substitution, SubstitutionPart,\n-    SuggestionStyle, ToolMetadata,\n+    SuggestionStyle,\n };\n use rustc_data_structures::stable_map::FxHashMap;\n use rustc_error_messages::FluentValue;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n-use rustc_serialize::json::Json;\n use rustc_span::edition::LATEST_STABLE_EDITION;\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -554,7 +553,6 @@ impl Diagnostic {\n             msg: msg.into(),\n             style,\n             applicability,\n-            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -582,7 +580,6 @@ impl Diagnostic {\n             msg: msg.into(),\n             style: SuggestionStyle::CompletelyHidden,\n             applicability,\n-            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -637,7 +634,6 @@ impl Diagnostic {\n             msg: msg.into(),\n             style,\n             applicability,\n-            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -680,7 +676,6 @@ impl Diagnostic {\n             msg: msg.into(),\n             style: SuggestionStyle::ShowCode,\n             applicability,\n-            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -705,7 +700,6 @@ impl Diagnostic {\n             msg: msg.into(),\n             style: SuggestionStyle::ShowCode,\n             applicability,\n-            tool_metadata: Default::default(),\n         });\n         self\n     }\n@@ -774,23 +768,6 @@ impl Diagnostic {\n         self\n     }\n \n-    /// Adds a suggestion intended only for a tool. The intent is that the metadata encodes\n-    /// the suggestion in a tool-specific way, as it may not even directly involve Rust code.\n-    pub fn tool_only_suggestion_with_metadata(\n-        &mut self,\n-        msg: impl Into<DiagnosticMessage>,\n-        applicability: Applicability,\n-        tool_metadata: Json,\n-    ) {\n-        self.push_suggestion(CodeSuggestion {\n-            substitutions: vec![],\n-            msg: msg.into(),\n-            style: SuggestionStyle::CompletelyHidden,\n-            applicability,\n-            tool_metadata: ToolMetadata::new(tool_metadata),\n-        })\n-    }\n-\n     pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self {\n         self.span = sp.into();\n         if let Some(span) = self.span.primary_span() {"}, {"sha": "d680e7fab704763917a2361f2c67b2100b33e915", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 1, "deletions": 66, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -14,7 +14,6 @@ use rustc_span::source_map::{FilePathMapping, SourceMap};\n use crate::emitter::{Emitter, HumanReadableErrorType};\n use crate::registry::Registry;\n use crate::DiagnosticId;\n-use crate::ToolMetadata;\n use crate::{\n     CodeSuggestion, FluentBundle, LazyFallbackBundle, MultiSpan, SpanLabel, SubDiagnostic,\n };\n@@ -30,7 +29,6 @@ use std::sync::{Arc, Mutex};\n use std::vec;\n \n use rustc_serialize::json::{as_json, as_pretty_json};\n-use rustc_serialize::{Encodable, Encoder};\n \n #[cfg(test)]\n mod tests;\n@@ -205,8 +203,7 @@ impl Emitter for JsonEmitter {\n \n // The following data types are provided just for serialisation.\n \n-// NOTE: this has a manual implementation of Encodable which needs to be updated in\n-// parallel.\n+#[derive(Encodable)]\n struct Diagnostic {\n     /// The primary error message.\n     message: String,\n@@ -218,65 +215,6 @@ struct Diagnostic {\n     children: Vec<Diagnostic>,\n     /// The message as rustc would render it.\n     rendered: Option<String>,\n-    /// Extra tool metadata\n-    tool_metadata: ToolMetadata,\n-}\n-\n-macro_rules! encode_fields {\n-    (\n-        $enc:expr,                  // encoder\n-        $idx:expr,                  // starting field index\n-        $struct:expr,               // struct we're serializing\n-        $struct_name:ident,         // struct name\n-        [ $($name:ident),+$(,)? ],  // fields to encode\n-        [ $($ignore:ident),+$(,)? ] // fields we're skipping\n-    ) => {\n-        {\n-            // Pattern match to make sure all fields are accounted for\n-            let $struct_name { $($name,)+ $($ignore: _,)+ } = $struct;\n-            let mut idx = $idx;\n-            $(\n-                $enc.emit_struct_field(\n-                    stringify!($name),\n-                    idx == 0,\n-                    |enc| $name.encode(enc),\n-                )?;\n-                idx += 1;\n-            )+\n-            idx\n-        }\n-    };\n-}\n-\n-// Special-case encoder to skip tool_metadata if not set\n-impl<E: Encoder> Encodable<E> for Diagnostic {\n-    fn encode(&self, s: &mut E) -> Result<(), E::Error> {\n-        s.emit_struct(false, |s| {\n-            let mut idx = 0;\n-\n-            idx = encode_fields!(\n-                s,\n-                idx,\n-                self,\n-                Self,\n-                [message, code, level, spans, children, rendered],\n-                [tool_metadata]\n-            );\n-            if self.tool_metadata.is_set() {\n-                idx = encode_fields!(\n-                    s,\n-                    idx,\n-                    self,\n-                    Self,\n-                    [tool_metadata],\n-                    [message, code, level, spans, children, rendered]\n-                );\n-            }\n-\n-            let _ = idx;\n-            Ok(())\n-        })\n-    }\n }\n \n #[derive(Encodable)]\n@@ -380,7 +318,6 @@ impl Diagnostic {\n                 spans: DiagnosticSpan::from_suggestion(sugg, &args, je),\n                 children: vec![],\n                 rendered: None,\n-                tool_metadata: sugg.tool_metadata.clone(),\n             }\n         });\n \n@@ -428,7 +365,6 @@ impl Diagnostic {\n                 .chain(sugg)\n                 .collect(),\n             rendered: Some(output),\n-            tool_metadata: ToolMetadata::default(),\n         }\n     }\n \n@@ -449,7 +385,6 @@ impl Diagnostic {\n                 .unwrap_or_else(|| DiagnosticSpan::from_multispan(&diag.span, args, je)),\n             children: vec![],\n             rendered: None,\n-            tool_metadata: ToolMetadata::default(),\n         }\n     }\n }"}, {"sha": "339bcc24751d0cf11de2f1c14619486df39e4984", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -36,13 +36,11 @@ pub use rustc_error_messages::{\n     LazyFallbackBundle, MultiSpan, SpanLabel, DEFAULT_LOCALE_RESOURCES,\n };\n pub use rustc_lint_defs::{pluralize, Applicability};\n-use rustc_serialize::json::Json;\n-use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::source_map::SourceMap;\n use rustc_span::{Loc, Span};\n \n use std::borrow::Cow;\n-use std::hash::{Hash, Hasher};\n+use std::hash::Hash;\n use std::num::NonZeroUsize;\n use std::panic;\n use std::path::Path;\n@@ -93,39 +91,6 @@ impl SuggestionStyle {\n     }\n }\n \n-#[derive(Clone, Debug, PartialEq, Default)]\n-pub struct ToolMetadata(pub Option<Json>);\n-\n-impl ToolMetadata {\n-    fn new(json: Json) -> Self {\n-        ToolMetadata(Some(json))\n-    }\n-\n-    fn is_set(&self) -> bool {\n-        self.0.is_some()\n-    }\n-}\n-\n-impl Hash for ToolMetadata {\n-    fn hash<H: Hasher>(&self, _state: &mut H) {}\n-}\n-\n-// Doesn't really need to round-trip\n-impl<D: Decoder> Decodable<D> for ToolMetadata {\n-    fn decode(_d: &mut D) -> Self {\n-        ToolMetadata(None)\n-    }\n-}\n-\n-impl<S: Encoder> Encodable<S> for ToolMetadata {\n-    fn encode(&self, e: &mut S) -> Result<(), S::Error> {\n-        match &self.0 {\n-            None => e.emit_unit(),\n-            Some(json) => json.encode(e),\n-        }\n-    }\n-}\n-\n #[derive(Clone, Debug, PartialEq, Hash, Encodable, Decodable)]\n pub struct CodeSuggestion {\n     /// Each substitute can have multiple variants due to multiple\n@@ -159,8 +124,6 @@ pub struct CodeSuggestion {\n     /// which are useful for users but not useful for\n     /// tools like rustfix\n     pub applicability: Applicability,\n-    /// Tool-specific metadata\n-    pub tool_metadata: ToolMetadata,\n }\n \n #[derive(Clone, Debug, PartialEq, Hash, Encodable, Decodable)]"}, {"sha": "02f747eeccc3e1eb21f72d4f6395c4f0112bb58b", "filename": "compiler/rustc_lint/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2FCargo.toml?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -18,7 +18,6 @@ rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_session = { path = \"../rustc_session\" }\n-rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n rustc_parse_format = { path = \"../rustc_parse_format\" }\n rustc_infer = { path = \"../rustc_infer\" }"}, {"sha": "0ffa65b79b584a5070e06bc93b2bcd717a6f91cb", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 26, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -33,8 +33,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, print::Printer, subst::GenericArg, RegisteredTools, Ty, TyCtxt};\n-use rustc_serialize::json::Json;\n-use rustc_session::lint::{BuiltinLintDiagnostics, ExternDepSpec};\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -728,30 +727,6 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::LegacyDeriveHelpers(span) => {\n                     db.span_label(span, \"the attribute is introduced here\");\n                 }\n-                BuiltinLintDiagnostics::ExternDepSpec(krate, loc) => {\n-                    let json = match loc {\n-                        ExternDepSpec::Json(json) => {\n-                            db.help(&format!(\"remove unnecessary dependency `{}`\", krate));\n-                            json\n-                        }\n-                        ExternDepSpec::Raw(raw) => {\n-                            db.help(&format!(\"remove unnecessary dependency `{}` at `{}`\", krate, raw));\n-                            db.span_suggestion_with_style(\n-                                DUMMY_SP,\n-                                \"raw extern location\",\n-                                raw.clone(),\n-                                Applicability::Unspecified,\n-                                SuggestionStyle::CompletelyHidden,\n-                            );\n-                            Json::String(raw)\n-                        }\n-                    };\n-                    db.tool_only_suggestion_with_metadata(\n-                        \"json extern location\",\n-                        Applicability::Unspecified,\n-                        json\n-                    );\n-                }\n                 BuiltinLintDiagnostics::ProcMacroBackCompat(note) => {\n                     db.note(&note);\n                 }"}, {"sha": "bde773a32db68c796aea2d5f27a182f101df2ff7", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -9,7 +9,6 @@ use rustc_ast::{AttrId, Attribute};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n use rustc_error_messages::MultiSpan;\n use rustc_hir::HirId;\n-use rustc_serialize::json::Json;\n use rustc_span::edition::Edition;\n use rustc_span::{sym, symbol::Ident, Span, Symbol};\n use rustc_target::spec::abi::Abi;\n@@ -403,13 +402,6 @@ impl<HCX> ToStableHashKey<HCX> for LintId {\n     }\n }\n \n-// Duplicated from rustc_session::config::ExternDepSpec to avoid cyclic dependency\n-#[derive(PartialEq, Debug)]\n-pub enum ExternDepSpec {\n-    Json(Json),\n-    Raw(String),\n-}\n-\n // This could be a closure, but then implementing derive trait\n // becomes hacky (and it gets allocated).\n #[derive(Debug)]\n@@ -428,7 +420,6 @@ pub enum BuiltinLintDiagnostics {\n     UnusedBuiltinAttribute { attr_name: Symbol, macro_name: String, invoc_span: Span },\n     PatternsInFnsWithoutBody(Span, Ident),\n     LegacyDeriveHelpers(Span),\n-    ExternDepSpec(String, ExternDepSpec),\n     ProcMacroBackCompat(String),\n     OrPatternsBackCompat(Span, String),\n     ReservedPrefix(Span),"}, {"sha": "e5d0cd289255206ebc6d72dd7530a090f6058786", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -13,11 +13,10 @@ use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::TyCtxt;\n-use rustc_serialize::json::ToJson;\n use rustc_session::config::{self, CrateType, ExternLocation};\n use rustc_session::cstore::{CrateDepKind, CrateSource, ExternCrate};\n use rustc_session::cstore::{ExternCrateSource, MetadataLoaderDyn};\n-use rustc_session::lint::{self, BuiltinLintDiagnostics, ExternDepSpec};\n+use rustc_session::lint;\n use rustc_session::output::validate_crate_name;\n use rustc_session::search_paths::PathKind;\n use rustc_session::Session;\n@@ -27,7 +26,6 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use proc_macro::bridge::client::ProcMacro;\n-use std::collections::BTreeMap;\n use std::ops::Fn;\n use std::path::Path;\n use std::{cmp, env};\n@@ -920,20 +918,7 @@ impl<'a> CrateLoader<'a> {\n                 continue;\n             }\n \n-            let diag = match self.sess.opts.extern_dep_specs.get(name) {\n-                Some(loc) => BuiltinLintDiagnostics::ExternDepSpec(name.clone(), loc.into()),\n-                None => {\n-                    // If we don't have a specific location, provide a json encoding of the `--extern`\n-                    // option.\n-                    let meta: BTreeMap<String, String> =\n-                        std::iter::once((\"name\".to_string(), name.to_string())).collect();\n-                    BuiltinLintDiagnostics::ExternDepSpec(\n-                        name.clone(),\n-                        ExternDepSpec::Json(meta.to_json()),\n-                    )\n-                }\n-            };\n-            self.sess.parse_sess.buffer_lint_with_diagnostic(\n+            self.sess.parse_sess.buffer_lint(\n                     lint::builtin::UNUSED_CRATE_DEPENDENCIES,\n                     span,\n                     ast::CRATE_NODE_ID,\n@@ -942,7 +927,6 @@ impl<'a> CrateLoader<'a> {\n                         name,\n                         self.local_crate_name,\n                         name),\n-                    diag,\n                 );\n         }\n     }"}, {"sha": "86a078f4a38583b3a47f7a6fffe73c21bf0fe7bf", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -15,8 +15,6 @@ use rustc_target::abi::{Align, TargetDataLayout};\n use rustc_target::spec::{LinkerFlavor, SplitDebuginfo, Target, TargetTriple, TargetWarnings};\n use rustc_target::spec::{PanicStrategy, SanitizerSet, TARGETS};\n \n-use rustc_serialize::json;\n-\n use crate::parse::{CrateCheckConfig, CrateConfig};\n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::{Edition, DEFAULT_EDITION, EDITION_NAME_LIST, LATEST_STABLE_EDITION};\n@@ -460,9 +458,6 @@ impl OutputTypes {\n #[derive(Clone)]\n pub struct Externs(BTreeMap<String, ExternEntry>);\n \n-#[derive(Clone)]\n-pub struct ExternDepSpecs(BTreeMap<String, ExternDepSpec>);\n-\n #[derive(Clone, Debug)]\n pub struct ExternEntry {\n     pub location: ExternLocation,\n@@ -494,27 +489,6 @@ pub enum ExternLocation {\n     ExactPaths(BTreeSet<CanonicalizedPath>),\n }\n \n-/// Supplied source location of a dependency - for example in a build specification\n-/// file like Cargo.toml. We support several syntaxes: if it makes sense to reference\n-/// a file and line, then the build system can specify that. On the other hand, it may\n-/// make more sense to have an arbitrary raw string.\n-#[derive(Clone, PartialEq)]\n-pub enum ExternDepSpec {\n-    /// Raw string\n-    Raw(String),\n-    /// Raw data in json format\n-    Json(json::Json),\n-}\n-\n-impl<'a> From<&'a ExternDepSpec> for rustc_lint_defs::ExternDepSpec {\n-    fn from(from: &'a ExternDepSpec) -> Self {\n-        match from {\n-            ExternDepSpec::Raw(s) => rustc_lint_defs::ExternDepSpec::Raw(s.clone()),\n-            ExternDepSpec::Json(json) => rustc_lint_defs::ExternDepSpec::Json(json.clone()),\n-        }\n-    }\n-}\n-\n impl Externs {\n     /// Used for testing.\n     pub fn new(data: BTreeMap<String, ExternEntry>) -> Externs {\n@@ -547,25 +521,6 @@ impl ExternEntry {\n     }\n }\n \n-impl ExternDepSpecs {\n-    pub fn new(data: BTreeMap<String, ExternDepSpec>) -> ExternDepSpecs {\n-        ExternDepSpecs(data)\n-    }\n-\n-    pub fn get(&self, key: &str) -> Option<&ExternDepSpec> {\n-        self.0.get(key)\n-    }\n-}\n-\n-impl fmt::Display for ExternDepSpec {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            ExternDepSpec::Raw(raw) => fmt.write_str(raw),\n-            ExternDepSpec::Json(json) => json::as_json(json).fmt(fmt),\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum PrintRequest {\n     FileNames,\n@@ -785,7 +740,6 @@ impl Default for Options {\n             cg: Default::default(),\n             error_format: ErrorOutputType::default(),\n             externs: Externs(BTreeMap::new()),\n-            extern_dep_specs: ExternDepSpecs(BTreeMap::new()),\n             crate_name: None,\n             libs: Vec::new(),\n             unstable_features: UnstableFeatures::Disallow,\n@@ -1454,12 +1408,6 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n             \"Specify where an external rust library is located\",\n             \"NAME[=PATH]\",\n         ),\n-        opt::multi_s(\n-            \"\",\n-            \"extern-location\",\n-            \"Location where an external crate dependency is specified\",\n-            \"NAME=LOCATION\",\n-        ),\n         opt::opt_s(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n         opt::multi(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n         opt::opt_s(\n@@ -2221,68 +2169,6 @@ pub fn parse_externs(\n     Externs(externs)\n }\n \n-fn parse_extern_dep_specs(\n-    matches: &getopts::Matches,\n-    debugging_opts: &DebuggingOptions,\n-    error_format: ErrorOutputType,\n-) -> ExternDepSpecs {\n-    let is_unstable_enabled = debugging_opts.unstable_options;\n-    let mut map = BTreeMap::new();\n-\n-    for arg in matches.opt_strs(\"extern-location\") {\n-        if !is_unstable_enabled {\n-            early_error(\n-                error_format,\n-                \"`--extern-location` option is unstable: set `-Z unstable-options`\",\n-            );\n-        }\n-\n-        let mut parts = arg.splitn(2, '=');\n-        let name = parts.next().unwrap_or_else(|| {\n-            early_error(error_format, \"`--extern-location` value must not be empty\")\n-        });\n-        let loc = parts.next().unwrap_or_else(|| {\n-            early_error(\n-                error_format,\n-                &format!(\"`--extern-location`: specify location for extern crate `{name}`\"),\n-            )\n-        });\n-\n-        let locparts: Vec<_> = loc.split(':').collect();\n-        let spec = match &locparts[..] {\n-            [\"raw\", ..] => {\n-                // Don't want `:` split string\n-                let raw = loc.splitn(2, ':').nth(1).unwrap_or_else(|| {\n-                    early_error(error_format, \"`--extern-location`: missing `raw` location\")\n-                });\n-                ExternDepSpec::Raw(raw.to_string())\n-            }\n-            [\"json\", ..] => {\n-                // Don't want `:` split string\n-                let raw = loc.splitn(2, ':').nth(1).unwrap_or_else(|| {\n-                    early_error(error_format, \"`--extern-location`: missing `json` location\")\n-                });\n-                let json = json::from_str(raw).unwrap_or_else(|_| {\n-                    early_error(\n-                        error_format,\n-                        &format!(\"`--extern-location`: malformed json location `{raw}`\"),\n-                    )\n-                });\n-                ExternDepSpec::Json(json)\n-            }\n-            [bad, ..] => early_error(\n-                error_format,\n-                &format!(\"unknown location type `{bad}`: use `raw` or `json`\"),\n-            ),\n-            [] => early_error(error_format, \"missing location specification\"),\n-        };\n-\n-        map.insert(name.to_string(), spec);\n-    }\n-\n-    ExternDepSpecs::new(map)\n-}\n-\n fn parse_remap_path_prefix(\n     matches: &getopts::Matches,\n     debugging_opts: &DebuggingOptions,\n@@ -2525,7 +2411,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     }\n \n     let externs = parse_externs(matches, &debugging_opts, error_format);\n-    let extern_dep_specs = parse_extern_dep_specs(matches, &debugging_opts, error_format);\n \n     let crate_name = matches.opt_str(\"crate-name\");\n \n@@ -2601,7 +2486,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         error_format,\n         externs,\n         unstable_features: UnstableFeatures::from_environment(crate_name.as_deref()),\n-        extern_dep_specs,\n         crate_name,\n         libs,\n         debug_assertions,"}, {"sha": "df65409a8a063b1c7e87994b5d2a0ed31f93f939", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -183,7 +183,6 @@ top_level_options!(\n         borrowck_mode: BorrowckMode [UNTRACKED],\n         cg: CodegenOptions [SUBSTRUCT],\n         externs: Externs [UNTRACKED],\n-        extern_dep_specs: ExternDepSpecs [UNTRACKED],\n         crate_name: Option<String> [TRACKED],\n         /// Indicates how the compiler should treat unstable features.\n         unstable_features: UnstableFeatures [TRACKED],"}, {"sha": "1c80d5426bf75e6512aa5ccbc371a86395fa741d", "filename": "src/doc/unstable-book/src/compiler-flags/extern-location.md", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-location.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-location.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fextern-location.md?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,31 +0,0 @@\n-# `extern-location`\n-\n-MCP for this feature: [#303]\n-\n-[#303]: https://github.com/rust-lang/compiler-team/issues/303\n-\n-------------------------\n-\n-The `unused-extern-crates` lint reports when a crate was specified on the rustc\n-command-line with `--extern name=path` but no symbols were referenced in it.\n-This is useful to know, but it's hard to map that back to a specific place a user\n-or tool could fix (ie, to remove the unused dependency).\n-\n-The `--extern-location` flag allows the build system to associate a location with\n-the `--extern` option, which is then emitted as part of the diagnostics. This location\n-is abstract and just round-tripped through rustc; the compiler never attempts to\n-interpret it in any way.\n-\n-There are two supported forms of location: a bare string, or a blob of json:\n-- `--extern-location foo=raw:Makefile:123` would associate the raw string `Makefile:123`\n-- `--extern-location 'bar=json:{\"target\":\"//my_project:library\",\"dep\":\"//common:serde\"}` would\n-  associate the json structure with `--extern bar=<path>`, indicating which dependency of\n-  which rule introduced the unused extern crate.\n-\n-This primarily intended to be used with tooling - for example a linter which can automatically\n-remove unused dependencies - rather than being directly presented to users.\n-\n-`raw` locations are presented as part of the normal rendered diagnostics and included in\n-the json form. `json` locations are only included in the json form of diagnostics,\n-as a `tool_metadata` field. For `raw` locations `tool_metadata` is simply a json string,\n-whereas `json` allows the rustc invoker to fully control its form and content."}, {"sha": "e69df0359fd914203bf9dd4978fd2fef3b8a5aec", "filename": "src/test/ui/unused-crate-deps/extern-loc-bad-loctype.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.rs?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,8 +0,0 @@\n-// --extern-location with bad location type\n-\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=badloc:in-the-test-file -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-\n-fn main() {}"}, {"sha": "12378f12557b7063e1da78e0d127ef02661cca6c", "filename": "src/test/ui/unused-crate-deps/extern-loc-bad-loctype.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-bad-loctype.stderr?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,2 +0,0 @@\n-error: unknown location type `badloc`: use `raw` or `json`\n-"}, {"sha": "a023f535b8198b6a20beefb91b2423a853e305dc", "filename": "src/test/ui/unused-crate-deps/extern-loc-defl-json.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.rs?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,10 +0,0 @@\n-// Default extern location from name and path if one isn't specified\n-\n-// check-pass\n-// aux-crate:bar=bar.rs\n-// compile-flags:--error-format json\n-\n-#![warn(unused_crate_dependencies)]\n-//~^ WARNING external crate `bar` unused in\n-\n-fn main() {}"}, {"sha": "cee3f6c1495c772e34ce55ea027faaec71dacafa", "filename": "src/test/ui/unused-crate-deps/extern-loc-defl-json.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-defl-json.stderr?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,17 +0,0 @@\n-{\"message\":\"external crate `bar` unused in `extern_loc_defl_json`: remove the dependency or add `use bar as _;`\",\"code\":{\"code\":\"unused_crate_dependencies\",\"explanation\":null},\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-defl-json.rs\",\"byte_start\":146,\"byte_end\":146,\"line_start\":7,\"line_end\":7,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"the lint level is defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-defl-json.rs\",\"byte_start\":154,\"byte_end\":179,\"line_start\":7,\"line_end\":7,\"column_start\":9,\"column_end\":34,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":9,\"highlight_end\":34}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"remove unnecessary dependency `bar`\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"json extern location\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null,\"tool_metadata\":{\"name\":\"bar\"}}],\"rendered\":\"warning: external crate `bar` unused in `extern_loc_defl_json`: remove the dependency or add `use bar as _;`\n-  --> $DIR/extern-loc-defl-json.rs:7:1\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   | ^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/extern-loc-defl-json.rs:7:9\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `bar`\n-\n-\"}\n-{\"message\":\"1 warning emitted\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"warning: 1 warning emitted\n-\n-\"}"}, {"sha": "aee6233e4283d40a68e3c22379111d6014d7834d", "filename": "src/test/ui/unused-crate-deps/extern-loc-json-bad-json.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.rs?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,8 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=json:[{\"malformed -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-\n-fn main() {}"}, {"sha": "20d606372e0274bc57b6956f71f7a910c420b675", "filename": "src/test/ui/unused-crate-deps/extern-loc-json-bad-json.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-bad-json.stderr?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,2 +0,0 @@\n-error: `--extern-location`: malformed json location `[{\"malformed`\n-"}, {"sha": "c7988cd469e2d06a71e53af011d8b84cc6752195", "filename": "src/test/ui/unused-crate-deps/extern-loc-json-json.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.rs?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,10 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// check-pass\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=json:{\"key\":123,\"value\":{}} --error-format json -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-//~^ WARNING external crate `bar` unused in\n-\n-fn main() {}"}, {"sha": "001ec6a25549a10d7c12626a9133230440761910", "filename": "src/test/ui/unused-crate-deps/extern-loc-json-json.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json-json.stderr?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,17 +0,0 @@\n-{\"message\":\"external crate `bar` unused in `extern_loc_json_json`: remove the dependency or add `use bar as _;`\",\"code\":{\"code\":\"unused_crate_dependencies\",\"explanation\":null},\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-json-json.rs\",\"byte_start\":189,\"byte_end\":189,\"line_start\":7,\"line_end\":7,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"the lint level is defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-json-json.rs\",\"byte_start\":197,\"byte_end\":222,\"line_start\":7,\"line_end\":7,\"column_start\":9,\"column_end\":34,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":9,\"highlight_end\":34}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"remove unnecessary dependency `bar`\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"json extern location\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null,\"tool_metadata\":{\"key\":123,\"value\":{}}}],\"rendered\":\"warning: external crate `bar` unused in `extern_loc_json_json`: remove the dependency or add `use bar as _;`\n-  --> $DIR/extern-loc-json-json.rs:7:1\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   | ^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/extern-loc-json-json.rs:7:9\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `bar`\n-\n-\"}\n-{\"message\":\"1 warning emitted\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"warning: 1 warning emitted\n-\n-\"}"}, {"sha": "c0d76c86b895c190566738a905579fdd1bbc9ca4", "filename": "src/test/ui/unused-crate-deps/extern-loc-json.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.rs?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,10 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// check-pass\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=json:{\"key\":123,\"value\":{}} -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-//~^ WARNING external crate `bar` unused in\n-\n-fn main() {}"}, {"sha": "a6bbc0da1c6b48e0568a08d5b151d083f1043149", "filename": "src/test/ui/unused-crate-deps/extern-loc-json.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-json.stderr?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,15 +0,0 @@\n-warning: external crate `bar` unused in `extern_loc_json`: remove the dependency or add `use bar as _;`\n-  --> $DIR/extern-loc-json.rs:7:1\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   | ^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/extern-loc-json.rs:7:9\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `bar`\n-\n-warning: 1 warning emitted\n-"}, {"sha": "6ac558974d0c5476e6a606ffe3006a0b050607ac", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loc.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.rs?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,8 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar -Zunstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-\n-fn main() {}"}, {"sha": "4584fbfb67ff7839bc25ef3d068df95ee2a2c263", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loc.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loc.stderr?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,2 +0,0 @@\n-error: `--extern-location`: specify location for extern crate `bar`\n-"}, {"sha": "3590b9c2812c772c60b0f4188700c9ab53b1130d", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loctype.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.rs?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,8 +0,0 @@\n-// --extern-location with no type\n-\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=missing-loc-type -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-\n-fn main() {}"}, {"sha": "d0c36ebeb142ef4eb6cec059e143b61947be9e4f", "filename": "src/test/ui/unused-crate-deps/extern-loc-missing-loctype.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-missing-loctype.stderr?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,2 +0,0 @@\n-error: unknown location type `missing-loc-type`: use `raw` or `json`\n-"}, {"sha": "64c3d77ce0826e0228ecb732e511e9f2923bc9d1", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw-json.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.rs?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,10 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// check-pass\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=raw:in-the-test-file --error-format json -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-//~^ WARNING external crate `bar` unused in\n-\n-fn main() {}"}, {"sha": "4083bd51835b03afa45ee530e3777a9cecb3455d", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw-json.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-json.stderr?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,17 +0,0 @@\n-{\"message\":\"external crate `bar` unused in `extern_loc_raw_json`: remove the dependency or add `use bar as _;`\",\"code\":{\"code\":\"unused_crate_dependencies\",\"explanation\":null},\"level\":\"warning\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-raw-json.rs\",\"byte_start\":182,\"byte_end\":182,\"line_start\":7,\"line_end\":7,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":1,\"highlight_end\":1}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"the lint level is defined here\",\"code\":null,\"level\":\"note\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-raw-json.rs\",\"byte_start\":190,\"byte_end\":215,\"line_start\":7,\"line_end\":7,\"column_start\":9,\"column_end\":34,\"is_primary\":true,\"text\":[{\"text\":\"#![warn(unused_crate_dependencies)]\",\"highlight_start\":9,\"highlight_end\":34}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"remove unnecessary dependency `bar` at `in-the-test-file`\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null},{\"message\":\"raw extern location\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/extern-loc-raw-json.rs\",\"byte_start\":0,\"byte_end\":0,\"line_start\":1,\"line_end\":1,\"column_start\":1,\"column_end\":1,\"is_primary\":true,\"text\":[],\"label\":null,\"suggested_replacement\":\"in-the-test-file\",\"suggestion_applicability\":\"Unspecified\",\"expansion\":null}],\"children\":[],\"rendered\":null},{\"message\":\"json extern location\",\"code\":null,\"level\":\"help\",\"spans\":[],\"children\":[],\"rendered\":null,\"tool_metadata\":\"in-the-test-file\"}],\"rendered\":\"warning: external crate `bar` unused in `extern_loc_raw_json`: remove the dependency or add `use bar as _;`\n-  --> $DIR/extern-loc-raw-json.rs:7:1\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   | ^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/extern-loc-raw-json.rs:7:9\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `bar` at `in-the-test-file`\n-\n-\"}\n-{\"message\":\"1 warning emitted\",\"code\":null,\"level\":\"warning\",\"spans\":[],\"children\":[],\"rendered\":\"warning: 1 warning emitted\n-\n-\"}"}, {"sha": "a9e7afbda31e75005f07fe0abfd2320721d54715", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw-missing-loc.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.rs?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,8 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=raw -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-\n-fn main() {}"}, {"sha": "4b51266e4f6fad6cbde30e126439b729ae60b94d", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw-missing-loc.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw-missing-loc.stderr?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,2 +0,0 @@\n-error: `--extern-location`: missing `raw` location\n-"}, {"sha": "27d0975d01ada9b5c763ed047a31832cd427d5a5", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.rs?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,10 +0,0 @@\n-// --extern-location with a raw reference\n-\n-// check-pass\n-// aux-crate:bar=bar.rs\n-// compile-flags:--extern-location bar=raw:in-the-test-file -Z unstable-options\n-\n-#![warn(unused_crate_dependencies)]\n-//~^ WARNING external crate `bar` unused in\n-\n-fn main() {}"}, {"sha": "2cdd00558667352aac003952997405b5f7252167", "filename": "src/test/ui/unused-crate-deps/extern-loc-raw.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a2d14c39a177d04ff1100f7b34de95492d7b868/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fextern-loc-raw.stderr?ref=9a2d14c39a177d04ff1100f7b34de95492d7b868", "patch": "@@ -1,15 +0,0 @@\n-warning: external crate `bar` unused in `extern_loc_raw`: remove the dependency or add `use bar as _;`\n-  --> $DIR/extern-loc-raw.rs:7:1\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   | ^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/extern-loc-raw.rs:7:9\n-   |\n-LL | #![warn(unused_crate_dependencies)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `bar` at `in-the-test-file`\n-\n-warning: 1 warning emitted\n-"}, {"sha": "15833126bd6201ddda75e3b529eb26f8dc08473c", "filename": "src/test/ui/unused-crate-deps/libfib.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Flibfib.stderr?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -5,7 +5,6 @@ LL | pub fn fib(n: u32) -> Vec<u32> {\n    | ^\n    |\n    = note: requested on the command line with `-W unused-crate-dependencies`\n-   = help: remove unnecessary dependency `bar`\n \n warning: 1 warning emitted\n "}, {"sha": "c8c6c4507b0c51427136d656ba9de8cdbdcd3a43", "filename": "src/test/ui/unused-crate-deps/unused-aliases.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Funused-aliases.stderr?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -9,7 +9,6 @@ note: the lint level is defined here\n    |\n LL | #![warn(unused_crate_dependencies)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `barbar`\n \n warning: 1 warning emitted\n "}, {"sha": "0d38315704b11fb25e6bc7be22774c0714d4f4d4", "filename": "src/test/ui/unused-crate-deps/warn-attr.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-attr.stderr?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -9,7 +9,6 @@ note: the lint level is defined here\n    |\n LL | #![warn(unused_crate_dependencies)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = help: remove unnecessary dependency `bar`\n \n warning: 1 warning emitted\n "}, {"sha": "65956461d643928fa5a319c7ae533f3dc7e15ded", "filename": "src/test/ui/unused-crate-deps/warn-cmdline-static.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline-static.stderr?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -5,7 +5,6 @@ LL | fn main() {}\n    | ^\n    |\n    = note: requested on the command line with `-W unused-crate-dependencies`\n-   = help: remove unnecessary dependency `bar`\n \n warning: 1 warning emitted\n "}, {"sha": "ea675ba9a1eb184560f8379ea4571e2d2b1e9ec4", "filename": "src/test/ui/unused-crate-deps/warn-cmdline.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f10d1312dc53758824bd1da5fdbc4175e8d1c61/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funused-crate-deps%2Fwarn-cmdline.stderr?ref=5f10d1312dc53758824bd1da5fdbc4175e8d1c61", "patch": "@@ -5,7 +5,6 @@ LL | fn main() {}\n    | ^\n    |\n    = note: requested on the command line with `-W unused-crate-dependencies`\n-   = help: remove unnecessary dependency `bar`\n \n warning: 1 warning emitted\n "}]}