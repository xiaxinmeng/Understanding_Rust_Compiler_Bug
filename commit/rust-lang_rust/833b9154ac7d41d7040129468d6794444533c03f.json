{"sha": "833b9154ac7d41d7040129468d6794444533c03f", "node_id": "C_kwDOAAsO6NoAKDgzM2I5MTU0YWM3ZDQxZDcwNDAxMjk0NjhkNjc5NDQ0NDUzM2MwM2Y", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-12-15T16:20:27Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2023-02-17T18:56:11Z"}, "message": "Make encode_attrs use opt_local_def_id_to_hir_id so we can feed it with None for definitions that have no HIR", "tree": {"sha": "d807b5f3ae99591f22258179cd853eb5433bf49a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d807b5f3ae99591f22258179cd853eb5433bf49a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/833b9154ac7d41d7040129468d6794444533c03f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmPvzcsACgkQgTGiTgx5\n76/J6A/+KCUJ/YYnmPOuvTCQiiLVxDr6toNilzv7kV9wWr7pQqh2kxJLQTz+2AQt\nffA4MW9bW0JL/J/LxONHIqCdTx9HvQPS9l8oADSSNo7RKQmZKXaS04Uad2rzJPhv\nUZHPx7K8vTR0GbnRlNiJd1B05MjfOTC5ZZVMILvfEkw78bWVDcnk499bc/GVpT3k\n8UC3kaFoPdCKM6ZnRTGfrmGUbMZfcCmnpwoT6Z06BtQyb4LNLYvtSKiB44MISgIo\njGm/sVD9ukYzGy9X4tqreuDt7UJJZTRRmBRb1nbKCJxJztLHF21NYHIWm3KpaC51\ntEfODKv0j787U3ERG6dZTj5vR6xBZsbwdNqg0ZkiULdlmW7rvZJgibeDWAoqDo5x\nA8tz/WNjOPn+eqCnT+hjUUGDjrXk6aezrZieDR0Q8RZlDKS1sEyAGtd1ZpAb6uIN\nFqup2aVbsX02+jdlSogFK2YbxF1SiTegjJZ8CVK8yPpPQTKcCQGtX8trehSsL6la\n1kDRNLStih/k1sADDYSaAr5Ykx3XitkBckdUvo1tfWj+XnI6t6k785Tzn/keFNbp\nPduF9Ws16TL+A4UdVcHgeTvmYMcyeToJlQfQ0T03zAYs4evBpVx7/j89TFBvQ1wF\nmXOt4jjJLNqoHUfjJmqcOrhBUMcxUuLZVrhr34lUlafrwB0szXc=\n=TpgX\n-----END PGP SIGNATURE-----", "payload": "tree d807b5f3ae99591f22258179cd853eb5433bf49a\nparent f722b24eb9ea35a7cc187a1cb5c50d4d324f5855\nauthor Santiago Pastorino <spastorino@gmail.com> 1671121227 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1676660171 -0300\n\nMake encode_attrs use opt_local_def_id_to_hir_id so we can feed it with None for definitions that have no HIR\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/833b9154ac7d41d7040129468d6794444533c03f", "html_url": "https://github.com/rust-lang/rust/commit/833b9154ac7d41d7040129468d6794444533c03f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/833b9154ac7d41d7040129468d6794444533c03f/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "url": "https://api.github.com/repos/rust-lang/rust/commits/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855", "html_url": "https://github.com/rust-lang/rust/commit/f722b24eb9ea35a7cc187a1cb5c50d4d324f5855"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "16029822d03da123ad941f7c2fefc4041b50e8ef", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/833b9154ac7d41d7040129468d6794444533c03f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b9154ac7d41d7040129468d6794444533c03f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=833b9154ac7d41d7040129468d6794444533c03f", "patch": "@@ -1137,8 +1137,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             is_doc_hidden: false,\n         };\n         let attr_iter = tcx\n-            .hir()\n-            .attrs(tcx.hir().local_def_id_to_hir_id(def_id))\n+            .opt_local_def_id_to_hir_id(def_id)\n+            .map_or(Default::default(), |hir_id| tcx.hir().attrs(hir_id))\n             .iter()\n             .filter(|attr| analyze_attr(attr, &mut state));\n "}, {"sha": "2e2ca6a27888ead9c7d4f6b931237e609acd9dda", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/833b9154ac7d41d7040129468d6794444533c03f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b9154ac7d41d7040129468d6794444533c03f/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=833b9154ac7d41d7040129468d6794444533c03f", "patch": "@@ -121,13 +121,13 @@ pub fn provide(providers: &mut Providers) {\n         let node = owner.node();\n         Some(Owner { node, hash_without_bodies: owner.nodes.hash_without_bodies })\n     };\n-    providers.local_def_id_to_hir_id = |tcx, id| {\n+    providers.opt_local_def_id_to_hir_id = |tcx, id| {\n         let owner = tcx.hir_crate(()).owners[id].map(|_| ());\n-        match owner {\n+        Some(match owner {\n             MaybeOwner::Owner(_) => HirId::make_owner(id),\n             MaybeOwner::Phantom => bug!(\"No HirId for {:?}\", id),\n             MaybeOwner::NonOwner(hir_id) => hir_id,\n-        }\n+        })\n     };\n     providers.hir_owner_nodes = |tcx, id| tcx.hir_crate(()).owners[id.def_id].map(|i| &i.nodes);\n     providers.hir_owner_parent = |tcx, id| {"}, {"sha": "8b846f106037508c3aea4d82949ce56e1341230b", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/833b9154ac7d41d7040129468d6794444533c03f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b9154ac7d41d7040129468d6794444533c03f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=833b9154ac7d41d7040129468d6794444533c03f", "patch": "@@ -85,11 +85,10 @@ rustc_queries! {\n         desc { |tcx| \"getting HIR owner of `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n-    /// Gives access to the HIR ID for the given `LocalDefId` owner `key`.\n+    /// Gives access to the HIR ID for the given `LocalDefId` owner `key` if any.\n     ///\n-    /// This can be conveniently accessed by methods on `tcx.hir()`.\n-    /// Avoid calling this query directly.\n-    query local_def_id_to_hir_id(key: LocalDefId) -> hir::HirId {\n+    /// Definitions that were generated with no HIR, would be feeded to return `None`.\n+    query opt_local_def_id_to_hir_id(key: LocalDefId) -> Option<hir::HirId>{\n         desc { |tcx| \"getting HIR ID of `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n "}, {"sha": "dc7e4ac900a35aa2ab0051722583b5b18f1f2381", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/833b9154ac7d41d7040129468d6794444533c03f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/833b9154ac7d41d7040129468d6794444533c03f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=833b9154ac7d41d7040129468d6794444533c03f", "patch": "@@ -2428,6 +2428,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         )\n     }\n \n+    pub fn local_def_id_to_hir_id(self, local_def_id: LocalDefId) -> HirId {\n+        self.opt_local_def_id_to_hir_id(local_def_id).unwrap()\n+    }\n+\n     pub fn trait_solver_next(self) -> bool {\n         self.sess.opts.unstable_opts.trait_solver == rustc_session::config::TraitSolver::Next\n     }"}]}