{"sha": "01af5040fdada6ef8f1b749cda798d80a8590b2c", "node_id": "C_kwDOAAsO6NoAKDAxYWY1MDQwZmRhZGE2ZWY4ZjFiNzQ5Y2RhNzk4ZDgwYTg1OTBiMmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-04T16:29:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-04T16:29:26Z"}, "message": "Auto merge of #102666 - matthiaskrgr:rollup-tuge18t, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #102241 (Package `rust-docs-json` into nightly components (take 3))\n - #102488 (Check generic argument compatibility when projecting assoc ty)\n - #102647 (Only allow ~const bounds for traits with #[const_trait])\n - #102648 (Add test for #102605)\n - #102651 (It's not about types or consts, but the lack of regions)\n - #102653 (resolve instance: missing value to `delay_span_bug`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "23235ea28be06dd55fb8e04ffc1b9dd3ea02e193", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23235ea28be06dd55fb8e04ffc1b9dd3ea02e193"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01af5040fdada6ef8f1b749cda798d80a8590b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01af5040fdada6ef8f1b749cda798d80a8590b2c", "html_url": "https://github.com/rust-lang/rust/commit/01af5040fdada6ef8f1b749cda798d80a8590b2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01af5040fdada6ef8f1b749cda798d80a8590b2c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "url": "https://api.github.com/repos/rust-lang/rust/commits/02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "html_url": "https://github.com/rust-lang/rust/commit/02cd79afb8080fce8c8ce35533c54d8ecf8f390e"}, {"sha": "db94aeda38a9afe42b3b89bbffabb222b289ab72", "url": "https://api.github.com/repos/rust-lang/rust/commits/db94aeda38a9afe42b3b89bbffabb222b289ab72", "html_url": "https://github.com/rust-lang/rust/commit/db94aeda38a9afe42b3b89bbffabb222b289ab72"}], "stats": {"total": 635, "additions": 434, "deletions": 201}, "files": [{"sha": "28ed88e8345c4cb53f946154844a0a183a246d40", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -236,7 +236,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                 .unwrap();\n             let mut hidden_type = infcx.resolve_vars_if_possible(decl.hidden_type);\n             trace!(\"finalized opaque type {:?} to {:#?}\", opaque_type_key, hidden_type.ty.kind());\n-            if hidden_type.has_infer_types_or_consts() {\n+            if hidden_type.has_non_region_infer() {\n                 infcx.tcx.sess.delay_span_bug(\n                     decl.hidden_type.span,\n                     &format!(\"could not resolve {:#?}\", hidden_type.ty.kind()),"}, {"sha": "e51e528062094f5d6087fc53800af98612ab1618", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -91,14 +91,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         mutate_fulfillment_errors: impl Fn(&mut Vec<traits::FulfillmentError<'tcx>>),\n     ) -> Ty<'tcx> {\n         // No Infer()? Nothing needs doing.\n-        if !ty.has_infer_types_or_consts() {\n+        if !ty.has_non_region_infer() {\n             debug!(\"no inference var, nothing needs doing\");\n             return ty;\n         }\n \n         // If `ty` is a type variable, see whether we already know what it is.\n         ty = self.resolve_vars_if_possible(ty);\n-        if !ty.has_infer_types_or_consts() {\n+        if !ty.has_non_region_infer() {\n             debug!(?ty);\n             return ty;\n         }"}, {"sha": "13e74021b9e0a3903dd8fb2072c20da548d01834", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -63,7 +63,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let get_operand_ty = |expr| {\n                 let ty = self.typeck_results.borrow().expr_ty_adjusted(expr);\n                 let ty = self.resolve_vars_if_possible(ty);\n-                if ty.has_infer_types_or_consts() {\n+                if ty.has_non_region_infer() {\n                     assert!(self.is_tainted_by_errors());\n                     self.tcx.ty_error()\n                 } else {"}, {"sha": "4abc00cefb68f29ffa18741c38fcad7a07cf688a", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n         target_features: &FxHashSet<Symbol>,\n     ) -> Option<InlineAsmType> {\n         let ty = (self.get_operand_ty)(expr);\n-        if ty.has_infer_types_or_consts() {\n+        if ty.has_non_region_infer() {\n             bug!(\"inference variable in asm operand ty: {:?} {:?}\", expr, ty);\n         }\n         let asm_ty_isize = match self.tcx.sess.target.pointer_width {"}, {"sha": "d876b1d20fe22c5674f7d8b1bba523c4e199618f", "filename": "compiler/rustc_hir_analysis/src/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fop.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -471,7 +471,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // This has nothing here because it means we did string\n                         // concatenation (e.g., \"Hello \" + \"World!\"). This means\n                         // we don't want the note in the else clause to be emitted\n-                    } else if lhs_ty.has_param_types_or_consts() {\n+                    } else if lhs_ty.has_non_region_param() {\n                         // Look for a TraitPredicate in the Fulfillment errors,\n                         // and use it to generate a suggestion.\n                         //\n@@ -657,7 +657,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         format!(\"cannot apply unary operator `{}`\", op.as_str()),\n                     );\n \n-                    if operand_ty.has_param_types_or_consts() {\n+                    if operand_ty.has_non_region_param() {\n                         let predicates = errors.iter().filter_map(|error| {\n                             error.obligation.predicate.to_opt_poly_trait_pred()\n                         });"}, {"sha": "d607f9014200eda4cf2fb8f514114f99d25161e2", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1428,9 +1428,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             let substituted_pred = predicates.rebind(pred).subst(tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)\n             // or preds with multiple params.\n-            if substituted_pred.has_param_types_or_consts()\n-                || param_count.params.len() > 1\n-                || has_region\n+            if substituted_pred.has_non_region_param() || param_count.params.len() > 1 || has_region\n             {\n                 None\n             } else if predicates.0.predicates.iter().any(|&(p, _)| p == substituted_pred) {"}, {"sha": "70edcd10f5f32f884f56a12b7af01d453146918f", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -712,9 +712,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ) -> bool {\n         // Reject any attempt to unify two unevaluated constants that contain inference\n         // variables, since inference variables in queries lead to ICEs.\n-        if a.substs.has_infer_types_or_consts()\n-            || b.substs.has_infer_types_or_consts()\n-            || param_env.has_infer_types_or_consts()\n+        if a.substs.has_non_region_infer()\n+            || b.substs.has_non_region_infer()\n+            || param_env.has_non_region_infer()\n         {\n             debug!(\"a or b or param_env contain infer vars in its substs -> cannot unify\");\n             return false;\n@@ -1734,7 +1734,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         // Postpone the evaluation of constants whose substs depend on inference\n         // variables\n-        if substs.has_infer_types_or_consts() {\n+        if substs.has_non_region_infer() {\n             let ac = AbstractConst::new(self.tcx, unevaluated);\n             match ac {\n                 Ok(None) => {\n@@ -2072,21 +2072,17 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n ) -> SubstsRef<'tcx> {\n     tcx.mk_substs(substs.iter().enumerate().map(|(idx, arg)| {\n         match arg.unpack() {\n-            GenericArgKind::Type(_)\n-                if arg.has_param_types_or_consts() || arg.has_infer_types_or_consts() =>\n-            {\n+            GenericArgKind::Type(_) if arg.has_non_region_param() || arg.has_non_region_infer() => {\n                 tcx.mk_ty(ty::Placeholder(ty::PlaceholderType {\n                     universe: ty::UniverseIndex::ROOT,\n                     name: ty::BoundVar::from_usize(idx),\n                 }))\n                 .into()\n             }\n-            GenericArgKind::Const(ct)\n-                if ct.has_infer_types_or_consts() || ct.has_param_types_or_consts() =>\n-            {\n+            GenericArgKind::Const(ct) if ct.has_non_region_infer() || ct.has_non_region_param() => {\n                 let ty = ct.ty();\n                 // If the type references param or infer, replace that too...\n-                if ty.has_param_types_or_consts() || ty.has_infer_types_or_consts() {\n+                if ty.has_non_region_param() || ty.has_non_region_infer() {\n                     bug!(\"const `{ct}`'s type should not reference params or types\");\n                 }\n                 tcx.mk_const(ty::ConstS {"}, {"sha": "91e73451a0fd35eda107e9adc8402e9052bd0cd0", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -357,7 +357,7 @@ where\n             // In NLL, we don't have type inference variables\n             // floating around, so we can do this rather imprecise\n             // variant of the occurs-check.\n-            assert!(!generalized_ty.has_infer_types_or_consts());\n+            assert!(!generalized_ty.has_non_region_infer());\n         }\n \n         self.infcx.inner.borrow_mut().type_variables().instantiate(vid, generalized_ty);"}, {"sha": "bb188496caa0d6fd02ee0430f9f95ef573f3dd11", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.has_infer_types_or_consts() {\n+        if !t.has_non_region_infer() {\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n         } else {\n             let t = self.infcx.shallow_resolve(t);\n@@ -41,7 +41,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n     }\n \n     fn fold_const(&mut self, ct: Const<'tcx>) -> Const<'tcx> {\n-        if !ct.has_infer_types_or_consts() {\n+        if !ct.has_non_region_infer() {\n             ct // micro-optimize -- if there is nothing in this const that this fold affects...\n         } else {\n             let ct = self.infcx.shallow_resolve(ct);"}, {"sha": "8f67161420dad95ae4063eae999e81da397adf4c", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         //\n         // When trying to evaluate constants containing inference variables,\n         // use `Infcx::const_eval_resolve` instead.\n-        if ct.substs.has_infer_types_or_consts() {\n+        if ct.substs.has_non_region_infer() {\n             bug!(\"did not expect inference variables here\");\n         }\n \n@@ -76,7 +76,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         //\n         // When trying to evaluate constants containing inference variables,\n         // use `Infcx::const_eval_resolve` instead.\n-        if ct.substs.has_infer_types_or_consts() {\n+        if ct.substs.has_non_region_infer() {\n             bug!(\"did not expect inference variables here\");\n         }\n "}, {"sha": "a9ebd7834033171eb38f2071943281c46db147ad", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -313,7 +313,7 @@ impl<'tcx> Body<'tcx> {\n             is_polymorphic: false,\n             tainted_by_errors,\n         };\n-        body.is_polymorphic = body.has_param_types_or_consts();\n+        body.is_polymorphic = body.has_non_region_param();\n         body\n     }\n \n@@ -339,7 +339,7 @@ impl<'tcx> Body<'tcx> {\n             is_polymorphic: false,\n             tainted_by_errors: None,\n         };\n-        body.is_polymorphic = body.has_param_types_or_consts();\n+        body.is_polymorphic = body.has_non_region_param();\n         body\n     }\n \n@@ -2760,15 +2760,15 @@ fn pretty_print_const_value<'tcx>(\n             }\n             // Aggregates, printed as array/tuple/struct/variant construction syntax.\n             //\n-            // NB: the `has_param_types_or_consts` check ensures that we can use\n+            // NB: the `has_non_region_param` check ensures that we can use\n             // the `destructure_const` query with an empty `ty::ParamEnv` without\n             // introducing ICEs (e.g. via `layout_of`) from missing bounds.\n             // E.g. `transmute([0usize; 2]): (u8, *mut T)` needs to know `T: Sized`\n             // to be able to destructure the tuple into `(0u8, *mut T)\n             //\n             // FIXME(eddyb) for `--emit=mir`/`-Z dump-mir`, we should provide the\n             // correct `ty::ParamEnv` to allow printing *all* constant values.\n-            (_, ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) if !ty.has_param_types_or_consts() => {\n+            (_, ty::Array(..) | ty::Tuple(..) | ty::Adt(..)) if !ty.has_non_region_param() => {\n                 let ct = tcx.lift(ct).unwrap();\n                 let ty = tcx.lift(ty).unwrap();\n                 if let Some(contents) = tcx.try_destructure_mir_constant("}, {"sha": "1aa4df778008444cd12cdc6bfb2960ec5a667acd", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -71,16 +71,16 @@ impl<'tcx> AbstractConst<'tcx> {\n         walk_abstract_const::<!, _>(tcx, self, |node| {\n             match node.root(tcx) {\n                 Node::Leaf(leaf) => {\n-                    if leaf.has_infer_types_or_consts() {\n+                    if leaf.has_non_region_infer() {\n                         failure_kind = FailureKind::MentionsInfer;\n-                    } else if leaf.has_param_types_or_consts() {\n+                    } else if leaf.has_non_region_param() {\n                         failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n                     }\n                 }\n                 Node::Cast(_, _, ty) => {\n-                    if ty.has_infer_types_or_consts() {\n+                    if ty.has_non_region_infer() {\n                         failure_kind = FailureKind::MentionsInfer;\n-                    } else if ty.has_param_types_or_consts() {\n+                    } else if ty.has_non_region_param() {\n                         failure_kind = cmp::min(failure_kind, FailureKind::MentionsParam);\n                     }\n                 }"}, {"sha": "3be0bc4defc5cacc1e039a5838c1f007c3e2560d", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -132,7 +132,7 @@ pub fn simplify_type<'tcx>(\n             // don't unify with anything else as long as they are fully normalized.\n             //\n             // We will have to be careful with lazy normalization here.\n-            TreatParams::AsPlaceholder if !ty.has_infer_types_or_consts() => {\n+            TreatParams::AsPlaceholder if !ty.has_non_region_infer() => {\n                 debug!(\"treating `{}` as a placeholder\", ty);\n                 Some(PlaceholderSimplifiedType)\n             }"}, {"sha": "5f8729a8ddf3caadd4cbb33b5e3c7a27c150340a", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -244,7 +244,7 @@ impl<'tcx> SizeSkeleton<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Result<SizeSkeleton<'tcx>, LayoutError<'tcx>> {\n-        debug_assert!(!ty.has_infer_types_or_consts());\n+        debug_assert!(!ty.has_non_region_infer());\n \n         // First try computing a static layout.\n         let err = match tcx.layout_of(param_env.and(ty)) {\n@@ -260,7 +260,7 @@ impl<'tcx> SizeSkeleton<'tcx> {\n                 let tail = tcx.struct_tail_erasing_lifetimes(pointee, param_env);\n                 match tail.kind() {\n                     ty::Param(_) | ty::Projection(_) => {\n-                        debug_assert!(tail.has_param_types_or_consts());\n+                        debug_assert!(tail.has_non_region_param());\n                         Ok(SizeSkeleton::Pointer { non_zero, tail: tcx.erase_regions(tail) })\n                     }\n                     _ => bug!("}, {"sha": "44efb93a53bfc799d2783f334cdbbf17ef2307e9", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -104,17 +104,17 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n             None\n         }\n     }\n-    fn has_param_types_or_consts(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_CT_PARAM)\n+    fn has_non_region_param(&self) -> bool {\n+        self.has_type_flags(TypeFlags::NEEDS_SUBST - TypeFlags::HAS_RE_PARAM)\n     }\n     fn has_infer_regions(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_RE_INFER)\n     }\n     fn has_infer_types(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_TY_INFER)\n     }\n-    fn has_infer_types_or_consts(&self) -> bool {\n-        self.has_type_flags(TypeFlags::HAS_TY_INFER | TypeFlags::HAS_CT_INFER)\n+    fn has_non_region_infer(&self) -> bool {\n+        self.has_type_flags(TypeFlags::NEEDS_INFER - TypeFlags::HAS_RE_INFER)\n     }\n     fn needs_infer(&self) -> bool {\n         self.has_type_flags(TypeFlags::NEEDS_INFER)"}, {"sha": "a93f6a60114a6a106eeed73c7dcb776cc932eb21", "filename": "compiler/rustc_monomorphize/src/polymorphize.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpolymorphize.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -290,7 +290,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !c.has_param_types_or_consts() {\n+        if !c.has_non_region_param() {\n             return ControlFlow::CONTINUE;\n         }\n \n@@ -311,7 +311,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n     }\n \n     fn visit_mir_const(&mut self, constant: ConstantKind<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !constant.has_param_types_or_consts() {\n+        if !constant.has_non_region_param() {\n             return ControlFlow::CONTINUE;\n         }\n \n@@ -336,7 +336,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for MarkUsedGenericParams<'a, 'tcx> {\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !ty.has_param_types_or_consts() {\n+        if !ty.has_non_region_param() {\n             return ControlFlow::CONTINUE;\n         }\n \n@@ -373,7 +373,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_const(&mut self, c: Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !c.has_param_types_or_consts() {\n+        if !c.has_non_region_param() {\n             return ControlFlow::CONTINUE;\n         }\n \n@@ -391,7 +391,7 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for HasUsedGenericParams<'a> {\n \n     #[instrument(level = \"debug\", skip(self))]\n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-        if !ty.has_param_types_or_consts() {\n+        if !ty.has_non_region_param() {\n             return ControlFlow::CONTINUE;\n         }\n "}, {"sha": "e502b9b54e3021ab926d96706f2d7b1d6fc81acf", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -191,32 +191,6 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n         self.tcx.hir()\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        let tcx = self.tcx;\n-        if let hir::ItemKind::Impl(hir::Impl {\n-            constness: hir::Constness::Const,\n-            of_trait: Some(trait_ref),\n-            ..\n-        }) = item.kind\n-            && let Some(def_id) = trait_ref.trait_def_id()\n-        {\n-            let source_map = tcx.sess.source_map();\n-            if !tcx.has_attr(def_id, sym::const_trait) {\n-                tcx.sess\n-                    .struct_span_err(\n-                        source_map.guess_head_span(item.span),\n-                        \"const `impl`s must be for traits marked with `#[const_trait]`\",\n-                    )\n-                    .span_note(\n-                        source_map.guess_head_span(tcx.def_span(def_id)),\n-                        \"this trait must be annotated with `#[const_trait]`\",\n-                    )\n-                    .emit();\n-            }\n-        }\n-        intravisit::walk_item(self, item);\n-    }\n-\n     fn visit_anon_const(&mut self, anon: &'tcx hir::AnonConst) {\n         let kind = Some(hir::ConstContext::Const);\n         self.recurse_into(kind, None, |this| intravisit::walk_anon_const(this, anon));"}, {"sha": "ecfe6861e84cb5a6f4d57745765321954af513f5", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -301,7 +301,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n         // Encode impl generic params if the substitutions contain parameters (implying\n         // polymorphization is enabled) and this isn't an inherent impl.\n-        if impl_trait_ref.is_some() && substs.iter().any(|a| a.has_param_types_or_consts()) {\n+        if impl_trait_ref.is_some() && substs.iter().any(|a| a.has_non_region_param()) {\n             self = self.path_generic_args(\n                 |this| {\n                     this.path_append_ns("}, {"sha": "911d1cf8bdf6b9f48967894a00107031f4183df0", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -236,9 +236,9 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n             }\n \n             Err(ErrorHandled::TooGeneric) => {\n-                let err = if uv.has_infer_types_or_consts() {\n+                let err = if uv.has_non_region_infer() {\n                     NotConstEvaluatable::MentionsInfer\n-                } else if uv.has_param_types_or_consts() {\n+                } else if uv.has_non_region_param() {\n                     NotConstEvaluatable::MentionsParam\n                 } else {\n                     let guar = infcx.tcx.sess.delay_span_bug(span, format!(\"Missing value for constant, but no error reported?\"));\n@@ -254,7 +254,7 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n             }\n             Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n             Ok(_) => {\n-                if uv.substs.has_param_types_or_consts() {\n+                if uv.substs.has_non_region_param() {\n                     assert!(matches!(infcx.tcx.def_kind(uv.def.did), DefKind::AnonConst));\n                     let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n "}, {"sha": "4398d71a89d4265e4c0f1334838be17f5c807904", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -661,7 +661,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                     );\n                                 }\n                             }\n-                        } else if !trait_ref.has_infer_types_or_consts()\n+                        } else if !trait_ref.has_non_region_infer()\n                             && self.predicate_can_apply(obligation.param_env, trait_ref)\n                         {\n                             // If a where-clause may be useful, remind the\n@@ -2093,7 +2093,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 // Pick the first substitution that still contains inference variables as the one\n                 // we're going to emit an error for. If there are none (see above), fall back to\n                 // a more general error.\n-                let subst = data.trait_ref.substs.iter().find(|s| s.has_infer_types_or_consts());\n+                let subst = data.trait_ref.substs.iter().find(|s| s.has_non_region_infer());\n \n                 let mut err = if let Some(subst) = subst {\n                     self.emit_inference_failure_err(body_id, span, subst, ErrorCode::E0283, true)\n@@ -2323,7 +2323,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                     .substs\n                     .iter()\n                     .chain(Some(data.term.into_arg()))\n-                    .find(|g| g.has_infer_types_or_consts());\n+                    .find(|g| g.has_non_region_infer());\n                 if let Some(subst) = subst {\n                     let mut err = self.emit_inference_failure_err(\n                         body_id,\n@@ -2352,7 +2352,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 if predicate.references_error() || self.is_tainted_by_errors() {\n                     return;\n                 }\n-                let subst = data.substs.iter().find(|g| g.has_infer_types_or_consts());\n+                let subst = data.substs.iter().find(|g| g.has_non_region_infer());\n                 if let Some(subst) = subst {\n                     let err = self.emit_inference_failure_err(\n                         body_id,"}, {"sha": "7aae014af6044cee85677b21b99b9ffc332ed957", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1231,7 +1231,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 return;\n             }\n             let trait_pred = self.resolve_vars_if_possible(trait_pred);\n-            if trait_pred.has_infer_types_or_consts() {\n+            if trait_pred.has_non_region_infer() {\n                 // Do not ICE while trying to find if a reborrow would succeed on a trait with\n                 // unresolved bindings.\n                 return;"}, {"sha": "5802f038e893c691c87da6cd1cc592268fab0bb4", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -279,7 +279,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n \n         debug!(?obligation, \"pre-resolve\");\n \n-        if obligation.predicate.has_infer_types_or_consts() {\n+        if obligation.predicate.has_non_region_infer() {\n             obligation.predicate =\n                 self.selcx.infcx().resolve_vars_if_possible(obligation.predicate);\n         }\n@@ -569,7 +569,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                             )\n                         }\n                         (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {\n-                            if c1.has_infer_types_or_consts() || c2.has_infer_types_or_consts() {\n+                            if c1.has_non_region_infer() || c2.has_non_region_infer() {\n                                 ProcessResult::Unchanged\n                             } else {\n                                 // Two different constants using generic parameters ~> error.\n@@ -726,11 +726,11 @@ fn substs_infer_vars<'a, 'tcx>(\n         .resolve_vars_if_possible(substs)\n         .skip_binder() // ok because this check doesn't care about regions\n         .iter()\n-        .filter(|arg| arg.has_infer_types_or_consts())\n+        .filter(|arg| arg.has_non_region_infer())\n         .flat_map(|arg| {\n             let mut walker = arg.walk();\n             while let Some(c) = walker.next() {\n-                if !c.has_infer_types_or_consts() {\n+                if !c.has_non_region_infer() {\n                     walker.visited.remove(&c);\n                     walker.skip_current_subtree();\n                 }"}, {"sha": "41b742734cd8d410f3aecf4e0a0ab8425904efa9", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -57,7 +57,7 @@ pub fn can_type_implement_copy<'tcx>(\n                 // to begin with, and point to the bad field's span instead.\n                 let cause = if field\n                     .ty(tcx, traits::InternalSubsts::identity_for_item(tcx, adt.did()))\n-                    .has_param_types_or_consts()\n+                    .has_non_region_param()\n                 {\n                     parent_cause.clone()\n                 } else {"}, {"sha": "659ffc178aa547741c47eafa3d807b37f7b0a3d7", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -170,7 +170,7 @@ pub fn type_known_to_meet_bound_modulo_regions<'a, 'tcx>(\n         result\n     );\n \n-    if result && ty.has_infer_types_or_consts() {\n+    if result && ty.has_non_region_infer() {\n         // Because of inference \"guessing\", selection can sometimes claim\n         // to succeed while the success requires a guess. To ensure\n         // this function's result remains infallible, we must confirm"}, {"sha": "085045bcdcb509aea612bdcaaaf5de5897d80f55", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1488,7 +1488,7 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n                     candidate_set.push_candidate(ctor(data));\n \n                     if potentially_unnormalized_candidates\n-                        && !obligation.predicate.has_infer_types_or_consts()\n+                        && !obligation.predicate.has_non_region_infer()\n                     {\n                         // HACK: Pick the first trait def candidate for a fully\n                         // inferred predicate. This is to allow duplicates that\n@@ -2146,10 +2146,10 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     } else {\n         ty.map_bound(|ty| ty.into())\n     };\n-    if substs.len() != tcx.generics_of(assoc_ty.item.def_id).count() {\n+    if !check_substs_compatible(tcx, &assoc_ty.item, substs) {\n         let err = tcx.ty_error_with_message(\n             obligation.cause.span,\n-            \"impl item and trait item have different parameter counts\",\n+            \"impl item and trait item have different parameters\",\n         );\n         Progress { term: err.into(), obligations: nested }\n     } else {\n@@ -2158,6 +2158,44 @@ fn confirm_impl_candidate<'cx, 'tcx>(\n     }\n }\n \n+// Verify that the trait item and its implementation have compatible substs lists\n+fn check_substs_compatible<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    assoc_ty: &ty::AssocItem,\n+    substs: ty::SubstsRef<'tcx>,\n+) -> bool {\n+    fn check_substs_compatible_inner<'tcx>(\n+        tcx: TyCtxt<'tcx>,\n+        generics: &'tcx ty::Generics,\n+        args: &'tcx [ty::GenericArg<'tcx>],\n+    ) -> bool {\n+        if generics.count() != args.len() {\n+            return false;\n+        }\n+\n+        let (parent_args, own_args) = args.split_at(generics.parent_count);\n+\n+        if let Some(parent) = generics.parent\n+            && let parent_generics = tcx.generics_of(parent)\n+            && !check_substs_compatible_inner(tcx, parent_generics, parent_args) {\n+            return false;\n+        }\n+\n+        for (param, arg) in std::iter::zip(&generics.params, own_args) {\n+            match (&param.kind, arg.unpack()) {\n+                (ty::GenericParamDefKind::Type { .. }, ty::GenericArgKind::Type(_))\n+                | (ty::GenericParamDefKind::Lifetime, ty::GenericArgKind::Lifetime(_))\n+                | (ty::GenericParamDefKind::Const { .. }, ty::GenericArgKind::Const(_)) => {}\n+                _ => return false,\n+            }\n+        }\n+\n+        true\n+    }\n+\n+    check_substs_compatible_inner(tcx, tcx.generics_of(assoc_ty.def_id), substs.as_slice())\n+}\n+\n fn confirm_impl_trait_in_trait_candidate<'tcx>(\n     selcx: &mut SelectionContext<'_, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,"}, {"sha": "9a8331614b0e805d11fea1b3f3902ad5f9ce261b", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -174,7 +174,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(?stack, ?candidates, \"winnowed to {} candidates\", candidates.len());\n \n-        let needs_infer = stack.obligation.predicate.has_infer_types_or_consts();\n+        let needs_infer = stack.obligation.predicate.has_non_region_infer();\n \n         // If there are STILL multiple candidates, we can further\n         // reduce the list by dropping duplicates -- including\n@@ -889,11 +889,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n-        if obligation.has_param_types_or_consts() {\n+        if obligation.has_non_region_param() {\n             return;\n         }\n \n-        if obligation.has_infer_types_or_consts() {\n+        if obligation.has_non_region_infer() {\n             candidates.ambiguous = true;\n             return;\n         }"}, {"sha": "8f2a6f337baad7dd11655d43ec11e2025675a6ed", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -728,7 +728,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                             )\n                         }\n                         (Err(ErrorHandled::TooGeneric), _) | (_, Err(ErrorHandled::TooGeneric)) => {\n-                            if c1.has_infer_types_or_consts() || c2.has_infer_types_or_consts() {\n+                            if c1.has_non_region_infer() || c2.has_non_region_infer() {\n                                 Ok(EvaluatedToAmbig)\n                             } else {\n                                 // Two different constants using generic parameters ~> error.\n@@ -1520,7 +1520,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             if !generics.params.is_empty()\n                 && obligation.predicate.substs[generics.parent_count..]\n                     .iter()\n-                    .any(|&p| p.has_infer_types_or_consts() && self.infcx.shallow_resolve(p) != p)\n+                    .any(|&p| p.has_non_region_infer() && self.infcx.shallow_resolve(p) != p)\n             {\n                 ProjectionMatchesProjection::Ambiguous\n             } else {"}, {"sha": "5f901d6995e4bd929fa766d5b2e73d43faf87494", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -308,6 +308,32 @@ impl<'tcx> WfPredicates<'tcx> {\n         let obligations = if trait_pred.constness == ty::BoundConstness::NotConst {\n             self.nominal_obligations_without_const(trait_ref.def_id, trait_ref.substs)\n         } else {\n+            if !tcx.has_attr(trait_ref.def_id, rustc_span::sym::const_trait) {\n+                if let Some(item) = self.item &&\n+                   let hir::ItemKind::Impl(impl_) = item.kind &&\n+                   let Some(trait_) = &impl_.of_trait &&\n+                   let Some(def_id) = trait_.trait_def_id() &&\n+                   def_id == trait_ref.def_id\n+                {\n+                    let trait_name = tcx.item_name(def_id);\n+                    let mut err = tcx.sess.struct_span_err(\n+                        self.span,\n+                        &format!(\"const `impl` for trait `{trait_name}` which is not marked with `#[const_trait]`\"),\n+                    );\n+                    if def_id.is_local() {\n+                        let sp = tcx.def_span(def_id).shrink_to_lo();\n+                        err.span_suggestion(sp, &format!(\"mark `{trait_name}` as const\"), \"#[const_trait]\", rustc_errors::Applicability::MachineApplicable);\n+                    }\n+                    err.note(\"marking a trait with `#[const_trait]` ensures all default method bodies are `const`\");\n+                    err.note(\"adding a non-const method body in the future would be a breaking change\");\n+                    err.emit();\n+                } else {\n+                    tcx.sess.span_err(\n+                        self.span,\n+                        \"~const can only be applied to `#[const_trait]` traits\",\n+                    );\n+                }\n+            }\n             self.nominal_obligations(trait_ref.def_id, trait_ref.substs)\n         };\n "}, {"sha": "e540ee1664d1d4459256f372bc43c79a4759fc7f", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -79,7 +79,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n         // implied bounds in some cases, mostly when dealing with projections.\n         fulfill_cx.register_predicate_obligations(\n             infcx,\n-            obligations.iter().filter(|o| o.predicate.has_infer_types_or_consts()).cloned(),\n+            obligations.iter().filter(|o| o.predicate.has_non_region_infer()).cloned(),\n         );\n \n         // From the full set of obligations, just filter down to the"}, {"sha": "e057bb668250192a2999a9b1070634b0ac61b7ae", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -135,30 +135,30 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n \n         impl<'a, 'tcx> IsThirPolymorphic<'a, 'tcx> {\n             fn expr_is_poly(&mut self, expr: &thir::Expr<'tcx>) -> bool {\n-                if expr.ty.has_param_types_or_consts() {\n+                if expr.ty.has_non_region_param() {\n                     return true;\n                 }\n \n                 match expr.kind {\n-                    thir::ExprKind::NamedConst { substs, .. } => substs.has_param_types_or_consts(),\n+                    thir::ExprKind::NamedConst { substs, .. } => substs.has_non_region_param(),\n                     thir::ExprKind::ConstParam { .. } => true,\n                     thir::ExprKind::Repeat { value, count } => {\n                         self.visit_expr(&self.thir()[value]);\n-                        count.has_param_types_or_consts()\n+                        count.has_non_region_param()\n                     }\n                     _ => false,\n                 }\n             }\n \n             fn pat_is_poly(&mut self, pat: &thir::Pat<'tcx>) -> bool {\n-                if pat.ty.has_param_types_or_consts() {\n+                if pat.ty.has_non_region_param() {\n                     return true;\n                 }\n \n                 match pat.kind {\n-                    thir::PatKind::Constant { value } => value.has_param_types_or_consts(),\n+                    thir::PatKind::Constant { value } => value.has_non_region_param(),\n                     thir::PatKind::Range(box thir::PatRange { lo, hi, .. }) => {\n-                        lo.has_param_types_or_consts() || hi.has_param_types_or_consts()\n+                        lo.has_non_region_param() || hi.has_non_region_param()\n                     }\n                     _ => false,\n                 }"}, {"sha": "81ca8b646fff1bf0379a2bd5b17e4628a412ea2f", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -171,9 +171,13 @@ fn resolve_associated_item<'tcx>(\n                 return Ok(None);\n             }\n \n-            // If the item does not have a value, then we cannot return an instance.\n+            // Any final impl is required to define all associated items.\n             if !leaf_def.item.defaultness(tcx).has_value() {\n-                return Ok(None);\n+                let guard = tcx.sess.delay_span_bug(\n+                    tcx.def_span(leaf_def.item.def_id),\n+                    \"missing value for assoc item in impl\",\n+                );\n+                return Err(guard);\n             }\n \n             let substs = tcx.erase_regions(substs);"}, {"sha": "345911f4309ae49286b416518dc8de3980038c41", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -351,7 +351,7 @@ fn layout_of_uncached<'tcx>(\n     let univariant = |fields: &[TyAndLayout<'_>], repr: &ReprOptions, kind| {\n         Ok(tcx.intern_layout(univariant_uninterned(cx, ty, fields, repr, kind)?))\n     };\n-    debug_assert!(!ty.has_infer_types_or_consts());\n+    debug_assert!(!ty.has_non_region_infer());\n \n     Ok(match *ty.kind() {\n         // Basic scalars.\n@@ -1688,7 +1688,7 @@ fn record_layout_for_printing_outlined<'tcx>(\n     // Ignore layouts that are done with non-empty environments or\n     // non-monomorphic layouts, as the user only wants to see the stuff\n     // resulting from the final codegen session.\n-    if layout.ty.has_param_types_or_consts() || !cx.param_env.caller_bounds().is_empty() {\n+    if layout.ty.has_non_region_param() || !cx.param_env.caller_bounds().is_empty() {\n         return;\n     }\n "}, {"sha": "e099700e3e7c8f2f06da079637a6efbd7decba33", "filename": "library/core/src/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fcollect.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -264,7 +264,7 @@ pub trait IntoIterator {\n \n #[rustc_const_unstable(feature = \"const_intoiterator_identity\", issue = \"90603\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<I: ~const Iterator> const IntoIterator for I {\n+impl<I: Iterator> const IntoIterator for I {\n     type Item = I::Item;\n     type IntoIter = I;\n "}, {"sha": "d5ed52124e2ca42bd0af9629965e6959cd65b0eb", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -799,6 +799,7 @@ impl<T: ?Sized> Unpin for *mut T {}\n #[unstable(feature = \"const_trait_impl\", issue = \"67792\")]\n #[lang = \"destruct\"]\n #[rustc_on_unimplemented(message = \"can't drop `{Self}`\", append_const_msg)]\n+#[const_trait]\n pub trait Destruct {}\n \n /// A marker for tuple types."}, {"sha": "7eb8f8bbb30ed9f38c6188a0437aa68a1ec9ff9a", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1367,6 +1367,7 @@ impl Step for Extended {\n         }\n \n         add_component!(\"rust-docs\" => Docs { host: target });\n+        add_component!(\"rust-json-docs\" => JsonDocs { host: target });\n         add_component!(\"rust-demangler\"=> RustDemangler { compiler, target });\n         add_component!(\"cargo\" => Cargo { compiler, target });\n         add_component!(\"rustfmt\" => Rustfmt { compiler, target });"}, {"sha": "02960b363e78f695824f372021ff5c280c73d709", "filename": "src/test/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -22,8 +22,8 @@ LL |     for i in 0..x {\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n-LL | impl<I: ~const Iterator> const IntoIterator for I {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<I: Iterator> const IntoIterator for I {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n \n error[E0658]: mutable references are not allowed in constant functions"}, {"sha": "11e4ae309c01f5abddb458968d476586dc84dd63", "filename": "src/test/ui/consts/const-for.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-for.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -7,8 +7,8 @@ LL |     for _ in 0..5 {}\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n-LL | impl<I: ~const Iterator> const IntoIterator for I {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<I: Iterator> const IntoIterator for I {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n error[E0015]: cannot call non-const fn `<std::ops::Range<i32> as Iterator>::next` in constants"}, {"sha": "fcf01d5bc71a343984a91fe8b7db3a231259b8dc", "filename": "src/test/ui/consts/constifconst-call-in-const-position.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_trait_impl, generic_const_exprs)]\n \n+#[const_trait]\n pub trait Tr {\n     fn a() -> usize;\n }"}, {"sha": "d4a445120a25da4d7f05e807cf0493e5ad3f3f45", "filename": "src/test/ui/consts/constifconst-call-in-const-position.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconstifconst-call-in-const-position.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -8,7 +8,7 @@ LL | #![feature(const_trait_impl, generic_const_exprs)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0080]: evaluation of `foo::<()>::{constant#0}` failed\n-  --> $DIR/constifconst-call-in-const-position.rs:15:38\n+  --> $DIR/constifconst-call-in-const-position.rs:16:38\n    |\n LL | const fn foo<T: ~const Tr>() -> [u8; T::a()] {\n    |                                      ^^^^^^ calling non-const function `<() as Tr>::a`"}, {"sha": "de31737efef52915773a3db1250159b261dbdab9", "filename": "src/test/ui/generic-associated-types/issue-102114.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102114.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102114.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102114.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -0,0 +1,16 @@\n+trait A {\n+    type B<'b>;\n+    fn a() -> Self::B<'static>;\n+}\n+\n+struct C;\n+\n+struct Wrapper<T>(T);\n+\n+impl A for C {\n+    type B<T> = Wrapper<T>;\n+    //~^ ERROR type `B` has 1 type parameter but its trait declaration has 0 type parameters\n+    fn a() -> Self::B<'static> {}\n+}\n+\n+fn main() {}"}, {"sha": "8e41dee54d7e4675e2f927a99e42dad23cf88a07", "filename": "src/test/ui/generic-associated-types/issue-102114.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102114.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102114.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-102114.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -0,0 +1,12 @@\n+error[E0049]: type `B` has 1 type parameter but its trait declaration has 0 type parameters\n+  --> $DIR/issue-102114.rs:11:12\n+   |\n+LL |     type B<'b>;\n+   |            -- expected 0 type parameters\n+...\n+LL |     type B<T> = Wrapper<T>;\n+   |            ^ found 1 type parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0049`."}, {"sha": "3bbdf35af8f90630a134c2876d818a95403c6941", "filename": "src/test/ui/impl-trait/issue-102605.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-102605.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-102605.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-102605.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -0,0 +1,15 @@\n+// edition:2021\n+\n+async fn foo() -> Result<(), String> {\n+    Ok(())\n+}\n+\n+fn convert_result<T, E>(r: Result<T, E>) -> Option<T> {\n+    None\n+}\n+\n+fn main() -> Option<()> {\n+    //~^ ERROR `main` has invalid return type `Option<()>`\n+    convert_result(foo())\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "d4aba914908fdd6fd1d821df254bb09678beb389", "filename": "src/test/ui/impl-trait/issue-102605.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-102605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-102605.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -0,0 +1,41 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-102605.rs:13:20\n+   |\n+LL |     convert_result(foo())\n+   |     -------------- ^^^^^ expected enum `Result`, found opaque type\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/issue-102605.rs:3:19\n+   |\n+LL | async fn foo() -> Result<(), String> {\n+   |                   ^^^^^^^^^^^^^^^^^^ checked the `Output` of this `async fn`, found opaque type\n+   = note:     expected enum `Result<(), _>`\n+           found opaque type `impl Future<Output = Result<(), String>>`\n+note: function defined here\n+  --> $DIR/issue-102605.rs:7:4\n+   |\n+LL | fn convert_result<T, E>(r: Result<T, E>) -> Option<T> {\n+   |    ^^^^^^^^^^^^^^       ---------------\n+help: consider `await`ing on the `Future`\n+   |\n+LL |     convert_result(foo().await)\n+   |                         ++++++\n+help: try wrapping the expression in `Err`\n+   |\n+LL |     convert_result(Err(foo()))\n+   |                    ++++     +\n+\n+error[E0277]: `main` has invalid return type `Option<()>`\n+  --> $DIR/issue-102605.rs:11:14\n+   |\n+LL | fn main() -> Option<()> {\n+   |              ^^^^^^^^^^ `main` can only return types that implement `Termination`\n+   |\n+   = help: consider using `()`, or a `Result`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "0910e9ad77a846a00e90a4a53b43f89998855eec", "filename": "src/test/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -47,8 +47,8 @@ LL |     [(); { for _ in 0usize.. {}; 0}];\n note: impl defined here, but it is not `const`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    |\n-LL | impl<I: ~const Iterator> const IntoIterator for I {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl<I: Iterator> const IntoIterator for I {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n \n error[E0658]: mutable references are not allowed in constants"}, {"sha": "414a8c87d2c417c71b50c225c6604ad6ad01bf34", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -2,13 +2,18 @@\n \n struct S;\n \n-impl PartialEq for S {\n+#[const_trait]\n+trait Foo {\n+    fn eq(&self, _: &Self) -> bool;\n+}\n+\n+impl Foo for S {\n     fn eq(&self, _: &S) -> bool {\n         true\n     }\n }\n \n-const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n+const fn equals_self<T: ~const Foo>(t: &T) -> bool {\n     true\n }\n "}, {"sha": "706f52343659e3845232adc5f831f8731462b208", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,26 +1,21 @@\n-error[E0277]: can't compare `S` with `S` in const contexts\n-  --> $DIR/call-generic-method-nonconst.rs:18:34\n+error[E0277]: the trait bound `S: ~const Foo` is not satisfied\n+  --> $DIR/call-generic-method-nonconst.rs:23:34\n    |\n LL | pub const EQ: bool = equals_self(&S);\n-   |                      ----------- ^^ no implementation for `S == S`\n+   |                      ----------- ^^ the trait `~const Foo` is not implemented for `S`\n    |                      |\n    |                      required by a bound introduced by this call\n    |\n-   = help: the trait `~const PartialEq` is not implemented for `S`\n-note: the trait `PartialEq` is implemented for `S`, but that implementation is not `const`\n-  --> $DIR/call-generic-method-nonconst.rs:18:34\n+note: the trait `Foo` is implemented for `S`, but that implementation is not `const`\n+  --> $DIR/call-generic-method-nonconst.rs:23:34\n    |\n LL | pub const EQ: bool = equals_self(&S);\n    |                                  ^^\n note: required by a bound in `equals_self`\n-  --> $DIR/call-generic-method-nonconst.rs:11:25\n-   |\n-LL | const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n-   |                         ^^^^^^^^^^^^^^^^ required by this bound in `equals_self`\n-help: consider annotating `S` with `#[derive(PartialEq)]`\n-   |\n-LL | #[derive(PartialEq)]\n+  --> $DIR/call-generic-method-nonconst.rs:16:25\n    |\n+LL | const fn equals_self<T: ~const Foo>(t: &T) -> bool {\n+   |                         ^^^^^^^^^^ required by this bound in `equals_self`\n \n error: aborting due to previous error\n "}, {"sha": "ddf0e2d91c09759438443e5554293c49f506c0c0", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.precise.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.precise.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:43:5\n+  --> $DIR/const-drop-fail.rs:44:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -9,7 +9,7 @@ LL |     NonTrivialDrop,\n    |\n    = note: the trait bound `NonTrivialDrop: ~const Destruct` is not satisfied\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:34:19\n+  --> $DIR/const-drop-fail.rs:35:19\n    |\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n@@ -21,7 +21,7 @@ LL |     &mut NonTrivialDrop,\n    |     ++++\n \n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:45:5\n+  --> $DIR/const-drop-fail.rs:46:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -30,7 +30,7 @@ LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n    |\n note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:45:5\n+  --> $DIR/const-drop-fail.rs:46:5\n    |\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -40,13 +40,13 @@ note: required because it appears within the type `ConstImplWithDropGlue`\n LL | struct ConstImplWithDropGlue(NonTrivialDrop);\n    |        ^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:34:19\n+  --> $DIR/const-drop-fail.rs:35:19\n    |\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Destruct` is not satisfied\n-  --> $DIR/const-drop-fail.rs:47:5\n+  --> $DIR/const-drop-fail.rs:48:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -55,14 +55,14 @@ LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `ConstDropImplWithBounds<NonTrivialDrop>`\n    |\n note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n-  --> $DIR/const-drop-fail.rs:28:25\n+  --> $DIR/const-drop-fail.rs:29:25\n    |\n LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n    |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: 1 redundant requirement hidden\n    = note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:34:19\n+  --> $DIR/const-drop-fail.rs:35:19\n    |\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`"}, {"sha": "565e2c77ac5ca54ab875a00beaa129a442a6a45c", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -19,7 +19,8 @@ impl const Drop for ConstImplWithDropGlue {\n     fn drop(&mut self) {}\n }\n \n-trait A { fn a() { println!(\"A\"); } }\n+#[const_trait]\n+trait A { fn a() { } }\n \n impl A for NonTrivialDrop {}\n "}, {"sha": "ddf0e2d91c09759438443e5554293c49f506c0c0", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-drop-fail.stock.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-drop-fail.stock.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:43:5\n+  --> $DIR/const-drop-fail.rs:44:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -9,7 +9,7 @@ LL |     NonTrivialDrop,\n    |\n    = note: the trait bound `NonTrivialDrop: ~const Destruct` is not satisfied\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:34:19\n+  --> $DIR/const-drop-fail.rs:35:19\n    |\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n@@ -21,7 +21,7 @@ LL |     &mut NonTrivialDrop,\n    |     ++++\n \n error[E0277]: can't drop `NonTrivialDrop` in const contexts\n-  --> $DIR/const-drop-fail.rs:45:5\n+  --> $DIR/const-drop-fail.rs:46:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -30,7 +30,7 @@ LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ within `ConstImplWithDropGlue`, the trait `~const Destruct` is not implemented for `NonTrivialDrop`\n    |\n note: the trait `Destruct` is implemented for `NonTrivialDrop`, but that implementation is not `const`\n-  --> $DIR/const-drop-fail.rs:45:5\n+  --> $DIR/const-drop-fail.rs:46:5\n    |\n LL |     ConstImplWithDropGlue(NonTrivialDrop),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -40,13 +40,13 @@ note: required because it appears within the type `ConstImplWithDropGlue`\n LL | struct ConstImplWithDropGlue(NonTrivialDrop);\n    |        ^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:34:19\n+  --> $DIR/const-drop-fail.rs:35:19\n    |\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `ConstDropImplWithBounds<NonTrivialDrop>: ~const Destruct` is not satisfied\n-  --> $DIR/const-drop-fail.rs:47:5\n+  --> $DIR/const-drop-fail.rs:48:5\n    |\n LL |         const _: () = check($exp);\n    |                       ----- required by a bound introduced by this call\n@@ -55,14 +55,14 @@ LL |     ConstDropImplWithBounds::<NonTrivialDrop>(PhantomData),\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `~const Destruct` is not implemented for `ConstDropImplWithBounds<NonTrivialDrop>`\n    |\n note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n-  --> $DIR/const-drop-fail.rs:28:25\n+  --> $DIR/const-drop-fail.rs:29:25\n    |\n LL | impl<T: ~const A> const Drop for ConstDropImplWithBounds<T> {\n    |                         ^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: 1 redundant requirement hidden\n    = note: required for `ConstDropImplWithBounds<NonTrivialDrop>` to implement `~const Destruct`\n note: required by a bound in `check`\n-  --> $DIR/const-drop-fail.rs:34:19\n+  --> $DIR/const-drop-fail.rs:35:19\n    |\n LL | const fn check<T: ~const Destruct>(_: T) {}\n    |                   ^^^^^^^^^^^^^^^ required by this bound in `check`"}, {"sha": "2b4963991dbefacd4a08c3e1f9baba36831cca35", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-requires-const-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,9 +1,9 @@\n #![feature(const_trait_impl)]\n \n pub trait A {}\n-//~^ NOTE: this trait must be annotated with `#[const_trait]`\n+//~^ HELP: mark `A` as const\n \n impl const A for () {}\n-//~^ ERROR: const `impl`s must be for traits marked with `#[const_trait]`\n+//~^ ERROR: const `impl` for trait `A` which is not marked with `#[const_trait]`\n \n fn main() {}"}, {"sha": "478adcf3e9e898d28cfd48addc6ad15f79c612f3", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-requires-const-trait.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-requires-const-trait.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,14 +1,14 @@\n-error: const `impl`s must be for traits marked with `#[const_trait]`\n-  --> $DIR/const-impl-requires-const-trait.rs:6:1\n+error: const `impl` for trait `A` which is not marked with `#[const_trait]`\n+  --> $DIR/const-impl-requires-const-trait.rs:6:12\n    |\n+LL | pub trait A {}\n+   | - help: mark `A` as const: `#[const_trait]`\n+...\n LL | impl const A for () {}\n-   | ^^^^^^^^^^^^^^^^^^^\n-   |\n-note: this trait must be annotated with `#[const_trait]`\n-  --> $DIR/const-impl-requires-const-trait.rs:3:1\n+   |            ^\n    |\n-LL | pub trait A {}\n-   | ^^^^^^^^^^^\n+   = note: marking a trait with `#[const_trait]` ensures all default method bodies are `const`\n+   = note: adding a non-const method body in the future would be a breaking change\n \n error: aborting due to previous error\n "}, {"sha": "96acdc300e0ddd81877bca2478e8c8e409cfcc7b", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,5 +1,6 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Tr {}\n impl Tr for () {}\n "}, {"sha": "d102956cd2ec24a9614764c91a88992066fc0490", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,16 +1,16 @@\n error[E0277]: the trait bound `(): ~const Tr` is not satisfied\n-  --> $DIR/default-method-body-is-const-body-checking.rs:11:15\n+  --> $DIR/default-method-body-is-const-body-checking.rs:12:15\n    |\n LL |         foo::<()>();\n    |               ^^ the trait `~const Tr` is not implemented for `()`\n    |\n note: the trait `Tr` is implemented for `()`, but that implementation is not `const`\n-  --> $DIR/default-method-body-is-const-body-checking.rs:11:15\n+  --> $DIR/default-method-body-is-const-body-checking.rs:12:15\n    |\n LL |         foo::<()>();\n    |               ^^\n note: required by a bound in `foo`\n-  --> $DIR/default-method-body-is-const-body-checking.rs:6:28\n+  --> $DIR/default-method-body-is-const-body-checking.rs:7:28\n    |\n LL | const fn foo<T>() where T: ~const Tr {}\n    |                            ^^^^^^^^^ required by this bound in `foo`"}, {"sha": "b86acb2cc9ab251c0dfbdd5a14badca474f38982", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.nn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.nn.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -0,0 +1,8 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-2.rs:11:12\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |            ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b86acb2cc9ab251c0dfbdd5a14badca474f38982", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.ny.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.ny.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -0,0 +1,8 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-2.rs:11:12\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |            ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d183efde2df1fd579615dec45b72940a9e7f98eb", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,14 +1,19 @@\n #![feature(const_trait_impl)]\n \n+// revisions: yy yn ny nn\n+\n+#[cfg_attr(any(yy, yn), const_trait)]\n trait Foo {\n     fn a(&self);\n }\n+\n+#[cfg_attr(any(yy, ny), const_trait)]\n trait Bar: ~const Foo {}\n+//[ny,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`\n \n const fn foo<T: Bar>(x: &T) {\n     x.a();\n-    //~^ ERROR the trait bound\n-    //~| ERROR cannot call\n+    //[yn,yy]~^ ERROR the trait bound\n }\n \n fn main() {}"}, {"sha": "1766cdbee8af2b11d217576dff986e85bc76be5a", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02cd79afb8080fce8c8ce35533c54d8ecf8f390e/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.stderr?ref=02cd79afb8080fce8c8ce35533c54d8ecf8f390e", "patch": "@@ -1,24 +0,0 @@\n-error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n-  --> $DIR/super-traits-fail-2.rs:9:7\n-   |\n-LL |     x.a();\n-   |       ^^^ the trait `~const Foo` is not implemented for `T`\n-   |\n-note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/super-traits-fail-2.rs:9:7\n-   |\n-LL |     x.a();\n-   |       ^^^\n-\n-error[E0015]: cannot call non-const fn `<T as Foo>::a` in constant functions\n-  --> $DIR/super-traits-fail-2.rs:9:7\n-   |\n-LL |     x.a();\n-   |       ^^^\n-   |\n-   = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0015, E0277.\n-For more information about an error, try `rustc --explain E0015`."}, {"sha": "b52eb2c0332fd460e93f5f2b5d1586e4036a6c9f", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.yn.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yn.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n+  --> $DIR/super-traits-fail-2.rs:15:5\n+   |\n+LL |     x.a();\n+   |     ^ - required by a bound introduced by this call\n+   |     |\n+   |     the trait `~const Foo` is not implemented for `T`\n+   |\n+note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/super-traits-fail-2.rs:15:5\n+   |\n+LL |     x.a();\n+   |     ^\n+help: consider further restricting this bound\n+   |\n+LL | const fn foo<T: Bar + ~const Foo>(x: &T) {\n+   |                     ++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b52eb2c0332fd460e93f5f2b5d1586e4036a6c9f", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-2.yy.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-2.yy.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `T: ~const Foo` is not satisfied\n+  --> $DIR/super-traits-fail-2.rs:15:5\n+   |\n+LL |     x.a();\n+   |     ^ - required by a bound introduced by this call\n+   |     |\n+   |     the trait `~const Foo` is not implemented for `T`\n+   |\n+note: the trait `Foo` is implemented for `T`, but that implementation is not `const`\n+  --> $DIR/super-traits-fail-2.rs:15:5\n+   |\n+LL |     x.a();\n+   |     ^\n+help: consider further restricting this bound\n+   |\n+LL | const fn foo<T: Bar + ~const Foo>(x: &T) {\n+   |                     ++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "191edca1761c83dbf63c8e32cce2f73b9457b710", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-3.nn.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.nn.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -0,0 +1,14 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:12:12\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |            ^^^^^^^^^^\n+\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:15:17\n+   |\n+LL | const fn foo<T: ~const Bar>(x: &T) {\n+   |                 ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a3b4c302a57f8e7e4c050b87f8797da15edb8292", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-3.ny.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.ny.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -0,0 +1,8 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:12:12\n+   |\n+LL | trait Bar: ~const Foo {}\n+   |            ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "70d2936d3b259d0e533ea6087044251b8c2a640e", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-3.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -0,0 +1,20 @@\n+#![feature(const_trait_impl)]\n+\n+// revisions: yy yn ny nn\n+//[yy] check-pass\n+\n+#[cfg_attr(any(yy, yn), const_trait)]\n+trait Foo {\n+    fn a(&self);\n+}\n+\n+#[cfg_attr(any(yy, ny), const_trait)]\n+trait Bar: ~const Foo {}\n+//[ny,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`\n+\n+const fn foo<T: ~const Bar>(x: &T) {\n+    //[yn,nn]~^ ERROR: ~const can only be applied to `#[const_trait]`\n+    x.a();\n+}\n+\n+fn main() {}"}, {"sha": "9d611665465933e659179313a6d730ed30bac694", "filename": "src/test/ui/rfc-2632-const-trait-impl/super-traits-fail-3.yn.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fsuper-traits-fail-3.yn.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -0,0 +1,8 @@\n+error: ~const can only be applied to `#[const_trait]` traits\n+  --> $DIR/super-traits-fail-3.rs:15:17\n+   |\n+LL | const fn foo<T: ~const Bar>(x: &T) {\n+   |                 ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5bd52151f42acdc097cd97516a038ad44ff31c2f", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,6 +1,7 @@\n #![feature(const_trait_impl)]\n #![feature(associated_type_bounds)]\n \n+#[const_trait]\n trait T {}\n struct S;\n impl T for S {}"}, {"sha": "5d2133156343d55884bec97eec62e6c73b5282d6", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,37 +1,37 @@\n error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:8:19\n+  --> $DIR/tilde-const-invalid-places.rs:9:19\n    |\n LL | fn rpit() -> impl ~const T { S }\n    |                   ^^^^^^^^\n    |\n    = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:11:17\n+  --> $DIR/tilde-const-invalid-places.rs:12:17\n    |\n LL | fn apit(_: impl ~const T) {}\n    |                 ^^^^^^^^\n    |\n    = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:14:50\n+  --> $DIR/tilde-const-invalid-places.rs:15:50\n    |\n LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n    |                                                  ^^^^^^^^\n    |\n    = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:17:48\n+  --> $DIR/tilde-const-invalid-places.rs:18:48\n    |\n LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n    |                                                ^^^^^^^^\n    |\n    = note: only allowed on bounds on functions, traits' associated types and functions, const impls and its associated functions\n \n error: `~const` and `?` are mutually exclusive\n-  --> $DIR/tilde-const-invalid-places.rs:20:25\n+  --> $DIR/tilde-const-invalid-places.rs:21:25\n    |\n LL | struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n    |                         ^^^^^^^^^^^^^"}, {"sha": "bfe98b98c74206a8d896c60222f656accdd7a523", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -4,8 +4,10 @@\n // test is not enough.\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Bar {}\n \n+#[const_trait]\n trait Foo {\n     fn a();\n     fn b() where Self: ~const Bar;"}, {"sha": "f2846b6a6626208bd5da33a0da23714268dff9e4", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-const.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-const.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n-  --> $DIR/trait-where-clause-const.rs:17:5\n+  --> $DIR/trait-where-clause-const.rs:19:5\n    |\n LL |     T::b();\n    |     ^^^^^^ the trait `~const Bar` is not implemented for `T`\n    |\n note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/trait-where-clause-const.rs:17:5\n+  --> $DIR/trait-where-clause-const.rs:19:5\n    |\n LL |     T::b();\n    |     ^^^^^^\n@@ -15,13 +15,13 @@ LL | const fn test1<T: ~const Foo + Bar + ~const Bar>() {\n    |                                    ++++++++++++\n \n error[E0277]: the trait bound `T: ~const Bar` is not satisfied\n-  --> $DIR/trait-where-clause-const.rs:19:5\n+  --> $DIR/trait-where-clause-const.rs:21:5\n    |\n LL |     T::c::<T>();\n    |     ^^^^^^^^^^^ the trait `~const Bar` is not implemented for `T`\n    |\n note: the trait `Bar` is implemented for `T`, but that implementation is not `const`\n-  --> $DIR/trait-where-clause-const.rs:19:5\n+  --> $DIR/trait-where-clause-const.rs:21:5\n    |\n LL |     T::c::<T>();\n    |     ^^^^^^^^^^^"}, {"sha": "3b028ac48db4bf430e8f9399493cc128725a42e0", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause-self-referential.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause-self-referential.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Foo {\n     fn bar() where Self: ~const Foo;\n }"}, {"sha": "85ca5fc904877f35872c7f2ec99dc3d86589c455", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,5 +1,6 @@\n #![feature(const_trait_impl)]\n \n+#[const_trait]\n trait Bar {}\n \n trait Foo {"}, {"sha": "11f0c40160d89e05c2cd944fc2a7ffd0e4596632", "filename": "src/test/ui/rfc-2632-const-trait-impl/trait-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-where-clause.stderr?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `T: Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:13:5\n+  --> $DIR/trait-where-clause.rs:14:5\n    |\n LL |     T::b();\n    |     ^^^^ the trait `Bar` is not implemented for `T`\n    |\n note: required by a bound in `Foo::b`\n-  --> $DIR/trait-where-clause.rs:7:24\n+  --> $DIR/trait-where-clause.rs:8:24\n    |\n LL |     fn b() where Self: ~const Bar;\n    |                        ^^^^^^^^^^ required by this bound in `Foo::b`\n@@ -15,13 +15,13 @@ LL | fn test1<T: Foo + Bar>() {\n    |                 +++++\n \n error[E0277]: the trait bound `T: Bar` is not satisfied\n-  --> $DIR/trait-where-clause.rs:15:12\n+  --> $DIR/trait-where-clause.rs:16:12\n    |\n LL |     T::c::<T>();\n    |            ^ the trait `Bar` is not implemented for `T`\n    |\n note: required by a bound in `Foo::c`\n-  --> $DIR/trait-where-clause.rs:8:13\n+  --> $DIR/trait-where-clause.rs:9:13\n    |\n LL |     fn c<T: ~const Bar>();\n    |             ^^^^^^^^^^ required by this bound in `Foo::c`"}, {"sha": "b0006cb90bdd6f9b26591599c31afc5889585591", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -193,6 +193,12 @@ macro_rules! t {\n             Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n         }\n     };\n+    ($e:expr, $extra:expr) => {\n+        match $e {\n+            Ok(e) => e,\n+            Err(e) => panic!(\"{} failed with {}: {}\", stringify!($e), e, $extra),\n+        }\n+    };\n }\n \n struct Builder {\n@@ -437,7 +443,7 @@ impl Builder {\n             host_component(\"rustfmt-preview\"),\n             host_component(\"llvm-tools-preview\"),\n             host_component(\"rust-analysis\"),\n-            host_component(\"rust-docs-json\"),\n+            host_component(\"rust-docs-json-preview\"),\n         ]);\n \n         extensions.extend(\n@@ -584,7 +590,7 @@ impl Builder {\n         self.shipped_files.insert(name.clone());\n \n         let dst = self.output.join(name);\n-        t!(fs::write(&dst, contents));\n+        t!(fs::write(&dst, contents), format!(\"failed to create manifest {}\", dst.display()));\n     }\n \n     fn write_shipped_files(&self, path: &Path) {"}, {"sha": "0186194a41f5550797930cd0f8a9aef46312ec43", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -20,6 +20,7 @@ pub(crate) enum PkgType {\n     Rustfmt,\n     LlvmTools,\n     Miri,\n+    JsonDocs,\n     Other(String),\n }\n \n@@ -36,6 +37,7 @@ impl PkgType {\n             \"rustfmt\" | \"rustfmt-preview\" => PkgType::Rustfmt,\n             \"llvm-tools\" | \"llvm-tools-preview\" => PkgType::LlvmTools,\n             \"miri\" | \"miri-preview\" => PkgType::Miri,\n+            \"rust-docs-json\" | \"rust-docs-json-preview\" => PkgType::JsonDocs,\n             other => PkgType::Other(other.into()),\n         }\n     }\n@@ -53,6 +55,7 @@ impl PkgType {\n             PkgType::Rustfmt => \"rustfmt\",\n             PkgType::LlvmTools => \"llvm-tools\",\n             PkgType::Miri => \"miri\",\n+            PkgType::JsonDocs => \"rust-docs-json\",\n             PkgType::Other(component) => component,\n         }\n     }\n@@ -72,6 +75,7 @@ impl PkgType {\n             PkgType::Rust => true,\n             PkgType::RustSrc => true,\n             PkgType::Rustc => true,\n+            PkgType::JsonDocs => true,\n             PkgType::Other(_) => true,\n         }\n     }\n@@ -113,6 +117,9 @@ impl Versions {\n             Some(version) => Ok(version.clone()),\n             None => {\n                 let version_info = self.load_version_from_tarball(package)?;\n+                if *package == PkgType::Rust && version_info.version.is_none() {\n+                    panic!(\"missing version info for toolchain\");\n+                }\n                 self.versions.insert(package.clone(), version_info.clone());\n                 Ok(version_info)\n             }\n@@ -127,6 +134,7 @@ impl Versions {\n             Ok(file) => file,\n             Err(err) if err.kind() == std::io::ErrorKind::NotFound => {\n                 // Missing tarballs do not return an error, but return empty data.\n+                println!(\"warning: missing tarball {}\", tarball.display());\n                 return Ok(VersionInfo::default());\n             }\n             Err(err) => return Err(err.into()),"}, {"sha": "f0d5ed6f594bdd601c84b7a8fd4fa1f5084d88a5", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01af5040fdada6ef8f1b749cda798d80a8590b2c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=01af5040fdada6ef8f1b749cda798d80a8590b2c", "patch": "@@ -1238,7 +1238,7 @@ fn ty_auto_deref_stability<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, precedenc\n             ty::Adt(..) if ty.has_placeholders() || ty.has_opaque_types() => {\n                 Position::ReborrowStable(precedence).into()\n             },\n-            ty::Adt(_, substs) if substs.has_param_types_or_consts() => {\n+            ty::Adt(_, substs) if substs.has_non_region_param() => {\n                 TyPosition::new_deref_stable_for_result(precedence, ty)\n             },\n             ty::Bool"}]}