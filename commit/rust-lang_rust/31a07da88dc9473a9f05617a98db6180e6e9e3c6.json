{"sha": "31a07da88dc9473a9f05617a98db6180e6e9e3c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYTA3ZGE4OGRjOTQ3M2E5ZjA1NjE3YTk4ZGI2MTgwZTZlOWUzYzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-06T18:54:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-06T18:54:55Z"}, "message": "Boolean results", "tree": {"sha": "5641d1243a669eb0c611113367a9ca90c1989a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5641d1243a669eb0c611113367a9ca90c1989a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31a07da88dc9473a9f05617a98db6180e6e9e3c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31a07da88dc9473a9f05617a98db6180e6e9e3c6", "html_url": "https://github.com/rust-lang/rust/commit/31a07da88dc9473a9f05617a98db6180e6e9e3c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31a07da88dc9473a9f05617a98db6180e6e9e3c6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0900b3ca7be669418e185c0eea0d92550d83d4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0900b3ca7be669418e185c0eea0d92550d83d4d", "html_url": "https://github.com/rust-lang/rust/commit/d0900b3ca7be669418e185c0eea0d92550d83d4d"}], "stats": {"total": 161, "additions": 72, "deletions": 89}, "files": [{"sha": "d09579881b21c0bb90cc6294b3b3cd4e2a5cb90e", "filename": "src/parser/event_parser/grammar.rs", "status": "modified", "additions": 58, "deletions": 63, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/31a07da88dc9473a9f05617a98db6180e6e9e3c6/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a07da88dc9473a9f05617a98db6180e6e9e3c6/src%2Fparser%2Fevent_parser%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar.rs?ref=31a07da88dc9473a9f05617a98db6180e6e9e3c6", "patch": "@@ -1,20 +1,17 @@\n use super::parser::Parser;\n-\n+use {SyntaxKind};\n use syntax_kinds::*;\n \n // Items //\n \n pub fn file(p: &mut Parser) {\n-    p.start(FILE);\n-    shebang(p);\n-    inner_attributes(p);\n-    mod_items(p);\n-    p.finish();\n+    node(p, FILE, |p| {\n+        shebang(p);\n+        inner_attributes(p);\n+        many(p, |p| skip_to_first(p, item_first, item));\n+    })\n }\n \n-type Result = ::std::result::Result<(), ()>;\n-const OK: Result = Ok(());\n-const ERR: Result = Err(());\n \n fn shebang(_: &mut Parser) {\n     //TODO\n@@ -24,88 +21,86 @@ fn inner_attributes(_: &mut Parser) {\n     //TODO\n }\n \n-fn mod_items(p: &mut Parser) {\n-    loop {\n-        skip_until_item(p);\n-        if p.is_eof() {\n-            return;\n-        }\n-        if item(p).is_err() {\n-            skip_one_token(p);\n-        }\n+fn item_first(p: &Parser) -> bool {\n+    match p.current() {\n+        Some(STRUCT_KW) => true,\n+        _ => false,\n     }\n }\n \n-fn item(p: &mut Parser) -> Result {\n-    outer_attributes(p)?;\n-    visibility(p)?;\n-    if p.current_is(STRUCT_KW) {\n-        p.start(STRUCT_ITEM);\n-        p.bump();\n-        let _ = struct_item(p);\n-        p.finish();\n-        return OK;\n-    }\n-    ERR\n+fn item(p: &mut Parser) {\n+    outer_attributes(p);\n+    visibility(p);\n+    node_if(p, STRUCT_KW, STRUCT_ITEM, struct_item);\n }\n \n-fn struct_item(p: &mut Parser) -> Result {\n-    p.expect(IDENT)?;\n-    p.curly_block(|p| {\n-        comma_list(p, struct_field)\n-    })\n+fn struct_item(p: &mut Parser) {\n+    p.expect(IDENT)\n+        && p.curly_block(|p| comma_list(p, struct_field));\n }\n \n-fn struct_field(p: &mut Parser) -> Result {\n-    if !p.current_is(IDENT) {\n-        return ERR;\n-    }\n-    p.start(STRUCT_FIELD);\n-    p.bump();\n-    ignore_errors(|| {\n-        p.expect(COLON)?;\n-        p.expect(IDENT)?;\n-        OK\n-    });\n-    p.finish();\n-    OK\n+fn struct_field(p: &mut Parser) -> bool {\n+    node_if(p, IDENT, STRUCT_FIELD, |p| {\n+        p.expect(COLON) && p.expect(IDENT);\n+    })\n }\n \n // Paths, types, attributes, and stuff //\n \n-fn outer_attributes(_: &mut Parser) -> Result {\n-    OK\n+fn outer_attributes(_: &mut Parser) {\n }\n \n-fn visibility(_: &mut Parser) -> Result {\n-    OK\n+fn visibility(_: &mut Parser) {\n }\n \n // Expressions //\n \n // Error recovery and high-order utils //\n \n-fn skip_until_item(_: &mut Parser) {\n-    //TODO\n+fn node_if<F: FnOnce(&mut Parser)>(p: &mut Parser, first: SyntaxKind, node_kind: SyntaxKind, rest: F) -> bool {\n+    p.current_is(first) && { node(p, node_kind, |p| { p.bump(); rest(p); }); true }\n }\n \n-fn skip_one_token(p: &mut Parser) {\n-    p.start(ERROR);\n-    p.bump().unwrap();\n+fn node<F: FnOnce(&mut Parser)>(p: &mut Parser, node_kind: SyntaxKind, rest: F) {\n+    p.start(node_kind);\n+    rest(p);\n     p.finish();\n }\n \n-fn ignore_errors<F: FnOnce() -> Result>(f: F) {\n-    drop(f());\n+fn many<F: Fn(&mut Parser) -> bool>(p: &mut Parser, f: F) {\n+    while f(p) { }\n }\n \n-fn comma_list<F: Fn(&mut Parser) -> Result>(p: &mut Parser, element: F) {\n+fn comma_list<F: Fn(&mut Parser) -> bool>(p: &mut Parser, f: F) {\n+    many(p, |p| {\n+        f(p);\n+        p.expect(COMMA)\n+    })\n+}\n+\n+\n+fn skip_to_first<C, F>(p: &mut Parser, cond: C, f: F) -> bool\n+where\n+    C: Fn(&Parser) -> bool,\n+    F: FnOnce(&mut Parser),\n+{\n     loop {\n-        if element(p).is_err() {\n-            return\n+        if cond(p) {\n+            f(p);\n+            return true;\n         }\n-        if p.expect(COMMA).is_err() {\n-            return\n+        if p.bump().is_none() {\n+            return false;\n         }\n     }\n+}\n+\n+impl<'p> Parser<'p> {\n+    fn current_is(&self, kind: SyntaxKind) -> bool {\n+        self.current() == Some(kind)\n+    }\n+\n+    pub(crate) fn expect(&mut self, kind: SyntaxKind) -> bool {\n+        self.current_is(kind) && { self.bump(); true }\n+    }\n }\n\\ No newline at end of file"}, {"sha": "07e3ccc23689d526f8457b5f2ffaca7e48b4bd50", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/31a07da88dc9473a9f05617a98db6180e6e9e3c6/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a07da88dc9473a9f05617a98db6180e6e9e3c6/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=31a07da88dc9473a9f05617a98db6180e6e9e3c6", "patch": "@@ -60,10 +60,6 @@ impl<'t> Parser<'t> {\n         Some(self.raw_tokens[idx].kind)\n     }\n \n-    pub(crate) fn current_is(&self, kind: SyntaxKind) -> bool {\n-        self.current() == Some(kind)\n-    }\n-\n     pub(crate) fn bump(&mut self) -> Option<SyntaxKind> {\n         let kind = self.current()?;\n         match kind {\n@@ -76,31 +72,23 @@ impl<'t> Parser<'t> {\n         Some(kind)\n     }\n \n-    pub(crate) fn expect(&mut self, kind: SyntaxKind) -> Result<(), ()> {\n-        if kind == self.current().ok_or(())? {\n-            self.bump();\n-            Ok(())\n-        } else {\n-            Err(())\n-        }\n-    }\n-\n-    pub(crate) fn curly_block<F: FnOnce(&mut Parser)>(&mut self, f: F) -> Result<(), ()> {\n+    pub(crate) fn curly_block<F: FnOnce(&mut Parser)>(&mut self, f: F) -> bool {\n         let level = self.curly_level;\n-        self.expect(L_CURLY)?;\n+        if !self.expect(L_CURLY) {\n+            return false\n+        }\n         f(self);\n         assert!(self.curly_level > level);\n-        if self.expect(R_CURLY).is_ok() {\n-            return Ok(());\n-        }\n-        self.start(ERROR);\n-        while self.curly_level > level {\n-            if self.bump().is_none() {\n-                break;\n+        if !self.expect(R_CURLY) {\n+            self.start(ERROR);\n+            while self.curly_level > level {\n+                if self.bump().is_none() {\n+                    break;\n+                }\n             }\n+            self.finish();\n         }\n-        self.finish();\n-        Ok(()) //???\n+        true\n     }\n \n     fn event(&mut self, event: Event) {"}, {"sha": "87ab3f7a9b1530e3c219ea8a76578c0e0d35895d", "filename": "tests/data/parser/0002_struct_item_field.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a07da88dc9473a9f05617a98db6180e6e9e3c6/tests%2Fdata%2Fparser%2F0002_struct_item_field.txt", "raw_url": "https://github.com/rust-lang/rust/raw/31a07da88dc9473a9f05617a98db6180e6e9e3c6/tests%2Fdata%2Fparser%2F0002_struct_item_field.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2F0002_struct_item_field.txt?ref=31a07da88dc9473a9f05617a98db6180e6e9e3c6", "patch": "@@ -12,4 +12,4 @@ FILE@[0; 25)\n       WHITESPACE@[19; 20)\n       IDENT@[20; 23)\n       WHITESPACE@[23; 24)\n-    R_CURLY@[24; 25)\n\\ No newline at end of file\n+    R_CURLY@[24; 25)"}, {"sha": "6c31463ad31f204fcb231b138a82b3233c461eba", "filename": "tests/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31a07da88dc9473a9f05617a98db6180e6e9e3c6/tests%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31a07da88dc9473a9f05617a98db6180e6e9e3c6/tests%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fparser.rs?ref=31a07da88dc9473a9f05617a98db6180e6e9e3c6", "patch": "@@ -49,7 +49,7 @@ fn parser_test_case(path: &Path) {\n         return\n     }\n     if expected.trim() == actual.trim() {\n-        panic!(\"Whitespace difference!\")\n+        panic!(\"Whitespace difference! {}\", path.display())\n     }\n     assert_diff!(expected, actual, \"\\n\", 0)\n }"}]}