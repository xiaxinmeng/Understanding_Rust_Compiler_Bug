{"sha": "ad2a5da259aba485150cb3c3a8395c18be12cba7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMmE1ZGEyNTlhYmE0ODUxNTBjYjNjM2E4Mzk1YzE4YmUxMmNiYTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T16:30:42Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T16:30:42Z"}, "message": "kill accidentally added file", "tree": {"sha": "742acb6076ad46b574db7140a1a54ba4259ddc89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/742acb6076ad46b574db7140a1a54ba4259ddc89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad2a5da259aba485150cb3c3a8395c18be12cba7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad2a5da259aba485150cb3c3a8395c18be12cba7", "html_url": "https://github.com/rust-lang/rust/commit/ad2a5da259aba485150cb3c3a8395c18be12cba7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad2a5da259aba485150cb3c3a8395c18be12cba7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a19d699eb594c4929215a24df333f87fd41881a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a19d699eb594c4929215a24df333f87fd41881a", "html_url": "https://github.com/rust-lang/rust/commit/2a19d699eb594c4929215a24df333f87fd41881a"}], "stats": {"total": 73, "additions": 0, "deletions": 73}, "files": [{"sha": "607a25115ddf155e17727d63ed9de804a542922f", "filename": "crates/ra_analysis/src/goto_defenition.rs", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/2a19d699eb594c4929215a24df333f87fd41881a/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a19d699eb594c4929215a24df333f87fd41881a/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fgoto_defenition.rs?ref=2a19d699eb594c4929215a24df333f87fd41881a", "patch": "@@ -1,73 +0,0 @@\n-use ra_db::FileId;\n-use ra_syntax::ast;\n-\n-use crate::db::RootDatabase;\n-\n-pub fn goto_defenition(db: &RootDatabase, position: FilePosition,\n-) -> Cancelable<Option<Vec<NavigationTarget>>> {\n-    let file = db.source_file(position.file_id);\n-    let syntax = file.syntax();\n-    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n-        return Ok(Some(reference_defenition(db, position.file_id, name_ref)));\n-    }\n-    if let Some(name) = find_node_at_offset::<ast::Name>(syntax, position.offset)  {\n-        return Ok(Some(name_defenition(db, position.file_idname)));\n-    }\n-    Ok(None)\n-}\n-\n-fn reference_defenition(db: &RootDatabase, file_id: FileId, name_ref: ast::NameRef) -> Cancelable<Vec<Nav>> {\n-    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, position.offset) {\n-        let mut rr = ReferenceResolution::new(name_ref.syntax().range());\n-        if let Some(fn_descr) =\n-            source_binder::function_from_child_node(self, position.file_id, name_ref.syntax())?\n-        {\n-            let scope = fn_descr.scopes(self);\n-            // First try to resolve the symbol locally\n-            if let Some(entry) = scope.resolve_local_name(name_ref) {\n-                rr.resolves_to.push(NavigationTarget {\n-                    file_id: position.file_id,\n-                    name: entry.name().to_string().into(),\n-                    range: entry.ptr().range(),\n-                    kind: NAME,\n-                    ptr: None,\n-                });\n-                return Ok(Some(rr));\n-            };\n-        }\n-        // If that fails try the index based approach.\n-        rr.resolves_to.extend(\n-            self.index_resolve(name_ref)?\n-                .into_iter()\n-                .map(NavigationTarget::from_symbol),\n-        );\n-        return Ok(Some(rr));\n-    }\n-        if let Some(name) = find_node_at_offset::<ast::Name>(syntax, position.offset) {\n-            let mut rr = ReferenceResolution::new(name.syntax().range());\n-            if let Some(module) = name.syntax().parent().and_then(ast::Module::cast) {\n-                if module.has_semi() {\n-                    if let Some(child_module) =\n-                        source_binder::module_from_declaration(self, position.file_id, module)?\n-                    {\n-                        let file_id = child_module.file_id();\n-                        let name = match child_module.name() {\n-                            Some(name) => name.to_string().into(),\n-                            None => \"\".into(),\n-                        };\n-                        let symbol = NavigationTarget {\n-                            file_id,\n-                            name,\n-                            range: TextRange::offset_len(0.into(), 0.into()),\n-                            kind: MODULE,\n-                            ptr: None,\n-                        };\n-                        rr.resolves_to.push(symbol);\n-                        return Ok(Some(rr));\n-                    }\n-                }\n-            }\n-        }\n-        Ok(None)\n-\n-}"}]}