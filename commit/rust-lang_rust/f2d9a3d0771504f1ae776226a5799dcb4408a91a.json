{"sha": "f2d9a3d0771504f1ae776226a5799dcb4408a91a", "node_id": "C_kwDOAAsO6NoAKGYyZDlhM2QwNzcxNTA0ZjFhZTc3NjIyNmE1Nzk5ZGNiNDQwOGE5MWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T05:48:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-30T05:48:59Z"}, "message": "Auto merge of #109499 - spastorino:new-rpitit-19, r=compiler-errors\n\nGive return-position impl traits in trait a (synthetic) name to avoid name collisions with new lowering strategy\n\nThe only needed commit from this PR is the last one.\n\nr? `@compiler-errors`\n\nNeeds #109455.", "tree": {"sha": "31f5ca937387f061a7139194f4693d8d7b33fb4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31f5ca937387f061a7139194f4693d8d7b33fb4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2d9a3d0771504f1ae776226a5799dcb4408a91a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d9a3d0771504f1ae776226a5799dcb4408a91a", "html_url": "https://github.com/rust-lang/rust/commit/f2d9a3d0771504f1ae776226a5799dcb4408a91a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2d9a3d0771504f1ae776226a5799dcb4408a91a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/82bfda848e28d7616c7045d7ced8cee88d2d1a8f", "html_url": "https://github.com/rust-lang/rust/commit/82bfda848e28d7616c7045d7ced8cee88d2d1a8f"}, {"sha": "2ca350c776414fb09ca97311b5e0fee929c90902", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca350c776414fb09ca97311b5e0fee929c90902", "html_url": "https://github.com/rust-lang/rust/commit/2ca350c776414fb09ca97311b5e0fee929c90902"}], "stats": {"total": 102, "additions": 69, "deletions": 33}, "files": [{"sha": "8ceb176491b6f95d37934f00f2cba89dd721f99f", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9a3d0771504f1ae776226a5799dcb4408a91a/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9a3d0771504f1ae776226a5799dcb4408a91a/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=f2d9a3d0771504f1ae776226a5799dcb4408a91a", "patch": "@@ -404,12 +404,8 @@ impl DefPathData {\n         match *self {\n             TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => Some(name),\n \n-            // We use this name when collecting `ModChild`s.\n-            // FIXME this could probably be removed with some refactoring to the name resolver.\n-            ImplTraitAssocTy => Some(kw::Empty),\n-\n             Impl | ForeignMod | CrateRoot | Use | GlobalAsm | ClosureExpr | Ctor | AnonConst\n-            | ImplTrait => None,\n+            | ImplTrait | ImplTraitAssocTy => None,\n         }\n     }\n "}, {"sha": "43e5946f31354659c33ed1bfa7393be57418ed5b", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9a3d0771504f1ae776226a5799dcb4408a91a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9a3d0771504f1ae776226a5799dcb4408a91a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=f2d9a3d0771504f1ae776226a5799dcb4408a91a", "patch": "@@ -1021,7 +1021,9 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             } else {\n                 // Iterate over all children.\n                 for child_index in self.root.tables.children.get(self, id).unwrap().decode(self) {\n-                    yield self.get_mod_child(child_index, sess);\n+                    if self.root.tables.opt_rpitit_info.get(self, child_index).is_none() {\n+                        yield self.get_mod_child(child_index, sess);\n+                    }\n                 }\n \n                 if let Some(reexports) = self.root.tables.module_reexports.get(self, id) {\n@@ -1067,8 +1069,11 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     fn get_associated_item(self, id: DefIndex, sess: &'a Session) -> ty::AssocItem {\n-        let name = self.item_name(id);\n-\n+        let name = if self.root.tables.opt_rpitit_info.get(self, id).is_some() {\n+            kw::Empty\n+        } else {\n+            self.item_name(id)\n+        };\n         let (kind, has_self) = match self.def_kind(id) {\n             DefKind::AssocConst => (ty::AssocKind::Const, false),\n             DefKind::AssocFn => (ty::AssocKind::Fn, self.get_fn_has_self_parameter(id, sess)),"}, {"sha": "de1e1a527d5a96242029431435045807311a4b2d", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9a3d0771504f1ae776226a5799dcb4408a91a/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9a3d0771504f1ae776226a5799dcb4408a91a/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=f2d9a3d0771504f1ae776226a5799dcb4408a91a", "patch": "@@ -1,3 +1,4 @@\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, DefIdMap, LocalDefId};\n@@ -196,20 +197,26 @@ fn associated_types_for_impl_traits_in_associated_fn(\n \n     match tcx.def_kind(parent_def_id) {\n         DefKind::Trait => {\n-            struct RPITVisitor {\n-                rpits: Vec<LocalDefId>,\n+            struct RPITVisitor<'tcx> {\n+                rpits: FxIndexSet<LocalDefId>,\n+                tcx: TyCtxt<'tcx>,\n             }\n \n-            impl<'v> Visitor<'v> for RPITVisitor {\n-                fn visit_ty(&mut self, ty: &'v hir::Ty<'v>) {\n-                    if let hir::TyKind::OpaqueDef(item_id, _, _) = ty.kind {\n-                        self.rpits.push(item_id.owner_id.def_id)\n+            impl<'tcx> Visitor<'tcx> for RPITVisitor<'tcx> {\n+                fn visit_ty(&mut self, ty: &'tcx hir::Ty<'tcx>) {\n+                    if let hir::TyKind::OpaqueDef(item_id, _, _) = ty.kind\n+                        && self.rpits.insert(item_id.owner_id.def_id)\n+                    {\n+                        let opaque_item = self.tcx.hir().expect_item(item_id.owner_id.def_id).expect_opaque_ty();\n+                        for bound in opaque_item.bounds {\n+                            intravisit::walk_param_bound(self, bound);\n+                        }\n                     }\n                     intravisit::walk_ty(self, ty)\n                 }\n             }\n \n-            let mut visitor = RPITVisitor { rpits: Vec::new() };\n+            let mut visitor = RPITVisitor { tcx, rpits: FxIndexSet::default() };\n \n             if let Some(output) = tcx.hir().get_fn_output(fn_def_id) {\n                 visitor.visit_fn_ret_ty(output);\n@@ -227,13 +234,9 @@ fn associated_types_for_impl_traits_in_associated_fn(\n \n             tcx.arena.alloc_from_iter(\n                 tcx.associated_types_for_impl_traits_in_associated_fn(trait_fn_def_id).iter().map(\n-                    move |trait_assoc_def_id| {\n-                        associated_type_for_impl_trait_in_impl(\n-                            tcx,\n-                            trait_assoc_def_id.expect_local(),\n-                            fn_def_id,\n-                        )\n-                        .to_def_id()\n+                    move |&trait_assoc_def_id| {\n+                        associated_type_for_impl_trait_in_impl(tcx, trait_assoc_def_id, fn_def_id)\n+                            .to_def_id()\n                     },\n                 ),\n             )\n@@ -355,7 +358,7 @@ fn associated_type_for_impl_trait_in_trait(\n /// that inherits properties that we infer from the method and the associated type.\n fn associated_type_for_impl_trait_in_impl(\n     tcx: TyCtxt<'_>,\n-    trait_assoc_def_id: LocalDefId,\n+    trait_assoc_def_id: DefId,\n     impl_fn_def_id: LocalDefId,\n ) -> LocalDefId {\n     let impl_local_def_id = tcx.local_parent(impl_fn_def_id);\n@@ -380,7 +383,7 @@ fn associated_type_for_impl_trait_in_impl(\n         name: kw::Empty,\n         kind: ty::AssocKind::Type,\n         def_id,\n-        trait_item_def_id: Some(trait_assoc_def_id.to_def_id()),\n+        trait_item_def_id: Some(trait_assoc_def_id),\n         container: ty::ImplContainer,\n         fn_has_self_parameter: false,\n         opt_rpitit_info: Some(ImplTraitInTraitData::Impl { fn_def_id: impl_fn_def_id.to_def_id() }),"}, {"sha": "ffeabe5c2edabd52387d5a1e6ba38dc19985c03d", "filename": "tests/ui/impl-trait/in-trait/auxiliary/rpitit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fauxiliary%2Frpitit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fauxiliary%2Frpitit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fauxiliary%2Frpitit.rs?ref=f2d9a3d0771504f1ae776226a5799dcb4408a91a", "patch": "@@ -2,12 +2,13 @@\n \n #![feature(return_position_impl_trait_in_trait)]\n \n+use std::ops::Deref;\n+\n pub trait Foo {\n-    fn bar() -> impl Sized;\n+    fn bar() -> impl Deref<Target = impl Sized>;\n }\n \n pub struct Foreign;\n-\n impl Foo for Foreign {\n-    fn bar() {}\n+    fn bar() -> &'static () { &() }\n }"}, {"sha": "f0cd43bcf92166b55587bf2aaaf1e35bb4080e7c", "filename": "tests/ui/impl-trait/in-trait/doesnt-satisfy.next.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdoesnt-satisfy.next.stderr?ref=f2d9a3d0771504f1ae776226a5799dcb4408a91a", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `Foo::{opaque#0}`\n   --> $DIR/doesnt-satisfy.rs:8:22\n    |\n LL |     fn bar() -> impl std::fmt::Display;\n-   |                      ^^^^^^^^^^^^^^^^^ required by this bound in `Foo::`\n+   |                      ^^^^^^^^^^^^^^^^^ required by this bound in `Foo::{opaque#0}`\n \n error: aborting due to previous error\n "}, {"sha": "f4972d948b24684dccebcc9df7d5cd69c002713e", "filename": "tests/ui/impl-trait/in-trait/foreign.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fforeign.rs?ref=f2d9a3d0771504f1ae776226a5799dcb4408a91a", "patch": "@@ -5,7 +5,17 @@\n \n extern crate rpitit;\n \n+use std::sync::Arc;\n+\n+// Implement an RPITIT from another crate.\n+struct Local;\n+impl rpitit::Foo for Local {\n+    fn bar() -> Arc<String> { Arc::new(String::new()) }\n+}\n+\n fn main() {\n-    // Witness an RPITIT from another crate\n-    let () = <rpitit::Foreign as rpitit::Foo>::bar();\n+    // Witness an RPITIT from another crate.\n+    let &() = <rpitit::Foreign as rpitit::Foo>::bar();\n+\n+    let x: Arc<String> = <Local as rpitit::Foo>::bar();\n }"}, {"sha": "3602075372657cd0413f90b12f5a343e71972e19", "filename": "tests/ui/impl-trait/in-trait/nested-rpitit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnested-rpitit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnested-rpitit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fnested-rpitit.rs?ref=f2d9a3d0771504f1ae776226a5799dcb4408a91a", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "f72b3ab0234e9eaf187701707e686996d1bedffc", "filename": "tests/ui/rfc-1937-termination-trait/issue-103052-2.current.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.current.stderr?ref=f2d9a3d0771504f1ae776226a5799dcb4408a91a", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `Something: Termination` is not satisfied\n-  --> $DIR/issue-103052-2.rs:12:22\n+  --> $DIR/issue-103052-2.rs:15:22\n    |\n LL |         fn main() -> Something {\n    |                      ^^^^^^^^^ the trait `Termination` is not implemented for `Something`\n    |\n note: required by a bound in `Main::main::{opaque#0}`\n-  --> $DIR/issue-103052-2.rs:6:27\n+  --> $DIR/issue-103052-2.rs:9:27\n    |\n LL |         fn main() -> impl std::process::Termination;\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Main::main::{opaque#0}`", "previous_filename": "tests/ui/rfc-1937-termination-trait/issue-103052-2.stderr"}, {"sha": "8b01941b4c62317b5cd02d1972a9818e2c0fa5b1", "filename": "tests/ui/rfc-1937-termination-trait/issue-103052-2.next.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.next.stderr?ref=f2d9a3d0771504f1ae776226a5799dcb4408a91a", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `Something: Termination` is not satisfied\n+  --> $DIR/issue-103052-2.rs:15:22\n+   |\n+LL |         fn main() -> Something {\n+   |                      ^^^^^^^^^ the trait `Termination` is not implemented for `Something`\n+   |\n+note: required by a bound in `Main::{opaque#0}`\n+  --> $DIR/issue-103052-2.rs:9:27\n+   |\n+LL |         fn main() -> impl std::process::Termination;\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Main::{opaque#0}`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ca5fa6df2a62612bd8e2427cfd56915e5d07494a", "filename": "tests/ui/rfc-1937-termination-trait/issue-103052-2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d9a3d0771504f1ae776226a5799dcb4408a91a/tests%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1937-termination-trait%2Fissue-103052-2.rs?ref=f2d9a3d0771504f1ae776226a5799dcb4408a91a", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n \n@@ -9,7 +12,8 @@ mod child {\n     struct Something;\n \n     impl Main for () {\n-        fn main() -> Something { //~ ERROR the trait bound `Something: Termination` is not satisfied\n+        fn main() -> Something {\n+            //~^ ERROR the trait bound `Something: Termination` is not satisfied\n             Something\n         }\n     }"}]}