{"sha": "296e72f11c4120c7b38a0cc580ef8990e7a1c36d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NmU3MmYxMWM0MTIwYzdiMzhhMGNjNTgwZWY4OTkwZTdhMWMzNmQ=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-10T18:45:16Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-07-10T18:45:16Z"}, "message": "Deny bare trait objects in in src/liballoc", "tree": {"sha": "a39cd581af8ccab9a4aec44b6d9d73000bb0776f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a39cd581af8ccab9a4aec44b6d9d73000bb0776f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/296e72f11c4120c7b38a0cc580ef8990e7a1c36d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/296e72f11c4120c7b38a0cc580ef8990e7a1c36d", "html_url": "https://github.com/rust-lang/rust/commit/296e72f11c4120c7b38a0cc580ef8990e7a1c36d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/296e72f11c4120c7b38a0cc580ef8990e7a1c36d/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77117e383676176116851d7d3ec04b5e0cf0c456", "url": "https://api.github.com/repos/rust-lang/rust/commits/77117e383676176116851d7d3ec04b5e0cf0c456", "html_url": "https://github.com/rust-lang/rust/commit/77117e383676176116851d7d3ec04b5e0cf0c456"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "44f15981137ba2ac5a1ed3f61be13f6ea1d41fd1", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/296e72f11c4120c7b38a0cc580ef8990e7a1c36d/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296e72f11c4120c7b38a0cc580ef8990e7a1c36d/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=296e72f11c4120c7b38a0cc580ef8990e7a1c36d", "patch": "@@ -446,7 +446,7 @@ impl From<Box<str>> for Box<[u8]> {\n     }\n }\n \n-impl Box<Any> {\n+impl Box<dyn Any> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Attempt to downcast the box to a concrete type.\n@@ -468,10 +468,10 @@ impl Box<Any> {\n     ///     print_if_string(Box::new(0i8));\n     /// }\n     /// ```\n-    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any>> {\n+    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<dyn Any>> {\n         if self.is::<T>() {\n             unsafe {\n-                let raw: *mut Any = Box::into_raw(self);\n+                let raw: *mut dyn Any = Box::into_raw(self);\n                 Ok(Box::from_raw(raw as *mut T))\n             }\n         } else {\n@@ -480,7 +480,7 @@ impl Box<Any> {\n     }\n }\n \n-impl Box<Any + Send> {\n+impl Box<dyn Any + Send> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Attempt to downcast the box to a concrete type.\n@@ -502,10 +502,10 @@ impl Box<Any + Send> {\n     ///     print_if_string(Box::new(0i8));\n     /// }\n     /// ```\n-    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<Any + Send>> {\n-        <Box<Any>>::downcast(self).map_err(|s| unsafe {\n+    pub fn downcast<T: Any>(self) -> Result<Box<T>, Box<dyn Any + Send>> {\n+        <Box<dyn Any>>::downcast(self).map_err(|s| unsafe {\n             // reapply the Send marker\n-            Box::from_raw(Box::into_raw(s) as *mut (Any + Send))\n+            Box::from_raw(Box::into_raw(s) as *mut (dyn Any + Send))\n         })\n     }\n }\n@@ -643,7 +643,7 @@ impl<A, F> FnBox<A> for F\n \n #[unstable(feature = \"fnbox\",\n            reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n-impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + 'a> {\n+impl<'a, A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + 'a> {\n     type Output = R;\n \n     extern \"rust-call\" fn call_once(self, args: A) -> R {\n@@ -653,7 +653,7 @@ impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + 'a> {\n \n #[unstable(feature = \"fnbox\",\n            reason = \"will be deprecated if and when `Box<FnOnce>` becomes usable\", issue = \"28796\")]\n-impl<'a, A, R> FnOnce<A> for Box<FnBox<A, Output = R> + Send + 'a> {\n+impl<'a, A, R> FnOnce<A> for Box<dyn FnBox<A, Output = R> + Send + 'a> {\n     type Output = R;\n \n     extern \"rust-call\" fn call_once(self, args: A) -> R {"}, {"sha": "63cf01a0facbca245ebc2b393464df9fdf85898b", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/296e72f11c4120c7b38a0cc580ef8990e7a1c36d/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296e72f11c4120c7b38a0cc580ef8990e7a1c36d/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=296e72f11c4120c7b38a0cc580ef8990e7a1c36d", "patch": "@@ -72,6 +72,7 @@\n        test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n #![no_std]\n #![needs_allocator]\n+#![deny(bare_trait_objects)]\n #![deny(missing_debug_implementations)]\n \n #![cfg_attr(test, allow(deprecated))] // rand"}, {"sha": "d55f6575a370d9d45c6c3304ba6b1e81c4c4baa1", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/296e72f11c4120c7b38a0cc580ef8990e7a1c36d/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296e72f11c4120c7b38a0cc580ef8990e7a1c36d/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=296e72f11c4120c7b38a0cc580ef8990e7a1c36d", "patch": "@@ -618,7 +618,7 @@ impl<T: Clone> Rc<T> {\n     }\n }\n \n-impl Rc<Any> {\n+impl Rc<dyn Any> {\n     #[inline]\n     #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n     /// Attempt to downcast the `Rc<Any>` to a concrete type.\n@@ -641,7 +641,7 @@ impl Rc<Any> {\n     ///     print_if_string(Rc::new(0i8));\n     /// }\n     /// ```\n-    pub fn downcast<T: Any>(self) -> Result<Rc<T>, Rc<Any>> {\n+    pub fn downcast<T: Any>(self) -> Result<Rc<T>, Rc<dyn Any>> {\n         if (*self).is::<T>() {\n             let ptr = self.ptr.cast::<RcBox<T>>();\n             forget(self);"}, {"sha": "920678bbd7043843daa6fc96f2d98c7a0ae58e5b", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/296e72f11c4120c7b38a0cc580ef8990e7a1c36d/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/296e72f11c4120c7b38a0cc580ef8990e7a1c36d/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=296e72f11c4120c7b38a0cc580ef8990e7a1c36d", "patch": "@@ -978,7 +978,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Arc<T> {\n     }\n }\n \n-impl Arc<Any + Send + Sync> {\n+impl Arc<dyn Any + Send + Sync> {\n     #[inline]\n     #[stable(feature = \"rc_downcast\", since = \"1.29.0\")]\n     /// Attempt to downcast the `Arc<Any + Send + Sync>` to a concrete type."}]}