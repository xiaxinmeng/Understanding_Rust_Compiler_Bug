{"sha": "0dbc091fee10cf8aae68d971713b32c07d1a96f0", "node_id": "C_kwDOAAsO6NoAKDBkYmMwOTFmZWUxMGNmOGFhZTY4ZDk3MTcxM2IzMmMwN2QxYTk2ZjA", "commit": {"author": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-06-25T09:33:27Z"}, "committer": {"name": "bitgaoshu", "email": "bitgaoshu@gmail.com", "date": "2022-06-25T09:33:27Z"}, "message": "add test for suggest_name", "tree": {"sha": "3ce5605ad0a0799a2f1f1b8fe2c5cdaa723ebd0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ce5605ad0a0799a2f1f1b8fe2c5cdaa723ebd0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dbc091fee10cf8aae68d971713b32c07d1a96f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dbc091fee10cf8aae68d971713b32c07d1a96f0", "html_url": "https://github.com/rust-lang/rust/commit/0dbc091fee10cf8aae68d971713b32c07d1a96f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dbc091fee10cf8aae68d971713b32c07d1a96f0/comments", "author": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bitgaoshu", "id": 7943146, "node_id": "MDQ6VXNlcjc5NDMxNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/7943146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bitgaoshu", "html_url": "https://github.com/bitgaoshu", "followers_url": "https://api.github.com/users/bitgaoshu/followers", "following_url": "https://api.github.com/users/bitgaoshu/following{/other_user}", "gists_url": "https://api.github.com/users/bitgaoshu/gists{/gist_id}", "starred_url": "https://api.github.com/users/bitgaoshu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bitgaoshu/subscriptions", "organizations_url": "https://api.github.com/users/bitgaoshu/orgs", "repos_url": "https://api.github.com/users/bitgaoshu/repos", "events_url": "https://api.github.com/users/bitgaoshu/events{/privacy}", "received_events_url": "https://api.github.com/users/bitgaoshu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82c1b313bcfaa5d0e4e7126feda0e9b9b9746560", "url": "https://api.github.com/repos/rust-lang/rust/commits/82c1b313bcfaa5d0e4e7126feda0e9b9b9746560", "html_url": "https://github.com/rust-lang/rust/commit/82c1b313bcfaa5d0e4e7126feda0e9b9b9746560"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "744f3865aaa4c277ee18915d5d260f6b2ea7d075", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0dbc091fee10cf8aae68d971713b32c07d1a96f0/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbc091fee10cf8aae68d971713b32c07d1a96f0/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=0dbc091fee10cf8aae68d971713b32c07d1a96f0", "patch": "@@ -16,7 +16,6 @@ use hir_expand::{\n     name::{known, AsName},\n     ExpansionInfo, MacroCallId,\n };\n-use hir_ty::Interner;\n use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n use smallvec::{smallvec, SmallVec};\n@@ -975,18 +974,11 @@ impl<'db> SemanticsImpl<'db> {\n     }\n \n     fn resolve_method_call(&self, call: &ast::MethodCallExpr) -> Option<FunctionId> {\n-        self.analyze(call.syntax())?.resolve_method_call(self.db, call).map(|(id, _)| id)\n+        self.analyze(call.syntax())?.resolve_method_call(self.db, call)\n     }\n \n     fn resolve_method_call_as_callable(&self, call: &ast::MethodCallExpr) -> Option<Callable> {\n-        let source_analyzer = self.analyze(call.syntax())?;\n-        let (func, subst) = source_analyzer.resolve_method_call(self.db, call)?;\n-        let ty = self.db.value_ty(func.into()).substitute(Interner, &subst);\n-        let resolver = source_analyzer.resolver;\n-        let ty = Type::new_with_resolver(self.db, &resolver, ty);\n-        let mut res = ty.as_callable(self.db)?;\n-        res.is_bound_method = true;\n-        Some(res)\n+        self.analyze(call.syntax())?.resolve_method_call_as_callable(self.db, call)\n     }\n \n     fn resolve_field(&self, field: &ast::FieldExpr) -> Option<Field> {"}, {"sha": "7e584aa2b48038f0dba23aa7090f51b2dd043bcf", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0dbc091fee10cf8aae68d971713b32c07d1a96f0/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbc091fee10cf8aae68d971713b32c07d1a96f0/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=0dbc091fee10cf8aae68d971713b32c07d1a96f0", "patch": "@@ -43,8 +43,8 @@ use syntax::{\n \n use crate::{\n     db::HirDatabase, semantics::PathResolution, Adt, AssocItem, BindingMode, BuiltinAttr,\n-    BuiltinType, Const, Field, Function, Local, Macro, ModuleDef, Static, Struct, ToolModule,\n-    Trait, Type, TypeAlias, Variant,\n+    BuiltinType, Callable, Const, Field, Function, Local, Macro, ModuleDef, Static, Struct,\n+    ToolModule, Trait, Type, TypeAlias, Variant,\n };\n \n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n@@ -239,15 +239,29 @@ impl SourceAnalyzer {\n         )\n     }\n \n+    pub(crate) fn resolve_method_call_as_callable(\n+        &self,\n+        db: &dyn HirDatabase,\n+        call: &ast::MethodCallExpr,\n+    ) -> Option<Callable> {\n+        let expr_id = self.expr_id(db, &call.clone().into())?;\n+        let (func, substs) = self.infer.as_ref()?.method_resolution(expr_id)?;\n+        let ty = db.value_ty(func.into()).substitute(Interner, &substs);\n+        let ty = Type::new_with_resolver(db, &self.resolver, ty);\n+        let mut res = ty.as_callable(db)?;\n+        res.is_bound_method = true;\n+        Some(res)\n+    }\n+\n     pub(crate) fn resolve_method_call(\n         &self,\n         db: &dyn HirDatabase,\n         call: &ast::MethodCallExpr,\n-    ) -> Option<(FunctionId, Substitution)> {\n+    ) -> Option<FunctionId> {\n         let expr_id = self.expr_id(db, &call.clone().into())?;\n         let (f_in_trait, substs) = self.infer.as_ref()?.method_resolution(expr_id)?;\n         let f_in_impl = self.resolve_impl_method(db, f_in_trait, &substs);\n-        Some((f_in_impl.unwrap_or(f_in_trait), substs))\n+        f_in_impl.or(Some(f_in_trait))\n     }\n \n     pub(crate) fn resolve_field("}, {"sha": "b05a41fa4b859a3664175d43f2bfd226b0ebd9b0", "filename": "crates/ide-assists/src/utils/suggest_name.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0dbc091fee10cf8aae68d971713b32c07d1a96f0/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dbc091fee10cf8aae68d971713b32c07d1a96f0/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=0dbc091fee10cf8aae68d971713b32c07d1a96f0", "patch": "@@ -450,6 +450,21 @@ fn foo() { S.bar($01$0, 2) }\n         );\n     }\n \n+    #[test]\n+    fn method_on_impl_trait() {\n+        check(\n+            r#\"\n+struct S;\n+trait T {\n+    fn bar(&self, n: i32, m: u32);\n+}\n+impl T for S { fn bar(&self, n: i32, m: u32); }\n+fn foo() { S.bar($01$0, 2) }\n+\"#,\n+            \"n\",\n+        );\n+    }\n+\n     #[test]\n     fn method_ufcs() {\n         check("}]}