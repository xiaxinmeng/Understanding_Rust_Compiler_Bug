{"sha": "06257d66e7654660e98bab1a63dea9f0c5bd0ec1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MjU3ZDY2ZTc2NTQ2NjBlOThiYWIxYTYzZGVhOWYwYzViZDBlYzE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-14T09:25:14Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-10-14T09:25:14Z"}, "message": "Don't crash when reporting an unresolved import in the nil scope\n\nCloses #1027", "tree": {"sha": "8d6186c1598e006900d589515528baf77b96e7c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d6186c1598e006900d589515528baf77b96e7c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06257d66e7654660e98bab1a63dea9f0c5bd0ec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06257d66e7654660e98bab1a63dea9f0c5bd0ec1", "html_url": "https://github.com/rust-lang/rust/commit/06257d66e7654660e98bab1a63dea9f0c5bd0ec1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06257d66e7654660e98bab1a63dea9f0c5bd0ec1/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3808a498cd93e047e66f6cfe9b55b1fd8f8f1040", "url": "https://api.github.com/repos/rust-lang/rust/commits/3808a498cd93e047e66f6cfe9b55b1fd8f8f1040", "html_url": "https://github.com/rust-lang/rust/commit/3808a498cd93e047e66f6cfe9b55b1fd8f8f1040"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "750a29da9f112775c64bbc1264fd981d2b6df1f7", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/06257d66e7654660e98bab1a63dea9f0c5bd0ec1/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06257d66e7654660e98bab1a63dea9f0c5bd0ec1/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=06257d66e7654660e98bab1a63dea9f0c5bd0ec1", "patch": "@@ -454,14 +454,14 @@ fn resolve_import(e: env, defid: ast::def_id, name: ast::ident,\n                  lookup_in_scope(e, sc, sp, end_id, ns_type),\n                  lookup_in_scope(e, sc, sp, end_id, ns_module));\n         remove_if_unresolved(e.imports, defid.node);\n-    } else { // FIXME (issue #521)\n+    } else {\n         let dcur =\n             alt lookup_in_scope(e, sc, sp, ids[0], ns_module) {\n               some(dcur) { dcur }\n               none. {\n                 unresolved_err(e, sc, sp, ids[0], ns_name(ns_module));\n                 remove_if_unresolved(e.imports, defid.node);\n-                ret ()\n+                ret;\n               }\n             };\n         let i = 1u;\n@@ -476,16 +476,15 @@ fn resolve_import(e: env, defid: ast::def_id, name: ast::ident,\n                 remove_if_unresolved(e.imports, defid.node);\n                 break;\n             } else {\n-                dcur =\n-                    alt lookup_in_mod(e, dcur, sp, ids[i], ns_module, outside)\n-                        {\n-                      some(dcur) { dcur }\n-                      none. {\n-                        unresolved_err(e, sc, sp, ids[i], ns_name(ns_module));\n-                        remove_if_unresolved(e.imports, defid.node);\n-                        ret () // FIXME (issue #521)\n-                      }\n-                    };\n+                dcur = alt lookup_in_mod(e, dcur, sp, ids[i], ns_module,\n+                                         outside) {\n+                  some(dcur) { dcur }\n+                  none. {\n+                    unresolved_err(e, sc, sp, ids[i], ns_name(ns_module));\n+                    remove_if_unresolved(e.imports, defid.node);\n+                    ret;\n+                  }\n+                };\n                 i += 1u;\n             }\n         }\n@@ -523,27 +522,32 @@ fn ns_name(ns: namespace) -> str {\n }\n \n fn unresolved_err(e: env, sc: scopes, sp: span, name: ident, kind: str) {\n-    fn find_fn_or_mod_scope(sc: scopes) -> scope {\n+    fn find_fn_or_mod_scope(sc: scopes) -> option::t<scope> {\n         while true {\n             alt sc {\n               cons(cur, rest) {\n                 alt cur {\n                   scope_crate. | scope_fn(_, _, _) |\n                   scope_item(@{node: ast::item_mod(_), _}) {\n-                    ret cur;\n+                    ret some(cur);\n                   }\n                   _ { sc = *rest; }\n                 }\n               }\n+              _ { ret none; }\n             }\n         }\n         fail;\n     }\n-    let err_scope = find_fn_or_mod_scope(sc);\n-    for rs: {ident: str, sc: scope} in e.reported {\n-        if str::eq(rs.ident, name) && err_scope == rs.sc { ret; }\n+    alt find_fn_or_mod_scope(sc) {\n+      some(err_scope) {\n+        for rs: {ident: str, sc: scope} in e.reported {\n+            if str::eq(rs.ident, name) && err_scope == rs.sc { ret; }\n+        }\n+        e.reported += [{ident: name, sc: err_scope}];\n+      }\n+      _ {}\n     }\n-    e.reported += [{ident: name, sc: err_scope}];\n     e.sess.span_err(sp, mk_unresolved_msg(name, kind));\n }\n "}]}