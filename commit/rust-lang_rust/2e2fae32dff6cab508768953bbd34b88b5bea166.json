{"sha": "2e2fae32dff6cab508768953bbd34b88b5bea166", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMmZhZTMyZGZmNmNhYjUwODc2ODk1M2JiZDM0Yjg4YjViZWExNjY=", "commit": {"author": {"name": "Omer Ben-Amram", "email": "omerbenamram@gmail.com", "date": "2019-12-15T15:46:00Z"}, "committer": {"name": "Omer Ben-Amram", "email": "omerbenamram@gmail.com", "date": "2019-12-15T15:46:00Z"}, "message": "improved path checking to consider only paths that may contain a windows drive.", "tree": {"sha": "3594ee04a835262d5413b38ecaf9b89a558d35d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3594ee04a835262d5413b38ecaf9b89a558d35d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2fae32dff6cab508768953bbd34b88b5bea166", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2fae32dff6cab508768953bbd34b88b5bea166", "html_url": "https://github.com/rust-lang/rust/commit/2e2fae32dff6cab508768953bbd34b88b5bea166", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2fae32dff6cab508768953bbd34b88b5bea166/comments", "author": {"login": "omerbenamram", "id": 2467993, "node_id": "MDQ6VXNlcjI0Njc5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2467993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omerbenamram", "html_url": "https://github.com/omerbenamram", "followers_url": "https://api.github.com/users/omerbenamram/followers", "following_url": "https://api.github.com/users/omerbenamram/following{/other_user}", "gists_url": "https://api.github.com/users/omerbenamram/gists{/gist_id}", "starred_url": "https://api.github.com/users/omerbenamram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omerbenamram/subscriptions", "organizations_url": "https://api.github.com/users/omerbenamram/orgs", "repos_url": "https://api.github.com/users/omerbenamram/repos", "events_url": "https://api.github.com/users/omerbenamram/events{/privacy}", "received_events_url": "https://api.github.com/users/omerbenamram/received_events", "type": "User", "site_admin": false}, "committer": {"login": "omerbenamram", "id": 2467993, "node_id": "MDQ6VXNlcjI0Njc5OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2467993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/omerbenamram", "html_url": "https://github.com/omerbenamram", "followers_url": "https://api.github.com/users/omerbenamram/followers", "following_url": "https://api.github.com/users/omerbenamram/following{/other_user}", "gists_url": "https://api.github.com/users/omerbenamram/gists{/gist_id}", "starred_url": "https://api.github.com/users/omerbenamram/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/omerbenamram/subscriptions", "organizations_url": "https://api.github.com/users/omerbenamram/orgs", "repos_url": "https://api.github.com/users/omerbenamram/repos", "events_url": "https://api.github.com/users/omerbenamram/events{/privacy}", "received_events_url": "https://api.github.com/users/omerbenamram/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75353753cdcb993c277ce1d8bb366c708eabe2c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/75353753cdcb993c277ce1d8bb366c708eabe2c6", "html_url": "https://github.com/rust-lang/rust/commit/75353753cdcb993c277ce1d8bb366c708eabe2c6"}], "stats": {"total": 64, "additions": 44, "deletions": 20}, "files": [{"sha": "63a82001231d62df11b1d3157a07e34286bfcc44", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2e2fae32dff6cab508768953bbd34b88b5bea166/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2fae32dff6cab508768953bbd34b88b5bea166/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=2e2fae32dff6cab508768953bbd34b88b5bea166", "patch": "@@ -17,11 +17,13 @@ use ra_project_model::{get_rustc_cfg_options, ProjectWorkspace};\n use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot, VfsTask, Watch};\n use ra_vfs_glob::{Glob, RustPackageFilterBuilder};\n use relative_path::RelativePathBuf;\n+use std::path::{Component, Prefix};\n \n use crate::{\n     main_loop::pending_requests::{CompletedRequest, LatestRequests},\n     LspError, Result,\n };\n+use std::str::FromStr;\n \n #[derive(Debug, Clone)]\n pub struct Options {\n@@ -233,11 +235,8 @@ impl WorldSnapshot {\n \n     pub fn file_id_to_uri(&self, id: FileId) -> Result<Url> {\n         let path = self.vfs.read().file2path(VfsFile(id.0));\n-        let url = Url::from_file_path(&path)\n-            .map_err(|_| format!(\"can't convert path to url: {}\", path.display()))?;\n+        let url = url_from_path_with_drive_lowercasing(path)?;\n \n-        #[cfg(target_os = \"windows\")]\n-        let url = lowercase_drive_letter(&url);\n         Ok(url)\n     }\n \n@@ -283,34 +282,59 @@ impl WorldSnapshot {\n     }\n }\n \n-#[cfg(target_os = \"windows\")]\n-fn lowercase_drive_letter(url: &Url) -> Url {\n-    use std::str::FromStr;\n+/// Returns a `Url` object from a given path, will lowercase drive letters if present.\n+/// This will only happen when processing windows paths.\n+///\n+/// When processing non-windows path, this is essentially the same as `Url::from_file_path`.\n+fn url_from_path_with_drive_lowercasing(path: impl AsRef<Path>) -> Result<Url> {\n+    let component_has_windows_drive = path\n+        .as_ref()\n+        .components()\n+        .find(|comp| {\n+            if let Component::Prefix(c) = comp {\n+                match c.kind() {\n+                    Prefix::Disk(_) | Prefix::VerbatimDisk(_) => return true,\n+                    _ => return false,\n+                }\n+            }\n+            false\n+        })\n+        .is_some();\n+\n+    // VSCode expects drive letters to be lowercased, where rust will uppercase the drive letters.\n+    if component_has_windows_drive {\n+        let url_original = Url::from_file_path(&path)\n+            .map_err(|_| format!(\"can't convert path to url: {}\", path.as_ref().display()))?;\n+\n+        let drive_partition: Vec<&str> =\n+            url_original.as_str().rsplitn(2, ':').collect::<Vec<&str>>();\n+\n+        // There is a drive partition, but we never found a colon.\n+        // This should not happen, but in this case we just pass it through.\n+        if drive_partition.len() == 1 {\n+            return Ok(url_original);\n+        }\n \n-    let s = url.to_string();\n-    let drive_partition: Vec<&str> = s.rsplitn(2, ':').collect::<Vec<&str>>();\n+        let joined = drive_partition[1].to_ascii_lowercase() + \":\" + drive_partition[0];\n+        let url = Url::from_str(&joined).expect(\"This came from a valid `Url`\");\n \n-    if drive_partition.len() == 1 {\n-        return url.clone();\n+        Ok(url)\n+    } else {\n+        Ok(Url::from_file_path(&path)\n+            .map_err(|_| format!(\"can't convert path to url: {}\", path.as_ref().display()))?)\n     }\n-\n-    let joined = drive_partition[1].to_ascii_lowercase() + \":\" + drive_partition[0];\n-    let url = Url::from_str(&joined).expect(\"This came from a valid `Url`\");\n-    url\n }\n \n #[test]\n fn test_lowercase_drive_letter_with_drive() {\n-    let url = Url::from_file_path(\"C:\\\\Test\").unwrap();\n-    let url = lowercase_drive_letter(&url);\n+    let url = url_from_path_with_drive_lowercasing(\"C:\\\\Test\").unwrap();\n \n     assert_eq!(url.to_string(), \"file:///c:/Test\");\n }\n \n #[test]\n fn test_drive_without_colon_passthrough() {\n-    let url = Url::from_file_path(r#\"\\\\localhost\\C$\\my_dir\"#).expect(\"Should work\");\n-    let url = lowercase_drive_letter(&url);\n+    let url = url_from_path_with_drive_lowercasing(r#\"\\\\localhost\\C$\\my_dir\"#).unwrap();\n \n-    assert_eq!(url.to_string(), \"file:///C$/my_dir\");\n+    assert_eq!(url.to_string(), \"file://localhost/C$/my_dir\");\n }"}]}