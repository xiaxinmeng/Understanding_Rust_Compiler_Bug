{"sha": "5be27b7a70926c8ae4ae2a35f9984f6e04042849", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZTI3YjdhNzA5MjZjOGFlNGFlMmEzNWY5OTg0ZjZlMDQwNDI4NDk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-01-01T13:47:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-01-22T09:21:49Z"}, "message": "avoid promoting division, modulo and indexing operations that could fail", "tree": {"sha": "4e99a3345ff7b69ed85ba85bbd6d8cbc35127e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e99a3345ff7b69ed85ba85bbd6d8cbc35127e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5be27b7a70926c8ae4ae2a35f9984f6e04042849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5be27b7a70926c8ae4ae2a35f9984f6e04042849", "html_url": "https://github.com/rust-lang/rust/commit/5be27b7a70926c8ae4ae2a35f9984f6e04042849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5be27b7a70926c8ae4ae2a35f9984f6e04042849/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1eee2f256efbd1d3b50b6b090232f81cac6d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1eee2f256efbd1d3b50b6b090232f81cac6d72", "html_url": "https://github.com/rust-lang/rust/commit/dc1eee2f256efbd1d3b50b6b090232f81cac6d72"}], "stats": {"total": 608, "additions": 317, "deletions": 291}, "files": [{"sha": "ce3e03e3c6dd5ee2e5a21afff881101f5161666e", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -505,6 +505,10 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     ProjectionElem::ConstantIndex { .. } | ProjectionElem::Subslice { .. } => {}\n \n                     ProjectionElem::Index(local) => {\n+                        // This could be OOB, so reject for implicit promotion.\n+                        if !self.explicit {\n+                            return Err(Unpromotable);\n+                        }\n                         self.validate_local(local)?;\n                     }\n \n@@ -589,9 +593,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n     fn validate_rvalue(&self, rvalue: &Rvalue<'tcx>) -> Result<(), Unpromotable> {\n         match rvalue {\n-            Rvalue::Use(operand)\n-            | Rvalue::Repeat(operand, _)\n-            | Rvalue::UnaryOp(UnOp::Not | UnOp::Neg, operand) => {\n+            Rvalue::Use(operand) | Rvalue::Repeat(operand, _) => {\n                 self.validate_operand(operand)?;\n             }\n \n@@ -616,10 +618,26 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 self.validate_operand(operand)?;\n             }\n \n+            Rvalue::NullaryOp(op, _) => match op {\n+                NullOp::Box => return Err(Unpromotable),\n+                NullOp::SizeOf => {}\n+            },\n+\n+            Rvalue::UnaryOp(op, operand) => {\n+                match op {\n+                    // These operations can never fail.\n+                    UnOp::Neg | UnOp::Not => {}\n+                }\n+\n+                self.validate_operand(operand)?;\n+            }\n+\n             Rvalue::BinaryOp(op, lhs, rhs) | Rvalue::CheckedBinaryOp(op, lhs, rhs) => {\n                 let op = *op;\n-                if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.body, self.tcx).kind() {\n-                    // raw pointer operations are not allowed inside consts and thus not promotable\n+                let lhs_ty = lhs.ty(self.body, self.tcx);\n+\n+                if let ty::RawPtr(_) | ty::FnPtr(..) = lhs_ty.kind() {\n+                    // Raw and fn pointer operations are not allowed inside consts and thus not promotable.\n                     assert!(matches!(\n                         op,\n                         BinOp::Eq\n@@ -634,7 +652,22 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 }\n \n                 match op {\n-                    // FIXME: reject operations that can fail -- namely, division and modulo.\n+                    BinOp::Div | BinOp::Rem => {\n+                        if !self.explicit && lhs_ty.is_integral() {\n+                            // Integer division: the RHS must be a non-zero const.\n+                            let const_val = match rhs {\n+                                Operand::Constant(c) => {\n+                                    c.literal.try_eval_bits(self.tcx, self.param_env, lhs_ty)\n+                                }\n+                                _ => None,\n+                            };\n+                            match const_val {\n+                                Some(x) if x != 0 => {}        // okay\n+                                _ => return Err(Unpromotable), // value not known or 0 -- not okay\n+                            }\n+                        }\n+                    }\n+                    // The remaining operations can never fail.\n                     BinOp::Eq\n                     | BinOp::Ne\n                     | BinOp::Le\n@@ -645,8 +678,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     | BinOp::Add\n                     | BinOp::Sub\n                     | BinOp::Mul\n-                    | BinOp::Div\n-                    | BinOp::Rem\n                     | BinOp::BitXor\n                     | BinOp::BitAnd\n                     | BinOp::BitOr\n@@ -658,11 +689,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 self.validate_operand(rhs)?;\n             }\n \n-            Rvalue::NullaryOp(op, _) => match op {\n-                NullOp::Box => return Err(Unpromotable),\n-                NullOp::SizeOf => {}\n-            },\n-\n             Rvalue::AddressOf(_, place) => {\n                 // We accept `&raw *`, i.e., raw reborrows -- creating a raw pointer is\n                 // no problem, only using it is."}, {"sha": "9fe3234f6ae4a5874ecc69befbe5620121807bb2", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.32bit.mir?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -24,41 +24,41 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 4) {\n-    \u257e\u2500alloc27\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    \u257e\u2500alloc31\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n-alloc27 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc12\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc17\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc25\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+alloc31 (size: 48, align: 4) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc8\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc14\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc29\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n-alloc12 (size: 0, align: 4) {}\n+alloc8 (size: 0, align: 4) {}\n \n-alloc17 (size: 8, align: 4) {\n-    \u257e\u2500alloc15\u2500\u257c \u257e\u2500alloc16\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc14 (size: 8, align: 4) {\n+    \u257e\u2500alloc12\u2500\u257c \u257e\u2500alloc13\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n-alloc15 (size: 1, align: 1) {\n+alloc12 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc16 (size: 1, align: 1) {\n+alloc13 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc25 (size: 12, align: 4) {\n-    \u257e\u2500a21+0x3\u2500\u257c \u257e\u2500alloc22\u2500\u257c \u257e\u2500a24+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+alloc29 (size: 12, align: 4) {\n+    \u257e\u2500a21+0x3\u2500\u257c \u257e\u2500alloc23\u2500\u257c \u257e\u2500a28+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n alloc21 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc22 (size: 1, align: 1) {\n+alloc23 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc24 (size: 4, align: 1) {\n+alloc28 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "3039f8ffab7e39d6a06d33330d335ab11ab52d2b", "filename": "src/test/mir-opt/const_allocation2.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2.main.ConstProp.after.64bit.mir?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -24,44 +24,44 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc27\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc31\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n-alloc27 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc31 (size: 72, align: 8) {\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc17\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc25\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc29\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc12 (size: 0, align: 8) {}\n+alloc8 (size: 0, align: 8) {}\n \n-alloc17 (size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc14 (size: 16, align: 8) {\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc15 (size: 1, align: 1) {\n+alloc12 (size: 1, align: 1) {\n     05                                              \u2502 .\n }\n \n-alloc16 (size: 1, align: 1) {\n+alloc13 (size: 1, align: 1) {\n     06                                              \u2502 .\n }\n \n-alloc25 (size: 24, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc21+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc22\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc24+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+alloc29 (size: 24, align: 8) {\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc21+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc23\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc28+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n alloc21 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }\n \n-alloc22 (size: 1, align: 1) {\n+alloc23 (size: 1, align: 1) {\n     2a                                              \u2502 *\n }\n \n-alloc24 (size: 4, align: 1) {\n+alloc28 (size: 4, align: 1) {\n     2a 45 15 6f                                     \u2502 *E.o\n }"}, {"sha": "cf7d82ef15e6a6ffe851eebc03a0f54fbc658805", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.32bit.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.32bit.mir?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -24,30 +24,30 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 4, align: 4) {\n-    \u257e\u2500alloc10\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+    \u257e\u2500alloc11\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n }\n \n-alloc10 (size: 168, align: 1) {\n+alloc11 (size: 168, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc5\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc4\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n     0x20 \u2502 01 ef cd ab 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n-    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500alloc7\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n-    0x90 \u2502 \u257e\u2500a8+0x63\u2500\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n+    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500alloc6\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n+    0x90 \u2502 \u257e\u2500a9+0x63\u2500\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n     0xa0 \u2502 00 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n-alloc5 (size: 4, align: 4) {\n+alloc4 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc7 (fn: main)\n+alloc6 (fn: main)\n \n-alloc8 (size: 100, align: 1) {\n+alloc9 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "f2227c40fcb0b3fbcf17c401093ea6220c1e11f2", "filename": "src/test/mir-opt/const_allocation3.main.ConstProp.after.64bit.mir", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3.main.ConstProp.after.64bit.mir?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -24,31 +24,31 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc10\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc11\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n-alloc10 (size: 180, align: 1) {\n+alloc11 (size: 180, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500\u2500alloc5\u2500\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500\u2500alloc4\u2500\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n     0x20 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 01 ef cd ab 00 00 00 00 00 00 00 00 \u2502 \u2500\u2500\u2500\u257c............\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x80 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u257e\u2500\u2500\u2500\u2500 \u2502 ..............\u257e\u2500\n-    0x90 \u2502 \u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc8+0x63\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x90 \u2502 \u2500\u2500\u2500\u2500\u2500alloc6\u2500\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc9+0x63\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0xa0 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0xb0 \u2502 00 00 00 00                                     \u2502 ....\n }\n \n-alloc5 (size: 4, align: 4) {\n+alloc4 (size: 4, align: 4) {\n     2a 00 00 00                                     \u2502 *...\n }\n \n-alloc7 (fn: main)\n+alloc6 (fn: main)\n \n-alloc8 (size: 100, align: 1) {\n+alloc9 (size: 100, align: 1) {\n     0x00 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x20 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................"}, {"sha": "9b3f735b1f849a43a9bd1226357a4c7ccd1ab9ba", "filename": "src/test/ui/consts/array-literal-index-oob.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.rs?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -6,6 +6,4 @@\n fn main() {\n     &{ [1, 2, 3][4] };\n     //~^ WARN operation will panic\n-    //~| WARN reaching this expression at runtime will panic or abort\n-    //~| WARN erroneous constant used [const_err]\n }"}, {"sha": "f96b8d48b3e7c469c5aac26a17b3b3cdb766dfd0", "filename": "src/test/ui/consts/array-literal-index-oob.stderr", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Farray-literal-index-oob.stderr?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -10,25 +10,5 @@ note: the lint level is defined here\n LL | #![warn(const_err, unconditional_panic)]\n    |                    ^^^^^^^^^^^^^^^^^^^\n \n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/array-literal-index-oob.rs:7:8\n-   |\n-LL |     &{ [1, 2, 3][4] };\n-   |     ---^^^^^^^^^^^^--\n-   |        |\n-   |        indexing out of bounds: the len is 3 but the index is 4\n-   |\n-note: the lint level is defined here\n-  --> $DIR/array-literal-index-oob.rs:4:9\n-   |\n-LL | #![warn(const_err, unconditional_panic)]\n-   |         ^^^^^^^^^\n-\n-warning: erroneous constant used\n-  --> $DIR/array-literal-index-oob.rs:7:5\n-   |\n-LL |     &{ [1, 2, 3][4] };\n-   |     ^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: 3 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "39803c8f257e0da3e123380d9d488cf594b7f3a3", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.rs?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -1,4 +1,5 @@\n-// compile-flags: -Ztreat-err-as-bug\n+//~ERROR constructed but no error reported\n+// compile-flags: -Ztreat-err-as-bug=2\n // build-fail\n // failure-status: 101\n // rustc-env:RUST_BACKTRACE=1\n@@ -15,8 +16,11 @@\n \n #![allow(unconditional_panic)]\n \n+#[warn(const_err)]\n+const X: i32 = 1 / 0; //~WARN any use of this value will cause an error\n+\n fn main() {\n-    let x: &'static i32 = &(1 / 0);\n-    //~^ ERROR reaching this expression at runtime will panic or abort [const_err]\n+    let x: &'static i32 = &X;\n+    //~^ ERROR evaluation of constant expression failed\n     println!(\"x={}\", x);\n }"}, {"sha": "0016d301e598c3af2c9b3af73aef81195e82d0c2", "filename": "src/test/ui/consts/const-eval/const-eval-query-stack.stderr", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-query-stack.stderr?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -1,18 +1,26 @@\n-error: reaching this expression at runtime will panic or abort\n-  --> $DIR/const-eval-query-stack.rs:19:28\n+warning: any use of this value will cause an error\n+  --> $DIR/const-eval-query-stack.rs:20:16\n    |\n-LL |     let x: &'static i32 = &(1 / 0);\n-   |                           -^^^^^^^\n-   |                            |\n-   |                            dividing by zero\n+LL | const X: i32 = 1 / 0;\n+   | ---------------^^^^^-\n+   |                |\n+   |                attempt to divide `1_i32` by zero\n+   |\n+note: the lint level is defined here\n+  --> $DIR/const-eval-query-stack.rs:19:8\n    |\n-   = note: `#[deny(const_err)]` on by default\n+LL | #[warn(const_err)]\n+   |        ^^^^^^^^^\n \n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/const-eval-query-stack.rs:23:27\n+   |\n+LL |     let x: &'static i32 = &X;\n+   |                           ^-\n+   |                            |\n+   |                            referenced constant has errors\n query stack during panic:\n-#0 [eval_to_allocation_raw] const-evaluating + checking `main::promoted[1]`\n-#1 [eval_to_const_value_raw] simplifying constant for the type system `main::promoted[1]`\n-#2 [eval_to_const_value_raw] simplifying constant for the type system `main::promoted[1]`\n-#3 [normalize_generic_arg_after_erasing_regions] normalizing `main::promoted[1]`\n-#4 [optimized_mir] optimizing MIR for `main`\n-#5 [collect_and_partition_mono_items] collect_and_partition_mono_items\n+#0 [normalize_generic_arg_after_erasing_regions] normalizing `main::promoted[1]`\n+#1 [optimized_mir] optimizing MIR for `main`\n+#2 [collect_and_partition_mono_items] collect_and_partition_mono_items\n end of query stack"}, {"sha": "b71235e51c0a06a6931beca09025ecbb1179dc16", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 33, "deletions": 61, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -1,80 +1,52 @@\n warning: this arithmetic operation will overflow\n-  --> $DIR/promoted_errors.rs:12:20\n+  --> $DIR/promoted_errors.rs:13:5\n    |\n-LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n+LL |     0 - 1\n+   |     ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:20\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |                    ^^^^^^^^^^^^^^^^^^^\n \n-warning: this arithmetic operation will overflow\n-  --> $DIR/promoted_errors.rs:14:14\n-   |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:41\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                                         ^^^^^^^^^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ dividing by zero\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:13:5\n+   |\n+LL |       0 - 1\n+   |       ^^^^^\n+   |       |\n+   |       attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |       inside `overflow` at $DIR/promoted_errors.rs:13:5\n+   |       inside `X` at $DIR/promoted_errors.rs:31:29\n+...\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n \n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ referenced constant has errors\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:20:14\n-   |\n-LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:26:14\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:31:28\n    |\n-LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+   | |                            ^^^^^^^^^^^ referenced constant has errors\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n \n-warning: 10 warnings emitted\n+warning: 3 warnings emitted\n "}, {"sha": "e5108f67e16c224d6e0ecfd99a5e39d769f9c2b3", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -1,8 +1,8 @@\n warning: this arithmetic operation will overflow\n-  --> $DIR/promoted_errors.rs:14:14\n+  --> $DIR/promoted_errors.rs:13:5\n    |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n+LL |     0 - 1\n+   |     ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:20\n@@ -11,64 +11,54 @@ LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |                    ^^^^^^^^^^^^^^^^^^^\n \n warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:16:20\n+  --> $DIR/promoted_errors.rs:17:5\n    |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n+LL |     1 / 0\n+   |     ^^^^^ attempt to divide `1_i32` by zero\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:41\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |                                         ^^^^^^^^^^^^^^^^^^^\n \n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:16:20\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:17:5\n    |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ dividing by zero\n+LL |       1 / 0\n+   |       ^^^^^\n+   |       |\n+   |       attempt to divide `1_i32` by zero\n+   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:17:5\n+   |       inside `X` at $DIR/promoted_errors.rs:33:29\n+...\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n \n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:16:20\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:33:28\n    |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ referenced constant has errors\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+   | |                            ^^^^^^^^^^^^^^^ referenced constant has errors\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n \n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:20:14\n-   |\n-LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:26:14\n-   |\n-LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n-\n-warning: 9 warnings emitted\n+warning: 4 warnings emitted\n "}, {"sha": "b71235e51c0a06a6931beca09025ecbb1179dc16", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 33, "deletions": 61, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -1,80 +1,52 @@\n warning: this arithmetic operation will overflow\n-  --> $DIR/promoted_errors.rs:12:20\n+  --> $DIR/promoted_errors.rs:13:5\n    |\n-LL |     println!(\"{}\", 0u32 - 1);\n-   |                    ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n+LL |     0 - 1\n+   |     ^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:20\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |                    ^^^^^^^^^^^^^^^^^^^\n \n-warning: this arithmetic operation will overflow\n-  --> $DIR/promoted_errors.rs:14:14\n-   |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to compute `0_u32 - 1_u32`, which would overflow\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n-   |\n-note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:41\n-   |\n-LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n-   |                                         ^^^^^^^^^^^^^^^^^^^\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ dividing by zero\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:13:5\n+   |\n+LL |       0 - 1\n+   |       ^^^^^\n+   |       |\n+   |       attempt to compute `0_u32 - 1_u32`, which would overflow\n+   |       inside `overflow` at $DIR/promoted_errors.rs:13:5\n+   |       inside `X` at $DIR/promoted_errors.rs:31:29\n+...\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n    |\n note: the lint level is defined here\n   --> $DIR/promoted_errors.rs:9:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n \n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:16:20\n-   |\n-LL |     println!(\"{}\", 1 / (1 - 1));\n-   |                    ^^^^^^^^^^^ referenced constant has errors\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:20:14\n-   |\n-LL |     let _x = 1 / (1 - 1);\n-   |              ^^^^^^^^^^^ attempt to divide `1_i32` by zero\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n-\n-warning: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ dividing by zero\n-\n-warning: erroneous constant used\n-  --> $DIR/promoted_errors.rs:22:20\n-   |\n-LL |     println!(\"{}\", 1 / (false as u32));\n-   |                    ^^^^^^^^^^^^^^^^^^ referenced constant has errors\n-\n-warning: this operation will panic at runtime\n-  --> $DIR/promoted_errors.rs:26:14\n+warning: any use of this value will cause an error\n+  --> $DIR/promoted_errors.rs:31:28\n    |\n-LL |     let _x = 1 / (false as u32);\n-   |              ^^^^^^^^^^^^^^^^^^ attempt to divide `1_u32` by zero\n+LL | / const X: () = {\n+LL | |     let _x: &'static u32 = &overflow();\n+   | |                            ^^^^^^^^^^^ referenced constant has errors\n+LL | |\n+LL | |     let _x: &'static i32 = &div_by_zero1();\n+...  |\n+LL | |     let _x: &'static i32 = &oob();\n+LL | | };\n+   | |__-\n \n-warning: 10 warnings emitted\n+warning: 3 warnings emitted\n "}, {"sha": "1f3b3eef509b1be466f9896a4ec841f3f178ed01", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -8,21 +8,34 @@\n \n #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n \n+// The only way to have promoteds that fail is in `const fn` called from `const`/`static`.\n+const fn overflow() -> u32 {\n+    0 - 1 //~WARN arithmetic_overflow\n+    //[opt_with_overflow_checks,noopt]~^ WARN any use of this value will cause an error\n+}\n+const fn div_by_zero1() -> i32 {\n+    1 / 0 //[opt]~WARN unconditional_panic\n+    //[opt]~^ WARN any use of this value will cause an error\n+}\n+const fn div_by_zero2() -> i32 {\n+    1 / (1-1)\n+}\n+const fn div_by_zero3() -> i32 {\n+    1 / (false as i32)\n+}\n+const fn oob() -> i32 {\n+    [1,2,3][4]\n+}\n+\n+const X: () = {\n+    let _x: &'static u32 = &overflow();\n+    //[opt_with_overflow_checks,noopt]~^ WARN any use of this value will cause an error\n+    let _x: &'static i32 = &div_by_zero1();\n+    //[opt]~^ WARN any use of this value will cause an error\n+    let _x: &'static i32 = &div_by_zero2();\n+    let _x: &'static i32 = &div_by_zero3();\n+    let _x: &'static i32 = &oob();\n+};\n+\n fn main() {\n-    println!(\"{}\", 0u32 - 1);\n-    //[opt_with_overflow_checks,noopt]~^ WARN [arithmetic_overflow]\n-    let _x = 0u32 - 1;\n-    //~^ WARN [arithmetic_overflow]\n-    println!(\"{}\", 1 / (1 - 1));\n-    //~^ WARN [unconditional_panic]\n-    //~| WARN panic or abort [const_err]\n-    //~| WARN erroneous constant used [const_err]\n-    let _x = 1 / (1 - 1);\n-    //~^ WARN [unconditional_panic]\n-    println!(\"{}\", 1 / (false as u32));\n-    //~^ WARN [unconditional_panic]\n-    //~| WARN panic or abort [const_err]\n-    //~| WARN erroneous constant used [const_err]\n-    let _x = 1 / (false as u32);\n-    //~^ WARN [unconditional_panic]\n }"}, {"sha": "0d0c78b0fc260c43f249a5079fbcc33ab8a1b56f", "filename": "src/test/ui/consts/promote-not.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -44,4 +44,11 @@ fn main() {\n     // We must not promote things with interior mutability. Not even if we \"project it away\".\n     let _val: &'static _ = &(Cell::new(1), 2).0; //~ ERROR temporary value dropped while borrowed\n     let _val: &'static _ = &(Cell::new(1), 2).1; //~ ERROR temporary value dropped while borrowed\n+\n+    // No promotion of fallible operations.\n+    let _val: &'static _ = &(1/0); //~ ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &(1/(1-1)); //~ ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &(1%0); //~ ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &(1%(1-1)); //~ ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &([1,2,3][4]+1); //~ ERROR temporary value dropped while borrowed\n }"}, {"sha": "108d0da7a674af554dcdc56b669ba1470d1ebbf5", "filename": "src/test/ui/consts/promote-not.stderr", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -65,7 +65,7 @@ LL |     let _val: &'static _ = &(Cell::new(1), 2).0;\n    |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n-LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n+...\n LL | }\n    | - temporary value is freed at the end of this statement\n \n@@ -76,9 +76,64 @@ LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n    |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:49:29\n+   |\n+LL |     let _val: &'static _ = &(1/0);\n+   |               ----------    ^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:50:29\n+   |\n+LL |     let _val: &'static _ = &(1/(1-1));\n+   |               ----------    ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:51:29\n+   |\n+LL |     let _val: &'static _ = &(1%0);\n+   |               ----------    ^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+...\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:52:29\n+   |\n+LL |     let _val: &'static _ = &(1%(1-1));\n+   |               ----------    ^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+LL |     let _val: &'static _ = &([1,2,3][4]+1);\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:53:29\n+   |\n+LL |     let _val: &'static _ = &([1,2,3][4]+1);\n+   |               ----------    ^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}, {"sha": "b4503f691ffd95fe2ea31d178260fb4f551ced64", "filename": "src/test/ui/consts/promoted_div_by_zero.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc1eee2f256efbd1d3b50b6b090232f81cac6d72/src%2Ftest%2Fui%2Fconsts%2Fpromoted_div_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1eee2f256efbd1d3b50b6b090232f81cac6d72/src%2Ftest%2Fui%2Fconsts%2Fpromoted_div_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_div_by_zero.rs?ref=dc1eee2f256efbd1d3b50b6b090232f81cac6d72", "patch": "@@ -1,9 +0,0 @@\n-#![allow(unconditional_panic, const_err)]\n-\n-// run-fail\n-// error-pattern: attempt to divide by zero\n-// ignore-emscripten no processes\n-\n-fn main() {\n-    let x = &(1 / (1 - 1));\n-}"}, {"sha": "3d952964213358cd051eec2a0ba5af34a8039947", "filename": "src/test/ui/consts/promotion.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fpromotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be27b7a70926c8ae4ae2a35f9984f6e04042849/src%2Ftest%2Fui%2Fconsts%2Fpromotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromotion.rs?ref=5be27b7a70926c8ae4ae2a35f9984f6e04042849", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// run-pass\n \n // compile-flags: -O\n \n@@ -25,4 +25,14 @@ fn main() {\n     // make sure that these do not cause trouble despite overflowing\n     baz_u32(&(0-1));\n     baz_i32(&-i32::MIN);\n+\n+    // div-by-non-0 is okay\n+    baz_i32(&(1/1));\n+    baz_i32(&(1%1));\n+\n+    // Top-level projections do not get promoted, so no error here.\n+    if false {\n+        #[allow(unconditional_panic)]\n+        baz_i32(&[1,2,3][4]);\n+    }\n }"}]}