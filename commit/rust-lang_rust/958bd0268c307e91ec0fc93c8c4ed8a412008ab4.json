{"sha": "958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "node_id": "C_kwDOAAsO6NoAKDk1OGJkMDI2OGMzMDdlOTFlYzBmYzkzYzhjNGVkOGE0MTIwMDhhYjQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-04T01:06:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-04T01:06:41Z"}, "message": "Rollup merge of #94466 - jonhoo:bootstrap-proper-env-flags, r=Mark-Simulacrum\n\nbootstrap: correct reading of flags for llvm\n\nFirst, this reverts the `CFLAGS`/`CXXFLAGS` of #93918. Those flags are\nalready read by `cc` and populated into `Build` earlier on in the\nprocess. We shouldn't be overriding that based on `CFLAGS`, since `cc`\nalso respects overrides like `CFLAGS_{TARGET}` and `HOST_CFLAGS`, which\nwe want to take into account.\n\nSecond, this adds the same capability to specify target-specific\nversions of `LDFLAGS` as we have through `cc` for the `C*` flags:\nhttps://github.com/alexcrichton/cc-rs#external-configuration-via-environment-variables", "tree": {"sha": "36f0927e932732e8bbce9cf4a7d2983ad6b5dad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36f0927e932732e8bbce9cf4a7d2983ad6b5dad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIWYiCRBK7hj4Ov3rIwAA7QwIAJTAx1f9ygnPwjY+f3MaW0uH\nchF1LeM0q0Nd1dtXM31TQJykj8blmQ+wcew9D9juBafat1+w1xg1xKLZnFmd/3dD\nDuf0/j6zzwafd5cCrnSLSVOtLUMIUm43KiZOvDLffguLaD5s1rrvrgm+gaPQp83N\ny/s++53xm6aM92JjLEOZDhVInhodoSvtwULAQ/QCAQuq/aICT3h3qti0/PyrcdJX\nepqe4rOASxwwQhWke3Eh5nKsAShznsyblBmb3FGyqnw1QD/UFxgJkF+WNZEc7hrl\nol0iTYY1nKeTVN+LzFjeCi9Q/0L4GFu/IL1Prsp11QlULrabgAsrXB5s4afoMmk=\n=uTYm\n-----END PGP SIGNATURE-----\n", "payload": "tree 36f0927e932732e8bbce9cf4a7d2983ad6b5dad4\nparent aede21f42ff5f560062d041e53299f4513431a9d\nparent 9c05f0b72c99cc91117282f7f267964824f187bf\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1646356001 +0100\ncommitter GitHub <noreply@github.com> 1646356001 +0100\n\nRollup merge of #94466 - jonhoo:bootstrap-proper-env-flags, r=Mark-Simulacrum\n\nbootstrap: correct reading of flags for llvm\n\nFirst, this reverts the `CFLAGS`/`CXXFLAGS` of #93918. Those flags are\nalready read by `cc` and populated into `Build` earlier on in the\nprocess. We shouldn't be overriding that based on `CFLAGS`, since `cc`\nalso respects overrides like `CFLAGS_{TARGET}` and `HOST_CFLAGS`, which\nwe want to take into account.\n\nSecond, this adds the same capability to specify target-specific\nversions of `LDFLAGS` as we have through `cc` for the `C*` flags:\nhttps://github.com/alexcrichton/cc-rs#external-configuration-via-environment-variables\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "html_url": "https://github.com/rust-lang/rust/commit/958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aede21f42ff5f560062d041e53299f4513431a9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aede21f42ff5f560062d041e53299f4513431a9d", "html_url": "https://github.com/rust-lang/rust/commit/aede21f42ff5f560062d041e53299f4513431a9d"}, {"sha": "9c05f0b72c99cc91117282f7f267964824f187bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c05f0b72c99cc91117282f7f267964824f187bf", "html_url": "https://github.com/rust-lang/rust/commit/9c05f0b72c99cc91117282f7f267964824f187bf"}], "stats": {"total": 99, "additions": 70, "deletions": 29}, "files": [{"sha": "0d387ff1e37c20f2e111b482a6da6b6c8e1ad33d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "patch": "@@ -26,7 +26,7 @@ use crate::run;\n use crate::test;\n use crate::tool::{self, SourceType};\n use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir};\n-use crate::{Build, DocTests, GitRepo, Mode};\n+use crate::{Build, CLang, DocTests, GitRepo, Mode};\n \n pub use crate::Compiler;\n // FIXME: replace with std::lazy after it gets stabilized and reaches beta\n@@ -1511,7 +1511,7 @@ impl<'a> Builder<'a> {\n             let cc = ccacheify(&self.cc(target));\n             cargo.env(format!(\"CC_{}\", target.triple), &cc);\n \n-            let cflags = self.cflags(target, GitRepo::Rustc).join(\" \");\n+            let cflags = self.cflags(target, GitRepo::Rustc, CLang::C).join(\" \");\n             cargo.env(format!(\"CFLAGS_{}\", target.triple), &cflags);\n \n             if let Some(ar) = self.ar(target) {\n@@ -1523,9 +1523,10 @@ impl<'a> Builder<'a> {\n \n             if let Ok(cxx) = self.cxx(target) {\n                 let cxx = ccacheify(&cxx);\n+                let cxxflags = self.cflags(target, GitRepo::Rustc, CLang::Cxx).join(\" \");\n                 cargo\n                     .env(format!(\"CXX_{}\", target.triple), &cxx)\n-                    .env(format!(\"CXXFLAGS_{}\", target.triple), cflags);\n+                    .env(format!(\"CXXFLAGS_{}\", target.triple), cxxflags);\n             }\n         }\n "}, {"sha": "8c47f625d732bc3868c5018828d9371f0626435f", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "patch": "@@ -29,7 +29,7 @@ use std::{env, iter};\n use build_helper::output;\n \n use crate::config::{Target, TargetSelection};\n-use crate::{Build, GitRepo};\n+use crate::{Build, CLang, GitRepo};\n \n // The `cc` crate doesn't provide a way to obtain a path to the detected archiver,\n // so use some simplified logic here. First we respect the environment variable `AR`, then\n@@ -109,7 +109,7 @@ pub fn find(build: &mut Build) {\n         };\n \n         build.cc.insert(target, compiler.clone());\n-        let cflags = build.cflags(target, GitRepo::Rustc);\n+        let cflags = build.cflags(target, GitRepo::Rustc, CLang::C);\n \n         // If we use llvm-libunwind, we will need a C++ compiler as well for all targets\n         // We'll need one anyways if the target triple is also a host triple\n@@ -142,8 +142,9 @@ pub fn find(build: &mut Build) {\n         build.verbose(&format!(\"CC_{} = {:?}\", &target.triple, build.cc(target)));\n         build.verbose(&format!(\"CFLAGS_{} = {:?}\", &target.triple, cflags));\n         if let Ok(cxx) = build.cxx(target) {\n+            let cxxflags = build.cflags(target, GitRepo::Rustc, CLang::Cxx);\n             build.verbose(&format!(\"CXX_{} = {:?}\", &target.triple, cxx));\n-            build.verbose(&format!(\"CXXFLAGS_{} = {:?}\", &target.triple, cflags));\n+            build.verbose(&format!(\"CXXFLAGS_{} = {:?}\", &target.triple, cxxflags));\n         }\n         if let Some(ar) = ar {\n             build.verbose(&format!(\"AR_{} = {:?}\", &target.triple, ar));"}, {"sha": "99717780346014a60d086e8ef4f95a77aed66e82", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "patch": "@@ -28,7 +28,7 @@ use crate::native;\n use crate::tool::SourceType;\n use crate::util::{exe, is_debug_info, is_dylib, symlink_dir};\n use crate::LLVM_TOOLS;\n-use crate::{Compiler, DependencyType, GitRepo, Mode};\n+use crate::{CLang, Compiler, DependencyType, GitRepo, Mode};\n \n #[derive(Debug, PartialOrd, Ord, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Std {\n@@ -249,7 +249,7 @@ fn copy_self_contained_objects(\n         }\n     } else if target.contains(\"windows-gnu\") {\n         for obj in [\"crt2.o\", \"dllcrt2.o\"].iter() {\n-            let src = compiler_file(builder, builder.cc(target), target, obj);\n+            let src = compiler_file(builder, builder.cc(target), target, CLang::C, obj);\n             let target = libdir_self_contained.join(obj);\n             builder.copy(&src, &target);\n             target_deps.push((target, DependencyType::TargetSelfContained));\n@@ -727,7 +727,13 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n             && !target.contains(\"msvc\")\n             && !target.contains(\"apple\")\n         {\n-            let file = compiler_file(builder, builder.cxx(target).unwrap(), target, \"libstdc++.a\");\n+            let file = compiler_file(\n+                builder,\n+                builder.cxx(target).unwrap(),\n+                target,\n+                CLang::Cxx,\n+                \"libstdc++.a\",\n+            );\n             cargo.env(\"LLVM_STATIC_STDCPP\", file);\n         }\n         if builder.config.llvm_link_shared {\n@@ -948,10 +954,11 @@ pub fn compiler_file(\n     builder: &Builder<'_>,\n     compiler: &Path,\n     target: TargetSelection,\n+    c: CLang,\n     file: &str,\n ) -> PathBuf {\n     let mut cmd = Command::new(compiler);\n-    cmd.args(builder.cflags(target, GitRepo::Rustc));\n+    cmd.args(builder.cflags(target, GitRepo::Rustc, c));\n     cmd.arg(format!(\"-print-file-name={}\", file));\n     let out = output(&mut cmd);\n     PathBuf::from(out.trim())"}, {"sha": "abfac2a5897939499ab2ce8ef92024e4a26d3cce", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "patch": "@@ -339,6 +339,11 @@ impl Mode {\n     }\n }\n \n+pub enum CLang {\n+    C,\n+    Cxx,\n+}\n+\n impl Build {\n     /// Creates a new set of build configuration from the `flags` on the command\n     /// line and the filesystem `config`.\n@@ -941,10 +946,15 @@ impl Build {\n \n     /// Returns a list of flags to pass to the C compiler for the target\n     /// specified.\n-    fn cflags(&self, target: TargetSelection, which: GitRepo) -> Vec<String> {\n+    fn cflags(&self, target: TargetSelection, which: GitRepo, c: CLang) -> Vec<String> {\n+        let base = match c {\n+            CLang::C => &self.cc[&target],\n+            CLang::Cxx => &self.cxx[&target],\n+        };\n+\n         // Filter out -O and /O (the optimization flags) that we picked up from\n         // cc-rs because the build scripts will determine that for themselves.\n-        let mut base = self.cc[&target]\n+        let mut base = base\n             .args()\n             .iter()\n             .map(|s| s.to_string_lossy().into_owned())"}, {"sha": "a751a6e3ece7f918ab2df0860c190daca1c5f915", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "patch": "@@ -21,7 +21,7 @@ use build_helper::{output, t};\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::TargetSelection;\n use crate::util::{self, exe};\n-use crate::GitRepo;\n+use crate::{CLang, GitRepo};\n use build_helper::up_to_date;\n \n pub struct Meta {\n@@ -529,7 +529,7 @@ fn configure_cmake(\n     }\n \n     cfg.build_arg(\"-j\").build_arg(builder.jobs().to_string());\n-    let mut cflags: OsString = builder.cflags(target, GitRepo::Llvm).join(\" \").into();\n+    let mut cflags: OsString = builder.cflags(target, GitRepo::Llvm, CLang::C).join(\" \").into();\n     if let Some(ref s) = builder.config.llvm_cflags {\n         cflags.push(\" \");\n         cflags.push(s);\n@@ -545,23 +545,15 @@ fn configure_cmake(\n     if builder.config.llvm_clang_cl.is_some() {\n         cflags.push(&format!(\" --target={}\", target));\n     }\n-    if let Some(flags) = env::var_os(\"CFLAGS\") {\n-        cflags.push(\" \");\n-        cflags.push(flags);\n-    }\n     cfg.define(\"CMAKE_C_FLAGS\", cflags);\n-    let mut cxxflags: OsString = builder.cflags(target, GitRepo::Llvm).join(\" \").into();\n+    let mut cxxflags: OsString = builder.cflags(target, GitRepo::Llvm, CLang::Cxx).join(\" \").into();\n     if let Some(ref s) = builder.config.llvm_cxxflags {\n         cxxflags.push(\" \");\n         cxxflags.push(s);\n     }\n     if builder.config.llvm_clang_cl.is_some() {\n         cxxflags.push(&format!(\" --target={}\", target));\n     }\n-    if let Some(flags) = env::var_os(\"CXXFLAGS\") {\n-        cxxflags.push(\" \");\n-        cxxflags.push(flags);\n-    }\n     cfg.define(\"CMAKE_CXX_FLAGS\", cxxflags);\n     if let Some(ar) = builder.ar(target) {\n         if ar.is_absolute() {\n@@ -583,7 +575,7 @@ fn configure_cmake(\n         ldflags.push_all(flags);\n     }\n \n-    if let Some(flags) = env::var_os(\"LDFLAGS\") {\n+    if let Some(flags) = get_var(\"LDFLAGS\", &builder.config.build.triple, &target.triple) {\n         ldflags.push_all(&flags);\n     }\n \n@@ -596,6 +588,16 @@ fn configure_cmake(\n     }\n }\n \n+// Adapted from https://github.com/alexcrichton/cc-rs/blob/fba7feded71ee4f63cfe885673ead6d7b4f2f454/src/lib.rs#L2347-L2365\n+fn get_var(var_base: &str, host: &str, target: &str) -> Option<OsString> {\n+    let kind = if host == target { \"HOST\" } else { \"TARGET\" };\n+    let target_u = target.replace(\"-\", \"_\");\n+    env::var_os(&format!(\"{}_{}\", var_base, target))\n+        .or_else(|| env::var_os(&format!(\"{}_{}\", var_base, target_u)))\n+        .or_else(|| env::var_os(&format!(\"{}_{}\", kind, var_base)))\n+        .or_else(|| env::var_os(var_base))\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Lld {\n     pub target: TargetSelection,"}, {"sha": "19d98df3ce9023a2fb91b1d326b3f4d3c5a6d3cc", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "patch": "@@ -24,7 +24,7 @@ use crate::tool::{self, SourceType, Tool};\n use crate::toolstate::ToolState;\n use crate::util::{self, add_link_lib_path, dylib_path, dylib_path_var};\n use crate::Crate as CargoCrate;\n-use crate::{envify, DocTests, GitRepo, Mode};\n+use crate::{envify, CLang, DocTests, GitRepo, Mode};\n \n const ADB_TEST_DIR: &str = \"/data/tmp/work\";\n \n@@ -1509,7 +1509,9 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n                 .arg(\"--cxx\")\n                 .arg(builder.cxx(target).unwrap())\n                 .arg(\"--cflags\")\n-                .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"));\n+                .arg(builder.cflags(target, GitRepo::Rustc, CLang::C).join(\" \"))\n+                .arg(\"--cxxflags\")\n+                .arg(builder.cflags(target, GitRepo::Rustc, CLang::Cxx).join(\" \"));\n             copts_passed = true;\n             if let Some(ar) = builder.ar(target) {\n                 cmd.arg(\"--ar\").arg(ar);\n@@ -1520,7 +1522,14 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             cmd.arg(\"--llvm-components\").arg(\"\");\n         }\n         if !copts_passed {\n-            cmd.arg(\"--cc\").arg(\"\").arg(\"--cxx\").arg(\"\").arg(\"--cflags\").arg(\"\");\n+            cmd.arg(\"--cc\")\n+                .arg(\"\")\n+                .arg(\"--cxx\")\n+                .arg(\"\")\n+                .arg(\"--cflags\")\n+                .arg(\"\")\n+                .arg(\"--cxxflags\")\n+                .arg(\"\");\n         }\n \n         if builder.remote_tested(target) {"}, {"sha": "1bf6e6d011e5c125a2be7e7f64c5c3c54cbc15e5", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "patch": "@@ -357,6 +357,7 @@ pub struct Config {\n     pub cc: String,\n     pub cxx: String,\n     pub cflags: String,\n+    pub cxxflags: String,\n     pub ar: String,\n     pub linker: Option<String>,\n     pub llvm_components: String,"}, {"sha": "5b144a1020f4c3e0f9baeb51299b3875c8e0a0af", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "patch": "@@ -52,6 +52,7 @@ fn config() -> Config {\n         \"--cc=c\",\n         \"--cxx=c++\",\n         \"--cflags=\",\n+        \"--cxxflags=\",\n         \"--llvm-components=\",\n         \"--android-cross-path=\",\n         \"--target=x86_64-unknown-linux-gnu\","}, {"sha": "3f2cd3ae232ba5822452816d8dd8524fecea1e00", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "patch": "@@ -126,6 +126,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         .reqopt(\"\", \"cc\", \"path to a C compiler\", \"PATH\")\n         .reqopt(\"\", \"cxx\", \"path to a C++ compiler\", \"PATH\")\n         .reqopt(\"\", \"cflags\", \"flags for the C compiler\", \"FLAGS\")\n+        .reqopt(\"\", \"cxxflags\", \"flags for the CXX compiler\", \"FLAGS\")\n         .optopt(\"\", \"ar\", \"path to an archiver\", \"PATH\")\n         .optopt(\"\", \"linker\", \"path to a linker\", \"PATH\")\n         .reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\")\n@@ -288,6 +289,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         cc: matches.opt_str(\"cc\").unwrap(),\n         cxx: matches.opt_str(\"cxx\").unwrap(),\n         cflags: matches.opt_str(\"cflags\").unwrap(),\n+        cxxflags: matches.opt_str(\"cxxflags\").unwrap(),\n         ar: matches.opt_str(\"ar\").unwrap_or_else(|| String::from(\"ar\")),\n         linker: matches.opt_str(\"linker\"),\n         llvm_components: matches.opt_str(\"llvm-components\").unwrap(),"}, {"sha": "8431aa7b818df7b71b1dcd1ea1e4afd9c6872c5a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/958bd0268c307e91ec0fc93c8c4ed8a412008ab4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=958bd0268c307e91ec0fc93c8c4ed8a412008ab4", "patch": "@@ -2919,15 +2919,22 @@ impl<'test> TestCx<'test> {\n                 .map(|s| s.replace(\"/\", \"-\"))\n                 .collect::<Vec<_>>()\n                 .join(\" \");\n+            let cxxflags = self\n+                .config\n+                .cxxflags\n+                .split(' ')\n+                .map(|s| s.replace(\"/\", \"-\"))\n+                .collect::<Vec<_>>()\n+                .join(\" \");\n \n             cmd.env(\"IS_MSVC\", \"1\")\n                 .env(\"IS_WINDOWS\", \"1\")\n                 .env(\"MSVC_LIB\", format!(\"'{}' -nologo\", lib.display()))\n                 .env(\"CC\", format!(\"'{}' {}\", self.config.cc, cflags))\n-                .env(\"CXX\", format!(\"'{}'\", &self.config.cxx));\n+                .env(\"CXX\", format!(\"'{}' {}\", &self.config.cxx, cxxflags));\n         } else {\n             cmd.env(\"CC\", format!(\"{} {}\", self.config.cc, self.config.cflags))\n-                .env(\"CXX\", format!(\"{} {}\", self.config.cxx, self.config.cflags))\n+                .env(\"CXX\", format!(\"{} {}\", self.config.cxx, self.config.cxxflags))\n                 .env(\"AR\", &self.config.ar);\n \n             if self.config.target.contains(\"windows\") {"}]}