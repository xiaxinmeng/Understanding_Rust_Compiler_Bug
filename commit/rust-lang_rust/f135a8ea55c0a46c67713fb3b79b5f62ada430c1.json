{"sha": "f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMzVhOGVhNTVjMGE0NmM2NzcxM2ZiM2I3OWI1ZjYyYWRhNDMwYzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T13:58:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-12T13:58:04Z"}, "message": "Move structs to new loc", "tree": {"sha": "a71a0c4da21cb40c35b6aed842d9664cbec8a59d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a71a0c4da21cb40c35b6aed842d9664cbec8a59d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "html_url": "https://github.com/rust-lang/rust/commit/f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63c192b34a54e826afebc735ca6225b44a876eab", "url": "https://api.github.com/repos/rust-lang/rust/commits/63c192b34a54e826afebc735ca6225b44a876eab", "html_url": "https://github.com/rust-lang/rust/commit/63c192b34a54e826afebc735ca6225b44a876eab"}], "stats": {"total": 96, "additions": 66, "deletions": 30}, "files": [{"sha": "8588aa5a3a7b54c22d0e9457d20763c6d8d0f0be", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -269,7 +269,7 @@ pub struct Struct {\n \n impl Struct {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n-        Module { id: self.id.module(db) }\n+        Module { id: self.id.lookup(db).container }\n     }\n \n     pub fn krate(self, db: &impl DefDatabase) -> Option<Crate> {\n@@ -290,7 +290,7 @@ impl Struct {\n     }\n \n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n-        Type::from_def(db, self.id.module(db).krate, self.id)\n+        Type::from_def(db, self.id.lookup(db).container.krate, self.id)\n     }\n \n     fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {"}, {"sha": "978326c74cedf15cdaeec01e9ecf03f29287f931", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -23,8 +23,10 @@ pub trait FromSource: Sized {\n impl FromSource for Struct {\n     type Ast = ast::StructDef;\n     fn from_source(db: &(impl DefDatabase + AstDatabase), src: InFile<Self::Ast>) -> Option<Self> {\n-        let id = from_source(db, src)?;\n-        Some(Struct { id })\n+        analyze_container(db, src.as_ref().map(|it| it.syntax()))[keys::STRUCT]\n+            .get(&src)\n+            .copied()\n+            .map(Struct::from)\n     }\n }\n impl FromSource for Union {"}, {"sha": "8f35a3fbb4fd1b5c7ba10c51296fff5aac8fce3a", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -51,7 +51,7 @@ impl HasSource for StructField {\n impl HasSource for Struct {\n     type Ast = ast::StructDef;\n     fn source(self, db: &impl DefDatabase) -> InFile<ast::StructDef> {\n-        self.id.source(db)\n+        self.id.lookup(db).source(db)\n     }\n }\n impl HasSource for Union {"}, {"sha": "ef2b20f1ec1f60a78fcb28c3918f2b50bb2ca74c", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -11,8 +11,9 @@ use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n-    db::DefDatabase, src::HasChildSource, trace::Trace, type_ref::TypeRef, AstItemDef, EnumId,\n-    LocalEnumVariantId, LocalStructFieldId, StructId, UnionId, VariantId,\n+    db::DefDatabase, src::HasChildSource, src::HasSource, trace::Trace, type_ref::TypeRef,\n+    AstItemDef, EnumId, LocalEnumVariantId, LocalStructFieldId, Lookup, StructId, UnionId,\n+    VariantId,\n };\n \n /// Note that we use `StructData` for unions as well!\n@@ -50,7 +51,7 @@ pub struct StructFieldData {\n \n impl StructData {\n     pub(crate) fn struct_data_query(db: &impl DefDatabase, id: StructId) -> Arc<StructData> {\n-        let src = id.source(db);\n+        let src = id.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n         let variant_data = VariantData::new(src.value.kind());\n         let variant_data = Arc::new(variant_data);\n@@ -153,7 +154,7 @@ impl HasChildSource for VariantId {\n                 let src = it.parent.child_source(db);\n                 src.map(|map| map[it.local_id].kind())\n             }\n-            VariantId::StructId(it) => it.source(db).map(|it| it.kind()),\n+            VariantId::StructId(it) => it.lookup(db).source(db).map(|it| it.kind()),\n             VariantId::UnionId(it) => it.source(db).map(|it| {\n                 it.record_field_def_list()\n                     .map(ast::StructKind::Record)"}, {"sha": "d2aa5ce8f16c5574e20d76f17eac9bb34042d824", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -56,7 +56,7 @@ impl Attrs {\n                 Attrs::from_attrs_owner(db, src.map(|it| it as &dyn AttrsOwner))\n             }\n             AttrDefId::AdtId(it) => match it {\n-                AdtId::StructId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n+                AdtId::StructId(it) => attrs_from_loc(it.lookup(db), db),\n                 AdtId::EnumId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n                 AdtId::UnionId(it) => attrs_from_ast(it.lookup_intern(db).ast_id, db),\n             },"}, {"sha": "eba361578b8219d8a90504daef42b894f567db87", "filename": "crates/ra_hir_def/src/child_by_source.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fchild_by_source.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -11,8 +11,8 @@ use crate::{\n     dyn_map::DynMap,\n     keys,\n     src::{HasChildSource, HasSource},\n-    AssocItemId, EnumId, EnumVariantId, ImplId, Lookup, ModuleDefId, ModuleId, StructFieldId,\n-    TraitId, VariantId,\n+    AdtId, AssocItemId, EnumId, EnumVariantId, ImplId, Lookup, ModuleDefId, ModuleId,\n+    StructFieldId, TraitId, VariantId,\n };\n \n pub trait ChildBySource {\n@@ -98,6 +98,14 @@ impl ChildBySource for ModuleId {\n                     let src = trait_.lookup(db).source(db);\n                     res[keys::TRAIT].insert(src, trait_)\n                 }\n+                ModuleDefId::AdtId(adt) => match adt {\n+                    AdtId::StructId(strukt) => {\n+                        let src = strukt.lookup(db).source(db);\n+                        res[keys::STRUCT].insert(src, strukt)\n+                    }\n+                    AdtId::UnionId(_) => (),\n+                    AdtId::EnumId(_) => (),\n+                },\n                 _ => (),\n             }\n         }"}, {"sha": "e120c7768dafc4f936347959ae6013e0e368568d", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -18,16 +18,16 @@ use crate::{\n         CrateDefMap,\n     },\n     AttrDefId, ConstId, ConstLoc, DefWithBodyId, EnumId, FunctionId, FunctionLoc, GenericDefId,\n-    ImplId, ImplLoc, ItemLoc, ModuleId, StaticId, StaticLoc, StructId, TraitId, TraitLoc,\n-    TypeAliasId, TypeAliasLoc, UnionId,\n+    ImplId, ImplLoc, ItemLoc, ModuleId, StaticId, StaticLoc, StructId, StructLoc, TraitId,\n+    TraitLoc, TypeAliasId, TypeAliasLoc, UnionId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n pub trait InternDatabase: SourceDatabase {\n     #[salsa::interned]\n     fn intern_function(&self, loc: FunctionLoc) -> FunctionId;\n     #[salsa::interned]\n-    fn intern_struct(&self, loc: ItemLoc<ast::StructDef>) -> StructId;\n+    fn intern_struct(&self, loc: StructLoc) -> StructId;\n     #[salsa::interned]\n     fn intern_union(&self, loc: ItemLoc<ast::UnionDef>) -> UnionId;\n     #[salsa::interned]"}, {"sha": "58143b894a5f8dc63d81b81bde16a7f06f2bf71f", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -51,7 +51,7 @@ impl Documentation {\n                 }\n             }\n             AttrDefId::AdtId(it) => match it {\n-                AdtId::StructId(it) => docs_from_ast(&it.source(db).value),\n+                AdtId::StructId(it) => docs_from_ast(&it.lookup(db).source(db).value),\n                 AdtId::EnumId(it) => docs_from_ast(&it.source(db).value),\n                 AdtId::UnionId(it) => docs_from_ast(&it.source(db).value),\n             },"}, {"sha": "f1ce8d59a2cbb51b92bf9d8ae88a365e8a21388d", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -71,7 +71,7 @@ impl GenericParams {\n                 src.file_id\n             }\n             GenericDefId::AdtId(AdtId::StructId(it)) => {\n-                let src = it.source(db);\n+                let src = it.lookup(db).source(db);\n                 generics.fill(&mut sm, &src.value);\n                 src.file_id\n             }"}, {"sha": "758cf80970be0d263aeeb26c78ba7f63717d3591", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -8,8 +8,8 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     dyn_map::{DynMap, Policy},\n-    ConstId, EnumVariantId, FunctionId, ImplId, StaticId, StructFieldId, TraitId, TypeAliasId,\n-    TypeParamId,\n+    ConstId, EnumVariantId, FunctionId, ImplId, StaticId, StructFieldId, StructId, TraitId,\n+    TypeAliasId, TypeParamId,\n };\n \n type Key<K, V> = crate::dyn_map::Key<InFile<K>, V, AstPtrPolicy<K, V>>;\n@@ -20,6 +20,7 @@ pub const STATIC: Key<ast::StaticDef, StaticId> = Key::new();\n pub const TYPE_ALIAS: Key<ast::TypeAliasDef, TypeAliasId> = Key::new();\n pub const IMPL: Key<ast::ImplBlock, ImplId> = Key::new();\n pub const TRAIT: Key<ast::TraitDef, TraitId> = Key::new();\n+pub const STRUCT: Key<ast::StructDef, StructId> = Key::new();\n \n pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n pub const TUPLE_FIELD: Key<ast::TupleFieldDef, StructFieldId> = Key::new();"}, {"sha": "1a599706a7af7d0cc54e1129101aa7c023445eaa", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -149,12 +149,24 @@ impl Lookup for FunctionId {\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructId(salsa::InternId);\n impl_intern_key!(StructId);\n-impl AstItemDef<ast::StructDef> for StructId {\n-    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StructDef>) -> Self {\n-        db.intern_struct(loc)\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct StructLoc {\n+    pub container: ModuleId,\n+    pub ast_id: AstId<ast::StructDef>,\n+}\n+\n+impl Intern for StructLoc {\n+    type ID = StructId;\n+    fn intern(self, db: &impl db::DefDatabase) -> StructId {\n+        db.intern_struct(self)\n     }\n-    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StructDef> {\n-        db.lookup_intern_struct(self)\n+}\n+\n+impl Lookup for StructId {\n+    type Data = StructLoc;\n+    fn lookup(&self, db: &impl db::DefDatabase) -> StructLoc {\n+        db.lookup_intern_struct(*self)\n     }\n }\n \n@@ -532,7 +544,7 @@ impl HasModule for ConstLoc {\n impl HasModule for AdtId {\n     fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match self {\n-            AdtId::StructId(it) => it.module(db),\n+            AdtId::StructId(it) => it.lookup(db).container,\n             AdtId::UnionId(it) => it.module(db),\n             AdtId::EnumId(it) => it.module(db),\n         }"}, {"sha": "602ec0911cab7ca8b48ecfe03bb7421e450c66bd", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -25,7 +25,7 @@ use crate::{\n     path::{Path, PathKind},\n     per_ns::PerNs,\n     AdtId, AstId, AstItemDef, ConstLoc, ContainerId, EnumId, EnumVariantId, FunctionLoc, ImplLoc,\n-    Intern, LocalImportId, LocalModuleId, LocationCtx, ModuleDefId, ModuleId, StaticLoc, StructId,\n+    Intern, LocalImportId, LocalModuleId, LocationCtx, ModuleDefId, ModuleId, StaticLoc, StructLoc,\n     TraitLoc, TypeAliasLoc, UnionId,\n };\n \n@@ -773,8 +773,9 @@ where\n                 PerNs::values(def.into())\n             }\n             raw::DefKind::Struct(ast_id) => {\n-                let id = StructId::from_ast_id(ctx, ast_id).into();\n-                PerNs::both(id, id)\n+                let def = StructLoc { container: module, ast_id: AstId::new(self.file_id, ast_id) }\n+                    .intern(self.def_collector.db);\n+                PerNs::both(def.into(), def.into())\n             }\n             raw::DefKind::Union(ast_id) => {\n                 let id = UnionId::from_ast_id(ctx, ast_id).into();"}, {"sha": "7e212adb15c1e332a71c32e76d7db63ac26c2dfa", "filename": "crates/ra_hir_def/src/src.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fsrc.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -4,7 +4,9 @@ use hir_expand::InFile;\n use ra_arena::map::ArenaMap;\n use ra_syntax::ast;\n \n-use crate::{db::DefDatabase, ConstLoc, FunctionLoc, ImplLoc, StaticLoc, TraitLoc, TypeAliasLoc};\n+use crate::{\n+    db::DefDatabase, ConstLoc, FunctionLoc, ImplLoc, StaticLoc, StructLoc, TraitLoc, TypeAliasLoc,\n+};\n \n pub trait HasSource {\n     type Value;\n@@ -65,6 +67,15 @@ impl HasSource for TraitLoc {\n     }\n }\n \n+impl HasSource for StructLoc {\n+    type Value = ast::StructDef;\n+\n+    fn source(&self, db: &impl DefDatabase) -> InFile<ast::StructDef> {\n+        let node = self.ast_id.to_node(db);\n+        InFile::new(self.ast_id.file_id, node)\n+    }\n+}\n+\n pub trait HasChildSource {\n     type ChildId;\n     type Value;"}, {"sha": "6af5bf50aa3b857559aaf47b713565bbf4dcf43b", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f135a8ea55c0a46c67713fb3b79b5f62ada430c1/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=f135a8ea55c0a46c67713fb3b79b5f62ada430c1", "patch": "@@ -699,7 +699,7 @@ impl CallableDef {\n     pub fn krate(self, db: &impl HirDatabase) -> CrateId {\n         match self {\n             CallableDef::FunctionId(f) => f.lookup(db).module(db).krate,\n-            CallableDef::StructId(s) => s.module(db).krate,\n+            CallableDef::StructId(s) => s.lookup(db).container.krate,\n             CallableDef::EnumVariantId(e) => e.parent.module(db).krate,\n         }\n     }"}]}