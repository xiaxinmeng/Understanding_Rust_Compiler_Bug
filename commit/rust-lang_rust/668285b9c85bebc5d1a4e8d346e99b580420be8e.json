{"sha": "668285b9c85bebc5d1a4e8d346e99b580420be8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ODI4NWI5Yzg1YmViYzVkMWE0ZThkMzQ2ZTk5YjU4MDQyMGJlOGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-05T19:59:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-07-11T21:41:41Z"}, "message": "add ability to report statistics about how borrowck is being used", "tree": {"sha": "cceb6f110cec6712c67df074761e85193b3cb028", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cceb6f110cec6712c67df074761e85193b3cb028"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/668285b9c85bebc5d1a4e8d346e99b580420be8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/668285b9c85bebc5d1a4e8d346e99b580420be8e", "html_url": "https://github.com/rust-lang/rust/commit/668285b9c85bebc5d1a4e8d346e99b580420be8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/668285b9c85bebc5d1a4e8d346e99b580420be8e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b7d9a9a1bcfba81979f6f1165b5274c93b03039", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b7d9a9a1bcfba81979f6f1165b5274c93b03039", "html_url": "https://github.com/rust-lang/rust/commit/9b7d9a9a1bcfba81979f6f1165b5274c93b03039"}], "stats": {"total": 81, "additions": 64, "deletions": 17}, "files": [{"sha": "e8014b7b661ecd0ed602df4c25246cb95f55b0e8", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/668285b9c85bebc5d1a4e8d346e99b580420be8e/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668285b9c85bebc5d1a4e8d346e99b580420be8e/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=668285b9c85bebc5d1a4e8d346e99b580420be8e", "patch": "@@ -28,14 +28,15 @@ const ppregions: uint = 1u;\n const time_passes: uint = 2u;\n const count_llvm_insns: uint = 4u;\n const time_llvm_passes: uint = 8u;\n-const stats: uint = 16u;\n+const trans_stats: uint = 16u;\n const no_asm_comments: uint = 32u;\n const no_verify: uint = 64u;\n const trace: uint = 128u;\n // FIXME (#2377): This exists to transition to a Rust crate runtime\n // It should be removed\n const no_rt: uint = 256u;\n const coherence: uint = 512u;\n+const borrowck_stats: uint = 1024u;\n \n fn debugging_opts_map() -> ~[(str, str, uint)] {\n     ~[(\"ppregions\", \"prettyprint regions with \\\n@@ -49,7 +50,8 @@ fn debugging_opts_map() -> ~[(str, str, uint)] {\n      (\"no-verify\", \"skip LLVM verification\", no_verify),\n      (\"trace\", \"emit trace logs\", trace),\n      (\"no-rt\", \"do not link to the runtime\", no_rt),\n-     (\"coherence\", \"perform coherence checking\", coherence)\n+     (\"coherence\", \"perform coherence checking\", coherence),\n+     (\"borrowck-stats\", \"gather borrowck statistics\",  borrowck_stats)\n     ]\n }\n \n@@ -160,11 +162,12 @@ impl session for session {\n     fn time_passes() -> bool { self.debugging_opt(time_passes) }\n     fn count_llvm_insns() -> bool { self.debugging_opt(count_llvm_insns) }\n     fn time_llvm_passes() -> bool { self.debugging_opt(time_llvm_passes) }\n-    fn stats() -> bool { self.debugging_opt(stats) }\n+    fn trans_stats() -> bool { self.debugging_opt(trans_stats) }\n     fn no_asm_comments() -> bool { self.debugging_opt(no_asm_comments) }\n     fn no_verify() -> bool { self.debugging_opt(no_verify) }\n     fn trace() -> bool { self.debugging_opt(trace) }\n     fn coherence() -> bool { self.debugging_opt(coherence) }\n+    fn borrowck_stats() -> bool { self.debugging_opt(borrowck_stats) }\n }\n \n /// Some reasonable defaults"}, {"sha": "f08c9e9d4c2e01d4e72bcf0b0cc0c08874bf2421", "filename": "src/rustc/middle/borrowck.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/668285b9c85bebc5d1a4e8d346e99b580420be8e/src%2Frustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668285b9c85bebc5d1a4e8d346e99b580420be8e/src%2Frustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck.rs?ref=668285b9c85bebc5d1a4e8d346e99b580420be8e", "patch": "@@ -175,11 +175,37 @@ fn check_crate(tcx: ty::ctxt,\n                  last_use_map: last_use_map,\n                  binding_map: int_hash(),\n                  root_map: root_map(),\n-                 mutbl_map: int_hash()};\n+                 mutbl_map: int_hash(),\n+                 mut loaned_paths_same: 0,\n+                 mut loaned_paths_imm: 0,\n+                 mut stable_paths: 0,\n+                 mut req_pure_paths: 0,\n+                 mut guaranteed_paths: 0};\n \n     let req_maps = gather_loans::gather_loans(bccx, crate);\n     check_loans::check_loans(bccx, req_maps, crate);\n+\n+    if tcx.sess.borrowck_stats() {\n+        io::println(\"--- borrowck stats ---\");\n+        io::println(#fmt[\"paths requiring guarantees: %u\",\n+                        bccx.guaranteed_paths]);\n+        io::println(#fmt[\"paths requiring loans     : %s\",\n+                         make_stat(bccx, bccx.loaned_paths_same)]);\n+        io::println(#fmt[\"paths requiring imm loans : %s\",\n+                         make_stat(bccx, bccx.loaned_paths_imm)]);\n+        io::println(#fmt[\"stable paths              : %s\",\n+                         make_stat(bccx, bccx.stable_paths)]);\n+        io::println(#fmt[\"paths requiring purity    : %s\",\n+                         make_stat(bccx, bccx.req_pure_paths)]);\n+    }\n+\n     ret (bccx.root_map, bccx.mutbl_map);\n+\n+    fn make_stat(bccx: borrowck_ctxt, stat: uint) -> str {\n+        let stat_f = stat as float;\n+        let total = bccx.guaranteed_paths as float;\n+        #fmt[\"%u (%.0f%%)\", stat  , stat_f * 100f / total]\n+    }\n }\n \n // ----------------------------------------------------------------------\n@@ -190,7 +216,14 @@ type borrowck_ctxt = @{tcx: ty::ctxt,\n                        last_use_map: liveness::last_use_map,\n                        binding_map: binding_map,\n                        root_map: root_map,\n-                       mutbl_map: mutbl_map};\n+                       mutbl_map: mutbl_map,\n+\n+                       // Statistics:\n+                       mut loaned_paths_same: uint,\n+                       mut loaned_paths_imm: uint,\n+                       mut stable_paths: uint,\n+                       mut req_pure_paths: uint,\n+                       mut guaranteed_paths: uint};\n \n // a map mapping id's of expressions of gc'd type (@T, @[], etc) where\n // the box needs to be kept live to the id of the scope for which they"}, {"sha": "b1f31c4fd14553c06846b2264d83744933072aae", "filename": "src/rustc/middle/borrowck/gather_loans.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/668285b9c85bebc5d1a4e8d346e99b580420be8e/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668285b9c85bebc5d1a4e8d346e99b580420be8e/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fgather_loans.rs?ref=668285b9c85bebc5d1a4e8d346e99b580420be8e", "patch": "@@ -172,27 +172,36 @@ impl methods for gather_loan_ctxt {\n                        req_mutbl: ast::mutability,\n                        scope_r: ty::region) {\n \n+        self.bccx.guaranteed_paths += 1;\n+\n         #debug[\"guarantee_valid(cmt=%s, req_mutbl=%s, scope_r=%s)\",\n                self.bccx.cmt_to_repr(cmt),\n                self.bccx.mut_to_str(req_mutbl),\n                region_to_str(self.tcx(), scope_r)];\n         let _i = indenter();\n \n         alt cmt.lp {\n-          // If this expression is a loanable path, we MUST take out a loan.\n-          // This is somewhat non-obvious.  You might think, for example, that\n-          // if we have an immutable local variable `x` whose value is being\n-          // borrowed, we could rely on `x` not to change.  This is not so,\n-          // however, because even immutable locals can be moved.  So we take\n-          // out a loan on `x`, guaranteeing that it remains immutable for the\n-          // duration of the reference: if there is an attempt to move it\n-          // within that scope, the loan will be detected and an error will be\n-          // reported.\n+          // If this expression is a loanable path, we MUST take out a\n+          // loan.  This is somewhat non-obvious.  You might think,\n+          // for example, that if we have an immutable local variable\n+          // `x` whose value is being borrowed, we could rely on `x`\n+          // not to change.  This is not so, however, because even\n+          // immutable locals can be moved.  So we take out a loan on\n+          // `x`, guaranteeing that it remains immutable for the\n+          // duration of the reference: if there is an attempt to move\n+          // it within that scope, the loan will be detected and an\n+          // error will be reported.\n           some(_) {\n             alt scope_r {\n               ty::re_scope(scope_id) {\n                 let loans = self.bccx.loan(cmt, req_mutbl);\n                 self.add_loans(scope_id, loans);\n+\n+                if req_mutbl == m_imm && cmt.mutbl != m_imm {\n+                    self.bccx.loaned_paths_imm += 1;\n+                } else {\n+                    self.bccx.loaned_paths_same += 1;\n+                }\n               }\n               _ {\n                 self.bccx.span_err(\n@@ -225,6 +234,7 @@ impl methods for gather_loan_ctxt {\n                 // we were able guarantee the validity of the ptr,\n                 // perhaps by rooting or because it is immutably\n                 // rooted.  good.\n+                self.bccx.stable_paths += 1;\n               }\n               err(e) {\n                 // not able to guarantee the validity of the ptr.\n@@ -235,6 +245,7 @@ impl methods for gather_loan_ctxt {\n                 alt opt_scope_id {\n                   some(scope_id) {\n                     self.req_maps.pure_map.insert(scope_id, e);\n+                    self.bccx.req_pure_paths += 1;\n                   }\n                   none {\n                     // otherwise, fine, I give up."}, {"sha": "045f175bea1af81add0d96387474d20f49698b66", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/668285b9c85bebc5d1a4e8d346e99b580420be8e/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668285b9c85bebc5d1a4e8d346e99b580420be8e/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=668285b9c85bebc5d1a4e8d346e99b580420be8e", "patch": "@@ -551,7 +551,7 @@ fn make_generic_glue(ccx: @crate_ctxt, t: ty::t, llfn: ValueRef,\n                      helper: glue_helper, name: str)\n     -> ValueRef {\n     let _icx = ccx.insn_ctxt(\"make_generic_glue\");\n-    if !ccx.sess.stats() {\n+    if !ccx.sess.trans_stats() {\n         ret make_generic_glue_inner(ccx, t, llfn, helper);\n     }\n \n@@ -4550,7 +4550,7 @@ fn trans_fn(ccx: @crate_ctxt,\n             ty_self: self_arg,\n             param_substs: option<param_substs>,\n             id: ast::node_id) {\n-    let do_time = ccx.sess.stats();\n+    let do_time = ccx.sess.trans_stats();\n     let start = if do_time { time::get_time() }\n                 else { {sec: 0i64, nsec: 0i32} };\n     let _icx = ccx.insn_ctxt(\"trans_fn\");\n@@ -5591,7 +5591,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n \n     // Translate the metadata.\n     write_metadata(ccx, crate);\n-    if ccx.sess.stats() {\n+    if ccx.sess.trans_stats() {\n         io::println(\"--- trans stats ---\");\n         io::println(#fmt(\"n_static_tydescs: %u\",\n                          ccx.stats.n_static_tydescs));"}]}