{"sha": "5eaf31b7b2a1ffe892ac9fc14f49777cf64bb334", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYWYzMWI3YjJhMWZmZTg5MmFjOWZjMTRmNDk3NzdjZjY0YmIzMzQ=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-11-30T20:12:26Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2015-11-30T20:12:26Z"}, "message": "Simplyfied map_thin_attrs()", "tree": {"sha": "eb52f4c4e692fe0915c285f09acd3fa5808b307f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb52f4c4e692fe0915c285f09acd3fa5808b307f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eaf31b7b2a1ffe892ac9fc14f49777cf64bb334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eaf31b7b2a1ffe892ac9fc14f49777cf64bb334", "html_url": "https://github.com/rust-lang/rust/commit/5eaf31b7b2a1ffe892ac9fc14f49777cf64bb334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eaf31b7b2a1ffe892ac9fc14f49777cf64bb334/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3bc2c24e7ceb9a3b58b374e60c873127521c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3bc2c24e7ceb9a3b58b374e60c873127521c8d", "html_url": "https://github.com/rust-lang/rust/commit/8f3bc2c24e7ceb9a3b58b374e60c873127521c8d"}], "stats": {"total": 22, "additions": 3, "deletions": 19}, "files": [{"sha": "e828d8ae24874fd4773e2fdbf054dc1c3dd445b7", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5eaf31b7b2a1ffe892ac9fc14f49777cf64bb334/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eaf31b7b2a1ffe892ac9fc14f49777cf64bb334/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=5eaf31b7b2a1ffe892ac9fc14f49777cf64bb334", "patch": "@@ -751,25 +751,9 @@ pub trait ThinAttributesExt {\n \n impl ThinAttributesExt for ThinAttributes {\n     fn map_thin_attrs<F>(self, f: F) -> Self\n-        where F: FnOnce(Vec<Attribute>) -> Vec<Attribute> {\n-\n-        // This is kinda complicated... Ensure the function is\n-        // always called, and that None inputs or results are\n-        // correctly handled.\n-        if let Some(mut b) = self {\n-            use std::mem::replace;\n-\n-            let vec = replace(&mut *b, Vec::new());\n-            let vec = f(vec);\n-            if vec.len() == 0 {\n-                None\n-            } else {\n-                replace(&mut*b, vec);\n-                Some(b)\n-            }\n-        } else {\n-            f(Vec::new()).into_thin_attrs()\n-        }\n+        where F: FnOnce(Vec<Attribute>) -> Vec<Attribute>\n+    {\n+        f(self.map(|b| *b).unwrap_or(Vec::new())).into_thin_attrs()\n     }\n \n     fn prepend(self, attrs: ThinAttributes) -> Self {"}]}