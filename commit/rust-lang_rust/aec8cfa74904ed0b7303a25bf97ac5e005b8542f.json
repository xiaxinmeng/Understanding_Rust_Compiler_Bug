{"sha": "aec8cfa74904ed0b7303a25bf97ac5e005b8542f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYzhjZmE3NDkwNGVkMGI3MzAzYTI1YmY5N2FjNWUwMDViODU0MmY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-12-11T02:39:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-11T02:39:55Z"}, "message": "Merge pull request #2261 from topecongiro/replace-string-buffer\n\nReplace `StringBuffer` with `String`", "tree": {"sha": "c085831472f01ce194306a1191a892047ae2acc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c085831472f01ce194306a1191a892047ae2acc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aec8cfa74904ed0b7303a25bf97ac5e005b8542f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaLe/7CRBK7hj4Ov3rIwAAdHIIAFTR+25SFzbKxHOoMuDWdqgM\nKuFagR6WDnTflzpTCKqYcr8LFNyr3RivcO4lL6WvpSmG1jfSke9JjYE789MK7rpu\nlaLbt2JJAynebuzbjOX9TQ3hSgUcT3ZR1d8jQ6edpA2k/n3FMH4gp7e7V/RyUljj\nu52LICcs/iB9NUR5ZaQUoRtasOY0uNarUV6NCCeToC4RI+KKZ6BYb1GkUf+bClXS\ndS3oKoV7YZhCv2qR+pvYw30Io5dMEdHTLjuMsgdT88JsQrT8zGQwYibrecofCchP\nSt9jXfTIhd5hMTsHRqreB5Px8SOcKK+DjeNqRu7KGkEvQOBiCzsoc0zAaMPDLXo=\n=Y7wl\n-----END PGP SIGNATURE-----\n", "payload": "tree c085831472f01ce194306a1191a892047ae2acc7\nparent 3f7a27b547450b5e6c7a709fcd3ee89725fb50c7\nparent db29f9e0f7fd0c085a94b21eb9ac8dbdb8f6cfcd\nauthor Nick Cameron <nrc@ncameron.org> 1512959995 +1300\ncommitter GitHub <noreply@github.com> 1512959995 +1300\n\nMerge pull request #2261 from topecongiro/replace-string-buffer\n\nReplace `StringBuffer` with `String`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aec8cfa74904ed0b7303a25bf97ac5e005b8542f", "html_url": "https://github.com/rust-lang/rust/commit/aec8cfa74904ed0b7303a25bf97ac5e005b8542f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f7a27b547450b5e6c7a709fcd3ee89725fb50c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f7a27b547450b5e6c7a709fcd3ee89725fb50c7", "html_url": "https://github.com/rust-lang/rust/commit/3f7a27b547450b5e6c7a709fcd3ee89725fb50c7"}, {"sha": "db29f9e0f7fd0c085a94b21eb9ac8dbdb8f6cfcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/db29f9e0f7fd0c085a94b21eb9ac8dbdb8f6cfcd", "html_url": "https://github.com/rust-lang/rust/commit/db29f9e0f7fd0c085a94b21eb9ac8dbdb8f6cfcd"}], "stats": {"total": 70, "additions": 28, "deletions": 42}, "files": [{"sha": "b53820421c7093fad58c0da75fac54e2487e55c0", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=aec8cfa74904ed0b7303a25bf97ac5e005b8542f", "patch": "@@ -186,7 +186,6 @@ dependencies = [\n  \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"strings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -242,14 +241,6 @@ dependencies = [\n  \"serde 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"strings\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"syn\"\n version = \"0.11.11\"\n@@ -363,7 +354,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum serde_derive 1.0.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"652bc323d694dc925829725ec6c890156d8e70ae5202919869cb00fe2eff3788\"\n \"checksum serde_derive_internals 0.17.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"32f1926285523b2db55df263d2aa4eb69ddcfa7a7eade6430323637866b513ab\"\n \"checksum serde_json 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e4586746d1974a030c48919731ecffd0ed28d0c40749d0d18d43b3a7d6c9b20e\"\n-\"checksum strings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa481ee1bc42fc3df8195f91f7cb43cf8f2b71b48bac40bf5381cfaf7e481f3c\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n \"checksum term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fa63644f74ce96fbeb9b794f66aff2a52d601cbd5e80f4b97123e3899f4570f1\""}, {"sha": "79acfac5b2ef94b959966df3f833256f447806c5", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=aec8cfa74904ed0b7303a25bf97ac5e005b8542f", "patch": "@@ -38,7 +38,6 @@ serde_json = \"1.0\"\n unicode-segmentation = \"1.0.0\"\n regex = \"0.2\"\n term = \"0.4\"\n-strings = \"0.1\"\n diff = \"0.1\"\n log = \"0.3\"\n env_logger = \"0.4\""}, {"sha": "68e06f5c9acbfda7f0d639b35b366c9195cfe195", "filename": "src/filemap.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=aec8cfa74904ed0b7303a25bf97ac5e005b8542f", "patch": "@@ -13,19 +13,17 @@\n use std::fs::{self, File};\n use std::io::{self, BufWriter, Read, Write};\n \n-use strings::string_buffer::StringBuffer;\n-\n use checkstyle::{output_checkstyle_file, output_footer, output_header};\n use config::{Config, NewlineStyle, WriteMode};\n use rustfmt_diff::{make_diff, print_diff, Mismatch};\n \n // A map of the files of a crate, with their new content\n pub type FileMap = Vec<FileRecord>;\n \n-pub type FileRecord = (String, StringBuffer);\n+pub type FileRecord = (String, String);\n \n // Append a newline to the end of each file.\n-pub fn append_newline(s: &mut StringBuffer) {\n+pub fn append_newline(s: &mut String) {\n     s.push_str(\"\\n\");\n }\n \n@@ -47,11 +45,7 @@ where\n }\n \n // Prints all newlines either as `\\n` or as `\\r\\n`.\n-pub fn write_system_newlines<T>(\n-    writer: T,\n-    text: &StringBuffer,\n-    config: &Config,\n-) -> Result<(), io::Error>\n+pub fn write_system_newlines<T>(writer: T, text: &String, config: &Config) -> Result<(), io::Error>\n where\n     T: Write,\n {\n@@ -71,7 +65,7 @@ where\n     match style {\n         NewlineStyle::Unix => write!(writer, \"{}\", text),\n         NewlineStyle::Windows => {\n-            for (c, _) in text.chars() {\n+            for c in text.chars() {\n                 match c {\n                     '\\n' => write!(writer, \"\\r\\n\")?,\n                     '\\r' => continue,\n@@ -85,7 +79,7 @@ where\n }\n \n pub fn write_file<T>(\n-    text: &StringBuffer,\n+    text: &String,\n     filename: &str,\n     out: &mut T,\n     config: &Config,\n@@ -94,7 +88,7 @@ where\n     T: Write,\n {\n     fn source_and_formatted_text(\n-        text: &StringBuffer,\n+        text: &String,\n         filename: &str,\n         config: &Config,\n     ) -> Result<(String, String), io::Error> {\n@@ -109,7 +103,7 @@ where\n \n     fn create_diff(\n         filename: &str,\n-        text: &StringBuffer,\n+        text: &String,\n         config: &Config,\n     ) -> Result<Vec<Mismatch>, io::Error> {\n         let (ori, fmt) = source_and_formatted_text(text, filename, config)?;"}, {"sha": "a300e9614214424b514a571037f92839735ee2dc", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=aec8cfa74904ed0b7303a25bf97ac5e005b8542f", "patch": "@@ -21,7 +21,6 @@ extern crate serde;\n #[macro_use]\n extern crate serde_derive;\n extern crate serde_json;\n-extern crate strings;\n extern crate syntax;\n extern crate term;\n extern crate unicode_segmentation;\n@@ -35,7 +34,6 @@ use std::rc::Rc;\n \n use errors::{DiagnosticBuilder, Handler};\n use errors::emitter::{ColorConfig, EmitterWriter};\n-use strings::string_buffer::StringBuffer;\n use syntax::ast;\n use syntax::codemap::{CodeMap, FilePathMapping};\n use syntax::parse::{self, ParseSess};\n@@ -300,7 +298,7 @@ fn format_ast<F>(\n     mut after_file: F,\n ) -> Result<(FileMap, bool), io::Error>\n where\n-    F: FnMut(&str, &mut StringBuffer, &[(usize, usize)]) -> Result<bool, io::Error>,\n+    F: FnMut(&str, &mut String, &[(usize, usize)]) -> Result<bool, io::Error>,\n {\n     let mut result = FileMap::new();\n     // diff mode: check if any files are differing\n@@ -369,7 +367,7 @@ fn is_skipped_line(line_number: usize, skipped_range: &[(usize, usize)]) -> bool\n // FIXME(#209) warn on bad license\n // FIXME(#20) other stuff for parity with make tidy\n fn format_lines(\n-    text: &mut StringBuffer,\n+    text: &mut String,\n     name: &str,\n     skipped_range: &[(usize, usize)],\n     config: &Config,\n@@ -386,8 +384,10 @@ fn format_lines(\n     let mut prev_char: Option<char> = None;\n     let mut is_comment = false;\n     let mut line_buffer = String::with_capacity(config.max_width() * 2);\n+    let mut b = 0;\n \n-    for (c, b) in text.chars() {\n+    for c in text.chars() {\n+        b += 1;\n         if c == '\\r' {\n             continue;\n         }\n@@ -456,8 +456,8 @@ fn format_lines(\n     }\n \n     if newline_count > 1 {\n-        debug!(\"track truncate: {} {}\", text.len, newline_count);\n-        let line = text.len - newline_count + 1;\n+        debug!(\"track truncate: {} {}\", text.len(), newline_count);\n+        let line = text.len() - newline_count + 1;\n         text.truncate(line);\n     }\n "}, {"sha": "08fd5bd79e34a2a2932db2d91111a044b286385a", "filename": "src/missed_spans.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=aec8cfa74904ed0b7303a25bf97ac5e005b8542f", "patch": "@@ -17,12 +17,12 @@ use codemap::LineRangeUtils;\n use comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n use config::WriteMode;\n use shape::{Indent, Shape};\n-use utils::{count_newlines, mk_sp};\n+use utils::{count_newlines, last_line_width, mk_sp};\n use visitor::FmtVisitor;\n \n impl<'a> FmtVisitor<'a> {\n     fn output_at_start(&self) -> bool {\n-        self.buffer.len == 0\n+        self.buffer.len() == 0\n     }\n \n     // TODO these format_missing methods are ugly. Refactor and add unit tests\n@@ -86,7 +86,11 @@ impl<'a> FmtVisitor<'a> {\n \n     fn push_vertical_spaces(&mut self, mut newline_count: usize) {\n         // The buffer already has a trailing newline.\n-        let offset = if self.buffer.cur_offset() == 0 { 0 } else { 1 };\n+        let offset = if last_line_width(&self.buffer) == 0 {\n+            0\n+        } else {\n+            1\n+        };\n         let newline_upper_bound = self.config.blank_lines_upper_bound() + offset;\n         let newline_lower_bound = self.config.blank_lines_lower_bound() + offset;\n         if newline_count > newline_upper_bound {\n@@ -150,21 +154,21 @@ impl<'a> FmtVisitor<'a> {\n         }\n \n         if status.rewrite_next_comment {\n-            if fix_indent {\n+            let comment_indent = if fix_indent {\n                 if let Some('{') = last_char {\n                     self.push_str(\"\\n\");\n                 }\n                 let indent_str = self.block_indent.to_string(self.config);\n                 self.push_str(&indent_str);\n+                self.block_indent\n             } else {\n                 self.push_str(\" \");\n-            }\n-\n+                Indent::from_width(self.config, last_line_width(&self.buffer))\n+            };\n             let comment_width = ::std::cmp::min(\n                 self.config.comment_width(),\n                 self.config.max_width() - self.block_indent.width(),\n             );\n-            let comment_indent = Indent::from_width(self.config, self.buffer.cur_offset());\n             let comment_shape = Shape::legacy(comment_width, comment_indent);\n             let comment_str = rewrite_comment(subslice, false, comment_shape, self.config)\n                 .unwrap_or_else(|| String::from(subslice));"}, {"sha": "a7c33d2697c823959d757e38dce4c34b1ebf3685", "filename": "src/visitor.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec8cfa74904ed0b7303a25bf97ac5e005b8542f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=aec8cfa74904ed0b7303a25bf97ac5e005b8542f", "patch": "@@ -10,7 +10,6 @@\n \n use std::cmp;\n \n-use strings::string_buffer::StringBuffer;\n use syntax::{ast, visit};\n use syntax::attr::HasAttrs;\n use syntax::codemap::{self, BytePos, CodeMap, Pos, Span};\n@@ -74,7 +73,7 @@ impl<'a> SnippetProvider<'a> {\n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n     pub codemap: &'a CodeMap,\n-    pub buffer: StringBuffer,\n+    pub buffer: String,\n     pub last_pos: BytePos,\n     // FIXME: use an RAII util or closure for indenting\n     pub block_indent: Indent,\n@@ -252,7 +251,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     // The closing brace itself, however, should be indented at a shallower\n     // level.\n     fn close_block(&mut self, unindent_comment: bool) {\n-        let total_len = self.buffer.len;\n+        let total_len = self.buffer.len();\n         let chars_too_many = if unindent_comment {\n             0\n         } else if self.config.hard_tabs() {\n@@ -565,7 +564,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         FmtVisitor {\n             parse_session: parse_session,\n             codemap: parse_session.codemap(),\n-            buffer: StringBuffer::new(),\n+            buffer: String::with_capacity(snippet_provider.big_snippet.len() * 2),\n             last_pos: BytePos(0),\n             block_indent: Indent::empty(),\n             config: config,"}]}