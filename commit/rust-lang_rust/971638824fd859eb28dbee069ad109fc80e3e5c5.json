{"sha": "971638824fd859eb28dbee069ad109fc80e3e5c5", "node_id": "C_kwDOAAsO6NoAKDk3MTYzODgyNGZkODU5ZWIyOGRiZWUwNjlhZDEwOWZjODBlM2U1YzU", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-10-28T23:28:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-11-10T16:35:42Z"}, "message": "Use `target_family = \"wasm\"`", "tree": {"sha": "a7378f4ad38642295f0179925b27a9d50262e1ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7378f4ad38642295f0179925b27a9d50262e1ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/971638824fd859eb28dbee069ad109fc80e3e5c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/971638824fd859eb28dbee069ad109fc80e3e5c5", "html_url": "https://github.com/rust-lang/rust/commit/971638824fd859eb28dbee069ad109fc80e3e5c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/971638824fd859eb28dbee069ad109fc80e3e5c5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfb2f98e9e0bfbad2078b6632c1456c528824088", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb2f98e9e0bfbad2078b6632c1456c528824088", "html_url": "https://github.com/rust-lang/rust/commit/cfb2f98e9e0bfbad2078b6632c1456c528824088"}], "stats": {"total": 53, "additions": 18, "deletions": 35}, "files": [{"sha": "9c4cf89b6bc35cb00d6fa1c723cdbfea56c56ad6", "filename": "library/core/src/ffi.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fcore%2Fsrc%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fcore%2Fsrc%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi.rs?ref=971638824fd859eb28dbee069ad109fc80e3e5c5", "patch": "@@ -62,8 +62,7 @@ impl fmt::Debug for c_void {\n #[cfg(any(\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n     all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n-    target_arch = \"wasm32\",\n-    target_arch = \"wasm64\",\n+    target_family = \"wasm\",\n     target_arch = \"asmjs\",\n     windows\n ))]\n@@ -86,8 +85,7 @@ pub struct VaListImpl<'f> {\n #[cfg(any(\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n     all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n-    target_arch = \"wasm32\",\n-    target_arch = \"wasm64\",\n+    target_family = \"wasm\",\n     target_arch = \"asmjs\",\n     windows\n ))]\n@@ -187,8 +185,7 @@ pub struct VaList<'a, 'f: 'a> {\n             not(target_arch = \"x86_64\")\n         ),\n         all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n-        target_arch = \"wasm32\",\n-        target_arch = \"wasm64\",\n+        target_family = \"wasm\",\n         target_arch = \"asmjs\",\n         windows\n     ))]\n@@ -197,8 +194,7 @@ pub struct VaList<'a, 'f: 'a> {\n     #[cfg(all(\n         any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n         any(not(target_arch = \"aarch64\"), not(any(target_os = \"macos\", target_os = \"ios\"))),\n-        not(target_arch = \"wasm32\"),\n-        not(target_arch = \"wasm64\"),\n+        not(target_family = \"wasm\"),\n         not(target_arch = \"asmjs\"),\n         not(windows)\n     ))]\n@@ -210,8 +206,7 @@ pub struct VaList<'a, 'f: 'a> {\n #[cfg(any(\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n     all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n-    target_arch = \"wasm32\",\n-    target_arch = \"wasm64\",\n+    target_family = \"wasm\",\n     target_arch = \"asmjs\",\n     windows\n ))]\n@@ -232,8 +227,7 @@ impl<'f> VaListImpl<'f> {\n #[cfg(all(\n     any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n     any(not(target_arch = \"aarch64\"), not(any(target_os = \"macos\", target_os = \"ios\"))),\n-    not(target_arch = \"wasm32\"),\n-    not(target_arch = \"wasm64\"),\n+    not(target_family = \"wasm\"),\n     not(target_arch = \"asmjs\"),\n     not(windows)\n ))]"}, {"sha": "dec5e0b2123fc0b5e7846a3d6f38173cf4b80f5c", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=971638824fd859eb28dbee069ad109fc80e3e5c5", "patch": "@@ -117,8 +117,7 @@ pub unsafe extern \"C-unwind\" fn __rust_start_panic(_payload: *mut &mut dyn BoxMe\n pub mod personalities {\n     #[rustc_std_internal_symbol]\n     #[cfg(not(any(\n-        all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-        all(target_arch = \"wasm64\", not(target_os = \"emscripten\")),\n+        all(target_family = \"wasm\", not(target_os = \"emscripten\")),\n         all(target_os = \"windows\", target_env = \"gnu\", target_arch = \"x86_64\",),\n     )))]\n     pub extern \"C\" fn rust_eh_personality() {}"}, {"sha": "752ab185b8ede1d39c7553e9e4357585190cf05e", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=971638824fd859eb28dbee069ad109fc80e3e5c5", "patch": "@@ -35,7 +35,7 @@ features = ['read_core', 'elf', 'macho', 'pe', 'unaligned', 'archive']\n [dev-dependencies]\n rand = \"0.7\"\n \n-[target.'cfg(any(all(any(target_arch = \"wasm32\", target_arch = \"wasm64\"), not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n+[target.'cfg(any(all(target_family = \"wasm\", not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n dlmalloc = { version = \"0.2.1\", features = ['rustc-dep-of-std'] }\n \n [target.x86_64-fortanix-unknown-sgx.dependencies]"}, {"sha": "167c918c94cf92e3f9cef62c9d66b0872e07af5e", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=971638824fd859eb28dbee069ad109fc80e3e5c5", "patch": "@@ -40,7 +40,7 @@ cfg_if::cfg_if! {\n     } else if #[cfg(target_os = \"wasi\")] {\n         mod wasi;\n         pub use self::wasi::*;\n-    } else if #[cfg(any(target_arch = \"wasm32\", target_arch = \"wasm64\"))] {\n+    } else if #[cfg(target_family = \"wasm\")] {\n         mod wasm;\n         pub use self::wasm::*;\n     } else if #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))] {"}, {"sha": "804727fbc54d139ec37c8afb4b66e93e30d915b5", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=971638824fd859eb28dbee069ad109fc80e3e5c5", "patch": "@@ -40,8 +40,7 @@ cfg_if::cfg_if! {\n     if #[cfg(any(target_os = \"l4re\",\n                  target_os = \"hermit\",\n                  feature = \"restricted-std\",\n-                 all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n-                 all(target_arch = \"wasm64\", not(target_os = \"emscripten\")),\n+                 all(target_family = \"wasm\", not(target_os = \"emscripten\")),\n                  all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n         pub use crate::sys::net;\n     } else {"}, {"sha": "da297c920174674ca84b8017983f07bb3d318daa", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=971638824fd859eb28dbee069ad109fc80e3e5c5", "patch": "@@ -172,7 +172,7 @@ macro_rules! __thread_local_inner {\n             //\n             // FIXME(#84224) this should come after the `target_thread_local`\n             // block.\n-            #[cfg(all(any(target_arch = \"wasm32\", target_arch = \"wasm64\"), not(target_feature = \"atomics\")))]\n+            #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]\n             {\n                 static mut VAL: $t = $init;\n                 Some(&VAL)\n@@ -181,10 +181,7 @@ macro_rules! __thread_local_inner {\n             // If the platform has support for `#[thread_local]`, use it.\n             #[cfg(all(\n                 target_thread_local,\n-                not(all(\n-                    any(target_arch = \"wasm32\", target_arch = \"wasm64\"),\n-                    not(target_feature = \"atomics\"),\n-                )),\n+                not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n             ))]\n             {\n                 // If a dtor isn't needed we can do something \"very raw\" and\n@@ -241,10 +238,7 @@ macro_rules! __thread_local_inner {\n             // same implementation as below for os thread locals.\n             #[cfg(all(\n                 not(target_thread_local),\n-                not(all(\n-                    any(target_arch = \"wasm32\", target_arch = \"wasm64\"),\n-                    not(target_feature = \"atomics\"),\n-                )),\n+                not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n             ))]\n             {\n                 #[inline]\n@@ -291,21 +285,21 @@ macro_rules! __thread_local_inner {\n             // The issue of \"should enable on Windows sometimes\" is #84933\n             #[cfg_attr(not(windows), inline)]\n             unsafe fn __getit() -> $crate::option::Option<&'static $t> {\n-                #[cfg(all(any(target_arch = \"wasm32\", target_arch = \"wasm64\"), not(target_feature = \"atomics\")))]\n+                #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]\n                 static __KEY: $crate::thread::__StaticLocalKeyInner<$t> =\n                     $crate::thread::__StaticLocalKeyInner::new();\n \n                 #[thread_local]\n                 #[cfg(all(\n                     target_thread_local,\n-                    not(all(any(target_arch = \"wasm32\", target_arch = \"wasm64\"), not(target_feature = \"atomics\"))),\n+                    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n                 ))]\n                 static __KEY: $crate::thread::__FastLocalKeyInner<$t> =\n                     $crate::thread::__FastLocalKeyInner::new();\n \n                 #[cfg(all(\n                     not(target_thread_local),\n-                    not(all(any(target_arch = \"wasm32\", target_arch = \"wasm64\"), not(target_feature = \"atomics\"))),\n+                    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n                 ))]\n                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n                     $crate::thread::__OsLocalKeyInner::new();\n@@ -488,7 +482,7 @@ mod lazy {\n /// On some platforms like wasm there's no threads, so no need to generate\n /// thread locals and we can instead just use plain statics!\n #[doc(hidden)]\n-#[cfg(all(any(target_arch = \"wasm32\", target_arch = \"wasm64\"), not(target_feature = \"atomics\")))]\n+#[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]\n pub mod statik {\n     use super::lazy::LazyKeyInner;\n     use crate::fmt;"}, {"sha": "39b53b51bfa637468b7ca6147b4a2ec7b8a91f1e", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971638824fd859eb28dbee069ad109fc80e3e5c5/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=971638824fd859eb28dbee069ad109fc80e3e5c5", "patch": "@@ -200,10 +200,7 @@ pub use self::local::fast::Key as __FastLocalKeyInner;\n #[doc(hidden)]\n pub use self::local::os::Key as __OsLocalKeyInner;\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n-#[cfg(all(\n-    any(target_arch = \"wasm32\", target_arch = \"wasm64\"),\n-    not(target_feature = \"atomics\")\n-))]\n+#[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]\n #[doc(hidden)]\n pub use self::local::statik::Key as __StaticLocalKeyInner;\n "}]}