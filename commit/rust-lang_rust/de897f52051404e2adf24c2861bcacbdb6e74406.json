{"sha": "de897f52051404e2adf24c2861bcacbdb6e74406", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlODk3ZjUyMDUxNDA0ZTJhZGYyNGMyODYxYmNhY2JkYjZlNzQ0MDY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-07-10T20:15:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-07-10T20:22:27Z"}, "message": "rustc_expand: Remove redundant field from proc macro expander structures\n\nThis information is already available from `ExpnData`", "tree": {"sha": "62694e04fe9df990536db68b44480f0f67901c02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62694e04fe9df990536db68b44480f0f67901c02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de897f52051404e2adf24c2861bcacbdb6e74406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de897f52051404e2adf24c2861bcacbdb6e74406", "html_url": "https://github.com/rust-lang/rust/commit/de897f52051404e2adf24c2861bcacbdb6e74406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de897f52051404e2adf24c2861bcacbdb6e74406/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28f4dba4388c81a77b656c624e796f5b5c589ba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f4dba4388c81a77b656c624e796f5b5c589ba0", "html_url": "https://github.com/rust-lang/rust/commit/28f4dba4388c81a77b656c624e796f5b5c589ba0"}], "stats": {"total": 51, "additions": 18, "deletions": 33}, "files": [{"sha": "ba27f1033092807402f6a470e21efd051563cf32", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de897f52051404e2adf24c2861bcacbdb6e74406/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de897f52051404e2adf24c2861bcacbdb6e74406/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=de897f52051404e2adf24c2861bcacbdb6e74406", "patch": "@@ -19,7 +19,6 @@ use crate::deriving::*;\n \n use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtensionKind};\n use rustc_expand::proc_macro::BangProcMacro;\n-use rustc_span::def_id::LOCAL_CRATE;\n use rustc_span::symbol::sym;\n \n mod asm;\n@@ -113,8 +112,5 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand) {\n     }\n \n     let client = proc_macro::bridge::client::Client::expand1(proc_macro::quote);\n-    register(\n-        sym::quote,\n-        SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client, krate: LOCAL_CRATE })),\n-    );\n+    register(sym::quote, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })));\n }"}, {"sha": "3f84979ac05e762bbc26b4bd404c52b2352356a2", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de897f52051404e2adf24c2861bcacbdb6e74406/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de897f52051404e2adf24c2861bcacbdb6e74406/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=de897f52051404e2adf24c2861bcacbdb6e74406", "patch": "@@ -9,14 +9,12 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorReported;\n use rustc_parse::nt_to_tokenstream;\n use rustc_parse::parser::ForceCollect;\n-use rustc_span::def_id::CrateNum;\n use rustc_span::{Span, DUMMY_SP};\n \n const EXEC_STRATEGY: pm::bridge::server::SameThread = pm::bridge::server::SameThread;\n \n pub struct BangProcMacro {\n     pub client: pm::bridge::client::Client<fn(pm::TokenStream) -> pm::TokenStream>,\n-    pub krate: CrateNum,\n }\n \n impl base::ProcMacro for BangProcMacro {\n@@ -26,7 +24,7 @@ impl base::ProcMacro for BangProcMacro {\n         span: Span,\n         input: TokenStream,\n     ) -> Result<TokenStream, ErrorReported> {\n-        let server = proc_macro_server::Rustc::new(ecx, self.krate);\n+        let server = proc_macro_server::Rustc::new(ecx);\n         self.client.run(&EXEC_STRATEGY, server, input, ecx.ecfg.proc_macro_backtrace).map_err(|e| {\n             let mut err = ecx.struct_span_err(span, \"proc macro panicked\");\n             if let Some(s) = e.as_str() {\n@@ -40,7 +38,6 @@ impl base::ProcMacro for BangProcMacro {\n \n pub struct AttrProcMacro {\n     pub client: pm::bridge::client::Client<fn(pm::TokenStream, pm::TokenStream) -> pm::TokenStream>,\n-    pub krate: CrateNum,\n }\n \n impl base::AttrProcMacro for AttrProcMacro {\n@@ -51,7 +48,7 @@ impl base::AttrProcMacro for AttrProcMacro {\n         annotation: TokenStream,\n         annotated: TokenStream,\n     ) -> Result<TokenStream, ErrorReported> {\n-        let server = proc_macro_server::Rustc::new(ecx, self.krate);\n+        let server = proc_macro_server::Rustc::new(ecx);\n         self.client\n             .run(&EXEC_STRATEGY, server, annotation, annotated, ecx.ecfg.proc_macro_backtrace)\n             .map_err(|e| {\n@@ -67,7 +64,6 @@ impl base::AttrProcMacro for AttrProcMacro {\n \n pub struct ProcMacroDerive {\n     pub client: pm::bridge::client::Client<fn(pm::TokenStream) -> pm::TokenStream>,\n-    pub krate: CrateNum,\n }\n \n impl MultiItemModifier for ProcMacroDerive {\n@@ -101,7 +97,7 @@ impl MultiItemModifier for ProcMacroDerive {\n             nt_to_tokenstream(&item, &ecx.sess.parse_sess, CanSynthesizeMissingTokens::No)\n         };\n \n-        let server = proc_macro_server::Rustc::new(ecx, self.krate);\n+        let server = proc_macro_server::Rustc::new(ecx);\n         let stream =\n             match self.client.run(&EXEC_STRATEGY, server, input, ecx.ecfg.proc_macro_backtrace) {\n                 Ok(stream) => stream,"}, {"sha": "dbf42950eeb5d8bc6e044ace20e30670164cde90", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de897f52051404e2adf24c2861bcacbdb6e74406/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de897f52051404e2adf24c2861bcacbdb6e74406/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=de897f52051404e2adf24c2861bcacbdb6e74406", "patch": "@@ -368,7 +368,7 @@ pub(crate) struct Rustc<'a> {\n }\n \n impl<'a> Rustc<'a> {\n-    pub fn new(cx: &'a ExtCtxt<'_>, krate: CrateNum) -> Self {\n+    pub fn new(cx: &'a ExtCtxt<'_>) -> Self {\n         let expn_data = cx.current_expansion.id.expn_data();\n         let def_site = cx.with_def_site_ctxt(expn_data.def_site);\n         let call_site = cx.with_call_site_ctxt(expn_data.call_site);\n@@ -381,7 +381,7 @@ impl<'a> Rustc<'a> {\n             call_site,\n             mixed_site,\n             span_debug: cx.ecfg.span_debug,\n-            krate,\n+            krate: expn_data.macro_def_id.unwrap().krate,\n             expn_id: cx.current_expansion.id,\n             rebased_spans: FxHashMap::default(),\n         }"}, {"sha": "6ecd4a512e9b40e5b66b56d6409688d36decb029", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/de897f52051404e2adf24c2861bcacbdb6e74406/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de897f52051404e2adf24c2861bcacbdb6e74406/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=de897f52051404e2adf24c2861bcacbdb6e74406", "patch": "@@ -725,37 +725,30 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .decode((self, sess))\n     }\n \n-    fn load_proc_macro(&self, def_id: DefId, sess: &Session) -> SyntaxExtension {\n-        let (name, kind, helper_attrs) = match *self.raw_proc_macro(def_id.index) {\n+    fn load_proc_macro(&self, id: DefIndex, sess: &Session) -> SyntaxExtension {\n+        let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {\n             ProcMacro::CustomDerive { trait_name, attributes, client } => {\n                 let helper_attrs =\n                     attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();\n                 (\n                     trait_name,\n-                    SyntaxExtensionKind::Derive(Box::new(ProcMacroDerive {\n-                        client,\n-                        krate: def_id.krate,\n-                    })),\n+                    SyntaxExtensionKind::Derive(Box::new(ProcMacroDerive { client })),\n                     helper_attrs,\n                 )\n             }\n-            ProcMacro::Attr { name, client } => (\n-                name,\n-                SyntaxExtensionKind::Attr(Box::new(AttrProcMacro { client, krate: def_id.krate })),\n-                Vec::new(),\n-            ),\n-            ProcMacro::Bang { name, client } => (\n-                name,\n-                SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client, krate: def_id.krate })),\n-                Vec::new(),\n-            ),\n+            ProcMacro::Attr { name, client } => {\n+                (name, SyntaxExtensionKind::Attr(Box::new(AttrProcMacro { client })), Vec::new())\n+            }\n+            ProcMacro::Bang { name, client } => {\n+                (name, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })), Vec::new())\n+            }\n         };\n \n-        let attrs: Vec<_> = self.get_item_attrs(def_id.index, sess).collect();\n+        let attrs: Vec<_> = self.get_item_attrs(id, sess).collect();\n         SyntaxExtension::new(\n             sess,\n             kind,\n-            self.get_span(def_id.index, sess),\n+            self.get_span(id, sess),\n             helper_attrs,\n             self.root.edition,\n             Symbol::intern(name),"}, {"sha": "473ae4eb386413725b0dce32629128a4b5d3c89d", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de897f52051404e2adf24c2861bcacbdb6e74406/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de897f52051404e2adf24c2861bcacbdb6e74406/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=de897f52051404e2adf24c2861bcacbdb6e74406", "patch": "@@ -411,7 +411,7 @@ impl CStore {\n \n         let data = self.get_crate_data(id.krate);\n         if data.root.is_proc_macro_crate() {\n-            return LoadedMacro::ProcMacro(data.load_proc_macro(id, sess));\n+            return LoadedMacro::ProcMacro(data.load_proc_macro(id.index, sess));\n         }\n \n         let span = data.get_span(id.index, sess);"}]}