{"sha": "9e613c74be901b86860aa2f6987228e6328e7a18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNjEzYzc0YmU5MDFiODY4NjBhYTJmNjk4NzIyOGU2MzI4ZTdhMTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T06:13:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-10T06:13:22Z"}, "message": "Rollup merge of #63399 - estebank:vec-in-pat, r=Centril\n\nMore explicit diagnostic when using a `vec![]` in a pattern\n\n```\nerror: unexpected `(` after qualified path\n  --> $DIR/vec-macro-in-pattern.rs:3:14\n   |\nLL |         Some(vec![x]) => (),\n   |              ^^^^^^^\n   |              |\n   |              unexpected `(` after qualified path\n   |              in this macro invocation\n   |              use a slice pattern here instead\n   |\n   = help: for more information, see https://doc.rust-lang.org/edition-guide/rust-2018/slice-patterns.html\n   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n```\n\nFix #61933.", "tree": {"sha": "0ef9fcd21d37b54db2b07b855e8dcba28880616e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ef9fcd21d37b54db2b07b855e8dcba28880616e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e613c74be901b86860aa2f6987228e6328e7a18", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdTmCDCRBK7hj4Ov3rIwAAdHIIAFPHq+J2+Cu0Tj2OUi71ddCS\nea/KI7/Nmd50cevt1XjvFfpfrn8TYXBHC2R9ZW/8nq0yQnIzxfO2RZyr0vEKaZrs\nNk10bqq+P7niUehUFcs8i39Dtr7fGyPmL3eoROVK7gVmmzGyL9sNsu2nLvl09XGy\npnHolxbaFXT9NO6S/gjrGgSwSauo13R/34giCkAY07KJFmqk0y8x4ICpCGxteMUL\npKSul9RQ9TEqFda+0x1oDyzFe+v6TB3atauC5ZO90OkXZl7sBZAK7ENhzgKL807M\nZfAMF95TmDvvotTob5kQhmaPf4yGUFID4SfrP8NAr2AbTP5hZqs2LTCz8DIfX/A=\n=xtRL\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ef9fcd21d37b54db2b07b855e8dcba28880616e\nparent 5ed195baaa7d8753053c13a8bb932385becf64a6\nparent 75c5ad2e827a077c3738dee11d9e0dc99962f384\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565417602 +0200\ncommitter GitHub <noreply@github.com> 1565417602 +0200\n\nRollup merge of #63399 - estebank:vec-in-pat, r=Centril\n\nMore explicit diagnostic when using a `vec![]` in a pattern\n\n```\nerror: unexpected `(` after qualified path\n  --> $DIR/vec-macro-in-pattern.rs:3:14\n   |\nLL |         Some(vec![x]) => (),\n   |              ^^^^^^^\n   |              |\n   |              unexpected `(` after qualified path\n   |              in this macro invocation\n   |              use a slice pattern here instead\n   |\n   = help: for more information, see https://doc.rust-lang.org/edition-guide/rust-2018/slice-patterns.html\n   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n```\n\nFix #61933.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e613c74be901b86860aa2f6987228e6328e7a18", "html_url": "https://github.com/rust-lang/rust/commit/9e613c74be901b86860aa2f6987228e6328e7a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e613c74be901b86860aa2f6987228e6328e7a18/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed195baaa7d8753053c13a8bb932385becf64a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed195baaa7d8753053c13a8bb932385becf64a6", "html_url": "https://github.com/rust-lang/rust/commit/5ed195baaa7d8753053c13a8bb932385becf64a6"}, {"sha": "75c5ad2e827a077c3738dee11d9e0dc99962f384", "url": "https://api.github.com/repos/rust-lang/rust/commits/75c5ad2e827a077c3738dee11d9e0dc99962f384", "html_url": "https://github.com/rust-lang/rust/commit/75c5ad2e827a077c3738dee11d9e0dc99962f384"}], "stats": {"total": 89, "additions": 81, "deletions": 8}, "files": [{"sha": "9a3195b1165b10d17798ae7f6f669aa56e7f0dc4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9e613c74be901b86860aa2f6987228e6328e7a18", "patch": "@@ -6,6 +6,7 @@ use crate::config::StripUnconfigured;\n use crate::ext::base::*;\n use crate::ext::proc_macro::collect_derives;\n use crate::ext::hygiene::{ExpnId, SyntaxContext, ExpnInfo, ExpnKind};\n+use crate::ext::tt::macro_rules::annotate_err_with_kind;\n use crate::ext::placeholders::{placeholder, PlaceholderExpander};\n use crate::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use crate::mut_visit::*;\n@@ -686,12 +687,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         );\n     }\n \n-    fn parse_ast_fragment(&mut self,\n-                          toks: TokenStream,\n-                          kind: AstFragmentKind,\n-                          path: &Path,\n-                          span: Span)\n-                          -> AstFragment {\n+    fn parse_ast_fragment(\n+        &mut self,\n+        toks: TokenStream,\n+        kind: AstFragmentKind,\n+        path: &Path,\n+        span: Span,\n+    ) -> AstFragment {\n         let mut parser = self.cx.new_parser_from_tts(&toks.into_trees().collect::<Vec<_>>());\n         match parser.parse_ast_fragment(kind, false) {\n             Ok(fragment) => {\n@@ -700,6 +702,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             }\n             Err(mut err) => {\n                 err.set_span(span);\n+                annotate_err_with_kind(&mut err, kind, span);\n                 err.emit();\n                 self.cx.trace_macros_diag();\n                 kind.dummy(span)"}, {"sha": "b057a9ad44d0bd966a71ab5998211d9baf36ac7a", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=9e613c74be901b86860aa2f6987228e6328e7a18", "patch": "@@ -17,7 +17,7 @@ use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use crate::{ast, attr, attr::TransparencyError};\n \n-use errors::FatalError;\n+use errors::{DiagnosticBuilder, FatalError};\n use log::debug;\n use syntax_pos::Span;\n \n@@ -43,6 +43,18 @@ pub struct ParserAnyMacro<'a> {\n     arm_span: Span,\n }\n \n+pub fn annotate_err_with_kind(err: &mut DiagnosticBuilder<'_>, kind: AstFragmentKind, span: Span) {\n+    match kind {\n+        AstFragmentKind::Ty => {\n+            err.span_label(span, \"this macro call doesn't expand to a type\");\n+        }\n+        AstFragmentKind::Pat => {\n+            err.span_label(span, \"this macro call doesn't expand to a pattern\");\n+        }\n+        _ => {}\n+    };\n+}\n+\n impl<'a> ParserAnyMacro<'a> {\n     pub fn make(mut self: Box<ParserAnyMacro<'a>>, kind: AstFragmentKind) -> AstFragment {\n         let ParserAnyMacro { site_span, macro_ident, ref mut parser, arm_span } = *self;\n@@ -70,6 +82,32 @@ impl<'a> ParserAnyMacro<'a> {\n             } else if !parser.sess.source_map().span_to_filename(parser.token.span).is_real() {\n                 e.span_label(site_span, \"in this macro invocation\");\n             }\n+            match kind {\n+                AstFragmentKind::Pat if macro_ident.name == sym::vec => {\n+                    let mut suggestion = None;\n+                    if let Ok(code) = parser.sess.source_map().span_to_snippet(site_span) {\n+                        if let Some(bang) = code.find('!') {\n+                            suggestion = Some(code[bang + 1..].to_string());\n+                        }\n+                    }\n+                    if let Some(suggestion) = suggestion {\n+                        e.span_suggestion(\n+                            site_span,\n+                            \"use a slice pattern here instead\",\n+                            suggestion,\n+                            Applicability::MachineApplicable,\n+                        );\n+                    } else {\n+                        e.span_label(\n+                            site_span,\n+                            \"use a slice pattern here instead\",\n+                        );\n+                    }\n+                    e.help(\"for more information, see https://doc.rust-lang.org/edition-guide/\\\n+                            rust-2018/slice-patterns.html\");\n+                }\n+                _ => annotate_err_with_kind(&mut e, kind, site_span),\n+            };\n             e\n         }));\n "}, {"sha": "6e91201405cc69dbc989567ed08f25f02f1d2dd1", "filename": "src/test/ui/proc-macro/lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr?ref=9e613c74be901b86860aa2f6987228e6328e7a18", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `'`\n   --> $DIR/lifetimes.rs:9:10\n    |\n LL | type A = single_quote_alone!();\n-   |          ^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^^^^ this macro call doesn't expand to a type\n \n error: aborting due to previous error\n "}, {"sha": "e1695d6820a817d3ba6d5e4501484872579886c6", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.fixed?ref=9e613c74be901b86860aa2f6987228e6328e7a18", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+fn main() {\n+    // everything after `.as_ref` should be suggested\n+    match Some(vec![3]).as_ref().map(|v| v.as_slice()) {\n+        Some([_x]) => (), //~ ERROR unexpected `(` after qualified path\n+        _ => (),\n+    }\n+}"}, {"sha": "4843629fbcf904788e0567d86717418ce7005794", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.rs?ref=9e613c74be901b86860aa2f6987228e6328e7a18", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+fn main() {\n+    // everything after `.as_ref` should be suggested\n+    match Some(vec![3]).as_ref().map(|v| v.as_slice()) {\n+        Some(vec![_x]) => (), //~ ERROR unexpected `(` after qualified path\n+        _ => (),\n+    }\n+}"}, {"sha": "59ca8ebbf63399eb34928b67a59563c6521c7f39", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr?ref=9e613c74be901b86860aa2f6987228e6328e7a18", "patch": "@@ -0,0 +1,15 @@\n+error: unexpected `(` after qualified path\n+  --> $DIR/vec-macro-in-pattern.rs:5:14\n+   |\n+LL |         Some(vec![_x]) => (),\n+   |              ^^^^^^^^\n+   |              |\n+   |              unexpected `(` after qualified path\n+   |              in this macro invocation\n+   |              help: use a slice pattern here instead: `[_x]`\n+   |\n+   = help: for more information, see https://doc.rust-lang.org/edition-guide/rust-2018/slice-patterns.html\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "2f052341faead87e832f4591e779b231ec92c646", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e613c74be901b86860aa2f6987228e6328e7a18/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=9e613c74be901b86860aa2f6987228e6328e7a18", "patch": "@@ -6,6 +6,7 @@ LL |     let _ = Option:Some(vec![0, 1]);\n    |                   |     |\n    |                   |     expected type\n    |                   |     in this macro invocation\n+   |                   |     this macro call doesn't expand to a type\n    |                   help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`"}]}