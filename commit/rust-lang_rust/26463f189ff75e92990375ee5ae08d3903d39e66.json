{"sha": "26463f189ff75e92990375ee5ae08d3903d39e66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NDYzZjE4OWZmNzVlOTI5OTAzNzVlZTVhZTA4ZDM5MDNkMzllNjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-21T15:57:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-21T15:57:33Z"}, "message": "publish gen_lsp_server 0.2", "tree": {"sha": "3bc9913361e9810ed7f9cb5e27f6b19c145431d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bc9913361e9810ed7f9cb5e27f6b19c145431d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26463f189ff75e92990375ee5ae08d3903d39e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26463f189ff75e92990375ee5ae08d3903d39e66", "html_url": "https://github.com/rust-lang/rust/commit/26463f189ff75e92990375ee5ae08d3903d39e66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26463f189ff75e92990375ee5ae08d3903d39e66/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f03c0781224faaa6e538094e34f1f6591689800", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f03c0781224faaa6e538094e34f1f6591689800", "html_url": "https://github.com/rust-lang/rust/commit/9f03c0781224faaa6e538094e34f1f6591689800"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "d8ada0757b8531df893af9af3dff3046b9daebfc", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26463f189ff75e92990375ee5ae08d3903d39e66/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/26463f189ff75e92990375ee5ae08d3903d39e66/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=26463f189ff75e92990375ee5ae08d3903d39e66", "patch": "@@ -487,7 +487,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"gen_lsp_server\"\n-version = \"0.1.0\"\n+version = \"0.2.0\"\n dependencies = [\n  \"crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1165,7 +1165,7 @@ dependencies = [\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flexi_logger 0.11.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gen_lsp_server 0.1.0\",\n+ \"gen_lsp_server 0.2.0\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lsp-types 0.57.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "ba8bfdbd39d0eb4e2188b0e398e9ca88cb6cef26", "filename": "crates/gen_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26463f189ff75e92990375ee5ae08d3903d39e66/crates%2Fgen_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/26463f189ff75e92990375ee5ae08d3903d39e66/crates%2Fgen_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2FCargo.toml?ref=26463f189ff75e92990375ee5ae08d3903d39e66", "patch": "@@ -1,7 +1,7 @@\n [package]\n edition = \"2018\"\n name = \"gen_lsp_server\"\n-version = \"0.1.0\"\n+version = \"0.2.0\"\n authors = [\"rust-analyzer developers\"]\n repository = \"https://github.com/rust-analyzer/rust-analyzer\"\n license = \"MIT OR Apache-2.0\""}, {"sha": "908c00209bbe238da94de031aa7105b13dfffdf5", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/26463f189ff75e92990375ee5ae08d3903d39e66/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26463f189ff75e92990375ee5ae08d3903d39e66/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=26463f189ff75e92990375ee5ae08d3903d39e66", "patch": "@@ -78,23 +78,24 @@ pub enum Obligation {\n \n /// Check using Chalk whether trait is implemented for given parameters including `Self` type.\n pub(crate) fn implements_query(\n-    db: &impl HirDatabase,\n-    krate: Crate,\n-    trait_ref: Canonical<TraitRef>,\n+    _db: &impl HirDatabase,\n+    _krate: Crate,\n+    _trait_ref: Canonical<TraitRef>,\n ) -> Option<Solution> {\n-    let _p = profile(\"implements_query\");\n-    let goal: chalk_ir::Goal = trait_ref.value.to_chalk(db).cast();\n-    debug!(\"goal: {:?}\", goal);\n-    let env = chalk_ir::Environment::new();\n-    let in_env = chalk_ir::InEnvironment::new(&env, goal);\n-    let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);\n-    let canonical =\n-        chalk_ir::Canonical { value: in_env, binders: vec![parameter; trait_ref.num_vars] };\n-    // We currently don't deal with universes (I think / hope they're not yet\n-    // relevant for our use cases?)\n-    let u_canonical = chalk_ir::UCanonical { canonical, universes: 1 };\n-    let solution = solve(db, krate, &u_canonical);\n-    solution.map(|solution| solution_from_chalk(db, solution))\n+    return None;\n+    // let _p = profile(\"implements_query\");\n+    // let goal: chalk_ir::Goal = trait_ref.value.to_chalk(db).cast();\n+    // debug!(\"goal: {:?}\", goal);\n+    // let env = chalk_ir::Environment::new();\n+    // let in_env = chalk_ir::InEnvironment::new(&env, goal);\n+    // let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);\n+    // let canonical =\n+    //     chalk_ir::Canonical { value: in_env, binders: vec![parameter; trait_ref.num_vars] };\n+    // // We currently don't deal with universes (I think / hope they're not yet\n+    // // relevant for our use cases?)\n+    // let u_canonical = chalk_ir::UCanonical { canonical, universes: 1 };\n+    // let solution = solve(db, krate, &u_canonical);\n+    // solution.map(|solution| solution_from_chalk(db, solution))\n }\n \n fn solution_from_chalk(db: &impl HirDatabase, solution: chalk_solve::Solution) -> Solution {"}]}