{"sha": "576661cb5f4cdcf2ae56f5b210db4b2ef19e0184", "node_id": "C_kwDOAAsO6NoAKDU3NjY2MWNiNWY0Y2RjZjJhZTU2ZjViMjEwZGI0YjJlZjE5ZTAxODQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-04T09:53:34Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-21T19:13:43Z"}, "message": "Rustdoc fallout.", "tree": {"sha": "de4de687d91e579126dcdaf223cf3e82d4e29788", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de4de687d91e579126dcdaf223cf3e82d4e29788"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/576661cb5f4cdcf2ae56f5b210db4b2ef19e0184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/576661cb5f4cdcf2ae56f5b210db4b2ef19e0184", "html_url": "https://github.com/rust-lang/rust/commit/576661cb5f4cdcf2ae56f5b210db4b2ef19e0184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/576661cb5f4cdcf2ae56f5b210db4b2ef19e0184/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7437136f0eac3f2ee58de08a784b1e9eae42b619", "url": "https://api.github.com/repos/rust-lang/rust/commits/7437136f0eac3f2ee58de08a784b1e9eae42b619", "html_url": "https://github.com/rust-lang/rust/commit/7437136f0eac3f2ee58de08a784b1e9eae42b619"}], "stats": {"total": 67, "additions": 35, "deletions": 32}, "files": [{"sha": "9e5c4afc717a7162bc2d33856a00421f46305e7b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/576661cb5f4cdcf2ae56f5b210db4b2ef19e0184/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576661cb5f4cdcf2ae56f5b210db4b2ef19e0184/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=576661cb5f4cdcf2ae56f5b210db4b2ef19e0184", "patch": "@@ -222,10 +222,15 @@ impl<'tcx> Clean<'tcx, Option<Lifetime>> for ty::Region<'tcx> {\n         match **self {\n             ty::ReStatic => Some(Lifetime::statik()),\n             ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrNamed(_, name), .. }) => {\n-                Some(Lifetime(name))\n+                if name != kw::UnderscoreLifetime { Some(Lifetime(name)) } else { None }\n+            }\n+            ty::ReEarlyBound(ref data) => {\n+                if data.name != kw::UnderscoreLifetime {\n+                    Some(Lifetime(data.name))\n+                } else {\n+                    None\n+                }\n             }\n-            ty::ReEarlyBound(ref data) => Some(Lifetime(data.name)),\n-\n             ty::ReLateBound(..)\n             | ty::ReFree(..)\n             | ty::ReVar(..)\n@@ -530,29 +535,25 @@ fn clean_generic_param<'tcx>(\n     GenericParamDef { name, kind }\n }\n \n+/// Synthetic type-parameters are inserted after normal ones.\n+/// In order for normal parameters to be able to refer to synthetic ones,\n+/// scans them first.\n+fn is_impl_trait(param: &hir::GenericParam<'_>) -> bool {\n+    match param.kind {\n+        hir::GenericParamKind::Type { synthetic, .. } => synthetic,\n+        _ => false,\n+    }\n+}\n+\n+/// This can happen for `async fn`, e.g. `async fn f<'_>(&'_ self)`.\n+///\n+/// See `lifetime_to_generic_param` in `rustc_ast_lowering` for more information.\n+fn is_elided_lifetime(param: &hir::GenericParam<'_>) -> bool {\n+    matches!(param.kind, hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Elided })\n+}\n+\n impl<'tcx> Clean<'tcx, Generics> for hir::Generics<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> Generics {\n-        // Synthetic type-parameters are inserted after normal ones.\n-        // In order for normal parameters to be able to refer to synthetic ones,\n-        // scans them first.\n-        fn is_impl_trait(param: &hir::GenericParam<'_>) -> bool {\n-            match param.kind {\n-                hir::GenericParamKind::Type { synthetic, .. } => synthetic,\n-                _ => false,\n-            }\n-        }\n-        /// This can happen for `async fn`, e.g. `async fn f<'_>(&'_ self)`.\n-        ///\n-        /// See [`lifetime_to_generic_param`] in [`rustc_ast_lowering`] for more information.\n-        ///\n-        /// [`lifetime_to_generic_param`]: rustc_ast_lowering::LoweringContext::lifetime_to_generic_param\n-        fn is_elided_lifetime(param: &hir::GenericParam<'_>) -> bool {\n-            matches!(\n-                param.kind,\n-                hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Elided }\n-            )\n-        }\n-\n         let impl_trait_params = self\n             .params\n             .iter()\n@@ -991,6 +992,7 @@ impl<'tcx> Clean<'tcx, PolyTrait> for hir::PolyTraitRef<'tcx> {\n             generic_params: self\n                 .bound_generic_params\n                 .iter()\n+                .filter(|p| !is_elided_lifetime(p))\n                 .map(|x| clean_generic_param(cx, None, x))\n                 .collect(),\n         }\n@@ -1865,8 +1867,12 @@ impl<'tcx> Clean<'tcx, BareFunctionDecl> for hir::BareFnTy<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> BareFunctionDecl {\n         let (generic_params, decl) = enter_impl_trait(cx, |cx| {\n             // NOTE: generics must be cleaned before args\n-            let generic_params =\n-                self.generic_params.iter().map(|x| clean_generic_param(cx, None, x)).collect();\n+            let generic_params = self\n+                .generic_params\n+                .iter()\n+                .filter(|p| !is_elided_lifetime(p))\n+                .map(|x| clean_generic_param(cx, None, x))\n+                .collect();\n             let args = clean_args_from_types_and_names(cx, self.decl.inputs, self.param_names);\n             let decl = clean_fn_decl_with_args(cx, self.decl, args);\n             (generic_params, decl)"}, {"sha": "16574f94c00e9e07ed48f68995d0679d943e3a06", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/576661cb5f4cdcf2ae56f5b210db4b2ef19e0184/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/576661cb5f4cdcf2ae56f5b210db4b2ef19e0184/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=576661cb5f4cdcf2ae56f5b210db4b2ef19e0184", "patch": "@@ -84,12 +84,9 @@ pub(crate) fn substs_to_args<'tcx>(\n     let mut ret_val =\n         Vec::with_capacity(substs.len().saturating_sub(if skip_first { 1 } else { 0 }));\n     ret_val.extend(substs.iter().filter_map(|kind| match kind.unpack() {\n-        GenericArgKind::Lifetime(lt) => match *lt {\n-            ty::ReLateBound(_, ty::BoundRegion { kind: ty::BrAnon(_), .. }) => {\n-                Some(GenericArg::Lifetime(Lifetime::elided()))\n-            }\n-            _ => lt.clean(cx).map(GenericArg::Lifetime),\n-        },\n+        GenericArgKind::Lifetime(lt) => {\n+            Some(GenericArg::Lifetime(lt.clean(cx).unwrap_or(Lifetime::elided())))\n+        }\n         GenericArgKind::Type(_) if skip_first => {\n             skip_first = false;\n             None"}]}