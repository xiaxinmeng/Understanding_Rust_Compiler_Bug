{"sha": "4afea69090b5501c17b16957d090658a1b3c2216", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZmVhNjkwOTBiNTUwMWMxN2IxNjk1N2QwOTA2NThhMWIzYzIyMTY=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-04-10T20:22:58Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2021-04-10T22:18:38Z"}, "message": "Allow setting `target_family` to multiple values\n\nThis enables us to set more generic labels shared between targets. For\nexample `target_family=\"wasm\"` across all targets that are conceptually\n\"wasm\".\n\nSee https://github.com/rust-lang/reference/pull/1006", "tree": {"sha": "243eec560a86fccff943c5c0c62f06f427cb8417", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/243eec560a86fccff943c5c0c62f06f427cb8417"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4afea69090b5501c17b16957d090658a1b3c2216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4afea69090b5501c17b16957d090658a1b3c2216", "html_url": "https://github.com/rust-lang/rust/commit/4afea69090b5501c17b16957d090658a1b3c2216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4afea69090b5501c17b16957d090658a1b3c2216/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72c63de2ccf8445bfe27dcfb4f712bc771da1b15", "url": "https://api.github.com/repos/rust-lang/rust/commits/72c63de2ccf8445bfe27dcfb4f712bc771da1b15", "html_url": "https://github.com/rust-lang/rust/commit/72c63de2ccf8445bfe27dcfb4f712bc771da1b15"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "ad26c73162c908e98edd3e8fd8cb6d317969824f", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -813,7 +813,7 @@ pub fn default_configuration(sess: &Session) -> CrateConfig {\n     ret.reserve(6); // the minimum number of insertions\n     // Target bindings.\n     ret.insert((sym::target_os, Some(Symbol::intern(os))));\n-    if let Some(ref fam) = sess.target.os_family {\n+    for fam in &sess.target.families {\n         ret.insert((sym::target_family, Some(Symbol::intern(fam))));\n         if fam == \"windows\" {\n             ret.insert((sym::windows, None));"}, {"sha": "bc2ec6709011a6cacb6db75cb30ae0e4cc3bdd60", "filename": "compiler/rustc_target/src/spec/apple_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fapple_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -23,7 +23,7 @@ pub fn opts(os: &str) -> TargetOptions {\n         function_sections: false,\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         is_like_osx: true,\n         dwarf_version: Some(2),\n         has_rpath: true,"}, {"sha": "fb94498c131fd38283062d398271ccdf02c0727e", "filename": "compiler/rustc_target/src/spec/dragonfly_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fdragonfly_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -5,7 +5,7 @@ pub fn opts() -> TargetOptions {\n         os: \"dragonfly\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "5d3c28e5f29c9d80a19675ff9f85d5ff4ce830be", "filename": "compiler/rustc_target/src/spec/freebsd_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffreebsd_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -5,7 +5,7 @@ pub fn opts() -> TargetOptions {\n         os: \"freebsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "13264dffeb4edd955caaf67e80247fc95ff07d3a", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -25,7 +25,7 @@ pub fn opts() -> TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         is_like_fuchsia: true,\n         linker_is_gnu: true,\n         pre_link_args,"}, {"sha": "fae56f6a82dc8e7222b736c573166601f06a9045", "filename": "compiler/rustc_target/src/spec/haiku_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhaiku_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -5,7 +5,7 @@ pub fn opts() -> TargetOptions {\n         os: \"haiku\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         relro_level: RelroLevel::Full,\n         linker_is_gnu: true,\n         ..Default::default()"}, {"sha": "2e365d210f3f62356498e666dd010bf286b75a04", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -20,7 +20,7 @@ pub fn opts() -> TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         is_like_solaris: true,\n         limit_rdylib_exports: false, // Linker doesn't support this\n         eliminate_frame_pointer: false,"}, {"sha": "65c343a5f2169b07e645c79c42935a56642e5c22", "filename": "compiler/rustc_target/src/spec/l4re_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fl4re_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -20,7 +20,7 @@ pub fn opts() -> TargetOptions {\n         executables: true,\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"ld\".to_string()),\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         ..Default::default()\n     }\n }"}, {"sha": "184659e22d98693dabc233c64676ab709af615dd", "filename": "compiler/rustc_target/src/spec/linux_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Flinux_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -5,7 +5,7 @@ pub fn opts() -> TargetOptions {\n         os: \"linux\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "2223237143b8f82563be38ab59323b0581c58f65", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -1042,8 +1042,12 @@ pub struct TargetOptions {\n     pub staticlib_prefix: String,\n     /// String to append to the name of every static library. Defaults to \".a\".\n     pub staticlib_suffix: String,\n-    /// OS family to use for conditional compilation. Valid options: \"unix\", \"windows\".\n-    pub os_family: Option<String>,\n+    /// Values of the `target_family` cfg set for this target.\n+    ///\n+    /// Common options are: \"unix\", \"windows\". Defaults to no families.\n+    ///\n+    /// See https://doc.rust-lang.org/reference/conditional-compilation.html#target_family\n+    pub families: Vec<String>,\n     /// Whether the target toolchain's ABI supports returning small structs as an integer.\n     pub abi_return_struct_as_int: bool,\n     /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n@@ -1293,7 +1297,7 @@ impl Default for TargetOptions {\n             exe_suffix: String::new(),\n             staticlib_prefix: \"lib\".to_string(),\n             staticlib_suffix: \".a\".to_string(),\n-            os_family: None,\n+            families: Vec::new(),\n             abi_return_struct_as_int: false,\n             is_like_osx: false,\n             is_like_solaris: false,\n@@ -1605,14 +1609,6 @@ impl Target {\n                         .map(|s| s.to_string() );\n                 }\n             } );\n-            ($key_name:ident = $json_name:expr, optional) => ( {\n-                let name = $json_name;\n-                if let Some(o) = obj.find(name) {\n-                    base.$key_name = o\n-                        .as_string()\n-                        .map(|s| s.to_string() );\n-                }\n-            } );\n             ($key_name:ident, LldFlavor) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1759,6 +1755,16 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, TargetFamilies) => ( {\n+                let value = obj.find(\"target-family\");\n+                if let Some(v) = value.and_then(Json::as_array) {\n+                    base.$key_name = v.iter()\n+                        .map(|a| a.as_string().unwrap().to_string())\n+                        .collect();\n+                } else if let Some(v) = value.and_then(Json::as_string) {\n+                    base.$key_name = vec![v.to_string()];\n+                }\n+            } );\n         }\n \n         if let Some(s) = obj.find(\"target-endian\").and_then(Json::as_string) {\n@@ -1802,7 +1808,7 @@ impl Target {\n         key!(exe_suffix);\n         key!(staticlib_prefix);\n         key!(staticlib_suffix);\n-        key!(os_family = \"target-family\", optional);\n+        key!(families, TargetFamilies);\n         key!(abi_return_struct_as_int, bool);\n         key!(is_like_osx, bool);\n         key!(is_like_solaris, bool);\n@@ -2042,7 +2048,7 @@ impl ToJson for Target {\n         target_option_val!(exe_suffix);\n         target_option_val!(staticlib_prefix);\n         target_option_val!(staticlib_suffix);\n-        target_option_val!(os_family, \"target-family\");\n+        target_option_val!(families, \"target-family\");\n         target_option_val!(abi_return_struct_as_int);\n         target_option_val!(is_like_osx);\n         target_option_val!(is_like_solaris);"}, {"sha": "602fb6eb6413b7ac50d82ad5dde01e74351227e1", "filename": "compiler/rustc_target/src/spec/netbsd_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnetbsd_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -5,7 +5,7 @@ pub fn opts() -> TargetOptions {\n         os: \"netbsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         no_default_libraries: false,\n         has_rpath: true,"}, {"sha": "8f33bacd9228eb34166cbadd488257d8f728067c", "filename": "compiler/rustc_target/src/spec/openbsd_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fopenbsd_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -5,7 +5,7 @@ pub fn opts() -> TargetOptions {\n         os: \"openbsd\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         has_rpath: true,\n         abi_return_struct_as_int: true,"}, {"sha": "72052b9e2e2e3e19f7f328057a057dc71a1f503a", "filename": "compiler/rustc_target/src/spec/redox_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fredox_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -6,7 +6,7 @@ pub fn opts() -> TargetOptions {\n         env: \"relibc\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         has_rpath: true,\n         position_independent_executables: true,"}, {"sha": "4c922eb5cea55081d8c251501b657d412dd8adbf", "filename": "compiler/rustc_target/src/spec/solaris_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -6,7 +6,7 @@ pub fn opts() -> TargetOptions {\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         is_like_solaris: true,\n         limit_rdylib_exports: false, // Linker doesn't support this\n         eh_frame_header: false,"}, {"sha": "0e8e87f2dff5c9512574cc8c5b192d882c5a6d58", "filename": "compiler/rustc_target/src/spec/vxworks_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fvxworks_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -9,7 +9,7 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".vxe\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         linker_is_gnu: true,\n         has_rpath: true,\n         has_elf_tls: true,"}, {"sha": "ddf28b423f0d2df4266fe4780399b384eb6edc70", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -38,7 +38,7 @@ pub fn target() -> Target {\n         is_like_emscripten: true,\n         panic_strategy: PanicStrategy::Unwind,\n         post_link_args,\n-        os_family: Some(\"unix\".to_string()),\n+        families: vec![\"unix\".to_string()],\n         ..options\n     };\n     Target {"}, {"sha": "35a52896f6fa628e6842da4b68de2029b9a59260", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -71,7 +71,7 @@ pub fn opts() -> TargetOptions {\n         dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n-        os_family: Some(\"windows\".to_string()),\n+        families: vec![\"windows\".to_string()],\n         is_like_windows: true,\n         allows_weak_linkage: false,\n         pre_link_args,"}, {"sha": "0d58618a449a901bcf5955a352885c96b3e0156a", "filename": "compiler/rustc_target/src/spec/windows_msvc_base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4afea69090b5501c17b16957d090658a1b3c2216/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_msvc_base.rs?ref=4afea69090b5501c17b16957d090658a1b3c2216", "patch": "@@ -13,7 +13,7 @@ pub fn opts() -> TargetOptions {\n         exe_suffix: \".exe\".to_string(),\n         staticlib_prefix: String::new(),\n         staticlib_suffix: \".lib\".to_string(),\n-        os_family: Some(\"windows\".to_string()),\n+        families: vec![\"windows\".to_string()],\n         crt_static_allows_dylibs: true,\n         crt_static_respected: true,\n         requires_uwtable: true,"}]}