{"sha": "7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYjJlNzllYTg3Y2M0NWQ3MGRjMWZjMzRkNGUzYjgyMmI2YTZkODg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-11-21T17:13:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-21T17:13:00Z"}, "message": "Rollup merge of #46103 - zackmdavis:dead_code_lint_should_say_never_constructed_for_variants, r=arielb1\n\ndead code lint to say \"never constructed\" for variants\n\nAs reported in #19140, #44083, and #44565, some users were confused when\nthe dead-code lint reported an enum variant to be \"unused\" when it was\nmatched on (but not constructed). This wording change makes it clearer\nthat the lint is in fact checking for construction.\n\nWe continue to say \"used\" for all other items (it's tempting to say\n\"called\" for functions and methods, but this turns out not to be\ncorrect: functions can be passed as arguments and the dead-code lint\nisn't special-casing that or anything).\n\nResolves #19140.\n\nr? @pnkfelix", "tree": {"sha": "9a8dfda1cd2efd3103e8f5c6faea30987079250d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a8dfda1cd2efd3103e8f5c6faea30987079250d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88", "html_url": "https://github.com/rust-lang/rust/commit/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0af67a4df0219d518ecba6711ff8ff6680a9a2ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/0af67a4df0219d518ecba6711ff8ff6680a9a2ec", "html_url": "https://github.com/rust-lang/rust/commit/0af67a4df0219d518ecba6711ff8ff6680a9a2ec"}, {"sha": "1a9dc2e9023ffd42d7c1b06bf149a98df7a911af", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a9dc2e9023ffd42d7c1b06bf149a98df7a911af", "html_url": "https://github.com/rust-lang/rust/commit/1a9dc2e9023ffd42d7c1b06bf149a98df7a911af"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "21eb772b1b37664d09a2c797aa87d0d57c4cc2a2", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88", "patch": "@@ -531,13 +531,15 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n                       id: ast::NodeId,\n                       span: syntax_pos::Span,\n                       name: ast::Name,\n-                      node_type: &str) {\n+                      node_type: &str,\n+                      participle: &str) {\n         if !name.as_str().starts_with(\"_\") {\n             self.tcx\n                 .lint_node(lint::builtin::DEAD_CODE,\n                            id,\n                            span,\n-                           &format!(\"{} is never used: `{}`\", node_type, name));\n+                           &format!(\"{} is never {}: `{}`\",\n+                                    node_type, participle, name));\n         }\n     }\n }\n@@ -570,7 +572,8 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n                 item.id,\n                 span,\n                 item.name,\n-                item.node.descriptive_variant()\n+                item.node.descriptive_variant(),\n+                \"used\",\n             );\n         } else {\n             // Only continue if we didn't warn\n@@ -583,23 +586,24 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n                      g: &'tcx hir::Generics,\n                      id: ast::NodeId) {\n         if self.should_warn_about_variant(&variant.node) {\n-            self.warn_dead_code(variant.node.data.id(), variant.span, variant.node.name, \"variant\");\n+            self.warn_dead_code(variant.node.data.id(), variant.span, variant.node.name,\n+                                \"variant\", \"constructed\");\n         } else {\n             intravisit::walk_variant(self, variant, g, id);\n         }\n     }\n \n     fn visit_foreign_item(&mut self, fi: &'tcx hir::ForeignItem) {\n         if self.should_warn_about_foreign_item(fi) {\n-            self.warn_dead_code(fi.id, fi.span, fi.name, fi.node.descriptive_variant());\n+            self.warn_dead_code(fi.id, fi.span, fi.name,\n+                                fi.node.descriptive_variant(), \"used\");\n         }\n         intravisit::walk_foreign_item(self, fi);\n     }\n \n     fn visit_struct_field(&mut self, field: &'tcx hir::StructField) {\n         if self.should_warn_about_field(&field) {\n-            self.warn_dead_code(field.id, field.span,\n-                                field.name, \"field\");\n+            self.warn_dead_code(field.id, field.span, field.name, \"field\", \"used\");\n         }\n         intravisit::walk_struct_field(self, field);\n     }\n@@ -611,14 +615,15 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n                     self.warn_dead_code(impl_item.id,\n                                         impl_item.span,\n                                         impl_item.name,\n-                                        \"associated const\");\n+                                        \"associated const\",\n+                                        \"used\");\n                 }\n                 self.visit_nested_body(body_id)\n             }\n             hir::ImplItemKind::Method(_, body_id) => {\n                 if !self.symbol_is_live(impl_item.id, None) {\n                     let span = self.tcx.sess.codemap().def_span(impl_item.span);\n-                    self.warn_dead_code(impl_item.id, span, impl_item.name, \"method\");\n+                    self.warn_dead_code(impl_item.id, span, impl_item.name, \"method\", \"used\");\n                 }\n                 self.visit_nested_body(body_id)\n             }"}, {"sha": "d6ca5e6b1d969bdd2549db4e541c3f7b6d6c8caa", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88", "patch": "@@ -74,7 +74,7 @@ pub enum pub_enum3 {\n enum priv_enum { foo2, bar2 } //~ ERROR: enum is never used\n enum used_enum {\n     foo3,\n-    bar3 //~ ERROR variant is never used\n+    bar3 //~ ERROR variant is never constructed\n }\n \n fn f<T>() {}"}, {"sha": "1296cf46e6fe4d803d3a5124ba130941c2e71b77", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88", "patch": "@@ -22,8 +22,8 @@ fn field_read(f: Foo) -> usize {\n }\n \n enum XYZ {\n-    X, //~ ERROR variant is never used\n-    Y { //~ ERROR variant is never used\n+    X, //~ ERROR variant is never constructed\n+    Y { //~ ERROR variant is never constructed\n         a: String,\n         b: i32,\n         c: i32,\n@@ -43,13 +43,13 @@ enum ABC { //~ ERROR enum is never used\n \n // ensure struct variants get warning for their fields\n enum IJK {\n-    I, //~ ERROR variant is never used\n+    I, //~ ERROR variant is never constructed\n     J {\n         a: String,\n         b: i32, //~ ERROR field is never used\n         c: i32, //~ ERROR field is never used\n     },\n-    K //~ ERROR variant is never used\n+    K //~ ERROR variant is never constructed\n \n }\n "}, {"sha": "ee5cf24823d408a80bfab5dea3454172fe31cdbd", "filename": "src/test/compile-fail/lint-dead-code-5.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs?ref=7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88", "patch": "@@ -13,15 +13,15 @@\n \n enum Enum1 {\n     Variant1(isize),\n-    Variant2 //~ ERROR: variant is never used\n+    Variant2 //~ ERROR: variant is never constructed\n }\n \n enum Enum2 {\n     Variant3(bool),\n     #[allow(dead_code)]\n     Variant4(isize),\n-    Variant5 { _x: isize }, //~ ERROR: variant is never used: `Variant5`\n-    Variant6(isize), //~ ERROR: variant is never used: `Variant6`\n+    Variant5 { _x: isize }, //~ ERROR: variant is never constructed: `Variant5`\n+    Variant6(isize), //~ ERROR: variant is never constructed: `Variant6`\n     _Variant7,\n }\n "}, {"sha": "3301560c315008f80bdfbf5e2fec3426d3acec14", "filename": "src/test/compile-fail/lint-dead-code-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs?ref=7eb2e79ea87cc45d70dc1fc34d4e3b822b6a6d88", "patch": "@@ -12,7 +12,7 @@\n \n #[derive(Clone)]\n enum Enum {\n-    Variant1, //~ ERROR: variant is never used\n+    Variant1, //~ ERROR: variant is never constructed\n     Variant2,\n }\n "}]}