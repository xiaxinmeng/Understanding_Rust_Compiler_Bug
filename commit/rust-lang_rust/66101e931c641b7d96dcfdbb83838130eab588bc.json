{"sha": "66101e931c641b7d96dcfdbb83838130eab588bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MTAxZTkzMWM2NDFiN2Q5NmRjZmRiYjgzODM4MTMwZWFiNTg4YmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-22T20:46:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-24T06:28:16Z"}, "message": "simplify", "tree": {"sha": "e7755c4113e079ae6558d2ad2b5e0718ea5c7284", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7755c4113e079ae6558d2ad2b5e0718ea5c7284"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66101e931c641b7d96dcfdbb83838130eab588bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66101e931c641b7d96dcfdbb83838130eab588bc", "html_url": "https://github.com/rust-lang/rust/commit/66101e931c641b7d96dcfdbb83838130eab588bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66101e931c641b7d96dcfdbb83838130eab588bc/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c12a713739e30019497ab0f5e7bfa776122bfc6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c12a713739e30019497ab0f5e7bfa776122bfc6d", "html_url": "https://github.com/rust-lang/rust/commit/c12a713739e30019497ab0f5e7bfa776122bfc6d"}], "stats": {"total": 64, "additions": 25, "deletions": 39}, "files": [{"sha": "cf745890516e19719a158918a0d9ae76a08f4550", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66101e931c641b7d96dcfdbb83838130eab588bc/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66101e931c641b7d96dcfdbb83838130eab588bc/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=66101e931c641b7d96dcfdbb83838130eab588bc", "patch": "@@ -148,15 +148,7 @@ fn convert_ident(ident: &tt::Ident) -> TtToken {\n }\n \n fn convert_punct(p: tt::Punct) -> TtToken {\n-    let kind = match p.char {\n-        // lexer may produce compound tokens for these ones\n-        '.' => T![.],\n-        ':' => T![:],\n-        '=' => T![=],\n-        '!' => T![!],\n-        '-' => T![-],\n-        c => SyntaxKind::from_char(c).unwrap(),\n-    };\n+    let kind = SyntaxKind::from_char(p.char).unwrap();\n     let text = {\n         let mut buf = [0u8; 4];\n         let s: &str = p.char.encode_utf8(&mut buf);"}, {"sha": "8b43d93fe542839f8a61749d07c8238a9611831f", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/66101e931c641b7d96dcfdbb83838130eab588bc/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66101e931c641b7d96dcfdbb83838130eab588bc/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=66101e931c641b7d96dcfdbb83838130eab588bc", "patch": "@@ -342,6 +342,11 @@ impl SyntaxKind {\n             '^' => CARET,\n             '%' => PERCENT,\n             '_' => UNDERSCORE,\n+            '.' => DOT,\n+            ':' => COLON,\n+            '=' => EQ,\n+            '!' => EXCL,\n+            '-' => MINUS,\n             _ => return None,\n         };\n         Some(tok)"}, {"sha": "5f395501ad9caee6d2c9819ef3dc9cdc6e685953", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/66101e931c641b7d96dcfdbb83838130eab588bc/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/66101e931c641b7d96dcfdbb83838130eab588bc/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=66101e931c641b7d96dcfdbb83838130eab588bc", "patch": "@@ -1,7 +1,7 @@\n // Stores definitions which must be used in multiple places\n // See `cargo gen-syntax` (defined in crates/tools/src/main.rs)\n Grammar(\n-    single_byte_tokens: [\n+    punct: [\n         (\";\", \"SEMI\"),\n         (\",\", \"COMMA\"),\n         (\"(\", \"L_PAREN\"),\n@@ -25,9 +25,6 @@ Grammar(\n         (\"^\", \"CARET\"),\n         (\"%\", \"PERCENT\"),\n         (\"_\", \"UNDERSCORE\"),\n-    ],\n-    // Tokens for which the longest match must be chosen (e.g. `..` is a DOTDOT, but `.` is a DOT)\n-    multi_byte_tokens: [\n         (\".\", \"DOT\"),\n         (\"..\", \"DOTDOT\"),\n         (\"...\", \"DOTDOTDOT\"),"}, {"sha": "1d112c0af624b62abaa926d21093fad1e262f944", "filename": "crates/ra_tools/src/boilerplate_gen.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/66101e931c641b7d96dcfdbb83838130eab588bc/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66101e931c641b7d96dcfdbb83838130eab588bc/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs?ref=66101e931c641b7d96dcfdbb83838130eab588bc", "patch": "@@ -160,31 +160,24 @@ fn generate_ast(grammar: &Grammar) -> Result<String> {\n }\n \n fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n-    let single_byte_tokens_values =\n-        grammar.single_byte_tokens.iter().map(|(token, _name)| token.chars().next().unwrap());\n-    let single_byte_tokens = grammar\n-        .single_byte_tokens\n+    let (single_byte_tokens_values, single_byte_tokens): (Vec<_>, Vec<_>) = grammar\n+        .punct\n         .iter()\n-        .map(|(_token, name)| format_ident!(\"{}\", name))\n-        .collect::<Vec<_>>();\n-\n-    let punctuation_values =\n-        grammar.single_byte_tokens.iter().chain(grammar.multi_byte_tokens.iter()).map(\n-            |(token, _name)| {\n-                if \"{}[]()\".contains(token) {\n-                    let c = token.chars().next().unwrap();\n-                    quote! { #c }\n-                } else {\n-                    let cs = token.chars().map(|c| Punct::new(c, Spacing::Joint));\n-                    quote! { #(#cs)* }\n-                }\n-            },\n-        );\n-    let punctuation = single_byte_tokens\n-        .clone()\n-        .into_iter()\n-        .chain(grammar.multi_byte_tokens.iter().map(|(_token, name)| format_ident!(\"{}\", name)))\n-        .collect::<Vec<_>>();\n+        .filter(|(token, _name)| token.len() == 1)\n+        .map(|(token, name)| (token.chars().next().unwrap(), format_ident!(\"{}\", name)))\n+        .unzip();\n+\n+    let punctuation_values = grammar.punct.iter().map(|(token, _name)| {\n+        if \"{}[]()\".contains(token) {\n+            let c = token.chars().next().unwrap();\n+            quote! { #c }\n+        } else {\n+            let cs = token.chars().map(|c| Punct::new(c, Spacing::Joint));\n+            quote! { #(#cs)* }\n+        }\n+    });\n+    let punctuation =\n+        grammar.punct.iter().map(|(_token, name)| format_ident!(\"{}\", name)).collect::<Vec<_>>();\n \n     let full_keywords_values = &grammar.keywords;\n     let full_keywords =\n@@ -294,8 +287,7 @@ fn reformat(text: impl std::fmt::Display) -> Result<String> {\n \n #[derive(Deserialize, Debug)]\n struct Grammar {\n-    single_byte_tokens: Vec<(String, String)>,\n-    multi_byte_tokens: Vec<(String, String)>,\n+    punct: Vec<(String, String)>,\n     keywords: Vec<String>,\n     contextual_keywords: Vec<String>,\n     literals: Vec<String>,"}]}