{"sha": "3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZThkNDQ0YWZmZWZiNjFlZTczM2FhMjFkYTdmMWViYzFiNTE1ZTk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-09-08T21:22:22Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-22T02:38:00Z"}, "message": "rustc_target: separate out an individual Align from AbiAndPrefAlign.", "tree": {"sha": "4982c64d3bfd5a9f40a583414467a2a5689c4d9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4982c64d3bfd5a9f40a583414467a2a5689c4d9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "html_url": "https://github.com/rust-lang/rust/commit/3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d56e8920852adec249c9d8159348a94dcafbd31c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56e8920852adec249c9d8159348a94dcafbd31c", "html_url": "https://github.com/rust-lang/rust/commit/d56e8920852adec249c9d8159348a94dcafbd31c"}], "stats": {"total": 404, "additions": 207, "deletions": 197}, "files": [{"sha": "4e83cc16ab3e13b6e01f52e58a82b8f596b11153", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -12,7 +12,7 @@\n \n use super::{Pointer, EvalResult, AllocId};\n \n-use ty::layout::{Size, AbiAndPrefAlign};\n+use ty::layout::{Size, Align, AbiAndPrefAlign};\n use syntax::ast::Mutability;\n use std::iter;\n use mir;\n@@ -104,7 +104,7 @@ impl<Tag, Extra: Default> Allocation<Tag, Extra> {\n     }\n \n     pub fn from_byte_aligned_bytes(slice: &[u8]) -> Self {\n-        Allocation::from_bytes(slice, AbiAndPrefAlign::from_bytes(1, 1).unwrap())\n+        Allocation::from_bytes(slice, AbiAndPrefAlign::new(Align::from_bytes(1).unwrap()))\n     }\n \n     pub fn undef(size: Size, align: AbiAndPrefAlign) -> Self {"}, {"sha": "1a33d3623964f26ad95c50b9b5adc7b98002b16c", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -527,7 +527,7 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n                 write!(f, \"tried to interpret an invalid 32-bit value as a char: {}\", c),\n             AlignmentCheckFailed { required, has } =>\n                write!(f, \"tried to access memory with alignment {}, but alignment {} is required\",\n-                      has.abi(), required.abi()),\n+                      has.abi.bytes(), required.abi.bytes()),\n             TypeNotPrimitive(ty) =>\n                 write!(f, \"expected primitive type, got {}\", ty),\n             Layout(ref err) =>\n@@ -537,8 +537,9 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n             MachineError(ref inner) =>\n                 write!(f, \"{}\", inner),\n             IncorrectAllocationInformation(size, size2, align, align2) =>\n-                write!(f, \"incorrect alloc info: expected size {} and align {}, got size {} and \\\n-                       align {}\", size.bytes(), align.abi(), size2.bytes(), align2.abi()),\n+                write!(f, \"incorrect alloc info: expected size {} and align {}, \\\n+                           got size {} and align {}\",\n+                    size.bytes(), align.abi.bytes(), size2.bytes(), align2.abi.bytes()),\n             Panic { ref msg, line, col, ref file } =>\n                 write!(f, \"the evaluated program panicked at '{}', {}:{}:{}\", msg, file, line, col),\n             InvalidDiscriminant(val) =>"}, {"sha": "7a5ac36420fb907498bd0799af6aa5f728af8488", "filename": "src/librustc/session/code_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc%2Fsession%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fcode_stats.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -71,7 +71,7 @@ impl CodeStats {\n         let info = TypeSizeInfo {\n             kind,\n             type_description: type_desc.to_string(),\n-            align: align.abi(),\n+            align: align.abi.bytes(),\n             overall_size: overall_size.bytes(),\n             packed: packed,\n             opt_discr_size: opt_discr_size.map(|s| s.bytes()),"}, {"sha": "637686fd50eacc49925c2ad8dcfc15b82edbaeb8", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -259,7 +259,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n             let pack = {\n                 let pack = repr.pack as u64;\n-                AbiAndPrefAlign::from_bytes(pack, pack).unwrap()\n+                AbiAndPrefAlign::new(Align::from_bytes(pack).unwrap())\n             };\n \n             let mut align = if packed {\n@@ -274,7 +274,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n             let mut optimize = !repr.inhibit_struct_field_reordering_opt();\n             if let StructKind::Prefixed(_, align) = kind {\n-                optimize &= align.abi() == 1;\n+                optimize &= align.abi.bytes() == 1;\n             }\n \n             if optimize {\n@@ -285,7 +285,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 };\n                 let optimizing = &mut inverse_memory_index[..end];\n                 let field_align = |f: &TyLayout<'_>| {\n-                    if packed { f.align.min(pack).abi() } else { f.align.abi() }\n+                    if packed { f.align.min(pack).abi } else { f.align.abi }\n                 };\n                 match kind {\n                     StructKind::AlwaysSized |\n@@ -352,7 +352,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n             if repr.align > 0 {\n                 let repr_align = repr.align as u64;\n-                align = align.max(AbiAndPrefAlign::from_bytes(repr_align, repr_align).unwrap());\n+                align = align.max(AbiAndPrefAlign::new(Align::from_bytes(repr_align).unwrap()));\n                 debug!(\"univariant repr_align: {:?}\", repr_align);\n             }\n \n@@ -394,7 +394,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                         (Some((i, field)), None, None) => {\n                             // Field fills the struct and it has a scalar or scalar pair ABI.\n                             if offsets[i].bytes() == 0 &&\n-                               align.abi() == field.align.abi() &&\n+                               align.abi == field.align.abi &&\n                                size == field.size {\n                                 match field.abi {\n                                     // For plain scalars, or vectors of them, we can't unpack\n@@ -682,7 +682,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n \n                     let pack = {\n                         let pack = def.repr.pack as u64;\n-                        AbiAndPrefAlign::from_bytes(pack, pack).unwrap()\n+                        AbiAndPrefAlign::new(Align::from_bytes(pack).unwrap())\n                     };\n \n                     let mut align = if packed {\n@@ -694,7 +694,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     if def.repr.align > 0 {\n                         let repr_align = def.repr.align as u64;\n                         align = align.max(\n-                            AbiAndPrefAlign::from_bytes(repr_align, repr_align).unwrap());\n+                            AbiAndPrefAlign::new(Align::from_bytes(repr_align).unwrap()));\n                     }\n \n                     let optimize = !def.repr.inhibit_union_abi_opt();\n@@ -964,7 +964,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 let mut size = Size::ZERO;\n \n                 // We're interested in the smallest alignment, so start large.\n-                let mut start_align = AbiAndPrefAlign::from_bytes(256, 256).unwrap();\n+                let mut start_align = AbiAndPrefAlign::new(Align::from_bytes(256).unwrap());\n                 assert_eq!(Integer::for_abi_align(dl, start_align), None);\n \n                 // repr(C) on an enum tells us to make a (tag, union) layout,\n@@ -989,7 +989,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     // Find the first field we can't move later\n                     // to make room for a larger discriminant.\n                     for field in st.fields.index_by_increasing_offset().map(|j| field_layouts[j]) {\n-                        if !field.is_zst() || field.align.abi() != 1 {\n+                        if !field.is_zst() || field.align.abi.bytes() != 1 {\n                             start_align = start_align.min(field.align);\n                             break;\n                         }\n@@ -1251,7 +1251,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                             name: name.to_string(),\n                             offset: offset.bytes(),\n                             size: field_layout.size.bytes(),\n-                            align: field_layout.align.abi(),\n+                            align: field_layout.align.abi.bytes(),\n                         }\n                     }\n                 }\n@@ -1264,7 +1264,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 } else {\n                     session::SizeKind::Exact\n                 },\n-                align: layout.align.abi(),\n+                align: layout.align.abi.bytes(),\n                 size: if min_size.bytes() == 0 {\n                     layout.size.bytes()\n                 } else {\n@@ -1994,12 +1994,16 @@ impl_stable_hash_for!(enum ::ty::layout::Primitive {\n     Pointer\n });\n \n-impl<'gcx> HashStable<StableHashingContext<'gcx>> for AbiAndPrefAlign {\n+impl_stable_hash_for!(struct ::ty::layout::AbiAndPrefAlign {\n+    abi,\n+    pref\n+});\n+\n+impl<'gcx> HashStable<StableHashingContext<'gcx>> for Align {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'gcx>,\n                                           hasher: &mut StableHasher<W>) {\n-        self.abi().hash_stable(hcx, hasher);\n-        self.pref().hash_stable(hcx, hasher);\n+        self.bytes().hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "ccab0ce69e3a6fcfc22e81ca718c0ef57cc9fae9", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -73,7 +73,7 @@ impl ArgAttributesExt for ArgAttributes {\n             if let Some(align) = self.pointee_align {\n                 llvm::LLVMRustAddAlignmentAttr(llfn,\n                                                idx.as_uint(),\n-                                               align.abi() as u32);\n+                                               align.abi.bytes() as u32);\n             }\n             regular.for_each_kind(|attr| attr.apply_llfn(idx, llfn));\n         }\n@@ -98,7 +98,7 @@ impl ArgAttributesExt for ArgAttributes {\n             if let Some(align) = self.pointee_align {\n                 llvm::LLVMRustAddAlignmentCallSiteAttr(callsite,\n                                                        idx.as_uint(),\n-                                                       align.abi() as u32);\n+                                                       align.abi.bytes() as u32);\n             }\n             regular.for_each_kind(|attr| attr.apply_callsite(idx, callsite));\n         }"}, {"sha": "8da64edc92f03ba4670cf6a5f90d09107d473e8e", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -475,7 +475,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 llvm::LLVMBuildAlloca(self.llbuilder, ty,\n                                       name.as_ptr())\n             };\n-            llvm::LLVMSetAlignment(alloca, align.abi() as c_uint);\n+            llvm::LLVMSetAlignment(alloca, align.abi.bytes() as c_uint);\n             alloca\n         }\n     }\n@@ -494,7 +494,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                 llvm::LLVMBuildArrayAlloca(self.llbuilder, ty, len,\n                                            name.as_ptr())\n             };\n-            llvm::LLVMSetAlignment(alloca, align.abi() as c_uint);\n+            llvm::LLVMSetAlignment(alloca, align.abi.bytes() as c_uint);\n             alloca\n         }\n     }\n@@ -503,7 +503,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         self.count_insn(\"load\");\n         unsafe {\n             let load = llvm::LLVMBuildLoad(self.llbuilder, ptr, noname());\n-            llvm::LLVMSetAlignment(load, align.abi() as c_uint);\n+            llvm::LLVMSetAlignment(load, align.abi.bytes() as c_uint);\n             load\n         }\n     }\n@@ -658,7 +658,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n             let align = if flags.contains(MemFlags::UNALIGNED) {\n                 1\n             } else {\n-                align.abi() as c_uint\n+                align.abi.bytes() as c_uint\n             };\n             llvm::LLVMSetAlignment(store, align);\n             if flags.contains(MemFlags::VOLATILE) {\n@@ -893,8 +893,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let dst = self.pointercast(dst, self.cx().type_i8p());\n         let src = self.pointercast(src, self.cx().type_i8p());\n         unsafe {\n-            llvm::LLVMRustBuildMemCpy(self.llbuilder, dst, dst_align.abi() as c_uint,\n-                                      src, src_align.abi() as c_uint, size, is_volatile);\n+            llvm::LLVMRustBuildMemCpy(self.llbuilder, dst, dst_align.abi.bytes() as c_uint,\n+                                      src, src_align.abi.bytes() as c_uint, size, is_volatile);\n         }\n     }\n \n@@ -913,8 +913,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let dst = self.pointercast(dst, self.cx().type_i8p());\n         let src = self.pointercast(src, self.cx().type_i8p());\n         unsafe {\n-            llvm::LLVMRustBuildMemMove(self.llbuilder, dst, dst_align.abi() as c_uint,\n-                                      src, src_align.abi() as c_uint, size, is_volatile);\n+            llvm::LLVMRustBuildMemMove(self.llbuilder, dst, dst_align.abi.bytes() as c_uint,\n+                                      src, src_align.abi.bytes() as c_uint, size, is_volatile);\n         }\n     }\n \n@@ -930,7 +930,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let intrinsic_key = format!(\"llvm.memset.p0i8.i{}\", ptr_width);\n         let llintrinsicfn = self.cx().get_intrinsic(&intrinsic_key);\n         let ptr = self.pointercast(ptr, self.cx().type_i8p());\n-        let align = self.cx().const_u32(align.abi() as u32);\n+        let align = self.cx().const_u32(align.abi.bytes() as u32);\n         let volatile = self.cx().const_bool(flags.contains(MemFlags::VOLATILE));\n         self.call(llintrinsicfn, &[ptr, fill_byte, size, align, volatile], None);\n     }"}, {"sha": "b5b2e22fed067c595482de7e316aec96ffd258fe", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -28,7 +28,7 @@ use value::Value;\n use rustc::ty::{self, Ty};\n use rustc_codegen_ssa::traits::*;\n \n-use rustc::ty::layout::{self, Size, AbiAndPrefAlign, LayoutOf};\n+use rustc::ty::layout::{self, Size, Align, AbiAndPrefAlign, LayoutOf};\n \n use rustc::hir::{self, CodegenFnAttrs, CodegenFnAttrFlags};\n \n@@ -94,15 +94,15 @@ fn set_global_alignment(cx: &CodegenCx<'ll, '_>,\n     // Note: GCC and Clang also allow `__attribute__((aligned))` on variables,\n     // which can force it to be smaller.  Rust doesn't support this yet.\n     if let Some(min) = cx.sess().target.target.options.min_global_align {\n-        match ty::layout::AbiAndPrefAlign::from_bits(min, min) {\n-            Ok(min) => align = align.max(min),\n+        match Align::from_bits(min) {\n+            Ok(min) => align = align.max(AbiAndPrefAlign::new(min)),\n             Err(err) => {\n                 cx.sess().err(&format!(\"invalid minimum global alignment: {}\", err));\n             }\n         }\n     }\n     unsafe {\n-        llvm::LLVMSetAlignment(gv, align.abi() as u32);\n+        llvm::LLVMSetAlignment(gv, align.abi.bytes() as u32);\n     }\n }\n \n@@ -219,7 +219,7 @@ impl StaticMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             unsafe {\n                 // Upgrade the alignment in cases where the same constant is used with different\n                 // alignment requirements\n-                let llalign = align.abi() as u32;\n+                let llalign = align.abi.bytes() as u32;\n                 if llalign > llvm::LLVMGetAlignment(gv) {\n                     llvm::LLVMSetAlignment(gv, llalign);\n                 }"}, {"sha": "4cee39570423fbc935d4657e8d41831d37457236", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -323,7 +323,7 @@ fn fixed_vec_metadata(\n         llvm::LLVMRustDIBuilderCreateArrayType(\n             DIB(cx),\n             size.bits(),\n-            align.abi_bits() as u32,\n+            align.abi.bits() as u32,\n             element_type_metadata,\n             subscripts)\n     };\n@@ -787,7 +787,7 @@ fn basic_type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n             DIB(cx),\n             name.as_ptr(),\n             size.bits(),\n-            align.abi_bits() as u32,\n+            align.abi.bits() as u32,\n             encoding)\n     };\n \n@@ -818,7 +818,7 @@ fn pointer_type_metadata(\n             DIB(cx),\n             pointee_type_metadata,\n             pointer_size.bits(),\n-            pointer_align.abi_bits() as u32,\n+            pointer_align.abi.bits() as u32,\n             name.as_ptr())\n     }\n }\n@@ -1563,7 +1563,7 @@ fn prepare_enum_metadata(\n                         file_metadata,\n                         UNKNOWN_LINE_NUMBER,\n                         discriminant_size.bits(),\n-                        discriminant_align.abi_bits() as u32,\n+                        discriminant_align.abi.bits() as u32,\n                         create_DIArray(DIB(cx), &enumerators_metadata),\n                         discriminant_base_type_metadata, true)\n                 };\n@@ -1607,7 +1607,7 @@ fn prepare_enum_metadata(\n                 file_metadata,\n                 UNKNOWN_LINE_NUMBER,\n                 layout.size.bits(),\n-                layout.align.abi_bits() as u32,\n+                layout.align.abi.bits() as u32,\n                 DIFlags::FlagZero,\n                 None,\n                 0, // RuntimeLang\n@@ -1655,7 +1655,7 @@ fn prepare_enum_metadata(\n                     file_metadata,\n                     UNKNOWN_LINE_NUMBER,\n                     size.bits(),\n-                    align.abi_bits() as u32,\n+                    align.abi.bits() as u32,\n                     layout.fields.offset(0).bits(),\n                     DIFlags::FlagArtificial,\n                     discr_metadata))\n@@ -1675,7 +1675,7 @@ fn prepare_enum_metadata(\n                     file_metadata,\n                     UNKNOWN_LINE_NUMBER,\n                     size.bits(),\n-                    align.abi_bits() as u32,\n+                    align.abi.bits() as u32,\n                     layout.fields.offset(0).bits(),\n                     DIFlags::FlagArtificial,\n                     discr_metadata))\n@@ -1692,7 +1692,7 @@ fn prepare_enum_metadata(\n             file_metadata,\n             UNKNOWN_LINE_NUMBER,\n             layout.size.bits(),\n-            layout.align.abi_bits() as u32,\n+            layout.align.abi.bits() as u32,\n             DIFlags::FlagZero,\n             discriminator_metadata,\n             empty_array,\n@@ -1709,7 +1709,7 @@ fn prepare_enum_metadata(\n             file_metadata,\n             UNKNOWN_LINE_NUMBER,\n             layout.size.bits(),\n-            layout.align.abi_bits() as u32,\n+            layout.align.abi.bits() as u32,\n             DIFlags::FlagZero,\n             None,\n             type_array,\n@@ -1803,7 +1803,7 @@ fn set_members_of_composite_type(cx: &CodegenCx<'ll, '_>,\n                     unknown_file_metadata(cx),\n                     UNKNOWN_LINE_NUMBER,\n                     member_description.size.bits(),\n-                    member_description.align.abi_bits() as u32,\n+                    member_description.align.abi.bits() as u32,\n                     member_description.offset.bits(),\n                     match member_description.discriminant {\n                         None => None,\n@@ -1851,7 +1851,7 @@ fn create_struct_stub(\n             unknown_file_metadata(cx),\n             UNKNOWN_LINE_NUMBER,\n             struct_size.bits(),\n-            struct_align.abi_bits() as u32,\n+            struct_align.abi.bits() as u32,\n             DIFlags::FlagZero,\n             None,\n             empty_array,\n@@ -1889,7 +1889,7 @@ fn create_union_stub(\n             unknown_file_metadata(cx),\n             UNKNOWN_LINE_NUMBER,\n             union_size.bits(),\n-            union_align.abi_bits() as u32,\n+            union_align.abi.bits() as u32,\n             DIFlags::FlagZero,\n             Some(empty_array),\n             0, // RuntimeLang\n@@ -1958,7 +1958,7 @@ pub fn create_global_var_metadata(\n                                                     is_local_to_unit,\n                                                     global,\n                                                     None,\n-                                                    global_align.abi() as u32,\n+                                                    global_align.abi.bytes() as u32,\n         );\n     }\n }\n@@ -1996,7 +1996,7 @@ pub fn create_vtable_metadata(\n             unknown_file_metadata(cx),\n             UNKNOWN_LINE_NUMBER,\n             Size::ZERO.bits(),\n-            cx.tcx.data_layout.pointer_align.abi_bits() as u32,\n+            cx.tcx.data_layout.pointer_align.abi.bits() as u32,\n             DIFlags::FlagArtificial,\n             None,\n             empty_array,"}, {"sha": "199402982c6ee7a082404fb2896663d245686ef2", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -201,7 +201,7 @@ impl DebugInfoBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                         cx.sess().opts.optimize != config::OptLevel::No,\n                         DIFlags::FlagZero,\n                         argument_index,\n-                        align.abi() as u32,\n+                        align.abi.bytes() as u32,\n                     )\n                 };\n                 source_loc::set_debug_location(self,"}, {"sha": "1756fd5b0b193ea2899ba282171a7ed45a3e6457", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -158,7 +158,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             }\n             \"min_align_of\" => {\n                 let tp_ty = substs.type_at(0);\n-                self.cx().const_usize(self.cx().align_of(tp_ty).abi())\n+                self.cx().const_usize(self.cx().align_of(tp_ty).abi.bytes())\n             }\n             \"min_align_of_val\" => {\n                 let tp_ty = substs.type_at(0);\n@@ -167,12 +167,12 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                         glue::size_and_align_of_dst(self, tp_ty, Some(meta));\n                     llalign\n                 } else {\n-                    self.cx().const_usize(self.cx().align_of(tp_ty).abi())\n+                    self.cx().const_usize(self.cx().align_of(tp_ty).abi.bytes())\n                 }\n             }\n             \"pref_align_of\" => {\n                 let tp_ty = substs.type_at(0);\n-                self.cx().const_usize(self.cx().align_of(tp_ty).pref())\n+                self.cx().const_usize(self.cx().align_of(tp_ty).pref.bytes())\n             }\n             \"type_name\" => {\n                 let tp_ty = substs.type_at(0);\n@@ -261,7 +261,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                 let align = if name == \"unaligned_volatile_load\" {\n                     1\n                 } else {\n-                    self.cx().align_of(tp_ty).abi() as u32\n+                    self.cx().align_of(tp_ty).abi.bytes() as u32\n                 };\n                 unsafe {\n                     llvm::LLVMSetAlignment(load, align);\n@@ -1436,7 +1436,7 @@ fn generic_simd_intrinsic(\n \n         // Alignment of T, must be a constant integer value:\n         let alignment_ty = bx.cx().type_i32();\n-        let alignment = bx.cx().const_i32(bx.cx().align_of(in_elem).abi() as i32);\n+        let alignment = bx.cx().const_i32(bx.cx().align_of(in_elem).abi.bytes() as i32);\n \n         // Truncate the mask vector to a vector of i1s:\n         let (mask, mask_ty) = {\n@@ -1536,7 +1536,7 @@ fn generic_simd_intrinsic(\n \n         // Alignment of T, must be a constant integer value:\n         let alignment_ty = bx.cx().type_i32();\n-        let alignment = bx.cx().const_i32(bx.cx().align_of(in_elem).abi() as i32);\n+        let alignment = bx.cx().const_i32(bx.cx().align_of(in_elem).abi.bytes() as i32);\n \n         // Truncate the mask vector to a vector of i1s:\n         let (mask, mask_ty) = {"}, {"sha": "8ce3be36d0bb35219f64639d9400e685fa5a95fa", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -125,14 +125,14 @@ fn struct_llfields<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     for i in layout.fields.index_by_increasing_offset() {\n         let target_offset = layout.fields.offset(i as usize);\n         let field = layout.field(cx, i);\n-        let effective_field_align = layout.align\n-            .min(field.align)\n-            .restrict_for_offset(target_offset);\n-        packed |= effective_field_align.abi() < field.align.abi();\n+        let effective_field_align = AbiAndPrefAlign::new(layout.align.abi\n+            .min(field.align.abi)\n+            .restrict_for_offset(target_offset));\n+        packed |= effective_field_align.abi < field.align.abi;\n \n         debug!(\"struct_llfields: {}: {:?} offset: {:?} target_offset: {:?} \\\n                 effective_field_align: {}\",\n-               i, field, offset, target_offset, effective_field_align.abi());\n+               i, field, offset, target_offset, effective_field_align.abi.bytes());\n         assert!(target_offset >= offset);\n         let padding = target_offset - offset;\n         let padding_align = prev_effective_align.min(effective_field_align);"}, {"sha": "bb28ea74dc0025f8cb767e23e9146b7eff268226", "filename": "src/librustc_codegen_ssa/glue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_ssa%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_ssa%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fglue.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -30,7 +30,7 @@ pub fn size_and_align_of_dst<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n            t, info, layout);\n     if !layout.is_unsized() {\n         let size = bx.cx().const_usize(layout.size.bytes());\n-        let align = bx.cx().const_usize(layout.align.abi());\n+        let align = bx.cx().const_usize(layout.align.abi.bytes());\n         return (size, align);\n     }\n     match t.sty {\n@@ -44,7 +44,7 @@ pub fn size_and_align_of_dst<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n             // The info in this case is the length of the str, so the size is that\n             // times the unit size.\n             (bx.mul(info.unwrap(), bx.cx().const_usize(unit.size.bytes())),\n-             bx.cx().const_usize(unit.align.abi()))\n+             bx.cx().const_usize(unit.align.abi.bytes()))\n         }\n         _ => {\n             // First get the size of all statically known fields.\n@@ -55,7 +55,7 @@ pub fn size_and_align_of_dst<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>>(\n \n             let i = layout.fields.count() - 1;\n             let sized_size = layout.fields.offset(i).bytes();\n-            let sized_align = layout.align.abi();\n+            let sized_align = layout.align.abi.bytes();\n             debug!(\"DST {} statically sized prefix size: {} align: {}\",\n                    t, sized_size, sized_align);\n             let sized_size = bx.cx().const_usize(sized_size);"}, {"sha": "60268533c85d0e830305562853684a4401e7f496", "filename": "src/librustc_codegen_ssa/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmeth.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -108,7 +108,7 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n     let components: Vec<_> = [\n         cx.get_fn(monomorphize::resolve_drop_in_place(cx.tcx(), ty)),\n         cx.const_usize(layout.size.bytes()),\n-        cx.const_usize(layout.align.abi())\n+        cx.const_usize(layout.align.abi.bytes())\n     ].iter().cloned().chain(methods).collect();\n \n     let vtable_const = cx.const_struct(&components, false);"}, {"sha": "693addd441ff6908c8993135706b8cea634cca16", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -280,7 +280,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 scratch.llval\n                             }\n                             Ref(llval, _, align) => {\n-                                assert_eq!(align.abi(), op.layout.align.abi(),\n+                                assert_eq!(align.abi, op.layout.align.abi,\n                                            \"return place is unaligned!\");\n                                 llval\n                             }\n@@ -805,7 +805,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n             Ref(llval, _, align) => {\n-                if arg.is_indirect() && align.abi() < arg.layout.align.abi() {\n+                if arg.is_indirect() && align.abi < arg.layout.align.abi {\n                     // `foo(packed.large_field)`. We can't pass the (unaligned) field directly. I\n                     // think that ATM (Rust 1.16) we only pass temporaries, but we shouldn't\n                     // have scary latent bugs around.\n@@ -1006,7 +1006,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             self.codegen_place(bx, dest)\n         };\n         if fn_ret.is_indirect() {\n-            if dest.align.abi() < dest.layout.align.abi() {\n+            if dest.align.abi < dest.layout.align.abi {\n                 // Currently, MIR code generation does not create calls\n                 // that store directly to fields of packed structs (in\n                 // fact, the calls it creates write only to temps),"}, {"sha": "c604386456c401a599f7f54a71e521732a92c889", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -11,7 +11,7 @@\n use rustc::mir::interpret::{ConstValue, ErrorHandled};\n use rustc::mir;\n use rustc::ty;\n-use rustc::ty::layout::{self, AbiAndPrefAlign, LayoutOf, TyLayout};\n+use rustc::ty::layout::{self, Align, AbiAndPrefAlign, LayoutOf, TyLayout};\n \n use base;\n use MemFlags;\n@@ -348,8 +348,8 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandValue<V> {\n             };\n \n         // FIXME: choose an appropriate alignment, or use dynamic align somehow\n-        let max_align = AbiAndPrefAlign::from_bits(128, 128).unwrap();\n-        let min_align = AbiAndPrefAlign::from_bits(8, 8).unwrap();\n+        let max_align = AbiAndPrefAlign::new(Align::from_bits(128).unwrap());\n+        let min_align = AbiAndPrefAlign::new(Align::from_bits(8).unwrap());\n \n         // Allocate an appropriate region on the stack, and copy the value into it\n         let (llsize, _) = glue::size_and_align_of_dst(bx, unsized_ty, Some(llextra));"}, {"sha": "f78f7a50561d95562485af4c1c702f8582c8d00d", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n     ) -> Self {\n         let field = self.layout.field(bx.cx(), ix);\n         let offset = self.layout.fields.offset(ix);\n-        let effective_field_align = self.align.restrict_for_offset(offset);\n+        let effective_field_align = self.align.abi.restrict_for_offset(offset);\n \n         let mut simple = || {\n             // Unions and newtypes only use an offset of 0.\n@@ -123,7 +123,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n                     None\n                 },\n                 layout: field,\n-                align: effective_field_align,\n+                align: AbiAndPrefAlign::new(effective_field_align),\n             }\n         };\n \n@@ -143,7 +143,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n                 if def.repr.packed() {\n                     // FIXME(eddyb) generalize the adjustment when we\n                     // start supporting packing to larger alignments.\n-                    assert_eq!(self.layout.align.abi(), 1);\n+                    assert_eq!(self.layout.align.abi.bytes(), 1);\n                     return simple();\n                 }\n             }\n@@ -197,7 +197,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> PlaceRef<'tcx, V> {\n             llval: bx.pointercast(byte_ptr, bx.cx().type_ptr_to(ll_fty)),\n             llextra: self.llextra,\n             layout: field,\n-            align: effective_field_align,\n+            align: AbiAndPrefAlign::new(effective_field_align),\n         }\n     }\n "}, {"sha": "805c1a343d0444e9e7ce5d164e5fe87b39546146", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -499,7 +499,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let content_ty = self.monomorphize(&content_ty);\n                 let content_layout = bx.cx().layout_of(content_ty);\n                 let llsize = bx.cx().const_usize(content_layout.size.bytes());\n-                let llalign = bx.cx().const_usize(content_layout.align.abi());\n+                let llalign = bx.cx().const_usize(content_layout.align.abi.bytes());\n                 let box_layout = bx.cx().layout_of(bx.tcx().mk_box(content_ty));\n                 let llty_ptr = bx.cx().backend_type(box_layout);\n "}, {"sha": "6a8a9fe817c0ecef62a047b7b91094b310018c30", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -129,7 +129,7 @@ pub fn op_to_const<'tcx>(\n             assert!(meta.is_none());\n             let ptr = ptr.to_ptr()?;\n             let alloc = ecx.memory.get(ptr.alloc_id)?;\n-            assert!(alloc.align.abi() >= align.abi());\n+            assert!(alloc.align.abi >= align.abi);\n             assert!(alloc.bytes.len() as u64 - ptr.offset.bytes() >= op.layout.size.bytes());\n             let mut alloc = alloc.clone();\n             alloc.align = align;"}, {"sha": "b3e9008a6b73b3c16413e03eab2ed2958e2522f2", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -636,7 +636,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n                         let (ptr, align) = mplace.to_scalar_ptr_align();\n                         match ptr {\n                             Scalar::Ptr(ptr) => {\n-                                write!(msg, \" by align({}) ref:\", align.abi()).unwrap();\n+                                write!(msg, \" by align({}) ref:\", align.abi.bytes()).unwrap();\n                                 allocs.push(ptr.alloc_id);\n                             }\n                             ptr => write!(msg, \" by integral ref: {:?}\", ptr).unwrap(),\n@@ -665,7 +665,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             Place::Ptr(mplace) => {\n                 match mplace.ptr {\n                     Scalar::Ptr(ptr) => {\n-                        trace!(\"by align({}) ref:\", mplace.align.abi());\n+                        trace!(\"by align({}) ref:\", mplace.align.abi.bytes());\n                         self.memory.dump_alloc(ptr.alloc_id);\n                     }\n                     ptr => trace!(\" integral by ref: {:?}\", ptr),"}, {"sha": "bbee6e0b49ae0b3d5a1a080b503203b77392f076", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -60,7 +60,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         match intrinsic_name {\n             \"min_align_of\" => {\n                 let elem_ty = substs.type_at(0);\n-                let elem_align = self.layout_of(elem_ty)?.align.abi();\n+                let elem_align = self.layout_of(elem_ty)?.align.abi.bytes();\n                 let align_val = Scalar::from_uint(elem_align, dest.layout.size);\n                 self.write_scalar(align_val, dest)?;\n             }"}, {"sha": "681e732975428fba268102a5cad0011e2ed6d75a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -21,7 +21,7 @@ use std::ptr;\n use std::borrow::Cow;\n \n use rustc::ty::{self, Instance, ParamEnv, query::TyCtxtAt};\n-use rustc::ty::layout::{self, AbiAndPrefAlign, TargetDataLayout, Size, HasDataLayout};\n+use rustc::ty::layout::{self, Align, AbiAndPrefAlign, TargetDataLayout, Size, HasDataLayout};\n pub use rustc::mir::interpret::{truncate, write_target_uint, read_target_uint};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n \n@@ -268,18 +268,18 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             }\n         };\n         // Check alignment\n-        if alloc_align.abi() < required_align.abi() {\n+        if alloc_align.abi < required_align.abi {\n             return err!(AlignmentCheckFailed {\n                 has: alloc_align,\n                 required: required_align,\n             });\n         }\n-        if offset % required_align.abi() == 0 {\n+        if offset % required_align.abi.bytes() == 0 {\n             Ok(())\n         } else {\n-            let has = offset % required_align.abi();\n+            let has = offset % required_align.abi.bytes();\n             err!(AlignmentCheckFailed {\n-                has: AbiAndPrefAlign::from_bytes(has, has).unwrap(),\n+                has: AbiAndPrefAlign::new(Align::from_bytes(has).unwrap()),\n                 required: required_align,\n             })\n         }\n@@ -450,7 +450,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         // Could also be a fn ptr or extern static\n         match self.tcx.alloc_map.lock().get(id) {\n             Some(AllocType::Function(..)) => {\n-                (Size::ZERO, AbiAndPrefAlign::from_bytes(1, 1).unwrap())\n+                (Size::ZERO, AbiAndPrefAlign::new(Align::from_bytes(1).unwrap()))\n             }\n             Some(AllocType::Static(did)) => {\n                 // The only way `get` couldn't have worked here is if this is an extern static\n@@ -523,7 +523,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             \"{}({} bytes, alignment {}){}\",\n             msg,\n             alloc.bytes.len(),\n-            alloc.align.abi(),\n+            alloc.align.abi.bytes(),\n             extra\n         );\n \n@@ -865,7 +865,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         allow_ptr_and_undef: bool,\n     ) -> EvalResult<'tcx> {\n         // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n-        let align = AbiAndPrefAlign::from_bytes(1, 1).unwrap();\n+        let align = AbiAndPrefAlign::new(Align::from_bytes(1).unwrap());\n         if size.bytes() == 0 {\n             self.check_align(ptr, align)?;\n             return Ok(());\n@@ -883,7 +883,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n     pub fn read_bytes(&self, ptr: Scalar<M::PointerTag>, size: Size) -> EvalResult<'tcx, &[u8]> {\n         // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n-        let align = AbiAndPrefAlign::from_bytes(1, 1).unwrap();\n+        let align = AbiAndPrefAlign::new(Align::from_bytes(1).unwrap());\n         if size.bytes() == 0 {\n             self.check_align(ptr, align)?;\n             return Ok(&[]);\n@@ -893,7 +893,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n     pub fn write_bytes(&mut self, ptr: Scalar<M::PointerTag>, src: &[u8]) -> EvalResult<'tcx> {\n         // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n-        let align = AbiAndPrefAlign::from_bytes(1, 1).unwrap();\n+        let align = AbiAndPrefAlign::new(Align::from_bytes(1).unwrap());\n         if src.is_empty() {\n             self.check_align(ptr, align)?;\n             return Ok(());\n@@ -910,7 +910,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         count: Size\n     ) -> EvalResult<'tcx> {\n         // Empty accesses don't need to be valid pointers, but they should still be non-NULL\n-        let align = AbiAndPrefAlign::from_bytes(1, 1).unwrap();\n+        let align = AbiAndPrefAlign::new(Align::from_bytes(1).unwrap());\n         if count.bytes() == 0 {\n             self.check_align(ptr, align)?;\n             return Ok(());"}, {"sha": "ed8b7cf1f90d92174057201fc482f9f01d09f58c", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -18,7 +18,8 @@ use std::hash::Hash;\n use rustc::hir;\n use rustc::mir;\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::{self, Size, AbiAndPrefAlign, LayoutOf, TyLayout, HasDataLayout, VariantIdx};\n+use rustc::ty::layout::{self, Size, Align,\n+    AbiAndPrefAlign, LayoutOf, TyLayout, HasDataLayout, VariantIdx};\n \n use super::{\n     GlobalId, AllocId, Allocation, Scalar, EvalResult, Pointer, PointerArithmetic,\n@@ -127,7 +128,8 @@ impl<Tag> MemPlace<Tag> {\n     /// Produces a Place that will error if attempted to be read from or written to\n     #[inline(always)]\n     pub fn null(cx: &impl HasDataLayout) -> Self {\n-        Self::from_scalar_ptr(Scalar::ptr_null(cx), AbiAndPrefAlign::from_bytes(1, 1).unwrap())\n+        Self::from_scalar_ptr(Scalar::ptr_null(cx),\n+            AbiAndPrefAlign::new(Align::from_bytes(1).unwrap()))\n     }\n \n     #[inline(always)]\n@@ -167,7 +169,7 @@ impl<'tcx, Tag> MPlaceTy<'tcx, Tag> {\n     pub fn dangling(layout: TyLayout<'tcx>, cx: &impl HasDataLayout) -> Self {\n         MPlaceTy {\n             mplace: MemPlace::from_scalar_ptr(\n-                Scalar::from_uint(layout.align.abi(), cx.pointer_size()),\n+                Scalar::from_uint(layout.align.abi.bytes(), cx.pointer_size()),\n                 layout.align\n             ),\n             layout\n@@ -368,10 +370,10 @@ where\n         };\n \n         let ptr = base.ptr.ptr_offset(offset, self)?;\n-        let align = base.align\n+        let align = AbiAndPrefAlign::new(base.align.abi\n             // We do not look at `base.layout.align` nor `field_layout.align`, unlike\n             // codegen -- mostly to see if we can get away with that\n-            .restrict_for_offset(offset); // must be last thing that happens\n+            .restrict_for_offset(offset)); // must be last thing that happens\n \n         Ok(MPlaceTy { mplace: MemPlace { ptr, align, meta }, layout: field_layout })\n     }\n@@ -998,7 +1000,8 @@ where\n         if cfg!(debug_assertions) {\n             let (size, align) = self.read_size_and_align_from_vtable(vtable)?;\n             assert_eq!(size, layout.size);\n-            assert_eq!(align.abi(), layout.align.abi()); // only ABI alignment is preserved\n+            // only ABI alignment is preserved\n+            assert_eq!(align.abi, layout.align.abi);\n         }\n \n         let mplace = MPlaceTy {"}, {"sha": "02843b8981242b2f7b198c8c71786525f329577a", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::{Size, AbiAndPrefAlign, LayoutOf};\n+use rustc::ty::layout::{Size, Align, AbiAndPrefAlign, LayoutOf};\n use rustc::mir::interpret::{Scalar, Pointer, EvalResult, PointerArithmetic};\n \n use super::{EvalContext, Machine, MemoryKind};\n@@ -42,7 +42,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         let layout = self.layout_of(ty)?;\n         assert!(!layout.is_unsized(), \"can't create a vtable for an unsized type\");\n         let size = layout.size.bytes();\n-        let align = layout.align.abi();\n+        let align = layout.align.abi.bytes();\n \n         let ptr_size = self.pointer_size();\n         let ptr_align = self.tcx.data_layout.pointer_align;\n@@ -110,6 +110,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             vtable.offset(pointer_size * 2, self)?,\n             pointer_align\n         )?.to_bits(pointer_size)? as u64;\n-        Ok((Size::from_bytes(size), AbiAndPrefAlign::from_bytes(align, align).unwrap()))\n+        Ok((Size::from_bytes(size), AbiAndPrefAlign::new(Align::from_bytes(align).unwrap())))\n     }\n }"}, {"sha": "352569b3b64f792d9f169bc71d3fe7d9e376d3c4", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -13,7 +13,7 @@ use std::hash::Hash;\n use std::ops::RangeInclusive;\n \n use syntax_pos::symbol::Symbol;\n-use rustc::ty::layout::{self, Size, AbiAndPrefAlign, TyLayout, LayoutOf, VariantIdx};\n+use rustc::ty::layout::{self, Size, Align, AbiAndPrefAlign, TyLayout, LayoutOf, VariantIdx};\n use rustc::ty;\n use rustc_data_structures::fx::FxHashSet;\n use rustc::mir::interpret::{\n@@ -463,7 +463,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n                     // for function pointers.\n                     let non_null =\n                         self.ecx.memory.check_align(\n-                            Scalar::Ptr(ptr), AbiAndPrefAlign::from_bytes(1, 1).unwrap()\n+                            Scalar::Ptr(ptr), AbiAndPrefAlign::new(Align::from_bytes(1).unwrap())\n                         ).is_ok() ||\n                         self.ecx.memory.get_fn(ptr).is_ok();\n                     if !non_null {"}, {"sha": "a96c5dd687069e24306a258b33d6c9fb0f76024b", "filename": "src/librustc_mir/util/alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Futil%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_mir%2Futil%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Falignment.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -30,7 +30,7 @@ pub fn is_disaligned<'a, 'tcx, L>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let ty = place.ty(local_decls, tcx).to_ty(tcx);\n     match tcx.layout_raw(param_env.and(ty)) {\n-        Ok(layout) if layout.align.abi() == 1 => {\n+        Ok(layout) if layout.align.abi.bytes() == 1 => {\n             // if the alignment is 1, the type can't be further\n             // disaligned.\n             debug!(\"is_disaligned({:?}) - align = 1\", place);"}, {"sha": "bf497c09bdc719a109f58ee2004c973ae10e4fae", "filename": "src/librustc_target/abi/call/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Farm.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -93,7 +93,7 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>, vfp: bool)\n         }\n     }\n \n-    let align = arg.layout.align.abi();\n+    let align = arg.layout.align.abi.bytes();\n     let total = arg.layout.size;\n     arg.cast_to(Uniform {\n         unit: if align <= 4 { Reg::i32() } else { Reg::i64() },"}, {"sha": "7d78d1d75d52867a23491415766259831e998975", "filename": "src/librustc_target/abi/call/powerpc64.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fpowerpc64.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -13,7 +13,7 @@\n // need to be fixed when PowerPC vector support is added.\n \n use abi::call::{FnType, ArgType, Reg, RegKind, Uniform};\n-use abi::{AbiAndPrefAlign, Endian, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+use abi::{Endian, HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n use spec::HasTargetSpec;\n \n #[derive(Debug, Clone, Copy, PartialEq)]\n@@ -120,8 +120,8 @@ fn classify_arg_ty<'a, Ty, C>(cx: &C, arg: &mut ArgType<'a, Ty>, abi: ABI)\n     } else {\n         // Aggregates larger than a doubleword should be padded\n         // at the tail to fill out a whole number of doublewords.\n-        let align = AbiAndPrefAlign::from_bits(64, 64).unwrap();\n-        (Reg::i64(), size.abi_align(align))\n+        let reg_i64 = Reg::i64();\n+        (reg_i64, size.abi_align(reg_i64.align(cx)))\n     };\n \n     arg.cast_to(Uniform {"}, {"sha": "2eabe94754de453497654cf0b6aff61903b66675", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 90, "deletions": 88, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -13,7 +13,7 @@ pub use self::Primitive::*;\n \n use spec::Target;\n \n-use std::{cmp, fmt};\n+use std::fmt;\n use std::ops::{Add, Deref, Sub, Mul, AddAssign, Range, RangeInclusive};\n \n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -45,22 +45,23 @@ pub struct TargetDataLayout {\n impl Default for TargetDataLayout {\n     /// Creates an instance of `TargetDataLayout`.\n     fn default() -> TargetDataLayout {\n+        let align = |bits| Align::from_bits(bits).unwrap();\n         TargetDataLayout {\n             endian: Endian::Big,\n-            i1_align: AbiAndPrefAlign::from_bits(8, 8).unwrap(),\n-            i8_align: AbiAndPrefAlign::from_bits(8, 8).unwrap(),\n-            i16_align: AbiAndPrefAlign::from_bits(16, 16).unwrap(),\n-            i32_align: AbiAndPrefAlign::from_bits(32, 32).unwrap(),\n-            i64_align: AbiAndPrefAlign::from_bits(32, 64).unwrap(),\n-            i128_align: AbiAndPrefAlign::from_bits(32, 64).unwrap(),\n-            f32_align: AbiAndPrefAlign::from_bits(32, 32).unwrap(),\n-            f64_align: AbiAndPrefAlign::from_bits(64, 64).unwrap(),\n+            i1_align: AbiAndPrefAlign::new(align(8)),\n+            i8_align: AbiAndPrefAlign::new(align(8)),\n+            i16_align: AbiAndPrefAlign::new(align(16)),\n+            i32_align: AbiAndPrefAlign::new(align(32)),\n+            i64_align: AbiAndPrefAlign { abi: align(32), pref: align(64) },\n+            i128_align: AbiAndPrefAlign { abi: align(32), pref: align(64) },\n+            f32_align: AbiAndPrefAlign::new(align(32)),\n+            f64_align: AbiAndPrefAlign::new(align(64)),\n             pointer_size: Size::from_bits(64),\n-            pointer_align: AbiAndPrefAlign::from_bits(64, 64).unwrap(),\n-            aggregate_align: AbiAndPrefAlign::from_bits(0, 64).unwrap(),\n+            pointer_align: AbiAndPrefAlign::new(align(64)),\n+            aggregate_align: AbiAndPrefAlign { abi: align(0), pref: align(64) },\n             vector_align: vec![\n-                (Size::from_bits(64), AbiAndPrefAlign::from_bits(64, 64).unwrap()),\n-                (Size::from_bits(128), AbiAndPrefAlign::from_bits(128, 128).unwrap())\n+                (Size::from_bits(64), AbiAndPrefAlign::new(align(64))),\n+                (Size::from_bits(128), AbiAndPrefAlign::new(align(128))),\n             ],\n             instruction_address_space: 0,\n         }\n@@ -95,11 +96,17 @@ impl TargetDataLayout {\n             if s.is_empty() {\n                 return Err(format!(\"missing alignment for `{}` in \\\"data-layout\\\"\", cause));\n             }\n+            let align_from_bits = |bits| {\n+                Align::from_bits(bits).map_err(|err| {\n+                    format!(\"invalid alignment for `{}` in \\\"data-layout\\\": {}\",\n+                            cause, err)\n+                })\n+            };\n             let abi = parse_bits(s[0], \"alignment\", cause)?;\n             let pref = s.get(1).map_or(Ok(abi), |pref| parse_bits(pref, \"alignment\", cause))?;\n-            AbiAndPrefAlign::from_bits(abi, pref).map_err(|err| {\n-                format!(\"invalid alignment for `{}` in \\\"data-layout\\\": {}\",\n-                        cause, err)\n+            Ok(AbiAndPrefAlign {\n+                abi: align_from_bits(abi)?,\n+                pref: align_from_bits(pref)?,\n             })\n         };\n \n@@ -214,8 +221,7 @@ impl TargetDataLayout {\n         }\n         // Default to natural alignment, which is what LLVM does.\n         // That is, use the size, rounded up to a power of 2.\n-        let align = vec_size.bytes().next_power_of_two();\n-        AbiAndPrefAlign::from_bytes(align, align).unwrap()\n+        AbiAndPrefAlign::new(Align::from_bytes(vec_size.bytes().next_power_of_two()).unwrap())\n     }\n }\n \n@@ -272,13 +278,13 @@ impl Size {\n \n     #[inline]\n     pub fn abi_align(self, align: AbiAndPrefAlign) -> Size {\n-        let mask = align.abi() - 1;\n+        let mask = align.abi.bytes() - 1;\n         Size::from_bytes((self.bytes() + mask) & !mask)\n     }\n \n     #[inline]\n     pub fn is_abi_aligned(self, align: AbiAndPrefAlign) -> bool {\n-        let mask = align.abi() - 1;\n+        let mask = align.abi.bytes() - 1;\n         self.bytes() & mask == 0\n     }\n \n@@ -359,97 +365,93 @@ impl AddAssign for Size {\n     }\n }\n \n-/// Alignments of a type in bytes, both ABI-mandated and preferred.\n-/// Each field is a power of two, giving the alignment a maximum value\n-/// of 2<sup>(2<sup>8</sup> - 1)</sup>, which is limited by LLVM to a\n-/// maximum capacity of 2<sup>29</sup> or 536870912.\n-#[derive(Copy, Clone, PartialEq, Eq, Ord, PartialOrd, Hash, Debug, RustcEncodable, RustcDecodable)]\n-pub struct AbiAndPrefAlign {\n-    abi_pow2: u8,\n-    pref_pow2: u8,\n+/// Alignment of a type in bytes (always a power of two).\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+pub struct Align {\n+    pow2: u8,\n }\n \n-impl AbiAndPrefAlign {\n-    pub fn from_bits(abi: u64, pref: u64) -> Result<AbiAndPrefAlign, String> {\n-        AbiAndPrefAlign::from_bytes(Size::from_bits(abi).bytes(),\n-                          Size::from_bits(pref).bytes())\n+impl Align {\n+    pub fn from_bits(bits: u64) -> Result<Align, String> {\n+        Align::from_bytes(Size::from_bits(bits).bytes())\n     }\n \n-    pub fn from_bytes(abi: u64, pref: u64) -> Result<AbiAndPrefAlign, String> {\n-        let log2 = |align: u64| {\n-            // Treat an alignment of 0 bytes like 1-byte alignment.\n-            if align == 0 {\n-                return Ok(0);\n-            }\n+    pub fn from_bytes(align: u64) -> Result<Align, String> {\n+        // Treat an alignment of 0 bytes like 1-byte alignment.\n+        if align == 0 {\n+            return Ok(Align { pow2: 0 });\n+        }\n \n-            let mut bytes = align;\n-            let mut pow: u8 = 0;\n-            while (bytes & 1) == 0 {\n-                pow += 1;\n-                bytes >>= 1;\n-            }\n-            if bytes != 1 {\n-                Err(format!(\"`{}` is not a power of 2\", align))\n-            } else if pow > 29 {\n-                Err(format!(\"`{}` is too large\", align))\n-            } else {\n-                Ok(pow)\n-            }\n-        };\n+        let mut bytes = align;\n+        let mut pow2: u8 = 0;\n+        while (bytes & 1) == 0 {\n+            pow2 += 1;\n+            bytes >>= 1;\n+        }\n+        if bytes != 1 {\n+            return Err(format!(\"`{}` is not a power of 2\", align));\n+        }\n+        if pow2 > 29 {\n+            return Err(format!(\"`{}` is too large\", align));\n+        }\n \n-        Ok(AbiAndPrefAlign {\n-            abi_pow2: log2(abi)?,\n-            pref_pow2: log2(pref)?,\n-        })\n+        Ok(Align { pow2 })\n     }\n \n-    pub fn abi(self) -> u64 {\n-        1 << self.abi_pow2\n+    pub fn bytes(self) -> u64 {\n+        1 << self.pow2\n     }\n \n-    pub fn pref(self) -> u64 {\n-        1 << self.pref_pow2\n+    pub fn bits(self) -> u64 {\n+        self.bytes() * 8\n     }\n \n-    pub fn abi_bits(self) -> u64 {\n-        self.abi() * 8\n+    /// Compute the best alignment possible for the given offset\n+    /// (the largest power of two that the offset is a multiple of).\n+    ///\n+    /// NB: for an offset of `0`, this happens to return `2^64`.\n+    pub fn max_for_offset(offset: Size) -> Align {\n+        Align {\n+            pow2: offset.bytes().trailing_zeros() as u8,\n+        }\n     }\n \n-    pub fn pref_bits(self) -> u64 {\n-        self.pref() * 8\n+    /// Lower the alignment, if necessary, such that the given offset\n+    /// is aligned to it (the offset is a multiple of the alignment).\n+    pub fn restrict_for_offset(self, offset: Size) -> Align {\n+        self.min(Align::max_for_offset(offset))\n     }\n+}\n \n-    pub fn min(self, other: AbiAndPrefAlign) -> AbiAndPrefAlign {\n+/// A pair of aligments, ABI-mandated and preferred.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(PartialOrd, Ord)] // FIXME(eddyb) remove (error prone/incorrect)\n+pub struct AbiAndPrefAlign {\n+    pub abi: Align,\n+    pub pref: Align,\n+}\n+\n+impl AbiAndPrefAlign {\n+    pub fn new(align: Align) -> AbiAndPrefAlign {\n         AbiAndPrefAlign {\n-            abi_pow2: cmp::min(self.abi_pow2, other.abi_pow2),\n-            pref_pow2: cmp::min(self.pref_pow2, other.pref_pow2),\n+            abi: align,\n+            pref: align,\n         }\n     }\n \n-    pub fn max(self, other: AbiAndPrefAlign) -> AbiAndPrefAlign {\n+    pub fn min(self, other: AbiAndPrefAlign) -> AbiAndPrefAlign {\n         AbiAndPrefAlign {\n-            abi_pow2: cmp::max(self.abi_pow2, other.abi_pow2),\n-            pref_pow2: cmp::max(self.pref_pow2, other.pref_pow2),\n+            abi: self.abi.min(other.abi),\n+            pref: self.pref.min(other.pref),\n         }\n     }\n \n-    /// Compute the best alignment possible for the given offset\n-    /// (the largest power of two that the offset is a multiple of).\n-    ///\n-    /// NB: for an offset of `0`, this happens to return `2^64`.\n-    pub fn max_for_offset(offset: Size) -> AbiAndPrefAlign {\n-        let pow2 = offset.bytes().trailing_zeros() as u8;\n+    pub fn max(self, other: AbiAndPrefAlign) -> AbiAndPrefAlign {\n         AbiAndPrefAlign {\n-            abi_pow2: pow2,\n-            pref_pow2: pow2,\n+            abi: self.abi.max(other.abi),\n+            pref: self.pref.max(other.pref),\n         }\n     }\n-\n-    /// Lower the alignment, if necessary, such that the given offset\n-    /// is aligned to it (the offset is a multiple of the alignment).\n-    pub fn restrict_for_offset(self, offset: Size) -> AbiAndPrefAlign {\n-        self.min(AbiAndPrefAlign::max_for_offset(offset))\n-    }\n }\n \n /// Integers, also used for enum discriminants.\n@@ -511,9 +513,9 @@ impl Integer {\n     pub fn for_abi_align<C: HasDataLayout>(cx: &C, align: AbiAndPrefAlign) -> Option<Integer> {\n         let dl = cx.data_layout();\n \n-        let wanted = align.abi();\n+        let wanted = align.abi;\n         for &candidate in &[I8, I16, I32, I64, I128] {\n-            if wanted == candidate.align(dl).abi() && wanted == candidate.size().bytes() {\n+            if wanted == candidate.align(dl).abi && wanted.bytes() == candidate.size().bytes() {\n                 return Some(candidate);\n             }\n         }\n@@ -524,10 +526,10 @@ impl Integer {\n     pub fn approximate_abi_align<C: HasDataLayout>(cx: &C, align: AbiAndPrefAlign) -> Integer {\n         let dl = cx.data_layout();\n \n-        let wanted = align.abi();\n+        let wanted = align.abi;\n         // FIXME(eddyb) maybe include I128 in the future, when it works everywhere.\n         for &candidate in &[I64, I32, I16] {\n-            if wanted >= candidate.align(dl).abi() && wanted >= candidate.size().bytes() {\n+            if wanted >= candidate.align(dl).abi && wanted.bytes() >= candidate.size().bytes() {\n                 return candidate;\n             }\n         }"}, {"sha": "02b89a84268504d129d34bc5b9fc48c046ca6174", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ce8d444affefb61ee733aa21da7f1ebc1b515e9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3ce8d444affefb61ee733aa21da7f1ebc1b515e9", "patch": "@@ -1779,7 +1779,7 @@ fn check_transparent<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, sp: Span, def_id: De\n         // We are currently checking the type this field came from, so it must be local\n         let span = tcx.hir.span_if_local(field.did).unwrap();\n         let zst = layout.map(|layout| layout.is_zst()).unwrap_or(false);\n-        let align1 = layout.map(|layout| layout.align.abi() == 1).unwrap_or(false);\n+        let align1 = layout.map(|layout| layout.align.abi.bytes() == 1).unwrap_or(false);\n         (span, zst, align1)\n     });\n "}]}