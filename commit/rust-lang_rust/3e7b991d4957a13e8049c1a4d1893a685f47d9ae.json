{"sha": "3e7b991d4957a13e8049c1a4d1893a685f47d9ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlN2I5OTFkNDk1N2ExM2U4MDQ5YzFhNGQxODkzYTY4NWY0N2Q5YWU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-30T20:04:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-30T20:04:18Z"}, "message": "Ensure task stacks start out with a 16-byte aligned entry frame. Should make OSX behave a bit better.", "tree": {"sha": "16a3dee79f7ac50c4c9e68e5932ff5a587f9f7af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16a3dee79f7ac50c4c9e68e5932ff5a587f9f7af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e7b991d4957a13e8049c1a4d1893a685f47d9ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7b991d4957a13e8049c1a4d1893a685f47d9ae", "html_url": "https://github.com/rust-lang/rust/commit/3e7b991d4957a13e8049c1a4d1893a685f47d9ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e7b991d4957a13e8049c1a4d1893a685f47d9ae/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5a43364872dbfa8e036e51599c73e882dfd13c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5a43364872dbfa8e036e51599c73e882dfd13c2", "html_url": "https://github.com/rust-lang/rust/commit/b5a43364872dbfa8e036e51599c73e882dfd13c2"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "180c6afe59c62da5d5195bf84edfc7ff5bf6b453", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e7b991d4957a13e8049c1a4d1893a685f47d9ae/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7b991d4957a13e8049c1a4d1893a685f47d9ae/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3e7b991d4957a13e8049c1a4d1893a685f47d9ae", "patch": "@@ -6272,7 +6272,7 @@ fn trans_exit_task_glue(@glue_fns glues,\n     let vec[ValueRef] V_args = vec();\n \n     auto llfn = glues.exit_task_glue;\n-    let ValueRef lltaskptr = llvm.LLVMGetParam(llfn, 3u);\n+    let ValueRef lltaskptr = llvm.LLVMGetParam(llfn, 4u);\n \n     auto entrybb = llvm.LLVMAppendBasicBlock(llfn, _str.buf(\"entry\"));\n     auto build = new_builder(entrybb);\n@@ -6731,6 +6731,7 @@ fn make_glues(ModuleRef llmod, type_names tn) -> @glue_fns {\n               */\n              exit_task_glue = decl_cdecl_fn(llmod, abi.exit_task_glue_name(),\n                                             T_fn(vec(T_int(),\n+                                                     T_int(),\n                                                      T_int(),\n                                                      T_int(),\n                                                      T_taskptr(tn)),"}, {"sha": "febfd85162c62d0759ca97e8df316eb48ab7c72d", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 48, "deletions": 22, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/3e7b991d4957a13e8049c1a4d1893a685f47d9ae/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3e7b991d4957a13e8049c1a4d1893a685f47d9ae/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=3e7b991d4957a13e8049c1a4d1893a685f47d9ae", "patch": "@@ -58,6 +58,21 @@ align_down(uintptr_t sp)\n     return sp & ~(16 - 1);\n }\n \n+static uintptr_t*\n+align_down(uintptr_t* sp)\n+{\n+    return (uintptr_t*) align_down((uintptr_t)sp);\n+}\n+\n+\n+static void\n+make_aligned_room_for_bytes(uintptr_t*& sp, size_t n)\n+{\n+    uintptr_t tmp = (uintptr_t) sp;\n+    tmp = align_down(tmp - n) + n;\n+    sp = (uintptr_t*) tmp;\n+}\n+\n \n rust_task::rust_task(rust_dom *dom, rust_task_list *state,\n                      rust_task *spawner, const char *name) :\n@@ -131,9 +146,15 @@ rust_task::start(uintptr_t exit_task_glue,\n     dom->logptr(\"exit-task glue\", exit_task_glue);\n     dom->logptr(\"from spawnee\", spawnee_fn);\n \n-    // Set sp to last uintptr_t-sized cell of segment and align down.\n+    // Set sp to last uintptr_t-sized cell of segment\n     rust_sp -= sizeof(uintptr_t);\n-    rust_sp = align_down(rust_sp);\n+\n+    // NB: Darwin needs \"16-byte aligned\" stacks *at the point of the call\n+    // instruction in the caller*. This means that the address at which a\n+    // retpc is pushed must always be 16-byte aligned.\n+    //\n+    // see: \"Mac OS X ABI Function Call Guide\"\n+\n \n     // Begin synthesizing frames. There are two: a \"fully formed\"\n     // exit-task frame at the top of the stack -- that pretends to be\n@@ -145,10 +166,13 @@ rust_task::start(uintptr_t exit_task_glue,\n     // frame when it's done, and exit.\n     uintptr_t *spp = (uintptr_t *)rust_sp;\n \n+\n     // The exit_task_glue frame we synthesize above the frame we activate:\n+    make_aligned_room_for_bytes(spp, 3 * sizeof(uintptr_t));\n     *spp-- = (uintptr_t) 0;          // closure-or-obj\n     *spp-- = (uintptr_t) this;       // task\n     *spp-- = (uintptr_t) 0x0;        // output\n+    I(dom, spp == align_down(spp));\n     *spp-- = (uintptr_t) 0x0;        // retpc\n \n     uintptr_t exit_task_frame_base;\n@@ -172,27 +196,28 @@ rust_task::start(uintptr_t exit_task_glue,\n         *spp-- = (uintptr_t) 0;                // frame_glue_fns\n     }\n \n+    I(dom, args);\n+    if (spawnee_abi == ABI_X86_RUSTBOOT_CDECL)\n+        make_aligned_room_for_bytes(spp, callsz);\n+    else\n+        make_aligned_room_for_bytes(spp, callsz - 2 * sizeof(uintptr_t));\n+\n     // Copy args from spawner to spawnee.\n-    if (args)  {\n-        uintptr_t *src = (uintptr_t *)args;\n-        src += 1;                  // spawn-call output slot\n-        src += 1;                  // spawn-call task slot\n-        src += 1;                  // spawn-call closure-or-obj slot\n-\n-        // Undo previous sp-- so we're pointing at the last word pushed.\n-        ++spp;\n-\n-        // Memcpy all but the task, output and env pointers\n-        callsz -= (3 * sizeof(uintptr_t));\n-        spp = (uintptr_t*) (((uintptr_t)spp) - callsz);\n-        memcpy(spp, src, callsz);\n-\n-        // Move sp down to point to last implicit-arg cell (env).\n-        spp--;\n-    } else {\n-        // We're at root, starting up.\n-        I(dom, callsz==0);\n-    }\n+    uintptr_t *src = (uintptr_t *)args;\n+    src += 1;                  // spawn-call output slot\n+    src += 1;                  // spawn-call task slot\n+    src += 1;                  // spawn-call closure-or-obj slot\n+\n+    // Undo previous sp-- so we're pointing at the last word pushed.\n+    ++spp;\n+\n+    // Memcpy all but the task, output and env pointers\n+    callsz -= (3 * sizeof(uintptr_t));\n+    spp = (uintptr_t*) (((uintptr_t)spp) - callsz);\n+    memcpy(spp, src, callsz);\n+\n+    // Move sp down to point to last implicit-arg cell (env).\n+    spp--;\n \n     // The *implicit* incoming args to the spawnee frame we're\n     // activating:\n@@ -208,6 +233,7 @@ rust_task::start(uintptr_t exit_task_glue,\n         I(dom, spawnee_abi == ABI_X86_RUSTC_FASTCALL);\n     }\n \n+    I(dom, spp == align_down(spp));\n     *spp-- = (uintptr_t) exit_task_glue;  // retpc\n \n     // The context the activate_glue needs to switch stack."}]}