{"sha": "17db1cb5d5a864d611e17d6e2466731c3b50a794", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZGIxY2I1ZDVhODY0ZDYxMWUxN2Q2ZTI0NjY3MzFjM2I1MGE3OTQ=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-09-27T01:14:31Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-10-01T04:45:56Z"}, "message": "Bypass const_item_mutation if const's type has Drop impl", "tree": {"sha": "a7bea18c949809b5fce0211c72d36275ca54f431", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7bea18c949809b5fce0211c72d36275ca54f431"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17db1cb5d5a864d611e17d6e2466731c3b50a794", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl91XwQACgkQ+boUO5X/\nbYKiBA//dNDCRcQaogMHS3xDRL8F9PeShW51UVfcLbzRzTg/dE6SVNz2DpOVsKhw\nu5nFJVLOlnQHPLbFG1H2SbkZ9V8VBh4mHt/Os/ky75/15fn8mYTZLs47gJvHqXbh\n9DRYz6R3NDyY5QCWJM0EA4p/eiXxz+HNar9d6b7JiUmenvyzj8ULronCxTwJgyh4\nZoDb3MinZS35bD9YxgLgu+GoS+JQ8xK3snfi/IaHmQ1vvwxWQJeKXfKmPikWea4V\nDmCnMKsZh/DiIgfK96GEWj/eIfRO3RVe3ez1oq4sUkZc9wqh/ZmdspYlqcgxYi2F\nCVStVcW/iiXN6aNoSEPP0Nsf/9N/NQtkewaeAvVS7VOyQr39TyhiOOvBe715wf8i\nDNV3DbUGQ3U+juAJ7wLg146FiboEZwALf/xWIv6wFWjrxvj0I/KC5Vt40Na7U2gN\nhwMiwGdZUym9AAaTXNDxz8+2sBHHbRoRNWdu3U/BFK8QuXIuMMXNJcwxhJTrbfhI\nA/rS9h+a9y26zkXlWK2/8+8/Xe42Y9VrbaPN6pK5bpogc0Kmz8i6zEUNPBiQohc9\nlevdaoJkCSt/St1dz/IoqkuSRnfRPy7C4AnSBgFnjuFk0GQWXi8ZPGQNC0Q3g6Bb\nv9sIxJOnFu7vWXBcZoepVPGbI/RpjFVadXd7D7dPLhkl2dZ8mkY=\n=z7kB\n-----END PGP SIGNATURE-----", "payload": "tree a7bea18c949809b5fce0211c72d36275ca54f431\nparent b218b952f800c1160b8b5e764ca651b02d678565\nauthor David Tolnay <dtolnay@gmail.com> 1601169271 -0400\ncommitter David Tolnay <dtolnay@gmail.com> 1601527556 -0700\n\nBypass const_item_mutation if const's type has Drop impl\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17db1cb5d5a864d611e17d6e2466731c3b50a794", "html_url": "https://github.com/rust-lang/rust/commit/17db1cb5d5a864d611e17d6e2466731c3b50a794", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17db1cb5d5a864d611e17d6e2466731c3b50a794/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b218b952f800c1160b8b5e764ca651b02d678565", "url": "https://api.github.com/repos/rust-lang/rust/commits/b218b952f800c1160b8b5e764ca651b02d678565", "html_url": "https://github.com/rust-lang/rust/commit/b218b952f800c1160b8b5e764ca651b02d678565"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "b556e2d217d6d1cadc1c9bef97ab91c76f8ea90b", "filename": "compiler/rustc_mir/src/transform/check_const_item_mutation.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/17db1cb5d5a864d611e17d6e2466731c3b50a794/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17db1cb5d5a864d611e17d6e2466731c3b50a794/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_const_item_mutation.rs?ref=17db1cb5d5a864d611e17d6e2466731c3b50a794", "patch": "@@ -31,6 +31,15 @@ impl<'a, 'tcx> ConstMutationChecker<'a, 'tcx> {\n             None\n         }\n     }\n+\n+    fn is_const_item_without_destructor(&self, local: Local) -> Option<DefId> {\n+        let def_id = self.is_const_item(local)?;\n+        match self.tcx.adt_def(def_id).destructor(self.tcx) {\n+            Some(_) => None,\n+            None => Some(def_id),\n+        }\n+    }\n+\n     fn lint_const_item_usage(\n         &self,\n         const_item: DefId,\n@@ -59,7 +68,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ConstMutationChecker<'a, 'tcx> {\n             // Assigning directly to a constant (e.g. `FOO = true;`) is a hard error,\n             // so emitting a lint would be redundant.\n             if !lhs.projection.is_empty() {\n-                if let Some(def_id) = self.is_const_item(lhs.local) {\n+                if let Some(def_id) = self.is_const_item_without_destructor(lhs.local) {\n                     // Don't lint on writes through a pointer\n                     // (e.g. `unsafe { *FOO = 0; *BAR.field = 1; }`)\n                     if !matches!(lhs.projection.last(), Some(PlaceElem::Deref)) {\n@@ -89,7 +98,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ConstMutationChecker<'a, 'tcx> {\n     fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, loc: Location) {\n         if let Rvalue::Ref(_, BorrowKind::Mut { .. }, place) = rvalue {\n             let local = place.local;\n-            if let Some(def_id) = self.is_const_item(local) {\n+            if let Some(def_id) = self.is_const_item_without_destructor(local) {\n                 // If this Rvalue is being used as the right-hand side of a\n                 // `StatementKind::Assign`, see if it ends up getting used as\n                 // the `self` parameter of a method call (as the terminator of our current"}]}